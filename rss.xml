<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-07-08T07:36:39.033057</updated>
  <id>0c536410-dd19-4db5-8618-85a3f3ccbe77</id>

  
    <entry>
      <title>エイリアステンプレート [N2258] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/alias_templates.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/alias_templates.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/alias_templates.md b/lang/cpp11/alias_templates.md
index 2b3424901..c2108cbf7 100644
--- a/lang/cpp11/alias_templates.md
+++ b/lang/cpp11/alias_templates.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>alignas [N2341] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/alignas.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/alignas.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/alignas.md b/lang/cpp11/alignas.md
index 4786b90c9..a97dbd4a0 100644
--- a/lang/cpp11/alignas.md
+++ b/lang/cpp11/alignas.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>alignof [N2341] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/alignof.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/alignof.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/alignof.md b/lang/cpp11/alignof.md
index 35472e462..08731ddf9 100644
--- a/lang/cpp11/alignof.md
+++ b/lang/cpp11/alignof.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>属性構文 [N2761] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/attributes.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/attributes.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/attributes.md b/lang/cpp11/attributes.md
index ef465af36..803308f06 100644
--- a/lang/cpp11/attributes.md
+++ b/lang/cpp11/attributes.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>auto [N1984] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/auto.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/auto.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/auto.md b/lang/cpp11/auto.md
index 23907ac33..5273c1cbf 100644
--- a/lang/cpp11/auto.md
+++ b/lang/cpp11/auto.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C99互換で導入された定義済みマクロ -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/c99_predefined_macros.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/c99_predefined_macros.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C99互換で導入された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++11に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative-page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDC_HOSTED__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実装がホスト実装である場合は&lt;code&gt;1&lt;/code&gt;、そうでない場合（つまり、フリースタンディング実装である場合）は&lt;code&gt;0&lt;/code&gt;として定義される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDC_VERSION__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;標準Cのバージョンを表す値（C95 では &lt;code&gt;199409L&lt;/code&gt;、C99 では &lt;code&gt;199901L&lt;/code&gt;、C11 では &lt;code&gt;201112L&lt;/code&gt;、C90 では定義されていない）。&lt;br /&gt;このマクロが定義されているか否か、および、定義されている場合の値は実装依存である。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDC_ISO_10646__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;wchar_t&lt;/code&gt;の文字が、Unicodeの規格であるISO/IEC 10646の、yyyymm年の仕様を満たしている場合に定義される。&lt;br /&gt;このマクロの値は、&lt;code&gt;yyyymmL&lt;/code&gt;の形式の整数値として定義される。yは年、mは月を表す。yとmそれぞれの個数は、桁数を表す。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;predefined_macros.html&#34;&gt;C++11 更新された定義済みマクロ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1653.htm&#34; target=&#34;_blank&#34;&gt;N1653 Working draft changes for C99 preprocessor synchronization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#630&#34; target=&#34;_blank&#34;&gt;CWG Issue 630. Equality of narrow and wide character values in the basic character set&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>char16_tとchar32_t [N2249] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/char16_32.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/char16_32.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/char16_32.md b/lang/cpp11/char16_32.md
index 5e4af4f70..b60008aa3 100644
--- a/lang/cpp11/char16_32.md
+++ b/lang/cpp11/char16_32.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr [N2235] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/constexpr.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/constexpr.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/constexpr.md b/lang/cpp11/constexpr.md
index b2c08fd27..8e8b96c5f 100644
--- a/lang/cpp11/constexpr.md
+++ b/lang/cpp11/constexpr.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>decltype [N2343] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/decltype.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/decltype.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/decltype.md b/lang/cpp11/decltype.md
index 9eba0a241..05e9f974d 100644
--- a/lang/cpp11/decltype.md
+++ b/lang/cpp11/decltype.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>関数のdefault／delete宣言 [N2346] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/defaulted_and_deleted_functions.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/defaulted_and_deleted_functions.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/defaulted_and_deleted_functions.md b/lang/cpp11/defaulted_and_deleted_functions.md
index 737eded01..bb5bff003 100644
--- a/lang/cpp11/defaulted_and_deleted_functions.md
+++ b/lang/cpp11/defaulted_and_deleted_functions.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>委譲コンストラクタ [N1986] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/delegating_constructors.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/delegating_constructors.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/delegating_constructors.md b/lang/cpp11/delegating_constructors.md
index 95712392b..8bf2fa178 100644
--- a/lang/cpp11/delegating_constructors.md
+++ b/lang/cpp11/delegating_constructors.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>依存名に対するtypenameとtemplateの制限緩和 -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/dependent_name_specifier_outside_of_templates.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/dependent_name_specifier_outside_of_templates.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/dependent_name_specifier_outside_of_templates.md b/lang/cpp11/dependent_name_specifier_outside_of_templates.md
index adc15f438..96c267844 100644
--- a/lang/cpp11/dependent_name_specifier_outside_of_templates.md
+++ b/lang/cpp11/dependent_name_specifier_outside_of_templates.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>registerキーワードを非推奨化 -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/deprecation_of_the_register_keyword.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/deprecation_of_the_register_keyword.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/deprecation_of_the_register_keyword.md b/lang/cpp11/deprecation_of_the_register_keyword.md
index 6853e47bf..de0e1de6e 100644
--- a/lang/cpp11/deprecation_of_the_register_keyword.md
+++ b/lang/cpp11/deprecation_of_the_register_keyword.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>宣言時に要素数を指定した配列オブジェクトの、定義時の要素数を規定 -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/earlier_declarated_array_bounds.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/earlier_declarated_array_bounds.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/earlier_declarated_array_bounds.md b/lang/cpp11/earlier_declarated_array_bounds.md
index 94d746127..133f95327 100644
--- a/lang/cpp11/earlier_declarated_array_bounds.md
+++ b/lang/cpp11/earlier_declarated_array_bounds.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>明示的な型変換演算子のオーバーロード [N2437] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/explicit_conversion_operator.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/explicit_conversion_operator.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/explicit_conversion_operator.md b/lang/cpp11/explicit_conversion_operator.md
index 393523cdf..22d5b87b8 100644
--- a/lang/cpp11/explicit_conversion_operator.md
+++ b/lang/cpp11/explicit_conversion_operator.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>friend宣言できる対象を拡張 [N1791] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/extend_friend_targets.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/extend_friend_targets.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/extend_friend_targets.md b/lang/cpp11/extend_friend_targets.md
index 3452a098b..0a11daa11 100644
--- a/lang/cpp11/extend_friend_targets.md
+++ b/lang/cpp11/extend_friend_targets.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sizeof演算子にクラスの非静的メンバを、オブジェクトを作らずに指定できるようにする -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.md b/lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.md
index 1b8e16d85..d13a9b3d0 100644
--- a/lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.md
+++ b/lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>extern template [N1987] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/extern_template.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/extern_template.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/extern_template.md b/lang/cpp11/extern_template.md
index c32818e01..e62ec385d 100644
--- a/lang/cpp11/extern_template.md
+++ b/lang/cpp11/extern_template.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>機能テストマクロ -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/feature_test_macros.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/feature_test_macros.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;機能テストマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++11に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative-page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;SD-6 は C++11 の機能について以下のテストマクロを定義することを推奨している：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_alias_templates&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200704&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;alias_templates.html&#34;&gt;エイリアステンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_attributes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200809&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;attributes.html&#34;&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200704&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;constexpr.html&#34;&gt;constexpr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_decltype&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200707&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;decltype.html&#34;&gt;decltype&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_delegating_constructors&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200604&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;delegating_constructors.html&#34;&gt;委譲コンストラクタ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_inheriting_constructors&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200802&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;inheriting_constructors.html&#34;&gt;継承コンストラクタ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_initializer_lists&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200806&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;initializer_lists.html&#34;&gt;初期化子リスト&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lambdas&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200907&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;lambda_expressions.html&#34;&gt;ラムダ式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_nsdmi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200809&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;non_static_data_member_initializers.html&#34;&gt;非静的メンバ変数初期化子&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_range_based_for&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200907&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;range_based_for.html&#34;&gt;範囲for文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_raw_strings&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200710&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;raw_string_literals.html&#34;&gt;生文字列リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_ref_qualifiers&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200710&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;ref_qualifier_for_this.html&#34;&gt;&lt;code&gt;*this&lt;/code&gt; のムーブセマンティクス&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_rvalue_references&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200610&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;rvalue_ref_and_move_semantics.html&#34;&gt;右辺値参照&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_static_assert&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200410&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;static_assert.html&#34;&gt;コンパイル時アサート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_unicode_characters&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200704&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;char16_32.html&#34;&gt;ユニコード文字&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_unicode_literals&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200710&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;char16_32.html&#34;&gt;ユニコードリテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_user_defined_literals&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200809&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;user_defined_literals.html&#34;&gt;ユーザー定義リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_variadic_templates&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200704&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;variadic_templates.html&#34;&gt;可変引数テンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(carries_dependency)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200809&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;attributes.html#carries_dependency&#34;&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(noreturn)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200809&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;attributes.html#noreturn&#34;&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations#recs.cpp11&#34; target=&#34;_blank&#34;&gt;SD-6: SG10 Feature Test Recommendations: Standard C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>事前定義識別子__func__ [N1653] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/func.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/func.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/func.md b/lang/cpp11/func.md
index 403f0db99..e6a6baa91 100644
--- a/lang/cpp11/func.md
+++ b/lang/cpp11/func.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>入れ子名の指定にグローバルスコープ :: を付加することを許可 -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/global_scope_syntax_in_nested_name_specifier.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/global_scope_syntax_in_nested_name_specifier.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/global_scope_syntax_in_nested_name_specifier.md b/lang/cpp11/global_scope_syntax_in_nested_name_specifier.md
index 7eaa5fa38..8787c5e7c 100644
--- a/lang/cpp11/global_scope_syntax_in_nested_name_specifier.md
+++ b/lang/cpp11/global_scope_syntax_in_nested_name_specifier.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>継承コンストラクタ [N2540] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/inheriting_constructors.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/inheriting_constructors.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/inheriting_constructors.md b/lang/cpp11/inheriting_constructors.md
index e99d4013c..10dda8705 100644
--- a/lang/cpp11/inheriting_constructors.md
+++ b/lang/cpp11/inheriting_constructors.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>初期化子リスト [N2672] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/initializer_lists.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/initializer_lists.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/initializer_lists.md b/lang/cpp11/initializer_lists.md
index 962448cb4..fd0dffab9 100644
--- a/lang/cpp11/initializer_lists.md
+++ b/lang/cpp11/initializer_lists.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>インライン名前空間 [N2535] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/inline_namespaces.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/inline_namespaces.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/inline_namespaces.md b/lang/cpp11/inline_namespaces.md
index a25299be5..36986907a 100644
--- a/lang/cpp11/inline_namespaces.md
+++ b/lang/cpp11/inline_namespaces.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式 [N2927] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/lambda_expressions.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/lambda_expressions.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/lambda_expressions.md b/lang/cpp11/lambda_expressions.md
index dd1bd263d..f1d58c96e 100644
--- a/lang/cpp11/lambda_expressions.md
+++ b/lang/cpp11/lambda_expressions.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ローカル型と無名型を、テンプレート引数として使用することを許可 [N2657] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/local_and_unnamed_type_as_template_arguments.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/local_and_unnamed_type_as_template_arguments.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/local_and_unnamed_type_as_template_arguments.md b/lang/cpp11/local_and_unnamed_type_as_template_arguments.md
index 8370caab9..4b7096e83 100644
--- a/lang/cpp11/local_and_unnamed_type_as_template_arguments.md
+++ b/lang/cpp11/local_and_unnamed_type_as_template_arguments.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>long long型 [N1811] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/long_long_type.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/long_long_type.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/long_long_type.md b/lang/cpp11/long_long_type.md
index 784b87306..4d38aaec0 100644
--- a/lang/cpp11/long_long_type.md
+++ b/lang/cpp11/long_long_type.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>noexcept [N3050] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/noexcept.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/noexcept.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/noexcept.md b/lang/cpp11/noexcept.md
index 3a4bfa56d..5bd496b72 100644
--- a/lang/cpp11/noexcept.md
+++ b/lang/cpp11/noexcept.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非静的メンバ変数の初期化 [N2756] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/non_static_data_member_initializers.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/non_static_data_member_initializers.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/non_static_data_member_initializers.md b/lang/cpp11/non_static_data_member_initializers.md
index d2f6a64cb..991ae8f0b 100644
--- a/lang/cpp11/non_static_data_member_initializers.md
+++ b/lang/cpp11/non_static_data_member_initializers.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>nullptr [N2431] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/nullptr.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/nullptr.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/nullptr.md b/lang/cpp11/nullptr.md
index c36181e2f..509336fc4 100644
--- a/lang/cpp11/nullptr.md
+++ b/lang/cpp11/nullptr.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>overrideとfinal [N2928] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/override_final.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/override_final.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/override_final.md b/lang/cpp11/override_final.md
index 06fa189b6..a1d082e0a 100644
--- a/lang/cpp11/override_final.md
+++ b/lang/cpp11/override_final.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Pragma演算子 [N1653] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/pragma_operator.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/pragma_operator.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/pragma_operator.md b/lang/cpp11/pragma_operator.md
index 6e71a2faf..698fb535a 100644
--- a/lang/cpp11/pragma_operator.md
+++ b/lang/cpp11/pragma_operator.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>更新された定義済みマクロ -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/predefined_macros.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/predefined_macros.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;更新された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++11に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative-page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cplusplus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201103L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++のバージョン値を表す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以下のマクロが新たに追加された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDCPP_STRICT_POINTER_SAFETY__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実装がポインタの厳密な安全性を持っている場合、整数値&lt;code&gt;1&lt;/code&gt;として定義される&lt;br /&gt;本マクロ定数はC++23で削除される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDCPP_THREADS__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが複数のスレッドを実行できる場合、整数値&lt;code&gt;1&lt;/code&gt;として定義される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDC_MB_MIGHT_NEQ_WC__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;このマクロが整数型の定数&lt;code&gt;1&lt;/code&gt;として定義されている場合、基本文字集合に含まれる文字のリテラルが、&lt;code&gt;char&lt;/code&gt;と&lt;code&gt;wchar_t&lt;/code&gt;で異なる値を持つ可能性がある。&lt;br /&gt;このマクロが定義されない場合には&lt;code&gt;&#39;x&#39; == L&#39;x&#39;&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;であることが保証され、そうでなければされない。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;c99_predefined_macros.html&#34;&gt;C++11 C99互換で導入された定義済みマクロ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2693.html&#34; target=&#34;_blank&#34;&gt;N2693 Requirements on programs and backwards compatibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1169&#34; target=&#34;_blank&#34;&gt;CWG Issue 1169. Missing feature macro for strict pointer safety&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2186r2.html&#34; target=&#34;_blank&#34;&gt;P2186R2 Removing Garbage Collection Support&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++23でのマクロ&lt;code&gt;__STDCPP_STRICT_POINTER_SAFETY__&lt;/code&gt;削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>範囲for文 [N2930] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/range_based_for.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/range_based_for.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/range_based_for.md b/lang/cpp11/range_based_for.md
index 17ee409e7..17a78d075 100644
--- a/lang/cpp11/range_based_for.md
+++ b/lang/cpp11/range_based_for.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>生文字列リテラル [N2442] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/raw_string_literals.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/raw_string_literals.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/raw_string_literals.md b/lang/cpp11/raw_string_literals.md
index 98ef7b863..20bdfe8f9 100644
--- a/lang/cpp11/raw_string_literals.md
+++ b/lang/cpp11/raw_string_literals.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>テンプレート再帰回数の制限緩和 -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/recursive_template_limit.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/recursive_template_limit.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/recursive_template_limit.md b/lang/cpp11/recursive_template_limit.md
index b0f6da923..e32a1a0fe 100644
--- a/lang/cpp11/recursive_template_limit.md
+++ b/lang/cpp11/recursive_template_limit.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>メンバ関数の左辺値／右辺値修飾 [N2439] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/ref_qualifier_for_this.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/ref_qualifier_for_this.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/ref_qualifier_for_this.md b/lang/cpp11/ref_qualifier_for_this.md
index ef6c41baf..aa174c9ce 100644
--- a/lang/cpp11/ref_qualifier_for_this.md
+++ b/lang/cpp11/ref_qualifier_for_this.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>参照への参照を折りたたむ -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/reference_collapsing.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/reference_collapsing.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/reference_collapsing.md b/lang/cpp11/reference_collapsing.md
index 2168a08d4..3afd95492 100644
--- a/lang/cpp11/reference_collapsing.md
+++ b/lang/cpp11/reference_collapsing.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>テンプレートのエクスポート機能を削除 -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/remove_export_templates.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/remove_export_templates.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/remove_export_templates.md b/lang/cpp11/remove_export_templates.md
index 1d7e79a08..6d4877a3b 100644
--- a/lang/cpp11/remove_export_templates.md
+++ b/lang/cpp11/remove_export_templates.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>POSIX用の名前空間を予約 -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/reserved_namespaces_for_posix.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/reserved_namespaces_for_posix.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;POSIX用の名前空間を予約&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++11に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative-page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;将来の標準化のために、POSIX用の名前空間として&lt;code&gt;std::posix&lt;/code&gt;と&lt;code&gt;::posix&lt;/code&gt;を予約する。&lt;/p&gt;
&lt;p&gt;これらの名前空間に宣言や定義を追加した場合、そのプログラムの動作は未定義となる。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2542.htm&#34; target=&#34;_blank&#34;&gt;N2542 Reserved namespaces for POSIX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>整数に対する除算と剰余算の丸め結果を規定 -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/result_of_integer_division_and_modulo.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/result_of_integer_division_and_modulo.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/result_of_integer_division_and_modulo.md b/lang/cpp11/result_of_integer_division_and_modulo.md
index 29d0d4505..3408e1c7b 100644
--- a/lang/cpp11/result_of_integer_division_and_modulo.md
+++ b/lang/cpp11/result_of_integer_division_and_modulo.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>テンプレートの右山カッコ [N1757] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/right_angle_brackets.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/right_angle_brackets.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/right_angle_brackets.md b/lang/cpp11/right_angle_brackets.md
index 63abe5945..29920e67c 100644
--- a/lang/cpp11/right_angle_brackets.md
+++ b/lang/cpp11/right_angle_brackets.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>右辺値参照・ムーブセマンティクス [N2118] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/rvalue_ref_and_move_semantics.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/rvalue_ref_and_move_semantics.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/rvalue_ref_and_move_semantics.md b/lang/cpp11/rvalue_ref_and_move_semantics.md
index 07f6c01b4..6d27237e8 100644
--- a/lang/cpp11/rvalue_ref_and_move_semantics.md
+++ b/lang/cpp11/rvalue_ref_and_move_semantics.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スコープを持つ列挙型 [N2347] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/scoped_enum.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/scoped_enum.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/scoped_enum.md b/lang/cpp11/scoped_enum.md
index 28340f4d2..b404da838 100644
--- a/lang/cpp11/scoped_enum.md
+++ b/lang/cpp11/scoped_enum.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>任意の式によるSFINAE [N2634] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/sfinae_expressions.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/sfinae_expressions.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/sfinae_expressions.md b/lang/cpp11/sfinae_expressions.md
index dd5682c0a..ab4907396 100644
--- a/lang/cpp11/sfinae_expressions.md
+++ b/lang/cpp11/sfinae_expressions.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンパイル時アサート [N1720] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/static_assert.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/static_assert.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/static_assert.md b/lang/cpp11/static_assert.md
index b11c71f39..0d76aaab1 100644
--- a/lang/cpp11/static_assert.md
+++ b/lang/cpp11/static_assert.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ブロックスコープを持つstatic変数初期化のスレッドセーフ化 [N2660] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/static_initialization_thread_safely.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/static_initialization_thread_safely.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/static_initialization_thread_safely.md b/lang/cpp11/static_initialization_thread_safely.md
index 8f0c46ff8..cc7deff90 100644
--- a/lang/cpp11/static_initialization_thread_safely.md
+++ b/lang/cpp11/static_initialization_thread_safely.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>文字列リテラルとワイド文字列リテラルの結合 -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/string_literal_concatenation.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/string_literal_concatenation.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/string_literal_concatenation.md b/lang/cpp11/string_literal_concatenation.md
index 3c980eb43..dd9f678ef 100644
--- a/lang/cpp11/string_literal_concatenation.md
+++ b/lang/cpp11/string_literal_concatenation.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スレッドローカルストレージ [N2659] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/thread_local_storage.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/thread_local_storage.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/thread_local_storage.md b/lang/cpp11/thread_local_storage.md
index 52cc0a323..685fc26fa 100644
--- a/lang/cpp11/thread_local_storage.md
+++ b/lang/cpp11/thread_local_storage.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>列挙子の末尾へのカンマ付加を許可 -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/trailing_comma_following_enumerator_list.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/trailing_comma_following_enumerator_list.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/trailing_comma_following_enumerator_list.md b/lang/cpp11/trailing_comma_following_enumerator_list.md
index aa7bdd73a..1050fb231 100644
--- a/lang/cpp11/trailing_comma_following_enumerator_list.md
+++ b/lang/cpp11/trailing_comma_following_enumerator_list.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>戻り値の型を後置する関数宣言構文 [N2541] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/trailing_return_types.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/trailing_return_types.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/trailing_return_types.md b/lang/cpp11/trailing_return_types.md
index b12bcd419..3ccc8ea02 100644
--- a/lang/cpp11/trailing_return_types.md
+++ b/lang/cpp11/trailing_return_types.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>一様初期化 [N2672] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/uniform_initialization.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/uniform_initialization.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/uniform_initialization.md b/lang/cpp11/uniform_initialization.md
index b9705fa30..bb0902594 100644
--- a/lang/cpp11/uniform_initialization.md
+++ b/lang/cpp11/uniform_initialization.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>共用体の制限解除 [N2544] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/unrestricted_unions.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/unrestricted_unions.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/unrestricted_unions.md b/lang/cpp11/unrestricted_unions.md
index 8d3671031..1fde6b9e2 100644
--- a/lang/cpp11/unrestricted_unions.md
+++ b/lang/cpp11/unrestricted_unions.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ユーザー定義リテラル [N2765] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/user_defined_literals.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/user_defined_literals.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/user_defined_literals.md b/lang/cpp11/user_defined_literals.md
index 5970ee0ed..144f806af 100644
--- a/lang/cpp11/user_defined_literals.md
+++ b/lang/cpp11/user_defined_literals.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>UTF-8文字列リテラル [N2442] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/utf8_string_literals.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/utf8_string_literals.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/utf8_string_literals.md b/lang/cpp11/utf8_string_literals.md
index 8d1c9bf06..919685ca1 100644
--- a/lang/cpp11/utf8_string_literals.md
+++ b/lang/cpp11/utf8_string_literals.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変引数マクロ [N1653] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/variadic_macros.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/variadic_macros.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/variadic_macros.md b/lang/cpp11/variadic_macros.md
index 5049cca1b..efd3507d4 100644
--- a/lang/cpp11/variadic_macros.md
+++ b/lang/cpp11/variadic_macros.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変引数テンプレート [N2242] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/variadic_templates.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp11/variadic_templates.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/variadic_templates.md b/lang/cpp11/variadic_templates.md
index adf5bfb45..045a6d03d 100644
--- a/lang/cpp11/variadic_templates.md
+++ b/lang/cpp11/variadic_templates.md
@@ -5,7 +5,7 @@
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>2進数リテラル [N3472] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/binary_literals.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp14/binary_literals.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/binary_literals.md b/lang/cpp14/binary_literals.md
index 20a3d19da..b07e75791 100644
--- a/lang/cpp14/binary_literals.md
+++ b/lang/cpp14/binary_literals.md
@@ -5,7 +5,7 @@
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ネストする集成体初期化における波カッコ省略を許可 [N3653] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/brace_elision_in_array_temporary_initialization.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp14/brace_elision_in_array_temporary_initialization.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/brace_elision_in_array_temporary_initialization.md b/lang/cpp14/brace_elision_in_array_temporary_initialization.md
index ea09d709d..7218dae71 100644
--- a/lang/cpp14/brace_elision_in_array_temporary_initialization.md
+++ b/lang/cpp14/brace_elision_in_array_temporary_initialization.md
@@ -5,7 +5,7 @@
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>動的メモリ確保の省略の許可 -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/clarifying_memory_allocation.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp14/clarifying_memory_allocation.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/clarifying_memory_allocation.md b/lang/cpp14/clarifying_memory_allocation.md
index 039593c3c..a023eda46 100644
--- a/lang/cpp14/clarifying_memory_allocation.md
+++ b/lang/cpp14/clarifying_memory_allocation.md
@@ -5,7 +5,7 @@
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>decltype(auto) -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/decltype_auto.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp14/decltype_auto.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/decltype_auto.md b/lang/cpp14/decltype_auto.md
index 9bf9e8377..3e5d131c2 100644
--- a/lang/cpp14/decltype_auto.md
+++ b/lang/cpp14/decltype_auto.md
@@ -5,7 +5,7 @@
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[deprecated]]属性 [N3760] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/deprecated_attr.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp14/deprecated_attr.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/deprecated_attr.md b/lang/cpp14/deprecated_attr.md
index 724930191..0dfa33f04 100644
--- a/lang/cpp14/deprecated_attr.md
+++ b/lang/cpp14/deprecated_attr.md
@@ -5,7 +5,7 @@
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>数値リテラルの桁区切り文字 [N3781] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/digit_separators.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp14/digit_separators.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/digit_separators.md b/lang/cpp14/digit_separators.md
index 9e5e8ad11..c677b1915 100644
--- a/lang/cpp14/digit_separators.md
+++ b/lang/cpp14/digit_separators.md
@@ -5,7 +5,7 @@
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
@@ -142,4 +142,4 @@ C++14という言語バージョンは、C++11の仕様に対するバグ修正
 - Perl : [Underscores in numbers](http://www.perlmonks.org/?node=72112)
 - Ruby : [アンダーバーによる数値の区切り](http://www.rubylife.jp/ini/num/index2.html)
 - Java 7 : [Underscores in Numeric Literals](http://docs.oracle.com/javase/7/docs/technotes/guides/language/underscores-literals.html)
-- Ada : [Ada &amp;#39;83 Language Reference Manual](http://archive.adaic.com/standards/83lrm/html/lrm-02-04.html#2.4)
+- Ada : [Ada &amp;#39;83 Language Reference Manual](http://archive.adaic.com/standards/83lrm/html/lrm-02-04.html#2.4)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>機能テストマクロ -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/feature_test_macros.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp14/feature_test_macros.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;機能テストマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp14&#34; title=&#34;C++14で追加&#34;&gt;(C++14)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++14に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative-page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;SD-6 は C++14 の機能について以下のテストマクロを定義することを推奨している：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_aggregate_nsdmi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メンバ初期化子と集約&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_binary_literals&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;binary_literals.html&#34;&gt;二進数リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;relaxing_constraints_on_constexpr.html&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;の制限緩和/&lt;code&gt;constexpr&lt;/code&gt; メンバ関数の暗黙的な &lt;code&gt;const&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_decltype_auto&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;return_type_deduction_for_normal_functions.html&#34;&gt;通常関数の戻り値型推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_generic_lambdas&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;generic_lambdas.html&#34;&gt;ジェネリックラムダ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_init_captures&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;initialize_capture.html&#34;&gt;ラムダ式の初期化キャプチャ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_chrono_udls&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration.html&#34;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; のユーザー定義リテラル (&lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_ns.html&#34;&gt;ns&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_us.html&#34;&gt;us&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_ms.html&#34;&gt;ms&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_s.html&#34;&gt;s&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_min.html&#34;&gt;min&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_h.html&#34;&gt;h&lt;/a&gt;&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_complex_udls&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201309&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ユーザー定義虚数リテラル (&lt;code&gt;&lt;a href=&#34;../../reference/complex/complex/op_i.html&#34;&gt;i&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/complex/complex/op_if.html&#34;&gt;if&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/complex/complex/op_il.html&#34;&gt;il&lt;/a&gt;&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/complex.html&#34;&gt;&amp;lt;complex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_exchange_function&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility/exchange.html&#34;&gt;std::exchange&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_generic_associative_lookup&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;連想配列 (&lt;code&gt;&lt;a href=&#34;../../reference/map/map.html&#34;&gt;std::map&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/map/multimap.html&#34;&gt;std::multimap&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/set/set.html&#34;&gt;std::set&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/set/multiset.html&#34;&gt;std::multiset&lt;/a&gt;&lt;/code&gt;) における異なる型の比較 (&lt;code&gt;count&lt;/code&gt;, &lt;code&gt;equal_range&lt;/code&gt;, &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;lower_bound&lt;/code&gt;, &lt;code&gt;upper_bound&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/set.html&#34;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_integer_sequence&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/utility/integer_sequence.html&#34;&gt;コンパイル時整数列&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_integral_constant_callable&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/integral_constant.html&#34;&gt;std::integral_constant&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;operator()&lt;/code&gt; を追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_final&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201402&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_final.html&#34;&gt;std::is_final&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_null_pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201309&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_null_pointer.html&#34;&gt;std::is_null_pointer&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_make_reverse_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201402&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator/make_reverse_iterator.html&#34;&gt;std::make_reverse_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_make_unique&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/make_unique.html&#34;&gt;std::make_unique&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/make_unique.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_null_iterators&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ヌル前方向イテレータ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_quoted_string_io&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iomanip/quoted.html&#34;&gt;std::quoted&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iomanip.html&#34;&gt;&amp;lt;iomanip&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_result_of_sfinae&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201210&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/result_of.html&#34;&gt;std::result_of&lt;/a&gt;&lt;/code&gt; と SFINAE&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_robust_nonmodifying_seq_ops&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスを変更しない操作をよりロバストに&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shared_timed_mutex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201402&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;shared_mutex&lt;/code&gt; を &lt;code&gt;&lt;a href=&#34;../../reference/shared_mutex/shared_timed_mutex.html&#34;&gt;shared_timed_mutex&lt;/a&gt;&lt;/code&gt; にリネーム&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/shared_mutex.html&#34;&gt;&amp;lt;shared_mutex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_string_udls&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ユーザー定義 &lt;code&gt;&lt;a href=&#34;../../reference/string/basic_string/op_s.html&#34;&gt;std::string_literals::basic_string::sリテラル&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_transformation_trait_aliases&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型トレイトにエイリアステンプレートを追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_transparent_operators&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201210&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt; の二項演算のデフォルトテンプレート引数を &lt;code&gt;void&lt;/code&gt; に&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_tuple_element_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201402&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple/tuple_element.html&#34;&gt;std::tuple_element_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_tuples_by_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/tuple/tuple/get.html&#34;&gt;型による &lt;code&gt;std::tuple::get&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_return_type_deduction&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;return_type_deduction_for_normal_functions.html&#34;&gt;通常関数の戻り値型推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_sized_deallocation&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201309&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;sized_deallocation.html&#34;&gt;サイズ付きデアロケーション&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_variable_templates&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;variable_templates.html&#34;&gt;変数テンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(deprecated)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201309&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;deprecated_attr.html&#34;&gt;&lt;code&gt;[[deprecated]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_include(&amp;lt;shared_mutex&amp;gt;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/shared_mutex.html&#34;&gt;共有ロック&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations#recs.cpp14&#34; target=&#34;_blank&#34;&gt;SD-6: SG10 Feature Test Recommendations: Standard C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ジェネリックラムダ [N3649] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/generic_lambdas.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp14/generic_lambdas.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/generic_lambdas.md b/lang/cpp14/generic_lambdas.md
index 71e85c56a..94b918f4e 100644
--- a/lang/cpp14/generic_lambdas.md
+++ b/lang/cpp14/generic_lambdas.md
@@ -5,7 +5,7 @@
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式の初期化キャプチャ [N3648] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/initialize_capture.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp14/initialize_capture.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/initialize_capture.md b/lang/cpp14/initialize_capture.md
index bbd9a25d9..7b5e943ed 100644
--- a/lang/cpp14/initialize_capture.md
+++ b/lang/cpp14/initialize_capture.md
@@ -5,7 +5,7 @@
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>宣言時のメンバ初期化を持つ型の集成体初期化を許可 -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/member_initializers_and_aggregates.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp14/member_initializers_and_aggregates.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/member_initializers_and_aggregates.md b/lang/cpp14/member_initializers_and_aggregates.md
index d7a225482..8a208da14 100644
--- a/lang/cpp14/member_initializers_and_aggregates.md
+++ b/lang/cpp14/member_initializers_and_aggregates.md
@@ -5,7 +5,7 @@
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>リテラル演算子のスペースを省略可能とする -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/no_whitespace_literal_operators.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp14/no_whitespace_literal_operators.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/no_whitespace_literal_operators.md b/lang/cpp14/no_whitespace_literal_operators.md
index 3ab2981bb..5f5613fd7 100644
--- a/lang/cpp14/no_whitespace_literal_operators.md
+++ b/lang/cpp14/no_whitespace_literal_operators.md
@@ -5,7 +5,7 @@
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>nullptr_t型の定数式を非型テンプレートパラメータとすることを許可 -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/nontype_template_parameters_of_type_nullptr_t.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp14/nontype_template_parameters_of_type_nullptr_t.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/nontype_template_parameters_of_type_nullptr_t.md b/lang/cpp14/nontype_template_parameters_of_type_nullptr_t.md
index 274dc94f3..e26937a29 100644
--- a/lang/cpp14/nontype_template_parameters_of_type_nullptr_t.md
+++ b/lang/cpp14/nontype_template_parameters_of_type_nullptr_t.md
@@ -5,7 +5,7 @@
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>後置戻り値型をプレースホルダーにすることを許可 -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/placeholder_type_in_trailing_return_type.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp14/placeholder_type_in_trailing_return_type.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/placeholder_type_in_trailing_return_type.md b/lang/cpp14/placeholder_type_in_trailing_return_type.md
index d490d58b3..ce35c338d 100644
--- a/lang/cpp14/placeholder_type_in_trailing_return_type.md
+++ b/lang/cpp14/placeholder_type_in_trailing_return_type.md
@@ -5,7 +5,7 @@
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
@@ -56,4 +56,4 @@ int main()
 
 
 ## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
-- [C++14 通常関数の戻り値型推論](return_type_deduction_for_normal_functions.md)
+- [C++14 通常関数の戻り値型推論](return_type_deduction_for_normal_functions.md)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>更新された定義済みマクロ -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/predefined_macros.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp14/predefined_macros.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;更新された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp14&#34; title=&#34;C++14で追加&#34;&gt;(C++14)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++14に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative-page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cplusplus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201402L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++のバージョン値を表す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexprの制限緩和 [N3652] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/relaxing_constraints_on_constexpr.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp14/relaxing_constraints_on_constexpr.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/relaxing_constraints_on_constexpr.md b/lang/cpp14/relaxing_constraints_on_constexpr.md
index dacd6abad..2d65d8e3e 100644
--- a/lang/cpp14/relaxing_constraints_on_constexpr.md
+++ b/lang/cpp14/relaxing_constraints_on_constexpr.md
@@ -5,7 +5,7 @@
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>通常関数の戻り値型推論 [N3638] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/return_type_deduction_for_normal_functions.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp14/return_type_deduction_for_normal_functions.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/return_type_deduction_for_normal_functions.md b/lang/cpp14/return_type_deduction_for_normal_functions.md
index 05edc55cf..fe8dc74d5 100644
--- a/lang/cpp14/return_type_deduction_for_normal_functions.md
+++ b/lang/cpp14/return_type_deduction_for_normal_functions.md
@@ -5,7 +5,7 @@
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>サイズ付きデアロケーション [N3778] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/sized_deallocation.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp14/sized_deallocation.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/sized_deallocation.md b/lang/cpp14/sized_deallocation.md
index 9733d5fd9..dd98f00a9 100644
--- a/lang/cpp14/sized_deallocation.md
+++ b/lang/cpp14/sized_deallocation.md
@@ -5,7 +5,7 @@
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>変数テンプレート [N3651] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/variable_templates.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp14/variable_templates.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/variable_templates.md b/lang/cpp14/variable_templates.md
index 63d09298a..139b45ad0 100644
--- a/lang/cpp14/variable_templates.md
+++ b/lang/cpp14/variable_templates.md
@@ -5,7 +5,7 @@
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>全ての非型テンプレート引数の定数式評価を許可 [N4268] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.md b/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.md
index bb3aa3b22..dce9e1fb0 100644
--- a/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.md
+++ b/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.md
@@ -6,7 +6,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>変数テンプレートのデフォルトテンプレート引数を許可 -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/allow_default_template_arguments_of_variable_templates.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/allow_default_template_arguments_of_variable_templates.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/allow_default_template_arguments_of_variable_templates.md b/lang/cpp17/allow_default_template_arguments_of_variable_templates.md
index a61778131..95f72144d 100644
--- a/lang/cpp17/allow_default_template_arguments_of_variable_templates.md
+++ b/lang/cpp17/allow_default_template_arguments_of_variable_templates.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>テンプレートテンプレートパラメータにtypenameキーワードの使用を許可 [N4051] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/allow_typename_in_a_template_template_parameter.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/allow_typename_in_a_template_template_parameter.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/allow_typename_in_a_template_template_parameter.md b/lang/cpp17/allow_typename_in_a_template_template_parameter.md
index 9150ce9b3..b545de5d6 100644
--- a/lang/cpp17/allow_typename_in_a_template_template_parameter.md
+++ b/lang/cpp17/allow_typename_in_a_template_template_parameter.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>名前空間と列挙子への属性付加を許可 [N4266] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/attributes_for_namespaces_and_enumerators.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/attributes_for_namespaces_and_enumerators.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/attributes_for_namespaces_and_enumerators.md b/lang/cpp17/attributes_for_namespaces_and_enumerators.md
index f7b9ab09b..88efd883f 100644
--- a/lang/cpp17/attributes_for_namespaces_and_enumerators.md
+++ b/lang/cpp17/attributes_for_namespaces_and_enumerators.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr ラムダ [P0170R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/constexpr_lambda.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/constexpr_lambda.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/constexpr_lambda.md b/lang/cpp17/constexpr_lambda.md
index a3c3d9b7e..5a118885d 100644
--- a/lang/cpp17/constexpr_lambda.md
+++ b/lang/cpp17/constexpr_lambda.md
@@ -6,7 +6,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>enum class変数の初期値として整数を指定する際の規則を調整 [P0138R2] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/construction_enum_class_values.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/construction_enum_class_values.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/construction_enum_class_values.md b/lang/cpp17/construction_enum_class_values.md
index 2f6b48e2b..97f69dffc 100644
--- a/lang/cpp17/construction_enum_class_values.md
+++ b/lang/cpp17/construction_enum_class_values.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非型テンプレートパラメータのauto宣言 [P0127R2] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/declaring_non-type_template_arguments_with_auto.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/declaring_non-type_template_arguments_with_auto.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/declaring_non-type_template_arguments_with_auto.md b/lang/cpp17/declaring_non-type_template_arguments_with_auto.md
index 7faa77fa0..7b4d8e2b6 100644
--- a/lang/cpp17/declaring_non-type_template_arguments_with_auto.md
+++ b/lang/cpp17/declaring_non-type_template_arguments_with_auto.md
@@ -6,7 +6,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>アライメント指定されたデータの動的メモリ確保 [P0035R4] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md b/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md
index ceb1daf17..2aed47381 100644
--- a/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md
+++ b/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>例外仕様を型システムの一部にする [P0012R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/exception_spec_be_part_of_the_type_system.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/exception_spec_be_part_of_the_type_system.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/exception_spec_be_part_of_the_type_system.md b/lang/cpp17/exception_spec_be_part_of_the_type_system.md
index 4ae6a5bba..245cb7cc0 100644
--- a/lang/cpp17/exception_spec_be_part_of_the_type_system.md
+++ b/lang/cpp17/exception_spec_be_part_of_the_type_system.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>厳密な式の評価順 [P0145R3] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/expression_evaluation_order.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/expression_evaluation_order.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/expression_evaluation_order.md b/lang/cpp17/expression_evaluation_order.md
index bfe7a0791..048406bfd 100644
--- a/lang/cpp17/expression_evaluation_order.md
+++ b/lang/cpp17/expression_evaluation_order.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>static_assert のメッセージ省略を許可 [N3928] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/extending_static_assert.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/extending_static_assert.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/extending_static_assert.md b/lang/cpp17/extending_static_assert.md
index 3fc1bc790..40eddc1be 100644
--- a/lang/cpp17/extending_static_assert.md
+++ b/lang/cpp17/extending_static_assert.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>基底クラスのメンバ変数を集成体初期化するための波カッコを省略できるようにする [P0017R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/extension_to_aggregate_initialization.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/extension_to_aggregate_initialization.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/extension_to_aggregate_initialization.md b/lang/cpp17/extension_to_aggregate_initialization.md
index 7b42690e6..8e7221848 100644
--- a/lang/cpp17/extension_to_aggregate_initialization.md
+++ b/lang/cpp17/extension_to_aggregate_initialization.md
@@ -6,7 +6,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[fallthrough]]属性 [P0188R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/fallthrough.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/fallthrough.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/fallthrough.md b/lang/cpp17/fallthrough.md
index f809ea834..301ebec53 100644
--- a/lang/cpp17/fallthrough.md
+++ b/lang/cpp17/fallthrough.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>機能テストマクロ -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/feature_test_macros.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/feature_test_macros.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;機能テストマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++17に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative-page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;SD-6 は C++17 の機能について以下のテストマクロを定義することを推奨している：&lt;/p&gt;
&lt;h3&gt;言語機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_hex_float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;hexadecimal_floating_literals.html&#34;&gt;十六進浮動小数点数リテラル&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_inline_variables&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;inline_variables.html&#34;&gt;インライン変数&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_aligned_new&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;dynamic_memory_allocation_for_over-aligned_data.html&#34;&gt;アライメント指定されたデータの動的メモリ確保&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_guaranteed_copy_elision&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;guaranteed_copy_elision.html&#34;&gt;値のコピー省略を保証&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_noexcept_function_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;exception_spec_be_part_of_the_type_system.html&#34;&gt;例外仕様を型システムの一部にする&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_fold_expressions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;folding_expressions.html&#34;&gt;畳み込み式&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;constexpr_lambda.html&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;ラムダ&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_if_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;if_constexpr.html&#34;&gt;&lt;code&gt;if constexpr&lt;/code&gt;文&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_range_based_for&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;generalizing_the_range-based_for_loop.html&#34;&gt;範囲 &lt;code&gt;for&lt;/code&gt; ループの制限緩和&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_static_assert&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;extending_static_assert.html&#34;&gt;&lt;code&gt;static_assert&lt;/code&gt; のメッセージ省略を許可&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_deduction_guides&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;br /&gt; &lt;code&gt;201611&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;type_deduction_for_class_templates.html&#34;&gt;クラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_nontype_template_parameter_auto&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;declaring_non-type_template_arguments_with_auto.html&#34;&gt;非型テンプレートパラメータの&lt;code&gt;auto&lt;/code&gt;宣言&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_namespace_attributes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;attributes_for_namespaces_and_enumerators.html&#34;&gt;名前空間への属性付加を許可&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_enumerator_attributes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;attributes_for_namespaces_and_enumerators.html&#34;&gt;列挙子への属性付加を許可&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_inheriting_constructors&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201511&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;継承コンストラクタの新仕様&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_variadic_using&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201611&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;pack_expansions_in_using.html&#34;&gt;&lt;code&gt;using&lt;/code&gt;宣言のパック展開&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(fallthrough)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;fallthrough.html&#34;&gt;&lt;code&gt;[[fallthrough]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(nodiscard)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;nodiscard.html&#34;&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(maybe_unused)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;maybe_unused.html&#34;&gt;&lt;code&gt;[[maybe_unused]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_structured_bindings&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;structured_bindings.html&#34;&gt;構造化束縛&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_aggregate_bases&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;extension_to_aggregate_initialization.html&#34;&gt;集成体初期化の拡張&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_nontype_template_args&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;allow_constant_evaluation_for_all_non-type_template_arguments.html&#34;&gt;非型テンプレートパラメータの定数式を評価&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_nested_namespace_definitions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;nested_namespace.html&#34;&gt;入れ子名前空間の定義&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ライブラリ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_byte&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cstddef/byte.html&#34;&gt;std::byte&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cstddef.html&#34;&gt;&amp;lt;cstddef&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_hardware_interference_size&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/new/hardware_destructive_interference_size.html&#34;&gt;std::hardware_destructive_interference_size&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/new/hardware_constructive_interference_size.html&#34;&gt;std::hardware_constructive_interference_size&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/new.html&#34;&gt;&amp;lt;new&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_launder&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/new/launder.html&#34;&gt;std::launder()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_uncaught_exceptions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/exception/uncaught_exceptions.html&#34;&gt;std::uncaught_exceptions()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/exception.html&#34;&gt;&amp;lt;exception&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_as_const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility/as_const.html&#34;&gt;std::as_const()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_make_from_tuple&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple/make_from_tuple.html&#34;&gt;std::make_from_tuple()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_apply&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple/apply.html&#34;&gt;std::apply()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple.html&#34;&gt;&amp;lt;tuple&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_optional&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/optional/optional.html&#34;&gt;std::optional&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/optional.html&#34;&gt;&amp;lt;optional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_any&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/any/any.html&#34;&gt;std::any&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/any.html&#34;&gt;&amp;lt;any&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_variant&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/variant/variant.html&#34;&gt;std::variant&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/variant.html&#34;&gt;&amp;lt;variant&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_memory_resource&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory_resource/memory_resource.html&#34;&gt;std::memory_resource&lt;/a&gt;&lt;/code&gt;と関連する機能&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory_resource.html&#34;&gt;&amp;lt;memory_resource&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_boyer_moore_searcher&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional/boyer_moore_searcher.html&#34;&gt;std::boyer_morre_searcher&lt;/a&gt;&lt;/code&gt;と関連する機能&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_string_view&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view/basic_string_view.html&#34;&gt;std::string_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_sample&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/sample.html&#34;&gt;std::sample()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_addressof_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/addressof.html&#34;&gt;std::addressof()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_raw_memory_algorithms&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/uninitialized_default_construct.html&#34;&gt;std::uninitialized_default_construct()&lt;/a&gt;&lt;/code&gt;と関連する機能&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_transparent_operators&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/owner_less.html&#34;&gt;std::owner_less&lt;/a&gt;&lt;/code&gt; の柔軟性向上&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_enable_shared_from_this&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/enable_shared_from_this.html&#34;&gt;std::enable_shared_from_this&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shared_ptr_weak_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/shared_ptr.html&#34;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;クラスのメンバ型&lt;code&gt;weak_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shared_ptr_arrays&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201611&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/shared_ptr.html&#34;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;クラスの配列サポート&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_invoke&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional/invoke.html&#34;&gt;std::invoke()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_not_fn&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional/not_fn.html&#34;&gt;std::not_fn()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_void_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/void_t.html&#34;&gt;std::void_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_bool_constant&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201505&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/bool_constant.html&#34;&gt;std::bool_constant&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_type_trait_variable_templates&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型トレイト変数テンプレート (&lt;code&gt;some_trait_v&amp;lt;T&amp;gt; = some_trait&amp;lt;T&amp;gt;::value&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_logical_traits&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;論理演算子型トレイト (&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/conjunction.html&#34;&gt;std::conjunction&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/type_traits/disjunction.html&#34;&gt;std::disjunction&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/type_traits/negation.html&#34;&gt;std::negation&lt;/a&gt;&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_swappable&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_swappable.html&#34;&gt;std::is_swappable&lt;/a&gt;&lt;/code&gt;と関連する機能&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_invocable&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_invocable.html&#34;&gt;std::is_invocable&lt;/a&gt;&lt;/code&gt;と関連する機能&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_has_unique_object_representations&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/has_unique_object_representations.html&#34;&gt;std::has_unique_object_representations&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_aggregate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_aggregate.html&#34;&gt;std::is_aggregate&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_chrono&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt; の改良&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_execution&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/execution.html&#34;&gt;&amp;lt;execution&amp;gt;&lt;/a&gt;&lt;/code&gt; の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/execution.html&#34;&gt;&amp;lt;execution&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_parallel_algorithm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;並列アルゴリズム&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_to_chars&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201611&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/charconv/to_chars.html&#34;&gt;std::to_chars()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/charconv/from_chars.html&#34;&gt;std::from_chars()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/charconv.html&#34;&gt;&amp;lt;charconv&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_allocator_traits_is_always_equal&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ライブラリ内の &lt;code&gt;noexcept&lt;/code&gt; のクリーンアップ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/deque.html&#34;&gt;&amp;lt;deque&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/forward_list.html&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/list.html&#34;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/scoped_allocator.html&#34;&gt;&amp;lt;scoped_allocator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/set.html&#34;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/unordered_set.html&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/vector.html&#34;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_incomplete_container_elements&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201505&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;標準コンテナについて不完全型を最小限サポート&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/forward_list.html&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/list.html&#34;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/vector.html&#34;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_map_try_emplace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map/map/try_emplace.html&#34;&gt;std::map::try_emplace()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/map/map/insert_or_assign.html&#34;&gt;std::map::insert_or_assign()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_unordered_map_try_emplace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_map/unordered_map/try_emplace.html&#34;&gt;std::unordered_map::try_emplace()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/unordered_map/unordered_map/insert_or_assign.html&#34;&gt;std::unordered_map::insert_or_assign()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_node_extract&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;連想コンテナのsplice&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/set.html&#34;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/unordered_set.html&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_array_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;配列関係のランダムアクセスに&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/array.html&#34;&gt;&amp;lt;array&amp;gt;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_nonmember_container_access&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非メンバ関数 &lt;code&gt;&lt;a href=&#34;../../reference/iterator/size.html&#34;&gt;std::size()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/iterator/empty.html&#34;&gt;std::empty()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/iterator/data.html&#34;&gt;std::data()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_clamp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/clamp.html&#34;&gt;std::clamp()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_gcd_lcm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric/gcd.html&#34;&gt;std::gcd()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/numeric/lcm.html&#34;&gt;std::lcm()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_hypot&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;3引数版の&lt;code&gt;&lt;a href=&#34;../../reference/cmath/hypot.html&#34;&gt;std::hypot()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_math_special_functions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数学の特殊関数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_filesystem&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルシステムライブラリ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/filesystem.html&#34;&gt;&amp;lt;filesystem&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_is_always_lock_free&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic.html&#34;&gt;std::atomic&lt;/a&gt;&lt;/code&gt;クラスの静的メンバ定数&lt;code&gt;is_always_lock_free&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shared_mutex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201505&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/shared_mutex/shared_mutex.html&#34;&gt;std::shared_mutex&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/shared_mutex.html&#34;&gt;&amp;lt;shared_mutex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_scoped_lock&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可変個のミューテックスのロックを管理する&lt;code&gt;&lt;a href=&#34;../../reference/mutex/scoped_lock.html&#34;&gt;std::scoped_lock&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/mutex.html&#34;&gt;&amp;lt;mutex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations#recs.cpp17&#34; target=&#34;_blank&#34;&gt;SD-6: SG10 Feature Test Recommendations: Standard C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>畳み込み式 [N4295] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/folding_expressions.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/folding_expressions.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/folding_expressions.md b/lang/cpp17/folding_expressions.md
index 408b05861..72d559fd6 100644
--- a/lang/cpp17/folding_expressions.md
+++ b/lang/cpp17/folding_expressions.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>範囲 for ループの制限緩和 [P0184R0] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/generalizing_the_range-based_for_loop.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/generalizing_the_range-based_for_loop.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/generalizing_the_range-based_for_loop.md b/lang/cpp17/generalizing_the_range-based_for_loop.md
index 818f3b526..344ac8866 100644
--- a/lang/cpp17/generalizing_the_range-based_for_loop.md
+++ b/lang/cpp17/generalizing_the_range-based_for_loop.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>値のコピー省略を保証 [P0135R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/guaranteed_copy_elision.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/guaranteed_copy_elision.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/guaranteed_copy_elision.md b/lang/cpp17/guaranteed_copy_elision.md
index df83a6b77..4cf9aeef9 100644
--- a/lang/cpp17/guaranteed_copy_elision.md
+++ b/lang/cpp17/guaranteed_copy_elision.md
@@ -6,7 +6,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>__has_include [P0061R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/has_include.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/has_include.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/has_include.md b/lang/cpp17/has_include.md
index 46c583c24..2cfaaba58 100644
--- a/lang/cpp17/has_include.md
+++ b/lang/cpp17/has_include.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>十六進浮動小数点数リテラル [P0245R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/hexadecimal_floating_literals.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/hexadecimal_floating_literals.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/hexadecimal_floating_literals.md b/lang/cpp17/hexadecimal_floating_literals.md
index 914023b13..e976eef46 100644
--- a/lang/cpp17/hexadecimal_floating_literals.md
+++ b/lang/cpp17/hexadecimal_floating_literals.md
@@ -4,7 +4,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr if 文 [P0292R2] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/if_constexpr.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/if_constexpr.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/if_constexpr.md b/lang/cpp17/if_constexpr.md
index 48028fc0c..c2febe1f4 100644
--- a/lang/cpp17/if_constexpr.md
+++ b/lang/cpp17/if_constexpr.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>インライン変数 [P0386R2] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/inline_variables.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/inline_variables.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/inline_variables.md b/lang/cpp17/inline_variables.md
index 937afd223..3afbdae0d 100644
--- a/lang/cpp17/inline_variables.md
+++ b/lang/cpp17/inline_variables.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式での*thisのコピーキャプチャ [P0018R3] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/lambda_capture_of_this_by_value.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/lambda_capture_of_this_by_value.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/lambda_capture_of_this_by_value.md b/lang/cpp17/lambda_capture_of_this_by_value.md
index 2e91fe9cb..027b4c939 100644
--- a/lang/cpp17/lambda_capture_of_this_by_value.md
+++ b/lang/cpp17/lambda_capture_of_this_by_value.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>noexcept付きのラムダ式から変換する関数ポインタにnoexceptを付加する -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/lambda_to_noexcept_function_pointer.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/lambda_to_noexcept_function_pointer.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/lambda_to_noexcept_function_pointer.md b/lang/cpp17/lambda_to_noexcept_function_pointer.md
index c0532d9d1..0afb67e62 100644
--- a/lang/cpp17/lambda_to_noexcept_function_pointer.md
+++ b/lang/cpp17/lambda_to_noexcept_function_pointer.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[maybe_unused]]属性 [P0212R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/maybe_unused.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/maybe_unused.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/maybe_unused.md b/lang/cpp17/maybe_unused.md
index 0c61865ae..0bbbbc5e6 100644
--- a/lang/cpp17/maybe_unused.md
+++ b/lang/cpp17/maybe_unused.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>入れ子名前空間の定義 [N4230] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/nested_namespace.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/nested_namespace.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/nested_namespace.md b/lang/cpp17/nested_namespace.md
index 37c3df4f4..d84c561c4 100644
--- a/lang/cpp17/nested_namespace.md
+++ b/lang/cpp17/nested_namespace.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>波括弧初期化の型推論の新規則 [N3922] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.md b/lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.md
index 017d28e05..5627e23b2 100644
--- a/lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.md
+++ b/lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[nodiscard]]属性 [P0189R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/nodiscard.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/nodiscard.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/nodiscard.md b/lang/cpp17/nodiscard.md
index 7346a5df0..a2d9bea3b 100644
--- a/lang/cpp17/nodiscard.md
+++ b/lang/cpp17/nodiscard.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>不明な属性を無視する [P0283R2] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/non_standard_attributes.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/non_standard_attributes.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/non_standard_attributes.md b/lang/cpp17/non_standard_attributes.md
index c0fabc99d..b4843517b 100644
--- a/lang/cpp17/non_standard_attributes.md
+++ b/lang/cpp17/non_standard_attributes.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>using宣言のパック展開 [P0195R2] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/pack_expansions_in_using.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/pack_expansions_in_using.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/pack_expansions_in_using.md b/lang/cpp17/pack_expansions_in_using.md
index c2b4a7e84..911ef2e1b 100644
--- a/lang/cpp17/pack_expansions_in_using.md
+++ b/lang/cpp17/pack_expansions_in_using.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>更新された定義済みマクロ -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/predefined_macros.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/predefined_macros.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;更新された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++17に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative-page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cplusplus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++のバージョン値を表す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;新規マクロは以下：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDCPP_DEFAULT_NEW_ALIGNMENT__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実装定義&lt;/td&gt;
&lt;td&gt;動的メモリ確保時のデフォルトのアライメント値&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;dynamic_memory_allocation_for_over-aligned_data.html&#34;&gt;C++17 アライメント指定されたデータの動的メモリ確保&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非推奨だった古い例外仕様を削除 [P0003R5] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/remove_deprecated_exception_specifications.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/remove_deprecated_exception_specifications.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/remove_deprecated_exception_specifications.md b/lang/cpp17/remove_deprecated_exception_specifications.md
index 8d645f045..9cbf8ee25 100644
--- a/lang/cpp17/remove_deprecated_exception_specifications.md
+++ b/lang/cpp17/remove_deprecated_exception_specifications.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非推奨だった bool 型に対するインクリメント演算子を削除 [P0002R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/remove_deprecated_increment_of_bool.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/remove_deprecated_increment_of_bool.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/remove_deprecated_increment_of_bool.md b/lang/cpp17/remove_deprecated_increment_of_bool.md
index 4888e6a5d..cb4a2fe81 100644
--- a/lang/cpp17/remove_deprecated_increment_of_bool.md
+++ b/lang/cpp17/remove_deprecated_increment_of_bool.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非推奨だったregisterキーワードを削除 [P0001R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/remove_deprecated_use_of_the_register_keyword.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/remove_deprecated_use_of_the_register_keyword.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/remove_deprecated_use_of_the_register_keyword.md b/lang/cpp17/remove_deprecated_use_of_the_register_keyword.md
index 4bbea0c54..e16ff1aa3 100644
--- a/lang/cpp17/remove_deprecated_use_of_the_register_keyword.md
+++ b/lang/cpp17/remove_deprecated_use_of_the_register_keyword.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>トライグラフの削除 [N4086] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/removing_trigraphs.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/removing_trigraphs.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/removing_trigraphs.md b/lang/cpp17/removing_trigraphs.md
index 32b4e8580..ea8f27cc6 100644
--- a/lang/cpp17/removing_trigraphs.md
+++ b/lang/cpp17/removing_trigraphs.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>参照メンバをもつクラスの置き換え [P0137R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/replacement_of_class_objects_containing_reference_members.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/replacement_of_class_objects_containing_reference_members.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/replacement_of_class_objects_containing_reference_members.md b/lang/cpp17/replacement_of_class_objects_containing_reference_members.md
index c14c128a5..c005c7767 100644
--- a/lang/cpp17/replacement_of_class_objects_containing_reference_members.md
+++ b/lang/cpp17/replacement_of_class_objects_containing_reference_members.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>if文とswitch文の条件式と初期化を分離 [P0305R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/selection_statements_with_initializer.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/selection_statements_with_initializer.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/selection_statements_with_initializer.md b/lang/cpp17/selection_statements_with_initializer.md
index 853453de2..9015a1481 100644
--- a/lang/cpp17/selection_statements_with_initializer.md
+++ b/lang/cpp17/selection_statements_with_initializer.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>構造化束縛 [P0217R3] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/structured_bindings.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/structured_bindings.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/structured_bindings.md b/lang/cpp17/structured_bindings.md
index c0b07bf72..ce661c693 100644
--- a/lang/cpp17/structured_bindings.md
+++ b/lang/cpp17/structured_bindings.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>クラステンプレートのテンプレート引数推論 [P0091R3] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/type_deduction_for_class_templates.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/type_deduction_for_class_templates.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/type_deduction_for_class_templates.md b/lang/cpp17/type_deduction_for_class_templates.md
index 34ece2891..5f3edea73 100644
--- a/lang/cpp17/type_deduction_for_class_templates.md
+++ b/lang/cpp17/type_deduction_for_class_templates.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>属性の名前空間指定に繰り返しをなくす [P0028R4] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/using_attribute_namespaces.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/using_attribute_namespaces.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/using_attribute_namespaces.md b/lang/cpp17/using_attribute_namespaces.md
index 5d944df0b..a587e9b7f 100644
--- a/lang/cpp17/using_attribute_namespaces.md
+++ b/lang/cpp17/using_attribute_namespaces.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>UTF-8文字リテラル [N4267] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/utf8_character_literals.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp17/utf8_character_literals.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/utf8_character_literals.md b/lang/cpp17/utf8_character_literals.md
index e0efe041a..ca2bb8ce5 100644
--- a/lang/cpp17/utf8_character_literals.md
+++ b/lang/cpp17/utf8_character_literals.md
@@ -5,7 +5,7 @@
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>特殊化のアクセスチェック [P0692R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/access_checking_on_specializations.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/access_checking_on_specializations.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/access_checking_on_specializations.md b/lang/cpp20/access_checking_on_specializations.md
index e7e3e1126..74dcccd32 100644
--- a/lang/cpp20/access_checking_on_specializations.md
+++ b/lang/cpp20/access_checking_on_specializations.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>関数テンプレートに明示的に型指定した場合にADLで見つからない問題を修正 [P0846R0] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/adl_and_function_templates_that_are_not_visible.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/adl_and_function_templates_that_are_not_visible.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/adl_and_function_templates_that_are_not_visible.md b/lang/cpp20/adl_and_function_templates_that_are_not_visible.md
index 360530f8d..996c53ae4 100644
--- a/lang/cpp20/adl_and_function_templates_that_are_not_visible.md
+++ b/lang/cpp20/adl_and_function_templates_that_are_not_visible.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>丸カッコの値リストからの集成体初期化を許可 [P0960R3] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md b/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md
index eda127df3..28a702583 100644
--- a/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md
+++ b/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md
@@ -6,7 +6,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式のキャプチャとして[=, this]を許可する [P0409R2] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allow_lambda_capture_equal_this.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/allow_lambda_capture_equal_this.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allow_lambda_capture_equal_this.md b/lang/cpp20/allow_lambda_capture_equal_this.md
index f2ca69bff..f125c03cb 100644
--- a/lang/cpp20/allow_lambda_capture_equal_this.md
+++ b/lang/cpp20/allow_lambda_capture_equal_this.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式の初期化キャプチャでのパック展開を許可 [P0780R2] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md b/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md
index e4171c60f..300dd5820 100644
--- a/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md
+++ b/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>friend指定された関数内から構造化束縛を使用して非公開メンバ変数にアクセスすることを許可 [P0969R0] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allow_structured_bindings_to_accessible_members.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/allow_structured_bindings_to_accessible_members.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allow_structured_bindings_to_accessible_members.md b/lang/cpp20/allow_structured_bindings_to_accessible_members.md
index 7eed7ff0d..94a6b8f19 100644
--- a/lang/cpp20/allow_structured_bindings_to_accessible_members.md
+++ b/lang/cpp20/allow_structured_bindings_to_accessible_members.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>定数式からの仮想関数の呼び出しを許可 [P1064R0] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/allow_virtual_function_calls_in_constant_expressions.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.md b/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.md
index 6a6643aae..38fafeba3 100644
--- a/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.md
+++ b/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>定数式での`dynamic_cast`、多態的な`typeid`を許可 [P1327R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.md b/lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.md
index 79fb171a6..723cff331 100644
--- a/lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.md
+++ b/lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>new式での配列要素数の推論 [P1009R2] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/array_size_deduction_in_new-expressions.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/array_size_deduction_in_new-expressions.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/array_size_deduction_in_new-expressions.md b/lang/cpp20/array_size_deduction_in_new-expressions.md
index 34a3005ac..cf15d21fc 100644
--- a/lang/cpp20/array_size_deduction_in_new-expressions.md
+++ b/lang/cpp20/array_size_deduction_in_new-expressions.md
@@ -6,7 +6,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>定数式内での共用体のアクティブメンバの変更を許可 [P1330R0] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md b/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md
index 6cd672333..e1a81ed04 100644
--- a/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md
+++ b/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>UTF-8エンコーディングされた文字の型として`char8_t`を追加 [P0482R6] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/char8_t.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/char8_t.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/char8_t.md b/lang/cpp20/char8_t.md
index 3b1decd0a..5cd00f1fe 100644
--- a/lang/cpp20/char8_t.md
+++ b/lang/cpp20/char8_t.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>抽象型のチェック [P0929R2] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/checking_for_abstract_class_types.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/checking_for_abstract_class_types.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/checking_for_abstract_class_types.md b/lang/cpp20/checking_for_abstract_class_types.md
index 55f911cad..41a1ff9f7 100644
--- a/lang/cpp20/checking_for_abstract_class_types.md
+++ b/lang/cpp20/checking_for_abstract_class_types.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>集成体クラステンプレートのテンプレート引数推論 [P1816R0] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/class_template_argument_deduction_for_aggregates.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/class_template_argument_deduction_for_aggregates.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/class_template_argument_deduction_for_aggregates.md b/lang/cpp20/class_template_argument_deduction_for_aggregates.md
index 33d731174..d55445ee8 100644
--- a/lang/cpp20/class_template_argument_deduction_for_aggregates.md
+++ b/lang/cpp20/class_template_argument_deduction_for_aggregates.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>エイリアステンプレート経由でのクラステンプレートのテンプレート引数推論 [P1814R0] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/class_template_argument_deduction_for_alias_templates.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/class_template_argument_deduction_for_alias_templates.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/class_template_argument_deduction_for_alias_templates.md b/lang/cpp20/class_template_argument_deduction_for_alias_templates.md
index 848b543ca..fbd29c5cb 100644
--- a/lang/cpp20/class_template_argument_deduction_for_alias_templates.md
+++ b/lang/cpp20/class_template_argument_deduction_for_alias_templates.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非型テンプレートパラメータとしてクラス型を許可する [P0732R2] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/class_types_in_non-type_template_parameters.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/class_types_in_non-type_template_parameters.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/class_types_in_non-type_template_parameters.md b/lang/cpp20/class_types_in_non-type_template_parameters.md
index 741e36484..743d86a47 100644
--- a/lang/cpp20/class_types_in_non-type_template_parameters.md
+++ b/lang/cpp20/class_types_in_non-type_template_parameters.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンセプト [P0734R0] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/concepts.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/concepts.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/concepts.md b/lang/cpp20/concepts.md
index 97d65c35c..fbf72869a 100644
--- a/lang/cpp20/concepts.md
+++ b/lang/cpp20/concepts.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>一貫比較 [P0515R3] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/consistent_comparison.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/consistent_comparison.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/consistent_comparison.md b/lang/cpp20/consistent_comparison.md
index 5b8cac2d3..92abbb27a 100644
--- a/lang/cpp20/consistent_comparison.md
+++ b/lang/cpp20/consistent_comparison.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンパイル時初期化を強制する`constinit`キーワードを追加 [P1143R2] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/constinit.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/constinit.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/constinit.md b/lang/cpp20/constinit.md
index 278c0de2d..3997d19d8 100644
--- a/lang/cpp20/constinit.md
+++ b/lang/cpp20/constinit.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ポインタから`bool`への変換を縮小変換とする [P1957R2] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md b/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md
index 2c03a7b4d..486be44f1 100644
--- a/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md
+++ b/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コルーチン [P0912R5] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/coroutines.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/coroutines.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/coroutines.md b/lang/cpp20/coroutines.md
index a85f03595..cd7a359c2 100644
--- a/lang/cpp20/coroutines.md
+++ b/lang/cpp20/coroutines.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>状態を持たないラムダ式を、デフォルト構築可能、代入可能とする [P0624R2] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md b/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md
index 43c2c464d..9ada4dbec 100644
--- a/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md
+++ b/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ビットフィールドのメンバ変数初期化 [P0683R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/default_member_initializers_for_bit_fields.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/default_member_initializers_for_bit_fields.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/default_member_initializers_for_bit_fields.md b/lang/cpp20/default_member_initializers_for_bit_fields.md
index 89b4aa3f7..571593211 100644
--- a/lang/cpp20/default_member_initializers_for_bit_fields.md
+++ b/lang/cpp20/default_member_initializers_for_bit_fields.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[=]によるthisの暗黙のキャプチャを非推奨化 [P0806R2] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md b/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md
index a2006710a..75358f792 100644
--- a/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md
+++ b/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>PODを非推奨化 [P0767R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecate_pod.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/deprecate_pod.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;PODを非推奨化 [P0767R1]&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative-page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;../../reference/type_traits/is_pod.html&#34;&gt;POD (Plain Old Data) という型の分類&lt;/a&gt;は、C++11において&lt;a href=&#34;../../reference/type_traits/is_trivial.html&#34;&gt;トリビアル型&lt;/a&gt;と&lt;a href=&#34;../../reference/type_traits/is_standard_layout.html&#34;&gt;スタンダードレイアウト型&lt;/a&gt;に用語が分割された。&lt;/p&gt;
&lt;p&gt;C++20では規格の文面に残っていた「POD」の使用をやめ、スタンダードレイアウト型などのほかの型分類に置き換えた。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_pod.html&#34;&gt;is_pod&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/aligned_storage.html&#34;&gt;aligned_storage&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/aligned_union.html&#34;&gt;aligned_union&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cstddef/max_align_t.html&#34;&gt;max_align_t&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0767r1.html&#34; target=&#34;_blank&#34;&gt;P0767R1 Deprecate POD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2342.htm&#34; target=&#34;_blank&#34;&gt;N2342 POD&#39;s Revisited; Resolving Core Issue 568 (Revision 5)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://faithandbrave.hateblo.jp/entry/20081127/1227777378&#34; target=&#34;_blank&#34;&gt;C++0x POD再考 - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C++11においてPODという用語が分割された文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>添字演算子内でのカンマ演算子の使用を非推奨化 [P1161R3] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md b/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md
index be7420c5b..367b697ea 100644
--- a/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md
+++ b/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ほとんどの`volatile`を非推奨化 [P1152R4] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecating_volatile.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/deprecating_volatile.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/deprecating_volatile.md b/lang/cpp20/deprecating_volatile.md
index 9586db0d6..6efb68a5a 100644
--- a/lang/cpp20/deprecating_volatile.md
+++ b/lang/cpp20/deprecating_volatile.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>指示付き初期化 [P0329R4] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/designated_initialization.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/designated_initialization.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/designated_initialization.md b/lang/cpp20/designated_initialization.md
index 257318aed..57e3f1491 100644
--- a/lang/cpp20/designated_initialization.md
+++ b/lang/cpp20/designated_initialization.md
@@ -6,7 +6,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>型の文脈でtypenameの省略を許可 [P0634R3] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/down_with_typename.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/down_with_typename.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/down_with_typename.md b/lang/cpp20/down_with_typename.md
index 332621f08..90eb921e4 100644
--- a/lang/cpp20/down_with_typename.md
+++ b/lang/cpp20/down_with_typename.md
@@ -6,7 +6,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変長データを扱うクラスの効率的なdelete [P0722R3] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md b/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md
index e995bf577..2dc51b768 100644
--- a/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md
+++ b/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数内で未評価のインラインアセンブリを許可することによる組み込み関数のconstexpr有効化 [P1668R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md b/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md
index ecbff6e9f..7e6af1ac6 100644
--- a/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md
+++ b/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>関数を条件付きでexplicitにする構文を追加 [P0892R2] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/explicit_bool.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/explicit_bool.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/explicit_bool.md b/lang/cpp20/explicit_bool.md
index c8e39641d..3f744c5f7 100644
--- a/lang/cpp20/explicit_bool.md
+++ b/lang/cpp20/explicit_bool.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>構造化束縛を拡張して通常の変数宣言のように使用できるようにする [P1091R3] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.md b/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.md
index 9d73404bc..d3999893f 100644
--- a/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.md
+++ b/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ジェネリックラムダのテンプレート構文 [P0428R2] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/familiar_template_syntax_for_generic_lambdas.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/familiar_template_syntax_for_generic_lambdas.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/familiar_template_syntax_for_generic_lambdas.md b/lang/cpp20/familiar_template_syntax_for_generic_lambdas.md
index bd1567078..5c8013d87 100644
--- a/lang/cpp20/familiar_template_syntax_for_generic_lambdas.md
+++ b/lang/cpp20/familiar_template_syntax_for_generic_lambdas.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>機能テストマクロ -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/feature_test_macros.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/feature_test_macros.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;機能テストマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative-page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;h3&gt;言語機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_aggregate_paren_init&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;allow_initializing_aggregates_from_a_parenthesized_list_of_values.html&#34;&gt;丸カッコの値リストからの集成体初期化を許可&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_char8_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;char8_t.html&#34;&gt;UTF-8エンコーディングされた文字の型として&lt;code&gt;char8_t&lt;/code&gt;を追加&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_concepts&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;concepts.html&#34;&gt;コンセプト&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_conditional_explicit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;explicit_bool.html&#34;&gt;関数を条件付きで&lt;code&gt;explicit&lt;/code&gt;にする構文を追加&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;allow_virtual_function_calls_in_constant_expressions.html&#34;&gt;定数式からの仮想関数の呼び出しを許可&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.html&#34;&gt;定数式での&lt;code&gt;dynamic_cast&lt;/code&gt;、多態的な&lt;code&gt;typeid&lt;/code&gt;を許可&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;try-catch_blocks_in_constexpr_functions.html&#34;&gt;constexpr関数内でのtry-catchブロックを許可&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;changing_the_active_member_of_a_union_inside_constexpr.html&#34;&gt;定数式内での共用体のアクティブメンバの変更を許可&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;permitting_trivial_default_initialization_in_constexpr_contexts.html&#34;&gt;constexpr関数内でのトリビアルなデフォルト初期化を許可&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.html&#34;&gt;constexpr関数内で未評価のインラインアセンブリを許可することによる組み込み関数のconstexpr有効化&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr_dynamic_alloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;more_constexpr_containers.html&#34;&gt;可変サイズをもつコンテナの&lt;code&gt;constexpr&lt;/code&gt;化&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr_in_decltype&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;less_eager_instantiation_of_constexpr_functions.html&#34;&gt;評価されない文脈での定数式評価によって特殊メンバ関数がインスタンス化されることを規定&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_consteval&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;immediate_functions.html&#34;&gt;即時関数&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constinit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;constinit.html&#34;&gt;コンパイル時初期化を強制する&lt;code&gt;constinit&lt;/code&gt;キーワードを追加&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_deduction_guides&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;class_template_argument_deduction_for_aggregates.html&#34;&gt;集成体クラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;class_template_argument_deduction_for_alias_templates.html&#34;&gt;エイリアステンプレート経由でのクラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_designated_initializers&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201707L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;designated_initialization.html&#34;&gt;指示付き初期化&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_generic_lambdas&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201707L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;familiar_template_syntax_for_generic_lambdas.html&#34;&gt;ジェネリックラムダのテンプレート構文&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_impl_coroutine&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;coroutines.html&#34;&gt;コルーチン&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_impl_destroying_delete&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;efficient_sized_delete_for_variable_sized_classes.html&#34;&gt;可変長データを扱うクラスの効率的な&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_impl_three_way_comparison&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;consistent_comparison.html&#34;&gt;一貫比較&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_init_captures&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201803L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;allow_pack_expansion_in_lambda_init_capture.html&#34;&gt;ラムダ式の初期化キャプチャでのパック展開を許可&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_modules&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;modules.html&#34;&gt;モジュール&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_nontype_template_args&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201911L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;class_types_in_non-type_template_parameters.html&#34;&gt;非型テンプレートパラメータとしてクラス型を許可する&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_using_enum&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;using_enum.html&#34;&gt;スコープ付き列挙型のusing宣言&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ライブラリ&lt;/h3&gt;
&lt;p&gt;ライブラリの機能テストマクロは全て&lt;code&gt;&lt;a href=&#34;../../reference/version.html&#34;&gt;&amp;lt;version&amp;gt;&lt;/a&gt;&lt;/code&gt;でも提供される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_array_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201803L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::array&lt;/code&gt;の完全&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/array.html&#34;&gt;&amp;lt;array&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_assume_aligned&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/assume_aligned.html&#34;&gt;std::assume_aligned()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_flag_test&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic_flag/test.html&#34;&gt;std::atomic_flag::test()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/atomic/atomic.html&#34;&gt;&lt;code&gt;std::atomic&lt;/code&gt;の浮動小数点数型に対する特殊化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_lock_free_type_aliases&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic.html&#34;&gt;atomic_signed_lock_free/atomic_unsigned_lock_free&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_ref&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic_ref.html&#34;&gt;std::atomic_ref&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_shared_ptr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/memory/atomic.html&#34;&gt;&lt;code&gt;std::atomic&lt;/code&gt;の&lt;code&gt;std::shared_ptr/std::weak_ptr&lt;/code&gt;に対する特殊化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_value_initialization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201911L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/atomic/atomic_flag/op_constructor.html&#34;&gt;&lt;code&gt;std::atomic_flag&lt;/code&gt;の値初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_wait&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic/wait.html&#34;&gt;std::atomic::wait()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic/notify_one.html&#34;&gt;std::atomic::notify_one()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic/notify_all.html&#34;&gt;std::atomic::notify_all()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_barrier&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/barrier.html&#34;&gt;&amp;lt;barrier&amp;gt;&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/barrier.html&#34;&gt;&amp;lt;barrier&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_bind_front&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional/bind_front.html&#34;&gt;std::bind_front()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_bit_cast&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit/bit_cast.html&#34;&gt;std::bit_cast()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_bitops&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_bounded_array_traits&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_bounded_array.html&#34;&gt;std::is_bounded_array&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_unbounded_array.html&#34;&gt;std::is_unbounded_array&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_char8_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;char8_t&lt;/code&gt;に対する特殊化の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/filesystem.html&#34;&gt;&amp;lt;filesystem&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/istream.html&#34;&gt;&amp;lt;istream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/limits.html&#34;&gt;&amp;lt;limits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/locale.html&#34;&gt;&amp;lt;locale&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ostream.html&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_chrono&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;カレンダーとタイムゾーン&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_concepts&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/concepts.html&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/concepts.html&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_algorithms&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多くのアルゴリズムに&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_complex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/complex/complex.html&#34;&gt;std::complex&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/complex.html&#34;&gt;&amp;lt;complex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_dynamic_alloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/destroy_at.html&#34;&gt;std::destroy_at&lt;/a&gt;&lt;/code&gt;ファミリと&lt;code&gt;&lt;a href=&#34;../../reference/memory/allocator.html&#34;&gt;std::allocator&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&#34;../../reference/memory/allocator_traits.html&#34;&gt;std::alocator_traits&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/construct_at.html&#34;&gt;std::construct_at&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_functional&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::invoke&lt;/code&gt;、&lt;code&gt;std::reference_wrapper&lt;/code&gt;、&lt;code&gt;std::not_fn&lt;/code&gt;、&lt;code&gt;std::bind_front&lt;/code&gt;、&lt;code&gt;std::bind&lt;/code&gt;、&lt;code&gt;std::mem_fn&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator/back_insert_iterator.html&#34;&gt;back_insert_iterator&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../../reference/iterator/front_insert_iterator.html&#34;&gt;front_insert_iterator&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../../reference/iterator/insert_iterator.html&#34;&gt;insert_iterator&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_memory&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/pointer_traits.html&#34;&gt;std::pointer_traits&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_numeric&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201911L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;の数値アルゴリズムの&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string/basic_string.html&#34;&gt;std::string&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_string_view&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view/basic_string_view/copy.html&#34;&gt;std::string_view::copy&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_tuple&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple/tuple.html&#34;&gt;std::tuple&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;追加対応（一部のコンストラクタと代入演算子）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple.html&#34;&gt;&amp;lt;tuple&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_utility&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility/pair.html&#34;&gt;std::pair&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;追加対応（一部のコンストラクタと代入演算子）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_vector&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/vector/vector.html&#34;&gt;std::vector&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/vector.html&#34;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_coroutine&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/coroutine.html&#34;&gt;&amp;lt;coroutine&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダの追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/coroutine.html&#34;&gt;&amp;lt;coroutine&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_destroying_delete&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/new/destroying_delete_t.html&#34;&gt;std::destroying_delete_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/new.html&#34;&gt;&amp;lt;new&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_endian&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit/endian.html&#34;&gt;std::endian&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_erase_if&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;各コンテナに対する&lt;code&gt;std::erase&lt;/code&gt;、&lt;code&gt;std::erase_if&lt;/code&gt;の特殊化&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/deque.html&#34;&gt;&amp;lt;deque&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/forward_list.html&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/list.html&#34;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/vector.html&#34;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/set.html&#34;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_set.html&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_execution&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/execution/execution/execution_policy.html&#34;&gt;std::execution::unsequenced_policy&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/execution.html&#34;&gt;&amp;lt;execution&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_format&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;202106L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;202110L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt;ヘッダ&lt;br /&gt;コンパイル時フォーマット文字列検査/&lt;code&gt;&lt;a href=&#34;../../reference/format/vformat.html&#34;&gt;std::vformat&lt;/a&gt;&lt;/code&gt;のコードサイズ削減&lt;br /&gt;&lt;code&gt;std::chrono&lt;/code&gt;のフォーマットにおけるロケール指定の修正/&lt;code&gt;const&lt;/code&gt;だとフォーマットできない型に対する対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/format.html&#34;&gt;&amp;lt;format&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_generic_unordered_lookup&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非順序連想コンテナの&lt;code&gt;find(), count(), contains(), equal_range()&lt;/code&gt;に対するHeterogeneous Overload追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_set.html&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_int_pow2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;bit&amp;gt;&lt;/code&gt;の2の冪乗に関する操作を行う関数の名前変更&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_integer_comparison_functions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility/cmp_equal.html&#34;&gt;std::cmp_equal()&lt;/a&gt;&lt;/code&gt;等の整数比較関数と&lt;code&gt;&lt;a href=&#34;../../reference/utility/in_range.html&#34;&gt;std::in_range()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_interpolate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cmath/lerp.html&#34;&gt;std::lerp()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/numeric/midpoint.html&#34;&gt;std::midpoint()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_constant_evaluated&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_constant_evaluated.html&#34;&gt;std::is_constant_evaluated()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_layout_compatible&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_layout_compatible.html&#34;&gt;std::is_layout_compatible&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_corresponding_member.html&#34;&gt;is_corresponding_member&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_nothrow_convertible&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_nothrow_convertible.html&#34;&gt;std::is_nothrow_convertible&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_pointer_interconvertible&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_corresponding_member.html&#34;&gt;std::is_corresponding_member&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_pointer_interconvertible_base_of.html&#34;&gt;std::is_pointer_interconvertible_base_of&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_jthread&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201911L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/thread/jthread.html&#34;&gt;std::jthread&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;stop_token&lt;/code&gt;による協調的キャンセル機構&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/stop_token.html&#34;&gt;&amp;lt;stop_token&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/thread.html&#34;&gt;&amp;lt;thread&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_latch&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/latch/latch.html&#34;&gt;std::latch&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/latch.html&#34;&gt;&amp;lt;latch&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_list_remove_return_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::list&lt;/code&gt;と&lt;code&gt;std::forward_list&lt;/code&gt;の&lt;code&gt;remove(), remove_if(), unique()&lt;/code&gt;の戻り値型変更&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/forward_list.html&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/list.html&#34;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_math_constants&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数学定数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numbers.html&#34;&gt;&amp;lt;numbers&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_polymorphic_allocator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory_resource/polymorphic_allocator.html&#34;&gt;std::pmr::polymorphic_allocator&lt;/a&gt;&lt;/code&gt;の改修&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201911L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;202106L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;202110L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;RangeライブラリとRangeアルゴリズム&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/view.html&#34;&gt;view&lt;/a&gt;&lt;/code&gt;コンセプトのデフォルト構築要求を削除&lt;br /&gt;所有権を持つ&lt;code&gt;view&lt;/code&gt;の許可と&lt;code&gt;&lt;a href=&#34;../../reference/ranges/owning_view.html&#34;&gt;owning_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_remove_cvref&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/remove_cvref.html&#34;&gt;std::remove_cvref&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_semaphore&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/semaphore/counting_semaphore.html&#34;&gt;std::counting_semaphore&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;std::binary_semaphore&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/semaphore.html&#34;&gt;&amp;lt;semaphore&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shared_ptr_arrays&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201707L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/make_shared.html&#34;&gt;std::make_shared&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/memory/allocate_shared.html&#34;&gt;std::allocate_shared&lt;/a&gt;&lt;/code&gt;の配列対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shift&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/shift_left.html&#34;&gt;std::shift_left&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/shift_right.html&#34;&gt;std::shift_right&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_smart_ptr_for_overwrite&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/make_shared_for_overwrite.html&#34;&gt;std::make_shared_for_overwrite()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/memory/allocate_shared_for_overwrite.html&#34;&gt;std::allocate_shared_for_overwrite()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_source_location&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/source_location/source_location.html&#34;&gt;std::source_location&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/source_location.html&#34;&gt;&amp;lt;source_location&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_span&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/span/span.html&#34;&gt;std::span&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/span.html&#34;&gt;&amp;lt;span&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ssize&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator/ssize.html&#34;&gt;std::ssize()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;std::span&lt;/code&gt;で使用する整数型の符号なし（&lt;code&gt;size_t&lt;/code&gt;）への変更&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_starts_ends_with&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::string&lt;/code&gt;と&lt;code&gt;std::string_view&lt;/code&gt;の&lt;code&gt;starts_with()&lt;/code&gt;と&lt;code&gt;ends_with()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_string_view&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201803L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::string&lt;/code&gt;と&lt;code&gt;std::string_view&lt;/code&gt;のイテレータの&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_syncbuf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201803L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同期化出力ストリーム（&lt;code&gt;std::osyncstream&lt;/code&gt;）とバッファ（&lt;code&gt;std::syncbuf&lt;/code&gt;）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/syncstream.html&#34;&gt;&amp;lt;syncstream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_three_way_comparison&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;標準ライブラリの三方比較演算子対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_to_address&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/to_address.html&#34;&gt;std::to_address()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_to_array&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/array/to_array.html&#34;&gt;std::to_array()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/array.html&#34;&gt;&amp;lt;array&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_type_identity&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/type_identity.html&#34;&gt;std::type_identity&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_unwrap_ref&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/unwrap_reference.html&#34;&gt;std::unwrap_reference&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/unwrap_ref_decay.html&#34;&gt;std::unwrap_ref_decay&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations&#34; target=&#34;_blank&#34;&gt;SD-FeatureTest: Feature-Test Macros and Policies - isocpp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>const修飾されたメンバポインタの制限を修正 [P0704R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/fixing_const_qualified_pointers_to_members.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/fixing_const_qualified_pointers_to_members.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/fixing_const_qualified_pointers_to_members.md b/lang/cpp20/fixing_const_qualified_pointers_to_members.md
index b5fb53549..054b5f288 100644
--- a/lang/cpp20/fixing_const_qualified_pointers_to_members.md
+++ b/lang/cpp20/fixing_const_qualified_pointers_to_members.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>autoパラメータによる関数テンプレートの簡易定義 -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/function_templates_with_auto_parameters.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/function_templates_with_auto_parameters.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/function_templates_with_auto_parameters.md b/lang/cpp20/function_templates_with_auto_parameters.md
index 445873b43..4a4109825 100644
--- a/lang/cpp20/function_templates_with_auto_parameters.md
+++ b/lang/cpp20/function_templates_with_auto_parameters.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>即時関数 [P1073R3] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/immediate_functions.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/immediate_functions.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/immediate_functions.md b/lang/cpp20/immediate_functions.md
index 4bcdff0d8..945957495 100644
--- a/lang/cpp20/immediate_functions.md
+++ b/lang/cpp20/immediate_functions.md
@@ -6,7 +6,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>未初期化領域への暗黙的なオブジェクト構築 -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md b/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
index 632a6de5e..397f83ecf 100644
--- a/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
+++ b/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>空オブジェクトに対する最適化を支援する属性[[no_unique_address]] [P0840R2] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/language_support_for_empty_objects.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/language_support_for_empty_objects.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/language_support_for_empty_objects.md b/lang/cpp20/language_support_for_empty_objects.md
index f1b35705e..d7556df21 100644
--- a/lang/cpp20/language_support_for_empty_objects.md
+++ b/lang/cpp20/language_support_for_empty_objects.md
@@ -6,7 +6,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>評価されない文脈での定数式評価によって特殊メンバ関数がインスタンス化されることを規定 [P0859R0] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/less_eager_instantiation_of_constexpr_functions.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/less_eager_instantiation_of_constexpr_functions.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/less_eager_instantiation_of_constexpr_functions.md b/lang/cpp20/less_eager_instantiation_of_constexpr_functions.md
index 3628038c7..a5b2da250 100644
--- a/lang/cpp20/less_eager_instantiation_of_constexpr_functions.md
+++ b/lang/cpp20/less_eager_instantiation_of_constexpr_functions.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>確率が高い分岐と低い分岐を伝える属性 [[likely]], [[unlikely]] [P0479R5] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/likely_and_unlikely_attributes.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/likely_and_unlikely_attributes.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/likely_and_unlikely_attributes.md b/lang/cpp20/likely_and_unlikely_attributes.md
index f368c8873..c1b05c11e 100644
--- a/lang/cpp20/likely_and_unlikely_attributes.md
+++ b/lang/cpp20/likely_and_unlikely_attributes.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>char16_tとchar32_tの文字・文字列リテラルを、文字コードUTF-16/32に規定 [P1041R4] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/make_char16t_char32t_string_literals_be_utf16_32.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/make_char16t_char32t_string_literals_be_utf16_32.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;char16_tとchar32_tの文字・文字列リテラルを、文字コードUTF-16/32に規定 [P1041R4]&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative-page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++11で追加された文字型&lt;a href=&#34;../cpp11/char16_32.html&#34;&gt;&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;&lt;/a&gt;の文字・文字列リテラルの文字コード、C++20からはUTF-16とUTF-32であることが規定される。&lt;/p&gt;
&lt;p&gt;これまでは、以下のような仕様であった：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;uchar&amp;gt;&lt;/code&gt;ヘッダでマクロ&lt;code&gt;__STDC_UTF_16__&lt;/code&gt;が定義される場合、&lt;code&gt;char16_t&lt;/code&gt;型の値はUTF-16の妥当なコードポイントを持つ。そうでない場合、&lt;code&gt;char16_t&lt;/code&gt;型の値は実装定義の文字コードとなる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;uchar&amp;gt;&lt;/code&gt;ヘッダでマクロ&lt;code&gt;__STDC_UTF_32__&lt;/code&gt;が定義される場合、&lt;code&gt;char32_t&lt;/code&gt;型の値はUTF-32の妥当なコードポイントを持つ。そうでない場合、&lt;code&gt;char32_t&lt;/code&gt;型の値は実装定義の文字コードとなる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++20では、無条件にUTF-16とUTF-32であることが規定される。&lt;/p&gt;
&lt;p&gt;なお、&lt;code&gt;u8&lt;/code&gt;プレフィックスをつけた文字・文字列リテラルは、UTF-8であることがこれまでに規定されていた。&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;これまで、&lt;code&gt;&amp;lt;uchar&amp;gt;&lt;/code&gt;ヘッダのマクロ&lt;code&gt;__STDC_UTF_16__&lt;/code&gt;と&lt;code&gt;__STDC_UTF_32__&lt;/code&gt;が定義されている場合にのみ、&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;はUTF-16/UTF-32エンコーディングであると規定されていた。&lt;/p&gt;
&lt;p&gt;しかし、これらが定義されなかった場合にコンパイラがほかのエンコーディングを選択することが疑わしかった。また、&lt;code&gt;char16_t&lt;/code&gt;の仕様として「サロゲートペア」が含まれているが、その概念をもつ他のよく知られた文字コードはない。単一の文字を32ビットで表現する他のよく知られた文字コードもない。&lt;/p&gt;
&lt;p&gt;実際にはすべての実装でこれらの文字・文字列リテラルはUTF-16とUTF-32にエンコーディングされるため、要件を示すだけではなく、より明確にするために、&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;の文字・文字列リテラルがUTF-16とUTF-32文字コードであることを規定する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../cpp11/char16_32.html&#34;&gt;C++11 &lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../cpp11/utf8_string_literals.html&#34;&gt;C++11 UTF-8文字列リテラル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../cpp17/utf8_character_literals.html&#34;&gt;C++17 UTF-8文字リテラル&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1041r4.html&#34; target=&#34;_blank&#34;&gt;P1041R4 Make &lt;code&gt;char16_t&lt;/code&gt;/&lt;code&gt;char32_t&lt;/code&gt; string literals be UTF-16/32&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>モジュール [P1103R3] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/modules.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/modules.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/modules.md b/lang/cpp20/modules.md
index 08c718408..d1eade1b5 100644
--- a/lang/cpp20/modules.md
+++ b/lang/cpp20/modules.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変サイズをもつコンテナのconstexpr化 [P0784R7] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/more_constexpr_containers.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/more_constexpr_containers.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/more_constexpr_containers.md b/lang/cpp20/more_constexpr_containers.md
index b8d3fafa9..d6eb1a19e 100644
--- a/lang/cpp20/more_constexpr_containers.md
+++ b/lang/cpp20/more_constexpr_containers.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>入れ子名前空間定義でのインライン名前空間 [P1094R2] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/nested_inline_mamespaces.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/nested_inline_mamespaces.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/nested_inline_mamespaces.md b/lang/cpp20/nested_inline_mamespaces.md
index a7afbfdcf..49c1dde45 100644
--- a/lang/cpp20/nested_inline_mamespaces.md
+++ b/lang/cpp20/nested_inline_mamespaces.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[nodiscard]]をコンストラクタのオーバーロードごとに付加できるようにする -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/nodiscard_for_constructors.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/nodiscard_for_constructors.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/nodiscard_for_constructors.md b/lang/cpp20/nodiscard_for_constructors.md
index 85ba40bd0..bd3a0a979 100644
--- a/lang/cpp20/nodiscard_for_constructors.md
+++ b/lang/cpp20/nodiscard_for_constructors.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[nodiscard]]属性に理由となる文字列を付加できるようにする [P1301R4] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/nodiscard_should_have_a_reason.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/nodiscard_should_have_a_reason.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/nodiscard_should_have_a_reason.md b/lang/cpp20/nodiscard_should_have_a_reason.md
index e9d845f47..d50e28347 100644
--- a/lang/cpp20/nodiscard_should_have_a_reason.md
+++ b/lang/cpp20/nodiscard_should_have_a_reason.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>要素数不明の配列への変換を許可 [P0388R4] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md b/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md
index 1bdd5244e..61e5cf72c 100644
--- a/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md
+++ b/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md
@@ -6,7 +6,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数内でのトリビアルなデフォルト初期化を許可 [P1331R2] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md b/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md
index d3567af8a..2a6192d39 100644
--- a/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md
+++ b/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>更新された定義済みマクロ -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/predefined_macros.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/predefined_macros.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;更新された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative-page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cplusplus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++のバージョン値を表す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/n4859.html&#34; target=&#34;_blank&#34;&gt;N4859 Editors&#39; Report -- Programming Languages -- C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ユーザー宣言したコンストラクタを持つクラスの集成体初期化を禁止 [P1008R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/prohibit_aggregates_with_user-declared_constructors.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/prohibit_aggregates_with_user-declared_constructors.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/prohibit_aggregates_with_user-declared_constructors.md b/lang/cpp20/prohibit_aggregates_with_user-declared_constructors.md
index dad12cf5d..2a995d1ff 100644
--- a/lang/cpp20/prohibit_aggregates_with_user-declared_constructors.md
+++ b/lang/cpp20/prohibit_aggregates_with_user-declared_constructors.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>初期化式をともなう範囲for文 [P0614R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/range-based_for_statements_with_initializer.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/range-based_for_statements_with_initializer.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/range-based_for_statements_with_initializer.md b/lang/cpp20/range-based_for_statements_with_initializer.md
index a71755910..02e7dcd7d 100644
--- a/lang/cpp20/range-based_for_statements_with_initializer.md
+++ b/lang/cpp20/range-based_for_statements_with_initializer.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>構造化束縛した変数の参照キャプチャを許可 [P1381R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/reference_capture_of_structured_bindings.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/reference_capture_of_structured_bindings.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/reference_capture_of_structured_bindings.md b/lang/cpp20/reference_capture_of_structured_bindings.md
index 060659721..51656fbbe 100644
--- a/lang/cpp20/reference_capture_of_structured_bindings.md
+++ b/lang/cpp20/reference_capture_of_structured_bindings.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>範囲for文がカスタマイゼーションポイントを見つけるルールを緩和 [P0962R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md b/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md
index f7af4f4bc..f24a6e300 100644
--- a/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md
+++ b/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>構造化束縛がカスタマイゼーションポイントを見つけるルールを緩和 [P0961R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.md b/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.md
index 62c18ce2a..a9ff87a99 100644
--- a/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.md
+++ b/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>throw()による例外送出しない指定を削除 -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/remove_deprecated_nothrow_exception_specification.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/remove_deprecated_nothrow_exception_specification.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/remove_deprecated_nothrow_exception_specification.md b/lang/cpp20/remove_deprecated_nothrow_exception_specification.md
index bab8f2cf8..088f25b9a 100644
--- a/lang/cpp20/remove_deprecated_nothrow_exception_specification.md
+++ b/lang/cpp20/remove_deprecated_nothrow_exception_specification.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>属性の名前空間を予約 -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/reserving_attribute_namespaces_for_future_use.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/reserving_attribute_namespaces_for_future_use.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;属性の名前空間を予約&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative-page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;将来的に標準で定義する属性のために、以下の名前空間の属性を予約する：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名前空間に属さない属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std&lt;/code&gt;および&lt;code&gt;std&lt;/code&gt; + 数字の名前空間の属性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../cpp11/attributes.html&#34;&gt;C++11 属性構文&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1908r1.pdf&#34; target=&#34;_blank&#34;&gt;P1908R1 Reserving Attribute Namespaces for Future Use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デフォルトのコピーコンストラクタと非constなコンストラクタが衝突する問題を修正 [P0641R2] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.md b/lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.md
index 558609396..11ba585ac 100644
--- a/lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.md
+++ b/lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>符号付き整数型が2の補数表現であることを規定 [P1236R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/signed_integers_are_twos_complement.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/signed_integers_are_twos_complement.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/signed_integers_are_twos_complement.md b/lang/cpp20/signed_integers_are_twos_complement.md
index b8f277cf6..d8360109f 100644
--- a/lang/cpp20/signed_integers_are_twos_complement.md
+++ b/lang/cpp20/signed_integers_are_twos_complement.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>暗黙のラムダキャプチャを簡略化 [P0588R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/simplifying_implicit_lambda_capture.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/simplifying_implicit_lambda_capture.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/simplifying_implicit_lambda_capture.md b/lang/cpp20/simplifying_implicit_lambda_capture.md
index 2adf847c8..7470fc371 100644
--- a/lang/cpp20/simplifying_implicit_lambda_capture.md
+++ b/lang/cpp20/simplifying_implicit_lambda_capture.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数内でのtry-catchブロックを許可 [P1002R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/try-catch_blocks_in_constexpr_functions.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/try-catch_blocks_in_constexpr_functions.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/try-catch_blocks_in_constexpr_functions.md b/lang/cpp20/try-catch_blocks_in_constexpr_functions.md
index 390f029ff..82881aead 100644
--- a/lang/cpp20/try-catch_blocks_in_constexpr_functions.md
+++ b/lang/cpp20/try-catch_blocks_in_constexpr_functions.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Unicode標準への参照を更新 -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/update_the_reference_to_the_unicode_standard.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/update_the_reference_to_the_unicode_standard.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Unicode標準への参照を更新&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative-page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;Unicode標準 (ISO/IEC 10646) としてこれまで、「ISO/IEC 10646-1:1993, Information technology — Universal Multiple-Octet Coded Character Set (UCS) — Part 1: Architecture and Basic Multilingual Plane」が参照されていた。&lt;/p&gt;
&lt;p&gt;従来の古い仕様への参照は、非推奨化された古い機能のものであるとして残し、Unicode標準の最新仕様「ISO/IEC 10646, Information technology — Universal Coded Character Set (UCS)」を参照するよう追加する。&lt;/p&gt;
&lt;p&gt;Unicode標準で非推奨化された用語UCS2とUCS4の扱いは、以下のようになる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UTC-32はUCS4と見なせるため、文字エンコーディングの説明ではUCS4の代わりにUTF-32を使用する&lt;/li&gt;
&lt;li&gt;ただしUTF-16はUCS2と見なすことができないため、古い機能のために古い仕様を参照するとして一部そのまま残す&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実装が常に最新のUnicode標準を参照していることから、この変更によるユーザーへの直接的な影響はない。&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;C++規格上ではISO/IEC 10646-1:1993を参照していても、実装は最新仕様に更新し続けていた。たとえば1996の仕様ではハングル文字のセットが削除されて別な位置に追加され、チベット文字が再追加された。実装はそれに対応している。&lt;/p&gt;
&lt;p&gt;また、C++標準が参照しているECMAScript標準でUnicode標準の参照が競合してしまう。&lt;/p&gt;
&lt;p&gt;Unicode標準での用語定義が変更されたことにも影響がある。UCS2とUCS4という用語が非推奨化されたために、その用語をC++標準が使用し続けることは望ましくない。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1025r1.html&#34; target=&#34;_blank&#34;&gt;P1025R1 Update The Reference To The Unicode Standard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スコープ付き列挙型のusing宣言 [P1099R5] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/using_enum.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/using_enum.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/using_enum.md b/lang/cpp20/using_enum.md
index f484e57a1..712164993 100644
--- a/lang/cpp20/using_enum.md
+++ b/lang/cpp20/using_enum.md
@@ -6,7 +6,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変引数が空でない場合のトークン置換 [P0306R4] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/va_opt.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/va_opt.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/va_opt.md b/lang/cpp20/va_opt.md
index 5b2367020..96d19e56f 100644
--- a/lang/cpp20/va_opt.md
+++ b/lang/cpp20/va_opt.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>評価されない文脈でのラムダ式 [P0315R4] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md b/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md
index 73d50d05e..4a220551d 100644
--- a/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md
+++ b/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md
@@ -5,7 +5,7 @@
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>elif/elifdef/elifndefのサポートを追加 [P2334R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md b/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md
index b08bfdd8d..50f00f7b5 100644
--- a/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md
+++ b/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md
@@ -5,7 +5,7 @@
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式に対する属性 [P2173R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/attributes_on_lambda_expressions.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/attributes_on_lambda_expressions.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/attributes_on_lambda_expressions.md b/lang/cpp23/attributes_on_lambda_expressions.md
index 2f6f162d7..7ef22e236 100644
--- a/lang/cpp23/attributes_on_lambda_expressions.md
+++ b/lang/cpp23/attributes_on_lambda_expressions.md
@@ -5,7 +5,7 @@
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>静的な診断メッセージの文字エンコーディング [P2246R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/character_encoding_of_diagnostic_text.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/character_encoding_of_diagnostic_text.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;静的な診断メッセージの文字エンコーディング [P2246R1]&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative-page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++23では、コンパイル時に診断メッセージを出力させる以下の機能について、ソースコードのエンコーディングが実行環境のエンコーディングで表現できない場合にどうするかの規定を見直す：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;static_assert&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[[deprecated]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#error&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++20までは、「基本ソース文字集合に含まれない文字は出力する必要はない」という規定になっていたが、基本ソース文字集合と実行環境のエンコーディングは関係ないものであるため、この規定を削除することとした。&lt;/p&gt;
&lt;p&gt;この規定はC20でも導入され、C++もそれに追従することとした。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2246r1.pdf&#34; target=&#34;_blank&#34;&gt;P2246R1 Character encoding of diagnostic text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg14/www/docs/n2563.pdf&#34; target=&#34;_blank&#34;&gt;WG14 N2563 Character encoding of diagnostic text&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>継承コンストラクタからのクラステンプレート引数の推論 [P2582R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/class_template_argument_deduction_from_inherited.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/class_template_argument_deduction_from_inherited.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/class_template_argument_deduction_from_inherited.md b/lang/cpp23/class_template_argument_deduction_from_inherited.md
index b6f22acbe..2e59fab64 100644
--- a/lang/cpp23/class_template_argument_deduction_from_inherited.md
+++ b/lang/cpp23/class_template_argument_deduction_from_inherited.md
@@ -5,7 +5,7 @@
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>文字リテラルエンコーディングを一貫させる [P2316R2] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/consistent_character_literal_encoding.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/consistent_character_literal_encoding.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/consistent_character_literal_encoding.md b/lang/cpp23/consistent_character_literal_encoding.md
index 716d42ac2..6e935b573 100644
--- a/lang/cpp23/consistent_character_literal_encoding.md
+++ b/lang/cpp23/consistent_character_literal_encoding.md
@@ -5,7 +5,7 @@
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数内でconsteval関数を呼び出せない問題を軽減 [P2564R3] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/consteval_needs_to_propagate_up.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/consteval_needs_to_propagate_up.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/consteval_needs_to_propagate_up.md b/lang/cpp23/consteval_needs_to_propagate_up.md
index 135fdb037..e3f7c3327 100644
--- a/lang/cpp23/consteval_needs_to_propagate_up.md
+++ b/lang/cpp23/consteval_needs_to_propagate_up.md
@@ -5,7 +5,7 @@
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>エスケープシーケンスの区切り [P2290R3] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/delimited_escape_sequences.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/delimited_escape_sequences.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/delimited_escape_sequences.md b/lang/cpp23/delimited_escape_sequences.md
index 667cb89c4..ce5ff8f59 100644
--- a/lang/cpp23/delimited_escape_sequences.md
+++ b/lang/cpp23/delimited_escape_sequences.md
@@ -5,7 +5,7 @@
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式で()を省略できる条件を緩和 [P1102R2] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/down_with_lambda_parens.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/down_with_lambda_parens.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/down_with_lambda_parens.md b/lang/cpp23/down_with_lambda_parens.md
index d34ff34e3..d5b20422f 100644
--- a/lang/cpp23/down_with_lambda_parens.md
+++ b/lang/cpp23/down_with_lambda_parens.md
@@ -5,7 +5,7 @@
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>初期化文での型の別名宣言を許可 [P2360R0] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/extend_init_statement_to_allow_alias_declaration.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/extend_init_statement_to_allow_alias_declaration.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md b/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md
index 524a3aef6..484797e3e 100644
--- a/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md
+++ b/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md
@@ -5,7 +5,7 @@
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>機能テストマクロ -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/feature_test_macros.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/feature_test_macros.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;機能テストマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative-page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;h3&gt;言語機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ライブラリ&lt;/h3&gt;
&lt;p&gt;ライブラリの機能テストマクロは全て&lt;code&gt;&lt;a href=&#34;../../reference/version.html&#34;&gt;&amp;lt;version&amp;gt;&lt;/a&gt;&lt;/code&gt;でも提供される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_as_const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ranges::cbegin&lt;/code&gt;が常に定数イテレータを返すようにする&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_fold&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;fold&lt;/code&gt;アルゴリズム&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations&#34; target=&#34;_blank&#34;&gt;SD-FeatureTest: Feature-Test Macros and Policies - isocpp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>変数テンプレートの部分特殊化を許可 [P2096R2] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/generalized_wording_for_partial_specializations.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/generalized_wording_for_partial_specializations.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/generalized_wording_for_partial_specializations.md b/lang/cpp23/generalized_wording_for_partial_specializations.md
index 2c0a54ae7..8a8bd8ffa 100644
--- a/lang/cpp23/generalized_wording_for_partial_specializations.md
+++ b/lang/cpp23/generalized_wording_for_partial_specializations.md
@@ -5,7 +5,7 @@
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>if consteval [P1938R3] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/if_consteval.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/if_consteval.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/if_consteval.md b/lang/cpp23/if_consteval.md
index 2a4dde12c..7d8d7baae 100644
--- a/lang/cpp23/if_consteval.md
+++ b/lang/cpp23/if_consteval.md
@@ -5,7 +5,7 @@
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>複合文の末尾へのラベルを許可 [P2324R2] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/labels_at_the_end_of_compound_statements.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/labels_at_the_end_of_compound_statements.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/labels_at_the_end_of_compound_statements.md b/lang/cpp23/labels_at_the_end_of_compound_statements.md
index fcad6a6af..f61bdd74b 100644
--- a/lang/cpp23/labels_at_the_end_of_compound_statements.md
+++ b/lang/cpp23/labels_at_the_end_of_compound_statements.md
@@ -5,7 +5,7 @@
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>範囲for文が範囲初期化子内で生じた一時オブジェクトを延命することを規定 [P2718R0] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/lifetime_extension_in_range_based_for_loop.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/lifetime_extension_in_range_based_for_loop.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/lifetime_extension_in_range_based_for_loop.md b/lang/cpp23/lifetime_extension_in_range_based_for_loop.md
index e3ec77688..7e3e11524 100644
--- a/lang/cpp23/lifetime_extension_in_range_based_for_loop.md
+++ b/lang/cpp23/lifetime_extension_in_range_based_for_loop.md
@@ -6,7 +6,7 @@
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>(符号付き)size_tリテラルのためのサフィックス [P0330R8] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/literal_suffix_for_signed_size_t.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/literal_suffix_for_signed_size_t.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/literal_suffix_for_signed_size_t.md b/lang/cpp23/literal_suffix_for_signed_size_t.md
index e61c98564..a18ee9fd8 100644
--- a/lang/cpp23/literal_suffix_for_signed_size_t.md
+++ b/lang/cpp23/literal_suffix_for_signed_size_t.md
@@ -5,7 +5,7 @@
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>アクセス制御の異なるメンバ変数のレイアウトを宣言順に規定 [P1847R4] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/make_declaration_order_layout_mandated.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/make_declaration_order_layout_mandated.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/make_declaration_order_layout_mandated.md b/lang/cpp23/make_declaration_order_layout_mandated.md
index 22d80f260..1a663fa84 100644
--- a/lang/cpp23/make_declaration_order_layout_mandated.md
+++ b/lang/cpp23/make_declaration_order_layout_mandated.md
@@ -5,7 +5,7 @@
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>無意味なexport宣言を禁止する [P2615R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/meaningful_exports.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/meaningful_exports.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/meaningful_exports.md b/lang/cpp23/meaningful_exports.md
index 3313123f3..b4961a5c2 100644
--- a/lang/cpp23/meaningful_exports.md
+++ b/lang/cpp23/meaningful_exports.md
@@ -5,7 +5,7 @@
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>異なる文字エンコーディングをもつ文字列リテラルの連結を不適格とする [P2201R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/mixed_string_literal_concatenation.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/mixed_string_literal_concatenation.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/mixed_string_literal_concatenation.md b/lang/cpp23/mixed_string_literal_concatenation.md
index b647b464c..852d6d4ab 100644
--- a/lang/cpp23/mixed_string_literal_concatenation.md
+++ b/lang/cpp23/mixed_string_literal_concatenation.md
@@ -5,7 +5,7 @@
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>添字演算子の多次元サポート [P2128R6] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/multidimensional_subscript_operator.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/multidimensional_subscript_operator.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/multidimensional_subscript_operator.md b/lang/cpp23/multidimensional_subscript_operator.md
index ff6bf8e98..4d85b0a39 100644
--- a/lang/cpp23/multidimensional_subscript_operator.md
+++ b/lang/cpp23/multidimensional_subscript_operator.md
@@ -5,7 +5,7 @@
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>名前付きユニバーサルキャラクタ名 [P2071R2] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/named_universal_character_escapes.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/named_universal_character_escapes.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/named_universal_character_escapes.md b/lang/cpp23/named_universal_character_escapes.md
index 0efb58be2..2feee22a6 100644
--- a/lang/cpp23/named_universal_character_escapes.md
+++ b/lang/cpp23/named_universal_character_escapes.md
@@ -5,7 +5,7 @@
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>定数式の文脈でのboolへの縮小変換を許可 [P1401R5] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/narrowing_contextual_conversions_to_bool.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/narrowing_contextual_conversions_to_bool.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/narrowing_contextual_conversions_to_bool.md b/lang/cpp23/narrowing_contextual_conversions_to_bool.md
index b3ce704c2..36e45e712 100644
--- a/lang/cpp23/narrowing_contextual_conversions_to_bool.md
+++ b/lang/cpp23/narrowing_contextual_conversions_to_bool.md
@@ -5,7 +5,7 @@
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>定数式内での非リテラル変数、静的変数・スレッドローカル変数およびgotoとラベルの存在を許可する [P2242R3] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/non_literal_variables_in_constexpr_functions.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/non_literal_variables_in_constexpr_functions.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;定数式内での非リテラル変数、静的変数・スレッドローカル変数およびgotoとラベルの存在を許可する [P2242R3]&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative-page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;constexpr&lt;/code&gt;関数が非リテラル変数、静的変数・スレッドローカル変数およびgoto文とラベルを含むことを許可する。&lt;/p&gt;
&lt;p&gt;ただし、これをコンパイル時に評価した場合、従来通りエラーとなる。
これらを含むコードパスは実行時にのみ通過するようにしなければならない。&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;これまでは、&lt;code&gt;constexpr&lt;/code&gt;関数内には非リテラル変数、静的変数・スレッドローカル変数およびgoto文とラベルが含まれてはならなかった。
これは、&lt;code&gt;constexpr&lt;/code&gt;関数が定数式実行できない要素を含んではならないという意味で、理にかなった制限であった。&lt;/p&gt;
&lt;p&gt;しかし、C++20で&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_constant_evaluated.html&#34;&gt;std::is_constant_evaluated&lt;/a&gt;&lt;/code&gt;によって定数式実行されるコードパスと実行時に通るコードパスを分けることが可能になり、状況が変化した。
定数式実行できないコードとはいえ、実行時にのみ通りコンパイル時には通らないコードパスに含まれていた場合にもプログラムが&lt;a class=&#34;cpprefjp-defined-word&#34;&gt;不適格&lt;/a&gt;となる、というのは直観に反する。&lt;/p&gt;
&lt;p&gt;よって、コンパイル時に評価されない限りにおいて、&lt;code&gt;constexpr&lt;/code&gt;関数内に非リテラル変数、静的変数・スレッドローカル変数およびgoto文とラベルを含むことが許可されることとなった。&lt;/p&gt;
&lt;p&gt;ただし、&lt;code&gt;constexpr&lt;/code&gt;内に存在することが許可されたものの定数式として評価できるわけではないので、これらの機能は依然としてコンパイル時に使用することはできない。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../cpp20/try-catch_blocks_in_constexpr_functions.html&#34;&gt;C++20 - constexpr関数内でのtry-catchブロックを許可&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.html&#34;&gt;C++20 - constexpr関数内で未評価のインラインアセンブリを許可することによる組み込み関数のconstexpr有効化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;permitting_static_constexpr_variables_in_constexpr_functions.html&#34;&gt;C++23 - &lt;code&gt;constexpr&lt;/code&gt;関数内での&lt;code&gt;static constexpr&lt;/code&gt;変数を許可&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2242r3.html&#34; target=&#34;_blank&#34;&gt;P2242R3 - Non-literal variables (and labels and gotos) in constexpr functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数内でのstatic constexpr変数を許可 [P2647R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.md b/lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.md
index a1bacee1b..86f3ac78a 100644
--- a/lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.md
+++ b/lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.md
@@ -5,7 +5,7 @@
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コード内容の仮定をコンパイラに伝える`assume`属性 [P1774R8] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/portable_assumptions.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/portable_assumptions.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/portable_assumptions.md b/lang/cpp23/portable_assumptions.md
index 5e011eec5..e80c8e4ed 100644
--- a/lang/cpp23/portable_assumptions.md
+++ b/lang/cpp23/portable_assumptions.md
@@ -5,7 +5,7 @@
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>更新された定義済みマクロ -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/predefined_macros.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/predefined_macros.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;更新された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative-page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cplusplus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202302L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++のバージョン値を表す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/n4951.html&#34; target=&#34;_blank&#34;&gt;N4951 Editors’ Report: Programming Languages — C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数が定数実行できない場合でも適格とする [P2448R2] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/relaxing_some_constexpr_restrictions.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/relaxing_some_constexpr_restrictions.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/relaxing_some_constexpr_restrictions.md b/lang/cpp23/relaxing_some_constexpr_restrictions.md
index 28be60df0..0dc0ed152 100644
--- a/lang/cpp23/relaxing_some_constexpr_restrictions.md
+++ b/lang/cpp23/relaxing_some_constexpr_restrictions.md
@@ -5,7 +5,7 @@
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>1ワイド文字に収まらないワイド文字リテラルを禁止する [P2362R3] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md b/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md
index bd9660542..d983554ab 100644
--- a/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md
+++ b/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md
@@ -5,7 +5,7 @@
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>暗黙的なムーブを簡略化 [P2266R3] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/simpler_implicit_move.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/simpler_implicit_move.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/simpler_implicit_move.md b/lang/cpp23/simpler_implicit_move.md
index b1359bab9..71b40f570 100644
--- a/lang/cpp23/simpler_implicit_move.md
+++ b/lang/cpp23/simpler_implicit_move.md
@@ -5,7 +5,7 @@
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>thisポインタをもつ必要のない演算子をstaticとして宣言できるようにする [P1169R4] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/static_operator.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/static_operator.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/static_operator.md b/lang/cpp23/static_operator.md
index 90d62ff87..d2a1b7262 100644
--- a/lang/cpp23/static_operator.md
+++ b/lang/cpp23/static_operator.md
@@ -5,7 +5,7 @@
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>汎用的なソースコードのエンコーディングとしてUTF-8をサポート [P2295R6] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/support_for_utf8_as_a_portable_source_file_encoding.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/support_for_utf8_as_a_portable_source_file_encoding.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;汎用的なソースコードのエンコーディングとしてUTF-8をサポート [P2295R6]&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative-page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++20まで、ソースコードの文字集合は実装定義だったが、その仕様では移植性に問題があった。C++23からは、すべてのコンパイラはUTF-8文字コードのソースコードをサポートしなければならないことが規定される。&lt;/p&gt;
&lt;p&gt;コンパイラは、ほかの文字コードと区別するため、入力ファイルがUTF-8であることを決定する実装定義の手段をもたなければならない。つまり、BOM (バイトオーダーマーク) を認識するだけでは十分ではない。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2295r6.pdf&#34; target=&#34;_blank&#34;&gt;P2295R6 Support for UTF-8 as a portable source file encoding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>行末スペースを無視するよう規定 [P2223R2] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/trimming_whitespaces_before_line_splicing.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/trimming_whitespaces_before_line_splicing.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/trimming_whitespaces_before_line_splicing.md b/lang/cpp23/trimming_whitespaces_before_line_splicing.md
index 1901ad5e6..5f97c4768 100644
--- a/lang/cpp23/trimming_whitespaces_before_line_splicing.md
+++ b/lang/cpp23/trimming_whitespaces_before_line_splicing.md
@@ -5,7 +5,7 @@
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>参照するPOSIX規格を更新 -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/update_normative_reference_to_posix.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/update_normative_reference_to_posix.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;参照するPOSIX規格を更新&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative-page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++20まではPOSIX規格としてISO/IEC 9945:2003 (別名POSIX.1-2001 aka The Single UNIX Specification, version 3) を参照していた。&lt;/p&gt;
&lt;p&gt;しかし、標準C++の一部の機能はより新しいPOSIX規格の機能を使用していたため、ISO/IEC 9945:2003への参照を削除した上で、以下の3つの規格を参照するよう変更する：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ISO/IEC/IEEE 9945:20032009, Information Technology — Portable Operating System Interface (POSIX)&lt;/li&gt;
&lt;li&gt;ISO/IEC/IEEE 9945:2009/Cor 1:2013, Information Technology — Portable Operating System Interface (POSIX), Technical Corrigendum 1&lt;/li&gt;
&lt;li&gt;ISO/IEC/IEEE 9945:2009/Cor 2:2017, Information Technology — Portable Operating System Interface (POSIX), Technical Corrigendum 2&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;posix&lt;/code&gt;名前空間の予約に関してのPOSIX規格の参照もまた、ISO/IEC 9945からISO/IEC/IEEE 9945に変更する。&lt;/p&gt;
&lt;p&gt;また、POSIXの一部環境で非推奨となっている機能である&lt;code&gt;readdir_r()&lt;/code&gt;を参照していたところを、&lt;code&gt;readdir()&lt;/code&gt;に置き換える。&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;ここでは、具体的に問題になった、標準C++が参照するPOSIXの機能を列挙する。&lt;/p&gt;
&lt;h3&gt;errno&lt;/h3&gt;
&lt;p&gt;C++03まで、&lt;code&gt;&lt;a href=&#34;../../reference/cerrno.html&#34;&gt;&amp;lt;cerrno&amp;gt;&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&amp;lt;errno.h&amp;gt;&lt;/code&gt;にはISO Cが要求する&lt;code&gt;EDOM&lt;/code&gt; (定義域エラー)、&lt;code&gt;ERANGE&lt;/code&gt; (値域エラー)、&lt;code&gt;errno&lt;/code&gt;といった必要最低限のマクロのみが含まれていた。&lt;/p&gt;
&lt;p&gt;C++11での&lt;code&gt;&lt;a href=&#34;../../reference/system_error.html&#34;&gt;&amp;lt;system_error&amp;gt;&lt;/a&gt;&lt;/code&gt;ライブラリの導入にともなって、「&lt;code&gt;&lt;a href=&#34;../../reference/cerrno.html&#34;&gt;&amp;lt;cerrno&amp;gt;&lt;/a&gt;&lt;/code&gt;で定義される内容は、&lt;code&gt;errno&lt;/code&gt;がマクロ定義されることを除いてPOSIXの&lt;code&gt;&amp;lt;errno.h&amp;gt;&lt;/code&gt;ヘッダと同じである」という規定となった。この規定のあとにマクロのリストが定義されるが、&lt;code&gt;ENOTRECOVERABLE&lt;/code&gt;と&lt;code&gt;EOWNERDEAD&lt;/code&gt;はPOSIXの2006規格、&lt;code&gt;ENOTSUP&lt;/code&gt;と&lt;code&gt;EOPNOTSUPP&lt;/code&gt;は2008規格で追加されたものだった。&lt;/p&gt;
&lt;p&gt;POSIXの2008年では標準C++で定義されるマクロのほかに&lt;code&gt;EDQUOT&lt;/code&gt;、&lt;code&gt;EMULTIHOP&lt;/code&gt;、&lt;code&gt;ENOLINK&lt;/code&gt;といった具体的な意味をもたない「予約済み」というだけのマクロももっている。すでに定義されている&lt;code&gt;ESTALE&lt;/code&gt;のようにそれらを標準C++に追加することは今後検討する必要はあるが、ここでは提案しない。&lt;/p&gt;
&lt;h3&gt;ファイルシステム&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&#34;../../reference/filesystem/path.html&#34;&gt;path&lt;/a&gt;&lt;/code&gt;クラスについて、POSIX.1-2008の4.12 Pathname ResolutionとPOSIX.1-2017の4.13 Pathname Resolutionを追加で参照する必要がある。&lt;/p&gt;
&lt;p&gt;ここで参照するほとんどの機能はPOSIX.1-2001に存在するが、ファイルの最終更新日時の&lt;code&gt;futimens()&lt;/code&gt;関数、ファイル権限の&lt;code&gt;fchmodat()&lt;/code&gt;関数は存在していない。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;truncate()&lt;/code&gt;と&lt;code&gt;statvfs()&lt;/code&gt;の機能はオプションであり、POSIXに準拠する環境に存在する必要がない。POSIX.1-2008ではこれらの機能がオプションではなくなった。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stat()&lt;/code&gt;で使用される&lt;code&gt;S_ISVTX&lt;/code&gt;マクロはオプション機能であり、XSIの一部である。これはPOSIX.1-2008とPOSIX.1-2017でもオプションのままである。&lt;/p&gt;
&lt;p&gt;POSIX.1-2001のスレッドセーフ関数 (Thread-Safe Functions : TSF) オプションの一部である&lt;code&gt;readdir_r()&lt;/code&gt;を参照する注記もあるが、POSIX.1-2008ではBaseに移動されている。ただし、&lt;code&gt;readdir_r()&lt;/code&gt; APIの実装には欠陥があり、一部の実装では非推奨となっており、将来のバージョンから削除される可能性がある。ここでは&lt;code&gt;readdir_r()&lt;/code&gt;に固有のものに依存してはいないため、&lt;code&gt;readdir()&lt;/code&gt;を参照するよう変更する。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2227r0.html&#34; target=&#34;_blank&#34;&gt;P2227R0 Update normative reference to POSIX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>#warningのサポートを追加 [P2437R1] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/warning.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp23/warning.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/warning.md b/lang/cpp23/warning.md
index 4575a076d..fdc8f98fa 100644
--- a/lang/cpp23/warning.md
+++ b/lang/cpp23/warning.md
@@ -5,7 +5,7 @@
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>static_assertの診断メッセージにユーザーが生成した文字列の指定を許可 [P2741R3] -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp26/user-generated_static_assert_messages.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:lang/cpp26/user-generated_static_assert_messages.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp26/user-generated_static_assert_messages.md b/lang/cpp26/user-generated_static_assert_messages.md
index 76eb694c3..89b2aa3cb 100644
--- a/lang/cpp26/user-generated_static_assert_messages.md
+++ b/lang/cpp26/user-generated_static_assert_messages.md
@@ -5,7 +5,7 @@
 
 このページはC++26に採用される見込みの言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- 言語機能 : 関連項目へのリンクミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/start_editing/lang_template_page.html"/>
      <id>641d6a7b3bf0cd6a0a80d64dc209a0c0ba244bbd:start_editing/lang_template_page.md</id>
      <updated>2024-07-08T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/lang_template_page.md b/start_editing/lang_template_page.md
index 0e8d24234..212d17556 100644
--- a/start_editing/lang_template_page.md
+++ b/start_editing/lang_template_page.md
@@ -36,7 +36,7 @@
 
 このページはC++XXに採用された言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
@@ -47,7 +47,7 @@
 
 このページはC++26に採用される見込みの言語機能の変更を解説しています。
 
-のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
 &amp;lt;!-- last lang caution --&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>エイリアステンプレート [N2258] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/alias_templates.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/alias_templates.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/alias_templates.md b/lang/cpp11/alias_templates.md
index 93d3fecd2..2b3424901 100644
--- a/lang/cpp11/alias_templates.md
+++ b/lang/cpp11/alias_templates.md
@@ -1,13 +1,13 @@
 # エイリアステンプレート [N2258]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 「エイリアステンプレート (alias templates)」は、テンプレートによって型の別名を定義する機能である。これによって、パラメータ化した型の別名付けができる。
@@ -107,4 +107,4 @@ typedef void_alloc::rebind&amp;lt;int&amp;gt;::other int_alloc;
 - [N1451 A Case for Template Aliasing](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1451.html)
 - [N1489 Templates aliases for C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1489.pdf)
 - [N2112 Templates Aliases](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2112.pdf)
-- [N2258 Templates Aliases](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2258.pdf)
+- [N2258 Templates Aliases](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2258.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>alignas [N2341] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/alignas.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/alignas.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/alignas.md b/lang/cpp11/alignas.md
index 44ee2cd7a..4786b90c9 100644
--- a/lang/cpp11/alignas.md
+++ b/lang/cpp11/alignas.md
@@ -1,13 +1,13 @@
 # alignas [N2341]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `alignas()`は、コンパイラに対し変数をメモリ上の特定の位置に配置（アライメント）するように要求するキーワードである。「アライン アズ (align as)」と読む。
@@ -115,4 +115,4 @@ N2341 からはわからない、恐らくないと思われる。
 
 
 ## 参照
-- [N2341 Adding Alignment Support to the C++ Programming Language / Wording](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2341.pdf)
+- [N2341 Adding Alignment Support to the C++ Programming Language / Wording](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2341.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>alignof [N2341] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/alignof.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/alignof.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/alignof.md b/lang/cpp11/alignof.md
index 533b4fd42..35472e462 100644
--- a/lang/cpp11/alignof.md
+++ b/lang/cpp11/alignof.md
@@ -1,13 +1,13 @@
 # alignof [N2341]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `alignof()`は、指定した型がメモリ上のどの位置に配置されるか（アライメント）取得する演算子である。「アライン オブ (align of)」と読む。
@@ -85,4 +85,4 @@ N2341 からはわからない、恐らくないと思われる。
 
 
 ## 参照
-- [N2341 Adding Alignment Support to the C++ Programming Language / Wording](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2341.pdf)
+- [N2341 Adding Alignment Support to the C++ Programming Language / Wording](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2341.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>属性構文 [N2761] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/attributes.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/attributes.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/attributes.md b/lang/cpp11/attributes.md
index d2a512277..ef465af36 100644
--- a/lang/cpp11/attributes.md
+++ b/lang/cpp11/attributes.md
@@ -1,13 +1,13 @@
 # 属性構文 [N2761]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 属性(attributes)は、ソースコードに対して追加の情報をコンパイラに伝えるための構文である。
@@ -177,4 +177,4 @@ C++11で採用されたもの以外で検討された以下の機能は、属性
 - [N2418 Towards support for attributes in C++ (Revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2418.pdf)
 - [N2643 C++ Data-Dependency Ordering: Function Annotation](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2643.html)
 - [N2761 Towards support for attributes in C++ (Revision 6) ](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2761.pdf)
-- [（抄訳）N4215 `memory_order_consume`の利用と実装に向けて［§5-6のみ］](http://d.hatena.ne.jp/yohhoy/20141115/p1)
+- [（抄訳）N4215 `memory_order_consume`の利用と実装に向けて［§5-6のみ］](http://d.hatena.ne.jp/yohhoy/20141115/p1)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>auto [N1984] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/auto.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/auto.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/auto.md b/lang/cpp11/auto.md
index 714ed57df..23907ac33 100644
--- a/lang/cpp11/auto.md
+++ b/lang/cpp11/auto.md
@@ -1,13 +1,13 @@
 # auto [N1984]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++11 から、変数宣言時に具体的な型名のかわりに `auto` キーワードを指定する事によって、変数の型を初期化子から推論できるようになった。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C99互換で導入された定義済みマクロ -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/c99_predefined_macros.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/c99_predefined_macros.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C99互換で導入された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++11に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative_page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDC_HOSTED__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実装がホスト実装である場合は&lt;code&gt;1&lt;/code&gt;、そうでない場合（つまり、フリースタンディング実装である場合）は&lt;code&gt;0&lt;/code&gt;として定義される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDC_VERSION__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;標準Cのバージョンを表す値（C95 では &lt;code&gt;199409L&lt;/code&gt;、C99 では &lt;code&gt;199901L&lt;/code&gt;、C11 では &lt;code&gt;201112L&lt;/code&gt;、C90 では定義されていない）。&lt;br /&gt;このマクロが定義されているか否か、および、定義されている場合の値は実装依存である。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDC_ISO_10646__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;wchar_t&lt;/code&gt;の文字が、Unicodeの規格であるISO/IEC 10646の、yyyymm年の仕様を満たしている場合に定義される。&lt;br /&gt;このマクロの値は、&lt;code&gt;yyyymmL&lt;/code&gt;の形式の整数値として定義される。yは年、mは月を表す。yとmそれぞれの個数は、桁数を表す。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;predefined_macros.html&#34;&gt;C++11 更新された定義済みマクロ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1653.htm&#34; target=&#34;_blank&#34;&gt;N1653 Working draft changes for C99 preprocessor synchronization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#630&#34; target=&#34;_blank&#34;&gt;CWG Issue 630. Equality of narrow and wide character values in the basic character set&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>char16_tとchar32_t [N2249] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/char16_32.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/char16_32.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/char16_32.md b/lang/cpp11/char16_32.md
index 968c867cf..5e4af4f70 100644
--- a/lang/cpp11/char16_32.md
+++ b/lang/cpp11/char16_32.md
@@ -1,13 +1,13 @@
 # char16_tとchar32_t [N2249]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `char16_t`はUTF-16符号化形式の文字型、`char32_t`はUTF-32符号化形式の文字型である。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr [N2235] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/constexpr.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/constexpr.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/constexpr.md b/lang/cpp11/constexpr.md
index a4667ade4..b2c08fd27 100644
--- a/lang/cpp11/constexpr.md
+++ b/lang/cpp11/constexpr.md
@@ -1,13 +1,13 @@
 # constexpr [N2235]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `constexpr`は、汎用的に定数式を表現するための機能である。
@@ -226,4 +226,4 @@ GCC 5.2、Clang 3.7、Visual C++ 2015時点で、3つともデフォルトは512
 - [CWG Issue 644. Should a trivial class type be a literal type?](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#644)
     - リテラル型のメンバ変数のみを持つクラスは、`constexpr`コンストラクタを明示的に定義しなくても、リテラル型となる
 - [CWG Issue 699. Must constexpr member functions be defined in the class member-specification?](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#699)
-    - ゼロ割りの扱い、再帰回数の規定
+    - ゼロ割りの扱い、再帰回数の規定
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>decltype [N2343] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/decltype.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/decltype.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/decltype.md b/lang/cpp11/decltype.md
index 3262354b7..9eba0a241 100644
--- a/lang/cpp11/decltype.md
+++ b/lang/cpp11/decltype.md
@@ -1,13 +1,13 @@
 # decltype [N2343]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `decltype` は、オペランドで指定した式の型を取得する機能である。  
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>関数のdefault／delete宣言 [N2346] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/defaulted_and_deleted_functions.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/defaulted_and_deleted_functions.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/defaulted_and_deleted_functions.md b/lang/cpp11/defaulted_and_deleted_functions.md
index 1048d3e4d..737eded01 100644
--- a/lang/cpp11/defaulted_and_deleted_functions.md
+++ b/lang/cpp11/defaulted_and_deleted_functions.md
@@ -1,13 +1,13 @@
 # 関数のdefault／delete宣言 [N2346]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 クラスを定義した際、以下のメンバ関数が暗黙的に定義される：
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>委譲コンストラクタ [N1986] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/delegating_constructors.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/delegating_constructors.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/delegating_constructors.md b/lang/cpp11/delegating_constructors.md
index 8fda468b1..95712392b 100644
--- a/lang/cpp11/delegating_constructors.md
+++ b/lang/cpp11/delegating_constructors.md
@@ -1,13 +1,13 @@
 # 委譲コンストラクタ [N1986]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 「委譲コンストラクタ (delegating constructors)」は、コンストラクタから、同じクラスの他のコンストラクタに処理を委譲する機能である。
@@ -89,4 +89,4 @@ ECMA規格となっているC++/CLIには、この問題を解決するための
 - [N1581 Delegating Constructors](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1581.pdf)
 - [N1618 Delegating Constructors (revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1618.pdf)
 - [N1895 Delegating Constructors (revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1895.pdf)
-- [N1986 Delegating Constructors (revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1986.pdf)
+- [N1986 Delegating Constructors (revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1986.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>依存名に対するtypenameとtemplateの制限緩和 -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/dependent_name_specifier_outside_of_templates.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/dependent_name_specifier_outside_of_templates.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/dependent_name_specifier_outside_of_templates.md b/lang/cpp11/dependent_name_specifier_outside_of_templates.md
index 755ea6c63..adc15f438 100644
--- a/lang/cpp11/dependent_name_specifier_outside_of_templates.md
+++ b/lang/cpp11/dependent_name_specifier_outside_of_templates.md
@@ -1,13 +1,13 @@
 # 依存名に対するtypenameとtemplateの制限緩和
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 テンプレート内で、テンプレートパラメータに依存する名前を使用する場合には、`typename`キーワードを先頭に付ける必要がある。
@@ -45,4 +45,4 @@ int main()
 
 ## 参照
 - [CWG Issue 382. Allow `typename` outside of templates](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#382)
-- [CWG Issue 468. Allow `::template` outside of templates](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#468)
+- [CWG Issue 468. Allow `::template` outside of templates](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#468)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>registerキーワードを非推奨化 -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/deprecation_of_the_register_keyword.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/deprecation_of_the_register_keyword.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/deprecation_of_the_register_keyword.md b/lang/cpp11/deprecation_of_the_register_keyword.md
index b8d6077be..6853e47bf 100644
--- a/lang/cpp11/deprecation_of_the_register_keyword.md
+++ b/lang/cpp11/deprecation_of_the_register_keyword.md
@@ -1,13 +1,13 @@
 # registerキーワードを非推奨化
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `register`キーワードが非推奨化された。
@@ -31,4 +31,4 @@ register int v = 42;
 
 
 ## 参照
-- [CWG Issue 809. Deprecation of the `register` keyword](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#809)
+- [CWG Issue 809. Deprecation of the `register` keyword](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#809)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>宣言時に要素数を指定した配列オブジェクトの、定義時の要素数を規定 -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/earlier_declarated_array_bounds.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/earlier_declarated_array_bounds.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/earlier_declarated_array_bounds.md b/lang/cpp11/earlier_declarated_array_bounds.md
index e82c26251..94d746127 100644
--- a/lang/cpp11/earlier_declarated_array_bounds.md
+++ b/lang/cpp11/earlier_declarated_array_bounds.md
@@ -1,13 +1,13 @@
 # 宣言時に要素数を指定した配列オブジェクトの、定義時の要素数を規定
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `static`メンバや`extern`として宣言した配列を定義した際、宣言時に指定した要素数として定義されることが規定された。
@@ -26,4 +26,4 @@ int S::y[]; // 要素数は10
 
 
 ## 参照
-- [CWG Issue 619. Completeness of array types](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#619)
+- [CWG Issue 619. Completeness of array types](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#619)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>明示的な型変換演算子のオーバーロード [N2437] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/explicit_conversion_operator.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/explicit_conversion_operator.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/explicit_conversion_operator.md b/lang/cpp11/explicit_conversion_operator.md
index b61a80980..393523cdf 100644
--- a/lang/cpp11/explicit_conversion_operator.md
+++ b/lang/cpp11/explicit_conversion_operator.md
@@ -1,13 +1,13 @@
 # 明示的な型変換演算子のオーバーロード [N2437]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 型変換演算子のオーバーロードをする際、`operator`キーワードの前に`explicit`を付加することで、その型変換演算子は明示的な型変換が行われる文脈でのみ呼び出されるようになる：
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>friend宣言できる対象を拡張 [N1791] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/extend_friend_targets.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/extend_friend_targets.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/extend_friend_targets.md b/lang/cpp11/extend_friend_targets.md
index e2f9cfbb6..3452a098b 100644
--- a/lang/cpp11/extend_friend_targets.md
+++ b/lang/cpp11/extend_friend_targets.md
@@ -1,13 +1,13 @@
 # friend宣言できる対象を拡張 [N1791]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++03までの`friend`宣言は、直接のクラス型のみを指定できた。
@@ -60,4 +60,4 @@ int main()
 - [N1520 Extended friend Declarations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1520.pdf)
 - [N1616 Extended friend Declarations (Rev. 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1616.pdf)
 - [N1722 Extended friend Declarations (Rev. 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1722.pdf)
-- [N1791 Extended friend Declarations (Rev. 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1791.pdf)
+- [N1791 Extended friend Declarations (Rev. 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1791.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sizeof演算子にクラスの非静的メンバを、オブジェクトを作らずに指定できるようにする -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.md b/lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.md
index 8b7b3c6a9..1b8e16d85 100644
--- a/lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.md
+++ b/lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.md
@@ -1,13 +1,13 @@
 # sizeof演算子にクラスの非静的メンバを、オブジェクトを作らずに指定できるようにする
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 クラスの非静的メンバ変数のサイズを取得したい場合、そのクラスのオブジェクトを生成してから`sizeof`演算子にメンバを指定する必要があった。その制限が外され、クラスと非静的メンバ変数を、スコープ解決演算子 `::` 区切りで`sizeof`演算子に指定できるようになった：
@@ -33,4 +33,4 @@ int main()
 - [CWG Issue 198. Definition of &amp;#34;use&amp;#34; in local and nested classes](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#198)
 - [CWG Issue 613. Unevaluated uses of non-static class members](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#613)
 - [N2150 Extending sizeof to apply to non-static data members without an object](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2150.html)
-- [N2253 Extending sizeof to apply to non-static data members without an object (revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2253.html)
+- [N2253 Extending sizeof to apply to non-static data members without an object (revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2253.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>extern template [N1987] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/extern_template.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/extern_template.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/extern_template.md b/lang/cpp11/extern_template.md
index 615e25638..c32818e01 100644
--- a/lang/cpp11/extern_template.md
+++ b/lang/cpp11/extern_template.md
@@ -1,13 +1,13 @@
 # extern template [N1987]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `extern template`は、指定したテンプレートを、その翻訳単位でインスタンス化しないことを指示するための機能である。
@@ -63,4 +63,4 @@ void user2()
 
 ## 参照
 - [N1448 Controlling Implicit Template Instantiation](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1448.pdf)
-- [N1987 Adding &amp;#34;extern template&amp;#34; (version 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1987.htm)
+- [N1987 Adding &amp;#34;extern template&amp;#34; (version 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1987.htm)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>機能テストマクロ -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/feature_test_macros.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/feature_test_macros.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;機能テストマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++11に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;SD-6 は C++11 の機能について以下のテストマクロを定義することを推奨している：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_alias_templates&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200704&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;alias_templates.html&#34;&gt;エイリアステンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_attributes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200809&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;attributes.html&#34;&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200704&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;constexpr.html&#34;&gt;constexpr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_decltype&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200707&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;decltype.html&#34;&gt;decltype&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_delegating_constructors&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200604&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;delegating_constructors.html&#34;&gt;委譲コンストラクタ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_inheriting_constructors&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200802&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;inheriting_constructors.html&#34;&gt;継承コンストラクタ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_initializer_lists&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200806&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;initializer_lists.html&#34;&gt;初期化子リスト&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lambdas&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200907&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;lambda_expressions.html&#34;&gt;ラムダ式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_nsdmi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200809&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;non_static_data_member_initializers.html&#34;&gt;非静的メンバ変数初期化子&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_range_based_for&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200907&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;range_based_for.html&#34;&gt;範囲for文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_raw_strings&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200710&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;raw_string_literals.html&#34;&gt;生文字列リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_ref_qualifiers&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200710&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;ref_qualifier_for_this.html&#34;&gt;&lt;code&gt;*this&lt;/code&gt; のムーブセマンティクス&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_rvalue_references&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200610&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;rvalue_ref_and_move_semantics.html&#34;&gt;右辺値参照&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_static_assert&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200410&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;static_assert.html&#34;&gt;コンパイル時アサート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_unicode_characters&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200704&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;char16_32.html&#34;&gt;ユニコード文字&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_unicode_literals&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200710&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;char16_32.html&#34;&gt;ユニコードリテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_user_defined_literals&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200809&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;user_defined_literals.html&#34;&gt;ユーザー定義リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_variadic_templates&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200704&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;variadic_templates.html&#34;&gt;可変引数テンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(carries_dependency)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200809&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;attributes.html#carries_dependency&#34;&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(noreturn)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200809&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;attributes.html#noreturn&#34;&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations#recs.cpp11&#34; target=&#34;_blank&#34;&gt;SD-6: SG10 Feature Test Recommendations: Standard C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>事前定義識別子__func__ [N1653] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/func.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/func.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/func.md b/lang/cpp11/func.md
index db9fe7f72..403f0db99 100644
--- a/lang/cpp11/func.md
+++ b/lang/cpp11/func.md
@@ -1,13 +1,13 @@
 # 事前定義識別子\_\_func\_\_ [N1653]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C99互換として、事前定義識別子(predefined identifier)の`__func__`が導入された。
@@ -90,4 +90,4 @@ S::print() : print
 ## 参照
 - [N1534 Proposed addition of `__func__` predefined identifier from C99](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1534.txt)
 - [5.41 Function Names as Strings - GCC](https://gcc.gnu.org/onlinedocs/gcc-3.3.5/gcc/Function-Names.html)
-- [Predefined macros | Microsoft Docs](https://docs.microsoft.com/ja-JP/cpp/preprocessor/predefined-macros?view=vs-2019)
+- [Predefined macros | Microsoft Docs](https://docs.microsoft.com/ja-JP/cpp/preprocessor/predefined-macros?view=vs-2019)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>入れ子名の指定にグローバルスコープ :: を付加することを許可 -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/global_scope_syntax_in_nested_name_specifier.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/global_scope_syntax_in_nested_name_specifier.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/global_scope_syntax_in_nested_name_specifier.md b/lang/cpp11/global_scope_syntax_in_nested_name_specifier.md
index 1bce9882b..7eaa5fa38 100644
--- a/lang/cpp11/global_scope_syntax_in_nested_name_specifier.md
+++ b/lang/cpp11/global_scope_syntax_in_nested_name_specifier.md
@@ -1,13 +1,13 @@
 # 入れ子名の指定にグローバルスコープ :: を付加することを許可
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 入れ子名を指定する構文において、先頭にグローバルスコープの指定`::`を付加することが許可された。
@@ -44,4 +44,4 @@ nested-name-specifier:
 
 
 ## 参照
-- [CWG Issue 355. Global-scope `::` in nested-name-specifier](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#355)
+- [CWG Issue 355. Global-scope `::` in nested-name-specifier](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#355)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>継承コンストラクタ [N2540] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/inheriting_constructors.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/inheriting_constructors.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/inheriting_constructors.md b/lang/cpp11/inheriting_constructors.md
index df94c217d..e99d4013c 100644
--- a/lang/cpp11/inheriting_constructors.md
+++ b/lang/cpp11/inheriting_constructors.md
@@ -1,13 +1,13 @@
 # 継承コンストラクタ [N2540]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 「継承コンストラクタ (inheriting constructors)」は、基底クラスで定義したコンストラクタ群を、派生クラスでそのまま使用できるようにするための糖衣構文である。
@@ -102,4 +102,4 @@ struct Derived : Base {
 - [N2376 Inheriting Constructors (revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2376.html)
 - [N2438 Inheriting Constructors (revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2438.htm)
 - [N2512 Inheriting Constructors (revision 4)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2512.html)
-- [N2540 Inheriting Constructors (revision 5)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2540.htm)
+- [N2540 Inheriting Constructors (revision 5)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2540.htm)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>初期化子リスト [N2672] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/initializer_lists.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/initializer_lists.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/initializer_lists.md b/lang/cpp11/initializer_lists.md
index b3adc1a56..962448cb4 100644
--- a/lang/cpp11/initializer_lists.md
+++ b/lang/cpp11/initializer_lists.md
@@ -1,13 +1,13 @@
 # 初期化子リスト [N2672]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 「初期化子リスト (initializer lists)」は、ユーザー定義型のオブジェクトに対して、波カッコによるリスト初期化を使用できるようにするようオーバーロードする機能である。
@@ -357,4 +357,4 @@ std::vector&amp;lt;int&amp;gt; v(ar, ar + N);
 - [N2575 Initializer Lists - Alternative Mechanism and Rationale](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2575.pdf)
 - [N2640 Initializer Lists - Alternative Mechanism and Rationale (v. 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2640.pdf)
 - [N2672 Initializer List proposed wording](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2672.htm)
-- [CWG Issue 1030. Evaluation order in initializer-lists used in aggregate initialization](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1030)
+- [CWG Issue 1030. Evaluation order in initializer-lists used in aggregate initialization](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1030)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>インライン名前空間 [N2535] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/inline_namespaces.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/inline_namespaces.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/inline_namespaces.md b/lang/cpp11/inline_namespaces.md
index 4bc0ae4d1..a25299be5 100644
--- a/lang/cpp11/inline_namespaces.md
+++ b/lang/cpp11/inline_namespaces.md
@@ -1,13 +1,13 @@
 # インライン名前空間 [N2535]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 インライン名前空間 (inline namespace)は、名前空間内の機能に透過的にアクセスするための機能である。`inline namespace`によって定義した名前空間の機能には、その名前空間を指定しなくてもアクセスできる。
@@ -250,4 +250,4 @@ v2
 - [7.9 Namespace Association - Using the GNU Compiler Collection (GCC)](https://gcc.gnu.org/onlinedocs/gcc-4.9.4/gcc/Namespace-Association.html)
 - [CWG Issue 812. Duplicate names in inline namespaces](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#812)
 - [CWG Issue 861. Unintended ambiguity in inline namespace lookup](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#861)
-- [Inline namespaces and ambigous declarations - Stackoverflow](http://stackoverflow.com/questions/27252466/inline-namespaces-and-ambigous-declarations/)
+- [Inline namespaces and ambigous declarations - Stackoverflow](http://stackoverflow.com/questions/27252466/inline-namespaces-and-ambigous-declarations/)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式 [N2927] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/lambda_expressions.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/lambda_expressions.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/lambda_expressions.md b/lang/cpp11/lambda_expressions.md
index b5f93a62d..dd1bd263d 100644
--- a/lang/cpp11/lambda_expressions.md
+++ b/lang/cpp11/lambda_expressions.md
@@ -1,13 +1,13 @@
 # ラムダ式 [N2927]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 「ラムダ式(lambda expressions)」は、簡易的な関数オブジェクトをその場で定義するための機能である。
@@ -561,4 +561,4 @@ for_each(array, array + 4, &amp;lt;&amp;amp;&amp;gt;(double d) ( sum += factor ∗ d ));
 - [N2957 Reaching Scope of Lambda Expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2957.html)
 - [N3043 Converting Lambdas to Function Pointers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3043.html)
 - [N3052 Converting Lambdas to Function Pointers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3052.html)
-- [CWG Issue 975. Restrictions on return type deduction for lambdas](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#975)
+- [CWG Issue 975. Restrictions on return type deduction for lambdas](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#975)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ローカル型と無名型を、テンプレート引数として使用することを許可 [N2657] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/local_and_unnamed_type_as_template_arguments.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/local_and_unnamed_type_as_template_arguments.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/local_and_unnamed_type_as_template_arguments.md b/lang/cpp11/local_and_unnamed_type_as_template_arguments.md
index 3203e8bcc..8370caab9 100644
--- a/lang/cpp11/local_and_unnamed_type_as_template_arguments.md
+++ b/lang/cpp11/local_and_unnamed_type_as_template_arguments.md
@@ -1,13 +1,13 @@
 # ローカル型と無名型を、テンプレート引数として使用することを許可 [N2657]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 ローカルで定義した型と、名前のない型を、テンプレート引数として渡すことが許可された。
@@ -49,4 +49,4 @@ int main()
 - [N2187 Names, Linkage, and Templates (rev 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2187.pdf)
 - [N2402 Names, Linkage, and Templates (rev 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2402.pdf)
 - [N2635 Local and Unnamed Types as Template Arguments](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2635.html)
-- [N2657 Local and Unnamed Types as Template Arguments](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2657.htm)
+- [N2657 Local and Unnamed Types as Template Arguments](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2657.htm)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>long long型 [N1811] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/long_long_type.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/long_long_type.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/long_long_type.md b/lang/cpp11/long_long_type.md
index cf67cdb50..784b87306 100644
--- a/lang/cpp11/long_long_type.md
+++ b/lang/cpp11/long_long_type.md
@@ -1,13 +1,13 @@
 # long long型 [N1811]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C99互換として、`long long`整数型が追加された。
@@ -75,4 +75,4 @@ int main()
 - [N0715 Incorporate the `long long` integral data type in C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/1995/N0715.ps)
 - [N1565 Adding the `long long` type to C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1565.pdf)
 - [N1735 Adding the `long long` type to C++ (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1735.pdf)
-- [N1811 Adding the `long long` type to C++ (Revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1811.pdf)
+- [N1811 Adding the `long long` type to C++ (Revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1811.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>noexcept [N3050] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/noexcept.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/noexcept.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/noexcept.md b/lang/cpp11/noexcept.md
index c035ada19..3a4bfa56d 100644
--- a/lang/cpp11/noexcept.md
+++ b/lang/cpp11/noexcept.md
@@ -1,13 +1,13 @@
 # noexcept [N3050]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++11で導入された`noexcept`キーワードには、以下の2つの意味がある：
@@ -196,4 +196,4 @@ int main()
 - [N3204 Deducing &amp;#34;`noexcept`&amp;#34; for destructors](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3204.htm)
 - [N3205 Delete operators default to `noexcept`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3205.htm)
 - [N3103 Security impact of `noexcept`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3103.pdf)
-- [ムーブによるpop - Faith and Brave - C++で遊ぼう](http://faithandbrave.hateblo.jp/entry/20130604/1370327651)
+- [ムーブによるpop - Faith and Brave - C++で遊ぼう](http://faithandbrave.hateblo.jp/entry/20130604/1370327651)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非静的メンバ変数の初期化 [N2756] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/non_static_data_member_initializers.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/non_static_data_member_initializers.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/non_static_data_member_initializers.md b/lang/cpp11/non_static_data_member_initializers.md
index 8e4b8cef1..d2f6a64cb 100644
--- a/lang/cpp11/non_static_data_member_initializers.md
+++ b/lang/cpp11/non_static_data_member_initializers.md
@@ -1,13 +1,13 @@
 # 非静的メンバ変数の初期化 [N2756]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 非静的メンバ変数の定義時に、`=`演算子もしくは`{ }`波カッコ初期化子によるコンストラクタ構文で、初期化式を記述できる。
@@ -71,4 +71,4 @@ int main()
 - [N2354 Class member initializers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2354.htm)
 - [N2426 Class member initializers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2426.htm)
 - [N2628 Non-static data member initializers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2628.html)
-- [N2756 Non-static data member initializers](http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2008/n2756.htm)
+- [N2756 Non-static data member initializers](http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2008/n2756.htm)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>nullptr [N2431] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/nullptr.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/nullptr.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/nullptr.md b/lang/cpp11/nullptr.md
index 4ba227a6d..c36181e2f 100644
--- a/lang/cpp11/nullptr.md
+++ b/lang/cpp11/nullptr.md
@@ -1,13 +1,13 @@
 # nullptr [N2431]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `nullptr`は、ヌルポインタ値を表すキーワードである。
@@ -132,4 +132,4 @@ private:
 - [N1488 A name for the null pointer: `nullptr`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1488.pdf)
 - [N1601 A name for the null pointer: `nullptr` (revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1601.pdf)
 - [N2214 A name for the null pointer: `nullptr` (revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2214.pdf)
-- [N2431 A name for the null pointer: `nullptr` (revision 4)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2431.pdf)
+- [N2431 A name for the null pointer: `nullptr` (revision 4)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2431.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>overrideとfinal [N2928] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/override_final.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/override_final.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/override_final.md b/lang/cpp11/override_final.md
index 154be5582..06fa189b6 100644
--- a/lang/cpp11/override_final.md
+++ b/lang/cpp11/override_final.md
@@ -1,13 +1,13 @@
 # overrideとfinal [N2928]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `override`は仮想メンバ関数のオーバーライドを明示的に宣言するキーワードである。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Pragma演算子 [N1653] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/pragma_operator.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/pragma_operator.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/pragma_operator.md b/lang/cpp11/pragma_operator.md
index 841aaca8d..6e71a2faf 100644
--- a/lang/cpp11/pragma_operator.md
+++ b/lang/cpp11/pragma_operator.md
@@ -1,13 +1,13 @@
 # Pragma演算子 [N1653]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C99互換として、Pragma演算子が導入された。
@@ -73,4 +73,4 @@ int main()
 ```
 
 ## 参照
-- [N1653 Working draft changes for C99 preprocessor synchronization](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1653.htm)
+- [N1653 Working draft changes for C99 preprocessor synchronization](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1653.htm)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>更新された定義済みマクロ -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/predefined_macros.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/predefined_macros.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;更新された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++11に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative_page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cplusplus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201103L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++のバージョン値を表す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以下のマクロが新たに追加された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDCPP_STRICT_POINTER_SAFETY__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実装がポインタの厳密な安全性を持っている場合、整数値&lt;code&gt;1&lt;/code&gt;として定義される&lt;br /&gt;本マクロ定数はC++23で削除される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDCPP_THREADS__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが複数のスレッドを実行できる場合、整数値&lt;code&gt;1&lt;/code&gt;として定義される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDC_MB_MIGHT_NEQ_WC__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;このマクロが整数型の定数&lt;code&gt;1&lt;/code&gt;として定義されている場合、基本文字集合に含まれる文字のリテラルが、&lt;code&gt;char&lt;/code&gt;と&lt;code&gt;wchar_t&lt;/code&gt;で異なる値を持つ可能性がある。&lt;br /&gt;このマクロが定義されない場合には&lt;code&gt;&#39;x&#39; == L&#39;x&#39;&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;であることが保証され、そうでなければされない。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;c99_predefined_macros.html&#34;&gt;C++11 C99互換で導入された定義済みマクロ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2693.html&#34; target=&#34;_blank&#34;&gt;N2693 Requirements on programs and backwards compatibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1169&#34; target=&#34;_blank&#34;&gt;CWG Issue 1169. Missing feature macro for strict pointer safety&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2186r2.html&#34; target=&#34;_blank&#34;&gt;P2186R2 Removing Garbage Collection Support&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++23でのマクロ&lt;code&gt;__STDCPP_STRICT_POINTER_SAFETY__&lt;/code&gt;削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>範囲for文 [N2930] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/range_based_for.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/range_based_for.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/range_based_for.md b/lang/cpp11/range_based_for.md
index 2c8219c03..17ee409e7 100644
--- a/lang/cpp11/range_based_for.md
+++ b/lang/cpp11/range_based_for.md
@@ -1,13 +1,13 @@
 # 範囲for文 [N2930]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 範囲for文（The range-based for statement）は配列やコンテナを簡潔に扱うためのfor文の別表現である。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>生文字列リテラル [N2442] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/raw_string_literals.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/raw_string_literals.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/raw_string_literals.md b/lang/cpp11/raw_string_literals.md
index 6fc3b8bdf..98ef7b863 100644
--- a/lang/cpp11/raw_string_literals.md
+++ b/lang/cpp11/raw_string_literals.md
@@ -1,13 +1,13 @@
 # 生文字列リテラル [N2442]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `R`プレフィックスを付けた文字列リテラル内の丸カッコ`( )`で囲まれた部分は、エスケープシーケンスが無視される。この機能を「生文字列リテラル (Raw string literals)」という。
@@ -273,4 +273,4 @@ Perl、Python、Luaやその他の言語ではこの問題に対応するため
 - [N2295 Raw and Unicode String Literals; Unified Proposal](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2295.html)
 - [N2384 Raw and Unicode String Literals; Unified Proposal (Rev. 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2384.html)
 - [N2442 Raw and Unicode String Literals; Unified Proposal (Rev. 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2442.htm)
-- [N3077 Alternative approach to Raw String issues](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3077.html)
+- [N3077 Alternative approach to Raw String issues](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3077.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>テンプレート再帰回数の制限緩和 -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/recursive_template_limit.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/recursive_template_limit.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/recursive_template_limit.md b/lang/cpp11/recursive_template_limit.md
index 3834d8543..b0f6da923 100644
--- a/lang/cpp11/recursive_template_limit.md
+++ b/lang/cpp11/recursive_template_limit.md
@@ -1,13 +1,13 @@
 # テンプレート再帰回数の制限緩和
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++03まで、テンプレートの再帰回数は、「17回以上であることを実装に推奨する」というものであった。
@@ -67,4 +67,4 @@ int main()
 - [Variadic Templates for C++0x](https://web.archive.org/web/20230430062038/http://www.jot.fm/issues/issue_2008_02/article2/)
     - テンプレートの再帰によって、コンパイル時間がどれくらい延びるかのレポートがある記事
 - [C++ Language Features/Controlling implementation limits - Clang Compiler User’s Manual](http://clang.llvm.org/docs/UsersManual.html#cmdoption-ftemplate-depth)
-- [3.5 Options Controlling C++ Dialect - GCC Command Options](https://gcc.gnu.org/onlinedocs/gcc/gcc-command-options/options-controlling-c%2B%2B-dialect.html)
+- [3.5 Options Controlling C++ Dialect - GCC Command Options](https://gcc.gnu.org/onlinedocs/gcc/gcc-command-options/options-controlling-c%2B%2B-dialect.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>メンバ関数の左辺値／右辺値修飾 [N2439] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/ref_qualifier_for_this.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/ref_qualifier_for_this.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/ref_qualifier_for_this.md b/lang/cpp11/ref_qualifier_for_this.md
index 9a5ea2521..ef6c41baf 100644
--- a/lang/cpp11/ref_qualifier_for_this.md
+++ b/lang/cpp11/ref_qualifier_for_this.md
@@ -1,13 +1,13 @@
 # メンバ関数の左辺値／右辺値修飾 [N2439]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 メンバ関数の`CV`修飾は、`*this`が`const`／`volatile`である場合とそうでない場合でメンバ関数をオーバーロードできる。
@@ -119,4 +119,4 @@ int main()
 - [N1784 A proposal to add l-value member function qualifier](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1784.htm)
 - [N1821 Extending Move Semantics To `*this` (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1821.htm)
 - [N2377 Extending move semantics to `*this` (revised wording)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2377.htm)
-- [N2439 Extending move semantics to `*this` (revised wording)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2439.htm)
+- [N2439 Extending move semantics to `*this` (revised wording)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2439.htm)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>参照への参照を折りたたむ -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/reference_collapsing.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/reference_collapsing.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/reference_collapsing.md b/lang/cpp11/reference_collapsing.md
index 6fc14ffe8..2168a08d4 100644
--- a/lang/cpp11/reference_collapsing.md
+++ b/lang/cpp11/reference_collapsing.md
@@ -1,13 +1,13 @@
 # 参照への参照を折りたたむ
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++03までは、`T&amp;amp;`型に左辺値参照を足すと、「参照への参照 (reference to reference)」となってしまいコンパイルエラーとなっていた。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>テンプレートのエクスポート機能を削除 -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/remove_export_templates.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/remove_export_templates.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/remove_export_templates.md b/lang/cpp11/remove_export_templates.md
index 30b93e30c..1d7e79a08 100644
--- a/lang/cpp11/remove_export_templates.md
+++ b/lang/cpp11/remove_export_templates.md
@@ -1,13 +1,13 @@
 # テンプレートのエクスポート機能を削除
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++11では、テンプレート定義をエクスポートする機能を削除する。
@@ -40,4 +40,4 @@ EDGフロントエンドとそれを使用するコンパイラのComeauとICC
 - [N3065 Removing Export](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3065.html)
 - [CWG Issue 820. Deprecation of export](https://wg21.cmeerw.net/cwg/issue820)
 - [Using export keyword with templates - StackOverflow](http://stackoverflow.com/questions/5416872/using-export-keyword-with-templates)
-- [N1426 Why We Can&amp;#39;t Afford Export](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1426.pdf)
+- [N1426 Why We Can&amp;#39;t Afford Export](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1426.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>POSIX用の名前空間を予約 -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/reserved_namespaces_for_posix.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/reserved_namespaces_for_posix.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;POSIX用の名前空間を予約&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++11に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;将来の標準化のために、POSIX用の名前空間として&lt;code&gt;std::posix&lt;/code&gt;と&lt;code&gt;::posix&lt;/code&gt;を予約する。&lt;/p&gt;
&lt;p&gt;これらの名前空間に宣言や定義を追加した場合、そのプログラムの動作は未定義となる。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2542.htm&#34; target=&#34;_blank&#34;&gt;N2542 Reserved namespaces for POSIX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>整数に対する除算と剰余算の丸め結果を規定 -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/result_of_integer_division_and_modulo.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/result_of_integer_division_and_modulo.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/result_of_integer_division_and_modulo.md b/lang/cpp11/result_of_integer_division_and_modulo.md
index 82d8388aa..29d0d4505 100644
--- a/lang/cpp11/result_of_integer_division_and_modulo.md
+++ b/lang/cpp11/result_of_integer_division_and_modulo.md
@@ -1,13 +1,13 @@
 # 整数に対する除算と剰余算の丸め結果を規定
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 整数`a`, `b`に対する除算`a/b`の結果(商)と剰余算`a%b`の結果(余り)について`(a/b)*b + a%b = a`という等式が成り立つことが規定されているが、C++03まで、少なくとも一方が負の数である場合の余りの符号は実装定義だった。このため先述の等式により商も実装定義となっていた。C++11ではC99に合わせて「商の小数部がゼロ方向に切り捨てられた結果となること」が規定された。
@@ -47,4 +47,4 @@ int main()
 - [N2707 Expedited core issues handling](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2707.html)
 - [N2730 Expedited core issues handling (revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2730.html)
 - [N2757 Expedited core issues handling (revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2757.htm)
-- [C++ における整数型の怪と &amp;#34;移植性のある&amp;#34; オーバーフローチェッカー (第1回 : 整数型の怪と対策の不足)](http://qiita.com/a4lg/items/541c9d9dd5d874eeef2f)
+- [C++ における整数型の怪と &amp;#34;移植性のある&amp;#34; オーバーフローチェッカー (第1回 : 整数型の怪と対策の不足)](http://qiita.com/a4lg/items/541c9d9dd5d874eeef2f)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>テンプレートの右山カッコ [N1757] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/right_angle_brackets.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/right_angle_brackets.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/right_angle_brackets.md b/lang/cpp11/right_angle_brackets.md
index 3af3608e6..63abe5945 100644
--- a/lang/cpp11/right_angle_brackets.md
+++ b/lang/cpp11/right_angle_brackets.md
@@ -1,13 +1,13 @@
 # テンプレートの右山カッコ [N1757]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++03では、2つ以上連続する右山カッコが出現する場合には、間にスペースを入力する必要があった：
@@ -107,4 +107,4 @@ C++11で採択された方式は、テンプレートの型パラメータと非
 ## 参照
 - [N1649 Right Angle Brackets](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1649.html)
 - [N1699 Right Angle Brackets (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1699.html)
-- [N1757 Right Angle Brackets (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1757.html)
+- [N1757 Right Angle Brackets (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1757.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>右辺値参照・ムーブセマンティクス [N2118] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/rvalue_ref_and_move_semantics.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/rvalue_ref_and_move_semantics.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/rvalue_ref_and_move_semantics.md b/lang/cpp11/rvalue_ref_and_move_semantics.md
index cb2b68cab..07f6c01b4 100644
--- a/lang/cpp11/rvalue_ref_and_move_semantics.md
+++ b/lang/cpp11/rvalue_ref_and_move_semantics.md
@@ -1,13 +1,13 @@
 # 右辺値参照・ムーブセマンティクス [N2118]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 ムーブセマンティクスはコピーコストの削減を主な目的としており、また所有権の移動を実現する。  
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スコープを持つ列挙型 [N2347] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/scoped_enum.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/scoped_enum.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/scoped_enum.md b/lang/cpp11/scoped_enum.md
index bc506220e..28340f4d2 100644
--- a/lang/cpp11/scoped_enum.md
+++ b/lang/cpp11/scoped_enum.md
@@ -1,13 +1,13 @@
 # スコープを持つ列挙型 [N2347]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `enum class`で定義した列挙型は、従来の`enum`に加えて、「整数型への暗黙の型変換を行わない」「列挙型のスコープを持つ」という機能を持つ。
@@ -108,4 +108,4 @@ ECMA規格になっているC++/CLIが、現在のスコープを持つ列挙型
 - [N1579 Strongly Typed Enums (revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1719.pdf)
 - [N2213 Strongly Typed Enums (revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2213.pdf)
 - [N2347 Strongly Typed Enums (revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2347.pdf)
-- [N2499 Forward declaration of enumerations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2499.pdf)
+- [N2499 Forward declaration of enumerations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2499.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>任意の式によるSFINAE [N2634] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/sfinae_expressions.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/sfinae_expressions.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/sfinae_expressions.md b/lang/cpp11/sfinae_expressions.md
index e5aad73b1..dd5682c0a 100644
--- a/lang/cpp11/sfinae_expressions.md
+++ b/lang/cpp11/sfinae_expressions.md
@@ -1,13 +1,13 @@
 # 任意の式によるSFINAE [N2634]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 「SFINAE (Substitution Failure Is Not An Errorの略称、スフィネェと読む)」は、テンプレートの置き換えに失敗した際に、即時にコンパイルエラーとはせず、置き換えに失敗した関数をオーバーロード解決の候補から除外するという言語機能である。
@@ -284,4 +284,4 @@ int main()
 
 ## 参照
 - [CWG Issue 339. Overload resolution in operand of `sizeof` in constant expression](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#339)
-- [N2634 Solving the SFINAE problem for expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2634.html)
+- [N2634 Solving the SFINAE problem for expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2634.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンパイル時アサート [N1720] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/static_assert.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/static_assert.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/static_assert.md b/lang/cpp11/static_assert.md
index 3257a8f39..b11c71f39 100644
--- a/lang/cpp11/static_assert.md
+++ b/lang/cpp11/static_assert.md
@@ -1,13 +1,13 @@
 # コンパイル時アサート [N1720]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `static_assert`宣言は、指定した定数式が真であることを表明するための機能である。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ブロックスコープを持つstatic変数初期化のスレッドセーフ化 [N2660] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/static_initialization_thread_safely.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/static_initialization_thread_safely.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/static_initialization_thread_safely.md b/lang/cpp11/static_initialization_thread_safely.md
index c5c4af868..8f0c46ff8 100644
--- a/lang/cpp11/static_initialization_thread_safely.md
+++ b/lang/cpp11/static_initialization_thread_safely.md
@@ -1,13 +1,13 @@
 # ブロックスコープを持つstatic変数初期化のスレッドセーフ化 [N2660]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 ブロックスコープを持つ`static`変数の初期化は、スレッドセーフであることが規定された。
@@ -104,4 +104,4 @@ int main()
 - [N2444 Dynamic Initialization and Destruction with Concurrency](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2444.html)
 - [N2513 Dynamic Initialization and Destruction with Concurrency](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2513.html)
 - [N2660 Dynamic Initialization and Destruction with Concurrency](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2660.htm)
-- [C++0x時代の Double-Checked Locking - yamasaのネタ帳](http://yamasa.hatenablog.jp/entry/20100128/1264693781)
+- [C++0x時代の Double-Checked Locking - yamasaのネタ帳](http://yamasa.hatenablog.jp/entry/20100128/1264693781)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>文字列リテラルとワイド文字列リテラルの結合 -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/string_literal_concatenation.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/string_literal_concatenation.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/string_literal_concatenation.md b/lang/cpp11/string_literal_concatenation.md
index 3329ed51a..3c980eb43 100644
--- a/lang/cpp11/string_literal_concatenation.md
+++ b/lang/cpp11/string_literal_concatenation.md
@@ -1,13 +1,13 @@
 # 文字列リテラルとワイド文字列リテラルの結合
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C99互換として、文字列リテラルとワイド文字列リテラルが並んでいたとき、ワイド文字列リテラルとして結合することが規定された。
@@ -40,4 +40,4 @@ hello world
 
 ## 参照
 - [N1653 Working draft changes for C99 preprocessor synchronization](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1653.htm)
-- [WG14/N951 String literals and concatenation](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n951.htm)
+- [WG14/N951 String literals and concatenation](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n951.htm)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スレッドローカルストレージ [N2659] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/thread_local_storage.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/thread_local_storage.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/thread_local_storage.md b/lang/cpp11/thread_local_storage.md
index bfaa7f0db..52cc0a323 100644
--- a/lang/cpp11/thread_local_storage.md
+++ b/lang/cpp11/thread_local_storage.md
@@ -1,13 +1,13 @@
 # スレッドローカルストレージ [N2659]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 変数宣言の際に、記憶域として`thread_local`キーワードを指定することで、スレッドごとの静的記憶域に変数が保持される。
@@ -122,4 +122,4 @@ thread2 : 4
 - [N2545 Thread-Local Storage](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2545.html)
 - [N2659 Thread-Local Storage](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2659.htm)
 - [Why does Apple clang disallow C++11 `thread_local` when &amp;#39;official&amp;#39; clang supports it - Stack Overflow](http://stackoverflow.com/a/29929949/463412)
-    - Apple実装のClang（Xcode 7以下に付属のもの）が`thread_local`機能をサポートしない理由
+    - Apple実装のClang（Xcode 7以下に付属のもの）が`thread_local`機能をサポートしない理由
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>列挙子の末尾へのカンマ付加を許可 -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/trailing_comma_following_enumerator_list.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/trailing_comma_following_enumerator_list.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/trailing_comma_following_enumerator_list.md b/lang/cpp11/trailing_comma_following_enumerator_list.md
index 5e81e5ead..aa7bdd73a 100644
--- a/lang/cpp11/trailing_comma_following_enumerator_list.md
+++ b/lang/cpp11/trailing_comma_following_enumerator_list.md
@@ -1,13 +1,13 @@
 # 列挙子の末尾へのカンマ付加を許可
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C99互換として、末尾の列挙子の後ろにカンマを書くことが許可された。
@@ -48,4 +48,4 @@ int main() {}
 
 
 ## 参照
-- [CWG Issue 518. Trailing comma following enumerator-list](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#518)
+- [CWG Issue 518. Trailing comma following enumerator-list](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#518)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>戻り値の型を後置する関数宣言構文 [N2541] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/trailing_return_types.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/trailing_return_types.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/trailing_return_types.md b/lang/cpp11/trailing_return_types.md
index 15000efa5..b12bcd419 100644
--- a/lang/cpp11/trailing_return_types.md
+++ b/lang/cpp11/trailing_return_types.md
@@ -1,13 +1,13 @@
 # 戻り値の型を後置する関数宣言構文 [N2541]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 従来の関数宣言構文では、戻り値の型は先頭に記述していた。
@@ -120,4 +120,4 @@ auto f = [](int a, int b) -&amp;gt; int { return a + b; }
 - [N2927 New wording for C++0x Lambdas (rev. 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2927.pdf)
     - ラムダ式の仕様と合わせて「trailing-return-type」という言葉が使われるようになった
 - [N2931 Unified Function Syntax](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2931.html)
-- [N2954 Unified Function Syntax](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2954.html)
+- [N2954 Unified Function Syntax](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2954.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>一様初期化 [N2672] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/uniform_initialization.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/uniform_initialization.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/uniform_initialization.md b/lang/cpp11/uniform_initialization.md
index 71d8d3190..b9705fa30 100644
--- a/lang/cpp11/uniform_initialization.md
+++ b/lang/cpp11/uniform_initialization.md
@@ -1,13 +1,13 @@
 # 一様初期化 [N2672]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 「一様初期化 (uniform initialization)」は、コンストラクタの呼び出しを、リスト初期化と合わせて波カッコ `{ }`で記述する構文である。
@@ -207,4 +207,4 @@ int main()
 - [N2575 Initializer Lists - Alternative Mechanism and Rationale](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2575.pdf)
 - [N2640 Initializer Lists - Alternative Mechanism and Rationale (v. 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2640.pdf)
 - [N2672 Initializer List proposed wording](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2672.htm)
-- [CWG Issue 1030. Evaluation order in initializer-lists used in aggregate initialization](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1030)
+- [CWG Issue 1030. Evaluation order in initializer-lists used in aggregate initialization](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1030)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>共用体の制限解除 [N2544] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/unrestricted_unions.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/unrestricted_unions.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/unrestricted_unions.md b/lang/cpp11/unrestricted_unions.md
index 507598121..8d3671031 100644
--- a/lang/cpp11/unrestricted_unions.md
+++ b/lang/cpp11/unrestricted_unions.md
@@ -1,13 +1,13 @@
 # 共用体の制限解除 [N2544]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 共用体のメンバ変数として、クラスオブジェクトを保持できるようになった：
@@ -74,4 +74,4 @@ hello
 ## 参照
 - [N2430 Unrestricted Unions (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2430.pdf)
 - [N2544 Unrestricted Unions (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2544.pdf)
-- [Boost Variant Library](http://www.boost.org/libs/variant)
+- [Boost Variant Library](http://www.boost.org/libs/variant)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ユーザー定義リテラル [N2765] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/user_defined_literals.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/user_defined_literals.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/user_defined_literals.md b/lang/cpp11/user_defined_literals.md
index f7bf4a324..5970ee0ed 100644
--- a/lang/cpp11/user_defined_literals.md
+++ b/lang/cpp11/user_defined_literals.md
@@ -1,13 +1,13 @@
 # ユーザー定義リテラル [N2765]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 ユーザー定義リテラル(User-defined literals)は、`123`、`3.14`、`&amp;#34;hello&amp;#34;`といったリテラルに対して付けられるサフィックスをオーバーロードできるようにすることで、ユーザーがリテラルに意味を持たせられるようにする機能である。
@@ -386,4 +386,4 @@ DecimalFloat f = 12.34df;
 - [N2750 User-defined Literals (aka. Extensible Literals (revision 4))](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2750.pdf)
 - [N2765 User-defined Literals (aka. Extensible Literals (revision 5))](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2765.pdf)
 - [CWG Issue 935. Missing overloads for character types for user-defined literals](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#935)
-- [CWG Issue 1479. Literal operators and default arguments](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1479)
+- [CWG Issue 1479. Literal operators and default arguments](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1479)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>UTF-8文字列リテラル [N2442] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/utf8_string_literals.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/utf8_string_literals.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/utf8_string_literals.md b/lang/cpp11/utf8_string_literals.md
index 076b4d9e0..8d1c9bf06 100644
--- a/lang/cpp11/utf8_string_literals.md
+++ b/lang/cpp11/utf8_string_literals.md
@@ -1,13 +1,13 @@
 # UTF-8文字列リテラル [N2442]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `char`の文字列リテラルに`u8`プレフィックスを付けることで、その文字列リテラルはUCS/Unicode文字コードのUTF-8符号化形式にエンコードされる。
@@ -83,4 +83,4 @@ int main()
 - [N2209 UTF-8 String Literals](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2209.html)
 - [N2295 Raw and Unicode String Literals; Unified Proposal](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2295.html)
 - [N2384 Raw and Unicode String Literals; Unified Proposal (Rev. 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2384.html)
-- [N2442 Raw and Unicode String Literals; Unified Proposal (Rev. 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2442.htm)
+- [N2442 Raw and Unicode String Literals; Unified Proposal (Rev. 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2442.htm)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変引数マクロ [N1653] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/variadic_macros.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/variadic_macros.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/variadic_macros.md b/lang/cpp11/variadic_macros.md
index 28027f2c2..5049cca1b 100644
--- a/lang/cpp11/variadic_macros.md
+++ b/lang/cpp11/variadic_macros.md
@@ -1,13 +1,13 @@
 # 可変引数マクロ [N1653]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C99互換として、可変引数マクロ(variadic macros)が導入された。
@@ -83,4 +83,4 @@ f2
 
 
 ## 参照
-- [N1653 Working draft changes for C99 preprocessor synchronization](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1653.htm)
+- [N1653 Working draft changes for C99 preprocessor synchronization](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1653.htm)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変引数テンプレート [N2242] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/variadic_templates.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp11/variadic_templates.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/variadic_templates.md b/lang/cpp11/variadic_templates.md
index 0f44f02a0..adf5bfb45 100644
--- a/lang/cpp11/variadic_templates.md
+++ b/lang/cpp11/variadic_templates.md
@@ -1,13 +1,13 @@
 # 可変引数テンプレート [N2242]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 「可変引数テンプレート (variadic templates)」は、任意の型とそのオブジェクトを任意の数だけ受け取る機能である。これによって、「最大でN個のパラメータを受け取る関数テンプレートやクラステンプレート」を実装する際に、N個のオーバーロードをユーザーが用意する必要なく、ひとつの実装だけで済むようになる。
@@ -401,4 +401,4 @@ void f(const T1&amp;amp; t1, const T2&amp;amp; t2, const T3&amp;amp; t3);
 - [N2191 Proposed Wording for Variadic Templates (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2191.pdf)
 - [N2242 Proposed Wording for Variadic Templates (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2242.pdf)
 - [N2488 Extending Variadic Template Template Parameters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2488.pdf)
-- [N2555 Extending Variadic Template Template Parameters (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2555.pdf)
+- [N2555 Extending Variadic Template Template Parameters (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2555.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>2進数リテラル [N3472] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/binary_literals.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp14/binary_literals.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/binary_literals.md b/lang/cpp14/binary_literals.md
index 1eb8531ae..20a3d19da 100644
--- a/lang/cpp14/binary_literals.md
+++ b/lang/cpp14/binary_literals.md
@@ -1,13 +1,13 @@
 # 2進数リテラル [N3472]
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 整数リテラルのプレフィックスとして`0b`もしくは`0B`を付けることで、2進数を表す値を記述できる。
@@ -69,4 +69,4 @@ int main()
 
 
 ## 参照
-- [N3472 - Binary Literals in the C++ Core Language](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3472.pdf)
+- [N3472 - Binary Literals in the C++ Core Language](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3472.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ネストする集成体初期化における波カッコ省略を許可 [N3653] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/brace_elision_in_array_temporary_initialization.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp14/brace_elision_in_array_temporary_initialization.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/brace_elision_in_array_temporary_initialization.md b/lang/cpp14/brace_elision_in_array_temporary_initialization.md
index 933d86d42..ea09d709d 100644
--- a/lang/cpp14/brace_elision_in_array_temporary_initialization.md
+++ b/lang/cpp14/brace_elision_in_array_temporary_initialization.md
@@ -1,13 +1,13 @@
 # ネストする集成体初期化における波カッコ省略を許可 [N3653]
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++11では、集成体初期化とリスト初期化の両方を含む場合、二重に波カッコを書くことが必須となっていた。そのため、`public`メンバ変数として組み込み配列を持つ[`std::array`](/reference/array/array.md)クラスのオブジェクトを初期化する場合、以下のように、不要とも思える二重の波カッコを書かなければならなかった：
@@ -42,4 +42,4 @@ int x[2][2] = {1, 2, 3, 4};
 - [CWG Issue 1270. Brace elision in array temporary initialization](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1270)
 - [vector/arrayとUniform initialization+Initializer list - yohhoyの日記](http://d.hatena.ne.jp/yohhoy/20120724/p1)
 - [initializer-listによるaggregate初期化の制約緩和 - yohhoyの日記](http://d.hatena.ne.jp/yohhoy/20131116/p1)
-- [N3653 - Member initializers and aggregates](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3653.html)
+- [N3653 - Member initializers and aggregates](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3653.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>動的メモリ確保の省略の許可 -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/clarifying_memory_allocation.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp14/clarifying_memory_allocation.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/clarifying_memory_allocation.md b/lang/cpp14/clarifying_memory_allocation.md
index 8008b72c0..039593c3c 100644
--- a/lang/cpp14/clarifying_memory_allocation.md
+++ b/lang/cpp14/clarifying_memory_allocation.md
@@ -1,13 +1,13 @@
 # 動的メモリ確保の省略の許可
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>decltype(auto) -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/decltype_auto.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp14/decltype_auto.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/decltype_auto.md b/lang/cpp14/decltype_auto.md
index 40ce597d1..9bf9e8377 100644
--- a/lang/cpp14/decltype_auto.md
+++ b/lang/cpp14/decltype_auto.md
@@ -1,13 +1,13 @@
 # decltype(auto)
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `decltype(auto)`は、`decltype`に与える式を右辺の式で置き換えて型推論する機能である。
@@ -73,4 +73,4 @@ int main()
 
 
 ## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
-- [C++14 通常関数の戻り値型推論](return_type_deduction_for_normal_functions.md)
+- [C++14 通常関数の戻り値型推論](return_type_deduction_for_normal_functions.md)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[deprecated]]属性 [N3760] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/deprecated_attr.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp14/deprecated_attr.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/deprecated_attr.md b/lang/cpp14/deprecated_attr.md
index 4322cce79..724930191 100644
--- a/lang/cpp14/deprecated_attr.md
+++ b/lang/cpp14/deprecated_attr.md
@@ -1,13 +1,13 @@
 # [[deprecated]]属性 [N3760]
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `[[deprecated]]`は、対象となる機能が非推奨であることを示す属性である。
@@ -136,4 +136,4 @@ prog.cc:45:3: warning: &amp;#39;class_templ&amp;lt;int&amp;gt;&amp;#39; is deprecated: don&amp;#39;t use class_templ&amp;lt;i
 
 ## 参照
 - [N3394 `[[deprecated]]` attribute](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3394.html)
-- [N3760 `[[deprecated]]` attribute](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3760.html)
+- [N3760 `[[deprecated]]` attribute](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3760.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>数値リテラルの桁区切り文字 [N3781] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/digit_separators.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp14/digit_separators.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/digit_separators.md b/lang/cpp14/digit_separators.md
index 510a98507..9e5e8ad11 100644
--- a/lang/cpp14/digit_separators.md
+++ b/lang/cpp14/digit_separators.md
@@ -1,13 +1,13 @@
 # 数値リテラルの桁区切り文字 [N3781]
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 整数リテラルと浮動小数点数リテラルには、途中にシングルクォーテーション(`&amp;#39;`)を入力することで、値を読みやすくできる。
@@ -143,4 +143,3 @@ C++14という言語バージョンは、C++11の仕様に対するバグ修正
 - Ruby : [アンダーバーによる数値の区切り](http://www.rubylife.jp/ini/num/index2.html)
 - Java 7 : [Underscores in Numeric Literals](http://docs.oracle.com/javase/7/docs/technotes/guides/language/underscores-literals.html)
 - Ada : [Ada &amp;#39;83 Language Reference Manual](http://archive.adaic.com/standards/83lrm/html/lrm-02-04.html#2.4)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>機能テストマクロ -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/feature_test_macros.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp14/feature_test_macros.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;機能テストマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp14&#34; title=&#34;C++14で追加&#34;&gt;(C++14)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++14に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;SD-6 は C++14 の機能について以下のテストマクロを定義することを推奨している：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_aggregate_nsdmi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メンバ初期化子と集約&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_binary_literals&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;binary_literals.html&#34;&gt;二進数リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;relaxing_constraints_on_constexpr.html&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;の制限緩和/&lt;code&gt;constexpr&lt;/code&gt; メンバ関数の暗黙的な &lt;code&gt;const&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_decltype_auto&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;return_type_deduction_for_normal_functions.html&#34;&gt;通常関数の戻り値型推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_generic_lambdas&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;generic_lambdas.html&#34;&gt;ジェネリックラムダ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_init_captures&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;initialize_capture.html&#34;&gt;ラムダ式の初期化キャプチャ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_chrono_udls&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration.html&#34;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; のユーザー定義リテラル (&lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_ns.html&#34;&gt;ns&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_us.html&#34;&gt;us&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_ms.html&#34;&gt;ms&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_s.html&#34;&gt;s&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_min.html&#34;&gt;min&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_h.html&#34;&gt;h&lt;/a&gt;&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_complex_udls&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201309&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ユーザー定義虚数リテラル (&lt;code&gt;&lt;a href=&#34;../../reference/complex/complex/op_i.html&#34;&gt;i&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/complex/complex/op_if.html&#34;&gt;if&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/complex/complex/op_il.html&#34;&gt;il&lt;/a&gt;&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/complex.html&#34;&gt;&amp;lt;complex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_exchange_function&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility/exchange.html&#34;&gt;std::exchange&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_generic_associative_lookup&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;連想配列 (&lt;code&gt;&lt;a href=&#34;../../reference/map/map.html&#34;&gt;std::map&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/map/multimap.html&#34;&gt;std::multimap&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/set/set.html&#34;&gt;std::set&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/set/multiset.html&#34;&gt;std::multiset&lt;/a&gt;&lt;/code&gt;) における異なる型の比較 (&lt;code&gt;count&lt;/code&gt;, &lt;code&gt;equal_range&lt;/code&gt;, &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;lower_bound&lt;/code&gt;, &lt;code&gt;upper_bound&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/set.html&#34;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_integer_sequence&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/utility/integer_sequence.html&#34;&gt;コンパイル時整数列&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_integral_constant_callable&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/integral_constant.html&#34;&gt;std::integral_constant&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;operator()&lt;/code&gt; を追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_final&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201402&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_final.html&#34;&gt;std::is_final&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_null_pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201309&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_null_pointer.html&#34;&gt;std::is_null_pointer&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_make_reverse_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201402&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator/make_reverse_iterator.html&#34;&gt;std::make_reverse_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_make_unique&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/make_unique.html&#34;&gt;std::make_unique&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/make_unique.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_null_iterators&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ヌル前方向イテレータ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_quoted_string_io&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iomanip/quoted.html&#34;&gt;std::quoted&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iomanip.html&#34;&gt;&amp;lt;iomanip&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_result_of_sfinae&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201210&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/result_of.html&#34;&gt;std::result_of&lt;/a&gt;&lt;/code&gt; と SFINAE&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_robust_nonmodifying_seq_ops&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスを変更しない操作をよりロバストに&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shared_timed_mutex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201402&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;shared_mutex&lt;/code&gt; を &lt;code&gt;&lt;a href=&#34;../../reference/shared_mutex/shared_timed_mutex.html&#34;&gt;shared_timed_mutex&lt;/a&gt;&lt;/code&gt; にリネーム&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/shared_mutex.html&#34;&gt;&amp;lt;shared_mutex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_string_udls&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ユーザー定義 &lt;code&gt;&lt;a href=&#34;../../reference/string/basic_string/op_s.html&#34;&gt;std::string_literals::basic_string::sリテラル&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_transformation_trait_aliases&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型トレイトにエイリアステンプレートを追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_transparent_operators&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201210&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt; の二項演算のデフォルトテンプレート引数を &lt;code&gt;void&lt;/code&gt; に&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_tuple_element_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201402&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple/tuple_element.html&#34;&gt;std::tuple_element_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_tuples_by_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/tuple/tuple/get.html&#34;&gt;型による &lt;code&gt;std::tuple::get&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_return_type_deduction&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;return_type_deduction_for_normal_functions.html&#34;&gt;通常関数の戻り値型推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_sized_deallocation&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201309&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;sized_deallocation.html&#34;&gt;サイズ付きデアロケーション&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_variable_templates&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;variable_templates.html&#34;&gt;変数テンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(deprecated)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201309&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;deprecated_attr.html&#34;&gt;&lt;code&gt;[[deprecated]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_include(&amp;lt;shared_mutex&amp;gt;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/shared_mutex.html&#34;&gt;共有ロック&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations#recs.cpp14&#34; target=&#34;_blank&#34;&gt;SD-6: SG10 Feature Test Recommendations: Standard C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ジェネリックラムダ [N3649] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/generic_lambdas.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp14/generic_lambdas.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/generic_lambdas.md b/lang/cpp14/generic_lambdas.md
index d61ead3ca..71e85c56a 100644
--- a/lang/cpp14/generic_lambdas.md
+++ b/lang/cpp14/generic_lambdas.md
@@ -1,13 +1,13 @@
 # ジェネリックラムダ [N3649]
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 ジェネリックラムダ(generic lambdas)は、[C++11のラムダ式](/lang/cpp11/lambda_expressions.md)を拡張して、パラメータにテンプレートを使用できるようにした機能である。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式の初期化キャプチャ [N3648] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/initialize_capture.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp14/initialize_capture.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/initialize_capture.md b/lang/cpp14/initialize_capture.md
index 33e66ae6d..bbd9a25d9 100644
--- a/lang/cpp14/initialize_capture.md
+++ b/lang/cpp14/initialize_capture.md
@@ -1,13 +1,13 @@
 # ラムダ式の初期化キャプチャ [N3648]
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 「初期化キャプチャ(init-capture)」は、任意の式の結果をラムダ式にキャプチャする機能である。
@@ -152,4 +152,4 @@ int main()
 
 ## 参照
 - [N3610 Generic lambda-capture initializers, supporting capture-by-move](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3610.html)
-- [N3648 Wording Changes for Generalized Lambda-capture](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3648.html)
+- [N3648 Wording Changes for Generalized Lambda-capture](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3648.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>宣言時のメンバ初期化を持つ型の集成体初期化を許可 -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/member_initializers_and_aggregates.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp14/member_initializers_and_aggregates.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/member_initializers_and_aggregates.md b/lang/cpp14/member_initializers_and_aggregates.md
index 22fbd8d0a..d7a225482 100644
--- a/lang/cpp14/member_initializers_and_aggregates.md
+++ b/lang/cpp14/member_initializers_and_aggregates.md
@@ -1,13 +1,13 @@
 # 宣言時のメンバ初期化を持つ型の集成体初期化を許可
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++11で導入された[メンバ初期化子](/lang/cpp11/non_static_data_member_initializers.md)は集成体の初期化と組み合わせて使用することができない問題があった。
@@ -39,4 +39,4 @@ int main()
 - [C++11 非静的メンバ変数の初期化](/lang/cpp11/non_static_data_member_initializers.md)
 
 ## 参照
-- [N3653 - Member initializers and aggregates](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3653.html)
+- [N3653 - Member initializers and aggregates](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3653.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>リテラル演算子のスペースを省略可能とする -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/no_whitespace_literal_operators.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp14/no_whitespace_literal_operators.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/no_whitespace_literal_operators.md b/lang/cpp14/no_whitespace_literal_operators.md
index 4688dcf09..3ab2981bb 100644
--- a/lang/cpp14/no_whitespace_literal_operators.md
+++ b/lang/cpp14/no_whitespace_literal_operators.md
@@ -1,13 +1,13 @@
 # リテラル演算子のスペースを省略可能とする
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 リテラル演算子を定義する際に、これまでは以下のように、`operator&amp;#34;&amp;#34;`とサフィックス名の間に、ひとつ以上のスペースが必要だった。
@@ -56,4 +56,4 @@ hello
 
 
 ## 参照
-- [CWG Issue 1473. Syntax of literal-operator-id](https://wg21.cmeerw.net/cwg/issue1473)
+- [CWG Issue 1473. Syntax of literal-operator-id](https://wg21.cmeerw.net/cwg/issue1473)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>nullptr_t型の定数式を非型テンプレートパラメータとすることを許可 -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/nontype_template_parameters_of_type_nullptr_t.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp14/nontype_template_parameters_of_type_nullptr_t.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/nontype_template_parameters_of_type_nullptr_t.md b/lang/cpp14/nontype_template_parameters_of_type_nullptr_t.md
index 560705c70..274dc94f3 100644
--- a/lang/cpp14/nontype_template_parameters_of_type_nullptr_t.md
+++ b/lang/cpp14/nontype_template_parameters_of_type_nullptr_t.md
@@ -1,13 +1,13 @@
 # nullptr_t型の定数式を非型テンプレートパラメータとすることを許可
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 [`nullptr_t`](/reference/cstddef/nullptr_t.md)型の定数式を非型テンプレートパラメータとすることが許可された。
@@ -36,4 +36,4 @@ int main()
 
 
 ## 参照
-- [CWG Issue 1398. Non-type template parameters of type `std::nullptr_t`](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1398)
+- [CWG Issue 1398. Non-type template parameters of type `std::nullptr_t`](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1398)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>後置戻り値型をプレースホルダーにすることを許可 -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/placeholder_type_in_trailing_return_type.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp14/placeholder_type_in_trailing_return_type.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/placeholder_type_in_trailing_return_type.md b/lang/cpp14/placeholder_type_in_trailing_return_type.md
index f6a5a0b70..d490d58b3 100644
--- a/lang/cpp14/placeholder_type_in_trailing_return_type.md
+++ b/lang/cpp14/placeholder_type_in_trailing_return_type.md
@@ -1,13 +1,13 @@
 # 後置戻り値型をプレースホルダーにすることを許可
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 [戻り値の型を後置する関数宣言構文](/lang/cpp11/trailing_return_types.md)と[ラムダ式](/lang/cpp11/lambda_expressions.md)の、後置戻り値型(trailing return type)を`auto`プレースホルダーとし、そのプレースホルダーを修飾することで、戻り値型の推論を補助できる。
@@ -57,4 +57,3 @@ int main()
 
 ## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++14 通常関数の戻り値型推論](return_type_deduction_for_normal_functions.md)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>更新された定義済みマクロ -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/predefined_macros.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp14/predefined_macros.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;更新された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp14&#34; title=&#34;C++14で追加&#34;&gt;(C++14)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++14に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cplusplus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201402L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++のバージョン値を表す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexprの制限緩和 [N3652] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/relaxing_constraints_on_constexpr.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp14/relaxing_constraints_on_constexpr.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/relaxing_constraints_on_constexpr.md b/lang/cpp14/relaxing_constraints_on_constexpr.md
index cc3d66426..dacd6abad 100644
--- a/lang/cpp14/relaxing_constraints_on_constexpr.md
+++ b/lang/cpp14/relaxing_constraints_on_constexpr.md
@@ -1,13 +1,13 @@
 # constexprの制限緩和 [N3652]
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++11で、汎用定数式の機能である[`constexpr`](/lang/cpp11/constexpr.md)が導入された。
@@ -212,4 +212,4 @@ C++14では、`constexpr`関数、`constexpr`メンバ関数、暗黙の`const`
 ## 参照
 - [N3597 Relaxing constraints on `constexpr` functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3597.html)
 - [N3598 `constexpr` member functions and implicit `const`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3598.html)
-- [N3652 Relaxing constraints on `constexpr` functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3652.html)
+- [N3652 Relaxing constraints on `constexpr` functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3652.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>通常関数の戻り値型推論 [N3638] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/return_type_deduction_for_normal_functions.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp14/return_type_deduction_for_normal_functions.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/return_type_deduction_for_normal_functions.md b/lang/cpp14/return_type_deduction_for_normal_functions.md
index 040f506be..05edc55cf 100644
--- a/lang/cpp14/return_type_deduction_for_normal_functions.md
+++ b/lang/cpp14/return_type_deduction_for_normal_functions.md
@@ -1,13 +1,13 @@
 # 通常関数の戻り値型推論 [N3638]
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 関数宣言の構文において、先頭の戻り値型を`auto`もしくは[`decltype(auto)`](decltype_auto.md)とすることで、戻り値の型が関数の`return`文から推論される。
@@ -244,4 +244,4 @@ auto g(F f) { return f(); }
 - [N3582 Return type deduction for normal functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3582.html)
 - [N3638 Return type deduction for normal functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3638.html)
 - [CWG Issue 1048. `auto` deduction and lambda return type deduction.](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1048)
-- [CWG Issue 1588. Deducing cv-qualified `auto`](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1588)
+- [CWG Issue 1588. Deducing cv-qualified `auto`](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1588)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>サイズ付きデアロケーション [N3778] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/sized_deallocation.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp14/sized_deallocation.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/sized_deallocation.md b/lang/cpp14/sized_deallocation.md
index d3271b809..9733d5fd9 100644
--- a/lang/cpp14/sized_deallocation.md
+++ b/lang/cpp14/sized_deallocation.md
@@ -1,13 +1,13 @@
 # サイズ付きデアロケーション [N3778]
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++03ではクラス用の`delete`演算子として、サイズをとるバージョンをオーバーロードできた。C++14では、それに対応するグローバルの`delete`演算子を定義できるようにする。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>変数テンプレート [N3651] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/variable_templates.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp14/variable_templates.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/variable_templates.md b/lang/cpp14/variable_templates.md
index 37eed78f8..63d09298a 100644
--- a/lang/cpp14/variable_templates.md
+++ b/lang/cpp14/variable_templates.md
@@ -1,13 +1,13 @@
 # 変数テンプレート [N3651]
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 変数定義時のテンプレート指定を可能にする。
@@ -136,4 +136,4 @@ auto main() -&amp;gt; int
 ## 参照
 - [N3651 Variable Templates (Revision 1)](http://open-std.org/JTC1/SC22/WG21/docs/papers/2013/n3651.pdf)
 - [Trip Report: ISO C++ Spring 2013 Meeting](https://isocpp.org/blog/2013/04/trip-report-iso-c-spring-2013-meeting)
-- [変数テンプレートをラムダ式でキャプチャするときの注意 - Faith and Brave - C++で遊ぼう](http://faithandbrave.hateblo.jp/entry/2014/01/21/162701)
+- [変数テンプレートをラムダ式でキャプチャするときの注意 - Faith and Brave - C++で遊ぼう](http://faithandbrave.hateblo.jp/entry/2014/01/21/162701)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>全ての非型テンプレート引数の定数式評価を許可 [N4268] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.md b/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.md
index 1a5f04d3e..bb3aa3b22 100644
--- a/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.md
+++ b/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.md
@@ -2,13 +2,13 @@
 
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++17では、非型テンプレート引数(non-type template argument)で扱える型はとくに変わらないが、渡せる値についての制限緩和が行われる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>変数テンプレートのデフォルトテンプレート引数を許可 -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/allow_default_template_arguments_of_variable_templates.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/allow_default_template_arguments_of_variable_templates.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/allow_default_template_arguments_of_variable_templates.md b/lang/cpp17/allow_default_template_arguments_of_variable_templates.md
index f8c14b098..a61778131 100644
--- a/lang/cpp17/allow_default_template_arguments_of_variable_templates.md
+++ b/lang/cpp17/allow_default_template_arguments_of_variable_templates.md
@@ -1,13 +1,13 @@
 # 変数テンプレートのデフォルトテンプレート引数を許可
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++17では、[変数テンプレート](/lang/cpp14/variable_templates.md)のテンプレートパラメータがデフォルト引数を持てることとなった。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>テンプレートテンプレートパラメータにtypenameキーワードの使用を許可 [N4051] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/allow_typename_in_a_template_template_parameter.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/allow_typename_in_a_template_template_parameter.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/allow_typename_in_a_template_template_parameter.md b/lang/cpp17/allow_typename_in_a_template_template_parameter.md
index 2b05c7f5d..9150ce9b3 100644
--- a/lang/cpp17/allow_typename_in_a_template_template_parameter.md
+++ b/lang/cpp17/allow_typename_in_a_template_template_parameter.md
@@ -1,13 +1,13 @@
 # テンプレートテンプレートパラメータにtypenameキーワードの使用を許可 [N4051]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 テンプレートパラメータはほとんどの箇所で`class`キーワードと`typename`キーワードの両方を使用できたが、テンプレートテンプレートパラメータのクラステンプレート部分については`class`キーワードしか使用できなかった。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>名前空間と列挙子への属性付加を許可 [N4266] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/attributes_for_namespaces_and_enumerators.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/attributes_for_namespaces_and_enumerators.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/attributes_for_namespaces_and_enumerators.md b/lang/cpp17/attributes_for_namespaces_and_enumerators.md
index 7fd5c7014..f7b9ab09b 100644
--- a/lang/cpp17/attributes_for_namespaces_and_enumerators.md
+++ b/lang/cpp17/attributes_for_namespaces_and_enumerators.md
@@ -1,13 +1,13 @@
 # 名前空間と列挙子への属性付加を許可 [N4266]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr ラムダ [P0170R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/constexpr_lambda.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/constexpr_lambda.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/constexpr_lambda.md b/lang/cpp17/constexpr_lambda.md
index d67e01f5d..a3c3d9b7e 100644
--- a/lang/cpp17/constexpr_lambda.md
+++ b/lang/cpp17/constexpr_lambda.md
@@ -2,13 +2,13 @@
 
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>enum class変数の初期値として整数を指定する際の規則を調整 [P0138R2] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/construction_enum_class_values.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/construction_enum_class_values.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/construction_enum_class_values.md b/lang/cpp17/construction_enum_class_values.md
index f776f8493..2f6b48e2b 100644
--- a/lang/cpp17/construction_enum_class_values.md
+++ b/lang/cpp17/construction_enum_class_values.md
@@ -1,13 +1,13 @@
 # enum class変数の初期値として整数を指定する際の規則を調整 [P0138R2]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++11にてスコープを持つ列挙型が導入された。これは基底型を明示することができ、従来の列挙型と異なり整数型への暗黙の型変換を行わない。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非型テンプレートパラメータのauto宣言 [P0127R2] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/declaring_non-type_template_arguments_with_auto.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/declaring_non-type_template_arguments_with_auto.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/declaring_non-type_template_arguments_with_auto.md b/lang/cpp17/declaring_non-type_template_arguments_with_auto.md
index 0ba305a8b..7faa77fa0 100644
--- a/lang/cpp17/declaring_non-type_template_arguments_with_auto.md
+++ b/lang/cpp17/declaring_non-type_template_arguments_with_auto.md
@@ -2,13 +2,13 @@
 
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++14まで、以下のように書いていた「指定された型の定数を受け取る」意図の非型テンプレートパラメータ(non-type template parameter)だが、
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>アライメント指定されたデータの動的メモリ確保 [P0035R4] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md b/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md
index 412876e18..ceb1daf17 100644
--- a/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md
+++ b/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md
@@ -1,13 +1,13 @@
 # アライメント指定されたデータの動的メモリ確保 [P0035R4]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>例外仕様を型システムの一部にする [P0012R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/exception_spec_be_part_of_the_type_system.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/exception_spec_be_part_of_the_type_system.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/exception_spec_be_part_of_the_type_system.md b/lang/cpp17/exception_spec_be_part_of_the_type_system.md
index d735f4707..4ae6a5bba 100644
--- a/lang/cpp17/exception_spec_be_part_of_the_type_system.md
+++ b/lang/cpp17/exception_spec_be_part_of_the_type_system.md
@@ -1,13 +1,13 @@
 # 例外仕様を型システムの一部にする [P0012R1]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 [`noexcept`](/lang/cpp11/noexcept.md)による例外仕様が、関数の型の一部として扱われるようになる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>厳密な式の評価順 [P0145R3] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/expression_evaluation_order.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/expression_evaluation_order.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/expression_evaluation_order.md b/lang/cpp17/expression_evaluation_order.md
index 9be6c3eff..bfe7a0791 100644
--- a/lang/cpp17/expression_evaluation_order.md
+++ b/lang/cpp17/expression_evaluation_order.md
@@ -1,13 +1,13 @@
 # 厳密な式の評価順 [P0145R3]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>static_assert のメッセージ省略を許可 [N3928] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/extending_static_assert.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/extending_static_assert.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/extending_static_assert.md b/lang/cpp17/extending_static_assert.md
index 96d6c6e6a..3fc1bc790 100644
--- a/lang/cpp17/extending_static_assert.md
+++ b/lang/cpp17/extending_static_assert.md
@@ -1,13 +1,13 @@
 # static_assert のメッセージ省略を許可 [N3928]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `static_assert` は [C++11](/lang/cpp11/static_assert.md) で導入されたが、第2引数に診断メッセージを指定しなければならなかった。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>基底クラスのメンバ変数を集成体初期化するための波カッコを省略できるようにする [P0017R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/extension_to_aggregate_initialization.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/extension_to_aggregate_initialization.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/extension_to_aggregate_initialization.md b/lang/cpp17/extension_to_aggregate_initialization.md
index b2c941418..7b42690e6 100644
--- a/lang/cpp17/extension_to_aggregate_initialization.md
+++ b/lang/cpp17/extension_to_aggregate_initialization.md
@@ -2,13 +2,13 @@
 
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[fallthrough]]属性 [P0188R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/fallthrough.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/fallthrough.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/fallthrough.md b/lang/cpp17/fallthrough.md
index 5e3590875..f809ea834 100644
--- a/lang/cpp17/fallthrough.md
+++ b/lang/cpp17/fallthrough.md
@@ -1,13 +1,13 @@
 # [[fallthrough]]属性 [P0188R1]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>機能テストマクロ -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/feature_test_macros.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/feature_test_macros.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;機能テストマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++17に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;SD-6 は C++17 の機能について以下のテストマクロを定義することを推奨している：&lt;/p&gt;
&lt;h3&gt;言語機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_hex_float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;hexadecimal_floating_literals.html&#34;&gt;十六進浮動小数点数リテラル&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_inline_variables&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;inline_variables.html&#34;&gt;インライン変数&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_aligned_new&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;dynamic_memory_allocation_for_over-aligned_data.html&#34;&gt;アライメント指定されたデータの動的メモリ確保&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_guaranteed_copy_elision&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;guaranteed_copy_elision.html&#34;&gt;値のコピー省略を保証&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_noexcept_function_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;exception_spec_be_part_of_the_type_system.html&#34;&gt;例外仕様を型システムの一部にする&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_fold_expressions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;folding_expressions.html&#34;&gt;畳み込み式&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;constexpr_lambda.html&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;ラムダ&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_if_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;if_constexpr.html&#34;&gt;&lt;code&gt;if constexpr&lt;/code&gt;文&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_range_based_for&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;generalizing_the_range-based_for_loop.html&#34;&gt;範囲 &lt;code&gt;for&lt;/code&gt; ループの制限緩和&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_static_assert&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;extending_static_assert.html&#34;&gt;&lt;code&gt;static_assert&lt;/code&gt; のメッセージ省略を許可&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_deduction_guides&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;br /&gt; &lt;code&gt;201611&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;type_deduction_for_class_templates.html&#34;&gt;クラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_nontype_template_parameter_auto&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;declaring_non-type_template_arguments_with_auto.html&#34;&gt;非型テンプレートパラメータの&lt;code&gt;auto&lt;/code&gt;宣言&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_namespace_attributes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;attributes_for_namespaces_and_enumerators.html&#34;&gt;名前空間への属性付加を許可&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_enumerator_attributes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;attributes_for_namespaces_and_enumerators.html&#34;&gt;列挙子への属性付加を許可&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_inheriting_constructors&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201511&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;継承コンストラクタの新仕様&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_variadic_using&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201611&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;pack_expansions_in_using.html&#34;&gt;&lt;code&gt;using&lt;/code&gt;宣言のパック展開&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(fallthrough)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;fallthrough.html&#34;&gt;&lt;code&gt;[[fallthrough]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(nodiscard)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;nodiscard.html&#34;&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(maybe_unused)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;maybe_unused.html&#34;&gt;&lt;code&gt;[[maybe_unused]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_structured_bindings&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;structured_bindings.html&#34;&gt;構造化束縛&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_aggregate_bases&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;extension_to_aggregate_initialization.html&#34;&gt;集成体初期化の拡張&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_nontype_template_args&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;allow_constant_evaluation_for_all_non-type_template_arguments.html&#34;&gt;非型テンプレートパラメータの定数式を評価&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_nested_namespace_definitions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;nested_namespace.html&#34;&gt;入れ子名前空間の定義&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ライブラリ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_byte&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cstddef/byte.html&#34;&gt;std::byte&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cstddef.html&#34;&gt;&amp;lt;cstddef&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_hardware_interference_size&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/new/hardware_destructive_interference_size.html&#34;&gt;std::hardware_destructive_interference_size&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/new/hardware_constructive_interference_size.html&#34;&gt;std::hardware_constructive_interference_size&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/new.html&#34;&gt;&amp;lt;new&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_launder&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/new/launder.html&#34;&gt;std::launder()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_uncaught_exceptions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/exception/uncaught_exceptions.html&#34;&gt;std::uncaught_exceptions()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/exception.html&#34;&gt;&amp;lt;exception&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_as_const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility/as_const.html&#34;&gt;std::as_const()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_make_from_tuple&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple/make_from_tuple.html&#34;&gt;std::make_from_tuple()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_apply&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple/apply.html&#34;&gt;std::apply()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple.html&#34;&gt;&amp;lt;tuple&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_optional&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/optional/optional.html&#34;&gt;std::optional&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/optional.html&#34;&gt;&amp;lt;optional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_any&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/any/any.html&#34;&gt;std::any&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/any.html&#34;&gt;&amp;lt;any&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_variant&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/variant/variant.html&#34;&gt;std::variant&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/variant.html&#34;&gt;&amp;lt;variant&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_memory_resource&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory_resource/memory_resource.html&#34;&gt;std::memory_resource&lt;/a&gt;&lt;/code&gt;と関連する機能&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory_resource.html&#34;&gt;&amp;lt;memory_resource&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_boyer_moore_searcher&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional/boyer_moore_searcher.html&#34;&gt;std::boyer_morre_searcher&lt;/a&gt;&lt;/code&gt;と関連する機能&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_string_view&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view/basic_string_view.html&#34;&gt;std::string_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_sample&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/sample.html&#34;&gt;std::sample()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_addressof_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/addressof.html&#34;&gt;std::addressof()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_raw_memory_algorithms&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/uninitialized_default_construct.html&#34;&gt;std::uninitialized_default_construct()&lt;/a&gt;&lt;/code&gt;と関連する機能&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_transparent_operators&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/owner_less.html&#34;&gt;std::owner_less&lt;/a&gt;&lt;/code&gt; の柔軟性向上&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_enable_shared_from_this&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/enable_shared_from_this.html&#34;&gt;std::enable_shared_from_this&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shared_ptr_weak_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/shared_ptr.html&#34;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;クラスのメンバ型&lt;code&gt;weak_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shared_ptr_arrays&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201611&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/shared_ptr.html&#34;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;クラスの配列サポート&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_invoke&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional/invoke.html&#34;&gt;std::invoke()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_not_fn&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional/not_fn.html&#34;&gt;std::not_fn()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_void_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/void_t.html&#34;&gt;std::void_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_bool_constant&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201505&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/bool_constant.html&#34;&gt;std::bool_constant&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_type_trait_variable_templates&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型トレイト変数テンプレート (&lt;code&gt;some_trait_v&amp;lt;T&amp;gt; = some_trait&amp;lt;T&amp;gt;::value&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_logical_traits&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;論理演算子型トレイト (&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/conjunction.html&#34;&gt;std::conjunction&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/type_traits/disjunction.html&#34;&gt;std::disjunction&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/type_traits/negation.html&#34;&gt;std::negation&lt;/a&gt;&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_swappable&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_swappable.html&#34;&gt;std::is_swappable&lt;/a&gt;&lt;/code&gt;と関連する機能&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_invocable&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_invocable.html&#34;&gt;std::is_invocable&lt;/a&gt;&lt;/code&gt;と関連する機能&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_has_unique_object_representations&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/has_unique_object_representations.html&#34;&gt;std::has_unique_object_representations&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_aggregate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_aggregate.html&#34;&gt;std::is_aggregate&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_chrono&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt; の改良&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_execution&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/execution.html&#34;&gt;&amp;lt;execution&amp;gt;&lt;/a&gt;&lt;/code&gt; の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/execution.html&#34;&gt;&amp;lt;execution&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_parallel_algorithm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;並列アルゴリズム&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_to_chars&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201611&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/charconv/to_chars.html&#34;&gt;std::to_chars()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/charconv/from_chars.html&#34;&gt;std::from_chars()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/charconv.html&#34;&gt;&amp;lt;charconv&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_allocator_traits_is_always_equal&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ライブラリ内の &lt;code&gt;noexcept&lt;/code&gt; のクリーンアップ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/deque.html&#34;&gt;&amp;lt;deque&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/forward_list.html&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/list.html&#34;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/scoped_allocator.html&#34;&gt;&amp;lt;scoped_allocator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/set.html&#34;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/unordered_set.html&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/vector.html&#34;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_incomplete_container_elements&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201505&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;標準コンテナについて不完全型を最小限サポート&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/forward_list.html&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/list.html&#34;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/vector.html&#34;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_map_try_emplace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map/map/try_emplace.html&#34;&gt;std::map::try_emplace()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/map/map/insert_or_assign.html&#34;&gt;std::map::insert_or_assign()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_unordered_map_try_emplace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_map/unordered_map/try_emplace.html&#34;&gt;std::unordered_map::try_emplace()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/unordered_map/unordered_map/insert_or_assign.html&#34;&gt;std::unordered_map::insert_or_assign()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_node_extract&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;連想コンテナのsplice&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/set.html&#34;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/unordered_set.html&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_array_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;配列関係のランダムアクセスに&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/array.html&#34;&gt;&amp;lt;array&amp;gt;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_nonmember_container_access&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非メンバ関数 &lt;code&gt;&lt;a href=&#34;../../reference/iterator/size.html&#34;&gt;std::size()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/iterator/empty.html&#34;&gt;std::empty()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/iterator/data.html&#34;&gt;std::data()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_clamp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/clamp.html&#34;&gt;std::clamp()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_gcd_lcm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric/gcd.html&#34;&gt;std::gcd()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/numeric/lcm.html&#34;&gt;std::lcm()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_hypot&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;3引数版の&lt;code&gt;&lt;a href=&#34;../../reference/cmath/hypot.html&#34;&gt;std::hypot()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_math_special_functions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数学の特殊関数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_filesystem&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルシステムライブラリ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/filesystem.html&#34;&gt;&amp;lt;filesystem&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_is_always_lock_free&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic.html&#34;&gt;std::atomic&lt;/a&gt;&lt;/code&gt;クラスの静的メンバ定数&lt;code&gt;is_always_lock_free&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shared_mutex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201505&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/shared_mutex/shared_mutex.html&#34;&gt;std::shared_mutex&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/shared_mutex.html&#34;&gt;&amp;lt;shared_mutex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_scoped_lock&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可変個のミューテックスのロックを管理する&lt;code&gt;&lt;a href=&#34;../../reference/mutex/scoped_lock.html&#34;&gt;std::scoped_lock&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/mutex.html&#34;&gt;&amp;lt;mutex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations#recs.cpp17&#34; target=&#34;_blank&#34;&gt;SD-6: SG10 Feature Test Recommendations: Standard C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>畳み込み式 [N4295] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/folding_expressions.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/folding_expressions.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/folding_expressions.md b/lang/cpp17/folding_expressions.md
index 60cba9317..408b05861 100644
--- a/lang/cpp17/folding_expressions.md
+++ b/lang/cpp17/folding_expressions.md
@@ -1,13 +1,13 @@
 # 畳み込み式 [N4295]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>範囲 for ループの制限緩和 [P0184R0] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/generalizing_the_range-based_for_loop.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/generalizing_the_range-based_for_loop.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/generalizing_the_range-based_for_loop.md b/lang/cpp17/generalizing_the_range-based_for_loop.md
index e400fc361..818f3b526 100644
--- a/lang/cpp17/generalizing_the_range-based_for_loop.md
+++ b/lang/cpp17/generalizing_the_range-based_for_loop.md
@@ -1,13 +1,13 @@
 # 範囲 for ループの制限緩和 [P0184R0]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>値のコピー省略を保証 [P0135R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/guaranteed_copy_elision.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/guaranteed_copy_elision.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/guaranteed_copy_elision.md b/lang/cpp17/guaranteed_copy_elision.md
index 448649cf2..df83a6b77 100644
--- a/lang/cpp17/guaranteed_copy_elision.md
+++ b/lang/cpp17/guaranteed_copy_elision.md
@@ -2,13 +2,13 @@
 
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++11で右辺値参照を導入するときに規定された「値カテゴリー (value category)」の仕様（C++17で更新）を利用し、[`prvalue`](../cpp11/rvalue_ref_and_move_semantics.md)&amp;lt;sup&amp;gt;&amp;lt;a id=&amp;#34;note_ref-1&amp;#34; href=&amp;#34;#note-1&amp;#34;&amp;gt;[注1]&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt;というカテゴリーの値を、オブジェクトの初期化のために使用する場合に、コピーが省略される。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>__has_include [P0061R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/has_include.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/has_include.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/has_include.md b/lang/cpp17/has_include.md
index 9972b6917..46c583c24 100644
--- a/lang/cpp17/has_include.md
+++ b/lang/cpp17/has_include.md
@@ -1,13 +1,13 @@
 # __has_include [P0061R1]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>十六進浮動小数点数リテラル [P0245R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/hexadecimal_floating_literals.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/hexadecimal_floating_literals.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/hexadecimal_floating_literals.md b/lang/cpp17/hexadecimal_floating_literals.md
index c239faf66..914023b13 100644
--- a/lang/cpp17/hexadecimal_floating_literals.md
+++ b/lang/cpp17/hexadecimal_floating_literals.md
@@ -1,12 +1,12 @@
 # 十六進浮動小数点数リテラル [P0245R1]
 * cpp17[meta cpp]
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 * [mathjax enable]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr if 文 [P0292R2] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/if_constexpr.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/if_constexpr.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/if_constexpr.md b/lang/cpp17/if_constexpr.md
index 0c1b36004..48028fc0c 100644
--- a/lang/cpp17/if_constexpr.md
+++ b/lang/cpp17/if_constexpr.md
@@ -1,13 +1,13 @@
 # constexpr if 文 [P0292R2]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>インライン変数 [P0386R2] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/inline_variables.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/inline_variables.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/inline_variables.md b/lang/cpp17/inline_variables.md
index 20ef21ee3..937afd223 100644
--- a/lang/cpp17/inline_variables.md
+++ b/lang/cpp17/inline_variables.md
@@ -1,13 +1,13 @@
 # インライン変数 [P0386R2]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式での*thisのコピーキャプチャ [P0018R3] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/lambda_capture_of_this_by_value.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/lambda_capture_of_this_by_value.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/lambda_capture_of_this_by_value.md b/lang/cpp17/lambda_capture_of_this_by_value.md
index 2340d2a4f..2e91fe9cb 100644
--- a/lang/cpp17/lambda_capture_of_this_by_value.md
+++ b/lang/cpp17/lambda_capture_of_this_by_value.md
@@ -1,13 +1,13 @@
 # ラムダ式での*thisのコピーキャプチャ [P0018R3]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++14までラムダ式で`[this]`のようにキャプチャをすると、`this`ポインタがコピーされていた。その場合、非同期処理のような状況で、ラムダ式の関数オブジェクトが呼び出されたときに、`this`ポインタが指すオブジェクトの寿命が尽きている場合がある。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>noexcept付きのラムダ式から変換する関数ポインタにnoexceptを付加する -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/lambda_to_noexcept_function_pointer.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/lambda_to_noexcept_function_pointer.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/lambda_to_noexcept_function_pointer.md b/lang/cpp17/lambda_to_noexcept_function_pointer.md
index 6b8d71d82..c0532d9d1 100644
--- a/lang/cpp17/lambda_to_noexcept_function_pointer.md
+++ b/lang/cpp17/lambda_to_noexcept_function_pointer.md
@@ -1,13 +1,13 @@
 # noexcept付きのラムダ式から変換する関数ポインタにnoexceptを付加する
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 キャプチャを持たない非ジェネリックなラムダ式は、関数ポインタに変換できる。そのラムダ式が例外を投げない指定をされていた場合、変換された関数ポインタもまた`noexcept`を持つ。
@@ -55,4 +55,4 @@ true
 
 
 ## 参照
-- [CWG Issue 1722. Should lambda to function pointer conversion function be `noexcept`?](https://wg21.cmeerw.net/cwg/issue1722)
+- [CWG Issue 1722. Should lambda to function pointer conversion function be `noexcept`?](https://wg21.cmeerw.net/cwg/issue1722)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[maybe_unused]]属性 [P0212R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/maybe_unused.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/maybe_unused.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/maybe_unused.md b/lang/cpp17/maybe_unused.md
index 7832e097e..0c61865ae 100644
--- a/lang/cpp17/maybe_unused.md
+++ b/lang/cpp17/maybe_unused.md
@@ -1,13 +1,13 @@
 # [[maybe_unused]]属性 [P0212R1]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>入れ子名前空間の定義 [N4230] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/nested_namespace.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/nested_namespace.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/nested_namespace.md b/lang/cpp17/nested_namespace.md
index 2745b5513..37c3df4f4 100644
--- a/lang/cpp17/nested_namespace.md
+++ b/lang/cpp17/nested_namespace.md
@@ -1,13 +1,13 @@
 # 入れ子名前空間の定義 [N4230]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 一度の定義だけで入れ子状になった名前空間を定義可能となる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>波括弧初期化の型推論の新規則 [N3922] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.md b/lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.md
index 2a635eaec..017d28e05 100644
--- a/lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.md
+++ b/lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.md
@@ -1,13 +1,13 @@
 # 波括弧初期化の型推論の新規則 [N3922]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[nodiscard]]属性 [P0189R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/nodiscard.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/nodiscard.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/nodiscard.md b/lang/cpp17/nodiscard.md
index 489a4d2d1..7346a5df0 100644
--- a/lang/cpp17/nodiscard.md
+++ b/lang/cpp17/nodiscard.md
@@ -1,13 +1,13 @@
 # [[nodiscard]]属性 [P0189R1]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>不明な属性を無視する [P0283R2] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/non_standard_attributes.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/non_standard_attributes.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/non_standard_attributes.md b/lang/cpp17/non_standard_attributes.md
index ad9fbd589..c0fabc99d 100644
--- a/lang/cpp17/non_standard_attributes.md
+++ b/lang/cpp17/non_standard_attributes.md
@@ -1,13 +1,13 @@
 # 不明な属性を無視する [P0283R2]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>using宣言のパック展開 [P0195R2] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/pack_expansions_in_using.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/pack_expansions_in_using.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/pack_expansions_in_using.md b/lang/cpp17/pack_expansions_in_using.md
index de332e0a1..c2b4a7e84 100644
--- a/lang/cpp17/pack_expansions_in_using.md
+++ b/lang/cpp17/pack_expansions_in_using.md
@@ -1,13 +1,13 @@
 # using宣言のパック展開 [P0195R2]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>更新された定義済みマクロ -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/predefined_macros.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/predefined_macros.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;更新された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++17に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative_page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cplusplus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++のバージョン値を表す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;新規マクロは以下：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDCPP_DEFAULT_NEW_ALIGNMENT__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実装定義&lt;/td&gt;
&lt;td&gt;動的メモリ確保時のデフォルトのアライメント値&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;dynamic_memory_allocation_for_over-aligned_data.html&#34;&gt;C++17 アライメント指定されたデータの動的メモリ確保&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非推奨だった古い例外仕様を削除 [P0003R5] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/remove_deprecated_exception_specifications.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/remove_deprecated_exception_specifications.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/remove_deprecated_exception_specifications.md b/lang/cpp17/remove_deprecated_exception_specifications.md
index 127715a9b..8d645f045 100644
--- a/lang/cpp17/remove_deprecated_exception_specifications.md
+++ b/lang/cpp17/remove_deprecated_exception_specifications.md
@@ -1,13 +1,13 @@
 # 非推奨だった古い例外仕様を削除 [P0003R5]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++11で[`noexcept`](/lang/cpp11/noexcept.md)機能が入ったことにより、従来の`throw`キーワードを使用した「例外仕様 (Exception Specification)」は「動的例外仕様 (Dynamic Exception Specification)」という名前に変更され、非推奨となっていた。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非推奨だった bool 型に対するインクリメント演算子を削除 [P0002R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/remove_deprecated_increment_of_bool.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/remove_deprecated_increment_of_bool.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/remove_deprecated_increment_of_bool.md b/lang/cpp17/remove_deprecated_increment_of_bool.md
index 3ff243c75..4888e6a5d 100644
--- a/lang/cpp17/remove_deprecated_increment_of_bool.md
+++ b/lang/cpp17/remove_deprecated_increment_of_bool.md
@@ -1,13 +1,13 @@
 # 非推奨だった bool 型に対するインクリメント演算子を削除 [P0002R1]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非推奨だったregisterキーワードを削除 [P0001R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/remove_deprecated_use_of_the_register_keyword.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/remove_deprecated_use_of_the_register_keyword.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/remove_deprecated_use_of_the_register_keyword.md b/lang/cpp17/remove_deprecated_use_of_the_register_keyword.md
index bffa62989..4bbea0c54 100644
--- a/lang/cpp17/remove_deprecated_use_of_the_register_keyword.md
+++ b/lang/cpp17/remove_deprecated_use_of_the_register_keyword.md
@@ -1,13 +1,13 @@
 # 非推奨だったregisterキーワードを削除 [P0001R1]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>トライグラフの削除 [N4086] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/removing_trigraphs.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/removing_trigraphs.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/removing_trigraphs.md b/lang/cpp17/removing_trigraphs.md
index 8b0967eab..32b4e8580 100644
--- a/lang/cpp17/removing_trigraphs.md
+++ b/lang/cpp17/removing_trigraphs.md
@@ -1,13 +1,13 @@
 # トライグラフの削除 [N4086]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>参照メンバをもつクラスの置き換え [P0137R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/replacement_of_class_objects_containing_reference_members.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/replacement_of_class_objects_containing_reference_members.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/replacement_of_class_objects_containing_reference_members.md b/lang/cpp17/replacement_of_class_objects_containing_reference_members.md
index 2aa783929..c14c128a5 100644
--- a/lang/cpp17/replacement_of_class_objects_containing_reference_members.md
+++ b/lang/cpp17/replacement_of_class_objects_containing_reference_members.md
@@ -1,13 +1,13 @@
 # 参照メンバをもつクラスの置き換え [P0137R1]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `placement new`を使用して、参照型や`const`メンバ変数を含む構造体/クラスを置き換える際、オブジェクト生存期間(lifetime)に基づいた最適化の抑止をコンパイラに伝える関数[`std::launder()`](/reference/new/launder.md)を用いることで、未定義動作となるような文脈で参照型や`const`メンバ変数へのアクセスができる。
@@ -99,4 +99,4 @@ public:
 - [std::launder - cppreference.com](https://en.cppreference.com/w/cpp/utility/launder)
 - [Pointer safety and placement new](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4303.html)
 - [Implementability of std::optional （std :: optionalの実装可能性） ](https://groups.google.com/a/isocpp.org/forum/#!msg/std-proposals/93ebFsxCjvQ/Q5LUnO8339wJ)
-- [Lifetime - cppreference.com](https://en.cppreference.com/w/cpp/language/lifetime)
+- [Lifetime - cppreference.com](https://en.cppreference.com/w/cpp/language/lifetime)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>if文とswitch文の条件式と初期化を分離 [P0305R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/selection_statements_with_initializer.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/selection_statements_with_initializer.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/selection_statements_with_initializer.md b/lang/cpp17/selection_statements_with_initializer.md
index b72260aa5..853453de2 100644
--- a/lang/cpp17/selection_statements_with_initializer.md
+++ b/lang/cpp17/selection_statements_with_initializer.md
@@ -1,13 +1,13 @@
 # if文とswitch文の条件式と初期化を分離 [P0305R1]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>構造化束縛 [P0217R3] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/structured_bindings.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/structured_bindings.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/structured_bindings.md b/lang/cpp17/structured_bindings.md
index 261e9ac82..c0b07bf72 100644
--- a/lang/cpp17/structured_bindings.md
+++ b/lang/cpp17/structured_bindings.md
@@ -1,13 +1,13 @@
 # 構造化束縛 [P0217R3]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 「構造化束縛 (structured bindings)」は、組やタプル、配列や構造体を分解して各要素を取り出す機能である。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>クラステンプレートのテンプレート引数推論 [P0091R3] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/type_deduction_for_class_templates.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/type_deduction_for_class_templates.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/type_deduction_for_class_templates.md b/lang/cpp17/type_deduction_for_class_templates.md
index 4c7d68427..34ece2891 100644
--- a/lang/cpp17/type_deduction_for_class_templates.md
+++ b/lang/cpp17/type_deduction_for_class_templates.md
@@ -1,13 +1,13 @@
 # クラステンプレートのテンプレート引数推論 [P0091R3]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 コンストラクタに渡される値によって、クラステンプレートのテンプレート引数を推論する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>属性の名前空間指定に繰り返しをなくす [P0028R4] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/using_attribute_namespaces.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/using_attribute_namespaces.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/using_attribute_namespaces.md b/lang/cpp17/using_attribute_namespaces.md
index bd23c19a7..5d944df0b 100644
--- a/lang/cpp17/using_attribute_namespaces.md
+++ b/lang/cpp17/using_attribute_namespaces.md
@@ -1,13 +1,13 @@
 # 属性の名前空間指定に繰り返しをなくす [P0028R4]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>UTF-8文字リテラル [N4267] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/utf8_character_literals.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp17/utf8_character_literals.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/utf8_character_literals.md b/lang/cpp17/utf8_character_literals.md
index c486f134d..e0efe041a 100644
--- a/lang/cpp17/utf8_character_literals.md
+++ b/lang/cpp17/utf8_character_literals.md
@@ -1,13 +1,13 @@
 # UTF-8文字リテラル [N4267]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++14までは、UTF-8エンコーディングであることを示す`u8`プレフィックスを、文字列リテラルに対してのみ指定できた。C++17では、文字リテラルに対しても`u8`プレフィックスを付けられる。
@@ -36,4 +36,4 @@ C++20ではUTF-8文字リテラルの型が[`char`ではなく`char8_t`になる
 ## 参照
 - [N4267 Adding `u8` character literals](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4267.html)
 - [C0 Controls and Basic Latin - The Unicode Consortium](http://www.unicode.org/charts/PDF/U0000.pdf)
-- [基本ラテン文字 (Unicodeのブロック) - Wikipedia](https://ja.wikipedia.org/wiki/%E5%9F%BA%E6%9C%AC%E3%83%A9%E3%83%86%E3%83%B3%E6%96%87%E5%AD%97_(Unicode%E3%81%AE%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF))
+- [基本ラテン文字 (Unicodeのブロック) - Wikipedia](https://ja.wikipedia.org/wiki/%E5%9F%BA%E6%9C%AC%E3%83%A9%E3%83%86%E3%83%B3%E6%96%87%E5%AD%97_(Unicode%E3%81%AE%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF))
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>特殊化のアクセスチェック [P0692R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/access_checking_on_specializations.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/access_checking_on_specializations.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/access_checking_on_specializations.md b/lang/cpp20/access_checking_on_specializations.md
index b80a26c32..e7e3e1126 100644
--- a/lang/cpp20/access_checking_on_specializations.md
+++ b/lang/cpp20/access_checking_on_specializations.md
@@ -1,13 +1,13 @@
 # 特殊化のアクセスチェック [P0692R1]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
@@ -152,4 +152,4 @@ namespace option3 {
 
 ## 参照
 
-- [P0692R1 Access Checking on Specializations](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0692r1.html)
+- [P0692R1 Access Checking on Specializations](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0692r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>関数テンプレートに明示的に型指定した場合にADLで見つからない問題を修正 [P0846R0] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/adl_and_function_templates_that_are_not_visible.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/adl_and_function_templates_that_are_not_visible.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/adl_and_function_templates_that_are_not_visible.md b/lang/cpp20/adl_and_function_templates_that_are_not_visible.md
index fe061cd64..360530f8d 100644
--- a/lang/cpp20/adl_and_function_templates_that_are_not_visible.md
+++ b/lang/cpp20/adl_and_function_templates_that_are_not_visible.md
@@ -1,13 +1,13 @@
 # 関数テンプレートに明示的に型指定した場合にADLで見つからない問題を修正 [P0846R0]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++17までは、以下のコードが不適格だった：
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>丸カッコの値リストからの集成体初期化を許可 [P0960R3] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md b/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md
index b9686a4ed..eda127df3 100644
--- a/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md
+++ b/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md
@@ -2,13 +2,13 @@
 
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式のキャプチャとして[=, this]を許可する [P0409R2] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allow_lambda_capture_equal_this.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/allow_lambda_capture_equal_this.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allow_lambda_capture_equal_this.md b/lang/cpp20/allow_lambda_capture_equal_this.md
index 8c8cc2e0b..f2ca69bff 100644
--- a/lang/cpp20/allow_lambda_capture_equal_this.md
+++ b/lang/cpp20/allow_lambda_capture_equal_this.md
@@ -1,13 +1,13 @@
 # ラムダ式のキャプチャとして[=, this]を許可する [P0409R2]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++17まで、ラムダ式のキャプチャとして`[=, this]`は指定できなかった。これは、デフォルトコピーキャプチャ (`=`) に、`this`ポインタのコピーキャプチャが含まれるため、重複指定はできないというものである。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式の初期化キャプチャでのパック展開を許可 [P0780R2] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md b/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md
index 8bece858e..e4171c60f 100644
--- a/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md
+++ b/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md
@@ -1,13 +1,13 @@
 # ラムダ式の初期化キャプチャでのパック展開を許可 [P0780R2]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 [ラムダ式](/lang/cpp11/lambda_expressions.md)の[初期化キャプチャ](../cpp14/initialize_capture.md)で、パック展開ができるようになった。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>friend指定された関数内から構造化束縛を使用して非公開メンバ変数にアクセスすることを許可 [P0969R0] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allow_structured_bindings_to_accessible_members.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/allow_structured_bindings_to_accessible_members.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allow_structured_bindings_to_accessible_members.md b/lang/cpp20/allow_structured_bindings_to_accessible_members.md
index e00dafa58..7eed7ff0d 100644
--- a/lang/cpp20/allow_structured_bindings_to_accessible_members.md
+++ b/lang/cpp20/allow_structured_bindings_to_accessible_members.md
@@ -1,13 +1,13 @@
 # friend指定された関数内から構造化束縛を使用して非公開メンバ変数にアクセスすることを許可 [P0969R0]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++17までの構造化束縛では、publicアクセス指定されたメンバ変数のみ抽出できる仕様となっていた。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>定数式からの仮想関数の呼び出しを許可 [P1064R0] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/allow_virtual_function_calls_in_constant_expressions.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.md b/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.md
index 92057fd4c..6a6643aae 100644
--- a/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.md
+++ b/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.md
@@ -1,13 +1,13 @@
 # 定数式からの仮想関数の呼び出しを許可 [P1064R0]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++20では、仮想関数に対して`constexpr`を指定し、定数式の文脈で呼び出せるようになる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>定数式での`dynamic_cast`、多態的な`typeid`を許可 [P1327R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.md b/lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.md
index 47e996222..79fb171a6 100644
--- a/lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.md
+++ b/lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.md
@@ -1,13 +1,13 @@
 # 定数式での`dynamic_cast`、多態的な`typeid`を許可 [P1327R1]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>new式での配列要素数の推論 [P1009R2] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/array_size_deduction_in_new-expressions.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/array_size_deduction_in_new-expressions.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/array_size_deduction_in_new-expressions.md b/lang/cpp20/array_size_deduction_in_new-expressions.md
index 38c8f90d9..34a3005ac 100644
--- a/lang/cpp20/array_size_deduction_in_new-expressions.md
+++ b/lang/cpp20/array_size_deduction_in_new-expressions.md
@@ -2,13 +2,13 @@
 
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>定数式内での共用体のアクティブメンバの変更を許可 [P1330R0] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md b/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md
index 3f82156d4..6cd672333 100644
--- a/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md
+++ b/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md
@@ -1,13 +1,13 @@
 # 定数式内での共用体のアクティブメンバの変更を許可 [P1330R0]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>UTF-8エンコーディングされた文字の型として`char8_t`を追加 [P0482R6] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/char8_t.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/char8_t.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/char8_t.md b/lang/cpp20/char8_t.md
index 6d2a7d399..3b1decd0a 100644
--- a/lang/cpp20/char8_t.md
+++ b/lang/cpp20/char8_t.md
@@ -1,13 +1,13 @@
 # UTF-8エンコーディングされた文字の型として`char8_t`を追加 [P0482R6]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>抽象型のチェック [P0929R2] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/checking_for_abstract_class_types.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/checking_for_abstract_class_types.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/checking_for_abstract_class_types.md b/lang/cpp20/checking_for_abstract_class_types.md
index 14e0f528f..55f911cad 100644
--- a/lang/cpp20/checking_for_abstract_class_types.md
+++ b/lang/cpp20/checking_for_abstract_class_types.md
@@ -1,13 +1,13 @@
 # 抽象型のチェック [P0929R2]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++17までは以下の仕様があったため、抽象クラスに早期の制限があった：
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>集成体クラステンプレートのテンプレート引数推論 [P1816R0] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/class_template_argument_deduction_for_aggregates.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/class_template_argument_deduction_for_aggregates.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/class_template_argument_deduction_for_aggregates.md b/lang/cpp20/class_template_argument_deduction_for_aggregates.md
index 20169b4c8..33d731174 100644
--- a/lang/cpp20/class_template_argument_deduction_for_aggregates.md
+++ b/lang/cpp20/class_template_argument_deduction_for_aggregates.md
@@ -1,13 +1,13 @@
 # 集成体クラステンプレートのテンプレート引数推論 [P1816R0]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++17で導入されたクラステンプレートのテンプレート引数推論は、コンストラクタ引数からテンプレート引数を推論するものであった。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>エイリアステンプレート経由でのクラステンプレートのテンプレート引数推論 [P1814R0] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/class_template_argument_deduction_for_alias_templates.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/class_template_argument_deduction_for_alias_templates.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/class_template_argument_deduction_for_alias_templates.md b/lang/cpp20/class_template_argument_deduction_for_alias_templates.md
index 313c11a4a..848b543ca 100644
--- a/lang/cpp20/class_template_argument_deduction_for_alias_templates.md
+++ b/lang/cpp20/class_template_argument_deduction_for_alias_templates.md
@@ -1,13 +1,13 @@
 # エイリアステンプレート経由でのクラステンプレートのテンプレート引数推論 [P1814R0]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++17で導入されたクラステンプレートのテンプレート引数推論は、コンストラクタ引数からテンプレート引数を推論するものであった。しかし、そのクラステンプレートのエイリアステンプレートを定義した場合に、エイリアステンプレートの変数定義からはクラステンプレートのテンプレート引数を推論できない問題があった。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非型テンプレートパラメータとしてクラス型を許可する [P0732R2] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/class_types_in_non-type_template_parameters.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/class_types_in_non-type_template_parameters.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/class_types_in_non-type_template_parameters.md b/lang/cpp20/class_types_in_non-type_template_parameters.md
index 9df91ede1..741e36484 100644
--- a/lang/cpp20/class_types_in_non-type_template_parameters.md
+++ b/lang/cpp20/class_types_in_non-type_template_parameters.md
@@ -1,13 +1,13 @@
 # 非型テンプレートパラメータとしてクラス型を許可する [P0732R2]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 これまで、非型テンプレートパラメータ (non-type template parameter) としては、整数型、ポインタ、参照、[`std::nullptr_t`](/reference/cstddef/nullptr_t.md)、[プレースホルダ型](/lang/cpp17/declaring_non-type_template_arguments_with_auto.md)の値しか受け取ることが許可されていなかった。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンセプト [P0734R0] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/concepts.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/concepts.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/concepts.md b/lang/cpp20/concepts.md
index 94b288806..97d65c35c 100644
--- a/lang/cpp20/concepts.md
+++ b/lang/cpp20/concepts.md
@@ -1,13 +1,13 @@
 # コンセプト [P0734R0]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++20から導入される「コンセプト (concepts)」は、テンプレートパラメータを制約する機能である。この機能を使用することで、以下のような面でプログラミングのしやすさが向上する：
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>一貫比較 [P0515R3] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/consistent_comparison.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/consistent_comparison.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/consistent_comparison.md b/lang/cpp20/consistent_comparison.md
index 91c1df457..5b8cac2d3 100644
--- a/lang/cpp20/consistent_comparison.md
+++ b/lang/cpp20/consistent_comparison.md
@@ -1,13 +1,13 @@
 # 一貫比較 [P0515R3]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 新しく三方比較演算子`&amp;lt;=&amp;gt;`が導入されることにより、順序付けと同値比較の6つの関係演算子（`&amp;lt;`, `&amp;lt;=`, `&amp;gt;`, `&amp;gt;=`, `==`, `!=`）を容易に実装することができるようになる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンパイル時初期化を強制する`constinit`キーワードを追加 [P1143R2] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/constinit.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/constinit.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/constinit.md b/lang/cpp20/constinit.md
index e23305588..278c0de2d 100644
--- a/lang/cpp20/constinit.md
+++ b/lang/cpp20/constinit.md
@@ -1,13 +1,13 @@
 # コンパイル時初期化を強制する`constinit`キーワードを追加 [P1143R2]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ポインタから`bool`への変換を縮小変換とする [P1957R2] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md b/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md
index 7b2b886e8..2c03a7b4d 100644
--- a/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md
+++ b/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md
@@ -1,13 +1,13 @@
 # ポインタから`bool`への変換を縮小変換とする [P1957R2]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コルーチン [P0912R5] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/coroutines.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/coroutines.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/coroutines.md b/lang/cpp20/coroutines.md
index b01763587..a85f03595 100644
--- a/lang/cpp20/coroutines.md
+++ b/lang/cpp20/coroutines.md
@@ -1,13 +1,13 @@
 # コルーチン [P0912R5]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 処理途中でのサスペンド(中断)／レジューム(再開)をサポートする一般化された関数として、[コルーチン](https://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%AB%E3%83%BC%E3%83%81%E3%83%B3)が導入される。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>状態を持たないラムダ式を、デフォルト構築可能、代入可能とする [P0624R2] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md b/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md
index 9cad42c30..43c2c464d 100644
--- a/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md
+++ b/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md
@@ -1,13 +1,13 @@
 # 状態を持たないラムダ式を、デフォルト構築可能、代入可能とする [P0624R2]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ビットフィールドのメンバ変数初期化 [P0683R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/default_member_initializers_for_bit_fields.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/default_member_initializers_for_bit_fields.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/default_member_initializers_for_bit_fields.md b/lang/cpp20/default_member_initializers_for_bit_fields.md
index 3d3bdb4d9..89b4aa3f7 100644
--- a/lang/cpp20/default_member_initializers_for_bit_fields.md
+++ b/lang/cpp20/default_member_initializers_for_bit_fields.md
@@ -1,13 +1,13 @@
 # ビットフィールドのメンバ変数初期化 [P0683R1]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++11で導入された[非静的メンバ変数の初期化子](/lang/cpp11/non_static_data_member_initializers.md)では、ビットフィールドは対象外であった。
@@ -83,4 +83,4 @@ int main()
 ## 参照
 - [P0187R0 Proposal of Bitfield Default Member Initializers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0187r0.pdf)
 - [R0187R1 Proposal/Wording for Bit-field Default Member Initializer Syntax](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0187r1.pdf)
-- [P0683R1 Default member initializers for bit-fields](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0683r1.html)
+- [P0683R1 Default member initializers for bit-fields](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0683r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[=]によるthisの暗黙のキャプチャを非推奨化 [P0806R2] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md b/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md
index 795b36fe4..a2006710a 100644
--- a/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md
+++ b/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md
@@ -1,13 +1,13 @@
 # [=]によるthisの暗黙のキャプチャを非推奨化 [P0806R2]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++20からは、ラムダ式でのデフォルトコピーのキャプチャ指定`[=]`での`this`ポインタのキャプチャは非推奨となる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>PODを非推奨化 [P0767R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecate_pod.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/deprecate_pod.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;PODを非推奨化 [P0767R1]&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative_page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;../../reference/type_traits/is_pod.html&#34;&gt;POD (Plain Old Data) という型の分類&lt;/a&gt;は、C++11において&lt;a href=&#34;../../reference/type_traits/is_trivial.html&#34;&gt;トリビアル型&lt;/a&gt;と&lt;a href=&#34;../../reference/type_traits/is_standard_layout.html&#34;&gt;スタンダードレイアウト型&lt;/a&gt;に用語が分割された。&lt;/p&gt;
&lt;p&gt;C++20では規格の文面に残っていた「POD」の使用をやめ、スタンダードレイアウト型などのほかの型分類に置き換えた。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_pod.html&#34;&gt;is_pod&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/aligned_storage.html&#34;&gt;aligned_storage&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/aligned_union.html&#34;&gt;aligned_union&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cstddef/max_align_t.html&#34;&gt;max_align_t&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0767r1.html&#34; target=&#34;_blank&#34;&gt;P0767R1 Deprecate POD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2342.htm&#34; target=&#34;_blank&#34;&gt;N2342 POD&#39;s Revisited; Resolving Core Issue 568 (Revision 5)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://faithandbrave.hateblo.jp/entry/20081127/1227777378&#34; target=&#34;_blank&#34;&gt;C++0x POD再考 - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C++11においてPODという用語が分割された文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>添字演算子内でのカンマ演算子の使用を非推奨化 [P1161R3] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md b/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md
index d5e8cabe3..be7420c5b 100644
--- a/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md
+++ b/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md
@@ -1,13 +1,13 @@
 # 添字演算子内でのカンマ演算子の使用を非推奨化 [P1161R3]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 多次元配列クラスを設計する場合などで、単一の引数しかとれない添字演算子に`ar[x, y]`のようにカンマ演算子をオーバーロードして複数のインデックスを指定できるようにすることがあった。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ほとんどの`volatile`を非推奨化 [P1152R4] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecating_volatile.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/deprecating_volatile.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/deprecating_volatile.md b/lang/cpp20/deprecating_volatile.md
index e839c4a6e..9586db0d6 100644
--- a/lang/cpp20/deprecating_volatile.md
+++ b/lang/cpp20/deprecating_volatile.md
@@ -1,13 +1,13 @@
 # ほとんどの`volatile`を非推奨化 [P1152R4]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>指示付き初期化 [P0329R4] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/designated_initialization.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/designated_initialization.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/designated_initialization.md b/lang/cpp20/designated_initialization.md
index f21a37367..257318aed 100644
--- a/lang/cpp20/designated_initialization.md
+++ b/lang/cpp20/designated_initialization.md
@@ -2,13 +2,13 @@
 
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++20では、波カッコによる集成体初期化においてメンバ名を指定して初期化が行える。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>型の文脈でtypenameの省略を許可 [P0634R3] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/down_with_typename.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/down_with_typename.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/down_with_typename.md b/lang/cpp20/down_with_typename.md
index 669457506..332621f08 100644
--- a/lang/cpp20/down_with_typename.md
+++ b/lang/cpp20/down_with_typename.md
@@ -2,13 +2,13 @@
 
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変長データを扱うクラスの効率的なdelete [P0722R3] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md b/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md
index 90f56aa92..e995bf577 100644
--- a/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md
+++ b/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md
@@ -1,13 +1,13 @@
 # 可変長データを扱うクラスの効率的なdelete [P0722R3]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数内で未評価のインラインアセンブリを許可することによる組み込み関数のconstexpr有効化 [P1668R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md b/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md
index 0a947a798..ecbff6e9f 100644
--- a/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md
+++ b/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md
@@ -1,13 +1,13 @@
 # constexpr関数内で未評価のインラインアセンブリを許可することによる組み込み関数のconstexpr有効化 [P1668R1]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>関数を条件付きでexplicitにする構文を追加 [P0892R2] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/explicit_bool.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/explicit_bool.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/explicit_bool.md b/lang/cpp20/explicit_bool.md
index 64a1ffee3..c8e39641d 100644
--- a/lang/cpp20/explicit_bool.md
+++ b/lang/cpp20/explicit_bool.md
@@ -1,13 +1,13 @@
 # 関数を条件付きでexplicitにする構文を追加 [P0892R2]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++20では、関数を条件付きで`explicit`にする構文が追加された。コンストラクタと変換演算子に指定する`explicit`指定子に、`explicit(true)`、`explicit(false)`のように`bool`に変換可能な定数式を指定する。`true`に評価される値を指定することで、その関数は`explicit`となる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>構造化束縛を拡張して通常の変数宣言のように使用できるようにする [P1091R3] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.md b/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.md
index 8873ff8d0..9d73404bc 100644
--- a/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.md
+++ b/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.md
@@ -1,13 +1,13 @@
 # 構造化束縛を拡張して通常の変数宣言のように使用できるようにする [P1091R3]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++17で導入された構造化束縛宣言に指定しておけるのはCV修飾のみで、記憶域クラスや`constexpr`等を指定することは出来なかった。  
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ジェネリックラムダのテンプレート構文 [P0428R2] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/familiar_template_syntax_for_generic_lambdas.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/familiar_template_syntax_for_generic_lambdas.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/familiar_template_syntax_for_generic_lambdas.md b/lang/cpp20/familiar_template_syntax_for_generic_lambdas.md
index 5a08c5809..bd1567078 100644
--- a/lang/cpp20/familiar_template_syntax_for_generic_lambdas.md
+++ b/lang/cpp20/familiar_template_syntax_for_generic_lambdas.md
@@ -1,13 +1,13 @@
 # ジェネリックラムダのテンプレート構文 [P0428R2]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++14では、ラムダ式のパラメータ型に`auto`キーワードを使用することで、任意の型のパラメータを受け取れるようになった：
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>機能テストマクロ -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/feature_test_macros.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/feature_test_macros.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;機能テストマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;h3&gt;言語機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_aggregate_paren_init&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;allow_initializing_aggregates_from_a_parenthesized_list_of_values.html&#34;&gt;丸カッコの値リストからの集成体初期化を許可&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_char8_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;char8_t.html&#34;&gt;UTF-8エンコーディングされた文字の型として&lt;code&gt;char8_t&lt;/code&gt;を追加&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_concepts&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;concepts.html&#34;&gt;コンセプト&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_conditional_explicit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;explicit_bool.html&#34;&gt;関数を条件付きで&lt;code&gt;explicit&lt;/code&gt;にする構文を追加&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;allow_virtual_function_calls_in_constant_expressions.html&#34;&gt;定数式からの仮想関数の呼び出しを許可&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.html&#34;&gt;定数式での&lt;code&gt;dynamic_cast&lt;/code&gt;、多態的な&lt;code&gt;typeid&lt;/code&gt;を許可&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;try-catch_blocks_in_constexpr_functions.html&#34;&gt;constexpr関数内でのtry-catchブロックを許可&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;changing_the_active_member_of_a_union_inside_constexpr.html&#34;&gt;定数式内での共用体のアクティブメンバの変更を許可&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;permitting_trivial_default_initialization_in_constexpr_contexts.html&#34;&gt;constexpr関数内でのトリビアルなデフォルト初期化を許可&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.html&#34;&gt;constexpr関数内で未評価のインラインアセンブリを許可することによる組み込み関数のconstexpr有効化&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr_dynamic_alloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;more_constexpr_containers.html&#34;&gt;可変サイズをもつコンテナの&lt;code&gt;constexpr&lt;/code&gt;化&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr_in_decltype&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;less_eager_instantiation_of_constexpr_functions.html&#34;&gt;評価されない文脈での定数式評価によって特殊メンバ関数がインスタンス化されることを規定&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_consteval&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;immediate_functions.html&#34;&gt;即時関数&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constinit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;constinit.html&#34;&gt;コンパイル時初期化を強制する&lt;code&gt;constinit&lt;/code&gt;キーワードを追加&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_deduction_guides&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;class_template_argument_deduction_for_aggregates.html&#34;&gt;集成体クラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;class_template_argument_deduction_for_alias_templates.html&#34;&gt;エイリアステンプレート経由でのクラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_designated_initializers&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201707L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;designated_initialization.html&#34;&gt;指示付き初期化&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_generic_lambdas&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201707L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;familiar_template_syntax_for_generic_lambdas.html&#34;&gt;ジェネリックラムダのテンプレート構文&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_impl_coroutine&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;coroutines.html&#34;&gt;コルーチン&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_impl_destroying_delete&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;efficient_sized_delete_for_variable_sized_classes.html&#34;&gt;可変長データを扱うクラスの効率的な&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_impl_three_way_comparison&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;consistent_comparison.html&#34;&gt;一貫比較&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_init_captures&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201803L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;allow_pack_expansion_in_lambda_init_capture.html&#34;&gt;ラムダ式の初期化キャプチャでのパック展開を許可&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_modules&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;modules.html&#34;&gt;モジュール&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_nontype_template_args&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201911L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;class_types_in_non-type_template_parameters.html&#34;&gt;非型テンプレートパラメータとしてクラス型を許可する&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_using_enum&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;using_enum.html&#34;&gt;スコープ付き列挙型のusing宣言&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ライブラリ&lt;/h3&gt;
&lt;p&gt;ライブラリの機能テストマクロは全て&lt;code&gt;&lt;a href=&#34;../../reference/version.html&#34;&gt;&amp;lt;version&amp;gt;&lt;/a&gt;&lt;/code&gt;でも提供される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_array_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201803L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::array&lt;/code&gt;の完全&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/array.html&#34;&gt;&amp;lt;array&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_assume_aligned&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/assume_aligned.html&#34;&gt;std::assume_aligned()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_flag_test&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic_flag/test.html&#34;&gt;std::atomic_flag::test()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/atomic/atomic.html&#34;&gt;&lt;code&gt;std::atomic&lt;/code&gt;の浮動小数点数型に対する特殊化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_lock_free_type_aliases&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic.html&#34;&gt;atomic_signed_lock_free/atomic_unsigned_lock_free&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_ref&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic_ref.html&#34;&gt;std::atomic_ref&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_shared_ptr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/memory/atomic.html&#34;&gt;&lt;code&gt;std::atomic&lt;/code&gt;の&lt;code&gt;std::shared_ptr/std::weak_ptr&lt;/code&gt;に対する特殊化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_value_initialization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201911L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/atomic/atomic_flag/op_constructor.html&#34;&gt;&lt;code&gt;std::atomic_flag&lt;/code&gt;の値初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_wait&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic/wait.html&#34;&gt;std::atomic::wait()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic/notify_one.html&#34;&gt;std::atomic::notify_one()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic/notify_all.html&#34;&gt;std::atomic::notify_all()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_barrier&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/barrier.html&#34;&gt;&amp;lt;barrier&amp;gt;&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/barrier.html&#34;&gt;&amp;lt;barrier&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_bind_front&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional/bind_front.html&#34;&gt;std::bind_front()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_bit_cast&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit/bit_cast.html&#34;&gt;std::bit_cast()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_bitops&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_bounded_array_traits&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_bounded_array.html&#34;&gt;std::is_bounded_array&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_unbounded_array.html&#34;&gt;std::is_unbounded_array&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_char8_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;char8_t&lt;/code&gt;に対する特殊化の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/filesystem.html&#34;&gt;&amp;lt;filesystem&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/istream.html&#34;&gt;&amp;lt;istream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/limits.html&#34;&gt;&amp;lt;limits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/locale.html&#34;&gt;&amp;lt;locale&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ostream.html&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_chrono&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;カレンダーとタイムゾーン&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_concepts&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/concepts.html&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/concepts.html&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_algorithms&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多くのアルゴリズムに&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_complex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/complex/complex.html&#34;&gt;std::complex&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/complex.html&#34;&gt;&amp;lt;complex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_dynamic_alloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/destroy_at.html&#34;&gt;std::destroy_at&lt;/a&gt;&lt;/code&gt;ファミリと&lt;code&gt;&lt;a href=&#34;../../reference/memory/allocator.html&#34;&gt;std::allocator&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&#34;../../reference/memory/allocator_traits.html&#34;&gt;std::alocator_traits&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/construct_at.html&#34;&gt;std::construct_at&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_functional&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::invoke&lt;/code&gt;、&lt;code&gt;std::reference_wrapper&lt;/code&gt;、&lt;code&gt;std::not_fn&lt;/code&gt;、&lt;code&gt;std::bind_front&lt;/code&gt;、&lt;code&gt;std::bind&lt;/code&gt;、&lt;code&gt;std::mem_fn&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator/back_insert_iterator.html&#34;&gt;back_insert_iterator&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../../reference/iterator/front_insert_iterator.html&#34;&gt;front_insert_iterator&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../../reference/iterator/insert_iterator.html&#34;&gt;insert_iterator&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_memory&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/pointer_traits.html&#34;&gt;std::pointer_traits&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_numeric&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201911L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;の数値アルゴリズムの&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string/basic_string.html&#34;&gt;std::string&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_string_view&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view/basic_string_view/copy.html&#34;&gt;std::string_view::copy&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_tuple&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple/tuple.html&#34;&gt;std::tuple&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;追加対応（一部のコンストラクタと代入演算子）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple.html&#34;&gt;&amp;lt;tuple&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_utility&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility/pair.html&#34;&gt;std::pair&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;追加対応（一部のコンストラクタと代入演算子）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_vector&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/vector/vector.html&#34;&gt;std::vector&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/vector.html&#34;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_coroutine&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/coroutine.html&#34;&gt;&amp;lt;coroutine&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダの追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/coroutine.html&#34;&gt;&amp;lt;coroutine&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_destroying_delete&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/new/destroying_delete_t.html&#34;&gt;std::destroying_delete_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/new.html&#34;&gt;&amp;lt;new&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_endian&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit/endian.html&#34;&gt;std::endian&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_erase_if&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;各コンテナに対する&lt;code&gt;std::erase&lt;/code&gt;、&lt;code&gt;std::erase_if&lt;/code&gt;の特殊化&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/deque.html&#34;&gt;&amp;lt;deque&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/forward_list.html&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/list.html&#34;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/vector.html&#34;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/set.html&#34;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_set.html&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_execution&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/execution/execution/execution_policy.html&#34;&gt;std::execution::unsequenced_policy&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/execution.html&#34;&gt;&amp;lt;execution&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_format&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;202106L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;202110L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt;ヘッダ&lt;br /&gt;コンパイル時フォーマット文字列検査/&lt;code&gt;&lt;a href=&#34;../../reference/format/vformat.html&#34;&gt;std::vformat&lt;/a&gt;&lt;/code&gt;のコードサイズ削減&lt;br /&gt;&lt;code&gt;std::chrono&lt;/code&gt;のフォーマットにおけるロケール指定の修正/&lt;code&gt;const&lt;/code&gt;だとフォーマットできない型に対する対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/format.html&#34;&gt;&amp;lt;format&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_generic_unordered_lookup&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非順序連想コンテナの&lt;code&gt;find(), count(), contains(), equal_range()&lt;/code&gt;に対するHeterogeneous Overload追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_set.html&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_int_pow2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;bit&amp;gt;&lt;/code&gt;の2の冪乗に関する操作を行う関数の名前変更&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_integer_comparison_functions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility/cmp_equal.html&#34;&gt;std::cmp_equal()&lt;/a&gt;&lt;/code&gt;等の整数比較関数と&lt;code&gt;&lt;a href=&#34;../../reference/utility/in_range.html&#34;&gt;std::in_range()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_interpolate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cmath/lerp.html&#34;&gt;std::lerp()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/numeric/midpoint.html&#34;&gt;std::midpoint()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_constant_evaluated&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_constant_evaluated.html&#34;&gt;std::is_constant_evaluated()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_layout_compatible&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_layout_compatible.html&#34;&gt;std::is_layout_compatible&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_corresponding_member.html&#34;&gt;is_corresponding_member&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_nothrow_convertible&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_nothrow_convertible.html&#34;&gt;std::is_nothrow_convertible&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_pointer_interconvertible&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_corresponding_member.html&#34;&gt;std::is_corresponding_member&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_pointer_interconvertible_base_of.html&#34;&gt;std::is_pointer_interconvertible_base_of&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_jthread&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201911L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/thread/jthread.html&#34;&gt;std::jthread&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;stop_token&lt;/code&gt;による協調的キャンセル機構&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/stop_token.html&#34;&gt;&amp;lt;stop_token&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/thread.html&#34;&gt;&amp;lt;thread&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_latch&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/latch/latch.html&#34;&gt;std::latch&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/latch.html&#34;&gt;&amp;lt;latch&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_list_remove_return_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::list&lt;/code&gt;と&lt;code&gt;std::forward_list&lt;/code&gt;の&lt;code&gt;remove(), remove_if(), unique()&lt;/code&gt;の戻り値型変更&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/forward_list.html&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/list.html&#34;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_math_constants&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数学定数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numbers.html&#34;&gt;&amp;lt;numbers&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_polymorphic_allocator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory_resource/polymorphic_allocator.html&#34;&gt;std::pmr::polymorphic_allocator&lt;/a&gt;&lt;/code&gt;の改修&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201911L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;202106L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;202110L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;RangeライブラリとRangeアルゴリズム&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/view.html&#34;&gt;view&lt;/a&gt;&lt;/code&gt;コンセプトのデフォルト構築要求を削除&lt;br /&gt;所有権を持つ&lt;code&gt;view&lt;/code&gt;の許可と&lt;code&gt;&lt;a href=&#34;../../reference/ranges/owning_view.html&#34;&gt;owning_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_remove_cvref&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/remove_cvref.html&#34;&gt;std::remove_cvref&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_semaphore&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/semaphore/counting_semaphore.html&#34;&gt;std::counting_semaphore&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;std::binary_semaphore&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/semaphore.html&#34;&gt;&amp;lt;semaphore&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shared_ptr_arrays&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201707L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/make_shared.html&#34;&gt;std::make_shared&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/memory/allocate_shared.html&#34;&gt;std::allocate_shared&lt;/a&gt;&lt;/code&gt;の配列対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shift&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/shift_left.html&#34;&gt;std::shift_left&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/shift_right.html&#34;&gt;std::shift_right&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_smart_ptr_for_overwrite&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/make_shared_for_overwrite.html&#34;&gt;std::make_shared_for_overwrite()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/memory/allocate_shared_for_overwrite.html&#34;&gt;std::allocate_shared_for_overwrite()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_source_location&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/source_location/source_location.html&#34;&gt;std::source_location&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/source_location.html&#34;&gt;&amp;lt;source_location&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_span&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/span/span.html&#34;&gt;std::span&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/span.html&#34;&gt;&amp;lt;span&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ssize&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator/ssize.html&#34;&gt;std::ssize()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;std::span&lt;/code&gt;で使用する整数型の符号なし（&lt;code&gt;size_t&lt;/code&gt;）への変更&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_starts_ends_with&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::string&lt;/code&gt;と&lt;code&gt;std::string_view&lt;/code&gt;の&lt;code&gt;starts_with()&lt;/code&gt;と&lt;code&gt;ends_with()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_string_view&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201803L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::string&lt;/code&gt;と&lt;code&gt;std::string_view&lt;/code&gt;のイテレータの&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_syncbuf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201803L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同期化出力ストリーム（&lt;code&gt;std::osyncstream&lt;/code&gt;）とバッファ（&lt;code&gt;std::syncbuf&lt;/code&gt;）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/syncstream.html&#34;&gt;&amp;lt;syncstream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_three_way_comparison&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;標準ライブラリの三方比較演算子対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_to_address&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/to_address.html&#34;&gt;std::to_address()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_to_array&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/array/to_array.html&#34;&gt;std::to_array()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/array.html&#34;&gt;&amp;lt;array&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_type_identity&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/type_identity.html&#34;&gt;std::type_identity&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_unwrap_ref&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/unwrap_reference.html&#34;&gt;std::unwrap_reference&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/unwrap_ref_decay.html&#34;&gt;std::unwrap_ref_decay&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations&#34; target=&#34;_blank&#34;&gt;SD-FeatureTest: Feature-Test Macros and Policies - isocpp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>const修飾されたメンバポインタの制限を修正 [P0704R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/fixing_const_qualified_pointers_to_members.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/fixing_const_qualified_pointers_to_members.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/fixing_const_qualified_pointers_to_members.md b/lang/cpp20/fixing_const_qualified_pointers_to_members.md
index cd37f4917..b5fb53549 100644
--- a/lang/cpp20/fixing_const_qualified_pointers_to_members.md
+++ b/lang/cpp20/fixing_const_qualified_pointers_to_members.md
@@ -1,13 +1,13 @@
 # const修飾されたメンバポインタの制限を修正 [P0704R1]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++11で[メンバ関数を左辺値／右辺値修飾](/lang/cpp11/ref_qualifier_for_this.md)する機能が導入された。その際、以下の例において、同じ関数を呼び出す場合でも、メンバ関数ポインタを介した方だけが不適格となっていた：
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>autoパラメータによる関数テンプレートの簡易定義 -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/function_templates_with_auto_parameters.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/function_templates_with_auto_parameters.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/function_templates_with_auto_parameters.md b/lang/cpp20/function_templates_with_auto_parameters.md
index dfb0844cd..445873b43 100644
--- a/lang/cpp20/function_templates_with_auto_parameters.md
+++ b/lang/cpp20/function_templates_with_auto_parameters.md
@@ -1,13 +1,13 @@
 # autoパラメータによる関数テンプレートの簡易定義
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++14で導入された[ジェネリックラムダ](/lang/cpp14/generic_lambdas.md)と同様に、通常の関数もパラメータ型を`auto`にすることで、簡易的に関数テンプレートを定義できるようにする。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>即時関数 [P1073R3] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/immediate_functions.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/immediate_functions.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/immediate_functions.md b/lang/cpp20/immediate_functions.md
index 3aab076fe..4bcdff0d8 100644
--- a/lang/cpp20/immediate_functions.md
+++ b/lang/cpp20/immediate_functions.md
@@ -2,13 +2,13 @@
 
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>未初期化領域への暗黙的なオブジェクト構築 -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md b/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
index 1abdbef19..632a6de5e 100644
--- a/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
+++ b/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
@@ -1,13 +1,13 @@
 # 未初期化領域への暗黙的なオブジェクト構築
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>空オブジェクトに対する最適化を支援する属性[[no_unique_address]] [P0840R2] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/language_support_for_empty_objects.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/language_support_for_empty_objects.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/language_support_for_empty_objects.md b/lang/cpp20/language_support_for_empty_objects.md
index e44221ece..f1b35705e 100644
--- a/lang/cpp20/language_support_for_empty_objects.md
+++ b/lang/cpp20/language_support_for_empty_objects.md
@@ -2,13 +2,13 @@
 
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>評価されない文脈での定数式評価によって特殊メンバ関数がインスタンス化されることを規定 [P0859R0] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/less_eager_instantiation_of_constexpr_functions.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/less_eager_instantiation_of_constexpr_functions.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/less_eager_instantiation_of_constexpr_functions.md b/lang/cpp20/less_eager_instantiation_of_constexpr_functions.md
index 0620316fb..3628038c7 100644
--- a/lang/cpp20/less_eager_instantiation_of_constexpr_functions.md
+++ b/lang/cpp20/less_eager_instantiation_of_constexpr_functions.md
@@ -1,13 +1,13 @@
 # 評価されない文脈での定数式評価によって特殊メンバ関数がインスタンス化されることを規定 [P0859R0]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 以前まで、デフォルトコンストラクタやムーブコンストラクタといった特殊メンバ関数は、odr-usedになった段階で定義される規定になっていた。しかし、`sizeof`や`decltype`のオペランドのような評価されない文脈においてはodr-usedにならないため、そのような文脈では特殊メンバ関数が使用できなかった。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>確率が高い分岐と低い分岐を伝える属性 [[likely]], [[unlikely]] [P0479R5] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/likely_and_unlikely_attributes.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/likely_and_unlikely_attributes.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/likely_and_unlikely_attributes.md b/lang/cpp20/likely_and_unlikely_attributes.md
index 134f04393..f368c8873 100644
--- a/lang/cpp20/likely_and_unlikely_attributes.md
+++ b/lang/cpp20/likely_and_unlikely_attributes.md
@@ -1,13 +1,13 @@
 # 確率が高い分岐と低い分岐を伝える属性 [[likely]], [[unlikely]] [P0479R5]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 if文やswitch文といった分岐制御構文において、条件分岐先のうちどれが実行される可能性が高いかという情報を、C++コンパイラへ最適化ヒントとして与える属性である。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>char16_tとchar32_tの文字・文字列リテラルを、文字コードUTF-16/32に規定 [P1041R4] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/make_char16t_char32t_string_literals_be_utf16_32.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/make_char16t_char32t_string_literals_be_utf16_32.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;char16_tとchar32_tの文字・文字列リテラルを、文字コードUTF-16/32に規定 [P1041R4]&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative_page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++11で追加された文字型&lt;a href=&#34;../cpp11/char16_32.html&#34;&gt;&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;&lt;/a&gt;の文字・文字列リテラルの文字コード、C++20からはUTF-16とUTF-32であることが規定される。&lt;/p&gt;
&lt;p&gt;これまでは、以下のような仕様であった：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;uchar&amp;gt;&lt;/code&gt;ヘッダでマクロ&lt;code&gt;__STDC_UTF_16__&lt;/code&gt;が定義される場合、&lt;code&gt;char16_t&lt;/code&gt;型の値はUTF-16の妥当なコードポイントを持つ。そうでない場合、&lt;code&gt;char16_t&lt;/code&gt;型の値は実装定義の文字コードとなる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;uchar&amp;gt;&lt;/code&gt;ヘッダでマクロ&lt;code&gt;__STDC_UTF_32__&lt;/code&gt;が定義される場合、&lt;code&gt;char32_t&lt;/code&gt;型の値はUTF-32の妥当なコードポイントを持つ。そうでない場合、&lt;code&gt;char32_t&lt;/code&gt;型の値は実装定義の文字コードとなる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++20では、無条件にUTF-16とUTF-32であることが規定される。&lt;/p&gt;
&lt;p&gt;なお、&lt;code&gt;u8&lt;/code&gt;プレフィックスをつけた文字・文字列リテラルは、UTF-8であることがこれまでに規定されていた。&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;これまで、&lt;code&gt;&amp;lt;uchar&amp;gt;&lt;/code&gt;ヘッダのマクロ&lt;code&gt;__STDC_UTF_16__&lt;/code&gt;と&lt;code&gt;__STDC_UTF_32__&lt;/code&gt;が定義されている場合にのみ、&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;はUTF-16/UTF-32エンコーディングであると規定されていた。&lt;/p&gt;
&lt;p&gt;しかし、これらが定義されなかった場合にコンパイラがほかのエンコーディングを選択することが疑わしかった。また、&lt;code&gt;char16_t&lt;/code&gt;の仕様として「サロゲートペア」が含まれているが、その概念をもつ他のよく知られた文字コードはない。単一の文字を32ビットで表現する他のよく知られた文字コードもない。&lt;/p&gt;
&lt;p&gt;実際にはすべての実装でこれらの文字・文字列リテラルはUTF-16とUTF-32にエンコーディングされるため、要件を示すだけではなく、より明確にするために、&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;の文字・文字列リテラルがUTF-16とUTF-32文字コードであることを規定する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../cpp11/char16_32.html&#34;&gt;C++11 &lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../cpp11/utf8_string_literals.html&#34;&gt;C++11 UTF-8文字列リテラル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../cpp17/utf8_character_literals.html&#34;&gt;C++17 UTF-8文字リテラル&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1041r4.html&#34; target=&#34;_blank&#34;&gt;P1041R4 Make &lt;code&gt;char16_t&lt;/code&gt;/&lt;code&gt;char32_t&lt;/code&gt; string literals be UTF-16/32&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>モジュール [P1103R3] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/modules.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/modules.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/modules.md b/lang/cpp20/modules.md
index b266f80a7..08c718408 100644
--- a/lang/cpp20/modules.md
+++ b/lang/cpp20/modules.md
@@ -1,13 +1,13 @@
 # モジュール [P1103R3]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++20では、ヘッダーファイル・ソースファイルに代わる新たなファイル分割の仕組みとしてモジュールが導入された。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変サイズをもつコンテナのconstexpr化 [P0784R7] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/more_constexpr_containers.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/more_constexpr_containers.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/more_constexpr_containers.md b/lang/cpp20/more_constexpr_containers.md
index 1f0d0d409..b8d3fafa9 100644
--- a/lang/cpp20/more_constexpr_containers.md
+++ b/lang/cpp20/more_constexpr_containers.md
@@ -1,13 +1,13 @@
 # 可変サイズをもつコンテナのconstexpr化 [P0784R7]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>入れ子名前空間定義でのインライン名前空間 [P1094R2] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/nested_inline_mamespaces.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/nested_inline_mamespaces.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/nested_inline_mamespaces.md b/lang/cpp20/nested_inline_mamespaces.md
index 3a18da472..a7afbfdcf 100644
--- a/lang/cpp20/nested_inline_mamespaces.md
+++ b/lang/cpp20/nested_inline_mamespaces.md
@@ -1,13 +1,13 @@
 # 入れ子名前空間定義でのインライン名前空間 [P1094R2]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++17で、入れ子の名前空間を`namespace ns1::ns2::ns3 {}`のように簡易的に定義できるようになったが、インライン名前空間の指定はできなかった。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[nodiscard]]をコンストラクタのオーバーロードごとに付加できるようにする -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/nodiscard_for_constructors.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/nodiscard_for_constructors.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/nodiscard_for_constructors.md b/lang/cpp20/nodiscard_for_constructors.md
index 7cf4e088f..85ba40bd0 100644
--- a/lang/cpp20/nodiscard_for_constructors.md
+++ b/lang/cpp20/nodiscard_for_constructors.md
@@ -1,13 +1,13 @@
 # [[nodiscard]]をコンストラクタのオーバーロードごとに付加できるようにする
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 戻り値が使用されない場合に警告を出力させる[`[[nodiscard]]`属性](/lang/cpp17/nodiscard.md)を、コンストラクタのオーバーロードに付加できるようにする。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[nodiscard]]属性に理由となる文字列を付加できるようにする [P1301R4] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/nodiscard_should_have_a_reason.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/nodiscard_should_have_a_reason.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/nodiscard_should_have_a_reason.md b/lang/cpp20/nodiscard_should_have_a_reason.md
index 9d061c9fb..e9d845f47 100644
--- a/lang/cpp20/nodiscard_should_have_a_reason.md
+++ b/lang/cpp20/nodiscard_should_have_a_reason.md
@@ -1,13 +1,13 @@
 # [[nodiscard]]属性に理由となる文字列を付加できるようにする [P1301R4]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 戻り値が使用されない場合に警告を出力させる[`[[nodiscard]]`属性](/lang/cpp17/nodiscard.md)に、戻り値を無視してはならない理由を文字列リテラルとして指定できるようにする。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>要素数不明の配列への変換を許可 [P0388R4] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md b/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md
index 5954a8f86..1bdd5244e 100644
--- a/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md
+++ b/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md
@@ -2,13 +2,13 @@
 
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数内でのトリビアルなデフォルト初期化を許可 [P1331R2] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md b/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md
index bdf68c483..d3567af8a 100644
--- a/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md
+++ b/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md
@@ -1,13 +1,13 @@
 # constexpr関数内でのトリビアルなデフォルト初期化を許可 [P1331R2]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>更新された定義済みマクロ -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/predefined_macros.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/predefined_macros.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;更新された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cplusplus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++のバージョン値を表す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/n4859.html&#34; target=&#34;_blank&#34;&gt;N4859 Editors&#39; Report -- Programming Languages -- C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ユーザー宣言したコンストラクタを持つクラスの集成体初期化を禁止 [P1008R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/prohibit_aggregates_with_user-declared_constructors.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/prohibit_aggregates_with_user-declared_constructors.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/prohibit_aggregates_with_user-declared_constructors.md b/lang/cpp20/prohibit_aggregates_with_user-declared_constructors.md
index 0b8756e49..dad12cf5d 100644
--- a/lang/cpp20/prohibit_aggregates_with_user-declared_constructors.md
+++ b/lang/cpp20/prohibit_aggregates_with_user-declared_constructors.md
@@ -1,13 +1,13 @@
 # ユーザー宣言したコンストラクタを持つクラスの集成体初期化を禁止 [P1008R1]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 ユーザー宣言されたコンストラクタをもつクラスを、集成体初期化によってコンストラクタを回避してオブジェクト構築できてしまっていた技法を禁止する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>初期化式をともなう範囲for文 [P0614R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/range-based_for_statements_with_initializer.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/range-based_for_statements_with_initializer.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/range-based_for_statements_with_initializer.md b/lang/cpp20/range-based_for_statements_with_initializer.md
index 826576870..a71755910 100644
--- a/lang/cpp20/range-based_for_statements_with_initializer.md
+++ b/lang/cpp20/range-based_for_statements_with_initializer.md
@@ -1,13 +1,13 @@
 # 初期化式をともなう範囲for文 [P0614R1]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 if文、switch文、for文と同様に、範囲for文でもそのスコープで使用する変数の初期化ができるよう構文を追加する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>構造化束縛した変数の参照キャプチャを許可 [P1381R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/reference_capture_of_structured_bindings.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/reference_capture_of_structured_bindings.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/reference_capture_of_structured_bindings.md b/lang/cpp20/reference_capture_of_structured_bindings.md
index 58673dec1..060659721 100644
--- a/lang/cpp20/reference_capture_of_structured_bindings.md
+++ b/lang/cpp20/reference_capture_of_structured_bindings.md
@@ -1,13 +1,13 @@
 # 構造化束縛した変数の参照キャプチャを許可 [P1381R1]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 構造化束縛した変数はラムダ式で参照キャプチャできない規定となっていたが、これを許可する。ただし、ビットフィールドを構造化束縛した変数は参照キャプチャできない。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>範囲for文がカスタマイゼーションポイントを見つけるルールを緩和 [P0962R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md b/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md
index a9b5ceb34..f7af4f4bc 100644
--- a/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md
+++ b/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md
@@ -1,13 +1,13 @@
 # 範囲for文がカスタマイゼーションポイントを見つけるルールを緩和 [P0962R1]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++17までは、範囲for文に指定するシーケンスの型が`begin`/`end`メンバのどちらかでも持っていれば`begin()`/`end()`メンバ関数を使用し、どちらも持っていなければADLで非メンバ関数の`begin()`/`end()`を探索する仕様となっていた。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>構造化束縛がカスタマイゼーションポイントを見つけるルールを緩和 [P0961R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.md b/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.md
index 3420cd9ca..62c18ce2a 100644
--- a/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.md
+++ b/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.md
@@ -1,13 +1,13 @@
 # 構造化束縛がカスタマイゼーションポイントを見つけるルールを緩和 [P0961R1]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++17までは、構造化束縛する対象の型が`get()`メンバ関数を持っていればその関数でメンバ変数を抽出し、持っていなければ非メンバ関数の`get()`関数で抽出する仕様となっていた。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>throw()による例外送出しない指定を削除 -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/remove_deprecated_nothrow_exception_specification.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/remove_deprecated_nothrow_exception_specification.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/remove_deprecated_nothrow_exception_specification.md b/lang/cpp20/remove_deprecated_nothrow_exception_specification.md
index 58fb85bbc..bab8f2cf8 100644
--- a/lang/cpp20/remove_deprecated_nothrow_exception_specification.md
+++ b/lang/cpp20/remove_deprecated_nothrow_exception_specification.md
@@ -1,13 +1,13 @@
 # throw()による例外送出しない指定を削除
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++11で例外送出しないことを指定する[`noexcept`](/lang/cpp11/noexcept.md)が追加されたことによって古い例外仕様は非推奨化の後に削除されたが、なにも例外送出しないことを表す`throw()`指定は`noexcept`と同じ意味になるよう仕様が変更されて非推奨機能として維持されていた。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>属性の名前空間を予約 -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/reserving_attribute_namespaces_for_future_use.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/reserving_attribute_namespaces_for_future_use.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;属性の名前空間を予約&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative_page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;将来的に標準で定義する属性のために、以下の名前空間の属性を予約する：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名前空間に属さない属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std&lt;/code&gt;および&lt;code&gt;std&lt;/code&gt; + 数字の名前空間の属性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../cpp11/attributes.html&#34;&gt;C++11 属性構文&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1908r1.pdf&#34; target=&#34;_blank&#34;&gt;P1908R1 Reserving Attribute Namespaces for Future Use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デフォルトのコピーコンストラクタと非constなコンストラクタが衝突する問題を修正 [P0641R2] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.md b/lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.md
index b2becb2f5..558609396 100644
--- a/lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.md
+++ b/lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.md
@@ -1,13 +1,13 @@
 # デフォルトのコピーコンストラクタと非constなコンストラクタが衝突する問題を修正 [P0641R2]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++17までは以下のように、自身の型の非`const`なオブジェクトをとるコンストラクタをもつクラスを定義し、
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>符号付き整数型が2の補数表現であることを規定 [P1236R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/signed_integers_are_twos_complement.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/signed_integers_are_twos_complement.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/signed_integers_are_twos_complement.md b/lang/cpp20/signed_integers_are_twos_complement.md
index cd9a35a4c..b8f277cf6 100644
--- a/lang/cpp20/signed_integers_are_twos_complement.md
+++ b/lang/cpp20/signed_integers_are_twos_complement.md
@@ -1,13 +1,13 @@
 # 符号付き整数型が2の補数表現であることを規定 [P1236R1]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++20では、符号付き整数型のビット表現を「2の補数 (Two&amp;#39;s Complement)」に規定する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>暗黙のラムダキャプチャを簡略化 [P0588R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/simplifying_implicit_lambda_capture.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/simplifying_implicit_lambda_capture.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/simplifying_implicit_lambda_capture.md b/lang/cpp20/simplifying_implicit_lambda_capture.md
index 7e7359643..2adf847c8 100644
--- a/lang/cpp20/simplifying_implicit_lambda_capture.md
+++ b/lang/cpp20/simplifying_implicit_lambda_capture.md
@@ -1,13 +1,13 @@
 # 暗黙のラムダキャプチャを簡略化 [P0588R1]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 ここでは、ラムダ式での暗黙のキャプチャについて、以下の問題を解決する：
@@ -37,4 +37,4 @@ void f() {
 - [C++20 構造化束縛を拡張して通常の変数宣言のように使用できるようにする](extending_structured_bindings_to_be_more_like_variable_declarations.md)
 
 ## 参照
-- [P0588R1 Simplifying implicit lambda capture](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0588r1.html)
+- [P0588R1 Simplifying implicit lambda capture](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0588r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数内でのtry-catchブロックを許可 [P1002R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/try-catch_blocks_in_constexpr_functions.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/try-catch_blocks_in_constexpr_functions.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/try-catch_blocks_in_constexpr_functions.md b/lang/cpp20/try-catch_blocks_in_constexpr_functions.md
index 5c99de598..390f029ff 100644
--- a/lang/cpp20/try-catch_blocks_in_constexpr_functions.md
+++ b/lang/cpp20/try-catch_blocks_in_constexpr_functions.md
@@ -1,13 +1,13 @@
 # constexpr関数内でのtry-catchブロックを許可 [P1002R1]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++20では、`constexpr`関数内でのtry-catchブロックの使用を許可する。ただし、`throw`式は従来通り許可せず、コンパイルエラーとなる (`throw`式は`constexpr`関数におけるアサーションのような役割)。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Unicode標準への参照を更新 -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/update_the_reference_to_the_unicode_standard.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/update_the_reference_to_the_unicode_standard.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Unicode標準への参照を更新&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;Unicode標準 (ISO/IEC 10646) としてこれまで、「ISO/IEC 10646-1:1993, Information technology — Universal Multiple-Octet Coded Character Set (UCS) — Part 1: Architecture and Basic Multilingual Plane」が参照されていた。&lt;/p&gt;
&lt;p&gt;従来の古い仕様への参照は、非推奨化された古い機能のものであるとして残し、Unicode標準の最新仕様「ISO/IEC 10646, Information technology — Universal Coded Character Set (UCS)」を参照するよう追加する。&lt;/p&gt;
&lt;p&gt;Unicode標準で非推奨化された用語UCS2とUCS4の扱いは、以下のようになる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UTC-32はUCS4と見なせるため、文字エンコーディングの説明ではUCS4の代わりにUTF-32を使用する&lt;/li&gt;
&lt;li&gt;ただしUTF-16はUCS2と見なすことができないため、古い機能のために古い仕様を参照するとして一部そのまま残す&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実装が常に最新のUnicode標準を参照していることから、この変更によるユーザーへの直接的な影響はない。&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;C++規格上ではISO/IEC 10646-1:1993を参照していても、実装は最新仕様に更新し続けていた。たとえば1996の仕様ではハングル文字のセットが削除されて別な位置に追加され、チベット文字が再追加された。実装はそれに対応している。&lt;/p&gt;
&lt;p&gt;また、C++標準が参照しているECMAScript標準でUnicode標準の参照が競合してしまう。&lt;/p&gt;
&lt;p&gt;Unicode標準での用語定義が変更されたことにも影響がある。UCS2とUCS4という用語が非推奨化されたために、その用語をC++標準が使用し続けることは望ましくない。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1025r1.html&#34; target=&#34;_blank&#34;&gt;P1025R1 Update The Reference To The Unicode Standard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スコープ付き列挙型のusing宣言 [P1099R5] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/using_enum.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/using_enum.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/using_enum.md b/lang/cpp20/using_enum.md
index 50f661ffd..f484e57a1 100644
--- a/lang/cpp20/using_enum.md
+++ b/lang/cpp20/using_enum.md
@@ -2,13 +2,13 @@
 
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変引数が空でない場合のトークン置換 [P0306R4] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/va_opt.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/va_opt.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/va_opt.md b/lang/cpp20/va_opt.md
index 1382eff72..5b2367020 100644
--- a/lang/cpp20/va_opt.md
+++ b/lang/cpp20/va_opt.md
@@ -1,13 +1,13 @@
 # 可変引数が空でない場合のトークン置換 [P0306R4]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 新たなプリプロセスマクロ`__VA_OPT__`を追加する。このマクロは、マクロのパラメータとして受け取った可変引数が空でない場合に置換するトークンを指定する機能を持つ。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>評価されない文脈でのラムダ式 [P0315R4] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md b/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md
index b630e29c5..73d50d05e 100644
--- a/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md
+++ b/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md
@@ -1,13 +1,13 @@
 # 評価されない文脈でのラムダ式 [P0315R4]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>elif/elifdef/elifndefのサポートを追加 [P2334R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md b/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md
index 531f80b99..b08bfdd8d 100644
--- a/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md
+++ b/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md
@@ -1,13 +1,13 @@
 # elif/elifdef/elifndefのサポートを追加 [P2334R1]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++23では、以下のプリプロセス時条件式が追加される：
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式に対する属性 [P2173R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/attributes_on_lambda_expressions.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/attributes_on_lambda_expressions.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/attributes_on_lambda_expressions.md b/lang/cpp23/attributes_on_lambda_expressions.md
index 7bb70ec96..2f6f162d7 100644
--- a/lang/cpp23/attributes_on_lambda_expressions.md
+++ b/lang/cpp23/attributes_on_lambda_expressions.md
@@ -1,13 +1,13 @@
 # ラムダ式に対する属性 [P2173R1]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++23では、ラムダ式のいくつかの箇所に属性を指定できる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>静的な診断メッセージの文字エンコーディング [P2246R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/character_encoding_of_diagnostic_text.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/character_encoding_of_diagnostic_text.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;静的な診断メッセージの文字エンコーディング [P2246R1]&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++23では、コンパイル時に診断メッセージを出力させる以下の機能について、ソースコードのエンコーディングが実行環境のエンコーディングで表現できない場合にどうするかの規定を見直す：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;static_assert&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[[deprecated]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#error&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++20までは、「基本ソース文字集合に含まれない文字は出力する必要はない」という規定になっていたが、基本ソース文字集合と実行環境のエンコーディングは関係ないものであるため、この規定を削除することとした。&lt;/p&gt;
&lt;p&gt;この規定はC20でも導入され、C++もそれに追従することとした。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2246r1.pdf&#34; target=&#34;_blank&#34;&gt;P2246R1 Character encoding of diagnostic text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg14/www/docs/n2563.pdf&#34; target=&#34;_blank&#34;&gt;WG14 N2563 Character encoding of diagnostic text&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>継承コンストラクタからのクラステンプレート引数の推論 [P2582R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/class_template_argument_deduction_from_inherited.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/class_template_argument_deduction_from_inherited.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/class_template_argument_deduction_from_inherited.md b/lang/cpp23/class_template_argument_deduction_from_inherited.md
index 89d13fb60..b6f22acbe 100644
--- a/lang/cpp23/class_template_argument_deduction_from_inherited.md
+++ b/lang/cpp23/class_template_argument_deduction_from_inherited.md
@@ -1,13 +1,13 @@
 # 継承コンストラクタからのクラステンプレート引数の推論 [P2582R1]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++23では、派生クラスで定義した継承コンストラクタからでも、クラステンプレート引数を推論できるようになる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>文字リテラルエンコーディングを一貫させる [P2316R2] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/consistent_character_literal_encoding.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/consistent_character_literal_encoding.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/consistent_character_literal_encoding.md b/lang/cpp23/consistent_character_literal_encoding.md
index 34537e3bd..716d42ac2 100644
--- a/lang/cpp23/consistent_character_literal_encoding.md
+++ b/lang/cpp23/consistent_character_literal_encoding.md
@@ -1,13 +1,13 @@
 # 文字リテラルエンコーディングを一貫させる [P2316R2]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++20までは、以下のような、プリプロセッサ上での文字リテラルの比較と、if文での文字リテラルの比較が同じであるという保証がなかった。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数内でconsteval関数を呼び出せない問題を軽減 [P2564R3] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/consteval_needs_to_propagate_up.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/consteval_needs_to_propagate_up.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/consteval_needs_to_propagate_up.md b/lang/cpp23/consteval_needs_to_propagate_up.md
index a0ba126e3..135fdb037 100644
--- a/lang/cpp23/consteval_needs_to_propagate_up.md
+++ b/lang/cpp23/consteval_needs_to_propagate_up.md
@@ -1,13 +1,13 @@
 # constexpr関数内でconsteval関数を呼び出せない問題を軽減 [P2564R3]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++23では、`consteval`呼び出しを含む`constexpr`関数を、条件付きで`consteval`関数と見なすようになる。そうすることで、定数式の文脈での`consteval`関数の使用がよりかんたんになる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>エスケープシーケンスの区切り [P2290R3] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/delimited_escape_sequences.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/delimited_escape_sequences.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/delimited_escape_sequences.md b/lang/cpp23/delimited_escape_sequences.md
index ca351ab41..667cb89c4 100644
--- a/lang/cpp23/delimited_escape_sequences.md
+++ b/lang/cpp23/delimited_escape_sequences.md
@@ -1,13 +1,13 @@
 # エスケープシーケンスの区切り [P2290R3]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++23では、文字列リテラル中に記述するエスケープシーケンスとユニバーサルキャラクタ名の範囲を明確にするための波カッコ (`{}`) で囲む構文が追加される。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式で()を省略できる条件を緩和 [P1102R2] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/down_with_lambda_parens.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/down_with_lambda_parens.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/down_with_lambda_parens.md b/lang/cpp23/down_with_lambda_parens.md
index 557c4a58c..d34ff34e3 100644
--- a/lang/cpp23/down_with_lambda_parens.md
+++ b/lang/cpp23/down_with_lambda_parens.md
@@ -1,13 +1,13 @@
 # ラムダ式で()を省略できる条件を緩和 [P1102R2]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++23では、ラムダ式のパラメータリストが空であれば、以下の要素を含む場合であってもパラメータリストの `()` を省略できる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>初期化文での型の別名宣言を許可 [P2360R0] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/extend_init_statement_to_allow_alias_declaration.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/extend_init_statement_to_allow_alias_declaration.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md b/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md
index 6fe9cd4b7..524a3aef6 100644
--- a/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md
+++ b/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md
@@ -1,13 +1,13 @@
 # 初期化文での型の別名宣言を許可 [P2360R0]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `if`文、`switch`文、範囲`for`文で初期化文を指定できるが、C++20までその初期化文では`typedef`による型の別名定義はできたが、`using`による型の別名定義はできなかった。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>機能テストマクロ -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/feature_test_macros.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/feature_test_macros.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;機能テストマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;h3&gt;言語機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ライブラリ&lt;/h3&gt;
&lt;p&gt;ライブラリの機能テストマクロは全て&lt;code&gt;&lt;a href=&#34;../../reference/version.html&#34;&gt;&amp;lt;version&amp;gt;&lt;/a&gt;&lt;/code&gt;でも提供される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_as_const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ranges::cbegin&lt;/code&gt;が常に定数イテレータを返すようにする&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_fold&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;fold&lt;/code&gt;アルゴリズム&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations&#34; target=&#34;_blank&#34;&gt;SD-FeatureTest: Feature-Test Macros and Policies - isocpp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>変数テンプレートの部分特殊化を許可 [P2096R2] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/generalized_wording_for_partial_specializations.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/generalized_wording_for_partial_specializations.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/generalized_wording_for_partial_specializations.md b/lang/cpp23/generalized_wording_for_partial_specializations.md
index 7feeb55a3..2c0a54ae7 100644
--- a/lang/cpp23/generalized_wording_for_partial_specializations.md
+++ b/lang/cpp23/generalized_wording_for_partial_specializations.md
@@ -1,13 +1,13 @@
 # 変数テンプレートの部分特殊化を許可 [P2096R2]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 変数テンプレートの仕様として、部分特殊化の許可を意図したような仕様はあったが、部分特殊化の多くの仕様はクラステンプレートのみを対象にしていた。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>if consteval [P1938R3] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/if_consteval.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/if_consteval.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/if_consteval.md b/lang/cpp23/if_consteval.md
index 15b1d65a8..2a4dde12c 100644
--- a/lang/cpp23/if_consteval.md
+++ b/lang/cpp23/if_consteval.md
@@ -1,13 +1,13 @@
 # if consteval [P1938R3]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++23では、`constexpr`関数がコンパイル時に呼ばれたかを判定するための構文として、`if consteval`を導入する。これは「consteval if文」と呼ばれる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>複合文の末尾へのラベルを許可 [P2324R2] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/labels_at_the_end_of_compound_statements.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/labels_at_the_end_of_compound_statements.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/labels_at_the_end_of_compound_statements.md b/lang/cpp23/labels_at_the_end_of_compound_statements.md
index 88ddf35bc..fcad6a6af 100644
--- a/lang/cpp23/labels_at_the_end_of_compound_statements.md
+++ b/lang/cpp23/labels_at_the_end_of_compound_statements.md
@@ -1,13 +1,13 @@
 # 複合文の末尾へのラベルを許可 [P2324R2]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C言語 (C23) との互換性のため、C言語で新しく許可された複合文の末尾 (関数末尾など`{}`ブロックの末尾) へのgotoラベルを許可する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>範囲for文が範囲初期化子内で生じた一時オブジェクトを延命することを規定 [P2718R0] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/lifetime_extension_in_range_based_for_loop.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/lifetime_extension_in_range_based_for_loop.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/lifetime_extension_in_range_based_for_loop.md b/lang/cpp23/lifetime_extension_in_range_based_for_loop.md
index c72b35aaf..e3ec77688 100644
--- a/lang/cpp23/lifetime_extension_in_range_based_for_loop.md
+++ b/lang/cpp23/lifetime_extension_in_range_based_for_loop.md
@@ -2,13 +2,13 @@
 
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 仕様
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>(符号付き)size_tリテラルのためのサフィックス [P0330R8] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/literal_suffix_for_signed_size_t.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/literal_suffix_for_signed_size_t.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/literal_suffix_for_signed_size_t.md b/lang/cpp23/literal_suffix_for_signed_size_t.md
index 0c9212fd2..e61c98564 100644
--- a/lang/cpp23/literal_suffix_for_signed_size_t.md
+++ b/lang/cpp23/literal_suffix_for_signed_size_t.md
@@ -1,13 +1,13 @@
 # (符号付き)size_tリテラルのためのサフィックス [P0330R8]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++23では、符号なし整数型[`size_t`](/reference/cstddef/size_t.md)に対応する符号付き整数型を表すリテラルの`z`および`Z`サフィックスを追加する。符号なしを表す`u`および`U`サフィックスをともに使用することで[`size_t`](/reference/cstddef/size_t.md)型のリテラルを記述できる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>アクセス制御の異なるメンバ変数のレイアウトを宣言順に規定 [P1847R4] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/make_declaration_order_layout_mandated.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/make_declaration_order_layout_mandated.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/make_declaration_order_layout_mandated.md b/lang/cpp23/make_declaration_order_layout_mandated.md
index 553fbfc23..22d80f260 100644
--- a/lang/cpp23/make_declaration_order_layout_mandated.md
+++ b/lang/cpp23/make_declaration_order_layout_mandated.md
@@ -1,13 +1,13 @@
 # アクセス制御の異なるメンバ変数のレイアウトを宣言順に規定 [P1847R4]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 以下のようなアクセス制御の異なるメンバ変数のメモリレイアウトは、実装に対して自由に並び替えてよい、という規定になっていたが、これを宣言順に規定する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>無意味なexport宣言を禁止する [P2615R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/meaningful_exports.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/meaningful_exports.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/meaningful_exports.md b/lang/cpp23/meaningful_exports.md
index e31e14bf8..3313123f3 100644
--- a/lang/cpp23/meaningful_exports.md
+++ b/lang/cpp23/meaningful_exports.md
@@ -1,13 +1,13 @@
 # 無意味なexport宣言を禁止する [P2615R1]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++20時点でのモジュール定義では、いくつかの不必要なexport宣言ができてしまっていた。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>異なる文字エンコーディングをもつ文字列リテラルの連結を不適格とする [P2201R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/mixed_string_literal_concatenation.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/mixed_string_literal_concatenation.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/mixed_string_literal_concatenation.md b/lang/cpp23/mixed_string_literal_concatenation.md
index ce4b343c4..b647b464c 100644
--- a/lang/cpp23/mixed_string_literal_concatenation.md
+++ b/lang/cpp23/mixed_string_literal_concatenation.md
@@ -1,13 +1,13 @@
 # 異なる文字エンコーディングをもつ文字列リテラルの連結を不適格とする [P2201R1]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++20までは、実装定義の動作として`L&amp;#34;&amp;#34;`、`u8&amp;#34;&amp;#34;`、`u&amp;#34;&amp;#34;`、`U&amp;#34;&amp;#34;`のようなエンコーディングが混在する文字列リテラルの連結を条件付きで許可していたが、これを禁止とする。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>添字演算子の多次元サポート [P2128R6] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/multidimensional_subscript_operator.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/multidimensional_subscript_operator.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/multidimensional_subscript_operator.md b/lang/cpp23/multidimensional_subscript_operator.md
index ddecaa776..ff6bf8e98 100644
--- a/lang/cpp23/multidimensional_subscript_operator.md
+++ b/lang/cpp23/multidimensional_subscript_operator.md
@@ -1,13 +1,13 @@
 # 添字演算子の多次元サポート [P2128R6]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++23では、多次元配列クラスを定義するために必要となる、添字演算子のオーバーロードを定義する際の複数引数を許可する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>名前付きユニバーサルキャラクタ名 [P2071R2] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/named_universal_character_escapes.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/named_universal_character_escapes.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/named_universal_character_escapes.md b/lang/cpp23/named_universal_character_escapes.md
index facbcc229..0efb58be2 100644
--- a/lang/cpp23/named_universal_character_escapes.md
+++ b/lang/cpp23/named_universal_character_escapes.md
@@ -1,13 +1,13 @@
 # 名前付きユニバーサルキャラクタ名 [P2071R2]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 これまで、Unicodeのユニバーサルキャラクタ名を指定するためには、`u8&amp;#34;\u0100&amp;#34;`のように`\u`または`\U`に続いてコードポイントを記述していた。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>定数式の文脈でのboolへの縮小変換を許可 [P1401R5] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/narrowing_contextual_conversions_to_bool.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/narrowing_contextual_conversions_to_bool.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/narrowing_contextual_conversions_to_bool.md b/lang/cpp23/narrowing_contextual_conversions_to_bool.md
index 8d383a547..b3ce704c2 100644
--- a/lang/cpp23/narrowing_contextual_conversions_to_bool.md
+++ b/lang/cpp23/narrowing_contextual_conversions_to_bool.md
@@ -1,13 +1,13 @@
 # 定数式の文脈でのboolへの縮小変換を許可 [P1401R5]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++23では、以下の定数式文脈での`bool`への縮小変換を許可する：
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>定数式内での非リテラル変数、静的変数・スレッドローカル変数およびgotoとラベルの存在を許可する [P2242R3] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/non_literal_variables_in_constexpr_functions.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/non_literal_variables_in_constexpr_functions.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;定数式内での非リテラル変数、静的変数・スレッドローカル変数およびgotoとラベルの存在を許可する [P2242R3]&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative_page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;constexpr&lt;/code&gt;関数が非リテラル変数、静的変数・スレッドローカル変数およびgoto文とラベルを含むことを許可する。&lt;/p&gt;
&lt;p&gt;ただし、これをコンパイル時に評価した場合、従来通りエラーとなる。
これらを含むコードパスは実行時にのみ通過するようにしなければならない。&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;これまでは、&lt;code&gt;constexpr&lt;/code&gt;関数内には非リテラル変数、静的変数・スレッドローカル変数およびgoto文とラベルが含まれてはならなかった。
これは、&lt;code&gt;constexpr&lt;/code&gt;関数が定数式実行できない要素を含んではならないという意味で、理にかなった制限であった。&lt;/p&gt;
&lt;p&gt;しかし、C++20で&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_constant_evaluated.html&#34;&gt;std::is_constant_evaluated&lt;/a&gt;&lt;/code&gt;によって定数式実行されるコードパスと実行時に通るコードパスを分けることが可能になり、状況が変化した。
定数式実行できないコードとはいえ、実行時にのみ通りコンパイル時には通らないコードパスに含まれていた場合にもプログラムが&lt;a class=&#34;cpprefjp-defined-word&#34;&gt;不適格&lt;/a&gt;となる、というのは直観に反する。&lt;/p&gt;
&lt;p&gt;よって、コンパイル時に評価されない限りにおいて、&lt;code&gt;constexpr&lt;/code&gt;関数内に非リテラル変数、静的変数・スレッドローカル変数およびgoto文とラベルを含むことが許可されることとなった。&lt;/p&gt;
&lt;p&gt;ただし、&lt;code&gt;constexpr&lt;/code&gt;内に存在することが許可されたものの定数式として評価できるわけではないので、これらの機能は依然としてコンパイル時に使用することはできない。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../cpp20/try-catch_blocks_in_constexpr_functions.html&#34;&gt;C++20 - constexpr関数内でのtry-catchブロックを許可&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.html&#34;&gt;C++20 - constexpr関数内で未評価のインラインアセンブリを許可することによる組み込み関数のconstexpr有効化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;permitting_static_constexpr_variables_in_constexpr_functions.html&#34;&gt;C++23 - &lt;code&gt;constexpr&lt;/code&gt;関数内での&lt;code&gt;static constexpr&lt;/code&gt;変数を許可&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2242r3.html&#34; target=&#34;_blank&#34;&gt;P2242R3 - Non-literal variables (and labels and gotos) in constexpr functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数内でのstatic constexpr変数を許可 [P2647R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.md b/lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.md
index 696f276a0..a1bacee1b 100644
--- a/lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.md
+++ b/lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.md
@@ -1,13 +1,13 @@
 # constexpr関数内でのstatic constexpr変数を許可 [P2647R1]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++23からは、`constexpr`関数内で定数を定義するために、`static constexpr`変数を使用できるようになる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コード内容の仮定をコンパイラに伝える`assume`属性 [P1774R8] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/portable_assumptions.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/portable_assumptions.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/portable_assumptions.md b/lang/cpp23/portable_assumptions.md
index 32316f200..5e011eec5 100644
--- a/lang/cpp23/portable_assumptions.md
+++ b/lang/cpp23/portable_assumptions.md
@@ -1,13 +1,13 @@
 # コード内容の仮定をコンパイラに伝える`assume`属性 [P1774R8]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 あるコード地点において実行時に満たすべき仮定(assumption)を、C++コンパイラへ最適化ヒントとして与える属性である。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>更新された定義済みマクロ -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/predefined_macros.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/predefined_macros.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;更新された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cplusplus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202302L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++のバージョン値を表す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/n4951.html&#34; target=&#34;_blank&#34;&gt;N4951 Editors’ Report: Programming Languages — C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数が定数実行できない場合でも適格とする [P2448R2] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/relaxing_some_constexpr_restrictions.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/relaxing_some_constexpr_restrictions.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/relaxing_some_constexpr_restrictions.md b/lang/cpp23/relaxing_some_constexpr_restrictions.md
index c473f793c..28be60df0 100644
--- a/lang/cpp23/relaxing_some_constexpr_restrictions.md
+++ b/lang/cpp23/relaxing_some_constexpr_restrictions.md
@@ -1,13 +1,13 @@
 # constexpr関数が定数実行できない場合でも適格とする [P2448R2]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>1ワイド文字に収まらないワイド文字リテラルを禁止する [P2362R3] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md b/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md
index 50fcf7747..bd9660542 100644
--- a/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md
+++ b/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md
@@ -1,13 +1,13 @@
 # 1ワイド文字に収まらないワイド文字リテラルを禁止する [P2362R3]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++23では、ワイド文字リテラルとして、以下を禁止する：
@@ -31,4 +31,4 @@ wchar_t c = &amp;#39;é́&amp;#39;;  // C++20:OK, C++23:NG \u0065\u0301
 
 
 ## 参照
-- [P2362R3 Remove non-encodable wide character literals and multicharacter wide character literals](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2362r3.pdf)
+- [P2362R3 Remove non-encodable wide character literals and multicharacter wide character literals](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2362r3.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>暗黙的なムーブを簡略化 [P2266R3] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/simpler_implicit_move.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/simpler_implicit_move.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/simpler_implicit_move.md b/lang/cpp23/simpler_implicit_move.md
index 2d8fa5284..b1359bab9 100644
--- a/lang/cpp23/simpler_implicit_move.md
+++ b/lang/cpp23/simpler_implicit_move.md
@@ -1,13 +1,13 @@
 # 暗黙的なムーブを簡略化 [P2266R3]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>thisポインタをもつ必要のない演算子をstaticとして宣言できるようにする [P1169R4] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/static_operator.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/static_operator.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/static_operator.md b/lang/cpp23/static_operator.md
index eb8a2b816..90d62ff87 100644
--- a/lang/cpp23/static_operator.md
+++ b/lang/cpp23/static_operator.md
@@ -1,13 +1,13 @@
 # thisポインタをもつ必要のない演算子をstaticとして宣言できるようにする [P1169R4]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 以下の演算子が`this`ポインタを必要としない (状態をもたない) 場合、演算子オーバーロードを`static`として定義できる：
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>汎用的なソースコードのエンコーディングとしてUTF-8をサポート [P2295R6] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/support_for_utf8_as_a_portable_source_file_encoding.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/support_for_utf8_as_a_portable_source_file_encoding.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;汎用的なソースコードのエンコーディングとしてUTF-8をサポート [P2295R6]&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++20まで、ソースコードの文字集合は実装定義だったが、その仕様では移植性に問題があった。C++23からは、すべてのコンパイラはUTF-8文字コードのソースコードをサポートしなければならないことが規定される。&lt;/p&gt;
&lt;p&gt;コンパイラは、ほかの文字コードと区別するため、入力ファイルがUTF-8であることを決定する実装定義の手段をもたなければならない。つまり、BOM (バイトオーダーマーク) を認識するだけでは十分ではない。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2295r6.pdf&#34; target=&#34;_blank&#34;&gt;P2295R6 Support for UTF-8 as a portable source file encoding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>行末スペースを無視するよう規定 [P2223R2] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/trimming_whitespaces_before_line_splicing.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/trimming_whitespaces_before_line_splicing.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/trimming_whitespaces_before_line_splicing.md b/lang/cpp23/trimming_whitespaces_before_line_splicing.md
index 690e28500..1901ad5e6 100644
--- a/lang/cpp23/trimming_whitespaces_before_line_splicing.md
+++ b/lang/cpp23/trimming_whitespaces_before_line_splicing.md
@@ -1,13 +1,13 @@
 # 行末スペースを無視するよう規定 [P2223R2]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `\` (バックスラッシュ) 後の行末スペースを無視するよう規定する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>参照するPOSIX規格を更新 -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/update_normative_reference_to_posix.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/update_normative_reference_to_posix.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;参照するPOSIX規格を更新&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++20まではPOSIX規格としてISO/IEC 9945:2003 (別名POSIX.1-2001 aka The Single UNIX Specification, version 3) を参照していた。&lt;/p&gt;
&lt;p&gt;しかし、標準C++の一部の機能はより新しいPOSIX規格の機能を使用していたため、ISO/IEC 9945:2003への参照を削除した上で、以下の3つの規格を参照するよう変更する：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ISO/IEC/IEEE 9945:20032009, Information Technology — Portable Operating System Interface (POSIX)&lt;/li&gt;
&lt;li&gt;ISO/IEC/IEEE 9945:2009/Cor 1:2013, Information Technology — Portable Operating System Interface (POSIX), Technical Corrigendum 1&lt;/li&gt;
&lt;li&gt;ISO/IEC/IEEE 9945:2009/Cor 2:2017, Information Technology — Portable Operating System Interface (POSIX), Technical Corrigendum 2&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;posix&lt;/code&gt;名前空間の予約に関してのPOSIX規格の参照もまた、ISO/IEC 9945からISO/IEC/IEEE 9945に変更する。&lt;/p&gt;
&lt;p&gt;また、POSIXの一部環境で非推奨となっている機能である&lt;code&gt;readdir_r()&lt;/code&gt;を参照していたところを、&lt;code&gt;readdir()&lt;/code&gt;に置き換える。&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;ここでは、具体的に問題になった、標準C++が参照するPOSIXの機能を列挙する。&lt;/p&gt;
&lt;h3&gt;errno&lt;/h3&gt;
&lt;p&gt;C++03まで、&lt;code&gt;&lt;a href=&#34;../../reference/cerrno.html&#34;&gt;&amp;lt;cerrno&amp;gt;&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&amp;lt;errno.h&amp;gt;&lt;/code&gt;にはISO Cが要求する&lt;code&gt;EDOM&lt;/code&gt; (定義域エラー)、&lt;code&gt;ERANGE&lt;/code&gt; (値域エラー)、&lt;code&gt;errno&lt;/code&gt;といった必要最低限のマクロのみが含まれていた。&lt;/p&gt;
&lt;p&gt;C++11での&lt;code&gt;&lt;a href=&#34;../../reference/system_error.html&#34;&gt;&amp;lt;system_error&amp;gt;&lt;/a&gt;&lt;/code&gt;ライブラリの導入にともなって、「&lt;code&gt;&lt;a href=&#34;../../reference/cerrno.html&#34;&gt;&amp;lt;cerrno&amp;gt;&lt;/a&gt;&lt;/code&gt;で定義される内容は、&lt;code&gt;errno&lt;/code&gt;がマクロ定義されることを除いてPOSIXの&lt;code&gt;&amp;lt;errno.h&amp;gt;&lt;/code&gt;ヘッダと同じである」という規定となった。この規定のあとにマクロのリストが定義されるが、&lt;code&gt;ENOTRECOVERABLE&lt;/code&gt;と&lt;code&gt;EOWNERDEAD&lt;/code&gt;はPOSIXの2006規格、&lt;code&gt;ENOTSUP&lt;/code&gt;と&lt;code&gt;EOPNOTSUPP&lt;/code&gt;は2008規格で追加されたものだった。&lt;/p&gt;
&lt;p&gt;POSIXの2008年では標準C++で定義されるマクロのほかに&lt;code&gt;EDQUOT&lt;/code&gt;、&lt;code&gt;EMULTIHOP&lt;/code&gt;、&lt;code&gt;ENOLINK&lt;/code&gt;といった具体的な意味をもたない「予約済み」というだけのマクロももっている。すでに定義されている&lt;code&gt;ESTALE&lt;/code&gt;のようにそれらを標準C++に追加することは今後検討する必要はあるが、ここでは提案しない。&lt;/p&gt;
&lt;h3&gt;ファイルシステム&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&#34;../../reference/filesystem/path.html&#34;&gt;path&lt;/a&gt;&lt;/code&gt;クラスについて、POSIX.1-2008の4.12 Pathname ResolutionとPOSIX.1-2017の4.13 Pathname Resolutionを追加で参照する必要がある。&lt;/p&gt;
&lt;p&gt;ここで参照するほとんどの機能はPOSIX.1-2001に存在するが、ファイルの最終更新日時の&lt;code&gt;futimens()&lt;/code&gt;関数、ファイル権限の&lt;code&gt;fchmodat()&lt;/code&gt;関数は存在していない。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;truncate()&lt;/code&gt;と&lt;code&gt;statvfs()&lt;/code&gt;の機能はオプションであり、POSIXに準拠する環境に存在する必要がない。POSIX.1-2008ではこれらの機能がオプションではなくなった。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stat()&lt;/code&gt;で使用される&lt;code&gt;S_ISVTX&lt;/code&gt;マクロはオプション機能であり、XSIの一部である。これはPOSIX.1-2008とPOSIX.1-2017でもオプションのままである。&lt;/p&gt;
&lt;p&gt;POSIX.1-2001のスレッドセーフ関数 (Thread-Safe Functions : TSF) オプションの一部である&lt;code&gt;readdir_r()&lt;/code&gt;を参照する注記もあるが、POSIX.1-2008ではBaseに移動されている。ただし、&lt;code&gt;readdir_r()&lt;/code&gt; APIの実装には欠陥があり、一部の実装では非推奨となっており、将来のバージョンから削除される可能性がある。ここでは&lt;code&gt;readdir_r()&lt;/code&gt;に固有のものに依存してはいないため、&lt;code&gt;readdir()&lt;/code&gt;を参照するよう変更する。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2227r0.html&#34; target=&#34;_blank&#34;&gt;P2227R0 Update normative reference to POSIX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>#warningのサポートを追加 [P2437R1] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/warning.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp23/warning.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/warning.md b/lang/cpp23/warning.md
index 4fd054a68..4575a076d 100644
--- a/lang/cpp23/warning.md
+++ b/lang/cpp23/warning.md
@@ -1,13 +1,13 @@
 # #warningのサポートを追加 [P2437R1]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++23では、プリプロセッサ命令として、特定のコードに到達した際に警告メッセージを出力する `#warning` をサポートする。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>static_assertの診断メッセージにユーザーが生成した文字列の指定を許可 [P2741R3] -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/lang/cpp26/user-generated_static_assert_messages.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:lang/cpp26/user-generated_static_assert_messages.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp26/user-generated_static_assert_messages.md b/lang/cpp26/user-generated_static_assert_messages.md
index 53a361bbf..76eb694c3 100644
--- a/lang/cpp26/user-generated_static_assert_messages.md
+++ b/lang/cpp26/user-generated_static_assert_messages.md
@@ -1,13 +1,13 @@
 # static_assertの診断メッセージにユーザーが生成した文字列の指定を許可 [P2741R3]
 * cpp26[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++26に採用される見込みの言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++26では、[`static_assert`](/lang/cpp11/static_assert.md)に指定する表明失敗時の診断メッセージとして、文字列リテラルだけでなくユーザー定義型の文字列オブジェクトも指定できるようになる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- Merge pull request #1293 from cpprefjp/fix_lang_caution_syntax</title>
      <link href="https://cpprefjp.github.io/start_editing/lang_template_page.html"/>
      <id>532bffb3fb9ed9c869b525c6e16f996050591f8e:start_editing/lang_template_page.md</id>
      <updated>2024-07-08T16:23:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/lang_template_page.md b/start_editing/lang_template_page.md
index 20e089f9f..0e8d24234 100644
--- a/start_editing/lang_template_page.md
+++ b/start_editing/lang_template_page.md
@@ -32,24 +32,24 @@
 
 (確定した言語バージョンに対する注意事項は以下)
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++XXに採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 
 (確定前の言語バージョンに対する注意事項は以下)
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++26に採用される見込みの言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 (ここには、言語機能の概要を記載します。)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>エイリアステンプレート [N2258] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/alias_templates.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/alias_templates.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/alias_templates.md b/lang/cpp11/alias_templates.md
index 93d3fecd2..2b3424901 100644
--- a/lang/cpp11/alias_templates.md
+++ b/lang/cpp11/alias_templates.md
@@ -1,13 +1,13 @@
 # エイリアステンプレート [N2258]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 「エイリアステンプレート (alias templates)」は、テンプレートによって型の別名を定義する機能である。これによって、パラメータ化した型の別名付けができる。
@@ -107,4 +107,4 @@ typedef void_alloc::rebind&amp;lt;int&amp;gt;::other int_alloc;
 - [N1451 A Case for Template Aliasing](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1451.html)
 - [N1489 Templates aliases for C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1489.pdf)
 - [N2112 Templates Aliases](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2112.pdf)
-- [N2258 Templates Aliases](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2258.pdf)
+- [N2258 Templates Aliases](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2258.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>alignas [N2341] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/alignas.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/alignas.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/alignas.md b/lang/cpp11/alignas.md
index 44ee2cd7a..4786b90c9 100644
--- a/lang/cpp11/alignas.md
+++ b/lang/cpp11/alignas.md
@@ -1,13 +1,13 @@
 # alignas [N2341]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `alignas()`は、コンパイラに対し変数をメモリ上の特定の位置に配置（アライメント）するように要求するキーワードである。「アライン アズ (align as)」と読む。
@@ -115,4 +115,4 @@ N2341 からはわからない、恐らくないと思われる。
 
 
 ## 参照
-- [N2341 Adding Alignment Support to the C++ Programming Language / Wording](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2341.pdf)
+- [N2341 Adding Alignment Support to the C++ Programming Language / Wording](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2341.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>alignof [N2341] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/alignof.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/alignof.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/alignof.md b/lang/cpp11/alignof.md
index 533b4fd42..35472e462 100644
--- a/lang/cpp11/alignof.md
+++ b/lang/cpp11/alignof.md
@@ -1,13 +1,13 @@
 # alignof [N2341]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `alignof()`は、指定した型がメモリ上のどの位置に配置されるか（アライメント）取得する演算子である。「アライン オブ (align of)」と読む。
@@ -85,4 +85,4 @@ N2341 からはわからない、恐らくないと思われる。
 
 
 ## 参照
-- [N2341 Adding Alignment Support to the C++ Programming Language / Wording](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2341.pdf)
+- [N2341 Adding Alignment Support to the C++ Programming Language / Wording](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2341.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>属性構文 [N2761] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/attributes.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/attributes.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/attributes.md b/lang/cpp11/attributes.md
index d2a512277..ef465af36 100644
--- a/lang/cpp11/attributes.md
+++ b/lang/cpp11/attributes.md
@@ -1,13 +1,13 @@
 # 属性構文 [N2761]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 属性(attributes)は、ソースコードに対して追加の情報をコンパイラに伝えるための構文である。
@@ -177,4 +177,4 @@ C++11で採用されたもの以外で検討された以下の機能は、属性
 - [N2418 Towards support for attributes in C++ (Revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2418.pdf)
 - [N2643 C++ Data-Dependency Ordering: Function Annotation](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2643.html)
 - [N2761 Towards support for attributes in C++ (Revision 6) ](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2761.pdf)
-- [（抄訳）N4215 `memory_order_consume`の利用と実装に向けて［§5-6のみ］](http://d.hatena.ne.jp/yohhoy/20141115/p1)
+- [（抄訳）N4215 `memory_order_consume`の利用と実装に向けて［§5-6のみ］](http://d.hatena.ne.jp/yohhoy/20141115/p1)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>auto [N1984] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/auto.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/auto.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/auto.md b/lang/cpp11/auto.md
index 714ed57df..23907ac33 100644
--- a/lang/cpp11/auto.md
+++ b/lang/cpp11/auto.md
@@ -1,13 +1,13 @@
 # auto [N1984]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++11 から、変数宣言時に具体的な型名のかわりに `auto` キーワードを指定する事によって、変数の型を初期化子から推論できるようになった。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C99互換で導入された定義済みマクロ -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/c99_predefined_macros.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/c99_predefined_macros.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C99互換で導入された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++11に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative_page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDC_HOSTED__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実装がホスト実装である場合は&lt;code&gt;1&lt;/code&gt;、そうでない場合（つまり、フリースタンディング実装である場合）は&lt;code&gt;0&lt;/code&gt;として定義される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDC_VERSION__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;標準Cのバージョンを表す値（C95 では &lt;code&gt;199409L&lt;/code&gt;、C99 では &lt;code&gt;199901L&lt;/code&gt;、C11 では &lt;code&gt;201112L&lt;/code&gt;、C90 では定義されていない）。&lt;br /&gt;このマクロが定義されているか否か、および、定義されている場合の値は実装依存である。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDC_ISO_10646__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;wchar_t&lt;/code&gt;の文字が、Unicodeの規格であるISO/IEC 10646の、yyyymm年の仕様を満たしている場合に定義される。&lt;br /&gt;このマクロの値は、&lt;code&gt;yyyymmL&lt;/code&gt;の形式の整数値として定義される。yは年、mは月を表す。yとmそれぞれの個数は、桁数を表す。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;predefined_macros.html&#34;&gt;C++11 更新された定義済みマクロ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1653.htm&#34; target=&#34;_blank&#34;&gt;N1653 Working draft changes for C99 preprocessor synchronization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#630&#34; target=&#34;_blank&#34;&gt;CWG Issue 630. Equality of narrow and wide character values in the basic character set&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>char16_tとchar32_t [N2249] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/char16_32.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/char16_32.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/char16_32.md b/lang/cpp11/char16_32.md
index 968c867cf..5e4af4f70 100644
--- a/lang/cpp11/char16_32.md
+++ b/lang/cpp11/char16_32.md
@@ -1,13 +1,13 @@
 # char16_tとchar32_t [N2249]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `char16_t`はUTF-16符号化形式の文字型、`char32_t`はUTF-32符号化形式の文字型である。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr [N2235] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/constexpr.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/constexpr.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/constexpr.md b/lang/cpp11/constexpr.md
index a4667ade4..b2c08fd27 100644
--- a/lang/cpp11/constexpr.md
+++ b/lang/cpp11/constexpr.md
@@ -1,13 +1,13 @@
 # constexpr [N2235]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `constexpr`は、汎用的に定数式を表現するための機能である。
@@ -226,4 +226,4 @@ GCC 5.2、Clang 3.7、Visual C++ 2015時点で、3つともデフォルトは512
 - [CWG Issue 644. Should a trivial class type be a literal type?](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#644)
     - リテラル型のメンバ変数のみを持つクラスは、`constexpr`コンストラクタを明示的に定義しなくても、リテラル型となる
 - [CWG Issue 699. Must constexpr member functions be defined in the class member-specification?](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#699)
-    - ゼロ割りの扱い、再帰回数の規定
+    - ゼロ割りの扱い、再帰回数の規定
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>decltype [N2343] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/decltype.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/decltype.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/decltype.md b/lang/cpp11/decltype.md
index 3262354b7..9eba0a241 100644
--- a/lang/cpp11/decltype.md
+++ b/lang/cpp11/decltype.md
@@ -1,13 +1,13 @@
 # decltype [N2343]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `decltype` は、オペランドで指定した式の型を取得する機能である。  
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>関数のdefault／delete宣言 [N2346] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/defaulted_and_deleted_functions.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/defaulted_and_deleted_functions.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/defaulted_and_deleted_functions.md b/lang/cpp11/defaulted_and_deleted_functions.md
index 1048d3e4d..737eded01 100644
--- a/lang/cpp11/defaulted_and_deleted_functions.md
+++ b/lang/cpp11/defaulted_and_deleted_functions.md
@@ -1,13 +1,13 @@
 # 関数のdefault／delete宣言 [N2346]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 クラスを定義した際、以下のメンバ関数が暗黙的に定義される：
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>委譲コンストラクタ [N1986] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/delegating_constructors.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/delegating_constructors.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/delegating_constructors.md b/lang/cpp11/delegating_constructors.md
index 8fda468b1..95712392b 100644
--- a/lang/cpp11/delegating_constructors.md
+++ b/lang/cpp11/delegating_constructors.md
@@ -1,13 +1,13 @@
 # 委譲コンストラクタ [N1986]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 「委譲コンストラクタ (delegating constructors)」は、コンストラクタから、同じクラスの他のコンストラクタに処理を委譲する機能である。
@@ -89,4 +89,4 @@ ECMA規格となっているC++/CLIには、この問題を解決するための
 - [N1581 Delegating Constructors](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1581.pdf)
 - [N1618 Delegating Constructors (revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1618.pdf)
 - [N1895 Delegating Constructors (revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1895.pdf)
-- [N1986 Delegating Constructors (revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1986.pdf)
+- [N1986 Delegating Constructors (revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1986.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>依存名に対するtypenameとtemplateの制限緩和 -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/dependent_name_specifier_outside_of_templates.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/dependent_name_specifier_outside_of_templates.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/dependent_name_specifier_outside_of_templates.md b/lang/cpp11/dependent_name_specifier_outside_of_templates.md
index 755ea6c63..adc15f438 100644
--- a/lang/cpp11/dependent_name_specifier_outside_of_templates.md
+++ b/lang/cpp11/dependent_name_specifier_outside_of_templates.md
@@ -1,13 +1,13 @@
 # 依存名に対するtypenameとtemplateの制限緩和
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 テンプレート内で、テンプレートパラメータに依存する名前を使用する場合には、`typename`キーワードを先頭に付ける必要がある。
@@ -45,4 +45,4 @@ int main()
 
 ## 参照
 - [CWG Issue 382. Allow `typename` outside of templates](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#382)
-- [CWG Issue 468. Allow `::template` outside of templates](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#468)
+- [CWG Issue 468. Allow `::template` outside of templates](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#468)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>registerキーワードを非推奨化 -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/deprecation_of_the_register_keyword.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/deprecation_of_the_register_keyword.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/deprecation_of_the_register_keyword.md b/lang/cpp11/deprecation_of_the_register_keyword.md
index b8d6077be..6853e47bf 100644
--- a/lang/cpp11/deprecation_of_the_register_keyword.md
+++ b/lang/cpp11/deprecation_of_the_register_keyword.md
@@ -1,13 +1,13 @@
 # registerキーワードを非推奨化
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `register`キーワードが非推奨化された。
@@ -31,4 +31,4 @@ register int v = 42;
 
 
 ## 参照
-- [CWG Issue 809. Deprecation of the `register` keyword](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#809)
+- [CWG Issue 809. Deprecation of the `register` keyword](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#809)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>宣言時に要素数を指定した配列オブジェクトの、定義時の要素数を規定 -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/earlier_declarated_array_bounds.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/earlier_declarated_array_bounds.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/earlier_declarated_array_bounds.md b/lang/cpp11/earlier_declarated_array_bounds.md
index e82c26251..94d746127 100644
--- a/lang/cpp11/earlier_declarated_array_bounds.md
+++ b/lang/cpp11/earlier_declarated_array_bounds.md
@@ -1,13 +1,13 @@
 # 宣言時に要素数を指定した配列オブジェクトの、定義時の要素数を規定
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `static`メンバや`extern`として宣言した配列を定義した際、宣言時に指定した要素数として定義されることが規定された。
@@ -26,4 +26,4 @@ int S::y[]; // 要素数は10
 
 
 ## 参照
-- [CWG Issue 619. Completeness of array types](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#619)
+- [CWG Issue 619. Completeness of array types](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#619)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>明示的な型変換演算子のオーバーロード [N2437] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/explicit_conversion_operator.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/explicit_conversion_operator.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/explicit_conversion_operator.md b/lang/cpp11/explicit_conversion_operator.md
index b61a80980..393523cdf 100644
--- a/lang/cpp11/explicit_conversion_operator.md
+++ b/lang/cpp11/explicit_conversion_operator.md
@@ -1,13 +1,13 @@
 # 明示的な型変換演算子のオーバーロード [N2437]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 型変換演算子のオーバーロードをする際、`operator`キーワードの前に`explicit`を付加することで、その型変換演算子は明示的な型変換が行われる文脈でのみ呼び出されるようになる：
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>friend宣言できる対象を拡張 [N1791] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/extend_friend_targets.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/extend_friend_targets.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/extend_friend_targets.md b/lang/cpp11/extend_friend_targets.md
index e2f9cfbb6..3452a098b 100644
--- a/lang/cpp11/extend_friend_targets.md
+++ b/lang/cpp11/extend_friend_targets.md
@@ -1,13 +1,13 @@
 # friend宣言できる対象を拡張 [N1791]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++03までの`friend`宣言は、直接のクラス型のみを指定できた。
@@ -60,4 +60,4 @@ int main()
 - [N1520 Extended friend Declarations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1520.pdf)
 - [N1616 Extended friend Declarations (Rev. 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1616.pdf)
 - [N1722 Extended friend Declarations (Rev. 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1722.pdf)
-- [N1791 Extended friend Declarations (Rev. 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1791.pdf)
+- [N1791 Extended friend Declarations (Rev. 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1791.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sizeof演算子にクラスの非静的メンバを、オブジェクトを作らずに指定できるようにする -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.md b/lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.md
index 8b7b3c6a9..1b8e16d85 100644
--- a/lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.md
+++ b/lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.md
@@ -1,13 +1,13 @@
 # sizeof演算子にクラスの非静的メンバを、オブジェクトを作らずに指定できるようにする
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 クラスの非静的メンバ変数のサイズを取得したい場合、そのクラスのオブジェクトを生成してから`sizeof`演算子にメンバを指定する必要があった。その制限が外され、クラスと非静的メンバ変数を、スコープ解決演算子 `::` 区切りで`sizeof`演算子に指定できるようになった：
@@ -33,4 +33,4 @@ int main()
 - [CWG Issue 198. Definition of &amp;#34;use&amp;#34; in local and nested classes](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#198)
 - [CWG Issue 613. Unevaluated uses of non-static class members](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#613)
 - [N2150 Extending sizeof to apply to non-static data members without an object](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2150.html)
-- [N2253 Extending sizeof to apply to non-static data members without an object (revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2253.html)
+- [N2253 Extending sizeof to apply to non-static data members without an object (revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2253.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>extern template [N1987] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/extern_template.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/extern_template.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/extern_template.md b/lang/cpp11/extern_template.md
index 615e25638..c32818e01 100644
--- a/lang/cpp11/extern_template.md
+++ b/lang/cpp11/extern_template.md
@@ -1,13 +1,13 @@
 # extern template [N1987]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `extern template`は、指定したテンプレートを、その翻訳単位でインスタンス化しないことを指示するための機能である。
@@ -63,4 +63,4 @@ void user2()
 
 ## 参照
 - [N1448 Controlling Implicit Template Instantiation](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1448.pdf)
-- [N1987 Adding &amp;#34;extern template&amp;#34; (version 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1987.htm)
+- [N1987 Adding &amp;#34;extern template&amp;#34; (version 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1987.htm)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>機能テストマクロ -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/feature_test_macros.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/feature_test_macros.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;機能テストマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++11に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;SD-6 は C++11 の機能について以下のテストマクロを定義することを推奨している：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_alias_templates&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200704&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;alias_templates.html&#34;&gt;エイリアステンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_attributes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200809&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;attributes.html&#34;&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200704&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;constexpr.html&#34;&gt;constexpr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_decltype&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200707&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;decltype.html&#34;&gt;decltype&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_delegating_constructors&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200604&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;delegating_constructors.html&#34;&gt;委譲コンストラクタ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_inheriting_constructors&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200802&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;inheriting_constructors.html&#34;&gt;継承コンストラクタ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_initializer_lists&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200806&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;initializer_lists.html&#34;&gt;初期化子リスト&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lambdas&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200907&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;lambda_expressions.html&#34;&gt;ラムダ式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_nsdmi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200809&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;non_static_data_member_initializers.html&#34;&gt;非静的メンバ変数初期化子&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_range_based_for&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200907&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;range_based_for.html&#34;&gt;範囲for文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_raw_strings&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200710&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;raw_string_literals.html&#34;&gt;生文字列リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_ref_qualifiers&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200710&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;ref_qualifier_for_this.html&#34;&gt;&lt;code&gt;*this&lt;/code&gt; のムーブセマンティクス&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_rvalue_references&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200610&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;rvalue_ref_and_move_semantics.html&#34;&gt;右辺値参照&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_static_assert&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200410&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;static_assert.html&#34;&gt;コンパイル時アサート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_unicode_characters&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200704&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;char16_32.html&#34;&gt;ユニコード文字&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_unicode_literals&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200710&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;char16_32.html&#34;&gt;ユニコードリテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_user_defined_literals&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200809&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;user_defined_literals.html&#34;&gt;ユーザー定義リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_variadic_templates&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200704&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;variadic_templates.html&#34;&gt;可変引数テンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(carries_dependency)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200809&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;attributes.html#carries_dependency&#34;&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(noreturn)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200809&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;attributes.html#noreturn&#34;&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations#recs.cpp11&#34; target=&#34;_blank&#34;&gt;SD-6: SG10 Feature Test Recommendations: Standard C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>事前定義識別子__func__ [N1653] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/func.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/func.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/func.md b/lang/cpp11/func.md
index db9fe7f72..403f0db99 100644
--- a/lang/cpp11/func.md
+++ b/lang/cpp11/func.md
@@ -1,13 +1,13 @@
 # 事前定義識別子\_\_func\_\_ [N1653]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C99互換として、事前定義識別子(predefined identifier)の`__func__`が導入された。
@@ -90,4 +90,4 @@ S::print() : print
 ## 参照
 - [N1534 Proposed addition of `__func__` predefined identifier from C99](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1534.txt)
 - [5.41 Function Names as Strings - GCC](https://gcc.gnu.org/onlinedocs/gcc-3.3.5/gcc/Function-Names.html)
-- [Predefined macros | Microsoft Docs](https://docs.microsoft.com/ja-JP/cpp/preprocessor/predefined-macros?view=vs-2019)
+- [Predefined macros | Microsoft Docs](https://docs.microsoft.com/ja-JP/cpp/preprocessor/predefined-macros?view=vs-2019)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>入れ子名の指定にグローバルスコープ :: を付加することを許可 -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/global_scope_syntax_in_nested_name_specifier.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/global_scope_syntax_in_nested_name_specifier.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/global_scope_syntax_in_nested_name_specifier.md b/lang/cpp11/global_scope_syntax_in_nested_name_specifier.md
index 1bce9882b..7eaa5fa38 100644
--- a/lang/cpp11/global_scope_syntax_in_nested_name_specifier.md
+++ b/lang/cpp11/global_scope_syntax_in_nested_name_specifier.md
@@ -1,13 +1,13 @@
 # 入れ子名の指定にグローバルスコープ :: を付加することを許可
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 入れ子名を指定する構文において、先頭にグローバルスコープの指定`::`を付加することが許可された。
@@ -44,4 +44,4 @@ nested-name-specifier:
 
 
 ## 参照
-- [CWG Issue 355. Global-scope `::` in nested-name-specifier](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#355)
+- [CWG Issue 355. Global-scope `::` in nested-name-specifier](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#355)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>継承コンストラクタ [N2540] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/inheriting_constructors.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/inheriting_constructors.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/inheriting_constructors.md b/lang/cpp11/inheriting_constructors.md
index df94c217d..e99d4013c 100644
--- a/lang/cpp11/inheriting_constructors.md
+++ b/lang/cpp11/inheriting_constructors.md
@@ -1,13 +1,13 @@
 # 継承コンストラクタ [N2540]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 「継承コンストラクタ (inheriting constructors)」は、基底クラスで定義したコンストラクタ群を、派生クラスでそのまま使用できるようにするための糖衣構文である。
@@ -102,4 +102,4 @@ struct Derived : Base {
 - [N2376 Inheriting Constructors (revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2376.html)
 - [N2438 Inheriting Constructors (revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2438.htm)
 - [N2512 Inheriting Constructors (revision 4)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2512.html)
-- [N2540 Inheriting Constructors (revision 5)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2540.htm)
+- [N2540 Inheriting Constructors (revision 5)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2540.htm)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>初期化子リスト [N2672] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/initializer_lists.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/initializer_lists.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/initializer_lists.md b/lang/cpp11/initializer_lists.md
index b3adc1a56..962448cb4 100644
--- a/lang/cpp11/initializer_lists.md
+++ b/lang/cpp11/initializer_lists.md
@@ -1,13 +1,13 @@
 # 初期化子リスト [N2672]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 「初期化子リスト (initializer lists)」は、ユーザー定義型のオブジェクトに対して、波カッコによるリスト初期化を使用できるようにするようオーバーロードする機能である。
@@ -357,4 +357,4 @@ std::vector&amp;lt;int&amp;gt; v(ar, ar + N);
 - [N2575 Initializer Lists - Alternative Mechanism and Rationale](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2575.pdf)
 - [N2640 Initializer Lists - Alternative Mechanism and Rationale (v. 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2640.pdf)
 - [N2672 Initializer List proposed wording](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2672.htm)
-- [CWG Issue 1030. Evaluation order in initializer-lists used in aggregate initialization](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1030)
+- [CWG Issue 1030. Evaluation order in initializer-lists used in aggregate initialization](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1030)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>インライン名前空間 [N2535] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/inline_namespaces.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/inline_namespaces.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/inline_namespaces.md b/lang/cpp11/inline_namespaces.md
index 4bc0ae4d1..a25299be5 100644
--- a/lang/cpp11/inline_namespaces.md
+++ b/lang/cpp11/inline_namespaces.md
@@ -1,13 +1,13 @@
 # インライン名前空間 [N2535]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 インライン名前空間 (inline namespace)は、名前空間内の機能に透過的にアクセスするための機能である。`inline namespace`によって定義した名前空間の機能には、その名前空間を指定しなくてもアクセスできる。
@@ -250,4 +250,4 @@ v2
 - [7.9 Namespace Association - Using the GNU Compiler Collection (GCC)](https://gcc.gnu.org/onlinedocs/gcc-4.9.4/gcc/Namespace-Association.html)
 - [CWG Issue 812. Duplicate names in inline namespaces](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#812)
 - [CWG Issue 861. Unintended ambiguity in inline namespace lookup](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#861)
-- [Inline namespaces and ambigous declarations - Stackoverflow](http://stackoverflow.com/questions/27252466/inline-namespaces-and-ambigous-declarations/)
+- [Inline namespaces and ambigous declarations - Stackoverflow](http://stackoverflow.com/questions/27252466/inline-namespaces-and-ambigous-declarations/)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式 [N2927] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/lambda_expressions.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/lambda_expressions.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/lambda_expressions.md b/lang/cpp11/lambda_expressions.md
index b5f93a62d..dd1bd263d 100644
--- a/lang/cpp11/lambda_expressions.md
+++ b/lang/cpp11/lambda_expressions.md
@@ -1,13 +1,13 @@
 # ラムダ式 [N2927]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 「ラムダ式(lambda expressions)」は、簡易的な関数オブジェクトをその場で定義するための機能である。
@@ -561,4 +561,4 @@ for_each(array, array + 4, &amp;lt;&amp;amp;&amp;gt;(double d) ( sum += factor ∗ d ));
 - [N2957 Reaching Scope of Lambda Expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2957.html)
 - [N3043 Converting Lambdas to Function Pointers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3043.html)
 - [N3052 Converting Lambdas to Function Pointers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3052.html)
-- [CWG Issue 975. Restrictions on return type deduction for lambdas](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#975)
+- [CWG Issue 975. Restrictions on return type deduction for lambdas](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#975)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ローカル型と無名型を、テンプレート引数として使用することを許可 [N2657] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/local_and_unnamed_type_as_template_arguments.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/local_and_unnamed_type_as_template_arguments.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/local_and_unnamed_type_as_template_arguments.md b/lang/cpp11/local_and_unnamed_type_as_template_arguments.md
index 3203e8bcc..8370caab9 100644
--- a/lang/cpp11/local_and_unnamed_type_as_template_arguments.md
+++ b/lang/cpp11/local_and_unnamed_type_as_template_arguments.md
@@ -1,13 +1,13 @@
 # ローカル型と無名型を、テンプレート引数として使用することを許可 [N2657]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 ローカルで定義した型と、名前のない型を、テンプレート引数として渡すことが許可された。
@@ -49,4 +49,4 @@ int main()
 - [N2187 Names, Linkage, and Templates (rev 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2187.pdf)
 - [N2402 Names, Linkage, and Templates (rev 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2402.pdf)
 - [N2635 Local and Unnamed Types as Template Arguments](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2635.html)
-- [N2657 Local and Unnamed Types as Template Arguments](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2657.htm)
+- [N2657 Local and Unnamed Types as Template Arguments](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2657.htm)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>long long型 [N1811] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/long_long_type.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/long_long_type.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/long_long_type.md b/lang/cpp11/long_long_type.md
index cf67cdb50..784b87306 100644
--- a/lang/cpp11/long_long_type.md
+++ b/lang/cpp11/long_long_type.md
@@ -1,13 +1,13 @@
 # long long型 [N1811]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C99互換として、`long long`整数型が追加された。
@@ -75,4 +75,4 @@ int main()
 - [N0715 Incorporate the `long long` integral data type in C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/1995/N0715.ps)
 - [N1565 Adding the `long long` type to C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1565.pdf)
 - [N1735 Adding the `long long` type to C++ (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1735.pdf)
-- [N1811 Adding the `long long` type to C++ (Revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1811.pdf)
+- [N1811 Adding the `long long` type to C++ (Revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1811.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>noexcept [N3050] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/noexcept.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/noexcept.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/noexcept.md b/lang/cpp11/noexcept.md
index c035ada19..3a4bfa56d 100644
--- a/lang/cpp11/noexcept.md
+++ b/lang/cpp11/noexcept.md
@@ -1,13 +1,13 @@
 # noexcept [N3050]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++11で導入された`noexcept`キーワードには、以下の2つの意味がある：
@@ -196,4 +196,4 @@ int main()
 - [N3204 Deducing &amp;#34;`noexcept`&amp;#34; for destructors](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3204.htm)
 - [N3205 Delete operators default to `noexcept`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3205.htm)
 - [N3103 Security impact of `noexcept`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3103.pdf)
-- [ムーブによるpop - Faith and Brave - C++で遊ぼう](http://faithandbrave.hateblo.jp/entry/20130604/1370327651)
+- [ムーブによるpop - Faith and Brave - C++で遊ぼう](http://faithandbrave.hateblo.jp/entry/20130604/1370327651)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非静的メンバ変数の初期化 [N2756] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/non_static_data_member_initializers.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/non_static_data_member_initializers.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/non_static_data_member_initializers.md b/lang/cpp11/non_static_data_member_initializers.md
index 8e4b8cef1..d2f6a64cb 100644
--- a/lang/cpp11/non_static_data_member_initializers.md
+++ b/lang/cpp11/non_static_data_member_initializers.md
@@ -1,13 +1,13 @@
 # 非静的メンバ変数の初期化 [N2756]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 非静的メンバ変数の定義時に、`=`演算子もしくは`{ }`波カッコ初期化子によるコンストラクタ構文で、初期化式を記述できる。
@@ -71,4 +71,4 @@ int main()
 - [N2354 Class member initializers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2354.htm)
 - [N2426 Class member initializers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2426.htm)
 - [N2628 Non-static data member initializers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2628.html)
-- [N2756 Non-static data member initializers](http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2008/n2756.htm)
+- [N2756 Non-static data member initializers](http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2008/n2756.htm)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>nullptr [N2431] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/nullptr.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/nullptr.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/nullptr.md b/lang/cpp11/nullptr.md
index 4ba227a6d..c36181e2f 100644
--- a/lang/cpp11/nullptr.md
+++ b/lang/cpp11/nullptr.md
@@ -1,13 +1,13 @@
 # nullptr [N2431]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `nullptr`は、ヌルポインタ値を表すキーワードである。
@@ -132,4 +132,4 @@ private:
 - [N1488 A name for the null pointer: `nullptr`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1488.pdf)
 - [N1601 A name for the null pointer: `nullptr` (revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1601.pdf)
 - [N2214 A name for the null pointer: `nullptr` (revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2214.pdf)
-- [N2431 A name for the null pointer: `nullptr` (revision 4)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2431.pdf)
+- [N2431 A name for the null pointer: `nullptr` (revision 4)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2431.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>overrideとfinal [N2928] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/override_final.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/override_final.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/override_final.md b/lang/cpp11/override_final.md
index 154be5582..06fa189b6 100644
--- a/lang/cpp11/override_final.md
+++ b/lang/cpp11/override_final.md
@@ -1,13 +1,13 @@
 # overrideとfinal [N2928]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `override`は仮想メンバ関数のオーバーライドを明示的に宣言するキーワードである。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Pragma演算子 [N1653] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/pragma_operator.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/pragma_operator.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/pragma_operator.md b/lang/cpp11/pragma_operator.md
index 841aaca8d..6e71a2faf 100644
--- a/lang/cpp11/pragma_operator.md
+++ b/lang/cpp11/pragma_operator.md
@@ -1,13 +1,13 @@
 # Pragma演算子 [N1653]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C99互換として、Pragma演算子が導入された。
@@ -73,4 +73,4 @@ int main()
 ```
 
 ## 参照
-- [N1653 Working draft changes for C99 preprocessor synchronization](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1653.htm)
+- [N1653 Working draft changes for C99 preprocessor synchronization](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1653.htm)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>更新された定義済みマクロ -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/predefined_macros.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/predefined_macros.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;更新された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++11に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative_page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cplusplus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201103L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++のバージョン値を表す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以下のマクロが新たに追加された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDCPP_STRICT_POINTER_SAFETY__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実装がポインタの厳密な安全性を持っている場合、整数値&lt;code&gt;1&lt;/code&gt;として定義される&lt;br /&gt;本マクロ定数はC++23で削除される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDCPP_THREADS__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが複数のスレッドを実行できる場合、整数値&lt;code&gt;1&lt;/code&gt;として定義される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDC_MB_MIGHT_NEQ_WC__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;このマクロが整数型の定数&lt;code&gt;1&lt;/code&gt;として定義されている場合、基本文字集合に含まれる文字のリテラルが、&lt;code&gt;char&lt;/code&gt;と&lt;code&gt;wchar_t&lt;/code&gt;で異なる値を持つ可能性がある。&lt;br /&gt;このマクロが定義されない場合には&lt;code&gt;&#39;x&#39; == L&#39;x&#39;&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;であることが保証され、そうでなければされない。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;c99_predefined_macros.html&#34;&gt;C++11 C99互換で導入された定義済みマクロ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2693.html&#34; target=&#34;_blank&#34;&gt;N2693 Requirements on programs and backwards compatibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1169&#34; target=&#34;_blank&#34;&gt;CWG Issue 1169. Missing feature macro for strict pointer safety&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2186r2.html&#34; target=&#34;_blank&#34;&gt;P2186R2 Removing Garbage Collection Support&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++23でのマクロ&lt;code&gt;__STDCPP_STRICT_POINTER_SAFETY__&lt;/code&gt;削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>範囲for文 [N2930] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/range_based_for.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/range_based_for.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/range_based_for.md b/lang/cpp11/range_based_for.md
index 2c8219c03..17ee409e7 100644
--- a/lang/cpp11/range_based_for.md
+++ b/lang/cpp11/range_based_for.md
@@ -1,13 +1,13 @@
 # 範囲for文 [N2930]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 範囲for文（The range-based for statement）は配列やコンテナを簡潔に扱うためのfor文の別表現である。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>生文字列リテラル [N2442] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/raw_string_literals.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/raw_string_literals.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/raw_string_literals.md b/lang/cpp11/raw_string_literals.md
index 6fc3b8bdf..98ef7b863 100644
--- a/lang/cpp11/raw_string_literals.md
+++ b/lang/cpp11/raw_string_literals.md
@@ -1,13 +1,13 @@
 # 生文字列リテラル [N2442]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `R`プレフィックスを付けた文字列リテラル内の丸カッコ`( )`で囲まれた部分は、エスケープシーケンスが無視される。この機能を「生文字列リテラル (Raw string literals)」という。
@@ -273,4 +273,4 @@ Perl、Python、Luaやその他の言語ではこの問題に対応するため
 - [N2295 Raw and Unicode String Literals; Unified Proposal](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2295.html)
 - [N2384 Raw and Unicode String Literals; Unified Proposal (Rev. 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2384.html)
 - [N2442 Raw and Unicode String Literals; Unified Proposal (Rev. 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2442.htm)
-- [N3077 Alternative approach to Raw String issues](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3077.html)
+- [N3077 Alternative approach to Raw String issues](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3077.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>テンプレート再帰回数の制限緩和 -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/recursive_template_limit.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/recursive_template_limit.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/recursive_template_limit.md b/lang/cpp11/recursive_template_limit.md
index 3834d8543..b0f6da923 100644
--- a/lang/cpp11/recursive_template_limit.md
+++ b/lang/cpp11/recursive_template_limit.md
@@ -1,13 +1,13 @@
 # テンプレート再帰回数の制限緩和
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++03まで、テンプレートの再帰回数は、「17回以上であることを実装に推奨する」というものであった。
@@ -67,4 +67,4 @@ int main()
 - [Variadic Templates for C++0x](https://web.archive.org/web/20230430062038/http://www.jot.fm/issues/issue_2008_02/article2/)
     - テンプレートの再帰によって、コンパイル時間がどれくらい延びるかのレポートがある記事
 - [C++ Language Features/Controlling implementation limits - Clang Compiler User’s Manual](http://clang.llvm.org/docs/UsersManual.html#cmdoption-ftemplate-depth)
-- [3.5 Options Controlling C++ Dialect - GCC Command Options](https://gcc.gnu.org/onlinedocs/gcc/gcc-command-options/options-controlling-c%2B%2B-dialect.html)
+- [3.5 Options Controlling C++ Dialect - GCC Command Options](https://gcc.gnu.org/onlinedocs/gcc/gcc-command-options/options-controlling-c%2B%2B-dialect.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>メンバ関数の左辺値／右辺値修飾 [N2439] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/ref_qualifier_for_this.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/ref_qualifier_for_this.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/ref_qualifier_for_this.md b/lang/cpp11/ref_qualifier_for_this.md
index 9a5ea2521..ef6c41baf 100644
--- a/lang/cpp11/ref_qualifier_for_this.md
+++ b/lang/cpp11/ref_qualifier_for_this.md
@@ -1,13 +1,13 @@
 # メンバ関数の左辺値／右辺値修飾 [N2439]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 メンバ関数の`CV`修飾は、`*this`が`const`／`volatile`である場合とそうでない場合でメンバ関数をオーバーロードできる。
@@ -119,4 +119,4 @@ int main()
 - [N1784 A proposal to add l-value member function qualifier](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1784.htm)
 - [N1821 Extending Move Semantics To `*this` (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1821.htm)
 - [N2377 Extending move semantics to `*this` (revised wording)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2377.htm)
-- [N2439 Extending move semantics to `*this` (revised wording)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2439.htm)
+- [N2439 Extending move semantics to `*this` (revised wording)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2439.htm)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>参照への参照を折りたたむ -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/reference_collapsing.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/reference_collapsing.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/reference_collapsing.md b/lang/cpp11/reference_collapsing.md
index 6fc14ffe8..2168a08d4 100644
--- a/lang/cpp11/reference_collapsing.md
+++ b/lang/cpp11/reference_collapsing.md
@@ -1,13 +1,13 @@
 # 参照への参照を折りたたむ
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++03までは、`T&amp;amp;`型に左辺値参照を足すと、「参照への参照 (reference to reference)」となってしまいコンパイルエラーとなっていた。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>テンプレートのエクスポート機能を削除 -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/remove_export_templates.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/remove_export_templates.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/remove_export_templates.md b/lang/cpp11/remove_export_templates.md
index 30b93e30c..1d7e79a08 100644
--- a/lang/cpp11/remove_export_templates.md
+++ b/lang/cpp11/remove_export_templates.md
@@ -1,13 +1,13 @@
 # テンプレートのエクスポート機能を削除
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++11では、テンプレート定義をエクスポートする機能を削除する。
@@ -40,4 +40,4 @@ EDGフロントエンドとそれを使用するコンパイラのComeauとICC
 - [N3065 Removing Export](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3065.html)
 - [CWG Issue 820. Deprecation of export](https://wg21.cmeerw.net/cwg/issue820)
 - [Using export keyword with templates - StackOverflow](http://stackoverflow.com/questions/5416872/using-export-keyword-with-templates)
-- [N1426 Why We Can&amp;#39;t Afford Export](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1426.pdf)
+- [N1426 Why We Can&amp;#39;t Afford Export](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1426.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>POSIX用の名前空間を予約 -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/reserved_namespaces_for_posix.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/reserved_namespaces_for_posix.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;POSIX用の名前空間を予約&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++11に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;将来の標準化のために、POSIX用の名前空間として&lt;code&gt;std::posix&lt;/code&gt;と&lt;code&gt;::posix&lt;/code&gt;を予約する。&lt;/p&gt;
&lt;p&gt;これらの名前空間に宣言や定義を追加した場合、そのプログラムの動作は未定義となる。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2542.htm&#34; target=&#34;_blank&#34;&gt;N2542 Reserved namespaces for POSIX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>整数に対する除算と剰余算の丸め結果を規定 -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/result_of_integer_division_and_modulo.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/result_of_integer_division_and_modulo.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/result_of_integer_division_and_modulo.md b/lang/cpp11/result_of_integer_division_and_modulo.md
index 82d8388aa..29d0d4505 100644
--- a/lang/cpp11/result_of_integer_division_and_modulo.md
+++ b/lang/cpp11/result_of_integer_division_and_modulo.md
@@ -1,13 +1,13 @@
 # 整数に対する除算と剰余算の丸め結果を規定
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 整数`a`, `b`に対する除算`a/b`の結果(商)と剰余算`a%b`の結果(余り)について`(a/b)*b + a%b = a`という等式が成り立つことが規定されているが、C++03まで、少なくとも一方が負の数である場合の余りの符号は実装定義だった。このため先述の等式により商も実装定義となっていた。C++11ではC99に合わせて「商の小数部がゼロ方向に切り捨てられた結果となること」が規定された。
@@ -47,4 +47,4 @@ int main()
 - [N2707 Expedited core issues handling](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2707.html)
 - [N2730 Expedited core issues handling (revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2730.html)
 - [N2757 Expedited core issues handling (revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2757.htm)
-- [C++ における整数型の怪と &amp;#34;移植性のある&amp;#34; オーバーフローチェッカー (第1回 : 整数型の怪と対策の不足)](http://qiita.com/a4lg/items/541c9d9dd5d874eeef2f)
+- [C++ における整数型の怪と &amp;#34;移植性のある&amp;#34; オーバーフローチェッカー (第1回 : 整数型の怪と対策の不足)](http://qiita.com/a4lg/items/541c9d9dd5d874eeef2f)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>テンプレートの右山カッコ [N1757] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/right_angle_brackets.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/right_angle_brackets.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/right_angle_brackets.md b/lang/cpp11/right_angle_brackets.md
index 3af3608e6..63abe5945 100644
--- a/lang/cpp11/right_angle_brackets.md
+++ b/lang/cpp11/right_angle_brackets.md
@@ -1,13 +1,13 @@
 # テンプレートの右山カッコ [N1757]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++03では、2つ以上連続する右山カッコが出現する場合には、間にスペースを入力する必要があった：
@@ -107,4 +107,4 @@ C++11で採択された方式は、テンプレートの型パラメータと非
 ## 参照
 - [N1649 Right Angle Brackets](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1649.html)
 - [N1699 Right Angle Brackets (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1699.html)
-- [N1757 Right Angle Brackets (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1757.html)
+- [N1757 Right Angle Brackets (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1757.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>右辺値参照・ムーブセマンティクス [N2118] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/rvalue_ref_and_move_semantics.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/rvalue_ref_and_move_semantics.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/rvalue_ref_and_move_semantics.md b/lang/cpp11/rvalue_ref_and_move_semantics.md
index cb2b68cab..07f6c01b4 100644
--- a/lang/cpp11/rvalue_ref_and_move_semantics.md
+++ b/lang/cpp11/rvalue_ref_and_move_semantics.md
@@ -1,13 +1,13 @@
 # 右辺値参照・ムーブセマンティクス [N2118]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 ムーブセマンティクスはコピーコストの削減を主な目的としており、また所有権の移動を実現する。  
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スコープを持つ列挙型 [N2347] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/scoped_enum.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/scoped_enum.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/scoped_enum.md b/lang/cpp11/scoped_enum.md
index bc506220e..28340f4d2 100644
--- a/lang/cpp11/scoped_enum.md
+++ b/lang/cpp11/scoped_enum.md
@@ -1,13 +1,13 @@
 # スコープを持つ列挙型 [N2347]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `enum class`で定義した列挙型は、従来の`enum`に加えて、「整数型への暗黙の型変換を行わない」「列挙型のスコープを持つ」という機能を持つ。
@@ -108,4 +108,4 @@ ECMA規格になっているC++/CLIが、現在のスコープを持つ列挙型
 - [N1579 Strongly Typed Enums (revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1719.pdf)
 - [N2213 Strongly Typed Enums (revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2213.pdf)
 - [N2347 Strongly Typed Enums (revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2347.pdf)
-- [N2499 Forward declaration of enumerations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2499.pdf)
+- [N2499 Forward declaration of enumerations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2499.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>任意の式によるSFINAE [N2634] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/sfinae_expressions.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/sfinae_expressions.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/sfinae_expressions.md b/lang/cpp11/sfinae_expressions.md
index e5aad73b1..dd5682c0a 100644
--- a/lang/cpp11/sfinae_expressions.md
+++ b/lang/cpp11/sfinae_expressions.md
@@ -1,13 +1,13 @@
 # 任意の式によるSFINAE [N2634]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 「SFINAE (Substitution Failure Is Not An Errorの略称、スフィネェと読む)」は、テンプレートの置き換えに失敗した際に、即時にコンパイルエラーとはせず、置き換えに失敗した関数をオーバーロード解決の候補から除外するという言語機能である。
@@ -284,4 +284,4 @@ int main()
 
 ## 参照
 - [CWG Issue 339. Overload resolution in operand of `sizeof` in constant expression](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#339)
-- [N2634 Solving the SFINAE problem for expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2634.html)
+- [N2634 Solving the SFINAE problem for expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2634.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンパイル時アサート [N1720] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/static_assert.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/static_assert.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/static_assert.md b/lang/cpp11/static_assert.md
index 3257a8f39..b11c71f39 100644
--- a/lang/cpp11/static_assert.md
+++ b/lang/cpp11/static_assert.md
@@ -1,13 +1,13 @@
 # コンパイル時アサート [N1720]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `static_assert`宣言は、指定した定数式が真であることを表明するための機能である。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ブロックスコープを持つstatic変数初期化のスレッドセーフ化 [N2660] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/static_initialization_thread_safely.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/static_initialization_thread_safely.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/static_initialization_thread_safely.md b/lang/cpp11/static_initialization_thread_safely.md
index c5c4af868..8f0c46ff8 100644
--- a/lang/cpp11/static_initialization_thread_safely.md
+++ b/lang/cpp11/static_initialization_thread_safely.md
@@ -1,13 +1,13 @@
 # ブロックスコープを持つstatic変数初期化のスレッドセーフ化 [N2660]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 ブロックスコープを持つ`static`変数の初期化は、スレッドセーフであることが規定された。
@@ -104,4 +104,4 @@ int main()
 - [N2444 Dynamic Initialization and Destruction with Concurrency](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2444.html)
 - [N2513 Dynamic Initialization and Destruction with Concurrency](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2513.html)
 - [N2660 Dynamic Initialization and Destruction with Concurrency](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2660.htm)
-- [C++0x時代の Double-Checked Locking - yamasaのネタ帳](http://yamasa.hatenablog.jp/entry/20100128/1264693781)
+- [C++0x時代の Double-Checked Locking - yamasaのネタ帳](http://yamasa.hatenablog.jp/entry/20100128/1264693781)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>文字列リテラルとワイド文字列リテラルの結合 -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/string_literal_concatenation.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/string_literal_concatenation.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/string_literal_concatenation.md b/lang/cpp11/string_literal_concatenation.md
index 3329ed51a..3c980eb43 100644
--- a/lang/cpp11/string_literal_concatenation.md
+++ b/lang/cpp11/string_literal_concatenation.md
@@ -1,13 +1,13 @@
 # 文字列リテラルとワイド文字列リテラルの結合
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C99互換として、文字列リテラルとワイド文字列リテラルが並んでいたとき、ワイド文字列リテラルとして結合することが規定された。
@@ -40,4 +40,4 @@ hello world
 
 ## 参照
 - [N1653 Working draft changes for C99 preprocessor synchronization](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1653.htm)
-- [WG14/N951 String literals and concatenation](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n951.htm)
+- [WG14/N951 String literals and concatenation](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n951.htm)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スレッドローカルストレージ [N2659] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/thread_local_storage.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/thread_local_storage.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/thread_local_storage.md b/lang/cpp11/thread_local_storage.md
index bfaa7f0db..52cc0a323 100644
--- a/lang/cpp11/thread_local_storage.md
+++ b/lang/cpp11/thread_local_storage.md
@@ -1,13 +1,13 @@
 # スレッドローカルストレージ [N2659]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 変数宣言の際に、記憶域として`thread_local`キーワードを指定することで、スレッドごとの静的記憶域に変数が保持される。
@@ -122,4 +122,4 @@ thread2 : 4
 - [N2545 Thread-Local Storage](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2545.html)
 - [N2659 Thread-Local Storage](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2659.htm)
 - [Why does Apple clang disallow C++11 `thread_local` when &amp;#39;official&amp;#39; clang supports it - Stack Overflow](http://stackoverflow.com/a/29929949/463412)
-    - Apple実装のClang（Xcode 7以下に付属のもの）が`thread_local`機能をサポートしない理由
+    - Apple実装のClang（Xcode 7以下に付属のもの）が`thread_local`機能をサポートしない理由
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>列挙子の末尾へのカンマ付加を許可 -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/trailing_comma_following_enumerator_list.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/trailing_comma_following_enumerator_list.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/trailing_comma_following_enumerator_list.md b/lang/cpp11/trailing_comma_following_enumerator_list.md
index 5e81e5ead..aa7bdd73a 100644
--- a/lang/cpp11/trailing_comma_following_enumerator_list.md
+++ b/lang/cpp11/trailing_comma_following_enumerator_list.md
@@ -1,13 +1,13 @@
 # 列挙子の末尾へのカンマ付加を許可
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C99互換として、末尾の列挙子の後ろにカンマを書くことが許可された。
@@ -48,4 +48,4 @@ int main() {}
 
 
 ## 参照
-- [CWG Issue 518. Trailing comma following enumerator-list](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#518)
+- [CWG Issue 518. Trailing comma following enumerator-list](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#518)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>戻り値の型を後置する関数宣言構文 [N2541] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/trailing_return_types.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/trailing_return_types.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/trailing_return_types.md b/lang/cpp11/trailing_return_types.md
index 15000efa5..b12bcd419 100644
--- a/lang/cpp11/trailing_return_types.md
+++ b/lang/cpp11/trailing_return_types.md
@@ -1,13 +1,13 @@
 # 戻り値の型を後置する関数宣言構文 [N2541]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 従来の関数宣言構文では、戻り値の型は先頭に記述していた。
@@ -120,4 +120,4 @@ auto f = [](int a, int b) -&amp;gt; int { return a + b; }
 - [N2927 New wording for C++0x Lambdas (rev. 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2927.pdf)
     - ラムダ式の仕様と合わせて「trailing-return-type」という言葉が使われるようになった
 - [N2931 Unified Function Syntax](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2931.html)
-- [N2954 Unified Function Syntax](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2954.html)
+- [N2954 Unified Function Syntax](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2954.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>一様初期化 [N2672] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/uniform_initialization.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/uniform_initialization.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/uniform_initialization.md b/lang/cpp11/uniform_initialization.md
index 71d8d3190..b9705fa30 100644
--- a/lang/cpp11/uniform_initialization.md
+++ b/lang/cpp11/uniform_initialization.md
@@ -1,13 +1,13 @@
 # 一様初期化 [N2672]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 「一様初期化 (uniform initialization)」は、コンストラクタの呼び出しを、リスト初期化と合わせて波カッコ `{ }`で記述する構文である。
@@ -207,4 +207,4 @@ int main()
 - [N2575 Initializer Lists - Alternative Mechanism and Rationale](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2575.pdf)
 - [N2640 Initializer Lists - Alternative Mechanism and Rationale (v. 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2640.pdf)
 - [N2672 Initializer List proposed wording](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2672.htm)
-- [CWG Issue 1030. Evaluation order in initializer-lists used in aggregate initialization](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1030)
+- [CWG Issue 1030. Evaluation order in initializer-lists used in aggregate initialization](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1030)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>共用体の制限解除 [N2544] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/unrestricted_unions.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/unrestricted_unions.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/unrestricted_unions.md b/lang/cpp11/unrestricted_unions.md
index 507598121..8d3671031 100644
--- a/lang/cpp11/unrestricted_unions.md
+++ b/lang/cpp11/unrestricted_unions.md
@@ -1,13 +1,13 @@
 # 共用体の制限解除 [N2544]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 共用体のメンバ変数として、クラスオブジェクトを保持できるようになった：
@@ -74,4 +74,4 @@ hello
 ## 参照
 - [N2430 Unrestricted Unions (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2430.pdf)
 - [N2544 Unrestricted Unions (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2544.pdf)
-- [Boost Variant Library](http://www.boost.org/libs/variant)
+- [Boost Variant Library](http://www.boost.org/libs/variant)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ユーザー定義リテラル [N2765] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/user_defined_literals.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/user_defined_literals.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/user_defined_literals.md b/lang/cpp11/user_defined_literals.md
index f7bf4a324..5970ee0ed 100644
--- a/lang/cpp11/user_defined_literals.md
+++ b/lang/cpp11/user_defined_literals.md
@@ -1,13 +1,13 @@
 # ユーザー定義リテラル [N2765]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 ユーザー定義リテラル(User-defined literals)は、`123`、`3.14`、`&amp;#34;hello&amp;#34;`といったリテラルに対して付けられるサフィックスをオーバーロードできるようにすることで、ユーザーがリテラルに意味を持たせられるようにする機能である。
@@ -386,4 +386,4 @@ DecimalFloat f = 12.34df;
 - [N2750 User-defined Literals (aka. Extensible Literals (revision 4))](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2750.pdf)
 - [N2765 User-defined Literals (aka. Extensible Literals (revision 5))](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2765.pdf)
 - [CWG Issue 935. Missing overloads for character types for user-defined literals](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#935)
-- [CWG Issue 1479. Literal operators and default arguments](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1479)
+- [CWG Issue 1479. Literal operators and default arguments](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1479)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>UTF-8文字列リテラル [N2442] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/utf8_string_literals.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/utf8_string_literals.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/utf8_string_literals.md b/lang/cpp11/utf8_string_literals.md
index 076b4d9e0..8d1c9bf06 100644
--- a/lang/cpp11/utf8_string_literals.md
+++ b/lang/cpp11/utf8_string_literals.md
@@ -1,13 +1,13 @@
 # UTF-8文字列リテラル [N2442]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `char`の文字列リテラルに`u8`プレフィックスを付けることで、その文字列リテラルはUCS/Unicode文字コードのUTF-8符号化形式にエンコードされる。
@@ -83,4 +83,4 @@ int main()
 - [N2209 UTF-8 String Literals](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2209.html)
 - [N2295 Raw and Unicode String Literals; Unified Proposal](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2295.html)
 - [N2384 Raw and Unicode String Literals; Unified Proposal (Rev. 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2384.html)
-- [N2442 Raw and Unicode String Literals; Unified Proposal (Rev. 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2442.htm)
+- [N2442 Raw and Unicode String Literals; Unified Proposal (Rev. 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2442.htm)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変引数マクロ [N1653] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/variadic_macros.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/variadic_macros.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/variadic_macros.md b/lang/cpp11/variadic_macros.md
index 28027f2c2..5049cca1b 100644
--- a/lang/cpp11/variadic_macros.md
+++ b/lang/cpp11/variadic_macros.md
@@ -1,13 +1,13 @@
 # 可変引数マクロ [N1653]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C99互換として、可変引数マクロ(variadic macros)が導入された。
@@ -83,4 +83,4 @@ f2
 
 
 ## 参照
-- [N1653 Working draft changes for C99 preprocessor synchronization](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1653.htm)
+- [N1653 Working draft changes for C99 preprocessor synchronization](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1653.htm)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変引数テンプレート [N2242] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/variadic_templates.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp11/variadic_templates.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/variadic_templates.md b/lang/cpp11/variadic_templates.md
index 0f44f02a0..adf5bfb45 100644
--- a/lang/cpp11/variadic_templates.md
+++ b/lang/cpp11/variadic_templates.md
@@ -1,13 +1,13 @@
 # 可変引数テンプレート [N2242]
 * cpp11[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++11に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 「可変引数テンプレート (variadic templates)」は、任意の型とそのオブジェクトを任意の数だけ受け取る機能である。これによって、「最大でN個のパラメータを受け取る関数テンプレートやクラステンプレート」を実装する際に、N個のオーバーロードをユーザーが用意する必要なく、ひとつの実装だけで済むようになる。
@@ -401,4 +401,4 @@ void f(const T1&amp;amp; t1, const T2&amp;amp; t2, const T3&amp;amp; t3);
 - [N2191 Proposed Wording for Variadic Templates (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2191.pdf)
 - [N2242 Proposed Wording for Variadic Templates (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2242.pdf)
 - [N2488 Extending Variadic Template Template Parameters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2488.pdf)
-- [N2555 Extending Variadic Template Template Parameters (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2555.pdf)
+- [N2555 Extending Variadic Template Template Parameters (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2555.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>2進数リテラル [N3472] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/binary_literals.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp14/binary_literals.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/binary_literals.md b/lang/cpp14/binary_literals.md
index 1eb8531ae..20a3d19da 100644
--- a/lang/cpp14/binary_literals.md
+++ b/lang/cpp14/binary_literals.md
@@ -1,13 +1,13 @@
 # 2進数リテラル [N3472]
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 整数リテラルのプレフィックスとして`0b`もしくは`0B`を付けることで、2進数を表す値を記述できる。
@@ -69,4 +69,4 @@ int main()
 
 
 ## 参照
-- [N3472 - Binary Literals in the C++ Core Language](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3472.pdf)
+- [N3472 - Binary Literals in the C++ Core Language](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3472.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ネストする集成体初期化における波カッコ省略を許可 [N3653] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/brace_elision_in_array_temporary_initialization.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp14/brace_elision_in_array_temporary_initialization.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/brace_elision_in_array_temporary_initialization.md b/lang/cpp14/brace_elision_in_array_temporary_initialization.md
index 933d86d42..ea09d709d 100644
--- a/lang/cpp14/brace_elision_in_array_temporary_initialization.md
+++ b/lang/cpp14/brace_elision_in_array_temporary_initialization.md
@@ -1,13 +1,13 @@
 # ネストする集成体初期化における波カッコ省略を許可 [N3653]
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++11では、集成体初期化とリスト初期化の両方を含む場合、二重に波カッコを書くことが必須となっていた。そのため、`public`メンバ変数として組み込み配列を持つ[`std::array`](/reference/array/array.md)クラスのオブジェクトを初期化する場合、以下のように、不要とも思える二重の波カッコを書かなければならなかった：
@@ -42,4 +42,4 @@ int x[2][2] = {1, 2, 3, 4};
 - [CWG Issue 1270. Brace elision in array temporary initialization](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1270)
 - [vector/arrayとUniform initialization+Initializer list - yohhoyの日記](http://d.hatena.ne.jp/yohhoy/20120724/p1)
 - [initializer-listによるaggregate初期化の制約緩和 - yohhoyの日記](http://d.hatena.ne.jp/yohhoy/20131116/p1)
-- [N3653 - Member initializers and aggregates](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3653.html)
+- [N3653 - Member initializers and aggregates](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3653.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>動的メモリ確保の省略の許可 -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/clarifying_memory_allocation.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp14/clarifying_memory_allocation.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/clarifying_memory_allocation.md b/lang/cpp14/clarifying_memory_allocation.md
index 8008b72c0..039593c3c 100644
--- a/lang/cpp14/clarifying_memory_allocation.md
+++ b/lang/cpp14/clarifying_memory_allocation.md
@@ -1,13 +1,13 @@
 # 動的メモリ確保の省略の許可
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>decltype(auto) -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/decltype_auto.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp14/decltype_auto.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/decltype_auto.md b/lang/cpp14/decltype_auto.md
index 40ce597d1..9bf9e8377 100644
--- a/lang/cpp14/decltype_auto.md
+++ b/lang/cpp14/decltype_auto.md
@@ -1,13 +1,13 @@
 # decltype(auto)
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `decltype(auto)`は、`decltype`に与える式を右辺の式で置き換えて型推論する機能である。
@@ -73,4 +73,4 @@ int main()
 
 
 ## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
-- [C++14 通常関数の戻り値型推論](return_type_deduction_for_normal_functions.md)
+- [C++14 通常関数の戻り値型推論](return_type_deduction_for_normal_functions.md)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[deprecated]]属性 [N3760] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/deprecated_attr.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp14/deprecated_attr.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/deprecated_attr.md b/lang/cpp14/deprecated_attr.md
index 4322cce79..724930191 100644
--- a/lang/cpp14/deprecated_attr.md
+++ b/lang/cpp14/deprecated_attr.md
@@ -1,13 +1,13 @@
 # [[deprecated]]属性 [N3760]
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `[[deprecated]]`は、対象となる機能が非推奨であることを示す属性である。
@@ -136,4 +136,4 @@ prog.cc:45:3: warning: &amp;#39;class_templ&amp;lt;int&amp;gt;&amp;#39; is deprecated: don&amp;#39;t use class_templ&amp;lt;i
 
 ## 参照
 - [N3394 `[[deprecated]]` attribute](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3394.html)
-- [N3760 `[[deprecated]]` attribute](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3760.html)
+- [N3760 `[[deprecated]]` attribute](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3760.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>数値リテラルの桁区切り文字 [N3781] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/digit_separators.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp14/digit_separators.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/digit_separators.md b/lang/cpp14/digit_separators.md
index 510a98507..9e5e8ad11 100644
--- a/lang/cpp14/digit_separators.md
+++ b/lang/cpp14/digit_separators.md
@@ -1,13 +1,13 @@
 # 数値リテラルの桁区切り文字 [N3781]
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 整数リテラルと浮動小数点数リテラルには、途中にシングルクォーテーション(`&amp;#39;`)を入力することで、値を読みやすくできる。
@@ -143,4 +143,3 @@ C++14という言語バージョンは、C++11の仕様に対するバグ修正
 - Ruby : [アンダーバーによる数値の区切り](http://www.rubylife.jp/ini/num/index2.html)
 - Java 7 : [Underscores in Numeric Literals](http://docs.oracle.com/javase/7/docs/technotes/guides/language/underscores-literals.html)
 - Ada : [Ada &amp;#39;83 Language Reference Manual](http://archive.adaic.com/standards/83lrm/html/lrm-02-04.html#2.4)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>機能テストマクロ -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/feature_test_macros.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp14/feature_test_macros.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;機能テストマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp14&#34; title=&#34;C++14で追加&#34;&gt;(C++14)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++14に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;SD-6 は C++14 の機能について以下のテストマクロを定義することを推奨している：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_aggregate_nsdmi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メンバ初期化子と集約&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_binary_literals&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;binary_literals.html&#34;&gt;二進数リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;relaxing_constraints_on_constexpr.html&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;の制限緩和/&lt;code&gt;constexpr&lt;/code&gt; メンバ関数の暗黙的な &lt;code&gt;const&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_decltype_auto&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;return_type_deduction_for_normal_functions.html&#34;&gt;通常関数の戻り値型推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_generic_lambdas&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;generic_lambdas.html&#34;&gt;ジェネリックラムダ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_init_captures&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;initialize_capture.html&#34;&gt;ラムダ式の初期化キャプチャ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_chrono_udls&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration.html&#34;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; のユーザー定義リテラル (&lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_ns.html&#34;&gt;ns&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_us.html&#34;&gt;us&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_ms.html&#34;&gt;ms&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_s.html&#34;&gt;s&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_min.html&#34;&gt;min&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_h.html&#34;&gt;h&lt;/a&gt;&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_complex_udls&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201309&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ユーザー定義虚数リテラル (&lt;code&gt;&lt;a href=&#34;../../reference/complex/complex/op_i.html&#34;&gt;i&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/complex/complex/op_if.html&#34;&gt;if&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/complex/complex/op_il.html&#34;&gt;il&lt;/a&gt;&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/complex.html&#34;&gt;&amp;lt;complex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_exchange_function&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility/exchange.html&#34;&gt;std::exchange&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_generic_associative_lookup&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;連想配列 (&lt;code&gt;&lt;a href=&#34;../../reference/map/map.html&#34;&gt;std::map&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/map/multimap.html&#34;&gt;std::multimap&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/set/set.html&#34;&gt;std::set&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/set/multiset.html&#34;&gt;std::multiset&lt;/a&gt;&lt;/code&gt;) における異なる型の比較 (&lt;code&gt;count&lt;/code&gt;, &lt;code&gt;equal_range&lt;/code&gt;, &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;lower_bound&lt;/code&gt;, &lt;code&gt;upper_bound&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/set.html&#34;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_integer_sequence&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/utility/integer_sequence.html&#34;&gt;コンパイル時整数列&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_integral_constant_callable&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/integral_constant.html&#34;&gt;std::integral_constant&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;operator()&lt;/code&gt; を追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_final&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201402&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_final.html&#34;&gt;std::is_final&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_null_pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201309&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_null_pointer.html&#34;&gt;std::is_null_pointer&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_make_reverse_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201402&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator/make_reverse_iterator.html&#34;&gt;std::make_reverse_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_make_unique&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/make_unique.html&#34;&gt;std::make_unique&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/make_unique.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_null_iterators&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ヌル前方向イテレータ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_quoted_string_io&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iomanip/quoted.html&#34;&gt;std::quoted&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iomanip.html&#34;&gt;&amp;lt;iomanip&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_result_of_sfinae&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201210&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/result_of.html&#34;&gt;std::result_of&lt;/a&gt;&lt;/code&gt; と SFINAE&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_robust_nonmodifying_seq_ops&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスを変更しない操作をよりロバストに&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shared_timed_mutex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201402&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;shared_mutex&lt;/code&gt; を &lt;code&gt;&lt;a href=&#34;../../reference/shared_mutex/shared_timed_mutex.html&#34;&gt;shared_timed_mutex&lt;/a&gt;&lt;/code&gt; にリネーム&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/shared_mutex.html&#34;&gt;&amp;lt;shared_mutex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_string_udls&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ユーザー定義 &lt;code&gt;&lt;a href=&#34;../../reference/string/basic_string/op_s.html&#34;&gt;std::string_literals::basic_string::sリテラル&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_transformation_trait_aliases&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型トレイトにエイリアステンプレートを追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_transparent_operators&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201210&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt; の二項演算のデフォルトテンプレート引数を &lt;code&gt;void&lt;/code&gt; に&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_tuple_element_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201402&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple/tuple_element.html&#34;&gt;std::tuple_element_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_tuples_by_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/tuple/tuple/get.html&#34;&gt;型による &lt;code&gt;std::tuple::get&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_return_type_deduction&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;return_type_deduction_for_normal_functions.html&#34;&gt;通常関数の戻り値型推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_sized_deallocation&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201309&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;sized_deallocation.html&#34;&gt;サイズ付きデアロケーション&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_variable_templates&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;variable_templates.html&#34;&gt;変数テンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(deprecated)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201309&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;deprecated_attr.html&#34;&gt;&lt;code&gt;[[deprecated]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_include(&amp;lt;shared_mutex&amp;gt;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/shared_mutex.html&#34;&gt;共有ロック&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations#recs.cpp14&#34; target=&#34;_blank&#34;&gt;SD-6: SG10 Feature Test Recommendations: Standard C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ジェネリックラムダ [N3649] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/generic_lambdas.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp14/generic_lambdas.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/generic_lambdas.md b/lang/cpp14/generic_lambdas.md
index d61ead3ca..71e85c56a 100644
--- a/lang/cpp14/generic_lambdas.md
+++ b/lang/cpp14/generic_lambdas.md
@@ -1,13 +1,13 @@
 # ジェネリックラムダ [N3649]
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 ジェネリックラムダ(generic lambdas)は、[C++11のラムダ式](/lang/cpp11/lambda_expressions.md)を拡張して、パラメータにテンプレートを使用できるようにした機能である。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式の初期化キャプチャ [N3648] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/initialize_capture.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp14/initialize_capture.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/initialize_capture.md b/lang/cpp14/initialize_capture.md
index 33e66ae6d..bbd9a25d9 100644
--- a/lang/cpp14/initialize_capture.md
+++ b/lang/cpp14/initialize_capture.md
@@ -1,13 +1,13 @@
 # ラムダ式の初期化キャプチャ [N3648]
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 「初期化キャプチャ(init-capture)」は、任意の式の結果をラムダ式にキャプチャする機能である。
@@ -152,4 +152,4 @@ int main()
 
 ## 参照
 - [N3610 Generic lambda-capture initializers, supporting capture-by-move](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3610.html)
-- [N3648 Wording Changes for Generalized Lambda-capture](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3648.html)
+- [N3648 Wording Changes for Generalized Lambda-capture](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3648.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>宣言時のメンバ初期化を持つ型の集成体初期化を許可 -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/member_initializers_and_aggregates.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp14/member_initializers_and_aggregates.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/member_initializers_and_aggregates.md b/lang/cpp14/member_initializers_and_aggregates.md
index 22fbd8d0a..d7a225482 100644
--- a/lang/cpp14/member_initializers_and_aggregates.md
+++ b/lang/cpp14/member_initializers_and_aggregates.md
@@ -1,13 +1,13 @@
 # 宣言時のメンバ初期化を持つ型の集成体初期化を許可
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++11で導入された[メンバ初期化子](/lang/cpp11/non_static_data_member_initializers.md)は集成体の初期化と組み合わせて使用することができない問題があった。
@@ -39,4 +39,4 @@ int main()
 - [C++11 非静的メンバ変数の初期化](/lang/cpp11/non_static_data_member_initializers.md)
 
 ## 参照
-- [N3653 - Member initializers and aggregates](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3653.html)
+- [N3653 - Member initializers and aggregates](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3653.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>リテラル演算子のスペースを省略可能とする -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/no_whitespace_literal_operators.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp14/no_whitespace_literal_operators.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/no_whitespace_literal_operators.md b/lang/cpp14/no_whitespace_literal_operators.md
index 4688dcf09..3ab2981bb 100644
--- a/lang/cpp14/no_whitespace_literal_operators.md
+++ b/lang/cpp14/no_whitespace_literal_operators.md
@@ -1,13 +1,13 @@
 # リテラル演算子のスペースを省略可能とする
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 リテラル演算子を定義する際に、これまでは以下のように、`operator&amp;#34;&amp;#34;`とサフィックス名の間に、ひとつ以上のスペースが必要だった。
@@ -56,4 +56,4 @@ hello
 
 
 ## 参照
-- [CWG Issue 1473. Syntax of literal-operator-id](https://wg21.cmeerw.net/cwg/issue1473)
+- [CWG Issue 1473. Syntax of literal-operator-id](https://wg21.cmeerw.net/cwg/issue1473)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>nullptr_t型の定数式を非型テンプレートパラメータとすることを許可 -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/nontype_template_parameters_of_type_nullptr_t.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp14/nontype_template_parameters_of_type_nullptr_t.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/nontype_template_parameters_of_type_nullptr_t.md b/lang/cpp14/nontype_template_parameters_of_type_nullptr_t.md
index 560705c70..274dc94f3 100644
--- a/lang/cpp14/nontype_template_parameters_of_type_nullptr_t.md
+++ b/lang/cpp14/nontype_template_parameters_of_type_nullptr_t.md
@@ -1,13 +1,13 @@
 # nullptr_t型の定数式を非型テンプレートパラメータとすることを許可
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 [`nullptr_t`](/reference/cstddef/nullptr_t.md)型の定数式を非型テンプレートパラメータとすることが許可された。
@@ -36,4 +36,4 @@ int main()
 
 
 ## 参照
-- [CWG Issue 1398. Non-type template parameters of type `std::nullptr_t`](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1398)
+- [CWG Issue 1398. Non-type template parameters of type `std::nullptr_t`](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1398)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>後置戻り値型をプレースホルダーにすることを許可 -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/placeholder_type_in_trailing_return_type.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp14/placeholder_type_in_trailing_return_type.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/placeholder_type_in_trailing_return_type.md b/lang/cpp14/placeholder_type_in_trailing_return_type.md
index f6a5a0b70..d490d58b3 100644
--- a/lang/cpp14/placeholder_type_in_trailing_return_type.md
+++ b/lang/cpp14/placeholder_type_in_trailing_return_type.md
@@ -1,13 +1,13 @@
 # 後置戻り値型をプレースホルダーにすることを許可
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 [戻り値の型を後置する関数宣言構文](/lang/cpp11/trailing_return_types.md)と[ラムダ式](/lang/cpp11/lambda_expressions.md)の、後置戻り値型(trailing return type)を`auto`プレースホルダーとし、そのプレースホルダーを修飾することで、戻り値型の推論を補助できる。
@@ -57,4 +57,3 @@ int main()
 
 ## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++14 通常関数の戻り値型推論](return_type_deduction_for_normal_functions.md)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>更新された定義済みマクロ -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/predefined_macros.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp14/predefined_macros.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;更新された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp14&#34; title=&#34;C++14で追加&#34;&gt;(C++14)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++14に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cplusplus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201402L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++のバージョン値を表す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexprの制限緩和 [N3652] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/relaxing_constraints_on_constexpr.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp14/relaxing_constraints_on_constexpr.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/relaxing_constraints_on_constexpr.md b/lang/cpp14/relaxing_constraints_on_constexpr.md
index cc3d66426..dacd6abad 100644
--- a/lang/cpp14/relaxing_constraints_on_constexpr.md
+++ b/lang/cpp14/relaxing_constraints_on_constexpr.md
@@ -1,13 +1,13 @@
 # constexprの制限緩和 [N3652]
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++11で、汎用定数式の機能である[`constexpr`](/lang/cpp11/constexpr.md)が導入された。
@@ -212,4 +212,4 @@ C++14では、`constexpr`関数、`constexpr`メンバ関数、暗黙の`const`
 ## 参照
 - [N3597 Relaxing constraints on `constexpr` functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3597.html)
 - [N3598 `constexpr` member functions and implicit `const`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3598.html)
-- [N3652 Relaxing constraints on `constexpr` functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3652.html)
+- [N3652 Relaxing constraints on `constexpr` functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3652.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>通常関数の戻り値型推論 [N3638] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/return_type_deduction_for_normal_functions.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp14/return_type_deduction_for_normal_functions.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/return_type_deduction_for_normal_functions.md b/lang/cpp14/return_type_deduction_for_normal_functions.md
index 040f506be..05edc55cf 100644
--- a/lang/cpp14/return_type_deduction_for_normal_functions.md
+++ b/lang/cpp14/return_type_deduction_for_normal_functions.md
@@ -1,13 +1,13 @@
 # 通常関数の戻り値型推論 [N3638]
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 関数宣言の構文において、先頭の戻り値型を`auto`もしくは[`decltype(auto)`](decltype_auto.md)とすることで、戻り値の型が関数の`return`文から推論される。
@@ -244,4 +244,4 @@ auto g(F f) { return f(); }
 - [N3582 Return type deduction for normal functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3582.html)
 - [N3638 Return type deduction for normal functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3638.html)
 - [CWG Issue 1048. `auto` deduction and lambda return type deduction.](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1048)
-- [CWG Issue 1588. Deducing cv-qualified `auto`](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1588)
+- [CWG Issue 1588. Deducing cv-qualified `auto`](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1588)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>サイズ付きデアロケーション [N3778] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/sized_deallocation.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp14/sized_deallocation.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/sized_deallocation.md b/lang/cpp14/sized_deallocation.md
index d3271b809..9733d5fd9 100644
--- a/lang/cpp14/sized_deallocation.md
+++ b/lang/cpp14/sized_deallocation.md
@@ -1,13 +1,13 @@
 # サイズ付きデアロケーション [N3778]
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++03ではクラス用の`delete`演算子として、サイズをとるバージョンをオーバーロードできた。C++14では、それに対応するグローバルの`delete`演算子を定義できるようにする。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>変数テンプレート [N3651] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/variable_templates.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp14/variable_templates.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/variable_templates.md b/lang/cpp14/variable_templates.md
index 37eed78f8..63d09298a 100644
--- a/lang/cpp14/variable_templates.md
+++ b/lang/cpp14/variable_templates.md
@@ -1,13 +1,13 @@
 # 変数テンプレート [N3651]
 * cpp14[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++14に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 変数定義時のテンプレート指定を可能にする。
@@ -136,4 +136,4 @@ auto main() -&amp;gt; int
 ## 参照
 - [N3651 Variable Templates (Revision 1)](http://open-std.org/JTC1/SC22/WG21/docs/papers/2013/n3651.pdf)
 - [Trip Report: ISO C++ Spring 2013 Meeting](https://isocpp.org/blog/2013/04/trip-report-iso-c-spring-2013-meeting)
-- [変数テンプレートをラムダ式でキャプチャするときの注意 - Faith and Brave - C++で遊ぼう](http://faithandbrave.hateblo.jp/entry/2014/01/21/162701)
+- [変数テンプレートをラムダ式でキャプチャするときの注意 - Faith and Brave - C++で遊ぼう](http://faithandbrave.hateblo.jp/entry/2014/01/21/162701)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>全ての非型テンプレート引数の定数式評価を許可 [N4268] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.md b/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.md
index 1a5f04d3e..bb3aa3b22 100644
--- a/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.md
+++ b/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.md
@@ -2,13 +2,13 @@
 
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++17では、非型テンプレート引数(non-type template argument)で扱える型はとくに変わらないが、渡せる値についての制限緩和が行われる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>変数テンプレートのデフォルトテンプレート引数を許可 -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/allow_default_template_arguments_of_variable_templates.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/allow_default_template_arguments_of_variable_templates.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/allow_default_template_arguments_of_variable_templates.md b/lang/cpp17/allow_default_template_arguments_of_variable_templates.md
index f8c14b098..a61778131 100644
--- a/lang/cpp17/allow_default_template_arguments_of_variable_templates.md
+++ b/lang/cpp17/allow_default_template_arguments_of_variable_templates.md
@@ -1,13 +1,13 @@
 # 変数テンプレートのデフォルトテンプレート引数を許可
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++17では、[変数テンプレート](/lang/cpp14/variable_templates.md)のテンプレートパラメータがデフォルト引数を持てることとなった。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>テンプレートテンプレートパラメータにtypenameキーワードの使用を許可 [N4051] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/allow_typename_in_a_template_template_parameter.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/allow_typename_in_a_template_template_parameter.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/allow_typename_in_a_template_template_parameter.md b/lang/cpp17/allow_typename_in_a_template_template_parameter.md
index 2b05c7f5d..9150ce9b3 100644
--- a/lang/cpp17/allow_typename_in_a_template_template_parameter.md
+++ b/lang/cpp17/allow_typename_in_a_template_template_parameter.md
@@ -1,13 +1,13 @@
 # テンプレートテンプレートパラメータにtypenameキーワードの使用を許可 [N4051]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 テンプレートパラメータはほとんどの箇所で`class`キーワードと`typename`キーワードの両方を使用できたが、テンプレートテンプレートパラメータのクラステンプレート部分については`class`キーワードしか使用できなかった。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>名前空間と列挙子への属性付加を許可 [N4266] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/attributes_for_namespaces_and_enumerators.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/attributes_for_namespaces_and_enumerators.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/attributes_for_namespaces_and_enumerators.md b/lang/cpp17/attributes_for_namespaces_and_enumerators.md
index 7fd5c7014..f7b9ab09b 100644
--- a/lang/cpp17/attributes_for_namespaces_and_enumerators.md
+++ b/lang/cpp17/attributes_for_namespaces_and_enumerators.md
@@ -1,13 +1,13 @@
 # 名前空間と列挙子への属性付加を許可 [N4266]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr ラムダ [P0170R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/constexpr_lambda.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/constexpr_lambda.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/constexpr_lambda.md b/lang/cpp17/constexpr_lambda.md
index d67e01f5d..a3c3d9b7e 100644
--- a/lang/cpp17/constexpr_lambda.md
+++ b/lang/cpp17/constexpr_lambda.md
@@ -2,13 +2,13 @@
 
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>enum class変数の初期値として整数を指定する際の規則を調整 [P0138R2] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/construction_enum_class_values.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/construction_enum_class_values.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/construction_enum_class_values.md b/lang/cpp17/construction_enum_class_values.md
index f776f8493..2f6b48e2b 100644
--- a/lang/cpp17/construction_enum_class_values.md
+++ b/lang/cpp17/construction_enum_class_values.md
@@ -1,13 +1,13 @@
 # enum class変数の初期値として整数を指定する際の規則を調整 [P0138R2]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++11にてスコープを持つ列挙型が導入された。これは基底型を明示することができ、従来の列挙型と異なり整数型への暗黙の型変換を行わない。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非型テンプレートパラメータのauto宣言 [P0127R2] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/declaring_non-type_template_arguments_with_auto.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/declaring_non-type_template_arguments_with_auto.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/declaring_non-type_template_arguments_with_auto.md b/lang/cpp17/declaring_non-type_template_arguments_with_auto.md
index 0ba305a8b..7faa77fa0 100644
--- a/lang/cpp17/declaring_non-type_template_arguments_with_auto.md
+++ b/lang/cpp17/declaring_non-type_template_arguments_with_auto.md
@@ -2,13 +2,13 @@
 
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++14まで、以下のように書いていた「指定された型の定数を受け取る」意図の非型テンプレートパラメータ(non-type template parameter)だが、
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>アライメント指定されたデータの動的メモリ確保 [P0035R4] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md b/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md
index 412876e18..ceb1daf17 100644
--- a/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md
+++ b/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md
@@ -1,13 +1,13 @@
 # アライメント指定されたデータの動的メモリ確保 [P0035R4]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>例外仕様を型システムの一部にする [P0012R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/exception_spec_be_part_of_the_type_system.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/exception_spec_be_part_of_the_type_system.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/exception_spec_be_part_of_the_type_system.md b/lang/cpp17/exception_spec_be_part_of_the_type_system.md
index d735f4707..4ae6a5bba 100644
--- a/lang/cpp17/exception_spec_be_part_of_the_type_system.md
+++ b/lang/cpp17/exception_spec_be_part_of_the_type_system.md
@@ -1,13 +1,13 @@
 # 例外仕様を型システムの一部にする [P0012R1]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 [`noexcept`](/lang/cpp11/noexcept.md)による例外仕様が、関数の型の一部として扱われるようになる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>厳密な式の評価順 [P0145R3] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/expression_evaluation_order.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/expression_evaluation_order.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/expression_evaluation_order.md b/lang/cpp17/expression_evaluation_order.md
index 9be6c3eff..bfe7a0791 100644
--- a/lang/cpp17/expression_evaluation_order.md
+++ b/lang/cpp17/expression_evaluation_order.md
@@ -1,13 +1,13 @@
 # 厳密な式の評価順 [P0145R3]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>static_assert のメッセージ省略を許可 [N3928] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/extending_static_assert.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/extending_static_assert.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/extending_static_assert.md b/lang/cpp17/extending_static_assert.md
index 96d6c6e6a..3fc1bc790 100644
--- a/lang/cpp17/extending_static_assert.md
+++ b/lang/cpp17/extending_static_assert.md
@@ -1,13 +1,13 @@
 # static_assert のメッセージ省略を許可 [N3928]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `static_assert` は [C++11](/lang/cpp11/static_assert.md) で導入されたが、第2引数に診断メッセージを指定しなければならなかった。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>基底クラスのメンバ変数を集成体初期化するための波カッコを省略できるようにする [P0017R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/extension_to_aggregate_initialization.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/extension_to_aggregate_initialization.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/extension_to_aggregate_initialization.md b/lang/cpp17/extension_to_aggregate_initialization.md
index b2c941418..7b42690e6 100644
--- a/lang/cpp17/extension_to_aggregate_initialization.md
+++ b/lang/cpp17/extension_to_aggregate_initialization.md
@@ -2,13 +2,13 @@
 
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[fallthrough]]属性 [P0188R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/fallthrough.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/fallthrough.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/fallthrough.md b/lang/cpp17/fallthrough.md
index 5e3590875..f809ea834 100644
--- a/lang/cpp17/fallthrough.md
+++ b/lang/cpp17/fallthrough.md
@@ -1,13 +1,13 @@
 # [[fallthrough]]属性 [P0188R1]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>機能テストマクロ -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/feature_test_macros.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/feature_test_macros.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;機能テストマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++17に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;SD-6 は C++17 の機能について以下のテストマクロを定義することを推奨している：&lt;/p&gt;
&lt;h3&gt;言語機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_hex_float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;hexadecimal_floating_literals.html&#34;&gt;十六進浮動小数点数リテラル&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_inline_variables&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;inline_variables.html&#34;&gt;インライン変数&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_aligned_new&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;dynamic_memory_allocation_for_over-aligned_data.html&#34;&gt;アライメント指定されたデータの動的メモリ確保&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_guaranteed_copy_elision&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;guaranteed_copy_elision.html&#34;&gt;値のコピー省略を保証&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_noexcept_function_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;exception_spec_be_part_of_the_type_system.html&#34;&gt;例外仕様を型システムの一部にする&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_fold_expressions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;folding_expressions.html&#34;&gt;畳み込み式&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;constexpr_lambda.html&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;ラムダ&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_if_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;if_constexpr.html&#34;&gt;&lt;code&gt;if constexpr&lt;/code&gt;文&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_range_based_for&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;generalizing_the_range-based_for_loop.html&#34;&gt;範囲 &lt;code&gt;for&lt;/code&gt; ループの制限緩和&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_static_assert&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;extending_static_assert.html&#34;&gt;&lt;code&gt;static_assert&lt;/code&gt; のメッセージ省略を許可&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_deduction_guides&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;br /&gt; &lt;code&gt;201611&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;type_deduction_for_class_templates.html&#34;&gt;クラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_nontype_template_parameter_auto&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;declaring_non-type_template_arguments_with_auto.html&#34;&gt;非型テンプレートパラメータの&lt;code&gt;auto&lt;/code&gt;宣言&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_namespace_attributes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;attributes_for_namespaces_and_enumerators.html&#34;&gt;名前空間への属性付加を許可&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_enumerator_attributes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;attributes_for_namespaces_and_enumerators.html&#34;&gt;列挙子への属性付加を許可&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_inheriting_constructors&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201511&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;継承コンストラクタの新仕様&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_variadic_using&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201611&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;pack_expansions_in_using.html&#34;&gt;&lt;code&gt;using&lt;/code&gt;宣言のパック展開&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(fallthrough)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;fallthrough.html&#34;&gt;&lt;code&gt;[[fallthrough]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(nodiscard)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;nodiscard.html&#34;&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(maybe_unused)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;maybe_unused.html&#34;&gt;&lt;code&gt;[[maybe_unused]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_structured_bindings&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;structured_bindings.html&#34;&gt;構造化束縛&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_aggregate_bases&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;extension_to_aggregate_initialization.html&#34;&gt;集成体初期化の拡張&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_nontype_template_args&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;allow_constant_evaluation_for_all_non-type_template_arguments.html&#34;&gt;非型テンプレートパラメータの定数式を評価&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_nested_namespace_definitions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;nested_namespace.html&#34;&gt;入れ子名前空間の定義&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ライブラリ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_byte&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cstddef/byte.html&#34;&gt;std::byte&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cstddef.html&#34;&gt;&amp;lt;cstddef&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_hardware_interference_size&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/new/hardware_destructive_interference_size.html&#34;&gt;std::hardware_destructive_interference_size&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/new/hardware_constructive_interference_size.html&#34;&gt;std::hardware_constructive_interference_size&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/new.html&#34;&gt;&amp;lt;new&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_launder&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/new/launder.html&#34;&gt;std::launder()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_uncaught_exceptions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/exception/uncaught_exceptions.html&#34;&gt;std::uncaught_exceptions()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/exception.html&#34;&gt;&amp;lt;exception&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_as_const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility/as_const.html&#34;&gt;std::as_const()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_make_from_tuple&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple/make_from_tuple.html&#34;&gt;std::make_from_tuple()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_apply&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple/apply.html&#34;&gt;std::apply()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple.html&#34;&gt;&amp;lt;tuple&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_optional&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/optional/optional.html&#34;&gt;std::optional&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/optional.html&#34;&gt;&amp;lt;optional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_any&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/any/any.html&#34;&gt;std::any&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/any.html&#34;&gt;&amp;lt;any&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_variant&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/variant/variant.html&#34;&gt;std::variant&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/variant.html&#34;&gt;&amp;lt;variant&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_memory_resource&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory_resource/memory_resource.html&#34;&gt;std::memory_resource&lt;/a&gt;&lt;/code&gt;と関連する機能&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory_resource.html&#34;&gt;&amp;lt;memory_resource&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_boyer_moore_searcher&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional/boyer_moore_searcher.html&#34;&gt;std::boyer_morre_searcher&lt;/a&gt;&lt;/code&gt;と関連する機能&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_string_view&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view/basic_string_view.html&#34;&gt;std::string_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_sample&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/sample.html&#34;&gt;std::sample()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_addressof_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/addressof.html&#34;&gt;std::addressof()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_raw_memory_algorithms&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/uninitialized_default_construct.html&#34;&gt;std::uninitialized_default_construct()&lt;/a&gt;&lt;/code&gt;と関連する機能&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_transparent_operators&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/owner_less.html&#34;&gt;std::owner_less&lt;/a&gt;&lt;/code&gt; の柔軟性向上&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_enable_shared_from_this&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/enable_shared_from_this.html&#34;&gt;std::enable_shared_from_this&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shared_ptr_weak_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/shared_ptr.html&#34;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;クラスのメンバ型&lt;code&gt;weak_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shared_ptr_arrays&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201611&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/shared_ptr.html&#34;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;クラスの配列サポート&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_invoke&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional/invoke.html&#34;&gt;std::invoke()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_not_fn&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional/not_fn.html&#34;&gt;std::not_fn()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_void_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/void_t.html&#34;&gt;std::void_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_bool_constant&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201505&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/bool_constant.html&#34;&gt;std::bool_constant&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_type_trait_variable_templates&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型トレイト変数テンプレート (&lt;code&gt;some_trait_v&amp;lt;T&amp;gt; = some_trait&amp;lt;T&amp;gt;::value&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_logical_traits&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;論理演算子型トレイト (&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/conjunction.html&#34;&gt;std::conjunction&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/type_traits/disjunction.html&#34;&gt;std::disjunction&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/type_traits/negation.html&#34;&gt;std::negation&lt;/a&gt;&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_swappable&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_swappable.html&#34;&gt;std::is_swappable&lt;/a&gt;&lt;/code&gt;と関連する機能&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_invocable&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_invocable.html&#34;&gt;std::is_invocable&lt;/a&gt;&lt;/code&gt;と関連する機能&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_has_unique_object_representations&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/has_unique_object_representations.html&#34;&gt;std::has_unique_object_representations&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_aggregate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_aggregate.html&#34;&gt;std::is_aggregate&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_chrono&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt; の改良&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_execution&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/execution.html&#34;&gt;&amp;lt;execution&amp;gt;&lt;/a&gt;&lt;/code&gt; の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/execution.html&#34;&gt;&amp;lt;execution&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_parallel_algorithm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;並列アルゴリズム&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_to_chars&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201611&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/charconv/to_chars.html&#34;&gt;std::to_chars()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/charconv/from_chars.html&#34;&gt;std::from_chars()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/charconv.html&#34;&gt;&amp;lt;charconv&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_allocator_traits_is_always_equal&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ライブラリ内の &lt;code&gt;noexcept&lt;/code&gt; のクリーンアップ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/deque.html&#34;&gt;&amp;lt;deque&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/forward_list.html&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/list.html&#34;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/scoped_allocator.html&#34;&gt;&amp;lt;scoped_allocator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/set.html&#34;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/unordered_set.html&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/vector.html&#34;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_incomplete_container_elements&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201505&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;標準コンテナについて不完全型を最小限サポート&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/forward_list.html&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/list.html&#34;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/vector.html&#34;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_map_try_emplace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map/map/try_emplace.html&#34;&gt;std::map::try_emplace()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/map/map/insert_or_assign.html&#34;&gt;std::map::insert_or_assign()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_unordered_map_try_emplace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_map/unordered_map/try_emplace.html&#34;&gt;std::unordered_map::try_emplace()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/unordered_map/unordered_map/insert_or_assign.html&#34;&gt;std::unordered_map::insert_or_assign()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_node_extract&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;連想コンテナのsplice&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/set.html&#34;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/unordered_set.html&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_array_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;配列関係のランダムアクセスに&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/array.html&#34;&gt;&amp;lt;array&amp;gt;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_nonmember_container_access&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非メンバ関数 &lt;code&gt;&lt;a href=&#34;../../reference/iterator/size.html&#34;&gt;std::size()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/iterator/empty.html&#34;&gt;std::empty()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/iterator/data.html&#34;&gt;std::data()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_clamp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/clamp.html&#34;&gt;std::clamp()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_gcd_lcm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric/gcd.html&#34;&gt;std::gcd()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/numeric/lcm.html&#34;&gt;std::lcm()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_hypot&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;3引数版の&lt;code&gt;&lt;a href=&#34;../../reference/cmath/hypot.html&#34;&gt;std::hypot()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_math_special_functions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数学の特殊関数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_filesystem&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルシステムライブラリ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/filesystem.html&#34;&gt;&amp;lt;filesystem&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_is_always_lock_free&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic.html&#34;&gt;std::atomic&lt;/a&gt;&lt;/code&gt;クラスの静的メンバ定数&lt;code&gt;is_always_lock_free&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shared_mutex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201505&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/shared_mutex/shared_mutex.html&#34;&gt;std::shared_mutex&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/shared_mutex.html&#34;&gt;&amp;lt;shared_mutex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_scoped_lock&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可変個のミューテックスのロックを管理する&lt;code&gt;&lt;a href=&#34;../../reference/mutex/scoped_lock.html&#34;&gt;std::scoped_lock&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/mutex.html&#34;&gt;&amp;lt;mutex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations#recs.cpp17&#34; target=&#34;_blank&#34;&gt;SD-6: SG10 Feature Test Recommendations: Standard C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>畳み込み式 [N4295] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/folding_expressions.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/folding_expressions.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/folding_expressions.md b/lang/cpp17/folding_expressions.md
index 60cba9317..408b05861 100644
--- a/lang/cpp17/folding_expressions.md
+++ b/lang/cpp17/folding_expressions.md
@@ -1,13 +1,13 @@
 # 畳み込み式 [N4295]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>範囲 for ループの制限緩和 [P0184R0] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/generalizing_the_range-based_for_loop.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/generalizing_the_range-based_for_loop.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/generalizing_the_range-based_for_loop.md b/lang/cpp17/generalizing_the_range-based_for_loop.md
index e400fc361..818f3b526 100644
--- a/lang/cpp17/generalizing_the_range-based_for_loop.md
+++ b/lang/cpp17/generalizing_the_range-based_for_loop.md
@@ -1,13 +1,13 @@
 # 範囲 for ループの制限緩和 [P0184R0]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>値のコピー省略を保証 [P0135R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/guaranteed_copy_elision.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/guaranteed_copy_elision.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/guaranteed_copy_elision.md b/lang/cpp17/guaranteed_copy_elision.md
index 448649cf2..df83a6b77 100644
--- a/lang/cpp17/guaranteed_copy_elision.md
+++ b/lang/cpp17/guaranteed_copy_elision.md
@@ -2,13 +2,13 @@
 
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++11で右辺値参照を導入するときに規定された「値カテゴリー (value category)」の仕様（C++17で更新）を利用し、[`prvalue`](../cpp11/rvalue_ref_and_move_semantics.md)&amp;lt;sup&amp;gt;&amp;lt;a id=&amp;#34;note_ref-1&amp;#34; href=&amp;#34;#note-1&amp;#34;&amp;gt;[注1]&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt;というカテゴリーの値を、オブジェクトの初期化のために使用する場合に、コピーが省略される。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>__has_include [P0061R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/has_include.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/has_include.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/has_include.md b/lang/cpp17/has_include.md
index 9972b6917..46c583c24 100644
--- a/lang/cpp17/has_include.md
+++ b/lang/cpp17/has_include.md
@@ -1,13 +1,13 @@
 # __has_include [P0061R1]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>十六進浮動小数点数リテラル [P0245R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/hexadecimal_floating_literals.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/hexadecimal_floating_literals.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/hexadecimal_floating_literals.md b/lang/cpp17/hexadecimal_floating_literals.md
index c239faf66..914023b13 100644
--- a/lang/cpp17/hexadecimal_floating_literals.md
+++ b/lang/cpp17/hexadecimal_floating_literals.md
@@ -1,12 +1,12 @@
 # 十六進浮動小数点数リテラル [P0245R1]
 * cpp17[meta cpp]
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 * [mathjax enable]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr if 文 [P0292R2] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/if_constexpr.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/if_constexpr.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/if_constexpr.md b/lang/cpp17/if_constexpr.md
index 0c1b36004..48028fc0c 100644
--- a/lang/cpp17/if_constexpr.md
+++ b/lang/cpp17/if_constexpr.md
@@ -1,13 +1,13 @@
 # constexpr if 文 [P0292R2]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>インライン変数 [P0386R2] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/inline_variables.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/inline_variables.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/inline_variables.md b/lang/cpp17/inline_variables.md
index 20ef21ee3..937afd223 100644
--- a/lang/cpp17/inline_variables.md
+++ b/lang/cpp17/inline_variables.md
@@ -1,13 +1,13 @@
 # インライン変数 [P0386R2]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式での*thisのコピーキャプチャ [P0018R3] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/lambda_capture_of_this_by_value.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/lambda_capture_of_this_by_value.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/lambda_capture_of_this_by_value.md b/lang/cpp17/lambda_capture_of_this_by_value.md
index 2340d2a4f..2e91fe9cb 100644
--- a/lang/cpp17/lambda_capture_of_this_by_value.md
+++ b/lang/cpp17/lambda_capture_of_this_by_value.md
@@ -1,13 +1,13 @@
 # ラムダ式での*thisのコピーキャプチャ [P0018R3]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++14までラムダ式で`[this]`のようにキャプチャをすると、`this`ポインタがコピーされていた。その場合、非同期処理のような状況で、ラムダ式の関数オブジェクトが呼び出されたときに、`this`ポインタが指すオブジェクトの寿命が尽きている場合がある。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>noexcept付きのラムダ式から変換する関数ポインタにnoexceptを付加する -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/lambda_to_noexcept_function_pointer.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/lambda_to_noexcept_function_pointer.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/lambda_to_noexcept_function_pointer.md b/lang/cpp17/lambda_to_noexcept_function_pointer.md
index 6b8d71d82..c0532d9d1 100644
--- a/lang/cpp17/lambda_to_noexcept_function_pointer.md
+++ b/lang/cpp17/lambda_to_noexcept_function_pointer.md
@@ -1,13 +1,13 @@
 # noexcept付きのラムダ式から変換する関数ポインタにnoexceptを付加する
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 キャプチャを持たない非ジェネリックなラムダ式は、関数ポインタに変換できる。そのラムダ式が例外を投げない指定をされていた場合、変換された関数ポインタもまた`noexcept`を持つ。
@@ -55,4 +55,4 @@ true
 
 
 ## 参照
-- [CWG Issue 1722. Should lambda to function pointer conversion function be `noexcept`?](https://wg21.cmeerw.net/cwg/issue1722)
+- [CWG Issue 1722. Should lambda to function pointer conversion function be `noexcept`?](https://wg21.cmeerw.net/cwg/issue1722)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[maybe_unused]]属性 [P0212R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/maybe_unused.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/maybe_unused.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/maybe_unused.md b/lang/cpp17/maybe_unused.md
index 7832e097e..0c61865ae 100644
--- a/lang/cpp17/maybe_unused.md
+++ b/lang/cpp17/maybe_unused.md
@@ -1,13 +1,13 @@
 # [[maybe_unused]]属性 [P0212R1]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>入れ子名前空間の定義 [N4230] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/nested_namespace.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/nested_namespace.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/nested_namespace.md b/lang/cpp17/nested_namespace.md
index 2745b5513..37c3df4f4 100644
--- a/lang/cpp17/nested_namespace.md
+++ b/lang/cpp17/nested_namespace.md
@@ -1,13 +1,13 @@
 # 入れ子名前空間の定義 [N4230]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 一度の定義だけで入れ子状になった名前空間を定義可能となる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>波括弧初期化の型推論の新規則 [N3922] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.md b/lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.md
index 2a635eaec..017d28e05 100644
--- a/lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.md
+++ b/lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.md
@@ -1,13 +1,13 @@
 # 波括弧初期化の型推論の新規則 [N3922]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[nodiscard]]属性 [P0189R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/nodiscard.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/nodiscard.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/nodiscard.md b/lang/cpp17/nodiscard.md
index 489a4d2d1..7346a5df0 100644
--- a/lang/cpp17/nodiscard.md
+++ b/lang/cpp17/nodiscard.md
@@ -1,13 +1,13 @@
 # [[nodiscard]]属性 [P0189R1]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>不明な属性を無視する [P0283R2] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/non_standard_attributes.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/non_standard_attributes.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/non_standard_attributes.md b/lang/cpp17/non_standard_attributes.md
index ad9fbd589..c0fabc99d 100644
--- a/lang/cpp17/non_standard_attributes.md
+++ b/lang/cpp17/non_standard_attributes.md
@@ -1,13 +1,13 @@
 # 不明な属性を無視する [P0283R2]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>using宣言のパック展開 [P0195R2] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/pack_expansions_in_using.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/pack_expansions_in_using.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/pack_expansions_in_using.md b/lang/cpp17/pack_expansions_in_using.md
index de332e0a1..c2b4a7e84 100644
--- a/lang/cpp17/pack_expansions_in_using.md
+++ b/lang/cpp17/pack_expansions_in_using.md
@@ -1,13 +1,13 @@
 # using宣言のパック展開 [P0195R2]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>更新された定義済みマクロ -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/predefined_macros.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/predefined_macros.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;更新された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++17に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative_page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cplusplus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++のバージョン値を表す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;新規マクロは以下：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDCPP_DEFAULT_NEW_ALIGNMENT__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実装定義&lt;/td&gt;
&lt;td&gt;動的メモリ確保時のデフォルトのアライメント値&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;dynamic_memory_allocation_for_over-aligned_data.html&#34;&gt;C++17 アライメント指定されたデータの動的メモリ確保&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非推奨だった古い例外仕様を削除 [P0003R5] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/remove_deprecated_exception_specifications.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/remove_deprecated_exception_specifications.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/remove_deprecated_exception_specifications.md b/lang/cpp17/remove_deprecated_exception_specifications.md
index 127715a9b..8d645f045 100644
--- a/lang/cpp17/remove_deprecated_exception_specifications.md
+++ b/lang/cpp17/remove_deprecated_exception_specifications.md
@@ -1,13 +1,13 @@
 # 非推奨だった古い例外仕様を削除 [P0003R5]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++11で[`noexcept`](/lang/cpp11/noexcept.md)機能が入ったことにより、従来の`throw`キーワードを使用した「例外仕様 (Exception Specification)」は「動的例外仕様 (Dynamic Exception Specification)」という名前に変更され、非推奨となっていた。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非推奨だった bool 型に対するインクリメント演算子を削除 [P0002R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/remove_deprecated_increment_of_bool.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/remove_deprecated_increment_of_bool.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/remove_deprecated_increment_of_bool.md b/lang/cpp17/remove_deprecated_increment_of_bool.md
index 3ff243c75..4888e6a5d 100644
--- a/lang/cpp17/remove_deprecated_increment_of_bool.md
+++ b/lang/cpp17/remove_deprecated_increment_of_bool.md
@@ -1,13 +1,13 @@
 # 非推奨だった bool 型に対するインクリメント演算子を削除 [P0002R1]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非推奨だったregisterキーワードを削除 [P0001R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/remove_deprecated_use_of_the_register_keyword.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/remove_deprecated_use_of_the_register_keyword.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/remove_deprecated_use_of_the_register_keyword.md b/lang/cpp17/remove_deprecated_use_of_the_register_keyword.md
index bffa62989..4bbea0c54 100644
--- a/lang/cpp17/remove_deprecated_use_of_the_register_keyword.md
+++ b/lang/cpp17/remove_deprecated_use_of_the_register_keyword.md
@@ -1,13 +1,13 @@
 # 非推奨だったregisterキーワードを削除 [P0001R1]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>トライグラフの削除 [N4086] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/removing_trigraphs.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/removing_trigraphs.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/removing_trigraphs.md b/lang/cpp17/removing_trigraphs.md
index 8b0967eab..32b4e8580 100644
--- a/lang/cpp17/removing_trigraphs.md
+++ b/lang/cpp17/removing_trigraphs.md
@@ -1,13 +1,13 @@
 # トライグラフの削除 [N4086]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>参照メンバをもつクラスの置き換え [P0137R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/replacement_of_class_objects_containing_reference_members.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/replacement_of_class_objects_containing_reference_members.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/replacement_of_class_objects_containing_reference_members.md b/lang/cpp17/replacement_of_class_objects_containing_reference_members.md
index 2aa783929..c14c128a5 100644
--- a/lang/cpp17/replacement_of_class_objects_containing_reference_members.md
+++ b/lang/cpp17/replacement_of_class_objects_containing_reference_members.md
@@ -1,13 +1,13 @@
 # 参照メンバをもつクラスの置き換え [P0137R1]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `placement new`を使用して、参照型や`const`メンバ変数を含む構造体/クラスを置き換える際、オブジェクト生存期間(lifetime)に基づいた最適化の抑止をコンパイラに伝える関数[`std::launder()`](/reference/new/launder.md)を用いることで、未定義動作となるような文脈で参照型や`const`メンバ変数へのアクセスができる。
@@ -99,4 +99,4 @@ public:
 - [std::launder - cppreference.com](https://en.cppreference.com/w/cpp/utility/launder)
 - [Pointer safety and placement new](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4303.html)
 - [Implementability of std::optional （std :: optionalの実装可能性） ](https://groups.google.com/a/isocpp.org/forum/#!msg/std-proposals/93ebFsxCjvQ/Q5LUnO8339wJ)
-- [Lifetime - cppreference.com](https://en.cppreference.com/w/cpp/language/lifetime)
+- [Lifetime - cppreference.com](https://en.cppreference.com/w/cpp/language/lifetime)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>if文とswitch文の条件式と初期化を分離 [P0305R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/selection_statements_with_initializer.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/selection_statements_with_initializer.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/selection_statements_with_initializer.md b/lang/cpp17/selection_statements_with_initializer.md
index b72260aa5..853453de2 100644
--- a/lang/cpp17/selection_statements_with_initializer.md
+++ b/lang/cpp17/selection_statements_with_initializer.md
@@ -1,13 +1,13 @@
 # if文とswitch文の条件式と初期化を分離 [P0305R1]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>構造化束縛 [P0217R3] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/structured_bindings.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/structured_bindings.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/structured_bindings.md b/lang/cpp17/structured_bindings.md
index 261e9ac82..c0b07bf72 100644
--- a/lang/cpp17/structured_bindings.md
+++ b/lang/cpp17/structured_bindings.md
@@ -1,13 +1,13 @@
 # 構造化束縛 [P0217R3]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 「構造化束縛 (structured bindings)」は、組やタプル、配列や構造体を分解して各要素を取り出す機能である。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>クラステンプレートのテンプレート引数推論 [P0091R3] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/type_deduction_for_class_templates.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/type_deduction_for_class_templates.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/type_deduction_for_class_templates.md b/lang/cpp17/type_deduction_for_class_templates.md
index 4c7d68427..34ece2891 100644
--- a/lang/cpp17/type_deduction_for_class_templates.md
+++ b/lang/cpp17/type_deduction_for_class_templates.md
@@ -1,13 +1,13 @@
 # クラステンプレートのテンプレート引数推論 [P0091R3]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 コンストラクタに渡される値によって、クラステンプレートのテンプレート引数を推論する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>属性の名前空間指定に繰り返しをなくす [P0028R4] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/using_attribute_namespaces.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/using_attribute_namespaces.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/using_attribute_namespaces.md b/lang/cpp17/using_attribute_namespaces.md
index bd23c19a7..5d944df0b 100644
--- a/lang/cpp17/using_attribute_namespaces.md
+++ b/lang/cpp17/using_attribute_namespaces.md
@@ -1,13 +1,13 @@
 # 属性の名前空間指定に繰り返しをなくす [P0028R4]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>UTF-8文字リテラル [N4267] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/utf8_character_literals.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp17/utf8_character_literals.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/utf8_character_literals.md b/lang/cpp17/utf8_character_literals.md
index c486f134d..e0efe041a 100644
--- a/lang/cpp17/utf8_character_literals.md
+++ b/lang/cpp17/utf8_character_literals.md
@@ -1,13 +1,13 @@
 # UTF-8文字リテラル [N4267]
 * cpp17[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++17に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++14までは、UTF-8エンコーディングであることを示す`u8`プレフィックスを、文字列リテラルに対してのみ指定できた。C++17では、文字リテラルに対しても`u8`プレフィックスを付けられる。
@@ -36,4 +36,4 @@ C++20ではUTF-8文字リテラルの型が[`char`ではなく`char8_t`になる
 ## 参照
 - [N4267 Adding `u8` character literals](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4267.html)
 - [C0 Controls and Basic Latin - The Unicode Consortium](http://www.unicode.org/charts/PDF/U0000.pdf)
-- [基本ラテン文字 (Unicodeのブロック) - Wikipedia](https://ja.wikipedia.org/wiki/%E5%9F%BA%E6%9C%AC%E3%83%A9%E3%83%86%E3%83%B3%E6%96%87%E5%AD%97_(Unicode%E3%81%AE%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF))
+- [基本ラテン文字 (Unicodeのブロック) - Wikipedia](https://ja.wikipedia.org/wiki/%E5%9F%BA%E6%9C%AC%E3%83%A9%E3%83%86%E3%83%B3%E6%96%87%E5%AD%97_(Unicode%E3%81%AE%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF))
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>特殊化のアクセスチェック [P0692R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/access_checking_on_specializations.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/access_checking_on_specializations.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/access_checking_on_specializations.md b/lang/cpp20/access_checking_on_specializations.md
index b80a26c32..e7e3e1126 100644
--- a/lang/cpp20/access_checking_on_specializations.md
+++ b/lang/cpp20/access_checking_on_specializations.md
@@ -1,13 +1,13 @@
 # 特殊化のアクセスチェック [P0692R1]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
@@ -152,4 +152,4 @@ namespace option3 {
 
 ## 参照
 
-- [P0692R1 Access Checking on Specializations](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0692r1.html)
+- [P0692R1 Access Checking on Specializations](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0692r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>関数テンプレートに明示的に型指定した場合にADLで見つからない問題を修正 [P0846R0] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/adl_and_function_templates_that_are_not_visible.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/adl_and_function_templates_that_are_not_visible.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/adl_and_function_templates_that_are_not_visible.md b/lang/cpp20/adl_and_function_templates_that_are_not_visible.md
index fe061cd64..360530f8d 100644
--- a/lang/cpp20/adl_and_function_templates_that_are_not_visible.md
+++ b/lang/cpp20/adl_and_function_templates_that_are_not_visible.md
@@ -1,13 +1,13 @@
 # 関数テンプレートに明示的に型指定した場合にADLで見つからない問題を修正 [P0846R0]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++17までは、以下のコードが不適格だった：
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>丸カッコの値リストからの集成体初期化を許可 [P0960R3] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md b/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md
index b9686a4ed..eda127df3 100644
--- a/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md
+++ b/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md
@@ -2,13 +2,13 @@
 
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式のキャプチャとして[=, this]を許可する [P0409R2] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allow_lambda_capture_equal_this.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/allow_lambda_capture_equal_this.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allow_lambda_capture_equal_this.md b/lang/cpp20/allow_lambda_capture_equal_this.md
index 8c8cc2e0b..f2ca69bff 100644
--- a/lang/cpp20/allow_lambda_capture_equal_this.md
+++ b/lang/cpp20/allow_lambda_capture_equal_this.md
@@ -1,13 +1,13 @@
 # ラムダ式のキャプチャとして[=, this]を許可する [P0409R2]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++17まで、ラムダ式のキャプチャとして`[=, this]`は指定できなかった。これは、デフォルトコピーキャプチャ (`=`) に、`this`ポインタのコピーキャプチャが含まれるため、重複指定はできないというものである。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式の初期化キャプチャでのパック展開を許可 [P0780R2] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md b/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md
index 8bece858e..e4171c60f 100644
--- a/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md
+++ b/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md
@@ -1,13 +1,13 @@
 # ラムダ式の初期化キャプチャでのパック展開を許可 [P0780R2]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 [ラムダ式](/lang/cpp11/lambda_expressions.md)の[初期化キャプチャ](../cpp14/initialize_capture.md)で、パック展開ができるようになった。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>friend指定された関数内から構造化束縛を使用して非公開メンバ変数にアクセスすることを許可 [P0969R0] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allow_structured_bindings_to_accessible_members.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/allow_structured_bindings_to_accessible_members.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allow_structured_bindings_to_accessible_members.md b/lang/cpp20/allow_structured_bindings_to_accessible_members.md
index e00dafa58..7eed7ff0d 100644
--- a/lang/cpp20/allow_structured_bindings_to_accessible_members.md
+++ b/lang/cpp20/allow_structured_bindings_to_accessible_members.md
@@ -1,13 +1,13 @@
 # friend指定された関数内から構造化束縛を使用して非公開メンバ変数にアクセスすることを許可 [P0969R0]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++17までの構造化束縛では、publicアクセス指定されたメンバ変数のみ抽出できる仕様となっていた。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>定数式からの仮想関数の呼び出しを許可 [P1064R0] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/allow_virtual_function_calls_in_constant_expressions.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.md b/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.md
index 92057fd4c..6a6643aae 100644
--- a/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.md
+++ b/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.md
@@ -1,13 +1,13 @@
 # 定数式からの仮想関数の呼び出しを許可 [P1064R0]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++20では、仮想関数に対して`constexpr`を指定し、定数式の文脈で呼び出せるようになる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>定数式での`dynamic_cast`、多態的な`typeid`を許可 [P1327R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.md b/lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.md
index 47e996222..79fb171a6 100644
--- a/lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.md
+++ b/lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.md
@@ -1,13 +1,13 @@
 # 定数式での`dynamic_cast`、多態的な`typeid`を許可 [P1327R1]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>new式での配列要素数の推論 [P1009R2] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/array_size_deduction_in_new-expressions.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/array_size_deduction_in_new-expressions.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/array_size_deduction_in_new-expressions.md b/lang/cpp20/array_size_deduction_in_new-expressions.md
index 38c8f90d9..34a3005ac 100644
--- a/lang/cpp20/array_size_deduction_in_new-expressions.md
+++ b/lang/cpp20/array_size_deduction_in_new-expressions.md
@@ -2,13 +2,13 @@
 
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>定数式内での共用体のアクティブメンバの変更を許可 [P1330R0] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md b/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md
index 3f82156d4..6cd672333 100644
--- a/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md
+++ b/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md
@@ -1,13 +1,13 @@
 # 定数式内での共用体のアクティブメンバの変更を許可 [P1330R0]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>UTF-8エンコーディングされた文字の型として`char8_t`を追加 [P0482R6] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/char8_t.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/char8_t.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/char8_t.md b/lang/cpp20/char8_t.md
index 6d2a7d399..3b1decd0a 100644
--- a/lang/cpp20/char8_t.md
+++ b/lang/cpp20/char8_t.md
@@ -1,13 +1,13 @@
 # UTF-8エンコーディングされた文字の型として`char8_t`を追加 [P0482R6]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>抽象型のチェック [P0929R2] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/checking_for_abstract_class_types.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/checking_for_abstract_class_types.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/checking_for_abstract_class_types.md b/lang/cpp20/checking_for_abstract_class_types.md
index 14e0f528f..55f911cad 100644
--- a/lang/cpp20/checking_for_abstract_class_types.md
+++ b/lang/cpp20/checking_for_abstract_class_types.md
@@ -1,13 +1,13 @@
 # 抽象型のチェック [P0929R2]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++17までは以下の仕様があったため、抽象クラスに早期の制限があった：
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>集成体クラステンプレートのテンプレート引数推論 [P1816R0] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/class_template_argument_deduction_for_aggregates.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/class_template_argument_deduction_for_aggregates.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/class_template_argument_deduction_for_aggregates.md b/lang/cpp20/class_template_argument_deduction_for_aggregates.md
index 20169b4c8..33d731174 100644
--- a/lang/cpp20/class_template_argument_deduction_for_aggregates.md
+++ b/lang/cpp20/class_template_argument_deduction_for_aggregates.md
@@ -1,13 +1,13 @@
 # 集成体クラステンプレートのテンプレート引数推論 [P1816R0]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++17で導入されたクラステンプレートのテンプレート引数推論は、コンストラクタ引数からテンプレート引数を推論するものであった。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>エイリアステンプレート経由でのクラステンプレートのテンプレート引数推論 [P1814R0] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/class_template_argument_deduction_for_alias_templates.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/class_template_argument_deduction_for_alias_templates.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/class_template_argument_deduction_for_alias_templates.md b/lang/cpp20/class_template_argument_deduction_for_alias_templates.md
index 313c11a4a..848b543ca 100644
--- a/lang/cpp20/class_template_argument_deduction_for_alias_templates.md
+++ b/lang/cpp20/class_template_argument_deduction_for_alias_templates.md
@@ -1,13 +1,13 @@
 # エイリアステンプレート経由でのクラステンプレートのテンプレート引数推論 [P1814R0]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++17で導入されたクラステンプレートのテンプレート引数推論は、コンストラクタ引数からテンプレート引数を推論するものであった。しかし、そのクラステンプレートのエイリアステンプレートを定義した場合に、エイリアステンプレートの変数定義からはクラステンプレートのテンプレート引数を推論できない問題があった。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非型テンプレートパラメータとしてクラス型を許可する [P0732R2] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/class_types_in_non-type_template_parameters.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/class_types_in_non-type_template_parameters.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/class_types_in_non-type_template_parameters.md b/lang/cpp20/class_types_in_non-type_template_parameters.md
index 9df91ede1..741e36484 100644
--- a/lang/cpp20/class_types_in_non-type_template_parameters.md
+++ b/lang/cpp20/class_types_in_non-type_template_parameters.md
@@ -1,13 +1,13 @@
 # 非型テンプレートパラメータとしてクラス型を許可する [P0732R2]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 これまで、非型テンプレートパラメータ (non-type template parameter) としては、整数型、ポインタ、参照、[`std::nullptr_t`](/reference/cstddef/nullptr_t.md)、[プレースホルダ型](/lang/cpp17/declaring_non-type_template_arguments_with_auto.md)の値しか受け取ることが許可されていなかった。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンセプト [P0734R0] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/concepts.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/concepts.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/concepts.md b/lang/cpp20/concepts.md
index 94b288806..97d65c35c 100644
--- a/lang/cpp20/concepts.md
+++ b/lang/cpp20/concepts.md
@@ -1,13 +1,13 @@
 # コンセプト [P0734R0]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++20から導入される「コンセプト (concepts)」は、テンプレートパラメータを制約する機能である。この機能を使用することで、以下のような面でプログラミングのしやすさが向上する：
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>一貫比較 [P0515R3] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/consistent_comparison.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/consistent_comparison.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/consistent_comparison.md b/lang/cpp20/consistent_comparison.md
index 91c1df457..5b8cac2d3 100644
--- a/lang/cpp20/consistent_comparison.md
+++ b/lang/cpp20/consistent_comparison.md
@@ -1,13 +1,13 @@
 # 一貫比較 [P0515R3]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 新しく三方比較演算子`&amp;lt;=&amp;gt;`が導入されることにより、順序付けと同値比較の6つの関係演算子（`&amp;lt;`, `&amp;lt;=`, `&amp;gt;`, `&amp;gt;=`, `==`, `!=`）を容易に実装することができるようになる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンパイル時初期化を強制する`constinit`キーワードを追加 [P1143R2] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/constinit.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/constinit.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/constinit.md b/lang/cpp20/constinit.md
index e23305588..278c0de2d 100644
--- a/lang/cpp20/constinit.md
+++ b/lang/cpp20/constinit.md
@@ -1,13 +1,13 @@
 # コンパイル時初期化を強制する`constinit`キーワードを追加 [P1143R2]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ポインタから`bool`への変換を縮小変換とする [P1957R2] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md b/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md
index 7b2b886e8..2c03a7b4d 100644
--- a/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md
+++ b/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md
@@ -1,13 +1,13 @@
 # ポインタから`bool`への変換を縮小変換とする [P1957R2]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コルーチン [P0912R5] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/coroutines.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/coroutines.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/coroutines.md b/lang/cpp20/coroutines.md
index b01763587..a85f03595 100644
--- a/lang/cpp20/coroutines.md
+++ b/lang/cpp20/coroutines.md
@@ -1,13 +1,13 @@
 # コルーチン [P0912R5]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 処理途中でのサスペンド(中断)／レジューム(再開)をサポートする一般化された関数として、[コルーチン](https://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%AB%E3%83%BC%E3%83%81%E3%83%B3)が導入される。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>状態を持たないラムダ式を、デフォルト構築可能、代入可能とする [P0624R2] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md b/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md
index 9cad42c30..43c2c464d 100644
--- a/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md
+++ b/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md
@@ -1,13 +1,13 @@
 # 状態を持たないラムダ式を、デフォルト構築可能、代入可能とする [P0624R2]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ビットフィールドのメンバ変数初期化 [P0683R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/default_member_initializers_for_bit_fields.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/default_member_initializers_for_bit_fields.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/default_member_initializers_for_bit_fields.md b/lang/cpp20/default_member_initializers_for_bit_fields.md
index 3d3bdb4d9..89b4aa3f7 100644
--- a/lang/cpp20/default_member_initializers_for_bit_fields.md
+++ b/lang/cpp20/default_member_initializers_for_bit_fields.md
@@ -1,13 +1,13 @@
 # ビットフィールドのメンバ変数初期化 [P0683R1]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++11で導入された[非静的メンバ変数の初期化子](/lang/cpp11/non_static_data_member_initializers.md)では、ビットフィールドは対象外であった。
@@ -83,4 +83,4 @@ int main()
 ## 参照
 - [P0187R0 Proposal of Bitfield Default Member Initializers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0187r0.pdf)
 - [R0187R1 Proposal/Wording for Bit-field Default Member Initializer Syntax](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0187r1.pdf)
-- [P0683R1 Default member initializers for bit-fields](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0683r1.html)
+- [P0683R1 Default member initializers for bit-fields](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0683r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[=]によるthisの暗黙のキャプチャを非推奨化 [P0806R2] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md b/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md
index 795b36fe4..a2006710a 100644
--- a/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md
+++ b/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md
@@ -1,13 +1,13 @@
 # [=]によるthisの暗黙のキャプチャを非推奨化 [P0806R2]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++20からは、ラムダ式でのデフォルトコピーのキャプチャ指定`[=]`での`this`ポインタのキャプチャは非推奨となる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>PODを非推奨化 [P0767R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecate_pod.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/deprecate_pod.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;PODを非推奨化 [P0767R1]&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative_page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;../../reference/type_traits/is_pod.html&#34;&gt;POD (Plain Old Data) という型の分類&lt;/a&gt;は、C++11において&lt;a href=&#34;../../reference/type_traits/is_trivial.html&#34;&gt;トリビアル型&lt;/a&gt;と&lt;a href=&#34;../../reference/type_traits/is_standard_layout.html&#34;&gt;スタンダードレイアウト型&lt;/a&gt;に用語が分割された。&lt;/p&gt;
&lt;p&gt;C++20では規格の文面に残っていた「POD」の使用をやめ、スタンダードレイアウト型などのほかの型分類に置き換えた。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_pod.html&#34;&gt;is_pod&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/aligned_storage.html&#34;&gt;aligned_storage&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/aligned_union.html&#34;&gt;aligned_union&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cstddef/max_align_t.html&#34;&gt;max_align_t&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0767r1.html&#34; target=&#34;_blank&#34;&gt;P0767R1 Deprecate POD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2342.htm&#34; target=&#34;_blank&#34;&gt;N2342 POD&#39;s Revisited; Resolving Core Issue 568 (Revision 5)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://faithandbrave.hateblo.jp/entry/20081127/1227777378&#34; target=&#34;_blank&#34;&gt;C++0x POD再考 - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C++11においてPODという用語が分割された文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>添字演算子内でのカンマ演算子の使用を非推奨化 [P1161R3] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md b/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md
index d5e8cabe3..be7420c5b 100644
--- a/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md
+++ b/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md
@@ -1,13 +1,13 @@
 # 添字演算子内でのカンマ演算子の使用を非推奨化 [P1161R3]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 多次元配列クラスを設計する場合などで、単一の引数しかとれない添字演算子に`ar[x, y]`のようにカンマ演算子をオーバーロードして複数のインデックスを指定できるようにすることがあった。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ほとんどの`volatile`を非推奨化 [P1152R4] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecating_volatile.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/deprecating_volatile.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/deprecating_volatile.md b/lang/cpp20/deprecating_volatile.md
index e839c4a6e..9586db0d6 100644
--- a/lang/cpp20/deprecating_volatile.md
+++ b/lang/cpp20/deprecating_volatile.md
@@ -1,13 +1,13 @@
 # ほとんどの`volatile`を非推奨化 [P1152R4]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>指示付き初期化 [P0329R4] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/designated_initialization.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/designated_initialization.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/designated_initialization.md b/lang/cpp20/designated_initialization.md
index f21a37367..257318aed 100644
--- a/lang/cpp20/designated_initialization.md
+++ b/lang/cpp20/designated_initialization.md
@@ -2,13 +2,13 @@
 
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++20では、波カッコによる集成体初期化においてメンバ名を指定して初期化が行える。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>型の文脈でtypenameの省略を許可 [P0634R3] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/down_with_typename.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/down_with_typename.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/down_with_typename.md b/lang/cpp20/down_with_typename.md
index 669457506..332621f08 100644
--- a/lang/cpp20/down_with_typename.md
+++ b/lang/cpp20/down_with_typename.md
@@ -2,13 +2,13 @@
 
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変長データを扱うクラスの効率的なdelete [P0722R3] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md b/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md
index 90f56aa92..e995bf577 100644
--- a/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md
+++ b/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md
@@ -1,13 +1,13 @@
 # 可変長データを扱うクラスの効率的なdelete [P0722R3]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数内で未評価のインラインアセンブリを許可することによる組み込み関数のconstexpr有効化 [P1668R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md b/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md
index 0a947a798..ecbff6e9f 100644
--- a/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md
+++ b/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md
@@ -1,13 +1,13 @@
 # constexpr関数内で未評価のインラインアセンブリを許可することによる組み込み関数のconstexpr有効化 [P1668R1]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>関数を条件付きでexplicitにする構文を追加 [P0892R2] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/explicit_bool.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/explicit_bool.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/explicit_bool.md b/lang/cpp20/explicit_bool.md
index 64a1ffee3..c8e39641d 100644
--- a/lang/cpp20/explicit_bool.md
+++ b/lang/cpp20/explicit_bool.md
@@ -1,13 +1,13 @@
 # 関数を条件付きでexplicitにする構文を追加 [P0892R2]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++20では、関数を条件付きで`explicit`にする構文が追加された。コンストラクタと変換演算子に指定する`explicit`指定子に、`explicit(true)`、`explicit(false)`のように`bool`に変換可能な定数式を指定する。`true`に評価される値を指定することで、その関数は`explicit`となる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>構造化束縛を拡張して通常の変数宣言のように使用できるようにする [P1091R3] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.md b/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.md
index 8873ff8d0..9d73404bc 100644
--- a/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.md
+++ b/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.md
@@ -1,13 +1,13 @@
 # 構造化束縛を拡張して通常の変数宣言のように使用できるようにする [P1091R3]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++17で導入された構造化束縛宣言に指定しておけるのはCV修飾のみで、記憶域クラスや`constexpr`等を指定することは出来なかった。  
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ジェネリックラムダのテンプレート構文 [P0428R2] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/familiar_template_syntax_for_generic_lambdas.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/familiar_template_syntax_for_generic_lambdas.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/familiar_template_syntax_for_generic_lambdas.md b/lang/cpp20/familiar_template_syntax_for_generic_lambdas.md
index 5a08c5809..bd1567078 100644
--- a/lang/cpp20/familiar_template_syntax_for_generic_lambdas.md
+++ b/lang/cpp20/familiar_template_syntax_for_generic_lambdas.md
@@ -1,13 +1,13 @@
 # ジェネリックラムダのテンプレート構文 [P0428R2]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++14では、ラムダ式のパラメータ型に`auto`キーワードを使用することで、任意の型のパラメータを受け取れるようになった：
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>機能テストマクロ -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/feature_test_macros.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/feature_test_macros.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;機能テストマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;h3&gt;言語機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_aggregate_paren_init&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;allow_initializing_aggregates_from_a_parenthesized_list_of_values.html&#34;&gt;丸カッコの値リストからの集成体初期化を許可&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_char8_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;char8_t.html&#34;&gt;UTF-8エンコーディングされた文字の型として&lt;code&gt;char8_t&lt;/code&gt;を追加&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_concepts&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;concepts.html&#34;&gt;コンセプト&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_conditional_explicit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;explicit_bool.html&#34;&gt;関数を条件付きで&lt;code&gt;explicit&lt;/code&gt;にする構文を追加&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;allow_virtual_function_calls_in_constant_expressions.html&#34;&gt;定数式からの仮想関数の呼び出しを許可&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.html&#34;&gt;定数式での&lt;code&gt;dynamic_cast&lt;/code&gt;、多態的な&lt;code&gt;typeid&lt;/code&gt;を許可&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;try-catch_blocks_in_constexpr_functions.html&#34;&gt;constexpr関数内でのtry-catchブロックを許可&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;changing_the_active_member_of_a_union_inside_constexpr.html&#34;&gt;定数式内での共用体のアクティブメンバの変更を許可&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;permitting_trivial_default_initialization_in_constexpr_contexts.html&#34;&gt;constexpr関数内でのトリビアルなデフォルト初期化を許可&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.html&#34;&gt;constexpr関数内で未評価のインラインアセンブリを許可することによる組み込み関数のconstexpr有効化&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr_dynamic_alloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;more_constexpr_containers.html&#34;&gt;可変サイズをもつコンテナの&lt;code&gt;constexpr&lt;/code&gt;化&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr_in_decltype&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;less_eager_instantiation_of_constexpr_functions.html&#34;&gt;評価されない文脈での定数式評価によって特殊メンバ関数がインスタンス化されることを規定&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_consteval&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;immediate_functions.html&#34;&gt;即時関数&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constinit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;constinit.html&#34;&gt;コンパイル時初期化を強制する&lt;code&gt;constinit&lt;/code&gt;キーワードを追加&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_deduction_guides&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;class_template_argument_deduction_for_aggregates.html&#34;&gt;集成体クラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;class_template_argument_deduction_for_alias_templates.html&#34;&gt;エイリアステンプレート経由でのクラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_designated_initializers&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201707L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;designated_initialization.html&#34;&gt;指示付き初期化&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_generic_lambdas&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201707L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;familiar_template_syntax_for_generic_lambdas.html&#34;&gt;ジェネリックラムダのテンプレート構文&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_impl_coroutine&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;coroutines.html&#34;&gt;コルーチン&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_impl_destroying_delete&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;efficient_sized_delete_for_variable_sized_classes.html&#34;&gt;可変長データを扱うクラスの効率的な&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_impl_three_way_comparison&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;consistent_comparison.html&#34;&gt;一貫比較&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_init_captures&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201803L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;allow_pack_expansion_in_lambda_init_capture.html&#34;&gt;ラムダ式の初期化キャプチャでのパック展開を許可&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_modules&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;modules.html&#34;&gt;モジュール&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_nontype_template_args&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201911L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;class_types_in_non-type_template_parameters.html&#34;&gt;非型テンプレートパラメータとしてクラス型を許可する&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_using_enum&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;using_enum.html&#34;&gt;スコープ付き列挙型のusing宣言&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ライブラリ&lt;/h3&gt;
&lt;p&gt;ライブラリの機能テストマクロは全て&lt;code&gt;&lt;a href=&#34;../../reference/version.html&#34;&gt;&amp;lt;version&amp;gt;&lt;/a&gt;&lt;/code&gt;でも提供される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_array_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201803L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::array&lt;/code&gt;の完全&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/array.html&#34;&gt;&amp;lt;array&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_assume_aligned&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/assume_aligned.html&#34;&gt;std::assume_aligned()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_flag_test&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic_flag/test.html&#34;&gt;std::atomic_flag::test()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/atomic/atomic.html&#34;&gt;&lt;code&gt;std::atomic&lt;/code&gt;の浮動小数点数型に対する特殊化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_lock_free_type_aliases&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic.html&#34;&gt;atomic_signed_lock_free/atomic_unsigned_lock_free&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_ref&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic_ref.html&#34;&gt;std::atomic_ref&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_shared_ptr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/memory/atomic.html&#34;&gt;&lt;code&gt;std::atomic&lt;/code&gt;の&lt;code&gt;std::shared_ptr/std::weak_ptr&lt;/code&gt;に対する特殊化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_value_initialization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201911L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/atomic/atomic_flag/op_constructor.html&#34;&gt;&lt;code&gt;std::atomic_flag&lt;/code&gt;の値初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_wait&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic/wait.html&#34;&gt;std::atomic::wait()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic/notify_one.html&#34;&gt;std::atomic::notify_one()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic/notify_all.html&#34;&gt;std::atomic::notify_all()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_barrier&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/barrier.html&#34;&gt;&amp;lt;barrier&amp;gt;&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/barrier.html&#34;&gt;&amp;lt;barrier&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_bind_front&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional/bind_front.html&#34;&gt;std::bind_front()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_bit_cast&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit/bit_cast.html&#34;&gt;std::bit_cast()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_bitops&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_bounded_array_traits&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_bounded_array.html&#34;&gt;std::is_bounded_array&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_unbounded_array.html&#34;&gt;std::is_unbounded_array&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_char8_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;char8_t&lt;/code&gt;に対する特殊化の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/filesystem.html&#34;&gt;&amp;lt;filesystem&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/istream.html&#34;&gt;&amp;lt;istream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/limits.html&#34;&gt;&amp;lt;limits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/locale.html&#34;&gt;&amp;lt;locale&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ostream.html&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_chrono&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;カレンダーとタイムゾーン&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_concepts&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/concepts.html&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/concepts.html&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_algorithms&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多くのアルゴリズムに&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_complex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/complex/complex.html&#34;&gt;std::complex&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/complex.html&#34;&gt;&amp;lt;complex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_dynamic_alloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/destroy_at.html&#34;&gt;std::destroy_at&lt;/a&gt;&lt;/code&gt;ファミリと&lt;code&gt;&lt;a href=&#34;../../reference/memory/allocator.html&#34;&gt;std::allocator&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&#34;../../reference/memory/allocator_traits.html&#34;&gt;std::alocator_traits&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/construct_at.html&#34;&gt;std::construct_at&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_functional&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::invoke&lt;/code&gt;、&lt;code&gt;std::reference_wrapper&lt;/code&gt;、&lt;code&gt;std::not_fn&lt;/code&gt;、&lt;code&gt;std::bind_front&lt;/code&gt;、&lt;code&gt;std::bind&lt;/code&gt;、&lt;code&gt;std::mem_fn&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator/back_insert_iterator.html&#34;&gt;back_insert_iterator&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../../reference/iterator/front_insert_iterator.html&#34;&gt;front_insert_iterator&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../../reference/iterator/insert_iterator.html&#34;&gt;insert_iterator&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_memory&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/pointer_traits.html&#34;&gt;std::pointer_traits&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_numeric&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201911L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;の数値アルゴリズムの&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string/basic_string.html&#34;&gt;std::string&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_string_view&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view/basic_string_view/copy.html&#34;&gt;std::string_view::copy&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_tuple&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple/tuple.html&#34;&gt;std::tuple&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;追加対応（一部のコンストラクタと代入演算子）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple.html&#34;&gt;&amp;lt;tuple&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_utility&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility/pair.html&#34;&gt;std::pair&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;追加対応（一部のコンストラクタと代入演算子）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_vector&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/vector/vector.html&#34;&gt;std::vector&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/vector.html&#34;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_coroutine&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/coroutine.html&#34;&gt;&amp;lt;coroutine&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダの追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/coroutine.html&#34;&gt;&amp;lt;coroutine&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_destroying_delete&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/new/destroying_delete_t.html&#34;&gt;std::destroying_delete_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/new.html&#34;&gt;&amp;lt;new&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_endian&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit/endian.html&#34;&gt;std::endian&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_erase_if&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;各コンテナに対する&lt;code&gt;std::erase&lt;/code&gt;、&lt;code&gt;std::erase_if&lt;/code&gt;の特殊化&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/deque.html&#34;&gt;&amp;lt;deque&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/forward_list.html&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/list.html&#34;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/vector.html&#34;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/set.html&#34;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_set.html&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_execution&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/execution/execution/execution_policy.html&#34;&gt;std::execution::unsequenced_policy&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/execution.html&#34;&gt;&amp;lt;execution&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_format&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;202106L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;202110L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt;ヘッダ&lt;br /&gt;コンパイル時フォーマット文字列検査/&lt;code&gt;&lt;a href=&#34;../../reference/format/vformat.html&#34;&gt;std::vformat&lt;/a&gt;&lt;/code&gt;のコードサイズ削減&lt;br /&gt;&lt;code&gt;std::chrono&lt;/code&gt;のフォーマットにおけるロケール指定の修正/&lt;code&gt;const&lt;/code&gt;だとフォーマットできない型に対する対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/format.html&#34;&gt;&amp;lt;format&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_generic_unordered_lookup&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非順序連想コンテナの&lt;code&gt;find(), count(), contains(), equal_range()&lt;/code&gt;に対するHeterogeneous Overload追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_set.html&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_int_pow2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;bit&amp;gt;&lt;/code&gt;の2の冪乗に関する操作を行う関数の名前変更&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_integer_comparison_functions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility/cmp_equal.html&#34;&gt;std::cmp_equal()&lt;/a&gt;&lt;/code&gt;等の整数比較関数と&lt;code&gt;&lt;a href=&#34;../../reference/utility/in_range.html&#34;&gt;std::in_range()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_interpolate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cmath/lerp.html&#34;&gt;std::lerp()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/numeric/midpoint.html&#34;&gt;std::midpoint()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_constant_evaluated&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_constant_evaluated.html&#34;&gt;std::is_constant_evaluated()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_layout_compatible&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_layout_compatible.html&#34;&gt;std::is_layout_compatible&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_corresponding_member.html&#34;&gt;is_corresponding_member&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_nothrow_convertible&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_nothrow_convertible.html&#34;&gt;std::is_nothrow_convertible&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_pointer_interconvertible&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_corresponding_member.html&#34;&gt;std::is_corresponding_member&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_pointer_interconvertible_base_of.html&#34;&gt;std::is_pointer_interconvertible_base_of&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_jthread&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201911L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/thread/jthread.html&#34;&gt;std::jthread&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;stop_token&lt;/code&gt;による協調的キャンセル機構&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/stop_token.html&#34;&gt;&amp;lt;stop_token&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/thread.html&#34;&gt;&amp;lt;thread&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_latch&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/latch/latch.html&#34;&gt;std::latch&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/latch.html&#34;&gt;&amp;lt;latch&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_list_remove_return_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::list&lt;/code&gt;と&lt;code&gt;std::forward_list&lt;/code&gt;の&lt;code&gt;remove(), remove_if(), unique()&lt;/code&gt;の戻り値型変更&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/forward_list.html&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/list.html&#34;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_math_constants&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数学定数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numbers.html&#34;&gt;&amp;lt;numbers&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_polymorphic_allocator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory_resource/polymorphic_allocator.html&#34;&gt;std::pmr::polymorphic_allocator&lt;/a&gt;&lt;/code&gt;の改修&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201911L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;202106L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;202110L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;RangeライブラリとRangeアルゴリズム&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/view.html&#34;&gt;view&lt;/a&gt;&lt;/code&gt;コンセプトのデフォルト構築要求を削除&lt;br /&gt;所有権を持つ&lt;code&gt;view&lt;/code&gt;の許可と&lt;code&gt;&lt;a href=&#34;../../reference/ranges/owning_view.html&#34;&gt;owning_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_remove_cvref&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/remove_cvref.html&#34;&gt;std::remove_cvref&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_semaphore&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/semaphore/counting_semaphore.html&#34;&gt;std::counting_semaphore&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;std::binary_semaphore&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/semaphore.html&#34;&gt;&amp;lt;semaphore&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shared_ptr_arrays&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201707L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/make_shared.html&#34;&gt;std::make_shared&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/memory/allocate_shared.html&#34;&gt;std::allocate_shared&lt;/a&gt;&lt;/code&gt;の配列対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shift&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/shift_left.html&#34;&gt;std::shift_left&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/shift_right.html&#34;&gt;std::shift_right&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_smart_ptr_for_overwrite&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/make_shared_for_overwrite.html&#34;&gt;std::make_shared_for_overwrite()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/memory/allocate_shared_for_overwrite.html&#34;&gt;std::allocate_shared_for_overwrite()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_source_location&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/source_location/source_location.html&#34;&gt;std::source_location&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/source_location.html&#34;&gt;&amp;lt;source_location&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_span&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/span/span.html&#34;&gt;std::span&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/span.html&#34;&gt;&amp;lt;span&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ssize&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator/ssize.html&#34;&gt;std::ssize()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;std::span&lt;/code&gt;で使用する整数型の符号なし（&lt;code&gt;size_t&lt;/code&gt;）への変更&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_starts_ends_with&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::string&lt;/code&gt;と&lt;code&gt;std::string_view&lt;/code&gt;の&lt;code&gt;starts_with()&lt;/code&gt;と&lt;code&gt;ends_with()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_string_view&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201803L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::string&lt;/code&gt;と&lt;code&gt;std::string_view&lt;/code&gt;のイテレータの&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_syncbuf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201803L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同期化出力ストリーム（&lt;code&gt;std::osyncstream&lt;/code&gt;）とバッファ（&lt;code&gt;std::syncbuf&lt;/code&gt;）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/syncstream.html&#34;&gt;&amp;lt;syncstream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_three_way_comparison&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;標準ライブラリの三方比較演算子対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_to_address&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/to_address.html&#34;&gt;std::to_address()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_to_array&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/array/to_array.html&#34;&gt;std::to_array()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/array.html&#34;&gt;&amp;lt;array&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_type_identity&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/type_identity.html&#34;&gt;std::type_identity&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_unwrap_ref&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/unwrap_reference.html&#34;&gt;std::unwrap_reference&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/unwrap_ref_decay.html&#34;&gt;std::unwrap_ref_decay&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations&#34; target=&#34;_blank&#34;&gt;SD-FeatureTest: Feature-Test Macros and Policies - isocpp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>const修飾されたメンバポインタの制限を修正 [P0704R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/fixing_const_qualified_pointers_to_members.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/fixing_const_qualified_pointers_to_members.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/fixing_const_qualified_pointers_to_members.md b/lang/cpp20/fixing_const_qualified_pointers_to_members.md
index cd37f4917..b5fb53549 100644
--- a/lang/cpp20/fixing_const_qualified_pointers_to_members.md
+++ b/lang/cpp20/fixing_const_qualified_pointers_to_members.md
@@ -1,13 +1,13 @@
 # const修飾されたメンバポインタの制限を修正 [P0704R1]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++11で[メンバ関数を左辺値／右辺値修飾](/lang/cpp11/ref_qualifier_for_this.md)する機能が導入された。その際、以下の例において、同じ関数を呼び出す場合でも、メンバ関数ポインタを介した方だけが不適格となっていた：
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>autoパラメータによる関数テンプレートの簡易定義 -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/function_templates_with_auto_parameters.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/function_templates_with_auto_parameters.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/function_templates_with_auto_parameters.md b/lang/cpp20/function_templates_with_auto_parameters.md
index dfb0844cd..445873b43 100644
--- a/lang/cpp20/function_templates_with_auto_parameters.md
+++ b/lang/cpp20/function_templates_with_auto_parameters.md
@@ -1,13 +1,13 @@
 # autoパラメータによる関数テンプレートの簡易定義
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++14で導入された[ジェネリックラムダ](/lang/cpp14/generic_lambdas.md)と同様に、通常の関数もパラメータ型を`auto`にすることで、簡易的に関数テンプレートを定義できるようにする。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>即時関数 [P1073R3] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/immediate_functions.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/immediate_functions.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/immediate_functions.md b/lang/cpp20/immediate_functions.md
index 3aab076fe..4bcdff0d8 100644
--- a/lang/cpp20/immediate_functions.md
+++ b/lang/cpp20/immediate_functions.md
@@ -2,13 +2,13 @@
 
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>未初期化領域への暗黙的なオブジェクト構築 -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md b/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
index 1abdbef19..632a6de5e 100644
--- a/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
+++ b/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
@@ -1,13 +1,13 @@
 # 未初期化領域への暗黙的なオブジェクト構築
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>空オブジェクトに対する最適化を支援する属性[[no_unique_address]] [P0840R2] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/language_support_for_empty_objects.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/language_support_for_empty_objects.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/language_support_for_empty_objects.md b/lang/cpp20/language_support_for_empty_objects.md
index e44221ece..f1b35705e 100644
--- a/lang/cpp20/language_support_for_empty_objects.md
+++ b/lang/cpp20/language_support_for_empty_objects.md
@@ -2,13 +2,13 @@
 
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>評価されない文脈での定数式評価によって特殊メンバ関数がインスタンス化されることを規定 [P0859R0] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/less_eager_instantiation_of_constexpr_functions.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/less_eager_instantiation_of_constexpr_functions.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/less_eager_instantiation_of_constexpr_functions.md b/lang/cpp20/less_eager_instantiation_of_constexpr_functions.md
index 0620316fb..3628038c7 100644
--- a/lang/cpp20/less_eager_instantiation_of_constexpr_functions.md
+++ b/lang/cpp20/less_eager_instantiation_of_constexpr_functions.md
@@ -1,13 +1,13 @@
 # 評価されない文脈での定数式評価によって特殊メンバ関数がインスタンス化されることを規定 [P0859R0]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 以前まで、デフォルトコンストラクタやムーブコンストラクタといった特殊メンバ関数は、odr-usedになった段階で定義される規定になっていた。しかし、`sizeof`や`decltype`のオペランドのような評価されない文脈においてはodr-usedにならないため、そのような文脈では特殊メンバ関数が使用できなかった。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>確率が高い分岐と低い分岐を伝える属性 [[likely]], [[unlikely]] [P0479R5] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/likely_and_unlikely_attributes.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/likely_and_unlikely_attributes.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/likely_and_unlikely_attributes.md b/lang/cpp20/likely_and_unlikely_attributes.md
index 134f04393..f368c8873 100644
--- a/lang/cpp20/likely_and_unlikely_attributes.md
+++ b/lang/cpp20/likely_and_unlikely_attributes.md
@@ -1,13 +1,13 @@
 # 確率が高い分岐と低い分岐を伝える属性 [[likely]], [[unlikely]] [P0479R5]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 if文やswitch文といった分岐制御構文において、条件分岐先のうちどれが実行される可能性が高いかという情報を、C++コンパイラへ最適化ヒントとして与える属性である。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>char16_tとchar32_tの文字・文字列リテラルを、文字コードUTF-16/32に規定 [P1041R4] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/make_char16t_char32t_string_literals_be_utf16_32.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/make_char16t_char32t_string_literals_be_utf16_32.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;char16_tとchar32_tの文字・文字列リテラルを、文字コードUTF-16/32に規定 [P1041R4]&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative_page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++11で追加された文字型&lt;a href=&#34;../cpp11/char16_32.html&#34;&gt;&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;&lt;/a&gt;の文字・文字列リテラルの文字コード、C++20からはUTF-16とUTF-32であることが規定される。&lt;/p&gt;
&lt;p&gt;これまでは、以下のような仕様であった：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;uchar&amp;gt;&lt;/code&gt;ヘッダでマクロ&lt;code&gt;__STDC_UTF_16__&lt;/code&gt;が定義される場合、&lt;code&gt;char16_t&lt;/code&gt;型の値はUTF-16の妥当なコードポイントを持つ。そうでない場合、&lt;code&gt;char16_t&lt;/code&gt;型の値は実装定義の文字コードとなる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;uchar&amp;gt;&lt;/code&gt;ヘッダでマクロ&lt;code&gt;__STDC_UTF_32__&lt;/code&gt;が定義される場合、&lt;code&gt;char32_t&lt;/code&gt;型の値はUTF-32の妥当なコードポイントを持つ。そうでない場合、&lt;code&gt;char32_t&lt;/code&gt;型の値は実装定義の文字コードとなる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++20では、無条件にUTF-16とUTF-32であることが規定される。&lt;/p&gt;
&lt;p&gt;なお、&lt;code&gt;u8&lt;/code&gt;プレフィックスをつけた文字・文字列リテラルは、UTF-8であることがこれまでに規定されていた。&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;これまで、&lt;code&gt;&amp;lt;uchar&amp;gt;&lt;/code&gt;ヘッダのマクロ&lt;code&gt;__STDC_UTF_16__&lt;/code&gt;と&lt;code&gt;__STDC_UTF_32__&lt;/code&gt;が定義されている場合にのみ、&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;はUTF-16/UTF-32エンコーディングであると規定されていた。&lt;/p&gt;
&lt;p&gt;しかし、これらが定義されなかった場合にコンパイラがほかのエンコーディングを選択することが疑わしかった。また、&lt;code&gt;char16_t&lt;/code&gt;の仕様として「サロゲートペア」が含まれているが、その概念をもつ他のよく知られた文字コードはない。単一の文字を32ビットで表現する他のよく知られた文字コードもない。&lt;/p&gt;
&lt;p&gt;実際にはすべての実装でこれらの文字・文字列リテラルはUTF-16とUTF-32にエンコーディングされるため、要件を示すだけではなく、より明確にするために、&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;の文字・文字列リテラルがUTF-16とUTF-32文字コードであることを規定する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../cpp11/char16_32.html&#34;&gt;C++11 &lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../cpp11/utf8_string_literals.html&#34;&gt;C++11 UTF-8文字列リテラル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../cpp17/utf8_character_literals.html&#34;&gt;C++17 UTF-8文字リテラル&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1041r4.html&#34; target=&#34;_blank&#34;&gt;P1041R4 Make &lt;code&gt;char16_t&lt;/code&gt;/&lt;code&gt;char32_t&lt;/code&gt; string literals be UTF-16/32&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>モジュール [P1103R3] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/modules.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/modules.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/modules.md b/lang/cpp20/modules.md
index b266f80a7..08c718408 100644
--- a/lang/cpp20/modules.md
+++ b/lang/cpp20/modules.md
@@ -1,13 +1,13 @@
 # モジュール [P1103R3]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++20では、ヘッダーファイル・ソースファイルに代わる新たなファイル分割の仕組みとしてモジュールが導入された。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変サイズをもつコンテナのconstexpr化 [P0784R7] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/more_constexpr_containers.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/more_constexpr_containers.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/more_constexpr_containers.md b/lang/cpp20/more_constexpr_containers.md
index 1f0d0d409..b8d3fafa9 100644
--- a/lang/cpp20/more_constexpr_containers.md
+++ b/lang/cpp20/more_constexpr_containers.md
@@ -1,13 +1,13 @@
 # 可変サイズをもつコンテナのconstexpr化 [P0784R7]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>入れ子名前空間定義でのインライン名前空間 [P1094R2] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/nested_inline_mamespaces.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/nested_inline_mamespaces.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/nested_inline_mamespaces.md b/lang/cpp20/nested_inline_mamespaces.md
index 3a18da472..a7afbfdcf 100644
--- a/lang/cpp20/nested_inline_mamespaces.md
+++ b/lang/cpp20/nested_inline_mamespaces.md
@@ -1,13 +1,13 @@
 # 入れ子名前空間定義でのインライン名前空間 [P1094R2]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++17で、入れ子の名前空間を`namespace ns1::ns2::ns3 {}`のように簡易的に定義できるようになったが、インライン名前空間の指定はできなかった。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[nodiscard]]をコンストラクタのオーバーロードごとに付加できるようにする -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/nodiscard_for_constructors.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/nodiscard_for_constructors.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/nodiscard_for_constructors.md b/lang/cpp20/nodiscard_for_constructors.md
index 7cf4e088f..85ba40bd0 100644
--- a/lang/cpp20/nodiscard_for_constructors.md
+++ b/lang/cpp20/nodiscard_for_constructors.md
@@ -1,13 +1,13 @@
 # [[nodiscard]]をコンストラクタのオーバーロードごとに付加できるようにする
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 戻り値が使用されない場合に警告を出力させる[`[[nodiscard]]`属性](/lang/cpp17/nodiscard.md)を、コンストラクタのオーバーロードに付加できるようにする。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[nodiscard]]属性に理由となる文字列を付加できるようにする [P1301R4] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/nodiscard_should_have_a_reason.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/nodiscard_should_have_a_reason.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/nodiscard_should_have_a_reason.md b/lang/cpp20/nodiscard_should_have_a_reason.md
index 9d061c9fb..e9d845f47 100644
--- a/lang/cpp20/nodiscard_should_have_a_reason.md
+++ b/lang/cpp20/nodiscard_should_have_a_reason.md
@@ -1,13 +1,13 @@
 # [[nodiscard]]属性に理由となる文字列を付加できるようにする [P1301R4]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 戻り値が使用されない場合に警告を出力させる[`[[nodiscard]]`属性](/lang/cpp17/nodiscard.md)に、戻り値を無視してはならない理由を文字列リテラルとして指定できるようにする。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>要素数不明の配列への変換を許可 [P0388R4] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md b/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md
index 5954a8f86..1bdd5244e 100644
--- a/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md
+++ b/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md
@@ -2,13 +2,13 @@
 
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数内でのトリビアルなデフォルト初期化を許可 [P1331R2] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md b/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md
index bdf68c483..d3567af8a 100644
--- a/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md
+++ b/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md
@@ -1,13 +1,13 @@
 # constexpr関数内でのトリビアルなデフォルト初期化を許可 [P1331R2]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>更新された定義済みマクロ -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/predefined_macros.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/predefined_macros.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;更新された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cplusplus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++のバージョン値を表す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/n4859.html&#34; target=&#34;_blank&#34;&gt;N4859 Editors&#39; Report -- Programming Languages -- C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ユーザー宣言したコンストラクタを持つクラスの集成体初期化を禁止 [P1008R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/prohibit_aggregates_with_user-declared_constructors.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/prohibit_aggregates_with_user-declared_constructors.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/prohibit_aggregates_with_user-declared_constructors.md b/lang/cpp20/prohibit_aggregates_with_user-declared_constructors.md
index 0b8756e49..dad12cf5d 100644
--- a/lang/cpp20/prohibit_aggregates_with_user-declared_constructors.md
+++ b/lang/cpp20/prohibit_aggregates_with_user-declared_constructors.md
@@ -1,13 +1,13 @@
 # ユーザー宣言したコンストラクタを持つクラスの集成体初期化を禁止 [P1008R1]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 ユーザー宣言されたコンストラクタをもつクラスを、集成体初期化によってコンストラクタを回避してオブジェクト構築できてしまっていた技法を禁止する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>初期化式をともなう範囲for文 [P0614R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/range-based_for_statements_with_initializer.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/range-based_for_statements_with_initializer.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/range-based_for_statements_with_initializer.md b/lang/cpp20/range-based_for_statements_with_initializer.md
index 826576870..a71755910 100644
--- a/lang/cpp20/range-based_for_statements_with_initializer.md
+++ b/lang/cpp20/range-based_for_statements_with_initializer.md
@@ -1,13 +1,13 @@
 # 初期化式をともなう範囲for文 [P0614R1]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 if文、switch文、for文と同様に、範囲for文でもそのスコープで使用する変数の初期化ができるよう構文を追加する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>構造化束縛した変数の参照キャプチャを許可 [P1381R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/reference_capture_of_structured_bindings.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/reference_capture_of_structured_bindings.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/reference_capture_of_structured_bindings.md b/lang/cpp20/reference_capture_of_structured_bindings.md
index 58673dec1..060659721 100644
--- a/lang/cpp20/reference_capture_of_structured_bindings.md
+++ b/lang/cpp20/reference_capture_of_structured_bindings.md
@@ -1,13 +1,13 @@
 # 構造化束縛した変数の参照キャプチャを許可 [P1381R1]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 構造化束縛した変数はラムダ式で参照キャプチャできない規定となっていたが、これを許可する。ただし、ビットフィールドを構造化束縛した変数は参照キャプチャできない。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>範囲for文がカスタマイゼーションポイントを見つけるルールを緩和 [P0962R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md b/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md
index a9b5ceb34..f7af4f4bc 100644
--- a/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md
+++ b/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md
@@ -1,13 +1,13 @@
 # 範囲for文がカスタマイゼーションポイントを見つけるルールを緩和 [P0962R1]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++17までは、範囲for文に指定するシーケンスの型が`begin`/`end`メンバのどちらかでも持っていれば`begin()`/`end()`メンバ関数を使用し、どちらも持っていなければADLで非メンバ関数の`begin()`/`end()`を探索する仕様となっていた。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>構造化束縛がカスタマイゼーションポイントを見つけるルールを緩和 [P0961R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.md b/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.md
index 3420cd9ca..62c18ce2a 100644
--- a/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.md
+++ b/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.md
@@ -1,13 +1,13 @@
 # 構造化束縛がカスタマイゼーションポイントを見つけるルールを緩和 [P0961R1]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++17までは、構造化束縛する対象の型が`get()`メンバ関数を持っていればその関数でメンバ変数を抽出し、持っていなければ非メンバ関数の`get()`関数で抽出する仕様となっていた。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>throw()による例外送出しない指定を削除 -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/remove_deprecated_nothrow_exception_specification.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/remove_deprecated_nothrow_exception_specification.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/remove_deprecated_nothrow_exception_specification.md b/lang/cpp20/remove_deprecated_nothrow_exception_specification.md
index 58fb85bbc..bab8f2cf8 100644
--- a/lang/cpp20/remove_deprecated_nothrow_exception_specification.md
+++ b/lang/cpp20/remove_deprecated_nothrow_exception_specification.md
@@ -1,13 +1,13 @@
 # throw()による例外送出しない指定を削除
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++11で例外送出しないことを指定する[`noexcept`](/lang/cpp11/noexcept.md)が追加されたことによって古い例外仕様は非推奨化の後に削除されたが、なにも例外送出しないことを表す`throw()`指定は`noexcept`と同じ意味になるよう仕様が変更されて非推奨機能として維持されていた。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>属性の名前空間を予約 -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/reserving_attribute_namespaces_for_future_use.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/reserving_attribute_namespaces_for_future_use.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;属性の名前空間を予約&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative_page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;将来的に標準で定義する属性のために、以下の名前空間の属性を予約する：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名前空間に属さない属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std&lt;/code&gt;および&lt;code&gt;std&lt;/code&gt; + 数字の名前空間の属性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../cpp11/attributes.html&#34;&gt;C++11 属性構文&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1908r1.pdf&#34; target=&#34;_blank&#34;&gt;P1908R1 Reserving Attribute Namespaces for Future Use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デフォルトのコピーコンストラクタと非constなコンストラクタが衝突する問題を修正 [P0641R2] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.md b/lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.md
index b2becb2f5..558609396 100644
--- a/lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.md
+++ b/lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.md
@@ -1,13 +1,13 @@
 # デフォルトのコピーコンストラクタと非constなコンストラクタが衝突する問題を修正 [P0641R2]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++17までは以下のように、自身の型の非`const`なオブジェクトをとるコンストラクタをもつクラスを定義し、
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>符号付き整数型が2の補数表現であることを規定 [P1236R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/signed_integers_are_twos_complement.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/signed_integers_are_twos_complement.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/signed_integers_are_twos_complement.md b/lang/cpp20/signed_integers_are_twos_complement.md
index cd9a35a4c..b8f277cf6 100644
--- a/lang/cpp20/signed_integers_are_twos_complement.md
+++ b/lang/cpp20/signed_integers_are_twos_complement.md
@@ -1,13 +1,13 @@
 # 符号付き整数型が2の補数表現であることを規定 [P1236R1]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++20では、符号付き整数型のビット表現を「2の補数 (Two&amp;#39;s Complement)」に規定する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>暗黙のラムダキャプチャを簡略化 [P0588R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/simplifying_implicit_lambda_capture.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/simplifying_implicit_lambda_capture.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/simplifying_implicit_lambda_capture.md b/lang/cpp20/simplifying_implicit_lambda_capture.md
index 7e7359643..2adf847c8 100644
--- a/lang/cpp20/simplifying_implicit_lambda_capture.md
+++ b/lang/cpp20/simplifying_implicit_lambda_capture.md
@@ -1,13 +1,13 @@
 # 暗黙のラムダキャプチャを簡略化 [P0588R1]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 ここでは、ラムダ式での暗黙のキャプチャについて、以下の問題を解決する：
@@ -37,4 +37,4 @@ void f() {
 - [C++20 構造化束縛を拡張して通常の変数宣言のように使用できるようにする](extending_structured_bindings_to_be_more_like_variable_declarations.md)
 
 ## 参照
-- [P0588R1 Simplifying implicit lambda capture](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0588r1.html)
+- [P0588R1 Simplifying implicit lambda capture](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0588r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数内でのtry-catchブロックを許可 [P1002R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/try-catch_blocks_in_constexpr_functions.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/try-catch_blocks_in_constexpr_functions.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/try-catch_blocks_in_constexpr_functions.md b/lang/cpp20/try-catch_blocks_in_constexpr_functions.md
index 5c99de598..390f029ff 100644
--- a/lang/cpp20/try-catch_blocks_in_constexpr_functions.md
+++ b/lang/cpp20/try-catch_blocks_in_constexpr_functions.md
@@ -1,13 +1,13 @@
 # constexpr関数内でのtry-catchブロックを許可 [P1002R1]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++20では、`constexpr`関数内でのtry-catchブロックの使用を許可する。ただし、`throw`式は従来通り許可せず、コンパイルエラーとなる (`throw`式は`constexpr`関数におけるアサーションのような役割)。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Unicode標準への参照を更新 -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/update_the_reference_to_the_unicode_standard.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/update_the_reference_to_the_unicode_standard.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Unicode標準への参照を更新&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;Unicode標準 (ISO/IEC 10646) としてこれまで、「ISO/IEC 10646-1:1993, Information technology — Universal Multiple-Octet Coded Character Set (UCS) — Part 1: Architecture and Basic Multilingual Plane」が参照されていた。&lt;/p&gt;
&lt;p&gt;従来の古い仕様への参照は、非推奨化された古い機能のものであるとして残し、Unicode標準の最新仕様「ISO/IEC 10646, Information technology — Universal Coded Character Set (UCS)」を参照するよう追加する。&lt;/p&gt;
&lt;p&gt;Unicode標準で非推奨化された用語UCS2とUCS4の扱いは、以下のようになる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UTC-32はUCS4と見なせるため、文字エンコーディングの説明ではUCS4の代わりにUTF-32を使用する&lt;/li&gt;
&lt;li&gt;ただしUTF-16はUCS2と見なすことができないため、古い機能のために古い仕様を参照するとして一部そのまま残す&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実装が常に最新のUnicode標準を参照していることから、この変更によるユーザーへの直接的な影響はない。&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;C++規格上ではISO/IEC 10646-1:1993を参照していても、実装は最新仕様に更新し続けていた。たとえば1996の仕様ではハングル文字のセットが削除されて別な位置に追加され、チベット文字が再追加された。実装はそれに対応している。&lt;/p&gt;
&lt;p&gt;また、C++標準が参照しているECMAScript標準でUnicode標準の参照が競合してしまう。&lt;/p&gt;
&lt;p&gt;Unicode標準での用語定義が変更されたことにも影響がある。UCS2とUCS4という用語が非推奨化されたために、その用語をC++標準が使用し続けることは望ましくない。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1025r1.html&#34; target=&#34;_blank&#34;&gt;P1025R1 Update The Reference To The Unicode Standard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スコープ付き列挙型のusing宣言 [P1099R5] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/using_enum.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/using_enum.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/using_enum.md b/lang/cpp20/using_enum.md
index 50f661ffd..f484e57a1 100644
--- a/lang/cpp20/using_enum.md
+++ b/lang/cpp20/using_enum.md
@@ -2,13 +2,13 @@
 
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変引数が空でない場合のトークン置換 [P0306R4] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/va_opt.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/va_opt.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/va_opt.md b/lang/cpp20/va_opt.md
index 1382eff72..5b2367020 100644
--- a/lang/cpp20/va_opt.md
+++ b/lang/cpp20/va_opt.md
@@ -1,13 +1,13 @@
 # 可変引数が空でない場合のトークン置換 [P0306R4]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 新たなプリプロセスマクロ`__VA_OPT__`を追加する。このマクロは、マクロのパラメータとして受け取った可変引数が空でない場合に置換するトークンを指定する機能を持つ。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>評価されない文脈でのラムダ式 [P0315R4] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md b/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md
index b630e29c5..73d50d05e 100644
--- a/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md
+++ b/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md
@@ -1,13 +1,13 @@
 # 評価されない文脈でのラムダ式 [P0315R4]
 * cpp20[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++20に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>elif/elifdef/elifndefのサポートを追加 [P2334R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md b/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md
index 531f80b99..b08bfdd8d 100644
--- a/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md
+++ b/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md
@@ -1,13 +1,13 @@
 # elif/elifdef/elifndefのサポートを追加 [P2334R1]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++23では、以下のプリプロセス時条件式が追加される：
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式に対する属性 [P2173R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/attributes_on_lambda_expressions.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/attributes_on_lambda_expressions.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/attributes_on_lambda_expressions.md b/lang/cpp23/attributes_on_lambda_expressions.md
index 7bb70ec96..2f6f162d7 100644
--- a/lang/cpp23/attributes_on_lambda_expressions.md
+++ b/lang/cpp23/attributes_on_lambda_expressions.md
@@ -1,13 +1,13 @@
 # ラムダ式に対する属性 [P2173R1]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++23では、ラムダ式のいくつかの箇所に属性を指定できる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>静的な診断メッセージの文字エンコーディング [P2246R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/character_encoding_of_diagnostic_text.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/character_encoding_of_diagnostic_text.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;静的な診断メッセージの文字エンコーディング [P2246R1]&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++23では、コンパイル時に診断メッセージを出力させる以下の機能について、ソースコードのエンコーディングが実行環境のエンコーディングで表現できない場合にどうするかの規定を見直す：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;static_assert&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[[deprecated]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#error&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++20までは、「基本ソース文字集合に含まれない文字は出力する必要はない」という規定になっていたが、基本ソース文字集合と実行環境のエンコーディングは関係ないものであるため、この規定を削除することとした。&lt;/p&gt;
&lt;p&gt;この規定はC20でも導入され、C++もそれに追従することとした。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2246r1.pdf&#34; target=&#34;_blank&#34;&gt;P2246R1 Character encoding of diagnostic text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg14/www/docs/n2563.pdf&#34; target=&#34;_blank&#34;&gt;WG14 N2563 Character encoding of diagnostic text&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>継承コンストラクタからのクラステンプレート引数の推論 [P2582R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/class_template_argument_deduction_from_inherited.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/class_template_argument_deduction_from_inherited.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/class_template_argument_deduction_from_inherited.md b/lang/cpp23/class_template_argument_deduction_from_inherited.md
index 89d13fb60..b6f22acbe 100644
--- a/lang/cpp23/class_template_argument_deduction_from_inherited.md
+++ b/lang/cpp23/class_template_argument_deduction_from_inherited.md
@@ -1,13 +1,13 @@
 # 継承コンストラクタからのクラステンプレート引数の推論 [P2582R1]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++23では、派生クラスで定義した継承コンストラクタからでも、クラステンプレート引数を推論できるようになる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>文字リテラルエンコーディングを一貫させる [P2316R2] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/consistent_character_literal_encoding.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/consistent_character_literal_encoding.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/consistent_character_literal_encoding.md b/lang/cpp23/consistent_character_literal_encoding.md
index 34537e3bd..716d42ac2 100644
--- a/lang/cpp23/consistent_character_literal_encoding.md
+++ b/lang/cpp23/consistent_character_literal_encoding.md
@@ -1,13 +1,13 @@
 # 文字リテラルエンコーディングを一貫させる [P2316R2]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++20までは、以下のような、プリプロセッサ上での文字リテラルの比較と、if文での文字リテラルの比較が同じであるという保証がなかった。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数内でconsteval関数を呼び出せない問題を軽減 [P2564R3] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/consteval_needs_to_propagate_up.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/consteval_needs_to_propagate_up.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/consteval_needs_to_propagate_up.md b/lang/cpp23/consteval_needs_to_propagate_up.md
index a0ba126e3..135fdb037 100644
--- a/lang/cpp23/consteval_needs_to_propagate_up.md
+++ b/lang/cpp23/consteval_needs_to_propagate_up.md
@@ -1,13 +1,13 @@
 # constexpr関数内でconsteval関数を呼び出せない問題を軽減 [P2564R3]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++23では、`consteval`呼び出しを含む`constexpr`関数を、条件付きで`consteval`関数と見なすようになる。そうすることで、定数式の文脈での`consteval`関数の使用がよりかんたんになる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>エスケープシーケンスの区切り [P2290R3] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/delimited_escape_sequences.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/delimited_escape_sequences.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/delimited_escape_sequences.md b/lang/cpp23/delimited_escape_sequences.md
index ca351ab41..667cb89c4 100644
--- a/lang/cpp23/delimited_escape_sequences.md
+++ b/lang/cpp23/delimited_escape_sequences.md
@@ -1,13 +1,13 @@
 # エスケープシーケンスの区切り [P2290R3]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++23では、文字列リテラル中に記述するエスケープシーケンスとユニバーサルキャラクタ名の範囲を明確にするための波カッコ (`{}`) で囲む構文が追加される。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式で()を省略できる条件を緩和 [P1102R2] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/down_with_lambda_parens.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/down_with_lambda_parens.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/down_with_lambda_parens.md b/lang/cpp23/down_with_lambda_parens.md
index 557c4a58c..d34ff34e3 100644
--- a/lang/cpp23/down_with_lambda_parens.md
+++ b/lang/cpp23/down_with_lambda_parens.md
@@ -1,13 +1,13 @@
 # ラムダ式で()を省略できる条件を緩和 [P1102R2]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++23では、ラムダ式のパラメータリストが空であれば、以下の要素を含む場合であってもパラメータリストの `()` を省略できる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>初期化文での型の別名宣言を許可 [P2360R0] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/extend_init_statement_to_allow_alias_declaration.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/extend_init_statement_to_allow_alias_declaration.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md b/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md
index 6fe9cd4b7..524a3aef6 100644
--- a/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md
+++ b/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md
@@ -1,13 +1,13 @@
 # 初期化文での型の別名宣言を許可 [P2360R0]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `if`文、`switch`文、範囲`for`文で初期化文を指定できるが、C++20までその初期化文では`typedef`による型の別名定義はできたが、`using`による型の別名定義はできなかった。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>機能テストマクロ -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/feature_test_macros.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/feature_test_macros.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;機能テストマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;h3&gt;言語機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ライブラリ&lt;/h3&gt;
&lt;p&gt;ライブラリの機能テストマクロは全て&lt;code&gt;&lt;a href=&#34;../../reference/version.html&#34;&gt;&amp;lt;version&amp;gt;&lt;/a&gt;&lt;/code&gt;でも提供される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_as_const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ranges::cbegin&lt;/code&gt;が常に定数イテレータを返すようにする&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_fold&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;fold&lt;/code&gt;アルゴリズム&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations&#34; target=&#34;_blank&#34;&gt;SD-FeatureTest: Feature-Test Macros and Policies - isocpp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>変数テンプレートの部分特殊化を許可 [P2096R2] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/generalized_wording_for_partial_specializations.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/generalized_wording_for_partial_specializations.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/generalized_wording_for_partial_specializations.md b/lang/cpp23/generalized_wording_for_partial_specializations.md
index 7feeb55a3..2c0a54ae7 100644
--- a/lang/cpp23/generalized_wording_for_partial_specializations.md
+++ b/lang/cpp23/generalized_wording_for_partial_specializations.md
@@ -1,13 +1,13 @@
 # 変数テンプレートの部分特殊化を許可 [P2096R2]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 変数テンプレートの仕様として、部分特殊化の許可を意図したような仕様はあったが、部分特殊化の多くの仕様はクラステンプレートのみを対象にしていた。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>if consteval [P1938R3] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/if_consteval.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/if_consteval.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/if_consteval.md b/lang/cpp23/if_consteval.md
index 15b1d65a8..2a4dde12c 100644
--- a/lang/cpp23/if_consteval.md
+++ b/lang/cpp23/if_consteval.md
@@ -1,13 +1,13 @@
 # if consteval [P1938R3]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++23では、`constexpr`関数がコンパイル時に呼ばれたかを判定するための構文として、`if consteval`を導入する。これは「consteval if文」と呼ばれる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>複合文の末尾へのラベルを許可 [P2324R2] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/labels_at_the_end_of_compound_statements.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/labels_at_the_end_of_compound_statements.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/labels_at_the_end_of_compound_statements.md b/lang/cpp23/labels_at_the_end_of_compound_statements.md
index 88ddf35bc..fcad6a6af 100644
--- a/lang/cpp23/labels_at_the_end_of_compound_statements.md
+++ b/lang/cpp23/labels_at_the_end_of_compound_statements.md
@@ -1,13 +1,13 @@
 # 複合文の末尾へのラベルを許可 [P2324R2]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C言語 (C23) との互換性のため、C言語で新しく許可された複合文の末尾 (関数末尾など`{}`ブロックの末尾) へのgotoラベルを許可する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>範囲for文が範囲初期化子内で生じた一時オブジェクトを延命することを規定 [P2718R0] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/lifetime_extension_in_range_based_for_loop.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/lifetime_extension_in_range_based_for_loop.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/lifetime_extension_in_range_based_for_loop.md b/lang/cpp23/lifetime_extension_in_range_based_for_loop.md
index c72b35aaf..e3ec77688 100644
--- a/lang/cpp23/lifetime_extension_in_range_based_for_loop.md
+++ b/lang/cpp23/lifetime_extension_in_range_based_for_loop.md
@@ -2,13 +2,13 @@
 
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 仕様
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>(符号付き)size_tリテラルのためのサフィックス [P0330R8] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/literal_suffix_for_signed_size_t.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/literal_suffix_for_signed_size_t.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/literal_suffix_for_signed_size_t.md b/lang/cpp23/literal_suffix_for_signed_size_t.md
index 0c9212fd2..e61c98564 100644
--- a/lang/cpp23/literal_suffix_for_signed_size_t.md
+++ b/lang/cpp23/literal_suffix_for_signed_size_t.md
@@ -1,13 +1,13 @@
 # (符号付き)size_tリテラルのためのサフィックス [P0330R8]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++23では、符号なし整数型[`size_t`](/reference/cstddef/size_t.md)に対応する符号付き整数型を表すリテラルの`z`および`Z`サフィックスを追加する。符号なしを表す`u`および`U`サフィックスをともに使用することで[`size_t`](/reference/cstddef/size_t.md)型のリテラルを記述できる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>アクセス制御の異なるメンバ変数のレイアウトを宣言順に規定 [P1847R4] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/make_declaration_order_layout_mandated.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/make_declaration_order_layout_mandated.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/make_declaration_order_layout_mandated.md b/lang/cpp23/make_declaration_order_layout_mandated.md
index 553fbfc23..22d80f260 100644
--- a/lang/cpp23/make_declaration_order_layout_mandated.md
+++ b/lang/cpp23/make_declaration_order_layout_mandated.md
@@ -1,13 +1,13 @@
 # アクセス制御の異なるメンバ変数のレイアウトを宣言順に規定 [P1847R4]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 以下のようなアクセス制御の異なるメンバ変数のメモリレイアウトは、実装に対して自由に並び替えてよい、という規定になっていたが、これを宣言順に規定する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>無意味なexport宣言を禁止する [P2615R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/meaningful_exports.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/meaningful_exports.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/meaningful_exports.md b/lang/cpp23/meaningful_exports.md
index e31e14bf8..3313123f3 100644
--- a/lang/cpp23/meaningful_exports.md
+++ b/lang/cpp23/meaningful_exports.md
@@ -1,13 +1,13 @@
 # 無意味なexport宣言を禁止する [P2615R1]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++20時点でのモジュール定義では、いくつかの不必要なexport宣言ができてしまっていた。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>異なる文字エンコーディングをもつ文字列リテラルの連結を不適格とする [P2201R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/mixed_string_literal_concatenation.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/mixed_string_literal_concatenation.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/mixed_string_literal_concatenation.md b/lang/cpp23/mixed_string_literal_concatenation.md
index ce4b343c4..b647b464c 100644
--- a/lang/cpp23/mixed_string_literal_concatenation.md
+++ b/lang/cpp23/mixed_string_literal_concatenation.md
@@ -1,13 +1,13 @@
 # 異なる文字エンコーディングをもつ文字列リテラルの連結を不適格とする [P2201R1]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++20までは、実装定義の動作として`L&amp;#34;&amp;#34;`、`u8&amp;#34;&amp;#34;`、`u&amp;#34;&amp;#34;`、`U&amp;#34;&amp;#34;`のようなエンコーディングが混在する文字列リテラルの連結を条件付きで許可していたが、これを禁止とする。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>添字演算子の多次元サポート [P2128R6] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/multidimensional_subscript_operator.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/multidimensional_subscript_operator.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/multidimensional_subscript_operator.md b/lang/cpp23/multidimensional_subscript_operator.md
index ddecaa776..ff6bf8e98 100644
--- a/lang/cpp23/multidimensional_subscript_operator.md
+++ b/lang/cpp23/multidimensional_subscript_operator.md
@@ -1,13 +1,13 @@
 # 添字演算子の多次元サポート [P2128R6]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++23では、多次元配列クラスを定義するために必要となる、添字演算子のオーバーロードを定義する際の複数引数を許可する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>名前付きユニバーサルキャラクタ名 [P2071R2] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/named_universal_character_escapes.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/named_universal_character_escapes.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/named_universal_character_escapes.md b/lang/cpp23/named_universal_character_escapes.md
index facbcc229..0efb58be2 100644
--- a/lang/cpp23/named_universal_character_escapes.md
+++ b/lang/cpp23/named_universal_character_escapes.md
@@ -1,13 +1,13 @@
 # 名前付きユニバーサルキャラクタ名 [P2071R2]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 これまで、Unicodeのユニバーサルキャラクタ名を指定するためには、`u8&amp;#34;\u0100&amp;#34;`のように`\u`または`\U`に続いてコードポイントを記述していた。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>定数式の文脈でのboolへの縮小変換を許可 [P1401R5] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/narrowing_contextual_conversions_to_bool.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/narrowing_contextual_conversions_to_bool.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/narrowing_contextual_conversions_to_bool.md b/lang/cpp23/narrowing_contextual_conversions_to_bool.md
index 8d383a547..b3ce704c2 100644
--- a/lang/cpp23/narrowing_contextual_conversions_to_bool.md
+++ b/lang/cpp23/narrowing_contextual_conversions_to_bool.md
@@ -1,13 +1,13 @@
 # 定数式の文脈でのboolへの縮小変換を許可 [P1401R5]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++23では、以下の定数式文脈での`bool`への縮小変換を許可する：
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>定数式内での非リテラル変数、静的変数・スレッドローカル変数およびgotoとラベルの存在を許可する [P2242R3] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/non_literal_variables_in_constexpr_functions.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/non_literal_variables_in_constexpr_functions.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;定数式内での非リテラル変数、静的変数・スレッドローカル変数およびgotoとラベルの存在を許可する [P2242R3]&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative_page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;constexpr&lt;/code&gt;関数が非リテラル変数、静的変数・スレッドローカル変数およびgoto文とラベルを含むことを許可する。&lt;/p&gt;
&lt;p&gt;ただし、これをコンパイル時に評価した場合、従来通りエラーとなる。
これらを含むコードパスは実行時にのみ通過するようにしなければならない。&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;これまでは、&lt;code&gt;constexpr&lt;/code&gt;関数内には非リテラル変数、静的変数・スレッドローカル変数およびgoto文とラベルが含まれてはならなかった。
これは、&lt;code&gt;constexpr&lt;/code&gt;関数が定数式実行できない要素を含んではならないという意味で、理にかなった制限であった。&lt;/p&gt;
&lt;p&gt;しかし、C++20で&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_constant_evaluated.html&#34;&gt;std::is_constant_evaluated&lt;/a&gt;&lt;/code&gt;によって定数式実行されるコードパスと実行時に通るコードパスを分けることが可能になり、状況が変化した。
定数式実行できないコードとはいえ、実行時にのみ通りコンパイル時には通らないコードパスに含まれていた場合にもプログラムが&lt;a class=&#34;cpprefjp-defined-word&#34;&gt;不適格&lt;/a&gt;となる、というのは直観に反する。&lt;/p&gt;
&lt;p&gt;よって、コンパイル時に評価されない限りにおいて、&lt;code&gt;constexpr&lt;/code&gt;関数内に非リテラル変数、静的変数・スレッドローカル変数およびgoto文とラベルを含むことが許可されることとなった。&lt;/p&gt;
&lt;p&gt;ただし、&lt;code&gt;constexpr&lt;/code&gt;内に存在することが許可されたものの定数式として評価できるわけではないので、これらの機能は依然としてコンパイル時に使用することはできない。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../cpp20/try-catch_blocks_in_constexpr_functions.html&#34;&gt;C++20 - constexpr関数内でのtry-catchブロックを許可&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.html&#34;&gt;C++20 - constexpr関数内で未評価のインラインアセンブリを許可することによる組み込み関数のconstexpr有効化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;permitting_static_constexpr_variables_in_constexpr_functions.html&#34;&gt;C++23 - &lt;code&gt;constexpr&lt;/code&gt;関数内での&lt;code&gt;static constexpr&lt;/code&gt;変数を許可&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2242r3.html&#34; target=&#34;_blank&#34;&gt;P2242R3 - Non-literal variables (and labels and gotos) in constexpr functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数内でのstatic constexpr変数を許可 [P2647R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.md b/lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.md
index 696f276a0..a1bacee1b 100644
--- a/lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.md
+++ b/lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.md
@@ -1,13 +1,13 @@
 # constexpr関数内でのstatic constexpr変数を許可 [P2647R1]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++23からは、`constexpr`関数内で定数を定義するために、`static constexpr`変数を使用できるようになる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コード内容の仮定をコンパイラに伝える`assume`属性 [P1774R8] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/portable_assumptions.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/portable_assumptions.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/portable_assumptions.md b/lang/cpp23/portable_assumptions.md
index 32316f200..5e011eec5 100644
--- a/lang/cpp23/portable_assumptions.md
+++ b/lang/cpp23/portable_assumptions.md
@@ -1,13 +1,13 @@
 # コード内容の仮定をコンパイラに伝える`assume`属性 [P1774R8]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 あるコード地点において実行時に満たすべき仮定(assumption)を、C++コンパイラへ最適化ヒントとして与える属性である。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>更新された定義済みマクロ -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/predefined_macros.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/predefined_macros.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;更新された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cplusplus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202302L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++のバージョン値を表す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/n4951.html&#34; target=&#34;_blank&#34;&gt;N4951 Editors’ Report: Programming Languages — C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数が定数実行できない場合でも適格とする [P2448R2] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/relaxing_some_constexpr_restrictions.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/relaxing_some_constexpr_restrictions.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/relaxing_some_constexpr_restrictions.md b/lang/cpp23/relaxing_some_constexpr_restrictions.md
index c473f793c..28be60df0 100644
--- a/lang/cpp23/relaxing_some_constexpr_restrictions.md
+++ b/lang/cpp23/relaxing_some_constexpr_restrictions.md
@@ -1,13 +1,13 @@
 # constexpr関数が定数実行できない場合でも適格とする [P2448R2]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>1ワイド文字に収まらないワイド文字リテラルを禁止する [P2362R3] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md b/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md
index 50fcf7747..bd9660542 100644
--- a/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md
+++ b/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md
@@ -1,13 +1,13 @@
 # 1ワイド文字に収まらないワイド文字リテラルを禁止する [P2362R3]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++23では、ワイド文字リテラルとして、以下を禁止する：
@@ -31,4 +31,4 @@ wchar_t c = &amp;#39;é́&amp;#39;;  // C++20:OK, C++23:NG \u0065\u0301
 
 
 ## 参照
-- [P2362R3 Remove non-encodable wide character literals and multicharacter wide character literals](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2362r3.pdf)
+- [P2362R3 Remove non-encodable wide character literals and multicharacter wide character literals](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2362r3.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>暗黙的なムーブを簡略化 [P2266R3] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/simpler_implicit_move.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/simpler_implicit_move.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/simpler_implicit_move.md b/lang/cpp23/simpler_implicit_move.md
index 2d8fa5284..b1359bab9 100644
--- a/lang/cpp23/simpler_implicit_move.md
+++ b/lang/cpp23/simpler_implicit_move.md
@@ -1,13 +1,13 @@
 # 暗黙的なムーブを簡略化 [P2266R3]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>thisポインタをもつ必要のない演算子をstaticとして宣言できるようにする [P1169R4] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/static_operator.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/static_operator.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/static_operator.md b/lang/cpp23/static_operator.md
index eb8a2b816..90d62ff87 100644
--- a/lang/cpp23/static_operator.md
+++ b/lang/cpp23/static_operator.md
@@ -1,13 +1,13 @@
 # thisポインタをもつ必要のない演算子をstaticとして宣言できるようにする [P1169R4]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 以下の演算子が`this`ポインタを必要としない (状態をもたない) 場合、演算子オーバーロードを`static`として定義できる：
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>汎用的なソースコードのエンコーディングとしてUTF-8をサポート [P2295R6] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/support_for_utf8_as_a_portable_source_file_encoding.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/support_for_utf8_as_a_portable_source_file_encoding.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;汎用的なソースコードのエンコーディングとしてUTF-8をサポート [P2295R6]&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++20まで、ソースコードの文字集合は実装定義だったが、その仕様では移植性に問題があった。C++23からは、すべてのコンパイラはUTF-8文字コードのソースコードをサポートしなければならないことが規定される。&lt;/p&gt;
&lt;p&gt;コンパイラは、ほかの文字コードと区別するため、入力ファイルがUTF-8であることを決定する実装定義の手段をもたなければならない。つまり、BOM (バイトオーダーマーク) を認識するだけでは十分ではない。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2295r6.pdf&#34; target=&#34;_blank&#34;&gt;P2295R6 Support for UTF-8 as a portable source file encoding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>行末スペースを無視するよう規定 [P2223R2] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/trimming_whitespaces_before_line_splicing.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/trimming_whitespaces_before_line_splicing.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/trimming_whitespaces_before_line_splicing.md b/lang/cpp23/trimming_whitespaces_before_line_splicing.md
index 690e28500..1901ad5e6 100644
--- a/lang/cpp23/trimming_whitespaces_before_line_splicing.md
+++ b/lang/cpp23/trimming_whitespaces_before_line_splicing.md
@@ -1,13 +1,13 @@
 # 行末スペースを無視するよう規定 [P2223R2]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 `\` (バックスラッシュ) 後の行末スペースを無視するよう規定する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>参照するPOSIX規格を更新 -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/update_normative_reference_to_posix.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/update_normative_reference_to_posix.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;参照するPOSIX規格を更新&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++20まではPOSIX規格としてISO/IEC 9945:2003 (別名POSIX.1-2001 aka The Single UNIX Specification, version 3) を参照していた。&lt;/p&gt;
&lt;p&gt;しかし、標準C++の一部の機能はより新しいPOSIX規格の機能を使用していたため、ISO/IEC 9945:2003への参照を削除した上で、以下の3つの規格を参照するよう変更する：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ISO/IEC/IEEE 9945:20032009, Information Technology — Portable Operating System Interface (POSIX)&lt;/li&gt;
&lt;li&gt;ISO/IEC/IEEE 9945:2009/Cor 1:2013, Information Technology — Portable Operating System Interface (POSIX), Technical Corrigendum 1&lt;/li&gt;
&lt;li&gt;ISO/IEC/IEEE 9945:2009/Cor 2:2017, Information Technology — Portable Operating System Interface (POSIX), Technical Corrigendum 2&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;posix&lt;/code&gt;名前空間の予約に関してのPOSIX規格の参照もまた、ISO/IEC 9945からISO/IEC/IEEE 9945に変更する。&lt;/p&gt;
&lt;p&gt;また、POSIXの一部環境で非推奨となっている機能である&lt;code&gt;readdir_r()&lt;/code&gt;を参照していたところを、&lt;code&gt;readdir()&lt;/code&gt;に置き換える。&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;ここでは、具体的に問題になった、標準C++が参照するPOSIXの機能を列挙する。&lt;/p&gt;
&lt;h3&gt;errno&lt;/h3&gt;
&lt;p&gt;C++03まで、&lt;code&gt;&lt;a href=&#34;../../reference/cerrno.html&#34;&gt;&amp;lt;cerrno&amp;gt;&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&amp;lt;errno.h&amp;gt;&lt;/code&gt;にはISO Cが要求する&lt;code&gt;EDOM&lt;/code&gt; (定義域エラー)、&lt;code&gt;ERANGE&lt;/code&gt; (値域エラー)、&lt;code&gt;errno&lt;/code&gt;といった必要最低限のマクロのみが含まれていた。&lt;/p&gt;
&lt;p&gt;C++11での&lt;code&gt;&lt;a href=&#34;../../reference/system_error.html&#34;&gt;&amp;lt;system_error&amp;gt;&lt;/a&gt;&lt;/code&gt;ライブラリの導入にともなって、「&lt;code&gt;&lt;a href=&#34;../../reference/cerrno.html&#34;&gt;&amp;lt;cerrno&amp;gt;&lt;/a&gt;&lt;/code&gt;で定義される内容は、&lt;code&gt;errno&lt;/code&gt;がマクロ定義されることを除いてPOSIXの&lt;code&gt;&amp;lt;errno.h&amp;gt;&lt;/code&gt;ヘッダと同じである」という規定となった。この規定のあとにマクロのリストが定義されるが、&lt;code&gt;ENOTRECOVERABLE&lt;/code&gt;と&lt;code&gt;EOWNERDEAD&lt;/code&gt;はPOSIXの2006規格、&lt;code&gt;ENOTSUP&lt;/code&gt;と&lt;code&gt;EOPNOTSUPP&lt;/code&gt;は2008規格で追加されたものだった。&lt;/p&gt;
&lt;p&gt;POSIXの2008年では標準C++で定義されるマクロのほかに&lt;code&gt;EDQUOT&lt;/code&gt;、&lt;code&gt;EMULTIHOP&lt;/code&gt;、&lt;code&gt;ENOLINK&lt;/code&gt;といった具体的な意味をもたない「予約済み」というだけのマクロももっている。すでに定義されている&lt;code&gt;ESTALE&lt;/code&gt;のようにそれらを標準C++に追加することは今後検討する必要はあるが、ここでは提案しない。&lt;/p&gt;
&lt;h3&gt;ファイルシステム&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&#34;../../reference/filesystem/path.html&#34;&gt;path&lt;/a&gt;&lt;/code&gt;クラスについて、POSIX.1-2008の4.12 Pathname ResolutionとPOSIX.1-2017の4.13 Pathname Resolutionを追加で参照する必要がある。&lt;/p&gt;
&lt;p&gt;ここで参照するほとんどの機能はPOSIX.1-2001に存在するが、ファイルの最終更新日時の&lt;code&gt;futimens()&lt;/code&gt;関数、ファイル権限の&lt;code&gt;fchmodat()&lt;/code&gt;関数は存在していない。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;truncate()&lt;/code&gt;と&lt;code&gt;statvfs()&lt;/code&gt;の機能はオプションであり、POSIXに準拠する環境に存在する必要がない。POSIX.1-2008ではこれらの機能がオプションではなくなった。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stat()&lt;/code&gt;で使用される&lt;code&gt;S_ISVTX&lt;/code&gt;マクロはオプション機能であり、XSIの一部である。これはPOSIX.1-2008とPOSIX.1-2017でもオプションのままである。&lt;/p&gt;
&lt;p&gt;POSIX.1-2001のスレッドセーフ関数 (Thread-Safe Functions : TSF) オプションの一部である&lt;code&gt;readdir_r()&lt;/code&gt;を参照する注記もあるが、POSIX.1-2008ではBaseに移動されている。ただし、&lt;code&gt;readdir_r()&lt;/code&gt; APIの実装には欠陥があり、一部の実装では非推奨となっており、将来のバージョンから削除される可能性がある。ここでは&lt;code&gt;readdir_r()&lt;/code&gt;に固有のものに依存してはいないため、&lt;code&gt;readdir()&lt;/code&gt;を参照するよう変更する。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2227r0.html&#34; target=&#34;_blank&#34;&gt;P2227R0 Update normative reference to POSIX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>#warningのサポートを追加 [P2437R1] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/warning.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp23/warning.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/warning.md b/lang/cpp23/warning.md
index 4fd054a68..4575a076d 100644
--- a/lang/cpp23/warning.md
+++ b/lang/cpp23/warning.md
@@ -1,13 +1,13 @@
 # #warningのサポートを追加 [P2437R1]
 * cpp23[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++23に採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++23では、プリプロセッサ命令として、特定のコードに到達した際に警告メッセージを出力する `#warning` をサポートする。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>static_assertの診断メッセージにユーザーが生成した文字列の指定を許可 [P2741R3] -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/lang/cpp26/user-generated_static_assert_messages.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:lang/cpp26/user-generated_static_assert_messages.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp26/user-generated_static_assert_messages.md b/lang/cpp26/user-generated_static_assert_messages.md
index 53a361bbf..76eb694c3 100644
--- a/lang/cpp26/user-generated_static_assert_messages.md
+++ b/lang/cpp26/user-generated_static_assert_messages.md
@@ -1,13 +1,13 @@
 # static_assertの診断メッセージにユーザーが生成した文字列の指定を許可 [P2741R3]
 * cpp26[meta cpp]
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++26に採用される見込みの言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 C++26では、[`static_assert`](/lang/cpp11/static_assert.md)に指定する表明失敗時の診断メッセージとして、文字列リテラルだけでなくユーザー定義型の文字列オブジェクトも指定できるようになる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- 言語機能 : 注意文章の構文ミスを修正 #1292</title>
      <link href="https://cpprefjp.github.io/start_editing/lang_template_page.html"/>
      <id>cba02fbcfad656a9469f6457c427b850c45d5274:start_editing/lang_template_page.md</id>
      <updated>2024-07-08T16:22:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/lang_template_page.md b/start_editing/lang_template_page.md
index 20e089f9f..0e8d24234 100644
--- a/start_editing/lang_template_page.md
+++ b/start_editing/lang_template_page.md
@@ -32,24 +32,24 @@
 
 (確定した言語バージョンに対する注意事項は以下)
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++XXに採用された言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 
 (確定前の言語バージョンに対する注意事項は以下)
 
-&amp;lt;-- start lang caution --&amp;gt;
+&amp;lt;!-- start lang caution --&amp;gt;
 
 このページはC++26に採用される見込みの言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
 
-&amp;lt;-- last lang caution --&amp;gt;
+&amp;lt;!-- last lang caution --&amp;gt;
 
 ## 概要
 (ここには、言語機能の概要を記載します。)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>エイリアステンプレート [N2258] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/alias_templates.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/alias_templates.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/alias_templates.md b/lang/cpp11/alias_templates.md
index 53ee5059d..93d3fecd2 100644
--- a/lang/cpp11/alias_templates.md
+++ b/lang/cpp11/alias_templates.md
@@ -1,6 +1,14 @@
 # エイリアステンプレート [N2258]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 「エイリアステンプレート (alias templates)」は、テンプレートによって型の別名を定義する機能である。これによって、パラメータ化した型の別名付けができる。
 
@@ -100,4 +108,3 @@ typedef void_alloc::rebind&amp;lt;int&amp;gt;::other int_alloc;
 - [N1489 Templates aliases for C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1489.pdf)
 - [N2112 Templates Aliases](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2112.pdf)
 - [N2258 Templates Aliases](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2258.pdf)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>alignas [N2341] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/alignas.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/alignas.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/alignas.md b/lang/cpp11/alignas.md
index 3427b7f9d..44ee2cd7a 100644
--- a/lang/cpp11/alignas.md
+++ b/lang/cpp11/alignas.md
@@ -1,6 +1,14 @@
 # alignas [N2341]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `alignas()`は、コンパイラに対し変数をメモリ上の特定の位置に配置（アライメント）するように要求するキーワードである。「アライン アズ (align as)」と読む。
 
@@ -101,11 +109,10 @@ C++03で変数のアライメントを行うにはコンパイラの拡張機能
 N2341 からはわからない、恐らくないと思われる。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 `alignof`](/lang/cpp11/alignof.md)
 - [C++17 アライメント指定されたデータの動的メモリ確保](/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md)
 
 
 ## 参照
 - [N2341 Adding Alignment Support to the C++ Programming Language / Wording](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2341.pdf)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>alignof [N2341] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/alignof.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/alignof.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/alignof.md b/lang/cpp11/alignof.md
index 61d4251e7..533b4fd42 100644
--- a/lang/cpp11/alignof.md
+++ b/lang/cpp11/alignof.md
@@ -1,6 +1,14 @@
 # alignof [N2341]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `alignof()`は、指定した型がメモリ上のどの位置に配置されるか（アライメント）取得する演算子である。「アライン オブ (align of)」と読む。
 
@@ -70,7 +78,7 @@ C++03で型のアライメントサイズを得るにはコンパイラの拡張
 N2341 からはわからない、恐らくないと思われる。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 `alignas`](/lang/cpp11/alignas.md)
 - [`std::max_align_t`](/reference/cstddef/max_align_t.md)
 - [C++17 アライメント指定されたデータの動的メモリ確保](/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md)
@@ -78,4 +86,3 @@ N2341 からはわからない、恐らくないと思われる。
 
 ## 参照
 - [N2341 Adding Alignment Support to the C++ Programming Language / Wording](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2341.pdf)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>属性構文 [N2761] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/attributes.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/attributes.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/attributes.md b/lang/cpp11/attributes.md
index 613da4800..d2a512277 100644
--- a/lang/cpp11/attributes.md
+++ b/lang/cpp11/attributes.md
@@ -1,6 +1,14 @@
 # 属性構文 [N2761]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 属性(attributes)は、ソースコードに対して追加の情報をコンパイラに伝えるための構文である。
 
@@ -152,7 +160,7 @@ C++11で採用されたもの以外で検討された以下の機能は、属性
 - ポインタの所有者(解放する責任を持つユーザー)であることを明示する`owner`属性
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++14 `[[deprecated]]`属性](/lang/cpp14/deprecated_attr.md)
 - [C++17 `[[maybe_unused]]`属性](/lang/cpp17/maybe_unused.md)
 - [C++17 `[[nodiscard]]`属性](/lang/cpp17/nodiscard.md)
@@ -170,4 +178,3 @@ C++11で採用されたもの以外で検討された以下の機能は、属性
 - [N2643 C++ Data-Dependency Ordering: Function Annotation](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2643.html)
 - [N2761 Towards support for attributes in C++ (Revision 6) ](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2761.pdf)
 - [（抄訳）N4215 `memory_order_consume`の利用と実装に向けて［§5-6のみ］](http://d.hatena.ne.jp/yohhoy/20141115/p1)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>auto [N1984] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/auto.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/auto.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/auto.md b/lang/cpp11/auto.md
index d5566c175..714ed57df 100644
--- a/lang/cpp11/auto.md
+++ b/lang/cpp11/auto.md
@@ -1,6 +1,14 @@
 # auto [N1984]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++11 から、変数宣言時に具体的な型名のかわりに `auto` キーワードを指定する事によって、変数の型を初期化子から推論できるようになった。
 
@@ -357,7 +365,7 @@ std::pair&amp;lt;T, U&amp;gt;&amp;amp; p = foo();
 しかし、この使用法も規格から落とされた。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 戻り値の型を後置する関数宣言構文](trailing_return_types.md)
 - [C++11 `decltype`](decltype.md)
 - [C++11 ラムダ式](lambda_expressions.md)
@@ -379,4 +387,4 @@ std::pair&amp;lt;T, U&amp;gt;&amp;amp; p = foo();
 - [N2337 The Syntax of auto Declarations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2337.pdf)
 - [N2546 Removal of auto as a storage-class specifier](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2546.htm)
 - [N2712 Non-static data member initializers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2712.html)
-- [N2713 Allow auto for non-static data members](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2713.html)
+- [N2713 Allow auto for non-static data members](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2713.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C99互換で導入された定義済みマクロ -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/c99_predefined_macros.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/c99_predefined_macros.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C99互換で導入された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++11に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative_page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDC_HOSTED__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実装がホスト実装である場合は&lt;code&gt;1&lt;/code&gt;、そうでない場合（つまり、フリースタンディング実装である場合）は&lt;code&gt;0&lt;/code&gt;として定義される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDC_VERSION__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;標準Cのバージョンを表す値（C95 では &lt;code&gt;199409L&lt;/code&gt;、C99 では &lt;code&gt;199901L&lt;/code&gt;、C11 では &lt;code&gt;201112L&lt;/code&gt;、C90 では定義されていない）。&lt;br /&gt;このマクロが定義されているか否か、および、定義されている場合の値は実装依存である。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDC_ISO_10646__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;wchar_t&lt;/code&gt;の文字が、Unicodeの規格であるISO/IEC 10646の、yyyymm年の仕様を満たしている場合に定義される。&lt;br /&gt;このマクロの値は、&lt;code&gt;yyyymmL&lt;/code&gt;の形式の整数値として定義される。yは年、mは月を表す。yとmそれぞれの個数は、桁数を表す。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;predefined_macros.html&#34;&gt;C++11 更新された定義済みマクロ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1653.htm&#34; target=&#34;_blank&#34;&gt;N1653 Working draft changes for C99 preprocessor synchronization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#630&#34; target=&#34;_blank&#34;&gt;CWG Issue 630. Equality of narrow and wide character values in the basic character set&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>char16_tとchar32_t [N2249] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/char16_32.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/char16_32.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/char16_32.md b/lang/cpp11/char16_32.md
index a12af8688..968c867cf 100644
--- a/lang/cpp11/char16_32.md
+++ b/lang/cpp11/char16_32.md
@@ -1,6 +1,14 @@
 # char16_tとchar32_t [N2249]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `char16_t`はUTF-16符号化形式の文字型、`char32_t`はUTF-32符号化形式の文字型である。
 
@@ -124,7 +132,7 @@ int main()
 この機能が提案された2004年当時にはすでにUCS／Unicodeが広く普及していた。多くのユーザーがその文字コードを扱うことを望んでいたために、標準C++で正式にサポートすることとなった。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`u16string`](/reference/string/basic_string.md)
 - [`u32string`](/reference/string/basic_string.md)
 - [`wstring_convert`](/reference/locale/wstring_convert.md)
@@ -143,4 +151,4 @@ int main()
 - [N2018 New Character Types in C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2018.html)
 - [N2149 New Character Types in C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2149.html)
 - [N2249 New Character Types in C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2249.html)
-- [N2170 Universal Character Names in Literals](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2170.html)
+- [N2170 Universal Character Names in Literals](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2170.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr [N2235] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/constexpr.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/constexpr.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/constexpr.md b/lang/cpp11/constexpr.md
index 44b3a5d47..a4667ade4 100644
--- a/lang/cpp11/constexpr.md
+++ b/lang/cpp11/constexpr.md
@@ -1,6 +1,14 @@
 # constexpr [N2235]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `constexpr`は、汎用的に定数式を表現するための機能である。
 
@@ -191,7 +199,7 @@ GCC 5.2、Clang 3.7、Visual C++ 2015時点で、3つともデフォルトは512
 また、`constexpr`は、値を計算するテンプレートメタプログラムを置き換えて使用できる。テンプレートメタプログラミングでは、非型テンプレートパラメータによって整数型の値をコンパイル時に計算することはできた。しかし、浮動小数点数型の値や、その他多くの値に関する計算が難しく、構文もまた通常の関数とはかけ離れていた(浮動小数点数型の値の計算は、分数形式にすれば、できることはできる)。値をコンパイル時に計算するためには、今後はテンプレートメタプログラミングよりも`constexpr`を積極的に使用していくとよいだろう。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 ユーザー定義リテラル](user_defined_literals.md)
 - [C++14 `constexpr`の制限緩和](/lang/cpp14/relaxing_constraints_on_constexpr.md)
 - [C++17 `constexpr`ラムダ](/lang/cpp17/constexpr_lambda.md)
@@ -219,4 +227,3 @@ GCC 5.2、Clang 3.7、Visual C++ 2015時点で、3つともデフォルトは512
     - リテラル型のメンバ変数のみを持つクラスは、`constexpr`コンストラクタを明示的に定義しなくても、リテラル型となる
 - [CWG Issue 699. Must constexpr member functions be defined in the class member-specification?](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#699)
     - ゼロ割りの扱い、再帰回数の規定
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>decltype [N2343] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/decltype.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/decltype.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/decltype.md b/lang/cpp11/decltype.md
index 88693da6c..3262354b7 100644
--- a/lang/cpp11/decltype.md
+++ b/lang/cpp11/decltype.md
@@ -1,6 +1,14 @@
 # decltype [N2343]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `decltype` は、オペランドで指定した式の型を取得する機能である。  
 型を指定する必要のある個所で `decltype` を使用することによって、具体的な型名を指定する代わりに式から取得した型を指定できるようになった。
@@ -247,7 +255,7 @@ GCC や Clang には `decltype` が導入される前から、同様の機能を
 	`decltype` のオペランドは式のみしか許されていないが、`typeof` は式だけでなく型そのものも許されている。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 戻り値の型を後置する関数宣言構文](trailing_return_types.md)
 - [C++11 `auto`](auto.md)
 - [C++11 ラムダ式](lambda_expressions.md)
@@ -268,4 +276,4 @@ GCC や Clang には `decltype` が導入される前から、同様の機能を
 - [N3233 US22/DE9 Revisited: Decltype and Call Expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3233.html)
 - [N3276 US22/DE9 Revisited: Decltype and Call Expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3276.pdf)
 - [CWG Issue 743. Use of decltype in a nested-name-specifier](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#743)
-- [CWG Issue 950. Use of decltype as a class-name](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#950)
+- [CWG Issue 950. Use of decltype as a class-name](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#950)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>関数のdefault／delete宣言 [N2346] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/defaulted_and_deleted_functions.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/defaulted_and_deleted_functions.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/defaulted_and_deleted_functions.md b/lang/cpp11/defaulted_and_deleted_functions.md
index 5d229bd62..1048d3e4d 100644
--- a/lang/cpp11/defaulted_and_deleted_functions.md
+++ b/lang/cpp11/defaulted_and_deleted_functions.md
@@ -1,6 +1,14 @@
 # 関数のdefault／delete宣言 [N2346]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 クラスを定義した際、以下のメンバ関数が暗黙的に定義される：
 
@@ -123,4 +131,4 @@ int main()
 - [N2210 Defaulted and Deleted Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2210.html)
 - [N2326 Defaulted and Deleted Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2326.html)
 - [N3172 To move or not to move](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3174.pdf)
-- [N2346 Defaulted and Deleted Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2346.htm)
+- [N2346 Defaulted and Deleted Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2346.htm)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>委譲コンストラクタ [N1986] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/delegating_constructors.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/delegating_constructors.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/delegating_constructors.md b/lang/cpp11/delegating_constructors.md
index f65566c9c..8fda468b1 100644
--- a/lang/cpp11/delegating_constructors.md
+++ b/lang/cpp11/delegating_constructors.md
@@ -1,6 +1,14 @@
 # 委譲コンストラクタ [N1986]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 「委譲コンストラクタ (delegating constructors)」は、コンストラクタから、同じクラスの他のコンストラクタに処理を委譲する機能である。
 
@@ -82,4 +90,3 @@ ECMA規格となっているC++/CLIには、この問題を解決するための
 - [N1618 Delegating Constructors (revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1618.pdf)
 - [N1895 Delegating Constructors (revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1895.pdf)
 - [N1986 Delegating Constructors (revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1986.pdf)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>依存名に対するtypenameとtemplateの制限緩和 -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/dependent_name_specifier_outside_of_templates.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/dependent_name_specifier_outside_of_templates.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/dependent_name_specifier_outside_of_templates.md b/lang/cpp11/dependent_name_specifier_outside_of_templates.md
index 87be4bc66..755ea6c63 100644
--- a/lang/cpp11/dependent_name_specifier_outside_of_templates.md
+++ b/lang/cpp11/dependent_name_specifier_outside_of_templates.md
@@ -1,6 +1,14 @@
 # 依存名に対するtypenameとtemplateの制限緩和
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 テンプレート内で、テンプレートパラメータに依存する名前を使用する場合には、`typename`キーワードを先頭に付ける必要がある。
 
@@ -38,4 +46,3 @@ int main()
 ## 参照
 - [CWG Issue 382. Allow `typename` outside of templates](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#382)
 - [CWG Issue 468. Allow `::template` outside of templates](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#468)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>registerキーワードを非推奨化 -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/deprecation_of_the_register_keyword.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/deprecation_of_the_register_keyword.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/deprecation_of_the_register_keyword.md b/lang/cpp11/deprecation_of_the_register_keyword.md
index 21989b3bc..b8d6077be 100644
--- a/lang/cpp11/deprecation_of_the_register_keyword.md
+++ b/lang/cpp11/deprecation_of_the_register_keyword.md
@@ -1,6 +1,14 @@
 # registerキーワードを非推奨化
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `register`キーワードが非推奨化された。
 
@@ -17,11 +25,10 @@ register int v = 42;
 `register`はよく使われる英単語であるため、将来的にこのキーワードをほかの用途に再利用することを目標とする。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [C++17 非推奨だったregisterキーワードを削除](/lang/cpp17/remove_deprecated_use_of_the_register_keyword.md)
 
 
 ## 参照
 - [CWG Issue 809. Deprecation of the `register` keyword](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#809)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>宣言時に要素数を指定した配列オブジェクトの、定義時の要素数を規定 -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/earlier_declarated_array_bounds.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/earlier_declarated_array_bounds.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/earlier_declarated_array_bounds.md b/lang/cpp11/earlier_declarated_array_bounds.md
index 80728dca6..e82c26251 100644
--- a/lang/cpp11/earlier_declarated_array_bounds.md
+++ b/lang/cpp11/earlier_declarated_array_bounds.md
@@ -1,6 +1,14 @@
 # 宣言時に要素数を指定した配列オブジェクトの、定義時の要素数を規定
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `static`メンバや`extern`として宣言した配列を定義した際、宣言時に指定した要素数として定義されることが規定された。
 
@@ -19,4 +27,3 @@ int S::y[]; // 要素数は10
 
 ## 参照
 - [CWG Issue 619. Completeness of array types](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#619)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>明示的な型変換演算子のオーバーロード [N2437] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/explicit_conversion_operator.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/explicit_conversion_operator.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/explicit_conversion_operator.md b/lang/cpp11/explicit_conversion_operator.md
index 52802ad20..b61a80980 100644
--- a/lang/cpp11/explicit_conversion_operator.md
+++ b/lang/cpp11/explicit_conversion_operator.md
@@ -1,6 +1,14 @@
 # 明示的な型変換演算子のオーバーロード [N2437]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 型変換演算子のオーバーロードをする際、`operator`キーワードの前に`explicit`を付加することで、その型変換演算子は明示的な型変換が行われる文脈でのみ呼び出されるようになる：
 
@@ -73,4 +81,4 @@ int main()
 - [N1592 Explicit Conversion Operators](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1592.pdf)
 - [N2223 Explicit Conversion Operator Draft Working Paper](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2223.pdf)
 - [N2333 Explicit Conversion Operator Draft Working Paper Revision 1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2333.html)
-- [N2437 Explicit Conversion Operator Draft Working Paper (revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2437.pdf)
+- [N2437 Explicit Conversion Operator Draft Working Paper (revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2437.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>friend宣言できる対象を拡張 [N1791] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/extend_friend_targets.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/extend_friend_targets.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/extend_friend_targets.md b/lang/cpp11/extend_friend_targets.md
index 75a749232..e2f9cfbb6 100644
--- a/lang/cpp11/extend_friend_targets.md
+++ b/lang/cpp11/extend_friend_targets.md
@@ -1,6 +1,14 @@
 # friend宣言できる対象を拡張 [N1791]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++03までの`friend`宣言は、直接のクラス型のみを指定できた。
 
@@ -53,4 +61,3 @@ int main()
 - [N1616 Extended friend Declarations (Rev. 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1616.pdf)
 - [N1722 Extended friend Declarations (Rev. 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1722.pdf)
 - [N1791 Extended friend Declarations (Rev. 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1791.pdf)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sizeof演算子にクラスの非静的メンバを、オブジェクトを作らずに指定できるようにする -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.md b/lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.md
index 82280554b..8b7b3c6a9 100644
--- a/lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.md
+++ b/lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.md
@@ -1,6 +1,14 @@
 # sizeof演算子にクラスの非静的メンバを、オブジェクトを作らずに指定できるようにする
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 クラスの非静的メンバ変数のサイズを取得したい場合、そのクラスのオブジェクトを生成してから`sizeof`演算子にメンバを指定する必要があった。その制限が外され、クラスと非静的メンバ変数を、スコープ解決演算子 `::` 区切りで`sizeof`演算子に指定できるようになった：
 
@@ -26,4 +34,3 @@ int main()
 - [CWG Issue 613. Unevaluated uses of non-static class members](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#613)
 - [N2150 Extending sizeof to apply to non-static data members without an object](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2150.html)
 - [N2253 Extending sizeof to apply to non-static data members without an object (revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2253.html)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>extern template [N1987] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/extern_template.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/extern_template.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/extern_template.md b/lang/cpp11/extern_template.md
index 2a31d1e8c..615e25638 100644
--- a/lang/cpp11/extern_template.md
+++ b/lang/cpp11/extern_template.md
@@ -1,6 +1,14 @@
 # extern template [N1987]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `extern template`は、指定したテンプレートを、その翻訳単位でインスタンス化しないことを指示するための機能である。
 
@@ -56,4 +64,3 @@ void user2()
 ## 参照
 - [N1448 Controlling Implicit Template Instantiation](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1448.pdf)
 - [N1987 Adding &amp;#34;extern template&amp;#34; (version 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1987.htm)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>機能テストマクロ -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/feature_test_macros.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/feature_test_macros.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;機能テストマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++11に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;SD-6 は C++11 の機能について以下のテストマクロを定義することを推奨している：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_alias_templates&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200704&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;alias_templates.html&#34;&gt;エイリアステンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_attributes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200809&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;attributes.html&#34;&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200704&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;constexpr.html&#34;&gt;constexpr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_decltype&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200707&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;decltype.html&#34;&gt;decltype&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_delegating_constructors&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200604&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;delegating_constructors.html&#34;&gt;委譲コンストラクタ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_inheriting_constructors&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200802&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;inheriting_constructors.html&#34;&gt;継承コンストラクタ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_initializer_lists&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200806&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;initializer_lists.html&#34;&gt;初期化子リスト&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lambdas&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200907&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;lambda_expressions.html&#34;&gt;ラムダ式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_nsdmi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200809&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;non_static_data_member_initializers.html&#34;&gt;非静的メンバ変数初期化子&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_range_based_for&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200907&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;range_based_for.html&#34;&gt;範囲for文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_raw_strings&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200710&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;raw_string_literals.html&#34;&gt;生文字列リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_ref_qualifiers&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200710&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;ref_qualifier_for_this.html&#34;&gt;&lt;code&gt;*this&lt;/code&gt; のムーブセマンティクス&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_rvalue_references&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200610&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;rvalue_ref_and_move_semantics.html&#34;&gt;右辺値参照&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_static_assert&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200410&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;static_assert.html&#34;&gt;コンパイル時アサート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_unicode_characters&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200704&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;char16_32.html&#34;&gt;ユニコード文字&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_unicode_literals&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200710&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;char16_32.html&#34;&gt;ユニコードリテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_user_defined_literals&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200809&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;user_defined_literals.html&#34;&gt;ユーザー定義リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_variadic_templates&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200704&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;variadic_templates.html&#34;&gt;可変引数テンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(carries_dependency)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200809&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;attributes.html#carries_dependency&#34;&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(noreturn)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200809&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;attributes.html#noreturn&#34;&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations#recs.cpp11&#34; target=&#34;_blank&#34;&gt;SD-6: SG10 Feature Test Recommendations: Standard C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>事前定義識別子__func__ [N1653] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/func.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/func.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/func.md b/lang/cpp11/func.md
index e894f7bef..db9fe7f72 100644
--- a/lang/cpp11/func.md
+++ b/lang/cpp11/func.md
@@ -1,6 +1,14 @@
 # 事前定義識別子\_\_func\_\_ [N1653]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C99互換として、事前定義識別子(predefined identifier)の`__func__`が導入された。
 
@@ -83,4 +91,3 @@ S::print() : print
 - [N1534 Proposed addition of `__func__` predefined identifier from C99](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1534.txt)
 - [5.41 Function Names as Strings - GCC](https://gcc.gnu.org/onlinedocs/gcc-3.3.5/gcc/Function-Names.html)
 - [Predefined macros | Microsoft Docs](https://docs.microsoft.com/ja-JP/cpp/preprocessor/predefined-macros?view=vs-2019)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>入れ子名の指定にグローバルスコープ :: を付加することを許可 -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/global_scope_syntax_in_nested_name_specifier.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/global_scope_syntax_in_nested_name_specifier.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/global_scope_syntax_in_nested_name_specifier.md b/lang/cpp11/global_scope_syntax_in_nested_name_specifier.md
index cb3df12a3..1bce9882b 100644
--- a/lang/cpp11/global_scope_syntax_in_nested_name_specifier.md
+++ b/lang/cpp11/global_scope_syntax_in_nested_name_specifier.md
@@ -1,6 +1,14 @@
 # 入れ子名の指定にグローバルスコープ :: を付加することを許可
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 入れ子名を指定する構文において、先頭にグローバルスコープの指定`::`を付加することが許可された。
 
@@ -37,4 +45,3 @@ nested-name-specifier:
 
 ## 参照
 - [CWG Issue 355. Global-scope `::` in nested-name-specifier](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#355)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>継承コンストラクタ [N2540] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/inheriting_constructors.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/inheriting_constructors.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/inheriting_constructors.md b/lang/cpp11/inheriting_constructors.md
index a84dcc771..df94c217d 100644
--- a/lang/cpp11/inheriting_constructors.md
+++ b/lang/cpp11/inheriting_constructors.md
@@ -1,6 +1,14 @@
 # 継承コンストラクタ [N2540]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 「継承コンストラクタ (inheriting constructors)」は、基底クラスで定義したコンストラクタ群を、派生クラスでそのまま使用できるようにするための糖衣構文である。
 
@@ -95,4 +103,3 @@ struct Derived : Base {
 - [N2438 Inheriting Constructors (revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2438.htm)
 - [N2512 Inheriting Constructors (revision 4)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2512.html)
 - [N2540 Inheriting Constructors (revision 5)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2540.htm)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>初期化子リスト [N2672] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/initializer_lists.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/initializer_lists.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/initializer_lists.md b/lang/cpp11/initializer_lists.md
index 79ca2b4a1..b3adc1a56 100644
--- a/lang/cpp11/initializer_lists.md
+++ b/lang/cpp11/initializer_lists.md
@@ -1,6 +1,14 @@
 # 初期化子リスト [N2672]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 「初期化子リスト (initializer lists)」は、ユーザー定義型のオブジェクトに対して、波カッコによるリスト初期化を使用できるようにするようオーバーロードする機能である。
 
@@ -331,7 +339,7 @@ std::vector&amp;lt;int&amp;gt; v(ar, ar + N);
 この問題を解決するために、波カッコによるリスト初期化をユーザー定義型でオーバーロードする機能が求められ、[`std::initializer_list`](/reference/initializer_list/initializer_list.md)クラスとオーバーロード機能が導入された。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 一様初期化](uniform_initialization.md)
 
 
@@ -350,4 +358,3 @@ std::vector&amp;lt;int&amp;gt; v(ar, ar + N);
 - [N2640 Initializer Lists - Alternative Mechanism and Rationale (v. 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2640.pdf)
 - [N2672 Initializer List proposed wording](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2672.htm)
 - [CWG Issue 1030. Evaluation order in initializer-lists used in aggregate initialization](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1030)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>インライン名前空間 [N2535] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/inline_namespaces.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/inline_namespaces.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/inline_namespaces.md b/lang/cpp11/inline_namespaces.md
index 929243944..4bc0ae4d1 100644
--- a/lang/cpp11/inline_namespaces.md
+++ b/lang/cpp11/inline_namespaces.md
@@ -1,6 +1,14 @@
 # インライン名前空間 [N2535]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 インライン名前空間 (inline namespace)は、名前空間内の機能に透過的にアクセスするための機能である。`inline namespace`によって定義した名前空間の機能には、その名前空間を指定しなくてもアクセスできる。
 
@@ -217,7 +225,7 @@ v2
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - 時間間隔オブジェクトのリテラル
     - [`operator&amp;#34;&amp;#34; ns`](/reference/chrono/duration/op_ns.md)
     - [`operator&amp;#34;&amp;#34; us`](/reference/chrono/duration/op_us.md)
@@ -243,4 +251,3 @@ v2
 - [CWG Issue 812. Duplicate names in inline namespaces](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#812)
 - [CWG Issue 861. Unintended ambiguity in inline namespace lookup](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#861)
 - [Inline namespaces and ambigous declarations - Stackoverflow](http://stackoverflow.com/questions/27252466/inline-namespaces-and-ambigous-declarations/)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式 [N2927] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/lambda_expressions.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/lambda_expressions.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/lambda_expressions.md b/lang/cpp11/lambda_expressions.md
index 38783f542..b5f93a62d 100644
--- a/lang/cpp11/lambda_expressions.md
+++ b/lang/cpp11/lambda_expressions.md
@@ -1,6 +1,14 @@
 # ラムダ式 [N2927]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 「ラムダ式(lambda expressions)」は、簡易的な関数オブジェクトをその場で定義するための機能である。
 
@@ -523,7 +531,7 @@ for_each(array, array + 4, &amp;lt;&amp;amp;&amp;gt;(double d) ( sum += factor ∗ d ));
 なお、C++11時点のラムダ式はテンプレートを扱えないが、これはコンパイラの実装が難しい、という理由での見送りである。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 ローカル型と無名型を、テンプレート引数として使用することを許可](local_and_unnamed_type_as_template_arguments.md)
 - [C++14 ジェネリックラムダ](/lang/cpp14/generic_lambdas.md)
 - [C++14 ラムダ式の初期化キャプチャ](/lang/cpp14/initialize_capture.md)
@@ -554,4 +562,3 @@ for_each(array, array + 4, &amp;lt;&amp;amp;&amp;gt;(double d) ( sum += factor ∗ d ));
 - [N3043 Converting Lambdas to Function Pointers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3043.html)
 - [N3052 Converting Lambdas to Function Pointers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3052.html)
 - [CWG Issue 975. Restrictions on return type deduction for lambdas](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#975)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ローカル型と無名型を、テンプレート引数として使用することを許可 [N2657] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/local_and_unnamed_type_as_template_arguments.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/local_and_unnamed_type_as_template_arguments.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/local_and_unnamed_type_as_template_arguments.md b/lang/cpp11/local_and_unnamed_type_as_template_arguments.md
index 8eeb04d6e..3203e8bcc 100644
--- a/lang/cpp11/local_and_unnamed_type_as_template_arguments.md
+++ b/lang/cpp11/local_and_unnamed_type_as_template_arguments.md
@@ -1,6 +1,14 @@
 # ローカル型と無名型を、テンプレート引数として使用することを許可 [N2657]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 ローカルで定義した型と、名前のない型を、テンプレート引数として渡すことが許可された。
 
@@ -42,4 +50,3 @@ int main()
 - [N2402 Names, Linkage, and Templates (rev 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2402.pdf)
 - [N2635 Local and Unnamed Types as Template Arguments](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2635.html)
 - [N2657 Local and Unnamed Types as Template Arguments](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2657.htm)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>long long型 [N1811] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/long_long_type.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/long_long_type.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/long_long_type.md b/lang/cpp11/long_long_type.md
index cf62830df..cf67cdb50 100644
--- a/lang/cpp11/long_long_type.md
+++ b/lang/cpp11/long_long_type.md
@@ -1,6 +1,14 @@
 # long long型 [N1811]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C99互換として、`long long`整数型が追加された。
 
@@ -51,7 +59,7 @@ int main()
 `long long`のように、`long`を2つ連続させることで「`long`より大きな型」であることを表現するのは非常に醜いものではあるが、C99およびコンパイラの実装による事実上の標準があったために、C++もそれにならった。ただし、これは128ビット整数型に対応する際に`long long long`型を定義することは意味しない。その際は、改めて型の定義を議論する必要があるが、いまは`long long`で64ビット整数型を表現することとした。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`LLONG_MIN`](/reference/climits/llong_min.md)
 - [`LLONG_MAX`](/reference/climits/llong_max.md)
 - [`ULLONG_MAX`](/reference/climits/ullong_max.md)
@@ -68,4 +76,3 @@ int main()
 - [N1565 Adding the `long long` type to C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1565.pdf)
 - [N1735 Adding the `long long` type to C++ (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1735.pdf)
 - [N1811 Adding the `long long` type to C++ (Revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1811.pdf)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>noexcept [N3050] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/noexcept.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/noexcept.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/noexcept.md b/lang/cpp11/noexcept.md
index afef96b59..c035ada19 100644
--- a/lang/cpp11/noexcept.md
+++ b/lang/cpp11/noexcept.md
@@ -1,6 +1,14 @@
 # noexcept [N3050]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++11で導入された`noexcept`キーワードには、以下の2つの意味がある：
 
@@ -165,7 +173,7 @@ int main()
 そういった例外を送出しない判定や指定は、従来の`throw`キーワードによる例外仕様の範囲を超えていた。そのために、`noexcept`という機能が新設され、その機能で必要十分となったために従来の例外仕様は非推奨となった。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [標準ライブラリにおける、関数に`noexcept`を付けない条件](/article/lib/dont_use_noexcept.md)
 - [`move_if_noexcept`](/reference/utility/move_if_noexcept.md)
 - [`is_nothrow_constructible`](/reference/type_traits/is_nothrow_constructible.md)
@@ -189,4 +197,3 @@ int main()
 - [N3205 Delete operators default to `noexcept`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3205.htm)
 - [N3103 Security impact of `noexcept`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3103.pdf)
 - [ムーブによるpop - Faith and Brave - C++で遊ぼう](http://faithandbrave.hateblo.jp/entry/20130604/1370327651)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非静的メンバ変数の初期化 [N2756] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/non_static_data_member_initializers.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/non_static_data_member_initializers.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/non_static_data_member_initializers.md b/lang/cpp11/non_static_data_member_initializers.md
index 6764a34ba..8e4b8cef1 100644
--- a/lang/cpp11/non_static_data_member_initializers.md
+++ b/lang/cpp11/non_static_data_member_initializers.md
@@ -1,6 +1,14 @@
 # 非静的メンバ変数の初期化 [N2756]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 非静的メンバ変数の定義時に、`=`演算子もしくは`{ }`波カッコ初期化子によるコンストラクタ構文で、初期化式を記述できる。
 
@@ -51,7 +59,7 @@ int main()
     ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++14 宣言時のメンバ初期化を持つ型の集成体初期化を許可](/lang/cpp14/member_initializers_and_aggregates.md)
 - [C++17 インライン変数](/lang/cpp17/inline_variables.md)
     - 静的メンバ変数は、インライン変数とすることで定義時に初期化できる
@@ -64,4 +72,3 @@ int main()
 - [N2426 Class member initializers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2426.htm)
 - [N2628 Non-static data member initializers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2628.html)
 - [N2756 Non-static data member initializers](http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2008/n2756.htm)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>nullptr [N2431] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/nullptr.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/nullptr.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/nullptr.md b/lang/cpp11/nullptr.md
index 6fa57226c..4ba227a6d 100644
--- a/lang/cpp11/nullptr.md
+++ b/lang/cpp11/nullptr.md
@@ -1,6 +1,14 @@
 # nullptr [N2431]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `nullptr`は、ヌルポインタ値を表すキーワードである。
 
@@ -115,7 +123,7 @@ private:
 これは言語機能ではなくライブラリで解決する案である。この案の問題としては、`nullptr`オブジェクトを使用する前に、ヘッダをインクルードしなければならない、というものがある。ヌルポインタ値は多くの一般的な状況で必要になるため、ヘッダをインクルードしない選択肢として、キーワードの`nullptr`が採用された。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`NULL`](/reference/cstddef/null.md)
 - [`nullptr_t`](/reference/cstddef/nullptr_t.md)
 
@@ -125,4 +133,3 @@ private:
 - [N1601 A name for the null pointer: `nullptr` (revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1601.pdf)
 - [N2214 A name for the null pointer: `nullptr` (revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2214.pdf)
 - [N2431 A name for the null pointer: `nullptr` (revision 4)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2431.pdf)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>overrideとfinal [N2928] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/override_final.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/override_final.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/override_final.md b/lang/cpp11/override_final.md
index 195924044..154be5582 100644
--- a/lang/cpp11/override_final.md
+++ b/lang/cpp11/override_final.md
@@ -1,6 +1,14 @@
 # overrideとfinal [N2928]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `override`は仮想メンバ関数のオーバーライドを明示的に宣言するキーワードである。
 
@@ -410,7 +418,7 @@ struct D explicit : B
 - 以上の経緯を経てC++11では、`override`と`final`コンテキスト依存キーワードの追加のみが行われた。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`is_final`](/reference/type_traits/is_final.md)
 
 
@@ -424,4 +432,4 @@ struct D explicit : B
 - [N3163 Override Control Using Contextual Keywords](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3163.pdf)
 - [N3206 Override control: Eliminating Attributes](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3206.htm)
 - [N3234 Remove explicit from class-head](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3234.pdf)
-- [N3272 Follow-up on override control](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3272.htm)
+- [N3272 Follow-up on override control](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3272.htm)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Pragma演算子 [N1653] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/pragma_operator.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/pragma_operator.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/pragma_operator.md b/lang/cpp11/pragma_operator.md
index ed565e360..841aaca8d 100644
--- a/lang/cpp11/pragma_operator.md
+++ b/lang/cpp11/pragma_operator.md
@@ -1,6 +1,14 @@
 # Pragma演算子 [N1653]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C99互換として、Pragma演算子が導入された。
 
@@ -66,4 +74,3 @@ int main()
 
 ## 参照
 - [N1653 Working draft changes for C99 preprocessor synchronization](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1653.htm)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>更新された定義済みマクロ -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/predefined_macros.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/predefined_macros.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;更新された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++11に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative_page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cplusplus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201103L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++のバージョン値を表す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以下のマクロが新たに追加された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDCPP_STRICT_POINTER_SAFETY__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実装がポインタの厳密な安全性を持っている場合、整数値&lt;code&gt;1&lt;/code&gt;として定義される&lt;br /&gt;本マクロ定数はC++23で削除される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDCPP_THREADS__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが複数のスレッドを実行できる場合、整数値&lt;code&gt;1&lt;/code&gt;として定義される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDC_MB_MIGHT_NEQ_WC__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;このマクロが整数型の定数&lt;code&gt;1&lt;/code&gt;として定義されている場合、基本文字集合に含まれる文字のリテラルが、&lt;code&gt;char&lt;/code&gt;と&lt;code&gt;wchar_t&lt;/code&gt;で異なる値を持つ可能性がある。&lt;br /&gt;このマクロが定義されない場合には&lt;code&gt;&#39;x&#39; == L&#39;x&#39;&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;であることが保証され、そうでなければされない。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;c99_predefined_macros.html&#34;&gt;C++11 C99互換で導入された定義済みマクロ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2693.html&#34; target=&#34;_blank&#34;&gt;N2693 Requirements on programs and backwards compatibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1169&#34; target=&#34;_blank&#34;&gt;CWG Issue 1169. Missing feature macro for strict pointer safety&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2186r2.html&#34; target=&#34;_blank&#34;&gt;P2186R2 Removing Garbage Collection Support&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++23でのマクロ&lt;code&gt;__STDCPP_STRICT_POINTER_SAFETY__&lt;/code&gt;削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>範囲for文 [N2930] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/range_based_for.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/range_based_for.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/range_based_for.md b/lang/cpp11/range_based_for.md
index 33a5db868..2c8219c03 100644
--- a/lang/cpp11/range_based_for.md
+++ b/lang/cpp11/range_based_for.md
@@ -1,6 +1,14 @@
 # 範囲for文 [N2930]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 範囲for文（The range-based for statement）は配列やコンテナを簡潔に扱うためのfor文の別表現である。
 
@@ -355,7 +363,7 @@ int main()
 
 また、C++23からは`for-range-initializer`の寿命が条件を満たせば延長されるようになったので([C++23 範囲for文が範囲初期化子内で生じた一時オブジェクトを延命することを規定](/lang/cpp23/lifetime_extension_in_range_based_for_loop.md))、この問題を踏みにくくなっている。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [C++17 範囲forの制限緩和 — `begin` と `end` の型が異なることを許可](/lang/cpp17/generalizing_the_range-based_for_loop.md)
 - [C++20 範囲for文がカスタマイゼーションポイントを見つけるルールを緩和](/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md)
@@ -366,4 +374,4 @@ int main()
 - [N2930 Range-Based For Loop Wording (Without Concepts)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2930.html)
 - [N3337 Working Draft, Standard for Programming Language C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf)
 - [一時オブジェクトの寿命と右辺値参照、ムーブセマンティクスのお話 - Qiita](https://qiita.com/rinse_/items/ad0cc7e351e836595c94)
-- [c++ - Safe to erase from map inside range based for? - Stack Overflow](https://stackoverflow.com/questions/25246937/safe-to-erase-from-map-inside-range-based-for)
+- [c++ - Safe to erase from map inside range based for? - Stack Overflow](https://stackoverflow.com/questions/25246937/safe-to-erase-from-map-inside-range-based-for)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>生文字列リテラル [N2442] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/raw_string_literals.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/raw_string_literals.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/raw_string_literals.md b/lang/cpp11/raw_string_literals.md
index a5b59af2f..6fc3b8bdf 100644
--- a/lang/cpp11/raw_string_literals.md
+++ b/lang/cpp11/raw_string_literals.md
@@ -1,6 +1,14 @@
 # 生文字列リテラル [N2442]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `R`プレフィックスを付けた文字列リテラル内の丸カッコ`( )`で囲まれた部分は、エスケープシーケンスが無視される。この機能を「生文字列リテラル (Raw string literals)」という。
 
@@ -266,4 +274,3 @@ Perl、Python、Luaやその他の言語ではこの問題に対応するため
 - [N2384 Raw and Unicode String Literals; Unified Proposal (Rev. 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2384.html)
 - [N2442 Raw and Unicode String Literals; Unified Proposal (Rev. 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2442.htm)
 - [N3077 Alternative approach to Raw String issues](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3077.html)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>テンプレート再帰回数の制限緩和 -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/recursive_template_limit.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/recursive_template_limit.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/recursive_template_limit.md b/lang/cpp11/recursive_template_limit.md
index c54d80ca5..3834d8543 100644
--- a/lang/cpp11/recursive_template_limit.md
+++ b/lang/cpp11/recursive_template_limit.md
@@ -1,6 +1,14 @@
 # テンプレート再帰回数の制限緩和
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++03まで、テンプレートの再帰回数は、「17回以上であることを実装に推奨する」というものであった。
 
@@ -60,4 +68,3 @@ int main()
     - テンプレートの再帰によって、コンパイル時間がどれくらい延びるかのレポートがある記事
 - [C++ Language Features/Controlling implementation limits - Clang Compiler User’s Manual](http://clang.llvm.org/docs/UsersManual.html#cmdoption-ftemplate-depth)
 - [3.5 Options Controlling C++ Dialect - GCC Command Options](https://gcc.gnu.org/onlinedocs/gcc/gcc-command-options/options-controlling-c%2B%2B-dialect.html)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>メンバ関数の左辺値／右辺値修飾 [N2439] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/ref_qualifier_for_this.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/ref_qualifier_for_this.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/ref_qualifier_for_this.md b/lang/cpp11/ref_qualifier_for_this.md
index 1d206e5e8..9a5ea2521 100644
--- a/lang/cpp11/ref_qualifier_for_this.md
+++ b/lang/cpp11/ref_qualifier_for_this.md
@@ -1,6 +1,14 @@
 # メンバ関数の左辺値／右辺値修飾 [N2439]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 メンバ関数の`CV`修飾は、`*this`が`const`／`volatile`である場合とそうでない場合でメンバ関数をオーバーロードできる。
 
@@ -103,7 +111,7 @@ int main()
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++20 `const`修飾されたメンバポインタの制限を修正](/lang/cpp20/fixing_const_qualified_pointers_to_members.md)
 
 
@@ -112,4 +120,3 @@ int main()
 - [N1821 Extending Move Semantics To `*this` (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1821.htm)
 - [N2377 Extending move semantics to `*this` (revised wording)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2377.htm)
 - [N2439 Extending move semantics to `*this` (revised wording)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2439.htm)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>参照への参照を折りたたむ -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/reference_collapsing.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/reference_collapsing.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/reference_collapsing.md b/lang/cpp11/reference_collapsing.md
index 89a56e73a..6fc14ffe8 100644
--- a/lang/cpp11/reference_collapsing.md
+++ b/lang/cpp11/reference_collapsing.md
@@ -1,6 +1,14 @@
 # 参照への参照を折りたたむ
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++03までは、`T&amp;amp;`型に左辺値参照を足すと、「参照への参照 (reference to reference)」となってしまいコンパイルエラーとなっていた。
 
@@ -45,4 +53,4 @@ int main()
 
 
 ## 参照
-- [CWG Issue 988. Reference-to-reference collapsing with decltype](https://wg21.cmeerw.net/cwg/issue988)
+- [CWG Issue 988. Reference-to-reference collapsing with decltype](https://wg21.cmeerw.net/cwg/issue988)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>テンプレートのエクスポート機能を削除 -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/remove_export_templates.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/remove_export_templates.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/remove_export_templates.md b/lang/cpp11/remove_export_templates.md
index b77cc7a2c..30b93e30c 100644
--- a/lang/cpp11/remove_export_templates.md
+++ b/lang/cpp11/remove_export_templates.md
@@ -1,6 +1,14 @@
 # テンプレートのエクスポート機能を削除
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++11では、テンプレート定義をエクスポートする機能を削除する。
 
@@ -33,4 +41,3 @@ EDGフロントエンドとそれを使用するコンパイラのComeauとICC
 - [CWG Issue 820. Deprecation of export](https://wg21.cmeerw.net/cwg/issue820)
 - [Using export keyword with templates - StackOverflow](http://stackoverflow.com/questions/5416872/using-export-keyword-with-templates)
 - [N1426 Why We Can&amp;#39;t Afford Export](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1426.pdf)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>POSIX用の名前空間を予約 -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/reserved_namespaces_for_posix.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/reserved_namespaces_for_posix.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;POSIX用の名前空間を予約&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++11に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;将来の標準化のために、POSIX用の名前空間として&lt;code&gt;std::posix&lt;/code&gt;と&lt;code&gt;::posix&lt;/code&gt;を予約する。&lt;/p&gt;
&lt;p&gt;これらの名前空間に宣言や定義を追加した場合、そのプログラムの動作は未定義となる。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2542.htm&#34; target=&#34;_blank&#34;&gt;N2542 Reserved namespaces for POSIX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>整数に対する除算と剰余算の丸め結果を規定 -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/result_of_integer_division_and_modulo.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/result_of_integer_division_and_modulo.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/result_of_integer_division_and_modulo.md b/lang/cpp11/result_of_integer_division_and_modulo.md
index d48980cc8..82d8388aa 100644
--- a/lang/cpp11/result_of_integer_division_and_modulo.md
+++ b/lang/cpp11/result_of_integer_division_and_modulo.md
@@ -1,6 +1,14 @@
 # 整数に対する除算と剰余算の丸め結果を規定
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 整数`a`, `b`に対する除算`a/b`の結果(商)と剰余算`a%b`の結果(余り)について`(a/b)*b + a%b = a`という等式が成り立つことが規定されているが、C++03まで、少なくとも一方が負の数である場合の余りの符号は実装定義だった。このため先述の等式により商も実装定義となっていた。C++11ではC99に合わせて「商の小数部がゼロ方向に切り捨てられた結果となること」が規定された。
 
@@ -40,4 +48,3 @@ int main()
 - [N2730 Expedited core issues handling (revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2730.html)
 - [N2757 Expedited core issues handling (revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2757.htm)
 - [C++ における整数型の怪と &amp;#34;移植性のある&amp;#34; オーバーフローチェッカー (第1回 : 整数型の怪と対策の不足)](http://qiita.com/a4lg/items/541c9d9dd5d874eeef2f)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>テンプレートの右山カッコ [N1757] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/right_angle_brackets.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/right_angle_brackets.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/right_angle_brackets.md b/lang/cpp11/right_angle_brackets.md
index 51ce4ae73..3af3608e6 100644
--- a/lang/cpp11/right_angle_brackets.md
+++ b/lang/cpp11/right_angle_brackets.md
@@ -1,6 +1,14 @@
 # テンプレートの右山カッコ [N1757]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++03では、2つ以上連続する右山カッコが出現する場合には、間にスペースを入力する必要があった：
 
@@ -100,4 +108,3 @@ C++11で採択された方式は、テンプレートの型パラメータと非
 - [N1649 Right Angle Brackets](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1649.html)
 - [N1699 Right Angle Brackets (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1699.html)
 - [N1757 Right Angle Brackets (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1757.html)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>右辺値参照・ムーブセマンティクス [N2118] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/rvalue_ref_and_move_semantics.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/rvalue_ref_and_move_semantics.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/rvalue_ref_and_move_semantics.md b/lang/cpp11/rvalue_ref_and_move_semantics.md
index 4a59d7ee4..cb2b68cab 100644
--- a/lang/cpp11/rvalue_ref_and_move_semantics.md
+++ b/lang/cpp11/rvalue_ref_and_move_semantics.md
@@ -1,6 +1,14 @@
 # 右辺値参照・ムーブセマンティクス [N2118]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 ムーブセマンティクスはコピーコストの削減を主な目的としており、また所有権の移動を実現する。  
 右辺値参照はムーブ元のオブジェクト（右辺値）を束縛するための言語機能である。
@@ -374,7 +382,7 @@ C++11で非推奨となった`std::auto_ptr`で実現されていた。
 
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`move`](/reference/utility/move.md)
 - [`forward`](/reference/utility/forward.md)
 - [`move_if_noexcept`](/reference/utility/move_if_noexcept.md)
@@ -402,4 +410,4 @@ C++11で非推奨となった`std::auto_ptr`で実現されていた。
 - [N2983 Allowing Move Constructors to Throw](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2983.html)
     - ムーブコンストラクタから例外を送出することを許可した経緯
 - [P0135R0 Wording for guaranteed copy elision through simplified value categories](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0135r1.html)
-    - C++17 値カテゴリの定義
+    - C++17 値カテゴリの定義
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スコープを持つ列挙型 [N2347] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/scoped_enum.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/scoped_enum.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/scoped_enum.md b/lang/cpp11/scoped_enum.md
index 8c214254f..bc506220e 100644
--- a/lang/cpp11/scoped_enum.md
+++ b/lang/cpp11/scoped_enum.md
@@ -1,6 +1,14 @@
 # スコープを持つ列挙型 [N2347]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `enum class`で定義した列挙型は、従来の`enum`に加えて、「整数型への暗黙の型変換を行わない」「列挙型のスコープを持つ」という機能を持つ。
 
@@ -90,7 +98,7 @@ C++03は、C99の列挙型に対する改善は提供していたが、依然と
 ECMA規格になっているC++/CLIが、現在のスコープを持つ列挙型と等価の機能を持っていたために、その経験を標準C++に取り入れることとなった。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`underlying_type`](/reference/type_traits/underlying_type.md)
 
 
@@ -101,4 +109,3 @@ ECMA規格になっているC++/CLIが、現在のスコープを持つ列挙型
 - [N2213 Strongly Typed Enums (revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2213.pdf)
 - [N2347 Strongly Typed Enums (revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2347.pdf)
 - [N2499 Forward declaration of enumerations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2499.pdf)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>任意の式によるSFINAE [N2634] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/sfinae_expressions.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/sfinae_expressions.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/sfinae_expressions.md b/lang/cpp11/sfinae_expressions.md
index c87e8a5f9..e5aad73b1 100644
--- a/lang/cpp11/sfinae_expressions.md
+++ b/lang/cpp11/sfinae_expressions.md
@@ -1,6 +1,14 @@
 # 任意の式によるSFINAE [N2634]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 「SFINAE (Substitution Failure Is Not An Errorの略称、スフィネェと読む)」は、テンプレートの置き換えに失敗した際に、即時にコンパイルエラーとはせず、置き換えに失敗した関数をオーバーロード解決の候補から除外するという言語機能である。
 
@@ -268,7 +276,7 @@ int main()
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`&amp;lt;type_traits&amp;gt;`](/reference/type_traits.md)
 - [`declval`](/reference/utility/declval.md)
 - [`enable_if`](/reference/type_traits/enable_if.md)
@@ -277,4 +285,3 @@ int main()
 ## 参照
 - [CWG Issue 339. Overload resolution in operand of `sizeof` in constant expression](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#339)
 - [N2634 Solving the SFINAE problem for expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2634.html)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンパイル時アサート [N1720] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/static_assert.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/static_assert.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/static_assert.md b/lang/cpp11/static_assert.md
index a7de6eaec..3257a8f39 100644
--- a/lang/cpp11/static_assert.md
+++ b/lang/cpp11/static_assert.md
@@ -1,6 +1,14 @@
 # コンパイル時アサート [N1720]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `static_assert`宣言は、指定した定数式が真であることを表明するための機能である。
 
@@ -78,7 +86,7 @@ Boost Static Assertion Libraryが開発されたときに、コンパイル時
 コンパイル時アサートのために`BOOST_STATIC_ASSERT`や`STATIC_CHECK`のようなマクロを使用することは、名前空間を汚染する問題があるが、コア言語にその機能を追加することでその問題は解消される。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 `static_assert`のメッセージ省略を許可](/lang/cpp17/extending_static_assert.md)
 - [C++17 constexpr if 文](/lang/cpp17/if_constexpr.md)
 - [C++23 定数式の文脈での`bool`への縮小変換を許可](/lang/cpp23/narrowing_contextual_conversions_to_bool.md)
@@ -91,4 +99,4 @@ Boost Static Assertion Libraryが開発されたときに、コンパイル時
 - [N1617 Proposal to Add Static Assertions to the Core Language (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1617.html)
 - [N1720 Proposal to Add Static Assertions to the Core Language (Revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1720.html)
 - [P2593R1: Allowing static_assert(false)](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2593r1.html)
-- [Issue 2518: Conformance requirements and #error/#warning - WG21 CWG Issues](https://wg21.cmeerw.net/cwg/issue2518)
+- [Issue 2518: Conformance requirements and #error/#warning - WG21 CWG Issues](https://wg21.cmeerw.net/cwg/issue2518)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ブロックスコープを持つstatic変数初期化のスレッドセーフ化 [N2660] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/static_initialization_thread_safely.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/static_initialization_thread_safely.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/static_initialization_thread_safely.md b/lang/cpp11/static_initialization_thread_safely.md
index c1a11b39a..c5c4af868 100644
--- a/lang/cpp11/static_initialization_thread_safely.md
+++ b/lang/cpp11/static_initialization_thread_safely.md
@@ -1,6 +1,14 @@
 # ブロックスコープを持つstatic変数初期化のスレッドセーフ化 [N2660]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 ブロックスコープを持つ`static`変数の初期化は、スレッドセーフであることが規定された。
 
@@ -97,4 +105,3 @@ int main()
 - [N2513 Dynamic Initialization and Destruction with Concurrency](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2513.html)
 - [N2660 Dynamic Initialization and Destruction with Concurrency](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2660.htm)
 - [C++0x時代の Double-Checked Locking - yamasaのネタ帳](http://yamasa.hatenablog.jp/entry/20100128/1264693781)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>文字列リテラルとワイド文字列リテラルの結合 -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/string_literal_concatenation.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/string_literal_concatenation.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/string_literal_concatenation.md b/lang/cpp11/string_literal_concatenation.md
index c314155ad..3329ed51a 100644
--- a/lang/cpp11/string_literal_concatenation.md
+++ b/lang/cpp11/string_literal_concatenation.md
@@ -1,6 +1,14 @@
 # 文字列リテラルとワイド文字列リテラルの結合
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C99互換として、文字列リテラルとワイド文字列リテラルが並んでいたとき、ワイド文字列リテラルとして結合することが規定された。
 
@@ -33,4 +41,3 @@ hello world
 ## 参照
 - [N1653 Working draft changes for C99 preprocessor synchronization](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1653.htm)
 - [WG14/N951 String literals and concatenation](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n951.htm)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スレッドローカルストレージ [N2659] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/thread_local_storage.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/thread_local_storage.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/thread_local_storage.md b/lang/cpp11/thread_local_storage.md
index 66df73293..bfaa7f0db 100644
--- a/lang/cpp11/thread_local_storage.md
+++ b/lang/cpp11/thread_local_storage.md
@@ -1,6 +1,14 @@
 # スレッドローカルストレージ [N2659]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 変数宣言の際に、記憶域として`thread_local`キーワードを指定することで、スレッドごとの静的記憶域に変数が保持される。
 
@@ -100,7 +108,7 @@ thread2 : 4
 各ベンダーのこれらの経験を標準C++に導入することとなった。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`exit`](/reference/cstdlib/exit.md)
 - [`quick_exit`](/reference/cstdlib/quick_exit.md)
 - [`_at_thread_exit`系の関数が存在している理由](/article/lib/at_thread_exit.md)
@@ -115,4 +123,3 @@ thread2 : 4
 - [N2659 Thread-Local Storage](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2659.htm)
 - [Why does Apple clang disallow C++11 `thread_local` when &amp;#39;official&amp;#39; clang supports it - Stack Overflow](http://stackoverflow.com/a/29929949/463412)
     - Apple実装のClang（Xcode 7以下に付属のもの）が`thread_local`機能をサポートしない理由
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>列挙子の末尾へのカンマ付加を許可 -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/trailing_comma_following_enumerator_list.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/trailing_comma_following_enumerator_list.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/trailing_comma_following_enumerator_list.md b/lang/cpp11/trailing_comma_following_enumerator_list.md
index 93558afd5..5e81e5ead 100644
--- a/lang/cpp11/trailing_comma_following_enumerator_list.md
+++ b/lang/cpp11/trailing_comma_following_enumerator_list.md
@@ -1,6 +1,14 @@
 # 列挙子の末尾へのカンマ付加を許可
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C99互換として、末尾の列挙子の後ろにカンマを書くことが許可された。
 
@@ -41,4 +49,3 @@ int main() {}
 
 ## 参照
 - [CWG Issue 518. Trailing comma following enumerator-list](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#518)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>戻り値の型を後置する関数宣言構文 [N2541] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/trailing_return_types.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/trailing_return_types.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/trailing_return_types.md b/lang/cpp11/trailing_return_types.md
index efee5fa5a..15000efa5 100644
--- a/lang/cpp11/trailing_return_types.md
+++ b/lang/cpp11/trailing_return_types.md
@@ -1,6 +1,14 @@
 # 戻り値の型を後置する関数宣言構文 [N2541]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 従来の関数宣言構文では、戻り値の型は先頭に記述していた。
 
@@ -100,7 +108,7 @@ auto f = [](int a, int b) -&amp;gt; int { return a + b; }
 しかし、この構文は採用されなかった。ラムダ導入子は関数宣言構文にとってはただのマーキングであり機能を持たないが、`auto`の場合はプレースホルダーであるために、将来的にそれを`auto*`、`auto&amp;amp;`のように、置き換えられる戻り値の型をさらに修飾できるようにするためである。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++14 通常関数の戻り値型推論](/lang/cpp14/return_type_deduction_for_normal_functions.md)
 
 
@@ -113,4 +121,3 @@ auto f = [](int a, int b) -&amp;gt; int { return a + b; }
     - ラムダ式の仕様と合わせて「trailing-return-type」という言葉が使われるようになった
 - [N2931 Unified Function Syntax](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2931.html)
 - [N2954 Unified Function Syntax](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2954.html)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>一様初期化 [N2672] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/uniform_initialization.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/uniform_initialization.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/uniform_initialization.md b/lang/cpp11/uniform_initialization.md
index 5475183cf..71d8d3190 100644
--- a/lang/cpp11/uniform_initialization.md
+++ b/lang/cpp11/uniform_initialization.md
@@ -1,6 +1,14 @@
 # 一様初期化 [N2672]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 「一様初期化 (uniform initialization)」は、コンストラクタの呼び出しを、リスト初期化と合わせて波カッコ `{ }`で記述する構文である。
 
@@ -189,7 +197,7 @@ int main()
     ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 初期化子リスト](initializer_lists.md)
 
 
@@ -200,4 +208,3 @@ int main()
 - [N2640 Initializer Lists - Alternative Mechanism and Rationale (v. 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2640.pdf)
 - [N2672 Initializer List proposed wording](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2672.htm)
 - [CWG Issue 1030. Evaluation order in initializer-lists used in aggregate initialization](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1030)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>共用体の制限解除 [N2544] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/unrestricted_unions.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/unrestricted_unions.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/unrestricted_unions.md b/lang/cpp11/unrestricted_unions.md
index afc3fa54a..507598121 100644
--- a/lang/cpp11/unrestricted_unions.md
+++ b/lang/cpp11/unrestricted_unions.md
@@ -1,6 +1,14 @@
 # 共用体の制限解除 [N2544]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 共用体のメンバ変数として、クラスオブジェクトを保持できるようになった：
 
@@ -67,4 +75,3 @@ hello
 - [N2430 Unrestricted Unions (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2430.pdf)
 - [N2544 Unrestricted Unions (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2544.pdf)
 - [Boost Variant Library](http://www.boost.org/libs/variant)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ユーザー定義リテラル [N2765] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/user_defined_literals.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/user_defined_literals.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/user_defined_literals.md b/lang/cpp11/user_defined_literals.md
index 7d1c89ca1..f7bf4a324 100644
--- a/lang/cpp11/user_defined_literals.md
+++ b/lang/cpp11/user_defined_literals.md
@@ -1,6 +1,14 @@
 # ユーザー定義リテラル [N2765]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 ユーザー定義リテラル(User-defined literals)は、`123`、`3.14`、`&amp;#34;hello&amp;#34;`といったリテラルに対して付けられるサフィックスをオーバーロードできるようにすることで、ユーザーがリテラルに意味を持たせられるようにする機能である。
 
@@ -356,7 +364,7 @@ DecimalFloat f = 12.34df;
 リテラル名がサフィックスであることを明示的にするために、今日の`DecimalFloat operator&amp;#34;&amp;#34; df(long double)`という形式になった。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++14 リテラル演算子のスペースを省略可能とする](/lang/cpp14/no_whitespace_literal_operators.md)
 - [`std::basic_string`の文字列リテラル`s`](/reference/string/basic_string/op_s.md)
 - [`std::complex&amp;lt;float&amp;gt;`の浮動小数点数リテラル`if`](/reference/complex/complex/op_if.md)
@@ -379,4 +387,3 @@ DecimalFloat f = 12.34df;
 - [N2765 User-defined Literals (aka. Extensible Literals (revision 5))](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2765.pdf)
 - [CWG Issue 935. Missing overloads for character types for user-defined literals](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#935)
 - [CWG Issue 1479. Literal operators and default arguments](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1479)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>UTF-8文字列リテラル [N2442] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/utf8_string_literals.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/utf8_string_literals.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/utf8_string_literals.md b/lang/cpp11/utf8_string_literals.md
index a1f8bd9d3..076b4d9e0 100644
--- a/lang/cpp11/utf8_string_literals.md
+++ b/lang/cpp11/utf8_string_literals.md
@@ -1,6 +1,14 @@
 # UTF-8文字列リテラル [N2442]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `char`の文字列リテラルに`u8`プレフィックスを付けることで、その文字列リテラルはUCS/Unicode文字コードのUTF-8符号化形式にエンコードされる。
 
@@ -62,7 +70,7 @@ int main()
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 `char16_t`と`char32_t`](char16_32.md)
 - [C++17 UTF-8文字リテラル](/lang/cpp17/utf8_character_literals.md)
 - [C++20 UTF-8エンコーディングされた文字の型として`char8_t`を追加](/lang/cpp20/char8_t.md)
@@ -76,4 +84,3 @@ int main()
 - [N2295 Raw and Unicode String Literals; Unified Proposal](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2295.html)
 - [N2384 Raw and Unicode String Literals; Unified Proposal (Rev. 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2384.html)
 - [N2442 Raw and Unicode String Literals; Unified Proposal (Rev. 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2442.htm)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変引数マクロ [N1653] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/variadic_macros.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/variadic_macros.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/variadic_macros.md b/lang/cpp11/variadic_macros.md
index afa3077f5..28027f2c2 100644
--- a/lang/cpp11/variadic_macros.md
+++ b/lang/cpp11/variadic_macros.md
@@ -1,6 +1,14 @@
 # 可変引数マクロ [N1653]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C99互換として、可変引数マクロ(variadic macros)が導入された。
 
@@ -69,11 +77,10 @@ f2
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 可変引数テンプレート](variadic_templates.md)
 - [C++20 可変引数が空でない場合のトークン置換](/lang/cpp20/va_opt.md)
 
 
 ## 参照
 - [N1653 Working draft changes for C99 preprocessor synchronization](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1653.htm)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変引数テンプレート [N2242] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/variadic_templates.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp11/variadic_templates.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/variadic_templates.md b/lang/cpp11/variadic_templates.md
index fdbabf6b1..0f44f02a0 100644
--- a/lang/cpp11/variadic_templates.md
+++ b/lang/cpp11/variadic_templates.md
@@ -1,6 +1,14 @@
 # 可変引数テンプレート [N2242]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 「可変引数テンプレート (variadic templates)」は、任意の型とそのオブジェクトを任意の数だけ受け取る機能である。これによって、「最大でN個のパラメータを受け取る関数テンプレートやクラステンプレート」を実装する際に、N個のオーバーロードをユーザーが用意する必要なく、ひとつの実装だけで済むようになる。
 
@@ -378,7 +386,7 @@ void f(const T1&amp;amp; t1, const T2&amp;amp; t2, const T3&amp;amp; t3);
 この問題を解決するために、任意の数だけ任意の型のパラメータを受け取る機能が必要とされ、可変引数テンプレートが導入された。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 可変引数マクロ](variadic_macros.md)
 - [C++17 畳み込み式](/lang/cpp17/folding_expressions.md)
 - [C++26 パラメータパックへのインデックスアクセスを許可](/lang/cpp26/pack_indexing.md.nolink)
@@ -394,4 +402,3 @@ void f(const T1&amp;amp; t1, const T2&amp;amp; t2, const T3&amp;amp; t3);
 - [N2242 Proposed Wording for Variadic Templates (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2242.pdf)
 - [N2488 Extending Variadic Template Template Parameters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2488.pdf)
 - [N2555 Extending Variadic Template Template Parameters (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2555.pdf)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>2進数リテラル [N3472] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/binary_literals.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp14/binary_literals.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/binary_literals.md b/lang/cpp14/binary_literals.md
index b0860f37f..1eb8531ae 100644
--- a/lang/cpp14/binary_literals.md
+++ b/lang/cpp14/binary_literals.md
@@ -1,6 +1,14 @@
 # 2進数リテラル [N3472]
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 整数リテラルのプレフィックスとして`0b`もしくは`0B`を付けることで、2進数を表す値を記述できる。
 
@@ -55,11 +63,10 @@ int main()
 こういった経緯から、C++標準で2進数リテラルをサポートすることとなった。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++14 数値リテラルの桁区切り文字](digit_separators.md)
 - [`bitset`](/reference/bitset/bitset.md)
 
 
 ## 参照
 - [N3472 - Binary Literals in the C++ Core Language](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3472.pdf)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ネストする集成体初期化における波カッコ省略を許可 [N3653] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/brace_elision_in_array_temporary_initialization.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp14/brace_elision_in_array_temporary_initialization.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/brace_elision_in_array_temporary_initialization.md b/lang/cpp14/brace_elision_in_array_temporary_initialization.md
index 41e8c3655..933d86d42 100644
--- a/lang/cpp14/brace_elision_in_array_temporary_initialization.md
+++ b/lang/cpp14/brace_elision_in_array_temporary_initialization.md
@@ -1,6 +1,14 @@
 # ネストする集成体初期化における波カッコ省略を許可 [N3653]
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++11では、集成体初期化とリスト初期化の両方を含む場合、二重に波カッコを書くことが必須となっていた。そのため、`public`メンバ変数として組み込み配列を持つ[`std::array`](/reference/array/array.md)クラスのオブジェクトを初期化する場合、以下のように、不要とも思える二重の波カッコを書かなければならなかった：
 
@@ -35,4 +43,3 @@ int x[2][2] = {1, 2, 3, 4};
 - [vector/arrayとUniform initialization+Initializer list - yohhoyの日記](http://d.hatena.ne.jp/yohhoy/20120724/p1)
 - [initializer-listによるaggregate初期化の制約緩和 - yohhoyの日記](http://d.hatena.ne.jp/yohhoy/20131116/p1)
 - [N3653 - Member initializers and aggregates](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3653.html)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>動的メモリ確保の省略の許可 -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/clarifying_memory_allocation.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp14/clarifying_memory_allocation.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/clarifying_memory_allocation.md b/lang/cpp14/clarifying_memory_allocation.md
index 80c321ce0..8008b72c0 100644
--- a/lang/cpp14/clarifying_memory_allocation.md
+++ b/lang/cpp14/clarifying_memory_allocation.md
@@ -1,6 +1,14 @@
 # 動的メモリ確保の省略の許可
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 以前の仕様では、`new`式による動的メモリ確保はコードに書かれた通りに実行されなければならず、ひとまとめにしたり省略したりすることはできなかった。
@@ -149,7 +157,7 @@ C++11時点で既に、そのような最適化を行うメモリアロケータ
 
 それによって、ミクロな範囲での`new/delete`式の省略が許可され、マクロな範囲の様々な情報を考慮してそれを行う事が可能となった。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [C++20 可変サイズをもつコンテナの`constexpr`化](/lang/cpp20/more_constexpr_containers.md)
 
@@ -157,4 +165,4 @@ C++11時点で既に、そのような最適化を行うメモリアロケータ
 ## 参照
 
 - [N3664 Clarifying Memory Allocation](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3664.html)
-- [C++14言語編 - slideshare](https://www.slideshare.net/kariya_mitsuru/c14-84084931)
+- [C++14言語編 - slideshare](https://www.slideshare.net/kariya_mitsuru/c14-84084931)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>decltype(auto) -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/decltype_auto.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp14/decltype_auto.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/decltype_auto.md b/lang/cpp14/decltype_auto.md
index 9ef4f775a..40ce597d1 100644
--- a/lang/cpp14/decltype_auto.md
+++ b/lang/cpp14/decltype_auto.md
@@ -1,6 +1,14 @@
 # decltype(auto)
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `decltype(auto)`は、`decltype`に与える式を右辺の式で置き換えて型推論する機能である。
 
@@ -64,6 +72,5 @@ int main()
 `decltype(auto)`は、C++14で導入された「[通常関数の戻り値型推論](return_type_deduction_for_normal_functions.md)」の機能で、参照の変数を参照のまま`return`文で返せるようにするために導入された。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++14 通常関数の戻り値型推論](return_type_deduction_for_normal_functions.md)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[deprecated]]属性 [N3760] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/deprecated_attr.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp14/deprecated_attr.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/deprecated_attr.md b/lang/cpp14/deprecated_attr.md
index 3491ccfb9..4322cce79 100644
--- a/lang/cpp14/deprecated_attr.md
+++ b/lang/cpp14/deprecated_attr.md
@@ -1,6 +1,14 @@
 # [[deprecated]]属性 [N3760]
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `[[deprecated]]`は、対象となる機能が非推奨であることを示す属性である。
 
@@ -121,7 +129,7 @@ prog.cc:45:3: warning: &amp;#39;class_templ&amp;lt;int&amp;gt;&amp;#39; is deprecated: don&amp;#39;t use class_templ&amp;lt;i
 これらの機能が使われてきた経験から、この属性・アノテーションは、ユーザーにとって役立つものであることが判明していた。そのため、この機能をC++標準の属性構文でサポートすることとなった。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 属性構文](/lang/cpp11/attributes.md)
 - [C++23 ラムダ式に対する属性](/lang/cpp23/attributes_on_lambda_expressions.md)
 
@@ -129,4 +137,3 @@ prog.cc:45:3: warning: &amp;#39;class_templ&amp;lt;int&amp;gt;&amp;#39; is deprecated: don&amp;#39;t use class_templ&amp;lt;i
 ## 参照
 - [N3394 `[[deprecated]]` attribute](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3394.html)
 - [N3760 `[[deprecated]]` attribute](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3760.html)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>数値リテラルの桁区切り文字 [N3781] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/digit_separators.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp14/digit_separators.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/digit_separators.md b/lang/cpp14/digit_separators.md
index ac95c7c56..510a98507 100644
--- a/lang/cpp14/digit_separators.md
+++ b/lang/cpp14/digit_separators.md
@@ -1,6 +1,14 @@
 # 数値リテラルの桁区切り文字 [N3781]
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 整数リテラルと浮動小数点数リテラルには、途中にシングルクォーテーション(`&amp;#39;`)を入力することで、値を読みやすくできる。
 
@@ -120,7 +128,7 @@ C++14という言語バージョンは、C++11の仕様に対するバグ修正
 これらが検討された上で、上付きカンマと見なせるシングルクォーテーション(`&amp;#39;`)が採用された。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++14 2進数リテラル](binary_literals.md)
 
 
@@ -136,4 +144,3 @@ C++14という言語バージョンは、C++11の仕様に対するバグ修正
 - Java 7 : [Underscores in Numeric Literals](http://docs.oracle.com/javase/7/docs/technotes/guides/language/underscores-literals.html)
 - Ada : [Ada &amp;#39;83 Language Reference Manual](http://archive.adaic.com/standards/83lrm/html/lrm-02-04.html#2.4)
 
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>機能テストマクロ -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/feature_test_macros.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp14/feature_test_macros.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;機能テストマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp14&#34; title=&#34;C++14で追加&#34;&gt;(C++14)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++14に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;SD-6 は C++14 の機能について以下のテストマクロを定義することを推奨している：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_aggregate_nsdmi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メンバ初期化子と集約&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_binary_literals&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;binary_literals.html&#34;&gt;二進数リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;relaxing_constraints_on_constexpr.html&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;の制限緩和/&lt;code&gt;constexpr&lt;/code&gt; メンバ関数の暗黙的な &lt;code&gt;const&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_decltype_auto&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;return_type_deduction_for_normal_functions.html&#34;&gt;通常関数の戻り値型推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_generic_lambdas&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;generic_lambdas.html&#34;&gt;ジェネリックラムダ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_init_captures&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;initialize_capture.html&#34;&gt;ラムダ式の初期化キャプチャ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_chrono_udls&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration.html&#34;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; のユーザー定義リテラル (&lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_ns.html&#34;&gt;ns&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_us.html&#34;&gt;us&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_ms.html&#34;&gt;ms&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_s.html&#34;&gt;s&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_min.html&#34;&gt;min&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_h.html&#34;&gt;h&lt;/a&gt;&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_complex_udls&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201309&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ユーザー定義虚数リテラル (&lt;code&gt;&lt;a href=&#34;../../reference/complex/complex/op_i.html&#34;&gt;i&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/complex/complex/op_if.html&#34;&gt;if&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/complex/complex/op_il.html&#34;&gt;il&lt;/a&gt;&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/complex.html&#34;&gt;&amp;lt;complex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_exchange_function&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility/exchange.html&#34;&gt;std::exchange&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_generic_associative_lookup&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;連想配列 (&lt;code&gt;&lt;a href=&#34;../../reference/map/map.html&#34;&gt;std::map&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/map/multimap.html&#34;&gt;std::multimap&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/set/set.html&#34;&gt;std::set&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/set/multiset.html&#34;&gt;std::multiset&lt;/a&gt;&lt;/code&gt;) における異なる型の比較 (&lt;code&gt;count&lt;/code&gt;, &lt;code&gt;equal_range&lt;/code&gt;, &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;lower_bound&lt;/code&gt;, &lt;code&gt;upper_bound&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/set.html&#34;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_integer_sequence&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/utility/integer_sequence.html&#34;&gt;コンパイル時整数列&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_integral_constant_callable&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/integral_constant.html&#34;&gt;std::integral_constant&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;operator()&lt;/code&gt; を追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_final&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201402&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_final.html&#34;&gt;std::is_final&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_null_pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201309&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_null_pointer.html&#34;&gt;std::is_null_pointer&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_make_reverse_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201402&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator/make_reverse_iterator.html&#34;&gt;std::make_reverse_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_make_unique&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/make_unique.html&#34;&gt;std::make_unique&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/make_unique.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_null_iterators&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ヌル前方向イテレータ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_quoted_string_io&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iomanip/quoted.html&#34;&gt;std::quoted&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iomanip.html&#34;&gt;&amp;lt;iomanip&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_result_of_sfinae&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201210&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/result_of.html&#34;&gt;std::result_of&lt;/a&gt;&lt;/code&gt; と SFINAE&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_robust_nonmodifying_seq_ops&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスを変更しない操作をよりロバストに&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shared_timed_mutex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201402&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;shared_mutex&lt;/code&gt; を &lt;code&gt;&lt;a href=&#34;../../reference/shared_mutex/shared_timed_mutex.html&#34;&gt;shared_timed_mutex&lt;/a&gt;&lt;/code&gt; にリネーム&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/shared_mutex.html&#34;&gt;&amp;lt;shared_mutex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_string_udls&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ユーザー定義 &lt;code&gt;&lt;a href=&#34;../../reference/string/basic_string/op_s.html&#34;&gt;std::string_literals::basic_string::sリテラル&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_transformation_trait_aliases&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型トレイトにエイリアステンプレートを追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_transparent_operators&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201210&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt; の二項演算のデフォルトテンプレート引数を &lt;code&gt;void&lt;/code&gt; に&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_tuple_element_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201402&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple/tuple_element.html&#34;&gt;std::tuple_element_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_tuples_by_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/tuple/tuple/get.html&#34;&gt;型による &lt;code&gt;std::tuple::get&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_return_type_deduction&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;return_type_deduction_for_normal_functions.html&#34;&gt;通常関数の戻り値型推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_sized_deallocation&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201309&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;sized_deallocation.html&#34;&gt;サイズ付きデアロケーション&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_variable_templates&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;variable_templates.html&#34;&gt;変数テンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(deprecated)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201309&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;deprecated_attr.html&#34;&gt;&lt;code&gt;[[deprecated]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_include(&amp;lt;shared_mutex&amp;gt;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/shared_mutex.html&#34;&gt;共有ロック&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations#recs.cpp14&#34; target=&#34;_blank&#34;&gt;SD-6: SG10 Feature Test Recommendations: Standard C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ジェネリックラムダ [N3649] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/generic_lambdas.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp14/generic_lambdas.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/generic_lambdas.md b/lang/cpp14/generic_lambdas.md
index d92b15b61..d61ead3ca 100644
--- a/lang/cpp14/generic_lambdas.md
+++ b/lang/cpp14/generic_lambdas.md
@@ -1,6 +1,14 @@
 # ジェネリックラムダ [N3649]
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 ジェネリックラムダ(generic lambdas)は、[C++11のラムダ式](/lang/cpp11/lambda_expressions.md)を拡張して、パラメータにテンプレートを使用できるようにした機能である。
 
@@ -120,7 +128,7 @@ HelloWorld
 これが現在`auto`を書くようになったのは、可読性のためである。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 ラムダ式](/lang/cpp11/lambda_expressions.md)
 - [C++14 ラムダ式の初期化キャプチャ](initialize_capture.md)
 - [C++14 通常関数の戻り値型推論](return_type_deduction_for_normal_functions.md)
@@ -131,4 +139,4 @@ HelloWorld
 ## 参照
 - [N3418 Proposal for Generic (Polymorphic) Lambda Expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3418.pdf)
 - [N3559 Proposal for Generic (Polymorphic) Lambda Expressions (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3559.pdf)
-- [N3649 Generic (Polymorphic) Lambda Expressions (Revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3649.html)
+- [N3649 Generic (Polymorphic) Lambda Expressions (Revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3649.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式の初期化キャプチャ [N3648] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/initialize_capture.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp14/initialize_capture.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/initialize_capture.md b/lang/cpp14/initialize_capture.md
index 4b984b47c..33e66ae6d 100644
--- a/lang/cpp14/initialize_capture.md
+++ b/lang/cpp14/initialize_capture.md
@@ -1,6 +1,14 @@
 # ラムダ式の初期化キャプチャ [N3648]
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 「初期化キャプチャ(init-capture)」は、任意の式の結果をラムダ式にキャプチャする機能である。
 
@@ -137,7 +145,7 @@ int main()
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 ラムダ式](/lang/cpp11/lambda_expressions.md)
 - [C++14 ジェネリックラムダ](generic_lambdas.md)
 
@@ -145,4 +153,3 @@ int main()
 ## 参照
 - [N3610 Generic lambda-capture initializers, supporting capture-by-move](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3610.html)
 - [N3648 Wording Changes for Generalized Lambda-capture](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3648.html)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>宣言時のメンバ初期化を持つ型の集成体初期化を許可 -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/member_initializers_and_aggregates.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp14/member_initializers_and_aggregates.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/member_initializers_and_aggregates.md b/lang/cpp14/member_initializers_and_aggregates.md
index 9e1e855e8..22fbd8d0a 100644
--- a/lang/cpp14/member_initializers_and_aggregates.md
+++ b/lang/cpp14/member_initializers_and_aggregates.md
@@ -1,6 +1,14 @@
 # 宣言時のメンバ初期化を持つ型の集成体初期化を許可
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++11で導入された[メンバ初期化子](/lang/cpp11/non_static_data_member_initializers.md)は集成体の初期化と組み合わせて使用することができない問題があった。
 
@@ -27,9 +35,8 @@ int main()
 - 集成体の定義として「非静的メンバ変数の初期化をもたない」ことが条件になっていたが、それを削除
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 非静的メンバ変数の初期化](/lang/cpp11/non_static_data_member_initializers.md)
 
 ## 参照
 - [N3653 - Member initializers and aggregates](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3653.html)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>リテラル演算子のスペースを省略可能とする -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/no_whitespace_literal_operators.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp14/no_whitespace_literal_operators.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/no_whitespace_literal_operators.md b/lang/cpp14/no_whitespace_literal_operators.md
index 10641a093..4688dcf09 100644
--- a/lang/cpp14/no_whitespace_literal_operators.md
+++ b/lang/cpp14/no_whitespace_literal_operators.md
@@ -1,6 +1,14 @@
 # リテラル演算子のスペースを省略可能とする
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 リテラル演算子を定義する際に、これまでは以下のように、`operator&amp;#34;&amp;#34;`とサフィックス名の間に、ひとつ以上のスペースが必要だった。
 
@@ -43,10 +51,9 @@ hello
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 ユーザー定義リテラル](/lang/cpp11/user_defined_literals.md)
 
 
 ## 参照
 - [CWG Issue 1473. Syntax of literal-operator-id](https://wg21.cmeerw.net/cwg/issue1473)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>nullptr_t型の定数式を非型テンプレートパラメータとすることを許可 -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/nontype_template_parameters_of_type_nullptr_t.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp14/nontype_template_parameters_of_type_nullptr_t.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/nontype_template_parameters_of_type_nullptr_t.md b/lang/cpp14/nontype_template_parameters_of_type_nullptr_t.md
index 0350fdf35..560705c70 100644
--- a/lang/cpp14/nontype_template_parameters_of_type_nullptr_t.md
+++ b/lang/cpp14/nontype_template_parameters_of_type_nullptr_t.md
@@ -1,6 +1,14 @@
 # nullptr_t型の定数式を非型テンプレートパラメータとすることを許可
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 [`nullptr_t`](/reference/cstddef/nullptr_t.md)型の定数式を非型テンプレートパラメータとすることが許可された。
 
@@ -23,10 +31,9 @@ int main()
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 `nullptr`](/lang/cpp11/nullptr.md)
 
 
 ## 参照
 - [CWG Issue 1398. Non-type template parameters of type `std::nullptr_t`](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1398)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>後置戻り値型をプレースホルダーにすることを許可 -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/placeholder_type_in_trailing_return_type.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp14/placeholder_type_in_trailing_return_type.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/placeholder_type_in_trailing_return_type.md b/lang/cpp14/placeholder_type_in_trailing_return_type.md
index 502bdca23..f6a5a0b70 100644
--- a/lang/cpp14/placeholder_type_in_trailing_return_type.md
+++ b/lang/cpp14/placeholder_type_in_trailing_return_type.md
@@ -1,6 +1,14 @@
 # 後置戻り値型をプレースホルダーにすることを許可
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 [戻り値の型を後置する関数宣言構文](/lang/cpp11/trailing_return_types.md)と[ラムダ式](/lang/cpp11/lambda_expressions.md)の、後置戻り値型(trailing return type)を`auto`プレースホルダーとし、そのプレースホルダーを修飾することで、戻り値型の推論を補助できる。
 
@@ -47,7 +55,6 @@ int main()
 この機能は、C++14で導入された「[通常関数の戻り値型推論](return_type_deduction_for_normal_functions.md)」の機能において、ラムダ式から参照の戻り値を返すことを目的として導入された。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++14 通常関数の戻り値型推論](return_type_deduction_for_normal_functions.md)
 
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>更新された定義済みマクロ -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/predefined_macros.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp14/predefined_macros.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;更新された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp14&#34; title=&#34;C++14で追加&#34;&gt;(C++14)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++14に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cplusplus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201402L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++のバージョン値を表す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexprの制限緩和 [N3652] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/relaxing_constraints_on_constexpr.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp14/relaxing_constraints_on_constexpr.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/relaxing_constraints_on_constexpr.md b/lang/cpp14/relaxing_constraints_on_constexpr.md
index c6d840d01..cc3d66426 100644
--- a/lang/cpp14/relaxing_constraints_on_constexpr.md
+++ b/lang/cpp14/relaxing_constraints_on_constexpr.md
@@ -1,6 +1,14 @@
 # constexprの制限緩和 [N3652]
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++11で、汎用定数式の機能である[`constexpr`](/lang/cpp11/constexpr.md)が導入された。
 
@@ -197,7 +205,7 @@ C++は直交性を重視して設計されており、直接関係ない機能
 C++14では、`constexpr`関数、`constexpr`メンバ関数、暗黙の`const`といった制限を緩和する。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 `constexpr`](/lang/cpp11/constexpr.md)
 
 
@@ -205,4 +213,3 @@ C++14では、`constexpr`関数、`constexpr`メンバ関数、暗黙の`const`
 - [N3597 Relaxing constraints on `constexpr` functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3597.html)
 - [N3598 `constexpr` member functions and implicit `const`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3598.html)
 - [N3652 Relaxing constraints on `constexpr` functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3652.html)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>通常関数の戻り値型推論 [N3638] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/return_type_deduction_for_normal_functions.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp14/return_type_deduction_for_normal_functions.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/return_type_deduction_for_normal_functions.md b/lang/cpp14/return_type_deduction_for_normal_functions.md
index f2434536c..040f506be 100644
--- a/lang/cpp14/return_type_deduction_for_normal_functions.md
+++ b/lang/cpp14/return_type_deduction_for_normal_functions.md
@@ -1,6 +1,14 @@
 # 通常関数の戻り値型推論 [N3638]
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 関数宣言の構文において、先頭の戻り値型を`auto`もしくは[`decltype(auto)`](decltype_auto.md)とすることで、戻り値の型が関数の`return`文から推論される。
 
@@ -224,7 +232,7 @@ auto g(F f) { return f(); }
 [戻り値の型を後置する関数宣言構文](/lang/cpp11/trailing_return_types.md)のページを参照。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 戻り値の型を後置する関数宣言構文](/lang/cpp11/trailing_return_types.md)
 - [C++14 `decltype(auto)`](decltype_auto.md)
 - [C++14 後置戻り値型をプレースホルダーにすることを許可](placeholder_type_in_trailing_return_type.md)
@@ -237,4 +245,3 @@ auto g(F f) { return f(); }
 - [N3638 Return type deduction for normal functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3638.html)
 - [CWG Issue 1048. `auto` deduction and lambda return type deduction.](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1048)
 - [CWG Issue 1588. Deducing cv-qualified `auto`](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1588)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>サイズ付きデアロケーション [N3778] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/sized_deallocation.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp14/sized_deallocation.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/sized_deallocation.md b/lang/cpp14/sized_deallocation.md
index 1d130364d..d3271b809 100644
--- a/lang/cpp14/sized_deallocation.md
+++ b/lang/cpp14/sized_deallocation.md
@@ -1,6 +1,14 @@
 # サイズ付きデアロケーション [N3778]
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++03ではクラス用の`delete`演算子として、サイズをとるバージョンをオーバーロードできた。C++14では、それに対応するグローバルの`delete`演算子を定義できるようにする。
 
@@ -93,7 +101,7 @@ delete with two arguments, 13
 - Clangは3.7以降、サイズをとる`delete`演算子を使用する場合、`-fsized-deallocation`オプションを付ける必要がある。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`allocator::deallocate`](/reference/memory/allocator/deallocate.md)
 - [`operator delete`](/reference/new/op_delete.md)
 - [`operator delete[]`](/reference/new/op_delete[].md)
@@ -104,4 +112,4 @@ delete with two arguments, 13
 - [N3536 C++ Sized Deallocation](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3536.html)
 - [N3663 C++ Sized Deallocation](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3663.html)
 - [N3778 C++ Sized Deallocation](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3778.html)
-- [LWG Issue 2458. N3778 and new library deallocation signatures](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2458)
+- [LWG Issue 2458. N3778 and new library deallocation signatures](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2458)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>変数テンプレート [N3651] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/variable_templates.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp14/variable_templates.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/variable_templates.md b/lang/cpp14/variable_templates.md
index 97cbadc51..37eed78f8 100644
--- a/lang/cpp14/variable_templates.md
+++ b/lang/cpp14/variable_templates.md
@@ -1,6 +1,14 @@
 # 変数テンプレート [N3651]
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 変数定義時のテンプレート指定を可能にする。
 
@@ -120,7 +128,7 @@ auto main() -&amp;gt; int
 - `const`または`constexpr`と組み合わせて用いる提案があったが、ワーキンググループの多数意見によりC++14の対象では制限しない事にした。（N3651）
 - テンプレートテンプレートについても提案があったが、ワーキンググループで複数の不要論がありC++14では含めない事にした。（N3651）
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 `constexpr`](/lang/cpp11/constexpr.md)
 - [C++17 変数テンプレートのデフォルトテンプレート引数を許可](/lang/cpp17/allow_default_template_arguments_of_variable_templates.md)
 - [C++23 変数テンプレートの部分特殊化を許可](/lang/cpp23/generalized_wording_for_partial_specializations.md)
@@ -129,4 +137,3 @@ auto main() -&amp;gt; int
 - [N3651 Variable Templates (Revision 1)](http://open-std.org/JTC1/SC22/WG21/docs/papers/2013/n3651.pdf)
 - [Trip Report: ISO C++ Spring 2013 Meeting](https://isocpp.org/blog/2013/04/trip-report-iso-c-spring-2013-meeting)
 - [変数テンプレートをラムダ式でキャプチャするときの注意 - Faith and Brave - C++で遊ぼう](http://faithandbrave.hateblo.jp/entry/2014/01/21/162701)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>全ての非型テンプレート引数の定数式評価を許可 [N4268] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.md b/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.md
index 19f66f972..1a5f04d3e 100644
--- a/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.md
+++ b/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.md
@@ -2,6 +2,14 @@
 
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++17では、非型テンプレート引数(non-type template argument)で扱える型はとくに変わらないが、渡せる値についての制限緩和が行われる。
 
@@ -114,4 +122,4 @@ A&amp;lt;q()&amp;gt; c; // ok!
 ## 参照
 - [N4198 Allow constant evaluation for all non-type template arguments](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4198.html)
 - [N4268 Allow constant evaluation for all non-type template arguments](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4268.html)
-- [C++1z 全ての非型テンプレート引数の定数式評価を許可 - Faith and Brave - C++で遊ぼう](https://faithandbrave.hateblo.jp/entry/2016/10/27/180801)
+- [C++1z 全ての非型テンプレート引数の定数式評価を許可 - Faith and Brave - C++で遊ぼう](https://faithandbrave.hateblo.jp/entry/2016/10/27/180801)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>変数テンプレートのデフォルトテンプレート引数を許可 -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/allow_default_template_arguments_of_variable_templates.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/allow_default_template_arguments_of_variable_templates.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/allow_default_template_arguments_of_variable_templates.md b/lang/cpp17/allow_default_template_arguments_of_variable_templates.md
index 363d1c5d0..f8c14b098 100644
--- a/lang/cpp17/allow_default_template_arguments_of_variable_templates.md
+++ b/lang/cpp17/allow_default_template_arguments_of_variable_templates.md
@@ -1,6 +1,14 @@
 # 変数テンプレートのデフォルトテンプレート引数を許可
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++17では、[変数テンプレート](/lang/cpp14/variable_templates.md)のテンプレートパラメータがデフォルト引数を持てることとなった。
 
@@ -28,4 +36,4 @@ int main()
 
 
 ## 参照
-- [CWG Issue 2032. Default template-arguments of variable templates](https://wg21.cmeerw.net/cwg/issue2032)
+- [CWG Issue 2032. Default template-arguments of variable templates](https://wg21.cmeerw.net/cwg/issue2032)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>テンプレートテンプレートパラメータにtypenameキーワードの使用を許可 [N4051] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/allow_typename_in_a_template_template_parameter.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/allow_typename_in_a_template_template_parameter.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/allow_typename_in_a_template_template_parameter.md b/lang/cpp17/allow_typename_in_a_template_template_parameter.md
index e4dee187a..2b05c7f5d 100644
--- a/lang/cpp17/allow_typename_in_a_template_template_parameter.md
+++ b/lang/cpp17/allow_typename_in_a_template_template_parameter.md
@@ -1,6 +1,14 @@
 # テンプレートテンプレートパラメータにtypenameキーワードの使用を許可 [N4051]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 テンプレートパラメータはほとんどの箇所で`class`キーワードと`typename`キーワードの両方を使用できたが、テンプレートテンプレートパラメータのクラステンプレート部分については`class`キーワードしか使用できなかった。
 
@@ -45,4 +53,4 @@ int main()
 ```
 
 ## 参照
-- [N4051 Allow `typename` in a template template parameter](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4051.html)
+- [N4051 Allow `typename` in a template template parameter](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4051.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>名前空間と列挙子への属性付加を許可 [N4266] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/attributes_for_namespaces_and_enumerators.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/attributes_for_namespaces_and_enumerators.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/attributes_for_namespaces_and_enumerators.md b/lang/cpp17/attributes_for_namespaces_and_enumerators.md
index 78aee629b..7fd5c7014 100644
--- a/lang/cpp17/attributes_for_namespaces_and_enumerators.md
+++ b/lang/cpp17/attributes_for_namespaces_and_enumerators.md
@@ -1,6 +1,14 @@
 # 名前空間と列挙子への属性付加を許可 [N4266]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 名前空間と列挙子への属性付加が可能となった。
@@ -61,9 +69,9 @@ namespace [[deprecated]] bar {
 2 warnings generated.
 ```
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 属性構文](/lang/cpp11/attributes.md)
 
 ## 参照
 - [N4196 Attributes for namespaces and enumerators](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4196.html)
-- [N4266 Attributes for namespaces and enumerators](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4266.html)
+- [N4266 Attributes for namespaces and enumerators](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4266.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr ラムダ [P0170R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/constexpr_lambda.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/constexpr_lambda.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/constexpr_lambda.md b/lang/cpp17/constexpr_lambda.md
index f0ca91494..d67e01f5d 100644
--- a/lang/cpp17/constexpr_lambda.md
+++ b/lang/cpp17/constexpr_lambda.md
@@ -2,6 +2,14 @@
 
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++17から、ラムダ式をconstexpr関数として使えるようになった。
@@ -193,4 +201,4 @@ C++14まではラムダ式がコンパイル時に呼び出せないため、
 ## 参照
 
 (執筆中)
-- [P0170R1 Wording for Constexpr Lambda](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0170r1.pdf)
+- [P0170R1 Wording for Constexpr Lambda](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0170r1.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>enum class変数の初期値として整数を指定する際の規則を調整 [P0138R2] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/construction_enum_class_values.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/construction_enum_class_values.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/construction_enum_class_values.md b/lang/cpp17/construction_enum_class_values.md
index b4e8f2589..f776f8493 100644
--- a/lang/cpp17/construction_enum_class_values.md
+++ b/lang/cpp17/construction_enum_class_values.md
@@ -1,6 +1,14 @@
 # enum class変数の初期値として整数を指定する際の規則を調整 [P0138R2]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++11にてスコープを持つ列挙型が導入された。これは基底型を明示することができ、従来の列挙型と異なり整数型への暗黙の型変換を行わない。
 
@@ -96,9 +104,9 @@ enum class byte : unsigned char { };
 C++17ではスコープを持つ列挙型の初期化ルールを緩和し、簡潔な記述を実現するとともに、意図せず精度を失う変換を行う危険性を排除した。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 スコープを持つ列挙型](/lang/cpp11/scoped_enum.md)
 - [`std::byte`](/reference/cstddef/byte.md)
 
 ## 参照
-- [P0138R2 Construction Rules for enum class Values.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0138r2.pdf)
+- [P0138R2 Construction Rules for enum class Values.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0138r2.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非型テンプレートパラメータのauto宣言 [P0127R2] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/declaring_non-type_template_arguments_with_auto.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/declaring_non-type_template_arguments_with_auto.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/declaring_non-type_template_arguments_with_auto.md b/lang/cpp17/declaring_non-type_template_arguments_with_auto.md
index e532dd3f0..0ba305a8b 100644
--- a/lang/cpp17/declaring_non-type_template_arguments_with_auto.md
+++ b/lang/cpp17/declaring_non-type_template_arguments_with_auto.md
@@ -2,6 +2,14 @@
 
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++14まで、以下のように書いていた「指定された型の定数を受け取る」意図の非型テンプレートパラメータ(non-type template parameter)だが、
 
@@ -91,7 +99,7 @@ S&amp;lt;x&amp;gt; s; // desired instantiation
 template &amp;lt;auto v&amp;gt; struct S; // type of v is deduced
 ```
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 全ての非型テンプレート引数の定数式評価を許可](/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.md)
 - [C++20 非型テンプレートパラメータとしてクラス型を許可する](/lang/cpp20/class_types_in_non-type_template_parameters.md)
 
@@ -99,4 +107,4 @@ template &amp;lt;auto v&amp;gt; struct S; // type of v is deduced
 ## 参照
 - [P0127R1 Declaring non-type template arguments with auto](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0127r1.html)
 - [P0127R2 Declaring non-type template parameters with auto](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0127r2.html)
-- [C++1z 非型テンプレートパラメータのauto宣言 - Faith and Brave - C++で遊ぼう](https://faithandbrave.hateblo.jp/entry/2016/10/26/180406)
+- [C++1z 非型テンプレートパラメータのauto宣言 - Faith and Brave - C++で遊ぼう](https://faithandbrave.hateblo.jp/entry/2016/10/26/180406)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>アライメント指定されたデータの動的メモリ確保 [P0035R4] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md b/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md
index 8a14b5487..412876e18 100644
--- a/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md
+++ b/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md
@@ -1,6 +1,14 @@
 # アライメント指定されたデータの動的メモリ確保 [P0035R4]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 クラスのアライメント要求がデフォルトで満たされるものより大きい場合でも、動的に確保されたメモリ領域が指定したアライメントを満たしていることが保証される。
@@ -37,7 +45,7 @@ void* operator new(std::size_t size, std::align_val_t alignment);
 
 `new T`の呼び出しが[`align_val_t`](/reference/new/align_val_t.md)を取る[`new`](/reference/new/op_new.md)で解決される場合、`align_val_t`の値は`alignof(T)`の結果になる。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`&amp;lt;new&amp;gt;`](/reference/new.md)
 - [`std::align`](/reference/memory/align.md)
 - [C++11 `alignas`](/lang/cpp11/alignas.md)
@@ -45,4 +53,4 @@ void* operator new(std::size_t size, std::align_val_t alignment);
 
 ## 参照
 - [P0035R4 Dynamic memory allocation for over-aligned data](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0035r4.html)
-- [New `new()` - The C++17&amp;#39;s Alignment Parameter for Operator `new()`](https://www.bfilipek.com/2019/08/newnew-align.html)
+- [New `new()` - The C++17&amp;#39;s Alignment Parameter for Operator `new()`](https://www.bfilipek.com/2019/08/newnew-align.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>例外仕様を型システムの一部にする [P0012R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/exception_spec_be_part_of_the_type_system.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/exception_spec_be_part_of_the_type_system.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/exception_spec_be_part_of_the_type_system.md b/lang/cpp17/exception_spec_be_part_of_the_type_system.md
index 7be6cb8d9..d735f4707 100644
--- a/lang/cpp17/exception_spec_be_part_of_the_type_system.md
+++ b/lang/cpp17/exception_spec_be_part_of_the_type_system.md
@@ -1,6 +1,14 @@
 # 例外仕様を型システムの一部にする [P0012R1]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 [`noexcept`](/lang/cpp11/noexcept.md)による例外仕様が、関数の型の一部として扱われるようになる。
 
@@ -78,10 +86,10 @@ C++11で[`noexcept`](/lang/cpp11/noexcept.md)が導入されたことにより
 そのほか、次期標準で考えられているトランザクショナルメモリ機能において、トランザクション内で安全に使える機能の条件を決める上で、「関数に`noexcept`が付いていること」というものが必要となった。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 noexcept](/lang/cpp11/noexcept.md)
 - [C++17 noexcept付きのラムダ式から変換する関数ポインタにnoexceptを付加する](lambda_to_noexcept_function_pointer.md)
 
 
 ## 参照
-- [P0012R1 Make exception specifications be part of the type system, version 5](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0012r1.html)
+- [P0012R1 Make exception specifications be part of the type system, version 5](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0012r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>厳密な式の評価順 [P0145R3] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/expression_evaluation_order.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/expression_evaluation_order.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/expression_evaluation_order.md b/lang/cpp17/expression_evaluation_order.md
index 4fe26553c..9be6c3eff 100644
--- a/lang/cpp17/expression_evaluation_order.md
+++ b/lang/cpp17/expression_evaluation_order.md
@@ -1,6 +1,14 @@
 # 厳密な式の評価順 [P0145R3]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++14までは演算子オペランドにあたる部分式の評価順序は未規定（unspecified）であったが、
@@ -158,9 +166,9 @@ C++の既存のプログラムを壊すこと無く、なおかつ、
 対象を限定して注意深く変更した結果である。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 
 ## 参照
 - [P0145R3 Refining Expression Evaluation Order for Idiomatic C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0145r3.pdf)
-- [P0400R0 Wording for Order of Evaluation of Function Arguments](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0400r0.html)
+- [P0400R0 Wording for Order of Evaluation of Function Arguments](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0400r0.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>static_assert のメッセージ省略を許可 [N3928] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/extending_static_assert.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/extending_static_assert.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/extending_static_assert.md b/lang/cpp17/extending_static_assert.md
index 8ae20ef82..96d6c6e6a 100644
--- a/lang/cpp17/extending_static_assert.md
+++ b/lang/cpp17/extending_static_assert.md
@@ -1,6 +1,14 @@
 # static_assert のメッセージ省略を許可 [N3928]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `static_assert` は [C++11](/lang/cpp11/static_assert.md) で導入されたが、第2引数に診断メッセージを指定しなければならなかった。
 C++17 ではこれを省略できるようになった。
@@ -64,10 +72,10 @@ example_static_assert.cpp:5:3: error: static_assert failed
 * 『`static_assert` は1つ以上の`定数式`を取り、診断メッセージはテキストに変換した`定数式`を含む』
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 `static_assert`](/lang/cpp11/static_assert.md)
 
 
 ## 参照
 - [N3846 Extending `static_assert`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3846.pdf)
-- [N3928 Extending `static_assert`, v2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3928.pdf)
+- [N3928 Extending `static_assert`, v2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3928.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>基底クラスのメンバ変数を集成体初期化するための波カッコを省略できるようにする [P0017R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/extension_to_aggregate_initialization.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/extension_to_aggregate_initialization.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/extension_to_aggregate_initialization.md b/lang/cpp17/extension_to_aggregate_initialization.md
index f595a0b3f..b2c941418 100644
--- a/lang/cpp17/extension_to_aggregate_initialization.md
+++ b/lang/cpp17/extension_to_aggregate_initialization.md
@@ -2,6 +2,14 @@
 
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++17 から集成体初期化が拡張され、基底クラスを持つ型の初期化が簡潔に記述できるようになった。
@@ -117,11 +125,11 @@ int main()
 
 この機能により C++17 以降では記述が簡潔になり、実装労力の低減、ソースコードの可読性の向上が図られた。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 1. [C++14 / 宣言時のメンバ初期化を持つ型の集成体初期化を許可](../cpp14/brace_elision_in_array_temporary_initialization.md)
 
 
 ## 参照
 
-1. [P0017R1 Extension to aggregate initialization](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0017r1.html)
+1. [P0017R1 Extension to aggregate initialization](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0017r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[fallthrough]]属性 [P0188R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/fallthrough.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/fallthrough.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/fallthrough.md b/lang/cpp17/fallthrough.md
index eb8f4be43..5e3590875 100644
--- a/lang/cpp17/fallthrough.md
+++ b/lang/cpp17/fallthrough.md
@@ -1,6 +1,14 @@
 # [[fallthrough]]属性 [P0188R1]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 `[[fallthrough]]`属性は意図したフォールスルーであることをコンパイラに伝え、警告を抑制するための属性である。
@@ -51,9 +59,9 @@ fallthrough.cpp:12:3: note: here
    ^~~~
 ```
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 属性構文](/lang/cpp11/attributes.md)
 
 ## 参照
 - [P0068R0 Proposal of &amp;amp;#91;&amp;amp;#91;unused&amp;amp;#93;&amp;amp;#93;, &amp;amp;#91;&amp;amp;#91;nodiscard&amp;amp;#93;&amp;amp;#93; and &amp;amp;#91;&amp;amp;#91;fallthrough&amp;amp;#93;&amp;amp;#93; attributes.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0068r0.pdf)
-- [P0188R1 Wording for [[fallthrough]] attribute.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0188r1.pdf)
+- [P0188R1 Wording for [[fallthrough]] attribute.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0188r1.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>機能テストマクロ -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/feature_test_macros.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/feature_test_macros.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;機能テストマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++17に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;SD-6 は C++17 の機能について以下のテストマクロを定義することを推奨している：&lt;/p&gt;
&lt;h3&gt;言語機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_hex_float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;hexadecimal_floating_literals.html&#34;&gt;十六進浮動小数点数リテラル&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_inline_variables&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;inline_variables.html&#34;&gt;インライン変数&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_aligned_new&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;dynamic_memory_allocation_for_over-aligned_data.html&#34;&gt;アライメント指定されたデータの動的メモリ確保&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_guaranteed_copy_elision&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;guaranteed_copy_elision.html&#34;&gt;値のコピー省略を保証&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_noexcept_function_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;exception_spec_be_part_of_the_type_system.html&#34;&gt;例外仕様を型システムの一部にする&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_fold_expressions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;folding_expressions.html&#34;&gt;畳み込み式&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;constexpr_lambda.html&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;ラムダ&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_if_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;if_constexpr.html&#34;&gt;&lt;code&gt;if constexpr&lt;/code&gt;文&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_range_based_for&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;generalizing_the_range-based_for_loop.html&#34;&gt;範囲 &lt;code&gt;for&lt;/code&gt; ループの制限緩和&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_static_assert&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;extending_static_assert.html&#34;&gt;&lt;code&gt;static_assert&lt;/code&gt; のメッセージ省略を許可&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_deduction_guides&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;br /&gt; &lt;code&gt;201611&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;type_deduction_for_class_templates.html&#34;&gt;クラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_nontype_template_parameter_auto&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;declaring_non-type_template_arguments_with_auto.html&#34;&gt;非型テンプレートパラメータの&lt;code&gt;auto&lt;/code&gt;宣言&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_namespace_attributes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;attributes_for_namespaces_and_enumerators.html&#34;&gt;名前空間への属性付加を許可&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_enumerator_attributes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;attributes_for_namespaces_and_enumerators.html&#34;&gt;列挙子への属性付加を許可&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_inheriting_constructors&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201511&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;継承コンストラクタの新仕様&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_variadic_using&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201611&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;pack_expansions_in_using.html&#34;&gt;&lt;code&gt;using&lt;/code&gt;宣言のパック展開&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(fallthrough)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;fallthrough.html&#34;&gt;&lt;code&gt;[[fallthrough]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(nodiscard)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;nodiscard.html&#34;&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(maybe_unused)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;maybe_unused.html&#34;&gt;&lt;code&gt;[[maybe_unused]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_structured_bindings&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;structured_bindings.html&#34;&gt;構造化束縛&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_aggregate_bases&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;extension_to_aggregate_initialization.html&#34;&gt;集成体初期化の拡張&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_nontype_template_args&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;allow_constant_evaluation_for_all_non-type_template_arguments.html&#34;&gt;非型テンプレートパラメータの定数式を評価&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_nested_namespace_definitions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;nested_namespace.html&#34;&gt;入れ子名前空間の定義&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ライブラリ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_byte&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cstddef/byte.html&#34;&gt;std::byte&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cstddef.html&#34;&gt;&amp;lt;cstddef&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_hardware_interference_size&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/new/hardware_destructive_interference_size.html&#34;&gt;std::hardware_destructive_interference_size&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/new/hardware_constructive_interference_size.html&#34;&gt;std::hardware_constructive_interference_size&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/new.html&#34;&gt;&amp;lt;new&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_launder&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/new/launder.html&#34;&gt;std::launder()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_uncaught_exceptions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/exception/uncaught_exceptions.html&#34;&gt;std::uncaught_exceptions()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/exception.html&#34;&gt;&amp;lt;exception&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_as_const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility/as_const.html&#34;&gt;std::as_const()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_make_from_tuple&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple/make_from_tuple.html&#34;&gt;std::make_from_tuple()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_apply&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple/apply.html&#34;&gt;std::apply()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple.html&#34;&gt;&amp;lt;tuple&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_optional&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/optional/optional.html&#34;&gt;std::optional&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/optional.html&#34;&gt;&amp;lt;optional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_any&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/any/any.html&#34;&gt;std::any&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/any.html&#34;&gt;&amp;lt;any&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_variant&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/variant/variant.html&#34;&gt;std::variant&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/variant.html&#34;&gt;&amp;lt;variant&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_memory_resource&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory_resource/memory_resource.html&#34;&gt;std::memory_resource&lt;/a&gt;&lt;/code&gt;と関連する機能&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory_resource.html&#34;&gt;&amp;lt;memory_resource&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_boyer_moore_searcher&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional/boyer_moore_searcher.html&#34;&gt;std::boyer_morre_searcher&lt;/a&gt;&lt;/code&gt;と関連する機能&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_string_view&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view/basic_string_view.html&#34;&gt;std::string_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_sample&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/sample.html&#34;&gt;std::sample()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_addressof_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/addressof.html&#34;&gt;std::addressof()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_raw_memory_algorithms&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/uninitialized_default_construct.html&#34;&gt;std::uninitialized_default_construct()&lt;/a&gt;&lt;/code&gt;と関連する機能&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_transparent_operators&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/owner_less.html&#34;&gt;std::owner_less&lt;/a&gt;&lt;/code&gt; の柔軟性向上&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_enable_shared_from_this&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/enable_shared_from_this.html&#34;&gt;std::enable_shared_from_this&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shared_ptr_weak_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/shared_ptr.html&#34;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;クラスのメンバ型&lt;code&gt;weak_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shared_ptr_arrays&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201611&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/shared_ptr.html&#34;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;クラスの配列サポート&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_invoke&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional/invoke.html&#34;&gt;std::invoke()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_not_fn&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional/not_fn.html&#34;&gt;std::not_fn()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_void_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/void_t.html&#34;&gt;std::void_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_bool_constant&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201505&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/bool_constant.html&#34;&gt;std::bool_constant&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_type_trait_variable_templates&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型トレイト変数テンプレート (&lt;code&gt;some_trait_v&amp;lt;T&amp;gt; = some_trait&amp;lt;T&amp;gt;::value&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_logical_traits&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;論理演算子型トレイト (&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/conjunction.html&#34;&gt;std::conjunction&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/type_traits/disjunction.html&#34;&gt;std::disjunction&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/type_traits/negation.html&#34;&gt;std::negation&lt;/a&gt;&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_swappable&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_swappable.html&#34;&gt;std::is_swappable&lt;/a&gt;&lt;/code&gt;と関連する機能&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_invocable&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_invocable.html&#34;&gt;std::is_invocable&lt;/a&gt;&lt;/code&gt;と関連する機能&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_has_unique_object_representations&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/has_unique_object_representations.html&#34;&gt;std::has_unique_object_representations&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_aggregate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_aggregate.html&#34;&gt;std::is_aggregate&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_chrono&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt; の改良&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_execution&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/execution.html&#34;&gt;&amp;lt;execution&amp;gt;&lt;/a&gt;&lt;/code&gt; の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/execution.html&#34;&gt;&amp;lt;execution&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_parallel_algorithm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;並列アルゴリズム&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_to_chars&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201611&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/charconv/to_chars.html&#34;&gt;std::to_chars()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/charconv/from_chars.html&#34;&gt;std::from_chars()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/charconv.html&#34;&gt;&amp;lt;charconv&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_allocator_traits_is_always_equal&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ライブラリ内の &lt;code&gt;noexcept&lt;/code&gt; のクリーンアップ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/deque.html&#34;&gt;&amp;lt;deque&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/forward_list.html&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/list.html&#34;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/scoped_allocator.html&#34;&gt;&amp;lt;scoped_allocator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/set.html&#34;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/unordered_set.html&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/vector.html&#34;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_incomplete_container_elements&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201505&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;標準コンテナについて不完全型を最小限サポート&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/forward_list.html&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/list.html&#34;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/vector.html&#34;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_map_try_emplace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map/map/try_emplace.html&#34;&gt;std::map::try_emplace()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/map/map/insert_or_assign.html&#34;&gt;std::map::insert_or_assign()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_unordered_map_try_emplace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_map/unordered_map/try_emplace.html&#34;&gt;std::unordered_map::try_emplace()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/unordered_map/unordered_map/insert_or_assign.html&#34;&gt;std::unordered_map::insert_or_assign()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_node_extract&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;連想コンテナのsplice&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/set.html&#34;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/unordered_set.html&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_array_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;配列関係のランダムアクセスに&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/array.html&#34;&gt;&amp;lt;array&amp;gt;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_nonmember_container_access&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非メンバ関数 &lt;code&gt;&lt;a href=&#34;../../reference/iterator/size.html&#34;&gt;std::size()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/iterator/empty.html&#34;&gt;std::empty()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/iterator/data.html&#34;&gt;std::data()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_clamp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/clamp.html&#34;&gt;std::clamp()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_gcd_lcm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric/gcd.html&#34;&gt;std::gcd()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/numeric/lcm.html&#34;&gt;std::lcm()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_hypot&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;3引数版の&lt;code&gt;&lt;a href=&#34;../../reference/cmath/hypot.html&#34;&gt;std::hypot()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_math_special_functions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数学の特殊関数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_filesystem&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルシステムライブラリ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/filesystem.html&#34;&gt;&amp;lt;filesystem&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_is_always_lock_free&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic.html&#34;&gt;std::atomic&lt;/a&gt;&lt;/code&gt;クラスの静的メンバ定数&lt;code&gt;is_always_lock_free&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shared_mutex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201505&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/shared_mutex/shared_mutex.html&#34;&gt;std::shared_mutex&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/shared_mutex.html&#34;&gt;&amp;lt;shared_mutex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_scoped_lock&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可変個のミューテックスのロックを管理する&lt;code&gt;&lt;a href=&#34;../../reference/mutex/scoped_lock.html&#34;&gt;std::scoped_lock&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/mutex.html&#34;&gt;&amp;lt;mutex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations#recs.cpp17&#34; target=&#34;_blank&#34;&gt;SD-6: SG10 Feature Test Recommendations: Standard C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>畳み込み式 [N4295] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/folding_expressions.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/folding_expressions.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/folding_expressions.md b/lang/cpp17/folding_expressions.md
index 03ed8df24..60cba9317 100644
--- a/lang/cpp17/folding_expressions.md
+++ b/lang/cpp17/folding_expressions.md
@@ -1,6 +1,14 @@
 # 畳み込み式 [N4295]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 畳み込み式 (fold expression) は可変引数テンプレートのパラメータパックに対して二項演算を累積的に行う (畳み込む fold)。
@@ -232,7 +240,7 @@ auto res =  (std::string(args) + ...);
 で提案されていたが削除された (理由は発見できず)。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 可変引数テンプレート](/lang/cpp11/variadic_templates.md)
 - [`std::accumulate`](/reference/numeric/accumulate.md) — イテレータ範囲について累積的に二項演算を行う
 
@@ -243,4 +251,4 @@ auto res =  (std::string(args) + ...);
 * [N4295 Folding expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4295.html)
 * [N4358 Unary Folds and Empty Parameter Packs](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4358.pdf)
 * [P0036 Unary Folds and Empty Parameter Packs (revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0036r0.pdf)
-* [Nifty Fold Expression Tricks - foonathan::blog()](https://foonathan.net/2020/05/fold-tricks/)
+* [Nifty Fold Expression Tricks - foonathan::blog()](https://foonathan.net/2020/05/fold-tricks/)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>範囲 for ループの制限緩和 [P0184R0] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/generalizing_the_range-based_for_loop.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/generalizing_the_range-based_for_loop.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/generalizing_the_range-based_for_loop.md b/lang/cpp17/generalizing_the_range-based_for_loop.md
index df1a37934..e400fc361 100644
--- a/lang/cpp17/generalizing_the_range-based_for_loop.md
+++ b/lang/cpp17/generalizing_the_range-based_for_loop.md
@@ -1,6 +1,14 @@
 # 範囲 for ループの制限緩和 [P0184R0]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 [範囲 for 文は C++11 で導入された](/lang/cpp11/range_based_for.md) が、
@@ -138,11 +146,11 @@ Range TS (technical specification) では `Sentinel` (番兵) 等の範囲の終
 [Boost.Foreach](http://boost.org/libs/foreach) のようなマクロは避けるべきだとされた。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 範囲 for 文](/lang/cpp11/range_based_for.md)
 - [C++20 範囲for文がカスタマイゼーションポイントを見つけるルールを緩和](/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md)
 
 
 ## 参照
 - [P0184R0 Generalizing the Range-Based For Loop](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0184r0.html)
-- [N4128 Ranges for the Standard Library, Revision 1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4128.html)
+- [N4128 Ranges for the Standard Library, Revision 1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4128.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>値のコピー省略を保証 [P0135R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/guaranteed_copy_elision.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/guaranteed_copy_elision.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/guaranteed_copy_elision.md b/lang/cpp17/guaranteed_copy_elision.md
index 5a96ad1c7..448649cf2 100644
--- a/lang/cpp17/guaranteed_copy_elision.md
+++ b/lang/cpp17/guaranteed_copy_elision.md
@@ -2,6 +2,14 @@
 
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++11で右辺値参照を導入するときに規定された「値カテゴリー (value category)」の仕様（C++17で更新）を利用し、[`prvalue`](../cpp11/rvalue_ref_and_move_semantics.md)&amp;lt;sup&amp;gt;&amp;lt;a id=&amp;#34;note_ref-1&amp;#34; href=&amp;#34;#note-1&amp;#34;&amp;gt;[注1]&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt;というカテゴリーの値を、オブジェクトの初期化のために使用する場合に、コピーが省略される。
 
@@ -170,4 +178,4 @@ Foo x = foo(); // error Foo型のコピーコンストラクタが必要
 - [Guaranteed Copy Elision](https://jonasdevlieghere.com/guaranteed-copy-elision/)
 
 ## 注釈
-1. **&amp;lt;a id=&amp;#34;note-1&amp;#34; href=&amp;#34;#note_ref-1&amp;#34;&amp;gt;^&amp;lt;/a&amp;gt;** &amp;lt;cite&amp;gt;[右辺値、左辺値などの細かい定義 - Qiita](https://qiita.com/rinse_/items/cffa87016b7de49391ae)&amp;lt;/cite&amp;gt;を参照
+1. **&amp;lt;a id=&amp;#34;note-1&amp;#34; href=&amp;#34;#note_ref-1&amp;#34;&amp;gt;^&amp;lt;/a&amp;gt;** &amp;lt;cite&amp;gt;[右辺値、左辺値などの細かい定義 - Qiita](https://qiita.com/rinse_/items/cffa87016b7de49391ae)&amp;lt;/cite&amp;gt;を参照
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>__has_include [P0061R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/has_include.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/has_include.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/has_include.md b/lang/cpp17/has_include.md
index 8c4821ae7..9972b6917 100644
--- a/lang/cpp17/has_include.md
+++ b/lang/cpp17/has_include.md
@@ -1,6 +1,14 @@
 # __has_include [P0061R1]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 `__has_include`はインクルードするファイルが存在するかどうかを返す述語である。
@@ -95,4 +103,4 @@ has_include.cpp:23:4: warning: &amp;#34;fuga&amp;#34; is not found [-W#warnings]
 ```
 
 ## 参照
-- [P0061R1 __has_include for C++17](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0061r1.html)
+- [P0061R1 __has_include for C++17](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0061r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>十六進浮動小数点数リテラル [P0245R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/hexadecimal_floating_literals.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/hexadecimal_floating_literals.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/hexadecimal_floating_literals.md b/lang/cpp17/hexadecimal_floating_literals.md
index 6515d1282..c239faf66 100644
--- a/lang/cpp17/hexadecimal_floating_literals.md
+++ b/lang/cpp17/hexadecimal_floating_literals.md
@@ -1,5 +1,13 @@
 # 十六進浮動小数点数リテラル [P0245R1]
 * cpp17[meta cpp]
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 * [mathjax enable]
 
 ## 概要
@@ -77,4 +85,4 @@ C99 で十六進浮動小数リテラルが採用された。
 ## 参照
 
 * [P0245R0 Hexadecimal floating literals for C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0245r0.html)
-* [P0245R1 Hexadecimal floating literals for C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0245r1.html)
+* [P0245R1 Hexadecimal floating literals for C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0245r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr if 文 [P0292R2] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/if_constexpr.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/if_constexpr.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/if_constexpr.md b/lang/cpp17/if_constexpr.md
index 4d528aedf..0c1b36004 100644
--- a/lang/cpp17/if_constexpr.md
+++ b/lang/cpp17/if_constexpr.md
@@ -1,6 +1,14 @@
 # constexpr if 文 [P0292R2]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 constexpr if文とは、文を条件付きコンパイルすることを目的とした制御構文である。
@@ -433,7 +441,7 @@ template &amp;lt;int arg, typename ... Args&amp;gt; int do_something(Args... args) {
 旧来のテンプレート特殊化・SFINAE・タグディスパッチ・EBO・再帰的な派生などの技法を用いた複雑な代替手段もあるが、
 それらを一つ一つここで紹介することは避ける。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [`std::conditional`](/reference/type_traits/conditional.md)
 - [C++23 定数式の文脈での`bool`への縮小変換を許可](/lang/cpp23/narrowing_contextual_conversions_to_bool.md)
@@ -469,4 +477,4 @@ template &amp;lt;int arg, typename ... Args&amp;gt; int do_something(Args... args) {
 - [C++1z if constexpr文 - Faith and Brave - C++で遊ぼう](https://faithandbrave.hateblo.jp/entry/2016/12/22/171238)
 - [[cfe-dev] Clang getting involved](https://lists.llvm.org/pipermail/cfe-dev/2014-March/035801.html)
 - [`__if_exists` Statement | Microsoft Docs](https://docs.microsoft.com/ja-jp/cpp/cpp/if-exists-statement)
-- [Issue 2518: Conformance requirements and #error/#warning - WG21 CWG Issues](https://wg21.cmeerw.net/cwg/issue2518)
+- [Issue 2518: Conformance requirements and #error/#warning - WG21 CWG Issues](https://wg21.cmeerw.net/cwg/issue2518)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>インライン変数 [P0386R2] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/inline_variables.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/inline_variables.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/inline_variables.md b/lang/cpp17/inline_variables.md
index f10059f8f..20ef21ee3 100644
--- a/lang/cpp17/inline_variables.md
+++ b/lang/cpp17/inline_variables.md
@@ -1,6 +1,14 @@
 # インライン変数 [P0386R2]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 外部リンケージを持つ変数に対しインライン`inline`を指定することで、複数の翻訳単位で同じ変数を定義できるようになり、変数の実体はただ一つとすることができる。
@@ -273,7 +281,7 @@ func
 
 表示されるアドレスは環境によって異なる可能性がある。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 constexpr](/lang/cpp11/constexpr.md)
 
 ## 参照
@@ -283,4 +291,4 @@ func
 - [P0386R2 - Inline Variables](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf), 2016-06-24
 - [P0607R0 - Inline Variables for the Standard Library](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0607r0.html), 2017-02-27
 - [C++1z インライン変数 - Faith and Brave - C++で遊ぼう](https://faithandbrave.hateblo.jp/entry/2016/11/11/172954)
-- [インライン変数が翻訳単位毎に別々の実体となってしまう - Stackoverflow](https://ja.stackoverflow.com/questions/93046/)
+- [インライン変数が翻訳単位毎に別々の実体となってしまう - Stackoverflow](https://ja.stackoverflow.com/questions/93046/)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式での*thisのコピーキャプチャ [P0018R3] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/lambda_capture_of_this_by_value.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/lambda_capture_of_this_by_value.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/lambda_capture_of_this_by_value.md b/lang/cpp17/lambda_capture_of_this_by_value.md
index 391681d8e..2340d2a4f 100644
--- a/lang/cpp17/lambda_capture_of_this_by_value.md
+++ b/lang/cpp17/lambda_capture_of_this_by_value.md
@@ -1,6 +1,14 @@
 # ラムダ式での*thisのコピーキャプチャ [P0018R3]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++14までラムダ式で`[this]`のようにキャプチャをすると、`this`ポインタがコピーされていた。その場合、非同期処理のような状況で、ラムダ式の関数オブジェクトが呼び出されたときに、`this`ポインタが指すオブジェクトの寿命が尽きている場合がある。
 
@@ -68,7 +76,7 @@ exit
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 ラムダ式](/lang/cpp11/lambda_expressions.md)
 
 
@@ -76,4 +84,4 @@ exit
 - [P0018R0 Lambda Capture of `*this` by Value](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0018r0.html)
 - [P0018R1 Lambda Capture of `*this` by Value](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0018r1.html)
 - [P0018R2 Lambda Capture of `*this` by Value](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0018r2.html)
-- [P0018R3 Lambda Capture of `*this` by Value as `[=,*this]`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0018r3.html)
+- [P0018R3 Lambda Capture of `*this` by Value as `[=,*this]`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0018r3.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>noexcept付きのラムダ式から変換する関数ポインタにnoexceptを付加する -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/lambda_to_noexcept_function_pointer.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/lambda_to_noexcept_function_pointer.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/lambda_to_noexcept_function_pointer.md b/lang/cpp17/lambda_to_noexcept_function_pointer.md
index 8d1f0c3b1..6b8d71d82 100644
--- a/lang/cpp17/lambda_to_noexcept_function_pointer.md
+++ b/lang/cpp17/lambda_to_noexcept_function_pointer.md
@@ -1,6 +1,14 @@
 # noexcept付きのラムダ式から変換する関数ポインタにnoexceptを付加する
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 キャプチャを持たない非ジェネリックなラムダ式は、関数ポインタに変換できる。そのラムダ式が例外を投げない指定をされていた場合、変換された関数ポインタもまた`noexcept`を持つ。
 
@@ -40,7 +48,7 @@ true
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 例外仕様を型システムの一部にする](exception_spec_be_part_of_the_type_system.md)
 - [C++11 ラムダ式](/lang/cpp11/lambda_expressions.md)
 - [C++14 ジェネリックラムダ](/lang/cpp14/generic_lambdas.md)
@@ -48,4 +56,3 @@ true
 
 ## 参照
 - [CWG Issue 1722. Should lambda to function pointer conversion function be `noexcept`?](https://wg21.cmeerw.net/cwg/issue1722)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[maybe_unused]]属性 [P0212R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/maybe_unused.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/maybe_unused.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/maybe_unused.md b/lang/cpp17/maybe_unused.md
index f04dbd6f8..7832e097e 100644
--- a/lang/cpp17/maybe_unused.md
+++ b/lang/cpp17/maybe_unused.md
@@ -1,6 +1,14 @@
 # [[maybe_unused]]属性 [P0212R1]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 `[[maybe_unused]]`属性は意図的に未使用の要素を定義していることをコンパイラに伝え、警告を抑制するための属性である。
@@ -113,9 +121,9 @@ maybe_unused.cpp:12:8: warning: unused variable &amp;#39;b2&amp;#39; [-Wunused-variable]
 
 P0068R0では`[[unused]]`という名前で提案されたが、いわゆる自転車置き場の議論の末の投票によって、採用された名前は`[[maybe_unused]]`になった。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 属性構文](/lang/cpp11/attributes.md)
 
 ## 参照
 - [P0068R0 Proposal of &amp;amp;#91;&amp;amp;#91;unused&amp;amp;#93;&amp;amp;#93;, &amp;amp;#91;&amp;amp;#91;nodiscard&amp;amp;#93;&amp;amp;#93; and &amp;amp;#91;&amp;amp;#91;fallthrough&amp;amp;#93;&amp;amp;#93; attributes.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0068r0.pdf)
-- [P0212R1 Wording for [[maybe_unused]] attribute.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0212r1.pdf)
+- [P0212R1 Wording for [[maybe_unused]] attribute.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0212r1.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>入れ子名前空間の定義 [N4230] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/nested_namespace.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/nested_namespace.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/nested_namespace.md b/lang/cpp17/nested_namespace.md
index 0fb30e022..2745b5513 100644
--- a/lang/cpp17/nested_namespace.md
+++ b/lang/cpp17/nested_namespace.md
@@ -1,6 +1,14 @@
 # 入れ子名前空間の定義 [N4230]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 一度の定義だけで入れ子状になった名前空間を定義可能となる。
 
@@ -53,7 +61,7 @@ a legacy nested namespace definition is workded.
 この機能はC++0x当時から提案されており、以前の提案等については以下参照されたい。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++20 入れ子名前空間定義でのインライン名前空間](/lang/cpp20/nested_inline_mamespaces.md)
 
 
@@ -61,4 +69,4 @@ a legacy nested namespace definition is workded.
 - 言語仕様: §7.3.1 §A.6
 - [N4230 Nested namespace definition (revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4230.html)
     - [N1524 Nested Namespace Definition Proposal](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1524.htm)
-    - [N2869 State of C++ Evolution (Post San Francisco 2008)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2869.html)
+    - [N2869 State of C++ Evolution (Post San Francisco 2008)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2869.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>波括弧初期化の型推論の新規則 [N3922] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.md b/lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.md
index d457cf6ef..2a635eaec 100644
--- a/lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.md
+++ b/lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.md
@@ -1,6 +1,14 @@
 # 波括弧初期化の型推論の新規則 [N3922]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 これまでは `auto var{arg};` (単一要素), `auto var{arg1, arg2,...};` (複数要素) で `var` はいずれも
@@ -83,7 +91,7 @@ i
 が提案されたが採用されなかった。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 * [C++11 初期化リスト](/lang/cpp11/initializer_lists.md)
 
@@ -92,4 +100,4 @@ i
 
 * [N3681 Auto and braced-init-lists](http://open-std.org/JTC1/SC22/WG21/docs/papers/2013/n3681.html)
 * [N3912 Auto and braced-init-lists, continued](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3912.html)
-* [N3922 New Rules for auto deduction from braced-init-list](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3922.html)
+* [N3922 New Rules for auto deduction from braced-init-list](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3922.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[nodiscard]]属性 [P0189R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/nodiscard.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/nodiscard.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/nodiscard.md b/lang/cpp17/nodiscard.md
index 2328e65a4..489a4d2d1 100644
--- a/lang/cpp17/nodiscard.md
+++ b/lang/cpp17/nodiscard.md
@@ -1,6 +1,14 @@
 # [[nodiscard]]属性 [P0189R1]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 `[[nodiscard]]`属性は関数の戻り値を破棄してはならないことをコンパイラに伝え、破棄した場合に警告するための属性である。
@@ -48,7 +56,7 @@ nodiscard.cpp:11:3: warning: ignoring return value of function declared with &amp;#39;no
 2 warnings generated.
 ```
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 属性構文](/lang/cpp11/attributes.md)
 - [C++20 `[[nodiscard]]`をコンストラクタのオーバーロードごとに付加できるようにする](/lang/cpp20/nodiscard_for_constructors.md)
     - C++17対応のコンパイラでも使用できる可能性がある
@@ -58,4 +66,4 @@ nodiscard.cpp:11:3: warning: ignoring return value of function declared with &amp;#39;no
 
 ## 参照
 - [P0068R0 Proposal of &amp;amp;#91;&amp;amp;#91;unused&amp;amp;#93;&amp;amp;#93;, &amp;amp;#91;&amp;amp;#91;nodiscard&amp;amp;#93;&amp;amp;#93; and &amp;amp;#91;&amp;amp;#91;fallthrough&amp;amp;#93;&amp;amp;#93; attributes.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0068r0.pdf)
-- [P0189R1 Wording for [[nodiscard]] attribute.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0189r1.pdf)
+- [P0189R1 Wording for [[nodiscard]] attribute.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0189r1.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>不明な属性を無視する [P0283R2] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/non_standard_attributes.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/non_standard_attributes.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/non_standard_attributes.md b/lang/cpp17/non_standard_attributes.md
index d93d20f32..ad9fbd589 100644
--- a/lang/cpp17/non_standard_attributes.md
+++ b/lang/cpp17/non_standard_attributes.md
@@ -1,6 +1,14 @@
 # 不明な属性を無視する [P0283R2]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 コンパイラにとって不明な属性は無視する。
@@ -46,8 +54,8 @@ non_standard_attributes.cpp:7:3: warning: unknown attribute &amp;#39;unknown_attribute&amp;#39;
 
 プログラマが意図的に未知の属性を指定していて、警告が不要な場合はコンパイラオプションで警告を抑制できる。Clang++の場合は`-Wno-unknown-attributes`オプション、GCCの場合は`-Wno-attributes`オプションを指定する。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 属性構文](/lang/cpp11/attributes.md)
 
 ## 参照
-- [P0283R2 Standard and non-standard attributes.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0283r2.html)
+- [P0283R2 Standard and non-standard attributes.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0283r2.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>using宣言のパック展開 [P0195R2] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/pack_expansions_in_using.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/pack_expansions_in_using.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/pack_expansions_in_using.md b/lang/cpp17/pack_expansions_in_using.md
index fcf3d4039..de332e0a1 100644
--- a/lang/cpp17/pack_expansions_in_using.md
+++ b/lang/cpp17/pack_expansions_in_using.md
@@ -1,6 +1,14 @@
 # using宣言のパック展開 [P0195R2]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++17にて`using`宣言の仕様が拡張され、パラメータパックが指定できるようになった。
@@ -174,8 +182,8 @@ ForString:hello2
 この問題を解決するためC++17では`using`でパック展開ができるようになった。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [可変引数テンプレート](/lang/cpp11/variadic_templates.md)
 
 ## 参照
-- [P0195R2 Pack expansions in using-declarations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0195r2.html)
+- [P0195R2 Pack expansions in using-declarations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0195r2.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>更新された定義済みマクロ -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/predefined_macros.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/predefined_macros.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;更新された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++17に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative_page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cplusplus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++のバージョン値を表す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;新規マクロは以下：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDCPP_DEFAULT_NEW_ALIGNMENT__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実装定義&lt;/td&gt;
&lt;td&gt;動的メモリ確保時のデフォルトのアライメント値&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;dynamic_memory_allocation_for_over-aligned_data.html&#34;&gt;C++17 アライメント指定されたデータの動的メモリ確保&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非推奨だった古い例外仕様を削除 [P0003R5] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/remove_deprecated_exception_specifications.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/remove_deprecated_exception_specifications.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/remove_deprecated_exception_specifications.md b/lang/cpp17/remove_deprecated_exception_specifications.md
index 253a54d7c..127715a9b 100644
--- a/lang/cpp17/remove_deprecated_exception_specifications.md
+++ b/lang/cpp17/remove_deprecated_exception_specifications.md
@@ -1,6 +1,14 @@
 # 非推奨だった古い例外仕様を削除 [P0003R5]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++11で[`noexcept`](/lang/cpp11/noexcept.md)機能が入ったことにより、従来の`throw`キーワードを使用した「例外仕様 (Exception Specification)」は「動的例外仕様 (Dynamic Exception Specification)」という名前に変更され、非推奨となっていた。
 
@@ -54,11 +62,11 @@ C++固有の問題としては、以下のような問題があった：
 C++でもJavaを含むこれらの問題は認識されており、動的例外仕様の代わりとなるnoexcept例外仕様が新設された。代わりの機能ができたことで動的例外仕様は非推奨となり、noexcept例外仕様への移行する猶予期間が設けられた後、C++17でこの機能が削除されることとなった。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 noexcept](/lang/cpp11/noexcept.md)
 - [C++20 `throw()`による例外送出しない指定を削除](/lang/cpp20/remove_deprecated_nothrow_exception_specification.md)
 
 
 ## 参照
 - [P0003R4 Removing Deprecated Exception Specifications from C++17](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0003r4.html)
-- [P0003R5 Removing Deprecated Exception Specifications from C++17](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0003r5.html)
+- [P0003R5 Removing Deprecated Exception Specifications from C++17](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0003r5.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非推奨だった bool 型に対するインクリメント演算子を削除 [P0002R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/remove_deprecated_increment_of_bool.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/remove_deprecated_increment_of_bool.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/remove_deprecated_increment_of_bool.md b/lang/cpp17/remove_deprecated_increment_of_bool.md
index 261ef394b..3ff243c75 100644
--- a/lang/cpp17/remove_deprecated_increment_of_bool.md
+++ b/lang/cpp17/remove_deprecated_increment_of_bool.md
@@ -1,6 +1,14 @@
 # 非推奨だった bool 型に対するインクリメント演算子を削除 [P0002R1]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++17では`bool`型に対する前置および後置の`operator ++`を削除する。
@@ -146,7 +154,7 @@ Therac-25はカナダ原子力公社(AECL)とフランスCGR-MeV社によって
 C++14で`std::exchange()`が導入されたことにより、唯一使いみちのあった後置の`operator++`の必要性もなくなり、C++17で削除されたと推測される。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [`std::exchange()`](/reference/utility/exchange.md)
 
@@ -163,4 +171,4 @@ C++14で`std::exchange()`が導入されたことにより、唯一使いみち
     1. [An Investigation of Therac-25 Accidents - I](http://web.archive.org/web/20171206153409/http://courses.cs.vt.edu/professionalism/Therac_25/Therac_1.html)
     2. [Therac-25 - II](http://web.archive.org/web/20171212115910/http://courses.cs.vt.edu/professionalism/Therac_25/Therac_2.html)
     3. [Therac-25 - III](http://web.archive.org/web/20170215125239/http://courses.cs.vt.edu/professionalism/Therac_25/Therac_3.html)
-- [Therac-25 - Wikipedia](https://en.wikipedia.org/wiki/Therac-25)
+- [Therac-25 - Wikipedia](https://en.wikipedia.org/wiki/Therac-25)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非推奨だったregisterキーワードを削除 [P0001R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/remove_deprecated_use_of_the_register_keyword.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/remove_deprecated_use_of_the_register_keyword.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/remove_deprecated_use_of_the_register_keyword.md b/lang/cpp17/remove_deprecated_use_of_the_register_keyword.md
index a10725393..bffa62989 100644
--- a/lang/cpp17/remove_deprecated_use_of_the_register_keyword.md
+++ b/lang/cpp17/remove_deprecated_use_of_the_register_keyword.md
@@ -1,6 +1,14 @@
 # 非推奨だったregisterキーワードを削除 [P0001R1]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++17ではC++11で非推奨化された`register`キーワードを削除する。
@@ -17,11 +25,11 @@ register int v = 42;
 
 `register`キーワードはC++17標準では使用しなくなるが、将来のために予約されたままとなる。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [C++11 registerキーワードを非推奨化](/lang/cpp11/deprecation_of_the_register_keyword.md)
 
 ## 参照
 
 - [P0001R1: Remove Deprecated Use of the register Keyword](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0001r1.html)
-- [P0001R0: Remove Deprecated Use of the register Keyword](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0001r0.html)
+- [P0001R0: Remove Deprecated Use of the register Keyword](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0001r0.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>トライグラフの削除 [N4086] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/removing_trigraphs.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/removing_trigraphs.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/removing_trigraphs.md b/lang/cpp17/removing_trigraphs.md
index 76051b646..8b0967eab 100644
--- a/lang/cpp17/removing_trigraphs.md
+++ b/lang/cpp17/removing_trigraphs.md
@@ -1,6 +1,14 @@
 # トライグラフの削除 [N4086]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 トライグラフが削除された。
@@ -91,4 +99,4 @@ GCC などのコンパイラはデフォルトでトライグラフを無効に
 ## 参照
 
 * [N3981 Removing trigraphs??!](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3981.html)
-* [N4086 Removing trigraphs??!](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4086.html)
+* [N4086 Removing trigraphs??!](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4086.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>参照メンバをもつクラスの置き換え [P0137R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/replacement_of_class_objects_containing_reference_members.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/replacement_of_class_objects_containing_reference_members.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/replacement_of_class_objects_containing_reference_members.md b/lang/cpp17/replacement_of_class_objects_containing_reference_members.md
index 4ea19fb20..2aa783929 100644
--- a/lang/cpp17/replacement_of_class_objects_containing_reference_members.md
+++ b/lang/cpp17/replacement_of_class_objects_containing_reference_members.md
@@ -1,6 +1,14 @@
 # 参照メンバをもつクラスの置き換え [P0137R1]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `placement new`を使用して、参照型や`const`メンバ変数を含む構造体/クラスを置き換える際、オブジェクト生存期間(lifetime)に基づいた最適化の抑止をコンパイラに伝える関数[`std::launder()`](/reference/new/launder.md)を用いることで、未定義動作となるような文脈で参照型や`const`メンバ変数へのアクセスができる。
 
@@ -92,4 +100,3 @@ public:
 - [Pointer safety and placement new](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4303.html)
 - [Implementability of std::optional （std :: optionalの実装可能性） ](https://groups.google.com/a/isocpp.org/forum/#!msg/std-proposals/93ebFsxCjvQ/Q5LUnO8339wJ)
 - [Lifetime - cppreference.com](https://en.cppreference.com/w/cpp/language/lifetime)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>if文とswitch文の条件式と初期化を分離 [P0305R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/selection_statements_with_initializer.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/selection_statements_with_initializer.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/selection_statements_with_initializer.md b/lang/cpp17/selection_statements_with_initializer.md
index da175269d..b72260aa5 100644
--- a/lang/cpp17/selection_statements_with_initializer.md
+++ b/lang/cpp17/selection_statements_with_initializer.md
@@ -1,6 +1,14 @@
 # if文とswitch文の条件式と初期化を分離 [P0305R1]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 従来`for`文しか使用できなかった初期化を`if`文と`switch`文でも使えるようになった。
@@ -203,10 +211,10 @@ if (it != m.end()) { return it-&amp;gt;size(); }
 新しい概念を教えたり広めたりするコストが掛かる。さらに`for`文と文法の一貫性を取れる機会が失われてしまう問題がある。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++20 初期化式をともなう範囲for文](/lang/cpp20/range-based_for_statements_with_initializer.md)
 - [C++23 初期化文での型の別名宣言を許可](/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md)
 
 
 ## 参照
-- [P0305R1 Selection statements with initializer.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0305r1.html)
+- [P0305R1 Selection statements with initializer.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0305r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>構造化束縛 [P0217R3] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/structured_bindings.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/structured_bindings.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/structured_bindings.md b/lang/cpp17/structured_bindings.md
index 9d9184fe2..261e9ac82 100644
--- a/lang/cpp17/structured_bindings.md
+++ b/lang/cpp17/structured_bindings.md
@@ -1,6 +1,14 @@
 # 構造化束縛 [P0217R3]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 「構造化束縛 (structured bindings)」は、組やタプル、配列や構造体を分解して各要素を取り出す機能である。
 
@@ -326,7 +334,7 @@ auto { w, {x, y}, z } = f(); // このような、tuple内にあるpairを同時
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++20 friend指定された関数内から構造化束縛を使用して非公開メンバ変数にアクセスすることを許可](/lang/cpp20/allow_structured_bindings_to_accessible_members.md)
 - [C++20 構造化束縛がカスタマイゼーションポイントを見つけるルールを緩和](/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.md)
 - [C++20 構造化束縛を拡張して通常の変数宣言のように使用できるようにする](/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.md)
@@ -341,4 +349,4 @@ auto { w, {x, y}, z } = f(); // このような、tuple内にあるpairを同時
 - [P0217R2 Proposed wording for structured bindings](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0217r2.html)
 - [P0217R3 Proposed wording for structured bindings](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0217r3.html)
 - [P0615R0 Renaming for structured bindings](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0615r0.html)
-- [LWG DR2770 `tuple_size&amp;lt;const T&amp;gt;` specialization breaks decomposition declarations](http://wg21.cmeerw.net/lwg/issue2770)
+- [LWG DR2770 `tuple_size&amp;lt;const T&amp;gt;` specialization breaks decomposition declarations](http://wg21.cmeerw.net/lwg/issue2770)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>クラステンプレートのテンプレート引数推論 [P0091R3] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/type_deduction_for_class_templates.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/type_deduction_for_class_templates.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/type_deduction_for_class_templates.md b/lang/cpp17/type_deduction_for_class_templates.md
index ce3f0a7e8..4c7d68427 100644
--- a/lang/cpp17/type_deduction_for_class_templates.md
+++ b/lang/cpp17/type_deduction_for_class_templates.md
@@ -1,6 +1,14 @@
 # クラステンプレートのテンプレート引数推論 [P0091R3]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 コンストラクタに渡される値によって、クラステンプレートのテンプレート引数を推論する。
 
@@ -273,7 +281,7 @@ int main()
 - 循環的な複雑さ (Cyclomatic complexity) を軽減するために大きな関数をクラスで置き換える便利な手法が、関数テンプレートでは使用できなかった
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`std::pair`の推論補助](/reference/utility/pair/op_deduction_guide.md)
 - [`std::tuple`の推論補助](/reference/tuple/tuple/op_deduction_guide.md)
     - `std::pair`と`std::tuple`の推論補助の例からは、[`std::make_pair()`](/reference/utility/make_pair.md)のような生成関数の必要性が薄くなることと、標準ライブラリ内の生成関数と推論補助で、小さな機能的差異があることがわかる
@@ -291,4 +299,4 @@ int main()
 - [P0620R0 Drafting for class template argument deduction issues](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0620r0.html)
 - [LWG Issue 2981. Remove redundant deduction guides from standard library](https://wg21.cmeerw.net/lwg/issue2981)
 - [P0702R1 Language support for Constructor Template Argument Deduction](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0702r1.html)
-- [Class Template Argument Deduction - A New Abstraction - Zhihao Yuan - CppCon 2017](https://raw.githubusercontent.com/CppCon/CppCon2017/master/Presentations/Class%20Template%20Argument%20Deduction%20-%20A%20New%20Abstraction/Class%20Template%20Argument%20Deduction%20-%20A%20New%20Abstraction%20-%20Zhihao%20Yuan%20-%20CppCon%202017.pdf)
+- [Class Template Argument Deduction - A New Abstraction - Zhihao Yuan - CppCon 2017](https://raw.githubusercontent.com/CppCon/CppCon2017/master/Presentations/Class%20Template%20Argument%20Deduction%20-%20A%20New%20Abstraction/Class%20Template%20Argument%20Deduction%20-%20A%20New%20Abstraction%20-%20Zhihao%20Yuan%20-%20CppCon%202017.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>属性の名前空間指定に繰り返しをなくす [P0028R4] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/using_attribute_namespaces.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/using_attribute_namespaces.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/using_attribute_namespaces.md b/lang/cpp17/using_attribute_namespaces.md
index bfc96aaa4..bd23c19a7 100644
--- a/lang/cpp17/using_attribute_namespaces.md
+++ b/lang/cpp17/using_attribute_namespaces.md
@@ -1,6 +1,14 @@
 # 属性の名前空間指定に繰り返しをなくす [P0028R4]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 複数の属性を指定する際`using`により名前空間を指定できる。
@@ -57,8 +65,8 @@ using_attribute_namespaces.cpp:13:13: error: attribute with scope specifier cann
 1 error generated.
 ```
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 属性構文](/lang/cpp11/attributes.md)
 
 ## 参照
-- [P0028R4 Using attribute namespaces without repetition.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0028r4.html)
+- [P0028R4 Using attribute namespaces without repetition.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0028r4.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>UTF-8文字リテラル [N4267] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/utf8_character_literals.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp17/utf8_character_literals.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/utf8_character_literals.md b/lang/cpp17/utf8_character_literals.md
index 479966b3e..c486f134d 100644
--- a/lang/cpp17/utf8_character_literals.md
+++ b/lang/cpp17/utf8_character_literals.md
@@ -1,6 +1,14 @@
 # UTF-8文字リテラル [N4267]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++14までは、UTF-8エンコーディングであることを示す`u8`プレフィックスを、文字列リテラルに対してのみ指定できた。C++17では、文字リテラルに対しても`u8`プレフィックスを付けられる。
 
@@ -18,7 +26,7 @@ C++20ではUTF-8文字リテラルの型が[`char`ではなく`char8_t`になる
     - そのコードポイント範囲を超える値が指定された場合、プログラムは不適格となる
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 UTF-8文字列リテラル](/lang/cpp11/utf8_string_literals.md)
 - [C++11 `char16_t`と`char32_t`](/lang/cpp11/char16_32.md)
 - [C++20 UTF-8エンコーディングされた文字の型として`char8_t`を追加](/lang/cpp20/char8_t.md)
@@ -29,4 +37,3 @@ C++20ではUTF-8文字リテラルの型が[`char`ではなく`char8_t`になる
 - [N4267 Adding `u8` character literals](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4267.html)
 - [C0 Controls and Basic Latin - The Unicode Consortium](http://www.unicode.org/charts/PDF/U0000.pdf)
 - [基本ラテン文字 (Unicodeのブロック) - Wikipedia](https://ja.wikipedia.org/wiki/%E5%9F%BA%E6%9C%AC%E3%83%A9%E3%83%86%E3%83%B3%E6%96%87%E5%AD%97_(Unicode%E3%81%AE%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF))
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>特殊化のアクセスチェック [P0692R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/access_checking_on_specializations.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/access_checking_on_specializations.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/access_checking_on_specializations.md b/lang/cpp20/access_checking_on_specializations.md
index def88c428..b80a26c32 100644
--- a/lang/cpp20/access_checking_on_specializations.md
+++ b/lang/cpp20/access_checking_on_specializations.md
@@ -1,6 +1,14 @@
 # 特殊化のアクセスチェック [P0692R1]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 クラス`C`の内側で宣言されたクラス（ローカルクラス`impl`）が`private/protected`で宣言されている場合、テンプレートの文脈で`C`の外側から`impl`を参照することは禁止されていた。しかし、実際にはほぼ全てのコンパイラでこれは許可されており、実際に使用されていた。
@@ -145,4 +153,3 @@ namespace option3 {
 ## 参照
 
 - [P0692R1 Access Checking on Specializations](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0692r1.html)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>関数テンプレートに明示的に型指定した場合にADLで見つからない問題を修正 [P0846R0] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/adl_and_function_templates_that_are_not_visible.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/adl_and_function_templates_that_are_not_visible.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/adl_and_function_templates_that_are_not_visible.md b/lang/cpp20/adl_and_function_templates_that_are_not_visible.md
index ceb421b9b..fe061cd64 100644
--- a/lang/cpp20/adl_and_function_templates_that_are_not_visible.md
+++ b/lang/cpp20/adl_and_function_templates_that_are_not_visible.md
@@ -1,6 +1,14 @@
 # 関数テンプレートに明示的に型指定した場合にADLで見つからない問題を修正 [P0846R0]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++17までは、以下のコードが不適格だった：
 
@@ -61,4 +69,4 @@ int main() {
 ```
 
 ## 参照
-- [P0846R0 ADL and Function Templates that are not Visible](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0846r0.html)
+- [P0846R0 ADL and Function Templates that are not Visible](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0846r0.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>丸カッコの値リストからの集成体初期化を許可 [P0960R3] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md b/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md
index 91b855942..b9686a4ed 100644
--- a/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md
+++ b/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md
@@ -2,6 +2,14 @@
 
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++20では、波カッコと同様に丸カッコでも集成体初期化できる。
@@ -122,11 +130,11 @@ explicit A(T1 t1, … , Tk tk);
 しかし、前者は参照型でないメンバーを左辺値で初期化することができない(関数テンプレートではないことに注意)。
 後者はムーブが必要になってしまうという問題があった。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [一様初期化](/lang/cpp11/uniform_initialization.md)
 
 ## 参照
 
 - [P0960R3 Allow initializing aggregates from a parenthesized list of values](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0960r3.html)
-- [C++ Core Guidelines ES.23: Prefer the {}-initializer syntax](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es23-prefer-the--initializer-syntax) 常に波カッコで初期化することを推奨している。
+- [C++ Core Guidelines ES.23: Prefer the {}-initializer syntax](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es23-prefer-the--initializer-syntax) 常に波カッコで初期化することを推奨している。
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式のキャプチャとして[=, this]を許可する [P0409R2] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allow_lambda_capture_equal_this.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/allow_lambda_capture_equal_this.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allow_lambda_capture_equal_this.md b/lang/cpp20/allow_lambda_capture_equal_this.md
index 715e4dbad..8c8cc2e0b 100644
--- a/lang/cpp20/allow_lambda_capture_equal_this.md
+++ b/lang/cpp20/allow_lambda_capture_equal_this.md
@@ -1,6 +1,14 @@
 # ラムダ式のキャプチャとして[=, this]を許可する [P0409R2]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++17まで、ラムダ式のキャプチャとして`[=, this]`は指定できなかった。これは、デフォルトコピーキャプチャ (`=`) に、`this`ポインタのコピーキャプチャが含まれるため、重複指定はできないというものである。
 
@@ -34,10 +42,10 @@ int main()
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 ラムダ式](/lang/cpp11/lambda_expressions.md)
 - [C++20 `[=]`による`this`の暗黙のキャプチャを非推奨化](deprecate_implicit_capture_of_this_via_defcopy.md)
 
 
 ## 参照
-- [P0409R2 Allow lambda capture `[=, this]`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0409r2.html)
+- [P0409R2 Allow lambda capture `[=, this]`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0409r2.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式の初期化キャプチャでのパック展開を許可 [P0780R2] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md b/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md
index eaf47d8df..8bece858e 100644
--- a/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md
+++ b/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md
@@ -1,6 +1,14 @@
 # ラムダ式の初期化キャプチャでのパック展開を許可 [P0780R2]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 [ラムダ式](/lang/cpp11/lambda_expressions.md)の[初期化キャプチャ](../cpp14/initialize_capture.md)で、パック展開ができるようになった。
 
@@ -130,11 +138,11 @@ auto f(Args... args) {
 
 のような位置で提案されていた。これが現在のようになったのは、`...` の位置が導入する名前に先行する、既存の慣行と一致するようにするためである。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 ラムダ式](/lang/cpp11/lambda_expressions.md)
 - [C++14 ラムダ式の初期化キャプチャ](../cpp14/initialize_capture.md)
 
 ## 参照
 - [P0780R2 Allow pack expansion in lambda init-capture](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0780r2.html)
 - [CWG 1760: Access of member corresponding to init-capture](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1760)
-- [P2095R0 Resolve lambda init-capture pack grammar (CWG2378)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2095r0.html)
+- [P2095R0 Resolve lambda init-capture pack grammar (CWG2378)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2095r0.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>friend指定された関数内から構造化束縛を使用して非公開メンバ変数にアクセスすることを許可 [P0969R0] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allow_structured_bindings_to_accessible_members.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/allow_structured_bindings_to_accessible_members.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allow_structured_bindings_to_accessible_members.md b/lang/cpp20/allow_structured_bindings_to_accessible_members.md
index a66e450c0..e00dafa58 100644
--- a/lang/cpp20/allow_structured_bindings_to_accessible_members.md
+++ b/lang/cpp20/allow_structured_bindings_to_accessible_members.md
@@ -1,6 +1,14 @@
 # friend指定された関数内から構造化束縛を使用して非公開メンバ変数にアクセスすることを許可 [P0969R0]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++17までの構造化束縛では、publicアクセス指定されたメンバ変数のみ抽出できる仕様となっていた。
 
@@ -43,9 +51,9 @@ int main() {
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 構造化束縛](/lang/cpp17/structured_bindings.md)
 
 
 ## 参照
-- [P0969R0 Allow structured bindings to accessible members](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0969r0.pdf)
+- [P0969R0 Allow structured bindings to accessible members](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0969r0.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>定数式からの仮想関数の呼び出しを許可 [P1064R0] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/allow_virtual_function_calls_in_constant_expressions.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.md b/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.md
index 8f9620e9b..92057fd4c 100644
--- a/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.md
+++ b/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.md
@@ -1,6 +1,14 @@
 # 定数式からの仮想関数の呼び出しを許可 [P1064R0]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++20では、仮想関数に対して`constexpr`を指定し、定数式の文脈で呼び出せるようになる。
 
@@ -28,9 +36,9 @@ int main()
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 constexpr](/lang/cpp11/constexpr.md)
 
 
 ## 参照
-- [P1064R0 Allowing Virtual Function Calls in Constant Expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1064r0.html)
+- [P1064R0 Allowing Virtual Function Calls in Constant Expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1064r0.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>定数式での`dynamic_cast`、多態的な`typeid`を許可 [P1327R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.md b/lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.md
index 71a567688..47e996222 100644
--- a/lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.md
+++ b/lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.md
@@ -1,6 +1,14 @@
 # 定数式での`dynamic_cast`、多態的な`typeid`を許可 [P1327R1]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++20より、`constexpr`関数内（定数式）で`dynamic_cast`および多態的な型に対する`typeid`を使用することができるようになる。
@@ -94,7 +102,7 @@ false
 
 その後、実装可能性に関する懸念は払拭されたため、C++23に導入される予定である。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [C++20 定数式からの仮想関数の呼び出しを許可](/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.md)
 
@@ -103,4 +111,4 @@ false
 
 - [P1327R1 Allowing dynamic_cast, polymorphic typeid in Constant Expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1327r1.html)
 - [P1328R0 Making std::type_info::operator== constexpr](https://wg21.link/P1328)
-- [P1328 Making std::type_info::operator== constexpr - cplusplus/papers](https://github.com/cplusplus/papers/issues/70)
+- [P1328 Making std::type_info::operator== constexpr - cplusplus/papers](https://github.com/cplusplus/papers/issues/70)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>new式での配列要素数の推論 [P1009R2] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/array_size_deduction_in_new-expressions.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/array_size_deduction_in_new-expressions.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/array_size_deduction_in_new-expressions.md b/lang/cpp20/array_size_deduction_in_new-expressions.md
index caa300bfa..38c8f90d9 100644
--- a/lang/cpp20/array_size_deduction_in_new-expressions.md
+++ b/lang/cpp20/array_size_deduction_in_new-expressions.md
@@ -2,6 +2,14 @@
 
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++20では、`new`式で配列の要素数を推論できる。
@@ -62,10 +70,10 @@ double* p = new double[]{1,2,3}   // エラー
 
 `new`式で要素数を必須とする強い理由がないため、推論できるようになった。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 * [丸カッコの値リストからの集成体初期化を許可](allow_initializing_aggregates_from_a_parenthesized_list_of_values.md)
 
 ## 参照
 
-* [P1009R2 Array size deduction in new-expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1009r2.pdf)
+* [P1009R2 Array size deduction in new-expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1009r2.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>定数式内での共用体のアクティブメンバの変更を許可 [P1330R0] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md b/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md
index 333be083c..3f82156d4 100644
--- a/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md
+++ b/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md
@@ -1,6 +1,14 @@
 # 定数式内での共用体のアクティブメンバの変更を許可 [P1330R0]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++20より、共用体初期化後に別のメンバを初期化する事（アクティブメンバの切り替え）が定数式で行えるようになる。
@@ -34,7 +42,7 @@ int main() {
 
 静的リフレクション機能を見据えて`std::string`の`constexpr`対応が急がれており、その障壁を取り除くべく、共用体のアクティブメンバ切り替えは定数式で許可される事となった。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [可変サイズをもつコンテナの`constexpr`化](more_constexpr_containers.md)
 
@@ -42,4 +50,4 @@ int main() {
 
 - [P1330R0 Changing the active member of a union inside constexpr](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1330r0.pdf)
 - [P0980R0 Making std::string constexpr](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
-- [std::stringのSSO(Small-string optimization)がどうなっているか調べた - melpon/qiita](https://github.com/melpon/qiita/tree/master/items/stdstringのSSO(Small-string%20optimization)がどうなっているか調べた)
+- [std::stringのSSO(Small-string optimization)がどうなっているか調べた - melpon/qiita](https://github.com/melpon/qiita/tree/master/items/stdstringのSSO(Small-string%20optimization)がどうなっているか調べた)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>UTF-8エンコーディングされた文字の型として`char8_t`を追加 [P0482R6] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/char8_t.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/char8_t.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/char8_t.md b/lang/cpp20/char8_t.md
index 68fb50beb..6d2a7d399 100644
--- a/lang/cpp20/char8_t.md
+++ b/lang/cpp20/char8_t.md
@@ -1,6 +1,14 @@
 # UTF-8エンコーディングされた文字の型として`char8_t`を追加 [P0482R6]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 UTF-8でエンコードされた文字を格納することを想定した型として、符号なし文字型`char8_t`型を追加する。
@@ -140,7 +148,7 @@ enum class char8_t : unsigned char {};
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [char16_tとchar32_t](/lang/cpp11/char16_32.md)
 - [UTF-8文字列リテラル](/lang/cpp11/utf8_string_literals.md)
@@ -171,4 +179,4 @@ enum class char8_t : unsigned char {};
 
 - [P1423R3: char8_t backward compatibility remediation](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1423r3.html)
 - [Proposal for a C/C++ language extension to support portable UTF-16](http://web.archive.org/web/20140701223639/http://www.unicode.org/~asmus/stdc-utf-16.txt)
-- [char8_tによせて - なるせにっき](https://naruse.hateblo.jp/entry/2018/12/24/013446)
+- [char8_tによせて - なるせにっき](https://naruse.hateblo.jp/entry/2018/12/24/013446)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>抽象型のチェック [P0929R2] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/checking_for_abstract_class_types.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/checking_for_abstract_class_types.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/checking_for_abstract_class_types.md b/lang/cpp20/checking_for_abstract_class_types.md
index e4000dd54..14e0f528f 100644
--- a/lang/cpp20/checking_for_abstract_class_types.md
+++ b/lang/cpp20/checking_for_abstract_class_types.md
@@ -1,6 +1,14 @@
 # 抽象型のチェック [P0929R2]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++17までは以下の仕様があったため、抽象クラスに早期の制限があった：
 
@@ -20,4 +28,4 @@ C++20ではこれを適格とし、先行宣言と同様にクラスの完全性
 
 
 ## 参照
-- [P0929R2 Checking for abstract class types](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0929r2.html)
+- [P0929R2 Checking for abstract class types](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0929r2.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>集成体クラステンプレートのテンプレート引数推論 [P1816R0] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/class_template_argument_deduction_for_aggregates.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/class_template_argument_deduction_for_aggregates.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/class_template_argument_deduction_for_aggregates.md b/lang/cpp20/class_template_argument_deduction_for_aggregates.md
index 21fd47e94..20169b4c8 100644
--- a/lang/cpp20/class_template_argument_deduction_for_aggregates.md
+++ b/lang/cpp20/class_template_argument_deduction_for_aggregates.md
@@ -1,6 +1,14 @@
 # 集成体クラステンプレートのテンプレート引数推論 [P1816R0]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++17で導入されたクラステンプレートのテンプレート引数推論は、コンストラクタ引数からテンプレート引数を推論するものであった。
 
@@ -17,7 +25,7 @@ Point p1{3.0, 4.0}; // C++17:NG C++20:OK
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 クラステンプレートのテンプレート引数推論](/lang/cpp17/type_deduction_for_class_templates.md)
 
 
@@ -25,4 +33,4 @@ Point p1{3.0, 4.0}; // C++17:NG C++20:OK
 - [P1021R4 Filling holes in Class Template Argument Deduction](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1021r4.html)
     - 提案の元になった文書
 - [P1816R0 Wording for class template argument deduction for aggregates](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1816r0.pdf)
-    - C++20に採択された提案文書
+    - C++20に採択された提案文書
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>エイリアステンプレート経由でのクラステンプレートのテンプレート引数推論 [P1814R0] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/class_template_argument_deduction_for_alias_templates.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/class_template_argument_deduction_for_alias_templates.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/class_template_argument_deduction_for_alias_templates.md b/lang/cpp20/class_template_argument_deduction_for_alias_templates.md
index 9eccf5faf..313c11a4a 100644
--- a/lang/cpp20/class_template_argument_deduction_for_alias_templates.md
+++ b/lang/cpp20/class_template_argument_deduction_for_alias_templates.md
@@ -1,6 +1,14 @@
 # エイリアステンプレート経由でのクラステンプレートのテンプレート引数推論 [P1814R0]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++17で導入されたクラステンプレートのテンプレート引数推論は、コンストラクタ引数からテンプレート引数を推論するものであった。しかし、そのクラステンプレートのエイリアステンプレートを定義した場合に、エイリアステンプレートの変数定義からはクラステンプレートのテンプレート引数を推論できない問題があった。
 
@@ -62,9 +70,9 @@ B b2(&amp;amp;d, &amp;amp;d); // エラー！ C&amp;lt;double*, double*&amp;gt;からB&amp;lt;W&amp;gt;を推論できない
 * std::integral[link /reference/concepts/integral.md]
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 クラステンプレートのテンプレート引数推論](/lang/cpp17/type_deduction_for_class_templates.md)
 
 
 ## 参照
-- [P1814R0 Wording for Class Template Argument Deduction for Alias Templates](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1814r0.html)
+- [P1814R0 Wording for Class Template Argument Deduction for Alias Templates](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1814r0.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非型テンプレートパラメータとしてクラス型を許可する [P0732R2] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/class_types_in_non-type_template_parameters.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/class_types_in_non-type_template_parameters.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/class_types_in_non-type_template_parameters.md b/lang/cpp20/class_types_in_non-type_template_parameters.md
index eea126fa7..9df91ede1 100644
--- a/lang/cpp20/class_types_in_non-type_template_parameters.md
+++ b/lang/cpp20/class_types_in_non-type_template_parameters.md
@@ -1,6 +1,14 @@
 # 非型テンプレートパラメータとしてクラス型を許可する [P0732R2]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 これまで、非型テンプレートパラメータ (non-type template parameter) としては、整数型、ポインタ、参照、[`std::nullptr_t`](/reference/cstddef/nullptr_t.md)、[プレースホルダ型](/lang/cpp17/declaring_non-type_template_arguments_with_auto.md)の値しか受け取ることが許可されていなかった。
 
@@ -107,10 +115,10 @@ int main() {
     - GCC 10では`pair`が構造的型とみなされないバグがある。GCC 11で修正済み
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 非型テンプレートパラメータの`auto`宣言](/lang/cpp17/declaring_non-type_template_arguments_with_auto.md)
 
 
 ## 参照
 - [P0732R2 Class Types in Non-Type Template Parameters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0732r2.pdf)
-- [P1907R1 Inconsistencies with non-type template parameters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1907r1.html)
+- [P1907R1 Inconsistencies with non-type template parameters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1907r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンセプト [P0734R0] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/concepts.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/concepts.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/concepts.md b/lang/cpp20/concepts.md
index 340bd7dc9..94b288806 100644
--- a/lang/cpp20/concepts.md
+++ b/lang/cpp20/concepts.md
@@ -1,6 +1,14 @@
 # コンセプト [P0734R0]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++20から導入される「コンセプト (concepts)」は、テンプレートパラメータを制約する機能である。この機能を使用することで、以下のような面でプログラミングのしやすさが向上する：
 
@@ -961,7 +969,7 @@ C++14の策定において、コンセプトの複雑さを回避して必要最
 軽量コンセプトとしてなるべく早くプログラマにこの機能を導入するつもりだったが、その後コンセプトをさらに仕様拡張としていくことを考えると、最初の設計から大幅に違ったものになってしまう懸念があった。また、コンセプトは標準ライブラリの仕様に適用すべきものであるため、より完全なものが求められた。そのため、軽量コンセプトという予定はなくなり、より時間をかけて完全なコンセプトの仕様を策定することとなり、C++20で導入されることとなった。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`&amp;lt;concepts&amp;gt;`](/reference/concepts.md)
 - [`&amp;lt;iterator&amp;gt;`](/reference/iterator.md)
 - [`&amp;lt;ranges&amp;gt;`](/reference/ranges.md)
@@ -976,4 +984,4 @@ C++14の策定において、コンセプトの複雑さを回避して必要最
 - [P1452R2 On the non-uniform semantics of return-type-requirements](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1452r2.html)
 - [P1616R1 Using unconstrained template template parameters with constrained templates](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1616r1.html)
 - [C++ Concepts - complete overview (Jakub Cislo)](http://programowaniezpasja.pl/wp-content/uploads/2019/05/Cpp_Concepts_-_complete_overview_-_Jakub_Cislo.pdf)
-- [Multiple destructors with C++ concepts - Sandor Dargo&amp;#39;s Blog](https://www.sandordargo.com/blog/2021/06/16/multiple-destructors-with-cpp-concepts)
+- [Multiple destructors with C++ concepts - Sandor Dargo&amp;#39;s Blog](https://www.sandordargo.com/blog/2021/06/16/multiple-destructors-with-cpp-concepts)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>一貫比較 [P0515R3] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/consistent_comparison.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/consistent_comparison.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/consistent_comparison.md b/lang/cpp20/consistent_comparison.md
index 53209f1cd..91c1df457 100644
--- a/lang/cpp20/consistent_comparison.md
+++ b/lang/cpp20/consistent_comparison.md
@@ -1,6 +1,14 @@
 # 一貫比較 [P0515R3]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 新しく三方比較演算子`&amp;lt;=&amp;gt;`が導入されることにより、順序付けと同値比較の6つの関係演算子（`&amp;lt;`, `&amp;lt;=`, `&amp;gt;`, `&amp;gt;=`, `==`, `!=`）を容易に実装することができるようになる。
 
@@ -776,7 +784,7 @@ struct has_vector {
 |関数/メンバポインタ|`std::strong_equality`|あらゆるポインタ変換が施された後、同じポインタ型にならなければ比較不可|
 |[`std::nullptr_t`](/reference/cstddef/nullptr_t.md)|`std::strong_equality`||
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [`&amp;lt;compare&amp;gt;`](/reference/compare.md)
     - 比較カテゴリ型
@@ -835,4 +843,4 @@ struct has_vector {
     - [P0436R1 An Extensible Approach to Obtaining Selected Operators](http://wg21.link/P0436R1)
     - [P0474R0 Comparison in C++: Basic Facilities](http://wg21.link/P0474R0)
     - [P0481R0 T. Van Eerd. “Bravely Default](http://wg21.link/P0481R0)
-    - [P0432R0 D. Stone. “Implicit and Explicit Default Comparison Operators](http://wg21.link/P0432R0)
+    - [P0432R0 D. Stone. “Implicit and Explicit Default Comparison Operators](http://wg21.link/P0432R0)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンパイル時初期化を強制する`constinit`キーワードを追加 [P1143R2] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/constinit.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/constinit.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/constinit.md b/lang/cpp20/constinit.md
index 82f66caeb..e23305588 100644
--- a/lang/cpp20/constinit.md
+++ b/lang/cpp20/constinit.md
@@ -1,6 +1,14 @@
 # コンパイル時初期化を強制する`constinit`キーワードを追加 [P1143R2]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 変数に対する`constinit`指定は、静的初期化（*static initialization*）が可能な変数に対して、その初期化がコンパイル時に完了することを保証する。
@@ -193,7 +201,7 @@ int main() {}
 
 `constinit`はキーワードとして追加されており、C++コードのすべての所で予約語として扱われる。そのため、変数名や関数名などとして使用する事はできない。これは、C++17以前に対する破壊的変更となるが、一般的な単語ではなかったため問題にならないと判断されたようである。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [C++11 `constexpr`](/lang/cpp11/constexpr.md)
 - [`mutex`のコンストラクタ](/reference/mutex/mutex/op_constructor.md)
@@ -205,4 +213,4 @@ int main() {}
 - [P1143R2 Adding the `constinit` keyword](https://wg21.link/P1143)
 - [Constant initialization - Andrzej&amp;#39;s C++ blog](https://akrzemi1.wordpress.com/2012/05/27/constant-initialization/)
 - [`mutex`のconstexprコンストラクタ - yohhoyの日記](https://yohhoy.hatenadiary.jp/entry/20120621/p1)
-- [Static Initialization Order Fiasco - in neuro](https://yohhoy.hatenadiary.jp/entry/20120621/p1)  
+- [Static Initialization Order Fiasco - in neuro](https://yohhoy.hatenadiary.jp/entry/20120621/p1)  
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ポインタから`bool`への変換を縮小変換とする [P1957R2] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md b/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md
index 0cf4402aa..7b2b886e8 100644
--- a/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md
+++ b/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md
@@ -1,6 +1,14 @@
 # ポインタから`bool`への変換を縮小変換とする [P1957R2]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 ポインタ型（メンバポインタも含む）から`bool`型への変換が、縮小変換として規定されるようになる。
@@ -55,7 +63,7 @@ std::variant&amp;lt;bool, int&amp;gt; v = b[1]; // boolを保持して構築
 
 `{}`初期化では縮小変換が禁止されているためこれは破壊的変更となるが、そのような変換は多くの場合バグの可能性が高いこと、MSVCは非リテラルのポインタから`bool`への変換を縮小変換として扱っていたことなどから、影響は少なくメリットの方が大きいと判断されたようだ。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [`std::variant::`コンストラクタ](/reference/variant/variant/op_constructor.md)
 - [`std::variant::operator=`](/reference/variant/variant/op_assign.md)
@@ -64,4 +72,4 @@ std::variant&amp;lt;bool, int&amp;gt; v = b[1]; // boolを保持して構築
 
 - [P1957R2 Converting from `T*` to `bool` should be considered narrowing (re: US 212)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1957r2.html)
 - [LWG Issue 3228. Surprising `variant` construction](https://cplusplus.github.io/LWG/issue3228)
-- [P0608R3 A sane `variant` converting constructor](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0608r3.html)
+- [P0608R3 A sane `variant` converting constructor](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0608r3.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コルーチン [P0912R5] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/coroutines.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/coroutines.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/coroutines.md b/lang/cpp20/coroutines.md
index cc7d161e0..b01763587 100644
--- a/lang/cpp20/coroutines.md
+++ b/lang/cpp20/coroutines.md
@@ -1,6 +1,14 @@
 # コルーチン [P0912R5]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 処理途中でのサスペンド(中断)／レジューム(再開)をサポートする一般化された関数として、[コルーチン](https://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%AB%E3%83%BC%E3%83%81%E3%83%B3)が導入される。
 
@@ -608,7 +616,7 @@ C++20コルーチンに関するキーワードは、いずれも接頭辞`co_`
 何度かの改名提案（[P0071R0](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0071r0.html)、[P1485R1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1485r1.html)）も提出されたが、いずれも否決されてC++20仕様に落ち着いた。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - C++20 [`&amp;lt;coroutine&amp;gt;`](/reference/coroutine.md)
 - C++23 [`&amp;lt;generator&amp;gt;`](/reference/generator.md)
 
@@ -626,4 +634,4 @@ C++20コルーチンに関するキーワードは、いずれも接頭辞`co_`
 - [C++ Coroutines: Understanding the promise type](https://lewissbaker.github.io/2018/09/05/understanding-the-promise-type)
 - [C++ Coroutines: Understanding Symmetric Transfer](https://lewissbaker.github.io/2020/05/11/understanding_symmetric_transfer)
 - [C++ co_awaiting coroutines](https://web.archive.org/web/20210421165652/https://blog.panicsoftware.com/co_awaiting-coroutines/)
-- [20分くらいでわかった気分になれるC++20コルーチン](https://www.slideshare.net/yohhoy/20c20)
+- [20分くらいでわかった気分になれるC++20コルーチン](https://www.slideshare.net/yohhoy/20c20)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>状態を持たないラムダ式を、デフォルト構築可能、代入可能とする [P0624R2] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md b/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md
index 1420fbd9f..9cad42c30 100644
--- a/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md
+++ b/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md
@@ -1,6 +1,14 @@
 # 状態を持たないラムダ式を、デフォルト構築可能、代入可能とする [P0624R2]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++17まではラムダ式の生成するクロージャ型に定義される特殊メンバ関数はコピー/ムーブコンストラクタとデストラクタのみだったが、C++20からは状態を持たない、すなわちキャプチャをしていないラムダ式の場合にのみそのクロージャ型はデフォルトコンストラクタと代入演算子を持つようになる。
@@ -155,8 +163,8 @@ set1 = set2;  // C++17まではコンパイルエラー
 
 C++20では同時に[評価されない文脈にラムダ式を書くことができるようになった](./wording_for_lambdas_in_unevaluated_contexts.md)ため、この様な場合にラムダ式のクロージャ型を直接取得し渡すことができ、余計なコードをほとんど削減することができるようになる。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [評価されない文脈でのラムダ式](./wording_for_lambdas_in_unevaluated_contexts.md)
 
 ## 参照
-- [P0624R2 Default constructible and assignable stateless lambdas](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0624r2.pdf)
+- [P0624R2 Default constructible and assignable stateless lambdas](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0624r2.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ビットフィールドのメンバ変数初期化 [P0683R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/default_member_initializers_for_bit_fields.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/default_member_initializers_for_bit_fields.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/default_member_initializers_for_bit_fields.md b/lang/cpp20/default_member_initializers_for_bit_fields.md
index b4edb5594..3d3bdb4d9 100644
--- a/lang/cpp20/default_member_initializers_for_bit_fields.md
+++ b/lang/cpp20/default_member_initializers_for_bit_fields.md
@@ -1,6 +1,14 @@
 # ビットフィールドのメンバ変数初期化 [P0683R1]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++11で導入された[非静的メンバ変数の初期化子](/lang/cpp11/non_static_data_member_initializers.md)では、ビットフィールドは対象外であった。
 
@@ -68,7 +76,7 @@ int main()
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 非静的メンバ変数の初期化](/lang/cpp11/non_static_data_member_initializers.md)
 
 
@@ -76,4 +84,3 @@ int main()
 - [P0187R0 Proposal of Bitfield Default Member Initializers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0187r0.pdf)
 - [R0187R1 Proposal/Wording for Bit-field Default Member Initializer Syntax](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0187r1.pdf)
 - [P0683R1 Default member initializers for bit-fields](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0683r1.html)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[=]によるthisの暗黙のキャプチャを非推奨化 [P0806R2] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md b/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md
index 412554fab..795b36fe4 100644
--- a/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md
+++ b/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md
@@ -1,6 +1,14 @@
 # [=]によるthisの暗黙のキャプチャを非推奨化 [P0806R2]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++20からは、ラムダ式でのデフォルトコピーのキャプチャ指定`[=]`での`this`ポインタのキャプチャは非推奨となる。
 
@@ -38,10 +46,10 @@ int main()
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 ラムダ式](/lang/cpp11/lambda_expressions.md)
 - [C++20 ラムダ式のキャプチャとして`[=, this]`を許可する](allow_lambda_capture_equal_this.md)
 
 
 ## 参照
-- [P0806R2 Deprecate implicit capture of this via `[=]`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0806r2.html)
+- [P0806R2 Deprecate implicit capture of this via `[=]`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0806r2.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>PODを非推奨化 [P0767R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecate_pod.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/deprecate_pod.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;PODを非推奨化 [P0767R1]&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative_page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;../../reference/type_traits/is_pod.html&#34;&gt;POD (Plain Old Data) という型の分類&lt;/a&gt;は、C++11において&lt;a href=&#34;../../reference/type_traits/is_trivial.html&#34;&gt;トリビアル型&lt;/a&gt;と&lt;a href=&#34;../../reference/type_traits/is_standard_layout.html&#34;&gt;スタンダードレイアウト型&lt;/a&gt;に用語が分割された。&lt;/p&gt;
&lt;p&gt;C++20では規格の文面に残っていた「POD」の使用をやめ、スタンダードレイアウト型などのほかの型分類に置き換えた。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_pod.html&#34;&gt;is_pod&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/aligned_storage.html&#34;&gt;aligned_storage&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/aligned_union.html&#34;&gt;aligned_union&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cstddef/max_align_t.html&#34;&gt;max_align_t&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0767r1.html&#34; target=&#34;_blank&#34;&gt;P0767R1 Deprecate POD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2342.htm&#34; target=&#34;_blank&#34;&gt;N2342 POD&#39;s Revisited; Resolving Core Issue 568 (Revision 5)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://faithandbrave.hateblo.jp/entry/20081127/1227777378&#34; target=&#34;_blank&#34;&gt;C++0x POD再考 - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C++11においてPODという用語が分割された文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>添字演算子内でのカンマ演算子の使用を非推奨化 [P1161R3] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md b/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md
index b85ae365f..d5e8cabe3 100644
--- a/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md
+++ b/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md
@@ -1,6 +1,14 @@
 # 添字演算子内でのカンマ演算子の使用を非推奨化 [P1161R3]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 多次元配列クラスを設計する場合などで、単一の引数しかとれない添字演算子に`ar[x, y]`のようにカンマ演算子をオーバーロードして複数のインデックスを指定できるようにすることがあった。
 
@@ -15,8 +23,8 @@ ar[x, y]   // C++17:OK, C++20:非推奨
 既存のカンマ演算子をオーバーロードしたコードを使用する場合は、丸カッコで囲むこと。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++23 添字演算子の多次元サポート](/lang/cpp23/multidimensional_subscript_operator.md)
 
 ## 参照
-- [P1161R3 Deprecate uses of the comma operator in subscripting expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1161r3.html)
+- [P1161R3 Deprecate uses of the comma operator in subscripting expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1161r3.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ほとんどの`volatile`を非推奨化 [P1152R4] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecating_volatile.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/deprecating_volatile.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/deprecating_volatile.md b/lang/cpp20/deprecating_volatile.md
index 484101b07..e839c4a6e 100644
--- a/lang/cpp20/deprecating_volatile.md
+++ b/lang/cpp20/deprecating_volatile.md
@@ -1,6 +1,14 @@
 # ほとんどの`volatile`を非推奨化 [P1152R4]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++20より、`volatile`の本来の役割に照らして不正確、あるいは誤解を招く用法や無意味な用法について非推奨とされるようになる。
@@ -381,4 +389,4 @@ volatile device dev;
 - [P1831R0 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1831r0.html)
 - [P1831R0 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
 - [P2327R0 De-deprecating volatile compound assignment](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2327r1.pdf)
-- [CWG Issue 2654. Un-deprecation of compound volatile assignments](https://cplusplus.github.io/CWG/issues/2654.html)
+- [CWG Issue 2654. Un-deprecation of compound volatile assignments](https://cplusplus.github.io/CWG/issues/2654.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>指示付き初期化 [P0329R4] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/designated_initialization.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/designated_initialization.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/designated_initialization.md b/lang/cpp20/designated_initialization.md
index 21eb9b338..f21a37367 100644
--- a/lang/cpp20/designated_initialization.md
+++ b/lang/cpp20/designated_initialization.md
@@ -2,6 +2,14 @@
 
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++20では、波カッコによる集成体初期化においてメンバ名を指定して初期化が行える。
 
@@ -107,4 +115,4 @@ struct A a = {.x = 1, 2};      // Cでは有効、C++20では無効
 
 ## 参照
 
-* [P0329R4 Designated initialization](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0329r4.pdf)
+* [P0329R4 Designated initialization](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0329r4.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>型の文脈でtypenameの省略を許可 [P0634R3] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/down_with_typename.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/down_with_typename.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/down_with_typename.md b/lang/cpp20/down_with_typename.md
index 7d86fa898..669457506 100644
--- a/lang/cpp20/down_with_typename.md
+++ b/lang/cpp20/down_with_typename.md
@@ -2,6 +2,14 @@
 
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 型しか現れない文脈では、依存名を解決するための`typename`キーワードを省略できるようにする。
@@ -82,4 +90,4 @@ struct Derived: T::Base // typename不要
 
 ## 参照
 
-- [P0634R3 Down with `typename`!](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0634r3.html)
+- [P0634R3 Down with `typename`!](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0634r3.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変長データを扱うクラスの効率的なdelete [P0722R3] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md b/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md
index 246e37c9a..90f56aa92 100644
--- a/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md
+++ b/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md
@@ -1,6 +1,14 @@
 # 可変長データを扱うクラスの効率的なdelete [P0722R3]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 従来のクラススコープでの`operator delete`オーバーロードにおいて、オーバーロードされた`operator delete`が呼び出されるのはそのクラスのオブジェクトが破棄された後であり、そのオーバーロード内からはそのクラスのオブジェクト（及びメンバ）にアクセスすることはできなかった。
@@ -420,7 +428,7 @@ struct S {
 
 結局、`std::destroying_delete_t`を第二引数に取る形が一番シンプルかつ可読性が高いとして採用された。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [C++14 サイズ付きデアロケーション](/lang/cpp14/sized_deallocation.md)
 - [`std::destroying_delete_t`](/reference/new/destroying_delete_t.md)
@@ -429,4 +437,4 @@ struct S {
 
 - [P0722R3 Efficient sized delete for variable sized classes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0722r3.html)
 - [P0722R1 Efficient sized delete for variable sized classes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0722r1.html)
-- [CWG Issue 2248. Problems with sized delete](https://cplusplus.github.io/CWG/issues/2248)
+- [CWG Issue 2248. Problems with sized delete](https://cplusplus.github.io/CWG/issues/2248)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数内で未評価のインラインアセンブリを許可することによる組み込み関数のconstexpr有効化 [P1668R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md b/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md
index 2a996c751..0a947a798 100644
--- a/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md
+++ b/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md
@@ -1,6 +1,14 @@
 # constexpr関数内で未評価のインラインアセンブリを許可することによる組み込み関数のconstexpr有効化 [P1668R1]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 `asm`宣言によるインラインアセンブリは`constexpr`関数内に現れる事が禁止されていたため、`constexpr`関数内に書く事は出来なかった。C++20からはコンパイル時に評価されない限り、`asm`宣言を`constexpr`関数内に書く事ができるようになる。
@@ -93,10 +101,10 @@ int main() {
 
 副次的だが、複雑なインラインアセンブリによる記述とともにシンプルなC++コードによる記述が同居している事で、インラインアセンブリが何をしているのかをユーザーが理解しやすくなるという効果もある。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [`is_constant_evaluated`](/reference/type_traits/is_constant_evaluated.md)
 
 ## 参照
 
-- [P1668R1 Enabling constexpr Intrinsics By Permitting Unevaluated inline-assembly in constexpr Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1668r1.html)
+- [P1668R1 Enabling constexpr Intrinsics By Permitting Unevaluated inline-assembly in constexpr Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1668r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>関数を条件付きでexplicitにする構文を追加 [P0892R2] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/explicit_bool.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/explicit_bool.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/explicit_bool.md b/lang/cpp20/explicit_bool.md
index 344d574f9..64a1ffee3 100644
--- a/lang/cpp20/explicit_bool.md
+++ b/lang/cpp20/explicit_bool.md
@@ -1,6 +1,14 @@
 # 関数を条件付きでexplicitにする構文を追加 [P0892R2]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++20では、関数を条件付きで`explicit`にする構文が追加された。コンストラクタと変換演算子に指定する`explicit`指定子に、`explicit(true)`、`explicit(false)`のように`bool`に変換可能な定数式を指定する。`true`に評価される値を指定することで、その関数は`explicit`となる。
 
@@ -157,11 +165,11 @@ struct pair {
 * std::is_convertible_v[link /reference/type_traits/is_convertible.md]
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`pair`のコンストラクタ](/reference/utility/pair/op_constructor.md)
 - [`tuple`のコンストラクタ](/reference/tuple/tuple/op_constructor.md)
 - [`optional`のコンストラクタ](/reference/optional/optional/op_constructor.md)
 
 
 ## 参照
-- [P0892R2 explicit(bool)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0892r2.html)
+- [P0892R2 explicit(bool)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0892r2.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>構造化束縛を拡張して通常の変数宣言のように使用できるようにする [P1091R3] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.md b/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.md
index ae1d35a1e..8873ff8d0 100644
--- a/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.md
+++ b/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.md
@@ -1,6 +1,14 @@
 # 構造化束縛を拡張して通常の変数宣言のように使用できるようにする [P1091R3]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++17で導入された構造化束縛宣言に指定しておけるのはCV修飾のみで、記憶域クラスや`constexpr`等を指定することは出来なかった。  
 このため、`thread_local`指定の変数や`constexpr`変数などの初期化のために構造化束縛を用いることが出来なかった。
@@ -125,7 +133,7 @@ int main()
 
 ただ、今回見送られた残りのものも将来的には許可される可能性がある。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 構造化束縛](/lang/cpp17/structured_bindings.md)
 - [C++20 構造化束縛した変数の参照キャプチャを許可](/lang/cpp20/reference_capture_of_structured_bindings.md)
 
@@ -134,4 +142,4 @@ int main()
 - [P1091R0 Extending structured bindings to be more like variable declarations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1091r0.html)
 - [P1091R1 Extending structured bindings to be more like variable declarations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1091r1.html)
 - [P1091R2 Extending structured bindings to be more like variable declarations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1091r2.html)
-- [P1091R3 Extending structured bindings to be more like variable declarations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1091r3.html)
+- [P1091R3 Extending structured bindings to be more like variable declarations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1091r3.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ジェネリックラムダのテンプレート構文 [P0428R2] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/familiar_template_syntax_for_generic_lambdas.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/familiar_template_syntax_for_generic_lambdas.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/familiar_template_syntax_for_generic_lambdas.md b/lang/cpp20/familiar_template_syntax_for_generic_lambdas.md
index 1e91bb228..5a08c5809 100644
--- a/lang/cpp20/familiar_template_syntax_for_generic_lambdas.md
+++ b/lang/cpp20/familiar_template_syntax_for_generic_lambdas.md
@@ -1,6 +1,14 @@
 # ジェネリックラムダのテンプレート構文 [P0428R2]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++14では、ラムダ式のパラメータ型に`auto`キーワードを使用することで、任意の型のパラメータを受け取れるようになった：
 
@@ -124,10 +132,10 @@ auto f = []&amp;lt;typename... Args&amp;gt;(Args&amp;amp;&amp;amp;... args) {
 * std::forward[link /reference/utility/forward.md]
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 ラムダ式](/lang/cpp11/lambda_expressions.md)
 - [C++14 ジェネリックラムダ](/lang/cpp14/generic_lambdas.md)
 
 
 ## 参照
-- [P0428R2 Familiar template syntax for generic lambdas](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0428r2.pdf)
+- [P0428R2 Familiar template syntax for generic lambdas](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0428r2.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>機能テストマクロ -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/feature_test_macros.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/feature_test_macros.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;機能テストマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;h3&gt;言語機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_aggregate_paren_init&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;allow_initializing_aggregates_from_a_parenthesized_list_of_values.html&#34;&gt;丸カッコの値リストからの集成体初期化を許可&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_char8_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;char8_t.html&#34;&gt;UTF-8エンコーディングされた文字の型として&lt;code&gt;char8_t&lt;/code&gt;を追加&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_concepts&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;concepts.html&#34;&gt;コンセプト&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_conditional_explicit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;explicit_bool.html&#34;&gt;関数を条件付きで&lt;code&gt;explicit&lt;/code&gt;にする構文を追加&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;allow_virtual_function_calls_in_constant_expressions.html&#34;&gt;定数式からの仮想関数の呼び出しを許可&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.html&#34;&gt;定数式での&lt;code&gt;dynamic_cast&lt;/code&gt;、多態的な&lt;code&gt;typeid&lt;/code&gt;を許可&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;try-catch_blocks_in_constexpr_functions.html&#34;&gt;constexpr関数内でのtry-catchブロックを許可&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;changing_the_active_member_of_a_union_inside_constexpr.html&#34;&gt;定数式内での共用体のアクティブメンバの変更を許可&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;permitting_trivial_default_initialization_in_constexpr_contexts.html&#34;&gt;constexpr関数内でのトリビアルなデフォルト初期化を許可&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.html&#34;&gt;constexpr関数内で未評価のインラインアセンブリを許可することによる組み込み関数のconstexpr有効化&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr_dynamic_alloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;more_constexpr_containers.html&#34;&gt;可変サイズをもつコンテナの&lt;code&gt;constexpr&lt;/code&gt;化&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr_in_decltype&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;less_eager_instantiation_of_constexpr_functions.html&#34;&gt;評価されない文脈での定数式評価によって特殊メンバ関数がインスタンス化されることを規定&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_consteval&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;immediate_functions.html&#34;&gt;即時関数&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constinit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;constinit.html&#34;&gt;コンパイル時初期化を強制する&lt;code&gt;constinit&lt;/code&gt;キーワードを追加&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_deduction_guides&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;class_template_argument_deduction_for_aggregates.html&#34;&gt;集成体クラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;class_template_argument_deduction_for_alias_templates.html&#34;&gt;エイリアステンプレート経由でのクラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_designated_initializers&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201707L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;designated_initialization.html&#34;&gt;指示付き初期化&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_generic_lambdas&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201707L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;familiar_template_syntax_for_generic_lambdas.html&#34;&gt;ジェネリックラムダのテンプレート構文&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_impl_coroutine&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;coroutines.html&#34;&gt;コルーチン&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_impl_destroying_delete&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;efficient_sized_delete_for_variable_sized_classes.html&#34;&gt;可変長データを扱うクラスの効率的な&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_impl_three_way_comparison&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;consistent_comparison.html&#34;&gt;一貫比較&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_init_captures&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201803L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;allow_pack_expansion_in_lambda_init_capture.html&#34;&gt;ラムダ式の初期化キャプチャでのパック展開を許可&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_modules&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;modules.html&#34;&gt;モジュール&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_nontype_template_args&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201911L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;class_types_in_non-type_template_parameters.html&#34;&gt;非型テンプレートパラメータとしてクラス型を許可する&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_using_enum&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;using_enum.html&#34;&gt;スコープ付き列挙型のusing宣言&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ライブラリ&lt;/h3&gt;
&lt;p&gt;ライブラリの機能テストマクロは全て&lt;code&gt;&lt;a href=&#34;../../reference/version.html&#34;&gt;&amp;lt;version&amp;gt;&lt;/a&gt;&lt;/code&gt;でも提供される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_array_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201803L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::array&lt;/code&gt;の完全&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/array.html&#34;&gt;&amp;lt;array&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_assume_aligned&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/assume_aligned.html&#34;&gt;std::assume_aligned()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_flag_test&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic_flag/test.html&#34;&gt;std::atomic_flag::test()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/atomic/atomic.html&#34;&gt;&lt;code&gt;std::atomic&lt;/code&gt;の浮動小数点数型に対する特殊化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_lock_free_type_aliases&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic.html&#34;&gt;atomic_signed_lock_free/atomic_unsigned_lock_free&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_ref&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic_ref.html&#34;&gt;std::atomic_ref&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_shared_ptr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/memory/atomic.html&#34;&gt;&lt;code&gt;std::atomic&lt;/code&gt;の&lt;code&gt;std::shared_ptr/std::weak_ptr&lt;/code&gt;に対する特殊化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_value_initialization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201911L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/atomic/atomic_flag/op_constructor.html&#34;&gt;&lt;code&gt;std::atomic_flag&lt;/code&gt;の値初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_wait&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic/wait.html&#34;&gt;std::atomic::wait()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic/notify_one.html&#34;&gt;std::atomic::notify_one()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic/notify_all.html&#34;&gt;std::atomic::notify_all()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_barrier&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/barrier.html&#34;&gt;&amp;lt;barrier&amp;gt;&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/barrier.html&#34;&gt;&amp;lt;barrier&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_bind_front&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional/bind_front.html&#34;&gt;std::bind_front()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_bit_cast&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit/bit_cast.html&#34;&gt;std::bit_cast()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_bitops&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_bounded_array_traits&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_bounded_array.html&#34;&gt;std::is_bounded_array&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_unbounded_array.html&#34;&gt;std::is_unbounded_array&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_char8_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;char8_t&lt;/code&gt;に対する特殊化の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/filesystem.html&#34;&gt;&amp;lt;filesystem&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/istream.html&#34;&gt;&amp;lt;istream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/limits.html&#34;&gt;&amp;lt;limits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/locale.html&#34;&gt;&amp;lt;locale&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ostream.html&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_chrono&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;カレンダーとタイムゾーン&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_concepts&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/concepts.html&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/concepts.html&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_algorithms&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多くのアルゴリズムに&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_complex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/complex/complex.html&#34;&gt;std::complex&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/complex.html&#34;&gt;&amp;lt;complex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_dynamic_alloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/destroy_at.html&#34;&gt;std::destroy_at&lt;/a&gt;&lt;/code&gt;ファミリと&lt;code&gt;&lt;a href=&#34;../../reference/memory/allocator.html&#34;&gt;std::allocator&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&#34;../../reference/memory/allocator_traits.html&#34;&gt;std::alocator_traits&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/construct_at.html&#34;&gt;std::construct_at&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_functional&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::invoke&lt;/code&gt;、&lt;code&gt;std::reference_wrapper&lt;/code&gt;、&lt;code&gt;std::not_fn&lt;/code&gt;、&lt;code&gt;std::bind_front&lt;/code&gt;、&lt;code&gt;std::bind&lt;/code&gt;、&lt;code&gt;std::mem_fn&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator/back_insert_iterator.html&#34;&gt;back_insert_iterator&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../../reference/iterator/front_insert_iterator.html&#34;&gt;front_insert_iterator&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../../reference/iterator/insert_iterator.html&#34;&gt;insert_iterator&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_memory&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/pointer_traits.html&#34;&gt;std::pointer_traits&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_numeric&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201911L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;の数値アルゴリズムの&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string/basic_string.html&#34;&gt;std::string&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_string_view&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view/basic_string_view/copy.html&#34;&gt;std::string_view::copy&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_tuple&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple/tuple.html&#34;&gt;std::tuple&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;追加対応（一部のコンストラクタと代入演算子）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple.html&#34;&gt;&amp;lt;tuple&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_utility&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility/pair.html&#34;&gt;std::pair&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;追加対応（一部のコンストラクタと代入演算子）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_vector&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/vector/vector.html&#34;&gt;std::vector&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/vector.html&#34;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_coroutine&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/coroutine.html&#34;&gt;&amp;lt;coroutine&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダの追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/coroutine.html&#34;&gt;&amp;lt;coroutine&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_destroying_delete&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/new/destroying_delete_t.html&#34;&gt;std::destroying_delete_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/new.html&#34;&gt;&amp;lt;new&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_endian&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit/endian.html&#34;&gt;std::endian&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_erase_if&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;各コンテナに対する&lt;code&gt;std::erase&lt;/code&gt;、&lt;code&gt;std::erase_if&lt;/code&gt;の特殊化&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/deque.html&#34;&gt;&amp;lt;deque&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/forward_list.html&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/list.html&#34;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/vector.html&#34;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/set.html&#34;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_set.html&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_execution&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/execution/execution/execution_policy.html&#34;&gt;std::execution::unsequenced_policy&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/execution.html&#34;&gt;&amp;lt;execution&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_format&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;202106L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;202110L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt;ヘッダ&lt;br /&gt;コンパイル時フォーマット文字列検査/&lt;code&gt;&lt;a href=&#34;../../reference/format/vformat.html&#34;&gt;std::vformat&lt;/a&gt;&lt;/code&gt;のコードサイズ削減&lt;br /&gt;&lt;code&gt;std::chrono&lt;/code&gt;のフォーマットにおけるロケール指定の修正/&lt;code&gt;const&lt;/code&gt;だとフォーマットできない型に対する対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/format.html&#34;&gt;&amp;lt;format&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_generic_unordered_lookup&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非順序連想コンテナの&lt;code&gt;find(), count(), contains(), equal_range()&lt;/code&gt;に対するHeterogeneous Overload追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_set.html&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_int_pow2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;bit&amp;gt;&lt;/code&gt;の2の冪乗に関する操作を行う関数の名前変更&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_integer_comparison_functions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility/cmp_equal.html&#34;&gt;std::cmp_equal()&lt;/a&gt;&lt;/code&gt;等の整数比較関数と&lt;code&gt;&lt;a href=&#34;../../reference/utility/in_range.html&#34;&gt;std::in_range()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_interpolate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cmath/lerp.html&#34;&gt;std::lerp()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/numeric/midpoint.html&#34;&gt;std::midpoint()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_constant_evaluated&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_constant_evaluated.html&#34;&gt;std::is_constant_evaluated()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_layout_compatible&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_layout_compatible.html&#34;&gt;std::is_layout_compatible&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_corresponding_member.html&#34;&gt;is_corresponding_member&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_nothrow_convertible&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_nothrow_convertible.html&#34;&gt;std::is_nothrow_convertible&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_pointer_interconvertible&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_corresponding_member.html&#34;&gt;std::is_corresponding_member&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_pointer_interconvertible_base_of.html&#34;&gt;std::is_pointer_interconvertible_base_of&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_jthread&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201911L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/thread/jthread.html&#34;&gt;std::jthread&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;stop_token&lt;/code&gt;による協調的キャンセル機構&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/stop_token.html&#34;&gt;&amp;lt;stop_token&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/thread.html&#34;&gt;&amp;lt;thread&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_latch&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/latch/latch.html&#34;&gt;std::latch&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/latch.html&#34;&gt;&amp;lt;latch&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_list_remove_return_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::list&lt;/code&gt;と&lt;code&gt;std::forward_list&lt;/code&gt;の&lt;code&gt;remove(), remove_if(), unique()&lt;/code&gt;の戻り値型変更&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/forward_list.html&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/list.html&#34;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_math_constants&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数学定数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numbers.html&#34;&gt;&amp;lt;numbers&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_polymorphic_allocator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory_resource/polymorphic_allocator.html&#34;&gt;std::pmr::polymorphic_allocator&lt;/a&gt;&lt;/code&gt;の改修&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201911L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;202106L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;202110L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;RangeライブラリとRangeアルゴリズム&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/view.html&#34;&gt;view&lt;/a&gt;&lt;/code&gt;コンセプトのデフォルト構築要求を削除&lt;br /&gt;所有権を持つ&lt;code&gt;view&lt;/code&gt;の許可と&lt;code&gt;&lt;a href=&#34;../../reference/ranges/owning_view.html&#34;&gt;owning_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_remove_cvref&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/remove_cvref.html&#34;&gt;std::remove_cvref&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_semaphore&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/semaphore/counting_semaphore.html&#34;&gt;std::counting_semaphore&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;std::binary_semaphore&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/semaphore.html&#34;&gt;&amp;lt;semaphore&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shared_ptr_arrays&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201707L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/make_shared.html&#34;&gt;std::make_shared&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/memory/allocate_shared.html&#34;&gt;std::allocate_shared&lt;/a&gt;&lt;/code&gt;の配列対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shift&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/shift_left.html&#34;&gt;std::shift_left&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/shift_right.html&#34;&gt;std::shift_right&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_smart_ptr_for_overwrite&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/make_shared_for_overwrite.html&#34;&gt;std::make_shared_for_overwrite()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/memory/allocate_shared_for_overwrite.html&#34;&gt;std::allocate_shared_for_overwrite()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_source_location&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/source_location/source_location.html&#34;&gt;std::source_location&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/source_location.html&#34;&gt;&amp;lt;source_location&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_span&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/span/span.html&#34;&gt;std::span&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/span.html&#34;&gt;&amp;lt;span&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ssize&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator/ssize.html&#34;&gt;std::ssize()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;std::span&lt;/code&gt;で使用する整数型の符号なし（&lt;code&gt;size_t&lt;/code&gt;）への変更&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_starts_ends_with&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::string&lt;/code&gt;と&lt;code&gt;std::string_view&lt;/code&gt;の&lt;code&gt;starts_with()&lt;/code&gt;と&lt;code&gt;ends_with()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_string_view&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201803L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::string&lt;/code&gt;と&lt;code&gt;std::string_view&lt;/code&gt;のイテレータの&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_syncbuf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201803L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同期化出力ストリーム（&lt;code&gt;std::osyncstream&lt;/code&gt;）とバッファ（&lt;code&gt;std::syncbuf&lt;/code&gt;）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/syncstream.html&#34;&gt;&amp;lt;syncstream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_three_way_comparison&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;標準ライブラリの三方比較演算子対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_to_address&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/to_address.html&#34;&gt;std::to_address()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_to_array&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/array/to_array.html&#34;&gt;std::to_array()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/array.html&#34;&gt;&amp;lt;array&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_type_identity&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/type_identity.html&#34;&gt;std::type_identity&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_unwrap_ref&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/unwrap_reference.html&#34;&gt;std::unwrap_reference&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/unwrap_ref_decay.html&#34;&gt;std::unwrap_ref_decay&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations&#34; target=&#34;_blank&#34;&gt;SD-FeatureTest: Feature-Test Macros and Policies - isocpp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>const修飾されたメンバポインタの制限を修正 [P0704R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/fixing_const_qualified_pointers_to_members.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/fixing_const_qualified_pointers_to_members.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/fixing_const_qualified_pointers_to_members.md b/lang/cpp20/fixing_const_qualified_pointers_to_members.md
index e5781123a..cd37f4917 100644
--- a/lang/cpp20/fixing_const_qualified_pointers_to_members.md
+++ b/lang/cpp20/fixing_const_qualified_pointers_to_members.md
@@ -1,6 +1,14 @@
 # const修飾されたメンバポインタの制限を修正 [P0704R1]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++11で[メンバ関数を左辺値／右辺値修飾](/lang/cpp11/ref_qualifier_for_this.md)する機能が導入された。その際、以下の例において、同じ関数を呼び出す場合でも、メンバ関数ポインタを介した方だけが不適格となっていた：
 
@@ -18,9 +26,9 @@ C++20ではこの式が許可され、仕様としては以下のように`const
 「`.*`式において、右辺値オブジェクトに対して左辺値修飾された非`const`のメンバ関数ポインタを呼び出すことは不適格となる」
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 メンバ関数の左辺値／右辺値修飾](/lang/cpp11/ref_qualifier_for_this.md)
 
 
 ## 参照
-- [P0704R1 Fixing const-qualified pointers to members](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0704r1.html)
+- [P0704R1 Fixing const-qualified pointers to members](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0704r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>autoパラメータによる関数テンプレートの簡易定義 -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/function_templates_with_auto_parameters.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/function_templates_with_auto_parameters.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/function_templates_with_auto_parameters.md b/lang/cpp20/function_templates_with_auto_parameters.md
index 88ab7ff9b..dfb0844cd 100644
--- a/lang/cpp20/function_templates_with_auto_parameters.md
+++ b/lang/cpp20/function_templates_with_auto_parameters.md
@@ -1,6 +1,14 @@
 # autoパラメータによる関数テンプレートの簡易定義
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++14で導入された[ジェネリックラムダ](/lang/cpp14/generic_lambdas.md)と同様に、通常の関数もパラメータ型を`auto`にすることで、簡易的に関数テンプレートを定義できるようにする。
 
@@ -39,10 +47,10 @@ int main()
 0.3
 ```
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++14 ジェネリックラムダ](/lang/cpp14/generic_lambdas.md)
 - [C++20 コンセプト](concepts.md)
 
 
 ## 参照
-- [P1141R2 Yet another approach for constrained declarations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1141r2.html)
+- [P1141R2 Yet another approach for constrained declarations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1141r2.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>即時関数 [P1073R3] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/immediate_functions.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/immediate_functions.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/immediate_functions.md b/lang/cpp20/immediate_functions.md
index 94dc24858..3aab076fe 100644
--- a/lang/cpp20/immediate_functions.md
+++ b/lang/cpp20/immediate_functions.md
@@ -2,6 +2,14 @@
 
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++20では、関数またはメンバ関数に対して、`consteval`キーワードで常に定数式評価されるよう指定できる。そのような関数を**即時関数**(immediate function)という。
@@ -97,7 +105,7 @@ C++11で導入された`constexpr`指定子によって、関数を定数式評
 
 当初は `constexpr!`というキーワードが提案されていたが、最終的に`consteval`になった。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 * [C++11 `constexpr`](/lang/cpp11/constexpr.md)
 * [C++20 コンパイル時初期化を強制する`constinit`キーワードを追加](constinit.md)
@@ -106,4 +114,4 @@ C++11で導入された`constexpr`指定子によって、関数を定数式評
 
 ## 参照
 
-* [P1073R3 Immediate functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1073r3.html)
+* [P1073R3 Immediate functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1073r3.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>未初期化領域への暗黙的なオブジェクト構築 -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md b/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
index 1b8fb0efb..1abdbef19 100644
--- a/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
+++ b/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
@@ -1,6 +1,14 @@
 # 未初期化領域への暗黙的なオブジェクト構築
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 `new`式ではなく`malloc()`等他の方法で確保されたメモリ領域には、明示的にオブジェクトの構築を行うまで想定する型のオブジェクトは生存期間内になく、そのアクセス（読み書き）は未定義動作となる。
@@ -393,7 +401,7 @@ unique_ptr&amp;lt;char[]&amp;gt; Stream::read() {
 
 なお、2番目の特殊なライブラリ関数もC++23で`std::start_lifetime_as()`として追加されている。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [`start_lifetime_as()`](/reference/memory/start_lifetime_as.md.nolink)
 - [`start_lifetime_as_array()`](/reference/memory/start_lifetime_as_array.md.nolink)
@@ -405,4 +413,4 @@ unique_ptr&amp;lt;char[]&amp;gt; Stream::read() {
 - [P0593R０ What to do with buffers that are not arrays, and undefined behavior thereof?](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0593r0.html)
 - [CWG Issue 2325. `std::launder` and reuse of character buffers](https://cplusplus.github.io/CWG/issues/2325.html)
 - [CWG Issue 2605. Implicit-lifetime aggregates](https://cplusplus.github.io/CWG/issues/2605.html)
-- [P1839R5 Accessing Object Representations](https://wg21.link/p1839r5)
+- [P1839R5 Accessing Object Representations](https://wg21.link/p1839r5)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>空オブジェクトに対する最適化を支援する属性[[no_unique_address]] [P0840R2] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/language_support_for_empty_objects.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/language_support_for_empty_objects.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/language_support_for_empty_objects.md b/lang/cpp20/language_support_for_empty_objects.md
index 14d3c4804..e44221ece 100644
--- a/lang/cpp20/language_support_for_empty_objects.md
+++ b/lang/cpp20/language_support_for_empty_objects.md
@@ -2,6 +2,14 @@
 
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++20では、空オブジェクトに対する最適化を支援する属性`[[no_unique_address]]`が追加された。
@@ -119,9 +127,9 @@ int main()
 `[[no_unique_address]]`を使うことで、基底クラスのサブオブジェクトだけでなくメンバ変数のサイズも0にできるので、EBOのために設計を変える必要がなくなる。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 属性構文](/lang/cpp11/attributes.md)
 - [`is_empty`](/reference/type_traits/is_empty.md)
 
 ## 参照
-- [P0840R2 Language support for empty objects](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0840r2.html)
+- [P0840R2 Language support for empty objects](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0840r2.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>評価されない文脈での定数式評価によって特殊メンバ関数がインスタンス化されることを規定 [P0859R0] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/less_eager_instantiation_of_constexpr_functions.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/less_eager_instantiation_of_constexpr_functions.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/less_eager_instantiation_of_constexpr_functions.md b/lang/cpp20/less_eager_instantiation_of_constexpr_functions.md
index f1fc80c78..0620316fb 100644
--- a/lang/cpp20/less_eager_instantiation_of_constexpr_functions.md
+++ b/lang/cpp20/less_eager_instantiation_of_constexpr_functions.md
@@ -1,6 +1,14 @@
 # 評価されない文脈での定数式評価によって特殊メンバ関数がインスタンス化されることを規定 [P0859R0]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 以前まで、デフォルトコンストラクタやムーブコンストラクタといった特殊メンバ関数は、odr-usedになった段階で定義される規定になっていた。しかし、`sizeof`や`decltype`のオペランドのような評価されない文脈においてはodr-usedにならないため、そのような文脈では特殊メンバ関数が使用できなかった。
 
@@ -30,4 +38,4 @@ int n = sizeof(short{duration(duration())});
 ## 参照
 
 - [CWG Issue 1581. When are constexpr member functions defined?](https://wg21.cmeerw.net/cwg/issue1581)
-- [P0859R0: Core Issue 1581: When are constexpr member functions defined?](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0859r0.html)
+- [P0859R0: Core Issue 1581: When are constexpr member functions defined?](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0859r0.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>確率が高い分岐と低い分岐を伝える属性 [[likely]], [[unlikely]] [P0479R5] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/likely_and_unlikely_attributes.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/likely_and_unlikely_attributes.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/likely_and_unlikely_attributes.md b/lang/cpp20/likely_and_unlikely_attributes.md
index 78625c538..134f04393 100644
--- a/lang/cpp20/likely_and_unlikely_attributes.md
+++ b/lang/cpp20/likely_and_unlikely_attributes.md
@@ -1,6 +1,14 @@
 # 確率が高い分岐と低い分岐を伝える属性 [[likely]], [[unlikely]] [P0479R5]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 if文やswitch文といった分岐制御構文において、条件分岐先のうちどれが実行される可能性が高いかという情報を、C++コンパイラへ最適化ヒントとして与える属性である。
 これらの属性を適切に用いると、C++コンパイラはより高速に動作するプログラムを生成する可能性がある。
@@ -63,7 +71,7 @@ std::string fizzbuzz(int n)
 GCCやClangなど一部C++コンパイラでは独自拡張として同等機能を提供しており、Linuxカーネルや大規模OSSによる広い利用実績があったため、C++標準の属性として採用された。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++23 `[[assume]]`属性](/lang/cpp23/portable_assumptions.md)
 
 
@@ -72,4 +80,4 @@ GCCやClangなど一部C++コンパイラでは独自拡張として同等機能
 - [GCC __builtin_expect組み込み関数](https://gcc.gnu.org/onlinedocs/gcc/extensions-to-the-c-language-family/other-built-in-functions-provided-by-gcc.html)
 - [Clang __builtin_expect組み込み関数](https://llvm.org/docs/BranchWeightMetadata.html)
 - [P0479R2 Attributes for Likely and Unlikely Statements (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0479r2.html)
-- [P0479R5 Proposed wording for likely and unlikely attributes (Revision 5)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0479r5.html)
+- [P0479R5 Proposed wording for likely and unlikely attributes (Revision 5)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0479r5.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>char16_tとchar32_tの文字・文字列リテラルを、文字コードUTF-16/32に規定 [P1041R4] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/make_char16t_char32t_string_literals_be_utf16_32.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/make_char16t_char32t_string_literals_be_utf16_32.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;char16_tとchar32_tの文字・文字列リテラルを、文字コードUTF-16/32に規定 [P1041R4]&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative_page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++11で追加された文字型&lt;a href=&#34;../cpp11/char16_32.html&#34;&gt;&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;&lt;/a&gt;の文字・文字列リテラルの文字コード、C++20からはUTF-16とUTF-32であることが規定される。&lt;/p&gt;
&lt;p&gt;これまでは、以下のような仕様であった：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;uchar&amp;gt;&lt;/code&gt;ヘッダでマクロ&lt;code&gt;__STDC_UTF_16__&lt;/code&gt;が定義される場合、&lt;code&gt;char16_t&lt;/code&gt;型の値はUTF-16の妥当なコードポイントを持つ。そうでない場合、&lt;code&gt;char16_t&lt;/code&gt;型の値は実装定義の文字コードとなる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;uchar&amp;gt;&lt;/code&gt;ヘッダでマクロ&lt;code&gt;__STDC_UTF_32__&lt;/code&gt;が定義される場合、&lt;code&gt;char32_t&lt;/code&gt;型の値はUTF-32の妥当なコードポイントを持つ。そうでない場合、&lt;code&gt;char32_t&lt;/code&gt;型の値は実装定義の文字コードとなる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++20では、無条件にUTF-16とUTF-32であることが規定される。&lt;/p&gt;
&lt;p&gt;なお、&lt;code&gt;u8&lt;/code&gt;プレフィックスをつけた文字・文字列リテラルは、UTF-8であることがこれまでに規定されていた。&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;これまで、&lt;code&gt;&amp;lt;uchar&amp;gt;&lt;/code&gt;ヘッダのマクロ&lt;code&gt;__STDC_UTF_16__&lt;/code&gt;と&lt;code&gt;__STDC_UTF_32__&lt;/code&gt;が定義されている場合にのみ、&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;はUTF-16/UTF-32エンコーディングであると規定されていた。&lt;/p&gt;
&lt;p&gt;しかし、これらが定義されなかった場合にコンパイラがほかのエンコーディングを選択することが疑わしかった。また、&lt;code&gt;char16_t&lt;/code&gt;の仕様として「サロゲートペア」が含まれているが、その概念をもつ他のよく知られた文字コードはない。単一の文字を32ビットで表現する他のよく知られた文字コードもない。&lt;/p&gt;
&lt;p&gt;実際にはすべての実装でこれらの文字・文字列リテラルはUTF-16とUTF-32にエンコーディングされるため、要件を示すだけではなく、より明確にするために、&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;の文字・文字列リテラルがUTF-16とUTF-32文字コードであることを規定する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../cpp11/char16_32.html&#34;&gt;C++11 &lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../cpp11/utf8_string_literals.html&#34;&gt;C++11 UTF-8文字列リテラル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../cpp17/utf8_character_literals.html&#34;&gt;C++17 UTF-8文字リテラル&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1041r4.html&#34; target=&#34;_blank&#34;&gt;P1041R4 Make &lt;code&gt;char16_t&lt;/code&gt;/&lt;code&gt;char32_t&lt;/code&gt; string literals be UTF-16/32&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>モジュール [P1103R3] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/modules.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/modules.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/modules.md b/lang/cpp20/modules.md
index 7bcd78598..b266f80a7 100644
--- a/lang/cpp20/modules.md
+++ b/lang/cpp20/modules.md
@@ -1,6 +1,14 @@
 # モジュール [P1103R3]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++20では、ヘッダーファイル・ソースファイルに代わる新たなファイル分割の仕組みとしてモジュールが導入された。
 
@@ -480,7 +488,7 @@ int main() {
 モジュールは、以上のような問題のないプログラム分割の仕組みとして導入された。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++23 無意味なexport宣言を禁止する](/lang/cpp23/meaningful_exports.md)
 
 
@@ -496,4 +504,4 @@ Standard library header units for C++20](http://www.open-std.org/jtc1/sc22/wg21/
 Mitigating minor modules maladies](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1766r1.html)
 - [P1811R0
 Relaxing redefinition restrictions for re-exportation robustness](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1811r0.html#problem)  
-  同時に到達可能とならなければODR違反にならないという仕様が削除された。また、インポータブルヘッダーの`#include`を`import`に置き換えるかは処理系定義となった。
+  同時に到達可能とならなければODR違反にならないという仕様が削除された。また、インポータブルヘッダーの`#include`を`import`に置き換えるかは処理系定義となった。
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変サイズをもつコンテナのconstexpr化 [P0784R7] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/more_constexpr_containers.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/more_constexpr_containers.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/more_constexpr_containers.md b/lang/cpp20/more_constexpr_containers.md
index 98cd1f086..1f0d0d409 100644
--- a/lang/cpp20/more_constexpr_containers.md
+++ b/lang/cpp20/more_constexpr_containers.md
@@ -1,6 +1,14 @@
 # 可変サイズをもつコンテナのconstexpr化 [P0784R7]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++20より、定数式における動的メモリ確保と解放が許可される。それに伴い、`std::vector`と`std::string`の全メンバ関数が`constexpr`対応し、定数式で使用できるようになる。
@@ -328,7 +336,7 @@ int main() {
 
 これらの問題について、`std::mark_immutable_if_constexpr()`によるアプローチを標準化委員会が嫌ったことと、2つ目の問題の解決が簡単ではなかった（時間がかかり得た）事から、コンパイル時に確保したメモリを実行時に持ち越すことについてはC++20への導入を見送ることとなった。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [動的メモリ確保の省略の許可](/lang/cpp14/clarifying_memory_allocation.md)
 - [`allocator`](/reference/memory/allocator.md)
@@ -348,4 +356,4 @@ int main() {
 - [P0784R7 More constexpr containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0784r7.html)
 - [動的メモリー確保 - 江添亮の入門C++](https://ezoeryou.github.io/cpp-intro/#動的メモリー確保)
 - [N3664 Clarifying Memory Allocation](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3664.html)
-- [P1974R0 Non-transient constexpr allocation using propconst](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1974r0.pdf)
+- [P1974R0 Non-transient constexpr allocation using propconst](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1974r0.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>入れ子名前空間定義でのインライン名前空間 [P1094R2] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/nested_inline_mamespaces.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/nested_inline_mamespaces.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/nested_inline_mamespaces.md b/lang/cpp20/nested_inline_mamespaces.md
index 7b91ac6dd..3a18da472 100644
--- a/lang/cpp20/nested_inline_mamespaces.md
+++ b/lang/cpp20/nested_inline_mamespaces.md
@@ -1,6 +1,14 @@
 # 入れ子名前空間定義でのインライン名前空間 [P1094R2]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++17で、入れ子の名前空間を`namespace ns1::ns2::ns3 {}`のように簡易的に定義できるようになったが、インライン名前空間の指定はできなかった。
 
@@ -25,10 +33,10 @@ namespace ns3 {
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 インライン名前空間](/lang/cpp11/inline_namespaces.md)
 - [C++17 入れ子名前空間の定義](/lang/cpp17/nested_namespace.md)
 
 
 ## 参照
-- [P1094R2 Nested Inline Namespaces](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1094r2.html)
+- [P1094R2 Nested Inline Namespaces](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1094r2.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[nodiscard]]をコンストラクタのオーバーロードごとに付加できるようにする -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/nodiscard_for_constructors.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/nodiscard_for_constructors.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/nodiscard_for_constructors.md b/lang/cpp20/nodiscard_for_constructors.md
index 0c2d764f0..7cf4e088f 100644
--- a/lang/cpp20/nodiscard_for_constructors.md
+++ b/lang/cpp20/nodiscard_for_constructors.md
@@ -1,6 +1,14 @@
 # [[nodiscard]]をコンストラクタのオーバーロードごとに付加できるようにする
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 戻り値が使用されない場合に警告を出力させる[`[[nodiscard]]`属性](/lang/cpp17/nodiscard.md)を、コンストラクタのオーバーロードに付加できるようにする。
 
@@ -50,10 +58,10 @@ prog.cc:11:12: note: declared here
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 `[[nodiscard]]`属性](/lang/cpp17/nodiscard.md)
 - [C++20 `[[nodiscard]]`属性に理由となる文字列を付加できるようにする](nodiscard_should_have_a_reason.md)
 
 
 ## 参照
-- [P1771R1 `[[nodiscard]]` for constructors](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1771r1.pdf)
+- [P1771R1 `[[nodiscard]]` for constructors](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1771r1.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[nodiscard]]属性に理由となる文字列を付加できるようにする [P1301R4] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/nodiscard_should_have_a_reason.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/nodiscard_should_have_a_reason.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/nodiscard_should_have_a_reason.md b/lang/cpp20/nodiscard_should_have_a_reason.md
index 8f8d86e37..9d061c9fb 100644
--- a/lang/cpp20/nodiscard_should_have_a_reason.md
+++ b/lang/cpp20/nodiscard_should_have_a_reason.md
@@ -1,6 +1,14 @@
 # [[nodiscard]]属性に理由となる文字列を付加できるようにする [P1301R4]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 戻り値が使用されない場合に警告を出力させる[`[[nodiscard]]`属性](/lang/cpp17/nodiscard.md)に、戻り値を無視してはならない理由を文字列リテラルとして指定できるようにする。
 
@@ -84,10 +92,10 @@ prog.cc:26:8: note: declared here
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 `[[nodiscard]]`属性](/lang/cpp17/nodiscard.md)
 - [C++20 `[[nodiscard]]`をコンストラクタのオーバーロードごとに付加できるようにする](nodiscard_for_constructors.md)
 
 
 ## 参照
-- [P1301R4 `[[nodiscard(&amp;#34;should have a reason&amp;#34;)]]`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1301r4.html)
+- [P1301R4 `[[nodiscard(&amp;#34;should have a reason&amp;#34;)]]`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1301r4.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>要素数不明の配列への変換を許可 [P0388R4] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md b/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md
index cf3a5780c..5954a8f86 100644
--- a/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md
+++ b/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md
@@ -2,6 +2,14 @@
 
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++20では、要素数が既知の配列型から要素数不明の配列型への暗黙変換が可能になる。
@@ -108,4 +116,4 @@ g(arr);          // OK
 
 ## 参照
 
-* [P0388R4 Permit conversions to arrays of unknown bound](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0388r4.html)
+* [P0388R4 Permit conversions to arrays of unknown bound](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0388r4.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数内でのトリビアルなデフォルト初期化を許可 [P1331R2] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md b/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md
index 268c00f4c..bdf68c483 100644
--- a/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md
+++ b/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md
@@ -1,6 +1,14 @@
 # constexpr関数内でのトリビアルなデフォルト初期化を許可 [P1331R2]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 型`T`の変数を単に`T t;`のように（関数スコープで）初期化した時、`T`がクラス型であり非トリビアルなデフォルトコンストラクタを持っているか、集成体型であり全てのメンバがデフォルトメンバ初期化によって初期化されていれば、`t`は初期化されており値は決定的である。しかし、組み込み型など[トリビアルにデフォルト構築可能](/reference/type_traits/is_trivially_default_constructible.md)な型の場合はその初期化は実装定義であり、その値の読み取りは未定義動作である。
@@ -113,10 +121,10 @@ int main() {
 
 そのため、トリビアルな型のローカル変数のトリビアルなデフォルト初期化そのものは未定義動作ではなく、その値の読み取りが未定義動作であり、そのような初期化そのものを禁止するのは過度な制限であるとして緩和される事となった。ただし、その値の読み取りは依然として未定義動作であり、定数式で現れてはならない。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [可変サイズをもつコンテナの`constexpr`化](more_constexpr_containers.md)
 
 ## 参照
 
-- [P1331R2 Permitting trivial default initialization in constexpr contexts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1331r2.pdf)
+- [P1331R2 Permitting trivial default initialization in constexpr contexts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1331r2.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>更新された定義済みマクロ -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/predefined_macros.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/predefined_macros.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;更新された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cplusplus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++のバージョン値を表す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/n4859.html&#34; target=&#34;_blank&#34;&gt;N4859 Editors&#39; Report -- Programming Languages -- C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ユーザー宣言したコンストラクタを持つクラスの集成体初期化を禁止 [P1008R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/prohibit_aggregates_with_user-declared_constructors.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/prohibit_aggregates_with_user-declared_constructors.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/prohibit_aggregates_with_user-declared_constructors.md b/lang/cpp20/prohibit_aggregates_with_user-declared_constructors.md
index 5c638117e..0b8756e49 100644
--- a/lang/cpp20/prohibit_aggregates_with_user-declared_constructors.md
+++ b/lang/cpp20/prohibit_aggregates_with_user-declared_constructors.md
@@ -1,6 +1,14 @@
 # ユーザー宣言したコンストラクタを持つクラスの集成体初期化を禁止 [P1008R1]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 ユーザー宣言されたコンストラクタをもつクラスを、集成体初期化によってコンストラクタを回避してオブジェクト構築できてしまっていた技法を禁止する。
 
@@ -106,4 +114,4 @@ int main() {
 
 
 ## 参照
-- [P1008R1 Prohibit aggregates with user-declared constructors](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1008r1.pdf)
+- [P1008R1 Prohibit aggregates with user-declared constructors](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1008r1.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>初期化式をともなう範囲for文 [P0614R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/range-based_for_statements_with_initializer.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/range-based_for_statements_with_initializer.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/range-based_for_statements_with_initializer.md b/lang/cpp20/range-based_for_statements_with_initializer.md
index af28928cc..826576870 100644
--- a/lang/cpp20/range-based_for_statements_with_initializer.md
+++ b/lang/cpp20/range-based_for_statements_with_initializer.md
@@ -1,6 +1,14 @@
 # 初期化式をともなう範囲for文 [P0614R1]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 if文、switch文、for文と同様に、範囲for文でもそのスコープで使用する変数の初期化ができるよう構文を追加する。
 
@@ -113,10 +121,10 @@ int main()
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 if文とswitch文の条件式と初期化を分離](/lang/cpp17/selection_statements_with_initializer.md)
 - [C++23 初期化文での型の別名宣言を許可](/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md)
 
 
 ## 参照
-- [P0614R1 Range-based for statements with initializer](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0614r1.html)
+- [P0614R1 Range-based for statements with initializer](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0614r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>構造化束縛した変数の参照キャプチャを許可 [P1381R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/reference_capture_of_structured_bindings.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/reference_capture_of_structured_bindings.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/reference_capture_of_structured_bindings.md b/lang/cpp20/reference_capture_of_structured_bindings.md
index 6c436a215..58673dec1 100644
--- a/lang/cpp20/reference_capture_of_structured_bindings.md
+++ b/lang/cpp20/reference_capture_of_structured_bindings.md
@@ -1,6 +1,14 @@
 # 構造化束縛した変数の参照キャプチャを許可 [P1381R1]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 構造化束縛した変数はラムダ式で参照キャプチャできない規定となっていたが、これを許可する。ただし、ビットフィールドを構造化束縛した変数は参照キャプチャできない。
 
@@ -29,10 +37,10 @@ int main() {
 - 参照キャプチャできない要素として、ビットフィールド、構造化束縛した変数、無名共用体のメンバの3つがあったが、C++20ではこの不許可リストから「構造化束縛した変数」が削除された
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 構造化束縛](/lang/cpp17/structured_bindings.md)
 - [C++20 構造化束縛を拡張して通常の変数宣言のように使用できるようにする](extending_structured_bindings_to_be_more_like_variable_declarations.md)
 
 
 ## 参照
-- [P1381R1 Reference capture of structured bindings](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1381r1.html)
+- [P1381R1 Reference capture of structured bindings](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1381r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>範囲for文がカスタマイゼーションポイントを見つけるルールを緩和 [P0962R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md b/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md
index f1dc654f8..a9b5ceb34 100644
--- a/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md
+++ b/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md
@@ -1,6 +1,14 @@
 # 範囲for文がカスタマイゼーションポイントを見つけるルールを緩和 [P0962R1]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++17までは、範囲for文に指定するシーケンスの型が`begin`/`end`メンバのどちらかでも持っていれば`begin()`/`end()`メンバ関数を使用し、どちらも持っていなければADLで非メンバ関数の`begin()`/`end()`を探索する仕様となっていた。
 
@@ -55,10 +63,10 @@ o
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 範囲for文](/lang/cpp11/range_based_for.md)
 - [C++17 範囲forの制限緩和 — `begin` と `end` の型が異なることを許可](/lang/cpp17/generalizing_the_range-based_for_loop.md)
 
 
 ## 参照
-- [P0962R1 Relaxing the range-for loop customization point finding rules](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0962r1.html)
+- [P0962R1 Relaxing the range-for loop customization point finding rules](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0962r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>構造化束縛がカスタマイゼーションポイントを見つけるルールを緩和 [P0961R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.md b/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.md
index 85607bc22..3420cd9ca 100644
--- a/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.md
+++ b/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.md
@@ -1,6 +1,14 @@
 # 構造化束縛がカスタマイゼーションポイントを見つけるルールを緩和 [P0961R1]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++17までは、構造化束縛する対象の型が`get()`メンバ関数を持っていればその関数でメンバ変数を抽出し、持っていなければ非メンバ関数の`get()`関数で抽出する仕様となっていた。
 
@@ -48,9 +56,9 @@ int main()
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 構造化束縛](/lang/cpp17/structured_bindings.md)
 
 
 ## 参照
-- [P0961R1 Relaxing the structured bindings customization point finding rules](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0961r1.html)
+- [P0961R1 Relaxing the structured bindings customization point finding rules](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0961r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>throw()による例外送出しない指定を削除 -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/remove_deprecated_nothrow_exception_specification.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/remove_deprecated_nothrow_exception_specification.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/remove_deprecated_nothrow_exception_specification.md b/lang/cpp20/remove_deprecated_nothrow_exception_specification.md
index 43f6d61db..58fb85bbc 100644
--- a/lang/cpp20/remove_deprecated_nothrow_exception_specification.md
+++ b/lang/cpp20/remove_deprecated_nothrow_exception_specification.md
@@ -1,6 +1,14 @@
 # throw()による例外送出しない指定を削除
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++11で例外送出しないことを指定する[`noexcept`](/lang/cpp11/noexcept.md)が追加されたことによって古い例外仕様は非推奨化の後に削除されたが、なにも例外送出しないことを表す`throw()`指定は`noexcept`と同じ意味になるよう仕様が変更されて非推奨機能として維持されていた。
 
@@ -13,10 +21,10 @@ void f() throw();
 C++20では、非推奨とされていた`throw()`指定の機能を削除する。代わりに`noexcept`を使用すること。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 noexcept](/lang/cpp11/noexcept.md)
 - [C++17 非推奨だった古い例外仕様を削除](/lang/cpp17/remove_deprecated_exception_specifications.md)
 
 
 ## 参照
-- [P0619R4 Reviewing Deprecated Facilities of C++17 for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0619r4.html)
+- [P0619R4 Reviewing Deprecated Facilities of C++17 for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0619r4.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>属性の名前空間を予約 -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/reserving_attribute_namespaces_for_future_use.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/reserving_attribute_namespaces_for_future_use.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;属性の名前空間を予約&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative_page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;将来的に標準で定義する属性のために、以下の名前空間の属性を予約する：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名前空間に属さない属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std&lt;/code&gt;および&lt;code&gt;std&lt;/code&gt; + 数字の名前空間の属性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../cpp11/attributes.html&#34;&gt;C++11 属性構文&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1908r1.pdf&#34; target=&#34;_blank&#34;&gt;P1908R1 Reserving Attribute Namespaces for Future Use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デフォルトのコピーコンストラクタと非constなコンストラクタが衝突する問題を修正 [P0641R2] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.md b/lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.md
index 06ff7ff03..b2becb2f5 100644
--- a/lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.md
+++ b/lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.md
@@ -1,6 +1,14 @@
 # デフォルトのコピーコンストラクタと非constなコンストラクタが衝突する問題を修正 [P0641R2]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++17までは以下のように、自身の型の非`const`なオブジェクトをとるコンストラクタをもつクラスを定義し、
 
@@ -38,4 +46,4 @@ C++20では、このコードを適格とする。
 
 
 ## 参照
-- [P0641R2 Resolving Core Issue #1331 (`const` mismatch with defaulted copy constructor)](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0641r2.html)
+- [P0641R2 Resolving Core Issue #1331 (`const` mismatch with defaulted copy constructor)](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0641r2.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>符号付き整数型が2の補数表現であることを規定 [P1236R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/signed_integers_are_twos_complement.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/signed_integers_are_twos_complement.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/signed_integers_are_twos_complement.md b/lang/cpp20/signed_integers_are_twos_complement.md
index 68606c12e..cd9a35a4c 100644
--- a/lang/cpp20/signed_integers_are_twos_complement.md
+++ b/lang/cpp20/signed_integers_are_twos_complement.md
@@ -1,6 +1,14 @@
 # 符号付き整数型が2の補数表現であることを規定 [P1236R1]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++20では、符号付き整数型のビット表現を「2の補数 (Two&amp;#39;s Complement)」に規定する。
 
@@ -130,7 +138,7 @@ Visual Studio、GCC、Clangといった主要な処理系が、2の補数以外
 C11規格は、2の補数のほかに、1の補数表現 (Ones&amp;#39; complement) と符号ビット付き絶対値表現 (Signed magnitude) を許可しているが、C++では本文書の概要にも記載したように、ハッシュ値の一意性と全順序をサポートするため、2の補数に規定する。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`std::has_unique_object_representations`](/reference/type_traits/has_unique_object_representations.md)
 
 
@@ -140,4 +148,4 @@ C11規格は、2の補数のほかに、1の補数表現 (Ones&amp;#39; complement) と
 - [P0907R4 Signed Integers are Two&amp;#39;s Complement](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0907r4.html)
     - 元になった提案文書
 - [符号付き整数型の負数表現を 2 の補数と規定 (P1236R1) - cppmap](https://cppmap.github.io/standardization/cpp20/#2-p1236r1)
-- [2の補数表現における演算](http://www.cc.kyoto-su.ac.jp/~kbys/kiso/number/int-op.html)
+- [2の補数表現における演算](http://www.cc.kyoto-su.ac.jp/~kbys/kiso/number/int-op.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>暗黙のラムダキャプチャを簡略化 [P0588R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/simplifying_implicit_lambda_capture.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/simplifying_implicit_lambda_capture.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/simplifying_implicit_lambda_capture.md b/lang/cpp20/simplifying_implicit_lambda_capture.md
index 9e7e3eae0..7e7359643 100644
--- a/lang/cpp20/simplifying_implicit_lambda_capture.md
+++ b/lang/cpp20/simplifying_implicit_lambda_capture.md
@@ -1,6 +1,14 @@
 # 暗黙のラムダキャプチャを簡略化 [P0588R1]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 ここでは、ラムダ式での暗黙のキャプチャについて、以下の問題を解決する：
 
@@ -24,10 +32,9 @@ void f() {
 構造化束縛で導入された名前はラムダ式でキャプチャできない、と明記された。しかしその後、「[構造化束縛を拡張して通常の変数宣言のように使用できるようにする](extending_structured_bindings_to_be_more_like_variable_declarations.md)」の仕様でそれが可能となったため、この仕様変更は打ち消された。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 構造化束縛](/lang/cpp17/structured_bindings.md)
 - [C++20 構造化束縛を拡張して通常の変数宣言のように使用できるようにする](extending_structured_bindings_to_be_more_like_variable_declarations.md)
 
 ## 参照
 - [P0588R1 Simplifying implicit lambda capture](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0588r1.html)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数内でのtry-catchブロックを許可 [P1002R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/try-catch_blocks_in_constexpr_functions.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/try-catch_blocks_in_constexpr_functions.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/try-catch_blocks_in_constexpr_functions.md b/lang/cpp20/try-catch_blocks_in_constexpr_functions.md
index c33558df5..5c99de598 100644
--- a/lang/cpp20/try-catch_blocks_in_constexpr_functions.md
+++ b/lang/cpp20/try-catch_blocks_in_constexpr_functions.md
@@ -1,6 +1,14 @@
 # constexpr関数内でのtry-catchブロックを許可 [P1002R1]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++20では、`constexpr`関数内でのtry-catchブロックの使用を許可する。ただし、`throw`式は従来通り許可せず、コンパイルエラーとなる (`throw`式は`constexpr`関数におけるアサーションのような役割)。
 
@@ -21,9 +29,9 @@ constexpr int f(int x) {
 この機能が必要になったのは、リフレクションとメタプログラミングのためである。コンパイル時定数として[`std::vector`](/reference/vector/vector.md)を使用できるようにするためには、try-catchブロックを許可することが必要であった。libc++での[`vector::insert()`](/reference/vector/vector/insert.md)の実装において、try-catchブロックを使用して強い例外安全性の保証を提供している。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++20 可変サイズをもつコンテナの`constexpr`化](more_constexpr_containers.md)
 
 
 ## 参照
-- [P1002R1 Try-catch blocks in constexpr functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1002r1.pdf)
+- [P1002R1 Try-catch blocks in constexpr functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1002r1.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Unicode標準への参照を更新 -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/update_the_reference_to_the_unicode_standard.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/update_the_reference_to_the_unicode_standard.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Unicode標準への参照を更新&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;Unicode標準 (ISO/IEC 10646) としてこれまで、「ISO/IEC 10646-1:1993, Information technology — Universal Multiple-Octet Coded Character Set (UCS) — Part 1: Architecture and Basic Multilingual Plane」が参照されていた。&lt;/p&gt;
&lt;p&gt;従来の古い仕様への参照は、非推奨化された古い機能のものであるとして残し、Unicode標準の最新仕様「ISO/IEC 10646, Information technology — Universal Coded Character Set (UCS)」を参照するよう追加する。&lt;/p&gt;
&lt;p&gt;Unicode標準で非推奨化された用語UCS2とUCS4の扱いは、以下のようになる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UTC-32はUCS4と見なせるため、文字エンコーディングの説明ではUCS4の代わりにUTF-32を使用する&lt;/li&gt;
&lt;li&gt;ただしUTF-16はUCS2と見なすことができないため、古い機能のために古い仕様を参照するとして一部そのまま残す&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実装が常に最新のUnicode標準を参照していることから、この変更によるユーザーへの直接的な影響はない。&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;C++規格上ではISO/IEC 10646-1:1993を参照していても、実装は最新仕様に更新し続けていた。たとえば1996の仕様ではハングル文字のセットが削除されて別な位置に追加され、チベット文字が再追加された。実装はそれに対応している。&lt;/p&gt;
&lt;p&gt;また、C++標準が参照しているECMAScript標準でUnicode標準の参照が競合してしまう。&lt;/p&gt;
&lt;p&gt;Unicode標準での用語定義が変更されたことにも影響がある。UCS2とUCS4という用語が非推奨化されたために、その用語をC++標準が使用し続けることは望ましくない。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1025r1.html&#34; target=&#34;_blank&#34;&gt;P1025R1 Update The Reference To The Unicode Standard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スコープ付き列挙型のusing宣言 [P1099R5] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/using_enum.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/using_enum.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/using_enum.md b/lang/cpp20/using_enum.md
index cde6bcb74..50f661ffd 100644
--- a/lang/cpp20/using_enum.md
+++ b/lang/cpp20/using_enum.md
@@ -2,6 +2,14 @@
 
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 名前空間のように、`using enum EnumType;`もしくは`using EnumType::enumerator`とすることで、列挙値のスコープ指定を省略できる。
@@ -110,10 +118,10 @@ C言語形式の列挙型を改善するために[スコープを持つ列挙型
 
 これにより、C言語形式の列挙型をスコープを持つ列挙型へ置き換えるというリファクタリングをする際、(整数との暗黙変換を別とすれば)ソースコードレベルの互換性を保って置き換えることができるようにもなった。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [スコープを持つ列挙型](/lang/cpp11/scoped_enum.md)
 
 ## 参照
 
-- [P1099R5 Using Enum](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1099r5.html)
+- [P1099R5 Using Enum](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1099r5.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変引数が空でない場合のトークン置換 [P0306R4] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/va_opt.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/va_opt.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/va_opt.md b/lang/cpp20/va_opt.md
index d0e2d13f5..1382eff72 100644
--- a/lang/cpp20/va_opt.md
+++ b/lang/cpp20/va_opt.md
@@ -1,6 +1,14 @@
 # 可変引数が空でない場合のトークン置換 [P0306R4]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 新たなプリプロセスマクロ`__VA_OPT__`を追加する。このマクロは、マクロのパラメータとして受け取った可変引数が空でない場合に置換するトークンを指定する機能を持つ。
 
@@ -45,9 +53,9 @@ int main()
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 可変引数マクロ](/lang/cpp11/variadic_macros.md)
 
 
 ## 参照
-- [P0306R4 Comma omission and comma deletion](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0306r4.html)
+- [P0306R4 Comma omission and comma deletion](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0306r4.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>評価されない文脈でのラムダ式 [P0315R4] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md b/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md
index fec2f2ee6..b630e29c5 100644
--- a/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md
+++ b/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md
@@ -1,6 +1,14 @@
 # 評価されない文脈でのラムダ式 [P0315R4]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++17まではラムダ式が評価されない文脈に現れることはできなかったが、C++20からは評価されない文脈にラムダ式を書くことができるようになる。
@@ -130,11 +138,11 @@ C++17までは、ラムダ式をSFINAEの文脈で用いて擬似的なコンセ
 
 ただし、ラムダ式が外部リンケージを持つエンティティのシグネチャに現れる事は相変わらず禁止されている。ラムダ式を用いてSFINAEするなど、そのような事がしたい場合には[コンセプト](./concepts.md)を用いる事でより容易に目的を達成できる。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [状態を持たないラムダ式を、デフォルト構築可能、代入可能とする](/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md)
 
 ## 参照
 - [P0315R0 Wording for lambdas in unevaluated contexts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0315r0.pdf)
 - [P0315R4 Wording for lambdas in unevaluated contexts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0315r4.pdf)
 - [CWG Issue.1607 Lambdas in template parameters](https://wg21.cmeerw.net/cwg/issue1607)
-- [C++標準化委員会の文書: P0310R--P0319R0 - 本の虫](https://ezoeryou.github.io/blog/article/2016-07-27-cpp-P0310R0-P0319R0.html)
+- [C++標準化委員会の文書: P0310R--P0319R0 - 本の虫](https://ezoeryou.github.io/blog/article/2016-07-27-cpp-P0310R0-P0319R0.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>elif/elifdef/elifndefのサポートを追加 [P2334R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md b/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md
index 24606375a..531f80b99 100644
--- a/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md
+++ b/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md
@@ -1,6 +1,14 @@
 # elif/elifdef/elifndefのサポートを追加 [P2334R1]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++23では、以下のプリプロセス時条件式が追加される：
 
@@ -28,4 +36,4 @@ C++23では、以下のプリプロセス時条件式が追加される：
 
 
 ## 参照
-- [P2334R1 Add support for preprocessing directives elifdef and elifndef](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2334r1.pdf)
+- [P2334R1 Add support for preprocessing directives elifdef and elifndef](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2334r1.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式に対する属性 [P2173R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/attributes_on_lambda_expressions.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/attributes_on_lambda_expressions.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/attributes_on_lambda_expressions.md b/lang/cpp23/attributes_on_lambda_expressions.md
index 30cd03e4b..7bb70ec96 100644
--- a/lang/cpp23/attributes_on_lambda_expressions.md
+++ b/lang/cpp23/attributes_on_lambda_expressions.md
@@ -1,6 +1,14 @@
 # ラムダ式に対する属性 [P2173R1]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++23では、ラムダ式のいくつかの箇所に属性を指定できる。
 
@@ -41,10 +49,10 @@ int main()
 ```
 ```
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 ラムダ式](/lang/cpp11/lambda_expressions.md)
 - [C++11 属性構文](/lang/cpp11/attributes.md)
 
 
 ## 参照
-- [P2173R1 Attributes on Lambda-Expressions](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2173r1.pdf)
+- [P2173R1 Attributes on Lambda-Expressions](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2173r1.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>静的な診断メッセージの文字エンコーディング [P2246R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/character_encoding_of_diagnostic_text.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/character_encoding_of_diagnostic_text.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;静的な診断メッセージの文字エンコーディング [P2246R1]&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++23では、コンパイル時に診断メッセージを出力させる以下の機能について、ソースコードのエンコーディングが実行環境のエンコーディングで表現できない場合にどうするかの規定を見直す：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;static_assert&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[[deprecated]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#error&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++20までは、「基本ソース文字集合に含まれない文字は出力する必要はない」という規定になっていたが、基本ソース文字集合と実行環境のエンコーディングは関係ないものであるため、この規定を削除することとした。&lt;/p&gt;
&lt;p&gt;この規定はC20でも導入され、C++もそれに追従することとした。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2246r1.pdf&#34; target=&#34;_blank&#34;&gt;P2246R1 Character encoding of diagnostic text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg14/www/docs/n2563.pdf&#34; target=&#34;_blank&#34;&gt;WG14 N2563 Character encoding of diagnostic text&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>継承コンストラクタからのクラステンプレート引数の推論 [P2582R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/class_template_argument_deduction_from_inherited.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/class_template_argument_deduction_from_inherited.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/class_template_argument_deduction_from_inherited.md b/lang/cpp23/class_template_argument_deduction_from_inherited.md
index ba94fb0f2..89d13fb60 100644
--- a/lang/cpp23/class_template_argument_deduction_from_inherited.md
+++ b/lang/cpp23/class_template_argument_deduction_from_inherited.md
@@ -1,6 +1,14 @@
 # 継承コンストラクタからのクラステンプレート引数の推論 [P2582R1]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++23では、派生クラスで定義した継承コンストラクタからでも、クラステンプレート引数を推論できるようになる。
 
@@ -53,10 +61,10 @@ G g(true, &amp;#39;a&amp;#39;, 1); // OK。G&amp;lt;char, bool&amp;gt;に推論される
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 継承コンストラクタ](/lang/cpp11/inheriting_constructors.md)
 - [C++17 クラステンプレートのテンプレート引数推論](/lang/cpp17/type_deduction_for_class_templates.md)
 
 
 ## 参照
-- [P2582R1 Wording for class template argument deduction from inherited constructors](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2582r1.pdf)
+- [P2582R1 Wording for class template argument deduction from inherited constructors](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2582r1.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>文字リテラルエンコーディングを一貫させる [P2316R2] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/consistent_character_literal_encoding.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/consistent_character_literal_encoding.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/consistent_character_literal_encoding.md b/lang/cpp23/consistent_character_literal_encoding.md
index 17106dec6..34537e3bd 100644
--- a/lang/cpp23/consistent_character_literal_encoding.md
+++ b/lang/cpp23/consistent_character_literal_encoding.md
@@ -1,6 +1,14 @@
 # 文字リテラルエンコーディングを一貫させる [P2316R2]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++20までは、以下のような、プリプロセッサ上での文字リテラルの比較と、if文での文字リテラルの比較が同じであるという保証がなかった。
 
@@ -21,4 +29,4 @@ if (&amp;#39;A&amp;#39; == 0x41){}
 
 
 ## 参照
-- [P2316R2 Consistent character literal encoding](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2316r2.pdf)
+- [P2316R2 Consistent character literal encoding](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2316r2.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数内でconsteval関数を呼び出せない問題を軽減 [P2564R3] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/consteval_needs_to_propagate_up.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/consteval_needs_to_propagate_up.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/consteval_needs_to_propagate_up.md b/lang/cpp23/consteval_needs_to_propagate_up.md
index 8f7b945f1..a0ba126e3 100644
--- a/lang/cpp23/consteval_needs_to_propagate_up.md
+++ b/lang/cpp23/consteval_needs_to_propagate_up.md
@@ -1,6 +1,14 @@
 # constexpr関数内でconsteval関数を呼び出せない問題を軽減 [P2564R3]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++23では、`consteval`呼び出しを含む`constexpr`関数を、条件付きで`consteval`関数と見なすようになる。そうすることで、定数式の文脈での`consteval`関数の使用がよりかんたんになる。
 
@@ -100,9 +108,9 @@ constexpr int k(int) {  // k&amp;lt;int&amp;gt;は即時関数ではない
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++20 即時関数](/lang/cpp20/immediate_functions.md)
 
 
 ## 参照
-- [P2564R3 `consteval` needs to propagate up](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2564r3.html)
+- [P2564R3 `consteval` needs to propagate up](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2564r3.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>エスケープシーケンスの区切り [P2290R3] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/delimited_escape_sequences.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/delimited_escape_sequences.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/delimited_escape_sequences.md b/lang/cpp23/delimited_escape_sequences.md
index b09612705..ca351ab41 100644
--- a/lang/cpp23/delimited_escape_sequences.md
+++ b/lang/cpp23/delimited_escape_sequences.md
@@ -1,6 +1,14 @@
 # エスケープシーケンスの区切り [P2290R3]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++23では、文字列リテラル中に記述するエスケープシーケンスとユニバーサルキャラクタ名の範囲を明確にするための波カッコ (`{}`) で囲む構文が追加される。
 
@@ -31,9 +39,9 @@ u8&amp;#34;\u{1F1F8}&amp;#34;;  // C++23 : 5文字のコードポイントも記述できる
 8進数または16進数によるエスケープシーケンスは、8進数は3文字まで、16進数は無制限の文字数という制限の違いがあり、また、8進数または16進数ではない文字が現れることでエスケープシーケンスの範囲が終了するため注意が必要であった。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 `char16_t`と`char32_t`](/lang/cpp11/char16_32.md)
 
 
 ## 参照
-- [P2290R3 Delimited escape sequences](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2290r3.pdf)
+- [P2290R3 Delimited escape sequences](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2290r3.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式で()を省略できる条件を緩和 [P1102R2] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/down_with_lambda_parens.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/down_with_lambda_parens.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/down_with_lambda_parens.md b/lang/cpp23/down_with_lambda_parens.md
index a993635f3..557c4a58c 100644
--- a/lang/cpp23/down_with_lambda_parens.md
+++ b/lang/cpp23/down_with_lambda_parens.md
@@ -1,6 +1,14 @@
 # ラムダ式で()を省略できる条件を緩和 [P1102R2]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++23では、ラムダ式のパラメータリストが空であれば、以下の要素を含む場合であってもパラメータリストの `()` を省略できる。
 
@@ -24,10 +32,10 @@ auto f5 = [] constexpr mutable noexcept -&amp;gt; bool { return true; }; // C++23 OK
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 ラムダ式](/lang/cpp11/lambda_expressions.md)
 - [C++23 `this`ポインタをもつ必要のない演算子を`static`として宣言できるようにする](/lang/cpp23/static_operator.md)
 
 
 ## 参照
-- [P1102R2 Down with `()`!](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1102r2.html)
+- [P1102R2 Down with `()`!](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1102r2.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>初期化文での型の別名宣言を許可 [P2360R0] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/extend_init_statement_to_allow_alias_declaration.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/extend_init_statement_to_allow_alias_declaration.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md b/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md
index bb3aeda35..6fe9cd4b7 100644
--- a/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md
+++ b/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md
@@ -1,6 +1,14 @@
 # 初期化文での型の別名宣言を許可 [P2360R0]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `if`文、`switch`文、範囲`for`文で初期化文を指定できるが、C++20までその初期化文では`typedef`による型の別名定義はできたが、`using`による型の別名定義はできなかった。
 
@@ -38,10 +46,10 @@ int main()
 }
 ```
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 if文とswitch文の条件式と初期化を分離](/lang/cpp17/selection_statements_with_initializer.md)
 - [C++20 初期化式をともなう範囲for文](/lang/cpp20/range-based_for_statements_with_initializer.md)
 
 
 ## 参照
-- [P2360R0 Extend init-statement to allow alias-declaration](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2360r0.html)
+- [P2360R0 Extend init-statement to allow alias-declaration](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2360r0.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>機能テストマクロ -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/feature_test_macros.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/feature_test_macros.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;機能テストマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;h3&gt;言語機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ライブラリ&lt;/h3&gt;
&lt;p&gt;ライブラリの機能テストマクロは全て&lt;code&gt;&lt;a href=&#34;../../reference/version.html&#34;&gt;&amp;lt;version&amp;gt;&lt;/a&gt;&lt;/code&gt;でも提供される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_as_const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ranges::cbegin&lt;/code&gt;が常に定数イテレータを返すようにする&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_fold&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;fold&lt;/code&gt;アルゴリズム&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations&#34; target=&#34;_blank&#34;&gt;SD-FeatureTest: Feature-Test Macros and Policies - isocpp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>変数テンプレートの部分特殊化を許可 [P2096R2] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/generalized_wording_for_partial_specializations.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/generalized_wording_for_partial_specializations.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/generalized_wording_for_partial_specializations.md b/lang/cpp23/generalized_wording_for_partial_specializations.md
index a872492de..7feeb55a3 100644
--- a/lang/cpp23/generalized_wording_for_partial_specializations.md
+++ b/lang/cpp23/generalized_wording_for_partial_specializations.md
@@ -1,6 +1,14 @@
 # 変数テンプレートの部分特殊化を許可 [P2096R2]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 変数テンプレートの仕様として、部分特殊化の許可を意図したような仕様はあったが、部分特殊化の多くの仕様はクラステンプレートのみを対象にしていた。
 
@@ -32,9 +40,9 @@ int main() {
 (nil)
 ```
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++14 変数テンプレート](/lang/cpp14/variable_templates.md)
 
 
 ## 参照
-- [P2096R2 Generalized wording for partial specializations](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2096r2.html)
+- [P2096R2 Generalized wording for partial specializations](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2096r2.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>if consteval [P1938R3] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/if_consteval.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/if_consteval.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/if_consteval.md b/lang/cpp23/if_consteval.md
index 856fae791..15b1d65a8 100644
--- a/lang/cpp23/if_consteval.md
+++ b/lang/cpp23/if_consteval.md
@@ -1,6 +1,14 @@
 # if consteval [P1938R3]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++23では、`constexpr`関数がコンパイル時に呼ばれたかを判定するための構文として、`if consteval`を導入する。これは「consteval if文」と呼ばれる。
 
@@ -101,10 +109,10 @@ constexpr size_t strlen(char const* s) {
 
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`std::is_constant_evaluated()`](/reference/type_traits/is_constant_evaluated.md)
 - [C++20 即時関数](/lang/cpp20/immediate_functions.md)
 
 
 ## 参照
-- [P1938R3 `if consteval`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1938r3.html)
+- [P1938R3 `if consteval`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1938r3.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>複合文の末尾へのラベルを許可 [P2324R2] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/labels_at_the_end_of_compound_statements.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/labels_at_the_end_of_compound_statements.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/labels_at_the_end_of_compound_statements.md b/lang/cpp23/labels_at_the_end_of_compound_statements.md
index dacce86cb..88ddf35bc 100644
--- a/lang/cpp23/labels_at_the_end_of_compound_statements.md
+++ b/lang/cpp23/labels_at_the_end_of_compound_statements.md
@@ -1,6 +1,14 @@
 # 複合文の末尾へのラベルを許可 [P2324R2]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C言語 (C23) との互換性のため、C言語で新しく許可された複合文の末尾 (関数末尾など`{}`ブロックの末尾) へのgotoラベルを許可する。
 
@@ -26,4 +34,4 @@ C++23でこの機能を導入することにより、gotoラベルを置ける
 
 ## 参照
 - [P2324R2 Labels at the end of compound statements (C compatibility)](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2324r2.pdf)
-- [C2X Proposal: WG14 N2508 Free Positioning of Labels Inside Compound Statements (updates N2496)](https://www.open-std.org/jtc1/sc22/wg14/www/docs/n2508.pdf)
+- [C2X Proposal: WG14 N2508 Free Positioning of Labels Inside Compound Statements (updates N2496)](https://www.open-std.org/jtc1/sc22/wg14/www/docs/n2508.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>範囲for文が範囲初期化子内で生じた一時オブジェクトを延命することを規定 [P2718R0] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/lifetime_extension_in_range_based_for_loop.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/lifetime_extension_in_range_based_for_loop.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/lifetime_extension_in_range_based_for_loop.md b/lang/cpp23/lifetime_extension_in_range_based_for_loop.md
index 21d2f13e7..c72b35aaf 100644
--- a/lang/cpp23/lifetime_extension_in_range_based_for_loop.md
+++ b/lang/cpp23/lifetime_extension_in_range_based_for_loop.md
@@ -2,6 +2,14 @@
 
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 仕様
 
 範囲for文
@@ -132,7 +140,7 @@ void foo() {
 
 一時オブジェクトの寿命について、範囲for文に限定しない汎用的な方法も検討されたが、最終的には範囲for文の例外規定となった。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [範囲for文](/lang/cpp11/range_based_for.md)
 
@@ -141,4 +149,4 @@ void foo() {
 - [地に足のついた範囲for文 - 地面を見下ろす少年の足蹴にされる私](https://onihusube.hatenablog.com/entry/2022/12/05/000923)
 - [範囲for文範囲初期化子内の一時オブジェクト延命の説明見直し
  #1246](https://github.com/cpprefjp/site/issues/1246)
-- [Are function parameter objects temporary objects?](https://stackoverflow.com/questions/77676199/are-function-parameter-objects-temporary-objects/77676480)
+- [Are function parameter objects temporary objects?](https://stackoverflow.com/questions/77676199/are-function-parameter-objects-temporary-objects/77676480)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>(符号付き)size_tリテラルのためのサフィックス [P0330R8] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/literal_suffix_for_signed_size_t.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/literal_suffix_for_signed_size_t.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/literal_suffix_for_signed_size_t.md b/lang/cpp23/literal_suffix_for_signed_size_t.md
index 5a31e63cc..0c9212fd2 100644
--- a/lang/cpp23/literal_suffix_for_signed_size_t.md
+++ b/lang/cpp23/literal_suffix_for_signed_size_t.md
@@ -1,6 +1,14 @@
 # (符号付き)size_tリテラルのためのサフィックス [P0330R8]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++23では、符号なし整数型[`size_t`](/reference/cstddef/size_t.md)に対応する符号付き整数型を表すリテラルの`z`および`Z`サフィックスを追加する。符号なしを表す`u`および`U`サフィックスをともに使用することで[`size_t`](/reference/cstddef/size_t.md)型のリテラルを記述できる。
 
@@ -52,10 +60,10 @@ case 1はコンパイルエラーとなる。[`std::min()`](/reference/algorithm
 case 2はC++23で導入する[`size_t`](/reference/cstddef/size_t.md)型リテラルを使用するため、問題なく動作する。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`std::cmp_less()`](/reference/utility/cmp_less.md)
 - [`std::ssize()`](/reference/iterator/ssize.md)
 
 
 ## 参照
-- [P0330R8 Literal Suffix for (signed) `size_t`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p0330r8.html)
+- [P0330R8 Literal Suffix for (signed) `size_t`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p0330r8.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>アクセス制御の異なるメンバ変数のレイアウトを宣言順に規定 [P1847R4] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/make_declaration_order_layout_mandated.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/make_declaration_order_layout_mandated.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/make_declaration_order_layout_mandated.md b/lang/cpp23/make_declaration_order_layout_mandated.md
index 3bdb83bfa..553fbfc23 100644
--- a/lang/cpp23/make_declaration_order_layout_mandated.md
+++ b/lang/cpp23/make_declaration_order_layout_mandated.md
@@ -1,6 +1,14 @@
 # アクセス制御の異なるメンバ変数のレイアウトを宣言順に規定 [P1847R4]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 以下のようなアクセス制御の異なるメンバ変数のメモリレイアウトは、実装に対して自由に並び替えてよい、という規定になっていたが、これを宣言順に規定する。
 
@@ -20,4 +28,4 @@ public:
 
 
 ## 参照
-- [P1847R4 Make declaration order layout mandated](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1847r4.pdf)
+- [P1847R4 Make declaration order layout mandated](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1847r4.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>無意味なexport宣言を禁止する [P2615R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/meaningful_exports.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/meaningful_exports.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/meaningful_exports.md b/lang/cpp23/meaningful_exports.md
index c1bfe2765..e31e14bf8 100644
--- a/lang/cpp23/meaningful_exports.md
+++ b/lang/cpp23/meaningful_exports.md
@@ -1,6 +1,14 @@
 # 無意味なexport宣言を禁止する [P2615R1]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++20時点でのモジュール定義では、いくつかの不必要なexport宣言ができてしまっていた。
 
@@ -21,10 +29,10 @@ C++23では、本来必要のない以下の宣言に対するexport宣言を禁
 ただし、この変更のあとでも、`export { … }`で囲まれた中では、これらが含まれていてもコンパイルエラーにはならない。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++20 モジュール](/lang/cpp20/modules.md)
 
 
 ## 参照
 - [P2615R1 Meaningful exports](https://open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2615r1.html)
-- [CWG Issue 2443. Meaningless template exports](https://wg21.cmeerw.net/cwg/issue2443)
+- [CWG Issue 2443. Meaningless template exports](https://wg21.cmeerw.net/cwg/issue2443)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>異なる文字エンコーディングをもつ文字列リテラルの連結を不適格とする [P2201R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/mixed_string_literal_concatenation.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/mixed_string_literal_concatenation.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/mixed_string_literal_concatenation.md b/lang/cpp23/mixed_string_literal_concatenation.md
index b93c80edb..ce4b343c4 100644
--- a/lang/cpp23/mixed_string_literal_concatenation.md
+++ b/lang/cpp23/mixed_string_literal_concatenation.md
@@ -1,6 +1,14 @@
 # 異なる文字エンコーディングをもつ文字列リテラルの連結を不適格とする [P2201R1]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++20までは、実装定義の動作として`L&amp;#34;&amp;#34;`、`u8&amp;#34;&amp;#34;`、`u&amp;#34;&amp;#34;`、`U&amp;#34;&amp;#34;`のようなエンコーディングが混在する文字列リテラルの連結を条件付きで許可していたが、これを禁止とする。
 
@@ -31,4 +39,4 @@ void f() {
 
 
 ## 参照
-- [P2201R1: Mixed string literal concatenation](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2201r1.html)
+- [P2201R1: Mixed string literal concatenation](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2201r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>添字演算子の多次元サポート [P2128R6] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/multidimensional_subscript_operator.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/multidimensional_subscript_operator.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/multidimensional_subscript_operator.md b/lang/cpp23/multidimensional_subscript_operator.md
index 3e7df114d..ddecaa776 100644
--- a/lang/cpp23/multidimensional_subscript_operator.md
+++ b/lang/cpp23/multidimensional_subscript_operator.md
@@ -1,6 +1,14 @@
 # 添字演算子の多次元サポート [P2128R6]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++23では、多次元配列クラスを定義するために必要となる、添字演算子のオーバーロードを定義する際の複数引数を許可する。
 
@@ -41,10 +49,10 @@ int main() {
 3
 ```
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++20 添字演算子内でのカンマ演算子の使用を非推奨化](/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md)
 - [`std::mdspan`](/reference/mdspan/mdspan.md)
 
 
 ## 参照
-- [P2128R6 Multidimensional subscript operator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2128r6.pdf)
+- [P2128R6 Multidimensional subscript operator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2128r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>名前付きユニバーサルキャラクタ名 [P2071R2] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/named_universal_character_escapes.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/named_universal_character_escapes.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/named_universal_character_escapes.md b/lang/cpp23/named_universal_character_escapes.md
index 489dfb672..facbcc229 100644
--- a/lang/cpp23/named_universal_character_escapes.md
+++ b/lang/cpp23/named_universal_character_escapes.md
@@ -1,6 +1,14 @@
 # 名前付きユニバーサルキャラクタ名 [P2071R2]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 これまで、Unicodeのユニバーサルキャラクタ名を指定するためには、`u8&amp;#34;\u0100&amp;#34;`のように`\u`または`\U`に続いてコードポイントを記述していた。
 
@@ -49,10 +57,10 @@ int main()
 Ā̀
 ```
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 `char16_t`と`char32_t`](/lang/cpp11/char16_32.md)
 
 ## 参照
 - [P2173R1 Attributes on Lambda-Expressions](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2173r1.pdf)
 - [Unicode Character “Ā” (U+0100)](https://www.compart.com/en/unicode/U+0100)
-- [Unicode Character “◌̀” (U+0300)](https://www.compart.com/en/unicode/U+0300)
+- [Unicode Character “◌̀” (U+0300)](https://www.compart.com/en/unicode/U+0300)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>定数式の文脈でのboolへの縮小変換を許可 [P1401R5] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/narrowing_contextual_conversions_to_bool.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/narrowing_contextual_conversions_to_bool.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/narrowing_contextual_conversions_to_bool.md b/lang/cpp23/narrowing_contextual_conversions_to_bool.md
index ece89bd08..8d383a547 100644
--- a/lang/cpp23/narrowing_contextual_conversions_to_bool.md
+++ b/lang/cpp23/narrowing_contextual_conversions_to_bool.md
@@ -1,6 +1,14 @@
 # 定数式の文脈でのboolへの縮小変換を許可 [P1401R5]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++23では、以下の定数式文脈での`bool`への縮小変換を許可する：
 
@@ -31,10 +39,10 @@ if constexpr(flags &amp;amp; Flags::Exec) { … }        // C++23以降
 if constexpr (sizeof(int[2])) { … } // C++23:OK 縮小変換
 ```
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 コンパイル時アサート](/lang/cpp11/static_assert.md)
 - [C++17 `constexpr if`文](/lang/cpp17/if_constexpr.md)
 
 
 ## 参照
-- [P1401R5 Narrowing contextual conversions to `bool`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1401r5.html)
+- [P1401R5 Narrowing contextual conversions to `bool`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1401r5.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>定数式内での非リテラル変数、静的変数・スレッドローカル変数およびgotoとラベルの存在を許可する [P2242R3] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/non_literal_variables_in_constexpr_functions.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/non_literal_variables_in_constexpr_functions.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;定数式内での非リテラル変数、静的変数・スレッドローカル変数およびgotoとラベルの存在を許可する [P2242R3]&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative_page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;constexpr&lt;/code&gt;関数が非リテラル変数、静的変数・スレッドローカル変数およびgoto文とラベルを含むことを許可する。&lt;/p&gt;
&lt;p&gt;ただし、これをコンパイル時に評価した場合、従来通りエラーとなる。
これらを含むコードパスは実行時にのみ通過するようにしなければならない。&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;これまでは、&lt;code&gt;constexpr&lt;/code&gt;関数内には非リテラル変数、静的変数・スレッドローカル変数およびgoto文とラベルが含まれてはならなかった。
これは、&lt;code&gt;constexpr&lt;/code&gt;関数が定数式実行できない要素を含んではならないという意味で、理にかなった制限であった。&lt;/p&gt;
&lt;p&gt;しかし、C++20で&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_constant_evaluated.html&#34;&gt;std::is_constant_evaluated&lt;/a&gt;&lt;/code&gt;によって定数式実行されるコードパスと実行時に通るコードパスを分けることが可能になり、状況が変化した。
定数式実行できないコードとはいえ、実行時にのみ通りコンパイル時には通らないコードパスに含まれていた場合にもプログラムが&lt;a class=&#34;cpprefjp-defined-word&#34;&gt;不適格&lt;/a&gt;となる、というのは直観に反する。&lt;/p&gt;
&lt;p&gt;よって、コンパイル時に評価されない限りにおいて、&lt;code&gt;constexpr&lt;/code&gt;関数内に非リテラル変数、静的変数・スレッドローカル変数およびgoto文とラベルを含むことが許可されることとなった。&lt;/p&gt;
&lt;p&gt;ただし、&lt;code&gt;constexpr&lt;/code&gt;内に存在することが許可されたものの定数式として評価できるわけではないので、これらの機能は依然としてコンパイル時に使用することはできない。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../cpp20/try-catch_blocks_in_constexpr_functions.html&#34;&gt;C++20 - constexpr関数内でのtry-catchブロックを許可&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.html&#34;&gt;C++20 - constexpr関数内で未評価のインラインアセンブリを許可することによる組み込み関数のconstexpr有効化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;permitting_static_constexpr_variables_in_constexpr_functions.html&#34;&gt;C++23 - &lt;code&gt;constexpr&lt;/code&gt;関数内での&lt;code&gt;static constexpr&lt;/code&gt;変数を許可&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2242r3.html&#34; target=&#34;_blank&#34;&gt;P2242R3 - Non-literal variables (and labels and gotos) in constexpr functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数内でのstatic constexpr変数を許可 [P2647R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.md b/lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.md
index d394617d3..696f276a0 100644
--- a/lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.md
+++ b/lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.md
@@ -1,6 +1,14 @@
 # constexpr関数内でのstatic constexpr変数を許可 [P2647R1]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++23からは、`constexpr`関数内で定数を定義するために、`static constexpr`変数を使用できるようになる。
 
@@ -19,8 +27,8 @@ constexpr char xdigit(int n) {
 C++20までは`constexpr`内で`static constexpr`変数を定義できなかったため、関数外での`static constexpr`変数の定義や、`consteval`関数で定数を返すなどの回避策がとられていたが、C++23からはそのような回避策が必要なくなる。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++23 定数式内での非リテラル変数、静的変数・スレッドローカル変数およびgotoとラベルの存在を許可する](/lang/cpp23/non_literal_variables_in_constexpr_functions.md)
 
 ## 参照
-- [P2647R1 Permitting `static constexpr` variables in `constexpr` functions](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2647r1.html)
+- [P2647R1 Permitting `static constexpr` variables in `constexpr` functions](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2647r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コード内容の仮定をコンパイラに伝える`assume`属性 [P1774R8] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/portable_assumptions.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/portable_assumptions.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/portable_assumptions.md b/lang/cpp23/portable_assumptions.md
index 7e7506e4a..32316f200 100644
--- a/lang/cpp23/portable_assumptions.md
+++ b/lang/cpp23/portable_assumptions.md
@@ -1,6 +1,14 @@
 # コード内容の仮定をコンパイラに伝える`assume`属性 [P1774R8]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 あるコード地点において実行時に満たすべき仮定(assumption)を、C++コンパイラへ最適化ヒントとして与える属性である。
 `assume`属性を適切に用いると、C++コンパイラはより高速に動作し、サイズの小さいプログラムを生成する可能性がある。
@@ -56,11 +64,11 @@ int f(int y)
 主要C++コンパイラでは独自拡張として同等機能を提供しており、高パフォーマンスや低レイテンシなアプリ開発向けでは有用であるため、C++標準の属性として採用された。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++20 `[[likely]]`, `[[unlikely]]`属性](/lang/cpp20/likely_and_unlikely_attributes.md)
 
 
 ## 参照
 - [Clang Builtin Functions `__builtin_assume`](https://clang.llvm.org/docs/LanguageExtensions.html)
 - [MSVC Compiler intrinsics `__assume`](https://learn.microsoft.com/en-us/cpp/intrinsics/assume)
-- [P1774R8 Portable assumptions](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1774r8.pdf)
+- [P1774R8 Portable assumptions](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1774r8.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>更新された定義済みマクロ -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/predefined_macros.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/predefined_macros.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;更新された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cplusplus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202302L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++のバージョン値を表す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/n4951.html&#34; target=&#34;_blank&#34;&gt;N4951 Editors’ Report: Programming Languages — C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数が定数実行できない場合でも適格とする [P2448R2] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/relaxing_some_constexpr_restrictions.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/relaxing_some_constexpr_restrictions.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/relaxing_some_constexpr_restrictions.md b/lang/cpp23/relaxing_some_constexpr_restrictions.md
index f187fd29f..c473f793c 100644
--- a/lang/cpp23/relaxing_some_constexpr_restrictions.md
+++ b/lang/cpp23/relaxing_some_constexpr_restrictions.md
@@ -1,6 +1,14 @@
 # constexpr関数が定数実行できない場合でも適格とする [P2448R2]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 いかなる呼び出しにおいても定数式実行できない`constexpr`関数が存在しても、プログラムが不適格にならないようにする。
@@ -105,11 +113,11 @@ void f(std::optional&amp;lt;T&amp;gt;&amp;amp; opt)
 また、陽に`default`指定された関数は、それが`constexpr-suitable`である限り、暗黙に`constexpr`指定される。
 `constexpr-suitable`とは、コルーチン関数ではなく、仮想基底クラスを持つクラスのコンストラクタまたはデストラクタでもない関数を指す。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [C++20 - constexpr関数内でのtry-catchブロックを許可](/lang/cpp20/try-catch_blocks_in_constexpr_functions.md)
 - [C++20 - constexpr関数内で未評価のインラインアセンブリを許可することによる組み込み関数のconstexpr有効化](/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md)
 
 ## 参照
 
-- [P2448R2 - Relaxing some constexpr restrictions](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2448r2.html)
+- [P2448R2 - Relaxing some constexpr restrictions](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2448r2.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>1ワイド文字に収まらないワイド文字リテラルを禁止する [P2362R3] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md b/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md
index 83a1153f7..50fcf7747 100644
--- a/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md
+++ b/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md
@@ -1,6 +1,14 @@
 # 1ワイド文字に収まらないワイド文字リテラルを禁止する [P2362R3]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++23では、ワイド文字リテラルとして、以下を禁止する：
 
@@ -24,4 +32,3 @@ wchar_t c = &amp;#39;é́&amp;#39;;  // C++20:OK, C++23:NG \u0065\u0301
 
 ## 参照
 - [P2362R3 Remove non-encodable wide character literals and multicharacter wide character literals](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2362r3.pdf)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>暗黙的なムーブを簡略化 [P2266R3] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/simpler_implicit_move.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/simpler_implicit_move.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/simpler_implicit_move.md b/lang/cpp23/simpler_implicit_move.md
index 1906cc1c2..2d8fa5284 100644
--- a/lang/cpp23/simpler_implicit_move.md
+++ b/lang/cpp23/simpler_implicit_move.md
@@ -1,6 +1,14 @@
 # 暗黙的なムーブを簡略化 [P2266R3]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++20の暗黙ムーブ仕様においては、暗黙ムーブ可能なもの（関数ローカルのオブジェクト/右辺値参照）が`return`文においてコピーされる場合に、可能ならば暗黙的にムーブして戻り値を構築するものだった。しかし、暗黙ムーブ可能なものを返しており`return`文でコピーが起こらない場合で、暗黙ムーブを行うことが適切な場合がまだ存在していた。
@@ -340,4 +348,4 @@ auto g(Widget&amp;amp;&amp;amp; w) -&amp;gt; Widget&amp;amp;&amp;amp; {
 
 - [P2266R3 Simpler implicit move](https://wg21.link/p2266r3)
 - [The Complete Guide to `return x;` - Arthur O&amp;#39;Dwyer - [CppNow 2021] - YouTube](https://www.youtube.com/watch?v=OGKAJD7bmr8)
-- [c++ - Does c++23 break unmove - Stack Overflow](https://stackoverflow.com/questions/76647046/does-c23-break-unmove)
+- [c++ - Does c++23 break unmove - Stack Overflow](https://stackoverflow.com/questions/76647046/does-c23-break-unmove)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>thisポインタをもつ必要のない演算子をstaticとして宣言できるようにする [P1169R4] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/static_operator.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/static_operator.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/static_operator.md b/lang/cpp23/static_operator.md
index 10a20d927..eb8a2b816 100644
--- a/lang/cpp23/static_operator.md
+++ b/lang/cpp23/static_operator.md
@@ -1,6 +1,14 @@
 # thisポインタをもつ必要のない演算子をstaticとして宣言できるようにする [P1169R4]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 以下の演算子が`this`ポインタを必要としない (状態をもたない) 場合、演算子オーバーロードを`static`として定義できる：
 
@@ -49,11 +57,11 @@ int main()
 状態をもたない関数オブジェクトでは`this`ポインタの受け渡しは必要なく、無駄である。必要ないもののためにコストを支払わないという基本的な思想に反していたため、`this`ポインタの受け渡しをなくせる機能として、`static`指定の許可を導入した。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 ラムダ式](/lang/cpp11/lambda_expressions.md)
 - [`std::function::`推論補助](/reference/functional/function/op_deduction_guide.md)
 
 
 ## 参照
 - [P1169R4 `static operator()`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1169r4.html)
-- [P2589R0 `static operator[]`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2589r0.pdf)
+- [P2589R0 `static operator[]`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2589r0.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>汎用的なソースコードのエンコーディングとしてUTF-8をサポート [P2295R6] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/support_for_utf8_as_a_portable_source_file_encoding.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/support_for_utf8_as_a_portable_source_file_encoding.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;汎用的なソースコードのエンコーディングとしてUTF-8をサポート [P2295R6]&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++20まで、ソースコードの文字集合は実装定義だったが、その仕様では移植性に問題があった。C++23からは、すべてのコンパイラはUTF-8文字コードのソースコードをサポートしなければならないことが規定される。&lt;/p&gt;
&lt;p&gt;コンパイラは、ほかの文字コードと区別するため、入力ファイルがUTF-8であることを決定する実装定義の手段をもたなければならない。つまり、BOM (バイトオーダーマーク) を認識するだけでは十分ではない。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2295r6.pdf&#34; target=&#34;_blank&#34;&gt;P2295R6 Support for UTF-8 as a portable source file encoding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>行末スペースを無視するよう規定 [P2223R2] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/trimming_whitespaces_before_line_splicing.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/trimming_whitespaces_before_line_splicing.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/trimming_whitespaces_before_line_splicing.md b/lang/cpp23/trimming_whitespaces_before_line_splicing.md
index fe51f851a..690e28500 100644
--- a/lang/cpp23/trimming_whitespaces_before_line_splicing.md
+++ b/lang/cpp23/trimming_whitespaces_before_line_splicing.md
@@ -1,6 +1,14 @@
 # 行末スペースを無視するよう規定 [P2223R2]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `\` (バックスラッシュ) 後の行末スペースを無視するよう規定する。
 
@@ -58,4 +66,4 @@ int main() {
 
 
 ## 参照
-- [P2223R2 Trimming whitespaces before line splicing](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2223r2.pdf)
+- [P2223R2 Trimming whitespaces before line splicing](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2223r2.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>参照するPOSIX規格を更新 -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/update_normative_reference_to_posix.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/update_normative_reference_to_posix.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;参照するPOSIX規格を更新&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++20まではPOSIX規格としてISO/IEC 9945:2003 (別名POSIX.1-2001 aka The Single UNIX Specification, version 3) を参照していた。&lt;/p&gt;
&lt;p&gt;しかし、標準C++の一部の機能はより新しいPOSIX規格の機能を使用していたため、ISO/IEC 9945:2003への参照を削除した上で、以下の3つの規格を参照するよう変更する：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ISO/IEC/IEEE 9945:20032009, Information Technology — Portable Operating System Interface (POSIX)&lt;/li&gt;
&lt;li&gt;ISO/IEC/IEEE 9945:2009/Cor 1:2013, Information Technology — Portable Operating System Interface (POSIX), Technical Corrigendum 1&lt;/li&gt;
&lt;li&gt;ISO/IEC/IEEE 9945:2009/Cor 2:2017, Information Technology — Portable Operating System Interface (POSIX), Technical Corrigendum 2&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;posix&lt;/code&gt;名前空間の予約に関してのPOSIX規格の参照もまた、ISO/IEC 9945からISO/IEC/IEEE 9945に変更する。&lt;/p&gt;
&lt;p&gt;また、POSIXの一部環境で非推奨となっている機能である&lt;code&gt;readdir_r()&lt;/code&gt;を参照していたところを、&lt;code&gt;readdir()&lt;/code&gt;に置き換える。&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;ここでは、具体的に問題になった、標準C++が参照するPOSIXの機能を列挙する。&lt;/p&gt;
&lt;h3&gt;errno&lt;/h3&gt;
&lt;p&gt;C++03まで、&lt;code&gt;&lt;a href=&#34;../../reference/cerrno.html&#34;&gt;&amp;lt;cerrno&amp;gt;&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&amp;lt;errno.h&amp;gt;&lt;/code&gt;にはISO Cが要求する&lt;code&gt;EDOM&lt;/code&gt; (定義域エラー)、&lt;code&gt;ERANGE&lt;/code&gt; (値域エラー)、&lt;code&gt;errno&lt;/code&gt;といった必要最低限のマクロのみが含まれていた。&lt;/p&gt;
&lt;p&gt;C++11での&lt;code&gt;&lt;a href=&#34;../../reference/system_error.html&#34;&gt;&amp;lt;system_error&amp;gt;&lt;/a&gt;&lt;/code&gt;ライブラリの導入にともなって、「&lt;code&gt;&lt;a href=&#34;../../reference/cerrno.html&#34;&gt;&amp;lt;cerrno&amp;gt;&lt;/a&gt;&lt;/code&gt;で定義される内容は、&lt;code&gt;errno&lt;/code&gt;がマクロ定義されることを除いてPOSIXの&lt;code&gt;&amp;lt;errno.h&amp;gt;&lt;/code&gt;ヘッダと同じである」という規定となった。この規定のあとにマクロのリストが定義されるが、&lt;code&gt;ENOTRECOVERABLE&lt;/code&gt;と&lt;code&gt;EOWNERDEAD&lt;/code&gt;はPOSIXの2006規格、&lt;code&gt;ENOTSUP&lt;/code&gt;と&lt;code&gt;EOPNOTSUPP&lt;/code&gt;は2008規格で追加されたものだった。&lt;/p&gt;
&lt;p&gt;POSIXの2008年では標準C++で定義されるマクロのほかに&lt;code&gt;EDQUOT&lt;/code&gt;、&lt;code&gt;EMULTIHOP&lt;/code&gt;、&lt;code&gt;ENOLINK&lt;/code&gt;といった具体的な意味をもたない「予約済み」というだけのマクロももっている。すでに定義されている&lt;code&gt;ESTALE&lt;/code&gt;のようにそれらを標準C++に追加することは今後検討する必要はあるが、ここでは提案しない。&lt;/p&gt;
&lt;h3&gt;ファイルシステム&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&#34;../../reference/filesystem/path.html&#34;&gt;path&lt;/a&gt;&lt;/code&gt;クラスについて、POSIX.1-2008の4.12 Pathname ResolutionとPOSIX.1-2017の4.13 Pathname Resolutionを追加で参照する必要がある。&lt;/p&gt;
&lt;p&gt;ここで参照するほとんどの機能はPOSIX.1-2001に存在するが、ファイルの最終更新日時の&lt;code&gt;futimens()&lt;/code&gt;関数、ファイル権限の&lt;code&gt;fchmodat()&lt;/code&gt;関数は存在していない。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;truncate()&lt;/code&gt;と&lt;code&gt;statvfs()&lt;/code&gt;の機能はオプションであり、POSIXに準拠する環境に存在する必要がない。POSIX.1-2008ではこれらの機能がオプションではなくなった。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stat()&lt;/code&gt;で使用される&lt;code&gt;S_ISVTX&lt;/code&gt;マクロはオプション機能であり、XSIの一部である。これはPOSIX.1-2008とPOSIX.1-2017でもオプションのままである。&lt;/p&gt;
&lt;p&gt;POSIX.1-2001のスレッドセーフ関数 (Thread-Safe Functions : TSF) オプションの一部である&lt;code&gt;readdir_r()&lt;/code&gt;を参照する注記もあるが、POSIX.1-2008ではBaseに移動されている。ただし、&lt;code&gt;readdir_r()&lt;/code&gt; APIの実装には欠陥があり、一部の実装では非推奨となっており、将来のバージョンから削除される可能性がある。ここでは&lt;code&gt;readdir_r()&lt;/code&gt;に固有のものに依存してはいないため、&lt;code&gt;readdir()&lt;/code&gt;を参照するよう変更する。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2227r0.html&#34; target=&#34;_blank&#34;&gt;P2227R0 Update normative reference to POSIX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>#warningのサポートを追加 [P2437R1] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/warning.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp23/warning.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/warning.md b/lang/cpp23/warning.md
index 4706b00c5..4fd054a68 100644
--- a/lang/cpp23/warning.md
+++ b/lang/cpp23/warning.md
@@ -1,6 +1,14 @@
 # #warningのサポートを追加 [P2437R1]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++23では、プリプロセッサ命令として、特定のコードに到達した際に警告メッセージを出力する `#warning` をサポートする。
 
@@ -53,4 +61,4 @@ Hello
 
 
 ## 参照
-- [P2437R1 Support for `#warning`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2437r1.pdf)
+- [P2437R1 Support for `#warning`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2437r1.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>static_assertの診断メッセージにユーザーが生成した文字列の指定を許可 [P2741R3] -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/cpp26/user-generated_static_assert_messages.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/cpp26/user-generated_static_assert_messages.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp26/user-generated_static_assert_messages.md b/lang/cpp26/user-generated_static_assert_messages.md
index 06e1dadb8..53a361bbf 100644
--- a/lang/cpp26/user-generated_static_assert_messages.md
+++ b/lang/cpp26/user-generated_static_assert_messages.md
@@ -1,6 +1,14 @@
 # static_assertの診断メッセージにユーザーが生成した文字列の指定を許可 [P2741R3]
 * cpp26[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++26に採用される見込みの言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++26では、[`static_assert`](/lang/cpp11/static_assert.md)に指定する表明失敗時の診断メッセージとして、文字列リテラルだけでなくユーザー定義型の文字列オブジェクトも指定できるようになる。
 
@@ -43,9 +51,9 @@ static_assert(定数式, 診断メッセージ);
     - `&amp;#34;message&amp;#34;`はOK
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 コンパイル時アサート](/lang/cpp11/static_assert.md)
 
 
 ## 参照
-- [P2741R3 user-generated `static_assert` messages](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2741r3.pdf)
+- [P2741R3 user-generated `static_assert` messages](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2741r3.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>契約に基づくプログラミング -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/lang/future/contract-based_programming.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:lang/future/contract-based_programming.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/future/contract-based_programming.md b/lang/future/contract-based_programming.md
index c57629ed6..4d05db8c7 100644
--- a/lang/future/contract-based_programming.md
+++ b/lang/future/contract-based_programming.md
@@ -259,11 +259,11 @@ struct derived : base {
 
 なお、[`assert`マクロ](/reference/cassert/assert.md)は関数形式のマクロなので、`[[assert]]`属性を置換してしまうことはない。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 属性構文](/lang/cpp11/attributes.md)
 - [C++11 コンパイル時アサート](/lang/cpp11/static_assert.md)
 - [`assert`マクロ](/reference/cassert/assert.md)
 
 ## 参照
 - [P0542R5 Support for contract based programming in C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0542r5.html)
-- [ET: Inheritance Inheritance and contracts - Eiffel.org](https://www.eiffel.org/doc/eiffel/ET-_Inheritance#Inheritance_and_contracts)
+- [ET: Inheritance Inheritance and contracts - Eiffel.org](https://www.eiffel.org/doc/eiffel/ET-_Inheritance#Inheritance_and_contracts)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- Merge pull request #1292 from cpprefjp/lang_caution</title>
      <link href="https://cpprefjp.github.io/start_editing/lang_template_page.html"/>
      <id>dcaabbfd4f16107a04600293379ac73b3d20ad5d:start_editing/lang_template_page.md</id>
      <updated>2024-07-08T15:51:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/lang_template_page.md b/start_editing/lang_template_page.md
index e66a017ef..20e089f9f 100644
--- a/start_editing/lang_template_page.md
+++ b/start_editing/lang_template_page.md
@@ -30,6 +30,27 @@
 &amp;lt;!--    `future[meta cpp]` : 将来のC++で検討されている機能 --&amp;gt;
 &amp;lt;!--    `archive[meta cpp]` : 廃案になったが記録として残す価値のあるC++機能 --&amp;gt;
 
+(確定した言語バージョンに対する注意事項は以下)
+
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++XXに採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
+
+(確定前の言語バージョンに対する注意事項は以下)
+
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++26に採用される見込みの言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 (ここには、言語機能の概要を記載します。)
 
@@ -39,6 +60,8 @@
 ## 仕様
 (ここには、言語機能の仕様を記載します。最初のコミットから完璧にする必要はありません。徐々に詳細にしていけばOKです。)
 
+(同じ言語バージョン内で他の仕様更新と変更箇所が衝突する場合があります。その場合は、可能であればそれらの変更を考慮・マージした仕様で記載してください。)
+
 
 ## 例
 ```cpp example
@@ -74,7 +97,7 @@ int main()
 (ここには、その言語機能が実際に採用されるまでに検討された、ほかの設計選択を記述します。どのような選択肢があって今の言語機能となったのかがわかるようにします。)
 
 
-## 関連項目
+## ## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 (ここには、その言語機能と関連のあるcpprefjpサイト内の項目へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>エイリアステンプレート [N2258] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/alias_templates.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/alias_templates.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/alias_templates.md b/lang/cpp11/alias_templates.md
index 53ee5059d..93d3fecd2 100644
--- a/lang/cpp11/alias_templates.md
+++ b/lang/cpp11/alias_templates.md
@@ -1,6 +1,14 @@
 # エイリアステンプレート [N2258]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 「エイリアステンプレート (alias templates)」は、テンプレートによって型の別名を定義する機能である。これによって、パラメータ化した型の別名付けができる。
 
@@ -100,4 +108,3 @@ typedef void_alloc::rebind&amp;lt;int&amp;gt;::other int_alloc;
 - [N1489 Templates aliases for C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1489.pdf)
 - [N2112 Templates Aliases](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2112.pdf)
 - [N2258 Templates Aliases](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2258.pdf)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>alignas [N2341] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/alignas.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/alignas.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/alignas.md b/lang/cpp11/alignas.md
index 3427b7f9d..44ee2cd7a 100644
--- a/lang/cpp11/alignas.md
+++ b/lang/cpp11/alignas.md
@@ -1,6 +1,14 @@
 # alignas [N2341]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `alignas()`は、コンパイラに対し変数をメモリ上の特定の位置に配置（アライメント）するように要求するキーワードである。「アライン アズ (align as)」と読む。
 
@@ -101,11 +109,10 @@ C++03で変数のアライメントを行うにはコンパイラの拡張機能
 N2341 からはわからない、恐らくないと思われる。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 `alignof`](/lang/cpp11/alignof.md)
 - [C++17 アライメント指定されたデータの動的メモリ確保](/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md)
 
 
 ## 参照
 - [N2341 Adding Alignment Support to the C++ Programming Language / Wording](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2341.pdf)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>alignof [N2341] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/alignof.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/alignof.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/alignof.md b/lang/cpp11/alignof.md
index 61d4251e7..533b4fd42 100644
--- a/lang/cpp11/alignof.md
+++ b/lang/cpp11/alignof.md
@@ -1,6 +1,14 @@
 # alignof [N2341]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `alignof()`は、指定した型がメモリ上のどの位置に配置されるか（アライメント）取得する演算子である。「アライン オブ (align of)」と読む。
 
@@ -70,7 +78,7 @@ C++03で型のアライメントサイズを得るにはコンパイラの拡張
 N2341 からはわからない、恐らくないと思われる。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 `alignas`](/lang/cpp11/alignas.md)
 - [`std::max_align_t`](/reference/cstddef/max_align_t.md)
 - [C++17 アライメント指定されたデータの動的メモリ確保](/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md)
@@ -78,4 +86,3 @@ N2341 からはわからない、恐らくないと思われる。
 
 ## 参照
 - [N2341 Adding Alignment Support to the C++ Programming Language / Wording](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2341.pdf)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>属性構文 [N2761] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/attributes.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/attributes.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/attributes.md b/lang/cpp11/attributes.md
index 613da4800..d2a512277 100644
--- a/lang/cpp11/attributes.md
+++ b/lang/cpp11/attributes.md
@@ -1,6 +1,14 @@
 # 属性構文 [N2761]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 属性(attributes)は、ソースコードに対して追加の情報をコンパイラに伝えるための構文である。
 
@@ -152,7 +160,7 @@ C++11で採用されたもの以外で検討された以下の機能は、属性
 - ポインタの所有者(解放する責任を持つユーザー)であることを明示する`owner`属性
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++14 `[[deprecated]]`属性](/lang/cpp14/deprecated_attr.md)
 - [C++17 `[[maybe_unused]]`属性](/lang/cpp17/maybe_unused.md)
 - [C++17 `[[nodiscard]]`属性](/lang/cpp17/nodiscard.md)
@@ -170,4 +178,3 @@ C++11で採用されたもの以外で検討された以下の機能は、属性
 - [N2643 C++ Data-Dependency Ordering: Function Annotation](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2643.html)
 - [N2761 Towards support for attributes in C++ (Revision 6) ](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2761.pdf)
 - [（抄訳）N4215 `memory_order_consume`の利用と実装に向けて［§5-6のみ］](http://d.hatena.ne.jp/yohhoy/20141115/p1)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>auto [N1984] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/auto.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/auto.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/auto.md b/lang/cpp11/auto.md
index d5566c175..714ed57df 100644
--- a/lang/cpp11/auto.md
+++ b/lang/cpp11/auto.md
@@ -1,6 +1,14 @@
 # auto [N1984]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++11 から、変数宣言時に具体的な型名のかわりに `auto` キーワードを指定する事によって、変数の型を初期化子から推論できるようになった。
 
@@ -357,7 +365,7 @@ std::pair&amp;lt;T, U&amp;gt;&amp;amp; p = foo();
 しかし、この使用法も規格から落とされた。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 戻り値の型を後置する関数宣言構文](trailing_return_types.md)
 - [C++11 `decltype`](decltype.md)
 - [C++11 ラムダ式](lambda_expressions.md)
@@ -379,4 +387,4 @@ std::pair&amp;lt;T, U&amp;gt;&amp;amp; p = foo();
 - [N2337 The Syntax of auto Declarations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2337.pdf)
 - [N2546 Removal of auto as a storage-class specifier](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2546.htm)
 - [N2712 Non-static data member initializers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2712.html)
-- [N2713 Allow auto for non-static data members](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2713.html)
+- [N2713 Allow auto for non-static data members](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2713.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C99互換で導入された定義済みマクロ -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/c99_predefined_macros.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/c99_predefined_macros.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C99互換で導入された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++11に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative_page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDC_HOSTED__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実装がホスト実装である場合は&lt;code&gt;1&lt;/code&gt;、そうでない場合（つまり、フリースタンディング実装である場合）は&lt;code&gt;0&lt;/code&gt;として定義される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDC_VERSION__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;標準Cのバージョンを表す値（C95 では &lt;code&gt;199409L&lt;/code&gt;、C99 では &lt;code&gt;199901L&lt;/code&gt;、C11 では &lt;code&gt;201112L&lt;/code&gt;、C90 では定義されていない）。&lt;br /&gt;このマクロが定義されているか否か、および、定義されている場合の値は実装依存である。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDC_ISO_10646__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;wchar_t&lt;/code&gt;の文字が、Unicodeの規格であるISO/IEC 10646の、yyyymm年の仕様を満たしている場合に定義される。&lt;br /&gt;このマクロの値は、&lt;code&gt;yyyymmL&lt;/code&gt;の形式の整数値として定義される。yは年、mは月を表す。yとmそれぞれの個数は、桁数を表す。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;predefined_macros.html&#34;&gt;C++11 更新された定義済みマクロ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1653.htm&#34; target=&#34;_blank&#34;&gt;N1653 Working draft changes for C99 preprocessor synchronization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#630&#34; target=&#34;_blank&#34;&gt;CWG Issue 630. Equality of narrow and wide character values in the basic character set&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>char16_tとchar32_t [N2249] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/char16_32.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/char16_32.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/char16_32.md b/lang/cpp11/char16_32.md
index a12af8688..968c867cf 100644
--- a/lang/cpp11/char16_32.md
+++ b/lang/cpp11/char16_32.md
@@ -1,6 +1,14 @@
 # char16_tとchar32_t [N2249]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `char16_t`はUTF-16符号化形式の文字型、`char32_t`はUTF-32符号化形式の文字型である。
 
@@ -124,7 +132,7 @@ int main()
 この機能が提案された2004年当時にはすでにUCS／Unicodeが広く普及していた。多くのユーザーがその文字コードを扱うことを望んでいたために、標準C++で正式にサポートすることとなった。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`u16string`](/reference/string/basic_string.md)
 - [`u32string`](/reference/string/basic_string.md)
 - [`wstring_convert`](/reference/locale/wstring_convert.md)
@@ -143,4 +151,4 @@ int main()
 - [N2018 New Character Types in C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2018.html)
 - [N2149 New Character Types in C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2149.html)
 - [N2249 New Character Types in C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2249.html)
-- [N2170 Universal Character Names in Literals](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2170.html)
+- [N2170 Universal Character Names in Literals](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2170.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr [N2235] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/constexpr.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/constexpr.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/constexpr.md b/lang/cpp11/constexpr.md
index 44b3a5d47..a4667ade4 100644
--- a/lang/cpp11/constexpr.md
+++ b/lang/cpp11/constexpr.md
@@ -1,6 +1,14 @@
 # constexpr [N2235]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `constexpr`は、汎用的に定数式を表現するための機能である。
 
@@ -191,7 +199,7 @@ GCC 5.2、Clang 3.7、Visual C++ 2015時点で、3つともデフォルトは512
 また、`constexpr`は、値を計算するテンプレートメタプログラムを置き換えて使用できる。テンプレートメタプログラミングでは、非型テンプレートパラメータによって整数型の値をコンパイル時に計算することはできた。しかし、浮動小数点数型の値や、その他多くの値に関する計算が難しく、構文もまた通常の関数とはかけ離れていた(浮動小数点数型の値の計算は、分数形式にすれば、できることはできる)。値をコンパイル時に計算するためには、今後はテンプレートメタプログラミングよりも`constexpr`を積極的に使用していくとよいだろう。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 ユーザー定義リテラル](user_defined_literals.md)
 - [C++14 `constexpr`の制限緩和](/lang/cpp14/relaxing_constraints_on_constexpr.md)
 - [C++17 `constexpr`ラムダ](/lang/cpp17/constexpr_lambda.md)
@@ -219,4 +227,3 @@ GCC 5.2、Clang 3.7、Visual C++ 2015時点で、3つともデフォルトは512
     - リテラル型のメンバ変数のみを持つクラスは、`constexpr`コンストラクタを明示的に定義しなくても、リテラル型となる
 - [CWG Issue 699. Must constexpr member functions be defined in the class member-specification?](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#699)
     - ゼロ割りの扱い、再帰回数の規定
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>decltype [N2343] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/decltype.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/decltype.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/decltype.md b/lang/cpp11/decltype.md
index 88693da6c..3262354b7 100644
--- a/lang/cpp11/decltype.md
+++ b/lang/cpp11/decltype.md
@@ -1,6 +1,14 @@
 # decltype [N2343]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `decltype` は、オペランドで指定した式の型を取得する機能である。  
 型を指定する必要のある個所で `decltype` を使用することによって、具体的な型名を指定する代わりに式から取得した型を指定できるようになった。
@@ -247,7 +255,7 @@ GCC や Clang には `decltype` が導入される前から、同様の機能を
 	`decltype` のオペランドは式のみしか許されていないが、`typeof` は式だけでなく型そのものも許されている。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 戻り値の型を後置する関数宣言構文](trailing_return_types.md)
 - [C++11 `auto`](auto.md)
 - [C++11 ラムダ式](lambda_expressions.md)
@@ -268,4 +276,4 @@ GCC や Clang には `decltype` が導入される前から、同様の機能を
 - [N3233 US22/DE9 Revisited: Decltype and Call Expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3233.html)
 - [N3276 US22/DE9 Revisited: Decltype and Call Expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3276.pdf)
 - [CWG Issue 743. Use of decltype in a nested-name-specifier](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#743)
-- [CWG Issue 950. Use of decltype as a class-name](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#950)
+- [CWG Issue 950. Use of decltype as a class-name](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#950)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>関数のdefault／delete宣言 [N2346] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/defaulted_and_deleted_functions.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/defaulted_and_deleted_functions.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/defaulted_and_deleted_functions.md b/lang/cpp11/defaulted_and_deleted_functions.md
index 5d229bd62..1048d3e4d 100644
--- a/lang/cpp11/defaulted_and_deleted_functions.md
+++ b/lang/cpp11/defaulted_and_deleted_functions.md
@@ -1,6 +1,14 @@
 # 関数のdefault／delete宣言 [N2346]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 クラスを定義した際、以下のメンバ関数が暗黙的に定義される：
 
@@ -123,4 +131,4 @@ int main()
 - [N2210 Defaulted and Deleted Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2210.html)
 - [N2326 Defaulted and Deleted Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2326.html)
 - [N3172 To move or not to move](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3174.pdf)
-- [N2346 Defaulted and Deleted Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2346.htm)
+- [N2346 Defaulted and Deleted Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2346.htm)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>委譲コンストラクタ [N1986] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/delegating_constructors.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/delegating_constructors.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/delegating_constructors.md b/lang/cpp11/delegating_constructors.md
index f65566c9c..8fda468b1 100644
--- a/lang/cpp11/delegating_constructors.md
+++ b/lang/cpp11/delegating_constructors.md
@@ -1,6 +1,14 @@
 # 委譲コンストラクタ [N1986]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 「委譲コンストラクタ (delegating constructors)」は、コンストラクタから、同じクラスの他のコンストラクタに処理を委譲する機能である。
 
@@ -82,4 +90,3 @@ ECMA規格となっているC++/CLIには、この問題を解決するための
 - [N1618 Delegating Constructors (revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1618.pdf)
 - [N1895 Delegating Constructors (revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1895.pdf)
 - [N1986 Delegating Constructors (revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1986.pdf)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>依存名に対するtypenameとtemplateの制限緩和 -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/dependent_name_specifier_outside_of_templates.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/dependent_name_specifier_outside_of_templates.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/dependent_name_specifier_outside_of_templates.md b/lang/cpp11/dependent_name_specifier_outside_of_templates.md
index 87be4bc66..755ea6c63 100644
--- a/lang/cpp11/dependent_name_specifier_outside_of_templates.md
+++ b/lang/cpp11/dependent_name_specifier_outside_of_templates.md
@@ -1,6 +1,14 @@
 # 依存名に対するtypenameとtemplateの制限緩和
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 テンプレート内で、テンプレートパラメータに依存する名前を使用する場合には、`typename`キーワードを先頭に付ける必要がある。
 
@@ -38,4 +46,3 @@ int main()
 ## 参照
 - [CWG Issue 382. Allow `typename` outside of templates](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#382)
 - [CWG Issue 468. Allow `::template` outside of templates](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#468)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>registerキーワードを非推奨化 -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/deprecation_of_the_register_keyword.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/deprecation_of_the_register_keyword.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/deprecation_of_the_register_keyword.md b/lang/cpp11/deprecation_of_the_register_keyword.md
index 21989b3bc..b8d6077be 100644
--- a/lang/cpp11/deprecation_of_the_register_keyword.md
+++ b/lang/cpp11/deprecation_of_the_register_keyword.md
@@ -1,6 +1,14 @@
 # registerキーワードを非推奨化
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `register`キーワードが非推奨化された。
 
@@ -17,11 +25,10 @@ register int v = 42;
 `register`はよく使われる英単語であるため、将来的にこのキーワードをほかの用途に再利用することを目標とする。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [C++17 非推奨だったregisterキーワードを削除](/lang/cpp17/remove_deprecated_use_of_the_register_keyword.md)
 
 
 ## 参照
 - [CWG Issue 809. Deprecation of the `register` keyword](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#809)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>宣言時に要素数を指定した配列オブジェクトの、定義時の要素数を規定 -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/earlier_declarated_array_bounds.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/earlier_declarated_array_bounds.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/earlier_declarated_array_bounds.md b/lang/cpp11/earlier_declarated_array_bounds.md
index 80728dca6..e82c26251 100644
--- a/lang/cpp11/earlier_declarated_array_bounds.md
+++ b/lang/cpp11/earlier_declarated_array_bounds.md
@@ -1,6 +1,14 @@
 # 宣言時に要素数を指定した配列オブジェクトの、定義時の要素数を規定
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `static`メンバや`extern`として宣言した配列を定義した際、宣言時に指定した要素数として定義されることが規定された。
 
@@ -19,4 +27,3 @@ int S::y[]; // 要素数は10
 
 ## 参照
 - [CWG Issue 619. Completeness of array types](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#619)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>明示的な型変換演算子のオーバーロード [N2437] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/explicit_conversion_operator.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/explicit_conversion_operator.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/explicit_conversion_operator.md b/lang/cpp11/explicit_conversion_operator.md
index 52802ad20..b61a80980 100644
--- a/lang/cpp11/explicit_conversion_operator.md
+++ b/lang/cpp11/explicit_conversion_operator.md
@@ -1,6 +1,14 @@
 # 明示的な型変換演算子のオーバーロード [N2437]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 型変換演算子のオーバーロードをする際、`operator`キーワードの前に`explicit`を付加することで、その型変換演算子は明示的な型変換が行われる文脈でのみ呼び出されるようになる：
 
@@ -73,4 +81,4 @@ int main()
 - [N1592 Explicit Conversion Operators](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1592.pdf)
 - [N2223 Explicit Conversion Operator Draft Working Paper](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2223.pdf)
 - [N2333 Explicit Conversion Operator Draft Working Paper Revision 1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2333.html)
-- [N2437 Explicit Conversion Operator Draft Working Paper (revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2437.pdf)
+- [N2437 Explicit Conversion Operator Draft Working Paper (revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2437.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>friend宣言できる対象を拡張 [N1791] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/extend_friend_targets.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/extend_friend_targets.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/extend_friend_targets.md b/lang/cpp11/extend_friend_targets.md
index 75a749232..e2f9cfbb6 100644
--- a/lang/cpp11/extend_friend_targets.md
+++ b/lang/cpp11/extend_friend_targets.md
@@ -1,6 +1,14 @@
 # friend宣言できる対象を拡張 [N1791]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++03までの`friend`宣言は、直接のクラス型のみを指定できた。
 
@@ -53,4 +61,3 @@ int main()
 - [N1616 Extended friend Declarations (Rev. 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1616.pdf)
 - [N1722 Extended friend Declarations (Rev. 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1722.pdf)
 - [N1791 Extended friend Declarations (Rev. 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1791.pdf)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sizeof演算子にクラスの非静的メンバを、オブジェクトを作らずに指定できるようにする -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.md b/lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.md
index 82280554b..8b7b3c6a9 100644
--- a/lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.md
+++ b/lang/cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.md
@@ -1,6 +1,14 @@
 # sizeof演算子にクラスの非静的メンバを、オブジェクトを作らずに指定できるようにする
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 クラスの非静的メンバ変数のサイズを取得したい場合、そのクラスのオブジェクトを生成してから`sizeof`演算子にメンバを指定する必要があった。その制限が外され、クラスと非静的メンバ変数を、スコープ解決演算子 `::` 区切りで`sizeof`演算子に指定できるようになった：
 
@@ -26,4 +34,3 @@ int main()
 - [CWG Issue 613. Unevaluated uses of non-static class members](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#613)
 - [N2150 Extending sizeof to apply to non-static data members without an object](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2150.html)
 - [N2253 Extending sizeof to apply to non-static data members without an object (revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2253.html)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>extern template [N1987] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/extern_template.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/extern_template.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/extern_template.md b/lang/cpp11/extern_template.md
index 2a31d1e8c..615e25638 100644
--- a/lang/cpp11/extern_template.md
+++ b/lang/cpp11/extern_template.md
@@ -1,6 +1,14 @@
 # extern template [N1987]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `extern template`は、指定したテンプレートを、その翻訳単位でインスタンス化しないことを指示するための機能である。
 
@@ -56,4 +64,3 @@ void user2()
 ## 参照
 - [N1448 Controlling Implicit Template Instantiation](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1448.pdf)
 - [N1987 Adding &amp;#34;extern template&amp;#34; (version 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1987.htm)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>機能テストマクロ -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/feature_test_macros.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/feature_test_macros.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;機能テストマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++11に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;SD-6 は C++11 の機能について以下のテストマクロを定義することを推奨している：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_alias_templates&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200704&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;alias_templates.html&#34;&gt;エイリアステンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_attributes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200809&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;attributes.html&#34;&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200704&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;constexpr.html&#34;&gt;constexpr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_decltype&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200707&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;decltype.html&#34;&gt;decltype&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_delegating_constructors&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200604&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;delegating_constructors.html&#34;&gt;委譲コンストラクタ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_inheriting_constructors&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200802&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;inheriting_constructors.html&#34;&gt;継承コンストラクタ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_initializer_lists&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200806&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;initializer_lists.html&#34;&gt;初期化子リスト&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lambdas&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200907&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;lambda_expressions.html&#34;&gt;ラムダ式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_nsdmi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200809&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;non_static_data_member_initializers.html&#34;&gt;非静的メンバ変数初期化子&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_range_based_for&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200907&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;range_based_for.html&#34;&gt;範囲for文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_raw_strings&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200710&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;raw_string_literals.html&#34;&gt;生文字列リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_ref_qualifiers&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200710&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;ref_qualifier_for_this.html&#34;&gt;&lt;code&gt;*this&lt;/code&gt; のムーブセマンティクス&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_rvalue_references&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200610&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;rvalue_ref_and_move_semantics.html&#34;&gt;右辺値参照&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_static_assert&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200410&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;static_assert.html&#34;&gt;コンパイル時アサート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_unicode_characters&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200704&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;char16_32.html&#34;&gt;ユニコード文字&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_unicode_literals&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200710&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;char16_32.html&#34;&gt;ユニコードリテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_user_defined_literals&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200809&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;user_defined_literals.html&#34;&gt;ユーザー定義リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_variadic_templates&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200704&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;variadic_templates.html&#34;&gt;可変引数テンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(carries_dependency)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200809&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;attributes.html#carries_dependency&#34;&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(noreturn)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;200809&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;attributes.html#noreturn&#34;&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations#recs.cpp11&#34; target=&#34;_blank&#34;&gt;SD-6: SG10 Feature Test Recommendations: Standard C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>事前定義識別子__func__ [N1653] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/func.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/func.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/func.md b/lang/cpp11/func.md
index e894f7bef..db9fe7f72 100644
--- a/lang/cpp11/func.md
+++ b/lang/cpp11/func.md
@@ -1,6 +1,14 @@
 # 事前定義識別子\_\_func\_\_ [N1653]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C99互換として、事前定義識別子(predefined identifier)の`__func__`が導入された。
 
@@ -83,4 +91,3 @@ S::print() : print
 - [N1534 Proposed addition of `__func__` predefined identifier from C99](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1534.txt)
 - [5.41 Function Names as Strings - GCC](https://gcc.gnu.org/onlinedocs/gcc-3.3.5/gcc/Function-Names.html)
 - [Predefined macros | Microsoft Docs](https://docs.microsoft.com/ja-JP/cpp/preprocessor/predefined-macros?view=vs-2019)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>入れ子名の指定にグローバルスコープ :: を付加することを許可 -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/global_scope_syntax_in_nested_name_specifier.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/global_scope_syntax_in_nested_name_specifier.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/global_scope_syntax_in_nested_name_specifier.md b/lang/cpp11/global_scope_syntax_in_nested_name_specifier.md
index cb3df12a3..1bce9882b 100644
--- a/lang/cpp11/global_scope_syntax_in_nested_name_specifier.md
+++ b/lang/cpp11/global_scope_syntax_in_nested_name_specifier.md
@@ -1,6 +1,14 @@
 # 入れ子名の指定にグローバルスコープ :: を付加することを許可
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 入れ子名を指定する構文において、先頭にグローバルスコープの指定`::`を付加することが許可された。
 
@@ -37,4 +45,3 @@ nested-name-specifier:
 
 ## 参照
 - [CWG Issue 355. Global-scope `::` in nested-name-specifier](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#355)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>継承コンストラクタ [N2540] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/inheriting_constructors.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/inheriting_constructors.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/inheriting_constructors.md b/lang/cpp11/inheriting_constructors.md
index a84dcc771..df94c217d 100644
--- a/lang/cpp11/inheriting_constructors.md
+++ b/lang/cpp11/inheriting_constructors.md
@@ -1,6 +1,14 @@
 # 継承コンストラクタ [N2540]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 「継承コンストラクタ (inheriting constructors)」は、基底クラスで定義したコンストラクタ群を、派生クラスでそのまま使用できるようにするための糖衣構文である。
 
@@ -95,4 +103,3 @@ struct Derived : Base {
 - [N2438 Inheriting Constructors (revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2438.htm)
 - [N2512 Inheriting Constructors (revision 4)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2512.html)
 - [N2540 Inheriting Constructors (revision 5)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2540.htm)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>初期化子リスト [N2672] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/initializer_lists.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/initializer_lists.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/initializer_lists.md b/lang/cpp11/initializer_lists.md
index 79ca2b4a1..b3adc1a56 100644
--- a/lang/cpp11/initializer_lists.md
+++ b/lang/cpp11/initializer_lists.md
@@ -1,6 +1,14 @@
 # 初期化子リスト [N2672]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 「初期化子リスト (initializer lists)」は、ユーザー定義型のオブジェクトに対して、波カッコによるリスト初期化を使用できるようにするようオーバーロードする機能である。
 
@@ -331,7 +339,7 @@ std::vector&amp;lt;int&amp;gt; v(ar, ar + N);
 この問題を解決するために、波カッコによるリスト初期化をユーザー定義型でオーバーロードする機能が求められ、[`std::initializer_list`](/reference/initializer_list/initializer_list.md)クラスとオーバーロード機能が導入された。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 一様初期化](uniform_initialization.md)
 
 
@@ -350,4 +358,3 @@ std::vector&amp;lt;int&amp;gt; v(ar, ar + N);
 - [N2640 Initializer Lists - Alternative Mechanism and Rationale (v. 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2640.pdf)
 - [N2672 Initializer List proposed wording](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2672.htm)
 - [CWG Issue 1030. Evaluation order in initializer-lists used in aggregate initialization](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1030)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>インライン名前空間 [N2535] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/inline_namespaces.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/inline_namespaces.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/inline_namespaces.md b/lang/cpp11/inline_namespaces.md
index 929243944..4bc0ae4d1 100644
--- a/lang/cpp11/inline_namespaces.md
+++ b/lang/cpp11/inline_namespaces.md
@@ -1,6 +1,14 @@
 # インライン名前空間 [N2535]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 インライン名前空間 (inline namespace)は、名前空間内の機能に透過的にアクセスするための機能である。`inline namespace`によって定義した名前空間の機能には、その名前空間を指定しなくてもアクセスできる。
 
@@ -217,7 +225,7 @@ v2
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - 時間間隔オブジェクトのリテラル
     - [`operator&amp;#34;&amp;#34; ns`](/reference/chrono/duration/op_ns.md)
     - [`operator&amp;#34;&amp;#34; us`](/reference/chrono/duration/op_us.md)
@@ -243,4 +251,3 @@ v2
 - [CWG Issue 812. Duplicate names in inline namespaces](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#812)
 - [CWG Issue 861. Unintended ambiguity in inline namespace lookup](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#861)
 - [Inline namespaces and ambigous declarations - Stackoverflow](http://stackoverflow.com/questions/27252466/inline-namespaces-and-ambigous-declarations/)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式 [N2927] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/lambda_expressions.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/lambda_expressions.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/lambda_expressions.md b/lang/cpp11/lambda_expressions.md
index 38783f542..b5f93a62d 100644
--- a/lang/cpp11/lambda_expressions.md
+++ b/lang/cpp11/lambda_expressions.md
@@ -1,6 +1,14 @@
 # ラムダ式 [N2927]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 「ラムダ式(lambda expressions)」は、簡易的な関数オブジェクトをその場で定義するための機能である。
 
@@ -523,7 +531,7 @@ for_each(array, array + 4, &amp;lt;&amp;amp;&amp;gt;(double d) ( sum += factor ∗ d ));
 なお、C++11時点のラムダ式はテンプレートを扱えないが、これはコンパイラの実装が難しい、という理由での見送りである。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 ローカル型と無名型を、テンプレート引数として使用することを許可](local_and_unnamed_type_as_template_arguments.md)
 - [C++14 ジェネリックラムダ](/lang/cpp14/generic_lambdas.md)
 - [C++14 ラムダ式の初期化キャプチャ](/lang/cpp14/initialize_capture.md)
@@ -554,4 +562,3 @@ for_each(array, array + 4, &amp;lt;&amp;amp;&amp;gt;(double d) ( sum += factor ∗ d ));
 - [N3043 Converting Lambdas to Function Pointers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3043.html)
 - [N3052 Converting Lambdas to Function Pointers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3052.html)
 - [CWG Issue 975. Restrictions on return type deduction for lambdas](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#975)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ローカル型と無名型を、テンプレート引数として使用することを許可 [N2657] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/local_and_unnamed_type_as_template_arguments.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/local_and_unnamed_type_as_template_arguments.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/local_and_unnamed_type_as_template_arguments.md b/lang/cpp11/local_and_unnamed_type_as_template_arguments.md
index 8eeb04d6e..3203e8bcc 100644
--- a/lang/cpp11/local_and_unnamed_type_as_template_arguments.md
+++ b/lang/cpp11/local_and_unnamed_type_as_template_arguments.md
@@ -1,6 +1,14 @@
 # ローカル型と無名型を、テンプレート引数として使用することを許可 [N2657]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 ローカルで定義した型と、名前のない型を、テンプレート引数として渡すことが許可された。
 
@@ -42,4 +50,3 @@ int main()
 - [N2402 Names, Linkage, and Templates (rev 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2402.pdf)
 - [N2635 Local and Unnamed Types as Template Arguments](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2635.html)
 - [N2657 Local and Unnamed Types as Template Arguments](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2657.htm)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>long long型 [N1811] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/long_long_type.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/long_long_type.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/long_long_type.md b/lang/cpp11/long_long_type.md
index cf62830df..cf67cdb50 100644
--- a/lang/cpp11/long_long_type.md
+++ b/lang/cpp11/long_long_type.md
@@ -1,6 +1,14 @@
 # long long型 [N1811]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C99互換として、`long long`整数型が追加された。
 
@@ -51,7 +59,7 @@ int main()
 `long long`のように、`long`を2つ連続させることで「`long`より大きな型」であることを表現するのは非常に醜いものではあるが、C99およびコンパイラの実装による事実上の標準があったために、C++もそれにならった。ただし、これは128ビット整数型に対応する際に`long long long`型を定義することは意味しない。その際は、改めて型の定義を議論する必要があるが、いまは`long long`で64ビット整数型を表現することとした。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`LLONG_MIN`](/reference/climits/llong_min.md)
 - [`LLONG_MAX`](/reference/climits/llong_max.md)
 - [`ULLONG_MAX`](/reference/climits/ullong_max.md)
@@ -68,4 +76,3 @@ int main()
 - [N1565 Adding the `long long` type to C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1565.pdf)
 - [N1735 Adding the `long long` type to C++ (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1735.pdf)
 - [N1811 Adding the `long long` type to C++ (Revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1811.pdf)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>noexcept [N3050] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/noexcept.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/noexcept.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/noexcept.md b/lang/cpp11/noexcept.md
index afef96b59..c035ada19 100644
--- a/lang/cpp11/noexcept.md
+++ b/lang/cpp11/noexcept.md
@@ -1,6 +1,14 @@
 # noexcept [N3050]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++11で導入された`noexcept`キーワードには、以下の2つの意味がある：
 
@@ -165,7 +173,7 @@ int main()
 そういった例外を送出しない判定や指定は、従来の`throw`キーワードによる例外仕様の範囲を超えていた。そのために、`noexcept`という機能が新設され、その機能で必要十分となったために従来の例外仕様は非推奨となった。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [標準ライブラリにおける、関数に`noexcept`を付けない条件](/article/lib/dont_use_noexcept.md)
 - [`move_if_noexcept`](/reference/utility/move_if_noexcept.md)
 - [`is_nothrow_constructible`](/reference/type_traits/is_nothrow_constructible.md)
@@ -189,4 +197,3 @@ int main()
 - [N3205 Delete operators default to `noexcept`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3205.htm)
 - [N3103 Security impact of `noexcept`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3103.pdf)
 - [ムーブによるpop - Faith and Brave - C++で遊ぼう](http://faithandbrave.hateblo.jp/entry/20130604/1370327651)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非静的メンバ変数の初期化 [N2756] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/non_static_data_member_initializers.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/non_static_data_member_initializers.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/non_static_data_member_initializers.md b/lang/cpp11/non_static_data_member_initializers.md
index 6764a34ba..8e4b8cef1 100644
--- a/lang/cpp11/non_static_data_member_initializers.md
+++ b/lang/cpp11/non_static_data_member_initializers.md
@@ -1,6 +1,14 @@
 # 非静的メンバ変数の初期化 [N2756]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 非静的メンバ変数の定義時に、`=`演算子もしくは`{ }`波カッコ初期化子によるコンストラクタ構文で、初期化式を記述できる。
 
@@ -51,7 +59,7 @@ int main()
     ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++14 宣言時のメンバ初期化を持つ型の集成体初期化を許可](/lang/cpp14/member_initializers_and_aggregates.md)
 - [C++17 インライン変数](/lang/cpp17/inline_variables.md)
     - 静的メンバ変数は、インライン変数とすることで定義時に初期化できる
@@ -64,4 +72,3 @@ int main()
 - [N2426 Class member initializers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2426.htm)
 - [N2628 Non-static data member initializers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2628.html)
 - [N2756 Non-static data member initializers](http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2008/n2756.htm)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>nullptr [N2431] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/nullptr.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/nullptr.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/nullptr.md b/lang/cpp11/nullptr.md
index 6fa57226c..4ba227a6d 100644
--- a/lang/cpp11/nullptr.md
+++ b/lang/cpp11/nullptr.md
@@ -1,6 +1,14 @@
 # nullptr [N2431]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `nullptr`は、ヌルポインタ値を表すキーワードである。
 
@@ -115,7 +123,7 @@ private:
 これは言語機能ではなくライブラリで解決する案である。この案の問題としては、`nullptr`オブジェクトを使用する前に、ヘッダをインクルードしなければならない、というものがある。ヌルポインタ値は多くの一般的な状況で必要になるため、ヘッダをインクルードしない選択肢として、キーワードの`nullptr`が採用された。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`NULL`](/reference/cstddef/null.md)
 - [`nullptr_t`](/reference/cstddef/nullptr_t.md)
 
@@ -125,4 +133,3 @@ private:
 - [N1601 A name for the null pointer: `nullptr` (revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1601.pdf)
 - [N2214 A name for the null pointer: `nullptr` (revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2214.pdf)
 - [N2431 A name for the null pointer: `nullptr` (revision 4)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2431.pdf)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>overrideとfinal [N2928] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/override_final.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/override_final.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/override_final.md b/lang/cpp11/override_final.md
index 195924044..154be5582 100644
--- a/lang/cpp11/override_final.md
+++ b/lang/cpp11/override_final.md
@@ -1,6 +1,14 @@
 # overrideとfinal [N2928]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `override`は仮想メンバ関数のオーバーライドを明示的に宣言するキーワードである。
 
@@ -410,7 +418,7 @@ struct D explicit : B
 - 以上の経緯を経てC++11では、`override`と`final`コンテキスト依存キーワードの追加のみが行われた。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`is_final`](/reference/type_traits/is_final.md)
 
 
@@ -424,4 +432,4 @@ struct D explicit : B
 - [N3163 Override Control Using Contextual Keywords](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3163.pdf)
 - [N3206 Override control: Eliminating Attributes](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3206.htm)
 - [N3234 Remove explicit from class-head](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3234.pdf)
-- [N3272 Follow-up on override control](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3272.htm)
+- [N3272 Follow-up on override control](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3272.htm)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Pragma演算子 [N1653] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/pragma_operator.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/pragma_operator.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/pragma_operator.md b/lang/cpp11/pragma_operator.md
index ed565e360..841aaca8d 100644
--- a/lang/cpp11/pragma_operator.md
+++ b/lang/cpp11/pragma_operator.md
@@ -1,6 +1,14 @@
 # Pragma演算子 [N1653]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C99互換として、Pragma演算子が導入された。
 
@@ -66,4 +74,3 @@ int main()
 
 ## 参照
 - [N1653 Working draft changes for C99 preprocessor synchronization](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1653.htm)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>更新された定義済みマクロ -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/predefined_macros.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/predefined_macros.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;更新された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++11に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative_page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cplusplus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201103L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++のバージョン値を表す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以下のマクロが新たに追加された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDCPP_STRICT_POINTER_SAFETY__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実装がポインタの厳密な安全性を持っている場合、整数値&lt;code&gt;1&lt;/code&gt;として定義される&lt;br /&gt;本マクロ定数はC++23で削除される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDCPP_THREADS__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが複数のスレッドを実行できる場合、整数値&lt;code&gt;1&lt;/code&gt;として定義される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDC_MB_MIGHT_NEQ_WC__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;このマクロが整数型の定数&lt;code&gt;1&lt;/code&gt;として定義されている場合、基本文字集合に含まれる文字のリテラルが、&lt;code&gt;char&lt;/code&gt;と&lt;code&gt;wchar_t&lt;/code&gt;で異なる値を持つ可能性がある。&lt;br /&gt;このマクロが定義されない場合には&lt;code&gt;&#39;x&#39; == L&#39;x&#39;&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;であることが保証され、そうでなければされない。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;c99_predefined_macros.html&#34;&gt;C++11 C99互換で導入された定義済みマクロ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2693.html&#34; target=&#34;_blank&#34;&gt;N2693 Requirements on programs and backwards compatibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1169&#34; target=&#34;_blank&#34;&gt;CWG Issue 1169. Missing feature macro for strict pointer safety&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2186r2.html&#34; target=&#34;_blank&#34;&gt;P2186R2 Removing Garbage Collection Support&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++23でのマクロ&lt;code&gt;__STDCPP_STRICT_POINTER_SAFETY__&lt;/code&gt;削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>範囲for文 [N2930] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/range_based_for.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/range_based_for.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/range_based_for.md b/lang/cpp11/range_based_for.md
index 33a5db868..2c8219c03 100644
--- a/lang/cpp11/range_based_for.md
+++ b/lang/cpp11/range_based_for.md
@@ -1,6 +1,14 @@
 # 範囲for文 [N2930]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 範囲for文（The range-based for statement）は配列やコンテナを簡潔に扱うためのfor文の別表現である。
 
@@ -355,7 +363,7 @@ int main()
 
 また、C++23からは`for-range-initializer`の寿命が条件を満たせば延長されるようになったので([C++23 範囲for文が範囲初期化子内で生じた一時オブジェクトを延命することを規定](/lang/cpp23/lifetime_extension_in_range_based_for_loop.md))、この問題を踏みにくくなっている。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [C++17 範囲forの制限緩和 — `begin` と `end` の型が異なることを許可](/lang/cpp17/generalizing_the_range-based_for_loop.md)
 - [C++20 範囲for文がカスタマイゼーションポイントを見つけるルールを緩和](/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md)
@@ -366,4 +374,4 @@ int main()
 - [N2930 Range-Based For Loop Wording (Without Concepts)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2930.html)
 - [N3337 Working Draft, Standard for Programming Language C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf)
 - [一時オブジェクトの寿命と右辺値参照、ムーブセマンティクスのお話 - Qiita](https://qiita.com/rinse_/items/ad0cc7e351e836595c94)
-- [c++ - Safe to erase from map inside range based for? - Stack Overflow](https://stackoverflow.com/questions/25246937/safe-to-erase-from-map-inside-range-based-for)
+- [c++ - Safe to erase from map inside range based for? - Stack Overflow](https://stackoverflow.com/questions/25246937/safe-to-erase-from-map-inside-range-based-for)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>生文字列リテラル [N2442] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/raw_string_literals.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/raw_string_literals.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/raw_string_literals.md b/lang/cpp11/raw_string_literals.md
index a5b59af2f..6fc3b8bdf 100644
--- a/lang/cpp11/raw_string_literals.md
+++ b/lang/cpp11/raw_string_literals.md
@@ -1,6 +1,14 @@
 # 生文字列リテラル [N2442]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `R`プレフィックスを付けた文字列リテラル内の丸カッコ`( )`で囲まれた部分は、エスケープシーケンスが無視される。この機能を「生文字列リテラル (Raw string literals)」という。
 
@@ -266,4 +274,3 @@ Perl、Python、Luaやその他の言語ではこの問題に対応するため
 - [N2384 Raw and Unicode String Literals; Unified Proposal (Rev. 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2384.html)
 - [N2442 Raw and Unicode String Literals; Unified Proposal (Rev. 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2442.htm)
 - [N3077 Alternative approach to Raw String issues](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3077.html)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>テンプレート再帰回数の制限緩和 -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/recursive_template_limit.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/recursive_template_limit.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/recursive_template_limit.md b/lang/cpp11/recursive_template_limit.md
index c54d80ca5..3834d8543 100644
--- a/lang/cpp11/recursive_template_limit.md
+++ b/lang/cpp11/recursive_template_limit.md
@@ -1,6 +1,14 @@
 # テンプレート再帰回数の制限緩和
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++03まで、テンプレートの再帰回数は、「17回以上であることを実装に推奨する」というものであった。
 
@@ -60,4 +68,3 @@ int main()
     - テンプレートの再帰によって、コンパイル時間がどれくらい延びるかのレポートがある記事
 - [C++ Language Features/Controlling implementation limits - Clang Compiler User’s Manual](http://clang.llvm.org/docs/UsersManual.html#cmdoption-ftemplate-depth)
 - [3.5 Options Controlling C++ Dialect - GCC Command Options](https://gcc.gnu.org/onlinedocs/gcc/gcc-command-options/options-controlling-c%2B%2B-dialect.html)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>メンバ関数の左辺値／右辺値修飾 [N2439] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/ref_qualifier_for_this.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/ref_qualifier_for_this.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/ref_qualifier_for_this.md b/lang/cpp11/ref_qualifier_for_this.md
index 1d206e5e8..9a5ea2521 100644
--- a/lang/cpp11/ref_qualifier_for_this.md
+++ b/lang/cpp11/ref_qualifier_for_this.md
@@ -1,6 +1,14 @@
 # メンバ関数の左辺値／右辺値修飾 [N2439]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 メンバ関数の`CV`修飾は、`*this`が`const`／`volatile`である場合とそうでない場合でメンバ関数をオーバーロードできる。
 
@@ -103,7 +111,7 @@ int main()
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++20 `const`修飾されたメンバポインタの制限を修正](/lang/cpp20/fixing_const_qualified_pointers_to_members.md)
 
 
@@ -112,4 +120,3 @@ int main()
 - [N1821 Extending Move Semantics To `*this` (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1821.htm)
 - [N2377 Extending move semantics to `*this` (revised wording)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2377.htm)
 - [N2439 Extending move semantics to `*this` (revised wording)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2439.htm)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>参照への参照を折りたたむ -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/reference_collapsing.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/reference_collapsing.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/reference_collapsing.md b/lang/cpp11/reference_collapsing.md
index 89a56e73a..6fc14ffe8 100644
--- a/lang/cpp11/reference_collapsing.md
+++ b/lang/cpp11/reference_collapsing.md
@@ -1,6 +1,14 @@
 # 参照への参照を折りたたむ
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++03までは、`T&amp;amp;`型に左辺値参照を足すと、「参照への参照 (reference to reference)」となってしまいコンパイルエラーとなっていた。
 
@@ -45,4 +53,4 @@ int main()
 
 
 ## 参照
-- [CWG Issue 988. Reference-to-reference collapsing with decltype](https://wg21.cmeerw.net/cwg/issue988)
+- [CWG Issue 988. Reference-to-reference collapsing with decltype](https://wg21.cmeerw.net/cwg/issue988)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>テンプレートのエクスポート機能を削除 -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/remove_export_templates.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/remove_export_templates.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/remove_export_templates.md b/lang/cpp11/remove_export_templates.md
index b77cc7a2c..30b93e30c 100644
--- a/lang/cpp11/remove_export_templates.md
+++ b/lang/cpp11/remove_export_templates.md
@@ -1,6 +1,14 @@
 # テンプレートのエクスポート機能を削除
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++11では、テンプレート定義をエクスポートする機能を削除する。
 
@@ -33,4 +41,3 @@ EDGフロントエンドとそれを使用するコンパイラのComeauとICC
 - [CWG Issue 820. Deprecation of export](https://wg21.cmeerw.net/cwg/issue820)
 - [Using export keyword with templates - StackOverflow](http://stackoverflow.com/questions/5416872/using-export-keyword-with-templates)
 - [N1426 Why We Can&amp;#39;t Afford Export](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1426.pdf)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>POSIX用の名前空間を予約 -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/reserved_namespaces_for_posix.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/reserved_namespaces_for_posix.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;POSIX用の名前空間を予約&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++11に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;将来の標準化のために、POSIX用の名前空間として&lt;code&gt;std::posix&lt;/code&gt;と&lt;code&gt;::posix&lt;/code&gt;を予約する。&lt;/p&gt;
&lt;p&gt;これらの名前空間に宣言や定義を追加した場合、そのプログラムの動作は未定義となる。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2542.htm&#34; target=&#34;_blank&#34;&gt;N2542 Reserved namespaces for POSIX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>整数に対する除算と剰余算の丸め結果を規定 -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/result_of_integer_division_and_modulo.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/result_of_integer_division_and_modulo.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/result_of_integer_division_and_modulo.md b/lang/cpp11/result_of_integer_division_and_modulo.md
index d48980cc8..82d8388aa 100644
--- a/lang/cpp11/result_of_integer_division_and_modulo.md
+++ b/lang/cpp11/result_of_integer_division_and_modulo.md
@@ -1,6 +1,14 @@
 # 整数に対する除算と剰余算の丸め結果を規定
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 整数`a`, `b`に対する除算`a/b`の結果(商)と剰余算`a%b`の結果(余り)について`(a/b)*b + a%b = a`という等式が成り立つことが規定されているが、C++03まで、少なくとも一方が負の数である場合の余りの符号は実装定義だった。このため先述の等式により商も実装定義となっていた。C++11ではC99に合わせて「商の小数部がゼロ方向に切り捨てられた結果となること」が規定された。
 
@@ -40,4 +48,3 @@ int main()
 - [N2730 Expedited core issues handling (revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2730.html)
 - [N2757 Expedited core issues handling (revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2757.htm)
 - [C++ における整数型の怪と &amp;#34;移植性のある&amp;#34; オーバーフローチェッカー (第1回 : 整数型の怪と対策の不足)](http://qiita.com/a4lg/items/541c9d9dd5d874eeef2f)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>テンプレートの右山カッコ [N1757] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/right_angle_brackets.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/right_angle_brackets.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/right_angle_brackets.md b/lang/cpp11/right_angle_brackets.md
index 51ce4ae73..3af3608e6 100644
--- a/lang/cpp11/right_angle_brackets.md
+++ b/lang/cpp11/right_angle_brackets.md
@@ -1,6 +1,14 @@
 # テンプレートの右山カッコ [N1757]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++03では、2つ以上連続する右山カッコが出現する場合には、間にスペースを入力する必要があった：
 
@@ -100,4 +108,3 @@ C++11で採択された方式は、テンプレートの型パラメータと非
 - [N1649 Right Angle Brackets](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1649.html)
 - [N1699 Right Angle Brackets (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1699.html)
 - [N1757 Right Angle Brackets (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1757.html)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>右辺値参照・ムーブセマンティクス [N2118] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/rvalue_ref_and_move_semantics.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/rvalue_ref_and_move_semantics.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/rvalue_ref_and_move_semantics.md b/lang/cpp11/rvalue_ref_and_move_semantics.md
index 4a59d7ee4..cb2b68cab 100644
--- a/lang/cpp11/rvalue_ref_and_move_semantics.md
+++ b/lang/cpp11/rvalue_ref_and_move_semantics.md
@@ -1,6 +1,14 @@
 # 右辺値参照・ムーブセマンティクス [N2118]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 ムーブセマンティクスはコピーコストの削減を主な目的としており、また所有権の移動を実現する。  
 右辺値参照はムーブ元のオブジェクト（右辺値）を束縛するための言語機能である。
@@ -374,7 +382,7 @@ C++11で非推奨となった`std::auto_ptr`で実現されていた。
 
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`move`](/reference/utility/move.md)
 - [`forward`](/reference/utility/forward.md)
 - [`move_if_noexcept`](/reference/utility/move_if_noexcept.md)
@@ -402,4 +410,4 @@ C++11で非推奨となった`std::auto_ptr`で実現されていた。
 - [N2983 Allowing Move Constructors to Throw](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2983.html)
     - ムーブコンストラクタから例外を送出することを許可した経緯
 - [P0135R0 Wording for guaranteed copy elision through simplified value categories](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0135r1.html)
-    - C++17 値カテゴリの定義
+    - C++17 値カテゴリの定義
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スコープを持つ列挙型 [N2347] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/scoped_enum.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/scoped_enum.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/scoped_enum.md b/lang/cpp11/scoped_enum.md
index 8c214254f..bc506220e 100644
--- a/lang/cpp11/scoped_enum.md
+++ b/lang/cpp11/scoped_enum.md
@@ -1,6 +1,14 @@
 # スコープを持つ列挙型 [N2347]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `enum class`で定義した列挙型は、従来の`enum`に加えて、「整数型への暗黙の型変換を行わない」「列挙型のスコープを持つ」という機能を持つ。
 
@@ -90,7 +98,7 @@ C++03は、C99の列挙型に対する改善は提供していたが、依然と
 ECMA規格になっているC++/CLIが、現在のスコープを持つ列挙型と等価の機能を持っていたために、その経験を標準C++に取り入れることとなった。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`underlying_type`](/reference/type_traits/underlying_type.md)
 
 
@@ -101,4 +109,3 @@ ECMA規格になっているC++/CLIが、現在のスコープを持つ列挙型
 - [N2213 Strongly Typed Enums (revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2213.pdf)
 - [N2347 Strongly Typed Enums (revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2347.pdf)
 - [N2499 Forward declaration of enumerations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2499.pdf)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>任意の式によるSFINAE [N2634] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/sfinae_expressions.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/sfinae_expressions.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/sfinae_expressions.md b/lang/cpp11/sfinae_expressions.md
index c87e8a5f9..e5aad73b1 100644
--- a/lang/cpp11/sfinae_expressions.md
+++ b/lang/cpp11/sfinae_expressions.md
@@ -1,6 +1,14 @@
 # 任意の式によるSFINAE [N2634]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 「SFINAE (Substitution Failure Is Not An Errorの略称、スフィネェと読む)」は、テンプレートの置き換えに失敗した際に、即時にコンパイルエラーとはせず、置き換えに失敗した関数をオーバーロード解決の候補から除外するという言語機能である。
 
@@ -268,7 +276,7 @@ int main()
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`&amp;lt;type_traits&amp;gt;`](/reference/type_traits.md)
 - [`declval`](/reference/utility/declval.md)
 - [`enable_if`](/reference/type_traits/enable_if.md)
@@ -277,4 +285,3 @@ int main()
 ## 参照
 - [CWG Issue 339. Overload resolution in operand of `sizeof` in constant expression](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#339)
 - [N2634 Solving the SFINAE problem for expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2634.html)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンパイル時アサート [N1720] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/static_assert.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/static_assert.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/static_assert.md b/lang/cpp11/static_assert.md
index a7de6eaec..3257a8f39 100644
--- a/lang/cpp11/static_assert.md
+++ b/lang/cpp11/static_assert.md
@@ -1,6 +1,14 @@
 # コンパイル時アサート [N1720]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `static_assert`宣言は、指定した定数式が真であることを表明するための機能である。
 
@@ -78,7 +86,7 @@ Boost Static Assertion Libraryが開発されたときに、コンパイル時
 コンパイル時アサートのために`BOOST_STATIC_ASSERT`や`STATIC_CHECK`のようなマクロを使用することは、名前空間を汚染する問題があるが、コア言語にその機能を追加することでその問題は解消される。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 `static_assert`のメッセージ省略を許可](/lang/cpp17/extending_static_assert.md)
 - [C++17 constexpr if 文](/lang/cpp17/if_constexpr.md)
 - [C++23 定数式の文脈での`bool`への縮小変換を許可](/lang/cpp23/narrowing_contextual_conversions_to_bool.md)
@@ -91,4 +99,4 @@ Boost Static Assertion Libraryが開発されたときに、コンパイル時
 - [N1617 Proposal to Add Static Assertions to the Core Language (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1617.html)
 - [N1720 Proposal to Add Static Assertions to the Core Language (Revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1720.html)
 - [P2593R1: Allowing static_assert(false)](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2593r1.html)
-- [Issue 2518: Conformance requirements and #error/#warning - WG21 CWG Issues](https://wg21.cmeerw.net/cwg/issue2518)
+- [Issue 2518: Conformance requirements and #error/#warning - WG21 CWG Issues](https://wg21.cmeerw.net/cwg/issue2518)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ブロックスコープを持つstatic変数初期化のスレッドセーフ化 [N2660] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/static_initialization_thread_safely.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/static_initialization_thread_safely.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/static_initialization_thread_safely.md b/lang/cpp11/static_initialization_thread_safely.md
index c1a11b39a..c5c4af868 100644
--- a/lang/cpp11/static_initialization_thread_safely.md
+++ b/lang/cpp11/static_initialization_thread_safely.md
@@ -1,6 +1,14 @@
 # ブロックスコープを持つstatic変数初期化のスレッドセーフ化 [N2660]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 ブロックスコープを持つ`static`変数の初期化は、スレッドセーフであることが規定された。
 
@@ -97,4 +105,3 @@ int main()
 - [N2513 Dynamic Initialization and Destruction with Concurrency](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2513.html)
 - [N2660 Dynamic Initialization and Destruction with Concurrency](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2660.htm)
 - [C++0x時代の Double-Checked Locking - yamasaのネタ帳](http://yamasa.hatenablog.jp/entry/20100128/1264693781)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>文字列リテラルとワイド文字列リテラルの結合 -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/string_literal_concatenation.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/string_literal_concatenation.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/string_literal_concatenation.md b/lang/cpp11/string_literal_concatenation.md
index c314155ad..3329ed51a 100644
--- a/lang/cpp11/string_literal_concatenation.md
+++ b/lang/cpp11/string_literal_concatenation.md
@@ -1,6 +1,14 @@
 # 文字列リテラルとワイド文字列リテラルの結合
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C99互換として、文字列リテラルとワイド文字列リテラルが並んでいたとき、ワイド文字列リテラルとして結合することが規定された。
 
@@ -33,4 +41,3 @@ hello world
 ## 参照
 - [N1653 Working draft changes for C99 preprocessor synchronization](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1653.htm)
 - [WG14/N951 String literals and concatenation](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n951.htm)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スレッドローカルストレージ [N2659] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/thread_local_storage.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/thread_local_storage.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/thread_local_storage.md b/lang/cpp11/thread_local_storage.md
index 66df73293..bfaa7f0db 100644
--- a/lang/cpp11/thread_local_storage.md
+++ b/lang/cpp11/thread_local_storage.md
@@ -1,6 +1,14 @@
 # スレッドローカルストレージ [N2659]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 変数宣言の際に、記憶域として`thread_local`キーワードを指定することで、スレッドごとの静的記憶域に変数が保持される。
 
@@ -100,7 +108,7 @@ thread2 : 4
 各ベンダーのこれらの経験を標準C++に導入することとなった。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`exit`](/reference/cstdlib/exit.md)
 - [`quick_exit`](/reference/cstdlib/quick_exit.md)
 - [`_at_thread_exit`系の関数が存在している理由](/article/lib/at_thread_exit.md)
@@ -115,4 +123,3 @@ thread2 : 4
 - [N2659 Thread-Local Storage](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2659.htm)
 - [Why does Apple clang disallow C++11 `thread_local` when &amp;#39;official&amp;#39; clang supports it - Stack Overflow](http://stackoverflow.com/a/29929949/463412)
     - Apple実装のClang（Xcode 7以下に付属のもの）が`thread_local`機能をサポートしない理由
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>列挙子の末尾へのカンマ付加を許可 -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/trailing_comma_following_enumerator_list.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/trailing_comma_following_enumerator_list.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/trailing_comma_following_enumerator_list.md b/lang/cpp11/trailing_comma_following_enumerator_list.md
index 93558afd5..5e81e5ead 100644
--- a/lang/cpp11/trailing_comma_following_enumerator_list.md
+++ b/lang/cpp11/trailing_comma_following_enumerator_list.md
@@ -1,6 +1,14 @@
 # 列挙子の末尾へのカンマ付加を許可
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C99互換として、末尾の列挙子の後ろにカンマを書くことが許可された。
 
@@ -41,4 +49,3 @@ int main() {}
 
 ## 参照
 - [CWG Issue 518. Trailing comma following enumerator-list](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#518)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>戻り値の型を後置する関数宣言構文 [N2541] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/trailing_return_types.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/trailing_return_types.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/trailing_return_types.md b/lang/cpp11/trailing_return_types.md
index efee5fa5a..15000efa5 100644
--- a/lang/cpp11/trailing_return_types.md
+++ b/lang/cpp11/trailing_return_types.md
@@ -1,6 +1,14 @@
 # 戻り値の型を後置する関数宣言構文 [N2541]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 従来の関数宣言構文では、戻り値の型は先頭に記述していた。
 
@@ -100,7 +108,7 @@ auto f = [](int a, int b) -&amp;gt; int { return a + b; }
 しかし、この構文は採用されなかった。ラムダ導入子は関数宣言構文にとってはただのマーキングであり機能を持たないが、`auto`の場合はプレースホルダーであるために、将来的にそれを`auto*`、`auto&amp;amp;`のように、置き換えられる戻り値の型をさらに修飾できるようにするためである。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++14 通常関数の戻り値型推論](/lang/cpp14/return_type_deduction_for_normal_functions.md)
 
 
@@ -113,4 +121,3 @@ auto f = [](int a, int b) -&amp;gt; int { return a + b; }
     - ラムダ式の仕様と合わせて「trailing-return-type」という言葉が使われるようになった
 - [N2931 Unified Function Syntax](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2931.html)
 - [N2954 Unified Function Syntax](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2954.html)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>一様初期化 [N2672] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/uniform_initialization.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/uniform_initialization.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/uniform_initialization.md b/lang/cpp11/uniform_initialization.md
index 5475183cf..71d8d3190 100644
--- a/lang/cpp11/uniform_initialization.md
+++ b/lang/cpp11/uniform_initialization.md
@@ -1,6 +1,14 @@
 # 一様初期化 [N2672]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 「一様初期化 (uniform initialization)」は、コンストラクタの呼び出しを、リスト初期化と合わせて波カッコ `{ }`で記述する構文である。
 
@@ -189,7 +197,7 @@ int main()
     ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 初期化子リスト](initializer_lists.md)
 
 
@@ -200,4 +208,3 @@ int main()
 - [N2640 Initializer Lists - Alternative Mechanism and Rationale (v. 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2640.pdf)
 - [N2672 Initializer List proposed wording](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2672.htm)
 - [CWG Issue 1030. Evaluation order in initializer-lists used in aggregate initialization](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1030)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>共用体の制限解除 [N2544] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/unrestricted_unions.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/unrestricted_unions.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/unrestricted_unions.md b/lang/cpp11/unrestricted_unions.md
index afc3fa54a..507598121 100644
--- a/lang/cpp11/unrestricted_unions.md
+++ b/lang/cpp11/unrestricted_unions.md
@@ -1,6 +1,14 @@
 # 共用体の制限解除 [N2544]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 共用体のメンバ変数として、クラスオブジェクトを保持できるようになった：
 
@@ -67,4 +75,3 @@ hello
 - [N2430 Unrestricted Unions (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2430.pdf)
 - [N2544 Unrestricted Unions (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2544.pdf)
 - [Boost Variant Library](http://www.boost.org/libs/variant)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ユーザー定義リテラル [N2765] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/user_defined_literals.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/user_defined_literals.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/user_defined_literals.md b/lang/cpp11/user_defined_literals.md
index 7d1c89ca1..f7bf4a324 100644
--- a/lang/cpp11/user_defined_literals.md
+++ b/lang/cpp11/user_defined_literals.md
@@ -1,6 +1,14 @@
 # ユーザー定義リテラル [N2765]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 ユーザー定義リテラル(User-defined literals)は、`123`、`3.14`、`&amp;#34;hello&amp;#34;`といったリテラルに対して付けられるサフィックスをオーバーロードできるようにすることで、ユーザーがリテラルに意味を持たせられるようにする機能である。
 
@@ -356,7 +364,7 @@ DecimalFloat f = 12.34df;
 リテラル名がサフィックスであることを明示的にするために、今日の`DecimalFloat operator&amp;#34;&amp;#34; df(long double)`という形式になった。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++14 リテラル演算子のスペースを省略可能とする](/lang/cpp14/no_whitespace_literal_operators.md)
 - [`std::basic_string`の文字列リテラル`s`](/reference/string/basic_string/op_s.md)
 - [`std::complex&amp;lt;float&amp;gt;`の浮動小数点数リテラル`if`](/reference/complex/complex/op_if.md)
@@ -379,4 +387,3 @@ DecimalFloat f = 12.34df;
 - [N2765 User-defined Literals (aka. Extensible Literals (revision 5))](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2765.pdf)
 - [CWG Issue 935. Missing overloads for character types for user-defined literals](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#935)
 - [CWG Issue 1479. Literal operators and default arguments](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1479)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>UTF-8文字列リテラル [N2442] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/utf8_string_literals.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/utf8_string_literals.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/utf8_string_literals.md b/lang/cpp11/utf8_string_literals.md
index a1f8bd9d3..076b4d9e0 100644
--- a/lang/cpp11/utf8_string_literals.md
+++ b/lang/cpp11/utf8_string_literals.md
@@ -1,6 +1,14 @@
 # UTF-8文字列リテラル [N2442]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `char`の文字列リテラルに`u8`プレフィックスを付けることで、その文字列リテラルはUCS/Unicode文字コードのUTF-8符号化形式にエンコードされる。
 
@@ -62,7 +70,7 @@ int main()
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 `char16_t`と`char32_t`](char16_32.md)
 - [C++17 UTF-8文字リテラル](/lang/cpp17/utf8_character_literals.md)
 - [C++20 UTF-8エンコーディングされた文字の型として`char8_t`を追加](/lang/cpp20/char8_t.md)
@@ -76,4 +84,3 @@ int main()
 - [N2295 Raw and Unicode String Literals; Unified Proposal](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2295.html)
 - [N2384 Raw and Unicode String Literals; Unified Proposal (Rev. 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2384.html)
 - [N2442 Raw and Unicode String Literals; Unified Proposal (Rev. 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2442.htm)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変引数マクロ [N1653] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/variadic_macros.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/variadic_macros.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/variadic_macros.md b/lang/cpp11/variadic_macros.md
index afa3077f5..28027f2c2 100644
--- a/lang/cpp11/variadic_macros.md
+++ b/lang/cpp11/variadic_macros.md
@@ -1,6 +1,14 @@
 # 可変引数マクロ [N1653]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C99互換として、可変引数マクロ(variadic macros)が導入された。
 
@@ -69,11 +77,10 @@ f2
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 可変引数テンプレート](variadic_templates.md)
 - [C++20 可変引数が空でない場合のトークン置換](/lang/cpp20/va_opt.md)
 
 
 ## 参照
 - [N1653 Working draft changes for C99 preprocessor synchronization](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1653.htm)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変引数テンプレート [N2242] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/variadic_templates.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp11/variadic_templates.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/variadic_templates.md b/lang/cpp11/variadic_templates.md
index fdbabf6b1..0f44f02a0 100644
--- a/lang/cpp11/variadic_templates.md
+++ b/lang/cpp11/variadic_templates.md
@@ -1,6 +1,14 @@
 # 可変引数テンプレート [N2242]
 * cpp11[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++11に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 「可変引数テンプレート (variadic templates)」は、任意の型とそのオブジェクトを任意の数だけ受け取る機能である。これによって、「最大でN個のパラメータを受け取る関数テンプレートやクラステンプレート」を実装する際に、N個のオーバーロードをユーザーが用意する必要なく、ひとつの実装だけで済むようになる。
 
@@ -378,7 +386,7 @@ void f(const T1&amp;amp; t1, const T2&amp;amp; t2, const T3&amp;amp; t3);
 この問題を解決するために、任意の数だけ任意の型のパラメータを受け取る機能が必要とされ、可変引数テンプレートが導入された。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 可変引数マクロ](variadic_macros.md)
 - [C++17 畳み込み式](/lang/cpp17/folding_expressions.md)
 - [C++26 パラメータパックへのインデックスアクセスを許可](/lang/cpp26/pack_indexing.md.nolink)
@@ -394,4 +402,3 @@ void f(const T1&amp;amp; t1, const T2&amp;amp; t2, const T3&amp;amp; t3);
 - [N2242 Proposed Wording for Variadic Templates (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2242.pdf)
 - [N2488 Extending Variadic Template Template Parameters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2488.pdf)
 - [N2555 Extending Variadic Template Template Parameters (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2555.pdf)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>2進数リテラル [N3472] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/binary_literals.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp14/binary_literals.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/binary_literals.md b/lang/cpp14/binary_literals.md
index b0860f37f..1eb8531ae 100644
--- a/lang/cpp14/binary_literals.md
+++ b/lang/cpp14/binary_literals.md
@@ -1,6 +1,14 @@
 # 2進数リテラル [N3472]
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 整数リテラルのプレフィックスとして`0b`もしくは`0B`を付けることで、2進数を表す値を記述できる。
 
@@ -55,11 +63,10 @@ int main()
 こういった経緯から、C++標準で2進数リテラルをサポートすることとなった。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++14 数値リテラルの桁区切り文字](digit_separators.md)
 - [`bitset`](/reference/bitset/bitset.md)
 
 
 ## 参照
 - [N3472 - Binary Literals in the C++ Core Language](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3472.pdf)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ネストする集成体初期化における波カッコ省略を許可 [N3653] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/brace_elision_in_array_temporary_initialization.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp14/brace_elision_in_array_temporary_initialization.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/brace_elision_in_array_temporary_initialization.md b/lang/cpp14/brace_elision_in_array_temporary_initialization.md
index 41e8c3655..933d86d42 100644
--- a/lang/cpp14/brace_elision_in_array_temporary_initialization.md
+++ b/lang/cpp14/brace_elision_in_array_temporary_initialization.md
@@ -1,6 +1,14 @@
 # ネストする集成体初期化における波カッコ省略を許可 [N3653]
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++11では、集成体初期化とリスト初期化の両方を含む場合、二重に波カッコを書くことが必須となっていた。そのため、`public`メンバ変数として組み込み配列を持つ[`std::array`](/reference/array/array.md)クラスのオブジェクトを初期化する場合、以下のように、不要とも思える二重の波カッコを書かなければならなかった：
 
@@ -35,4 +43,3 @@ int x[2][2] = {1, 2, 3, 4};
 - [vector/arrayとUniform initialization+Initializer list - yohhoyの日記](http://d.hatena.ne.jp/yohhoy/20120724/p1)
 - [initializer-listによるaggregate初期化の制約緩和 - yohhoyの日記](http://d.hatena.ne.jp/yohhoy/20131116/p1)
 - [N3653 - Member initializers and aggregates](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3653.html)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>動的メモリ確保の省略の許可 -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/clarifying_memory_allocation.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp14/clarifying_memory_allocation.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/clarifying_memory_allocation.md b/lang/cpp14/clarifying_memory_allocation.md
index 80c321ce0..8008b72c0 100644
--- a/lang/cpp14/clarifying_memory_allocation.md
+++ b/lang/cpp14/clarifying_memory_allocation.md
@@ -1,6 +1,14 @@
 # 動的メモリ確保の省略の許可
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 以前の仕様では、`new`式による動的メモリ確保はコードに書かれた通りに実行されなければならず、ひとまとめにしたり省略したりすることはできなかった。
@@ -149,7 +157,7 @@ C++11時点で既に、そのような最適化を行うメモリアロケータ
 
 それによって、ミクロな範囲での`new/delete`式の省略が許可され、マクロな範囲の様々な情報を考慮してそれを行う事が可能となった。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [C++20 可変サイズをもつコンテナの`constexpr`化](/lang/cpp20/more_constexpr_containers.md)
 
@@ -157,4 +165,4 @@ C++11時点で既に、そのような最適化を行うメモリアロケータ
 ## 参照
 
 - [N3664 Clarifying Memory Allocation](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3664.html)
-- [C++14言語編 - slideshare](https://www.slideshare.net/kariya_mitsuru/c14-84084931)
+- [C++14言語編 - slideshare](https://www.slideshare.net/kariya_mitsuru/c14-84084931)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>decltype(auto) -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/decltype_auto.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp14/decltype_auto.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/decltype_auto.md b/lang/cpp14/decltype_auto.md
index 9ef4f775a..40ce597d1 100644
--- a/lang/cpp14/decltype_auto.md
+++ b/lang/cpp14/decltype_auto.md
@@ -1,6 +1,14 @@
 # decltype(auto)
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `decltype(auto)`は、`decltype`に与える式を右辺の式で置き換えて型推論する機能である。
 
@@ -64,6 +72,5 @@ int main()
 `decltype(auto)`は、C++14で導入された「[通常関数の戻り値型推論](return_type_deduction_for_normal_functions.md)」の機能で、参照の変数を参照のまま`return`文で返せるようにするために導入された。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++14 通常関数の戻り値型推論](return_type_deduction_for_normal_functions.md)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[deprecated]]属性 [N3760] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/deprecated_attr.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp14/deprecated_attr.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/deprecated_attr.md b/lang/cpp14/deprecated_attr.md
index 3491ccfb9..4322cce79 100644
--- a/lang/cpp14/deprecated_attr.md
+++ b/lang/cpp14/deprecated_attr.md
@@ -1,6 +1,14 @@
 # [[deprecated]]属性 [N3760]
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `[[deprecated]]`は、対象となる機能が非推奨であることを示す属性である。
 
@@ -121,7 +129,7 @@ prog.cc:45:3: warning: &amp;#39;class_templ&amp;lt;int&amp;gt;&amp;#39; is deprecated: don&amp;#39;t use class_templ&amp;lt;i
 これらの機能が使われてきた経験から、この属性・アノテーションは、ユーザーにとって役立つものであることが判明していた。そのため、この機能をC++標準の属性構文でサポートすることとなった。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 属性構文](/lang/cpp11/attributes.md)
 - [C++23 ラムダ式に対する属性](/lang/cpp23/attributes_on_lambda_expressions.md)
 
@@ -129,4 +137,3 @@ prog.cc:45:3: warning: &amp;#39;class_templ&amp;lt;int&amp;gt;&amp;#39; is deprecated: don&amp;#39;t use class_templ&amp;lt;i
 ## 参照
 - [N3394 `[[deprecated]]` attribute](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3394.html)
 - [N3760 `[[deprecated]]` attribute](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3760.html)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>数値リテラルの桁区切り文字 [N3781] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/digit_separators.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp14/digit_separators.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/digit_separators.md b/lang/cpp14/digit_separators.md
index ac95c7c56..510a98507 100644
--- a/lang/cpp14/digit_separators.md
+++ b/lang/cpp14/digit_separators.md
@@ -1,6 +1,14 @@
 # 数値リテラルの桁区切り文字 [N3781]
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 整数リテラルと浮動小数点数リテラルには、途中にシングルクォーテーション(`&amp;#39;`)を入力することで、値を読みやすくできる。
 
@@ -120,7 +128,7 @@ C++14という言語バージョンは、C++11の仕様に対するバグ修正
 これらが検討された上で、上付きカンマと見なせるシングルクォーテーション(`&amp;#39;`)が採用された。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++14 2進数リテラル](binary_literals.md)
 
 
@@ -136,4 +144,3 @@ C++14という言語バージョンは、C++11の仕様に対するバグ修正
 - Java 7 : [Underscores in Numeric Literals](http://docs.oracle.com/javase/7/docs/technotes/guides/language/underscores-literals.html)
 - Ada : [Ada &amp;#39;83 Language Reference Manual](http://archive.adaic.com/standards/83lrm/html/lrm-02-04.html#2.4)
 
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>機能テストマクロ -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/feature_test_macros.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp14/feature_test_macros.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;機能テストマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp14&#34; title=&#34;C++14で追加&#34;&gt;(C++14)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++14に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;SD-6 は C++14 の機能について以下のテストマクロを定義することを推奨している：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_aggregate_nsdmi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メンバ初期化子と集約&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_binary_literals&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;binary_literals.html&#34;&gt;二進数リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;relaxing_constraints_on_constexpr.html&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;の制限緩和/&lt;code&gt;constexpr&lt;/code&gt; メンバ関数の暗黙的な &lt;code&gt;const&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_decltype_auto&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;return_type_deduction_for_normal_functions.html&#34;&gt;通常関数の戻り値型推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_generic_lambdas&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;generic_lambdas.html&#34;&gt;ジェネリックラムダ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_init_captures&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;initialize_capture.html&#34;&gt;ラムダ式の初期化キャプチャ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_chrono_udls&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration.html&#34;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; のユーザー定義リテラル (&lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_ns.html&#34;&gt;ns&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_us.html&#34;&gt;us&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_ms.html&#34;&gt;ms&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_s.html&#34;&gt;s&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_min.html&#34;&gt;min&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/chrono/duration/op_h.html&#34;&gt;h&lt;/a&gt;&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_complex_udls&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201309&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ユーザー定義虚数リテラル (&lt;code&gt;&lt;a href=&#34;../../reference/complex/complex/op_i.html&#34;&gt;i&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/complex/complex/op_if.html&#34;&gt;if&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/complex/complex/op_il.html&#34;&gt;il&lt;/a&gt;&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/complex.html&#34;&gt;&amp;lt;complex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_exchange_function&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility/exchange.html&#34;&gt;std::exchange&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_generic_associative_lookup&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;連想配列 (&lt;code&gt;&lt;a href=&#34;../../reference/map/map.html&#34;&gt;std::map&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/map/multimap.html&#34;&gt;std::multimap&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/set/set.html&#34;&gt;std::set&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/set/multiset.html&#34;&gt;std::multiset&lt;/a&gt;&lt;/code&gt;) における異なる型の比較 (&lt;code&gt;count&lt;/code&gt;, &lt;code&gt;equal_range&lt;/code&gt;, &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;lower_bound&lt;/code&gt;, &lt;code&gt;upper_bound&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/set.html&#34;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_integer_sequence&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/utility/integer_sequence.html&#34;&gt;コンパイル時整数列&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_integral_constant_callable&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/integral_constant.html&#34;&gt;std::integral_constant&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;operator()&lt;/code&gt; を追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_final&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201402&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_final.html&#34;&gt;std::is_final&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_null_pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201309&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_null_pointer.html&#34;&gt;std::is_null_pointer&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_make_reverse_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201402&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator/make_reverse_iterator.html&#34;&gt;std::make_reverse_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_make_unique&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/make_unique.html&#34;&gt;std::make_unique&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/make_unique.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_null_iterators&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ヌル前方向イテレータ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_quoted_string_io&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iomanip/quoted.html&#34;&gt;std::quoted&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iomanip.html&#34;&gt;&amp;lt;iomanip&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_result_of_sfinae&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201210&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/result_of.html&#34;&gt;std::result_of&lt;/a&gt;&lt;/code&gt; と SFINAE&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_robust_nonmodifying_seq_ops&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスを変更しない操作をよりロバストに&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shared_timed_mutex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201402&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;shared_mutex&lt;/code&gt; を &lt;code&gt;&lt;a href=&#34;../../reference/shared_mutex/shared_timed_mutex.html&#34;&gt;shared_timed_mutex&lt;/a&gt;&lt;/code&gt; にリネーム&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/shared_mutex.html&#34;&gt;&amp;lt;shared_mutex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_string_udls&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ユーザー定義 &lt;code&gt;&lt;a href=&#34;../../reference/string/basic_string/op_s.html&#34;&gt;std::string_literals::basic_string::sリテラル&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_transformation_trait_aliases&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型トレイトにエイリアステンプレートを追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_transparent_operators&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201210&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt; の二項演算のデフォルトテンプレート引数を &lt;code&gt;void&lt;/code&gt; に&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_tuple_element_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201402&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple/tuple_element.html&#34;&gt;std::tuple_element_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_tuples_by_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/tuple/tuple/get.html&#34;&gt;型による &lt;code&gt;std::tuple::get&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_return_type_deduction&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;return_type_deduction_for_normal_functions.html&#34;&gt;通常関数の戻り値型推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_sized_deallocation&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201309&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;sized_deallocation.html&#34;&gt;サイズ付きデアロケーション&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_variable_templates&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;variable_templates.html&#34;&gt;変数テンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(deprecated)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201309&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;deprecated_attr.html&#34;&gt;&lt;code&gt;[[deprecated]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_include(&amp;lt;shared_mutex&amp;gt;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/shared_mutex.html&#34;&gt;共有ロック&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;predefined&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations#recs.cpp14&#34; target=&#34;_blank&#34;&gt;SD-6: SG10 Feature Test Recommendations: Standard C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ジェネリックラムダ [N3649] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/generic_lambdas.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp14/generic_lambdas.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/generic_lambdas.md b/lang/cpp14/generic_lambdas.md
index d92b15b61..d61ead3ca 100644
--- a/lang/cpp14/generic_lambdas.md
+++ b/lang/cpp14/generic_lambdas.md
@@ -1,6 +1,14 @@
 # ジェネリックラムダ [N3649]
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 ジェネリックラムダ(generic lambdas)は、[C++11のラムダ式](/lang/cpp11/lambda_expressions.md)を拡張して、パラメータにテンプレートを使用できるようにした機能である。
 
@@ -120,7 +128,7 @@ HelloWorld
 これが現在`auto`を書くようになったのは、可読性のためである。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 ラムダ式](/lang/cpp11/lambda_expressions.md)
 - [C++14 ラムダ式の初期化キャプチャ](initialize_capture.md)
 - [C++14 通常関数の戻り値型推論](return_type_deduction_for_normal_functions.md)
@@ -131,4 +139,4 @@ HelloWorld
 ## 参照
 - [N3418 Proposal for Generic (Polymorphic) Lambda Expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3418.pdf)
 - [N3559 Proposal for Generic (Polymorphic) Lambda Expressions (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3559.pdf)
-- [N3649 Generic (Polymorphic) Lambda Expressions (Revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3649.html)
+- [N3649 Generic (Polymorphic) Lambda Expressions (Revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3649.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式の初期化キャプチャ [N3648] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/initialize_capture.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp14/initialize_capture.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/initialize_capture.md b/lang/cpp14/initialize_capture.md
index 4b984b47c..33e66ae6d 100644
--- a/lang/cpp14/initialize_capture.md
+++ b/lang/cpp14/initialize_capture.md
@@ -1,6 +1,14 @@
 # ラムダ式の初期化キャプチャ [N3648]
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 「初期化キャプチャ(init-capture)」は、任意の式の結果をラムダ式にキャプチャする機能である。
 
@@ -137,7 +145,7 @@ int main()
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 ラムダ式](/lang/cpp11/lambda_expressions.md)
 - [C++14 ジェネリックラムダ](generic_lambdas.md)
 
@@ -145,4 +153,3 @@ int main()
 ## 参照
 - [N3610 Generic lambda-capture initializers, supporting capture-by-move](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3610.html)
 - [N3648 Wording Changes for Generalized Lambda-capture](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3648.html)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>宣言時のメンバ初期化を持つ型の集成体初期化を許可 -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/member_initializers_and_aggregates.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp14/member_initializers_and_aggregates.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/member_initializers_and_aggregates.md b/lang/cpp14/member_initializers_and_aggregates.md
index 9e1e855e8..22fbd8d0a 100644
--- a/lang/cpp14/member_initializers_and_aggregates.md
+++ b/lang/cpp14/member_initializers_and_aggregates.md
@@ -1,6 +1,14 @@
 # 宣言時のメンバ初期化を持つ型の集成体初期化を許可
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++11で導入された[メンバ初期化子](/lang/cpp11/non_static_data_member_initializers.md)は集成体の初期化と組み合わせて使用することができない問題があった。
 
@@ -27,9 +35,8 @@ int main()
 - 集成体の定義として「非静的メンバ変数の初期化をもたない」ことが条件になっていたが、それを削除
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 非静的メンバ変数の初期化](/lang/cpp11/non_static_data_member_initializers.md)
 
 ## 参照
 - [N3653 - Member initializers and aggregates](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3653.html)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>リテラル演算子のスペースを省略可能とする -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/no_whitespace_literal_operators.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp14/no_whitespace_literal_operators.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/no_whitespace_literal_operators.md b/lang/cpp14/no_whitespace_literal_operators.md
index 10641a093..4688dcf09 100644
--- a/lang/cpp14/no_whitespace_literal_operators.md
+++ b/lang/cpp14/no_whitespace_literal_operators.md
@@ -1,6 +1,14 @@
 # リテラル演算子のスペースを省略可能とする
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 リテラル演算子を定義する際に、これまでは以下のように、`operator&amp;#34;&amp;#34;`とサフィックス名の間に、ひとつ以上のスペースが必要だった。
 
@@ -43,10 +51,9 @@ hello
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 ユーザー定義リテラル](/lang/cpp11/user_defined_literals.md)
 
 
 ## 参照
 - [CWG Issue 1473. Syntax of literal-operator-id](https://wg21.cmeerw.net/cwg/issue1473)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>nullptr_t型の定数式を非型テンプレートパラメータとすることを許可 -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/nontype_template_parameters_of_type_nullptr_t.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp14/nontype_template_parameters_of_type_nullptr_t.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/nontype_template_parameters_of_type_nullptr_t.md b/lang/cpp14/nontype_template_parameters_of_type_nullptr_t.md
index 0350fdf35..560705c70 100644
--- a/lang/cpp14/nontype_template_parameters_of_type_nullptr_t.md
+++ b/lang/cpp14/nontype_template_parameters_of_type_nullptr_t.md
@@ -1,6 +1,14 @@
 # nullptr_t型の定数式を非型テンプレートパラメータとすることを許可
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 [`nullptr_t`](/reference/cstddef/nullptr_t.md)型の定数式を非型テンプレートパラメータとすることが許可された。
 
@@ -23,10 +31,9 @@ int main()
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 `nullptr`](/lang/cpp11/nullptr.md)
 
 
 ## 参照
 - [CWG Issue 1398. Non-type template parameters of type `std::nullptr_t`](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1398)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>後置戻り値型をプレースホルダーにすることを許可 -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/placeholder_type_in_trailing_return_type.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp14/placeholder_type_in_trailing_return_type.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/placeholder_type_in_trailing_return_type.md b/lang/cpp14/placeholder_type_in_trailing_return_type.md
index 502bdca23..f6a5a0b70 100644
--- a/lang/cpp14/placeholder_type_in_trailing_return_type.md
+++ b/lang/cpp14/placeholder_type_in_trailing_return_type.md
@@ -1,6 +1,14 @@
 # 後置戻り値型をプレースホルダーにすることを許可
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 [戻り値の型を後置する関数宣言構文](/lang/cpp11/trailing_return_types.md)と[ラムダ式](/lang/cpp11/lambda_expressions.md)の、後置戻り値型(trailing return type)を`auto`プレースホルダーとし、そのプレースホルダーを修飾することで、戻り値型の推論を補助できる。
 
@@ -47,7 +55,6 @@ int main()
 この機能は、C++14で導入された「[通常関数の戻り値型推論](return_type_deduction_for_normal_functions.md)」の機能において、ラムダ式から参照の戻り値を返すことを目的として導入された。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++14 通常関数の戻り値型推論](return_type_deduction_for_normal_functions.md)
 
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>更新された定義済みマクロ -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/predefined_macros.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp14/predefined_macros.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;更新された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp14&#34; title=&#34;C++14で追加&#34;&gt;(C++14)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++14に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cplusplus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201402L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++のバージョン値を表す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexprの制限緩和 [N3652] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/relaxing_constraints_on_constexpr.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp14/relaxing_constraints_on_constexpr.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/relaxing_constraints_on_constexpr.md b/lang/cpp14/relaxing_constraints_on_constexpr.md
index c6d840d01..cc3d66426 100644
--- a/lang/cpp14/relaxing_constraints_on_constexpr.md
+++ b/lang/cpp14/relaxing_constraints_on_constexpr.md
@@ -1,6 +1,14 @@
 # constexprの制限緩和 [N3652]
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++11で、汎用定数式の機能である[`constexpr`](/lang/cpp11/constexpr.md)が導入された。
 
@@ -197,7 +205,7 @@ C++は直交性を重視して設計されており、直接関係ない機能
 C++14では、`constexpr`関数、`constexpr`メンバ関数、暗黙の`const`といった制限を緩和する。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 `constexpr`](/lang/cpp11/constexpr.md)
 
 
@@ -205,4 +213,3 @@ C++14では、`constexpr`関数、`constexpr`メンバ関数、暗黙の`const`
 - [N3597 Relaxing constraints on `constexpr` functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3597.html)
 - [N3598 `constexpr` member functions and implicit `const`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3598.html)
 - [N3652 Relaxing constraints on `constexpr` functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3652.html)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>通常関数の戻り値型推論 [N3638] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/return_type_deduction_for_normal_functions.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp14/return_type_deduction_for_normal_functions.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/return_type_deduction_for_normal_functions.md b/lang/cpp14/return_type_deduction_for_normal_functions.md
index f2434536c..040f506be 100644
--- a/lang/cpp14/return_type_deduction_for_normal_functions.md
+++ b/lang/cpp14/return_type_deduction_for_normal_functions.md
@@ -1,6 +1,14 @@
 # 通常関数の戻り値型推論 [N3638]
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 関数宣言の構文において、先頭の戻り値型を`auto`もしくは[`decltype(auto)`](decltype_auto.md)とすることで、戻り値の型が関数の`return`文から推論される。
 
@@ -224,7 +232,7 @@ auto g(F f) { return f(); }
 [戻り値の型を後置する関数宣言構文](/lang/cpp11/trailing_return_types.md)のページを参照。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 戻り値の型を後置する関数宣言構文](/lang/cpp11/trailing_return_types.md)
 - [C++14 `decltype(auto)`](decltype_auto.md)
 - [C++14 後置戻り値型をプレースホルダーにすることを許可](placeholder_type_in_trailing_return_type.md)
@@ -237,4 +245,3 @@ auto g(F f) { return f(); }
 - [N3638 Return type deduction for normal functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3638.html)
 - [CWG Issue 1048. `auto` deduction and lambda return type deduction.](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1048)
 - [CWG Issue 1588. Deducing cv-qualified `auto`](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1588)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>サイズ付きデアロケーション [N3778] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/sized_deallocation.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp14/sized_deallocation.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/sized_deallocation.md b/lang/cpp14/sized_deallocation.md
index 1d130364d..d3271b809 100644
--- a/lang/cpp14/sized_deallocation.md
+++ b/lang/cpp14/sized_deallocation.md
@@ -1,6 +1,14 @@
 # サイズ付きデアロケーション [N3778]
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++03ではクラス用の`delete`演算子として、サイズをとるバージョンをオーバーロードできた。C++14では、それに対応するグローバルの`delete`演算子を定義できるようにする。
 
@@ -93,7 +101,7 @@ delete with two arguments, 13
 - Clangは3.7以降、サイズをとる`delete`演算子を使用する場合、`-fsized-deallocation`オプションを付ける必要がある。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`allocator::deallocate`](/reference/memory/allocator/deallocate.md)
 - [`operator delete`](/reference/new/op_delete.md)
 - [`operator delete[]`](/reference/new/op_delete[].md)
@@ -104,4 +112,4 @@ delete with two arguments, 13
 - [N3536 C++ Sized Deallocation](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3536.html)
 - [N3663 C++ Sized Deallocation](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3663.html)
 - [N3778 C++ Sized Deallocation](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3778.html)
-- [LWG Issue 2458. N3778 and new library deallocation signatures](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2458)
+- [LWG Issue 2458. N3778 and new library deallocation signatures](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2458)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>変数テンプレート [N3651] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/variable_templates.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp14/variable_templates.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/variable_templates.md b/lang/cpp14/variable_templates.md
index 97cbadc51..37eed78f8 100644
--- a/lang/cpp14/variable_templates.md
+++ b/lang/cpp14/variable_templates.md
@@ -1,6 +1,14 @@
 # 変数テンプレート [N3651]
 * cpp14[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++14に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 変数定義時のテンプレート指定を可能にする。
 
@@ -120,7 +128,7 @@ auto main() -&amp;gt; int
 - `const`または`constexpr`と組み合わせて用いる提案があったが、ワーキンググループの多数意見によりC++14の対象では制限しない事にした。（N3651）
 - テンプレートテンプレートについても提案があったが、ワーキンググループで複数の不要論がありC++14では含めない事にした。（N3651）
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 `constexpr`](/lang/cpp11/constexpr.md)
 - [C++17 変数テンプレートのデフォルトテンプレート引数を許可](/lang/cpp17/allow_default_template_arguments_of_variable_templates.md)
 - [C++23 変数テンプレートの部分特殊化を許可](/lang/cpp23/generalized_wording_for_partial_specializations.md)
@@ -129,4 +137,3 @@ auto main() -&amp;gt; int
 - [N3651 Variable Templates (Revision 1)](http://open-std.org/JTC1/SC22/WG21/docs/papers/2013/n3651.pdf)
 - [Trip Report: ISO C++ Spring 2013 Meeting](https://isocpp.org/blog/2013/04/trip-report-iso-c-spring-2013-meeting)
 - [変数テンプレートをラムダ式でキャプチャするときの注意 - Faith and Brave - C++で遊ぼう](http://faithandbrave.hateblo.jp/entry/2014/01/21/162701)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>全ての非型テンプレート引数の定数式評価を許可 [N4268] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.md b/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.md
index 19f66f972..1a5f04d3e 100644
--- a/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.md
+++ b/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.md
@@ -2,6 +2,14 @@
 
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++17では、非型テンプレート引数(non-type template argument)で扱える型はとくに変わらないが、渡せる値についての制限緩和が行われる。
 
@@ -114,4 +122,4 @@ A&amp;lt;q()&amp;gt; c; // ok!
 ## 参照
 - [N4198 Allow constant evaluation for all non-type template arguments](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4198.html)
 - [N4268 Allow constant evaluation for all non-type template arguments](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4268.html)
-- [C++1z 全ての非型テンプレート引数の定数式評価を許可 - Faith and Brave - C++で遊ぼう](https://faithandbrave.hateblo.jp/entry/2016/10/27/180801)
+- [C++1z 全ての非型テンプレート引数の定数式評価を許可 - Faith and Brave - C++で遊ぼう](https://faithandbrave.hateblo.jp/entry/2016/10/27/180801)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>変数テンプレートのデフォルトテンプレート引数を許可 -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/allow_default_template_arguments_of_variable_templates.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/allow_default_template_arguments_of_variable_templates.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/allow_default_template_arguments_of_variable_templates.md b/lang/cpp17/allow_default_template_arguments_of_variable_templates.md
index 363d1c5d0..f8c14b098 100644
--- a/lang/cpp17/allow_default_template_arguments_of_variable_templates.md
+++ b/lang/cpp17/allow_default_template_arguments_of_variable_templates.md
@@ -1,6 +1,14 @@
 # 変数テンプレートのデフォルトテンプレート引数を許可
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++17では、[変数テンプレート](/lang/cpp14/variable_templates.md)のテンプレートパラメータがデフォルト引数を持てることとなった。
 
@@ -28,4 +36,4 @@ int main()
 
 
 ## 参照
-- [CWG Issue 2032. Default template-arguments of variable templates](https://wg21.cmeerw.net/cwg/issue2032)
+- [CWG Issue 2032. Default template-arguments of variable templates](https://wg21.cmeerw.net/cwg/issue2032)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>テンプレートテンプレートパラメータにtypenameキーワードの使用を許可 [N4051] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/allow_typename_in_a_template_template_parameter.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/allow_typename_in_a_template_template_parameter.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/allow_typename_in_a_template_template_parameter.md b/lang/cpp17/allow_typename_in_a_template_template_parameter.md
index e4dee187a..2b05c7f5d 100644
--- a/lang/cpp17/allow_typename_in_a_template_template_parameter.md
+++ b/lang/cpp17/allow_typename_in_a_template_template_parameter.md
@@ -1,6 +1,14 @@
 # テンプレートテンプレートパラメータにtypenameキーワードの使用を許可 [N4051]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 テンプレートパラメータはほとんどの箇所で`class`キーワードと`typename`キーワードの両方を使用できたが、テンプレートテンプレートパラメータのクラステンプレート部分については`class`キーワードしか使用できなかった。
 
@@ -45,4 +53,4 @@ int main()
 ```
 
 ## 参照
-- [N4051 Allow `typename` in a template template parameter](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4051.html)
+- [N4051 Allow `typename` in a template template parameter](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4051.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>名前空間と列挙子への属性付加を許可 [N4266] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/attributes_for_namespaces_and_enumerators.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/attributes_for_namespaces_and_enumerators.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/attributes_for_namespaces_and_enumerators.md b/lang/cpp17/attributes_for_namespaces_and_enumerators.md
index 78aee629b..7fd5c7014 100644
--- a/lang/cpp17/attributes_for_namespaces_and_enumerators.md
+++ b/lang/cpp17/attributes_for_namespaces_and_enumerators.md
@@ -1,6 +1,14 @@
 # 名前空間と列挙子への属性付加を許可 [N4266]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 名前空間と列挙子への属性付加が可能となった。
@@ -61,9 +69,9 @@ namespace [[deprecated]] bar {
 2 warnings generated.
 ```
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 属性構文](/lang/cpp11/attributes.md)
 
 ## 参照
 - [N4196 Attributes for namespaces and enumerators](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4196.html)
-- [N4266 Attributes for namespaces and enumerators](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4266.html)
+- [N4266 Attributes for namespaces and enumerators](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4266.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr ラムダ [P0170R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/constexpr_lambda.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/constexpr_lambda.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/constexpr_lambda.md b/lang/cpp17/constexpr_lambda.md
index f0ca91494..d67e01f5d 100644
--- a/lang/cpp17/constexpr_lambda.md
+++ b/lang/cpp17/constexpr_lambda.md
@@ -2,6 +2,14 @@
 
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++17から、ラムダ式をconstexpr関数として使えるようになった。
@@ -193,4 +201,4 @@ C++14まではラムダ式がコンパイル時に呼び出せないため、
 ## 参照
 
 (執筆中)
-- [P0170R1 Wording for Constexpr Lambda](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0170r1.pdf)
+- [P0170R1 Wording for Constexpr Lambda](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0170r1.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>enum class変数の初期値として整数を指定する際の規則を調整 [P0138R2] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/construction_enum_class_values.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/construction_enum_class_values.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/construction_enum_class_values.md b/lang/cpp17/construction_enum_class_values.md
index b4e8f2589..f776f8493 100644
--- a/lang/cpp17/construction_enum_class_values.md
+++ b/lang/cpp17/construction_enum_class_values.md
@@ -1,6 +1,14 @@
 # enum class変数の初期値として整数を指定する際の規則を調整 [P0138R2]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++11にてスコープを持つ列挙型が導入された。これは基底型を明示することができ、従来の列挙型と異なり整数型への暗黙の型変換を行わない。
 
@@ -96,9 +104,9 @@ enum class byte : unsigned char { };
 C++17ではスコープを持つ列挙型の初期化ルールを緩和し、簡潔な記述を実現するとともに、意図せず精度を失う変換を行う危険性を排除した。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 スコープを持つ列挙型](/lang/cpp11/scoped_enum.md)
 - [`std::byte`](/reference/cstddef/byte.md)
 
 ## 参照
-- [P0138R2 Construction Rules for enum class Values.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0138r2.pdf)
+- [P0138R2 Construction Rules for enum class Values.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0138r2.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非型テンプレートパラメータのauto宣言 [P0127R2] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/declaring_non-type_template_arguments_with_auto.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/declaring_non-type_template_arguments_with_auto.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/declaring_non-type_template_arguments_with_auto.md b/lang/cpp17/declaring_non-type_template_arguments_with_auto.md
index e532dd3f0..0ba305a8b 100644
--- a/lang/cpp17/declaring_non-type_template_arguments_with_auto.md
+++ b/lang/cpp17/declaring_non-type_template_arguments_with_auto.md
@@ -2,6 +2,14 @@
 
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++14まで、以下のように書いていた「指定された型の定数を受け取る」意図の非型テンプレートパラメータ(non-type template parameter)だが、
 
@@ -91,7 +99,7 @@ S&amp;lt;x&amp;gt; s; // desired instantiation
 template &amp;lt;auto v&amp;gt; struct S; // type of v is deduced
 ```
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 全ての非型テンプレート引数の定数式評価を許可](/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.md)
 - [C++20 非型テンプレートパラメータとしてクラス型を許可する](/lang/cpp20/class_types_in_non-type_template_parameters.md)
 
@@ -99,4 +107,4 @@ template &amp;lt;auto v&amp;gt; struct S; // type of v is deduced
 ## 参照
 - [P0127R1 Declaring non-type template arguments with auto](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0127r1.html)
 - [P0127R2 Declaring non-type template parameters with auto](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0127r2.html)
-- [C++1z 非型テンプレートパラメータのauto宣言 - Faith and Brave - C++で遊ぼう](https://faithandbrave.hateblo.jp/entry/2016/10/26/180406)
+- [C++1z 非型テンプレートパラメータのauto宣言 - Faith and Brave - C++で遊ぼう](https://faithandbrave.hateblo.jp/entry/2016/10/26/180406)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>アライメント指定されたデータの動的メモリ確保 [P0035R4] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md b/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md
index 8a14b5487..412876e18 100644
--- a/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md
+++ b/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.md
@@ -1,6 +1,14 @@
 # アライメント指定されたデータの動的メモリ確保 [P0035R4]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 クラスのアライメント要求がデフォルトで満たされるものより大きい場合でも、動的に確保されたメモリ領域が指定したアライメントを満たしていることが保証される。
@@ -37,7 +45,7 @@ void* operator new(std::size_t size, std::align_val_t alignment);
 
 `new T`の呼び出しが[`align_val_t`](/reference/new/align_val_t.md)を取る[`new`](/reference/new/op_new.md)で解決される場合、`align_val_t`の値は`alignof(T)`の結果になる。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`&amp;lt;new&amp;gt;`](/reference/new.md)
 - [`std::align`](/reference/memory/align.md)
 - [C++11 `alignas`](/lang/cpp11/alignas.md)
@@ -45,4 +53,4 @@ void* operator new(std::size_t size, std::align_val_t alignment);
 
 ## 参照
 - [P0035R4 Dynamic memory allocation for over-aligned data](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0035r4.html)
-- [New `new()` - The C++17&amp;#39;s Alignment Parameter for Operator `new()`](https://www.bfilipek.com/2019/08/newnew-align.html)
+- [New `new()` - The C++17&amp;#39;s Alignment Parameter for Operator `new()`](https://www.bfilipek.com/2019/08/newnew-align.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>例外仕様を型システムの一部にする [P0012R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/exception_spec_be_part_of_the_type_system.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/exception_spec_be_part_of_the_type_system.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/exception_spec_be_part_of_the_type_system.md b/lang/cpp17/exception_spec_be_part_of_the_type_system.md
index 7be6cb8d9..d735f4707 100644
--- a/lang/cpp17/exception_spec_be_part_of_the_type_system.md
+++ b/lang/cpp17/exception_spec_be_part_of_the_type_system.md
@@ -1,6 +1,14 @@
 # 例外仕様を型システムの一部にする [P0012R1]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 [`noexcept`](/lang/cpp11/noexcept.md)による例外仕様が、関数の型の一部として扱われるようになる。
 
@@ -78,10 +86,10 @@ C++11で[`noexcept`](/lang/cpp11/noexcept.md)が導入されたことにより
 そのほか、次期標準で考えられているトランザクショナルメモリ機能において、トランザクション内で安全に使える機能の条件を決める上で、「関数に`noexcept`が付いていること」というものが必要となった。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 noexcept](/lang/cpp11/noexcept.md)
 - [C++17 noexcept付きのラムダ式から変換する関数ポインタにnoexceptを付加する](lambda_to_noexcept_function_pointer.md)
 
 
 ## 参照
-- [P0012R1 Make exception specifications be part of the type system, version 5](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0012r1.html)
+- [P0012R1 Make exception specifications be part of the type system, version 5](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0012r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>厳密な式の評価順 [P0145R3] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/expression_evaluation_order.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/expression_evaluation_order.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/expression_evaluation_order.md b/lang/cpp17/expression_evaluation_order.md
index 4fe26553c..9be6c3eff 100644
--- a/lang/cpp17/expression_evaluation_order.md
+++ b/lang/cpp17/expression_evaluation_order.md
@@ -1,6 +1,14 @@
 # 厳密な式の評価順 [P0145R3]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++14までは演算子オペランドにあたる部分式の評価順序は未規定（unspecified）であったが、
@@ -158,9 +166,9 @@ C++の既存のプログラムを壊すこと無く、なおかつ、
 対象を限定して注意深く変更した結果である。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 
 ## 参照
 - [P0145R3 Refining Expression Evaluation Order for Idiomatic C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0145r3.pdf)
-- [P0400R0 Wording for Order of Evaluation of Function Arguments](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0400r0.html)
+- [P0400R0 Wording for Order of Evaluation of Function Arguments](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0400r0.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>static_assert のメッセージ省略を許可 [N3928] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/extending_static_assert.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/extending_static_assert.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/extending_static_assert.md b/lang/cpp17/extending_static_assert.md
index 8ae20ef82..96d6c6e6a 100644
--- a/lang/cpp17/extending_static_assert.md
+++ b/lang/cpp17/extending_static_assert.md
@@ -1,6 +1,14 @@
 # static_assert のメッセージ省略を許可 [N3928]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `static_assert` は [C++11](/lang/cpp11/static_assert.md) で導入されたが、第2引数に診断メッセージを指定しなければならなかった。
 C++17 ではこれを省略できるようになった。
@@ -64,10 +72,10 @@ example_static_assert.cpp:5:3: error: static_assert failed
 * 『`static_assert` は1つ以上の`定数式`を取り、診断メッセージはテキストに変換した`定数式`を含む』
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 `static_assert`](/lang/cpp11/static_assert.md)
 
 
 ## 参照
 - [N3846 Extending `static_assert`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3846.pdf)
-- [N3928 Extending `static_assert`, v2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3928.pdf)
+- [N3928 Extending `static_assert`, v2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3928.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>基底クラスのメンバ変数を集成体初期化するための波カッコを省略できるようにする [P0017R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/extension_to_aggregate_initialization.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/extension_to_aggregate_initialization.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/extension_to_aggregate_initialization.md b/lang/cpp17/extension_to_aggregate_initialization.md
index f595a0b3f..b2c941418 100644
--- a/lang/cpp17/extension_to_aggregate_initialization.md
+++ b/lang/cpp17/extension_to_aggregate_initialization.md
@@ -2,6 +2,14 @@
 
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++17 から集成体初期化が拡張され、基底クラスを持つ型の初期化が簡潔に記述できるようになった。
@@ -117,11 +125,11 @@ int main()
 
 この機能により C++17 以降では記述が簡潔になり、実装労力の低減、ソースコードの可読性の向上が図られた。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 1. [C++14 / 宣言時のメンバ初期化を持つ型の集成体初期化を許可](../cpp14/brace_elision_in_array_temporary_initialization.md)
 
 
 ## 参照
 
-1. [P0017R1 Extension to aggregate initialization](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0017r1.html)
+1. [P0017R1 Extension to aggregate initialization](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0017r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[fallthrough]]属性 [P0188R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/fallthrough.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/fallthrough.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/fallthrough.md b/lang/cpp17/fallthrough.md
index eb8f4be43..5e3590875 100644
--- a/lang/cpp17/fallthrough.md
+++ b/lang/cpp17/fallthrough.md
@@ -1,6 +1,14 @@
 # [[fallthrough]]属性 [P0188R1]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 `[[fallthrough]]`属性は意図したフォールスルーであることをコンパイラに伝え、警告を抑制するための属性である。
@@ -51,9 +59,9 @@ fallthrough.cpp:12:3: note: here
    ^~~~
 ```
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 属性構文](/lang/cpp11/attributes.md)
 
 ## 参照
 - [P0068R0 Proposal of &amp;amp;#91;&amp;amp;#91;unused&amp;amp;#93;&amp;amp;#93;, &amp;amp;#91;&amp;amp;#91;nodiscard&amp;amp;#93;&amp;amp;#93; and &amp;amp;#91;&amp;amp;#91;fallthrough&amp;amp;#93;&amp;amp;#93; attributes.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0068r0.pdf)
-- [P0188R1 Wording for [[fallthrough]] attribute.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0188r1.pdf)
+- [P0188R1 Wording for [[fallthrough]] attribute.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0188r1.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>機能テストマクロ -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/feature_test_macros.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/feature_test_macros.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;機能テストマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++17に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;SD-6 は C++17 の機能について以下のテストマクロを定義することを推奨している：&lt;/p&gt;
&lt;h3&gt;言語機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_hex_float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;hexadecimal_floating_literals.html&#34;&gt;十六進浮動小数点数リテラル&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_inline_variables&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;inline_variables.html&#34;&gt;インライン変数&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_aligned_new&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;dynamic_memory_allocation_for_over-aligned_data.html&#34;&gt;アライメント指定されたデータの動的メモリ確保&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_guaranteed_copy_elision&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;guaranteed_copy_elision.html&#34;&gt;値のコピー省略を保証&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_noexcept_function_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;exception_spec_be_part_of_the_type_system.html&#34;&gt;例外仕様を型システムの一部にする&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_fold_expressions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;folding_expressions.html&#34;&gt;畳み込み式&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;constexpr_lambda.html&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;ラムダ&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_if_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;if_constexpr.html&#34;&gt;&lt;code&gt;if constexpr&lt;/code&gt;文&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_range_based_for&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;generalizing_the_range-based_for_loop.html&#34;&gt;範囲 &lt;code&gt;for&lt;/code&gt; ループの制限緩和&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_static_assert&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;extending_static_assert.html&#34;&gt;&lt;code&gt;static_assert&lt;/code&gt; のメッセージ省略を許可&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_deduction_guides&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;br /&gt; &lt;code&gt;201611&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;type_deduction_for_class_templates.html&#34;&gt;クラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_nontype_template_parameter_auto&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;declaring_non-type_template_arguments_with_auto.html&#34;&gt;非型テンプレートパラメータの&lt;code&gt;auto&lt;/code&gt;宣言&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_namespace_attributes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;attributes_for_namespaces_and_enumerators.html&#34;&gt;名前空間への属性付加を許可&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_enumerator_attributes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;attributes_for_namespaces_and_enumerators.html&#34;&gt;列挙子への属性付加を許可&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_inheriting_constructors&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201511&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;継承コンストラクタの新仕様&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_variadic_using&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201611&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;pack_expansions_in_using.html&#34;&gt;&lt;code&gt;using&lt;/code&gt;宣言のパック展開&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(fallthrough)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;fallthrough.html&#34;&gt;&lt;code&gt;[[fallthrough]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(nodiscard)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;nodiscard.html&#34;&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__has_cpp_attribute(maybe_unused)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;maybe_unused.html&#34;&gt;&lt;code&gt;[[maybe_unused]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_structured_bindings&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;structured_bindings.html&#34;&gt;構造化束縛&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_aggregate_bases&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;extension_to_aggregate_initialization.html&#34;&gt;集成体初期化の拡張&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_nontype_template_args&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;allow_constant_evaluation_for_all_non-type_template_arguments.html&#34;&gt;非型テンプレートパラメータの定数式を評価&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_nested_namespace_definitions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;nested_namespace.html&#34;&gt;入れ子名前空間の定義&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ライブラリ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_byte&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cstddef/byte.html&#34;&gt;std::byte&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cstddef.html&#34;&gt;&amp;lt;cstddef&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_hardware_interference_size&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/new/hardware_destructive_interference_size.html&#34;&gt;std::hardware_destructive_interference_size&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/new/hardware_constructive_interference_size.html&#34;&gt;std::hardware_constructive_interference_size&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/new.html&#34;&gt;&amp;lt;new&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_launder&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/new/launder.html&#34;&gt;std::launder()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_uncaught_exceptions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/exception/uncaught_exceptions.html&#34;&gt;std::uncaught_exceptions()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/exception.html&#34;&gt;&amp;lt;exception&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_as_const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility/as_const.html&#34;&gt;std::as_const()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_make_from_tuple&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple/make_from_tuple.html&#34;&gt;std::make_from_tuple()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_apply&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple/apply.html&#34;&gt;std::apply()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple.html&#34;&gt;&amp;lt;tuple&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_optional&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/optional/optional.html&#34;&gt;std::optional&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/optional.html&#34;&gt;&amp;lt;optional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_any&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/any/any.html&#34;&gt;std::any&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/any.html&#34;&gt;&amp;lt;any&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_variant&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/variant/variant.html&#34;&gt;std::variant&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/variant.html&#34;&gt;&amp;lt;variant&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_memory_resource&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory_resource/memory_resource.html&#34;&gt;std::memory_resource&lt;/a&gt;&lt;/code&gt;と関連する機能&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory_resource.html&#34;&gt;&amp;lt;memory_resource&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_boyer_moore_searcher&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional/boyer_moore_searcher.html&#34;&gt;std::boyer_morre_searcher&lt;/a&gt;&lt;/code&gt;と関連する機能&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_string_view&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view/basic_string_view.html&#34;&gt;std::string_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_sample&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/sample.html&#34;&gt;std::sample()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_addressof_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/addressof.html&#34;&gt;std::addressof()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_raw_memory_algorithms&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/uninitialized_default_construct.html&#34;&gt;std::uninitialized_default_construct()&lt;/a&gt;&lt;/code&gt;と関連する機能&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_transparent_operators&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/owner_less.html&#34;&gt;std::owner_less&lt;/a&gt;&lt;/code&gt; の柔軟性向上&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_enable_shared_from_this&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/enable_shared_from_this.html&#34;&gt;std::enable_shared_from_this&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shared_ptr_weak_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/shared_ptr.html&#34;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;クラスのメンバ型&lt;code&gt;weak_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shared_ptr_arrays&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201611&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/shared_ptr.html&#34;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;クラスの配列サポート&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_invoke&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional/invoke.html&#34;&gt;std::invoke()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_not_fn&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional/not_fn.html&#34;&gt;std::not_fn()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_void_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/void_t.html&#34;&gt;std::void_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_bool_constant&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201505&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/bool_constant.html&#34;&gt;std::bool_constant&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_type_trait_variable_templates&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型トレイト変数テンプレート (&lt;code&gt;some_trait_v&amp;lt;T&amp;gt; = some_trait&amp;lt;T&amp;gt;::value&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_logical_traits&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;論理演算子型トレイト (&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/conjunction.html&#34;&gt;std::conjunction&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/type_traits/disjunction.html&#34;&gt;std::disjunction&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/type_traits/negation.html&#34;&gt;std::negation&lt;/a&gt;&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_swappable&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_swappable.html&#34;&gt;std::is_swappable&lt;/a&gt;&lt;/code&gt;と関連する機能&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_invocable&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_invocable.html&#34;&gt;std::is_invocable&lt;/a&gt;&lt;/code&gt;と関連する機能&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_has_unique_object_representations&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/has_unique_object_representations.html&#34;&gt;std::has_unique_object_representations&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_aggregate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_aggregate.html&#34;&gt;std::is_aggregate&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_chrono&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt; の改良&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_execution&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/execution.html&#34;&gt;&amp;lt;execution&amp;gt;&lt;/a&gt;&lt;/code&gt; の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/execution.html&#34;&gt;&amp;lt;execution&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_parallel_algorithm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;並列アルゴリズム&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_to_chars&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201611&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/charconv/to_chars.html&#34;&gt;std::to_chars()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/charconv/from_chars.html&#34;&gt;std::from_chars()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/charconv.html&#34;&gt;&amp;lt;charconv&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_allocator_traits_is_always_equal&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ライブラリ内の &lt;code&gt;noexcept&lt;/code&gt; のクリーンアップ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/deque.html&#34;&gt;&amp;lt;deque&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/forward_list.html&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/list.html&#34;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/scoped_allocator.html&#34;&gt;&amp;lt;scoped_allocator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/set.html&#34;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/unordered_set.html&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/vector.html&#34;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_incomplete_container_elements&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201505&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;標準コンテナについて不完全型を最小限サポート&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/forward_list.html&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/list.html&#34;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/vector.html&#34;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_map_try_emplace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map/map/try_emplace.html&#34;&gt;std::map::try_emplace()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/map/map/insert_or_assign.html&#34;&gt;std::map::insert_or_assign()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_unordered_map_try_emplace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_map/unordered_map/try_emplace.html&#34;&gt;std::unordered_map::try_emplace()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/unordered_map/unordered_map/insert_or_assign.html&#34;&gt;std::unordered_map::insert_or_assign()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_node_extract&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;連想コンテナのsplice&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/set.html&#34;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;../../reference/unordered_set.html&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_array_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;配列関係のランダムアクセスに&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/array.html&#34;&gt;&amp;lt;array&amp;gt;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_nonmember_container_access&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非メンバ関数 &lt;code&gt;&lt;a href=&#34;../../reference/iterator/size.html&#34;&gt;std::size()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/iterator/empty.html&#34;&gt;std::empty()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;../../reference/iterator/data.html&#34;&gt;std::data()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_clamp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/clamp.html&#34;&gt;std::clamp()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_gcd_lcm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201606&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric/gcd.html&#34;&gt;std::gcd()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/numeric/lcm.html&#34;&gt;std::lcm()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_hypot&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;3引数版の&lt;code&gt;&lt;a href=&#34;../../reference/cmath/hypot.html&#34;&gt;std::hypot()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_math_special_functions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数学の特殊関数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_filesystem&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルシステムライブラリ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/filesystem.html&#34;&gt;&amp;lt;filesystem&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_is_always_lock_free&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201603&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic.html&#34;&gt;std::atomic&lt;/a&gt;&lt;/code&gt;クラスの静的メンバ定数&lt;code&gt;is_always_lock_free&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shared_mutex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201505&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/shared_mutex/shared_mutex.html&#34;&gt;std::shared_mutex&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/shared_mutex.html&#34;&gt;&amp;lt;shared_mutex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_scoped_lock&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可変個のミューテックスのロックを管理する&lt;code&gt;&lt;a href=&#34;../../reference/mutex/scoped_lock.html&#34;&gt;std::scoped_lock&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/mutex.html&#34;&gt;&amp;lt;mutex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations#recs.cpp17&#34; target=&#34;_blank&#34;&gt;SD-6: SG10 Feature Test Recommendations: Standard C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>畳み込み式 [N4295] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/folding_expressions.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/folding_expressions.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/folding_expressions.md b/lang/cpp17/folding_expressions.md
index 03ed8df24..60cba9317 100644
--- a/lang/cpp17/folding_expressions.md
+++ b/lang/cpp17/folding_expressions.md
@@ -1,6 +1,14 @@
 # 畳み込み式 [N4295]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 畳み込み式 (fold expression) は可変引数テンプレートのパラメータパックに対して二項演算を累積的に行う (畳み込む fold)。
@@ -232,7 +240,7 @@ auto res =  (std::string(args) + ...);
 で提案されていたが削除された (理由は発見できず)。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 可変引数テンプレート](/lang/cpp11/variadic_templates.md)
 - [`std::accumulate`](/reference/numeric/accumulate.md) — イテレータ範囲について累積的に二項演算を行う
 
@@ -243,4 +251,4 @@ auto res =  (std::string(args) + ...);
 * [N4295 Folding expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4295.html)
 * [N4358 Unary Folds and Empty Parameter Packs](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4358.pdf)
 * [P0036 Unary Folds and Empty Parameter Packs (revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0036r0.pdf)
-* [Nifty Fold Expression Tricks - foonathan::blog()](https://foonathan.net/2020/05/fold-tricks/)
+* [Nifty Fold Expression Tricks - foonathan::blog()](https://foonathan.net/2020/05/fold-tricks/)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>範囲 for ループの制限緩和 [P0184R0] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/generalizing_the_range-based_for_loop.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/generalizing_the_range-based_for_loop.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/generalizing_the_range-based_for_loop.md b/lang/cpp17/generalizing_the_range-based_for_loop.md
index df1a37934..e400fc361 100644
--- a/lang/cpp17/generalizing_the_range-based_for_loop.md
+++ b/lang/cpp17/generalizing_the_range-based_for_loop.md
@@ -1,6 +1,14 @@
 # 範囲 for ループの制限緩和 [P0184R0]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 [範囲 for 文は C++11 で導入された](/lang/cpp11/range_based_for.md) が、
@@ -138,11 +146,11 @@ Range TS (technical specification) では `Sentinel` (番兵) 等の範囲の終
 [Boost.Foreach](http://boost.org/libs/foreach) のようなマクロは避けるべきだとされた。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 範囲 for 文](/lang/cpp11/range_based_for.md)
 - [C++20 範囲for文がカスタマイゼーションポイントを見つけるルールを緩和](/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md)
 
 
 ## 参照
 - [P0184R0 Generalizing the Range-Based For Loop](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0184r0.html)
-- [N4128 Ranges for the Standard Library, Revision 1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4128.html)
+- [N4128 Ranges for the Standard Library, Revision 1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4128.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>値のコピー省略を保証 [P0135R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/guaranteed_copy_elision.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/guaranteed_copy_elision.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/guaranteed_copy_elision.md b/lang/cpp17/guaranteed_copy_elision.md
index 5a96ad1c7..448649cf2 100644
--- a/lang/cpp17/guaranteed_copy_elision.md
+++ b/lang/cpp17/guaranteed_copy_elision.md
@@ -2,6 +2,14 @@
 
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++11で右辺値参照を導入するときに規定された「値カテゴリー (value category)」の仕様（C++17で更新）を利用し、[`prvalue`](../cpp11/rvalue_ref_and_move_semantics.md)&amp;lt;sup&amp;gt;&amp;lt;a id=&amp;#34;note_ref-1&amp;#34; href=&amp;#34;#note-1&amp;#34;&amp;gt;[注1]&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt;というカテゴリーの値を、オブジェクトの初期化のために使用する場合に、コピーが省略される。
 
@@ -170,4 +178,4 @@ Foo x = foo(); // error Foo型のコピーコンストラクタが必要
 - [Guaranteed Copy Elision](https://jonasdevlieghere.com/guaranteed-copy-elision/)
 
 ## 注釈
-1. **&amp;lt;a id=&amp;#34;note-1&amp;#34; href=&amp;#34;#note_ref-1&amp;#34;&amp;gt;^&amp;lt;/a&amp;gt;** &amp;lt;cite&amp;gt;[右辺値、左辺値などの細かい定義 - Qiita](https://qiita.com/rinse_/items/cffa87016b7de49391ae)&amp;lt;/cite&amp;gt;を参照
+1. **&amp;lt;a id=&amp;#34;note-1&amp;#34; href=&amp;#34;#note_ref-1&amp;#34;&amp;gt;^&amp;lt;/a&amp;gt;** &amp;lt;cite&amp;gt;[右辺値、左辺値などの細かい定義 - Qiita](https://qiita.com/rinse_/items/cffa87016b7de49391ae)&amp;lt;/cite&amp;gt;を参照
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>__has_include [P0061R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/has_include.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/has_include.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/has_include.md b/lang/cpp17/has_include.md
index 8c4821ae7..9972b6917 100644
--- a/lang/cpp17/has_include.md
+++ b/lang/cpp17/has_include.md
@@ -1,6 +1,14 @@
 # __has_include [P0061R1]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 `__has_include`はインクルードするファイルが存在するかどうかを返す述語である。
@@ -95,4 +103,4 @@ has_include.cpp:23:4: warning: &amp;#34;fuga&amp;#34; is not found [-W#warnings]
 ```
 
 ## 参照
-- [P0061R1 __has_include for C++17](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0061r1.html)
+- [P0061R1 __has_include for C++17](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0061r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>十六進浮動小数点数リテラル [P0245R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/hexadecimal_floating_literals.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/hexadecimal_floating_literals.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/hexadecimal_floating_literals.md b/lang/cpp17/hexadecimal_floating_literals.md
index 6515d1282..c239faf66 100644
--- a/lang/cpp17/hexadecimal_floating_literals.md
+++ b/lang/cpp17/hexadecimal_floating_literals.md
@@ -1,5 +1,13 @@
 # 十六進浮動小数点数リテラル [P0245R1]
 * cpp17[meta cpp]
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 * [mathjax enable]
 
 ## 概要
@@ -77,4 +85,4 @@ C99 で十六進浮動小数リテラルが採用された。
 ## 参照
 
 * [P0245R0 Hexadecimal floating literals for C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0245r0.html)
-* [P0245R1 Hexadecimal floating literals for C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0245r1.html)
+* [P0245R1 Hexadecimal floating literals for C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0245r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr if 文 [P0292R2] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/if_constexpr.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/if_constexpr.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/if_constexpr.md b/lang/cpp17/if_constexpr.md
index 4d528aedf..0c1b36004 100644
--- a/lang/cpp17/if_constexpr.md
+++ b/lang/cpp17/if_constexpr.md
@@ -1,6 +1,14 @@
 # constexpr if 文 [P0292R2]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 constexpr if文とは、文を条件付きコンパイルすることを目的とした制御構文である。
@@ -433,7 +441,7 @@ template &amp;lt;int arg, typename ... Args&amp;gt; int do_something(Args... args) {
 旧来のテンプレート特殊化・SFINAE・タグディスパッチ・EBO・再帰的な派生などの技法を用いた複雑な代替手段もあるが、
 それらを一つ一つここで紹介することは避ける。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [`std::conditional`](/reference/type_traits/conditional.md)
 - [C++23 定数式の文脈での`bool`への縮小変換を許可](/lang/cpp23/narrowing_contextual_conversions_to_bool.md)
@@ -469,4 +477,4 @@ template &amp;lt;int arg, typename ... Args&amp;gt; int do_something(Args... args) {
 - [C++1z if constexpr文 - Faith and Brave - C++で遊ぼう](https://faithandbrave.hateblo.jp/entry/2016/12/22/171238)
 - [[cfe-dev] Clang getting involved](https://lists.llvm.org/pipermail/cfe-dev/2014-March/035801.html)
 - [`__if_exists` Statement | Microsoft Docs](https://docs.microsoft.com/ja-jp/cpp/cpp/if-exists-statement)
-- [Issue 2518: Conformance requirements and #error/#warning - WG21 CWG Issues](https://wg21.cmeerw.net/cwg/issue2518)
+- [Issue 2518: Conformance requirements and #error/#warning - WG21 CWG Issues](https://wg21.cmeerw.net/cwg/issue2518)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>インライン変数 [P0386R2] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/inline_variables.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/inline_variables.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/inline_variables.md b/lang/cpp17/inline_variables.md
index f10059f8f..20ef21ee3 100644
--- a/lang/cpp17/inline_variables.md
+++ b/lang/cpp17/inline_variables.md
@@ -1,6 +1,14 @@
 # インライン変数 [P0386R2]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 外部リンケージを持つ変数に対しインライン`inline`を指定することで、複数の翻訳単位で同じ変数を定義できるようになり、変数の実体はただ一つとすることができる。
@@ -273,7 +281,7 @@ func
 
 表示されるアドレスは環境によって異なる可能性がある。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 constexpr](/lang/cpp11/constexpr.md)
 
 ## 参照
@@ -283,4 +291,4 @@ func
 - [P0386R2 - Inline Variables](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf), 2016-06-24
 - [P0607R0 - Inline Variables for the Standard Library](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0607r0.html), 2017-02-27
 - [C++1z インライン変数 - Faith and Brave - C++で遊ぼう](https://faithandbrave.hateblo.jp/entry/2016/11/11/172954)
-- [インライン変数が翻訳単位毎に別々の実体となってしまう - Stackoverflow](https://ja.stackoverflow.com/questions/93046/)
+- [インライン変数が翻訳単位毎に別々の実体となってしまう - Stackoverflow](https://ja.stackoverflow.com/questions/93046/)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式での*thisのコピーキャプチャ [P0018R3] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/lambda_capture_of_this_by_value.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/lambda_capture_of_this_by_value.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/lambda_capture_of_this_by_value.md b/lang/cpp17/lambda_capture_of_this_by_value.md
index 391681d8e..2340d2a4f 100644
--- a/lang/cpp17/lambda_capture_of_this_by_value.md
+++ b/lang/cpp17/lambda_capture_of_this_by_value.md
@@ -1,6 +1,14 @@
 # ラムダ式での*thisのコピーキャプチャ [P0018R3]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++14までラムダ式で`[this]`のようにキャプチャをすると、`this`ポインタがコピーされていた。その場合、非同期処理のような状況で、ラムダ式の関数オブジェクトが呼び出されたときに、`this`ポインタが指すオブジェクトの寿命が尽きている場合がある。
 
@@ -68,7 +76,7 @@ exit
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 ラムダ式](/lang/cpp11/lambda_expressions.md)
 
 
@@ -76,4 +84,4 @@ exit
 - [P0018R0 Lambda Capture of `*this` by Value](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0018r0.html)
 - [P0018R1 Lambda Capture of `*this` by Value](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0018r1.html)
 - [P0018R2 Lambda Capture of `*this` by Value](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0018r2.html)
-- [P0018R3 Lambda Capture of `*this` by Value as `[=,*this]`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0018r3.html)
+- [P0018R3 Lambda Capture of `*this` by Value as `[=,*this]`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0018r3.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>noexcept付きのラムダ式から変換する関数ポインタにnoexceptを付加する -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/lambda_to_noexcept_function_pointer.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/lambda_to_noexcept_function_pointer.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/lambda_to_noexcept_function_pointer.md b/lang/cpp17/lambda_to_noexcept_function_pointer.md
index 8d1f0c3b1..6b8d71d82 100644
--- a/lang/cpp17/lambda_to_noexcept_function_pointer.md
+++ b/lang/cpp17/lambda_to_noexcept_function_pointer.md
@@ -1,6 +1,14 @@
 # noexcept付きのラムダ式から変換する関数ポインタにnoexceptを付加する
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 キャプチャを持たない非ジェネリックなラムダ式は、関数ポインタに変換できる。そのラムダ式が例外を投げない指定をされていた場合、変換された関数ポインタもまた`noexcept`を持つ。
 
@@ -40,7 +48,7 @@ true
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 例外仕様を型システムの一部にする](exception_spec_be_part_of_the_type_system.md)
 - [C++11 ラムダ式](/lang/cpp11/lambda_expressions.md)
 - [C++14 ジェネリックラムダ](/lang/cpp14/generic_lambdas.md)
@@ -48,4 +56,3 @@ true
 
 ## 参照
 - [CWG Issue 1722. Should lambda to function pointer conversion function be `noexcept`?](https://wg21.cmeerw.net/cwg/issue1722)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[maybe_unused]]属性 [P0212R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/maybe_unused.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/maybe_unused.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/maybe_unused.md b/lang/cpp17/maybe_unused.md
index f04dbd6f8..7832e097e 100644
--- a/lang/cpp17/maybe_unused.md
+++ b/lang/cpp17/maybe_unused.md
@@ -1,6 +1,14 @@
 # [[maybe_unused]]属性 [P0212R1]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 `[[maybe_unused]]`属性は意図的に未使用の要素を定義していることをコンパイラに伝え、警告を抑制するための属性である。
@@ -113,9 +121,9 @@ maybe_unused.cpp:12:8: warning: unused variable &amp;#39;b2&amp;#39; [-Wunused-variable]
 
 P0068R0では`[[unused]]`という名前で提案されたが、いわゆる自転車置き場の議論の末の投票によって、採用された名前は`[[maybe_unused]]`になった。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 属性構文](/lang/cpp11/attributes.md)
 
 ## 参照
 - [P0068R0 Proposal of &amp;amp;#91;&amp;amp;#91;unused&amp;amp;#93;&amp;amp;#93;, &amp;amp;#91;&amp;amp;#91;nodiscard&amp;amp;#93;&amp;amp;#93; and &amp;amp;#91;&amp;amp;#91;fallthrough&amp;amp;#93;&amp;amp;#93; attributes.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0068r0.pdf)
-- [P0212R1 Wording for [[maybe_unused]] attribute.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0212r1.pdf)
+- [P0212R1 Wording for [[maybe_unused]] attribute.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0212r1.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>入れ子名前空間の定義 [N4230] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/nested_namespace.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/nested_namespace.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/nested_namespace.md b/lang/cpp17/nested_namespace.md
index 0fb30e022..2745b5513 100644
--- a/lang/cpp17/nested_namespace.md
+++ b/lang/cpp17/nested_namespace.md
@@ -1,6 +1,14 @@
 # 入れ子名前空間の定義 [N4230]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 一度の定義だけで入れ子状になった名前空間を定義可能となる。
 
@@ -53,7 +61,7 @@ a legacy nested namespace definition is workded.
 この機能はC++0x当時から提案されており、以前の提案等については以下参照されたい。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++20 入れ子名前空間定義でのインライン名前空間](/lang/cpp20/nested_inline_mamespaces.md)
 
 
@@ -61,4 +69,4 @@ a legacy nested namespace definition is workded.
 - 言語仕様: §7.3.1 §A.6
 - [N4230 Nested namespace definition (revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4230.html)
     - [N1524 Nested Namespace Definition Proposal](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1524.htm)
-    - [N2869 State of C++ Evolution (Post San Francisco 2008)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2869.html)
+    - [N2869 State of C++ Evolution (Post San Francisco 2008)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2869.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>波括弧初期化の型推論の新規則 [N3922] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.md b/lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.md
index d457cf6ef..2a635eaec 100644
--- a/lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.md
+++ b/lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.md
@@ -1,6 +1,14 @@
 # 波括弧初期化の型推論の新規則 [N3922]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 これまでは `auto var{arg};` (単一要素), `auto var{arg1, arg2,...};` (複数要素) で `var` はいずれも
@@ -83,7 +91,7 @@ i
 が提案されたが採用されなかった。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 * [C++11 初期化リスト](/lang/cpp11/initializer_lists.md)
 
@@ -92,4 +100,4 @@ i
 
 * [N3681 Auto and braced-init-lists](http://open-std.org/JTC1/SC22/WG21/docs/papers/2013/n3681.html)
 * [N3912 Auto and braced-init-lists, continued](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3912.html)
-* [N3922 New Rules for auto deduction from braced-init-list](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3922.html)
+* [N3922 New Rules for auto deduction from braced-init-list](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3922.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[nodiscard]]属性 [P0189R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/nodiscard.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/nodiscard.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/nodiscard.md b/lang/cpp17/nodiscard.md
index 2328e65a4..489a4d2d1 100644
--- a/lang/cpp17/nodiscard.md
+++ b/lang/cpp17/nodiscard.md
@@ -1,6 +1,14 @@
 # [[nodiscard]]属性 [P0189R1]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 `[[nodiscard]]`属性は関数の戻り値を破棄してはならないことをコンパイラに伝え、破棄した場合に警告するための属性である。
@@ -48,7 +56,7 @@ nodiscard.cpp:11:3: warning: ignoring return value of function declared with &amp;#39;no
 2 warnings generated.
 ```
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 属性構文](/lang/cpp11/attributes.md)
 - [C++20 `[[nodiscard]]`をコンストラクタのオーバーロードごとに付加できるようにする](/lang/cpp20/nodiscard_for_constructors.md)
     - C++17対応のコンパイラでも使用できる可能性がある
@@ -58,4 +66,4 @@ nodiscard.cpp:11:3: warning: ignoring return value of function declared with &amp;#39;no
 
 ## 参照
 - [P0068R0 Proposal of &amp;amp;#91;&amp;amp;#91;unused&amp;amp;#93;&amp;amp;#93;, &amp;amp;#91;&amp;amp;#91;nodiscard&amp;amp;#93;&amp;amp;#93; and &amp;amp;#91;&amp;amp;#91;fallthrough&amp;amp;#93;&amp;amp;#93; attributes.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0068r0.pdf)
-- [P0189R1 Wording for [[nodiscard]] attribute.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0189r1.pdf)
+- [P0189R1 Wording for [[nodiscard]] attribute.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0189r1.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>不明な属性を無視する [P0283R2] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/non_standard_attributes.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/non_standard_attributes.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/non_standard_attributes.md b/lang/cpp17/non_standard_attributes.md
index d93d20f32..ad9fbd589 100644
--- a/lang/cpp17/non_standard_attributes.md
+++ b/lang/cpp17/non_standard_attributes.md
@@ -1,6 +1,14 @@
 # 不明な属性を無視する [P0283R2]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 コンパイラにとって不明な属性は無視する。
@@ -46,8 +54,8 @@ non_standard_attributes.cpp:7:3: warning: unknown attribute &amp;#39;unknown_attribute&amp;#39;
 
 プログラマが意図的に未知の属性を指定していて、警告が不要な場合はコンパイラオプションで警告を抑制できる。Clang++の場合は`-Wno-unknown-attributes`オプション、GCCの場合は`-Wno-attributes`オプションを指定する。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 属性構文](/lang/cpp11/attributes.md)
 
 ## 参照
-- [P0283R2 Standard and non-standard attributes.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0283r2.html)
+- [P0283R2 Standard and non-standard attributes.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0283r2.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>using宣言のパック展開 [P0195R2] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/pack_expansions_in_using.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/pack_expansions_in_using.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/pack_expansions_in_using.md b/lang/cpp17/pack_expansions_in_using.md
index fcf3d4039..de332e0a1 100644
--- a/lang/cpp17/pack_expansions_in_using.md
+++ b/lang/cpp17/pack_expansions_in_using.md
@@ -1,6 +1,14 @@
 # using宣言のパック展開 [P0195R2]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++17にて`using`宣言の仕様が拡張され、パラメータパックが指定できるようになった。
@@ -174,8 +182,8 @@ ForString:hello2
 この問題を解決するためC++17では`using`でパック展開ができるようになった。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [可変引数テンプレート](/lang/cpp11/variadic_templates.md)
 
 ## 参照
-- [P0195R2 Pack expansions in using-declarations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0195r2.html)
+- [P0195R2 Pack expansions in using-declarations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0195r2.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>更新された定義済みマクロ -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/predefined_macros.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/predefined_macros.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;更新された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++17に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative_page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cplusplus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201703L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++のバージョン値を表す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;新規マクロは以下：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__STDCPP_DEFAULT_NEW_ALIGNMENT__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実装定義&lt;/td&gt;
&lt;td&gt;動的メモリ確保時のデフォルトのアライメント値&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;dynamic_memory_allocation_for_over-aligned_data.html&#34;&gt;C++17 アライメント指定されたデータの動的メモリ確保&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非推奨だった古い例外仕様を削除 [P0003R5] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/remove_deprecated_exception_specifications.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/remove_deprecated_exception_specifications.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/remove_deprecated_exception_specifications.md b/lang/cpp17/remove_deprecated_exception_specifications.md
index 253a54d7c..127715a9b 100644
--- a/lang/cpp17/remove_deprecated_exception_specifications.md
+++ b/lang/cpp17/remove_deprecated_exception_specifications.md
@@ -1,6 +1,14 @@
 # 非推奨だった古い例外仕様を削除 [P0003R5]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++11で[`noexcept`](/lang/cpp11/noexcept.md)機能が入ったことにより、従来の`throw`キーワードを使用した「例外仕様 (Exception Specification)」は「動的例外仕様 (Dynamic Exception Specification)」という名前に変更され、非推奨となっていた。
 
@@ -54,11 +62,11 @@ C++固有の問題としては、以下のような問題があった：
 C++でもJavaを含むこれらの問題は認識されており、動的例外仕様の代わりとなるnoexcept例外仕様が新設された。代わりの機能ができたことで動的例外仕様は非推奨となり、noexcept例外仕様への移行する猶予期間が設けられた後、C++17でこの機能が削除されることとなった。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 noexcept](/lang/cpp11/noexcept.md)
 - [C++20 `throw()`による例外送出しない指定を削除](/lang/cpp20/remove_deprecated_nothrow_exception_specification.md)
 
 
 ## 参照
 - [P0003R4 Removing Deprecated Exception Specifications from C++17](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0003r4.html)
-- [P0003R5 Removing Deprecated Exception Specifications from C++17](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0003r5.html)
+- [P0003R5 Removing Deprecated Exception Specifications from C++17](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0003r5.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非推奨だった bool 型に対するインクリメント演算子を削除 [P0002R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/remove_deprecated_increment_of_bool.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/remove_deprecated_increment_of_bool.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/remove_deprecated_increment_of_bool.md b/lang/cpp17/remove_deprecated_increment_of_bool.md
index 261ef394b..3ff243c75 100644
--- a/lang/cpp17/remove_deprecated_increment_of_bool.md
+++ b/lang/cpp17/remove_deprecated_increment_of_bool.md
@@ -1,6 +1,14 @@
 # 非推奨だった bool 型に対するインクリメント演算子を削除 [P0002R1]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++17では`bool`型に対する前置および後置の`operator ++`を削除する。
@@ -146,7 +154,7 @@ Therac-25はカナダ原子力公社(AECL)とフランスCGR-MeV社によって
 C++14で`std::exchange()`が導入されたことにより、唯一使いみちのあった後置の`operator++`の必要性もなくなり、C++17で削除されたと推測される。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [`std::exchange()`](/reference/utility/exchange.md)
 
@@ -163,4 +171,4 @@ C++14で`std::exchange()`が導入されたことにより、唯一使いみち
     1. [An Investigation of Therac-25 Accidents - I](http://web.archive.org/web/20171206153409/http://courses.cs.vt.edu/professionalism/Therac_25/Therac_1.html)
     2. [Therac-25 - II](http://web.archive.org/web/20171212115910/http://courses.cs.vt.edu/professionalism/Therac_25/Therac_2.html)
     3. [Therac-25 - III](http://web.archive.org/web/20170215125239/http://courses.cs.vt.edu/professionalism/Therac_25/Therac_3.html)
-- [Therac-25 - Wikipedia](https://en.wikipedia.org/wiki/Therac-25)
+- [Therac-25 - Wikipedia](https://en.wikipedia.org/wiki/Therac-25)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非推奨だったregisterキーワードを削除 [P0001R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/remove_deprecated_use_of_the_register_keyword.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/remove_deprecated_use_of_the_register_keyword.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/remove_deprecated_use_of_the_register_keyword.md b/lang/cpp17/remove_deprecated_use_of_the_register_keyword.md
index a10725393..bffa62989 100644
--- a/lang/cpp17/remove_deprecated_use_of_the_register_keyword.md
+++ b/lang/cpp17/remove_deprecated_use_of_the_register_keyword.md
@@ -1,6 +1,14 @@
 # 非推奨だったregisterキーワードを削除 [P0001R1]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++17ではC++11で非推奨化された`register`キーワードを削除する。
@@ -17,11 +25,11 @@ register int v = 42;
 
 `register`キーワードはC++17標準では使用しなくなるが、将来のために予約されたままとなる。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [C++11 registerキーワードを非推奨化](/lang/cpp11/deprecation_of_the_register_keyword.md)
 
 ## 参照
 
 - [P0001R1: Remove Deprecated Use of the register Keyword](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0001r1.html)
-- [P0001R0: Remove Deprecated Use of the register Keyword](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0001r0.html)
+- [P0001R0: Remove Deprecated Use of the register Keyword](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0001r0.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>トライグラフの削除 [N4086] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/removing_trigraphs.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/removing_trigraphs.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/removing_trigraphs.md b/lang/cpp17/removing_trigraphs.md
index 76051b646..8b0967eab 100644
--- a/lang/cpp17/removing_trigraphs.md
+++ b/lang/cpp17/removing_trigraphs.md
@@ -1,6 +1,14 @@
 # トライグラフの削除 [N4086]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 トライグラフが削除された。
@@ -91,4 +99,4 @@ GCC などのコンパイラはデフォルトでトライグラフを無効に
 ## 参照
 
 * [N3981 Removing trigraphs??!](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3981.html)
-* [N4086 Removing trigraphs??!](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4086.html)
+* [N4086 Removing trigraphs??!](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4086.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>参照メンバをもつクラスの置き換え [P0137R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/replacement_of_class_objects_containing_reference_members.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/replacement_of_class_objects_containing_reference_members.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/replacement_of_class_objects_containing_reference_members.md b/lang/cpp17/replacement_of_class_objects_containing_reference_members.md
index 4ea19fb20..2aa783929 100644
--- a/lang/cpp17/replacement_of_class_objects_containing_reference_members.md
+++ b/lang/cpp17/replacement_of_class_objects_containing_reference_members.md
@@ -1,6 +1,14 @@
 # 参照メンバをもつクラスの置き換え [P0137R1]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `placement new`を使用して、参照型や`const`メンバ変数を含む構造体/クラスを置き換える際、オブジェクト生存期間(lifetime)に基づいた最適化の抑止をコンパイラに伝える関数[`std::launder()`](/reference/new/launder.md)を用いることで、未定義動作となるような文脈で参照型や`const`メンバ変数へのアクセスができる。
 
@@ -92,4 +100,3 @@ public:
 - [Pointer safety and placement new](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4303.html)
 - [Implementability of std::optional （std :: optionalの実装可能性） ](https://groups.google.com/a/isocpp.org/forum/#!msg/std-proposals/93ebFsxCjvQ/Q5LUnO8339wJ)
 - [Lifetime - cppreference.com](https://en.cppreference.com/w/cpp/language/lifetime)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>if文とswitch文の条件式と初期化を分離 [P0305R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/selection_statements_with_initializer.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/selection_statements_with_initializer.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/selection_statements_with_initializer.md b/lang/cpp17/selection_statements_with_initializer.md
index da175269d..b72260aa5 100644
--- a/lang/cpp17/selection_statements_with_initializer.md
+++ b/lang/cpp17/selection_statements_with_initializer.md
@@ -1,6 +1,14 @@
 # if文とswitch文の条件式と初期化を分離 [P0305R1]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 従来`for`文しか使用できなかった初期化を`if`文と`switch`文でも使えるようになった。
@@ -203,10 +211,10 @@ if (it != m.end()) { return it-&amp;gt;size(); }
 新しい概念を教えたり広めたりするコストが掛かる。さらに`for`文と文法の一貫性を取れる機会が失われてしまう問題がある。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++20 初期化式をともなう範囲for文](/lang/cpp20/range-based_for_statements_with_initializer.md)
 - [C++23 初期化文での型の別名宣言を許可](/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md)
 
 
 ## 参照
-- [P0305R1 Selection statements with initializer.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0305r1.html)
+- [P0305R1 Selection statements with initializer.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0305r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>構造化束縛 [P0217R3] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/structured_bindings.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/structured_bindings.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/structured_bindings.md b/lang/cpp17/structured_bindings.md
index 9d9184fe2..261e9ac82 100644
--- a/lang/cpp17/structured_bindings.md
+++ b/lang/cpp17/structured_bindings.md
@@ -1,6 +1,14 @@
 # 構造化束縛 [P0217R3]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 「構造化束縛 (structured bindings)」は、組やタプル、配列や構造体を分解して各要素を取り出す機能である。
 
@@ -326,7 +334,7 @@ auto { w, {x, y}, z } = f(); // このような、tuple内にあるpairを同時
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++20 friend指定された関数内から構造化束縛を使用して非公開メンバ変数にアクセスすることを許可](/lang/cpp20/allow_structured_bindings_to_accessible_members.md)
 - [C++20 構造化束縛がカスタマイゼーションポイントを見つけるルールを緩和](/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.md)
 - [C++20 構造化束縛を拡張して通常の変数宣言のように使用できるようにする](/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.md)
@@ -341,4 +349,4 @@ auto { w, {x, y}, z } = f(); // このような、tuple内にあるpairを同時
 - [P0217R2 Proposed wording for structured bindings](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0217r2.html)
 - [P0217R3 Proposed wording for structured bindings](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0217r3.html)
 - [P0615R0 Renaming for structured bindings](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0615r0.html)
-- [LWG DR2770 `tuple_size&amp;lt;const T&amp;gt;` specialization breaks decomposition declarations](http://wg21.cmeerw.net/lwg/issue2770)
+- [LWG DR2770 `tuple_size&amp;lt;const T&amp;gt;` specialization breaks decomposition declarations](http://wg21.cmeerw.net/lwg/issue2770)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>クラステンプレートのテンプレート引数推論 [P0091R3] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/type_deduction_for_class_templates.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/type_deduction_for_class_templates.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/type_deduction_for_class_templates.md b/lang/cpp17/type_deduction_for_class_templates.md
index ce3f0a7e8..4c7d68427 100644
--- a/lang/cpp17/type_deduction_for_class_templates.md
+++ b/lang/cpp17/type_deduction_for_class_templates.md
@@ -1,6 +1,14 @@
 # クラステンプレートのテンプレート引数推論 [P0091R3]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 コンストラクタに渡される値によって、クラステンプレートのテンプレート引数を推論する。
 
@@ -273,7 +281,7 @@ int main()
 - 循環的な複雑さ (Cyclomatic complexity) を軽減するために大きな関数をクラスで置き換える便利な手法が、関数テンプレートでは使用できなかった
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`std::pair`の推論補助](/reference/utility/pair/op_deduction_guide.md)
 - [`std::tuple`の推論補助](/reference/tuple/tuple/op_deduction_guide.md)
     - `std::pair`と`std::tuple`の推論補助の例からは、[`std::make_pair()`](/reference/utility/make_pair.md)のような生成関数の必要性が薄くなることと、標準ライブラリ内の生成関数と推論補助で、小さな機能的差異があることがわかる
@@ -291,4 +299,4 @@ int main()
 - [P0620R0 Drafting for class template argument deduction issues](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0620r0.html)
 - [LWG Issue 2981. Remove redundant deduction guides from standard library](https://wg21.cmeerw.net/lwg/issue2981)
 - [P0702R1 Language support for Constructor Template Argument Deduction](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0702r1.html)
-- [Class Template Argument Deduction - A New Abstraction - Zhihao Yuan - CppCon 2017](https://raw.githubusercontent.com/CppCon/CppCon2017/master/Presentations/Class%20Template%20Argument%20Deduction%20-%20A%20New%20Abstraction/Class%20Template%20Argument%20Deduction%20-%20A%20New%20Abstraction%20-%20Zhihao%20Yuan%20-%20CppCon%202017.pdf)
+- [Class Template Argument Deduction - A New Abstraction - Zhihao Yuan - CppCon 2017](https://raw.githubusercontent.com/CppCon/CppCon2017/master/Presentations/Class%20Template%20Argument%20Deduction%20-%20A%20New%20Abstraction/Class%20Template%20Argument%20Deduction%20-%20A%20New%20Abstraction%20-%20Zhihao%20Yuan%20-%20CppCon%202017.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>属性の名前空間指定に繰り返しをなくす [P0028R4] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/using_attribute_namespaces.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/using_attribute_namespaces.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/using_attribute_namespaces.md b/lang/cpp17/using_attribute_namespaces.md
index bfc96aaa4..bd23c19a7 100644
--- a/lang/cpp17/using_attribute_namespaces.md
+++ b/lang/cpp17/using_attribute_namespaces.md
@@ -1,6 +1,14 @@
 # 属性の名前空間指定に繰り返しをなくす [P0028R4]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 複数の属性を指定する際`using`により名前空間を指定できる。
@@ -57,8 +65,8 @@ using_attribute_namespaces.cpp:13:13: error: attribute with scope specifier cann
 1 error generated.
 ```
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 属性構文](/lang/cpp11/attributes.md)
 
 ## 参照
-- [P0028R4 Using attribute namespaces without repetition.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0028r4.html)
+- [P0028R4 Using attribute namespaces without repetition.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0028r4.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>UTF-8文字リテラル [N4267] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/utf8_character_literals.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp17/utf8_character_literals.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/utf8_character_literals.md b/lang/cpp17/utf8_character_literals.md
index 479966b3e..c486f134d 100644
--- a/lang/cpp17/utf8_character_literals.md
+++ b/lang/cpp17/utf8_character_literals.md
@@ -1,6 +1,14 @@
 # UTF-8文字リテラル [N4267]
 * cpp17[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++17に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++14までは、UTF-8エンコーディングであることを示す`u8`プレフィックスを、文字列リテラルに対してのみ指定できた。C++17では、文字リテラルに対しても`u8`プレフィックスを付けられる。
 
@@ -18,7 +26,7 @@ C++20ではUTF-8文字リテラルの型が[`char`ではなく`char8_t`になる
     - そのコードポイント範囲を超える値が指定された場合、プログラムは不適格となる
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 UTF-8文字列リテラル](/lang/cpp11/utf8_string_literals.md)
 - [C++11 `char16_t`と`char32_t`](/lang/cpp11/char16_32.md)
 - [C++20 UTF-8エンコーディングされた文字の型として`char8_t`を追加](/lang/cpp20/char8_t.md)
@@ -29,4 +37,3 @@ C++20ではUTF-8文字リテラルの型が[`char`ではなく`char8_t`になる
 - [N4267 Adding `u8` character literals](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4267.html)
 - [C0 Controls and Basic Latin - The Unicode Consortium](http://www.unicode.org/charts/PDF/U0000.pdf)
 - [基本ラテン文字 (Unicodeのブロック) - Wikipedia](https://ja.wikipedia.org/wiki/%E5%9F%BA%E6%9C%AC%E3%83%A9%E3%83%86%E3%83%B3%E6%96%87%E5%AD%97_(Unicode%E3%81%AE%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF))
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>特殊化のアクセスチェック [P0692R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/access_checking_on_specializations.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/access_checking_on_specializations.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/access_checking_on_specializations.md b/lang/cpp20/access_checking_on_specializations.md
index def88c428..b80a26c32 100644
--- a/lang/cpp20/access_checking_on_specializations.md
+++ b/lang/cpp20/access_checking_on_specializations.md
@@ -1,6 +1,14 @@
 # 特殊化のアクセスチェック [P0692R1]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 クラス`C`の内側で宣言されたクラス（ローカルクラス`impl`）が`private/protected`で宣言されている場合、テンプレートの文脈で`C`の外側から`impl`を参照することは禁止されていた。しかし、実際にはほぼ全てのコンパイラでこれは許可されており、実際に使用されていた。
@@ -145,4 +153,3 @@ namespace option3 {
 ## 参照
 
 - [P0692R1 Access Checking on Specializations](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0692r1.html)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>関数テンプレートに明示的に型指定した場合にADLで見つからない問題を修正 [P0846R0] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/adl_and_function_templates_that_are_not_visible.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/adl_and_function_templates_that_are_not_visible.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/adl_and_function_templates_that_are_not_visible.md b/lang/cpp20/adl_and_function_templates_that_are_not_visible.md
index ceb421b9b..fe061cd64 100644
--- a/lang/cpp20/adl_and_function_templates_that_are_not_visible.md
+++ b/lang/cpp20/adl_and_function_templates_that_are_not_visible.md
@@ -1,6 +1,14 @@
 # 関数テンプレートに明示的に型指定した場合にADLで見つからない問題を修正 [P0846R0]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++17までは、以下のコードが不適格だった：
 
@@ -61,4 +69,4 @@ int main() {
 ```
 
 ## 参照
-- [P0846R0 ADL and Function Templates that are not Visible](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0846r0.html)
+- [P0846R0 ADL and Function Templates that are not Visible](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0846r0.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>丸カッコの値リストからの集成体初期化を許可 [P0960R3] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md b/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md
index 91b855942..b9686a4ed 100644
--- a/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md
+++ b/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md
@@ -2,6 +2,14 @@
 
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++20では、波カッコと同様に丸カッコでも集成体初期化できる。
@@ -122,11 +130,11 @@ explicit A(T1 t1, … , Tk tk);
 しかし、前者は参照型でないメンバーを左辺値で初期化することができない(関数テンプレートではないことに注意)。
 後者はムーブが必要になってしまうという問題があった。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [一様初期化](/lang/cpp11/uniform_initialization.md)
 
 ## 参照
 
 - [P0960R3 Allow initializing aggregates from a parenthesized list of values](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0960r3.html)
-- [C++ Core Guidelines ES.23: Prefer the {}-initializer syntax](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es23-prefer-the--initializer-syntax) 常に波カッコで初期化することを推奨している。
+- [C++ Core Guidelines ES.23: Prefer the {}-initializer syntax](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es23-prefer-the--initializer-syntax) 常に波カッコで初期化することを推奨している。
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式のキャプチャとして[=, this]を許可する [P0409R2] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allow_lambda_capture_equal_this.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/allow_lambda_capture_equal_this.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allow_lambda_capture_equal_this.md b/lang/cpp20/allow_lambda_capture_equal_this.md
index 715e4dbad..8c8cc2e0b 100644
--- a/lang/cpp20/allow_lambda_capture_equal_this.md
+++ b/lang/cpp20/allow_lambda_capture_equal_this.md
@@ -1,6 +1,14 @@
 # ラムダ式のキャプチャとして[=, this]を許可する [P0409R2]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++17まで、ラムダ式のキャプチャとして`[=, this]`は指定できなかった。これは、デフォルトコピーキャプチャ (`=`) に、`this`ポインタのコピーキャプチャが含まれるため、重複指定はできないというものである。
 
@@ -34,10 +42,10 @@ int main()
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 ラムダ式](/lang/cpp11/lambda_expressions.md)
 - [C++20 `[=]`による`this`の暗黙のキャプチャを非推奨化](deprecate_implicit_capture_of_this_via_defcopy.md)
 
 
 ## 参照
-- [P0409R2 Allow lambda capture `[=, this]`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0409r2.html)
+- [P0409R2 Allow lambda capture `[=, this]`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0409r2.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式の初期化キャプチャでのパック展開を許可 [P0780R2] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md b/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md
index eaf47d8df..8bece858e 100644
--- a/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md
+++ b/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md
@@ -1,6 +1,14 @@
 # ラムダ式の初期化キャプチャでのパック展開を許可 [P0780R2]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 [ラムダ式](/lang/cpp11/lambda_expressions.md)の[初期化キャプチャ](../cpp14/initialize_capture.md)で、パック展開ができるようになった。
 
@@ -130,11 +138,11 @@ auto f(Args... args) {
 
 のような位置で提案されていた。これが現在のようになったのは、`...` の位置が導入する名前に先行する、既存の慣行と一致するようにするためである。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 ラムダ式](/lang/cpp11/lambda_expressions.md)
 - [C++14 ラムダ式の初期化キャプチャ](../cpp14/initialize_capture.md)
 
 ## 参照
 - [P0780R2 Allow pack expansion in lambda init-capture](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0780r2.html)
 - [CWG 1760: Access of member corresponding to init-capture](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1760)
-- [P2095R0 Resolve lambda init-capture pack grammar (CWG2378)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2095r0.html)
+- [P2095R0 Resolve lambda init-capture pack grammar (CWG2378)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2095r0.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>friend指定された関数内から構造化束縛を使用して非公開メンバ変数にアクセスすることを許可 [P0969R0] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allow_structured_bindings_to_accessible_members.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/allow_structured_bindings_to_accessible_members.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allow_structured_bindings_to_accessible_members.md b/lang/cpp20/allow_structured_bindings_to_accessible_members.md
index a66e450c0..e00dafa58 100644
--- a/lang/cpp20/allow_structured_bindings_to_accessible_members.md
+++ b/lang/cpp20/allow_structured_bindings_to_accessible_members.md
@@ -1,6 +1,14 @@
 # friend指定された関数内から構造化束縛を使用して非公開メンバ変数にアクセスすることを許可 [P0969R0]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++17までの構造化束縛では、publicアクセス指定されたメンバ変数のみ抽出できる仕様となっていた。
 
@@ -43,9 +51,9 @@ int main() {
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 構造化束縛](/lang/cpp17/structured_bindings.md)
 
 
 ## 参照
-- [P0969R0 Allow structured bindings to accessible members](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0969r0.pdf)
+- [P0969R0 Allow structured bindings to accessible members](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0969r0.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>定数式からの仮想関数の呼び出しを許可 [P1064R0] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/allow_virtual_function_calls_in_constant_expressions.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.md b/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.md
index 8f9620e9b..92057fd4c 100644
--- a/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.md
+++ b/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.md
@@ -1,6 +1,14 @@
 # 定数式からの仮想関数の呼び出しを許可 [P1064R0]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++20では、仮想関数に対して`constexpr`を指定し、定数式の文脈で呼び出せるようになる。
 
@@ -28,9 +36,9 @@ int main()
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 constexpr](/lang/cpp11/constexpr.md)
 
 
 ## 参照
-- [P1064R0 Allowing Virtual Function Calls in Constant Expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1064r0.html)
+- [P1064R0 Allowing Virtual Function Calls in Constant Expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1064r0.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>定数式での`dynamic_cast`、多態的な`typeid`を許可 [P1327R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.md b/lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.md
index 71a567688..47e996222 100644
--- a/lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.md
+++ b/lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.md
@@ -1,6 +1,14 @@
 # 定数式での`dynamic_cast`、多態的な`typeid`を許可 [P1327R1]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++20より、`constexpr`関数内（定数式）で`dynamic_cast`および多態的な型に対する`typeid`を使用することができるようになる。
@@ -94,7 +102,7 @@ false
 
 その後、実装可能性に関する懸念は払拭されたため、C++23に導入される予定である。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [C++20 定数式からの仮想関数の呼び出しを許可](/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.md)
 
@@ -103,4 +111,4 @@ false
 
 - [P1327R1 Allowing dynamic_cast, polymorphic typeid in Constant Expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1327r1.html)
 - [P1328R0 Making std::type_info::operator== constexpr](https://wg21.link/P1328)
-- [P1328 Making std::type_info::operator== constexpr - cplusplus/papers](https://github.com/cplusplus/papers/issues/70)
+- [P1328 Making std::type_info::operator== constexpr - cplusplus/papers](https://github.com/cplusplus/papers/issues/70)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>new式での配列要素数の推論 [P1009R2] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/array_size_deduction_in_new-expressions.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/array_size_deduction_in_new-expressions.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/array_size_deduction_in_new-expressions.md b/lang/cpp20/array_size_deduction_in_new-expressions.md
index caa300bfa..38c8f90d9 100644
--- a/lang/cpp20/array_size_deduction_in_new-expressions.md
+++ b/lang/cpp20/array_size_deduction_in_new-expressions.md
@@ -2,6 +2,14 @@
 
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++20では、`new`式で配列の要素数を推論できる。
@@ -62,10 +70,10 @@ double* p = new double[]{1,2,3}   // エラー
 
 `new`式で要素数を必須とする強い理由がないため、推論できるようになった。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 * [丸カッコの値リストからの集成体初期化を許可](allow_initializing_aggregates_from_a_parenthesized_list_of_values.md)
 
 ## 参照
 
-* [P1009R2 Array size deduction in new-expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1009r2.pdf)
+* [P1009R2 Array size deduction in new-expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1009r2.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>定数式内での共用体のアクティブメンバの変更を許可 [P1330R0] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md b/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md
index 333be083c..3f82156d4 100644
--- a/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md
+++ b/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md
@@ -1,6 +1,14 @@
 # 定数式内での共用体のアクティブメンバの変更を許可 [P1330R0]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++20より、共用体初期化後に別のメンバを初期化する事（アクティブメンバの切り替え）が定数式で行えるようになる。
@@ -34,7 +42,7 @@ int main() {
 
 静的リフレクション機能を見据えて`std::string`の`constexpr`対応が急がれており、その障壁を取り除くべく、共用体のアクティブメンバ切り替えは定数式で許可される事となった。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [可変サイズをもつコンテナの`constexpr`化](more_constexpr_containers.md)
 
@@ -42,4 +50,4 @@ int main() {
 
 - [P1330R0 Changing the active member of a union inside constexpr](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1330r0.pdf)
 - [P0980R0 Making std::string constexpr](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
-- [std::stringのSSO(Small-string optimization)がどうなっているか調べた - melpon/qiita](https://github.com/melpon/qiita/tree/master/items/stdstringのSSO(Small-string%20optimization)がどうなっているか調べた)
+- [std::stringのSSO(Small-string optimization)がどうなっているか調べた - melpon/qiita](https://github.com/melpon/qiita/tree/master/items/stdstringのSSO(Small-string%20optimization)がどうなっているか調べた)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>UTF-8エンコーディングされた文字の型として`char8_t`を追加 [P0482R6] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/char8_t.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/char8_t.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/char8_t.md b/lang/cpp20/char8_t.md
index 68fb50beb..6d2a7d399 100644
--- a/lang/cpp20/char8_t.md
+++ b/lang/cpp20/char8_t.md
@@ -1,6 +1,14 @@
 # UTF-8エンコーディングされた文字の型として`char8_t`を追加 [P0482R6]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 UTF-8でエンコードされた文字を格納することを想定した型として、符号なし文字型`char8_t`型を追加する。
@@ -140,7 +148,7 @@ enum class char8_t : unsigned char {};
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [char16_tとchar32_t](/lang/cpp11/char16_32.md)
 - [UTF-8文字列リテラル](/lang/cpp11/utf8_string_literals.md)
@@ -171,4 +179,4 @@ enum class char8_t : unsigned char {};
 
 - [P1423R3: char8_t backward compatibility remediation](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1423r3.html)
 - [Proposal for a C/C++ language extension to support portable UTF-16](http://web.archive.org/web/20140701223639/http://www.unicode.org/~asmus/stdc-utf-16.txt)
-- [char8_tによせて - なるせにっき](https://naruse.hateblo.jp/entry/2018/12/24/013446)
+- [char8_tによせて - なるせにっき](https://naruse.hateblo.jp/entry/2018/12/24/013446)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>抽象型のチェック [P0929R2] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/checking_for_abstract_class_types.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/checking_for_abstract_class_types.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/checking_for_abstract_class_types.md b/lang/cpp20/checking_for_abstract_class_types.md
index e4000dd54..14e0f528f 100644
--- a/lang/cpp20/checking_for_abstract_class_types.md
+++ b/lang/cpp20/checking_for_abstract_class_types.md
@@ -1,6 +1,14 @@
 # 抽象型のチェック [P0929R2]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++17までは以下の仕様があったため、抽象クラスに早期の制限があった：
 
@@ -20,4 +28,4 @@ C++20ではこれを適格とし、先行宣言と同様にクラスの完全性
 
 
 ## 参照
-- [P0929R2 Checking for abstract class types](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0929r2.html)
+- [P0929R2 Checking for abstract class types](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0929r2.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>集成体クラステンプレートのテンプレート引数推論 [P1816R0] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/class_template_argument_deduction_for_aggregates.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/class_template_argument_deduction_for_aggregates.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/class_template_argument_deduction_for_aggregates.md b/lang/cpp20/class_template_argument_deduction_for_aggregates.md
index 21fd47e94..20169b4c8 100644
--- a/lang/cpp20/class_template_argument_deduction_for_aggregates.md
+++ b/lang/cpp20/class_template_argument_deduction_for_aggregates.md
@@ -1,6 +1,14 @@
 # 集成体クラステンプレートのテンプレート引数推論 [P1816R0]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++17で導入されたクラステンプレートのテンプレート引数推論は、コンストラクタ引数からテンプレート引数を推論するものであった。
 
@@ -17,7 +25,7 @@ Point p1{3.0, 4.0}; // C++17:NG C++20:OK
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 クラステンプレートのテンプレート引数推論](/lang/cpp17/type_deduction_for_class_templates.md)
 
 
@@ -25,4 +33,4 @@ Point p1{3.0, 4.0}; // C++17:NG C++20:OK
 - [P1021R4 Filling holes in Class Template Argument Deduction](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1021r4.html)
     - 提案の元になった文書
 - [P1816R0 Wording for class template argument deduction for aggregates](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1816r0.pdf)
-    - C++20に採択された提案文書
+    - C++20に採択された提案文書
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>エイリアステンプレート経由でのクラステンプレートのテンプレート引数推論 [P1814R0] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/class_template_argument_deduction_for_alias_templates.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/class_template_argument_deduction_for_alias_templates.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/class_template_argument_deduction_for_alias_templates.md b/lang/cpp20/class_template_argument_deduction_for_alias_templates.md
index 9eccf5faf..313c11a4a 100644
--- a/lang/cpp20/class_template_argument_deduction_for_alias_templates.md
+++ b/lang/cpp20/class_template_argument_deduction_for_alias_templates.md
@@ -1,6 +1,14 @@
 # エイリアステンプレート経由でのクラステンプレートのテンプレート引数推論 [P1814R0]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++17で導入されたクラステンプレートのテンプレート引数推論は、コンストラクタ引数からテンプレート引数を推論するものであった。しかし、そのクラステンプレートのエイリアステンプレートを定義した場合に、エイリアステンプレートの変数定義からはクラステンプレートのテンプレート引数を推論できない問題があった。
 
@@ -62,9 +70,9 @@ B b2(&amp;amp;d, &amp;amp;d); // エラー！ C&amp;lt;double*, double*&amp;gt;からB&amp;lt;W&amp;gt;を推論できない
 * std::integral[link /reference/concepts/integral.md]
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 クラステンプレートのテンプレート引数推論](/lang/cpp17/type_deduction_for_class_templates.md)
 
 
 ## 参照
-- [P1814R0 Wording for Class Template Argument Deduction for Alias Templates](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1814r0.html)
+- [P1814R0 Wording for Class Template Argument Deduction for Alias Templates](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1814r0.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非型テンプレートパラメータとしてクラス型を許可する [P0732R2] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/class_types_in_non-type_template_parameters.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/class_types_in_non-type_template_parameters.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/class_types_in_non-type_template_parameters.md b/lang/cpp20/class_types_in_non-type_template_parameters.md
index eea126fa7..9df91ede1 100644
--- a/lang/cpp20/class_types_in_non-type_template_parameters.md
+++ b/lang/cpp20/class_types_in_non-type_template_parameters.md
@@ -1,6 +1,14 @@
 # 非型テンプレートパラメータとしてクラス型を許可する [P0732R2]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 これまで、非型テンプレートパラメータ (non-type template parameter) としては、整数型、ポインタ、参照、[`std::nullptr_t`](/reference/cstddef/nullptr_t.md)、[プレースホルダ型](/lang/cpp17/declaring_non-type_template_arguments_with_auto.md)の値しか受け取ることが許可されていなかった。
 
@@ -107,10 +115,10 @@ int main() {
     - GCC 10では`pair`が構造的型とみなされないバグがある。GCC 11で修正済み
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 非型テンプレートパラメータの`auto`宣言](/lang/cpp17/declaring_non-type_template_arguments_with_auto.md)
 
 
 ## 参照
 - [P0732R2 Class Types in Non-Type Template Parameters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0732r2.pdf)
-- [P1907R1 Inconsistencies with non-type template parameters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1907r1.html)
+- [P1907R1 Inconsistencies with non-type template parameters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1907r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンセプト [P0734R0] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/concepts.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/concepts.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/concepts.md b/lang/cpp20/concepts.md
index 340bd7dc9..94b288806 100644
--- a/lang/cpp20/concepts.md
+++ b/lang/cpp20/concepts.md
@@ -1,6 +1,14 @@
 # コンセプト [P0734R0]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++20から導入される「コンセプト (concepts)」は、テンプレートパラメータを制約する機能である。この機能を使用することで、以下のような面でプログラミングのしやすさが向上する：
 
@@ -961,7 +969,7 @@ C++14の策定において、コンセプトの複雑さを回避して必要最
 軽量コンセプトとしてなるべく早くプログラマにこの機能を導入するつもりだったが、その後コンセプトをさらに仕様拡張としていくことを考えると、最初の設計から大幅に違ったものになってしまう懸念があった。また、コンセプトは標準ライブラリの仕様に適用すべきものであるため、より完全なものが求められた。そのため、軽量コンセプトという予定はなくなり、より時間をかけて完全なコンセプトの仕様を策定することとなり、C++20で導入されることとなった。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`&amp;lt;concepts&amp;gt;`](/reference/concepts.md)
 - [`&amp;lt;iterator&amp;gt;`](/reference/iterator.md)
 - [`&amp;lt;ranges&amp;gt;`](/reference/ranges.md)
@@ -976,4 +984,4 @@ C++14の策定において、コンセプトの複雑さを回避して必要最
 - [P1452R2 On the non-uniform semantics of return-type-requirements](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1452r2.html)
 - [P1616R1 Using unconstrained template template parameters with constrained templates](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1616r1.html)
 - [C++ Concepts - complete overview (Jakub Cislo)](http://programowaniezpasja.pl/wp-content/uploads/2019/05/Cpp_Concepts_-_complete_overview_-_Jakub_Cislo.pdf)
-- [Multiple destructors with C++ concepts - Sandor Dargo&amp;#39;s Blog](https://www.sandordargo.com/blog/2021/06/16/multiple-destructors-with-cpp-concepts)
+- [Multiple destructors with C++ concepts - Sandor Dargo&amp;#39;s Blog](https://www.sandordargo.com/blog/2021/06/16/multiple-destructors-with-cpp-concepts)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>一貫比較 [P0515R3] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/consistent_comparison.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/consistent_comparison.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/consistent_comparison.md b/lang/cpp20/consistent_comparison.md
index 53209f1cd..91c1df457 100644
--- a/lang/cpp20/consistent_comparison.md
+++ b/lang/cpp20/consistent_comparison.md
@@ -1,6 +1,14 @@
 # 一貫比較 [P0515R3]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 新しく三方比較演算子`&amp;lt;=&amp;gt;`が導入されることにより、順序付けと同値比較の6つの関係演算子（`&amp;lt;`, `&amp;lt;=`, `&amp;gt;`, `&amp;gt;=`, `==`, `!=`）を容易に実装することができるようになる。
 
@@ -776,7 +784,7 @@ struct has_vector {
 |関数/メンバポインタ|`std::strong_equality`|あらゆるポインタ変換が施された後、同じポインタ型にならなければ比較不可|
 |[`std::nullptr_t`](/reference/cstddef/nullptr_t.md)|`std::strong_equality`||
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [`&amp;lt;compare&amp;gt;`](/reference/compare.md)
     - 比較カテゴリ型
@@ -835,4 +843,4 @@ struct has_vector {
     - [P0436R1 An Extensible Approach to Obtaining Selected Operators](http://wg21.link/P0436R1)
     - [P0474R0 Comparison in C++: Basic Facilities](http://wg21.link/P0474R0)
     - [P0481R0 T. Van Eerd. “Bravely Default](http://wg21.link/P0481R0)
-    - [P0432R0 D. Stone. “Implicit and Explicit Default Comparison Operators](http://wg21.link/P0432R0)
+    - [P0432R0 D. Stone. “Implicit and Explicit Default Comparison Operators](http://wg21.link/P0432R0)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンパイル時初期化を強制する`constinit`キーワードを追加 [P1143R2] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/constinit.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/constinit.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/constinit.md b/lang/cpp20/constinit.md
index 82f66caeb..e23305588 100644
--- a/lang/cpp20/constinit.md
+++ b/lang/cpp20/constinit.md
@@ -1,6 +1,14 @@
 # コンパイル時初期化を強制する`constinit`キーワードを追加 [P1143R2]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 変数に対する`constinit`指定は、静的初期化（*static initialization*）が可能な変数に対して、その初期化がコンパイル時に完了することを保証する。
@@ -193,7 +201,7 @@ int main() {}
 
 `constinit`はキーワードとして追加されており、C++コードのすべての所で予約語として扱われる。そのため、変数名や関数名などとして使用する事はできない。これは、C++17以前に対する破壊的変更となるが、一般的な単語ではなかったため問題にならないと判断されたようである。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [C++11 `constexpr`](/lang/cpp11/constexpr.md)
 - [`mutex`のコンストラクタ](/reference/mutex/mutex/op_constructor.md)
@@ -205,4 +213,4 @@ int main() {}
 - [P1143R2 Adding the `constinit` keyword](https://wg21.link/P1143)
 - [Constant initialization - Andrzej&amp;#39;s C++ blog](https://akrzemi1.wordpress.com/2012/05/27/constant-initialization/)
 - [`mutex`のconstexprコンストラクタ - yohhoyの日記](https://yohhoy.hatenadiary.jp/entry/20120621/p1)
-- [Static Initialization Order Fiasco - in neuro](https://yohhoy.hatenadiary.jp/entry/20120621/p1)  
+- [Static Initialization Order Fiasco - in neuro](https://yohhoy.hatenadiary.jp/entry/20120621/p1)  
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ポインタから`bool`への変換を縮小変換とする [P1957R2] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md b/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md
index 0cf4402aa..7b2b886e8 100644
--- a/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md
+++ b/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md
@@ -1,6 +1,14 @@
 # ポインタから`bool`への変換を縮小変換とする [P1957R2]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 ポインタ型（メンバポインタも含む）から`bool`型への変換が、縮小変換として規定されるようになる。
@@ -55,7 +63,7 @@ std::variant&amp;lt;bool, int&amp;gt; v = b[1]; // boolを保持して構築
 
 `{}`初期化では縮小変換が禁止されているためこれは破壊的変更となるが、そのような変換は多くの場合バグの可能性が高いこと、MSVCは非リテラルのポインタから`bool`への変換を縮小変換として扱っていたことなどから、影響は少なくメリットの方が大きいと判断されたようだ。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [`std::variant::`コンストラクタ](/reference/variant/variant/op_constructor.md)
 - [`std::variant::operator=`](/reference/variant/variant/op_assign.md)
@@ -64,4 +72,4 @@ std::variant&amp;lt;bool, int&amp;gt; v = b[1]; // boolを保持して構築
 
 - [P1957R2 Converting from `T*` to `bool` should be considered narrowing (re: US 212)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1957r2.html)
 - [LWG Issue 3228. Surprising `variant` construction](https://cplusplus.github.io/LWG/issue3228)
-- [P0608R3 A sane `variant` converting constructor](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0608r3.html)
+- [P0608R3 A sane `variant` converting constructor](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0608r3.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コルーチン [P0912R5] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/coroutines.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/coroutines.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/coroutines.md b/lang/cpp20/coroutines.md
index cc7d161e0..b01763587 100644
--- a/lang/cpp20/coroutines.md
+++ b/lang/cpp20/coroutines.md
@@ -1,6 +1,14 @@
 # コルーチン [P0912R5]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 処理途中でのサスペンド(中断)／レジューム(再開)をサポートする一般化された関数として、[コルーチン](https://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%AB%E3%83%BC%E3%83%81%E3%83%B3)が導入される。
 
@@ -608,7 +616,7 @@ C++20コルーチンに関するキーワードは、いずれも接頭辞`co_`
 何度かの改名提案（[P0071R0](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0071r0.html)、[P1485R1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1485r1.html)）も提出されたが、いずれも否決されてC++20仕様に落ち着いた。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - C++20 [`&amp;lt;coroutine&amp;gt;`](/reference/coroutine.md)
 - C++23 [`&amp;lt;generator&amp;gt;`](/reference/generator.md)
 
@@ -626,4 +634,4 @@ C++20コルーチンに関するキーワードは、いずれも接頭辞`co_`
 - [C++ Coroutines: Understanding the promise type](https://lewissbaker.github.io/2018/09/05/understanding-the-promise-type)
 - [C++ Coroutines: Understanding Symmetric Transfer](https://lewissbaker.github.io/2020/05/11/understanding_symmetric_transfer)
 - [C++ co_awaiting coroutines](https://web.archive.org/web/20210421165652/https://blog.panicsoftware.com/co_awaiting-coroutines/)
-- [20分くらいでわかった気分になれるC++20コルーチン](https://www.slideshare.net/yohhoy/20c20)
+- [20分くらいでわかった気分になれるC++20コルーチン](https://www.slideshare.net/yohhoy/20c20)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>状態を持たないラムダ式を、デフォルト構築可能、代入可能とする [P0624R2] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md b/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md
index 1420fbd9f..9cad42c30 100644
--- a/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md
+++ b/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md
@@ -1,6 +1,14 @@
 # 状態を持たないラムダ式を、デフォルト構築可能、代入可能とする [P0624R2]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++17まではラムダ式の生成するクロージャ型に定義される特殊メンバ関数はコピー/ムーブコンストラクタとデストラクタのみだったが、C++20からは状態を持たない、すなわちキャプチャをしていないラムダ式の場合にのみそのクロージャ型はデフォルトコンストラクタと代入演算子を持つようになる。
@@ -155,8 +163,8 @@ set1 = set2;  // C++17まではコンパイルエラー
 
 C++20では同時に[評価されない文脈にラムダ式を書くことができるようになった](./wording_for_lambdas_in_unevaluated_contexts.md)ため、この様な場合にラムダ式のクロージャ型を直接取得し渡すことができ、余計なコードをほとんど削減することができるようになる。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [評価されない文脈でのラムダ式](./wording_for_lambdas_in_unevaluated_contexts.md)
 
 ## 参照
-- [P0624R2 Default constructible and assignable stateless lambdas](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0624r2.pdf)
+- [P0624R2 Default constructible and assignable stateless lambdas](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0624r2.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ビットフィールドのメンバ変数初期化 [P0683R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/default_member_initializers_for_bit_fields.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/default_member_initializers_for_bit_fields.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/default_member_initializers_for_bit_fields.md b/lang/cpp20/default_member_initializers_for_bit_fields.md
index b4edb5594..3d3bdb4d9 100644
--- a/lang/cpp20/default_member_initializers_for_bit_fields.md
+++ b/lang/cpp20/default_member_initializers_for_bit_fields.md
@@ -1,6 +1,14 @@
 # ビットフィールドのメンバ変数初期化 [P0683R1]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++11で導入された[非静的メンバ変数の初期化子](/lang/cpp11/non_static_data_member_initializers.md)では、ビットフィールドは対象外であった。
 
@@ -68,7 +76,7 @@ int main()
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 非静的メンバ変数の初期化](/lang/cpp11/non_static_data_member_initializers.md)
 
 
@@ -76,4 +84,3 @@ int main()
 - [P0187R0 Proposal of Bitfield Default Member Initializers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0187r0.pdf)
 - [R0187R1 Proposal/Wording for Bit-field Default Member Initializer Syntax](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0187r1.pdf)
 - [P0683R1 Default member initializers for bit-fields](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0683r1.html)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[=]によるthisの暗黙のキャプチャを非推奨化 [P0806R2] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md b/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md
index 412554fab..795b36fe4 100644
--- a/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md
+++ b/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.md
@@ -1,6 +1,14 @@
 # [=]によるthisの暗黙のキャプチャを非推奨化 [P0806R2]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++20からは、ラムダ式でのデフォルトコピーのキャプチャ指定`[=]`での`this`ポインタのキャプチャは非推奨となる。
 
@@ -38,10 +46,10 @@ int main()
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 ラムダ式](/lang/cpp11/lambda_expressions.md)
 - [C++20 ラムダ式のキャプチャとして`[=, this]`を許可する](allow_lambda_capture_equal_this.md)
 
 
 ## 参照
-- [P0806R2 Deprecate implicit capture of this via `[=]`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0806r2.html)
+- [P0806R2 Deprecate implicit capture of this via `[=]`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0806r2.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>PODを非推奨化 [P0767R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecate_pod.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/deprecate_pod.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;PODを非推奨化 [P0767R1]&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative_page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;../../reference/type_traits/is_pod.html&#34;&gt;POD (Plain Old Data) という型の分類&lt;/a&gt;は、C++11において&lt;a href=&#34;../../reference/type_traits/is_trivial.html&#34;&gt;トリビアル型&lt;/a&gt;と&lt;a href=&#34;../../reference/type_traits/is_standard_layout.html&#34;&gt;スタンダードレイアウト型&lt;/a&gt;に用語が分割された。&lt;/p&gt;
&lt;p&gt;C++20では規格の文面に残っていた「POD」の使用をやめ、スタンダードレイアウト型などのほかの型分類に置き換えた。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_pod.html&#34;&gt;is_pod&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/aligned_storage.html&#34;&gt;aligned_storage&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/aligned_union.html&#34;&gt;aligned_union&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cstddef/max_align_t.html&#34;&gt;max_align_t&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0767r1.html&#34; target=&#34;_blank&#34;&gt;P0767R1 Deprecate POD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2342.htm&#34; target=&#34;_blank&#34;&gt;N2342 POD&#39;s Revisited; Resolving Core Issue 568 (Revision 5)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://faithandbrave.hateblo.jp/entry/20081127/1227777378&#34; target=&#34;_blank&#34;&gt;C++0x POD再考 - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C++11においてPODという用語が分割された文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>添字演算子内でのカンマ演算子の使用を非推奨化 [P1161R3] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md b/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md
index b85ae365f..d5e8cabe3 100644
--- a/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md
+++ b/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md
@@ -1,6 +1,14 @@
 # 添字演算子内でのカンマ演算子の使用を非推奨化 [P1161R3]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 多次元配列クラスを設計する場合などで、単一の引数しかとれない添字演算子に`ar[x, y]`のようにカンマ演算子をオーバーロードして複数のインデックスを指定できるようにすることがあった。
 
@@ -15,8 +23,8 @@ ar[x, y]   // C++17:OK, C++20:非推奨
 既存のカンマ演算子をオーバーロードしたコードを使用する場合は、丸カッコで囲むこと。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++23 添字演算子の多次元サポート](/lang/cpp23/multidimensional_subscript_operator.md)
 
 ## 参照
-- [P1161R3 Deprecate uses of the comma operator in subscripting expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1161r3.html)
+- [P1161R3 Deprecate uses of the comma operator in subscripting expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1161r3.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ほとんどの`volatile`を非推奨化 [P1152R4] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecating_volatile.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/deprecating_volatile.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/deprecating_volatile.md b/lang/cpp20/deprecating_volatile.md
index 484101b07..e839c4a6e 100644
--- a/lang/cpp20/deprecating_volatile.md
+++ b/lang/cpp20/deprecating_volatile.md
@@ -1,6 +1,14 @@
 # ほとんどの`volatile`を非推奨化 [P1152R4]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++20より、`volatile`の本来の役割に照らして不正確、あるいは誤解を招く用法や無意味な用法について非推奨とされるようになる。
@@ -381,4 +389,4 @@ volatile device dev;
 - [P1831R0 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1831r0.html)
 - [P1831R0 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
 - [P2327R0 De-deprecating volatile compound assignment](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2327r1.pdf)
-- [CWG Issue 2654. Un-deprecation of compound volatile assignments](https://cplusplus.github.io/CWG/issues/2654.html)
+- [CWG Issue 2654. Un-deprecation of compound volatile assignments](https://cplusplus.github.io/CWG/issues/2654.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>指示付き初期化 [P0329R4] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/designated_initialization.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/designated_initialization.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/designated_initialization.md b/lang/cpp20/designated_initialization.md
index 21eb9b338..f21a37367 100644
--- a/lang/cpp20/designated_initialization.md
+++ b/lang/cpp20/designated_initialization.md
@@ -2,6 +2,14 @@
 
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++20では、波カッコによる集成体初期化においてメンバ名を指定して初期化が行える。
 
@@ -107,4 +115,4 @@ struct A a = {.x = 1, 2};      // Cでは有効、C++20では無効
 
 ## 参照
 
-* [P0329R4 Designated initialization](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0329r4.pdf)
+* [P0329R4 Designated initialization](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0329r4.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>型の文脈でtypenameの省略を許可 [P0634R3] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/down_with_typename.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/down_with_typename.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/down_with_typename.md b/lang/cpp20/down_with_typename.md
index 7d86fa898..669457506 100644
--- a/lang/cpp20/down_with_typename.md
+++ b/lang/cpp20/down_with_typename.md
@@ -2,6 +2,14 @@
 
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 型しか現れない文脈では、依存名を解決するための`typename`キーワードを省略できるようにする。
@@ -82,4 +90,4 @@ struct Derived: T::Base // typename不要
 
 ## 参照
 
-- [P0634R3 Down with `typename`!](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0634r3.html)
+- [P0634R3 Down with `typename`!](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0634r3.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変長データを扱うクラスの効率的なdelete [P0722R3] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md b/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md
index 246e37c9a..90f56aa92 100644
--- a/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md
+++ b/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md
@@ -1,6 +1,14 @@
 # 可変長データを扱うクラスの効率的なdelete [P0722R3]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 従来のクラススコープでの`operator delete`オーバーロードにおいて、オーバーロードされた`operator delete`が呼び出されるのはそのクラスのオブジェクトが破棄された後であり、そのオーバーロード内からはそのクラスのオブジェクト（及びメンバ）にアクセスすることはできなかった。
@@ -420,7 +428,7 @@ struct S {
 
 結局、`std::destroying_delete_t`を第二引数に取る形が一番シンプルかつ可読性が高いとして採用された。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [C++14 サイズ付きデアロケーション](/lang/cpp14/sized_deallocation.md)
 - [`std::destroying_delete_t`](/reference/new/destroying_delete_t.md)
@@ -429,4 +437,4 @@ struct S {
 
 - [P0722R3 Efficient sized delete for variable sized classes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0722r3.html)
 - [P0722R1 Efficient sized delete for variable sized classes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0722r1.html)
-- [CWG Issue 2248. Problems with sized delete](https://cplusplus.github.io/CWG/issues/2248)
+- [CWG Issue 2248. Problems with sized delete](https://cplusplus.github.io/CWG/issues/2248)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数内で未評価のインラインアセンブリを許可することによる組み込み関数のconstexpr有効化 [P1668R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md b/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md
index 2a996c751..0a947a798 100644
--- a/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md
+++ b/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md
@@ -1,6 +1,14 @@
 # constexpr関数内で未評価のインラインアセンブリを許可することによる組み込み関数のconstexpr有効化 [P1668R1]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 `asm`宣言によるインラインアセンブリは`constexpr`関数内に現れる事が禁止されていたため、`constexpr`関数内に書く事は出来なかった。C++20からはコンパイル時に評価されない限り、`asm`宣言を`constexpr`関数内に書く事ができるようになる。
@@ -93,10 +101,10 @@ int main() {
 
 副次的だが、複雑なインラインアセンブリによる記述とともにシンプルなC++コードによる記述が同居している事で、インラインアセンブリが何をしているのかをユーザーが理解しやすくなるという効果もある。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [`is_constant_evaluated`](/reference/type_traits/is_constant_evaluated.md)
 
 ## 参照
 
-- [P1668R1 Enabling constexpr Intrinsics By Permitting Unevaluated inline-assembly in constexpr Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1668r1.html)
+- [P1668R1 Enabling constexpr Intrinsics By Permitting Unevaluated inline-assembly in constexpr Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1668r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>関数を条件付きでexplicitにする構文を追加 [P0892R2] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/explicit_bool.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/explicit_bool.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/explicit_bool.md b/lang/cpp20/explicit_bool.md
index 344d574f9..64a1ffee3 100644
--- a/lang/cpp20/explicit_bool.md
+++ b/lang/cpp20/explicit_bool.md
@@ -1,6 +1,14 @@
 # 関数を条件付きでexplicitにする構文を追加 [P0892R2]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++20では、関数を条件付きで`explicit`にする構文が追加された。コンストラクタと変換演算子に指定する`explicit`指定子に、`explicit(true)`、`explicit(false)`のように`bool`に変換可能な定数式を指定する。`true`に評価される値を指定することで、その関数は`explicit`となる。
 
@@ -157,11 +165,11 @@ struct pair {
 * std::is_convertible_v[link /reference/type_traits/is_convertible.md]
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`pair`のコンストラクタ](/reference/utility/pair/op_constructor.md)
 - [`tuple`のコンストラクタ](/reference/tuple/tuple/op_constructor.md)
 - [`optional`のコンストラクタ](/reference/optional/optional/op_constructor.md)
 
 
 ## 参照
-- [P0892R2 explicit(bool)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0892r2.html)
+- [P0892R2 explicit(bool)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0892r2.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>構造化束縛を拡張して通常の変数宣言のように使用できるようにする [P1091R3] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.md b/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.md
index ae1d35a1e..8873ff8d0 100644
--- a/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.md
+++ b/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.md
@@ -1,6 +1,14 @@
 # 構造化束縛を拡張して通常の変数宣言のように使用できるようにする [P1091R3]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++17で導入された構造化束縛宣言に指定しておけるのはCV修飾のみで、記憶域クラスや`constexpr`等を指定することは出来なかった。  
 このため、`thread_local`指定の変数や`constexpr`変数などの初期化のために構造化束縛を用いることが出来なかった。
@@ -125,7 +133,7 @@ int main()
 
 ただ、今回見送られた残りのものも将来的には許可される可能性がある。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 構造化束縛](/lang/cpp17/structured_bindings.md)
 - [C++20 構造化束縛した変数の参照キャプチャを許可](/lang/cpp20/reference_capture_of_structured_bindings.md)
 
@@ -134,4 +142,4 @@ int main()
 - [P1091R0 Extending structured bindings to be more like variable declarations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1091r0.html)
 - [P1091R1 Extending structured bindings to be more like variable declarations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1091r1.html)
 - [P1091R2 Extending structured bindings to be more like variable declarations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1091r2.html)
-- [P1091R3 Extending structured bindings to be more like variable declarations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1091r3.html)
+- [P1091R3 Extending structured bindings to be more like variable declarations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1091r3.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ジェネリックラムダのテンプレート構文 [P0428R2] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/familiar_template_syntax_for_generic_lambdas.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/familiar_template_syntax_for_generic_lambdas.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/familiar_template_syntax_for_generic_lambdas.md b/lang/cpp20/familiar_template_syntax_for_generic_lambdas.md
index 1e91bb228..5a08c5809 100644
--- a/lang/cpp20/familiar_template_syntax_for_generic_lambdas.md
+++ b/lang/cpp20/familiar_template_syntax_for_generic_lambdas.md
@@ -1,6 +1,14 @@
 # ジェネリックラムダのテンプレート構文 [P0428R2]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++14では、ラムダ式のパラメータ型に`auto`キーワードを使用することで、任意の型のパラメータを受け取れるようになった：
 
@@ -124,10 +132,10 @@ auto f = []&amp;lt;typename... Args&amp;gt;(Args&amp;amp;&amp;amp;... args) {
 * std::forward[link /reference/utility/forward.md]
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 ラムダ式](/lang/cpp11/lambda_expressions.md)
 - [C++14 ジェネリックラムダ](/lang/cpp14/generic_lambdas.md)
 
 
 ## 参照
-- [P0428R2 Familiar template syntax for generic lambdas](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0428r2.pdf)
+- [P0428R2 Familiar template syntax for generic lambdas](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0428r2.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>機能テストマクロ -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/feature_test_macros.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/feature_test_macros.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;機能テストマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;h3&gt;言語機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_aggregate_paren_init&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;allow_initializing_aggregates_from_a_parenthesized_list_of_values.html&#34;&gt;丸カッコの値リストからの集成体初期化を許可&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_char8_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;char8_t.html&#34;&gt;UTF-8エンコーディングされた文字の型として&lt;code&gt;char8_t&lt;/code&gt;を追加&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_concepts&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;concepts.html&#34;&gt;コンセプト&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_conditional_explicit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;explicit_bool.html&#34;&gt;関数を条件付きで&lt;code&gt;explicit&lt;/code&gt;にする構文を追加&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;allow_virtual_function_calls_in_constant_expressions.html&#34;&gt;定数式からの仮想関数の呼び出しを許可&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.html&#34;&gt;定数式での&lt;code&gt;dynamic_cast&lt;/code&gt;、多態的な&lt;code&gt;typeid&lt;/code&gt;を許可&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;try-catch_blocks_in_constexpr_functions.html&#34;&gt;constexpr関数内でのtry-catchブロックを許可&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;changing_the_active_member_of_a_union_inside_constexpr.html&#34;&gt;定数式内での共用体のアクティブメンバの変更を許可&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;permitting_trivial_default_initialization_in_constexpr_contexts.html&#34;&gt;constexpr関数内でのトリビアルなデフォルト初期化を許可&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.html&#34;&gt;constexpr関数内で未評価のインラインアセンブリを許可することによる組み込み関数のconstexpr有効化&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr_dynamic_alloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;more_constexpr_containers.html&#34;&gt;可変サイズをもつコンテナの&lt;code&gt;constexpr&lt;/code&gt;化&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr_in_decltype&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;less_eager_instantiation_of_constexpr_functions.html&#34;&gt;評価されない文脈での定数式評価によって特殊メンバ関数がインスタンス化されることを規定&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_consteval&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;immediate_functions.html&#34;&gt;即時関数&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constinit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;constinit.html&#34;&gt;コンパイル時初期化を強制する&lt;code&gt;constinit&lt;/code&gt;キーワードを追加&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_deduction_guides&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;class_template_argument_deduction_for_aggregates.html&#34;&gt;集成体クラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;br /&gt;&lt;a href=&#34;class_template_argument_deduction_for_alias_templates.html&#34;&gt;エイリアステンプレート経由でのクラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_designated_initializers&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201707L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;designated_initialization.html&#34;&gt;指示付き初期化&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_generic_lambdas&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201707L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;familiar_template_syntax_for_generic_lambdas.html&#34;&gt;ジェネリックラムダのテンプレート構文&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_impl_coroutine&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;coroutines.html&#34;&gt;コルーチン&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_impl_destroying_delete&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;efficient_sized_delete_for_variable_sized_classes.html&#34;&gt;可変長データを扱うクラスの効率的な&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_impl_three_way_comparison&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;consistent_comparison.html&#34;&gt;一貫比較&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_init_captures&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201803L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;allow_pack_expansion_in_lambda_init_capture.html&#34;&gt;ラムダ式の初期化キャプチャでのパック展開を許可&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_modules&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;modules.html&#34;&gt;モジュール&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_nontype_template_args&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201911L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;class_types_in_non-type_template_parameters.html&#34;&gt;非型テンプレートパラメータとしてクラス型を許可する&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_using_enum&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;using_enum.html&#34;&gt;スコープ付き列挙型のusing宣言&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ライブラリ&lt;/h3&gt;
&lt;p&gt;ライブラリの機能テストマクロは全て&lt;code&gt;&lt;a href=&#34;../../reference/version.html&#34;&gt;&amp;lt;version&amp;gt;&lt;/a&gt;&lt;/code&gt;でも提供される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_array_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201803L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::array&lt;/code&gt;の完全&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/array.html&#34;&gt;&amp;lt;array&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_assume_aligned&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/assume_aligned.html&#34;&gt;std::assume_aligned()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_flag_test&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic_flag/test.html&#34;&gt;std::atomic_flag::test()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/atomic/atomic.html&#34;&gt;&lt;code&gt;std::atomic&lt;/code&gt;の浮動小数点数型に対する特殊化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_lock_free_type_aliases&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic.html&#34;&gt;atomic_signed_lock_free/atomic_unsigned_lock_free&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_ref&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic_ref.html&#34;&gt;std::atomic_ref&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_shared_ptr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/memory/atomic.html&#34;&gt;&lt;code&gt;std::atomic&lt;/code&gt;の&lt;code&gt;std::shared_ptr/std::weak_ptr&lt;/code&gt;に対する特殊化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_value_initialization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201911L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;../../reference/atomic/atomic_flag/op_constructor.html&#34;&gt;&lt;code&gt;std::atomic_flag&lt;/code&gt;の値初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_atomic_wait&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic/wait.html&#34;&gt;std::atomic::wait()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic/notify_one.html&#34;&gt;std::atomic::notify_one()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../../reference/atomic/atomic/notify_all.html&#34;&gt;std::atomic::notify_all()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_barrier&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/barrier.html&#34;&gt;&amp;lt;barrier&amp;gt;&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/barrier.html&#34;&gt;&amp;lt;barrier&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_bind_front&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional/bind_front.html&#34;&gt;std::bind_front()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_bit_cast&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit/bit_cast.html&#34;&gt;std::bit_cast()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_bitops&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_bounded_array_traits&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_bounded_array.html&#34;&gt;std::is_bounded_array&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_unbounded_array.html&#34;&gt;std::is_unbounded_array&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_char8_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;char8_t&lt;/code&gt;に対する特殊化の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/filesystem.html&#34;&gt;&amp;lt;filesystem&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/istream.html&#34;&gt;&amp;lt;istream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/limits.html&#34;&gt;&amp;lt;limits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/locale.html&#34;&gt;&amp;lt;locale&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ostream.html&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_chrono&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;カレンダーとタイムゾーン&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_concepts&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/concepts.html&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/concepts.html&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_algorithms&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多くのアルゴリズムに&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_complex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/complex/complex.html&#34;&gt;std::complex&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/complex.html&#34;&gt;&amp;lt;complex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_dynamic_alloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/destroy_at.html&#34;&gt;std::destroy_at&lt;/a&gt;&lt;/code&gt;ファミリと&lt;code&gt;&lt;a href=&#34;../../reference/memory/allocator.html&#34;&gt;std::allocator&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&#34;../../reference/memory/allocator_traits.html&#34;&gt;std::alocator_traits&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/construct_at.html&#34;&gt;std::construct_at&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_functional&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::invoke&lt;/code&gt;、&lt;code&gt;std::reference_wrapper&lt;/code&gt;、&lt;code&gt;std::not_fn&lt;/code&gt;、&lt;code&gt;std::bind_front&lt;/code&gt;、&lt;code&gt;std::bind&lt;/code&gt;、&lt;code&gt;std::mem_fn&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator/back_insert_iterator.html&#34;&gt;back_insert_iterator&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../../reference/iterator/front_insert_iterator.html&#34;&gt;front_insert_iterator&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../../reference/iterator/insert_iterator.html&#34;&gt;insert_iterator&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_memory&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/pointer_traits.html&#34;&gt;std::pointer_traits&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_numeric&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201911L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;の数値アルゴリズムの&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string/basic_string.html&#34;&gt;std::string&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_string_view&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view/basic_string_view/copy.html&#34;&gt;std::string_view::copy&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_tuple&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple/tuple.html&#34;&gt;std::tuple&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;追加対応（一部のコンストラクタと代入演算子）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple.html&#34;&gt;&amp;lt;tuple&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_utility&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility/pair.html&#34;&gt;std::pair&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;追加対応（一部のコンストラクタと代入演算子）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_vector&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/vector/vector.html&#34;&gt;std::vector&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/vector.html&#34;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_coroutine&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/coroutine.html&#34;&gt;&amp;lt;coroutine&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダの追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/coroutine.html&#34;&gt;&amp;lt;coroutine&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_destroying_delete&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/new/destroying_delete_t.html&#34;&gt;std::destroying_delete_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/new.html&#34;&gt;&amp;lt;new&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_endian&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit/endian.html&#34;&gt;std::endian&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_erase_if&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;各コンテナに対する&lt;code&gt;std::erase&lt;/code&gt;、&lt;code&gt;std::erase_if&lt;/code&gt;の特殊化&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/deque.html&#34;&gt;&amp;lt;deque&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/forward_list.html&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/list.html&#34;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/vector.html&#34;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/set.html&#34;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_set.html&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_execution&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/execution/execution/execution_policy.html&#34;&gt;std::execution::unsequenced_policy&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/execution.html&#34;&gt;&amp;lt;execution&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_format&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;202106L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;202110L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt;ヘッダ&lt;br /&gt;コンパイル時フォーマット文字列検査/&lt;code&gt;&lt;a href=&#34;../../reference/format/vformat.html&#34;&gt;std::vformat&lt;/a&gt;&lt;/code&gt;のコードサイズ削減&lt;br /&gt;&lt;code&gt;std::chrono&lt;/code&gt;のフォーマットにおけるロケール指定の修正/&lt;code&gt;const&lt;/code&gt;だとフォーマットできない型に対する対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/format.html&#34;&gt;&amp;lt;format&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_generic_unordered_lookup&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非順序連想コンテナの&lt;code&gt;find(), count(), contains(), equal_range()&lt;/code&gt;に対するHeterogeneous Overload追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_set.html&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_int_pow2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;bit&amp;gt;&lt;/code&gt;の2の冪乗に関する操作を行う関数の名前変更&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_integer_comparison_functions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility/cmp_equal.html&#34;&gt;std::cmp_equal()&lt;/a&gt;&lt;/code&gt;等の整数比較関数と&lt;code&gt;&lt;a href=&#34;../../reference/utility/in_range.html&#34;&gt;std::in_range()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_interpolate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cmath/lerp.html&#34;&gt;std::lerp()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/numeric/midpoint.html&#34;&gt;std::midpoint()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_constant_evaluated&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_constant_evaluated.html&#34;&gt;std::is_constant_evaluated()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_layout_compatible&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_layout_compatible.html&#34;&gt;std::is_layout_compatible&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_corresponding_member.html&#34;&gt;is_corresponding_member&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_nothrow_convertible&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_nothrow_convertible.html&#34;&gt;std::is_nothrow_convertible&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_pointer_interconvertible&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_corresponding_member.html&#34;&gt;std::is_corresponding_member&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_pointer_interconvertible_base_of.html&#34;&gt;std::is_pointer_interconvertible_base_of&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_jthread&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201911L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/thread/jthread.html&#34;&gt;std::jthread&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;stop_token&lt;/code&gt;による協調的キャンセル機構&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/stop_token.html&#34;&gt;&amp;lt;stop_token&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/thread.html&#34;&gt;&amp;lt;thread&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_latch&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/latch/latch.html&#34;&gt;std::latch&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/latch.html&#34;&gt;&amp;lt;latch&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_list_remove_return_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::list&lt;/code&gt;と&lt;code&gt;std::forward_list&lt;/code&gt;の&lt;code&gt;remove(), remove_if(), unique()&lt;/code&gt;の戻り値型変更&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/forward_list.html&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/list.html&#34;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_math_constants&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数学定数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numbers.html&#34;&gt;&amp;lt;numbers&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_polymorphic_allocator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory_resource/polymorphic_allocator.html&#34;&gt;std::pmr::polymorphic_allocator&lt;/a&gt;&lt;/code&gt;の改修&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201911L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;202106L&lt;/code&gt;&lt;br /&gt;&lt;code&gt;202110L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;RangeライブラリとRangeアルゴリズム&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/view.html&#34;&gt;view&lt;/a&gt;&lt;/code&gt;コンセプトのデフォルト構築要求を削除&lt;br /&gt;所有権を持つ&lt;code&gt;view&lt;/code&gt;の許可と&lt;code&gt;&lt;a href=&#34;../../reference/ranges/owning_view.html&#34;&gt;owning_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_remove_cvref&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/remove_cvref.html&#34;&gt;std::remove_cvref&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_semaphore&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/semaphore/counting_semaphore.html&#34;&gt;std::counting_semaphore&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;std::binary_semaphore&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/semaphore.html&#34;&gt;&amp;lt;semaphore&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shared_ptr_arrays&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201707L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/make_shared.html&#34;&gt;std::make_shared&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/memory/allocate_shared.html&#34;&gt;std::allocate_shared&lt;/a&gt;&lt;/code&gt;の配列対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shift&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/shift_left.html&#34;&gt;std::shift_left&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/shift_right.html&#34;&gt;std::shift_right&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_smart_ptr_for_overwrite&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/make_shared_for_overwrite.html&#34;&gt;std::make_shared_for_overwrite()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/memory/allocate_shared_for_overwrite.html&#34;&gt;std::allocate_shared_for_overwrite()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_source_location&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/source_location/source_location.html&#34;&gt;std::source_location&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/source_location.html&#34;&gt;&amp;lt;source_location&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_span&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/span/span.html&#34;&gt;std::span&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/span.html&#34;&gt;&amp;lt;span&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ssize&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201902L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator/ssize.html&#34;&gt;std::ssize()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;std::span&lt;/code&gt;で使用する整数型の符号なし（&lt;code&gt;size_t&lt;/code&gt;）への変更&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_starts_ends_with&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::string&lt;/code&gt;と&lt;code&gt;std::string_view&lt;/code&gt;の&lt;code&gt;starts_with()&lt;/code&gt;と&lt;code&gt;ends_with()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_string_view&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201803L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::string&lt;/code&gt;と&lt;code&gt;std::string_view&lt;/code&gt;のイテレータの&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_syncbuf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201803L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同期化出力ストリーム（&lt;code&gt;std::osyncstream&lt;/code&gt;）とバッファ（&lt;code&gt;std::syncbuf&lt;/code&gt;）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/syncstream.html&#34;&gt;&amp;lt;syncstream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_three_way_comparison&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;標準ライブラリの三方比較演算子対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_to_address&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201711L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/to_address.html&#34;&gt;std::to_address()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_to_array&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201907L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/array/to_array.html&#34;&gt;std::to_array()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/array.html&#34;&gt;&amp;lt;array&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_type_identity&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201806L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/type_identity.html&#34;&gt;std::type_identity&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_unwrap_ref&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;201811L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/unwrap_reference.html&#34;&gt;std::unwrap_reference&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/unwrap_ref_decay.html&#34;&gt;std::unwrap_ref_decay&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations&#34; target=&#34;_blank&#34;&gt;SD-FeatureTest: Feature-Test Macros and Policies - isocpp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>const修飾されたメンバポインタの制限を修正 [P0704R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/fixing_const_qualified_pointers_to_members.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/fixing_const_qualified_pointers_to_members.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/fixing_const_qualified_pointers_to_members.md b/lang/cpp20/fixing_const_qualified_pointers_to_members.md
index e5781123a..cd37f4917 100644
--- a/lang/cpp20/fixing_const_qualified_pointers_to_members.md
+++ b/lang/cpp20/fixing_const_qualified_pointers_to_members.md
@@ -1,6 +1,14 @@
 # const修飾されたメンバポインタの制限を修正 [P0704R1]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++11で[メンバ関数を左辺値／右辺値修飾](/lang/cpp11/ref_qualifier_for_this.md)する機能が導入された。その際、以下の例において、同じ関数を呼び出す場合でも、メンバ関数ポインタを介した方だけが不適格となっていた：
 
@@ -18,9 +26,9 @@ C++20ではこの式が許可され、仕様としては以下のように`const
 「`.*`式において、右辺値オブジェクトに対して左辺値修飾された非`const`のメンバ関数ポインタを呼び出すことは不適格となる」
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 メンバ関数の左辺値／右辺値修飾](/lang/cpp11/ref_qualifier_for_this.md)
 
 
 ## 参照
-- [P0704R1 Fixing const-qualified pointers to members](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0704r1.html)
+- [P0704R1 Fixing const-qualified pointers to members](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0704r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>autoパラメータによる関数テンプレートの簡易定義 -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/function_templates_with_auto_parameters.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/function_templates_with_auto_parameters.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/function_templates_with_auto_parameters.md b/lang/cpp20/function_templates_with_auto_parameters.md
index 88ab7ff9b..dfb0844cd 100644
--- a/lang/cpp20/function_templates_with_auto_parameters.md
+++ b/lang/cpp20/function_templates_with_auto_parameters.md
@@ -1,6 +1,14 @@
 # autoパラメータによる関数テンプレートの簡易定義
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++14で導入された[ジェネリックラムダ](/lang/cpp14/generic_lambdas.md)と同様に、通常の関数もパラメータ型を`auto`にすることで、簡易的に関数テンプレートを定義できるようにする。
 
@@ -39,10 +47,10 @@ int main()
 0.3
 ```
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++14 ジェネリックラムダ](/lang/cpp14/generic_lambdas.md)
 - [C++20 コンセプト](concepts.md)
 
 
 ## 参照
-- [P1141R2 Yet another approach for constrained declarations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1141r2.html)
+- [P1141R2 Yet another approach for constrained declarations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1141r2.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>即時関数 [P1073R3] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/immediate_functions.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/immediate_functions.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/immediate_functions.md b/lang/cpp20/immediate_functions.md
index 94dc24858..3aab076fe 100644
--- a/lang/cpp20/immediate_functions.md
+++ b/lang/cpp20/immediate_functions.md
@@ -2,6 +2,14 @@
 
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++20では、関数またはメンバ関数に対して、`consteval`キーワードで常に定数式評価されるよう指定できる。そのような関数を**即時関数**(immediate function)という。
@@ -97,7 +105,7 @@ C++11で導入された`constexpr`指定子によって、関数を定数式評
 
 当初は `constexpr!`というキーワードが提案されていたが、最終的に`consteval`になった。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 * [C++11 `constexpr`](/lang/cpp11/constexpr.md)
 * [C++20 コンパイル時初期化を強制する`constinit`キーワードを追加](constinit.md)
@@ -106,4 +114,4 @@ C++11で導入された`constexpr`指定子によって、関数を定数式評
 
 ## 参照
 
-* [P1073R3 Immediate functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1073r3.html)
+* [P1073R3 Immediate functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1073r3.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>未初期化領域への暗黙的なオブジェクト構築 -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md b/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
index 1b8fb0efb..1abdbef19 100644
--- a/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
+++ b/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
@@ -1,6 +1,14 @@
 # 未初期化領域への暗黙的なオブジェクト構築
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 `new`式ではなく`malloc()`等他の方法で確保されたメモリ領域には、明示的にオブジェクトの構築を行うまで想定する型のオブジェクトは生存期間内になく、そのアクセス（読み書き）は未定義動作となる。
@@ -393,7 +401,7 @@ unique_ptr&amp;lt;char[]&amp;gt; Stream::read() {
 
 なお、2番目の特殊なライブラリ関数もC++23で`std::start_lifetime_as()`として追加されている。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [`start_lifetime_as()`](/reference/memory/start_lifetime_as.md.nolink)
 - [`start_lifetime_as_array()`](/reference/memory/start_lifetime_as_array.md.nolink)
@@ -405,4 +413,4 @@ unique_ptr&amp;lt;char[]&amp;gt; Stream::read() {
 - [P0593R０ What to do with buffers that are not arrays, and undefined behavior thereof?](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0593r0.html)
 - [CWG Issue 2325. `std::launder` and reuse of character buffers](https://cplusplus.github.io/CWG/issues/2325.html)
 - [CWG Issue 2605. Implicit-lifetime aggregates](https://cplusplus.github.io/CWG/issues/2605.html)
-- [P1839R5 Accessing Object Representations](https://wg21.link/p1839r5)
+- [P1839R5 Accessing Object Representations](https://wg21.link/p1839r5)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>空オブジェクトに対する最適化を支援する属性[[no_unique_address]] [P0840R2] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/language_support_for_empty_objects.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/language_support_for_empty_objects.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/language_support_for_empty_objects.md b/lang/cpp20/language_support_for_empty_objects.md
index 14d3c4804..e44221ece 100644
--- a/lang/cpp20/language_support_for_empty_objects.md
+++ b/lang/cpp20/language_support_for_empty_objects.md
@@ -2,6 +2,14 @@
 
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++20では、空オブジェクトに対する最適化を支援する属性`[[no_unique_address]]`が追加された。
@@ -119,9 +127,9 @@ int main()
 `[[no_unique_address]]`を使うことで、基底クラスのサブオブジェクトだけでなくメンバ変数のサイズも0にできるので、EBOのために設計を変える必要がなくなる。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 属性構文](/lang/cpp11/attributes.md)
 - [`is_empty`](/reference/type_traits/is_empty.md)
 
 ## 参照
-- [P0840R2 Language support for empty objects](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0840r2.html)
+- [P0840R2 Language support for empty objects](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0840r2.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>評価されない文脈での定数式評価によって特殊メンバ関数がインスタンス化されることを規定 [P0859R0] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/less_eager_instantiation_of_constexpr_functions.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/less_eager_instantiation_of_constexpr_functions.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/less_eager_instantiation_of_constexpr_functions.md b/lang/cpp20/less_eager_instantiation_of_constexpr_functions.md
index f1fc80c78..0620316fb 100644
--- a/lang/cpp20/less_eager_instantiation_of_constexpr_functions.md
+++ b/lang/cpp20/less_eager_instantiation_of_constexpr_functions.md
@@ -1,6 +1,14 @@
 # 評価されない文脈での定数式評価によって特殊メンバ関数がインスタンス化されることを規定 [P0859R0]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 以前まで、デフォルトコンストラクタやムーブコンストラクタといった特殊メンバ関数は、odr-usedになった段階で定義される規定になっていた。しかし、`sizeof`や`decltype`のオペランドのような評価されない文脈においてはodr-usedにならないため、そのような文脈では特殊メンバ関数が使用できなかった。
 
@@ -30,4 +38,4 @@ int n = sizeof(short{duration(duration())});
 ## 参照
 
 - [CWG Issue 1581. When are constexpr member functions defined?](https://wg21.cmeerw.net/cwg/issue1581)
-- [P0859R0: Core Issue 1581: When are constexpr member functions defined?](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0859r0.html)
+- [P0859R0: Core Issue 1581: When are constexpr member functions defined?](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0859r0.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>確率が高い分岐と低い分岐を伝える属性 [[likely]], [[unlikely]] [P0479R5] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/likely_and_unlikely_attributes.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/likely_and_unlikely_attributes.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/likely_and_unlikely_attributes.md b/lang/cpp20/likely_and_unlikely_attributes.md
index 78625c538..134f04393 100644
--- a/lang/cpp20/likely_and_unlikely_attributes.md
+++ b/lang/cpp20/likely_and_unlikely_attributes.md
@@ -1,6 +1,14 @@
 # 確率が高い分岐と低い分岐を伝える属性 [[likely]], [[unlikely]] [P0479R5]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 if文やswitch文といった分岐制御構文において、条件分岐先のうちどれが実行される可能性が高いかという情報を、C++コンパイラへ最適化ヒントとして与える属性である。
 これらの属性を適切に用いると、C++コンパイラはより高速に動作するプログラムを生成する可能性がある。
@@ -63,7 +71,7 @@ std::string fizzbuzz(int n)
 GCCやClangなど一部C++コンパイラでは独自拡張として同等機能を提供しており、Linuxカーネルや大規模OSSによる広い利用実績があったため、C++標準の属性として採用された。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++23 `[[assume]]`属性](/lang/cpp23/portable_assumptions.md)
 
 
@@ -72,4 +80,4 @@ GCCやClangなど一部C++コンパイラでは独自拡張として同等機能
 - [GCC __builtin_expect組み込み関数](https://gcc.gnu.org/onlinedocs/gcc/extensions-to-the-c-language-family/other-built-in-functions-provided-by-gcc.html)
 - [Clang __builtin_expect組み込み関数](https://llvm.org/docs/BranchWeightMetadata.html)
 - [P0479R2 Attributes for Likely and Unlikely Statements (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0479r2.html)
-- [P0479R5 Proposed wording for likely and unlikely attributes (Revision 5)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0479r5.html)
+- [P0479R5 Proposed wording for likely and unlikely attributes (Revision 5)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0479r5.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>char16_tとchar32_tの文字・文字列リテラルを、文字コードUTF-16/32に規定 [P1041R4] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/make_char16t_char32t_string_literals_be_utf16_32.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/make_char16t_char32t_string_literals_be_utf16_32.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;char16_tとchar32_tの文字・文字列リテラルを、文字コードUTF-16/32に規定 [P1041R4]&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative_page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++11で追加された文字型&lt;a href=&#34;../cpp11/char16_32.html&#34;&gt;&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;&lt;/a&gt;の文字・文字列リテラルの文字コード、C++20からはUTF-16とUTF-32であることが規定される。&lt;/p&gt;
&lt;p&gt;これまでは、以下のような仕様であった：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;uchar&amp;gt;&lt;/code&gt;ヘッダでマクロ&lt;code&gt;__STDC_UTF_16__&lt;/code&gt;が定義される場合、&lt;code&gt;char16_t&lt;/code&gt;型の値はUTF-16の妥当なコードポイントを持つ。そうでない場合、&lt;code&gt;char16_t&lt;/code&gt;型の値は実装定義の文字コードとなる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;uchar&amp;gt;&lt;/code&gt;ヘッダでマクロ&lt;code&gt;__STDC_UTF_32__&lt;/code&gt;が定義される場合、&lt;code&gt;char32_t&lt;/code&gt;型の値はUTF-32の妥当なコードポイントを持つ。そうでない場合、&lt;code&gt;char32_t&lt;/code&gt;型の値は実装定義の文字コードとなる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++20では、無条件にUTF-16とUTF-32であることが規定される。&lt;/p&gt;
&lt;p&gt;なお、&lt;code&gt;u8&lt;/code&gt;プレフィックスをつけた文字・文字列リテラルは、UTF-8であることがこれまでに規定されていた。&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;これまで、&lt;code&gt;&amp;lt;uchar&amp;gt;&lt;/code&gt;ヘッダのマクロ&lt;code&gt;__STDC_UTF_16__&lt;/code&gt;と&lt;code&gt;__STDC_UTF_32__&lt;/code&gt;が定義されている場合にのみ、&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;はUTF-16/UTF-32エンコーディングであると規定されていた。&lt;/p&gt;
&lt;p&gt;しかし、これらが定義されなかった場合にコンパイラがほかのエンコーディングを選択することが疑わしかった。また、&lt;code&gt;char16_t&lt;/code&gt;の仕様として「サロゲートペア」が含まれているが、その概念をもつ他のよく知られた文字コードはない。単一の文字を32ビットで表現する他のよく知られた文字コードもない。&lt;/p&gt;
&lt;p&gt;実際にはすべての実装でこれらの文字・文字列リテラルはUTF-16とUTF-32にエンコーディングされるため、要件を示すだけではなく、より明確にするために、&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;の文字・文字列リテラルがUTF-16とUTF-32文字コードであることを規定する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../cpp11/char16_32.html&#34;&gt;C++11 &lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../cpp11/utf8_string_literals.html&#34;&gt;C++11 UTF-8文字列リテラル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../cpp17/utf8_character_literals.html&#34;&gt;C++17 UTF-8文字リテラル&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1041r4.html&#34; target=&#34;_blank&#34;&gt;P1041R4 Make &lt;code&gt;char16_t&lt;/code&gt;/&lt;code&gt;char32_t&lt;/code&gt; string literals be UTF-16/32&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>モジュール [P1103R3] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/modules.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/modules.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/modules.md b/lang/cpp20/modules.md
index 7bcd78598..b266f80a7 100644
--- a/lang/cpp20/modules.md
+++ b/lang/cpp20/modules.md
@@ -1,6 +1,14 @@
 # モジュール [P1103R3]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++20では、ヘッダーファイル・ソースファイルに代わる新たなファイル分割の仕組みとしてモジュールが導入された。
 
@@ -480,7 +488,7 @@ int main() {
 モジュールは、以上のような問題のないプログラム分割の仕組みとして導入された。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++23 無意味なexport宣言を禁止する](/lang/cpp23/meaningful_exports.md)
 
 
@@ -496,4 +504,4 @@ Standard library header units for C++20](http://www.open-std.org/jtc1/sc22/wg21/
 Mitigating minor modules maladies](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1766r1.html)
 - [P1811R0
 Relaxing redefinition restrictions for re-exportation robustness](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1811r0.html#problem)  
-  同時に到達可能とならなければODR違反にならないという仕様が削除された。また、インポータブルヘッダーの`#include`を`import`に置き換えるかは処理系定義となった。
+  同時に到達可能とならなければODR違反にならないという仕様が削除された。また、インポータブルヘッダーの`#include`を`import`に置き換えるかは処理系定義となった。
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変サイズをもつコンテナのconstexpr化 [P0784R7] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/more_constexpr_containers.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/more_constexpr_containers.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/more_constexpr_containers.md b/lang/cpp20/more_constexpr_containers.md
index 98cd1f086..1f0d0d409 100644
--- a/lang/cpp20/more_constexpr_containers.md
+++ b/lang/cpp20/more_constexpr_containers.md
@@ -1,6 +1,14 @@
 # 可変サイズをもつコンテナのconstexpr化 [P0784R7]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++20より、定数式における動的メモリ確保と解放が許可される。それに伴い、`std::vector`と`std::string`の全メンバ関数が`constexpr`対応し、定数式で使用できるようになる。
@@ -328,7 +336,7 @@ int main() {
 
 これらの問題について、`std::mark_immutable_if_constexpr()`によるアプローチを標準化委員会が嫌ったことと、2つ目の問題の解決が簡単ではなかった（時間がかかり得た）事から、コンパイル時に確保したメモリを実行時に持ち越すことについてはC++20への導入を見送ることとなった。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [動的メモリ確保の省略の許可](/lang/cpp14/clarifying_memory_allocation.md)
 - [`allocator`](/reference/memory/allocator.md)
@@ -348,4 +356,4 @@ int main() {
 - [P0784R7 More constexpr containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0784r7.html)
 - [動的メモリー確保 - 江添亮の入門C++](https://ezoeryou.github.io/cpp-intro/#動的メモリー確保)
 - [N3664 Clarifying Memory Allocation](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3664.html)
-- [P1974R0 Non-transient constexpr allocation using propconst](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1974r0.pdf)
+- [P1974R0 Non-transient constexpr allocation using propconst](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1974r0.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>入れ子名前空間定義でのインライン名前空間 [P1094R2] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/nested_inline_mamespaces.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/nested_inline_mamespaces.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/nested_inline_mamespaces.md b/lang/cpp20/nested_inline_mamespaces.md
index 7b91ac6dd..3a18da472 100644
--- a/lang/cpp20/nested_inline_mamespaces.md
+++ b/lang/cpp20/nested_inline_mamespaces.md
@@ -1,6 +1,14 @@
 # 入れ子名前空間定義でのインライン名前空間 [P1094R2]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++17で、入れ子の名前空間を`namespace ns1::ns2::ns3 {}`のように簡易的に定義できるようになったが、インライン名前空間の指定はできなかった。
 
@@ -25,10 +33,10 @@ namespace ns3 {
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 インライン名前空間](/lang/cpp11/inline_namespaces.md)
 - [C++17 入れ子名前空間の定義](/lang/cpp17/nested_namespace.md)
 
 
 ## 参照
-- [P1094R2 Nested Inline Namespaces](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1094r2.html)
+- [P1094R2 Nested Inline Namespaces](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1094r2.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[nodiscard]]をコンストラクタのオーバーロードごとに付加できるようにする -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/nodiscard_for_constructors.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/nodiscard_for_constructors.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/nodiscard_for_constructors.md b/lang/cpp20/nodiscard_for_constructors.md
index 0c2d764f0..7cf4e088f 100644
--- a/lang/cpp20/nodiscard_for_constructors.md
+++ b/lang/cpp20/nodiscard_for_constructors.md
@@ -1,6 +1,14 @@
 # [[nodiscard]]をコンストラクタのオーバーロードごとに付加できるようにする
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 戻り値が使用されない場合に警告を出力させる[`[[nodiscard]]`属性](/lang/cpp17/nodiscard.md)を、コンストラクタのオーバーロードに付加できるようにする。
 
@@ -50,10 +58,10 @@ prog.cc:11:12: note: declared here
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 `[[nodiscard]]`属性](/lang/cpp17/nodiscard.md)
 - [C++20 `[[nodiscard]]`属性に理由となる文字列を付加できるようにする](nodiscard_should_have_a_reason.md)
 
 
 ## 参照
-- [P1771R1 `[[nodiscard]]` for constructors](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1771r1.pdf)
+- [P1771R1 `[[nodiscard]]` for constructors](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1771r1.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[nodiscard]]属性に理由となる文字列を付加できるようにする [P1301R4] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/nodiscard_should_have_a_reason.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/nodiscard_should_have_a_reason.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/nodiscard_should_have_a_reason.md b/lang/cpp20/nodiscard_should_have_a_reason.md
index 8f8d86e37..9d061c9fb 100644
--- a/lang/cpp20/nodiscard_should_have_a_reason.md
+++ b/lang/cpp20/nodiscard_should_have_a_reason.md
@@ -1,6 +1,14 @@
 # [[nodiscard]]属性に理由となる文字列を付加できるようにする [P1301R4]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 戻り値が使用されない場合に警告を出力させる[`[[nodiscard]]`属性](/lang/cpp17/nodiscard.md)に、戻り値を無視してはならない理由を文字列リテラルとして指定できるようにする。
 
@@ -84,10 +92,10 @@ prog.cc:26:8: note: declared here
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 `[[nodiscard]]`属性](/lang/cpp17/nodiscard.md)
 - [C++20 `[[nodiscard]]`をコンストラクタのオーバーロードごとに付加できるようにする](nodiscard_for_constructors.md)
 
 
 ## 参照
-- [P1301R4 `[[nodiscard(&amp;#34;should have a reason&amp;#34;)]]`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1301r4.html)
+- [P1301R4 `[[nodiscard(&amp;#34;should have a reason&amp;#34;)]]`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1301r4.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>要素数不明の配列への変換を許可 [P0388R4] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md b/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md
index cf3a5780c..5954a8f86 100644
--- a/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md
+++ b/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md
@@ -2,6 +2,14 @@
 
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++20では、要素数が既知の配列型から要素数不明の配列型への暗黙変換が可能になる。
@@ -108,4 +116,4 @@ g(arr);          // OK
 
 ## 参照
 
-* [P0388R4 Permit conversions to arrays of unknown bound](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0388r4.html)
+* [P0388R4 Permit conversions to arrays of unknown bound](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0388r4.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数内でのトリビアルなデフォルト初期化を許可 [P1331R2] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md b/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md
index 268c00f4c..bdf68c483 100644
--- a/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md
+++ b/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md
@@ -1,6 +1,14 @@
 # constexpr関数内でのトリビアルなデフォルト初期化を許可 [P1331R2]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 型`T`の変数を単に`T t;`のように（関数スコープで）初期化した時、`T`がクラス型であり非トリビアルなデフォルトコンストラクタを持っているか、集成体型であり全てのメンバがデフォルトメンバ初期化によって初期化されていれば、`t`は初期化されており値は決定的である。しかし、組み込み型など[トリビアルにデフォルト構築可能](/reference/type_traits/is_trivially_default_constructible.md)な型の場合はその初期化は実装定義であり、その値の読み取りは未定義動作である。
@@ -113,10 +121,10 @@ int main() {
 
 そのため、トリビアルな型のローカル変数のトリビアルなデフォルト初期化そのものは未定義動作ではなく、その値の読み取りが未定義動作であり、そのような初期化そのものを禁止するのは過度な制限であるとして緩和される事となった。ただし、その値の読み取りは依然として未定義動作であり、定数式で現れてはならない。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [可変サイズをもつコンテナの`constexpr`化](more_constexpr_containers.md)
 
 ## 参照
 
-- [P1331R2 Permitting trivial default initialization in constexpr contexts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1331r2.pdf)
+- [P1331R2 Permitting trivial default initialization in constexpr contexts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1331r2.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>更新された定義済みマクロ -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/predefined_macros.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/predefined_macros.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;更新された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cplusplus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++のバージョン値を表す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/n4859.html&#34; target=&#34;_blank&#34;&gt;N4859 Editors&#39; Report -- Programming Languages -- C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ユーザー宣言したコンストラクタを持つクラスの集成体初期化を禁止 [P1008R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/prohibit_aggregates_with_user-declared_constructors.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/prohibit_aggregates_with_user-declared_constructors.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/prohibit_aggregates_with_user-declared_constructors.md b/lang/cpp20/prohibit_aggregates_with_user-declared_constructors.md
index 5c638117e..0b8756e49 100644
--- a/lang/cpp20/prohibit_aggregates_with_user-declared_constructors.md
+++ b/lang/cpp20/prohibit_aggregates_with_user-declared_constructors.md
@@ -1,6 +1,14 @@
 # ユーザー宣言したコンストラクタを持つクラスの集成体初期化を禁止 [P1008R1]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 ユーザー宣言されたコンストラクタをもつクラスを、集成体初期化によってコンストラクタを回避してオブジェクト構築できてしまっていた技法を禁止する。
 
@@ -106,4 +114,4 @@ int main() {
 
 
 ## 参照
-- [P1008R1 Prohibit aggregates with user-declared constructors](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1008r1.pdf)
+- [P1008R1 Prohibit aggregates with user-declared constructors](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1008r1.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>初期化式をともなう範囲for文 [P0614R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/range-based_for_statements_with_initializer.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/range-based_for_statements_with_initializer.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/range-based_for_statements_with_initializer.md b/lang/cpp20/range-based_for_statements_with_initializer.md
index af28928cc..826576870 100644
--- a/lang/cpp20/range-based_for_statements_with_initializer.md
+++ b/lang/cpp20/range-based_for_statements_with_initializer.md
@@ -1,6 +1,14 @@
 # 初期化式をともなう範囲for文 [P0614R1]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 if文、switch文、for文と同様に、範囲for文でもそのスコープで使用する変数の初期化ができるよう構文を追加する。
 
@@ -113,10 +121,10 @@ int main()
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 if文とswitch文の条件式と初期化を分離](/lang/cpp17/selection_statements_with_initializer.md)
 - [C++23 初期化文での型の別名宣言を許可](/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md)
 
 
 ## 参照
-- [P0614R1 Range-based for statements with initializer](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0614r1.html)
+- [P0614R1 Range-based for statements with initializer](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0614r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>構造化束縛した変数の参照キャプチャを許可 [P1381R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/reference_capture_of_structured_bindings.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/reference_capture_of_structured_bindings.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/reference_capture_of_structured_bindings.md b/lang/cpp20/reference_capture_of_structured_bindings.md
index 6c436a215..58673dec1 100644
--- a/lang/cpp20/reference_capture_of_structured_bindings.md
+++ b/lang/cpp20/reference_capture_of_structured_bindings.md
@@ -1,6 +1,14 @@
 # 構造化束縛した変数の参照キャプチャを許可 [P1381R1]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 構造化束縛した変数はラムダ式で参照キャプチャできない規定となっていたが、これを許可する。ただし、ビットフィールドを構造化束縛した変数は参照キャプチャできない。
 
@@ -29,10 +37,10 @@ int main() {
 - 参照キャプチャできない要素として、ビットフィールド、構造化束縛した変数、無名共用体のメンバの3つがあったが、C++20ではこの不許可リストから「構造化束縛した変数」が削除された
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 構造化束縛](/lang/cpp17/structured_bindings.md)
 - [C++20 構造化束縛を拡張して通常の変数宣言のように使用できるようにする](extending_structured_bindings_to_be_more_like_variable_declarations.md)
 
 
 ## 参照
-- [P1381R1 Reference capture of structured bindings](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1381r1.html)
+- [P1381R1 Reference capture of structured bindings](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1381r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>範囲for文がカスタマイゼーションポイントを見つけるルールを緩和 [P0962R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md b/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md
index f1dc654f8..a9b5ceb34 100644
--- a/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md
+++ b/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md
@@ -1,6 +1,14 @@
 # 範囲for文がカスタマイゼーションポイントを見つけるルールを緩和 [P0962R1]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++17までは、範囲for文に指定するシーケンスの型が`begin`/`end`メンバのどちらかでも持っていれば`begin()`/`end()`メンバ関数を使用し、どちらも持っていなければADLで非メンバ関数の`begin()`/`end()`を探索する仕様となっていた。
 
@@ -55,10 +63,10 @@ o
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 範囲for文](/lang/cpp11/range_based_for.md)
 - [C++17 範囲forの制限緩和 — `begin` と `end` の型が異なることを許可](/lang/cpp17/generalizing_the_range-based_for_loop.md)
 
 
 ## 参照
-- [P0962R1 Relaxing the range-for loop customization point finding rules](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0962r1.html)
+- [P0962R1 Relaxing the range-for loop customization point finding rules](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0962r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>構造化束縛がカスタマイゼーションポイントを見つけるルールを緩和 [P0961R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.md b/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.md
index 85607bc22..3420cd9ca 100644
--- a/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.md
+++ b/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.md
@@ -1,6 +1,14 @@
 # 構造化束縛がカスタマイゼーションポイントを見つけるルールを緩和 [P0961R1]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++17までは、構造化束縛する対象の型が`get()`メンバ関数を持っていればその関数でメンバ変数を抽出し、持っていなければ非メンバ関数の`get()`関数で抽出する仕様となっていた。
 
@@ -48,9 +56,9 @@ int main()
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 構造化束縛](/lang/cpp17/structured_bindings.md)
 
 
 ## 参照
-- [P0961R1 Relaxing the structured bindings customization point finding rules](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0961r1.html)
+- [P0961R1 Relaxing the structured bindings customization point finding rules](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0961r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>throw()による例外送出しない指定を削除 -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/remove_deprecated_nothrow_exception_specification.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/remove_deprecated_nothrow_exception_specification.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/remove_deprecated_nothrow_exception_specification.md b/lang/cpp20/remove_deprecated_nothrow_exception_specification.md
index 43f6d61db..58fb85bbc 100644
--- a/lang/cpp20/remove_deprecated_nothrow_exception_specification.md
+++ b/lang/cpp20/remove_deprecated_nothrow_exception_specification.md
@@ -1,6 +1,14 @@
 # throw()による例外送出しない指定を削除
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++11で例外送出しないことを指定する[`noexcept`](/lang/cpp11/noexcept.md)が追加されたことによって古い例外仕様は非推奨化の後に削除されたが、なにも例外送出しないことを表す`throw()`指定は`noexcept`と同じ意味になるよう仕様が変更されて非推奨機能として維持されていた。
 
@@ -13,10 +21,10 @@ void f() throw();
 C++20では、非推奨とされていた`throw()`指定の機能を削除する。代わりに`noexcept`を使用すること。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 noexcept](/lang/cpp11/noexcept.md)
 - [C++17 非推奨だった古い例外仕様を削除](/lang/cpp17/remove_deprecated_exception_specifications.md)
 
 
 ## 参照
-- [P0619R4 Reviewing Deprecated Facilities of C++17 for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0619r4.html)
+- [P0619R4 Reviewing Deprecated Facilities of C++17 for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0619r4.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>属性の名前空間を予約 -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/reserving_attribute_namespaces_for_future_use.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/reserving_attribute_namespaces_for_future_use.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;属性の名前空間を予約&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative_page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;将来的に標準で定義する属性のために、以下の名前空間の属性を予約する：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名前空間に属さない属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std&lt;/code&gt;および&lt;code&gt;std&lt;/code&gt; + 数字の名前空間の属性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../cpp11/attributes.html&#34;&gt;C++11 属性構文&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1908r1.pdf&#34; target=&#34;_blank&#34;&gt;P1908R1 Reserving Attribute Namespaces for Future Use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デフォルトのコピーコンストラクタと非constなコンストラクタが衝突する問題を修正 [P0641R2] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.md b/lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.md
index 06ff7ff03..b2becb2f5 100644
--- a/lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.md
+++ b/lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.md
@@ -1,6 +1,14 @@
 # デフォルトのコピーコンストラクタと非constなコンストラクタが衝突する問題を修正 [P0641R2]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++17までは以下のように、自身の型の非`const`なオブジェクトをとるコンストラクタをもつクラスを定義し、
 
@@ -38,4 +46,4 @@ C++20では、このコードを適格とする。
 
 
 ## 参照
-- [P0641R2 Resolving Core Issue #1331 (`const` mismatch with defaulted copy constructor)](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0641r2.html)
+- [P0641R2 Resolving Core Issue #1331 (`const` mismatch with defaulted copy constructor)](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0641r2.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>符号付き整数型が2の補数表現であることを規定 [P1236R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/signed_integers_are_twos_complement.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/signed_integers_are_twos_complement.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/signed_integers_are_twos_complement.md b/lang/cpp20/signed_integers_are_twos_complement.md
index 68606c12e..cd9a35a4c 100644
--- a/lang/cpp20/signed_integers_are_twos_complement.md
+++ b/lang/cpp20/signed_integers_are_twos_complement.md
@@ -1,6 +1,14 @@
 # 符号付き整数型が2の補数表現であることを規定 [P1236R1]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++20では、符号付き整数型のビット表現を「2の補数 (Two&amp;#39;s Complement)」に規定する。
 
@@ -130,7 +138,7 @@ Visual Studio、GCC、Clangといった主要な処理系が、2の補数以外
 C11規格は、2の補数のほかに、1の補数表現 (Ones&amp;#39; complement) と符号ビット付き絶対値表現 (Signed magnitude) を許可しているが、C++では本文書の概要にも記載したように、ハッシュ値の一意性と全順序をサポートするため、2の補数に規定する。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`std::has_unique_object_representations`](/reference/type_traits/has_unique_object_representations.md)
 
 
@@ -140,4 +148,4 @@ C11規格は、2の補数のほかに、1の補数表現 (Ones&amp;#39; complement) と
 - [P0907R4 Signed Integers are Two&amp;#39;s Complement](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0907r4.html)
     - 元になった提案文書
 - [符号付き整数型の負数表現を 2 の補数と規定 (P1236R1) - cppmap](https://cppmap.github.io/standardization/cpp20/#2-p1236r1)
-- [2の補数表現における演算](http://www.cc.kyoto-su.ac.jp/~kbys/kiso/number/int-op.html)
+- [2の補数表現における演算](http://www.cc.kyoto-su.ac.jp/~kbys/kiso/number/int-op.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>暗黙のラムダキャプチャを簡略化 [P0588R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/simplifying_implicit_lambda_capture.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/simplifying_implicit_lambda_capture.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/simplifying_implicit_lambda_capture.md b/lang/cpp20/simplifying_implicit_lambda_capture.md
index 9e7e3eae0..7e7359643 100644
--- a/lang/cpp20/simplifying_implicit_lambda_capture.md
+++ b/lang/cpp20/simplifying_implicit_lambda_capture.md
@@ -1,6 +1,14 @@
 # 暗黙のラムダキャプチャを簡略化 [P0588R1]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 ここでは、ラムダ式での暗黙のキャプチャについて、以下の問題を解決する：
 
@@ -24,10 +32,9 @@ void f() {
 構造化束縛で導入された名前はラムダ式でキャプチャできない、と明記された。しかしその後、「[構造化束縛を拡張して通常の変数宣言のように使用できるようにする](extending_structured_bindings_to_be_more_like_variable_declarations.md)」の仕様でそれが可能となったため、この仕様変更は打ち消された。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 構造化束縛](/lang/cpp17/structured_bindings.md)
 - [C++20 構造化束縛を拡張して通常の変数宣言のように使用できるようにする](extending_structured_bindings_to_be_more_like_variable_declarations.md)
 
 ## 参照
 - [P0588R1 Simplifying implicit lambda capture](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0588r1.html)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数内でのtry-catchブロックを許可 [P1002R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/try-catch_blocks_in_constexpr_functions.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/try-catch_blocks_in_constexpr_functions.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/try-catch_blocks_in_constexpr_functions.md b/lang/cpp20/try-catch_blocks_in_constexpr_functions.md
index c33558df5..5c99de598 100644
--- a/lang/cpp20/try-catch_blocks_in_constexpr_functions.md
+++ b/lang/cpp20/try-catch_blocks_in_constexpr_functions.md
@@ -1,6 +1,14 @@
 # constexpr関数内でのtry-catchブロックを許可 [P1002R1]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++20では、`constexpr`関数内でのtry-catchブロックの使用を許可する。ただし、`throw`式は従来通り許可せず、コンパイルエラーとなる (`throw`式は`constexpr`関数におけるアサーションのような役割)。
 
@@ -21,9 +29,9 @@ constexpr int f(int x) {
 この機能が必要になったのは、リフレクションとメタプログラミングのためである。コンパイル時定数として[`std::vector`](/reference/vector/vector.md)を使用できるようにするためには、try-catchブロックを許可することが必要であった。libc++での[`vector::insert()`](/reference/vector/vector/insert.md)の実装において、try-catchブロックを使用して強い例外安全性の保証を提供している。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++20 可変サイズをもつコンテナの`constexpr`化](more_constexpr_containers.md)
 
 
 ## 参照
-- [P1002R1 Try-catch blocks in constexpr functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1002r1.pdf)
+- [P1002R1 Try-catch blocks in constexpr functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1002r1.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Unicode標準への参照を更新 -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/update_the_reference_to_the_unicode_standard.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/update_the_reference_to_the_unicode_standard.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Unicode標準への参照を更新&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;Unicode標準 (ISO/IEC 10646) としてこれまで、「ISO/IEC 10646-1:1993, Information technology — Universal Multiple-Octet Coded Character Set (UCS) — Part 1: Architecture and Basic Multilingual Plane」が参照されていた。&lt;/p&gt;
&lt;p&gt;従来の古い仕様への参照は、非推奨化された古い機能のものであるとして残し、Unicode標準の最新仕様「ISO/IEC 10646, Information technology — Universal Coded Character Set (UCS)」を参照するよう追加する。&lt;/p&gt;
&lt;p&gt;Unicode標準で非推奨化された用語UCS2とUCS4の扱いは、以下のようになる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UTC-32はUCS4と見なせるため、文字エンコーディングの説明ではUCS4の代わりにUTF-32を使用する&lt;/li&gt;
&lt;li&gt;ただしUTF-16はUCS2と見なすことができないため、古い機能のために古い仕様を参照するとして一部そのまま残す&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実装が常に最新のUnicode標準を参照していることから、この変更によるユーザーへの直接的な影響はない。&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;C++規格上ではISO/IEC 10646-1:1993を参照していても、実装は最新仕様に更新し続けていた。たとえば1996の仕様ではハングル文字のセットが削除されて別な位置に追加され、チベット文字が再追加された。実装はそれに対応している。&lt;/p&gt;
&lt;p&gt;また、C++標準が参照しているECMAScript標準でUnicode標準の参照が競合してしまう。&lt;/p&gt;
&lt;p&gt;Unicode標準での用語定義が変更されたことにも影響がある。UCS2とUCS4という用語が非推奨化されたために、その用語をC++標準が使用し続けることは望ましくない。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1025r1.html&#34; target=&#34;_blank&#34;&gt;P1025R1 Update The Reference To The Unicode Standard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スコープ付き列挙型のusing宣言 [P1099R5] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/using_enum.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/using_enum.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/using_enum.md b/lang/cpp20/using_enum.md
index cde6bcb74..50f661ffd 100644
--- a/lang/cpp20/using_enum.md
+++ b/lang/cpp20/using_enum.md
@@ -2,6 +2,14 @@
 
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 名前空間のように、`using enum EnumType;`もしくは`using EnumType::enumerator`とすることで、列挙値のスコープ指定を省略できる。
@@ -110,10 +118,10 @@ C言語形式の列挙型を改善するために[スコープを持つ列挙型
 
 これにより、C言語形式の列挙型をスコープを持つ列挙型へ置き換えるというリファクタリングをする際、(整数との暗黙変換を別とすれば)ソースコードレベルの互換性を保って置き換えることができるようにもなった。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [スコープを持つ列挙型](/lang/cpp11/scoped_enum.md)
 
 ## 参照
 
-- [P1099R5 Using Enum](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1099r5.html)
+- [P1099R5 Using Enum](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1099r5.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変引数が空でない場合のトークン置換 [P0306R4] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/va_opt.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/va_opt.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/va_opt.md b/lang/cpp20/va_opt.md
index d0e2d13f5..1382eff72 100644
--- a/lang/cpp20/va_opt.md
+++ b/lang/cpp20/va_opt.md
@@ -1,6 +1,14 @@
 # 可変引数が空でない場合のトークン置換 [P0306R4]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 新たなプリプロセスマクロ`__VA_OPT__`を追加する。このマクロは、マクロのパラメータとして受け取った可変引数が空でない場合に置換するトークンを指定する機能を持つ。
 
@@ -45,9 +53,9 @@ int main()
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 可変引数マクロ](/lang/cpp11/variadic_macros.md)
 
 
 ## 参照
-- [P0306R4 Comma omission and comma deletion](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0306r4.html)
+- [P0306R4 Comma omission and comma deletion](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0306r4.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>評価されない文脈でのラムダ式 [P0315R4] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md b/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md
index fec2f2ee6..b630e29c5 100644
--- a/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md
+++ b/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md
@@ -1,6 +1,14 @@
 # 評価されない文脈でのラムダ式 [P0315R4]
 * cpp20[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++20に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++17まではラムダ式が評価されない文脈に現れることはできなかったが、C++20からは評価されない文脈にラムダ式を書くことができるようになる。
@@ -130,11 +138,11 @@ C++17までは、ラムダ式をSFINAEの文脈で用いて擬似的なコンセ
 
 ただし、ラムダ式が外部リンケージを持つエンティティのシグネチャに現れる事は相変わらず禁止されている。ラムダ式を用いてSFINAEするなど、そのような事がしたい場合には[コンセプト](./concepts.md)を用いる事でより容易に目的を達成できる。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [状態を持たないラムダ式を、デフォルト構築可能、代入可能とする](/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md)
 
 ## 参照
 - [P0315R0 Wording for lambdas in unevaluated contexts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0315r0.pdf)
 - [P0315R4 Wording for lambdas in unevaluated contexts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0315r4.pdf)
 - [CWG Issue.1607 Lambdas in template parameters](https://wg21.cmeerw.net/cwg/issue1607)
-- [C++標準化委員会の文書: P0310R--P0319R0 - 本の虫](https://ezoeryou.github.io/blog/article/2016-07-27-cpp-P0310R0-P0319R0.html)
+- [C++標準化委員会の文書: P0310R--P0319R0 - 本の虫](https://ezoeryou.github.io/blog/article/2016-07-27-cpp-P0310R0-P0319R0.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>elif/elifdef/elifndefのサポートを追加 [P2334R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md b/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md
index 24606375a..531f80b99 100644
--- a/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md
+++ b/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md
@@ -1,6 +1,14 @@
 # elif/elifdef/elifndefのサポートを追加 [P2334R1]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++23では、以下のプリプロセス時条件式が追加される：
 
@@ -28,4 +36,4 @@ C++23では、以下のプリプロセス時条件式が追加される：
 
 
 ## 参照
-- [P2334R1 Add support for preprocessing directives elifdef and elifndef](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2334r1.pdf)
+- [P2334R1 Add support for preprocessing directives elifdef and elifndef](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2334r1.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式に対する属性 [P2173R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/attributes_on_lambda_expressions.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/attributes_on_lambda_expressions.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/attributes_on_lambda_expressions.md b/lang/cpp23/attributes_on_lambda_expressions.md
index 30cd03e4b..7bb70ec96 100644
--- a/lang/cpp23/attributes_on_lambda_expressions.md
+++ b/lang/cpp23/attributes_on_lambda_expressions.md
@@ -1,6 +1,14 @@
 # ラムダ式に対する属性 [P2173R1]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++23では、ラムダ式のいくつかの箇所に属性を指定できる。
 
@@ -41,10 +49,10 @@ int main()
 ```
 ```
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 ラムダ式](/lang/cpp11/lambda_expressions.md)
 - [C++11 属性構文](/lang/cpp11/attributes.md)
 
 
 ## 参照
-- [P2173R1 Attributes on Lambda-Expressions](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2173r1.pdf)
+- [P2173R1 Attributes on Lambda-Expressions](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2173r1.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>静的な診断メッセージの文字エンコーディング [P2246R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/character_encoding_of_diagnostic_text.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/character_encoding_of_diagnostic_text.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;静的な診断メッセージの文字エンコーディング [P2246R1]&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++23では、コンパイル時に診断メッセージを出力させる以下の機能について、ソースコードのエンコーディングが実行環境のエンコーディングで表現できない場合にどうするかの規定を見直す：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;static_assert&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[[deprecated]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#error&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++20までは、「基本ソース文字集合に含まれない文字は出力する必要はない」という規定になっていたが、基本ソース文字集合と実行環境のエンコーディングは関係ないものであるため、この規定を削除することとした。&lt;/p&gt;
&lt;p&gt;この規定はC20でも導入され、C++もそれに追従することとした。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2246r1.pdf&#34; target=&#34;_blank&#34;&gt;P2246R1 Character encoding of diagnostic text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg14/www/docs/n2563.pdf&#34; target=&#34;_blank&#34;&gt;WG14 N2563 Character encoding of diagnostic text&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>継承コンストラクタからのクラステンプレート引数の推論 [P2582R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/class_template_argument_deduction_from_inherited.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/class_template_argument_deduction_from_inherited.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/class_template_argument_deduction_from_inherited.md b/lang/cpp23/class_template_argument_deduction_from_inherited.md
index ba94fb0f2..89d13fb60 100644
--- a/lang/cpp23/class_template_argument_deduction_from_inherited.md
+++ b/lang/cpp23/class_template_argument_deduction_from_inherited.md
@@ -1,6 +1,14 @@
 # 継承コンストラクタからのクラステンプレート引数の推論 [P2582R1]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++23では、派生クラスで定義した継承コンストラクタからでも、クラステンプレート引数を推論できるようになる。
 
@@ -53,10 +61,10 @@ G g(true, &amp;#39;a&amp;#39;, 1); // OK。G&amp;lt;char, bool&amp;gt;に推論される
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 継承コンストラクタ](/lang/cpp11/inheriting_constructors.md)
 - [C++17 クラステンプレートのテンプレート引数推論](/lang/cpp17/type_deduction_for_class_templates.md)
 
 
 ## 参照
-- [P2582R1 Wording for class template argument deduction from inherited constructors](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2582r1.pdf)
+- [P2582R1 Wording for class template argument deduction from inherited constructors](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2582r1.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>文字リテラルエンコーディングを一貫させる [P2316R2] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/consistent_character_literal_encoding.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/consistent_character_literal_encoding.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/consistent_character_literal_encoding.md b/lang/cpp23/consistent_character_literal_encoding.md
index 17106dec6..34537e3bd 100644
--- a/lang/cpp23/consistent_character_literal_encoding.md
+++ b/lang/cpp23/consistent_character_literal_encoding.md
@@ -1,6 +1,14 @@
 # 文字リテラルエンコーディングを一貫させる [P2316R2]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++20までは、以下のような、プリプロセッサ上での文字リテラルの比較と、if文での文字リテラルの比較が同じであるという保証がなかった。
 
@@ -21,4 +29,4 @@ if (&amp;#39;A&amp;#39; == 0x41){}
 
 
 ## 参照
-- [P2316R2 Consistent character literal encoding](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2316r2.pdf)
+- [P2316R2 Consistent character literal encoding](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2316r2.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数内でconsteval関数を呼び出せない問題を軽減 [P2564R3] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/consteval_needs_to_propagate_up.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/consteval_needs_to_propagate_up.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/consteval_needs_to_propagate_up.md b/lang/cpp23/consteval_needs_to_propagate_up.md
index 8f7b945f1..a0ba126e3 100644
--- a/lang/cpp23/consteval_needs_to_propagate_up.md
+++ b/lang/cpp23/consteval_needs_to_propagate_up.md
@@ -1,6 +1,14 @@
 # constexpr関数内でconsteval関数を呼び出せない問題を軽減 [P2564R3]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++23では、`consteval`呼び出しを含む`constexpr`関数を、条件付きで`consteval`関数と見なすようになる。そうすることで、定数式の文脈での`consteval`関数の使用がよりかんたんになる。
 
@@ -100,9 +108,9 @@ constexpr int k(int) {  // k&amp;lt;int&amp;gt;は即時関数ではない
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++20 即時関数](/lang/cpp20/immediate_functions.md)
 
 
 ## 参照
-- [P2564R3 `consteval` needs to propagate up](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2564r3.html)
+- [P2564R3 `consteval` needs to propagate up](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2564r3.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>エスケープシーケンスの区切り [P2290R3] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/delimited_escape_sequences.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/delimited_escape_sequences.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/delimited_escape_sequences.md b/lang/cpp23/delimited_escape_sequences.md
index b09612705..ca351ab41 100644
--- a/lang/cpp23/delimited_escape_sequences.md
+++ b/lang/cpp23/delimited_escape_sequences.md
@@ -1,6 +1,14 @@
 # エスケープシーケンスの区切り [P2290R3]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++23では、文字列リテラル中に記述するエスケープシーケンスとユニバーサルキャラクタ名の範囲を明確にするための波カッコ (`{}`) で囲む構文が追加される。
 
@@ -31,9 +39,9 @@ u8&amp;#34;\u{1F1F8}&amp;#34;;  // C++23 : 5文字のコードポイントも記述できる
 8進数または16進数によるエスケープシーケンスは、8進数は3文字まで、16進数は無制限の文字数という制限の違いがあり、また、8進数または16進数ではない文字が現れることでエスケープシーケンスの範囲が終了するため注意が必要であった。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 `char16_t`と`char32_t`](/lang/cpp11/char16_32.md)
 
 
 ## 参照
-- [P2290R3 Delimited escape sequences](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2290r3.pdf)
+- [P2290R3 Delimited escape sequences](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2290r3.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式で()を省略できる条件を緩和 [P1102R2] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/down_with_lambda_parens.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/down_with_lambda_parens.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/down_with_lambda_parens.md b/lang/cpp23/down_with_lambda_parens.md
index a993635f3..557c4a58c 100644
--- a/lang/cpp23/down_with_lambda_parens.md
+++ b/lang/cpp23/down_with_lambda_parens.md
@@ -1,6 +1,14 @@
 # ラムダ式で()を省略できる条件を緩和 [P1102R2]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++23では、ラムダ式のパラメータリストが空であれば、以下の要素を含む場合であってもパラメータリストの `()` を省略できる。
 
@@ -24,10 +32,10 @@ auto f5 = [] constexpr mutable noexcept -&amp;gt; bool { return true; }; // C++23 OK
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 ラムダ式](/lang/cpp11/lambda_expressions.md)
 - [C++23 `this`ポインタをもつ必要のない演算子を`static`として宣言できるようにする](/lang/cpp23/static_operator.md)
 
 
 ## 参照
-- [P1102R2 Down with `()`!](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1102r2.html)
+- [P1102R2 Down with `()`!](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1102r2.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>初期化文での型の別名宣言を許可 [P2360R0] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/extend_init_statement_to_allow_alias_declaration.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/extend_init_statement_to_allow_alias_declaration.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md b/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md
index bb3aeda35..6fe9cd4b7 100644
--- a/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md
+++ b/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md
@@ -1,6 +1,14 @@
 # 初期化文での型の別名宣言を許可 [P2360R0]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `if`文、`switch`文、範囲`for`文で初期化文を指定できるが、C++20までその初期化文では`typedef`による型の別名定義はできたが、`using`による型の別名定義はできなかった。
 
@@ -38,10 +46,10 @@ int main()
 }
 ```
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 if文とswitch文の条件式と初期化を分離](/lang/cpp17/selection_statements_with_initializer.md)
 - [C++20 初期化式をともなう範囲for文](/lang/cpp20/range-based_for_statements_with_initializer.md)
 
 
 ## 参照
-- [P2360R0 Extend init-statement to allow alias-declaration](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2360r0.html)
+- [P2360R0 Extend init-statement to allow alias-declaration](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2360r0.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>機能テストマクロ -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/feature_test_macros.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/feature_test_macros.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;機能テストマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;h3&gt;言語機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ライブラリ&lt;/h3&gt;
&lt;p&gt;ライブラリの機能テストマクロは全て&lt;code&gt;&lt;a href=&#34;../../reference/version.html&#34;&gt;&amp;lt;version&amp;gt;&lt;/a&gt;&lt;/code&gt;でも提供される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_as_const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ranges::cbegin&lt;/code&gt;が常に定数イテレータを返すようにする&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_fold&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;fold&lt;/code&gt;アルゴリズム&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations&#34; target=&#34;_blank&#34;&gt;SD-FeatureTest: Feature-Test Macros and Policies - isocpp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>変数テンプレートの部分特殊化を許可 [P2096R2] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/generalized_wording_for_partial_specializations.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/generalized_wording_for_partial_specializations.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/generalized_wording_for_partial_specializations.md b/lang/cpp23/generalized_wording_for_partial_specializations.md
index a872492de..7feeb55a3 100644
--- a/lang/cpp23/generalized_wording_for_partial_specializations.md
+++ b/lang/cpp23/generalized_wording_for_partial_specializations.md
@@ -1,6 +1,14 @@
 # 変数テンプレートの部分特殊化を許可 [P2096R2]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 変数テンプレートの仕様として、部分特殊化の許可を意図したような仕様はあったが、部分特殊化の多くの仕様はクラステンプレートのみを対象にしていた。
 
@@ -32,9 +40,9 @@ int main() {
 (nil)
 ```
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++14 変数テンプレート](/lang/cpp14/variable_templates.md)
 
 
 ## 参照
-- [P2096R2 Generalized wording for partial specializations](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2096r2.html)
+- [P2096R2 Generalized wording for partial specializations](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2096r2.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>if consteval [P1938R3] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/if_consteval.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/if_consteval.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/if_consteval.md b/lang/cpp23/if_consteval.md
index 856fae791..15b1d65a8 100644
--- a/lang/cpp23/if_consteval.md
+++ b/lang/cpp23/if_consteval.md
@@ -1,6 +1,14 @@
 # if consteval [P1938R3]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++23では、`constexpr`関数がコンパイル時に呼ばれたかを判定するための構文として、`if consteval`を導入する。これは「consteval if文」と呼ばれる。
 
@@ -101,10 +109,10 @@ constexpr size_t strlen(char const* s) {
 
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`std::is_constant_evaluated()`](/reference/type_traits/is_constant_evaluated.md)
 - [C++20 即時関数](/lang/cpp20/immediate_functions.md)
 
 
 ## 参照
-- [P1938R3 `if consteval`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1938r3.html)
+- [P1938R3 `if consteval`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1938r3.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>複合文の末尾へのラベルを許可 [P2324R2] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/labels_at_the_end_of_compound_statements.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/labels_at_the_end_of_compound_statements.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/labels_at_the_end_of_compound_statements.md b/lang/cpp23/labels_at_the_end_of_compound_statements.md
index dacce86cb..88ddf35bc 100644
--- a/lang/cpp23/labels_at_the_end_of_compound_statements.md
+++ b/lang/cpp23/labels_at_the_end_of_compound_statements.md
@@ -1,6 +1,14 @@
 # 複合文の末尾へのラベルを許可 [P2324R2]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C言語 (C23) との互換性のため、C言語で新しく許可された複合文の末尾 (関数末尾など`{}`ブロックの末尾) へのgotoラベルを許可する。
 
@@ -26,4 +34,4 @@ C++23でこの機能を導入することにより、gotoラベルを置ける
 
 ## 参照
 - [P2324R2 Labels at the end of compound statements (C compatibility)](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2324r2.pdf)
-- [C2X Proposal: WG14 N2508 Free Positioning of Labels Inside Compound Statements (updates N2496)](https://www.open-std.org/jtc1/sc22/wg14/www/docs/n2508.pdf)
+- [C2X Proposal: WG14 N2508 Free Positioning of Labels Inside Compound Statements (updates N2496)](https://www.open-std.org/jtc1/sc22/wg14/www/docs/n2508.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>範囲for文が範囲初期化子内で生じた一時オブジェクトを延命することを規定 [P2718R0] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/lifetime_extension_in_range_based_for_loop.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/lifetime_extension_in_range_based_for_loop.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/lifetime_extension_in_range_based_for_loop.md b/lang/cpp23/lifetime_extension_in_range_based_for_loop.md
index 21d2f13e7..c72b35aaf 100644
--- a/lang/cpp23/lifetime_extension_in_range_based_for_loop.md
+++ b/lang/cpp23/lifetime_extension_in_range_based_for_loop.md
@@ -2,6 +2,14 @@
 
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 仕様
 
 範囲for文
@@ -132,7 +140,7 @@ void foo() {
 
 一時オブジェクトの寿命について、範囲for文に限定しない汎用的な方法も検討されたが、最終的には範囲for文の例外規定となった。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [範囲for文](/lang/cpp11/range_based_for.md)
 
@@ -141,4 +149,4 @@ void foo() {
 - [地に足のついた範囲for文 - 地面を見下ろす少年の足蹴にされる私](https://onihusube.hatenablog.com/entry/2022/12/05/000923)
 - [範囲for文範囲初期化子内の一時オブジェクト延命の説明見直し
  #1246](https://github.com/cpprefjp/site/issues/1246)
-- [Are function parameter objects temporary objects?](https://stackoverflow.com/questions/77676199/are-function-parameter-objects-temporary-objects/77676480)
+- [Are function parameter objects temporary objects?](https://stackoverflow.com/questions/77676199/are-function-parameter-objects-temporary-objects/77676480)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>(符号付き)size_tリテラルのためのサフィックス [P0330R8] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/literal_suffix_for_signed_size_t.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/literal_suffix_for_signed_size_t.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/literal_suffix_for_signed_size_t.md b/lang/cpp23/literal_suffix_for_signed_size_t.md
index 5a31e63cc..0c9212fd2 100644
--- a/lang/cpp23/literal_suffix_for_signed_size_t.md
+++ b/lang/cpp23/literal_suffix_for_signed_size_t.md
@@ -1,6 +1,14 @@
 # (符号付き)size_tリテラルのためのサフィックス [P0330R8]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++23では、符号なし整数型[`size_t`](/reference/cstddef/size_t.md)に対応する符号付き整数型を表すリテラルの`z`および`Z`サフィックスを追加する。符号なしを表す`u`および`U`サフィックスをともに使用することで[`size_t`](/reference/cstddef/size_t.md)型のリテラルを記述できる。
 
@@ -52,10 +60,10 @@ case 1はコンパイルエラーとなる。[`std::min()`](/reference/algorithm
 case 2はC++23で導入する[`size_t`](/reference/cstddef/size_t.md)型リテラルを使用するため、問題なく動作する。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [`std::cmp_less()`](/reference/utility/cmp_less.md)
 - [`std::ssize()`](/reference/iterator/ssize.md)
 
 
 ## 参照
-- [P0330R8 Literal Suffix for (signed) `size_t`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p0330r8.html)
+- [P0330R8 Literal Suffix for (signed) `size_t`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p0330r8.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>アクセス制御の異なるメンバ変数のレイアウトを宣言順に規定 [P1847R4] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/make_declaration_order_layout_mandated.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/make_declaration_order_layout_mandated.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/make_declaration_order_layout_mandated.md b/lang/cpp23/make_declaration_order_layout_mandated.md
index 3bdb83bfa..553fbfc23 100644
--- a/lang/cpp23/make_declaration_order_layout_mandated.md
+++ b/lang/cpp23/make_declaration_order_layout_mandated.md
@@ -1,6 +1,14 @@
 # アクセス制御の異なるメンバ変数のレイアウトを宣言順に規定 [P1847R4]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 以下のようなアクセス制御の異なるメンバ変数のメモリレイアウトは、実装に対して自由に並び替えてよい、という規定になっていたが、これを宣言順に規定する。
 
@@ -20,4 +28,4 @@ public:
 
 
 ## 参照
-- [P1847R4 Make declaration order layout mandated](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1847r4.pdf)
+- [P1847R4 Make declaration order layout mandated](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1847r4.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>無意味なexport宣言を禁止する [P2615R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/meaningful_exports.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/meaningful_exports.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/meaningful_exports.md b/lang/cpp23/meaningful_exports.md
index c1bfe2765..e31e14bf8 100644
--- a/lang/cpp23/meaningful_exports.md
+++ b/lang/cpp23/meaningful_exports.md
@@ -1,6 +1,14 @@
 # 無意味なexport宣言を禁止する [P2615R1]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++20時点でのモジュール定義では、いくつかの不必要なexport宣言ができてしまっていた。
 
@@ -21,10 +29,10 @@ C++23では、本来必要のない以下の宣言に対するexport宣言を禁
 ただし、この変更のあとでも、`export { … }`で囲まれた中では、これらが含まれていてもコンパイルエラーにはならない。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++20 モジュール](/lang/cpp20/modules.md)
 
 
 ## 参照
 - [P2615R1 Meaningful exports](https://open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2615r1.html)
-- [CWG Issue 2443. Meaningless template exports](https://wg21.cmeerw.net/cwg/issue2443)
+- [CWG Issue 2443. Meaningless template exports](https://wg21.cmeerw.net/cwg/issue2443)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>異なる文字エンコーディングをもつ文字列リテラルの連結を不適格とする [P2201R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/mixed_string_literal_concatenation.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/mixed_string_literal_concatenation.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/mixed_string_literal_concatenation.md b/lang/cpp23/mixed_string_literal_concatenation.md
index b93c80edb..ce4b343c4 100644
--- a/lang/cpp23/mixed_string_literal_concatenation.md
+++ b/lang/cpp23/mixed_string_literal_concatenation.md
@@ -1,6 +1,14 @@
 # 異なる文字エンコーディングをもつ文字列リテラルの連結を不適格とする [P2201R1]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++20までは、実装定義の動作として`L&amp;#34;&amp;#34;`、`u8&amp;#34;&amp;#34;`、`u&amp;#34;&amp;#34;`、`U&amp;#34;&amp;#34;`のようなエンコーディングが混在する文字列リテラルの連結を条件付きで許可していたが、これを禁止とする。
 
@@ -31,4 +39,4 @@ void f() {
 
 
 ## 参照
-- [P2201R1: Mixed string literal concatenation](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2201r1.html)
+- [P2201R1: Mixed string literal concatenation](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2201r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>添字演算子の多次元サポート [P2128R6] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/multidimensional_subscript_operator.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/multidimensional_subscript_operator.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/multidimensional_subscript_operator.md b/lang/cpp23/multidimensional_subscript_operator.md
index 3e7df114d..ddecaa776 100644
--- a/lang/cpp23/multidimensional_subscript_operator.md
+++ b/lang/cpp23/multidimensional_subscript_operator.md
@@ -1,6 +1,14 @@
 # 添字演算子の多次元サポート [P2128R6]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++23では、多次元配列クラスを定義するために必要となる、添字演算子のオーバーロードを定義する際の複数引数を許可する。
 
@@ -41,10 +49,10 @@ int main() {
 3
 ```
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++20 添字演算子内でのカンマ演算子の使用を非推奨化](/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md)
 - [`std::mdspan`](/reference/mdspan/mdspan.md)
 
 
 ## 参照
-- [P2128R6 Multidimensional subscript operator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2128r6.pdf)
+- [P2128R6 Multidimensional subscript operator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2128r6.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>名前付きユニバーサルキャラクタ名 [P2071R2] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/named_universal_character_escapes.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/named_universal_character_escapes.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/named_universal_character_escapes.md b/lang/cpp23/named_universal_character_escapes.md
index 489dfb672..facbcc229 100644
--- a/lang/cpp23/named_universal_character_escapes.md
+++ b/lang/cpp23/named_universal_character_escapes.md
@@ -1,6 +1,14 @@
 # 名前付きユニバーサルキャラクタ名 [P2071R2]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 これまで、Unicodeのユニバーサルキャラクタ名を指定するためには、`u8&amp;#34;\u0100&amp;#34;`のように`\u`または`\U`に続いてコードポイントを記述していた。
 
@@ -49,10 +57,10 @@ int main()
 Ā̀
 ```
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 `char16_t`と`char32_t`](/lang/cpp11/char16_32.md)
 
 ## 参照
 - [P2173R1 Attributes on Lambda-Expressions](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2173r1.pdf)
 - [Unicode Character “Ā” (U+0100)](https://www.compart.com/en/unicode/U+0100)
-- [Unicode Character “◌̀” (U+0300)](https://www.compart.com/en/unicode/U+0300)
+- [Unicode Character “◌̀” (U+0300)](https://www.compart.com/en/unicode/U+0300)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>定数式の文脈でのboolへの縮小変換を許可 [P1401R5] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/narrowing_contextual_conversions_to_bool.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/narrowing_contextual_conversions_to_bool.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/narrowing_contextual_conversions_to_bool.md b/lang/cpp23/narrowing_contextual_conversions_to_bool.md
index ece89bd08..8d383a547 100644
--- a/lang/cpp23/narrowing_contextual_conversions_to_bool.md
+++ b/lang/cpp23/narrowing_contextual_conversions_to_bool.md
@@ -1,6 +1,14 @@
 # 定数式の文脈でのboolへの縮小変換を許可 [P1401R5]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++23では、以下の定数式文脈での`bool`への縮小変換を許可する：
 
@@ -31,10 +39,10 @@ if constexpr(flags &amp;amp; Flags::Exec) { … }        // C++23以降
 if constexpr (sizeof(int[2])) { … } // C++23:OK 縮小変換
 ```
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 コンパイル時アサート](/lang/cpp11/static_assert.md)
 - [C++17 `constexpr if`文](/lang/cpp17/if_constexpr.md)
 
 
 ## 参照
-- [P1401R5 Narrowing contextual conversions to `bool`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1401r5.html)
+- [P1401R5 Narrowing contextual conversions to `bool`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1401r5.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>定数式内での非リテラル変数、静的変数・スレッドローカル変数およびgotoとラベルの存在を許可する [P2242R3] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/non_literal_variables_in_constexpr_functions.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/non_literal_variables_in_constexpr_functions.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;定数式内での非リテラル変数、静的変数・スレッドローカル変数およびgotoとラベルの存在を許可する [P2242R3]&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative_page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;constexpr&lt;/code&gt;関数が非リテラル変数、静的変数・スレッドローカル変数およびgoto文とラベルを含むことを許可する。&lt;/p&gt;
&lt;p&gt;ただし、これをコンパイル時に評価した場合、従来通りエラーとなる。
これらを含むコードパスは実行時にのみ通過するようにしなければならない。&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;これまでは、&lt;code&gt;constexpr&lt;/code&gt;関数内には非リテラル変数、静的変数・スレッドローカル変数およびgoto文とラベルが含まれてはならなかった。
これは、&lt;code&gt;constexpr&lt;/code&gt;関数が定数式実行できない要素を含んではならないという意味で、理にかなった制限であった。&lt;/p&gt;
&lt;p&gt;しかし、C++20で&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_constant_evaluated.html&#34;&gt;std::is_constant_evaluated&lt;/a&gt;&lt;/code&gt;によって定数式実行されるコードパスと実行時に通るコードパスを分けることが可能になり、状況が変化した。
定数式実行できないコードとはいえ、実行時にのみ通りコンパイル時には通らないコードパスに含まれていた場合にもプログラムが&lt;a class=&#34;cpprefjp-defined-word&#34;&gt;不適格&lt;/a&gt;となる、というのは直観に反する。&lt;/p&gt;
&lt;p&gt;よって、コンパイル時に評価されない限りにおいて、&lt;code&gt;constexpr&lt;/code&gt;関数内に非リテラル変数、静的変数・スレッドローカル変数およびgoto文とラベルを含むことが許可されることとなった。&lt;/p&gt;
&lt;p&gt;ただし、&lt;code&gt;constexpr&lt;/code&gt;内に存在することが許可されたものの定数式として評価できるわけではないので、これらの機能は依然としてコンパイル時に使用することはできない。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../cpp20/try-catch_blocks_in_constexpr_functions.html&#34;&gt;C++20 - constexpr関数内でのtry-catchブロックを許可&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.html&#34;&gt;C++20 - constexpr関数内で未評価のインラインアセンブリを許可することによる組み込み関数のconstexpr有効化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;permitting_static_constexpr_variables_in_constexpr_functions.html&#34;&gt;C++23 - &lt;code&gt;constexpr&lt;/code&gt;関数内での&lt;code&gt;static constexpr&lt;/code&gt;変数を許可&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2242r3.html&#34; target=&#34;_blank&#34;&gt;P2242R3 - Non-literal variables (and labels and gotos) in constexpr functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数内でのstatic constexpr変数を許可 [P2647R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.md b/lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.md
index d394617d3..696f276a0 100644
--- a/lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.md
+++ b/lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.md
@@ -1,6 +1,14 @@
 # constexpr関数内でのstatic constexpr変数を許可 [P2647R1]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++23からは、`constexpr`関数内で定数を定義するために、`static constexpr`変数を使用できるようになる。
 
@@ -19,8 +27,8 @@ constexpr char xdigit(int n) {
 C++20までは`constexpr`内で`static constexpr`変数を定義できなかったため、関数外での`static constexpr`変数の定義や、`consteval`関数で定数を返すなどの回避策がとられていたが、C++23からはそのような回避策が必要なくなる。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++23 定数式内での非リテラル変数、静的変数・スレッドローカル変数およびgotoとラベルの存在を許可する](/lang/cpp23/non_literal_variables_in_constexpr_functions.md)
 
 ## 参照
-- [P2647R1 Permitting `static constexpr` variables in `constexpr` functions](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2647r1.html)
+- [P2647R1 Permitting `static constexpr` variables in `constexpr` functions](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2647r1.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コード内容の仮定をコンパイラに伝える`assume`属性 [P1774R8] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/portable_assumptions.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/portable_assumptions.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/portable_assumptions.md b/lang/cpp23/portable_assumptions.md
index 7e7506e4a..32316f200 100644
--- a/lang/cpp23/portable_assumptions.md
+++ b/lang/cpp23/portable_assumptions.md
@@ -1,6 +1,14 @@
 # コード内容の仮定をコンパイラに伝える`assume`属性 [P1774R8]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 あるコード地点において実行時に満たすべき仮定(assumption)を、C++コンパイラへ最適化ヒントとして与える属性である。
 `assume`属性を適切に用いると、C++コンパイラはより高速に動作し、サイズの小さいプログラムを生成する可能性がある。
@@ -56,11 +64,11 @@ int f(int y)
 主要C++コンパイラでは独自拡張として同等機能を提供しており、高パフォーマンスや低レイテンシなアプリ開発向けでは有用であるため、C++標準の属性として採用された。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++20 `[[likely]]`, `[[unlikely]]`属性](/lang/cpp20/likely_and_unlikely_attributes.md)
 
 
 ## 参照
 - [Clang Builtin Functions `__builtin_assume`](https://clang.llvm.org/docs/LanguageExtensions.html)
 - [MSVC Compiler intrinsics `__assume`](https://learn.microsoft.com/en-us/cpp/intrinsics/assume)
-- [P1774R8 Portable assumptions](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1774r8.pdf)
+- [P1774R8 Portable assumptions](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1774r8.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>更新された定義済みマクロ -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/predefined_macros.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/predefined_macros.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;更新された定義済みマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;定義済みマクロの値が、以下のように更新された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cplusplus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202302L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++のバージョン値を表す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/n4951.html&#34; target=&#34;_blank&#34;&gt;N4951 Editors’ Report: Programming Languages — C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数が定数実行できない場合でも適格とする [P2448R2] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/relaxing_some_constexpr_restrictions.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/relaxing_some_constexpr_restrictions.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/relaxing_some_constexpr_restrictions.md b/lang/cpp23/relaxing_some_constexpr_restrictions.md
index f187fd29f..c473f793c 100644
--- a/lang/cpp23/relaxing_some_constexpr_restrictions.md
+++ b/lang/cpp23/relaxing_some_constexpr_restrictions.md
@@ -1,6 +1,14 @@
 # constexpr関数が定数実行できない場合でも適格とする [P2448R2]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 いかなる呼び出しにおいても定数式実行できない`constexpr`関数が存在しても、プログラムが不適格にならないようにする。
@@ -105,11 +113,11 @@ void f(std::optional&amp;lt;T&amp;gt;&amp;amp; opt)
 また、陽に`default`指定された関数は、それが`constexpr-suitable`である限り、暗黙に`constexpr`指定される。
 `constexpr-suitable`とは、コルーチン関数ではなく、仮想基底クラスを持つクラスのコンストラクタまたはデストラクタでもない関数を指す。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [C++20 - constexpr関数内でのtry-catchブロックを許可](/lang/cpp20/try-catch_blocks_in_constexpr_functions.md)
 - [C++20 - constexpr関数内で未評価のインラインアセンブリを許可することによる組み込み関数のconstexpr有効化](/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md)
 
 ## 参照
 
-- [P2448R2 - Relaxing some constexpr restrictions](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2448r2.html)
+- [P2448R2 - Relaxing some constexpr restrictions](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2448r2.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>1ワイド文字に収まらないワイド文字リテラルを禁止する [P2362R3] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md b/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md
index 83a1153f7..50fcf7747 100644
--- a/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md
+++ b/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md
@@ -1,6 +1,14 @@
 # 1ワイド文字に収まらないワイド文字リテラルを禁止する [P2362R3]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++23では、ワイド文字リテラルとして、以下を禁止する：
 
@@ -24,4 +32,3 @@ wchar_t c = &amp;#39;é́&amp;#39;;  // C++20:OK, C++23:NG \u0065\u0301
 
 ## 参照
 - [P2362R3 Remove non-encodable wide character literals and multicharacter wide character literals](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2362r3.pdf)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>暗黙的なムーブを簡略化 [P2266R3] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/simpler_implicit_move.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/simpler_implicit_move.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/simpler_implicit_move.md b/lang/cpp23/simpler_implicit_move.md
index 1906cc1c2..2d8fa5284 100644
--- a/lang/cpp23/simpler_implicit_move.md
+++ b/lang/cpp23/simpler_implicit_move.md
@@ -1,6 +1,14 @@
 # 暗黙的なムーブを簡略化 [P2266R3]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 
 C++20の暗黙ムーブ仕様においては、暗黙ムーブ可能なもの（関数ローカルのオブジェクト/右辺値参照）が`return`文においてコピーされる場合に、可能ならば暗黙的にムーブして戻り値を構築するものだった。しかし、暗黙ムーブ可能なものを返しており`return`文でコピーが起こらない場合で、暗黙ムーブを行うことが適切な場合がまだ存在していた。
@@ -340,4 +348,4 @@ auto g(Widget&amp;amp;&amp;amp; w) -&amp;gt; Widget&amp;amp;&amp;amp; {
 
 - [P2266R3 Simpler implicit move](https://wg21.link/p2266r3)
 - [The Complete Guide to `return x;` - Arthur O&amp;#39;Dwyer - [CppNow 2021] - YouTube](https://www.youtube.com/watch?v=OGKAJD7bmr8)
-- [c++ - Does c++23 break unmove - Stack Overflow](https://stackoverflow.com/questions/76647046/does-c23-break-unmove)
+- [c++ - Does c++23 break unmove - Stack Overflow](https://stackoverflow.com/questions/76647046/does-c23-break-unmove)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>thisポインタをもつ必要のない演算子をstaticとして宣言できるようにする [P1169R4] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/static_operator.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/static_operator.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/static_operator.md b/lang/cpp23/static_operator.md
index 10a20d927..eb8a2b816 100644
--- a/lang/cpp23/static_operator.md
+++ b/lang/cpp23/static_operator.md
@@ -1,6 +1,14 @@
 # thisポインタをもつ必要のない演算子をstaticとして宣言できるようにする [P1169R4]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 以下の演算子が`this`ポインタを必要としない (状態をもたない) 場合、演算子オーバーロードを`static`として定義できる：
 
@@ -49,11 +57,11 @@ int main()
 状態をもたない関数オブジェクトでは`this`ポインタの受け渡しは必要なく、無駄である。必要ないもののためにコストを支払わないという基本的な思想に反していたため、`this`ポインタの受け渡しをなくせる機能として、`static`指定の許可を導入した。
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 ラムダ式](/lang/cpp11/lambda_expressions.md)
 - [`std::function::`推論補助](/reference/functional/function/op_deduction_guide.md)
 
 
 ## 参照
 - [P1169R4 `static operator()`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1169r4.html)
-- [P2589R0 `static operator[]`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2589r0.pdf)
+- [P2589R0 `static operator[]`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2589r0.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>汎用的なソースコードのエンコーディングとしてUTF-8をサポート [P2295R6] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/support_for_utf8_as_a_portable_source_file_encoding.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/support_for_utf8_as_a_portable_source_file_encoding.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;汎用的なソースコードのエンコーディングとしてUTF-8をサポート [P2295R6]&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++20まで、ソースコードの文字集合は実装定義だったが、その仕様では移植性に問題があった。C++23からは、すべてのコンパイラはUTF-8文字コードのソースコードをサポートしなければならないことが規定される。&lt;/p&gt;
&lt;p&gt;コンパイラは、ほかの文字コードと区別するため、入力ファイルがUTF-8であることを決定する実装定義の手段をもたなければならない。つまり、BOM (バイトオーダーマーク) を認識するだけでは十分ではない。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2295r6.pdf&#34; target=&#34;_blank&#34;&gt;P2295R6 Support for UTF-8 as a portable source file encoding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>行末スペースを無視するよう規定 [P2223R2] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/trimming_whitespaces_before_line_splicing.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/trimming_whitespaces_before_line_splicing.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/trimming_whitespaces_before_line_splicing.md b/lang/cpp23/trimming_whitespaces_before_line_splicing.md
index fe51f851a..690e28500 100644
--- a/lang/cpp23/trimming_whitespaces_before_line_splicing.md
+++ b/lang/cpp23/trimming_whitespaces_before_line_splicing.md
@@ -1,6 +1,14 @@
 # 行末スペースを無視するよう規定 [P2223R2]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 `\` (バックスラッシュ) 後の行末スペースを無視するよう規定する。
 
@@ -58,4 +66,4 @@ int main() {
 
 
 ## 参照
-- [P2223R2 Trimming whitespaces before line splicing](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2223r2.pdf)
+- [P2223R2 Trimming whitespaces before line splicing](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2223r2.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>参照するPOSIX規格を更新 -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/update_normative_reference_to_posix.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/update_normative_reference_to_posix.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;参照するPOSIX規格を更新&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&amp;lt;-- start lang caution --&amp;gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため関連項目を参照してください。&lt;/p&gt;
&lt;p&gt;&amp;lt;-- last lang caution --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++20まではPOSIX規格としてISO/IEC 9945:2003 (別名POSIX.1-2001 aka The Single UNIX Specification, version 3) を参照していた。&lt;/p&gt;
&lt;p&gt;しかし、標準C++の一部の機能はより新しいPOSIX規格の機能を使用していたため、ISO/IEC 9945:2003への参照を削除した上で、以下の3つの規格を参照するよう変更する：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ISO/IEC/IEEE 9945:20032009, Information Technology — Portable Operating System Interface (POSIX)&lt;/li&gt;
&lt;li&gt;ISO/IEC/IEEE 9945:2009/Cor 1:2013, Information Technology — Portable Operating System Interface (POSIX), Technical Corrigendum 1&lt;/li&gt;
&lt;li&gt;ISO/IEC/IEEE 9945:2009/Cor 2:2017, Information Technology — Portable Operating System Interface (POSIX), Technical Corrigendum 2&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;posix&lt;/code&gt;名前空間の予約に関してのPOSIX規格の参照もまた、ISO/IEC 9945からISO/IEC/IEEE 9945に変更する。&lt;/p&gt;
&lt;p&gt;また、POSIXの一部環境で非推奨となっている機能である&lt;code&gt;readdir_r()&lt;/code&gt;を参照していたところを、&lt;code&gt;readdir()&lt;/code&gt;に置き換える。&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;ここでは、具体的に問題になった、標準C++が参照するPOSIXの機能を列挙する。&lt;/p&gt;
&lt;h3&gt;errno&lt;/h3&gt;
&lt;p&gt;C++03まで、&lt;code&gt;&lt;a href=&#34;../../reference/cerrno.html&#34;&gt;&amp;lt;cerrno&amp;gt;&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&amp;lt;errno.h&amp;gt;&lt;/code&gt;にはISO Cが要求する&lt;code&gt;EDOM&lt;/code&gt; (定義域エラー)、&lt;code&gt;ERANGE&lt;/code&gt; (値域エラー)、&lt;code&gt;errno&lt;/code&gt;といった必要最低限のマクロのみが含まれていた。&lt;/p&gt;
&lt;p&gt;C++11での&lt;code&gt;&lt;a href=&#34;../../reference/system_error.html&#34;&gt;&amp;lt;system_error&amp;gt;&lt;/a&gt;&lt;/code&gt;ライブラリの導入にともなって、「&lt;code&gt;&lt;a href=&#34;../../reference/cerrno.html&#34;&gt;&amp;lt;cerrno&amp;gt;&lt;/a&gt;&lt;/code&gt;で定義される内容は、&lt;code&gt;errno&lt;/code&gt;がマクロ定義されることを除いてPOSIXの&lt;code&gt;&amp;lt;errno.h&amp;gt;&lt;/code&gt;ヘッダと同じである」という規定となった。この規定のあとにマクロのリストが定義されるが、&lt;code&gt;ENOTRECOVERABLE&lt;/code&gt;と&lt;code&gt;EOWNERDEAD&lt;/code&gt;はPOSIXの2006規格、&lt;code&gt;ENOTSUP&lt;/code&gt;と&lt;code&gt;EOPNOTSUPP&lt;/code&gt;は2008規格で追加されたものだった。&lt;/p&gt;
&lt;p&gt;POSIXの2008年では標準C++で定義されるマクロのほかに&lt;code&gt;EDQUOT&lt;/code&gt;、&lt;code&gt;EMULTIHOP&lt;/code&gt;、&lt;code&gt;ENOLINK&lt;/code&gt;といった具体的な意味をもたない「予約済み」というだけのマクロももっている。すでに定義されている&lt;code&gt;ESTALE&lt;/code&gt;のようにそれらを標準C++に追加することは今後検討する必要はあるが、ここでは提案しない。&lt;/p&gt;
&lt;h3&gt;ファイルシステム&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&#34;../../reference/filesystem/path.html&#34;&gt;path&lt;/a&gt;&lt;/code&gt;クラスについて、POSIX.1-2008の4.12 Pathname ResolutionとPOSIX.1-2017の4.13 Pathname Resolutionを追加で参照する必要がある。&lt;/p&gt;
&lt;p&gt;ここで参照するほとんどの機能はPOSIX.1-2001に存在するが、ファイルの最終更新日時の&lt;code&gt;futimens()&lt;/code&gt;関数、ファイル権限の&lt;code&gt;fchmodat()&lt;/code&gt;関数は存在していない。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;truncate()&lt;/code&gt;と&lt;code&gt;statvfs()&lt;/code&gt;の機能はオプションであり、POSIXに準拠する環境に存在する必要がない。POSIX.1-2008ではこれらの機能がオプションではなくなった。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stat()&lt;/code&gt;で使用される&lt;code&gt;S_ISVTX&lt;/code&gt;マクロはオプション機能であり、XSIの一部である。これはPOSIX.1-2008とPOSIX.1-2017でもオプションのままである。&lt;/p&gt;
&lt;p&gt;POSIX.1-2001のスレッドセーフ関数 (Thread-Safe Functions : TSF) オプションの一部である&lt;code&gt;readdir_r()&lt;/code&gt;を参照する注記もあるが、POSIX.1-2008ではBaseに移動されている。ただし、&lt;code&gt;readdir_r()&lt;/code&gt; APIの実装には欠陥があり、一部の実装では非推奨となっており、将来のバージョンから削除される可能性がある。ここでは&lt;code&gt;readdir_r()&lt;/code&gt;に固有のものに依存してはいないため、&lt;code&gt;readdir()&lt;/code&gt;を参照するよう変更する。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2227r0.html&#34; target=&#34;_blank&#34;&gt;P2227R0 Update normative reference to POSIX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>#warningのサポートを追加 [P2437R1] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/warning.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp23/warning.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/warning.md b/lang/cpp23/warning.md
index 4706b00c5..4fd054a68 100644
--- a/lang/cpp23/warning.md
+++ b/lang/cpp23/warning.md
@@ -1,6 +1,14 @@
 # #warningのサポートを追加 [P2437R1]
 * cpp23[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++23に採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため関連項目を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++23では、プリプロセッサ命令として、特定のコードに到達した際に警告メッセージを出力する `#warning` をサポートする。
 
@@ -53,4 +61,4 @@ Hello
 
 
 ## 参照
-- [P2437R1 Support for `#warning`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2437r1.pdf)
+- [P2437R1 Support for `#warning`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2437r1.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>static_assertの診断メッセージにユーザーが生成した文字列の指定を許可 [P2741R3] -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/cpp26/user-generated_static_assert_messages.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/cpp26/user-generated_static_assert_messages.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp26/user-generated_static_assert_messages.md b/lang/cpp26/user-generated_static_assert_messages.md
index 06e1dadb8..53a361bbf 100644
--- a/lang/cpp26/user-generated_static_assert_messages.md
+++ b/lang/cpp26/user-generated_static_assert_messages.md
@@ -1,6 +1,14 @@
 # static_assertの診断メッセージにユーザーが生成した文字列の指定を許可 [P2741R3]
 * cpp26[meta cpp]
 
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++26に採用される見込みの言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 C++26では、[`static_assert`](/lang/cpp11/static_assert.md)に指定する表明失敗時の診断メッセージとして、文字列リテラルだけでなくユーザー定義型の文字列オブジェクトも指定できるようになる。
 
@@ -43,9 +51,9 @@ static_assert(定数式, 診断メッセージ);
     - `&amp;#34;message&amp;#34;`はOK
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 コンパイル時アサート](/lang/cpp11/static_assert.md)
 
 
 ## 参照
-- [P2741R3 user-generated `static_assert` messages](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2741r3.pdf)
+- [P2741R3 user-generated `static_assert` messages](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2741r3.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>契約に基づくプログラミング -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/lang/future/contract-based_programming.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:lang/future/contract-based_programming.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/future/contract-based_programming.md b/lang/future/contract-based_programming.md
index c57629ed6..4d05db8c7 100644
--- a/lang/future/contract-based_programming.md
+++ b/lang/future/contract-based_programming.md
@@ -259,11 +259,11 @@ struct derived : base {
 
 なお、[`assert`マクロ](/reference/cassert/assert.md)は関数形式のマクロなので、`[[assert]]`属性を置換してしまうことはない。
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++11 属性構文](/lang/cpp11/attributes.md)
 - [C++11 コンパイル時アサート](/lang/cpp11/static_assert.md)
 - [`assert`マクロ](/reference/cassert/assert.md)
 
 ## 参照
 - [P0542R5 Support for contract based programming in C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0542r5.html)
-- [ET: Inheritance Inheritance and contracts - Eiffel.org](https://www.eiffel.org/doc/eiffel/ET-_Inheritance#Inheritance_and_contracts)
+- [ET: Inheritance Inheritance and contracts - Eiffel.org](https://www.eiffel.org/doc/eiffel/ET-_Inheritance#Inheritance_and_contracts)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- 言語機能 : 関連項目に誘導する注意事項を記載。注意事項を更新するスクリプトを追加 #1275</title>
      <link href="https://cpprefjp.github.io/start_editing/lang_template_page.html"/>
      <id>2838b3898db0a4371de5228312a431c88fa3aa2c:start_editing/lang_template_page.md</id>
      <updated>2024-07-08T15:48:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/lang_template_page.md b/start_editing/lang_template_page.md
index e66a017ef..20e089f9f 100644
--- a/start_editing/lang_template_page.md
+++ b/start_editing/lang_template_page.md
@@ -30,6 +30,27 @@
 &amp;lt;!--    `future[meta cpp]` : 将来のC++で検討されている機能 --&amp;gt;
 &amp;lt;!--    `archive[meta cpp]` : 廃案になったが記録として残す価値のあるC++機能 --&amp;gt;
 
+(確定した言語バージョンに対する注意事項は以下)
+
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++XXに採用された言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
+
+(確定前の言語バージョンに対する注意事項は以下)
+
+&amp;lt;-- start lang caution --&amp;gt;
+
+このページはC++26に採用される見込みの言語機能の変更を解説しています。
+
+のちのC++規格でさらに変更される場合があるため[関連項目](#relative_page)を参照してください。
+
+&amp;lt;-- last lang caution --&amp;gt;
+
 ## 概要
 (ここには、言語機能の概要を記載します。)
 
@@ -39,6 +60,8 @@
 ## 仕様
 (ここには、言語機能の仕様を記載します。最初のコミットから完璧にする必要はありません。徐々に詳細にしていけばOKです。)
 
+(同じ言語バージョン内で他の仕様更新と変更箇所が衝突する場合があります。その場合は、可能であればそれらの変更を考慮・マージした仕様で記載してください。)
+
 
 ## 例
 ```cpp example
@@ -74,7 +97,7 @@ int main()
 (ここには、その言語機能が実際に採用されるまでに検討された、ほかの設計選択を記述します。どのような選択肢があって今の言語機能となったのかがわかるようにします。)
 
 
-## 関連項目
+## ## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 (ここには、その言語機能と関連のあるcpprefjpサイト内の項目へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
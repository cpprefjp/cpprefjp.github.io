<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-05-17T05:05:59.864186</updated>
  <id>ce2e8fd8-fbcd-445c-9e29-1a5c1a7086b6</id>

  
    <entry>
      <title>format -- C++26対応として、実行時の書式文字列サポートを記載 (close #1236)</title>
      <link href="https://cpprefjp.github.io/reference/format.html"/>
      <id>cd7aed4ae9a5a212335242bacf44ae21e779275f:reference/format.md</id>
      <updated>2024-05-17T14:01:28+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;format&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt;ヘッダでは、書式文字列を使って引数をフォーマットする、いわゆる&lt;code&gt;printf&lt;/code&gt;スタイルのフォーマット関数を提供する。
このフォーマット関数は型安全であり、ユーザー定義型への拡張も可能である。&lt;/p&gt;
&lt;p&gt;書式文字列については&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;format&lt;/a&gt;&lt;/code&gt;を参照。&lt;/p&gt;
&lt;h2&gt;フォーマット関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;format&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列を使って引数をフォーマットした文字列を返す (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_to.html&#34;&gt;format_to&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列を使って引数をフォーマットし、出力イテレータに出力する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_to_n.html&#34;&gt;format_to_n&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列を使って引数をフォーマットし、指定した文字数を超えないように出力イテレータに出力する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_to_n_result.html&#34;&gt;format_to_n_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;format_to_n&lt;/code&gt;の結果を表す (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/formatted_size.html&#34;&gt;formatted_size&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列を使って引数をフォーマットした文字列を保存するのに必要な文字数を返す (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/vformat.html&#34;&gt;vformat&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;format&lt;/a&gt;&lt;/code&gt;の非テンプレート版 (function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/vformat_to.html&#34;&gt;vformat_to&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_to.html&#34;&gt;format_to&lt;/a&gt;&lt;/code&gt;の非テンプレート版 (function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;フォーマッター&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/formattable.html&#34;&gt;formattable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列フォーマット可能 (concept)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/formatter.html&#34;&gt;formatter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数の型に対応する書式文字列の解析、値のフォーマットを担う (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_parse_context.html&#34;&gt;basic_format_parse_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列の解析のコンテキスト (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_parse_context.html&#34;&gt;format_parse_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_parse_context&lt;/code&gt;のマルチバイト文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_parse_context.html&#34;&gt;wformat_parse_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_parse_context&lt;/code&gt;のワイド文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_context.html&#34;&gt;basic_format_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数のフォーマットのコンテキスト (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_context.html&#34;&gt;format_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_context&lt;/code&gt;のマルチバイト文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_context.html&#34;&gt;wformat_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_context&lt;/code&gt;のワイド文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/range_format.html&#34;&gt;range_format&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Rangeの書式種別 (enum)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_kind.html&#34;&gt;format_kind&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定したRangeの書式種別を取得する (variable)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/const-formattable-range.html&#34;&gt;const-formattable-range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const Range&lt;/code&gt;の要素型が文字列フォーマット可能 (concept)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/fmt-maybe-const.html&#34;&gt;fmt-maybe-const&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;formatter::format()&lt;/code&gt;関数のパラメータ型として使用するための(const) Range型を取得 (type-alias)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/range_formatter.html&#34;&gt;range_formatter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Rangeに対する書式文字列の解析、値のフォーマットを行う (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/range-default-formatter.html&#34;&gt;range-default-formatter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Rangeに対する共通の書式文字列の解析、値のフォーマットを行う説明専用クラス (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;引数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_arg.html&#34;&gt;basic_format_arg&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数1つへのアクセスを提供する (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/visit_format_arg.html&#34;&gt;visit_format_arg&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_arg&lt;/code&gt;オブジェクトが現在保持している型に対応する関数を呼び出す (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/make_format_args.html&#34;&gt;make_format_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可変長引数から&lt;code&gt;basic_format_arg&lt;/code&gt;の列を構築する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/make_format_args.html&#34;&gt;make_wformat_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;make_wformat_args&lt;/code&gt;のワイド文字列版 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_args.html&#34;&gt;basic_format_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数列へのアクセスを提供する (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_args.html&#34;&gt;format_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_args&lt;/code&gt;のマルチバイト文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_args.html&#34;&gt;wformat_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_args&lt;/code&gt;のワイド文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;書式文字列&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_string.html&#34;&gt;basic_format_string&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式のコンパイル時文字列クラス (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/runtime-format-string.html&#34;&gt;runtime-format-string&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;説明用としての書式の実行時文字列クラス (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/runtime_format.html&#34;&gt;runtime_format&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式の実行時文字列を指定するために文字列をラップする (function)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_error.html&#34;&gt;format_error&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;フォーマットの失敗を表す例外クラス (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++20&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/format&#34; target=&#34;_blank&#34;&gt;Working Draft, Standard for Programming Language C++ [format]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html&#34; target=&#34;_blank&#34;&gt;P0645R10 Text Formatting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- C++26対応として、実行時の書式文字列サポートを記載 (close #1236)</title>
      <link href="https://cpprefjp.github.io/reference/format/basic_format_string/op_constructor.html"/>
      <id>cd7aed4ae9a5a212335242bacf44ae21e779275f:reference/format/basic_format_string/op_constructor.md</id>
      <updated>2024-05-17T14:01:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/basic_format_string/op_constructor.md b/reference/format/basic_format_string/op_constructor.md
index e3f944b66..50a3e629d 100644
--- a/reference/format/basic_format_string/op_constructor.md
+++ b/reference/format/basic_format_string/op_constructor.md
@@ -7,12 +7,18 @@
 
 ```cpp
 template &amp;lt;class T&amp;gt;
-consteval basic_format_string(const T&amp;amp; s);
+consteval basic_format_string(const T&amp;amp; s); // (1) C++23
+
+basic_format_string(runtime-format-string&amp;lt;charT&amp;gt; s) noexcept; // (2) C++26
 ```
+* runtime-format-string[link /reference/format/runtime-format-string.md]
 
 ## 概要
 `basic_format_string`オブジェクトを構築する。
 
+- (1) : コンパイル時の書式文字列を受け取る
+- (2) : 実行時の書式文字列を受け取る
+
 
 ## テンプレートパラメータ制約
 - `const T&amp;amp;`は[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;`[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT&amp;gt;&amp;gt;`のモデルであること
@@ -90,3 +96,4 @@ namespace std {
 
 ## 参照
 - [P2216R3 `std::format` improvements](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2216r3.html)
+- [P2918R2 Runtime format strings II](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2918r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- C++26対応として、実行時の書式文字列サポートを記載 (close #1236)</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>cd7aed4ae9a5a212335242bacf44ae21e779275f:reference/format/format.md</id>
      <updated>2024-05-17T14:01:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index 2f280f494..ea254bb9b 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -618,6 +618,27 @@ int main()
 ```
 
 
+### 実行時文字列を書式文字列として使用する (C++26)
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+int main()
+{
+  std::string fmt = &amp;#34;{}&amp;#34;;
+  std::string s = std::format(std::runtime_format(fmt), &amp;#34;Hello&amp;#34;);
+
+  std::cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::runtime_format[link runtime_format.md]
+
+#### 出力
+```
+Hello
+```
+
+
 ## 実装例
 ```cpp
 template&amp;lt;class... Args&amp;gt;
@@ -672,6 +693,7 @@ wstring format(const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... ar
 - [`&amp;lt;ostream&amp;gt;`](/reference/ostream.md)
     - [`std::print()`](/reference/ostream/print.md)
     - [`std::println()`](/reference/ostream/println.md)
+- [`std::runtime_format()`](runtime_format.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>runtime-format-string -- C++26対応として、実行時の書式文字列サポートを記載 (close #1236)</title>
      <link href="https://cpprefjp.github.io/reference/format/runtime-format-string.html"/>
      <id>cd7aed4ae9a5a212335242bacf44ae21e779275f:reference/format/runtime-format-string.md</id>
      <updated>2024-05-17T14:01:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/runtime-format-string.md b/reference/format/runtime-format-string.md
new file mode 100644
index 000000000..cfbbcd18b
--- /dev/null
+++ b/reference/format/runtime-format-string.md
@@ -0,0 +1,50 @@
+# runtime-format-string
+* format[meta header]
+* class[meta id-type]
+* std[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+
+template &amp;lt;class charT&amp;gt;
+struct runtime-format-string {
+private:
+  basic_string_view&amp;lt;charT&amp;gt; str;  // 説明用
+
+public:
+  runtime-format-string(basic_string_view&amp;lt;charT&amp;gt; s) noexcept : str(s) {}
+
+  runtime-format-string(const runtime-format-string&amp;amp;) = delete;
+  const runtime-format-string&amp;amp; operator=(const runtime-format-string&amp;amp;) = delete;
+};
+
+}
+```
+
+
+## 概要
+`runtime-format-string`クラスは、実行時の書式文字列を表す説明用のクラスであり、ユーザーは使用できない。
+
+このクラスは、[`std::string`](/reference/string/basic_string.md)や[`std::string_view`](/reference/string_view/basic_string_view.md)の文字列を、書式文字列として[`std::format()`](/reference/format/format.md)関数に指定するためにある。
+
+```cpp
+std::string fmt = &amp;#34;{}&amp;#34;;
+std::string s = std::format(std::runtime_format(fmt), &amp;#34;Hello&amp;#34;);
+```
+* std::format[link format.md]
+* std::runtime_format[link runtime_format.md]
+
+
+## バージョン
+### 言語
+- C++26
+
+## 関連項目
+- [`std::format()`](format.md)
+- [`std::runtime_format()`](runtime_format.md)
+- [`std::basic_format_string`クラスのコンストラクタ](basic_format_string/op_constructor.md)
+
+
+## 参照
+- [P2918R2 Runtime format strings II](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2918r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>runtime_format -- C++26対応として、実行時の書式文字列サポートを記載 (close #1236)</title>
      <link href="https://cpprefjp.github.io/reference/format/runtime_format.html"/>
      <id>cd7aed4ae9a5a212335242bacf44ae21e779275f:reference/format/runtime_format.md</id>
      <updated>2024-05-17T14:01:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/runtime_format.md b/reference/format/runtime_format.md
new file mode 100644
index 000000000..cee2090df
--- /dev/null
+++ b/reference/format/runtime_format.md
@@ -0,0 +1,68 @@
+# runtime_format
+* format[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  runtime-format-string&amp;lt;char&amp;gt;
+    runtime_format(string_view fmt) noexcept;  // (1) C++26
+
+  runtime-format-string&amp;lt;wchar_t&amp;gt;
+    runtime_format(wstring_view fmt) noexcept; // (2) C++26
+}
+```
+* runtime-format-string[link runtime-format-string.md]
+* wstring_view[link /reference/string_view/basic_string_view.md]
+
+## 概要
+実行時文字列を書式文字列として使用できるようラップする。
+
+このクラスは、[`std::string`](/reference/string/basic_string.md)や[`std::string_view`](/reference/string_view/basic_string_view.md)の文字列を、書式文字列として[`std::format()`](/reference/format/format.md)関数に指定するための型に変換する関数である。
+
+
+## 戻り値
+```cpp
+return fmt;
+```
+
+
+## 例
+```cpp example
+#include &amp;lt;print&amp;gt;
+
+int main()
+{
+  std::string fmt = &amp;#34;{}&amp;#34;;
+
+  std::string s = std::format(std::runtime_format(fmt), &amp;#34;Hello&amp;#34;);
+  std::println(std::runtime_format(fmt), s);
+}
+```
+* std::runtime_format[color ff0000]
+* std::format[link format.md]
+
+### 出力
+```
+Hello
+```
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 14
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`std::format()`](format.md)
+- [`runtime-format-string`](runtime-format-string.md)
+- [`std::basic_format_string`クラスのコンストラクタ](basic_format_string/op_constructor.md)
+
+
+## 参照
+- [P2918R2 Runtime format strings II](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2918r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>print -- C++26対応として、実行時の書式文字列サポートを記載 (close #1236)</title>
      <link href="https://cpprefjp.github.io/reference/ostream/print.html"/>
      <id>cd7aed4ae9a5a212335242bacf44ae21e779275f:reference/ostream/print.md</id>
      <updated>2024-05-17T14:01:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ostream/print.md b/reference/ostream/print.md
index 8b0f87013..580ef017d 100644
--- a/reference/ostream/print.md
+++ b/reference/ostream/print.md
@@ -72,6 +72,7 @@ namespace std {
 
 
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 
@@ -83,12 +84,29 @@ int main()
 ```
 * std::print[color ff0000]
 
-### 出力
+#### 出力
 ```
 Hello 42 World
 Hello 42 World
 ```
 
+### 実行時の書式文字列を使用する (C++26)
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::string fmt = &amp;#34;{}\n&amp;#34;;
+  std::print(std::cout, std::runtime_format(fmt), &amp;#34;Hello&amp;#34;);
+}
+```
+* std::runtime_format[link /reference/format/runtime_format.md]
+
+#### 出力
+```
+Hello
+```
+
 ## バージョン
 ### 言語
 - C++23
@@ -102,6 +120,7 @@ Hello 42 World
 
 ## 関連項目
 - [`std::format()`](/reference/format/format.md)
+- [`std::runtime_format()`](/reference/format/runtime_format.md)
 - [`std::println()`](println.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>println -- C++26対応として、実行時の書式文字列サポートを記載 (close #1236)</title>
      <link href="https://cpprefjp.github.io/reference/ostream/println.html"/>
      <id>cd7aed4ae9a5a212335242bacf44ae21e779275f:reference/ostream/println.md</id>
      <updated>2024-05-17T14:01:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ostream/println.md b/reference/ostream/println.md
index d71760d28..c11833527 100644
--- a/reference/ostream/println.md
+++ b/reference/ostream/println.md
@@ -40,6 +40,7 @@ namespace std {
 
 
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 
@@ -51,12 +52,29 @@ int main()
 ```
 * std::println[color ff0000]
 
-### 出力
+#### 出力
 ```
 Hello 42 World
 Hello 42 World
 ```
 
+### 実行時の書式文字列を使用する (C++26)
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::string fmt = &amp;#34;{}&amp;#34;;
+  std::println(std::cout, std::runtime_format(fmt), &amp;#34;Hello&amp;#34;);
+}
+```
+* std::runtime_format[link /reference/format/runtime_format.md]
+
+#### 出力
+```
+Hello
+```
+
 ## バージョン
 ### 言語
 - C++23
@@ -70,6 +88,7 @@ Hello 42 World
 
 ## 関連項目
 - [`std::format()`](/reference/format/format.md)
+- [`std::runtime_format()`](/reference/format/runtime_format.md)
 - [`std::print()`](print.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>print -- C++26対応として、実行時の書式文字列サポートを記載 (close #1236)</title>
      <link href="https://cpprefjp.github.io/reference/print/print.html"/>
      <id>cd7aed4ae9a5a212335242bacf44ae21e779275f:reference/print/print.md</id>
      <updated>2024-05-17T14:01:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/print/print.md b/reference/print/print.md
index d23f0e61c..cd3b732f3 100644
--- a/reference/print/print.md
+++ b/reference/print/print.md
@@ -118,7 +118,7 @@ int main()
   // stdout / stderrはマクロとして定義される。
   // モジュールはマクロをエクスポートしないので、
   // stdout / stderrを使用する場合は&amp;lt;cstdio&amp;gt;をインクルードする必要がある
-  std::println(stdout, &amp;#34;Hello {} World\n&amp;#34;, 42);
+  std::print(stdout, &amp;#34;Hello {} World\n&amp;#34;, 42);
 }
 ```
 
@@ -128,6 +128,23 @@ Hello 42 World
 Hello 42 World
 ```
 
+### 実行時の書式文字列を使用する (C++26)
+```cpp example
+#include &amp;lt;print&amp;gt;
+
+int main()
+{
+  std::string fmt = &amp;#34;{}\n&amp;#34;;
+  std::print(std::runtime_format(fmt), &amp;#34;Hello&amp;#34;);
+}
+```
+* std::runtime_format[link /reference/format/runtime_format.md]
+
+#### 出力
+```
+Hello
+```
+
 ## バージョン
 ### 言語
 - C++23
@@ -141,6 +158,7 @@ Hello 42 World
 
 ## 関連項目
 - [`std::format()`](/reference/format/format.md)
+- [`std::runtime_format()`](/reference/format/runtime_format.md)
 - [`std::println()`](println.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>println -- C++26対応として、実行時の書式文字列サポートを記載 (close #1236)</title>
      <link href="https://cpprefjp.github.io/reference/print/println.html"/>
      <id>cd7aed4ae9a5a212335242bacf44ae21e779275f:reference/print/println.md</id>
      <updated>2024-05-17T14:01:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/print/println.md b/reference/print/println.md
index 969973215..c9b44ad26 100644
--- a/reference/print/println.md
+++ b/reference/print/println.md
@@ -96,6 +96,23 @@ Hello 42 World
 Hello 42 World
 ```
 
+### 実行時の書式文字列を使用する (C++26)
+```cpp example
+#include &amp;lt;print&amp;gt;
+
+int main()
+{
+  std::string fmt = &amp;#34;{}&amp;#34;;
+  std::println(std::runtime_format(fmt), &amp;#34;Hello&amp;#34;);
+}
+```
+* std::runtime_format[link /reference/format/runtime_format.md]
+
+#### 出力
+```
+Hello
+```
+
 ## バージョン
 ### 言語
 - C++23
@@ -109,6 +126,7 @@ Hello 42 World
 
 ## 関連項目
 - [`std::format()`](/reference/format/format.md)
+- [`std::runtime_format()`](/reference/format/runtime_format.md)
 - [`std::print()`](print.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_stacktrace -- basic_stacktrace : pmrを追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace.html"/>
      <id>210af738545a0f95e80561a34793b4a931208204:reference/stacktrace/basic_stacktrace.md</id>
      <updated>2024-05-15T13:29:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace.md b/reference/stacktrace/basic_stacktrace.md
index 18aa7ed55..6833f0feb 100644
--- a/reference/stacktrace/basic_stacktrace.md
+++ b/reference/stacktrace/basic_stacktrace.md
@@ -10,9 +10,14 @@ namespace std {
   class basic_stacktrace;
 
   using stacktrace = basic_stacktrace&amp;lt;allocator&amp;lt;stacktrace_entry&amp;gt;&amp;gt;;
+
+  namespace pmr {
+    using stacktrace = basic_stacktrace&amp;lt;polymorphic_allocator&amp;lt;stacktrace_entry&amp;gt;&amp;gt;;
+  }
 }
 ```
 * allocator[link /reference/memory/allocator.md]
+* polymorphic_allocator[link /reference/memory_resource/polymorphic_allocator.md]
 * stacktrace_entry[link stacktrace_entry.md]
 
 ## 概要
@@ -244,3 +249,4 @@ Expression &amp;#39;i &amp;gt;= 0&amp;#39; is false in f(int) at /app/example.cpp:15
 
 ## 参照
 - [P2693R1 Formatting `thread::id` and `stacktrace`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2693r1.pdf)
+- [P2301R1 Add a `pmr` alias for `std::stacktrace`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2301r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>id -- thread::id : formatterを追加</title>
      <link href="https://cpprefjp.github.io/reference/thread/thread/id.html"/>
      <id>39c8d434115cc793b7cdee8a445d614a39f9699e:reference/thread/thread/id.md</id>
      <updated>2024-05-15T13:22:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/thread/id.md b/reference/thread/thread/id.md
index 2c2e9cc7a..dd6c9da7d 100644
--- a/reference/thread/thread/id.md
+++ b/reference/thread/thread/id.md
@@ -62,13 +62,20 @@ namespace std {
 | `operator&amp;lt;&amp;lt;` | `thread::id`のストリーム出力。 フォーマットは未規定だが、他の識別子と異なることがわかる表現となる。 | C++11 |
 
 
-## hashサポート
+## ハッシュサポート
 
 | 名前 | 説明 | 対応バージョン |
 |--------|-----------------------------------------|-------|
 | `hash` | `thread::id`での特殊化 (class template) | C++11 |
 
 
+## 文字列フォーマットサポート
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`formatter`](id/formatter.md) | [`std::formatter`](/reference/format/formatter.md)クラスの特殊化 | C++23 |
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- thread::id : formatterを追加</title>
      <link href="https://cpprefjp.github.io/reference/thread/thread/id/formatter.html"/>
      <id>39c8d434115cc793b7cdee8a445d614a39f9699e:reference/thread/thread/id/formatter.md</id>
      <updated>2024-05-15T13:22:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/thread/id/formatter.md b/reference/thread/thread/id/formatter.md
new file mode 100644
index 000000000..9081dcaa6
--- /dev/null
+++ b/reference/thread/thread/id/formatter.md
@@ -0,0 +1,65 @@
+# formatter
+* thread[meta header]
+* std[meta namespace]
+* thread::id[meta class]
+* class[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class charT&amp;gt;
+  class formatter&amp;lt;thread::id, charT&amp;gt;;
+}
+```
+
+## 概要
+`thread::id`クラスに対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化。
+
+フォーマットフラグとしては、以下を使用できる：
+
+```
+[[fill] [align] [width]]
+```
+
+
+## 例
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;thread&amp;gt;
+
+int main()
+{
+  std::println(&amp;#34;{}&amp;#34;, std::this_thread::get_id());
+  std::println(&amp;#34;{: &amp;gt;30}&amp;#34;, std::this_thread::get_id());
+}
+```
+* std::this_thread[link /reference/thread/this_thread.md]
+* get_id()[link /reference/thread/this_thread/get_id.md]
+
+### 出力
+```
+140474254677824
+               140474254677824
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 14
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+### 備考
+- GCCは14.1段階では、[`&amp;lt;sstream&amp;gt;`](/reference/sstream.md)を追加でインクルードしなければコンパイルエラーとなる
+    - [Bug 115099 - compilation error: format `thread::id`](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=115099)
+
+
+## 関連項目
+- [`std::format()`](/reference/format/format.md) (フォーマットの詳細)
+
+
+## 参照
+- [P2693R1 Formatting `thread::id` and `stacktrace`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2693r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_stacktrace -- stacktrace : formatterの特殊化を追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace.html"/>
      <id>e6a1afa4e17e3e9cda6ebd5c559a07839bf77644:reference/stacktrace/basic_stacktrace.md</id>
      <updated>2024-05-15T13:01:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace.md b/reference/stacktrace/basic_stacktrace.md
index 9b92d325f..18aa7ed55 100644
--- a/reference/stacktrace/basic_stacktrace.md
+++ b/reference/stacktrace/basic_stacktrace.md
@@ -155,6 +155,13 @@ namespace std {
 | `template &amp;lt;class Allocator&amp;gt;`&amp;lt;br/&amp;gt; `struct hash&amp;lt;basic_stacktrace&amp;lt;Allocator&amp;gt;&amp;gt;;` | `hash`クラスの`basic_stacktrace`に対する特殊化 | C++23 |
 
 
+### 文字列フォーマットサポート
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `template &amp;lt;class Allocator&amp;gt;`&amp;lt;br/&amp;gt; `struct formatter&amp;lt;basic_stacktrace&amp;lt;Allocator&amp;gt;&amp;gt;;` | [`formatter`](/reference/format/formatter.md)の特殊化 | C++23 |
+
+
 ## 例
 ### 基本的な使い方
 ```cpp example
@@ -234,3 +241,6 @@ Expression &amp;#39;i &amp;gt;= 0&amp;#39; is false in f(int) at /app/example.cpp:15
     - 13まで : `-lstdc++_libbacktrace`
     - 14以降 : `-lstdc++exp`
 
+
+## 参照
+- [P2693R1 Formatting `thread::id` and `stacktrace`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2693r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stacktrace_entry -- stacktrace : formatterの特殊化を追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/stacktrace_entry.html"/>
      <id>e6a1afa4e17e3e9cda6ebd5c559a07839bf77644:reference/stacktrace/stacktrace_entry.md</id>
      <updated>2024-05-15T13:01:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/stacktrace_entry.md b/reference/stacktrace/stacktrace_entry.md
index fd95a8859..a71f52ce2 100644
--- a/reference/stacktrace/stacktrace_entry.md
+++ b/reference/stacktrace/stacktrace_entry.md
@@ -86,6 +86,13 @@ namespace std {
 | `template &amp;lt;&amp;gt;`&amp;lt;br/&amp;gt; `struct hash&amp;lt;stacktrace_entry&amp;gt;;` | `hash`クラスの`stacktrace_entry`に対する特殊化 | C++23 |
 
 
+## 文字列フォーマットサポート
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`formatter`](stacktrace_entry/formatter.md) | [`std::formatter`](/reference/format/formatter.md)クラスの特殊化 | C++23 |
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- stacktrace : formatterの特殊化を追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/stacktrace_entry/formatter.html"/>
      <id>e6a1afa4e17e3e9cda6ebd5c559a07839bf77644:reference/stacktrace/stacktrace_entry/formatter.md</id>
      <updated>2024-05-15T13:01:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/stacktrace_entry/formatter.md b/reference/stacktrace/stacktrace_entry/formatter.md
new file mode 100644
index 000000000..9ba096a8f
--- /dev/null
+++ b/reference/stacktrace/stacktrace_entry/formatter.md
@@ -0,0 +1,68 @@
+# formatter
+* stacktrace[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  struct formatter&amp;lt;stacktrace_entry&amp;gt;;
+}
+```
+
+## 概要
+`stacktrace_entry`クラスに対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化。
+
+フォーマットフラグとしては、以下を使用できる：
+
+```
+[[fill] [align] [width]]
+```
+
+
+## 例
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+
+void g() {
+  std::stacktrace st = std::stacktrace::current(0, 1);
+  std::stacktrace_entry entry = st[0];
+
+  std::println(&amp;#34;{}&amp;#34;, entry);
+  std::println(&amp;#34;{: &amp;gt;30}&amp;#34;, entry);
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+}
+```
+* std::stacktrace[link /reference/stacktrace/basic_stacktrace.md]
+* current[link /reference/stacktrace/basic_stacktrace/current.md]
+
+### 出力
+```
+ g() at /app/example.cpp:5
+     g() at /app/example.cpp:5
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 14
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`std::format()`](/reference/format/format.md) (フォーマットの詳細)
+
+
+## 参照
+- [P2693R1 Formatting `thread::id` and `stacktrace`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2693r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- format : C++26対応としてポインタ値を大文字で出力するPオプションを追加 (close #1187)</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>0b3b945a6d99aa56c955e2abbc367af09a3fa85c:reference/format/format.md</id>
      <updated>2024-05-15T12:25:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index 8745522d7..2f280f494 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -155,9 +155,10 @@ string s3 = format(&amp;#34;{} {1}&amp;#34;,  &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // コンパイルエラー
 
 #### ポインタの場合
 
-| type       | 意味               | 効果                                                                                                            |
-|:-----------|:-------------------|:----------------------------------------------------------------------------------------------------------------|
-| p          | アドレスを出力する | `0x` につづいて、`to_chars(first, last, reinterpret_cast&amp;lt;uintptr_t&amp;gt;(value), 16)` の結果を出力する               |
+| type | 意味               | 効果                                                                                              | 対応バージョン |
+|:-----|:-------------------|:--------------------------------------------------------------------------------------------------|----------------|
+| p    | アドレスを出力する | `0x` につづいて、`to_chars(first, last, reinterpret_cast&amp;lt;uintptr_t&amp;gt;(value), 16)` の結果を出力する | C++20 |
+| P    | アドレスを出力する | pと基本的に同じだが、9桁を超える場合に大文字にし、先頭に`0X`をつける | C++26 |
 
 デフォルトは `p`。
 
@@ -682,3 +683,5 @@ wstring format(const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... ar
 - [P2286R8 Formatting Ranges](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2286r8.html)
     - C++23から、Range・コンテナ、`pair`、`tuple`のフォーマット出力、および文字・文字列のデバッグ指定 (`&amp;#34;?&amp;#34;`) が追加された
 - [P2418R2 Add support for `std::generator`-like types to `std::format`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2418r2.html)
+- [P2510R3 Formatting pointers](https://open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2510r3.pdf)
+    - C++26から、ポインタ値を大文字で出力する`P`オプションが追加された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-08-02T03:54:52.124094</updated>
  <id>38f7dccd-e169-4909-9b80-c317e2273c88</id>

  
    <entry>
      <title>operator-- -- コード修飾等の修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_decrement.html"/>
      <id>ea6381e681e5e706f23d38d721cfbfc361003d24:reference/iterator/basic_const_iterator/op_decrement.md</id>
      <updated>2023-08-02T12:48:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_decrement.md b/reference/iterator/basic_const_iterator/op_decrement.md
index 7448315d9..e0e0c24df 100644
--- a/reference/iterator/basic_const_iterator/op_decrement.md
+++ b/reference/iterator/basic_const_iterator/op_decrement.md
@@ -10,7 +10,7 @@ constexpr basic_const_iterator&amp;amp; operator--() requires bidirectional_iterator&amp;lt;Ite
 
 constexpr basic_const_iterator operator--(int) requires bidirectional_iterator&amp;lt;Iterator&amp;gt;;   // (2)
 ```
-* bidirectional_iterator[link ./bidirectional_iterator.md]
+* bidirectional_iterator[link /reference/iterator/bidirectional_iterator.md]
 
 ## 概要
 
@@ -55,8 +55,8 @@ int main() {
   
 }
 ```
-* --ci[color ff0000]
-* ci--[color ff0000]
+* --cit[color ff0000]
+* cit--[color ff0000]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator++ -- コード修飾等の修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_increment.html"/>
      <id>ea6381e681e5e706f23d38d721cfbfc361003d24:reference/iterator/basic_const_iterator/op_increment.md</id>
      <updated>2023-08-02T12:48:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_increment.md b/reference/iterator/basic_const_iterator/op_increment.md
index 6e70a7f50..635fcaf4f 100644
--- a/reference/iterator/basic_const_iterator/op_increment.md
+++ b/reference/iterator/basic_const_iterator/op_increment.md
@@ -11,7 +11,7 @@ constexpr basic_const_iterator&amp;amp; operator++();   // (1)
 constexpr void operator++(int);                 // (2)
 constexpr basic_const_iterator operator++(int) requires forward_iterator&amp;lt;Iterator&amp;gt;; // (3)
 ```
-* forward_iterator[link ./forward_iterator.md]
+* forward_iterator[link /reference/iterator/forward_iterator.md]
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_const_iterator -- basic_const_iterator : ++ -- += -= 追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator.html"/>
      <id>92d89626f7c03750772c8d97b61a28e19a0a73d9:reference/iterator/basic_const_iterator.md</id>
      <updated>2023-08-02T12:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator.md b/reference/iterator/basic_const_iterator.md
index e914d17ba..7f5ee0d71 100644
--- a/reference/iterator/basic_const_iterator.md
+++ b/reference/iterator/basic_const_iterator.md
@@ -24,11 +24,11 @@ namespace std {
 | [`base`](basic_const_iterator/base.md)                    | 元のイテレータを取得する | C++23 |
 | [`operator*`](basic_const_iterator/op_deref.md)           | 間接参照演算子 | C++23 |
 | [`operator-&amp;gt;`](basic_const_iterator/op_arrow.md)          | メンバアクセス演算子 | C++23 |
-| [`operator++`](basic_const_iterator/op_increment.md.nolink)      | イテレータをインクリメントする | C++23 |
-| [`operator--`](basic_const_iterator/op_decrement.md.nolink)      | イテレータをデクリメントする | C++23 |
-| [`operator+=`](basic_const_iterator/op_plus_assign.md.nolink)    | イテレータ自身を進める | C++23 |
+| [`operator++`](basic_const_iterator/op_increment.md)      | イテレータをインクリメントする | C++23 |
+| [`operator--`](basic_const_iterator/op_decrement.md)      | イテレータをデクリメントする | C++23 |
+| [`operator+=`](basic_const_iterator/op_plus_assign.md)    | イテレータ自身を進める | C++23 |
 | [`operator-`](basic_const_iterator/op_unary_minus.md.nolink)     | イテレータを逆に進める | C++23 |
-| [`operator-=`](basic_const_iterator/op_minus_assign.md.nolink)   | イテレータ自身を逆に進める | C++23 |
+| [`operator-=`](basic_const_iterator/op_minus_assign.md)   | イテレータ自身を逆に進める | C++23 |
 | [`operator[]`](basic_const_iterator/op_at.md.nolink)             | 任意の位置にランダムアクセスする | C++23 |
 | [`operator==`](basic_const_iterator/op_equal.md.nolink)         | 等値比較 | C++23 |
 | [`operator!=`](basic_const_iterator/op_equal.md.nolink)     | 非等値比較 | C++23 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator-- -- basic_const_iterator : ++ -- += -= 追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_decrement.html"/>
      <id>92d89626f7c03750772c8d97b61a28e19a0a73d9:reference/iterator/basic_const_iterator/op_decrement.md</id>
      <updated>2023-08-02T12:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_decrement.md b/reference/iterator/basic_const_iterator/op_decrement.md
new file mode 100644
index 000000000..7448315d9
--- /dev/null
+++ b/reference/iterator/basic_const_iterator/op_decrement.md
@@ -0,0 +1,78 @@
+# operator--
+* iterator[meta header]
+* std[meta namespace]
+* basic_const_iterator[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr basic_const_iterator&amp;amp; operator--() requires bidirectional_iterator&amp;lt;Iterator&amp;gt;;     // (1)
+
+constexpr basic_const_iterator operator--(int) requires bidirectional_iterator&amp;lt;Iterator&amp;gt;;   // (2)
+```
+* bidirectional_iterator[link ./bidirectional_iterator.md]
+
+## 概要
+
+イテレータをデクリメントする。
+
+- (1) : 前置デクリメント
+- (2) : 後置デクリメント
+
+## 効果
+
+ラップするイテレータを`current_`というメンバに保持するとして
+
+- (1) : 以下と等価  
+    ```cpp
+    --current_;
+    return *this;
+    ```
+- (2) : 以下と等価  
+    ```cpp
+    auto tmp = *this;
+    --*this;
+    return tmp;
+    ```
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+
+int main() {
+  std::vector vec = {1, 2, 3, 4, 5};
+
+  std::basic_const_iterator cit = vec.end();
+
+  --cit;
+
+  std::cout &amp;lt;&amp;lt; *cit &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  cit--;
+
+  std::cout &amp;lt;&amp;lt; *cit &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  
+}
+```
+* --ci[color ff0000]
+* ci--[color ff0000]
+
+### 出力
+```
+5
+4
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator++ -- basic_const_iterator : ++ -- += -= 追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_increment.html"/>
      <id>92d89626f7c03750772c8d97b61a28e19a0a73d9:reference/iterator/basic_const_iterator/op_increment.md</id>
      <updated>2023-08-02T12:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_increment.md b/reference/iterator/basic_const_iterator/op_increment.md
new file mode 100644
index 000000000..6e70a7f50
--- /dev/null
+++ b/reference/iterator/basic_const_iterator/op_increment.md
@@ -0,0 +1,79 @@
+# operator++
+* iterator[meta header]
+* std[meta namespace]
+* basic_const_iterator[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr basic_const_iterator&amp;amp; operator++();   // (1)
+
+constexpr void operator++(int);                 // (2)
+constexpr basic_const_iterator operator++(int) requires forward_iterator&amp;lt;Iterator&amp;gt;; // (3)
+```
+* forward_iterator[link ./forward_iterator.md]
+
+## 概要
+
+イテレータをインクリメントする。
+
+- (1) : 前置デクリメント
+- (2)(3) : 後置デクリメント
+
+## 効果
+
+ラップするイテレータを`current_`というメンバに保持するとして
+
+- (1) : 以下と等価  
+    ```cpp
+    ++current_;
+    return *this;
+    ```
+- (2) : `++current_;`
+- (3) : 以下と等価  
+    ```cpp
+    auto tmp = *this;
+    ++*this;
+    return tmp;
+    ```
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+
+int main() {
+  std::vector vec = {1, 2, 3, 4, 5};
+
+  std::basic_const_iterator cit = vec.begin();
+
+  ++cit;
+
+  std::cout &amp;lt;&amp;lt; *cit &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  cit++;
+
+  std::cout &amp;lt;&amp;lt; *cit &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* ++cit[color ff0000]
+* cit++[color ff0000]
+
+### 出力
+```
+2
+3
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator-= -- basic_const_iterator : ++ -- += -= 追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_minus_assign.html"/>
      <id>92d89626f7c03750772c8d97b61a28e19a0a73d9:reference/iterator/basic_const_iterator/op_minus_assign.md</id>
      <updated>2023-08-02T12:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_minus_assign.md b/reference/iterator/basic_const_iterator/op_minus_assign.md
new file mode 100644
index 000000000..c54ef70b6
--- /dev/null
+++ b/reference/iterator/basic_const_iterator/op_minus_assign.md
@@ -0,0 +1,63 @@
+# operator-=
+* iterator[meta header]
+* std[meta namespace]
+* basic_const_iterator[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr basic_const_iterator&amp;amp; operator-=(difference_type n)
+  requires random_access_iterator&amp;lt;Iterator&amp;gt;;
+```
+* random_access_iterator[link /reference/iterator/random_access_iterator.md]
+
+## 概要
+
+イテレータを`n`回逆に進める。
+
+## 効果
+
+ラップするイテレータを`current_`というメンバに保持するとして、  以下と等価
+
+```cpp
+current -= n;
+return *this;
+```
+
+## 戻り値
+
+`*this`
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+
+int main() {
+  std::vector vec = {1, 2, 3, 4, 5};
+
+  std::basic_const_iterator cit = vec.end();
+
+  cit -= 2;
+
+  std::cout &amp;lt;&amp;lt; *cit &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+
+### 出力
+```
+4
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator+= -- basic_const_iterator : ++ -- += -= 追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_plus_assign.html"/>
      <id>92d89626f7c03750772c8d97b61a28e19a0a73d9:reference/iterator/basic_const_iterator/op_plus_assign.md</id>
      <updated>2023-08-02T12:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_plus_assign.md b/reference/iterator/basic_const_iterator/op_plus_assign.md
new file mode 100644
index 000000000..a5b708b6e
--- /dev/null
+++ b/reference/iterator/basic_const_iterator/op_plus_assign.md
@@ -0,0 +1,64 @@
+# operator+=
+* iterator[meta header]
+* std[meta namespace]
+* basic_const_iterator[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr basic_const_iterator&amp;amp; operator+=(difference_type n)
+  requires random_access_iterator&amp;lt;Iterator&amp;gt;;
+```
+* random_access_iterator[link /reference/iterator/random_access_iterator.md]
+
+
+## 概要
+
+イテレータを`n`回進める。
+
+## 事前条件
+
+現在のカウントの値を`length`メンバ変数に保持するとして、`n &amp;lt;= length`
+
+## 効果
+
+ラップするイテレータを`current_`というメンバに保持するとして、  以下と等価
+
+```cpp
+current += n;
+return *this;
+```
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+
+int main() {
+  std::vector vec = {1, 2, 3, 4, 5};
+
+  std::basic_const_iterator cit = vec.begin();
+
+  cit += 2;
+
+  std::cout &amp;lt;&amp;lt; *cit &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+
+### 出力
+```
+3
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator-&gt; -- basic_const_iterator::-&gt; : 参考リンクとかの修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_arrow.html"/>
      <id>4a6b82e1fbbf4c8e10b8fe5ed613585ed09ec201:reference/iterator/basic_const_iterator/op_arrow.md</id>
      <updated>2023-07-28T14:33:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_arrow.md b/reference/iterator/basic_const_iterator/op_arrow.md
index 19189f973..6b4a247bd 100644
--- a/reference/iterator/basic_const_iterator/op_arrow.md
+++ b/reference/iterator/basic_const_iterator/op_arrow.md
@@ -63,12 +63,13 @@ call const : 1
 
 ## バージョン
 ### 言語
-- C++20
+- C++23
 
 ### 処理系
 - [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): 10.1
-- [Visual C++](/implementation.md#visual_cpp): 2019 Update 9
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
 
 ## 参照
-- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_const_iterator -- basic_const_iterator : * -&gt; 追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator.html"/>
      <id>e19c878e156ca64ea7a5b4a4c703f8c79c494bde:reference/iterator/basic_const_iterator.md</id>
      <updated>2023-07-28T12:59:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator.md b/reference/iterator/basic_const_iterator.md
index 61c588114..e914d17ba 100644
--- a/reference/iterator/basic_const_iterator.md
+++ b/reference/iterator/basic_const_iterator.md
@@ -22,8 +22,8 @@ namespace std {
 |------------------------------------------------------|-------------|-------|
 | [`(constructor)`](basic_const_iterator/op_constructor.md) | コンストラクタ | C++23 |
 | [`base`](basic_const_iterator/base.md)                    | 元のイテレータを取得する | C++23 |
-| [`operator*`](basic_const_iterator/op_deref.md.nolink)           | 間接参照演算子 | C++23 |
-| [`operator-&amp;gt;`](basic_const_iterator/op_arrow.md.nolink)          | メンバアクセス演算子 | C++23 |
+| [`operator*`](basic_const_iterator/op_deref.md)           | 間接参照演算子 | C++23 |
+| [`operator-&amp;gt;`](basic_const_iterator/op_arrow.md)          | メンバアクセス演算子 | C++23 |
 | [`operator++`](basic_const_iterator/op_increment.md.nolink)      | イテレータをインクリメントする | C++23 |
 | [`operator--`](basic_const_iterator/op_decrement.md.nolink)      | イテレータをデクリメントする | C++23 |
 | [`operator+=`](basic_const_iterator/op_plus_assign.md.nolink)    | イテレータ自身を進める | C++23 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator-&gt; -- basic_const_iterator : * -&gt; 追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_arrow.html"/>
      <id>e19c878e156ca64ea7a5b4a4c703f8c79c494bde:reference/iterator/basic_const_iterator/op_arrow.md</id>
      <updated>2023-07-28T12:59:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_arrow.md b/reference/iterator/basic_const_iterator/op_arrow.md
new file mode 100644
index 000000000..19189f973
--- /dev/null
+++ b/reference/iterator/basic_const_iterator/op_arrow.md
@@ -0,0 +1,74 @@
+# operator-&amp;gt;
+* iterator[meta header]
+* std[meta namespace]
+* basic_const_iterator[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr const auto* operator-&amp;gt;() const
+  requires is_lvalue_reference_v&amp;lt;iter_reference_t&amp;lt;Iterator&amp;gt;&amp;gt; &amp;amp;&amp;amp;
+           same_as&amp;lt;remove_cvref_t&amp;lt;iter_reference_t&amp;lt;Iterator&amp;gt;&amp;gt;, value_type&amp;gt;;
+```
+* is_lvalue_reference_v[link /reference/type_traits/is_lvalue_reference.md]
+* iter_reference_t[link /reference/iterator/iter_reference_t.md]
+* same_as[link /reference/concepts/same_as.md]
+* remove_cvref_t[link /reference/type_traits/remove_cvref.md]
+
+## 概要
+
+イテレータを通して参照先の要素のメンバにアクセスする
+
+## 戻り値
+
+ラップするイテレータを`current_`というメンバに保持するとして
+
+- `Iterator`が[`contiguous_iterator`](/reference/iterator/contiguous_iterator.md)のモデルとなる場合
+    - [`to_address`](/reference/memory/to_address.md)`((current_))`
+- それ以外の場合
+    - [`addressof`](/reference/memory/addressof.md)`(*current_)`
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+struct S {
+  int n;
+
+  void print() const {
+    std::cout &amp;lt;&amp;lt; &amp;#34;call const : &amp;#34; &amp;lt;&amp;lt; this-&amp;gt;n &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  }
+
+  void print() {
+    std::cout &amp;lt;&amp;lt; &amp;#34;call non const : &amp;#34; &amp;lt;&amp;lt; this-&amp;gt;n &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  }
+};
+
+int main() {
+  std::vector&amp;lt;S&amp;gt; vec = {S{1}, S{3}};
+
+  std::basic_const_iterator cit = vec.begin();
+
+  cit-&amp;gt;print();
+}
+```
+* cit-&amp;gt;[color ff0000]
+
+### 出力
+```
+call const : 1
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 9
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator* -- basic_const_iterator : * -&gt; 追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_deref.html"/>
      <id>e19c878e156ca64ea7a5b4a4c703f8c79c494bde:reference/iterator/basic_const_iterator/op_deref.md</id>
      <updated>2023-07-28T12:59:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_deref.md b/reference/iterator/basic_const_iterator/op_deref.md
new file mode 100644
index 000000000..e856b9bfc
--- /dev/null
+++ b/reference/iterator/basic_const_iterator/op_deref.md
@@ -0,0 +1,59 @@
+# operator*
+* iterator[meta header]
+* std[meta namespace]
+* basic_const_iterator[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr reference operator*() const;
+```
+
+## 概要
+イテレータを間接参照する。
+
+戻り値型`reference`は、[`iter_const_reference_t`](/reference/iterator/iter_const_reference_t.md)`&amp;lt;Iterator&amp;gt;`のエイリアス。
+
+## 効果
+
+ラップしているイテレータを`current_`メンバ変数に保持するとして、以下と等価
+
+`return static_cast&amp;lt;reference&amp;gt;(*current_);`
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+
+int main() {
+  std::vector vec = {1, 2, 3, 4, 5};
+
+  std::basic_const_iterator cit = vec.begin();
+
+  std::cout &amp;lt;&amp;lt; *cit &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  
+  // 要素を変更できない
+  //*cit = 0;
+}
+```
+* *cit[color ff0000]
+
+### 出力
+```
+1
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_const_iterator -- basic_const_iterator : コンストラクタと.base()追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator.html"/>
      <id>fb63802526c3daea90356da72e0ed67a8dd05f22:reference/iterator/basic_const_iterator.md</id>
      <updated>2023-07-28T12:33:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator.md b/reference/iterator/basic_const_iterator.md
index 07c9c7a44..61c588114 100644
--- a/reference/iterator/basic_const_iterator.md
+++ b/reference/iterator/basic_const_iterator.md
@@ -20,9 +20,8 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------------------------------------------------------|-------------|-------|
-| [`(constructor)`](basic_const_iterator/op_constructor.md.nolink) | コンストラクタ | C++23 |
-| [`operator=`](basic_const_iterator/op_assign.md.nolink)          | 代入演算子 | C++23 |
-| [`base`](basic_const_iterator/base.md.nolink)                    | 元のイテレータを取得する | C++23 |
+| [`(constructor)`](basic_const_iterator/op_constructor.md) | コンストラクタ | C++23 |
+| [`base`](basic_const_iterator/base.md)                    | 元のイテレータを取得する | C++23 |
 | [`operator*`](basic_const_iterator/op_deref.md.nolink)           | 間接参照演算子 | C++23 |
 | [`operator-&amp;gt;`](basic_const_iterator/op_arrow.md.nolink)          | メンバアクセス演算子 | C++23 |
 | [`operator++`](basic_const_iterator/op_increment.md.nolink)      | イテレータをインクリメントする | C++23 |
@@ -64,7 +63,7 @@ namespace std {
 - それ以外の場合
     - `input_iterator_tag`
 
-## 非メンバ関数
+## 非メンバ（*Hidden friends*）関数
 
 | 名前 | 説明 | 対応バージョン |
 |------------------------------------------------------|-------------|-------|
@@ -75,11 +74,15 @@ namespace std {
 | [`operator+`](basic_const_iterator/op_plus.md.nolink)           | イテレータを進める | C++23 |
 | [`operator-`](basic_const_iterator/op_minus.md.nolink)          | 2つの`basic_const_iterator`の差を求める | C++23 |
 | [`iter_move`](basic_const_iterator/iter_move.md.nolink)     | イテレータの要素の移動 | C++23 |
+
+## 非メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------------------------------------------------------|-------------|-------|
 | [`make_const_iterator`](make_const_iterator.md.nolink)     | `basic_const_iterator`のヘルパ関数 | C++23 |
 | [`make_const_sentinel`](make_const_sentinel.md.nolink)     | `basic_const_iterator`のヘルパ関数 | C++23 |
 
 ## 例
-（執筆中）
 
 ```cpp example
 #include &amp;lt;iterator&amp;gt;
@@ -101,6 +104,7 @@ int main() {
   //*cit = 0;
 }
 ```
+
 ### 出力
 ```
 1
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- basic_const_iterator : コンストラクタと.base()追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/base.html"/>
      <id>fb63802526c3daea90356da72e0ed67a8dd05f22:reference/iterator/basic_const_iterator/base.md</id>
      <updated>2023-07-28T12:33:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/base.md b/reference/iterator/basic_const_iterator/base.md
new file mode 100644
index 000000000..c8f53374a
--- /dev/null
+++ b/reference/iterator/basic_const_iterator/base.md
@@ -0,0 +1,63 @@
+# base
+* iterator[meta header]
+* std[meta namespace]
+* basic_const_iterator[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr const Iterator&amp;amp; base() const &amp;amp; noexcept;  // (1)
+constexpr Iterator base() &amp;amp;&amp;amp;;  // (2)
+```
+
+## 概要
+
+メンバ変数として保持している、元のイテレータを取得する。
+
+## 戻り値
+
+- (1) : 元のイテレータへの`const`参照を返す。
+- (2) : 元のイテレータをムーブして返す。
+
+## 例
+
+```cpp example
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector vec = {1, 2, 3, 4, 5};
+
+  std::basic_const_iterator cit = vec.begin();
+  
+  std::cout &amp;lt;&amp;lt; *cit &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; *(cit.base()) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  // 元のイテレータが可変イテレータならば要素を変更可能
+  *(cit.base()) = 0;
+  std::cout &amp;lt;&amp;lt; *(cit.base()) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* base[color ff0000]
+
+### 出力
+
+```
+1
+1
+0
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- basic_const_iterator : コンストラクタと.base()追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_constructor.html"/>
      <id>fb63802526c3daea90356da72e0ed67a8dd05f22:reference/iterator/basic_const_iterator/op_constructor.md</id>
      <updated>2023-07-28T12:33:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_constructor.md b/reference/iterator/basic_const_iterator/op_constructor.md
new file mode 100644
index 000000000..40b7ccc3d
--- /dev/null
+++ b/reference/iterator/basic_const_iterator/op_constructor.md
@@ -0,0 +1,88 @@
+# コンストラクタ
+* iterator[meta header]
+* std[meta namespace]
+* basic_const_iterator[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr basic_const_iterator() requires default_initializable&amp;lt;Iterator&amp;gt; = default;  // (1)
+
+constexpr basic_const_iterator(Iterator current);                                     // (2)
+
+template&amp;lt;convertible_to&amp;lt;Iterator&amp;gt; U&amp;gt;
+constexpr basic_const_iterator(basic_const_iterator&amp;lt;U&amp;gt; current);                      // (3)
+
+template&amp;lt;different-from&amp;lt;basic_const_iterator&amp;gt; T&amp;gt;
+  requires convertible_to&amp;lt;T, Iterator&amp;gt;
+constexpr basic_const_iterator(T&amp;amp;&amp;amp; current);                                          // (4)
+```
+* default_initializable[link /reference/concepts/default_initializable.md]
+* convertible_to[link /reference/concepts/convertible_to.md]
+* different-from[link /reference/ranges/different-from.md]
+
+## 概要
+
+`basic_const_iterator`オブジェクトを構築する。
+
+## 効果
+
+ラップするイテレータを`current_`というメンバに保持するとして
+
+- (1) : `current_`をデフォルト構築する
+- (2) : `current_`を`std::move(current)`で初期化する
+- (3) : `current_`を`std::move(current.current_)`で初期化する
+- (4) : `current_`を`std::forward&amp;lt;T&amp;gt;(current)`で初期化する
+
+## 例
+```cpp example
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+// 例示のための単純なイテレータラッパ、ラップするイテレータへの暗黙変換を提供する
+template&amp;lt;typename I&amp;gt;
+struct wrap_iter {
+  I it;
+
+  operator I() const {
+    return it;
+  }
+};
+
+int main() {
+  using I = std::vector&amp;lt;int&amp;gt;::iterator;
+
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+
+  // (1) デフォルトコンストラクタ
+  std::basic_const_iterator&amp;lt;I&amp;gt; ci1{};
+
+  // (2) イテレータから構築
+  std::basic_const_iterator ci2{vec.begin()};
+
+  // (3) 別のbasic_const_iteratorから変換して構築（コピーコンストラクタ）
+  std::basic_const_iterator&amp;lt;I&amp;gt; ci3{ci2};
+
+  wrap_iter wrap{ci2};
+  // (4) Iteratorに変換可能な型から構築
+  std::basic_const_iterator&amp;lt;I&amp;gt; ci4{wrap};
+}
+```
+* basic_const_iterator[color ff0000]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- basic_const_iterator : コンストラクタと.base()追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator/base.html"/>
      <id>fb63802526c3daea90356da72e0ed67a8dd05f22:reference/iterator/counted_iterator/base.md</id>
      <updated>2023-07-28T12:33:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator/base.md b/reference/iterator/counted_iterator/base.md
index b70286fa7..f66dcb947 100644
--- a/reference/iterator/counted_iterator/base.md
+++ b/reference/iterator/counted_iterator/base.md
@@ -39,7 +39,7 @@ int main() {
   std::cout &amp;lt;&amp;lt; *(ci.base());
 }
 ```
-* count[color ff0000]
+* base[color ff0000]
 * ranges::begin[link /reference/ranges/begin.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2015-10-07T14:29:15.050090</updated>
  <id>24b1d111-a9f0-4707-97d2-10065952d20d</id>

  
    <entry>
      <title>adjacent_difference -- adjacent_difference : 表にヘッダを付けた</title>
      <link href="http://cpprefjp.github.io/reference/numeric/adjacent_difference.html"/>
      <id>3ac39b1952d5c885844546c447be63cf01fbc21f:reference/numeric/adjacent_difference.md</id>
      <updated>2015-10-07 14:28:59 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;adjacent_difference&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;OutputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    OutputIterator adjacent_difference(
      InputIterator first, InputIterator last,
      OutputIterator result);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;OutputIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;BinaryOperation&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    OutputIterator adjacent_difference(
      InputIterator first, InputIterator last,
      OutputIterator result,
      BinaryOperation binary_op);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;1つのシーケンスの任意の範囲の隣接する値間の差を計算する。&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;パラメータ名&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;first&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスの先頭&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;last&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスの終端&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;result&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;計算結果を出力するシーケンスの先頭&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;binary_op&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;差を求める処理&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;シーケンスの型。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;Ο(2n)&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;numeric&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;array&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;(){
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&amp;gt;&lt;/span&gt; t;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; t&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;value_type u;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; t a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;.0&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;.2&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;.4&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;.6&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;.8&lt;/span&gt;};
  t r;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; o &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; [](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; t&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; vs){
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; vs)
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; --&amp;gt; &#34;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;end&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  };

  &lt;span style=&#34;color:#ff0000&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacent_difference&lt;/span&gt;(a.begin(), a.end(), r.begin());
  o(r);

  &lt;span style=&#34;color:#ff0000&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacent_difference&lt;/span&gt;(a.begin(), a.end(), r.begin(),
    [](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; u&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; u&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; b)&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;u{
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; a&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;a&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;b&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;b;
    });
  o(r);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0.2&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0.2&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0.2&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0.2&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; end
&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0.04&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0.12&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0.2&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0.28&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; end
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>accumulate -- accumulate : 見た目を整理。説明不足を補完</title>
      <link href="http://cpprefjp.github.io/reference/numeric/accumulate.html"/>
      <id>bedcdd81fa5f6d0037dcbb5adb7e4487fd390f68:reference/numeric/accumulate.md</id>
      <updated>2015-10-07 14:28:00 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;accumulate&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  T accumulate(InputIterator first, InputIterator last, T init);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;BinaryOperation&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  T accumulate(InputIterator first, InputIterator last, T init,
               BinaryOperation binary_op);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;1つのシーケンスの任意の範囲の値を足し合わせる。&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;パラメータ名&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;first&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスの先頭&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;last&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスの終端&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;init&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;初期値&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;binary_op&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アキュームレータ。&lt;code&gt;InputIterator&lt;/code&gt;の要素型を2引数とり、その要素型を返す関数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;集計結果の値&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;Ο(n)&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
T accumulate(InputIterator first, InputIterator last, T init) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (first &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last)
    init &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; init &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;first&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; init;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;BinaryOperation&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
T accumulate(InputIterator first, InputIterator last, T init,
             BinaryOperation binary_op) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (first &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last)
    init &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; binary_op(init, &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;first&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; init;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;numeric&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;array&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;(){
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&amp;gt;&lt;/span&gt; t;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; t&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;value_type u;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; t a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;.0&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;0.2&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;0.4&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;0.6&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;0.8&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;accumulate&lt;/span&gt;(a.begin(), a.end(), &lt;span style=&#34;color: #666666&#34;&gt;.0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;accumulate&lt;/span&gt;(a.begin(), a.end(), &lt;span style=&#34;color: #666666&#34;&gt;100.0&lt;/span&gt;
      , [](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; u&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; u&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; b)&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;u{
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; a&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;b&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;b;
      })
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;2
101.2
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;C++03 の場合、&lt;code&gt;binary_op&lt;/code&gt; で副作用を起こすことを禁止していた。これについては Effective STL 第37項で以下のように書かれている。 &lt;/p&gt;
&lt;p&gt;(後で引用する) &lt;/p&gt;
&lt;p&gt;C++11 以降では、要素を書き換えることと、イテレータを無効にすること以外の操作は全て認められるようになっている。 
つまり Effective STL 第37項に載っているような例を、何の問題も無く使用することができるようになっている。&lt;/p&gt;
&lt;p&gt;この関数は、他の言語では&lt;code&gt;foldL&lt;/code&gt;や&lt;code&gt;reduce&lt;/code&gt;、&lt;code&gt;aggregate&lt;/code&gt;といった名前で提供されている。&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unlock -- unique_lock::unlock : 箇条書きの表示崩れを修正</title>
      <link href="http://cpprefjp.github.io/reference/mutex/unique_lock/unlock.html"/>
      <id>4d0ac58bde74c94a7cc97efe0d44bf9345f57273:reference/mutex/unique_lock/unlock.md</id>
      <updated>2015-10-07 14:24:09 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;mutex&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class unique_lock&#34;&gt;unique_lock::&lt;/span&gt;unlock&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;unlock&lt;/span&gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;ロックを手放す&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;pm&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;unlock();
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;※&lt;code&gt;pm&lt;/code&gt;はメンバ変数として保持している、ミューテックスオブジェクトへのポインタ&lt;/p&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/unique_lock/owns_lock.html&#34;&gt;&lt;code&gt;owns_lock()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;== false&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;この関数は、以下のerror conditionを持つ&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/system_error.html&#34;&gt;&lt;code&gt;system_error&lt;/code&gt;&lt;/a&gt;例外オブジェクトを送出する可能性がある：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/errc.html&#34;&gt;&lt;code&gt;operation_not_permitted&lt;/code&gt;&lt;/a&gt; ： &lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/unique_lock/owns_lock.html&#34;&gt;&lt;code&gt;owns_lock()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;== false&lt;/code&gt;の状態でこの関数が呼び出された&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;thread&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;mutex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;X&lt;/span&gt; {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex mtx_;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メンバ変数value_への書き込みを排他的にする&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;add_value&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value)
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_lock&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lk(mtx_);

    value_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; value;

    lk.&lt;span style=&#34;color:#ff0000&#34;&gt;unlock&lt;/span&gt;(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ロックを手放す&lt;/span&gt;

  } &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// すでにロックを手放しているため、デストラクト時に&lt;span style=&#34;color:#ff0000&#34;&gt;unlock&lt;/span&gt;()は呼ばれない&lt;/span&gt;
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  X x;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; t1([&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;x]{ x.add_value(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;); });
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; t2([&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;x]{ x.add_value(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;); });

  t1.join();
  t2.join();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lock -- recursive_timed_mutex::lock, unlock : 改行調整</title>
      <link href="http://cpprefjp.github.io/reference/mutex/recursive_timed_mutex/lock.html"/>
      <id>d54edb7b664c055361d598ae364a3b9fc399fbcb:reference/mutex/recursive_timed_mutex/lock.md</id>
      <updated>2015-10-07 14:22:22 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;mutex&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class recursive_timed_mutex&#34;&gt;recursive_timed_mutex::&lt;/span&gt;lock&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;lock&lt;/span&gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;ロックを取得する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;この関数を呼び出したスレッドがミューテックスの所有権を取得できるまでブロックする。&lt;/p&gt;
&lt;p&gt;この関数を呼び出したスレッドがすでにミューテックスの所有権を保持していた場合は、ブロッキングせず、所有権を維持する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;この関数は、以下のerror conditionを持つ&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/system_error.html&#34;&gt;&lt;code&gt;system_error&lt;/code&gt;&lt;/a&gt;例外オブジェクトを送出する可能性がある：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/errc.html&#34;&gt;&lt;code&gt;operation_not_permitted&lt;/code&gt;&lt;/a&gt; : スレッドにこの操作を行う権限がない&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/errc.html&#34;&gt;&lt;code&gt;resource_deadlock_would_occur&lt;/code&gt;&lt;/a&gt; : デッドロックが発生することを検出した(実装依存)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/errc.html&#34;&gt;&lt;code&gt;device_or_resource_busy&lt;/code&gt;&lt;/a&gt; : ミューテックスがすでにロックされていて、ブロッキングできない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;mutex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;thread&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;counter&lt;/span&gt; {
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; count_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;recursive_timed_mutex mtx_;
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value)
  {
    mtx_.&lt;span style=&#34;color:#ff0000&#34;&gt;lock()&lt;/span&gt;;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; count_ &lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt; value;
    mtx_.unlock();
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; result;
  }

  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;increment&lt;/span&gt;()
  {
    mtx_.&lt;span style=&#34;color:#ff0000&#34;&gt;lock()&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ロックを取得する&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; add(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// add()関数内でも同じミューテックスからロックを取得する&lt;/span&gt;
    mtx_.unlock();
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; result;
  }
};

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex print_mtx_;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;print_value&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lock_guard&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lock(print_mtx_);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;count == &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

counter c;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;change_count&lt;/span&gt;()
{
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; c.increment();
  print_value(value);
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; t1(change_count);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; t2(change_count);

  t1.join();
  t2.join();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;count == 1
count == 2
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unlock -- recursive_timed_mutex::lock, unlock : 改行調整</title>
      <link href="http://cpprefjp.github.io/reference/mutex/recursive_timed_mutex/unlock.html"/>
      <id>d54edb7b664c055361d598ae364a3b9fc399fbcb:reference/mutex/recursive_timed_mutex/unlock.md</id>
      <updated>2015-10-07 14:22:22 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;mutex&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class recursive_timed_mutex&#34;&gt;recursive_timed_mutex::&lt;/span&gt;unlock&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;unlock&lt;/span&gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;ロックを手放す&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;この関数を実行するスレッドがミューテックスの所有権を持っていること&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;この関数を呼び出したスレッドが持つミューテックスの所有権を手放す。&lt;/p&gt;
&lt;p&gt;再帰的に所有権が取得されていた場合、最後のひとつが&lt;code&gt;unlock&lt;/code&gt;された際に所有権を手放す。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;mutex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;thread&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;counter&lt;/span&gt; {
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; count_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;recursive_timed_mutex mtx_;
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value)
  {
    mtx_.lock(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 2.ロックを再帰的に取得する&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; count_ &lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt; value;
    mtx_.&lt;span style=&#34;color:#ff0000&#34;&gt;unlock&lt;/span&gt;(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3.ロックを手放す(まだロックを取得しているユーザーがいるので、まだ所有権を手放さない)&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; result;
  }

  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;increment&lt;/span&gt;()
  {
    mtx_.lock(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 1.ロックを取得する&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; add(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// add()関数内でも同じミューテックスからロックを取得する&lt;/span&gt;
    mtx_.&lt;span style=&#34;color:#ff0000&#34;&gt;unlock&lt;/span&gt;(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 4.ロックを手放す(再帰的にロックを取得しているユーザーがいなくなったので、所有権を手放す)&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; result;
  }
};

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex print_mtx_;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;print_value&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lock_guard&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lock(print_mtx_);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;count == &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

counter c;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;change_count&lt;/span&gt;()
{
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; c.increment();
  print_value(value);
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; t1(change_count);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; t2(change_count);

  t1.join();
  t2.join();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;count == 1
count == 2
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lock -- recursive_mutex::lock, unlock : 改行調整</title>
      <link href="http://cpprefjp.github.io/reference/mutex/recursive_mutex/lock.html"/>
      <id>9e1d56e67cec65c080d3830b8a7c669bdf1c10fe:reference/mutex/recursive_mutex/lock.md</id>
      <updated>2015-10-07 14:21:18 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;mutex&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class recursive_mutex&#34;&gt;recursive_mutex::&lt;/span&gt;lock&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;lock&lt;/span&gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;ロックを取得する&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;この関数を呼び出したスレッドがミューテックスの所有権を取得できるまでブロックする。新しく所有権を取得した直後の所有権カウントは1となる。&lt;/p&gt;
&lt;p&gt;この関数を呼び出したスレッドがすでにミューテックスの所有権を保持していた場合は、ブロッキングは行わず所有権を維持する。このとき所有権カウントを1増加する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;この関数は、以下のerror conditionを持つ&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/system_error.html&#34;&gt;&lt;code&gt;system_error&lt;/code&gt;&lt;/a&gt;例外オブジェクトを送出する可能性がある：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/errc.html&#34;&gt;&lt;code&gt;operation_not_permitted&lt;/code&gt;&lt;/a&gt; : スレッドにこの操作を行う権限がない&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/errc.html&#34;&gt;&lt;code&gt;resource_deadlock_would_occur&lt;/code&gt;&lt;/a&gt; : デッドロックが発生することを検出した(実装依存)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/errc.html&#34;&gt;&lt;code&gt;device_or_resource_busy&lt;/code&gt;&lt;/a&gt; : ミューテックスがすでにロックされていて、ブロッキングできない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;あるスレッドが再帰的に所有権を取得可能な最大回数（所有権カウントの上限値）は、規定されていない。所有権カウントの上限値に達している場合、既に所有権を保持しているスレッドによるlockは&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/system_error.html&#34;&gt;&lt;code&gt;system_error&lt;/code&gt;&lt;/a&gt;例外オブジェクトを送出する。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;mutex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;thread&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;counter&lt;/span&gt; {
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; count_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;recursive_mutex mtx_;
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value)
  {
    mtx_.&lt;span style=&#34;color:#ff0000&#34;&gt;lock()&lt;/span&gt;;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; count_ &lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt; value;
    mtx_.unlock();
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; result;
  }

  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;increment&lt;/span&gt;()
  {
    mtx_.&lt;span style=&#34;color:#ff0000&#34;&gt;lock()&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ロックを取得する&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; add(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// add()関数内でも同じミューテックスからロックを取得する&lt;/span&gt;
    mtx_.unlock();
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; result;
  }
};

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex print_mtx_;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;print_value&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lock_guard&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lock(print_mtx_);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;count == &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

counter c;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;change_count&lt;/span&gt;()
{
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; c.increment();
  print_value(value);
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; t1(change_count);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; t2(change_count);

  t1.join();
  t2.join();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;count == 1
count == 2
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unlock -- recursive_mutex::lock, unlock : 改行調整</title>
      <link href="http://cpprefjp.github.io/reference/mutex/recursive_mutex/unlock.html"/>
      <id>9e1d56e67cec65c080d3830b8a7c669bdf1c10fe:reference/mutex/recursive_mutex/unlock.md</id>
      <updated>2015-10-07 14:21:18 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;mutex&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class recursive_mutex&#34;&gt;recursive_mutex::&lt;/span&gt;unlock&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;unlock&lt;/span&gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;ロックを手放す&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;この関数を実行するスレッドがミューテックスの所有権を持っていること。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;この関数を呼び出したスレッドが持つミューテックスの所有権カウントを1減らす。&lt;/p&gt;
&lt;p&gt;unlockにより所有権カウントが0になったとき、ミューテックスの所有権を手放す。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;あるミューテックスに対するunlockの回数は、ロック取得に成功した回数（lockおよびtrueを返したtry_lockの回数）と正確に同一でなければならない。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;mutex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;thread&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;counter&lt;/span&gt; {
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; count_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;recursive_mutex mtx_;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value)
  {
    mtx_.lock(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 2.ロックを再帰的に取得する(所有権カウントが2になる)&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; count_ &lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt; value;
    mtx_.&lt;span style=&#34;color:#ff0000&#34;&gt;unlock&lt;/span&gt;(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3.ロックを手放す(まだ所有権カウントが0より大きいため所有権を手放さない)&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; result;
  }

  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;increment&lt;/span&gt;()
  {
    mtx_.lock(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 1.ロックを取得する(所有権カウントが1になる)&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; add(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// add()関数内でも同じミューテックスからロックを取得する&lt;/span&gt;
    mtx_.&lt;span style=&#34;color:#ff0000&#34;&gt;unlock&lt;/span&gt;(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 4.ロックを手放す(所有権カウントが0になるので、所有権を手放す)&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; result;
  }
};

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex print_mtx_;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;print_value&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lock_guard&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lock(print_mtx_);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;count == &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

counter c;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;change_count&lt;/span&gt;()
{
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; c.increment();
  print_value(value);
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; t1(change_count);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; t2(change_count);

  t1.join();
  t2.join();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;count == 1
count == 2
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
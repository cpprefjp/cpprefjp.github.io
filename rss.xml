<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-06-04T03:20:14.137022</updated>
  <id>03069868-0501-4f82-9063-4d1fd7a16e5f</id>

  
    <entry>
      <title>chunk_by_view -- chunk_by_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/chunk_by_view.html"/>
      <id>2c7144340b1373a95fbe71d1b794167f0be4d9c2:reference/ranges/chunk_by_view.md</id>
      <updated>2025-06-04T12:16:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/chunk_by_view.md b/reference/ranges/chunk_by_view.md
index 8ff94d4eb..8b8d90632 100644
--- a/reference/ranges/chunk_by_view.md
+++ b/reference/ranges/chunk_by_view.md
@@ -49,11 +49,11 @@ namespace std::ranges {
 
 | 名前                                                | 説明                             | 対応バージョン |
 |-----------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](chunk_by_view/op_constructor.md.nolink)  | コンストラクタ                   | C++23          |
-| [`base`](chunk_by_view/base.md.nolink)                     | `V`の参照を取得する              | C++23          |
-| [`pred`](chunk_by_view/pred.md.nolink)                     | 述語を取得する                   | C++23          |
-| [`begin`](chunk_by_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++23          |
-| [`end`](chunk_by_view/end.md.nolink)                       | 番兵を取得する                   | C++23          |
+| [`(constructor)`](chunk_by_view/op_constructor.md)  | コンストラクタ                   | C++23          |
+| [`base`](chunk_by_view/base.md)                     | `V`の参照を取得する              | C++23          |
+| [`pred`](chunk_by_view/pred.md)                     | 述語を取得する                   | C++23          |
+| [`begin`](chunk_by_view/begin.md)                   | 先頭を指すイテレータを取得する   | C++23          |
+| [`end`](chunk_by_view/end.md)                       | 番兵を取得する                   | C++23          |
 
 ## 継承しているメンバ関数
 
@@ -71,7 +71,7 @@ namespace std::ranges {
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](chunk_by_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++23          |
+| [`(deduction_guide)`](chunk_by_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++23          |
 
 ## 例
 ```cpp example
@@ -87,7 +87,6 @@ int main() {
 }
 ```
 * std::views::chunk_by[color ff0000]
-* std::ranges::less_equal[link /reference/functional/ranges_less_equal.md]
 * 転倒[link https://ja.wikipedia.org/wiki/%E8%BB%A2%E5%80%92_(%E6%95%B0%E5%AD%A6)]
 
 ### 出力
@@ -100,10 +99,9 @@ int main() {
 - C++23
 
 ### 処理系
-- [Clang](/implementation.md#clang): ??
+- [Clang](/implementation.md#clang): 17 [mark verified]
 - [GCC](/implementation.md#gcc): 14.0 [mark verified]
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 3 [mark verified]
 
 ## 参照
 - [N4950 26 Ranges library](https://timsong-cpp.github.io/cppwp/n4950/ranges)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- chunk_by_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/chunk_by_view/base.html"/>
      <id>2c7144340b1373a95fbe71d1b794167f0be4d9c2:reference/ranges/chunk_by_view/base.md</id>
      <updated>2025-06-04T12:16:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/chunk_by_view/base.md b/reference/ranges/chunk_by_view/base.md
new file mode 100644
index 000000000..eed7407c3
--- /dev/null
+++ b/reference/ranges/chunk_by_view/base.md
@@ -0,0 +1,61 @@
+# base
+* ranges[meta header]
+* std::ranges[meta namespace]
+* chunk_by_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr V base() const &amp;amp; requires copy_constructible&amp;lt;V&amp;gt;; // (1) C++23
+constexpr V base() &amp;amp;&amp;amp;;                                     // (2) C++23
+```
+
+## 概要
+
+メンバ変数として保持している、元となるRangeを取得する。
+
+## 効果
+
+- (1) : `return base_;`
+- (2) : `return std::move(base_);`
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;functional&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 2, 3, 0, 4, 5, 2};
+  
+  std::ranges::chunk_by_view cv{v, std::ranges::less_equal{}};
+  
+  // (1) const左辺値参照版
+  const auto&amp;amp; base1 = cv.base();
+  std::cout &amp;lt;&amp;lt; &amp;#34;base size: &amp;#34; &amp;lt;&amp;lt; base1.size() &amp;lt;&amp;lt; std::endl;
+  
+  // (2) 右辺値参照版 
+  auto base2 = std::move(cv).base();
+  std::cout &amp;lt;&amp;lt; &amp;#34;moved base size: &amp;#34; &amp;lt;&amp;lt; base2.size() &amp;lt;&amp;lt; std::endl;
+}
+```
+* base[color ff0000]
+
+### 出力
+```
+base size: 8
+moved base size: 8
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 17 [mark verified]
+- [GCC](/implementation.md#gcc): 14.0 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 3 [mark verified]
+
+## 参照
+- [N4950 26.7.30 Chunk by view](https://timsong-cpp.github.io/cppwp/n4950/range.chunk.by)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- chunk_by_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/chunk_by_view/begin.html"/>
      <id>2c7144340b1373a95fbe71d1b794167f0be4d9c2:reference/ranges/chunk_by_view/begin.md</id>
      <updated>2025-06-04T12:16:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/chunk_by_view/begin.md b/reference/ranges/chunk_by_view/begin.md
new file mode 100644
index 000000000..9102a0fa6
--- /dev/null
+++ b/reference/ranges/chunk_by_view/begin.md
@@ -0,0 +1,63 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* chunk_by_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr iterator begin();            // (1) C++23
+
+constexpr const_iterator begin() const
+  requires forward_range&amp;lt;const V&amp;gt;;     // (2) C++23
+```
+* iterator[italic]
+* const_iterator[italic]
+
+## 概要
+
+先頭要素を指すイテレータを取得する。
+
+## 効果
+
+- (1) : `return iterator(*this, ranges::begin(base_));`
+- (2) : `return const_iterator(*this, ranges::begin(base_));`
+
+ここで、`iterator`と`const_iterator`は説明専用のイテレータクラスである。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;functional&amp;gt;
+#include &amp;lt;print&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 2, 3, 0, 4, 5, 2};
+  
+  std::ranges::chunk_by_view cv{v, std::ranges::less_equal{}};
+  
+  auto it = cv.begin();
+  
+  // 最初のチャンクを出力
+  std::println(&amp;#34;{}&amp;#34;, *it);
+}
+```
+* begin[color ff0000]
+
+### 出力
+```
+[1, 2, 2, 3]
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 17 [mark verified]
+- [GCC](/implementation.md#gcc): 14.0 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 3 [mark verified]
+
+## 参照
+- [N4950 26.7.30 Chunk by view](https://timsong-cpp.github.io/cppwp/n4950/range.chunk.by)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- chunk_by_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/chunk_by_view/end.html"/>
      <id>2c7144340b1373a95fbe71d1b794167f0be4d9c2:reference/ranges/chunk_by_view/end.md</id>
      <updated>2025-06-04T12:16:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/chunk_by_view/end.md b/reference/ranges/chunk_by_view/end.md
new file mode 100644
index 000000000..193d1699b
--- /dev/null
+++ b/reference/ranges/chunk_by_view/end.md
@@ -0,0 +1,62 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* chunk_by_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr default_sentinel_t end() const; // (1) C++23
+```
+
+## 概要
+
+番兵を取得する。
+
+## 効果
+
+- (1) : `return default_sentinel;`
+
+## 備考
+
+`chunk_by_view`は常に`default_sentinel_t`を番兵として使用する。これは、チャンクの境界が動的に決まるため、事前にサイズを計算することができないためである。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;functional&amp;gt;
+#include &amp;lt;print&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 2, 3, 0, 4, 5, 2};
+  
+  std::ranges::chunk_by_view cv{v, std::ranges::less_equal{}};
+  
+  // イテレータ範囲で全チャンクを出力
+  for (auto it = cv.begin(); it != cv.end(); ++it) {
+    std::println(&amp;#34;{}&amp;#34;, *it);
+  }
+}
+```
+* end[color ff0000]
+* begin[link begin.md]
+
+### 出力
+```
+[1, 2, 2, 3]
+[0, 4, 5]
+[2]
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 17 [mark verified]
+- [GCC](/implementation.md#gcc): 14.0 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 3 [mark verified]
+
+## 参照
+- [N4950 26.7.30 Chunk by view](https://timsong-cpp.github.io/cppwp/n4950/range.chunk.by)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- chunk_by_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/chunk_by_view/op_constructor.html"/>
      <id>2c7144340b1373a95fbe71d1b794167f0be4d9c2:reference/ranges/chunk_by_view/op_constructor.md</id>
      <updated>2025-06-04T12:16:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/chunk_by_view/op_constructor.md b/reference/ranges/chunk_by_view/op_constructor.md
new file mode 100644
index 000000000..ef69362fc
--- /dev/null
+++ b/reference/ranges/chunk_by_view/op_constructor.md
@@ -0,0 +1,67 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* chunk_by_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+chunk_by_view()
+  requires default_initializable&amp;lt;V&amp;gt; &amp;amp;&amp;amp;
+           default_initializable&amp;lt;Pred&amp;gt; = default; // (1) C++23
+
+constexpr explicit
+chunk_by_view(V base, Pred pred);                 // (2) C++23
+```
+
+## 概要
+
+`chunk_by_view`オブジェクトを構築する。
+
+- (1) : デフォルトコンストラクタ。元となるRangeと述語を値初期化する。
+- (2) : 元となるRangeと述語を受け取るコンストラクタ。
+
+## 効果
+
+- (1) : `base_`と`pred_`を値初期化する。
+- (2) : `base_(std::move(base))`、`pred_(std::move(pred))`で初期化する。
+
+ここで、`base_`は元となるRangeを保持するメンバ変数、`pred_`は述語を保持するメンバ変数である。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;functional&amp;gt;
+#include &amp;lt;print&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 2, 3, 0, 4, 5, 2};
+  
+  // デフォルトコンストラクタ
+  std::ranges::chunk_by_view&amp;lt;std::views::all_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;, std::ranges::less_equal&amp;gt; cv1{};
+  
+  // 元となるRangeと述語を指定
+  std::ranges::chunk_by_view cv2{v, std::ranges::less_equal{}};
+  
+  std::println(&amp;#34;{}&amp;#34;, cv2);
+}
+```
+* std::ranges::chunk_by_view[color ff0000]
+
+### 出力
+```
+[[1, 2, 2, 3], [0, 4, 5], [2]]
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 17 [mark verified]
+- [GCC](/implementation.md#gcc): 14.0 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 3 [mark verified]
+
+## 参照
+- [N4950 26.7.30 Chunk by view](https://timsong-cpp.github.io/cppwp/n4950/range.chunk.by)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- chunk_by_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/chunk_by_view/op_deduction_guide.html"/>
      <id>2c7144340b1373a95fbe71d1b794167f0be4d9c2:reference/ranges/chunk_by_view/op_deduction_guide.md</id>
      <updated>2025-06-04T12:16:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/chunk_by_view/op_deduction_guide.md b/reference/ranges/chunk_by_view/op_deduction_guide.md
new file mode 100644
index 000000000..a666b29a6
--- /dev/null
+++ b/reference/ranges/chunk_by_view/op_deduction_guide.md
@@ -0,0 +1,54 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* chunk_by_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class R, class Pred&amp;gt;
+  chunk_by_view(R&amp;amp;&amp;amp;, Pred) -&amp;gt; chunk_by_view&amp;lt;views::all_t&amp;lt;R&amp;gt;, Pred&amp;gt;;
+}
+```
+
+## 概要
+`chunk_by_view`クラステンプレートの型推論補助。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;functional&amp;gt;
+#include &amp;lt;type_traits&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 2, 3, 0, 4, 5, 2};
+  
+  // chunk_by_viewの型を明示的に指定する必要がない
+  std::ranges::chunk_by_view cv{v, std::ranges::less_equal{}};
+  
+  // 推論された型を確認
+  static_assert(std::same_as&amp;lt;
+    decltype(cv),
+    std::ranges::chunk_by_view&amp;lt;
+      std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;,
+      std::ranges::less_equal
+    &amp;gt;
+  &amp;gt;);
+}
+```
+* std::ranges::chunk_by_view[color ff0000]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 17 [mark verified]
+- [GCC](/implementation.md#gcc): 14.0 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 3 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>pred -- chunk_by_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/chunk_by_view/pred.html"/>
      <id>2c7144340b1373a95fbe71d1b794167f0be4d9c2:reference/ranges/chunk_by_view/pred.md</id>
      <updated>2025-06-04T12:16:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/chunk_by_view/pred.md b/reference/ranges/chunk_by_view/pred.md
new file mode 100644
index 000000000..e68b955fc
--- /dev/null
+++ b/reference/ranges/chunk_by_view/pred.md
@@ -0,0 +1,58 @@
+# pred
+* ranges[meta header]
+* std::ranges[meta namespace]
+* chunk_by_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr const Pred&amp;amp; pred() const; // (1) C++23
+```
+
+## 概要
+
+メンバ変数として保持している、述語を取得する。
+
+## 効果
+
+- (1) : `return pred_;`
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;functional&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 2, 3, 0, 4, 5, 2};
+  
+  std::ranges::chunk_by_view cv{v, std::ranges::less_equal{}};
+  
+  // 述語を取得
+  const auto&amp;amp; predicate = cv.pred();
+  
+  // 述語を使用して比較
+  std::cout &amp;lt;&amp;lt; &amp;#34;predicate(1, 2): &amp;#34; &amp;lt;&amp;lt; predicate(1, 2) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;predicate(3, 0): &amp;#34; &amp;lt;&amp;lt; predicate(3, 0) &amp;lt;&amp;lt; std::endl;
+}
+```
+* pred[color ff0000]
+
+### 出力
+```
+predicate(1, 2): 1
+predicate(3, 0): 0
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 17 [mark verified]
+- [GCC](/implementation.md#gcc): 14.0 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 3 [mark verified]
+
+## 参照
+- [N4950 26.7.30 Chunk by view](https://timsong-cpp.github.io/cppwp/n4950/range.chunk.by)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cartesian_product_view -- certesian_product_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/cartesian_product_view.html"/>
      <id>3aebb6ec9b7b2a78594143738e61ab37a7a42716:reference/ranges/cartesian_product_view.md</id>
      <updated>2025-06-04T12:06:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/cartesian_product_view.md b/reference/ranges/cartesian_product_view.md
index 47cd66690..f70ebf3ea 100644
--- a/reference/ranges/cartesian_product_view.md
+++ b/reference/ranges/cartesian_product_view.md
@@ -96,10 +96,10 @@ namespace std::ranges {
 
 | 名前                                             | 説明                             | 対応バージョン |
 |--------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](cartesian_product_view/op_constructor.md.nolink)  | コンストラクタ                   | C++23          |
-| [`begin`](cartesian_product_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++23          |
-| [`end`](cartesian_product_view/end.md.nolink)                       | 番兵を取得する                   | C++23          |
-| [`size`](cartesian_product_view/size.md.nolink)                     | 要素数を取得する                 | C++23          |
+| [`(constructor)`](cartesian_product_view/op_constructor.md)  | コンストラクタ                   | C++23          |
+| [`begin`](cartesian_product_view/begin.md)                   | 先頭を指すイテレータを取得する   | C++23          |
+| [`end`](cartesian_product_view/end.md)                       | 番兵を取得する                   | C++23          |
+| [`size`](cartesian_product_view/size.md)                     | 要素数を取得する                 | C++23          |
 
 ## 継承しているメンバ関数
 
@@ -117,7 +117,7 @@ namespace std::ranges {
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](cartesian_product_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++23          |
+| [`(deduction_guide)`](cartesian_product_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++23          |
 
 ## 例
 ```cpp example
@@ -151,8 +151,7 @@ int main() {
 ### 処理系
 - [Clang](/implementation.md#clang): 16.0 [mark verified]
 - [GCC](/implementation.md#gcc): 13.2 [mark verified]
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 7 [mark verified]
 
 ## 参照
 - [N4950 26 Ranges library](https://timsong-cpp.github.io/cppwp/n4950/ranges)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- certesian_product_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/cartesian_product_view/begin.html"/>
      <id>3aebb6ec9b7b2a78594143738e61ab37a7a42716:reference/ranges/cartesian_product_view/begin.md</id>
      <updated>2025-06-04T12:06:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/cartesian_product_view/begin.md b/reference/ranges/cartesian_product_view/begin.md
new file mode 100644
index 000000000..dffa7b6b5
--- /dev/null
+++ b/reference/ranges/cartesian_product_view/begin.md
@@ -0,0 +1,65 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* cartesian_product_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr iterator&amp;lt;false&amp;gt; begin()
+  requires (!simple-view&amp;lt;First&amp;gt; || ... || !simple-view&amp;lt;Vs&amp;gt;); // (1) C++23
+
+constexpr iterator&amp;lt;true&amp;gt; begin() const; // (2) C++23
+```
+* iterator[italic]
+
+## 概要
+
+先頭要素を指すイテレータを取得する。
+
+## 効果
+
+- (1), (2) : 以下と等価
+    ```cpp
+    return iterator&amp;lt;Const&amp;gt;(*this, tuple-transform(ranges::begin, bases_));
+    ```
+
+ここで、`iterator`は説明専用のイテレータクラスであり、`tuple-transform`は説明専用の関数で、tupleの各要素に関数を適用する。`Const`は各オーバーロードに応じて`false`または`true`となる。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;list&amp;gt;
+#include &amp;lt;print&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2};
+  std::list&amp;lt;char&amp;gt; l = {&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;};
+  
+  std::ranges::cartesian_product_view cv{v, l};
+  
+  auto it = cv.begin();
+  
+  // 最初の要素を出力
+  std::println(&amp;#34;first element: {}&amp;#34;, *it);
+}
+```
+* begin[color ff0000]
+
+### 出力
+```
+first element: (1, &amp;#39;a&amp;#39;)
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0 [mark verified]
+- [GCC](/implementation.md#gcc): 13.2 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 7 [mark verified]
+
+## 参照
+- [N4950 26.7.33 Cartesian product view](https://timsong-cpp.github.io/cppwp/n4950/range.cartesian)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- certesian_product_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/cartesian_product_view/end.html"/>
      <id>3aebb6ec9b7b2a78594143738e61ab37a7a42716:reference/ranges/cartesian_product_view/end.md</id>
      <updated>2025-06-04T12:06:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/cartesian_product_view/end.md b/reference/ranges/cartesian_product_view/end.md
new file mode 100644
index 000000000..795d4996d
--- /dev/null
+++ b/reference/ranges/cartesian_product_view/end.md
@@ -0,0 +1,83 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* cartesian_product_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr iterator&amp;lt;false&amp;gt; end()
+  requires ((!simple-view&amp;lt;First&amp;gt; || ... || !simple-view&amp;lt;Vs&amp;gt;) &amp;amp;&amp;amp;
+            cartesian-product-is-common&amp;lt;First, Vs...&amp;gt;); // (1) C++23
+
+constexpr default_sentinel_t end() const noexcept; // (2) C++23
+
+constexpr iterator&amp;lt;true&amp;gt; end() const
+  requires cartesian-product-is-common&amp;lt;const First, const Vs...&amp;gt;; // (3) C++23
+```
+* iterator[italic]
+* cartesian-product-is-common[italic]
+
+## 概要
+
+番兵またはイテレータを取得する。
+
+## 効果
+
+- (1) : 以下と等価
+    ```cpp
+    auto end_tuple = tuple-transform([](auto&amp;amp; r) { return cartesian-common-arg-end(r); }, bases_);
+    return iterator&amp;lt;false&amp;gt;(*this, std::move(end_tuple));
+    ```
+
+- (2) : `return default_sentinel;`
+
+- (3) : 以下と等価
+    ```cpp
+    auto end_tuple = tuple-transform([](auto&amp;amp; r) { return cartesian-common-arg-end(r); }, bases_);
+    return iterator&amp;lt;true&amp;gt;(*this, std::move(end_tuple));
+    ```
+
+ここで、`iterator`は説明専用のイテレータクラス、`tuple-transform`は説明専用の関数で、tupleの各要素に関数を適用する。`cartesian-common-arg-end`は説明専用の関数である。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;list&amp;gt;
+#include &amp;lt;print&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2};
+  std::list&amp;lt;char&amp;gt; l = {&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;};
+  
+  std::ranges::cartesian_product_view cv{v, l};
+  
+  // イテレータ範囲で全要素を出力
+  for (auto it = cv.begin(); it != cv.end(); ++it) {
+    std::println(&amp;#34;{}&amp;#34;, *it);
+  }
+}
+```
+* end[color ff0000]
+* begin[link begin.md]
+
+### 出力
+```
+(1, &amp;#39;a&amp;#39;)
+(1, &amp;#39;b&amp;#39;)
+(2, &amp;#39;a&amp;#39;)
+(2, &amp;#39;b&amp;#39;)
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0 [mark verified]
+- [GCC](/implementation.md#gcc): 13.2 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 7 [mark verified]
+
+## 参照
+- [N4950 26.7.33 Cartesian product view](https://timsong-cpp.github.io/cppwp/n4950/range.cartesian)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- certesian_product_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/cartesian_product_view/op_constructor.html"/>
      <id>3aebb6ec9b7b2a78594143738e61ab37a7a42716:reference/ranges/cartesian_product_view/op_constructor.md</id>
      <updated>2025-06-04T12:06:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/cartesian_product_view/op_constructor.md b/reference/ranges/cartesian_product_view/op_constructor.md
new file mode 100644
index 000000000..0660cbce2
--- /dev/null
+++ b/reference/ranges/cartesian_product_view/op_constructor.md
@@ -0,0 +1,66 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* cartesian_product_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+cartesian_product_view() = default; // (1) C++23
+
+constexpr explicit
+cartesian_product_view(First first_base, Vs... bases); // (2) C++23
+```
+
+## 概要
+
+`cartesian_product_view`オブジェクトを構築する。
+
+- (1) : デフォルトコンストラクタ。各Rangeを値初期化する。
+- (2) : 複数のRangeを受け取るコンストラクタ。
+
+## 効果
+
+- (1) : 各メンバを値初期化する。
+- (2) : `bases_`を`std::tuple&amp;lt;First, Vs...&amp;gt;(std::move(first_base), std::move(bases)...)`で初期化する。
+
+ここで、`bases_`は複数のRangeを保持するメンバ変数である。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;list&amp;gt;
+#include &amp;lt;print&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2};
+  std::list&amp;lt;char&amp;gt; l = {&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;};
+  
+  // デフォルトコンストラクタ
+  std::ranges::cartesian_product_view&amp;lt;std::views::all_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;, std::views::all_t&amp;lt;std::list&amp;lt;char&amp;gt;&amp;gt;&amp;gt; cv1{};
+  
+  // Rangeを指定
+  std::ranges::cartesian_product_view cv2{v, l};
+  
+  std::println(&amp;#34;{}&amp;#34;, cv2);
+}
+```
+* std::ranges::cartesian_product_view[color ff0000]
+
+### 出力
+```
+[(1, &amp;#39;a&amp;#39;), (1, &amp;#39;b&amp;#39;), (2, &amp;#39;a&amp;#39;), (2, &amp;#39;b&amp;#39;)]
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0 [mark verified]
+- [GCC](/implementation.md#gcc): 13.2 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 7 [mark verified]
+
+## 参照
+- [N4950 26.7.33 Cartesian product view](https://timsong-cpp.github.io/cppwp/n4950/range.cartesian)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- certesian_product_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/cartesian_product_view/op_deduction_guide.html"/>
      <id>3aebb6ec9b7b2a78594143738e61ab37a7a42716:reference/ranges/cartesian_product_view/op_deduction_guide.md</id>
      <updated>2025-06-04T12:06:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/cartesian_product_view/op_deduction_guide.md b/reference/ranges/cartesian_product_view/op_deduction_guide.md
new file mode 100644
index 000000000..7036e1e37
--- /dev/null
+++ b/reference/ranges/cartesian_product_view/op_deduction_guide.md
@@ -0,0 +1,55 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* cartesian_product_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class... Rs&amp;gt;
+  cartesian_product_view(Rs&amp;amp;&amp;amp;...) -&amp;gt; cartesian_product_view&amp;lt;views::all_t&amp;lt;Rs&amp;gt;...&amp;gt;;
+}
+```
+
+## 概要
+`cartesian_product_view`クラステンプレートの型推論補助。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;list&amp;gt;
+#include &amp;lt;type_traits&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2};
+  std::list&amp;lt;char&amp;gt; l = {&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;};
+  
+  // cartesian_product_viewの型を明示的に指定する必要がない
+  std::ranges::cartesian_product_view cv{v, l};
+  
+  // 推論された型を確認
+  static_assert(std::same_as&amp;lt;
+    decltype(cv),
+    std::ranges::cartesian_product_view&amp;lt;
+      std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;,
+      std::ranges::ref_view&amp;lt;std::list&amp;lt;char&amp;gt;&amp;gt;
+    &amp;gt;
+  &amp;gt;);
+}
+```
+* std::ranges::cartesian_product_view[color ff0000]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0 [mark verified]
+- [GCC](/implementation.md#gcc): 13.2 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 7 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- certesian_product_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/cartesian_product_view/size.html"/>
      <id>3aebb6ec9b7b2a78594143738e61ab37a7a42716:reference/ranges/cartesian_product_view/size.md</id>
      <updated>2025-06-04T12:06:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/cartesian_product_view/size.md b/reference/ranges/cartesian_product_view/size.md
new file mode 100644
index 000000000..647f006cc
--- /dev/null
+++ b/reference/ranges/cartesian_product_view/size.md
@@ -0,0 +1,74 @@
+# size
+* ranges[meta header]
+* std::ranges[meta namespace]
+* cartesian_product_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr 以下参照 size()
+  requires cartesian-product-is-sized&amp;lt;First, Vs...&amp;gt;; // (1) C++23
+
+constexpr 以下参照 size() const
+  requires cartesian-product-is-sized&amp;lt;const First, const Vs...&amp;gt;; // (2) C++23
+```
+* cartesian-product-is-sized[italic]
+
+## 概要
+
+要素数を取得する。
+
+## 効果
+
+以下と等価：
+
+```cpp
+return apply([](auto... sizes) {
+    using CT = make-unsigned-like-t&amp;lt;common_type_t&amp;lt;decltype(sizes)...&amp;gt;&amp;gt;;
+    return (static_cast&amp;lt;CT&amp;gt;(sizes) * ...);
+}, tuple-transform(ranges::size, bases_));
+```
+* make-unsigned-like-t[italic]
+* tuple-transform[italic]
+
+ここで、`tuple-transform`は説明専用の関数で、tupleの各要素に関数を適用する。
+
+## 備考
+- 直積の要素数は、すべてのRangeの要素数の積となる。
+
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;list&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3}; // 3要素
+  std::list&amp;lt;char&amp;gt; l = {&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;}; // 2要素
+  
+  std::ranges::cartesian_product_view cv{v, l};
+  
+  // 直積の要素数は 3 * 2 = 6
+  std::cout &amp;lt;&amp;lt; &amp;#34;cartesian product size: &amp;#34; &amp;lt;&amp;lt; cv.size() &amp;lt;&amp;lt; std::endl;
+}
+```
+* size[color ff0000]
+
+### 出力
+```
+cartesian product size: 6
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0 [mark verified]
+- [GCC](/implementation.md#gcc): 13.2 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 7 [mark verified]
+
+## 参照
+- [N4950 26.7.33 Cartesian product view](https://timsong-cpp.github.io/cppwp/n4950/range.cartesian)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>adjacent_view -- adjacent_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_view.html"/>
      <id>47160743e4d780b8e52f709475e1af514b6ece92:reference/ranges/adjacent_view.md</id>
      <updated>2025-06-04T11:59:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_view.md b/reference/ranges/adjacent_view.md
index c43cdb999..63b69d494 100644
--- a/reference/ranges/adjacent_view.md
+++ b/reference/ranges/adjacent_view.md
@@ -50,11 +50,11 @@ namespace std::ranges {
 
 | 名前                                                | 説明                             | 対応バージョン |
 |-----------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](adjacent_view/op_constructor.md.nolink)  | コンストラクタ                   | C++23          |
-| [`base`](adjacent_view/base.md.nolink)                     | `V`の参照を取得する              | C++23          |
-| [`begin`](adjacent_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++23          |
-| [`end`](adjacent_view/end.md.nolink)                       | 番兵を取得する                   | C++23          |
-| [`size`](adjacent_view/size.md.nolink)                     | 要素数を取得する                 | C++23          |
+| [`(constructor)`](adjacent_view/op_constructor.md)  | コンストラクタ                   | C++23          |
+| [`base`](adjacent_view/base.md)                     | `V`の参照を取得する              | C++23          |
+| [`begin`](adjacent_view/begin.md)                   | 先頭を指すイテレータを取得する   | C++23          |
+| [`end`](adjacent_view/end.md)                       | 番兵を取得する                   | C++23          |
+| [`size`](adjacent_view/size.md)                     | 要素数を取得する                 | C++23          |
 
 ## 継承しているメンバ関数
 
@@ -72,7 +72,7 @@ namespace std::ranges {
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](adjacent_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++23          |
+| [`(deduction_guide)`](adjacent_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++23          |
 
 ## 例
 ```cpp example
@@ -105,10 +105,9 @@ int main() {
 - C++23
 
 ### 処理系
-- [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): ??
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [Clang](/implementation.md#clang): 19 [mark verified]
+- [GCC](/implementation.md#gcc): 13 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 7 [mark verified]
 
 ## 関連項目
 - [`adjacent_transform_view`](adjacent_transform_view.md): `adjacent_view` と同じように要素を取得して関数を適用する
@@ -116,3 +115,4 @@ int main() {
 
 ## 参照
 - [N4950 26 Ranges library](https://timsong-cpp.github.io/cppwp/n4950/ranges)
+- [P2321R2 zip](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2321r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- adjacent_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_view/base.html"/>
      <id>47160743e4d780b8e52f709475e1af514b6ece92:reference/ranges/adjacent_view/base.md</id>
      <updated>2025-06-04T11:59:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_view/base.md b/reference/ranges/adjacent_view/base.md
new file mode 100644
index 000000000..117b9bfc5
--- /dev/null
+++ b/reference/ranges/adjacent_view/base.md
@@ -0,0 +1,68 @@
+# base
+* ranges[meta header]
+* std::ranges[meta namespace]
+* adjacent_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr V base() const &amp;amp;
+  requires copy_constructible&amp;lt;V&amp;gt;;  // (1) C++23
+
+constexpr V base() &amp;amp;&amp;amp;;             // (2) C++23
+```
+
+## 概要
+
+メンバ変数として保持している、元のviewを取得する。
+
+## 効果
+
+- (1) : `return base_;`
+- (2) : `return std::move(base_);`
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  
+  std::ranges::adjacent_view&amp;lt;std::views::all_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;amp;&amp;gt;, 3&amp;gt; av(v);
+  
+  // (1) コピーして取得
+  auto base1 = av.base();
+  static_assert(std::same_as&amp;lt;decltype(base1), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+  
+  // (2) ムーブして取得
+  auto base2 = std::move(av).base();
+  static_assert(std::same_as&amp;lt;decltype(base2), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+  
+  // 取得したviewを使用（元の要素を表示）
+  for (int n : base1) {
+    std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* base[color ff0000]
+
+### 出力
+```
+1 2 3 4 5 
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 19 [mark verified]
+- [GCC](/implementation.md#gcc): 13 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 7 [mark verified]
+
+## 参照
+- [N4950 26.7.27 Adjacent view](https://timsong-cpp.github.io/cppwp/n4950/range.adjacent)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- adjacent_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_view/begin.html"/>
      <id>47160743e4d780b8e52f709475e1af514b6ece92:reference/ranges/adjacent_view/begin.md</id>
      <updated>2025-06-04T11:59:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_view/begin.md b/reference/ranges/adjacent_view/begin.md
new file mode 100644
index 000000000..c0c6951b3
--- /dev/null
+++ b/reference/ranges/adjacent_view/begin.md
@@ -0,0 +1,68 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* adjacent_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto begin()
+  requires (!simple-view&amp;lt;V&amp;gt;);      // (1) C++23
+
+constexpr auto begin() const
+  requires range&amp;lt;const V&amp;gt;;         // (2) C++23
+```
+
+## 概要
+
+先頭を指すイテレータを取得する。
+
+## 効果
+
+- (1) : `return iterator&amp;lt;false&amp;gt;(ranges::begin(base_), ranges::end(base_));`
+- (2) : `return iterator&amp;lt;true&amp;gt;(ranges::begin(base_), ranges::end(base_));`
+
+ここで、`iterator`は`adjacent_view`の内部で定義される説明専用のイテレータクラスである。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  
+  std::ranges::adjacent_view&amp;lt;std::views::all_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;amp;&amp;gt;, 3&amp;gt; av(v);
+  
+  auto it = av.begin();
+  
+  // 最初の要素（隣接する3要素のタプル）
+  auto [a, b, c] = *it;
+  std::cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; c &amp;lt;&amp;lt; std::endl;
+  
+  // 次の要素へ
+  ++it;
+  auto [a2, b2, c2] = *it;
+  std::cout &amp;lt;&amp;lt; a2 &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; b2 &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; c2 &amp;lt;&amp;lt; std::endl;
+}
+```
+* begin[color ff0000]
+
+### 出力
+```
+1, 2, 3
+2, 3, 4
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 19 [mark verified]
+- [GCC](/implementation.md#gcc): 13 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 7 [mark verified]
+
+## 参照
+- [N4950 26.7.27 Adjacent view](https://timsong-cpp.github.io/cppwp/n4950/range.adjacent)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- adjacent_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_view/end.html"/>
      <id>47160743e4d780b8e52f709475e1af514b6ece92:reference/ranges/adjacent_view/end.md</id>
      <updated>2025-06-04T11:59:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_view/end.md b/reference/ranges/adjacent_view/end.md
new file mode 100644
index 000000000..7fca485b2
--- /dev/null
+++ b/reference/ranges/adjacent_view/end.md
@@ -0,0 +1,75 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* adjacent_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto end()
+  requires (!simple-view&amp;lt;V&amp;gt;);                              // (1) C++23
+
+constexpr auto end() const
+  requires range&amp;lt;const V&amp;gt;;                                 // (2) C++23
+```
+
+## 概要
+
+番兵を取得する。
+
+## 効果
+
+`common_range&amp;lt;V&amp;gt;`が`true`の場合：
+
+- (1) : `return iterator&amp;lt;false&amp;gt;(as-sentinel{ranges::end(base_)}, ranges::begin(base_), ranges::end(base_));`
+- (2) : `return iterator&amp;lt;true&amp;gt;(as-sentinel{ranges::end(base_)}, ranges::begin(base_), ranges::end(base_));`
+
+それ以外の場合：
+
+- (1) : `return sentinel&amp;lt;false&amp;gt;(ranges::end(base_));`
+- (2) : `return sentinel&amp;lt;true&amp;gt;(ranges::end(base_));`
+
+ここで、`iterator`と`sentinel`は`adjacent_view`の内部で定義される説明専用のクラスであり、`as-sentinel`は説明専用の空クラスである。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  
+  std::ranges::adjacent_view&amp;lt;std::views::all_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;amp;&amp;gt;, 3&amp;gt; av(v);
+  
+  auto begin = av.begin();
+  auto end = av.end();
+  
+  // 全要素を出力
+  for (auto it = begin; it != end; ++it) {
+    auto [a, b, c] = *it;
+    std::cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; c &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* end[color ff0000]
+* begin[link begin.md]
+
+### 出力
+```
+1, 2, 3
+2, 3, 4
+3, 4, 5
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 19 [mark verified]
+- [GCC](/implementation.md#gcc): 13 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 7 [mark verified]
+
+## 参照
+- [N4950 26.7.27 Adjacent view](https://timsong-cpp.github.io/cppwp/n4950/range.adjacent)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- adjacent_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_view/op_constructor.html"/>
      <id>47160743e4d780b8e52f709475e1af514b6ece92:reference/ranges/adjacent_view/op_constructor.md</id>
      <updated>2025-06-04T11:59:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_view/op_constructor.md b/reference/ranges/adjacent_view/op_constructor.md
new file mode 100644
index 000000000..d19841345
--- /dev/null
+++ b/reference/ranges/adjacent_view/op_constructor.md
@@ -0,0 +1,64 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* adjacent_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+adjacent_view()
+  requires default_initializable&amp;lt;V&amp;gt; = default;  // (1) C++23
+
+constexpr explicit
+adjacent_view(V base);                          // (2) C++23
+```
+
+## 概要
+
+- (1) : デフォルトコンストラクタ
+- (2) : 元となるRangeを受け取るコンストラクタ
+
+## 効果
+
+- (1) : `base_`をデフォルト構築する
+- (2) : `base_`を`std::move(base)`で初期化する
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  // (1) デフォルトコンストラクタ
+  std::ranges::adjacent_view&amp;lt;std::ranges::empty_view&amp;lt;int&amp;gt;, 2&amp;gt; av1;
+  
+  // (2) 元となるRangeを受け取るコンストラクタ
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  std::ranges::adjacent_view&amp;lt;std::views::all_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;amp;&amp;gt;, 3&amp;gt; av2(v);
+  
+  for (auto [a, b, c] : av2) {
+    std::cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; c &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::ranges::adjacent_view[color ff0000]
+
+### 出力
+```
+1, 2, 3
+2, 3, 4
+3, 4, 5
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 19 [mark verified]
+- [GCC](/implementation.md#gcc): 13 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 7 [mark verified]
+
+## 参照
+- [N4950 26.7.27 Adjacent view](https://timsong-cpp.github.io/cppwp/n4950/range.adjacent)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- adjacent_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_view/op_deduction_guide.html"/>
      <id>47160743e4d780b8e52f709475e1af514b6ece92:reference/ranges/adjacent_view/op_deduction_guide.md</id>
      <updated>2025-06-04T11:59:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_view/op_deduction_guide.md b/reference/ranges/adjacent_view/op_deduction_guide.md
new file mode 100644
index 000000000..8eca83ea9
--- /dev/null
+++ b/reference/ranges/adjacent_view/op_deduction_guide.md
@@ -0,0 +1,53 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* adjacent_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class R&amp;gt;
+  adjacent_view(R&amp;amp;&amp;amp;) -&amp;gt; adjacent_view&amp;lt;views::all_t&amp;lt;R&amp;gt;, 1&amp;gt;;
+}
+```
+
+## 概要
+`adjacent_view`クラステンプレートの型推論補助。
+
+## 備考
+
+この推論補助は、第2テンプレート引数`N`のデフォルト値として`1`を使用する。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;type_traits&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  
+  // adjacent_viewの型を明示的に指定する必要がない（Nはデフォルトで1）
+  std::ranges::adjacent_view av{v};
+  
+  // 推論された型を確認
+  static_assert(std::same_as&amp;lt;
+    decltype(av),
+    std::ranges::adjacent_view&amp;lt;std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;, 1&amp;gt;
+  &amp;gt;);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 19 [mark verified]
+- [GCC](/implementation.md#gcc): 13 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 7 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- adjacent_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_view/size.html"/>
      <id>47160743e4d780b8e52f709475e1af514b6ece92:reference/ranges/adjacent_view/size.md</id>
      <updated>2025-06-04T11:59:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_view/size.md b/reference/ranges/adjacent_view/size.md
new file mode 100644
index 000000000..afd9c8ae8
--- /dev/null
+++ b/reference/ranges/adjacent_view/size.md
@@ -0,0 +1,73 @@
+# size
+* ranges[meta header]
+* std::ranges[meta namespace]
+* adjacent_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto size()
+  requires sized_range&amp;lt;V&amp;gt;;       // (1) C++23
+
+constexpr auto size() const
+  requires sized_range&amp;lt;const V&amp;gt;; // (2) C++23
+```
+
+## 概要
+
+要素数を取得する。
+
+## 効果
+
+説明専用の変数 `n` を `ranges::size(base_)` とする。
+
+- (1)、(2) : `n` が `N` 未満なら `0` を返す。それ以外なら `n - (N - 1)` を返す。
+
+## 備考
+
+元のRangeのサイズが`N`未満の場合、`adjacent_view`は空となる。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  
+  std::ranges::adjacent_view&amp;lt;std::views::all_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;amp;&amp;gt;, 3&amp;gt; av(v);
+  
+  // サイズは元のサイズ(5) - (N(3) - 1) = 3
+  std::cout &amp;lt;&amp;lt; &amp;#34;size: &amp;#34; &amp;lt;&amp;lt; av.size() &amp;lt;&amp;lt; std::endl;
+  
+  // const版も動作する
+  const auto&amp;amp; cav = av;
+  std::cout &amp;lt;&amp;lt; &amp;#34;const size: &amp;#34; &amp;lt;&amp;lt; cav.size() &amp;lt;&amp;lt; std::endl;
+  
+  // 元のRangeが小さい場合
+  std::vector&amp;lt;int&amp;gt; v2 = {1, 2};
+  std::ranges::adjacent_view&amp;lt;std::views::all_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;amp;&amp;gt;, 3&amp;gt; av2(v2);
+  std::cout &amp;lt;&amp;lt; &amp;#34;small range size: &amp;#34; &amp;lt;&amp;lt; av2.size() &amp;lt;&amp;lt; std::endl; // 0
+}
+```
+* size[color ff0000]
+
+### 出力
+```
+size: 3
+const size: 3
+small range size: 0
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 19 [mark verified]
+- [GCC](/implementation.md#gcc): 13 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 7 [mark verified]
+
+## 参照
+- [N4950 26.7.27 Adjacent view](https://timsong-cpp.github.io/cppwp/n4950/range.adjacent)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>adjacent_transform_view -- adjacent_transform_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_transform_view.html"/>
      <id>03cf02bed041cce71b018d21e9ae2320ac30c20c:reference/ranges/adjacent_transform_view.md</id>
      <updated>2025-06-04T11:59:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_transform_view.md b/reference/ranges/adjacent_transform_view.md
index 4e4c10baa..96e092134 100644
--- a/reference/ranges/adjacent_transform_view.md
+++ b/reference/ranges/adjacent_transform_view.md
@@ -54,43 +54,54 @@ namespace std::ranges {
 
 | 名前                                             | 説明                             | 対応バージョン |
 |--------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](adjacent_transform_view/op_constructor.md.nolink)  | コンストラクタ                   | C++23          |
-| [`base`](adjacent_transform_view/base.md.nolink)                     | `V`の参照を取得する              | C++23          |
-| [`begin`](adjacent_transform_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++23          |
-| [`end`](adjacent_transform_view/end.md.nolink)                       | 番兵を取得する                   | C++23          |
-| [`size`](adjacent_transform_view/size.md.nolink)                     | 要素数を取得する                 | C++23          |
+| [`(constructor)`](adjacent_transform_view/op_constructor.md)  | コンストラクタ                   | C++23          |
+| [`base`](adjacent_transform_view/base.md)                     | `V`の参照を取得する              | C++23          |
+| [`begin`](adjacent_transform_view/begin.md)                   | 先頭を指すイテレータを取得する   | C++23          |
+| [`end`](adjacent_transform_view/end.md)                       | 番兵を取得する                   | C++23          |
+| [`size`](adjacent_transform_view/size.md)                     | 要素数を取得する                 | C++23          |
 
 ## 継承しているメンバ関数
 
 | 名前                                         | 説明                              | 対応バージョン |
 |----------------------------------------------|-----------------------------------|----------------|
-| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++20          |
-| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++20          |
-| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
-| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
+| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++23          |
+| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++23          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++23          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++23          |
 | [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する          | C++23          |
 | [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する  | C++23          |
-| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++20          |
+| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++23          |
 
 ## 推論補助
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](adjacent_transform_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++23          |
+| [`(deduction_guide)`](adjacent_transform_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++23          |
 
 ## 例
 ```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+
 int main() {
   // 隣接する要素間の差を計算する
   std::vector v = {9, 2, 5, 3, 6, 7};
-  std::println(&amp;#34;{}&amp;#34;, v | std::views::adjacent_transform_view&amp;lt;2&amp;gt;([](auto x, auto y) { return y - x; }));
+  for (int x : v | std::views::adjacent_transform_view&amp;lt;2&amp;gt;(
+                     [](auto x, auto y) { return y - x; })) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+  }
 }
 ```
 * std::views::adjacent_transform_view[color ff0000]
 
 ### 出力
 ```
-[-7, 3, -2, 3, 1]
+-7
+3
+-2
+3
+1
 ```
 
 
@@ -99,13 +110,15 @@ int main() {
 - C++23
 
 ### 処理系
-- [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): ??
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [Clang](/implementation.md#clang): 20 [mark noimpl]
+- [GCC](/implementation.md#gcc): 15 [mark noimpl]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
 
 ## 関連項目
-- [`adjacent_difference`](/reference/numeric/adjacent_difference.md) 隣接する2つの要素間の差を計算するアルゴリズム関数
+- [`std::adjacent_difference`](/reference/numeric/adjacent_difference.md)
+    - 隣接する2つの要素間の差を計算するアルゴリズム関数
+
 
 ## 参照
 - [N4950 26 Ranges library](https://timsong-cpp.github.io/cppwp/n4950/ranges)
+- [P2321R2 zip](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2321r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- adjacent_transform_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_transform_view/base.html"/>
      <id>03cf02bed041cce71b018d21e9ae2320ac30c20c:reference/ranges/adjacent_transform_view/base.md</id>
      <updated>2025-06-04T11:59:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_transform_view/base.md b/reference/ranges/adjacent_transform_view/base.md
new file mode 100644
index 000000000..27640b2f6
--- /dev/null
+++ b/reference/ranges/adjacent_transform_view/base.md
@@ -0,0 +1,71 @@
+# base
+* ranges[meta header]
+* std::ranges[meta namespace]
+* adjacent_transform_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr V base() const &amp;amp;
+  requires copy_constructible&amp;lt;V&amp;gt;;  // (1) C++23
+
+constexpr V base() &amp;amp;&amp;amp;;             // (2) C++23
+```
+
+## 概要
+
+メンバ変数として保持している、元のviewを取得する。
+
+## 効果
+
+- (1) : `return inner_.base();`
+- (2) : `return std::move(inner_).base();`
+
+ここで、`inner_`は`adjacent_view&amp;lt;V, N&amp;gt;`型のメンバ変数。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  
+  auto diff = [](int x, int y) { return y - x; };
+  std::ranges::adjacent_transform_view&amp;lt;std::views::all_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;amp;&amp;gt;, decltype(diff), 2&amp;gt; atv(v, diff);
+  
+  // (1) コピーして取得
+  auto base1 = atv.base();
+  static_assert(std::same_as&amp;lt;decltype(base1), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+  
+  // (2) ムーブして取得
+  auto base2 = std::move(atv).base();
+  static_assert(std::same_as&amp;lt;decltype(base2), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+  
+  // 取得したviewを使用（元の要素を表示）
+  for (int n : base1) {
+    std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* base[color ff0000]
+
+### 出力
+```
+1 2 3 4 5 
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 20 [mark noimpl]
+- [GCC](/implementation.md#gcc): 15 [mark noimpl]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
+
+## 参照
+- [N4950 26.7.28 Adjacent transform view](https://timsong-cpp.github.io/cppwp/n4950/range.adjacent.transform)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- adjacent_transform_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_transform_view/begin.html"/>
      <id>03cf02bed041cce71b018d21e9ae2320ac30c20c:reference/ranges/adjacent_transform_view/begin.md</id>
      <updated>2025-06-04T11:59:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_transform_view/begin.md b/reference/ranges/adjacent_transform_view/begin.md
new file mode 100644
index 000000000..0b1e5550b
--- /dev/null
+++ b/reference/ranges/adjacent_transform_view/begin.md
@@ -0,0 +1,72 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* adjacent_transform_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto begin();      // (1) C++23
+
+constexpr auto begin() const
+  requires range&amp;lt;const InnerView&amp;gt; &amp;amp;&amp;amp;
+           regular_invocable&amp;lt;const F&amp;amp;, REPEAT(range_reference_t&amp;lt;const V&amp;gt;, N)...&amp;gt;; // (2) C++23
+```
+* REPEAT[italic]
+
+## 概要
+
+先頭を指すイテレータを取得する。
+
+## 効果
+
+- (1) : `return iterator&amp;lt;false&amp;gt;(*this, inner_.begin());`
+- (2) : `return iterator&amp;lt;true&amp;gt;(*this, inner_.begin());`
+
+ここで、`iterator`は`adjacent_transform_view`の内部で定義される説明専用のイテレータクラスであり、`InnerView`は説明専用の[`adjacent_view`](../adjacent_view.md)`&amp;lt;V, N&amp;gt;`である。
+
+## 備考
+- `REPEAT(T, N)` をT型のN個のパックとする。
+
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  
+  auto diff = [](int x, int y) { return y - x; };
+  std::ranges::adjacent_transform_view&amp;lt;std::views::all_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;amp;&amp;gt;, decltype(diff), 2&amp;gt; atv(v, diff);
+  
+  auto it = atv.begin();
+  
+  // 最初の要素（隣接する2要素の差）
+  std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl;  // 2 - 1 = 1
+  
+  // 次の要素へ
+  ++it;
+  std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl;  // 3 - 2 = 1
+}
+```
+* begin[color ff0000]
+
+### 出力
+```
+1
+1
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 20 [mark noimpl]
+- [GCC](/implementation.md#gcc): 15 [mark noimpl]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
+
+## 参照
+- [N4950 26.7.28 Adjacent transform view](https://timsong-cpp.github.io/cppwp/n4950/range.adjacent.transform)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- adjacent_transform_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_transform_view/end.html"/>
      <id>03cf02bed041cce71b018d21e9ae2320ac30c20c:reference/ranges/adjacent_transform_view/end.md</id>
      <updated>2025-06-04T11:59:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_transform_view/end.md b/reference/ranges/adjacent_transform_view/end.md
new file mode 100644
index 000000000..259037cc1
--- /dev/null
+++ b/reference/ranges/adjacent_transform_view/end.md
@@ -0,0 +1,79 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* adjacent_transform_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto end();      // (1) C++23
+
+constexpr auto end() const
+  requires range&amp;lt;const InnerView&amp;gt; &amp;amp;&amp;amp;
+           regular_invocable&amp;lt;const F&amp;amp;, REPEAT(range_reference_t&amp;lt;const V&amp;gt;, N)...&amp;gt;; // (2) C++23
+```
+* REPEAT[italic]
+
+## 概要
+
+番兵を取得する。
+
+## 効果
+
+`common_range&amp;lt;InnerView&amp;gt;`が`true`の場合：
+
+- (1) : `return iterator&amp;lt;false&amp;gt;(*this, inner_.end());`
+- (2) : `return iterator&amp;lt;true&amp;gt;(*this, inner_.end());`
+
+それ以外の場合：
+
+- (1) : `return sentinel&amp;lt;false&amp;gt;(inner_.end());`
+- (2) : `return sentinel&amp;lt;true&amp;gt;(inner_.end());`
+
+ここで、`iterator`と`sentinel`は`adjacent_transform_view`の内部で定義される説明専用のクラスであり、`InnerView`は説明専用の[`adjacent_view`](../adjacent_view.md)`&amp;lt;V, N&amp;gt;`である。
+
+## 備考
+- `REPEAT(T, N)` をT型のN個のパックとする。
+
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  
+  auto diff = [](int x, int y) { return y - x; };
+  std::ranges::adjacent_transform_view&amp;lt;std::views::all_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;amp;&amp;gt;, decltype(diff), 2&amp;gt; atv(v, diff);
+  
+  auto begin = atv.begin();
+  auto end = atv.end();
+  
+  // 全要素を出力
+  for (auto it = begin; it != end; ++it) {
+    std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* end[color ff0000]
+* begin[link begin.md]
+
+### 出力
+```
+1 1 1 1 
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 20 [mark noimpl]
+- [GCC](/implementation.md#gcc): 15 [mark noimpl]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
+
+## 参照
+- [N4950 26.7.28 Adjacent transform view](https://timsong-cpp.github.io/cppwp/n4950/range.adjacent.transform)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- adjacent_transform_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_transform_view/op_constructor.html"/>
      <id>03cf02bed041cce71b018d21e9ae2320ac30c20c:reference/ranges/adjacent_transform_view/op_constructor.md</id>
      <updated>2025-06-04T11:59:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_transform_view/op_constructor.md b/reference/ranges/adjacent_transform_view/op_constructor.md
new file mode 100644
index 000000000..a3c26db74
--- /dev/null
+++ b/reference/ranges/adjacent_transform_view/op_constructor.md
@@ -0,0 +1,68 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* adjacent_transform_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+adjacent_transform_view() = default;     // (1) C++23
+
+constexpr explicit
+adjacent_transform_view(V base, F fun);  // (2) C++23
+```
+
+## 概要
+
+- (1) : デフォルトコンストラクタ
+- (2) : 元となるRangeと変換関数を受け取るコンストラクタ
+
+## 効果
+
+- (1) : `fun_`と`inner_`をデフォルト構築する
+- (2) : `fun_`を`std::move(fun)`で初期化し、`inner_`を`std::move(base)`で初期化する
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  // (1) デフォルトコンストラクタ
+  std::ranges::adjacent_transform_view&amp;lt;
+    std::ranges::empty_view&amp;lt;int&amp;gt;,
+    decltype([](int, int) { return 0; }),
+    2
+  &amp;gt; atv1;
+  
+  // (2) 元となるRangeと変換関数を受け取るコンストラクタ
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  auto diff = [](int x, int y) { return y - x; };
+  std::ranges::adjacent_transform_view&amp;lt;std::views::all_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;amp;&amp;gt;, decltype(diff), 2&amp;gt; atv2(v, diff);
+  
+  for (int d : atv2) {
+    std::cout &amp;lt;&amp;lt; d &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::ranges::adjacent_transform_view[color ff0000]
+* std::ranges::empty_view[link ../empty_view.md]
+
+### 出力
+```
+1 1 1 1 
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 20 [mark noimpl]
+- [GCC](/implementation.md#gcc): 15 [mark noimpl]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
+
+## 参照
+- [N4950 26.7.28 Adjacent transform view](https://timsong-cpp.github.io/cppwp/n4950/range.adjacent.transform)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- adjacent_transform_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_transform_view/op_deduction_guide.html"/>
      <id>03cf02bed041cce71b018d21e9ae2320ac30c20c:reference/ranges/adjacent_transform_view/op_deduction_guide.md</id>
      <updated>2025-06-04T11:59:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_transform_view/op_deduction_guide.md b/reference/ranges/adjacent_transform_view/op_deduction_guide.md
new file mode 100644
index 000000000..d5fd8d477
--- /dev/null
+++ b/reference/ranges/adjacent_transform_view/op_deduction_guide.md
@@ -0,0 +1,59 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* adjacent_transform_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class R, class F&amp;gt;
+  adjacent_transform_view(R&amp;amp;&amp;amp;, F) -&amp;gt;
+    adjacent_transform_view&amp;lt;views::all_t&amp;lt;R&amp;gt;, decay_t&amp;lt;F&amp;gt;, 2&amp;gt;;
+}
+```
+
+## 概要
+`adjacent_transform_view`クラステンプレートの型推論補助。
+
+## 備考
+
+この推論補助は、第3テンプレート引数`N`のデフォルト値として`2`を使用する。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;type_traits&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  auto diff = [](int x, int y) { return y - x; };
+  
+  // adjacent_transform_viewの型を明示的に指定する必要がない（Nはデフォルトで2）
+  std::ranges::adjacent_transform_view atv{v, diff};
+  
+  // 推論された型を確認
+  static_assert(std::same_as&amp;lt;
+    decltype(atv),
+    std::ranges::adjacent_transform_view&amp;lt;
+      std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;,
+      decltype(diff),
+      2
+    &amp;gt;
+  &amp;gt;);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 20 [mark noimpl]
+- [GCC](/implementation.md#gcc): 15 [mark noimpl]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- adjacent_transform_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_transform_view/size.html"/>
      <id>03cf02bed041cce71b018d21e9ae2320ac30c20c:reference/ranges/adjacent_transform_view/size.md</id>
      <updated>2025-06-04T11:59:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_transform_view/size.md b/reference/ranges/adjacent_transform_view/size.md
new file mode 100644
index 000000000..b9ac49e06
--- /dev/null
+++ b/reference/ranges/adjacent_transform_view/size.md
@@ -0,0 +1,73 @@
+# size
+* ranges[meta header]
+* std::ranges[meta namespace]
+* adjacent_transform_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto size()
+  requires sized_range&amp;lt;InnerView&amp;gt;;       // (1) C++23
+
+constexpr auto size() const
+  requires sized_range&amp;lt;const InnerView&amp;gt;; // (2) C++23
+```
+* sized_range[link ../sized_range.md]
+
+## 概要
+
+要素数を取得する。
+
+## 効果
+
+- (1) : `return inner_.size();`
+- (2) : `return inner_.size();`
+
+ここで、`InnerView`は説明専用の[`adjacent_view`](../adjacent_view.md)`&amp;lt;V, N&amp;gt;`である。
+
+## 備考
+
+`adjacent_transform_view`のサイズは、内部で保持する`adjacent_view`のサイズと同じ。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  
+  auto diff = [](int x, int y) { return y - x; };
+  std::ranges::adjacent_transform_view&amp;lt;std::views::all_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;amp;&amp;gt;, decltype(diff), 2&amp;gt; atv(v, diff);
+  
+  // サイズは元のサイズ(5) - (N(2) - 1) = 4
+  std::cout &amp;lt;&amp;lt; &amp;#34;size: &amp;#34; &amp;lt;&amp;lt; atv.size() &amp;lt;&amp;lt; std::endl;
+  
+  // const版も動作する
+  const auto&amp;amp; catv = atv;
+  std::cout &amp;lt;&amp;lt; &amp;#34;const size: &amp;#34; &amp;lt;&amp;lt; catv.size() &amp;lt;&amp;lt; std::endl;
+}
+```
+* size[color ff0000]
+* std::ranges::adjacent_transform_view[link ../adjacent_transform_view.md]
+* std::views::all_t[link ../all.md]
+
+### 出力
+```
+size: 4
+const size: 4
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1 [mark verified]
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+- [N4950 26.7.28 Adjacent transform view](https://timsong-cpp.github.io/cppwp/n4950/range.adjacent.transform)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>as_awaitable -- execution: 影響箇所へP3396R1参照追記 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/as_awaitable.html"/>
      <id>30c85314c8ce33811bd787a30fbb96a001c8931e:reference/execution/execution/as_awaitable.md</id>
      <updated>2025-06-04T00:06:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/as_awaitable.md b/reference/execution/execution/as_awaitable.md
index fa406534a..9b758ed05 100644
--- a/reference/execution/execution/as_awaitable.md
+++ b/reference/execution/execution/as_awaitable.md
@@ -218,3 +218,4 @@ value-type await_resume();
 
 ## 参照
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3396R1 std::execution wording fixes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3396r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic-operation -- execution: 影響箇所へP3396R1参照追記 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/basic-operation.html"/>
      <id>30c85314c8ce33811bd787a30fbb96a001c8931e:reference/execution/execution/basic-operation.md</id>
      <updated>2025-06-04T00:06:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/basic-operation.md b/reference/execution/execution/basic-operation.md
index d6b41da85..ff9838484 100644
--- a/reference/execution/execution/basic-operation.md
+++ b/reference/execution/execution/basic-operation.md
@@ -151,3 +151,4 @@ using indices-for = remove_reference_t&amp;lt;Sndr&amp;gt;::indices-for;  // exposition only
 
 ## 参照
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3396R1 std::execution wording fixes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3396r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>connect -- execution: 影響箇所へP3396R1参照追記 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/connect.html"/>
      <id>30c85314c8ce33811bd787a30fbb96a001c8931e:reference/execution/execution/connect.md</id>
      <updated>2025-06-04T00:06:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/connect.md b/reference/execution/execution/connect.md
index 346172278..1ca3d497b 100644
--- a/reference/execution/execution/connect.md
+++ b/reference/execution/execution/connect.md
@@ -125,7 +125,7 @@ completion_signatures&amp;lt;
 * set_stopped_t[link set_stopped.md]
 * exception_ptr[link /reference/exception/exception_ptr.md]
 
-説明用の関数テンプレート`suspend-complete`とコルーチン`suspend-awaitable`を下記の通り定義する。
+説明用の関数テンプレート`suspend-complete`とコルーチン`connect-awaitable`を下記の通り定義する。
 
 ```cpp
 namespace std::execution {
@@ -237,3 +237,4 @@ int main()
 
 ## 参照
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3396R1 std::execution wording fixes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3396r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>let_value -- execution: 影響箇所へP3396R1参照追記 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/let_value.html"/>
      <id>30c85314c8ce33811bd787a30fbb96a001c8931e:reference/execution/execution/let_value.md</id>
      <updated>2025-06-04T00:06:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/let_value.md b/reference/execution/execution/let_value.md
index effdb9a9d..126b5d1e8 100644
--- a/reference/execution/execution/let_value.md
+++ b/reference/execution/execution/let_value.md
@@ -403,3 +403,4 @@ catch 0
 ## 参照
 - [P2999R3 Sender Algorithm Customization](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2999r3.html)
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3396R1 std::execution wording fixes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3396r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>schedule_from -- execution: 影響箇所へP3396R1参照追記 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/schedule_from.html"/>
      <id>30c85314c8ce33811bd787a30fbb96a001c8931e:reference/execution/execution/schedule_from.md</id>
      <updated>2025-06-04T00:06:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/schedule_from.md b/reference/execution/execution/schedule_from.md
index 43464855e..7ca0c2e01 100644
--- a/reference/execution/execution/schedule_from.md
+++ b/reference/execution/execution/schedule_from.md
@@ -212,3 +212,4 @@ Senderアルゴリズム構築時および[Receiver](receiver.md)接続時に、
 ## 参照
 - [P2999R3 Sender Algorithm Customization](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2999r3.html)
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3396R1 std::execution wording fixes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3396r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>scheduler -- execution: 影響箇所へP3396R1参照追記 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/scheduler.html"/>
      <id>30c85314c8ce33811bd787a30fbb96a001c8931e:reference/execution/execution/scheduler.md</id>
      <updated>2025-06-04T00:06:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/scheduler.md b/reference/execution/execution/scheduler.md
index 0a456b15a..9cb7b25f2 100644
--- a/reference/execution/execution/scheduler.md
+++ b/reference/execution/execution/scheduler.md
@@ -133,3 +133,4 @@ int main()
 
 ## 参照
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3396R1 std::execution wording fixes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3396r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>when_all -- execution: 影響箇所へP3396R1参照追記 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/when_all.html"/>
      <id>30c85314c8ce33811bd787a30fbb96a001c8931e:reference/execution/execution/when_all.md</id>
      <updated>2025-06-04T00:06:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/when_all.md b/reference/execution/execution/when_all.md
index 31cff92e1..b94f58fd7 100644
--- a/reference/execution/execution/when_all.md
+++ b/reference/execution/execution/when_all.md
@@ -482,3 +482,4 @@ error=-2
 ## 参照
 - [P2999R3 Sender Algorithm Customization](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2999r3.html)
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3396R1 std::execution wording fixes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3396r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>write-env -- execution: 影響箇所へP3396R1参照追記 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/write-env.html"/>
      <id>30c85314c8ce33811bd787a30fbb96a001c8931e:reference/execution/execution/write-env.md</id>
      <updated>2025-06-04T00:06:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/write-env.md b/reference/execution/execution/write-env.md
index 8b97ac73c..3bfda3d39 100644
--- a/reference/execution/execution/write-env.md
+++ b/reference/execution/execution/write-env.md
@@ -57,3 +57,4 @@ struct impls-for&amp;lt;write-env-t&amp;gt; : default-impls {
 
 ## 参照
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3396R1 std::execution wording fixes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3396r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
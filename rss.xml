<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-01-03T14:41:03.577585</updated>
  <id>9d313f6e-1cc5-484c-8966-3566937bbaa2</id>

  
    <entry>
      <title>contains -- Added verified version</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/contains.html"/>
      <id>d1539913fd1314fae96720a1f80e966c7c51d387:reference/unordered_set/unordered_set/contains.md</id>
      <updated>2024-12-29T15:16:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/contains.md b/reference/unordered_set/unordered_set/contains.md
index 27b783ab8..b58d45313 100644
--- a/reference/unordered_set/unordered_set/contains.md
+++ b/reference/unordered_set/unordered_set/contains.md
@@ -70,7 +70,7 @@ contain
 - C++20
 
 ### 処理系
-- [Clang](/implementation.md#clang):
+- [Clang](/implementation.md#clang): 14.0.6 [mark verified]
 - [GCC](/implementation.md#gcc): 9.1 [mark verified]
 - [Visual C++](/implementation.md#visual_cpp): 2019 Update 1 [mark verified]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>duration -- Added verified version</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration.html"/>
      <id>b4ff92e9e24dc437c196091eafd940a9245d3112:reference/chrono/duration.md</id>
      <updated>2024-12-29T15:06:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration.md b/reference/chrono/duration.md
index 8e109b71d..386f75d83 100644
--- a/reference/chrono/duration.md
+++ b/reference/chrono/duration.md
@@ -221,6 +221,7 @@ Tue Oct 16 16:25:11 2012
 ### 処理系
 - [GCC](/implementation.md#gcc): 4.7.0 [mark verified]
 - [Visual C++](/implementation.md#visual_cpp): 2012 [mark verified], 2013 [mark verified], 2015 [mark verified]
+- [Clang](/implementation.md#clang): 14.0.6 [mark verified]
 
 ## 参照
 - [P2592R3 Hashing support for `std::chrono` value classes](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2592r3.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数が定数実行できない場合でも適格とする [P2448R2] -- Merge pull request #1359 from akinomyoga/dfn-semantic-elements</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/relaxing_some_constexpr_restrictions.html"/>
      <id>f55514df2a5bee66c33b0181fd13d32103fc8396:lang/cpp23/relaxing_some_constexpr_restrictions.md</id>
      <updated>2024-12-26T22:15:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/relaxing_some_constexpr_restrictions.md b/lang/cpp23/relaxing_some_constexpr_restrictions.md
index 0dc0ed152..cb4d14ba4 100644
--- a/lang/cpp23/relaxing_some_constexpr_restrictions.md
+++ b/lang/cpp23/relaxing_some_constexpr_restrictions.md
@@ -96,7 +96,7 @@ void f(std::optional&amp;lt;T&amp;gt;&amp;amp; opt)
 
 `constexpr`指定された関数が満たすべき条件を緩和する。
 
-- 関数の返り値は`literal`型でなくともよい。
+- 関数の戻り値は`literal`型でなくともよい。
 - 関数の実引数はどれも`literal`型でなくともよい。
 - いかなる実引数が与えられても定数式実行不可能でもよい
 - いかなる`template`実引数が与えられても定数式実行不可能でもよい
@@ -120,4 +120,4 @@ void f(std::optional&amp;lt;T&amp;gt;&amp;amp; opt)
 
 ## 参照
 
-- [P2448R2 - Relaxing some constexpr restrictions](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2448r2.html)
\ No newline at end of file
+- [P2448R2 - Relaxing some constexpr restrictions](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2448r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_future -- Merge pull request #1359 from akinomyoga/dfn-semantic-elements</title>
      <link href="https://cpprefjp.github.io/reference/future/packaged_task/get_future.html"/>
      <id>f55514df2a5bee66c33b0181fd13d32103fc8396:reference/future/packaged_task/get_future.md</id>
      <updated>2024-12-26T22:15:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/future/packaged_task/get_future.md b/reference/future/packaged_task/get_future.md
index 3861b43ce..d5d45da8a 100644
--- a/reference/future/packaged_task/get_future.md
+++ b/reference/future/packaged_task/get_future.md
@@ -18,7 +18,7 @@ future&amp;lt;R&amp;gt; get_future();
 `*this`と同じ共有状態を持つ[`future`](../future.md)`&amp;lt;R&amp;gt;`オブジェクトを返す
 
 
-## 同期
+## 同期操作
 この関数の呼び出しでは、以下の呼び出しとのデータ競合は発生しない (C++20)：
 
 - [`operator()`](op_call.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_future -- Merge pull request #1359 from akinomyoga/dfn-semantic-elements</title>
      <link href="https://cpprefjp.github.io/reference/future/promise/get_future.html"/>
      <id>f55514df2a5bee66c33b0181fd13d32103fc8396:reference/future/promise/get_future.md</id>
      <updated>2024-12-26T22:15:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/future/promise/get_future.md b/reference/future/promise/get_future.md
index dcfd6f9a9..4eee4e297 100644
--- a/reference/future/promise/get_future.md
+++ b/reference/future/promise/get_future.md
@@ -18,7 +18,7 @@ future&amp;lt;R&amp;gt; get_future();
 `*this`と同じ共有状態を持つ[`future`](../future.md)`&amp;lt;R&amp;gt;`オブジェクトを返す
 
 
-## 同期
+## 同期操作
 この関数の呼び出しでは、以下の呼び出しとのデータ競合は発生しない (C++20)：
 
 - [`set_value()`](set_value.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>use_count -- Merge pull request #1359 from akinomyoga/dfn-semantic-elements</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/use_count.html"/>
      <id>f55514df2a5bee66c33b0181fd13d32103fc8396:reference/memory/shared_ptr/use_count.md</id>
      <updated>2024-12-26T22:15:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/use_count.md b/reference/memory/shared_ptr/use_count.md
index 2d038fc49..7da71ec8e 100644
--- a/reference/memory/shared_ptr/use_count.md
+++ b/reference/memory/shared_ptr/use_count.md
@@ -19,7 +19,7 @@ long use_count() const noexcept;
 `0`が返る場合、`*this`は空の状態となる。
 
 
-## 同期
+## 同期操作
 しない
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emit -- Merge pull request #1359 from akinomyoga/dfn-semantic-elements</title>
      <link href="https://cpprefjp.github.io/reference/syncstream/basic_syncbuf/emit.html"/>
      <id>f55514df2a5bee66c33b0181fd13d32103fc8396:reference/syncstream/basic_syncbuf/emit.md</id>
      <updated>2024-12-26T22:15:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/syncstream/basic_syncbuf/emit.md b/reference/syncstream/basic_syncbuf/emit.md
index 602a83711..9e828bd67 100644
--- a/reference/syncstream/basic_syncbuf/emit.md
+++ b/reference/syncstream/basic_syncbuf/emit.md
@@ -31,7 +31,7 @@ bool emit();
 成功すると、書き込まれた文字データは空になる。
 
 
-## 同期
+## 同期操作
 同じストリームバッファオブジェクトに文字を転送するすべての`emit()`呼び出しは、「happens before」関係と一致する全順序で実行されるように見える。各`emit()`呼び出しは、その全順序で後続の`emit()`呼び出しと同期する。実際には、これは下記の備考にあることを意味する。
 
 注：ここでは、happens before 関係は全順序関係になっていると考えられる。また、modification order と矛盾しないとも考えられる。下記の参照を参照のこと。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>join -- Merge pull request #1359 from akinomyoga/dfn-semantic-elements</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/join.html"/>
      <id>f55514df2a5bee66c33b0181fd13d32103fc8396:reference/thread/jthread/join.md</id>
      <updated>2024-12-26T22:15:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/join.md b/reference/thread/jthread/join.md
index c27b500a3..560271225 100644
--- a/reference/thread/jthread/join.md
+++ b/reference/thread/jthread/join.md
@@ -21,7 +21,7 @@ void join();
 `this`に関連付けれられたスレッドが完了するまで、この関数を呼び出したスレッドをブロックする。
 
 
-## 同期
+## 同期操作
 関連付けられたスレッドの完了は、`join()`メンバ関数の正常リターンと **同期する** 。
 
 つまり、「`this`に関連付けられたスレッドT1上で行われる全処理の完了」は、
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1359 from akinomyoga/dfn-semantic-elements</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/op_constructor.html"/>
      <id>f55514df2a5bee66c33b0181fd13d32103fc8396:reference/thread/jthread/op_constructor.md</id>
      <updated>2024-12-26T22:15:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/op_constructor.md b/reference/thread/jthread/op_constructor.md
index f8f6b19ef..1c7dc5aff 100644
--- a/reference/thread/jthread/op_constructor.md
+++ b/reference/thread/jthread/op_constructor.md
@@ -62,13 +62,13 @@ jthread(jthread&amp;amp;&amp;amp;) noexcept;             // (4) C++20
     - この呼び出しでの戻り値は無視される。この関数呼び出しが例外を送出する場合、呼び出し元スレッドで[`std::terminate`](/reference/exception/terminate.md)が呼び出される
 
 
-## 同期
+## 同期操作
 - (2) : コンストラクタ呼び出しの完了は、`f`のコピーの呼び出し開始と同期する
     新しいスレッドを生成し、[`INVOKE`](/reference/concepts/Invoke.md)`(DECAY_COPY(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f)), DECAY_COPY(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args))...)`を実行する。ただし`DECAY_COPY`は同コンストラクタを呼び出したスレッド上にて評価される。また`f`のコピーの戻り値は無視される。
     - `DECAY_COPY(x)`は `template &amp;lt;class T&amp;gt; typename std::decay&amp;lt;T&amp;gt;::type decay_copy(T&amp;amp;&amp;amp; v) { return` [`std::forward`](/reference/utility/forward.md)`&amp;lt;T&amp;gt;(v); }` と定義される。おおよそ、`x`が配列型なら先頭要素へのポインタ、`x`が関数型ならその関数ポインタ、`x`がコピーコンストラクト可能な型なら`x`からコピーされたオブジェクト、`x`がムーブコンストラクト可能な型なら`x`からムーブされたオブジェクトとなる。
 
 
-## 同期
+## 同期操作
 - (2) : 同コンストラクタの呼び出し完了は、fのコピーの呼び出し開始と**同期する**。つまり、「コンストラクタ呼び出し側スレッドT0でのコンストラクタ呼び出し完了」は、「新しいスレッド`T1`上での`f`のコピーの呼び出し開始」よりも**前に発生する**。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sleep_for -- Merge pull request #1359 from akinomyoga/dfn-semantic-elements</title>
      <link href="https://cpprefjp.github.io/reference/thread/this_thread/sleep_for.html"/>
      <id>f55514df2a5bee66c33b0181fd13d32103fc8396:reference/thread/this_thread/sleep_for.md</id>
      <updated>2024-12-26T22:15:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/this_thread/sleep_for.md b/reference/thread/this_thread/sleep_for.md
index efa54dac7..b6df0ab1f 100644
--- a/reference/thread/this_thread/sleep_for.md
+++ b/reference/thread/this_thread/sleep_for.md
@@ -23,7 +23,7 @@ namespace this_thread {
 指定した相対時間 **以上** の時間が経過すると、現スレッドのブロックが解除されて後続処理の実行が開始される。なお、タイマーの精度は処理系依存。
 
 
-## 同期
+## 同期操作
 特に他操作と同期しない。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sleep_until -- Merge pull request #1359 from akinomyoga/dfn-semantic-elements</title>
      <link href="https://cpprefjp.github.io/reference/thread/this_thread/sleep_until.html"/>
      <id>f55514df2a5bee66c33b0181fd13d32103fc8396:reference/thread/this_thread/sleep_until.md</id>
      <updated>2024-12-26T22:15:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/this_thread/sleep_until.md b/reference/thread/this_thread/sleep_until.md
index e5164a7d4..a68bba072 100644
--- a/reference/thread/this_thread/sleep_until.md
+++ b/reference/thread/this_thread/sleep_until.md
@@ -26,7 +26,7 @@ namespace this_thread {
 引数 `abs_time`で指定した絶対時間を経過するまで現在のスレッド、すなわちこの関数を呼び出したスレッド自身をブロックする。指定した絶対時間 **以上** の時刻になると、現スレッドのブロックが解除されて後続処理の実行が開始される。なお、タイマーの精度は処理系依存。
 
 
-## 同期
+## 同期操作
 特に他操作と同期しない。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>yield -- Merge pull request #1359 from akinomyoga/dfn-semantic-elements</title>
      <link href="https://cpprefjp.github.io/reference/thread/this_thread/yield.html"/>
      <id>f55514df2a5bee66c33b0181fd13d32103fc8396:reference/thread/this_thread/yield.md</id>
      <updated>2024-12-26T22:15:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/this_thread/yield.md b/reference/thread/this_thread/yield.md
index 5411308db..76c7e836b 100644
--- a/reference/thread/this_thread/yield.md
+++ b/reference/thread/this_thread/yield.md
@@ -19,7 +19,7 @@ namespace this_thread {
 処理系に対して、再スケジューリングを行う機会を与える。たとえばオペレーティングシステムのスケジューラに対して、現スレッドに割り当てられたタイムスライスの破棄を指示し、他に実行可能なスレッドがあればそのスレッドに実行機会を与える。
 
 
-## 同期
+## 同期操作
 特に他操作と同期しない。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>join -- Merge pull request #1359 from akinomyoga/dfn-semantic-elements</title>
      <link href="https://cpprefjp.github.io/reference/thread/thread/join.html"/>
      <id>f55514df2a5bee66c33b0181fd13d32103fc8396:reference/thread/thread/join.md</id>
      <updated>2024-12-26T22:15:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/thread/join.md b/reference/thread/thread/join.md
index a04a16e41..9f8497d18 100644
--- a/reference/thread/thread/join.md
+++ b/reference/thread/thread/join.md
@@ -21,7 +21,7 @@ void join();
 `this`に関連付けれられたスレッドが完了するまで、この関数を呼び出したスレッドをブロックする。
 
 
-## 同期
+## 同期操作
 関連付けられたスレッドの完了は、`join()`メンバ関数の正常リターンと **同期する** 。
 
 つまり、「`this`に関連付けられたスレッドT1上で行われる全処理の完了」は、
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1359 from akinomyoga/dfn-semantic-elements</title>
      <link href="https://cpprefjp.github.io/reference/thread/thread/op_constructor.html"/>
      <id>f55514df2a5bee66c33b0181fd13d32103fc8396:reference/thread/thread/op_constructor.md</id>
      <updated>2024-12-26T22:15:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/thread/op_constructor.md b/reference/thread/thread/op_constructor.md
index d4ca42201..56b864510 100644
--- a/reference/thread/thread/op_constructor.md
+++ b/reference/thread/thread/op_constructor.md
@@ -35,7 +35,7 @@ thread(thread&amp;amp;&amp;amp;) noexcept;              // (4)
     もし[`INVOKE`](/reference/concepts/Invoke.md)`(DECAY_COPY(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f)), DECAY_COPY(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args))...)`呼び出しからcatchされない例外が送出された場合、[`std::terminate()`](/reference/exception/terminate.md)が呼び出されてプログラムは異常終了する。
 
 
-## 同期
+## 同期操作
 - (2) : 同コンストラクタの呼び出し完了は、fのコピーの呼び出し開始と**同期する**。つまり、「コンストラクタ呼び出し側スレッドT0でのコンストラクタ呼び出し完了」は、「新しいスレッド`T1`上での`f`のコピーの呼び出し開始」よりも**前に発生する**。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- Merge pull request #1359 from akinomyoga/dfn-semantic-elements</title>
      <link href="https://cpprefjp.github.io/start_editing/function_template_page.html"/>
      <id>f55514df2a5bee66c33b0181fd13d32103fc8396:start_editing/function_template_page.md</id>
      <updated>2024-12-26T22:15:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/function_template_page.md b/start_editing/function_template_page.md
index b06bb2421..8f9836f90 100644
--- a/start_editing/function_template_page.md
+++ b/start_editing/function_template_page.md
@@ -69,7 +69,11 @@ void definition(); // 関数・変数・定数の宣言を記述します。
 
 
 ## 効果
-(ここには、関数の内部で行われる効果:effect を記述します。戻り値しかないような関数の場合には、項目を削除してください。)
+(ここには、関数の内部で発生する効果を記述します。戻り値しかないような関数の場合には、項目を削除してください。)
+
+
+## 同期操作
+(ここには、関数の同期操作について記述します。規格の *Synchronization* 要素に対応します。対応要素がない場合は、項目を削除してください。)
 
 
 ## 戻り値
@@ -85,7 +89,7 @@ void definition(); // 関数・変数・定数の宣言を記述します。
 
 
 ## 例外
-(ここには、例外送出の有無、例外送出の条件と送出される例外、例外を抄出しない条件、例外送出後の変数・オブジェクトの状態 (例外安全性) などを記述します。`noexcept`なら「投げない」を記述します。規格上とくに明記がなければ、項目を削除してください。)
+(ここには、例外送出の有無、例外送出の条件と送出される例外、例外を送出しない条件、例外送出後の変数・オブジェクトの状態 (例外安全性) などを記述します。`noexcept`なら「投げない」を記述します。規格上とくに明記がなければ、項目を削除してください。)
 
 
 ## トリビアルに定義される条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-05-26T10:10:26.885018</updated>
  <id>f700a75a-de26-408b-b6ac-25cc2fbf584b</id>

  
    <entry>
      <title>format -- chrono/format : 勘違いしていたが追加宣言はないので説明見直し</title>
      <link href="https://cpprefjp.github.io/reference/chrono/format.html"/>
      <id>a53eb0a6f0bb1326f642cc30936550471589a62f:reference/chrono/format.md</id>
      <updated>2020-05-26T19:06:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/format.md b/reference/chrono/format.md
index cf40f5b87..e00ef09fd 100644
--- a/reference/chrono/format.md
+++ b/reference/chrono/format.md
@@ -6,17 +6,15 @@
 
 ```cpp
 namespace std {
-  template &amp;lt;class FormatContext&amp;gt;
-  typename FormatContext::iterator
-    format(const chrono::zoned_time&amp;lt;Duration, TimeZonePtr&amp;gt;&amp;amp; tp, FormatContext&amp;amp; ctx); // (1)
+  // 追加宣言なし
 }
 ```
-* zoned_time[link zoned_time.md]
 
 ## 概要
 chronoライブラリのクラスオブジェクトに対する文字列フォーマット。
 
-ここでは宣言として、[`zoned_time`](zoned_time.md)オブジェクトに対するオーバーロードのみを記載するが、[`std::formatter`](/reference/format/formatter.md)クラスがchronoライブラリの各型に対して特殊化されるため、多くのchronoライブラリオブジェクトを文字列フォーマットできる。
+ここでは宣言はとくにないが、[`std::format()`](/reference/format/format.md)に対してchronoライブラリの各クラスオブジェクトを出力できるよう[`std::formatter`](/reference/format/formatter.md)クラスが各クラスで特殊化されている。
+
 
 ### chronoライブラリでのフォーマット指定子
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cmath -- Merge pull request #762 from Jumpaku/patch-1</title>
      <link href="https://cpprefjp.github.io/reference/cmath.html"/>
      <id>c84d4e2c2b563c6a82dea5cfde3590a5717a0bbf:reference/cmath.md</id>
      <updated>2020-05-25T17:09:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath.md b/reference/cmath.md
index 83ce21597..9bfc4a6cd 100644
--- a/reference/cmath.md
+++ b/reference/cmath.md
@@ -117,7 +117,7 @@ C++03 までの場合、[`errno`](cerrno/errno.md) でしか通知されない
 - [`errno`](cerrno/errno.md) によってエラーが通知される場合、[`EDOM`](cerrno.md)（定義域エラー、Error DOMain）が設定される。  
 - 浮動小数点例外によってエラーが通知される場合、[`FE_INVALID`](cfenv/fe_invalid.md)（無効演算浮動小数点例外）が設定される。  
 
-定義域エラーが発生した場合、関数の戻り値は処理系定義であるが、戻り値の型が quiet NaN（quiet Not a Number：静かな非数）を表現可能（[`std::numeric_limits`](limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`has_quiet_NaN`](limits/numeric_limits/has_quiet_nan.md)`()` が真）の場合、一般的には quiet NaN が返る。
+定義域エラーが発生した場合、関数の戻り値は処理系定義であるが、戻り値の型が quiet NaN（quiet Not a Number：静かな非数）を表現可能（[`std::numeric_limits`](limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`has_quiet_NaN`](limits/numeric_limits/has_quiet_nan.md) が真）の場合、一般的には quiet NaN が返る。
 
 ### 極エラー（pole error）
 引数の値が有限値である場合に、関数の当該値に対する数学的な極限値が無限大であることを示すエラー。（例：[`log`](cmath/log.md)`(0.0)` や、[`atanh`](cmath/atanh.md)`(1.0)` 等）  
@@ -131,7 +131,7 @@ C++03 までの場合、[`errno`](cerrno/errno.md) でしか通知されない
 - 浮動小数点例外によってエラーが通知される場合、[`FE_DIVBYZERO`](cfenv/fe_divbyzero.md)（ゼロ除算浮動小数点例外）が設定される（注：「ゼロ除算浮動小数点例外」は誤記では無い）。
 
 極エラーが発生した場合、関数の戻り値は処理系定義であるが、戻り値の型が浮動小数点数の場合、一般的には [`HUGE_VAL`](cmath/huge_val.md)（`double`）、[`HUGE_VALF`](cmath/huge_valf.md)（`float` 、C++11 以降のみ）、[`HUGE_VALL`](cmath/huge_vall.md)（`long double`、C++11 以降のみ）に正しい符号を付加した値が返る。
-また、戻り値の型が無限大を表現可能（[`std::numeric_limits`](limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`has_infinity`](limits/numeric_limits/has_infinity.md)`()` が真）の場合、一般的には無限大（[`std::numeric_limits`](limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`infinity`](limits/numeric_limits/infinity.md)`()`）が返る。
+また、戻り値の型が無限大を表現可能（[`std::numeric_limits`](limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`has_infinity`](limits/numeric_limits/has_infinity.md) が真）の場合、一般的には無限大（[`std::numeric_limits`](limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`infinity`](limits/numeric_limits/infinity.md)`()`）が返る。
 なお、マクロ [`INFINITY`](cmath/infinity.md) も、定義されている場合には無限大を表すものではあるが、`float` 型であることに注意。
 
 ### オーバーフローエラー（overflow error）
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cmath -- fix: cmathのページにおけるエラーの種類に関する項目の説明の修正</title>
      <link href="https://cpprefjp.github.io/reference/cmath.html"/>
      <id>1895aa0cf13fdcd830b7c158fc1500f67cd83e3d:reference/cmath.md</id>
      <updated>2020-05-25T16:35:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath.md b/reference/cmath.md
index 83ce21597..9bfc4a6cd 100644
--- a/reference/cmath.md
+++ b/reference/cmath.md
@@ -117,7 +117,7 @@ C++03 までの場合、[`errno`](cerrno/errno.md) でしか通知されない
 - [`errno`](cerrno/errno.md) によってエラーが通知される場合、[`EDOM`](cerrno.md)（定義域エラー、Error DOMain）が設定される。  
 - 浮動小数点例外によってエラーが通知される場合、[`FE_INVALID`](cfenv/fe_invalid.md)（無効演算浮動小数点例外）が設定される。  
 
-定義域エラーが発生した場合、関数の戻り値は処理系定義であるが、戻り値の型が quiet NaN（quiet Not a Number：静かな非数）を表現可能（[`std::numeric_limits`](limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`has_quiet_NaN`](limits/numeric_limits/has_quiet_nan.md)`()` が真）の場合、一般的には quiet NaN が返る。
+定義域エラーが発生した場合、関数の戻り値は処理系定義であるが、戻り値の型が quiet NaN（quiet Not a Number：静かな非数）を表現可能（[`std::numeric_limits`](limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`has_quiet_NaN`](limits/numeric_limits/has_quiet_nan.md) が真）の場合、一般的には quiet NaN が返る。
 
 ### 極エラー（pole error）
 引数の値が有限値である場合に、関数の当該値に対する数学的な極限値が無限大であることを示すエラー。（例：[`log`](cmath/log.md)`(0.0)` や、[`atanh`](cmath/atanh.md)`(1.0)` 等）  
@@ -131,7 +131,7 @@ C++03 までの場合、[`errno`](cerrno/errno.md) でしか通知されない
 - 浮動小数点例外によってエラーが通知される場合、[`FE_DIVBYZERO`](cfenv/fe_divbyzero.md)（ゼロ除算浮動小数点例外）が設定される（注：「ゼロ除算浮動小数点例外」は誤記では無い）。
 
 極エラーが発生した場合、関数の戻り値は処理系定義であるが、戻り値の型が浮動小数点数の場合、一般的には [`HUGE_VAL`](cmath/huge_val.md)（`double`）、[`HUGE_VALF`](cmath/huge_valf.md)（`float` 、C++11 以降のみ）、[`HUGE_VALL`](cmath/huge_vall.md)（`long double`、C++11 以降のみ）に正しい符号を付加した値が返る。
-また、戻り値の型が無限大を表現可能（[`std::numeric_limits`](limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`has_infinity`](limits/numeric_limits/has_infinity.md)`()` が真）の場合、一般的には無限大（[`std::numeric_limits`](limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`infinity`](limits/numeric_limits/infinity.md)`()`）が返る。
+また、戻り値の型が無限大を表現可能（[`std::numeric_limits`](limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`has_infinity`](limits/numeric_limits/has_infinity.md) が真）の場合、一般的には無限大（[`std::numeric_limits`](limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`infinity`](limits/numeric_limits/infinity.md)`()`）が返る。
 なお、マクロ [`INFINITY`](cmath/infinity.md) も、定義されている場合には無限大を表すものではあるが、`float` 型であることに注意。
 
 ### オーバーフローエラー（overflow error）
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Jumpaku</name>
        <email>Jumpaku@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>enable_shared_from_this -- Merge pull request #761 from ysk24ok/fix_typo_in_enable_shared_from_this</title>
      <link href="https://cpprefjp.github.io/reference/memory/enable_shared_from_this.html"/>
      <id>2be092b30694710082db7d624fa8be12b8404275:reference/memory/enable_shared_from_this.md</id>
      <updated>2020-05-22T11:08:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/enable_shared_from_this.md b/reference/memory/enable_shared_from_this.md
index 587119a1f..bec49a50c 100644
--- a/reference/memory/enable_shared_from_this.md
+++ b/reference/memory/enable_shared_from_this.md
@@ -12,7 +12,7 @@ namespace std {
 ```
 
 ## 概要
-`enable_shared_from_this`は、[`shared_ptr`](/reference/memory/shared_ptr.md)で関しているオブジェクトの`this`ポインタを、[`shared_ptr`](/reference/memory/shared_ptr.md)として扱うことを可能にするためのクラスである。
+`enable_shared_from_this`は、[`shared_ptr`](/reference/memory/shared_ptr.md)で管理しているオブジェクトの`this`ポインタを、[`shared_ptr`](/reference/memory/shared_ptr.md)として扱うことを可能にするためのクラスである。
 
 `this`ポインタを単純に`shared_ptr&amp;lt;T&amp;gt;(this)`としてしまうと、参照カウントが増えず、`delete`が2重に呼ばれてしまいバグを引き起こすことになるため、そうならないようにこのクラスを使用して`this`を扱う。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>enable_shared_from_this -- Fix typo in reference/memory/enable_shared_from_this.md</title>
      <link href="https://cpprefjp.github.io/reference/memory/enable_shared_from_this.html"/>
      <id>168f3d2fe822735949e4e30fabe05d354d88fd4a:reference/memory/enable_shared_from_this.md</id>
      <updated>2020-05-22T09:39:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/enable_shared_from_this.md b/reference/memory/enable_shared_from_this.md
index 587119a1f..bec49a50c 100644
--- a/reference/memory/enable_shared_from_this.md
+++ b/reference/memory/enable_shared_from_this.md
@@ -12,7 +12,7 @@ namespace std {
 ```
 
 ## 概要
-`enable_shared_from_this`は、[`shared_ptr`](/reference/memory/shared_ptr.md)で関しているオブジェクトの`this`ポインタを、[`shared_ptr`](/reference/memory/shared_ptr.md)として扱うことを可能にするためのクラスである。
+`enable_shared_from_this`は、[`shared_ptr`](/reference/memory/shared_ptr.md)で管理しているオブジェクトの`this`ポインタを、[`shared_ptr`](/reference/memory/shared_ptr.md)として扱うことを可能にするためのクラスである。
 
 `this`ポインタを単純に`shared_ptr&amp;lt;T&amp;gt;(this)`としてしまうと、参照カウントが増えず、`delete`が2重に呼ばれてしまいバグを引き起こすことになるため、そうならないようにこのクラスを使用して`this`を扱う。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yusuke NISHIOKA</name>
        <email>yusuke.nishioka@retrieva.jp</email>
      </author>
    </entry>
  
</feed>
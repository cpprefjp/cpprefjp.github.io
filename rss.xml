<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-09-17T06:48:08.390697</updated>
  <id>e88f0eaa-e5a4-4f91-a055-e71421c3fd72</id>

  
    <entry>
      <title>rethrow_nested -- nested_exception/rethrow_nested: 表示崩れ修正</title>
      <link href="https://cpprefjp.github.io/reference/exception/nested_exception/rethrow_nested.html"/>
      <id>d42f708d8c6e1591fcd0ee915cc96b520a2468d8:reference/exception/nested_exception/rethrow_nested.md</id>
      <updated>2021-09-17T15:42:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/exception/nested_exception/rethrow_nested.md b/reference/exception/nested_exception/rethrow_nested.md
index cd6750282..b39535d53 100644
--- a/reference/exception/nested_exception/rethrow_nested.md
+++ b/reference/exception/nested_exception/rethrow_nested.md
@@ -14,7 +14,7 @@
 
 
 ## 効果
-[`nested_ptr()`](/reference/exception/nested_exception/nested_ptr.md)メンバ関数`がヌルポインタを返した場合、`std::terminate()を呼び出してプログラムを終了させる。そうでなければ、[`nested_ptr()`](/reference/exception/nested_exception/nested_ptr.md)によって返された例外を送出する。
+[`nested_ptr()`](nested_ptr.md)メンバ関数がヌルポインタを返した場合、[`std::terminate()`](/reference/exception/terminate.md)を呼び出してプログラムを終了させる。そうでなければ、[`nested_ptr()`](nested_ptr.md)によって返された例外を送出する。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>exception -- exception : &lt;stdexcept&gt;への参照追加</title>
      <link href="https://cpprefjp.github.io/reference/exception/exception.html"/>
      <id>05a7ba5cadd3e0cc113bbadc250e470fed58161e:reference/exception/exception.md</id>
      <updated>2021-09-16T15:22:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/exception/exception.md b/reference/exception/exception.md
index 7b379320e..23e1eda37 100644
--- a/reference/exception/exception.md
+++ b/reference/exception/exception.md
@@ -55,3 +55,4 @@ error!
 
 ## 参照
 
+- [`&amp;lt;stdexcept&amp;gt;`](/reference/stdexcept.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- tuple/op_less: 戻り値説明のリンク修正(#899)</title>
      <link href="https://cpprefjp.github.io/reference/tuple/tuple/op_less.html"/>
      <id>a401e159c25e6dbc5eacc3c3dc7750166d6a91f9:reference/tuple/tuple/op_less.md</id>
      <updated>2021-09-16T14:27:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple/op_less.md b/reference/tuple/tuple/op_less.md
index 2ae082725..51a23ece9 100644
--- a/reference/tuple/tuple/op_less.md
+++ b/reference/tuple/tuple/op_less.md
@@ -31,13 +31,12 @@ namespace std {
 ```cpp
 (bool)(get&amp;lt;0&amp;gt;(t) &amp;lt; get&amp;lt;0&amp;gt;(u)) || (!(bool)(get&amp;lt;0&amp;gt;(u) &amp;lt; get&amp;lt;0&amp;gt;(t)) &amp;amp;&amp;amp; t_tail &amp;lt; u_tail)
 ```
+* get[link get.md]
 
 ただし、`r_tail`は、ある`tuple`オブジェクト`r`の最初の要素以外の全ての要素を含む`tuple`オブジェクトを表す。
 
 2つの`tuple`オブジェクトの要素数が0である場合は、`false`を返す。
 
-* get[link get.md]
-
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges -- &lt;ranges&gt;説明を修正 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges.html"/>
      <id>84277e22977aae603e8e4ebde20f2de78e5d6359:reference/ranges.md</id>
      <updated>2021-09-14T06:26:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges.md b/reference/ranges.md
index b2b195dc5..9b76869c4 100644
--- a/reference/ranges.md
+++ b/reference/ranges.md
@@ -124,7 +124,7 @@ C++20では関数によるカスタマイゼーションポイントの問題点
 ## 範囲アダプタ
 
 範囲アダプタは、既存の範囲に作用して新たな[`view`](ranges/view.md)を生成するものである。
-その実体は、引数の無いものは変数テンプレート、引数のあるものは関数テンプレートやカスタマイゼーションポイントオブジェクトとなっている。
+その実体はカスタマイゼーションポイントオブジェクトとなっている。
 
 範囲アダプタを範囲に作用させる方法には、関数記法とパイプライン記法の2つがある。
 
@@ -150,7 +150,7 @@ for (auto&amp;amp;&amp;amp; item : r | R) {
 }
 ```
 
-第1引数に[`viewable_range`](ranges/viewable_range.md)を受け取って[`view`](ranges/view.md)を返すカスタマイゼーションポイントオブジェクトを、**範囲アダプタオブジェクト**という。とくに、1引数のものを、**範囲アダプタクロージャオブジェクト**という。
+第1引数に[`viewable_range`](ranges/viewable_range.md)を受け取って[`view`](ranges/view.md)を返すカスタマイゼーションポイントオブジェクトを、**範囲アダプタオブジェクト**という。とくに、1引数のものを**範囲アダプタクロージャオブジェクト**という。
 
 ### all view
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>filter_view -- &lt;ranges&gt;説明を修正 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view.html"/>
      <id>84277e22977aae603e8e4ebde20f2de78e5d6359:reference/ranges/filter_view.md</id>
      <updated>2021-09-14T06:26:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view.md b/reference/ranges/filter_view.md
index 85c632882..3bd83f877 100644
--- a/reference/ranges/filter_view.md
+++ b/reference/ranges/filter_view.md
@@ -20,7 +20,7 @@ namespace std {
 }
 ```
 * input_range[link input_range.md]
-* indirect_unary_predicate[link /reference/concepts/indirect_unary_predicate.md]
+* indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
 * iterator_t[link iterator_t.md]
 * view[link view.md]
 * is_object_v[link /reference/type_traits/is_object.md]
@@ -30,13 +30,12 @@ namespace std {
 - (1): 指定された条件`Pred`を満たす要素だけが残っているような範囲として振る舞う[`view`](view.md)
 - (2): `filter_view`を生成する範囲アダプタオブジェクト
 
-`filter_view`の要素を書き換えてもよいが、書き換えた後の要素が`Pred`を満たさない場合は未定義動作となる。
-
 元の範囲から条件を満たす要素を探す処理は遅延評価される。
 
-初めてメンバ関数[`begin`](filter_view/begin.md.nolink)が呼び出されたときに先頭の要素を決定し、残りはイテレータが進むときに求める。
+- 初めてメンバ関数[`begin`](filter_view/begin.md.nolink)が呼び出されたときに先頭の要素を決定し、残りはイテレータが進むときに求める。
+- [`begin`](filter_view/begin.md.nolink)は償却定数時間で実行できなければならないため、[`begin`](filter_view/begin.md.nolink)の値はキャッシュされる。
 
-[`begin`](filter_view/begin.md.nolink)は償却定数時間で実行できなければならないため、[`begin`](filter_view/begin.md.nolink)の値はキャッシュされる。
+`filter_view`の要素を書き換えてもよいが、書き換えた後の要素が`Pred`を満たさない場合は未定義動作となる。
 
 ### 範囲カテゴリ
 
@@ -46,6 +45,9 @@ namespace std {
 
 ※ `V`に従う
 
+- `Pred`のオブジェクトを所有し、イテレータがそれを参照するため、[`borrowed_range`](borrowed_range.md)ではない
+- 条件を満たす要素を探す処理が必要なため、[`random_access_range`](random_access_range.md)にはならない
+
 ## テンプレートパラメータ制約
 
 - [`input_range`](input_range.md)`&amp;lt;V&amp;gt;`
@@ -89,7 +91,12 @@ int main() {
   using namespace std;
   int a[] = {1, 2, 3, 4, 5};
 
-  for (int i : a | views::filter([](int x){ return x % 2 == 0; })) {
+  for (int&amp;amp; i : a | views::filter([](int x){ return x % 2 == 0; })) {
+    cout &amp;lt;&amp;lt; i;
+    i *= 2; // filterした要素を2倍にする (2倍しても条件を満たすことに注意)
+  }
+  cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  for (int i : a) {
     cout &amp;lt;&amp;lt; i;
   }
 }
@@ -99,6 +106,7 @@ int main() {
 ### 出力
 ```
 24
+14385
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges -- &lt;ranges&gt; filter_viewを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges.html"/>
      <id>2910af5952d7ef2c81a42679288e5ae4684d4e3c:reference/ranges.md</id>
      <updated>2021-09-14T05:14:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges.md b/reference/ranges.md
index b4908527d..b2b195dc5 100644
--- a/reference/ranges.md
+++ b/reference/ranges.md
@@ -150,6 +150,8 @@ for (auto&amp;amp;&amp;amp; item : r | R) {
 }
 ```
 
+第1引数に[`viewable_range`](ranges/viewable_range.md)を受け取って[`view`](ranges/view.md)を返すカスタマイゼーションポイントオブジェクトを、**範囲アダプタオブジェクト**という。とくに、1引数のものを、**範囲アダプタクロージャオブジェクト**という。
+
 ### all view
 
 | 名前                             | 説明                                                                    | 対応バージョン |
@@ -160,10 +162,10 @@ for (auto&amp;amp;&amp;amp; item : r | R) {
 
 ### filter view
 
-| 名前                                          | 説明           | 対応バージョン |
-|-----------------------------------------------|----------------|----------------|
-| [`filter_view`](ranges/filter_view.md.nolink) | 指定した条件を満たす要素だけを集めるビュー (class template)     | C++20          |
-| [`filter`](ranges/filter.md.nolink)           | 指定した条件を満たす要素だけを集めるビューを生成する (customization point object)  | C++20          |
+| 名前                                   | 説明                                                                               | 対応バージョン |
+|----------------------------------------|------------------------------------------------------------------------------------|----------------|
+| [`filter_view`](ranges/filter_view.md) | 指定した条件を満たす要素だけを集めるビュー (class template)                        | C++20          |
+| [`filter`](ranges/filter_view.md)      | 指定した条件を満たす要素だけを集めるビューを生成する (customization point object)  | C++20          |
 
 ### transform view
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>filter_view -- &lt;ranges&gt; filter_viewを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view.html"/>
      <id>2910af5952d7ef2c81a42679288e5ae4684d4e3c:reference/ranges/filter_view.md</id>
      <updated>2021-09-14T05:14:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view.md b/reference/ranges/filter_view.md
new file mode 100644
index 000000000..85c632882
--- /dev/null
+++ b/reference/ranges/filter_view.md
@@ -0,0 +1,116 @@
+# filter_view
+* ranges[meta header]
+* std::ranges[meta namespace]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  namespace ranges {
+    template&amp;lt;input_range V, indirect_unary_predicate&amp;lt;iterator_t&amp;lt;V&amp;gt;&amp;gt; Pred&amp;gt;
+    requires view&amp;lt;V&amp;gt; &amp;amp;&amp;amp; is_object_v&amp;lt;Pred&amp;gt;
+    class filter_view : public view_interface&amp;lt;filter_view&amp;lt;V, Pred&amp;gt;&amp;gt; { …… }; // (1)
+
+    namespace views {
+      inline constexpr /*unspecified*/ filter = /*unspecified*/;     // (2)
+    }
+  }
+
+  namespace views = ranges::views;
+}
+```
+* input_range[link input_range.md]
+* indirect_unary_predicate[link /reference/concepts/indirect_unary_predicate.md]
+* iterator_t[link iterator_t.md]
+* view[link view.md]
+* is_object_v[link /reference/type_traits/is_object.md]
+* view_interface[link view_interface.md]
+
+## 概要
+- (1): 指定された条件`Pred`を満たす要素だけが残っているような範囲として振る舞う[`view`](view.md)
+- (2): `filter_view`を生成する範囲アダプタオブジェクト
+
+`filter_view`の要素を書き換えてもよいが、書き換えた後の要素が`Pred`を満たさない場合は未定義動作となる。
+
+元の範囲から条件を満たす要素を探す処理は遅延評価される。
+
+初めてメンバ関数[`begin`](filter_view/begin.md.nolink)が呼び出されたときに先頭の要素を決定し、残りはイテレータが進むときに求める。
+
+[`begin`](filter_view/begin.md.nolink)は償却定数時間で実行できなければならないため、[`begin`](filter_view/begin.md.nolink)の値はキャッシュされる。
+
+### 範囲カテゴリ
+
+| borrowed | sized | output | input | forward | bidirectional | random_access | contiguous | common | viewable | view |
+|----------|-------|--------|-------|---------|---------------|---------------|------------|--------|----------|------|
+|          |       |        | ※    | ※      | ※            |               |            | ※     | ○       | ○   |
+
+※ `V`に従う
+
+## テンプレートパラメータ制約
+
+- [`input_range`](input_range.md)`&amp;lt;V&amp;gt;`
+- [`view`](view.md)`&amp;lt;V&amp;gt;`
+- [`is_object_v`](/reference/type_traits/is_object.md)`&amp;lt;Pred&amp;gt;`
+- [`indirect_unary_predicate`](/reference/iterator/indirect_unary_predicate.md)`&amp;lt;Pred, `[`iterator_t`](iterator_t.md)`&amp;lt;V&amp;gt;&amp;gt;`
+
+## 効果
+
+- (2): 式`views::filter(E, P)`の効果は`filter_view{E, P}`と等しい
+
+## メンバ関数
+
+| 名前                                             | 説明                             | 対応バージョン |
+|--------------------------------------------------|----------------------------------|----------------|
+| [`(constructor)`](filter_view/op_constructor.md.nolink)  | コンストラクタ                   | C++20          |
+| [`base`](filter_view/base.md.nolink)                     | `V`の参照を取得する              | C++20          |
+| [`pred`](filter_view/pred.md.nolink)                     | 述語を取得する                   | C++20          |
+| [`begin`](filter_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
+| [`end`](filter_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
+
+## 継承しているメンバ関数
+
+| 名前                                         | 説明                             | 対応バージョン |
+|----------------------------------------------|----------------------------------|----------------|
+| [`operator bool`](view_interface/op_bool.md) | 範囲が空でないかどうかを判定する | C++20          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する       | C++20          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する       | C++20          |
+
+## 推論補助
+
+| 名前                                                  | 説明                         | 対応バージョン |
+|-------------------------------------------------------|------------------------------|----------------|
+| [`(deduction_guide)`](filter_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+
+int main() {
+  using namespace std;
+  int a[] = {1, 2, 3, 4, 5};
+
+  for (int i : a | views::filter([](int x){ return x % 2 == 0; })) {
+    cout &amp;lt;&amp;lt; i;
+  }
+}
+```
+* views::filter[color ff0000]
+
+### 出力
+```
+24
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ref_view -- &lt;ranges&gt; filter_viewを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/ref_view.html"/>
      <id>2910af5952d7ef2c81a42679288e5ae4684d4e3c:reference/ranges/ref_view.md</id>
      <updated>2021-09-14T05:14:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/ref_view.md b/reference/ranges/ref_view.md
index 42fb6c013..22d9e222e 100644
--- a/reference/ranges/ref_view.md
+++ b/reference/ranges/ref_view.md
@@ -22,18 +22,18 @@ namespace std {
   namespace views = ranges::views;
 }
 ```
+* range[link range.md]
+* is_object_v[link /reference/type_traits/is_object.md]
 * movable[link /reference/concepts/movable.md]
 * default_initializable[link /reference/concepts/default_initializable.md]
 * viewable_range[link viewable_range.md]
 * view_interface[link view_interface.md]
-* stream-extractable[italic]
+* declval[link /reference/utility/declval.md]
 
 ## 概要
-`ref_view`(1)は、範囲への参照として振る舞う[`view`](view.md)。
-
-カスタマイゼーションポイントオブジェクト`all`(2)で、範囲への参照として振る舞う[`view`](view.md)を生成できる。
-
-`all`の戻り値は`ref_view`とは限らず、元の範囲そのものや[`subrange`](subrange.md)にもなる。戻り値型はエイリアステンプレート`all_t`(3)で取得できる。これらをまとめて&amp;#34;all view&amp;#34;と呼ぶことがある。
+- (1): 範囲への参照として振る舞う[`view`](view.md)
+- (2): 範囲への参照として振る舞う[`view`](view.md)を生成する範囲アダプタクロージャオブジェクト。`all`の戻り値は`ref_view`の他に、元の範囲そのものや[`subrange`](subrange.md)の場合があり、まとめて&amp;#34;all view&amp;#34;と呼ぶことがある
+- (3): `all`の戻り値の型を得るエイリアステンプレート。`all_t`を使えば、`all`の分岐を気にせずに&amp;#34;all view&amp;#34;の型を得ることができる
 
 ### 範囲カテゴリ
 
@@ -55,6 +55,8 @@ namespace std {
     - それ以外のとき、`ref_view{E}`が有効な式であれば、`ref_view{E}`と等しい
     - それ以外のとき、[`subrange`](subrange.md)`{E}`と等しい
 
+引数にした範囲が元々[`view`](view.md)である場合はそのまま使用する。そうでないときは、まず引数を`ref_view`でラップしようとする。それもできないときは、イテレータと番兵を[`subrange`](subrange.md)でラップする。
+
 ## メンバ関数
 
 | 名前                                             | 説明                             | 対応バージョン |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
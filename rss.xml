<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-01-12T14:48:42.413317</updated>
  <id>be971f5e-60da-4093-ae8a-73117eaf2f42</id>

  
    <entry>
      <title>read -- fix invalid name hiding</title>
      <link href="https://cpprefjp.github.io/reference/istream/basic_istream/read.html"/>
      <id>e3233e7dbb6729db10d737119c4a480238d0ae5f:reference/istream/basic_istream/read.md</id>
      <updated>2023-01-12T18:12:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/istream/basic_istream/read.md b/reference/istream/basic_istream/read.md
index 6a87e94e7..829f0e153 100644
--- a/reference/istream/basic_istream/read.md
+++ b/reference/istream/basic_istream/read.md
@@ -59,8 +59,8 @@ Shinjuku
 basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; read(char_type* s, streamsize n) {
   iostate state = goodbit;
   try {
-    sentry s(*this, true);
-    if (s) {
+    const sentry sent(*this, true);
+    if (sent) {
       if (good()) {
         for (streamsize i = 0; i &amp;lt; n; ++i) {
           auto c = rdbuf()-&amp;gt;sbumpc();
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/op_constructor.html"/>
      <id>eb4b7dd0cd8950815bd93ecb18fb56478d3c3879:reference/thread/jthread/op_constructor.md</id>
      <updated>2023-01-12T14:34:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/op_constructor.md b/reference/thread/jthread/op_constructor.md
index 950d05447..d8cb21af3 100644
--- a/reference/thread/jthread/op_constructor.md
+++ b/reference/thread/jthread/op_constructor.md
@@ -84,7 +84,7 @@ jthread(jthread&amp;amp;&amp;amp;) noexcept;             // (4) C++20
     - [`get_stop_source()`](get_stop_source.md)で取得される[`std::stop_source`](/reference/stop_token/stop_source.md)オブジェクトの[`stop_possible()`](/reference/stop_token/stop_source/stop_possible.md)が`true`であること
     - `*this`は新しいスレッドと関連付けられること
 - (4) :
-    - `x.`[`get_id()`](get_id.md) `==` [`get_id()`](get_id)が`true`であること
+    - `x.`[`get_id()`](get_id.md) `==` [`get_id()`](get_id.md)が`true`であること
     - [`get_id()`](get_id.md)がムーブ前の`x.`[`get_id()`](get_id.md)の値であること
     - `x.`[`get_stop_source()`](get_stop_source.md)`.`[`stop_possible()`](/reference/stop_token/stop_source/stop_possible.md)が`false`であること
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cpprefjp - C++日本語リファレンス -- 編集者向け資料をリネームし、「cpprefjpを編集するには」をサイドバーに表示</title>
      <link href="https://cpprefjp.github.io/index.html"/>
      <id>85bebb584efb6141b4026ff231e7630aba3f4f27:index.md</id>
      <updated>2023-01-12T14:24:23+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;cpprefjp - C++日本語リファレンス&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本サイトcpprefjpは、プログラミング言語C++のリファレンスを提供するWebサイトです。&lt;/p&gt;
&lt;p&gt;最新C++バージョンのリファレンスを提供していきます。&lt;/p&gt;
&lt;h2&gt;運営方針&lt;/h2&gt;
&lt;p&gt;本リファレンスサイトは、C++言語の最新のリファレンスを常に提供し続けることを目標にしています。&lt;/p&gt;
&lt;p&gt;各クラス、関数にはそれぞれ1つ以上のサンプルコードを付けていく方針です。&lt;/p&gt;
&lt;p&gt;本サイトでは、他サイトおよび規格書の直接的な翻訳ではなく、編集者の調査と考えに基づいた解説を提供していきます。&lt;/p&gt;
&lt;h2&gt;参加方法&lt;/h2&gt;
&lt;p&gt;本サイトは、多くのユーザの手によって書かれています。&lt;/p&gt;
&lt;p&gt;あなたがこの cpprefjp プロジェクトに参加したいのであれば、私達はそれをとても歓迎します。&lt;/p&gt;
&lt;p&gt;cpprefjp プロジェクトに参加する方法は簡単です。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site/issues?state=open&#34; target=&#34;_blank&#34;&gt;cpprefjp の Issues&lt;/a&gt; にアクセスし、&lt;/li&gt;
&lt;li&gt;あなたが手伝えそうな、まだ誰にもアサインされていないタスクを見つけ、&lt;/li&gt;
&lt;li&gt;その Issue のコメントに「このタスクやります」と書く&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これだけです。&lt;/p&gt;
&lt;p&gt;あとは、そのタスクを完了させて pull request を送れば、あなたも cpprefjp のコミッタになれます。&lt;/p&gt;
&lt;h2&gt;編集者向けのさらなる情報&lt;/h2&gt;
&lt;p&gt;本サイトは、GitHubのリポジトリ上で、Markdown形式でリファレンスを記載し、GitHub Pagesに自動反映するという形をとっています。本サイトのMarkdownソースは、以下のリポジトリにあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site&#34; target=&#34;_blank&#34;&gt;https://github.com/cpprefjp/site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記リポジトリのREADMEに、コアメンバの一覧を記載してありますので、何かありましたらそのうちの誰か、もしくはリポジトリへのIssueという形でご相談ください。&lt;/p&gt;
&lt;p&gt;本サイトの編集方法については、以下のドキュメントを参照してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/start_editing.html&#34;&gt;cpprefjpを編集するには&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本サイトのコンテンツを作成、編集するにあたり、仕様を熟知し、一人で完璧に正しい内容を書くことは要求しません。&lt;/p&gt;
&lt;p&gt;たとえ間違ったことを記載した場合や、不安の残る内容を記載した場合でも、それに気づいた誰かが修正してくれます。&lt;/p&gt;
&lt;h2&gt;その他参考情報&lt;/h2&gt;
&lt;p&gt;以下のWebサイトから転載許可をいただいています。&lt;/p&gt;
&lt;p&gt;翻訳や解説などで活用してください：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20190112041213/http://episteme.wankuma.com/stlprog/index.html&#34; target=&#34;_blank&#34;&gt;Standard Template Library プログラミング on the Web&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;プライバシーポリシー&lt;/h2&gt;
&lt;p&gt;本サイトは、サイトの改善のためにGoogleアナリティクスを使用しています。本サイトをご利用中のブラウザは、Googleに特定の情報を自動的に送信します。本サイトは、この分析のためにCookieを使用します。利用者は、本サイトを利用することで、この目的においてCookieを使用することを許可したものとみなします。&lt;/p&gt;
&lt;p&gt;Googleによるデータ使用の詳細は、以下のURLで確認することができます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.google.com/intl/ja/policies/privacy/partners/&#34; target=&#34;_blank&#34;&gt;https://www.google.com/intl/ja/policies/privacy/partners/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ライセンスについて&lt;/h2&gt;
&lt;p&gt;本サイトの情報は、&lt;a href=&#34;https://creativecommons.org/licenses/by/3.0/&#34; target=&#34;_blank&#34;&gt;クリエイティブ・コモンズ 表示 3.0 非移植 ライセンス(CC BY)&lt;/a&gt;の下に提供しています。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://i.creativecommons.org/l/by/3.0/88x31.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;cpprefjpサイトのアイコン・ロゴ画像は、&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/deed.ja&#34; target=&#34;_blank&#34;&gt;クリエイティブ・コモンズ 表示 - 非営利 - 改変禁止 4.0 国際 (CC BY-NC-ND 4.0)&lt;/a&gt;の下に提供しています。&lt;/p&gt;
&lt;p&gt;高解像度画像データ： &lt;a href=&#34;https://github.com/cpprefjp/image/tree/master/cpprefjp/icon&#34; target=&#34;_blank&#34;&gt;cpprefjp/image&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://licensebuttons.net/l/by-nc-nd/4.0/88x31.png&#34; /&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>random -- 編集者向け資料をリネームし、「cpprefjpを編集するには」をサイドバーに表示</title>
      <link href="https://cpprefjp.github.io/reference/random.html"/>
      <id>85bebb584efb6141b4026ff231e7630aba3f4f27:reference/random.md</id>
      <updated>2023-01-12T14:24:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random.md b/reference/random.md
index 1a09db031..3589ec974 100644
--- a/reference/random.md
+++ b/reference/random.md
@@ -264,4 +264,4 @@ int main()
 
 
 ## 編集者向けの参照
-* [乱数分布の図を作る方法](/editors_doc/random_figure.md)
+* [乱数分布の図を作る方法](/start_editing/random_figure.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cpprefjpを編集するには -- 編集者向け資料をリネームし、「cpprefjpを編集するには」をサイドバーに表示</title>
      <link href="https://cpprefjp.github.io/start_editing.html"/>
      <id>85bebb584efb6141b4026ff231e7630aba3f4f27:start_editing.md</id>
      <updated>2023-01-12T14:24:23+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;cpprefjpを編集するには&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本cpprefjpサイトは、GitHub Pagesのサービス上に構築されていますが、編集自体はGitHubリポジトリにあるMarkdown形式のプレーンテキストで行います。&lt;/p&gt;
&lt;p&gt;cpprefjpサイトのGitHubリポジトリは、以下になります：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site&#34; target=&#34;_blank&#34;&gt;https://github.com/cpprefjp/site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、cpprefjpサイト上に掲載する画像ファイルのようなリソースも、GitHubリポジトリで管理しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/image&#34; target=&#34;_blank&#34;&gt;画像ファイルリポジトリ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;GitHubからcpprefjpサイトへの自動反映&lt;/h2&gt;
&lt;p&gt;GitHub上で記述したMarkdown(.md)形式のリファレンスは、自動的にHTMLに変換されて、cpprefjpサイトに反映されます。&lt;/p&gt;
&lt;h3&gt;反映間隔&lt;/h3&gt;
&lt;p&gt;cpprefjp/site へ push すると、すぐに反映されます。&lt;/p&gt;
&lt;p&gt;毎日深夜0時ころに全ページの変換を行います。ページを追加したときのサイドバーの更新や、&lt;code&gt;GLOBAL_QUALIFY_LIST.txt&lt;/code&gt;を編集した場合の適用は、そのときの変換で全ページに変更が適用されます。&lt;/p&gt;
&lt;p&gt;日次の変換中にコミットした変更は、日次の変換がおわったあと (だいたい1時間30分〜2時間くらい) に自動で変換・反映されます。&lt;/p&gt;
&lt;h3&gt;変換エラーの検出&lt;/h3&gt;
&lt;h3&gt;自動反映ツール&lt;/h3&gt;
&lt;p&gt;自動反映ツールも、GitHub上で開発が進められています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site_generator&#34; target=&#34;_blank&#34;&gt;site_generator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;機能要望やpull request等がありましたら、こちらにお願いします。&lt;/p&gt;
&lt;h2&gt;編集権限を得るには&lt;/h2&gt;
&lt;p&gt;本サイトに対してpull requestを提出していただければ、取り込んだあとに管理者から編集権限をお渡しします。&lt;/p&gt;
&lt;p&gt;pull requestに慣れていない場合には、issueでの相談からはじめていただければと思います。&lt;/p&gt;
&lt;h2&gt;Markdown形式による編集方法&lt;/h2&gt;
&lt;p&gt;cpprefjpサイトは、Markdown(.md)形式でリファレンスを記述します。&lt;/p&gt;
&lt;p&gt;Markdownは、GitHubサービス上でドキュメントを記述するフォーマットとして広く使用されている形式です。&lt;/p&gt;
&lt;p&gt;Markdownの記述方法をわかりやすく解説してくれているWebサイトは、すでに数多く存在しますので、詳細はそちらを参照してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Qiita/items/c686397e4a0f4f11683d&#34; target=&#34;_blank&#34;&gt;Markdown記法 チートシート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kojika17.com/2013/01/starting-markdown.html&#34; target=&#34;_blank&#34;&gt;文章作成やメモ書きにも便利、Markdown記法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ただし、cpprefjp特有の拡張構文もあります。
以下のページにまとめてあるので、そちらを参照して下さい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/start_editing/specialized.html&#34;&gt;cpprefjp特有の拡張構文&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Markdown形式では、HTMLのタグも併用できますが、cpprefjpサイトでは積極的にはHTMLタグを使用しない方針です。できるだけ、Markdown形式でできる範囲内で解決するようにしてください。&lt;/p&gt;
&lt;p&gt;ただし、注釈・出典を貼るためにHTMLタグを利用します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/start_editing/cite_note_ref.html&#34;&gt;cpprefjpにおける注釈・出典の貼り方&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;それ以外に本サイト内で使用しているHTMLタグは以下です：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アンカーを貼るために、&lt;code&gt;&amp;lt;a id=&#34;アンカー名&#34;&amp;gt;対象文字列&amp;lt;/a&amp;gt;&lt;/code&gt;のようなHTML5に基づく記法を利用している&lt;/li&gt;
&lt;li&gt;表内での改行のために、&lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt;タグを利用している&lt;/li&gt;
&lt;li&gt;値の大きさを表現するために、上付き文字を表す&lt;code&gt;&amp;lt;sup&amp;gt;&lt;/code&gt;タグを利用している&lt;/li&gt;
&lt;li&gt;添字を表現するために、下付き文字を表す&lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;タグを利用している&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、Markdownパーサーの制限を回避し、表内で &lt;code&gt;|&lt;/code&gt; (縦線、vertical line) を使用するために、文字参照 &lt;code&gt;&amp;#x7C;&lt;/code&gt; を使用してます。&lt;/p&gt;
&lt;p&gt;新規リファレンスを書くにあたって、雛形ページを用意していますので、そちらをベースにして編集作業を行ってください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/start_editing/header_template_page.html&#34;&gt;ヘッダファイルトップページの雛形&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/start_editing/function_template_page.html&#34;&gt;関数の雛形&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/start_editing/class_template_page.html&#34;&gt;クラスの雛形&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/start_editing/type-type_template_page.html&#34;&gt;型の別名の雛形&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、リポジトリのトップディレクトリに&lt;code&gt;GLOBAL_QUALIFY_LIST.txt&lt;/code&gt;というファイルがあります。サイト全体のコードブロックに対して適用したい識別子の修飾があれば、ここに列挙していきます。書き方は各雛形ページに書いてあるコードブロックの修飾と同じです。&lt;/p&gt;
&lt;h2&gt;初めての人は見ておいたほうがよいページ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html&#34;&gt;処理系&lt;/a&gt; 処理系の正式な定義があります&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site/wiki/progress&#34; target=&#34;_blank&#34;&gt;進行状況&lt;/a&gt; リファレンス作成の進行状況が確認できます&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/working_style.html&#34;&gt;スタイル&lt;/a&gt; 作業を行う上でのスタイルの定義と、訳語があります&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;その他、cpprefjpを編集するにあたってのドキュメント&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/start_editing/page_names.html&#34;&gt;ページファイル名の付け方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/start_editing/random_figure.html&#34;&gt;乱数分布の図を作る方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;次期C++バージョンへの対応方針と作業方法&lt;/h2&gt;
&lt;p&gt;C++の次のバージョンで入ることが決まった機能については、以下の方針で対応を行います。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;次のバージョンの言語機能・ライブラリ機能の解説は、随時許可する&lt;/li&gt;
&lt;li&gt;ただし、Working Draftに採択された機能のみを対象とする。まだ提案中の機能は、本サイトでの解説の対象外とする&lt;ul&gt;
&lt;li&gt;例外は、機能テストマクロのようなコンパイラへの推奨機能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;採択された機能は、&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/&#34; target=&#34;_blank&#34;&gt;C++ Standards Committee Papers&lt;/a&gt;のEditor&#39;s Reportで確認できる&lt;/li&gt;
&lt;li&gt;次のC++バージョンに採択された機能は、本リポジトリのWikiページに随時記載しているので、対応状況を含めてそちらを確認すること&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cpprefjpにおける注釈・出典の貼り方 -- 編集者向け資料をリネームし、「cpprefjpを編集するには」をサイドバーに表示</title>
      <link href="https://cpprefjp.github.io/start_editing/cite_note_ref.html"/>
      <id>85bebb584efb6141b4026ff231e7630aba3f4f27:start_editing/cite_note_ref.md</id>
      <updated>2023-01-12T14:24:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/cite_note_ref.md b/start_editing/cite_note_ref.md
new file mode 100644
index 000000000..60c18f5df
--- /dev/null
+++ b/start_editing/cite_note_ref.md
@@ -0,0 +1,145 @@
+# cpprefjpにおける注釈・出典の貼り方
+
+HTML5でもCommonMarkでも標準的な方法が示されていないが、注釈・出典を貼りたいという需要は存在するため、cpprefjpでは記法を統一した。
+
+HTMLタグのうち、`a`, `sup`, `cite`タグを利用して実現する。
+
+## 基本的な注釈・出典記法
+
+もっとも一般的に利用を検討するべき注釈・出典記法がこれだ。
+
+本文中に参照を貼り、ページ最下部に「注釈」「出典」の項を作ってそこに注釈・出典を書く。
+
+- `N`, `${N}`: 1から始まる連番
+
+|      | 参照元の見た目 | 参照先の見た目 | 参照元のid   | 参照先のid |
+|------|----------------|----------------|--------------|------------|
+| 注釈 | &amp;lt;sup&amp;gt;[注N]&amp;lt;/sup&amp;gt;        | `N. ^`         | `note_ref-${N}` | `note-${N}`   |
+| 出典 | &amp;lt;sup&amp;gt;[N]&amp;lt;/sup&amp;gt;          | `N. ^`         | `cite_ref-${N}` | `cite-${N}`   |
+
+### 例
+
+```md
+ありきたりな世界、と私がよく書くが、この元ネタは、
+おもに工業系と魔術系のMod&amp;lt;sup&amp;gt;&amp;lt;a id=&amp;#34;note_ref-1&amp;#34; href=&amp;#34;#note-1&amp;#34;&amp;gt;[注1]&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt;を導入したバージョン1.7.10のありきたりなMinecraftの実況をやっていきます&amp;lt;sup&amp;gt;&amp;lt;a id=&amp;#34;cite_ref-1&amp;#34; href=&amp;#34;#cite-1&amp;#34;&amp;gt;[1]&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt;、という動画内音声である。
+
+## 注釈
+
+1. **&amp;lt;a id=&amp;#34;note-1&amp;#34; href=&amp;#34;#note_ref-1&amp;#34;&amp;gt;^&amp;lt;/a&amp;gt;** MineCraftには、電気や金属・有機物加工などの概念を追加する工業系Mod、魔法の概念を追加する魔術系Modなどを代表に多種多様な改変を加えるModがある
+
+## 出典
+
+1. **&amp;lt;a id=&amp;#34;cite-1&amp;#34; href=&amp;#34;#cite_ref-1&amp;#34;&amp;gt;^&amp;lt;/a&amp;gt;** &amp;lt;cite&amp;gt;[【Minecraft】ありきたりな工業と魔術S2 Part01【ゆっくり実況】 - ニコニコ動画](http://www.nicovideo.jp/watch/sm25261912)&amp;lt;/cite&amp;gt;、再生位置 0:07 (2017-12-28 2:08 JST 閲覧)
+```
+
+### 表示例
+
+&amp;gt;ありきたりな世界、と私がよく書くが、この元ネタは、
+&amp;gt;おもに工業系と魔術系のMod&amp;lt;sup&amp;gt;&amp;lt;a id=&amp;#34;note_ref-1&amp;#34; href=&amp;#34;#note-1&amp;#34;&amp;gt;[注1]&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt;を導入したバージョン1.7.10のありきたりなMinecraftの実況をやっていきます&amp;lt;sup&amp;gt;&amp;lt;a id=&amp;#34;cite_ref-1&amp;#34; href=&amp;#34;#cite-1&amp;#34;&amp;gt;[1]&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt;、という動画内音声である。
+&amp;gt;
+&amp;gt;## 注釈
+&amp;gt;
+&amp;gt;1. **&amp;lt;a id=&amp;#34;note-1&amp;#34; href=&amp;#34;#note_ref-1&amp;#34;&amp;gt;^&amp;lt;/a&amp;gt;** MineCraftには、電気や金属・有機物加工などの概念を追加する工業系Mod、魔法の概念を追加する魔術系Modなどを代表に多種多様な改変を加えるModがある
+&amp;gt;
+&amp;gt;## 出典
+&amp;gt;
+&amp;gt;1. **&amp;lt;a id=&amp;#34;cite-1&amp;#34; href=&amp;#34;#cite_ref-1&amp;#34;&amp;gt;^&amp;lt;/a&amp;gt;** &amp;lt;cite&amp;gt;[【Minecraft】ありきたりな工業と魔術S2 Part01【ゆっくり実況】 - ニコニコ動画](http://www.nicovideo.jp/watch/sm25261912)&amp;lt;/cite&amp;gt;、再生位置 0:07 (2017-12-28 2:08 JST 閲覧)
+
+## 節ごとの注釈・出典記法
+
+ページが極めて長く、また多くの節がある時に利用を検討するべき注釈・出典記法がこれだ。
+
+本文中に参照を貼り、節最下部に、節のタイトルレベルより一つ小さい「注釈」「出典」の項を作って、そこに注釈・出典を書く。
+
+- `N`, `${N}`: 1から始まる連番
+- `${short_name}`: 適当にでっち上げたページ内で衝突しない節の名前
+
+|      | 参照元の見た目 | 参照先の見た目 | 参照元のid   | 参照先のid |
+|------|----------------|----------------|--------------|------------|
+| 注釈 | &amp;lt;sup&amp;gt;[§注N]&amp;lt;/sup&amp;gt;        | `N. ^`         | `note_ref-${short_name}-${N}` | `note-${short_name}-${N}`   |
+| 出典 | &amp;lt;sup&amp;gt;[§N]&amp;lt;/sup&amp;gt;          | `N. ^`         | `cite_ref-${short_name}-${N}` | `cite-${short_name}-${N}`   |
+
+### 例
+
+```md
+## &amp;lt;a id=&amp;#34;define-graph&amp;#34; href=&amp;#34;#define-graph&amp;#34;&amp;gt;グラフ型を定義する&amp;lt;/a&amp;gt;
+
+(前略)
+
+以下は、無向グラフ&amp;lt;sup&amp;gt;&amp;lt;a id=&amp;#34;note_ref-define-graph-1-a&amp;#34; href=&amp;#34;#note-define-graph-1&amp;#34;&amp;gt;[§注1]&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt;を定義する例：
+
+(中略)
+
+有向グラフ&amp;lt;sup&amp;gt;&amp;lt;a id=&amp;#34;note_ref-define-graph-1-b&amp;#34; href=&amp;#34;#note-define-graph-1&amp;#34;&amp;gt;[§注1]&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt;で、辺に重みを付ける例：
+
+(中略)
+
+### 注釈
+
+1. &amp;lt;a id=&amp;#34;note-define-graph-1&amp;#34;&amp;gt;^&amp;lt;/a&amp;gt; &amp;lt;sup&amp;gt;[**a**](#note_ref-define-graph-1-a)&amp;lt;/sup&amp;gt; &amp;lt;sup&amp;gt;[**b**](#note_ref-define-graph-1-b)&amp;lt;/sup&amp;gt; 有向グラフ、無向グラフについては、[基本的なグラフ理論の復習](https://boostjp.github.io/archive/boost_docs/libs/graph/graph_theory_review.html)を参照
+```
+
+### 表示例
+
+&amp;gt;## &amp;lt;a id=&amp;#34;define-graph&amp;#34; href=&amp;#34;#define-graph&amp;#34;&amp;gt;グラフ型を定義する&amp;lt;/a&amp;gt;
+&amp;gt;
+&amp;gt;(前略)
+&amp;gt;
+&amp;gt;以下は、無向グラフ&amp;lt;sup&amp;gt;&amp;lt;a id=&amp;#34;note_ref-define-graph-1-a&amp;#34; href=&amp;#34;#note-define-graph-1&amp;#34;&amp;gt;[§注1]&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt;を定義する例：
+&amp;gt;
+&amp;gt;(中略)
+&amp;gt;
+&amp;gt;有向グラフ&amp;lt;sup&amp;gt;&amp;lt;a id=&amp;#34;note_ref-define-graph-1-b&amp;#34; href=&amp;#34;#note-define-graph-1&amp;#34;&amp;gt;[§注1]&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt;で、辺に重みを付ける例：
+&amp;gt;
+&amp;gt;(中略)
+&amp;gt;
+&amp;gt;### 注釈
+&amp;gt;
+&amp;gt;1. &amp;lt;a id=&amp;#34;note-define-graph-1&amp;#34;&amp;gt;^&amp;lt;/a&amp;gt; &amp;lt;sup&amp;gt;[**a**](#note_ref-define-graph-1-a)&amp;lt;/sup&amp;gt; &amp;lt;sup&amp;gt;[**b**](#note_ref-define-graph-1-b)&amp;lt;/sup&amp;gt; 有向グラフ、無向グラフについては、[基本的なグラフ理論の復習](https://boostjp.github.io/archive/boost_docs/libs/graph/graph_theory_review.html)を参照
+
+## 表に対する注釈記法
+
+表の読み方に関わる注釈をつけるときに検討するべき注釈記法がこれだ。
+
+表中に参照を貼り、表の直後に注釈・出典を書く。
+
+- `N`, `${N}`: 1から始まる連番
+- `M`, `${M}`: 1からはじまる表番号の連番
+
+|      | 参照元の見た目 | 参照先の見た目 | 参照元のid   | 参照先のid |
+|------|----------------|----------------|--------------|------------|
+| 注釈 | &amp;lt;sup&amp;gt;†N&amp;lt;/sup&amp;gt;        | `N. ^`         | `note_ref-t${M}-${N}` | `note-t${M}-${N}`   |
+
+### 例
+
+```md
+| コンテナ | ○○操作の計算量 | ××操作の計算量 |
+|--|--|--|
+| std::vector | O(1) | O(1) |
+| std::list | (O(n)&amp;lt;sup&amp;gt;&amp;lt;a id=&amp;#34;note_ref-t1-1&amp;#34; href=&amp;#34;#note-t1-1&amp;#34;&amp;gt;†1&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt;) | O(1) |
+| bar | O(1) | O(1) |
+| baz | O(1) | O(1) |
+
+1. **&amp;lt;a id=&amp;#34;note-t1-1&amp;#34; href=&amp;#34;#note_ref-t1-1&amp;#34;&amp;gt;^&amp;lt;/a&amp;gt;** 直接はサポートされないが、`std::distance`, etc を用いて実現可能
+```
+
+### 表示例
+
+&amp;gt;| コンテナ | ○○操作の計算量 | ××操作の計算量 |
+&amp;gt;|--|--|--|
+&amp;gt;| std::vector | O(1) | O(1) |
+&amp;gt;| std::list | (O(n)&amp;lt;sup&amp;gt;&amp;lt;a id=&amp;#34;note_ref-t1-1&amp;#34; href=&amp;#34;#note-t1-1&amp;#34;&amp;gt;†1&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt;) | O(1) |
+&amp;gt;| bar | O(1) | O(1) |
+&amp;gt;| baz | O(1) | O(1) |
+&amp;gt;
+&amp;gt;1. **&amp;lt;a id=&amp;#34;note-t1-1&amp;#34; href=&amp;#34;#note_ref-t1-1&amp;#34;&amp;gt;^&amp;lt;/a&amp;gt;** 直接はサポートされないが、`std::distance`, etc を用いて実現可能
+
+## その他
+
+同じ参照先に対する参照元が複数あるときは、参照元のid末尾に小文字のアルファベット`a`から連続で文字を割り当て、参照先の見た目は
+
+&amp;gt;N. ^ &amp;lt;sup&amp;gt;**a**&amp;lt;/sup&amp;gt; &amp;lt;sup&amp;gt;**b**&amp;lt;/sup&amp;gt; 本文
+
+のようにする。
+
+出典のページタイトル・書籍タイトルなどは`cite`タグで囲う。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title (1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- 編集者向け資料をリネームし、「cpprefjpを編集するには」をサイドバーに表示</title>
      <link href="https://cpprefjp.github.io/start_editing/class_template_page.html"/>
      <id>85bebb584efb6141b4026ff231e7630aba3f4f27:start_editing/class_template_page.md</id>
      <updated>2023-01-12T14:24:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/class_template_page.md b/start_editing/class_template_page.md
new file mode 100644
index 000000000..e6c268aa8
--- /dev/null
+++ b/start_editing/class_template_page.md
@@ -0,0 +1,162 @@
+# page_title (1行目の見出し1はページのタイトルです。修飾なしで記載してください)
+
+([cpprefjpを編集するには](/start_editing.md) および [cpprefjp特有の拡張構文](specialized.md) を先に読んで下さい。)
+
+(
+  サンプルコードは文章中のどの部分で書いても大丈夫です。閲覧者の理解を助けるために必要だと感じたところで入れてください。
+  その際拡張構文である`example`タグをルールに従って付け、コンパイル・実行可能にすることを検討してください。
+)
+
+* header_name[meta header]
+* class[meta id-type]
+* std[meta namespace]
+* cpp17[meta cpp]
+
+&amp;lt;!-- `[meta header]`は、所属ヘッダを表すメタ情報 --&amp;gt;
+&amp;lt;!-- `[meta id-type]`は、識別子の種別を表すメタ情報。class, class template, function, function template, enum, variable, type-alias, concept, macro, namespace --&amp;gt;
+&amp;lt;!-- `[meta namespace]`は、所属する名前空間を表すメタ情報。マクロを考慮して省略可。名前空間の区切りは`::` --&amp;gt;
+&amp;lt;!-- `[meta class]`は、所属するクラスを表すメタ情報。クラスページでは省略する。structとは書けない --&amp;gt;
+&amp;lt;!-- `[meta cpp]`は、機能が追加・非推奨・削除されたバージョンを表すメタ情報。改行して複数指定ができる。 --&amp;gt;
+&amp;lt;!--    `cpp11[meta cpp]` : C++11で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp14[meta cpp]` : C++14で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp17[meta cpp]` : C++17で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp20[meta cpp]` : C++20で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp23[meta cpp]` : C++23で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp26[meta cpp]` : C++26で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp11deprecated[meta cpp]` : C++11で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp14deprecated[meta cpp]` : C++14で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp14removed[meta cpp]` : C++14で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp17deprecated[meta cpp]` : C++17で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp17removed[meta cpp]` : C++17で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp20deprecated[meta cpp]` : C++20で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp20removed[meta cpp]` : C++20で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp23deprecated[meta cpp]` : C++23で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp23removed[meta cpp]` : C++23で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp26deprecated[meta cpp]` : C++26で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp26removed[meta cpp]` : C++26で削除された機能 --&amp;gt;
+&amp;lt;!--    `future[meta cpp]` : 将来のC++で検討されている機能 --&amp;gt;
+&amp;lt;!--    `archive[meta cpp]` : 廃案になったが記録として残す価値のあるC++機能 --&amp;gt;
+
+```cpp
+namespace std {
+  class definition; // クラスの宣言を記述します。
+}
+```
+
+## 概要
+(ここには、クラスの概要を記述します。必須事項です。)
+
+(必要な項目を省略する場合には、「(執筆中)」と書いておいてください。)
+
+
+## テンプレートパラメータ制約
+(ここには、クラスのテンプレートパラメータに対する制約を記載します。SFINAE-friendlyな関数の条件、制約テンプレートによる条件などを記載します。)
+
+
+## 適格要件
+(ここには、満たさなければプログラムが不適格となる要件を記載します。`static_assert`に相当します。規格ではMandatesの項目です。)
+
+
+## メンバ関数
+### 構築・破棄
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| `(constructor)` | コンストラクタ |                |
+| `(destructor)`  | デストラクタ   |                |
+| `operator=`     | 代入演算子     |                |
+| `function_name` | 説明           |                |
+
+## 静的メンバ関数
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+|                 |                |                |
+|                 |                |                |
+|                 |                |                |
+|                 |                |                |
+|                 |                |                |
+
+## メンバ型
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+|                 |                |                |
+|                 |                |                |
+|                 |                |                |
+|                 |                |                |
+|                 |                |                |
+
+## 非メンバ関数
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+|                 |                |                |
+|                 |                |                |
+|                 |                |                |
+|                 |                |                |
+|                 |                |                |
+
+### 比較演算子
+
+(比較演算子がデフォルト定義され、個別ページを作らない場合の記述例。オペランドの組み合わせ数が多い場合には、個別ページを作ることを推奨する)
+
+| 名前 | 説明 | 対応バージョン |
+|-----|-----|-----|
+| `bool operator==(const X&amp;amp;, const X&amp;amp;) = default;`  | 等値比較 | |
+| `bool operator!=(const X&amp;amp;, const X&amp;amp;);`            | 非等値比較 (`==`により使用可能) | |
+| `strong_ordering operator&amp;lt;=&amp;gt;(const X&amp;amp;, const X&amp;amp;) = default;` | 三方比較 | |
+| `bool operator&amp;lt;(const X&amp;amp;, const X&amp;amp;);`  | 左辺が右辺より小さいかを判定する (`&amp;lt;=&amp;gt;`により使用可能) | |
+| `bool operator&amp;lt;=(const X&amp;amp;, const X&amp;amp;);` | 左辺が右辺以下を判定する (`&amp;lt;=&amp;gt;`により使用可能) | |
+| `bool operator&amp;gt;(const X&amp;amp;, const X&amp;amp;);`  | 左辺が右辺より大きいかを判定する (`&amp;lt;=&amp;gt;`により使用可能) | |
+| `bool operator&amp;gt;=(const X&amp;amp;, const X&amp;amp;);` | 左辺が右辺以上かを判定する (`&amp;lt;=&amp;gt;`により使用可能) | |
+
+
+## 例
+```cpp example
+// (ここには、クラスを解説するための、サンプルコードを記述します。)
+// (インクルードとmain()関数を含む、実行可能なサンプルコードを記述してください。そのようなコードブロックにはexampleタグを付けます。)
+
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  int variable = 0;
+  std::cout &amp;lt;&amp;lt; variable &amp;lt;&amp;lt; std::endl;
+}
+```
+* variable[color ff0000]
+
+(コードブロック中の識別子に、文字色を付ける例です。)
+
+### 出力
+```
+0
+```
+
+(ここには、サンプルコードの実行結果を記述します。何も出力がない場合は、項目を削除せず、空の出力にしてください。)  
+(実行結果が処理系・実行環境によって異なる場合は、項目名を「出力例」に変更し、可能であればその理由も併記してください。)
+
+
+## バージョン
+### 言語
+- C++11
+
+### 処理系
+- [Clang](/implementation.md#clang): 1.9, 2.9, 3.0, 3.1, 3.2, 3.3
+- [GCC](/implementation.md#gcc): 4.3.6, 4.4.7, 4.5.3, 4.6.3, 4.7.2, 4.8.1
+- [ICC](/implementation.md#icc): 10.1, 11.0, 11.1, 12.0
+- [Visual C++](/implementation.md#visual_cpp): 2003, 2005, 2008, 2010, 2012
+
+(ここには、その機能が存在する言語のバージョンと、確認がとれたコンパイラとそのバージョンを記述します。)  
+(これらの項目を削除した場合、C++03のあらゆる環境で使用できることを意味します。)
+
+
+## 関連項目
+(ここには、その機能と関連のあるcpprefjpサイト内の項目へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)
+
+
+## 参照
+(ここには、その関数・変数・定数を理解するにあたっての参考資料や、関連する機能へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)
+
+- [P0788R3 Standard Library Specification in a Concepts and Contracts World](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0788r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- 編集者向け資料をリネームし、「cpprefjpを編集するには」をサイドバーに表示</title>
      <link href="https://cpprefjp.github.io/start_editing/comparison_operator_template_page.html"/>
      <id>85bebb584efb6141b4026ff231e7630aba3f4f27:start_editing/comparison_operator_template_page.md</id>
      <updated>2023-01-12T14:24:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/comparison_operator_template_page.md b/start_editing/comparison_operator_template_page.md
new file mode 100644
index 000000000..8dc4cbf99
--- /dev/null
+++ b/start_editing/comparison_operator_template_page.md
@@ -0,0 +1,172 @@
+# page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください)
+
+([cpprefjpを編集するには](/start_editing.md) および [cpprefjp特有の拡張構文](specialized.md) を先に読んで下さい。)
+
+(
+  サンプルコードは文章中のどの部分で書いても大丈夫です。閲覧者の理解を助けるために必要だと感じたところで入れてください。
+  その際拡張構文である`example`タグをルールに従って付け、コンパイル・実行可能にすることを検討してください。
+)
+
+* header_name[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* class_name[meta class]
+* cpp17[meta cpp]
+
+&amp;lt;!-- `[meta header]`は、所属ヘッダを表すメタ情報 --&amp;gt;
+&amp;lt;!-- `[meta id-type]`は、識別子の種別を表すメタ情報。class, class template, function, function template, enum, variable, type-alias, concept, macro, namespace。全てがのオーバーロードが関数テンプレートならfunction templateを使用し、そうでなければfunctionを使用する --&amp;gt;
+&amp;lt;!-- `[meta namespace]`は、所属する名前空間を表すメタ情報。マクロを考慮して省略可。名前空間の区切りは`::` --&amp;gt;
+&amp;lt;!-- `[meta class]`は、所属するクラスを表すメタ情報。クラスページでは省略する。structとは書けない --&amp;gt;
+&amp;lt;!-- `[meta cpp]`は、機能が追加・非推奨・削除されたバージョンを表すメタ情報。改行して複数指定ができる。 --&amp;gt;
+&amp;lt;!--    `cpp11[meta cpp]` : C++11で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp14[meta cpp]` : C++14で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp17[meta cpp]` : C++17で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp20[meta cpp]` : C++20で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp23[meta cpp]` : C++23で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp26[meta cpp]` : C++26で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp11deprecated[meta cpp]` : C++11で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp14deprecated[meta cpp]` : C++14で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp14removed[meta cpp]` : C++14で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp17deprecated[meta cpp]` : C++17で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp17removed[meta cpp]` : C++17で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp20deprecated[meta cpp]` : C++20で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp20removed[meta cpp]` : C++20で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp23deprecated[meta cpp]` : C++23で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp23removed[meta cpp]` : C++23で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp26deprecated[meta cpp]` : C++26で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp26removed[meta cpp]` : C++26で削除された機能 --&amp;gt;
+&amp;lt;!--    `future[meta cpp]` : 将来のC++で検討されている機能 --&amp;gt;
+&amp;lt;!--    `archive[meta cpp]` : 廃案になったが記録として残す価値のあるC++機能 --&amp;gt;
+
+```cpp
+namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下のオーバーロードが使用可能になる
+  bool operator&amp;lt;(const X&amp;amp;, const X&amp;amp;) noexcept; // (1)
+}
+```
+
+## 概要
+(ここには、関数・変数・定数の概要を記述します。必須事項です。)
+
+(必要な項目を省略する場合には、「(執筆中)」と書いておいてください。)
+
+
+## 要件
+(ここには、関数を実行するための事前条件、型への要件などを記述します。とくになければ、項目を削除してください。この項目は、今後は「テンプレートパラメータ制約」「適格要件」「事前条件」「事後条件」など、より細分化された項目で記載してください。)
+
+
+## テンプレートパラメータ制約
+(ここには、関数がオーバーロード解決に参加するための条件を記載します。SFINAE-friendlyな関数の条件、制約テンプレートによるオーバーロードの条件などを記載します。)
+
+
+## 適格要件
+(ここには、満たさなければプログラムが不適格となる要件を記載します。`static_assert`や関数のdelete宣言などに相当します。規格ではMandatesの項目です。)
+
+
+## 事前条件
+(ここには、関数を実行するための値の事前条件を記述します。契約属性の`[[expects]]`に相当します。)
+
+
+## 効果
+(ここには、関数の内部で行われる効果:effect を記述します。戻り値しかないような関数の場合には、項目を削除してください。)
+
+
+## 戻り値
+(ここには、関数の戻り値を記述します。戻り値の型が`void`の場合は、「なし」と記述してください。)
+
+
+## 事後条件
+(ここには、関数を実行した結果が満たすべき事後条件を記述します。契約属性の`[[ensures]]`に相当します。)
+
+
+## 計算量
+(ここには、アルゴリズムの計算量を記述します。規格上とくに明記がなければ、項目を削除してください。)
+
+
+## 例外
+(ここには、例外送出の有無、例外送出の条件と送出される例外、例外を抄出しない条件、例外送出後の変数・オブジェクトの状態 (例外安全性) などを記述します。`noexcept`なら「投げない」を記述します。規格上とくに明記がなければ、項目を削除してください。)
+
+
+## トリビアルに定義される条件
+(コンストラクタや代入演算子などの特殊関数がトリビアルに定義される条件を記述します。)
+
+
+## delete定義される条件
+(関数がdelete定義される条件を記述します。)
+
+
+## 定数式に評価される条件
+(関数が`constexpr`評価される条件を記述します。)
+
+
+## explicitになる条件
+(コンストラクタや変換演算子が`explicit`になる条件を記述します。)
+
+## 備考
+(ここには、関数・変数・定数を説明するにあたっての、補足事項を記述します。とくになければ、項目を削除してください。)
+
+- (`operator==`、`operator&amp;lt;=&amp;gt;`ページの場合) この演算子により、以下の演算子が使用可能になる：
+    - `bool operator&amp;lt;(const X&amp;amp;, const X&amp;amp;) noexcept;`
+    - `bool operator&amp;lt;=(const X&amp;amp;, const X&amp;amp;) noexcept;`
+    - `bool operator&amp;gt;(const X&amp;amp;, const X&amp;amp;) noexcept;`
+    - `bool operator&amp;gt;=(const X&amp;amp;, const X&amp;amp;) noexcept;`
+
+
+## 例
+```cpp example
+// (ここには、関数・変数・定数を解説するための、サンプルコードを記述します。)
+// (インクルードとmain()関数を含む、実行可能なサンプルコードを記述してください。そのようなコードブロックにはexampleタグを付けます。)
+
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  int variable = 0;
+  std::cout &amp;lt;&amp;lt; variable &amp;lt;&amp;lt; std::endl;
+}
+```
+* variable[color ff0000]
+
+(コードブロック中の識別子に、文字色を付ける例です。)
+
+### 出力
+```
+0
+```
+
+(ここには、サンプルコードの実行結果を記述します。何も出力がない場合は、項目を削除せず、空の出力にしてください。)  
+(実行結果が処理系・実行環境によって異なる場合は、項目名を「出力例」に変更し、可能であればその理由も併記してください。)
+
+
+## 実装例
+```cpp
+// (ここには、その関数・変数・定数の、実装例を記述します。)
+// (とくに必要がないと判断した場合、項目を削除してください。)
+```
+
+## バージョン
+### 言語
+- C++11
+
+### 処理系
+- [Clang](/implementation.md#clang): 1.9, 2.9, 3.0, 3.1, 3.2, 3.3
+- [GCC](/implementation.md#gcc): 4.3.6, 4.4.7, 4.5.3, 4.6.3, 4.7.2, 4.8.1
+- [ICC](/implementation.md#icc): 10.1, 11.0, 11.1, 12.0
+- [Visual C++](/implementation.md#visual_cpp): 2003, 2005, 2008, 2010, 2012
+
+(ここには、その機能が存在する言語のバージョンと、確認がとれたコンパイラとそのバージョンを記述します。)  
+(これらの項目を削除した場合、C++03のあらゆる環境で使用できることを意味します。)
+(確認のテストできないときは、??を記述してください。)
+
+### 備考
+(処理系ごとに存在するバグや注意事項を記述します。とくにない場合は、項目を削除してください。)
+
+
+## 関連項目
+(ここには、その機能と関連のあるcpprefjpサイト内の項目へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)
+
+
+## 参照
+(ここには、その関数・変数・定数を理解するにあたっての参考資料や、関連する機能へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)
+
+- [P0788R3 Standard Library Specification in a Concepts and Contracts World](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0788r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- 編集者向け資料をリネームし、「cpprefjpを編集するには」をサイドバーに表示</title>
      <link href="https://cpprefjp.github.io/start_editing/concept_template_page.html"/>
      <id>85bebb584efb6141b4026ff231e7630aba3f4f27:start_editing/concept_template_page.md</id>
      <updated>2023-01-12T14:24:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/concept_template_page.md b/start_editing/concept_template_page.md
new file mode 100644
index 000000000..6d7dcbb55
--- /dev/null
+++ b/start_editing/concept_template_page.md
@@ -0,0 +1,134 @@
+# page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください)
+
+([cpprefjpを編集するには](/start_editing.md) および [cpprefjp特有の拡張構文](specialized.md) を先に読んで下さい。)
+
+(
+  サンプルコードは文章中のどの部分で書いても大丈夫です。閲覧者の理解を助けるために必要だと感じたところで入れてください。
+  その際拡張構文である`example`タグをルールに従って付け、コンパイル・実行可能にすることを検討してください。
+)
+
+* header_name[meta header]
+* concept[meta id-type]
+* std[meta namespace]
+* cpp20[meta cpp]
+
+&amp;lt;!-- `[meta header]`は、所属ヘッダを表すメタ情報 --&amp;gt;
+&amp;lt;!-- `[meta id-type]`は、識別子の種別を表すメタ情報。conceptを指定してください --&amp;gt;
+&amp;lt;!-- `[meta namespace]`は、所属する名前空間を表すメタ情報。マクロを考慮して省略可。名前空間の区切りは`::` --&amp;gt;
+&amp;lt;!-- `[meta cpp]`は、機能が追加・非推奨・削除されたバージョンを表すメタ情報。改行して複数指定ができる。 --&amp;gt;
+&amp;lt;!--    `cpp20[meta cpp]` : C++20で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp23[meta cpp]` : C++23で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp26[meta cpp]` : C++26で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp20deprecated[meta cpp]` : C++20で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp20removed[meta cpp]` : C++20で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp23deprecated[meta cpp]` : C++23で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp23removed[meta cpp]` : C++23で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp26deprecated[meta cpp]` : C++26で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp26removed[meta cpp]` : C++26で削除された機能 --&amp;gt;
+&amp;lt;!--    `future[meta cpp]` : 将来のC++で検討されている機能 --&amp;gt;
+&amp;lt;!--    `archive[meta cpp]` : 廃案になったが記録として残す価値のあるC++機能 --&amp;gt;
+
+```cpp
+namespace std {
+  template &amp;lt;class T&amp;gt;
+  concept C; // コンセプトの宣言を記述します。
+}
+```
+
+## 概要
+(ここには、コンセプトの概要を記述します。必須事項です。)
+
+(必要な項目を省略する場合には、「(執筆中)」と書いておいてください。)
+
+`C`は、型`T`がxx可能であることを表すコンセプトである。
+
+
+## 要件
+(ここには、コンセプトの定義を記述します。説明用コンセプトを記述する場合は、規格書と同様に小文字ハイフン区切りで記述してください)
+
+まず、説明専用コンセプト`xxx-yyy`を以下のように定義する。
+
+```cpp
+template &amp;lt;class T&amp;gt;
+concept xxx-yyy = …;
+```
+
+`C`コンセプトは、以下のように定義される。
+
+```cpp
+template &amp;lt;class T&amp;gt;
+concept C = …;
+```
+
+
+## モデル
+(モデルとは、コンセプトの制約と意味論を満たした型が「型`T`はコンセプト`C`のモデルである」のように使われる用語です。ここには、説明、制約条件、意味論的な条件などを列挙して、型がどうすればそのコンセプトのモデルとなれるかを記述します)
+
+
+## 備考
+(ここには、コンセプトを説明するにあたっての、補足事項を記述します。とくになければ、項目を削除してください。)
+
+
+## 例
+```cpp example
+// (ここには、コンセプトを解説するための、サンプルコードを記述します。)
+// (インクルードとmain()関数を含む、実行可能なサンプルコードを記述してください。そのようなコードブロックにはexampleタグを付けます。)
+
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;cmath&amp;gt;
+#include &amp;lt;limits&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+
+// 数値の等値比較を行う関数を、整数型か浮動小数点数型かでオーバーロードする。
+// 整数型の場合は、単純な==演算子による比較
+template &amp;lt;std::integral T&amp;gt;
+bool equal(T a, T b) {
+  return a == b;
+}
+
+// 浮動小数点数型の場合は、計算誤差を許容する等値比較
+template &amp;lt;std::floating_point T&amp;gt;
+bool equal(T a, T b) {
+  return std::abs(a - b) &amp;lt;= std::numeric_limits&amp;lt;T&amp;gt;::epsilon();
+}
+
+int main()
+{
+  assert(equal(1 + 2, 3));
+  assert(equal(0.1 + 0.2, 0.3));
+}
+```
+* std::floating_point[color ff0000]
+
+### 出力
+```
+```
+
+(ここには、サンプルコードの実行結果を記述します。何も出力がない場合は、項目を削除せず、空の出力にしてください。)  
+(実行結果が処理系・実行環境によって異なる場合は、項目名を「出力例」に変更し、可能であればその理由も併記してください。)
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 1.9, 2.9, 3.0, 3.1, 3.2, 3.3
+- [GCC](/implementation.md#gcc): 4.3.6, 4.4.7, 4.5.3, 4.6.3, 4.7.2, 4.8.1
+- [ICC](/implementation.md#icc): 10.1, 11.0, 11.1, 12.0
+- [Visual C++](/implementation.md#visual_cpp): 2003, 2005, 2008, 2010, 2012, 2019 Update 3
+
+(ここには、その機能が存在する言語のバージョンと、確認がとれたコンパイラとそのバージョンを記述します。)  
+(確認のテストできないときは、??を記述してください。)
+
+### 備考
+(処理系ごとに存在するバグや注意事項を記述します。とくにない場合は、項目を削除してください。)
+
+
+## 関連項目
+(ここには、その機能と関連のあるcpprefjpサイト内の項目へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)
+
+
+## 参照
+(ここには、そのコンセプトを理解するにあたっての参考資料や、関連する機能へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- 編集者向け資料をリネームし、「cpprefjpを編集するには」をサイドバーに表示</title>
      <link href="https://cpprefjp.github.io/start_editing/cpo_template_page.html"/>
      <id>85bebb584efb6141b4026ff231e7630aba3f4f27:start_editing/cpo_template_page.md</id>
      <updated>2023-01-12T14:24:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/cpo_template_page.md b/start_editing/cpo_template_page.md
new file mode 100644
index 000000000..f15e13d1d
--- /dev/null
+++ b/start_editing/cpo_template_page.md
@@ -0,0 +1,116 @@
+# page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください)
+
+([cpprefjpを編集するには](/start_editing.md) および [cpprefjp特有の拡張構文](specialized.md) を先に読んで下さい。)
+
+(
+  サンプルコードは文章中のどの部分で書いても大丈夫です。閲覧者の理解を助けるために必要だと感じたところで入れてください。
+  その際拡張構文である`example`タグをルールに従って付け、コンパイル・実行可能にすることを検討してください。
+)
+
+* header_name[meta header]
+* cpo[meta id-type]
+* std[meta namespace]
+* cpp20[meta cpp]
+
+&amp;lt;!-- `[meta header]`は、所属ヘッダを表すメタ情報 --&amp;gt;
+&amp;lt;!-- `[meta id-type]`は、識別子の種別を表すメタ情報。class, class template, function, function template, enum, variable, type-alias, concept, macro, namespace。全てがのオーバーロードが関数テンプレートならfunction templateを使用し、そうでなければfunctionを使用する --&amp;gt;
+&amp;lt;!-- `[meta namespace]`は、所属する名前空間を表すメタ情報。マクロを考慮して省略可。名前空間の区切りは`::` --&amp;gt;
+&amp;lt;!-- `[meta cpp]`は、機能が追加・非推奨・削除されたバージョンを表すメタ情報。改行して複数指定ができる。 --&amp;gt;
+&amp;lt;!--    `cpp20[meta cpp]` : C++20で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp23[meta cpp]` : C++23で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp26[meta cpp]` : C++26で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp23deprecated[meta cpp]` : C++23で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp23removed[meta cpp]` : C++23で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp26deprecated[meta cpp]` : C++26で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp26removed[meta cpp]` : C++26で削除された機能 --&amp;gt;
+&amp;lt;!--    `future[meta cpp]` : 将来のC++で検討されている機能 --&amp;gt;
+&amp;lt;!--    `archive[meta cpp]` : 廃案になったが記録として残す価値のあるC++機能 --&amp;gt;
+
+```cpp
+namespace std {
+  inline namespace /*unspecified*/ {
+
+    inline constexpr /*unspecified*/ cponame = /*unspecified*/;
+  }
+}
+```
+
+## 概要
+(ここには、カスタマイゼーションポイントオブジェクトの概要を記述します。必須事項です。)
+
+(必要な項目を省略する場合には、「(執筆中)」と書いておいてください。)
+
+
+## 効果
+(ここには、カスタマイゼーションポイントオブジェクトの内部で行われる効果:effect を記述します。)
+
+
+## 戻り値
+(ここには、カスタマイゼーションポイントオブジェクトの戻り値を記述します。戻り値の型が`void`の場合は、「なし」と記述してください。)
+
+
+## 例外
+(ここには、例外送出の有無、例外送出の条件と送出される例外、例外を抄出しない条件、例外送出後の変数・オブジェクトの状態 (例外安全性) などを記述します。`noexcept`なら「投げない」を記述します。規格上とくに明記がなければ、項目を削除してください。)
+
+
+## 定数式に評価される条件
+(`constexpr`評価される条件を記述します。)
+
+
+## カスタマイゼーションポイント
+(ここには、カスタマイゼーションポイントオブジェクトにアダプトする方法を記述します。)
+
+
+## 備考
+(ここには、カスタマイゼーションポイントオブジェクトを説明するにあたっての、補足事項を記述します。とくになければ、項目を削除してください。)
+
+
+## 例
+```cpp example
+// (ここには、カスタマイゼーションポイントオブジェクトを解説するための、サンプルコードを記述します。)
+// (インクルードとmain()関数を含む、実行可能なサンプルコードを記述してください。そのようなコードブロックにはexampleタグを付けます。)
+
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  int variable = 0;
+  std::cout &amp;lt;&amp;lt; variable &amp;lt;&amp;lt; std::endl;
+}
+```
+* variable[color ff0000]
+
+(コードブロック中の識別子に、文字色を付ける例です。)
+
+### 出力
+```
+0
+```
+
+(ここには、サンプルコードの実行結果を記述します。何も出力がない場合は、項目を削除せず、空の出力にしてください。)  
+(実行結果が処理系・実行環境によって異なる場合は、項目名を「出力例」に変更し、可能であればその理由も併記してください。)
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): 10.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+(ここには、その機能が存在する言語のバージョンと、確認がとれたコンパイラとそのバージョンを記述します。)
+(これらの項目を削除した場合、C++03のあらゆる環境で使用できることを意味します。)
+(確認のテストできないときは、??を記述してください。)
+
+### 備考
+(処理系ごとに存在するバグや注意事項を記述します。とくにない場合は、項目を削除してください。)
+
+
+## 関連項目
+(ここには、その機能と関連のあるcpprefjpサイト内の項目へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)
+
+
+## 参照
+(ここには、そのカスタマイゼーションポイントオブジェクトを理解するにあたっての参考資料や、関連する機能へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- 編集者向け資料をリネームし、「cpprefjpを編集するには」をサイドバーに表示</title>
      <link href="https://cpprefjp.github.io/start_editing/function_template_page.html"/>
      <id>85bebb584efb6141b4026ff231e7630aba3f4f27:start_editing/function_template_page.md</id>
      <updated>2023-01-12T14:24:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/function_template_page.md b/start_editing/function_template_page.md
new file mode 100644
index 000000000..ab695a3b1
--- /dev/null
+++ b/start_editing/function_template_page.md
@@ -0,0 +1,163 @@
+# page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください)
+
+([cpprefjpを編集するには](/start_editing.md) および [cpprefjp特有の拡張構文](specialized.md) を先に読んで下さい。)
+
+(
+  サンプルコードは文章中のどの部分で書いても大丈夫です。閲覧者の理解を助けるために必要だと感じたところで入れてください。
+  その際拡張構文である`example`タグをルールに従って付け、コンパイル・実行可能にすることを検討してください。
+)
+
+* header_name[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* class_name[meta class]
+* cpp17[meta cpp]
+
+&amp;lt;!-- `[meta header]`は、所属ヘッダを表すメタ情報 --&amp;gt;
+&amp;lt;!-- `[meta id-type]`は、識別子の種別を表すメタ情報。class, class template, function, function template, enum, variable, type-alias, concept, macro, namespace。全てがのオーバーロードが関数テンプレートならfunction templateを使用し、そうでなければfunctionを使用する --&amp;gt;
+&amp;lt;!-- `[meta namespace]`は、所属する名前空間を表すメタ情報。マクロを考慮して省略可。名前空間の区切りは`::` --&amp;gt;
+&amp;lt;!-- `[meta class]`は、所属するクラスを表すメタ情報。クラスページでは省略する。structとは書けない --&amp;gt;
+&amp;lt;!-- `[meta cpp]`は、機能が追加・非推奨・削除されたバージョンを表すメタ情報。改行して複数指定ができる。 --&amp;gt;
+&amp;lt;!--    `cpp11[meta cpp]` : C++11で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp14[meta cpp]` : C++14で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp17[meta cpp]` : C++17で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp20[meta cpp]` : C++20で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp23[meta cpp]` : C++23で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp26[meta cpp]` : C++26で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp11deprecated[meta cpp]` : C++11で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp14deprecated[meta cpp]` : C++14で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp14removed[meta cpp]` : C++14で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp17deprecated[meta cpp]` : C++17で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp17removed[meta cpp]` : C++17で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp20deprecated[meta cpp]` : C++20で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp20removed[meta cpp]` : C++20で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp23deprecated[meta cpp]` : C++23で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp23removed[meta cpp]` : C++23で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp26deprecated[meta cpp]` : C++26で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp26removed[meta cpp]` : C++26で削除された機能 --&amp;gt;
+&amp;lt;!--    `future[meta cpp]` : 将来のC++で検討されている機能 --&amp;gt;
+&amp;lt;!--    `archive[meta cpp]` : 廃案になったが記録として残す価値のあるC++機能 --&amp;gt;
+
+```cpp
+void definition(); // 関数・変数・定数の宣言を記述します。
+```
+
+## 概要
+(ここには、関数・変数・定数の概要を記述します。必須事項です。)
+
+(必要な項目を省略する場合には、「(執筆中)」と書いておいてください。)
+
+
+## 要件
+(ここには、関数を実行するための事前条件、型への要件などを記述します。とくになければ、項目を削除してください。この項目は、今後は「テンプレートパラメータ制約」「適格要件」「事前条件」「事後条件」など、より細分化された項目で記載してください。)
+
+
+## テンプレートパラメータ制約
+(ここには、関数がオーバーロード解決に参加するための条件を記載します。SFINAE-friendlyな関数の条件、制約テンプレートによるオーバーロードの条件などを記載します。)
+
+
+## 適格要件
+(ここには、満たさなければプログラムが不適格となる要件を記載します。`static_assert`や関数のdelete宣言などに相当します。規格ではMandatesの項目です。)
+
+
+## 事前条件
+(ここには、関数を実行するための値の事前条件を記述します。契約属性の`[[expects]]`に相当します。)
+
+
+## 効果
+(ここには、関数の内部で行われる効果:effect を記述します。戻り値しかないような関数の場合には、項目を削除してください。)
+
+
+## 戻り値
+(ここには、関数の戻り値を記述します。戻り値の型が`void`の場合は、「なし」と記述してください。)
+
+
+## 事後条件
+(ここには、関数を実行した結果が満たすべき事後条件を記述します。契約属性の`[[ensures]]`に相当します。)
+
+
+## 計算量
+(ここには、アルゴリズムの計算量を記述します。規格上とくに明記がなければ、項目を削除してください。)
+
+
+## 例外
+(ここには、例外送出の有無、例外送出の条件と送出される例外、例外を抄出しない条件、例外送出後の変数・オブジェクトの状態 (例外安全性) などを記述します。`noexcept`なら「投げない」を記述します。規格上とくに明記がなければ、項目を削除してください。)
+
+
+## トリビアルに定義される条件
+(コンストラクタや代入演算子などの特殊関数がトリビアルに定義される条件を記述します。)
+
+
+## delete定義される条件
+(関数がdelete定義される条件を記述します。)
+
+
+## 定数式に評価される条件
+(関数が`constexpr`評価される条件を記述します。)
+
+
+## explicitになる条件
+(コンストラクタや変換演算子が`explicit`になる条件を記述します。)
+
+## 備考
+(ここには、関数・変数・定数を説明するにあたっての、補足事項を記述します。とくになければ、項目を削除してください。)
+
+
+## 例
+```cpp example
+// (ここには、関数・変数・定数を解説するための、サンプルコードを記述します。)
+// (インクルードとmain()関数を含む、実行可能なサンプルコードを記述してください。そのようなコードブロックにはexampleタグを付けます。)
+
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  int variable = 0;
+  std::cout &amp;lt;&amp;lt; variable &amp;lt;&amp;lt; std::endl;
+}
+```
+* variable[color ff0000]
+
+(コードブロック中の識別子に、文字色を付ける例です。)
+
+### 出力
+```
+0
+```
+
+(ここには、サンプルコードの実行結果を記述します。何も出力がない場合は、項目を削除せず、空の出力にしてください。)  
+(実行結果が処理系・実行環境によって異なる場合は、項目名を「出力例」に変更し、可能であればその理由も併記してください。)
+
+
+## 実装例
+```cpp
+// (ここには、その関数・変数・定数の、実装例を記述します。)
+// (とくに必要がないと判断した場合、項目を削除してください。)
+```
+
+## バージョン
+### 言語
+- C++11
+
+### 処理系
+- [Clang](/implementation.md#clang): 1.9, 2.9, 3.0, 3.1, 3.2, 3.3
+- [GCC](/implementation.md#gcc): 4.3.6, 4.4.7, 4.5.3, 4.6.3, 4.7.2, 4.8.1
+- [ICC](/implementation.md#icc): 10.1, 11.0, 11.1, 12.0
+- [Visual C++](/implementation.md#visual_cpp): 2003, 2005, 2008, 2010, 2012
+
+(ここには、その機能が存在する言語のバージョンと、確認がとれたコンパイラとそのバージョンを記述します。)  
+(これらの項目を削除した場合、C++03のあらゆる環境で使用できることを意味します。)
+(確認のテストできないときは、??を記述してください。)
+
+### 備考
+(処理系ごとに存在するバグや注意事項を記述します。とくにない場合は、項目を削除してください。)
+
+
+## 関連項目
+(ここには、その機能と関連のあるcpprefjpサイト内の項目へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)
+
+
+## 参照
+(ここには、その関数・変数・定数を理解するにあたっての参考資料や、関連する機能へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)
+
+- [P0788R3 Standard Library Specification in a Concepts and Contracts World](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0788r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- 編集者向け資料をリネームし、「cpprefjpを編集するには」をサイドバーに表示</title>
      <link href="https://cpprefjp.github.io/start_editing/header_template_page.html"/>
      <id>85bebb584efb6141b4026ff231e7630aba3f4f27:start_editing/header_template_page.md</id>
      <updated>2023-01-12T14:24:23+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;header_name&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください)&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;(&lt;a href=&#34;https://cpprefjp.github.io/start_editing.html&#34;&gt;cpprefjpを編集するには&lt;/a&gt; および &lt;a href=&#34;https://cpprefjp.github.io/start_editing/specialized.html&#34;&gt;cpprefjp特有の拡張構文&lt;/a&gt; を先に読んで下さい。)&lt;/p&gt;
&lt;p&gt;(
  サンプルコードは文章中のどの部分で書いても大丈夫です。閲覧者の理解を助けるために必要だと感じたところで入れてください。
  その際拡張構文である&lt;code&gt;example&lt;/code&gt;タグをルールに従って付け、コンパイル・実行可能にすることを検討してください。
)&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;(ここには、このヘッダファイル(ライブラリ)の概要を記述します。必須事項です。)&lt;/p&gt;
&lt;p&gt;(必要な項目を省略する場合には、「(執筆中)」と書いておいてください。)&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 1.9, 2.9, 3.0, 3.1, 3.2, 3.3&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: 4.3.6, 4.4.7, 4.5.3, 4.6.3, 4.7.2, 4.8.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: 10.1, 11.0, 11.1, 12.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 2003, 2005, 2008, 2010, 2012&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(ここには、そのヘッダファイルが存在する言語のバージョンと、確認がとれたコンパイラとそのバージョンを記述します。)&lt;br /&gt;
(これらの項目を削除した場合、C++03のあらゆる環境で使用できることを意味します。)&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;p&gt;(ここには、その機能と関連のあるcpprefjpサイト内の項目へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;p&gt;(ここには、その関数・変数・定数を理解するにあたっての参考資料や、関連する機能へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- 編集者向け資料をリネームし、「cpprefjpを編集するには」をサイドバーに表示</title>
      <link href="https://cpprefjp.github.io/start_editing/lang_template_page.html"/>
      <id>85bebb584efb6141b4026ff231e7630aba3f4f27:start_editing/lang_template_page.md</id>
      <updated>2023-01-12T14:24:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/lang_template_page.md b/start_editing/lang_template_page.md
new file mode 100644
index 000000000..e66a017ef
--- /dev/null
+++ b/start_editing/lang_template_page.md
@@ -0,0 +1,83 @@
+# page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください)
+
+([cpprefjpを編集するには](/start_editing.md) および [cpprefjp特有の拡張構文](specialized.md) を先に読んで下さい。)
+
+(
+  サンプルコードは文章中のどの部分で書いても大丈夫です。閲覧者の理解を助けるために必要だと感じたところで入れてください。
+  その際拡張構文である`example`タグをルールに従って付け、コンパイル・実行可能にすることを検討してください。
+)
+
+* cpp17[meta cpp]
+
+&amp;lt;!-- `[meta cpp]`は、機能が追加・非推奨・削除されたバージョンを表すメタ情報。改行して複数指定ができる。 --&amp;gt;
+&amp;lt;!--    `cpp11[meta cpp]` : C++11で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp14[meta cpp]` : C++14で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp17[meta cpp]` : C++17で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp20[meta cpp]` : C++20で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp23[meta cpp]` : C++23で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp26[meta cpp]` : C++26で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp11deprecated[meta cpp]` : C++11で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp14deprecated[meta cpp]` : C++14で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp14removed[meta cpp]` : C++14で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp17deprecated[meta cpp]` : C++17で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp17removed[meta cpp]` : C++17で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp20deprecated[meta cpp]` : C++20で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp20removed[meta cpp]` : C++20で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp23deprecated[meta cpp]` : C++23で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp23removed[meta cpp]` : C++23で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp26deprecated[meta cpp]` : C++26で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp26removed[meta cpp]` : C++26で削除された機能 --&amp;gt;
+&amp;lt;!--    `future[meta cpp]` : 将来のC++で検討されている機能 --&amp;gt;
+&amp;lt;!--    `archive[meta cpp]` : 廃案になったが記録として残す価値のあるC++機能 --&amp;gt;
+
+## 概要
+(ここには、言語機能の概要を記載します。)
+
+(必要な項目を省略する場合には、「(執筆中)」と書いておいてください。)
+
+
+## 仕様
+(ここには、言語機能の仕様を記載します。最初のコミットから完璧にする必要はありません。徐々に詳細にしていけばOKです。)
+
+
+## 例
+```cpp example
+// (ここには、言語機能の使い方を解説するための、サンプルコードを記述します。)
+// (インクルードとmain()関数を含む、実行可能なサンプルコードを記述してください。そのようなコードブロックにはexampleタグを付けます。)
+
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  int variable = 0;
+  std::cout &amp;lt;&amp;lt; variable &amp;lt;&amp;lt; std::endl;
+}
+```
+* variable[color ff0000]
+
+(コードブロック中の識別子に、文字色を付ける例です。)
+
+### 出力
+```
+0
+```
+
+(ここには、サンプルコードの実行結果を記述します。何も出力がない場合は、項目を削除せず、空の出力にしてください。)  
+(実行結果が処理系・実行環境によって異なる場合は、項目名を「出力例」に変更し、可能であればその理由も併記してください。)
+
+
+## この機能が必要になった背景・経緯
+(ここには、その言語機能が必要になった背景や経緯を記述します。その言語機能で解決したい問題は何だったのかは、ユーザーがその言語機能を実際に使う上で重要な情報となります。)
+
+
+## 検討されたほかの選択肢
+(ここには、その言語機能が実際に採用されるまでに検討された、ほかの設計選択を記述します。どのような選択肢があって今の言語機能となったのかがわかるようにします。)
+
+
+## 関連項目
+(ここには、その言語機能と関連のあるcpprefjpサイト内の項目へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)
+
+
+## 参照
+(ここには、その言語機能を理解するにあたっての参考資料へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- 編集者向け資料をリネームし、「cpprefjpを編集するには」をサイドバーに表示</title>
      <link href="https://cpprefjp.github.io/start_editing/module_template_page.html"/>
      <id>85bebb584efb6141b4026ff231e7630aba3f4f27:start_editing/module_template_page.md</id>
      <updated>2023-01-12T14:24:23+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください)&lt;/span&gt;&lt;span class=&#34;cpp cpp26&#34; title=&#34;C++26で追加&#34;&gt;(C++26)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;(&lt;a href=&#34;https://cpprefjp.github.io/start_editing.html&#34;&gt;cpprefjpを編集するには&lt;/a&gt; および &lt;a href=&#34;https://cpprefjp.github.io/start_editing/specialized.html&#34;&gt;cpprefjp特有の拡張構文&lt;/a&gt; を先に読んで下さい。)&lt;/p&gt;
&lt;p&gt;(
  サンプルコードは文章中のどの部分で書いても大丈夫です。閲覧者の理解を助けるために必要だと感じたところで入れてください。
  その際拡張構文である&lt;code&gt;example&lt;/code&gt;タグをルールに従って付け、コンパイル・実行可能にすることを検討してください。
)&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;(ここには、このモジュール(ライブラリ)の概要を記述します。必須事項です。)&lt;/p&gt;
&lt;p&gt;(必要な項目を省略する場合には、「(執筆中)」と書いておいてください。)&lt;/p&gt;
&lt;p&gt;(当面の間、モジュールだけで提供されるライブラリはないため、記事はヘッダー(/reference)が中心となります。モジュールのページでは、モジュールがどのヘッダーファイルに対応するのかを説明します。)&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++26&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(ここには、そのモジュールが存在する言語のバージョンと、確認がとれたコンパイラとそのバージョンを記述します。)&lt;br /&gt;
(これらの項目を削除した場合、C++03のあらゆる環境で使用できることを意味します。)&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;p&gt;(ここには、その機能と関連のあるcpprefjpサイト内の項目へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/modules.html&#34;&gt;モジュール&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;p&gt;(ここには、その関数・変数・定数を理解するにあたっての参考資料や、関連する機能へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- 編集者向け資料をリネームし、「cpprefjpを編集するには」をサイドバーに表示</title>
      <link href="https://cpprefjp.github.io/start_editing/named_requirement_template_page.html"/>
      <id>85bebb584efb6141b4026ff231e7630aba3f4f27:start_editing/named_requirement_template_page.md</id>
      <updated>2023-01-12T14:24:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/named_requirement_template_page.md b/start_editing/named_requirement_template_page.md
new file mode 100644
index 000000000..46785553d
--- /dev/null
+++ b/start_editing/named_requirement_template_page.md
@@ -0,0 +1,83 @@
+# page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください)
+
+([cpprefjpを編集するには](/start_editing.md) および [cpprefjp特有の拡張構文](specialized.md) を先に読んで下さい。)
+
+(
+  サンプルコードは文章中のどの部分で書いても大丈夫です。閲覧者の理解を助けるために必要だと感じたところで入れてください。
+  その際拡張構文である`example`タグをルールに従って付け、コンパイル・実行可能にすることを検討してください。
+)
+
+* named requirement[meta id-type]
+* cpp17[meta cpp]
+
+&amp;lt;!-- `[meta id-type]`は、識別子の種別を表すメタ情報。named requirementを指定してください --&amp;gt;
+&amp;lt;!-- `[meta cpp]`は、機能が追加・非推奨・削除されたバージョンを表すメタ情報。改行して複数指定ができる。 --&amp;gt;
+&amp;lt;!--    `cpp11[meta cpp]` : C++11で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp14[meta cpp]` : C++14で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp17[meta cpp]` : C++17で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp20[meta cpp]` : C++20で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp23[meta cpp]` : C++23で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp26[meta cpp]` : C++26で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp11deprecated[meta cpp]` : C++11で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp14deprecated[meta cpp]` : C++14で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp14removed[meta cpp]` : C++14で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp17deprecated[meta cpp]` : C++17で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp17removed[meta cpp]` : C++17で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp20deprecated[meta cpp]` : C++20で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp20removed[meta cpp]` : C++20で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp23deprecated[meta cpp]` : C++23で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp23removed[meta cpp]` : C++23で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp26deprecated[meta cpp]` : C++26で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp26removed[meta cpp]` : C++26で削除された機能 --&amp;gt;
+&amp;lt;!--    `future[meta cpp]` : 将来のC++で検討されている機能 --&amp;gt;
+&amp;lt;!--    `archive[meta cpp]` : 廃案になったが記録として残す価値のあるC++機能 --&amp;gt;
+
+## 概要
+(ここには、名前付き要件の概要を記述します。必須事項です。)
+
+(必要な項目を省略する場合には、「(執筆中)」と書いておいてください。)
+
+`Requirement`は、型がxxであることを表す要件である。
+
+
+## 要件
+(ここには、名前付き要件で要求される内容を記述します)
+
+## 備考
+(ここには、名前付き要件を説明するにあたっての、補足事項を記述します。とくになければ、項目を削除してください。)
+
+## `Requirement`に該当する型
+(ここには、名前付き要件に該当する型を列挙します。とくに必要がないと判断した場合、項目を削除してください。)
+
+* xx型
+* yy型
+
+## 例
+```cpp example
+// (ここには、名前付き要件を解説するための、サンプルコードを記述します。)
+// (インクルードとmain()関数を含む、実行可能なサンプルコードを記述してください。そのようなコードブロックにはexampleタグを付けます。)
+
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+}
+```
+
+### 出力
+```
+```
+
+(ここには、サンプルコードの実行結果を記述します。何も出力がない場合は、項目を削除せず、空の出力にしてください。)  
+(実行結果が処理系・実行環境によって異なる場合は、項目名を「出力例」に変更し、可能であればその理由も併記してください。)
+
+## バージョン
+### 言語
+- C++17
+
+## 関連項目
+(ここには、その機能と関連のあるcpprefjpサイト内の項目へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)
+
+## 参照
+(ここには、その名前付き要件を理解するにあたっての参考資料や、関連する機能へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ページファイル名の付け方 -- 編集者向け資料をリネームし、「cpprefjpを編集するには」をサイドバーに表示</title>
      <link href="https://cpprefjp.github.io/start_editing/page_names.html"/>
      <id>85bebb584efb6141b4026ff231e7630aba3f4f27:start_editing/page_names.md</id>
      <updated>2023-01-12T14:24:23+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;ページファイル名の付け方&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;cpprefjpサイトでは、ページファイル名の付け方について、いくつかの共通ルールがあります。&lt;/p&gt;
&lt;h2&gt;基本ルール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;機能名をページファイル名とする&lt;/li&gt;
&lt;li&gt;マクロは小文字とする&lt;/li&gt;
&lt;li&gt;大文字 + 区切り文字 + 拡張子で構成される名前のファイルは、MarkdownからHTMLへの変換の際に無視される&lt;ul&gt;
&lt;li&gt;README.mdなど&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;演算子のファイル名&lt;/h2&gt;
&lt;p&gt;便宜的に、コンストラクタやデストラクタのような特殊メンバ関数も演算子という扱いにしている。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;演算子&lt;/th&gt;
&lt;th&gt;演算子名&lt;/th&gt;
&lt;th&gt;ファイル名&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_constructor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;クラス名をファイル名にはしない&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_destructor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイル名に &lt;code&gt;~&lt;/code&gt; (チルダ) が含まれないようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;クラステンプレートの推論補助&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_deduction_guide&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator[ ]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;添字演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_at&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数呼び出し演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_call&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator*&lt;/code&gt; (単項)&lt;/td&gt;
&lt;td&gt;間接参照演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_deref&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;dereferenceの略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator-&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ポインタアクセス演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_arrow&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator+=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;加算の複合代入&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_plus_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator-=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;減算の複合代入&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_minus_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator*=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;乗算の複合代入&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_multiply_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator/=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;除算の複合代入&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_divide_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator/=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;パス要素加算の複合代入&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_append_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;この演算子はファイルシステムの文脈で特殊な意味を持つ。&lt;br /&gt; 対応するメンバ関数&lt;code&gt;append()&lt;/code&gt;と合わせた命名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator%=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;剰余の複合代入&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_modulo_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;lt;&amp;lt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左ビットシフトの複合代入&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_left_shift_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;右ビットシフトの複合代入&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_right_shift_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;amp;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビット論理積の複合代入&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_and_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator|=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビット論理和の複合代入&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_or_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator^=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビット排他的論理和の複合代入&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_xor_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator++&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;インクリメント&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_increment&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前置・後置は同じページ内で解説する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator--&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デクリメント&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_decrement&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前置・後置は同じページ内で解説する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator+&lt;/code&gt; (単項)&lt;/td&gt;
&lt;td&gt;単項プラス演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_unary_plus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator-&lt;/code&gt; (単項)&lt;/td&gt;
&lt;td&gt;単項マイナス演算子 (符号反転)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_unary_minus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator!&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;論理反転演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_not&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator~&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビット反転演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_flip&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等値比較演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_equal&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator!=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非等値比較演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_not_equal&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;小なり演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_less&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;大なり演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_greater&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;lt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;以下演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_less_equal&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;以上演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_greater_equal&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;lt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;三方比較演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_compare_3way&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator+&lt;/code&gt; (二項)&lt;/td&gt;
&lt;td&gt;加算演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_plus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator-&lt;/code&gt; (二項)&lt;/td&gt;
&lt;td&gt;減算演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_minus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator*&lt;/code&gt; (二項)&lt;/td&gt;
&lt;td&gt;乗算演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_multiply&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator/&lt;/code&gt; (二項)&lt;/td&gt;
&lt;td&gt;除算演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_divide&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator/&lt;/code&gt; (二項)&lt;/td&gt;
&lt;td&gt;パス要素加算の演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_append&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;この演算子はファイルシステムの文脈で特殊な意味を持つ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator/&lt;/code&gt; (二項)&lt;/td&gt;
&lt;td&gt;カレンダー構文の演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_append&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間・日付ライブラリにおいて、この演算子はカレンダーの&lt;code&gt;YYYY/MM/DD&lt;/code&gt;のような表記をできるようにする意味をもつ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator%&lt;/code&gt; (二項)&lt;/td&gt;
&lt;td&gt;剰余演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_modulo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビット論理積演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_and&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator|&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビット論理和演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_or&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator^&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビット排他的論理和演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_xor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;amp;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;論理積演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_logical_and&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator||&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;論理和演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_logical_or&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビット左シフト演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_left_shift&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビット右シフト演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_right_shift&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力ストリーム演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_ostream&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビットシフトと意味論が異なるため、別ページとしている&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力ストリーム演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_istream&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビットシフトと意味論が異なるため、別ページとしている&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;C++にはこの表に含まれない演算子もいくつかあるが、ここでは標準ライブラリでオーバーロードされ、本サイトが掲載している演算子のみを記載している。&lt;/p&gt;
&lt;p&gt;この表に含まれない演算子として、以下のようなものもある：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;型変換演算子&lt;ul&gt;
&lt;li&gt;&lt;code&gt;operator int&lt;/code&gt;のような&lt;code&gt;int&lt;/code&gt;への型変換演算子は、&lt;code&gt;op_int&lt;/code&gt;のようなファイル名とする&lt;/li&gt;
&lt;li&gt;型の別名が使用される場合もあるが、&lt;code&gt;operator int_type&lt;/code&gt;型変換演算子の場合は、&lt;code&gt;op_int_type&lt;/code&gt;をファイル名とする&lt;/li&gt;
&lt;li&gt;規格で&lt;code&gt;operator unsigned&lt;/code&gt;を使用しているところは、&lt;code&gt;operator unsigned int&lt;/code&gt;とし、&lt;code&gt;op_unsigned_int&lt;/code&gt;をファイル名とする。&lt;code&gt;unsigned&lt;/code&gt;は&lt;code&gt;unsigned int&lt;/code&gt;の短縮だが、この短縮法は認知度が低いため&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;リテラル演算子&lt;ul&gt;
&lt;li&gt;&lt;code&gt;operator &#34;&#34;i&lt;/code&gt;のような&lt;code&gt;i&lt;/code&gt;サフィックスのリテラル演算子は、&lt;code&gt;op_i&lt;/code&gt;のようなファイル名とする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;同名のメンバ関数と非メンバ関数がある場合&lt;/h2&gt;
&lt;p&gt;非メンバ関数側のページファイル名末尾に&lt;code&gt;_free&lt;/code&gt;を付ける。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;free&lt;/code&gt;は「非メンバ関数 (non member function)」の通称である「フリー関数 (free function)」からきている。これを採用した理由は以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_non_member_function&lt;/code&gt;は長いため、短くしたい&lt;/li&gt;
&lt;li&gt;&lt;code&gt;member&lt;/code&gt;は男性器を意味するため、&lt;code&gt;function&lt;/code&gt;は省略できない&lt;/li&gt;
&lt;li&gt;規格用語にはないが、ページファイル名を短くするために便宜上&lt;code&gt;free&lt;/code&gt;を採用する&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;その他、例外的なページファイル名&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit_.html&#34;&gt;std::_Exit()&lt;/a&gt;&lt;/code&gt;は、ページファイル名を先頭アンダースコアしたところ、Chromeブラウザで404 Page Not Foundとなったため、回避策として末尾にアンダースコアを付けている&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>乱数分布の図を作る方法 -- 編集者向け資料をリネームし、「cpprefjpを編集するには」をサイドバーに表示</title>
      <link href="https://cpprefjp.github.io/start_editing/random_figure.html"/>
      <id>85bebb584efb6141b4026ff231e7630aba3f4f27:start_editing/random_figure.md</id>
      <updated>2023-01-12T14:24:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/random_figure.md b/start_editing/random_figure.md
new file mode 100644
index 000000000..7508d565c
--- /dev/null
+++ b/start_editing/random_figure.md
@@ -0,0 +1,110 @@
+# 乱数分布の図を作る方法
+
+[`&amp;lt;random&amp;gt;`](/reference/random.md)ライブラリには、数多くの分布法に関するクラスが用意されています。その分布を可視化するために、それらのクラス概要ページには図を入れています。  
+ここでは、その図を作る方法を紹介します。
+
+一様整数分布を行う[`std::uniform_int_distribution`](/reference/random/uniform_int_distribution.md)クラスを例にします。
+
+
+## 分布クラスのサンプルコード
+分布クラスのサンプルコードは、生成された乱数の値を、TSV(タブ区切り)テキストとして出力する形にします。`std::uniform_int_distribution`のサンプルコードは、例として以下のようになっています。
+
+```cpp example
+#include &amp;lt;random&amp;gt;
+#include &amp;lt;fstream&amp;gt;
+
+int main() 
+{
+  std::random_device seed_gen;
+  std::default_random_engine engine(seed_gen());
+
+  // 0以上9以下の値を等確率で発生させる
+  std::uniform_int_distribution&amp;lt;&amp;gt; dist(0, 9);
+
+  std::ofstream result_file(&amp;#34;uniform_int_distribution.tsv&amp;#34;);
+  for (size_t n = 0; n &amp;lt; 1000; ++n) {
+    // 一様整数分布で乱数を生成する
+    int result = dist(engine);
+
+    result_file &amp;lt;&amp;lt; result &amp;lt;&amp;lt; &amp;#34;\t\n&amp;#34;;
+  }
+}
+```
+
+これを出力すると、以下のようなファイル(uniform_int_distribution.tsv)が生成されます。
+```
+7
+5
+1
+6
+6
+6
+2
+0
+8
+8
+9
+1
+1
+9
+…
+```
+
+作成されたファイルは、どこかにとっておきます(後ほど、cpprefjp/imageリポジトリに登録してください)。
+
+
+## ツールのインストール
+図の作成には、R(またはR言語と呼ばれる)というツールを使用します。  
+
+
+公式サイト： https://www.r-project.org/
+
+
+各種環境向けにインストーラが提供されているので、公式サイトからダウンロードして、ご自分の環境にインストールしてください。
+
+
+## 図の作成
+Rは、GUIツールを使用しての図の作成はもちろん、Rスクリプトを使用してコマンドラインでも図を作成できます。  
+今回は、自動化のためにRスクリプトの方法を主に紹介します。  
+  
+以下のRスクリプトを、「random_stats.R」という名前でファイルに保存してください。
+```
+# 乱数の分布クラスを使用した結果の出力を、図に変換するRスクリプト
+
+# png形式で出力する
+png(&amp;#34;uniform_int_distribution.png&amp;#34;)
+
+# TSV形式になっている乱数の出力データを読み込む
+x &amp;lt;- read.table(&amp;#34;uniform_int_distribution.tsv&amp;#34;)
+
+# 1列目だけを抜き出す
+value = x$V1
+
+# 以下、データの特性に合わせて、ヒストグラムかプロットかを選択してください。
+
+# ヒストグラムとして出力
+# hist(value)
+
+# プロットとして出力
+plot(value)
+```
+
+出力する画像ファイル名と、入力のtsvファイル名を、分布クラスの名前に合わせて修正してください。  
+そして、コマンドラインで以下のコマンドを実行してください。
+
+```
+rscript random_stats.R
+```
+
+これで、`png()`関数で指定された画像ファイル名で、図が出力されます。  
+`std::uniform_int_distribution`クラスのサンプルコードでは、以下のような図が得られました。
+
+![](https://raw.github.com/cpprefjp/image/master/reference/random/uniform_int_distribution/uniform_int_distribution.png)
+
+この図は「プロット」と呼ばれる種類の図ですが、そのほか「ヒストグラム」等、いろいろな種類の図を出力できます。先ほどのrandom_stats.Rスクリプトに、ヒストグラムの図出力をコメントアウトしてあるので、分布クラスの特性に合わせて、図の種類を使い分けてください。
+
+
+## 参考
+* [とりあえずプロットする方法](http://cse.naro.affrc.go.jp/takezawa/r-tips/r/48.html)
+* [ヒストグラムをプロットする方法](http://cse.naro.affrc.go.jp/takezawa/r-tips/r/61.html)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cpprefjp特有の拡張構文 -- 編集者向け資料をリネームし、「cpprefjpを編集するには」をサイドバーに表示</title>
      <link href="https://cpprefjp.github.io/start_editing/specialized.html"/>
      <id>85bebb584efb6141b4026ff231e7630aba3f4f27:start_editing/specialized.md</id>
      <updated>2023-01-12T14:24:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/specialized.md b/start_editing/specialized.md
new file mode 100644
index 000000000..2ba83f231
--- /dev/null
+++ b/start_editing/specialized.md
@@ -0,0 +1,311 @@
+# cpprefjp特有の拡張構文
+
+* [mathjax enable]
+
+Markdownだけだと表現力が足りないため、cpprefjpでは構文を拡張しています。
+
+## 文章中のコード
+
+バッククォートによる文章中のコード指定では、バッククォート内の両端にスペースは使用できません。以下のようにスペースはバッククォートの外で使用すれば、コードとして連結されます。
+
+```markdown
+式`f(a,` [`std::make_shared`](/reference/memory/make_shared.md)`&amp;lt;X&amp;gt;(x));`が有効である場合、それを呼び出す。
+```
+
+結果：
+
+式`f(a,` [`std::make_shared`](/reference/memory/make_shared.md)`&amp;lt;X&amp;gt;(x));`が有効である場合、それを呼び出す。
+
+
+## コードブロック
+
+\`\`\` と \`\`\` で挟むことで、複数行に渡るコードを書けます。
+
+Markdown:
+
+````
+```
+#include &amp;lt;iostream&amp;gt;
+
+int x = 10;
+int main() {
+  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+}
+```
+````
+
+結果:
+
+```
+#include &amp;lt;iostream&amp;gt;
+
+int x = 10;
+int main() {
+  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+}
+```
+
+## シンタックスハイライト
+
+コードブロック開始側の \`\`\` の後ろに言語名を書くことで、その言語に対応したハイライトが行われます。
+
+Markdown:
+
+````
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+
+int x = 10;
+int main() {
+  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+}
+```
+````
+
+結果:
+
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+
+int x = 10;
+int main() {
+  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+}
+```
+
+## exampleタグ
+
+includeとmain関数を含む**原則すべてのC/C++言語のコードブロック**には`example`タグをつけてください。  
+`example`タグが付いたコードブロックはその場で実際にコンパイル・実行することができるようになります。  
+たとえコンパイルエラーになる場合でも、利用者がその場でコードを書き換えて試行することを容易にするために原則つけてください。
+
+````
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::cout &amp;lt;&amp;lt; &amp;#34;arikitari_na_world&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+```
+````
+
+つけない例としては次のような宣言が書いてあるのみのものが挙げられます。
+
+```cpp
+namespace std {
+  template &amp;lt;class T, class Allocator = allocator&amp;lt;T&amp;gt;&amp;gt;
+  class vector;
+}
+```
+
+## プログラムの修飾
+
+コードブロックの直後に特定の構文で記述することで、コードブロックの一部を修飾できます。
+
+Markdown:
+
+````
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+
+int x = 10;
+int main() {
+  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+}
+```
+* &amp;lt;iostream&amp;gt;[link /reference/iostream.md]
+* std[color ff0000]
+````
+
+結果:
+
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+
+int x = 10;
+int main() {
+  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+}
+```
+* &amp;lt;iostream&amp;gt;[link /reference/iostream.md]
+* std[color ff0000]
+
+修飾の範囲は、コードブロックの直後から空行が続くまで、です。
+空行があるとコードブロックに対する修飾を終わります。
+構文は、`* ＜対象文字列＞[＜命令＞ ＜引数＞]` です。
+現在用意されている命令は３つです。
+
+- `link`
+    - `＜対象文字列＞`にリンクを張ります。
+    - `＜引数＞`にはリンク先のURLを指定します。
+    - 指定可能なURLの形式は以下の3種類です。
+        - 絶対リンク: `http://example.com/foo/bar` のような形式
+        - サイト内絶対リンク: `/reference/iostream.md` のような形式
+        - サイト内相対リンク: `../reference/vector.md` のような形式
+    - サイト内へのリンクの場合、リンク先の存在チェックも行います。下記セクション参照。
+- `color`
+    - `＜対象文字列＞`に色を付けます。
+    - `＜引数＞`には色を`RRGGBB`（16進数）の形式で指定します。
+- `italic`
+    - `＜対象文字列＞`をイタリック体にします。
+    - `＜引数＞`はありません。
+
+### グローバル修飾
+
+全てのコードブロックでは、デフォルトの修飾が実行されます。
+これを **グローバル修飾** と呼びます。
+
+例えば `&amp;lt;vector&amp;gt;`, `&amp;lt;iostream&amp;gt;`, `&amp;lt;algorithm&amp;gt;`, `&amp;lt;iterator&amp;gt;`, `std::vector`, `v.begin()`, `v.end()`, `std::copy`, `std::ostream_iterator` 等はグローバル修飾されるため、特に修飾を書かなくてもリンクになります。
+
+```cpp example
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = { 1, 2, 3 };
+  std::copy(v.begin(), v.end(), std::ostream_iterator&amp;lt;int&amp;gt;(std::cout, &amp;#34;, &amp;#34;));
+}
+```
+
+グローバル修飾の一覧は [GLOBAL_QUALIFY_LIST.txt](https://github.com/cpprefjp/site/blob/master/GLOBAL_QUALIFY_LIST.txt) にあります。
+
+## 定義語
+
+`GLOBAL_DEFINED_WORDS.json` に定義語を登録することができます。形式は `GLOBAL_DEFINED_WORDS.json` を参照して下さい。
+
+`link` にはその定義語の解説ページへのURLを指定します。`link` が指定されている場合、任意の記事中の (コード、リンク、見出しなどを除く) 地の文にその定義語が現れた時に、自動的に `link` へのハイパーリンクが貼られます。
+
+特に解説ページの定義箇所で `&amp;lt;dfn id=&amp;#34;識別子&amp;#34;&amp;gt;定義語&amp;lt;/dfn&amp;gt;` として `id` 属性を設定して、その箇所への直接リンクすることもできます。
+
+`desc` に簡単な説明が指定されている場合、地の文にあるその定義語にマウスカーソルを合わせると説明がツールチップとして表示されます。
+
+`yomi` には平仮名およびアルファベットでその定義語の読みを指定します。現在は使用されていませんが将来的に定義語が増えてきた時に、用語集または索引ページを自動生成する時の並び替えに使われる予定です。
+
+## リンクの存在チェック
+
+CommonMark形式のリンクや独自拡張のプログラムの修飾`link`などで生成されるHTMLにリンクが埋め込まれるとき、リンク先がサイト内へのリンクだった場合、リンク先の存在チェックも行います。
+
+リンク先が存在しなかった場合、変換時に以下の様なメッセージが **標準エラーに** 出力されます。
+
+```
+Warning: [editors_doc/specialized.md] href &amp;#34;/reference/foobar.md (/reference/foobar.html)&amp;#34; not found.
+```
+
+このメッセージが出た場合、リンクが切れているため、編集して修正して下さい。
+
+ただ「今後そのリンク先を作る予定なので、このリンクは残しておきたい」ということもあります。
+そのような場合には `.nolink` が使えます。
+
+````
+```cpp
+#include &amp;lt;std_header&amp;gt;
+```
+* &amp;lt;std_header&amp;gt;[link /reference/std_header.md.nolink]
+````
+
+このように`link`のURLの最後に `.nolink` を指定すると、リンク先が存在しなかった場合には、以下の様なメッセージが **標準出力に** 出力されます。
+
+```
+Note: You can create /reference/foobar.md for editors_doc/specialized.md.
+```
+
+このようにNoteが表示されるため、このページを作る予定があるというのを思い出させてくれます。
+
+もし `/reference/foobar.md` を作り、`.nolink` を消し忘れていたとしても大丈夫です。
+以下の様なメッセージが **標準エラーに** 出力されます。
+
+```
+Warning: [nolinked editors_doc/specialized.md] href &amp;#34;/reference/foobar.md.nolink (/reference/foobar.md.nolink)&amp;#34; found.
+```
+
+## メタ情報
+
+ページのどこか（通常はページタイトルの下）に `* ＜メタ情報＞[meta ＜メタ情報タイプ＞]` という構文で書くことで、メタ情報を記述できます。
+記述可能なメタ情報は以下の通りです。
+
+* `[meta header]`: 所属ヘッダを表すメタ情報
+    * 例: `* chrono[meta header]`
+* `[meta category]`: 説明用の機能群を表すメタ情報
+* `[meta id-type]`: 識別子の種別を表すメタ情報。class, class template, function, function template, enum, variable, type-alias, macro, namespace, concept, named requirement
+* `[meta namespace]`: 所属する名前空間を表すメタ情報。マクロを考慮して省略可。名前空間の区切りは`::`
+    * 例: `* std[meta namespace]`
+    * 例: `* std::chrono[meta namespace]`
+* `[meta class]`: 所属するクラスを表すメタ情報。クラスページでは省略する。structとは書けない
+* `[meta cpp]`: 機能が追加・非推奨・削除されたバージョンを表すメタ情報。改行して複数指定ができる。
+    * `* cpp11[meta cpp]` : C++11で追加された機能
+    * `* cpp14[meta cpp]` : C++14で追加された機能
+    * `* cpp17[meta cpp]` : C++17で追加された機能
+    * `* cpp20[meta cpp]` : C++20で追加された機能
+    * `* cpp23[meta cpp]` : C++23で追加された機能
+    * `* cpp11deprecated[meta cpp]` : C++11で非推奨になった機能
+    * `* cpp14deprecated[meta cpp]` : C++14で非推奨になった機能
+    * `* cpp14removed[meta cpp]` : C++14で削除された機能
+    * `* cpp17deprecated[meta cpp]` : C++17で非推奨になった機能
+    * `* cpp17removed[meta cpp]` : C++17で削除された機能
+    * `* cpp20deprecated[meta cpp]` : C++20で非推奨になった機能
+    * `* cpp20removed[meta cpp]` : C++20で削除された機能
+    * `* cpp23deprecated[meta cpp]` : C++23で非推奨になった機能
+    * `* cpp23removed[meta cpp]` : C++23で削除された機能
+
+## 数式
+
+cpprefjpでは、数式をLaTeX形式で記述できます。
+内部的には[MathJax](https://www.mathjax.org/)を利用しています。
+
+MathJaxを使うためにはまず、ページのどこか（通常はページタイトルの下）に、以下のように記述してMathJaxを有効にする必要があります。
+
+* `* [mathjax enable]`
+
+こうすることで、LaTeX形式で数式を記述できるようになります。
+
+インライン用は以下のように書きます。
+
+Markdown:
+
+```
+$x = \frac{ -b \pm \sqrt{ b^{2} - 4 a c } }{2 a}$
+```
+
+結果:
+
+$x = \frac{ -b \pm \sqrt{ b^{2} - 4 a c } }{2 a}$
+
+ブロック用は以下のように書きます。
+
+Markdown:
+
+```
+$$
+\left\{
+\begin{array}{ll}
+p \log_{10}b&amp;amp;amp;\text{もし $b$ が $10$ の累乗の場合}\\
+\lfloor (p - 1) \log_{10} b\rfloor&amp;amp;amp;\text{上記以外の場合}\\
+\end{array}
+\right.
+$$
+```
+
+結果:
+$$
+\left\{
+\begin{array}{ll}
+p \log_{10}b&amp;amp;amp;\text{もし $b$ が $10$ の累乗の場合}\\
+\lfloor (p - 1) \log_{10} b\rfloor&amp;amp;amp;\text{上記以外の場合}\\
+\end{array}
+\right.
+$$
+
+
+## 使用できないMarkdown / HTMLの機能
+- ブロックコメント (実装に使用しているMarkdownパーサーによる制限)
+    ```
+    &amp;lt;!--
+
+    comment out text...
+
+    --&amp;gt;
+    ```
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- 編集者向け資料をリネームし、「cpprefjpを編集するには」をサイドバーに表示</title>
      <link href="https://cpprefjp.github.io/start_editing/type-type_template_page.html"/>
      <id>85bebb584efb6141b4026ff231e7630aba3f4f27:start_editing/type-type_template_page.md</id>
      <updated>2023-01-12T14:24:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/type-type_template_page.md b/start_editing/type-type_template_page.md
new file mode 100644
index 000000000..f5bc4ae54
--- /dev/null
+++ b/start_editing/type-type_template_page.md
@@ -0,0 +1,94 @@
+# page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください)
+
+([cpprefjpを編集するには](/start_editing.md) および [cpprefjp特有の拡張構文](specialized.md) を先に読んで下さい。)
+
+(
+  サンプルコードは文章中のどの部分で書いても大丈夫です。閲覧者の理解を助けるために必要だと感じたところで入れてください。
+  その際拡張構文である`example`タグをルールに従って付け、コンパイル・実行可能にすることを検討してください。
+)
+
+* header_name[meta header]
+* type-alias[meta id-type]
+* std[meta namespace]
+* class_name[meta class]
+* cpp17[meta cpp]
+
+&amp;lt;!-- `[meta header]`は、所属ヘッダを表すメタ情報 --&amp;gt;
+&amp;lt;!-- `[meta id-type]`は、識別子の種別を表すメタ情報。class, class template, function, function template, enum, variable, type-alias, concept, macro, namespace --&amp;gt;
+&amp;lt;!-- `[meta namespace]`は、所属する名前空間を表すメタ情報。マクロを考慮して省略可。名前空間の区切りは`::` --&amp;gt;
+&amp;lt;!-- `[meta class]`は、所属するクラスを表すメタ情報。クラスページでは省略する。structとは書けない --&amp;gt;
+&amp;lt;!-- `[meta cpp]`は、機能が追加・非推奨・削除されたバージョンを表すメタ情報。改行して複数指定ができる。 --&amp;gt;
+&amp;lt;!--    `cpp11[meta cpp]` : C++11で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp14[meta cpp]` : C++14で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp17[meta cpp]` : C++17で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp20[meta cpp]` : C++20で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp23[meta cpp]` : C++23で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp26[meta cpp]` : C++26で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp11deprecated[meta cpp]` : C++11で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp14deprecated[meta cpp]` : C++14で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp14removed[meta cpp]` : C++14で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp17deprecated[meta cpp]` : C++17で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp17removed[meta cpp]` : C++17で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp20deprecated[meta cpp]` : C++20で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp20removed[meta cpp]` : C++20で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp23deprecated[meta cpp]` : C++23で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp23removed[meta cpp]` : C++23で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp26deprecated[meta cpp]` : C++26で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp26removed[meta cpp]` : C++26で削除された機能 --&amp;gt;
+&amp;lt;!--    `future[meta cpp]` : 将来のC++で検討されている機能 --&amp;gt;
+&amp;lt;!--    `archive[meta cpp]` : 廃案になったが記録として残す価値のあるC++機能 --&amp;gt;
+
+```cpp
+typedef origin_type new_type;
+```
+
+## 概要
+(ここには、型の概要を記述します。必須事項です。)
+
+(必要な項目を省略する場合には、「(執筆中)」と書いておいてください。)
+
+これは、メンバ型等の、型の別名定義を解説するページの雛形です。
+
+ページ名の先頭に「`type-`」を付けることにより、cpprefjpサイト左部のサイドバーに並ぶページの順番を制御できます。その接頭辞を付けた場合には、型のページは並びの最後に来ます(関数、演算子、型の順番)。
+
+
+## 備考
+(用途、注意事項、バージョンによる変更の経緯などを書いてください。省略可能です)
+
+
+## 例
+
+```cpp example
+// (ここには、関数・変数・定数を解説するための、サンプルコードを記述します。省略可能です)
+// (インクルードとmain()関数を含む、実行可能なサンプルコードを記述してください。そのようなコードブロックにはexampleタグを付けます。)
+```
+
+### 出力
+```
+```
+
+(ここには、サンプルコードの実行結果を記述します。何も出力がない場合は、項目を削除せず、空の出力にしてください。)  
+(実行結果が処理系・実行環境によって異なる場合は、項目名を「出力例」に変更し、可能であればその理由も併記してください。)
+
+
+### 処理系
+- [Clang](/implementation.md#clang): 1.9, 2.9, 3.0, 3.1, 3.2, 3.3
+- [GCC](/implementation.md#gcc): 4.3.6, 4.4.7, 4.5.3, 4.6.3, 4.7.2, 4.8.1
+- [ICC](/implementation.md#icc): 10.1, 11.0, 11.1, 12.0
+- [Visual C++](/implementation.md#visual_cpp): 2003, 2005, 2008, 2010, 2012
+
+(ここには、その機能が存在する言語のバージョンと、確認がとれたコンパイラとそのバージョンを記述します。)  
+(これらの項目を削除した場合、C++03のあらゆる環境で使用できることを意味します。)
+(確認のテストできないときは、??を記述してください。)
+
+### 備考
+(処理系ごとに存在するバグや注意事項を記述します。とくにない場合は、項目を削除してください。)
+
+
+## 関連項目
+(ここには、その機能と関連のあるcpprefjpサイト内の項目へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)
+
+
+## 参照
+(ここには、その関数・変数・定数を理解するにあたっての参考資料や、関連する機能へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>apply -- apply : オーバーロードに番号をつけた</title>
      <link href="https://cpprefjp.github.io/reference/tuple/apply.html"/>
      <id>a73f34d4e7f371a8d311d7c539471422fbeebc90:reference/tuple/apply.md</id>
      <updated>2023-01-12T12:00:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/apply.md b/reference/tuple/apply.md
index f59d632a3..77d6e1845 100644
--- a/reference/tuple/apply.md
+++ b/reference/tuple/apply.md
@@ -7,10 +7,12 @@
 ```cpp
 namespace std {
   template&amp;lt;class F, class Tuple&amp;gt;
-  constexpr decltype(auto) apply(F&amp;amp;&amp;amp; f, Tuple&amp;amp;&amp;amp; t);  // C++20まで
+  constexpr decltype(auto)
+    apply(F&amp;amp;&amp;amp; f, Tuple&amp;amp;&amp;amp; t);                     // (1) C++20
 
   template&amp;lt;class F, class Tuple&amp;gt;
-  constexpr decltype(auto) apply(F&amp;amp;&amp;amp; f, Tuple&amp;amp;&amp;amp; t) noexcept(see below);  // C++23から
+  constexpr decltype(auto)
+    apply(F&amp;amp;&amp;amp; f, Tuple&amp;amp;&amp;amp; t) noexcept(see below); // (1) C++23
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>apply -- apply : fix typo</title>
      <link href="https://cpprefjp.github.io/reference/tuple/apply.html"/>
      <id>b66903af7aae0c27ac7f4bf5ea730cb11c731609:reference/tuple/apply.md</id>
      <updated>2023-01-12T12:00:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/apply.md b/reference/tuple/apply.md
index fdc9db56f..f59d632a3 100644
--- a/reference/tuple/apply.md
+++ b/reference/tuple/apply.md
@@ -109,4 +109,4 @@ hello
 - [P0220R1 Adopt Library Fundamentals V1 TS Components for C++17 (R1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0220r1.html)
 - [C++1z タプルを展開して関数呼び出しするapply関数 - Faith and Brave - C++で遊ぼう](https://faithandbrave.hateblo.jp/entry/2016/08/18/184315)
 - [P2517R1 Add a conditional `noexcept` specification to `std::apply`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2517r1.html)
-    - C++23から条件付きで`noexpcet`例外指定が行われる。
+    - C++23から条件付きで`noexcept`例外指定が行われる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-04-13T07:10:32.024679</updated>
  <id>12c9ab55-8cb9-4b1c-9878-ae5c1773d447</id>

  
    <entry>
      <title>execution -- execution: completion_signatures(_of_t) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>2b4f515d6dfc34bc27456f9cd7545cc12be25ccb:reference/execution/execution.md</id>
      <updated>2025-04-13T16:06:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index 27f6d74f6..bb710c76c 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -63,7 +63,7 @@ namespace std::execution {
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
 | [`execution::receiver`](execution/receiver.md) | Receiver型 (concept) | C++26 |
-| [`execution::receiver_of`](execution/receiver_of.md) | 完了シグネチャ集合を持つReceiver (concept) | C++26 |
+| [`execution::receiver_of`](execution/receiver_of.md) | 指定完了シグネチャ集合に適合するReceiver (concept) | C++26 |
 | [`execution::set_value`](execution/set_value.md.nolink) | 値による完了関数 (customization point object) | C++26 |
 | [`execution::set_error`](execution/set_error.md.nolink) | エラーによる完了関数 (customization point object) | C++26 |
 | [`execution::set_stopped`](execution/set_stopped.md.nolink) | 停止による完了関数 (customization point object) | C++26 |
@@ -83,8 +83,8 @@ namespace std::execution {
 | [`execution::sender`](execution/sender.md) | Sender型 (concept) | C++26 |
 | [`execution::sender_in`](execution/sender_in.md) | 指定環境で有効なSender (concept) | C++26 |
 | [`execution::sender_to`](execution/sender_to.md) | 指定Receiverに接続可能なSender (concept) | C++26 |
-| [`execution::get_completion_signatures`](execution/get_completion_signatures.md.nolink) | 完了シグネチャ取得の問い合わせオブジェクト (customization point object) | C++26 |
-| [`execution::completion_signatures_of_t`](execution/get_completion_signatures.md.nolink) | Senderから完了シグネチャを取得 (alias template) | C++26 |
+| [`execution::get_completion_signatures`](execution/get_completion_signatures.md.nolink) | 完了シグネチャ集合取得の問い合わせオブジェクト (customization point object) | C++26 |
+| [`execution::completion_signatures_of_t`](execution/completion_signatures_of_t.md) | Senderから完了シグネチャ集合を取得 (alias template) | C++26 |
 | [`execution::value_types_of_t`](execution/value_types_of_t.md.nolink) | Senderの値完了型を取得 (alias template) | C++26 |
 | [`execution::error_types_of_t`](execution/error_types_of_t.md.nolink) | Senderのエラー完了型を取得 (alias template) | C++26 |
 | [`execution::sends_stopped`](execution/value_types_of_t.md.nolink) | Senderが停止完了に対応するか否か (variable template) | C++26 |
@@ -142,7 +142,7 @@ Senderコンシューマは名前空間 `std::this_thread` で定義される。
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`execution::completion_signatures`](execution/completion_signatures.md.nolink) | 完了シグネチャ (class template) | C++26 |
+| [`execution::completion_signatures`](execution/completion_signatures.md) | 完了シグネチャ集合を表現する型 (class template) | C++26 |
 | [`execution::transform_completion_signatures`](execution/transform_completion_signatures.md.nolink) | 完了シグネチャを変換 (alias template) | C++26 |
 | [`execution::transform_completion_signatures_of`](execution/transform_completion_signatures_of.md.nolink) | 完了シグネチャを変換 (alias template) | C++26 |
 | [`execution::run_loop`](execution/run_loop.md.nolink) | 実行ループ (class) | C++26 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>completion_signatures -- execution: completion_signatures(_of_t) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/completion_signatures.html"/>
      <id>2b4f515d6dfc34bc27456f9cd7545cc12be25ccb:reference/execution/execution/completion_signatures.md</id>
      <updated>2025-04-13T16:06:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/completion_signatures.md b/reference/execution/execution/completion_signatures.md
new file mode 100644
index 000000000..1db91919a
--- /dev/null
+++ b/reference/execution/execution/completion_signatures.md
@@ -0,0 +1,76 @@
+# completion_signatures
+* execution[meta header]
+* class template[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  template&amp;lt;completion-signature... Fns&amp;gt;
+  struct completion_signatures {};
+}
+```
+
+## 概要
+`completion_signatures`クラステンプレートは、完了シグネチャの集合をテンプレートパラメータとして表現する。
+
+
+## テンプレートパラメータ制約
+`Fns`の各要素`Fn`が、下記の説明専用コンセプト`completion-signature`を満たすこと。
+
+```cpp
+template&amp;lt;class Fn&amp;gt;
+concept completion-signature = see below;
+```
+* see below[italic]
+
+型`Fn`が下記いずれかを満たす関数型であるとき、`Fn`はコンセプト`completion-signature`を満たす。
+- `set_value_t(Vs...)`（`Vs`はオブジェクト型または参照型のパック）
+- `set_error_t(Err)`（`Err`はオブジェクト型または参照型）
+- `set_stopped_t()`
+
+
+## 例
+```cpp example
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  // 下記の完了操作をサポートする
+  //   値完了     ex::set_value(int), ex::set_value(int, int)
+  //   エラー完了 ex::set_error(std::exception_ptr)
+  //   停止完了   ex::set_stopped()
+  using Sigs = ex::completion_signatures&amp;lt;
+    ex::set_value_t(int),
+    ex::set_value_t(int, int),
+    ex::set_error_t(std::exception_ptr),
+    ex::set_stopped_t()
+  &amp;gt;;
+}
+```
+* ex::completion_signatures[color ff0000]
+* std::exception_ptr[link /reference/exception/exception_ptr.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::receiver`](receiver.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>completion_signatures_of_t -- execution: completion_signatures(_of_t) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/completion_signatures_of_t.html"/>
      <id>2b4f515d6dfc34bc27456f9cd7545cc12be25ccb:reference/execution/execution/completion_signatures_of_t.md</id>
      <updated>2025-04-13T16:06:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/completion_signatures_of_t.md b/reference/execution/execution/completion_signatures_of_t.md
new file mode 100644
index 000000000..6a4fc2009
--- /dev/null
+++ b/reference/execution/execution/completion_signatures_of_t.md
@@ -0,0 +1,36 @@
+# completion_signatures_of_t
+* execution[meta header]
+* std::execution[meta namespace]
+* type-alias[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  template&amp;lt;class Sndr, class Env = env&amp;lt;&amp;gt;&amp;gt;
+    requires sender_in&amp;lt;Sndr, Env&amp;gt;
+  using completion_signatures_of_t = call-result-t&amp;lt;get_completion_signatures_t, Sndr, Env&amp;gt;;
+}
+```
+* env&amp;lt;&amp;gt;[link env.md.nolink]
+* sender_in[link sender_in.md]
+* call-result-t[link call-result-t.md.nolink]
+* sender_in[link sender_in.md]
+
+## 概要
+
+[Sender型](sender.md)`Sndr`から[環境](env.md.nolink)`Env`における[完了シグネチャ集合](completion_signatures.md)を取得する。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>receiver_of -- execution: completion_signatures(_of_t) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/receiver_of.html"/>
      <id>2b4f515d6dfc34bc27456f9cd7545cc12be25ccb:reference/execution/execution/receiver_of.md</id>
      <updated>2025-04-13T16:06:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/receiver_of.md b/reference/execution/execution/receiver_of.md
index d2093b3dd..e030a93fb 100644
--- a/reference/execution/execution/receiver_of.md
+++ b/reference/execution/execution/receiver_of.md
@@ -12,7 +12,7 @@ namespace std::execution {
 ```
 
 ## 概要
-`receiver_of`は、[Receiver型](receiver.md)`Rcvr`が完了シグネチャの集合`Completions`に適合することを表すコンセプトである。
+`receiver_of`は、[Receiver型](receiver.md)`Rcvr`が[完了シグネチャ集合](completion_signatures.md)`Completions`に適合することを表すコンセプトである。
 
 
 ## 要件
@@ -35,7 +35,7 @@ concept has-completions =
   };
 ```
 * callable[link /reference/functional/callable.md.nolink]
-* completion_signatures[link completion_signatures.md.nolink]
+* completion_signatures[link completion_signatures.md]
 
 `receiver_of`コンセプトは、以下のように定義される。
 
@@ -70,7 +70,7 @@ int main()
 }
 ```
 * ex::receiver_of[color ff0000]
-* ex::completion_signatures[link completion_signatures.md.nolink]
+* ex::completion_signatures[link completion_signatures.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sender_in -- execution: completion_signatures(_of_t) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/sender_in.html"/>
      <id>2b4f515d6dfc34bc27456f9cd7545cc12be25ccb:reference/execution/execution/sender_in.md</id>
      <updated>2025-04-13T16:06:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/sender_in.md b/reference/execution/execution/sender_in.md
index 6ec847e70..00c8523b1 100644
--- a/reference/execution/execution/sender_in.md
+++ b/reference/execution/execution/sender_in.md
@@ -29,7 +29,7 @@ namespace std::execution {
 ## モデル
 説明用に`sndr`を`decltype((sndr))`が`Sndr`型となる式、`rcvr`を環境`Env`に関連付けられた[Receiver](receiver.md)とする。
 
-また、ある完了操作の完了シグネチャが[`completion_signatures_of_t`](completion_signatures_of_t.md.nolink)`&amp;lt;Sndr, Env&amp;gt;`で取得される[`completion_signatures`](completion_signatures.md.nolink)リストに含まれるとき、`Sndr`と`Env`における許容可能完了(permissible completion)となる。
+また、ある完了操作の完了シグネチャが[`completion_signatures_of_t`](completion_signatures_of_t.md)`&amp;lt;Sndr, Env&amp;gt;`で取得される[`completion_signatures`](completion_signatures.md)リストに含まれるとき、`Sndr`と`Env`における許容可能完了(permissible completion)となる。
 
 `sndr`と`rcvr`の接続後に[Operation State](operation_state.md.nolink)を開始することで評価されうる完了操作が、全て許容可能完了(permissible completion)である場合、`Sndr`と`Env`は`sender_in&amp;lt;Sndr, Env&amp;gt;`のモデルとなる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sender_to -- execution: completion_signatures(_of_t) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/sender_to.html"/>
      <id>2b4f515d6dfc34bc27456f9cd7545cc12be25ccb:reference/execution/execution/sender_to.md</id>
      <updated>2025-04-13T16:06:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/sender_to.md b/reference/execution/execution/sender_to.md
index ae91b656a..1fe7b9055 100644
--- a/reference/execution/execution/sender_to.md
+++ b/reference/execution/execution/sender_to.md
@@ -18,7 +18,7 @@ namespace std::execution {
 * sender_in[link sender_in.md]
 * env_of_t[link env_of_t.md.nolink]
 * receiver_of[link receiver_of.md]
-* completion_signatures_of_t[link completion_signatures_of_t.md.nolink]
+* completion_signatures_of_t[link completion_signatures_of_t.md]
 * connect[link connect.md.nolink]
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>execution -- execution: receiver,receiver_of (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>3e8c7c755f38a9dfdd76adb535addd85b51f369a:reference/execution/execution.md</id>
      <updated>2025-04-13T14:48:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index 9decab877..27f6d74f6 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -62,8 +62,8 @@ namespace std::execution {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`execution::receiver`](execution/receiver.md.nolink) | Receiver (concept) | C++26 |
-| [`execution::receiver_of`](execution/receiver_of.md.nolink) | 完了ハンドラ指定Receiver (concept) | C++26 |
+| [`execution::receiver`](execution/receiver.md) | Receiver型 (concept) | C++26 |
+| [`execution::receiver_of`](execution/receiver_of.md) | 完了シグネチャ集合を持つReceiver (concept) | C++26 |
 | [`execution::set_value`](execution/set_value.md.nolink) | 値による完了関数 (customization point object) | C++26 |
 | [`execution::set_error`](execution/set_error.md.nolink) | エラーによる完了関数 (customization point object) | C++26 |
 | [`execution::set_stopped`](execution/set_stopped.md.nolink) | 停止による完了関数 (customization point object) | C++26 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>receiver -- execution: receiver,receiver_of (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/receiver.html"/>
      <id>3e8c7c755f38a9dfdd76adb535addd85b51f369a:reference/execution/execution/receiver.md</id>
      <updated>2025-04-13T14:48:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/receiver.md b/reference/execution/execution/receiver.md
new file mode 100644
index 000000000..b611d9882
--- /dev/null
+++ b/reference/execution/execution/receiver.md
@@ -0,0 +1,78 @@
+# receiver
+* execution[meta header]
+* concept[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  template&amp;lt;class Rcvr&amp;gt;
+  concept receiver =
+    derived_from&amp;lt;typename remove_cvref_t&amp;lt;Rcvr&amp;gt;::receiver_concept, receiver_t&amp;gt; &amp;amp;&amp;amp;
+    requires(const remove_cvref_t&amp;lt;Rcvr&amp;gt;&amp;amp; rcvr) {
+      { get_env(rcvr) } -&amp;gt; queryable;
+    } &amp;amp;&amp;amp;
+    move_constructible&amp;lt;remove_cvref_t&amp;lt;Rcvr&amp;gt;&amp;gt; &amp;amp;&amp;amp;
+    constructible_from&amp;lt;remove_cvref_t&amp;lt;Rcvr&amp;gt;, Rcvr&amp;gt;;
+
+  struct receiver_t {};  // タグ型
+}
+```
+* get_env[link get_env.md.nolink]
+* queryable[link queryable.md.nolink]
+* derived_from[link /reference/concepts/derived_from.md]
+* move_constructible[link /reference/concepts/move_constructible.md]
+* constructible_from[link /reference/concepts/constructible_from.md]
+
+## 概要
+`receiver`は、型`Rcvr`がReceiver型の要件を満たすことを表すコンセプトである。
+
+`receiver_t`をメンバ型`Rcvr::receiver_concept`として定義するクラス型はReceiverとみなせる。
+
+
+## モデル
+`final`指定されたクラス型は`receiver`のモデルではない。
+
+
+## 例
+```cpp example
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+struct SinkReceiver {
+  using receiver_concept = ex::receiver_t;
+
+  void set_value(auto&amp;amp;&amp;amp;...) noexcept {}
+  void set_error(auto&amp;amp;&amp;amp;) noexcept {}
+  void set_stopped() noexcept {}
+};
+
+int main()
+{
+  static_assert(ex::receiver&amp;lt;SinkReceiver&amp;gt;);
+}
+```
+* ex::receiver[color ff0000]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::receiver_of`](receiver_of.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>receiver_of -- execution: receiver,receiver_of (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/receiver_of.html"/>
      <id>3e8c7c755f38a9dfdd76adb535addd85b51f369a:reference/execution/execution/receiver_of.md</id>
      <updated>2025-04-13T14:48:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/receiver_of.md b/reference/execution/execution/receiver_of.md
new file mode 100644
index 000000000..d2093b3dd
--- /dev/null
+++ b/reference/execution/execution/receiver_of.md
@@ -0,0 +1,96 @@
+# receiver_of
+* execution[meta header]
+* concept[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  template&amp;lt;class Rcvr, class Completions&amp;gt;
+  concept receiver_of;
+}
+```
+
+## 概要
+`receiver_of`は、[Receiver型](receiver.md)`Rcvr`が完了シグネチャの集合`Completions`に適合することを表すコンセプトである。
+
+
+## 要件
+説明専用コンセプト`valid-completion-for`, `has-completions`を以下のように定義する。
+
+```cpp
+template&amp;lt;class Signature, class Rcvr&amp;gt;
+concept valid-completion-for =
+  requires (Signature* sig) {
+    []&amp;lt;class Tag, class... Args&amp;gt;(Tag(*)(Args...))
+      requires callable&amp;lt;Tag, remove_cvref_t&amp;lt;Rcvr&amp;gt;, Args...&amp;gt;
+    {}(sig);
+  };
+
+template&amp;lt;class Rcvr, class Completions&amp;gt;
+concept has-completions =
+  requires (Completions* completions) {
+    []&amp;lt;valid-completion-for&amp;lt;Rcvr&amp;gt;...Sigs&amp;gt;(completion_signatures&amp;lt;Sigs...&amp;gt;*)
+    {}(completions);
+  };
+```
+* callable[link /reference/functional/callable.md.nolink]
+* completion_signatures[link completion_signatures.md.nolink]
+
+`receiver_of`コンセプトは、以下のように定義される。
+
+```cpp
+template&amp;lt;class Rcvr, class Completions&amp;gt;
+concept receiver_of =
+  receiver&amp;lt;Rcvr&amp;gt; &amp;amp;&amp;amp; has-completions&amp;lt;Rcvr, Completions&amp;gt;;
+```
+* receiver&amp;lt;Rcvr&amp;gt;[link receiver.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+struct ValueReceiver {
+  using receiver_concept = ex::receiver_t;
+
+  void set_value(int) noexcept;
+};
+
+int main()
+{
+  // 完了操作ex::set_value(int)に対応
+  static_assert(ex::receiver_of&amp;lt;ValueReceiver,
+    ex::completion_signatures&amp;lt;ex::set_value_t(int)&amp;gt;&amp;gt;);
+
+  // 完了操作ex::set_value(int, int)には非対応
+  static_assert(not ex::receiver_of&amp;lt;ValueReceiver,
+    ex::completion_signatures&amp;lt;ex::set_value_t(int, int)&amp;gt;&amp;gt;);
+}
+```
+* ex::receiver_of[color ff0000]
+* ex::completion_signatures[link completion_signatures.md.nolink]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::receiver`](receiver.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sender_in -- execution: receiver,receiver_of (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/sender_in.html"/>
      <id>3e8c7c755f38a9dfdd76adb535addd85b51f369a:reference/execution/execution/sender_in.md</id>
      <updated>2025-04-13T14:48:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/sender_in.md b/reference/execution/execution/sender_in.md
index 9bc2fbbab..6ec847e70 100644
--- a/reference/execution/execution/sender_in.md
+++ b/reference/execution/execution/sender_in.md
@@ -23,11 +23,11 @@ namespace std::execution {
 * valid-completion-signatures[link valid-completion-signatures.md.nolink]
 
 ## 概要
-`sender_in`は、[Sender型](sender.md)`Sndr`が[環境](env.md.nolink)`Env`において非同期操作を作成できること表すコンセプトである。
+`sender_in`は、[Sender型](sender.md)`Sndr`が[環境](env.md.nolink)`Env`において非同期操作を作成できることを表すコンセプトである。
 
 
 ## モデル
-説明用に`sndr`を`decltype((sndr))`が`Sndr`型となる式、`rcvr`を環境`Env`に関連付けられた[Receiver](receiver.md.nolink)とする。
+説明用に`sndr`を`decltype((sndr))`が`Sndr`型となる式、`rcvr`を環境`Env`に関連付けられた[Receiver](receiver.md)とする。
 
 また、ある完了操作の完了シグネチャが[`completion_signatures_of_t`](completion_signatures_of_t.md.nolink)`&amp;lt;Sndr, Env&amp;gt;`で取得される[`completion_signatures`](completion_signatures.md.nolink)リストに含まれるとき、`Sndr`と`Env`における許容可能完了(permissible completion)となる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sender_to -- execution: receiver,receiver_of (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/sender_to.html"/>
      <id>3e8c7c755f38a9dfdd76adb535addd85b51f369a:reference/execution/execution/sender_to.md</id>
      <updated>2025-04-13T14:48:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/sender_to.md b/reference/execution/execution/sender_to.md
index 4bbde047b..ae91b656a 100644
--- a/reference/execution/execution/sender_to.md
+++ b/reference/execution/execution/sender_to.md
@@ -17,19 +17,19 @@ namespace std::execution {
 ```
 * sender_in[link sender_in.md]
 * env_of_t[link env_of_t.md.nolink]
-* receiver_of[link receiver_of.md.nolink]
+* receiver_of[link receiver_of.md]
 * completion_signatures_of_t[link completion_signatures_of_t.md.nolink]
 * connect[link connect.md.nolink]
 
 ## 概要
-`sender_to`は、[Sender型](sender.md)`Sndr`が[Receiver型](receiver.md.nolink)`Rcvr`と接続可能であること表すコンセプトである。
+`sender_to`は、[Sender型](sender.md)`Sndr`が[Receiver型](receiver.md)`Rcvr`と接続可能であることを表すコンセプトである。
 
 
 ## 例
 ```cpp example
 #include &amp;lt;print&amp;gt;
 #include &amp;lt;execution&amp;gt;
-namespace ex = stdexec;
+namespace ex = std::execution;
 
 struct ValueReceiver {
   using receiver_concept = ex::receiver_t;
@@ -55,6 +55,7 @@ int main()
 }
 ```
 * ex::sender_to[color ff0000]
+* ex::sender[link sender.md]
 * ex::just[link just.md.nolink]
 * ex::operation_state[link operation_state.md.nolink]
 * ex::connect[link connect.md.nolink]
@@ -79,7 +80,7 @@ int main()
 
 ## 関連項目
 - [`execution::sender`](sender.md)
-- [`execution::receiver`](receiver.md.nolink)
+- [`execution::receiver`](receiver.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スタイル -- execution: receiver,receiver_of (#1384)</title>
      <link href="https://cpprefjp.github.io/working_style.html"/>
      <id>3e8c7c755f38a9dfdd76adb535addd85b51f369a:working_style.md</id>
      <updated>2025-04-13T14:48:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/working_style.md b/working_style.md
index 771c89b91..e1b6820e7 100644
--- a/working_style.md
+++ b/working_style.md
@@ -70,6 +70,7 @@ C++11以降対応については対応バージョンを明記します。バー
 | base class                         | 基底クラス                   |
 | bidirectional iterator             | 双方向イテレータ             |
 | bucket                             | バケット                     |
+| completion operation               | 完了操作                     |
 | completion signature               | 完了シグネチャ               |
 | complexity                         | 計算量                       |
 | compound type                      | 複合型                       |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sender -- execution/sender_*: 微調整 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/sender.html"/>
      <id>efc107008c743b1a01d9eae08fb4788c8117bd1f:reference/execution/execution/sender.md</id>
      <updated>2025-04-13T01:25:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/sender.md b/reference/execution/execution/sender.md
index 1b702b27d..671e7c6cc 100644
--- a/reference/execution/execution/sender.md
+++ b/reference/execution/execution/sender.md
@@ -48,9 +48,9 @@ struct env-promise : with-await-transform&amp;lt;env-promise&amp;lt;Env&amp;gt;&amp;gt; {
 };
 ```
 * is-awaitable[link is-awaitable.md.nolink]
-* env[link env.md.nolink]
+* env&amp;lt;&amp;gt;[link env.md.nolink]
 * derived_from[link /reference/concepts/derived_from.md]
-* coroutine_handle[link /reference/coroutine/coroutine_handle.md]
+* coroutine_handle&amp;lt;&amp;gt;[link /reference/coroutine/coroutine_handle.md]
 * unspecified[italic]
 
 `sender`コンセプトは、以下のように定義される。
@@ -73,7 +73,7 @@ concept sender =
 
 ## 備考
 `sender`コンセプトの制約式に現れる第1項`bool(enable-sender&amp;lt;...&amp;gt;)`は[原子制約(atomic contraint)](/lang/cpp20/concepts.md)を構成する。
-これによりオーバーロード解決時の優先順比較のためのにおいて`enable-sender`コンセプトの`||`を単純なOR条件とみなせ、コンパイル時の複雑な包摂関係計算コストを抑制できる。
+これによりオーバーロード解決時の優先順比較において`enable-sender`コンセプトの`||`を単純なOR条件とみなせ、コンパイル時の複雑な包摂関係計算コストを抑制できる。
 
 
 ## 例
@@ -107,8 +107,8 @@ int main()
 
 
 ## 関連項目
-- [`sender_in`](sender_in.md)
-- [`sender_to`](sender_to.md)
+- [`execution::sender_in`](sender_in.md)
+- [`execution::sender_to`](sender_to.md)
 - [コルーチン](/lang/cpp20/coroutines.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sender_in -- execution/sender_*: 微調整 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/sender_in.html"/>
      <id>efc107008c743b1a01d9eae08fb4788c8117bd1f:reference/execution/execution/sender_in.md</id>
      <updated>2025-04-13T01:25:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/sender_in.md b/reference/execution/execution/sender_in.md
index 43c09e6c4..9bc2fbbab 100644
--- a/reference/execution/execution/sender_in.md
+++ b/reference/execution/execution/sender_in.md
@@ -27,11 +27,11 @@ namespace std::execution {
 
 
 ## モデル
-説明用に`sndr`を`decltype((sndr))`が`Sndr`型となる式、`rcvr`を環境`Env`に関連付けられたReceiverと定義する。
+説明用に`sndr`を`decltype((sndr))`が`Sndr`型となる式、`rcvr`を環境`Env`に関連付けられた[Receiver](receiver.md.nolink)とする。
 
-また、ある完了操作の完了シグネチャが[`completion_signatures_of_t`](completion_signatures_of_t.md.nolink)`&amp;lt;Sndr, Env&amp;gt;`で取得される[`completion_signatures`](completion_signatures.md.nolink)リストに含まれるとき、`Sndr`と`Env`における許容可能完了操作(permissible completion)となる。
+また、ある完了操作の完了シグネチャが[`completion_signatures_of_t`](completion_signatures_of_t.md.nolink)`&amp;lt;Sndr, Env&amp;gt;`で取得される[`completion_signatures`](completion_signatures.md.nolink)リストに含まれるとき、`Sndr`と`Env`における許容可能完了(permissible completion)となる。
 
-`sndr`と`rcvr`の接続後に操作状態を開始することで評価されうる完了操作が、全て許容可能完了操作(permissible completion)である場合、`Sndr`と`Env`は`sender_in&amp;lt;Sndr, Env&amp;gt;`のモデルとなる。
+`sndr`と`rcvr`の接続後に[Operation State](operation_state.md.nolink)を開始することで評価されうる完了操作が、全て許容可能完了(permissible completion)である場合、`Sndr`と`Env`は`sender_in&amp;lt;Sndr, Env&amp;gt;`のモデルとなる。
 
 
 ## 例
@@ -67,8 +67,8 @@ int main()
 
 
 ## 関連項目
-- [`sender`](sender.md)
-- [`env`](env.md.nolink)
+- [`execution::sender`](sender.md)
+- [`execution::env`](env.md.nolink)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sender_to -- execution/sender_*: 微調整 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/sender_to.html"/>
      <id>efc107008c743b1a01d9eae08fb4788c8117bd1f:reference/execution/execution/sender_to.md</id>
      <updated>2025-04-13T01:25:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/sender_to.md b/reference/execution/execution/sender_to.md
index c6d31bc3b..4bbde047b 100644
--- a/reference/execution/execution/sender_to.md
+++ b/reference/execution/execution/sender_to.md
@@ -49,7 +49,7 @@ int main()
   // int値を受信して表示するReceiver
   ValueReceiver rcvr;
  
-  // SenderとReceiver接続後にOperationStateを開始
+  // SenderとReceiver接続後にOperation Stateを開始
   ex::operation_state auto op = ex::connect(sndr, rcvr);
   ex::start(op);
 }
@@ -78,8 +78,8 @@ int main()
 
 
 ## 関連項目
-- [`sender`](sender.md)
-- [`receiver`](receiver.md.nolink)
+- [`execution::sender`](sender.md)
+- [`execution::receiver`](receiver.md.nolink)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>execution -- execution: sender,sender_in,sender_to (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>c1903808c21645d39a634845685e5f5bf0e84678:reference/execution/execution.md</id>
      <updated>2025-04-13T01:08:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index 3d788b319..9decab877 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -58,12 +58,12 @@ namespace std::execution {
 |------|------|----------------|
 | [`execution::scheduler`](execution/scheduler.md.nolink) | Scheduler (concept) | C++26 |
 
-### Reciever
+### Receiver
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`execution::receiver`](execution/receiver.md.nolink) | Reciever (concept) | C++26 |
-| [`execution::receiver_of`](execution/receiver_of.md.nolink) | 完了ハンドラ指定Reciever (concept) | C++26 |
+| [`execution::receiver`](execution/receiver.md.nolink) | Receiver (concept) | C++26 |
+| [`execution::receiver_of`](execution/receiver_of.md.nolink) | 完了ハンドラ指定Receiver (concept) | C++26 |
 | [`execution::set_value`](execution/set_value.md.nolink) | 値による完了関数 (customization point object) | C++26 |
 | [`execution::set_error`](execution/set_error.md.nolink) | エラーによる完了関数 (customization point object) | C++26 |
 | [`execution::set_stopped`](execution/set_stopped.md.nolink) | 停止による完了関数 (customization point object) | C++26 |
@@ -80,9 +80,9 @@ namespace std::execution {
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
 | [`execution::default_domain`](execution/default_domain.md.nolink) | デフォルト実行ドメイン (class) | C++26 |
-| [`execution::sender`](execution/sender.md.nolink) | Sender (concept) | C++26 |
-| [`execution::sender_in`](execution/sender_in.md.nolink) | 環境に対応するSender (concept) | C++26 |
-| [`execution::sender_to`](execution/sender_to.md.nolink) | Recieverに対応するSender (concept) | C++26 |
+| [`execution::sender`](execution/sender.md) | Sender型 (concept) | C++26 |
+| [`execution::sender_in`](execution/sender_in.md) | 指定環境で有効なSender (concept) | C++26 |
+| [`execution::sender_to`](execution/sender_to.md) | 指定Receiverに接続可能なSender (concept) | C++26 |
 | [`execution::get_completion_signatures`](execution/get_completion_signatures.md.nolink) | 完了シグネチャ取得の問い合わせオブジェクト (customization point object) | C++26 |
 | [`execution::completion_signatures_of_t`](execution/get_completion_signatures.md.nolink) | Senderから完了シグネチャを取得 (alias template) | C++26 |
 | [`execution::value_types_of_t`](execution/value_types_of_t.md.nolink) | Senderの値完了型を取得 (alias template) | C++26 |
@@ -92,7 +92,7 @@ namespace std::execution {
 | [`execution::transform_sender`](execution/transform_sender.md.nolink) | Senderを変換 (function template) | C++26 |
 | [`execution::transform_env`](execution/transform_env.md.nolink) | 問い合わせオブジェクトを変換 (function template) | C++26 |
 | [`execution::apply_sender`](execution/apply_sender.md.nolink) | Senderにタグ型と引数を適用 (function template) | C++26 |
-| [`execution::connect`](execution/connect.md.nolink) | SenderとRecieverを接続 (customization point object) | C++26 |
+| [`execution::connect`](execution/connect.md.nolink) | SenderとReceiverを接続 (customization point object) | C++26 |
 | [`execution::connect_result_t`](execution/connect_result_t.md.nolink) | `connect`結果型を取得 (alias template) | C++26 |
 
 ### Senderファクトリ
@@ -102,7 +102,7 @@ namespace std::execution {
 | [`execution::just`](execution/just.md.nolink) | 値を送信するSender (customization point object) | C++26 |
 | [`execution::just_error`](execution/just_error.md.nolink) | エラーを送信するSender (customization point object) | C++26 |
 | [`execution::just_stopped`](execution/just_stopped.md.nolink) | 停止を送信するSender (customization point object) | C++26 |
-| [`execution::read_env`](execution/read_env.md.nolink) | Reciever環境から構築されるSender (customization point object) | C++26 |
+| [`execution::read_env`](execution/read_env.md.nolink) | Receiver環境から構築されるSender (customization point object) | C++26 |
 | [`execution::schedule`](execution/schedule.md.nolink) | Scheduler上で実行されるSender (customization point object) | C++26 |
 | [`execution::schedule_result_t`](execution/schedule_result_t.md.nolink) | `schedule`結果型を取得 (alias template) | C++26 |
 
@@ -138,7 +138,7 @@ namespace std::execution {
 
 Senderコンシューマは名前空間 `std::this_thread` で定義される。
 
-### Sender/Recieverユーティリティ
+### Sender/Receiverユーティリティ
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sender -- execution: sender,sender_in,sender_to (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/sender.html"/>
      <id>c1903808c21645d39a634845685e5f5bf0e84678:reference/execution/execution/sender.md</id>
      <updated>2025-04-13T01:08:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/sender.md b/reference/execution/execution/sender.md
new file mode 100644
index 000000000..1b702b27d
--- /dev/null
+++ b/reference/execution/execution/sender.md
@@ -0,0 +1,116 @@
+# sender
+* execution[meta header]
+* concept[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  template &amp;lt;class Sndr&amp;gt;
+  concept sender;
+
+  struct sender_t {};  // タグ型
+}
+```
+
+## 概要
+`sender`は、型`Sndr`がSender型の要件を満たすことを表すコンセプトである。
+
+次のいずれかのクラス型はSenderとみなせる。
+
+- `sender_t`をメンバ型`Sndr::sender_concept`として定義するクラス型
+- [コルーチンのAwaitable型](/lang/cpp20/coroutines.md)クラス型
+
+
+## 要件
+説明専用コンセプト`is-sender`, `enable-sender`、説明用クラステンプレート`env-promise`を以下のように定義する。
+
+```cpp
+template&amp;lt;class Sndr&amp;gt;
+concept is-sender =
+  derived_from&amp;lt;typename Sndr::sender_concept, sender_t&amp;gt;;
+
+template&amp;lt;class Sndr&amp;gt;
+concept enable-sender =
+  is-sender&amp;lt;Sndr&amp;gt; ||
+  is-awaitable&amp;lt;Sndr, env-promise&amp;lt;env&amp;lt;&amp;gt;&amp;gt;&amp;gt;;
+
+template&amp;lt;class Env&amp;gt;
+struct env-promise : with-await-transform&amp;lt;env-promise&amp;lt;Env&amp;gt;&amp;gt; {
+  unspecified get_return_object() noexcept;
+  unspecified initial_suspend() noexcept;
+  unspecified final_suspend() noexcept;
+  void unhandled_exception() noexcept;
+  void return_void() noexcept;
+  coroutine_handle&amp;lt;&amp;gt; unhandled_stopped() noexcept;
+
+  const Env&amp;amp; get_env() const noexcept;
+};
+```
+* is-awaitable[link is-awaitable.md.nolink]
+* env[link env.md.nolink]
+* derived_from[link /reference/concepts/derived_from.md]
+* coroutine_handle[link /reference/coroutine/coroutine_handle.md]
+* unspecified[italic]
+
+`sender`コンセプトは、以下のように定義される。
+
+```cpp
+template&amp;lt;class Sndr&amp;gt;
+concept sender =
+  bool(enable-sender&amp;lt;remove_cvref_t&amp;lt;Sndr&amp;gt;&amp;gt;) &amp;amp;&amp;amp;
+  requires (const remove_cvref_t&amp;lt;Sndr&amp;gt;&amp;amp; sndr) {
+    { get_env(sndr) } -&amp;gt; queryable;
+  } &amp;amp;&amp;amp;
+  move_constructible&amp;lt;remove_cvref_t&amp;lt;Sndr&amp;gt;&amp;gt; &amp;amp;&amp;amp;
+  constructible_from&amp;lt;remove_cvref_t&amp;lt;Sndr&amp;gt;, Sndr&amp;gt;;
+```
+* get_env[link get_env.md.nolink]
+* queryable[link queryable.md.nolink]
+* move_constructible[link /reference/concepts/move_constructible.md]
+* constructible_from[link /reference/concepts/constructible_from.md]
+
+
+## 備考
+`sender`コンセプトの制約式に現れる第1項`bool(enable-sender&amp;lt;...&amp;gt;)`は[原子制約(atomic contraint)](/lang/cpp20/concepts.md)を構成する。
+これによりオーバーロード解決時の優先順比較のためのにおいて`enable-sender`コンセプトの`||`を単純なOR条件とみなせ、コンパイル時の複雑な包摂関係計算コストを抑制できる。
+
+
+## 例
+```cpp example
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  // 値42を送信するSender
+  ex::sender auto sndr = ex::just(42);
+}
+```
+* ex::sender[color ff0000]
+* ex::just[link just.md.nolink]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`sender_in`](sender_in.md)
+- [`sender_to`](sender_to.md)
+- [コルーチン](/lang/cpp20/coroutines.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sender_in -- execution: sender,sender_in,sender_to (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/sender_in.html"/>
      <id>c1903808c21645d39a634845685e5f5bf0e84678:reference/execution/execution/sender_in.md</id>
      <updated>2025-04-13T01:08:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/sender_in.md b/reference/execution/execution/sender_in.md
new file mode 100644
index 000000000..43c09e6c4
--- /dev/null
+++ b/reference/execution/execution/sender_in.md
@@ -0,0 +1,75 @@
+# sender_in
+* execution[meta header]
+* concept[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  template&amp;lt;class Sndr, class Env = env&amp;lt;&amp;gt;&amp;gt;
+  concept sender_in =
+    sender&amp;lt;Sndr&amp;gt; &amp;amp;&amp;amp;
+    queryable&amp;lt;Env&amp;gt; &amp;amp;&amp;amp;
+    requires (Sndr&amp;amp;&amp;amp; sndr, Env&amp;amp;&amp;amp; env) {
+      { get_completion_signatures(std::forward&amp;lt;Sndr&amp;gt;(sndr), std::forward&amp;lt;Env&amp;gt;(env)) }
+        -&amp;gt; valid-completion-signatures;
+    };
+}
+```
+* env&amp;lt;&amp;gt;[link env.md.nolink]
+* sender[link sender.md]
+* queryable[link queryable.md.nolink]
+* get_completion_signatures[link get_completion_signatures.md.nolink]
+* valid-completion-signatures[link valid-completion-signatures.md.nolink]
+
+## 概要
+`sender_in`は、[Sender型](sender.md)`Sndr`が[環境](env.md.nolink)`Env`において非同期操作を作成できること表すコンセプトである。
+
+
+## モデル
+説明用に`sndr`を`decltype((sndr))`が`Sndr`型となる式、`rcvr`を環境`Env`に関連付けられたReceiverと定義する。
+
+また、ある完了操作の完了シグネチャが[`completion_signatures_of_t`](completion_signatures_of_t.md.nolink)`&amp;lt;Sndr, Env&amp;gt;`で取得される[`completion_signatures`](completion_signatures.md.nolink)リストに含まれるとき、`Sndr`と`Env`における許容可能完了操作(permissible completion)となる。
+
+`sndr`と`rcvr`の接続後に操作状態を開始することで評価されうる完了操作が、全て許容可能完了操作(permissible completion)である場合、`Sndr`と`Env`は`sender_in&amp;lt;Sndr, Env&amp;gt;`のモデルとなる。
+
+
+## 例
+```cpp example
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  ex::sender auto sndr = ex::just(42);
+  static_assert(ex::sender_in&amp;lt;decltype(sndr), ex::env&amp;lt;&amp;gt;&amp;gt;);
+}
+```
+* ex::sender_in[color ff0000]
+* ex::sender[link sender.md]
+* ex::just[link just.md.nolink]
+* ex::env&amp;lt;&amp;gt;[link env.md.nolink]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`sender`](sender.md)
+- [`env`](env.md.nolink)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sender_to -- execution: sender,sender_in,sender_to (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/sender_to.html"/>
      <id>c1903808c21645d39a634845685e5f5bf0e84678:reference/execution/execution/sender_to.md</id>
      <updated>2025-04-13T01:08:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/sender_to.md b/reference/execution/execution/sender_to.md
new file mode 100644
index 000000000..c6d31bc3b
--- /dev/null
+++ b/reference/execution/execution/sender_to.md
@@ -0,0 +1,86 @@
+# sender_to
+* execution[meta header]
+* concept[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  template&amp;lt;class Sndr, class Rcvr&amp;gt;
+  concept sender_to =
+    sender_in&amp;lt;Sndr, env_of_t&amp;lt;Rcvr&amp;gt;&amp;gt; &amp;amp;&amp;amp;
+    receiver_of&amp;lt;Rcvr, completion_signatures_of_t&amp;lt;Sndr, env_of_t&amp;lt;Rcvr&amp;gt;&amp;gt;&amp;gt; &amp;amp;&amp;amp;
+    requires (Sndr&amp;amp;&amp;amp; sndr, Rcvr&amp;amp;&amp;amp; rcvr) {
+      connect(std::forward&amp;lt;Sndr&amp;gt;(sndr), std::forward&amp;lt;Rcvr&amp;gt;(rcvr));
+    };
+}
+```
+* sender_in[link sender_in.md]
+* env_of_t[link env_of_t.md.nolink]
+* receiver_of[link receiver_of.md.nolink]
+* completion_signatures_of_t[link completion_signatures_of_t.md.nolink]
+* connect[link connect.md.nolink]
+
+## 概要
+`sender_to`は、[Sender型](sender.md)`Sndr`が[Receiver型](receiver.md.nolink)`Rcvr`と接続可能であること表すコンセプトである。
+
+
+## 例
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = stdexec;
+
+struct ValueReceiver {
+  using receiver_concept = ex::receiver_t;
+
+  void set_value(int v) noexcept
+  {
+    std::println(&amp;#34;{}&amp;#34;, v);
+  }
+};
+
+int main()
+{
+  // 値42を送信するSender
+  ex::sender auto sndr = ex::just(42);
+  static_assert(ex::sender_to&amp;lt;decltype(sndr), ValueReceiver&amp;gt;);
+
+  // int値を受信して表示するReceiver
+  ValueReceiver rcvr;
+ 
+  // SenderとReceiver接続後にOperationStateを開始
+  ex::operation_state auto op = ex::connect(sndr, rcvr);
+  ex::start(op);
+}
+```
+* ex::sender_to[color ff0000]
+* ex::just[link just.md.nolink]
+* ex::operation_state[link operation_state.md.nolink]
+* ex::connect[link connect.md.nolink]
+* ex::start[link start.md.nolink]
+
+### 出力
+```
+42
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`sender`](sender.md)
+- [`receiver`](receiver.md.nolink)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>構造化束縛でパックを導入できるようにする [P1061R10] -- コードブロックに言語指定</title>
      <link href="https://cpprefjp.github.io/lang/cpp26/structured_bindings_can_introduce_a_pack.html"/>
      <id>ef98bb04a21a45f4a209da5de3d0866ac5ea227e:lang/cpp26/structured_bindings_can_introduce_a_pack.md</id>
      <updated>2025-04-10T16:27:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp26/structured_bindings_can_introduce_a_pack.md b/lang/cpp26/structured_bindings_can_introduce_a_pack.md
index a3c27fc98..5b9018db0 100644
--- a/lang/cpp26/structured_bindings_can_introduce_a_pack.md
+++ b/lang/cpp26/structured_bindings_can_introduce_a_pack.md
@@ -81,7 +81,7 @@ auto dot_product(P p, Q q) {
 
 C++26の場合：
 
-```
+```cpp
 template &amp;lt;class P, class Q&amp;gt;
 auto dot_product(P p, Q q) {
   // applyが必要なくなる
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
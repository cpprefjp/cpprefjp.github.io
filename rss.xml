<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-10-01T17:28:05.383052</updated>
  <id>c73d08f7-2f04-4c2a-86c5-43659056cae4</id>

  
    <entry>
      <title>一貫比較 -- 特殊メンバ関数の定義タイミングについてリンクを追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/consistent_comparison.html"/>
      <id>72fb442a52a8e1a1ad2cde896c349da98b744f89:lang/cpp20/consistent_comparison.md</id>
      <updated>2021-10-02T02:23:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/consistent_comparison.md b/lang/cpp20/consistent_comparison.md
index 60f9177e8..e3a13d8eb 100644
--- a/lang/cpp20/consistent_comparison.md
+++ b/lang/cpp20/consistent_comparison.md
@@ -304,7 +304,7 @@ inline bool operator== (const C&amp;amp;, const C&amp;amp;) = default;
 
 `default`指定された三方比較演算子の戻り値型は基底クラス及び全メンバの`&amp;lt;=&amp;gt;`の結果型の共通比較カテゴリ型となるが、その中に比較カテゴリ型を返さない`&amp;lt;=&amp;gt;`による比較がある場合は暗黙的に`delete`される。
 
-`delete`されていない全ての`default`比較演算子は、通常の特殊メンバ関数と同様にODR使用された時あるいは定数式で評価された時に、最初の`default`宣言の位置で暗黙的に定義される（詳細は「評価されない文脈で`constexpr`関数が定数式評価されることを規定」を参照）。
+`delete`されていない全ての`default`比較演算子は、通常の特殊メンバ関数と同様にODR使用された時あるいは定数式で評価された時に、最初の`default`宣言の位置で暗黙的に定義される（詳細は[「評価されない文脈での定数式評価によって特殊メンバ関数がインスタンス化されることを規定」](less_eager_instantiation_of_constexpr_functions.md)を参照）。
 
 #### operator==の暗黙宣言
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges -- &lt;ranges&gt;: 関数記法によるRangeアダプタ適用順を修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges.html"/>
      <id>1958fec9dbbb5fcf1e028042fb87aedd5070ff99:reference/ranges.md</id>
      <updated>2021-10-01T13:25:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges.md b/reference/ranges.md
index 718b4336a..1fcff7ede 100644
--- a/reference/ranges.md
+++ b/reference/ranges.md
@@ -144,7 +144,7 @@ r | R  // パイプライン記法
 Rangeアダプタを適用した結果は[`view`](ranges/view.md)、すなわちRangeであることから、Rangeアダプタを次々と繋いでいくことができる。
 
 ```cpp
-R1(R2(R3(r)))     // 関数記法
+R3(R2(R1(r)))     // 関数記法
 r | R1 | R2 | R3  // パイプライン記法
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>counted_iterator -- &lt;ranges&gt; countedを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator.html"/>
      <id>10917342ca47f0e85687faa17c87db106552c871:reference/iterator/counted_iterator.md</id>
      <updated>2021-09-29T08:13:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator.md b/reference/iterator/counted_iterator.md
index a75053774..e5f100af1 100644
--- a/reference/iterator/counted_iterator.md
+++ b/reference/iterator/counted_iterator.md
@@ -131,7 +131,7 @@ int main() {
 
 ## 関連項目
 
-- [`views::counted`](/reference/ranges/counted.md.nolink)
+- [`views::counted`](/reference/ranges/counted.md)
 - [`take_view`](/reference/ranges/take_view.md)
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges -- &lt;ranges&gt; countedを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges.html"/>
      <id>10917342ca47f0e85687faa17c87db106552c871:reference/ranges.md</id>
      <updated>2021-09-29T08:13:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges.md b/reference/ranges.md
index 6d2f62026..718b4336a 100644
--- a/reference/ranges.md
+++ b/reference/ranges.md
@@ -234,9 +234,9 @@ range | adaptor(args...)
 
 ### counted view
 
-| 名前                                  | 説明           | 対応バージョン |
-|---------------------------------------|----------------|----------------|
-| [`counted`](ranges/counted.md.nolink) | イテレータを指定した数だけ進めるビューを生成する (customization point object)  | C++20          |
+| 名前                           | 説明                                                                                          | 対応バージョン |
+|--------------------------------|-----------------------------------------------------------------------------------------------|----------------|
+| [`counted`](ranges/counted.md) | イテレータから指定した数の範囲をRangeとして扱うビューを生成する (customization point object)  | C++20          |
 
 ### common view
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>counted -- &lt;ranges&gt; countedを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/counted.html"/>
      <id>10917342ca47f0e85687faa17c87db106552c871:reference/ranges/counted.md</id>
      <updated>2021-09-29T08:13:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/counted.md b/reference/ranges/counted.md
new file mode 100644
index 000000000..337216ba2
--- /dev/null
+++ b/reference/ranges/counted.md
@@ -0,0 +1,84 @@
+# counted
+* ranges[meta header]
+* std::ranges[meta namespace]
+* cpo[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  namespace ranges {
+    namespace views {
+      inline constexpr /*unspecified*/ counted = /*unspecified*/;
+    }
+  }
+
+  namespace views = ranges::views;
+}
+```
+
+## 概要
+イテレータ`i`と数`n`に対して、範囲`[i, i + n)`をRangeとして扱う[`view`](view.md)を生成するカスタマイゼーションポイントオブジェクト。実際に生成するのは[`subrange`](subrange.md)か[`span`](/reference/span/span.md)である。
+
+`counted`は、手元にイテレータだけがあるとき、そこから指定個数までの範囲をRangeとして扱うために使用できる。これは、ポインタと個数で定まる範囲を[`contiguous_range`](contiguous_range.md)として扱う[`span`](/reference/span/span.md)を、一般のイテレータに拡張したものである。
+
+`counted`はRangeアダプタオブジェクトではないので、パイプライン記法は使用できない。
+
+### Rangeコンセプト
+
+| borrowed | sized | output | input | forward | bidirectional | random_access | contiguous | common | viewable | view |
+|----------|-------|--------|-------|---------|---------------|---------------|------------|--------|----------|------|
+| ○       | ○    | ※     | ※    | ※      | ※            | ※            | ※         | ※     | ○       | ○   |
+
+※ イテレータに従う
+
+## 効果
+
+式`E`をイテレータ、式`F`を進める数、イテレータ型`T`を[`decay_t`](/reference/type_traits/decay.md)`&amp;lt;`[`decltype`](/lang/cpp11/decltype.md)`((E))&amp;gt;`、イテレータの差の型`D`を[`iter_difference_t`](/reference/iterator/iter_difference_t.md)`&amp;lt;T&amp;gt;`とする。式`views::counted(E, F)`の効果は以下の通り。
+
+- [`decltype`](/lang/cpp11/decltype.md)`((F))`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;D&amp;gt;`のモデルでなければ、呼び出しは不適格。
+- `T`が[`contiguous_iterator`](/reference/iterator/contiguous_iterator.md)のモデルであれば、[`span`](/reference/span/span.md)`{`[`to_address`](/reference/memory/to_address.md)`(E), static_cast&amp;lt;D&amp;gt;(F)}`と等しい。
+- `T`が[`random_access_iterator`](/reference/iterator/random_access_iterator.md)のモデルであれば、[`subrange`](subrange.md)`{E, E + static_cast&amp;lt;D&amp;gt;(F)}`と等しい。
+- それ以外のとき、[`subrange`](subrange.md)`{`[`counted_iterator`](/reference/iterator/counted_iterator.md)`{E, F}, `[`default_sentinel`](/reference/iterator/default_sentinel_t.md)`}`と等しい。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using namespace std;
+  vector&amp;lt;int&amp;gt; v;
+  
+
+  for (int i = 0; auto&amp;amp; elem : views::counted(back_inserter(v), 5)) {
+    elem = i++;
+  }
+
+  for(int elem : v) {
+    cout &amp;lt;&amp;lt; elem;
+  }
+}
+```
+* views::counted[color ff0000]
+* back_inserter[link /reference/iterator/back_inserter.md]
+
+### 出力
+```
+01234
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>output_range -- &lt;ranges&gt; countedを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/output_range.html"/>
      <id>10917342ca47f0e85687faa17c87db106552c871:reference/ranges/output_range.md</id>
      <updated>2021-09-29T08:13:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/output_range.md b/reference/ranges/output_range.md
index 5b690747c..d0eef1bf1 100644
--- a/reference/ranges/output_range.md
+++ b/reference/ranges/output_range.md
@@ -42,7 +42,7 @@ int main() {
 }
 ```
 * ranges::output_range[color ff0000]
-* views::counted[link counted.md.nolink]
+* views::counted[link counted.md]
 * ostream_iterator[link /reference/iterator/ostream_iterator.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_view -- common_view 説明を修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/common_view.html"/>
      <id>6c0273c0adb748874068b70ac37319d4959e820a:reference/ranges/common_view.md</id>
      <updated>2021-09-29T08:00:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/common_view.md b/reference/ranges/common_view.md
index 42c78838b..8c97120fe 100644
--- a/reference/ranges/common_view.md
+++ b/reference/ranges/common_view.md
@@ -1,4 +1,4 @@
-# ref_view
+# common_view
 * ranges[meta header]
 * std::ranges[meta namespace]
 * class template[meta id-type]
@@ -42,7 +42,7 @@ namespace std {
 ## テンプレートパラメータ制約
 
 - [`view`](view.md)`&amp;lt;V&amp;gt;`
-- ![`common_range`](common_range.md)`&amp;lt;V&amp;gt;`
+- `!`[`common_range`](common_range.md)`&amp;lt;V&amp;gt;`
 - [`copyable`](/reference/concepts/copyable.md)`&amp;lt;`[`iterator_t`](iterator_t.md)`&amp;lt;V&amp;gt;&amp;gt;`
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_range -- &lt;ranges&gt; common_rangeの説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/common_range.html"/>
      <id>4f7bf0a49e8959fa137bd582969053fd25af06a9:reference/ranges/common_range.md</id>
      <updated>2021-09-29T03:53:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/common_range.md b/reference/ranges/common_range.md
index 67999d9ce..7725434f3 100644
--- a/reference/ranges/common_range.md
+++ b/reference/ranges/common_range.md
@@ -39,6 +39,13 @@ namespace std::ranges {
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
 
+## 関連項目
+
+- [C++17 範囲 for ループの制限緩和](/lang/cpp17/generalizing_the_range-based_for_loop.md)  
+  範囲for文は、C++17の時点で先行して`common_range`ではない範囲を扱えるようになっている
+- [`views::common`](common_view.md)  
+  任意の範囲を`common_range`に変換するRangeアダプタオブジェクト
+
 ## 参照
 - [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
 - [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-09-11T07:06:21.275306</updated>
  <id>42ec94f1-6b11-42f0-8624-60f47d282d3a</id>

  
    <entry>
      <title>duration -- C++26対応として、enable_nonlocking_formatter_optimizationを追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration.html"/>
      <id>9119e06bfc3ec280b28f12b785da0f188c5a6ab7:reference/chrono/duration.md</id>
      <updated>2024-09-11T16:03:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration.md b/reference/chrono/duration.md
index eb9495402..8e109b71d 100644
--- a/reference/chrono/duration.md
+++ b/reference/chrono/duration.md
@@ -156,6 +156,7 @@ namespace chrono {
 | 名前  | 説明               | 対応バージョン |
 |-------|--------------------|----------------|
 | [`formatter`](duration/formatter.md) | 文字列フォーマットの許可。[`std::formatter`](/reference/format/formatter.md)クラスの特殊化 | C++20 |
+| [`enable_nonlocking_formatter_optimization`](duration/enable_nonlocking_formatter_optimization.md) | [`std::print()`](/reference/print/print.md)と[`std::println()`](/reference/print/println.md)の効率的な実装を有効にする | C++26 |
 
 
 ## ハッシュサポート
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>enable_nonlocking_formatter_optimization -- C++26対応として、enable_nonlocking_formatter_optimizationを追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration/enable_nonlocking_formatter_optimization.html"/>
      <id>9119e06bfc3ec280b28f12b785da0f188c5a6ab7:reference/chrono/duration/enable_nonlocking_formatter_optimization.md</id>
      <updated>2024-09-11T16:03:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration/enable_nonlocking_formatter_optimization.md b/reference/chrono/duration/enable_nonlocking_formatter_optimization.md
new file mode 100644
index 000000000..748f95ab5
--- /dev/null
+++ b/reference/chrono/duration/enable_nonlocking_formatter_optimization.md
@@ -0,0 +1,30 @@
+# enable_nonlocking_formatter_optimization
+* chrono[meta header]
+* std[meta namespace]
+* variable[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class Rep, class Period&amp;gt;
+  inline constexpr bool enable_nonlocking_formatter_optimization&amp;lt;
+    chrono::duration&amp;lt;Rep, Period&amp;gt;&amp;gt; =
+      enable_nonlocking_formatter_optimization&amp;lt;Rep&amp;gt;;
+}
+```
+
+## 概要
+`duration`クラスに対する[`std::enable_nonlocking_formatter_optimization`](/reference/format/enable_nonlocking_formatter_optimization.md)変数テンプレートの特殊化。
+
+
+## バージョン
+### 言語
+- C++26
+
+## 関連項目
+- [`std::enable_nonlocking_formatter_optimization`](/reference/format/enable_nonlocking_formatter_optimization.md)
+
+
+## 参照
+- [P3107R5 Permit an efficient implementation of `std::print`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3107r5.html)
+- [P3235R3 `std::print` more types faster with less memory](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3235r3.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>zoned_time -- C++26対応として、enable_nonlocking_formatter_optimizationを追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/zoned_time.html"/>
      <id>9119e06bfc3ec280b28f12b785da0f188c5a6ab7:reference/chrono/zoned_time.md</id>
      <updated>2024-09-11T16:03:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/zoned_time.md b/reference/chrono/zoned_time.md
index 1dcdadcff..6fd7254a2 100644
--- a/reference/chrono/zoned_time.md
+++ b/reference/chrono/zoned_time.md
@@ -85,6 +85,7 @@ namespace std::chrono {
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
 | [`formatter`](zoned_time/formatter.md) | [`std::formatter`](/reference/format/formatter.md)クラスの特殊化 | C++20 |
+| [`enable_nonlocking_formatter_optimization`](zoned_time/enable_nonlocking_formatter_optimization.md) | [`std::print()`](/reference/print/print.md)と[`std::println()`](/reference/print/println.md)の効率的な実装を有効にする | C++26 |
 
 
 ## ハッシュサポート
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>enable_nonlocking_formatter_optimization -- C++26対応として、enable_nonlocking_formatter_optimizationを追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/zoned_time/enable_nonlocking_formatter_optimization.html"/>
      <id>9119e06bfc3ec280b28f12b785da0f188c5a6ab7:reference/chrono/zoned_time/enable_nonlocking_formatter_optimization.md</id>
      <updated>2024-09-11T16:03:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/zoned_time/enable_nonlocking_formatter_optimization.md b/reference/chrono/zoned_time/enable_nonlocking_formatter_optimization.md
new file mode 100644
index 000000000..9ecafcccb
--- /dev/null
+++ b/reference/chrono/zoned_time/enable_nonlocking_formatter_optimization.md
@@ -0,0 +1,30 @@
+# enable_nonlocking_formatter_optimization
+* chrono[meta header]
+* std[meta namespace]
+* variable[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class Duration&amp;gt;
+  inline constexpr bool enable_nonlocking_formatter_optimization&amp;lt;
+    chrono::zoned_time&amp;lt;Duration, const chrono::time_zone*&amp;gt;&amp;gt; = true;
+}
+```
+* chrono::time_zone[link /reference/chrono/time_zone.md]
+
+## 概要
+`zoned_time`クラスに対する[`std::enable_nonlocking_formatter_optimization`](/reference/format/enable_nonlocking_formatter_optimization.md)変数テンプレートの特殊化。
+
+
+## バージョン
+### 言語
+- C++26
+
+## 関連項目
+- [`std::enable_nonlocking_formatter_optimization`](/reference/format/enable_nonlocking_formatter_optimization.md)
+
+
+## 参照
+- [P3107R5 Permit an efficient implementation of `std::print`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3107r5.html)
+- [P3235R3 `std::print` more types faster with less memory](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3235r3.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- C++26対応として、enable_nonlocking_formatter_optimizationを追加</title>
      <link href="https://cpprefjp.github.io/reference/format.html"/>
      <id>9119e06bfc3ec280b28f12b785da0f188c5a6ab7:reference/format.md</id>
      <updated>2024-09-11T16:03:22+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;format&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt;ヘッダでは、書式文字列を使って引数をフォーマットする、いわゆる&lt;code&gt;printf&lt;/code&gt;スタイルのフォーマット関数を提供する。
このフォーマット関数は型安全であり、ユーザー定義型への拡張も可能である。&lt;/p&gt;
&lt;p&gt;書式文字列については&lt;code&gt;&lt;a href=&#34;format/format.html&#34;&gt;format&lt;/a&gt;&lt;/code&gt;を参照。&lt;/p&gt;
&lt;h2&gt;フォーマット関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/format.html&#34;&gt;format&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列を使って引数をフォーマットした文字列を返す (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/format_to.html&#34;&gt;format_to&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列を使って引数をフォーマットし、出力イテレータに出力する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/format_to_n.html&#34;&gt;format_to_n&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列を使って引数をフォーマットし、指定した文字数を超えないように出力イテレータに出力する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/format_to_n_result.html&#34;&gt;format_to_n_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;format_to_n&lt;/code&gt;の結果を表す (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/formatted_size.html&#34;&gt;formatted_size&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列を使って引数をフォーマットした文字列を保存するのに必要な文字数を返す (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/vformat.html&#34;&gt;vformat&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/format.html&#34;&gt;format&lt;/a&gt;&lt;/code&gt;の非テンプレート版 (function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/vformat_to.html&#34;&gt;vformat_to&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/format_to.html&#34;&gt;format_to&lt;/a&gt;&lt;/code&gt;の非テンプレート版 (function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;フォーマッター&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/formattable.html&#34;&gt;formattable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列フォーマット可能 (concept)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/formatter.html&#34;&gt;formatter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数の型に対応する書式文字列の解析、値のフォーマットを担う (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/enable_nonlocking_formatter_optimization.html&#34;&gt;enable_nonlocking_formatter_optimization&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;print/print.html&#34;&gt;std::print()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;print/println.html&#34;&gt;std::println()&lt;/a&gt;&lt;/code&gt;の効率的な実装を有効にする&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/basic_format_parse_context.html&#34;&gt;basic_format_parse_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列の解析のコンテキスト (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/basic_format_parse_context.html&#34;&gt;format_parse_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_parse_context&lt;/code&gt;のマルチバイト文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/basic_format_parse_context.html&#34;&gt;wformat_parse_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_parse_context&lt;/code&gt;のワイド文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/basic_format_context.html&#34;&gt;basic_format_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数のフォーマットのコンテキスト (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/basic_format_context.html&#34;&gt;format_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_context&lt;/code&gt;のマルチバイト文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/basic_format_context.html&#34;&gt;wformat_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_context&lt;/code&gt;のワイド文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/range_format.html&#34;&gt;range_format&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Rangeの書式種別 (enum)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/format_kind.html&#34;&gt;format_kind&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定したRangeの書式種別を取得する (variable)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/const-formattable-range.html&#34;&gt;const-formattable-range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const Range&lt;/code&gt;の要素型が文字列フォーマット可能 (concept)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/fmt-maybe-const.html&#34;&gt;fmt-maybe-const&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;formatter::format()&lt;/code&gt;関数のパラメータ型として使用するための(const) Range型を取得 (type-alias)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/range_formatter.html&#34;&gt;range_formatter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Rangeに対する書式文字列の解析、値のフォーマットを行う (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/range-default-formatter.html&#34;&gt;range-default-formatter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Rangeに対する共通の書式文字列の解析、値のフォーマットを行う説明専用クラス (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;引数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/basic_format_arg.html&#34;&gt;basic_format_arg&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数1つへのアクセスを提供する (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/visit_format_arg.html&#34;&gt;visit_format_arg&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_arg&lt;/code&gt;オブジェクトが現在保持している型に対応する関数を呼び出す (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/make_format_args.html&#34;&gt;make_format_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可変長引数から&lt;code&gt;basic_format_arg&lt;/code&gt;の列を構築する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/make_format_args.html&#34;&gt;make_wformat_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;make_wformat_args&lt;/code&gt;のワイド文字列版 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/basic_format_args.html&#34;&gt;basic_format_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数列へのアクセスを提供する (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/basic_format_args.html&#34;&gt;format_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_args&lt;/code&gt;のマルチバイト文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/basic_format_args.html&#34;&gt;wformat_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_args&lt;/code&gt;のワイド文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;書式文字列&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/basic_format_string.html&#34;&gt;basic_format_string&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式のコンパイル時文字列クラス (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/runtime-format-string.html&#34;&gt;runtime-format-string&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;説明用としての書式の実行時文字列クラス (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/runtime_format.html&#34;&gt;runtime_format&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式の実行時文字列を指定するために文字列をラップする (function)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;format/format_error.html&#34;&gt;format_error&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;フォーマットの失敗を表す例外クラス (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++20&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/format&#34; target=&#34;_blank&#34;&gt;Working Draft, Standard for Programming Language C++ [format]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html&#34; target=&#34;_blank&#34;&gt;P0645R10 Text Formatting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>enable_nonlocking_formatter_optimization -- C++26対応として、enable_nonlocking_formatter_optimizationを追加</title>
      <link href="https://cpprefjp.github.io/reference/format/enable_nonlocking_formatter_optimization.html"/>
      <id>9119e06bfc3ec280b28f12b785da0f188c5a6ab7:reference/format/enable_nonlocking_formatter_optimization.md</id>
      <updated>2024-09-11T16:03:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/enable_nonlocking_formatter_optimization.md b/reference/format/enable_nonlocking_formatter_optimization.md
new file mode 100644
index 000000000..3ac718bf4
--- /dev/null
+++ b/reference/format/enable_nonlocking_formatter_optimization.md
@@ -0,0 +1,68 @@
+# enable_nonlocking_formatter_optimization
+* format[meta header]
+* std[meta namespace]
+* variable[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class T&amp;gt;
+  constexpr bool enable_nonlocking_formatter_optimization = false; // (1) C++26
+}
+```
+
+## 概要
+[`std::print()`](/reference/print/print.md)と[`std::println()`](/reference/print/println.md)の効率的な実装を有効にする。
+
+この値が`true`で定義される場合、文字列フォーマットされた文字列のストリームへの書き込み時に、余分な動的メモリ確保を行わない。
+
+とくに指定されない限り、標準ライブラリで[`std::formatter`](formatter.md)の特殊化が定義される型に対して、各ヘッダは以下の特殊化を定義する：
+
+```cpp
+template&amp;lt;&amp;gt;
+inline constexpr bool enable_nonlocking_formatter_optimization&amp;lt;T&amp;gt; = true;
+```
+
+Rangeに対しては、以下が定義される：
+
+```cpp
+template &amp;lt;ranges::input_range R&amp;gt;
+  requires (format_kind&amp;lt;R&amp;gt; != range_format::disabled)
+inline constexpr bool enable_nonlocking_formatter_optimization&amp;lt;R&amp;gt; = false;
+```
+* ranges::input_range[link /reference/ranges/input_range.md]
+* format_kind[link format_kind.md]
+* range_format[link range_format.md]
+
+[`std::pair`](/reference/utility/pair.md)および[`std::tuple`](/reference/tuple/tuple.md)に対しては、以下が定義される：
+
+```cpp
+template &amp;lt;class... Ts&amp;gt;
+inline constexpr bool enable_nonlocking_formatter_optimization&amp;lt;pair-or-tuple&amp;lt;Ts...&amp;gt;&amp;gt; =
+  (enable_nonlocking_formatter_optimization&amp;lt;Ts&amp;gt; &amp;amp;&amp;amp; ...);
+```
+
+
+## 備考
+- ユーザーは、任意のCV修飾されないユーザー定義型でこの型の特殊化を定義できる
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): 18 [mark noimpl]
+- [GCC](/implementation.md#gcc): 14 [mark noimpl]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 7 [mark noimpl]
+
+
+## 関連項目
+- [`std::print()`](/reference/print/print.md)
+- [`std::chrono::duration`に対する`enable_nonlocking_formatter_optimization`](/reference/chrono/duration/enable_nonlocking_formatter_optimization.md)
+- [`std::chrono::zoned_time`に対する`enable_nonlocking_formatter_optimization`](/reference/chrono/zoned_time/enable_nonlocking_formatter_optimization.md)
+
+
+## 参照
+- [P3107R5 Permit an efficient implementation of `std::print`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3107r5.html)
+- [P3235R3 `std::print` more types faster with less memory](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3235r3.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>print -- C++26対応として、enable_nonlocking_formatter_optimizationを追加</title>
      <link href="https://cpprefjp.github.io/reference/print.html"/>
      <id>9119e06bfc3ec280b28f12b785da0f188c5a6ab7:reference/print.md</id>
      <updated>2024-09-11T16:03:22+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;print&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;print&amp;gt;&lt;/code&gt;ヘッダでは、書式指定で出力する機能を定義する。&lt;/p&gt;
&lt;p&gt;このヘッダでは、デフォルトの出力先、および&lt;code&gt;FILE*&lt;/code&gt;指定のオーバーロードが定義される。&lt;code&gt;&lt;a href=&#34;ostream/basic_ostream.html&#34;&gt;std::ostream&lt;/a&gt;&lt;/code&gt;指定のオーバーロードは&lt;code&gt;&lt;a href=&#34;ostream.html&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/a&gt;&lt;/code&gt;で定義される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;print/print.html&#34;&gt;print&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式指定で出力する (function template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;print/println.html&#34;&gt;println&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式指定で出力する。末尾改行付き (function template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;print/vprint_unicode.html&#34;&gt;vprint_unicode&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式指定でUnicode出力する (function)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;print/vprint_nonunicode_buffered.html&#34;&gt;vprint_unicode_buffered&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;確保した文字列バッファに書式指定の出力を作ってからUnicode出力する (function)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;print/vprint_nonunicode.html&#34;&gt;vprint_nonunicode&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式指定で非Unicode出力する (function)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;print/vprint_nonunicode_buffered.html&#34;&gt;vprint_nonunicode_buffered&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;確保した文字列バッファに書式指定の出力を作ってから非Unicode出力する (function)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++23&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;ostream.html&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2093r14.html&#34; target=&#34;_blank&#34;&gt;P2093R14 Formatted output&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>print -- C++26対応として、enable_nonlocking_formatter_optimizationを追加</title>
      <link href="https://cpprefjp.github.io/reference/print/print.html"/>
      <id>9119e06bfc3ec280b28f12b785da0f188c5a6ab7:reference/print/print.md</id>
      <updated>2024-09-11T16:03:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/print/print.md b/reference/print/print.md
index 359159b75..87a33baa9 100644
--- a/reference/print/print.md
+++ b/reference/print/print.md
@@ -42,23 +42,49 @@ namespace std {
     * stdout[link /reference/cstdio/stdout.md.nolink]
     * std::forward[link /reference/utility/forward.md]
 
-- (2) : 通常の文字列リテラルがUTF-8エンコーディングされている場合、以下と等価：
-    ```cpp
-    vprint_unicode(stream, fmt.get(), make_format_args(std::forward&amp;lt;Args&amp;gt;(args)...));
-    ```
-    * vprint_unicode[link vprint_unicode.md]
-    * fmt.get()[link /reference/format/format_string/get.md.nolink]
-    * make_format_args[link /reference/format/make_format_args.md]
-    * std::forward[link /reference/utility/forward.md]
-
-    - そうでなければ、以下と等価：
-    ```cpp
-    vprint_nonunicode(stream, fmt.get(), make_format_args(std::forward&amp;lt;Args&amp;gt;(args)...));
-    ```
-    * vprint_nonunicode[link vprint_nonunicode.md]
-    * fmt.get()[link /reference/format/format_string/get.md.nolink]
-    * make_format_args[link /reference/format/make_format_args.md]
-    * std::forward[link /reference/utility/forward.md]
+- (2) :
+    - C++23 :
+        - 通常の文字列リテラルがUTF-8エンコーディングされている場合、以下と等価：
+        ```cpp
+        vprint_unicode(stream, fmt.get(), make_format_args(std::forward&amp;lt;Args&amp;gt;(args)...));
+        ```
+        * vprint_unicode[link vprint_unicode.md]
+        * fmt.get()[link /reference/format/format_string/get.md.nolink]
+        * make_format_args[link /reference/format/make_format_args.md]
+        * std::forward[link /reference/utility/forward.md]
+
+        - そうでなければ、以下と等価：
+        ```cpp
+        vprint_nonunicode(stream, fmt.get(), make_format_args(std::forward&amp;lt;Args&amp;gt;(args)...));
+        ```
+        * vprint_nonunicode[link vprint_nonunicode.md]
+        * fmt.get()[link /reference/format/format_string/get.md.nolink]
+        * make_format_args[link /reference/format/make_format_args.md]
+        * std::forward[link /reference/utility/forward.md]
+
+    - C++26 :
+        - 値として`(`[`enable_nonlocking_formatter_optimization`](/reference/format/enable_nonlocking_formatter_optimization.md)`&amp;lt;`[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;Args&amp;gt;&amp;gt; &amp;amp;&amp;amp; ...)`をもつ変数`locksafe`があるとして、
+        - 通常の文字列リテラルがUTF-8エンコーディングされている場合、以下と等価：
+        ```cpp
+        locksafe
+          ? vprint_unicode(stream, fmt.get(), make_format_args(args...))
+          : vprint_unicode_buffered(stream, fmt.get(), make_format_args(args...));
+        ```
+        * vprint_unicode[link vprint_unicode.md]
+        * vprint_unicode_buffered[link vprint_unicode_buffered.md]
+        * fmt.get()[link /reference/format/format_string/get.md.nolink]
+        * make_format_args[link /reference/format/make_format_args.md]
+
+        - そうでなければ、以下と等価：
+        ```cpp
+        locksafe
+          ? vprint_nonunicode(stream, fmt.get(), make_format_args(args...))
+          : vprint_nonunicode_buffered(stream, fmt.get(), make_format_args(args...));
+        ```
+        * vprint_nonunicode[link vprint_nonunicode.md]
+        * vprint_nonunicode_buffered[link vprint_nonunicode_buffered.md]
+        * fmt.get()[link /reference/format/format_string/get.md.nolink]
+        * make_format_args[link /reference/format/make_format_args.md]
 
 
 ## 備考
@@ -164,3 +190,6 @@ Hello
 
 ## 参照
 - [P2093R14 Formatted output](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2093r14.html)
+- [P3107R5 Permit an efficient implementation of `std::print`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3107r5.html)
+- [P3235R3 `std::print` more types faster with less memory](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3235r3.html)
+    - C++26の上記2つの提案文書では、余分な動的メモリ確保をしないよう仕様が見直された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vprint_nonunicode -- C++26対応として、enable_nonlocking_formatter_optimizationを追加</title>
      <link href="https://cpprefjp.github.io/reference/print/vprint_nonunicode.html"/>
      <id>9119e06bfc3ec280b28f12b785da0f188c5a6ab7:reference/print/vprint_nonunicode.md</id>
      <updated>2024-09-11T16:03:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/print/vprint_nonunicode.md b/reference/print/vprint_nonunicode.md
index bdeee9d6b..8d7e459c3 100644
--- a/reference/print/vprint_nonunicode.md
+++ b/reference/print/vprint_nonunicode.md
@@ -37,7 +37,9 @@ namespace std {
     ```
     * stdout[link /reference/cstdio/stdout.md.nolink]
 
-- (2) : [`vformat`](/reference/format/vformat.md)`(fmt, args)`の結果を`stream`に書き出す
+- (2) :
+    - C++23 : [`vformat`](/reference/format/vformat.md)`(fmt, args)`の結果を`stream`に書き出す
+    - C++26 : ストリームのロックを保持したまま、`fmt`で書式指定に従って書式化された`args`の文字表現を`stream`に書き出す
 
 
 ## 例外
@@ -65,3 +67,6 @@ namespace std {
 
 ## 参照
 - [P2093R14 Formatted output](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2093r14.html)
+- [P3107R5 Permit an efficient implementation of `std::print`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3107r5.html)
+- [P3235R3 `std::print` more types faster with less memory](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3235r3.html)
+    - C++26の上記2つの提案文書では、余分な動的メモリ確保をしないよう仕様が見直された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vprint_nonunicode_buffered -- C++26対応として、enable_nonlocking_formatter_optimizationを追加</title>
      <link href="https://cpprefjp.github.io/reference/print/vprint_nonunicode_buffered.html"/>
      <id>9119e06bfc3ec280b28f12b785da0f188c5a6ab7:reference/print/vprint_nonunicode_buffered.md</id>
      <updated>2024-09-11T16:03:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/print/vprint_nonunicode_buffered.md b/reference/print/vprint_nonunicode_buffered.md
new file mode 100644
index 000000000..6521cbc1c
--- /dev/null
+++ b/reference/print/vprint_nonunicode_buffered.md
@@ -0,0 +1,52 @@
+# vprint_nonunicode_buffered
+* print[meta header]
+* std[meta namespace]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  void vprint_nonunicode_buffered(
+         FILE* stream,
+         string_view fmt,
+         format_args args); // (1) C++26
+}
+```
+* FILE[link /reference/cstdio/file.md.nolink]
+* format_args[link /reference/format/basic_format_args.md]
+
+## 概要
+確保した文字列バッファに書式指定の出力を作ってから非Unicode出力する。
+
+
+## 効果
+- (1) : 以下と等価：
+    ```cpp
+    string out = vformat(fmt, args);
+    vprint_nonunicode(&amp;#34;{}&amp;#34;, make_format_args(out));
+    ```
+    * string[link /reference/string/basic_string.md]
+    * vformat[link /reference/format/vformat.md]
+    * vprint_nonunicode[link vprint_nonunicode.md]
+    * make_format_args[link /reference/format/make_format_args.md]
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): 18 [mark noimpl]
+- [GCC](/implementation.md#gcc): 14 [mark noimpl]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 7 [mark noimpl]
+
+
+## 関連項目
+- [`std::print()`](print.md)
+- [`std::println()`](println.md)
+- [`std::vprint_nonunicode()`](vprint_nonunicode.md)
+
+
+## 参照
+- [P3107R5 Permit an efficient implementation of `std::print`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3107r5.html)
+- [P3235R3 `std::print` more types faster with less memory](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3235r3.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vprint_unicode -- C++26対応として、enable_nonlocking_formatter_optimizationを追加</title>
      <link href="https://cpprefjp.github.io/reference/print/vprint_unicode.html"/>
      <id>9119e06bfc3ec280b28f12b785da0f188c5a6ab7:reference/print/vprint_unicode.md</id>
      <updated>2024-09-11T16:03:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/print/vprint_unicode.md b/reference/print/vprint_unicode.md
index 652f0d9c1..775af9269 100644
--- a/reference/print/vprint_unicode.md
+++ b/reference/print/vprint_unicode.md
@@ -37,20 +37,30 @@ namespace std {
     ```
     * stdout[link /reference/cstdio/stdout.md.nolink]
 
-- (2) : 以下の方法で自動変数を初期化する：
-    ```cpp
-    string out = vformat(fmt, args);
-    ```
-    * string[link /reference/string/basic_string.md]
-    * vformat[link /reference/format/vformat.md]
-
-    - `stream`がUnicodeを表示できる端末を参照している場合、ネイティブのUnicode APIを使用して端末に書き出す
-    - `out`に無効なコードユニットが含まれる場合、その動作は未定義であり，実装者はそれを診断することが推奨される。それ以外の場合は、変更せずにストリームに書き出す。そうでなければ、変更せず`stream`に`out`を書き出す。
-    - ネイティブのUnicode APIを使用する場合、この関数は`out`を書き出す前にフラッシュする
-
+- (2) :
+    - C++23 :
+        - 以下の方法で自動変数を初期化する：
+        ```cpp
+        string out = vformat(fmt, args);
+        ```
+        * string[link /reference/string/basic_string.md]
+        * vformat[link /reference/format/vformat.md]
+
+        - `stream`がUnicodeを表示できる端末を参照している場合、ネイティブのUnicode APIを使用して端末に書き出す
+        - `out`に無効なコードユニットが含まれる場合、その動作は未定義であり，実装者はそれを診断することが推奨される。それ以外の場合は、変更せずにストリームに書き出す。そうでなければ、変更せず`stream`に`out`を書き出す。
+        - ネイティブのUnicode APIを使用する場合、この関数は`out`を書き出す前にフラッシュする
+
+    - C++26 :
+        - `stream`のロックを取得する
+        - `fmt`で書式指定に従って書式化された`args`の文字表現を`out`とする
+        - `stream`がUnicodeを表示できる端末を参照している場合、ネイティブのUnicode APIを使用して端末に書き出す
+        - `out`に無効なコードユニットが含まれる場合、その動作は未定義であり，実装者はそれを診断することが推奨される。それ以外の場合は、変更せずにストリームに書き出す。そうでなければ、変更せず`stream`に`out`を書き出す。
+        - ネイティブのUnicode APIを使用する場合、この関数は`out`を書き出す前にフラッシュする
+        - 関数終了時に、無条件にロックを手放す
 
 ## 例外
-- [`vformat()`](/reference/format/vformat.md)関数がなんらかの例外を送出する可能性がある
+- (2) :
+    - C++23 : [`vformat()`](/reference/format/vformat.md)関数がなんらかの例外を送出する可能性がある
 - 端末かストリームへの書き込みに失敗した場合、[`system_error`](/reference/system_error/system_error.md)を送出する
 - [`bad_alloc`](/reference/new/bad_alloc.md)を送出する可能性がある
 
@@ -81,3 +91,6 @@ namespace std {
 ## 参照
 - [P2093R14 Formatted output](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2093r14.html)
 - [P2539R4 Should the output of `std::print` to a terminal be synchronized with the underlying stream?](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2539r4.html)
+- [P3107R5 Permit an efficient implementation of `std::print`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3107r5.html)
+- [P3235R3 `std::print` more types faster with less memory](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3235r3.html)
+    - C++26の上記2つの提案文書では、余分な動的メモリ確保をしないよう仕様が見直された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vprint_unicode_buffered -- C++26対応として、enable_nonlocking_formatter_optimizationを追加</title>
      <link href="https://cpprefjp.github.io/reference/print/vprint_unicode_buffered.html"/>
      <id>9119e06bfc3ec280b28f12b785da0f188c5a6ab7:reference/print/vprint_unicode_buffered.md</id>
      <updated>2024-09-11T16:03:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/print/vprint_unicode_buffered.md b/reference/print/vprint_unicode_buffered.md
new file mode 100644
index 000000000..34fcb526e
--- /dev/null
+++ b/reference/print/vprint_unicode_buffered.md
@@ -0,0 +1,52 @@
+# vprint_unicode_buffered
+* print[meta header]
+* std[meta namespace]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  void vprint_unicode_buffered(
+         FILE* stream,
+         string_view fmt,
+         format_args args); // (1) C++26
+}
+```
+* FILE[link /reference/cstdio/file.md.nolink]
+* format_args[link /reference/format/basic_format_args.md]
+
+## 概要
+確保した文字列バッファに書式指定の出力を作ってからUnicode出力する。
+
+
+## 効果
+- (1) : 以下と等価：
+    ```cpp
+    string out = vformat(fmt, args);
+    vprint_unicode(&amp;#34;{}&amp;#34;, make_format_args(out));
+    ```
+    * string[link /reference/string/basic_string.md]
+    * vformat[link /reference/format/vformat.md]
+    * vprint_unicode[link vprint_unicode.md]
+    * make_format_args[link /reference/format/make_format_args.md]
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): 18 [mark noimpl]
+- [GCC](/implementation.md#gcc): 14 [mark noimpl]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 7 [mark noimpl]
+
+
+## 関連項目
+- [`std::print()`](print.md)
+- [`std::println()`](println.md)
+- [`std::vprint_unicode()`](vprint_unicode.md)
+
+
+## 参照
+- [P3107R5 Permit an efficient implementation of `std::print`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3107r5.html)
+- [P3235R3 `std::print` more types faster with less memory](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3235r3.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>monotonic_buffer_resource -- 誤植を訂正</title>
      <link href="https://cpprefjp.github.io/reference/memory_resource/monotonic_buffer_resource.html"/>
      <id>54bc5579a332978cc5f87687f8e68560e070a6be:reference/memory_resource/monotonic_buffer_resource.md</id>
      <updated>2024-09-05T22:04:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory_resource/monotonic_buffer_resource.md b/reference/memory_resource/monotonic_buffer_resource.md
index 5b0347624..ad7684948 100644
--- a/reference/memory_resource/monotonic_buffer_resource.md
+++ b/reference/memory_resource/monotonic_buffer_resource.md
@@ -12,8 +12,8 @@ namespace std::pmr {
 
 
 ## 概要
-`monotonic_buffer_resource`はオブジェクトの破棄時にのみ管理しているメモリを全て開放する特殊な [`memory_resource`](memory_resource.md)実装である。  
-小さなオブジェクトを多数構築するために割り当てを行い、最後にまとめて開放するといった状況において高速なメモリ割り当てを行うことを目的としている。
+`monotonic_buffer_resource`はオブジェクトの破棄時にのみ管理しているメモリを全て解放する特殊な [`memory_resource`](memory_resource.md)実装である。
+小さなオブジェクトを多数構築するために割り当てを行い、最後にまとめて解放するといった状況において高速なメモリ割り当てを行うことを目的としている。
 
 このクラスはスレッドセーフではない。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping/op_constructor.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_left/mapping/op_constructor.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping/op_constructor.md b/reference/mdspan/layout_left/mapping/op_constructor.md
index 14a9af04a..84170e7f5 100644
--- a/reference/mdspan/layout_left/mapping/op_constructor.md
+++ b/reference/mdspan/layout_left/mapping/op_constructor.md
@@ -71,7 +71,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
     - `other.`[`required_span_size()`](../../layout_stride/mapping/required_span_size.md)を、`index_type`型で表現できること。
 - (7) :
     - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 1`のとき、`other.stride(1) == other.extents(0)`
-    - `other.`[`required_span_size()`](../../layout_left_padded/mapping/required_span_size.md.nolink)を、`index_type`型で表現できること。
+    - `other.`[`required_span_size()`](../../layout_left_padded/mapping/required_span_size.md)を、`index_type`型で表現できること。
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mapping -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded/mapping.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_left_padded/mapping.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded/mapping.md b/reference/mdspan/layout_left_padded/mapping.md
index 7b80516ca..d78a0ac3b 100644
--- a/reference/mdspan/layout_left_padded/mapping.md
+++ b/reference/mdspan/layout_left_padded/mapping.md
@@ -70,11 +70,11 @@ namespace std {
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
 | `extents` | 多次元配列のサイズ`extents_`を取得する | C++26 |
-| [`strides`](mapping/strides.md.nolink) | ストライド幅配列を取得する | C++26 |
-| [`required_span_size`](mapping/required_span_size.md.nolink) | 要素アクセス範囲を取得する | C++26 |
-| [`operator()`](mapping/op_call.md.nolink) | 多次元配列インデクスから要素位置へ変換する | C++26 |
-| [`is_exhaustive`](mapping/is_exhaustive.md.nolink) | [Exhaustive特性](../LayoutMapping.md)を取得する | C++26 |
-| [`stride`](mapping/stride.md.nolink) | 指定次元のストライド幅を取得する | C++26 |
+| [`strides`](mapping/strides.md) | ストライド幅配列を取得する | C++26 |
+| [`required_span_size`](mapping/required_span_size.md) | 要素アクセス範囲を取得する | C++26 |
+| [`operator()`](mapping/op_call.md) | 多次元配列インデクスから要素位置へ変換する | C++26 |
+| [`is_exhaustive`](mapping/is_exhaustive.md) | [Exhaustive特性](../LayoutMapping.md)を取得する | C++26 |
+| [`stride`](mapping/stride.md) | 指定次元のストライド幅を取得する | C++26 |
 
 
 ## 静的メンバ関数
@@ -82,7 +82,7 @@ namespace std {
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
 | `is_always_unique`  | `true`を返す | C++26 |
-| [`is_always_exhaustive`](mapping/is_always_exhaustive.md.nolink) | 型の[Exhaustive特性](../LayoutMapping.md)を取得する | C++26 |
+| [`is_always_exhaustive`](mapping/is_always_exhaustive.md) | 型の[Exhaustive特性](../LayoutMapping.md)を取得する | C++26 |
 | `is_always_strided` | `true`を返す | C++26 |
 | `is_unique`  | `true`を返す | C++26 |
 | `is_strided` | `true`を返す | C++26 |
@@ -109,8 +109,8 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`operator==`](mapping/op_equal.md.nolink) | 等値比較 | C++26 |
-| [`operator!=`](mapping/op_equal.md.nolink) | 非等値比較 (`==`により使用可能) | C++26 |
+| [`operator==`](mapping/op_equal.md) | 等値比較 | C++26 |
+| [`operator!=`](mapping/op_equal.md) | 非等値比較 (`==`により使用可能) | C++26 |
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_always_exhaustive -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded/mapping/is_always_exhaustive.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_left_padded/mapping/is_always_exhaustive.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded/mapping/is_always_exhaustive.md b/reference/mdspan/layout_left_padded/mapping/is_always_exhaustive.md
new file mode 100644
index 000000000..79aeaa5f6
--- /dev/null
+++ b/reference/mdspan/layout_left_padded/mapping/is_always_exhaustive.md
@@ -0,0 +1,38 @@
+# is_always_exhaustive
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_left_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+static constexpr bool is_always_exhaustive() noexcept;
+```
+
+## 概要
+型の[Exhaustive特性](../../LayoutMapping.md)を取得する。
+
+
+## 戻り値
+- `rank_`が`0`または`1`のとき、`true`を返す。
+- `static-padding-stride`または`first-static-extent`のいずれも[`dynamic_extent`](/reference/span/dynamic_extent.md)に等しくないとき、`static-padding-stride == first-static-extent`を返す。
+- そうではないとき、`false`を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_exhaustive -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded/mapping/is_exhaustive.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_left_padded/mapping/is_exhaustive.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded/mapping/is_exhaustive.md b/reference/mdspan/layout_left_padded/mapping/is_exhaustive.md
new file mode 100644
index 000000000..36ff30231
--- /dev/null
+++ b/reference/mdspan/layout_left_padded/mapping/is_exhaustive.md
@@ -0,0 +1,36 @@
+# is_exhaustive
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_left_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+constexpr bool is_exhaustive() const noexcept;
+```
+
+## 概要
+レイアウトマッピングの[Exhaustive特性](../../LayoutMapping.md)を取得する。
+
+## 戻り値
+- `rank_`が`0`または`1`のとき、`true`を返す。
+- そうではないとき、`extents_.extent(0) == stride(1)`を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded/mapping/op_call.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_left_padded/mapping/op_call.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded/mapping/op_call.md b/reference/mdspan/layout_left_padded/mapping/op_call.md
new file mode 100644
index 000000000..a0561eeb1
--- /dev/null
+++ b/reference/mdspan/layout_left_padded/mapping/op_call.md
@@ -0,0 +1,50 @@
+# operator()
+* mdspan[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* layout_left_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class... Indices&amp;gt;
+constexpr size_t operator()(Indices... idxs) const noexcept;
+```
+
+## 概要
+多次元インデクス値`idxs...`に対応する要素位置を求める。
+
+
+## テンプレートパラメータ制約
+- `sizeof...(Indices) == rank_`が`true`、かつ
+- `(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;Indices, index_type&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
+- `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, Indices&amp;gt; &amp;amp;&amp;amp; ...)`が`true`であること。
+
+
+## 事前条件
+多次元インデクス値[`extents_type::index-cast`](../../extents/index-cast.md)`(idxs)`は、多次元配列サイズ`extents_`における有効なインデクスであること。
+
+
+## 戻り値
+```cpp
+return ((static_cast&amp;lt;index_type&amp;gt;(idxs) * stride(P_rank)) + ... + 0);
+```
+* stride[link stride.md]
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded/mapping/op_equal.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_left_padded/mapping/op_equal.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded/mapping/op_equal.md b/reference/mdspan/layout_left_padded/mapping/op_equal.md
new file mode 100644
index 000000000..734a10cd1
--- /dev/null
+++ b/reference/mdspan/layout_left_padded/mapping/op_equal.md
@@ -0,0 +1,49 @@
+# operator==
+* mdspan[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* layout_left_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class LayoutLeftPaddedMapping&amp;gt;
+friend constexpr bool operator==(
+  const mapping&amp;amp; x, const LayoutLeftPaddedMapping&amp;amp; y) noexcept;
+
+//operator==により、以下のオーバーロードが使用可能になる        
+template&amp;lt;class LayoutLeftPaddedMapping&amp;gt;
+friend constexpr bool operator!=(
+  const mapping&amp;amp; x, const LayoutLeftPaddedMapping&amp;amp; y) noexcept;
+```
+
+## 概要
+`mapping`の等値比較を行う。
+
+
+## テンプレートパラメータ制約
+- [`is-layout-left-padded-mapping-of`](../../is-layout-left-padded-mapping-of.md)`&amp;lt;LayoutLeftPaddedMapping&amp;gt;`
+- `LayoutLeftPaddedMapping::extents_type::`[`rank()`](../../extents/rank.md) `== rank_`
+
+
+## 戻り値
+- [`x.extents() == y.extents()`](../../extents/op_equal.md)かつ`rank_ &amp;lt; 2 || x.`[`stride`](stride.md)`(1) == y.stride(1)`のとき、`true`を返す。
+- そうでなければ、`false`を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>required_span_size -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded/mapping/required_span_size.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_left_padded/mapping/required_span_size.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded/mapping/required_span_size.md b/reference/mdspan/layout_left_padded/mapping/required_span_size.md
new file mode 100644
index 000000000..4499cc0af
--- /dev/null
+++ b/reference/mdspan/layout_left_padded/mapping/required_span_size.md
@@ -0,0 +1,37 @@
+# required_span_size
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_left_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+constexpr index_type required_span_size() const noexcept;
+```
+
+## 概要
+メモリブロックに対する要素アクセス範囲を取得する。
+
+
+## 戻り値
+- 多次元インデクス空間`extents_`のサイズが0のとき、値`0`を返す。
+- そうではないとき、`*this(((extents_(P_rank) - index_type(1))...)) + 1`を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stride -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded/mapping/stride.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_left_padded/mapping/stride.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded/mapping/stride.md b/reference/mdspan/layout_left_padded/mapping/stride.md
new file mode 100644
index 000000000..b798eaab3
--- /dev/null
+++ b/reference/mdspan/layout_left_padded/mapping/stride.md
@@ -0,0 +1,46 @@
+# stride
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_left_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+constexpr index_type stride(rank_type r) const noexcept;
+```
+
+## 概要
+`r`番目次元のストライド幅を取得する。
+
+
+## 事前条件
+`r &amp;lt; rank_`
+
+
+## 戻り値
+- `r == 0`のとき、値`1`を返す。
+- `r == 1`のとき、値`stride-1`を返す。
+- そうでなければ、半開区間`[1, r)`の全ての値`k`に対して値`stride-1`と全ての`extents_.extent(k)`を乗算した値を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`strides`](strides.md)
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>strides -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded/mapping/strides.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_left_padded/mapping/strides.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded/mapping/strides.md b/reference/mdspan/layout_left_padded/mapping/strides.md
new file mode 100644
index 000000000..0fd7389f9
--- /dev/null
+++ b/reference/mdspan/layout_left_padded/mapping/strides.md
@@ -0,0 +1,41 @@
+# strides
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_left_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+constexpr array&amp;lt;index_type, rank_&amp;gt; strides() const noexcept;
+```
+* array[link /reference/array/array.md]
+
+## 概要
+ストライド幅配列を取得する。
+
+
+## 戻り値
+[`array`](/reference/array/array.md)`&amp;lt;index_type, rank_&amp;gt;({`[`stride`](stride.md)`(P_rank)...})`
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`stride`](stride.md)
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>submdspan_mapping -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded/mapping/submdspan_mapping.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_left_padded/mapping/submdspan_mapping.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded/mapping/submdspan_mapping.md b/reference/mdspan/layout_left_padded/mapping/submdspan_mapping.md
index 699123482..39da81837 100644
--- a/reference/mdspan/layout_left_padded/mapping/submdspan_mapping.md
+++ b/reference/mdspan/layout_left_padded/mapping/submdspan_mapping.md
@@ -54,10 +54,10 @@ friend constexpr auto submdspan_mapping(
 - 値`sub_ext` : 式[`submdspan_extents`](../../submdspan_extents.md)`(extents(), slices...)`の結果
 - 型`SubExtents` : `decltype(sub_ext)`
 - 値`sub_strides` : `extents()`の各次元インデクス`k`において、[`map-rank[k]`](../../submdspan_extents.md)が[`dynamic_extent`](/reference/span/dynamic_extent.md)ではない`k`に対し`sub_strides[map-rank[k]]`が下記を満たす、[`array`](/reference/array/array.md)`&amp;lt;SubExtents::index_type,` [`SubExtents::rank()`](../../extents/rank.md)`&amp;gt;`型の配列値
-    - 型`S_k`が[`strided_slice`](../../strided_slice.md)の特殊化かつ`s_k.stride &amp;lt; s_k.extent`の場合、[`stride(k)`](stride.md.nolink) `*` [`de-ice`](../../de-ice.md)`(s_k.stride)`
-    - そうでなければ、[`stride(k)`](stride.md.nolink)
+    - 型`S_k`が[`strided_slice`](../../strided_slice.md)の特殊化かつ`s_k.stride &amp;lt; s_k.extent`の場合、[`stride(k)`](stride.md) `*` [`de-ice`](../../de-ice.md)`(s_k.stride)`
+    - そうでなければ、[`stride(k)`](stride.md)
 - パラメータパック`P` : [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`make_index_sequence`](/reference/utility/make_index_sequence.md)`&amp;lt;rank()&amp;gt;,` [`index_sequence`](/reference/utility/index_sequence.md)`&amp;lt;P...&amp;gt;&amp;gt; == true`
-- 値`offset` : `size_t`型の値[`(*this)`](op_call.md.nolink)`(`[`first_`](../../first_.md)`&amp;lt;index_type, P&amp;gt;(slices...)...)`
+- 値`offset` : `size_t`型の値[`(*this)`](op_call.md)`(`[`first_`](../../first_.md)`&amp;lt;index_type, P&amp;gt;(slices...)...)`
 
 説明専用の`submdspan-mapping-impl`関数テンプレートは下記の値を返す。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping/op_constructor.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_right/mapping/op_constructor.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping/op_constructor.md b/reference/mdspan/layout_right/mapping/op_constructor.md
index a26d29527..e11c6ff4d 100644
--- a/reference/mdspan/layout_right/mapping/op_constructor.md
+++ b/reference/mdspan/layout_right/mapping/op_constructor.md
@@ -71,7 +71,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
     - `other.`[`required_span_size()`](../../layout_stride/mapping/required_span_size.md)を、`index_type`型で表現できること。
 - (7) :
     - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 1`のとき、`other.stride(extents_type::rank() - 2) == other.extents().extent(extents_type::rank() - 1)`
-    - `other.`[`required_span_size()`](../../layout_right_padded/mapping/required_span_size.md.nolink)を、`index_type`型で表現できること。
+    - `other.`[`required_span_size()`](../../layout_right_padded/mapping/required_span_size.md)を、`index_type`型で表現できること。
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mapping -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded/mapping.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_right_padded/mapping.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded/mapping.md b/reference/mdspan/layout_right_padded/mapping.md
index 97528c06a..d71ae3215 100644
--- a/reference/mdspan/layout_right_padded/mapping.md
+++ b/reference/mdspan/layout_right_padded/mapping.md
@@ -70,11 +70,11 @@ namespace std {
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
 | `extents` | 多次元配列のサイズ`extents_`を取得する | C++26 |
-| [`strides`](mapping/strides.md.nolink) | ストライド幅配列を取得する | C++26 |
-| [`required_span_size`](mapping/required_span_size.md.nolink) | 要素アクセス範囲を取得する | C++26 |
-| [`operator()`](mapping/op_call.md.nolink) | 多次元配列インデクスから要素位置へ変換する | C++26 |
-| [`is_exhaustive`](mapping/is_exhaustive.md.nolink) | [Exhaustive特性](../LayoutMapping.md)を取得する | C++26 |
-| [`stride`](mapping/stride.md.nolink) | 指定次元のストライド幅を取得する | C++26 |
+| [`strides`](mapping/strides.md) | ストライド幅配列を取得する | C++26 |
+| [`required_span_size`](mapping/required_span_size.md) | 要素アクセス範囲を取得する | C++26 |
+| [`operator()`](mapping/op_call.md) | 多次元配列インデクスから要素位置へ変換する | C++26 |
+| [`is_exhaustive`](mapping/is_exhaustive.md) | [Exhaustive特性](../LayoutMapping.md)を取得する | C++26 |
+| [`stride`](mapping/stride.md) | 指定次元のストライド幅を取得する | C++26 |
 
 
 ## 静的メンバ関数
@@ -82,7 +82,7 @@ namespace std {
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
 | `is_always_unique`  | `true`を返す | C++26 |
-| [`is_always_exhaustive`](mapping/is_always_exhaustive.md.nolink) | 型の[Exhaustive特性](../LayoutMapping.md)を取得する | C++26 |
+| [`is_always_exhaustive`](mapping/is_always_exhaustive.md) | 型の[Exhaustive特性](../LayoutMapping.md)を取得する | C++26 |
 | `is_always_strided` | `true`を返す | C++26 |
 | `is_unique`  | `true`を返す | C++26 |
 | `is_strided` | `true`を返す | C++26 |
@@ -109,8 +109,8 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`operator==`](mapping/op_equal.md.nolink) | 等値比較 | C++26 |
-| [`operator!=`](mapping/op_equal.md.nolink) | 非等値比較 (`==`により使用可能) | C++26 |
+| [`operator==`](mapping/op_equal.md) | 等値比較 | C++26 |
+| [`operator!=`](mapping/op_equal.md) | 非等値比較 (`==`により使用可能) | C++26 |
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_always_exhaustive -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded/mapping/is_always_exhaustive.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_right_padded/mapping/is_always_exhaustive.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded/mapping/is_always_exhaustive.md b/reference/mdspan/layout_right_padded/mapping/is_always_exhaustive.md
new file mode 100644
index 000000000..41c5aaebc
--- /dev/null
+++ b/reference/mdspan/layout_right_padded/mapping/is_always_exhaustive.md
@@ -0,0 +1,38 @@
+# is_always_exhaustive
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_right_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+static constexpr bool is_always_exhaustive() noexcept;
+```
+
+## 概要
+型の[Exhaustive特性](../../LayoutMapping.md)を取得する。
+
+
+## 戻り値
+- `rank_`が`0`または`1`のとき、`true`を返す。
+- `static-padding-stride`または`last-static-extent`のいずれも[`dynamic_extent`](/reference/span/dynamic_extent.md)に等しくないとき、`static-padding-stride == last-static-extent`を返す。
+- そうではないとき、`false`を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_exhaustive -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded/mapping/is_exhaustive.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_right_padded/mapping/is_exhaustive.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded/mapping/is_exhaustive.md b/reference/mdspan/layout_right_padded/mapping/is_exhaustive.md
new file mode 100644
index 000000000..d507a7ca7
--- /dev/null
+++ b/reference/mdspan/layout_right_padded/mapping/is_exhaustive.md
@@ -0,0 +1,36 @@
+# is_exhaustive
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_right_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+constexpr bool is_exhaustive() const noexcept;
+```
+
+## 概要
+レイアウトマッピングの[Exhaustive特性](../../LayoutMapping.md)を取得する。
+
+## 戻り値
+- `rank_`が`0`または`1`のとき、`true`を返す。
+- そうではないとき、`extents_.extent(rank_ - 1) == stride(rank_ - 2)`を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded/mapping/op_call.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_right_padded/mapping/op_call.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded/mapping/op_call.md b/reference/mdspan/layout_right_padded/mapping/op_call.md
new file mode 100644
index 000000000..04a3416ea
--- /dev/null
+++ b/reference/mdspan/layout_right_padded/mapping/op_call.md
@@ -0,0 +1,50 @@
+# operator()
+* mdspan[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* layout_right_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class... Indices&amp;gt;
+constexpr size_t operator()(Indices... idxs) const noexcept;
+```
+
+## 概要
+多次元インデクス値`idxs...`に対応する要素位置を求める。
+
+
+## テンプレートパラメータ制約
+- `sizeof...(Indices) == rank_`が`true`、かつ
+- `(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;Indices, index_type&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
+- `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, Indices&amp;gt; &amp;amp;&amp;amp; ...)`が`true`であること。
+
+
+## 事前条件
+多次元インデクス値[`extents_type::index-cast`](../../extents/index-cast.md)`(idxs)`は、多次元配列サイズ`extents_`における有効なインデクスであること。
+
+
+## 戻り値
+```cpp
+return ((static_cast&amp;lt;index_type&amp;gt;(idxs) * stride(P_rank)) + ... + 0);
+```
+* stride[link stride.md]
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded/mapping/op_equal.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_right_padded/mapping/op_equal.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded/mapping/op_equal.md b/reference/mdspan/layout_right_padded/mapping/op_equal.md
new file mode 100644
index 000000000..c5e50bf42
--- /dev/null
+++ b/reference/mdspan/layout_right_padded/mapping/op_equal.md
@@ -0,0 +1,49 @@
+# operator==
+* mdspan[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* layout_right_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class LayoutRightPaddedMapping&amp;gt;
+friend constexpr bool operator==(
+  const mapping&amp;amp; x, const LayoutRightPaddedMapping&amp;amp; y) noexcept;
+
+//operator==により、以下のオーバーロードが使用可能になる        
+template&amp;lt;class LayoutRightPaddedMapping&amp;gt;
+friend constexpr bool operator!=(
+  const mapping&amp;amp; x, const LayoutRightPaddedMapping&amp;amp; y) noexcept;
+```
+
+## 概要
+`mapping`の等値比較を行う。
+
+
+## テンプレートパラメータ制約
+- [`is-layout-right-padded-mapping-of`](../../is-layout-right-padded-mapping-of.md)`&amp;lt;LayoutRightPaddedMapping&amp;gt;`
+- `LayoutRightPaddedMapping::extents_type::`[`rank()`](../../extents/rank.md) `== rank_`
+
+
+## 戻り値
+- [`x.extents() == y.extents()`](../../extents/op_equal.md)かつ`rank_ &amp;lt; 2 || x.`[`stride`](stride.md)`(rank_ - 2) == y.stride(rank_ - 1)`のとき、`true`を返す。
+- そうでなければ、`false`を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>required_span_size -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded/mapping/required_span_size.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_right_padded/mapping/required_span_size.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded/mapping/required_span_size.md b/reference/mdspan/layout_right_padded/mapping/required_span_size.md
new file mode 100644
index 000000000..13de5e5bf
--- /dev/null
+++ b/reference/mdspan/layout_right_padded/mapping/required_span_size.md
@@ -0,0 +1,37 @@
+# required_span_size
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_right_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+constexpr index_type required_span_size() const noexcept;
+```
+
+## 概要
+メモリブロックに対する要素アクセス範囲を取得する。
+
+
+## 戻り値
+- 多次元インデクス空間`extents_`のサイズが0のとき、値`0`を返す。
+- そうではないとき、`*this(((extents_(P_rank) - index_type(1))...)) + 1`を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stride -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded/mapping/stride.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_right_padded/mapping/stride.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded/mapping/stride.md b/reference/mdspan/layout_right_padded/mapping/stride.md
new file mode 100644
index 000000000..4cb1b8cb4
--- /dev/null
+++ b/reference/mdspan/layout_right_padded/mapping/stride.md
@@ -0,0 +1,46 @@
+# stride
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_right_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+constexpr index_type stride(rank_type r) const noexcept;
+```
+
+## 概要
+`r`番目次元のストライド幅を取得する。
+
+
+## 事前条件
+`r &amp;lt; rank_`
+
+
+## 戻り値
+- `r == rank_ - 1`のとき、値`1`を返す。
+- `r == rank_ - 2`のとき、値`stride-rm2`を返す。
+- そうでなければ、半開区間`[r + 1, rank_ - 1)`の全ての値`k`に対して値`stride-rm2`と全ての`extents_.extent(k)`を乗算した値を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`strides`](strides.md)
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>strides -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded/mapping/strides.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_right_padded/mapping/strides.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded/mapping/strides.md b/reference/mdspan/layout_right_padded/mapping/strides.md
new file mode 100644
index 000000000..d7a4192b5
--- /dev/null
+++ b/reference/mdspan/layout_right_padded/mapping/strides.md
@@ -0,0 +1,41 @@
+# strides
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_right_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+constexpr array&amp;lt;index_type, rank_&amp;gt; strides() const noexcept;
+```
+* array[link /reference/array/array.md]
+
+## 概要
+ストライド幅配列を取得する。
+
+
+## 戻り値
+[`array`](/reference/array/array.md)`&amp;lt;index_type, rank_&amp;gt;({`[`stride`](stride.md)`(P_rank)...})`
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`stride`](stride.md)
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>submdspan_mapping -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded/mapping/submdspan_mapping.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_right_padded/mapping/submdspan_mapping.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded/mapping/submdspan_mapping.md b/reference/mdspan/layout_right_padded/mapping/submdspan_mapping.md
index 6d5a1beff..b53c0d1e4 100644
--- a/reference/mdspan/layout_right_padded/mapping/submdspan_mapping.md
+++ b/reference/mdspan/layout_right_padded/mapping/submdspan_mapping.md
@@ -54,10 +54,10 @@ friend constexpr auto submdspan_mapping(
 - 値`sub_ext` : 式[`submdspan_extents`](../../submdspan_extents.md)`(extents(), slices...)`の結果
 - 型`SubExtents` : `decltype(sub_ext)`
 - 値`sub_strides` : `extents()`の各次元インデクス`k`において、[`map-rank[k]`](../../submdspan_extents.md)が[`dynamic_extent`](/reference/span/dynamic_extent.md)ではない`k`に対し`sub_strides[map-rank[k]]`が下記を満たす、[`array`](/reference/array/array.md)`&amp;lt;SubExtents::index_type,` [`SubExtents::rank()`](../../extents/rank.md)`&amp;gt;`型の配列値
-    - 型`S_k`が[`strided_slice`](../../strided_slice.md)の特殊化かつ`s_k.stride &amp;lt; s_k.extent`の場合、[`stride(k)`](stride.md.nolink) `*` [`de-ice`](../../de-ice.md)`(s_k.stride)`
-    - そうでなければ、[`stride(k)`](stride.md.nolink)
+    - 型`S_k`が[`strided_slice`](../../strided_slice.md)の特殊化かつ`s_k.stride &amp;lt; s_k.extent`の場合、[`stride(k)`](stride.md) `*` [`de-ice`](../../de-ice.md)`(s_k.stride)`
+    - そうでなければ、[`stride(k)`](stride.md)
 - パラメータパック`P` : [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`make_index_sequence`](/reference/utility/make_index_sequence.md)`&amp;lt;rank()&amp;gt;,` [`index_sequence`](/reference/utility/index_sequence.md)`&amp;lt;P...&amp;gt;&amp;gt; == true`
-- 値`offset` : `size_t`型の値[`(*this)`](op_call.md.nolink)`(`[`first_`](../../first_.md)`&amp;lt;index_type, P&amp;gt;(slices...)...)`
+- 値`offset` : `size_t`型の値[`(*this)`](op_call.md)`(`[`first_`](../../first_.md)`&amp;lt;index_type, P&amp;gt;(slices...)...)`
 
 説明専用の`submdspan-mapping-impl`関数テンプレートは下記の値を返す。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>monotonic_buffer_resource -- 誤植を訂正</title>
      <link href="https://cpprefjp.github.io/reference/memory_resource/monotonic_buffer_resource.html"/>
      <id>00567b320c4021e984609c242307e6ff0e1bcbe7:reference/memory_resource/monotonic_buffer_resource.md</id>
      <updated>2024-09-05T19:37:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory_resource/monotonic_buffer_resource.md b/reference/memory_resource/monotonic_buffer_resource.md
index 281daea1d..5b0347624 100644
--- a/reference/memory_resource/monotonic_buffer_resource.md
+++ b/reference/memory_resource/monotonic_buffer_resource.md
@@ -13,7 +13,7 @@ namespace std::pmr {
 
 ## 概要
 `monotonic_buffer_resource`はオブジェクトの破棄時にのみ管理しているメモリを全て開放する特殊な [`memory_resource`](memory_resource.md)実装である。  
-少さなオブジェクトを多数構築するために割り当てを行い、最後にまとめて開放するといった状況において高速なメモリ割り当てを行うことを目的としている。
+小さなオブジェクトを多数構築するために割り当てを行い、最後にまとめて開放するといった状況において高速なメモリ割り当てを行うことを目的としている。
 
 このクラスはスレッドセーフではない。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator-- -- Filter view: 説明を微調整</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/iterator/op_decrement.html"/>
      <id>9c0072035c215430fa226e4830bd839015bd4c77:reference/ranges/filter_view/iterator/op_decrement.md</id>
      <updated>2024-09-01T18:49:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/iterator/op_decrement.md b/reference/ranges/filter_view/iterator/op_decrement.md
index c7405e6c7..79450e66d 100644
--- a/reference/ranges/filter_view/iterator/op_decrement.md
+++ b/reference/ranges/filter_view/iterator/op_decrement.md
@@ -34,6 +34,7 @@ auto tmp = *this;
 --*this;
 return tmp;
 ```
+
 と等しい。
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator++ -- Filter view: 説明を微調整</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/iterator/op_increment.html"/>
      <id>9c0072035c215430fa226e4830bd839015bd4c77:reference/ranges/filter_view/iterator/op_increment.md</id>
      <updated>2024-09-01T18:49:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/iterator/op_increment.md b/reference/ranges/filter_view/iterator/op_increment.md
index c217c2883..28de17ad0 100644
--- a/reference/ranges/filter_view/iterator/op_increment.md
+++ b/reference/ranges/filter_view/iterator/op_increment.md
@@ -40,6 +40,7 @@ auto tmp = *this;
 ++*this;
 return tmp;
 ```
+
 と等しい。
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
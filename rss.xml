<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-03-25T18:56:52.839869</updated>
  <id>a0ec3010-0a36-4d26-b4be-defb787b091e</id>

  
    <entry>
      <title>format -- アライメントの詳細を記載</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>98c71c609bfbd6232d132f9066711cd26df334fd:reference/format/format.md</id>
      <updated>2024-03-26T03:52:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index 6adcc35dc..60a4f19d6 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -126,8 +126,7 @@ string s3 = format(&amp;#34;{} {1}&amp;#34;,  &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // コンパイルエラー
 
 イテレータ範囲`[first, last)`を[`to_chars`](/reference/charconv/to_chars.md)の結果を格納するのに十分な範囲、`value`をフォーマットする値、`charT`を`char`または`wchar_t`とする。
 
-* 以下の表の通りに[`to_chars`](/reference/charconv/to_chars.md)を呼び出したあと、その結果を出力へコピーするかのような振る舞いをする。ただし、実際に[`to_chars`](/reference/charconv/to_chars.md)を呼び出すかどうかは規定されていない。
-* 実際には、出力へコピーする際にパディングなども行われる。
+* ロケールを考慮しない場合、数値を文字列化する部分は以下の表の通りに[`to_chars`](/reference/charconv/to_chars.md)を呼び出した結果と等しくなる。
 
 | type   | 意味                       | 効果                                                                      | 対応バージョン |
 |:-------|:---------------------------|:--------------------------------------------------------------------------|----------------|
@@ -164,6 +163,51 @@ string s3 = format(&amp;#34;{} {1}&amp;#34;,  &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // コンパイルエラー
 
 ポインタは`void*`のみサポートする。それ以外のポインタは、`void*`にキャストしなければ出力できない。
 
+#### アライメントの詳細
+
+指定した幅が必要な幅より小さい場合や、幅を省略している場合はアライメントは無効となる。
+
+アライメントにおいて、一部の文字は大きな幅を持っているとみなされる。
+
+UTF-8・UTF-16・UTF-32の文字のシーケンスの場合、その幅はUnicode標準 UAX #29 で定める拡張書記素クラスタの幅の合計となる。
+
+以下の文字は2文字分の幅を持つ。
+
+- UAX #44 の規定に従って、`East_Asian_Width` が `W` (Wide)または `F` (Fullwidth)であるコードポイント
+- `U+4DC0` - `U+4DFF` (Yijing Hexagram Symbols)
+- `U+1F300` - `U+1F5FF` (Miscellaneous Symbols and Pictographs)
+- `U+1F900` - `U+1F9FF` (Supplemental Symbols and Pictographs)
+
+それ以外のコードポイントの幅は1である。
+
+UTF-8・UTF-16・UTF-32以外の文字のシーケンスの幅は未規定。
+
+アライメントに使用する文字は、常に幅1として扱われる。
+
+```cpp
+std::format(&amp;#34;{:*&amp;gt;6}&amp;#34;, &amp;#34;あ&amp;#34;); // &amp;#34;****あ&amp;#34;
+std::format(&amp;#34;{:あ&amp;gt;6}&amp;#34;, &amp;#39;x&amp;#39;); // &amp;#34;あああああx&amp;#34;
+```
+
+##### 0埋めとの関係
+
+アライメント方向が指定されていると、0埋めは無効となる。
+
+```cpp
+// 0埋めは符号を考慮する
+std::format(&amp;#34;{:05}&amp;#34;, 42);    // &amp;#34;00042&amp;#34;
+std::format(&amp;#34;{:+05}&amp;#34;, 42);   // &amp;#34;+0042&amp;#34;
+std::format(&amp;#34;{: 05}&amp;#34;, 42);   // &amp;#34; 0042&amp;#34;
+
+// アライメントは符号を考慮しない
+std::format(&amp;#34;{:0&amp;gt;5}&amp;#34;, 42);   // &amp;#34;00042&amp;#34;
+std::format(&amp;#34;{:0&amp;gt;+5}&amp;#34;, 42);  // &amp;#34;00+42&amp;#34;
+std::format(&amp;#34;{:0&amp;gt; 5}&amp;#34;, 42);  // &amp;#34;00 42&amp;#34;
+
+// 0埋めも指定しているが、アライメント方向が指定されているのでアライメントが優先される
+std::format(&amp;#34;{:0&amp;gt;05}&amp;#34;, -42);  // &amp;#34;00-42&amp;#34;
+```
+
 #### &amp;lt;a id=&amp;#34;range-format-options&amp;#34; href=&amp;#34;#range-format-options&amp;#34;&amp;gt;Range・シーケンスコンテナの書式 (C++23)&amp;lt;/a&amp;gt;
 
 Range・シーケンスコンテナに対して使用できる標準のオプション書式は次の通り(`[]`は省略可の意味)。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- フォーマット書式の表を整理</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>89d821a70e451523f47cab945528463bf5fc14cb:reference/format/format.md</id>
      <updated>2024-03-26T03:13:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index e173ca258..6adcc35dc 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -86,7 +86,7 @@ string s3 = format(&amp;#34;{} {1}&amp;#34;,  &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // コンパイルエラー
     * スペース : 正の数にはスペースを表示する
 * `#` : 代替表現(`0x`など形式がわかる表記)を使う
 * `0` : 符号を考慮して0で埋める
-* `width` : 幅 (省略時は値に応じて幅が決まり、アライメントは機能しない)
+* `width` : 幅 (アライメントもしくは0埋めの幅)
     * 置換フィールドを使って変数で指定できる
 * `precision` : 精度(浮動小数点数の場合)、使う文字数(文字列の場合)
     * 置換フィールドを使って変数で指定できる
@@ -100,10 +100,29 @@ string s3 = format(&amp;#34;{} {1}&amp;#34;,  &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // コンパイルエラー
 
 | type       | 意味         |効果                                                                             | 対応バージョン |
 |:-----------|:-------------|--------------------------------------------------------------------------------------|-------|
-| s (省略可) | 文字列       | 文字列をそのまま出力                                                                      | C++20 |
+| s          | 文字列       | 文字列をそのまま出力                                                                      | C++20 |
 | ?          | デバッグ出力 | 文字・文字列を引用符で囲み、エスケープシーケンスをエスケープして出力 (例:`&amp;#34;\n&amp;#34;`は`&amp;#34;\&amp;#34;\n\&amp;#34;&amp;#34;`となる) | C++23 |
 
-#### 文字型 / `bool`型 / 整数型の場合
+デフォルトは `s`。
+
+#### 文字型の場合
+
+| type   | 意味                       | 効果                                                                      | 対応バージョン |
+|:-------|:---------------------------|:--------------------------------------------------------------------------|----------------|
+| c      | 文字として出力             | `static_cast&amp;lt;charT&amp;gt;(value)` (収まらないときは`format_error`)              | C++20 |
+| ?      | デバッグ出力               | 文字・文字列を引用符で囲み、エスケープシーケンスをエスケープして出力 (例:`&amp;#34;\n&amp;#34;`は`&amp;#34;\&amp;#34;\\n\&amp;#34;&amp;#34;`となる) | C++23 |
+
+デフォルトは `c`。
+
+整数型のオプションも指定できる。その場合は、十分な大きさの符号なし整数型として扱われる。
+
+#### `bool`型の場合
+
+デフォルトでは `true` / `false` という文字列を出力する。
+
+整数型のオプションも指定できる。その場合は、`unsigned char` に `static_cast` される。
+
+#### 整数型の場合
 
 イテレータ範囲`[first, last)`を[`to_chars`](/reference/charconv/to_chars.md)の結果を格納するのに十分な範囲、`value`をフォーマットする値、`charT`を`char`または`wchar_t`とする。
 
@@ -112,34 +131,36 @@ string s3 = format(&amp;#34;{} {1}&amp;#34;,  &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // コンパイルエラー
 
 | type   | 意味                       | 効果                                                                      | 対応バージョン |
 |:-------|:---------------------------|:--------------------------------------------------------------------------|----------------|
-| b      | 2進数(小文字)              | `to_chars(first, last, value, 2)` (代替表現の接頭辞 `0b`)                 | C++20 |
-| B      | 2進数(大文字)              | `b`の大文字版 (代替表現の接頭辞 `0B`)                                     | C++20 |
-| c      | 文字として出力             | `static_cast&amp;lt;charT&amp;gt;(value)` (収まらないときは`format_error`)              | C++20 |
+| b, B   | 2進数                      | `to_chars(first, last, value, 2)` (代替表現の接頭辞 `0b`)                 | C++20 |
 | d      | 10進数                     | `to_chars(first, last, value)`                                            | C++20 |
 | o      | 8進数                      | `to_chars(first, last, value, 8)` (代替表現の接頭辞 `0`、ただし値が0のときは接頭辞なし) | C++20 |
-| x      | 16進数(小文字)             | `to_chars(first, last, value, 16)` (代替表現の接頭辞 `0x`)                | C++20 |
-| X      | 16進数(大文字)             | `x`の大文字版 (代替表現の接頭辞 `0X`)                                     | C++20 |
-| ?      | デバッグ出力               | 文字・文字列を引用符で囲み、エスケープシーケンスをエスケープして出力 (例:`&amp;#34;\n&amp;#34;`は`&amp;#34;\&amp;#34;\\n\&amp;#34;&amp;#34;`となる) | C++23 |
-| (なし) | デフォルト                 | `d` (整数型の場合)&amp;lt;br/&amp;gt;`c` (文字型の場合)&amp;lt;br/&amp;gt;`&amp;#34;true&amp;#34;`/`&amp;#34;false&amp;#34;`を出力(`bool`型の場合) | C++20 |
+| x, X   | 16進数                     | `to_chars(first, last, value, 16)` (代替表現の接頭辞 `0x`)                | C++20 |
+| c      | 文字として出力             | `static_cast&amp;lt;charT&amp;gt;(value)` した値を文字として出力 (収まらないときは`format_error`)  | C++20 |
+
+デフォルトは `d`。
+
+2進数・16進数については、大文字のオプションを指定すると代替表現および数値中のアルファベットが大文字になる。
 
 #### 浮動小数点数型の場合
 
-| type       | 意味                             | 効果                                                                                                                                                                  |
-|:-----------|:---------------------------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
-| f,F        | 指数表記しない                   | `to_chars(first, last, value, chars_format::fixed, precision)` (精度が指定されたとき)&amp;lt;br/&amp;gt;`to_chars(first, last, value, chars_format::fixed, 6)` (それ以外)            |
-| e          | 指数表記(小文字)                 | `to_chars(first, last, value, chars_format::scientific, precision)` (精度が指定されたとき)&amp;lt;br/&amp;gt;`to_chars(first, last, value, chars_format::scientific, 6)` (それ以外)  |
-| E          | 指数表記(大文字)                 | `e`の大文字版                                                                                                                                                         |
-| a          | 16進指数表記(小文字)             | `to_chars(first, last, value, chars_format::hex, precision)` (精度が指定されたとき)&amp;lt;br/&amp;gt;`to_chars(first, last, value, chars_format::hex)` (それ以外)                   |
-| A          | 16進指数表記(大文字)             | `a`の大文字版                                                                                                                                                         |
-| g          | 値に応じた表記(小文字)           | `to_chars(first, last, value, chars_format::general, precision)` (精度が指定されたとき)&amp;lt;br/&amp;gt;`to_chars(first, last, value, chars_format::general, 6)` (それ以外) |
-| G          | 値に応じた表記(大文字)           | `g`の大文字版                                                                                                                                                         |
-| (なし)     | デフォルト                       | `to_chars(first, last, value, chars_format::fixed, general, precision)` (精度が指定されたとき)&amp;lt;br/&amp;gt;`to_chars(first, last, value)` (それ以外)                           |
+| type       | 意味                      | 効果                                                                                                                                                                  |
+|:-----------|:--------------------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
+| f, F       | 指数表記しない            | `to_chars(first, last, value, chars_format::fixed, precision)` (精度が指定されたとき)&amp;lt;br/&amp;gt;`to_chars(first, last, value, chars_format::fixed, 6)` (それ以外)           |
+| e, E       | 指数表記する              | `to_chars(first, last, value, chars_format::scientific, precision)` (精度が指定されたとき)&amp;lt;br/&amp;gt;`to_chars(first, last, value, chars_format::scientific, 6)` (それ以外) |
+| a, A       | 16進数で指数表記する      | `to_chars(first, last, value, chars_format::hex, precision)` (精度が指定されたとき)&amp;lt;br/&amp;gt;`to_chars(first, last, value, chars_format::hex)` (それ以外)                  |
+| g, G       | 値に応じて指数表記を使う  | `to_chars(first, last, value, chars_format::general, precision)` (精度が指定されたとき)&amp;lt;br/&amp;gt;`to_chars(first, last, value, chars_format::general, 6)` (それ以外)       |
+
+デフォルトは `g`。
+
+大文字のオプションを指定すると数値中のアルファベットが大文字になる。
 
 #### ポインタの場合
 
 | type       | 意味               | 効果                                                                                                            |
 |:-----------|:-------------------|:----------------------------------------------------------------------------------------------------------------|
-| p (省略可) | アドレスを出力する | `&amp;#34;0x&amp;#34; + to_chars(first, last, reinterpret_cast&amp;lt;uintptr_t&amp;gt;(value), 16)`  |
+| p          | アドレスを出力する | `0x` につづいて、`to_chars(first, last, reinterpret_cast&amp;lt;uintptr_t&amp;gt;(value), 16)` の結果を出力する               |
+
+デフォルトは `p`。
 
 ポインタは`void*`のみサポートする。それ以外のポインタは、`void*`にキャストしなければ出力できない。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- オプション書式におけるロケールのオプションを修正</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>c48319e12b5865fe6e8453cf0b77c7635e0c0900:reference/format/format.md</id>
      <updated>2024-03-26T02:54:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index 9ed95e7e4..e173ca258 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -72,7 +72,7 @@ string s3 = format(&amp;#34;{} {1}&amp;#34;,  &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // コンパイルエラー
 基本的に`printf`の書式を踏襲しているが、あくまでもオプションであり、省略しても`&amp;lt;iostream&amp;gt;`と同じようにデフォルトの書式が使われる。
 
 ```
-[[fill] align] [sign] [&amp;#39;#&amp;#39;] [&amp;#39;0&amp;#39;] [width] [&amp;#39;.&amp;#39; precision] [type]
+[[fill] align] [sign] [&amp;#39;#&amp;#39;] [&amp;#39;0&amp;#39;] [width] [&amp;#39;.&amp;#39; precision] [&amp;#39;L&amp;#39;] [type]
 ```
 
 * `fill` : アライメントに使う文字 (デフォルト: スペース)
@@ -90,9 +90,10 @@ string s3 = format(&amp;#34;{} {1}&amp;#34;,  &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // コンパイルエラー
     * 置換フィールドを使って変数で指定できる
 * `precision` : 精度(浮動小数点数の場合)、使う文字数(文字列の場合)
     * 置換フィールドを使って変数で指定できる
+* `L` : ロケールを考慮する
 * `type` : 値の表現方法(表を参照)
 
-`printf`との違いとして、デフォルトではロケール非依存(Cロケール固定)である。ロケール依存のフォーマットをするには`n`オプションを使う。
+`printf`との違いとして、デフォルトではロケール非依存(Cロケール固定)である。ロケール依存のフォーマットをするには`L`オプションを使う。
 ロケール非依存の場合、算術型の出力は[`to_chars`](/reference/charconv/to_chars.md)と同じになる。
 
 #### 文字列型の場合
@@ -115,7 +116,6 @@ string s3 = format(&amp;#34;{} {1}&amp;#34;,  &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // コンパイルエラー
 | B      | 2進数(大文字)              | `b`の大文字版 (代替表現の接頭辞 `0B`)                                     | C++20 |
 | c      | 文字として出力             | `static_cast&amp;lt;charT&amp;gt;(value)` (収まらないときは`format_error`)              | C++20 |
 | d      | 10進数                     | `to_chars(first, last, value)`                                            | C++20 |
-| n      | 10進数(ロケールを考慮する) | ロケール依存の桁区切りを使った`d`                                         | C++20 |
 | o      | 8進数                      | `to_chars(first, last, value, 8)` (代替表現の接頭辞 `0`、ただし値が0のときは接頭辞なし) | C++20 |
 | x      | 16進数(小文字)             | `to_chars(first, last, value, 16)` (代替表現の接頭辞 `0x`)                | C++20 |
 | X      | 16進数(大文字)             | `x`の大文字版 (代替表現の接頭辞 `0X`)                                     | C++20 |
@@ -133,7 +133,6 @@ string s3 = format(&amp;#34;{} {1}&amp;#34;,  &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // コンパイルエラー
 | A          | 16進指数表記(大文字)             | `a`の大文字版                                                                                                                                                         |
 | g          | 値に応じた表記(小文字)           | `to_chars(first, last, value, chars_format::general, precision)` (精度が指定されたとき)&amp;lt;br/&amp;gt;`to_chars(first, last, value, chars_format::general, 6)` (それ以外) |
 | G          | 値に応じた表記(大文字)           | `g`の大文字版                                                                                                                                                         |
-| n          | ロケールを考慮した値に応じた表記 | ロケールを考慮した`g`                                                                                                                                                 |
 | (なし)     | デフォルト                       | `to_chars(first, last, value, chars_format::fixed, general, precision)` (精度が指定されたとき)&amp;lt;br/&amp;gt;`to_chars(first, last, value)` (それ以外)                           |
 
 #### ポインタの場合
@@ -245,7 +244,7 @@ format(&amp;#34;{:&amp;lt;06}&amp;#34;, -42);  // &amp;#34;-42   &amp;#34;
 format(&amp;#34;{}&amp;#34;, 42);                      // &amp;#34;42&amp;#34;
 format(&amp;#34;{0:b} {0:d} {0:o} {0:x}&amp;#34;, 42); // &amp;#34;101010 42 52 2a&amp;#34;
 format(&amp;#34;{0:#x} {0:#X}&amp;#34;, 42);           // &amp;#34;0x2a 0X2A&amp;#34;
-format(&amp;#34;{:n}&amp;#34;, 1234);                  // &amp;#34;1,234&amp;#34; (ロケールによる)
+format(&amp;#34;{:L}&amp;#34;, 1234.5678);             // &amp;#34;1,234.5678&amp;#34; (ロケールによる)
 ```
 
 ### コンパイル時の書式文字列チェック
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>poisson_distribution -- poisson_distribution : リンク差し替え (close #1262)</title>
      <link href="https://cpprefjp.github.io/reference/random/poisson_distribution.html"/>
      <id>6224e96d59d895db36fd6c4c326e644736912da3:reference/random/poisson_distribution.md</id>
      <updated>2024-03-26T02:56:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/poisson_distribution.md b/reference/random/poisson_distribution.md
index 505d9229a..4c913a3fd 100644
--- a/reference/random/poisson_distribution.md
+++ b/reference/random/poisson_distribution.md
@@ -124,7 +124,7 @@ int main()
 
 ### 参考
 - [ポワソン分布 - Wikipedia](https://ja.wikipedia.org/wiki/ポアソン分布)
-- [ポアソン分布 - 統計・データ解析](http://oku.edu.mie-u.ac.jp/~okumura/stat/poisson.php)
+- [ポアソン分布 - 統計・データ解析](https://okumuralab.org/~okumura/stat/poisson.html)
 - [ポアソン分布 - NtRand](http://www.ntrand.com/jp/poisson-distribution/)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- fix some typo</title>
      <link href="https://cpprefjp.github.io/reference/list/list/size.html"/>
      <id>428490d294cf465ad23915c1d8cbf4e5383c9470:reference/list/list/size.md</id>
      <updated>2024-03-25T23:32:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/size.md b/reference/list/list/size.md
index 4809741db..0f0b71883 100644
--- a/reference/list/list/size.md
+++ b/reference/list/list/size.md
@@ -22,7 +22,7 @@ size_type size() const noexcept; // C++11
 
 
 ## 計算量
-- C++03 : 線形時間
+- C++03 : 実装依存（多くの実装で定数時間 or　線形時間）
 - C++11 : 定数時間
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>splice -- fix some typo</title>
      <link href="https://cpprefjp.github.io/reference/list/list/splice.html"/>
      <id>428490d294cf465ad23915c1d8cbf4e5383c9470:reference/list/list/splice.md</id>
      <updated>2024-03-25T23:32:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/splice.md b/reference/list/list/splice.md
index 044bd84f6..e58ddeaf2 100644
--- a/reference/list/list/splice.md
+++ b/reference/list/list/splice.md
@@ -50,9 +50,9 @@ void splice(const_iterator position, list&amp;amp;&amp;amp; x,
 
 ## 計算量
 - C++03まで
-    - (1), (2) : `x`の要素数に対して線形時間
-    - (3), (4) : 定数時間
-    - (5), (6) : `[first, last)`の要素数に対して線形時間
+    - (1) : `x`の要素数に対して線形時間
+    - (3) : 定数時間
+    - (5) : `[first, last)`の要素数に対して線形時間
 - C++11から
     - (1), (2) : 定数時間
     - (3), (4) : 定数時間
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- fix some typo</title>
      <link href="https://cpprefjp.github.io/reference/ranges/size.html"/>
      <id>428490d294cf465ad23915c1d8cbf4e5383c9470:reference/ranges/size.md</id>
      <updated>2024-03-25T23:32:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/size.md b/reference/ranges/size.md
index 80d30453e..c00cb8463 100644
--- a/reference/ranges/size.md
+++ b/reference/ranges/size.md
@@ -61,7 +61,6 @@ int main()
 4
 10
 7
-7
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crend -- fix some typo</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/crend.html"/>
      <id>428490d294cf465ad23915c1d8cbf4e5383c9470:reference/set/multiset/crend.md</id>
      <updated>2024-03-25T23:32:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/crend.md b/reference/set/multiset/crend.md
index 48973d85a..79111ca21 100644
--- a/reference/set/multiset/crend.md
+++ b/reference/set/multiset/crend.md
@@ -51,6 +51,6 @@ int main()
 | 名前                    | 説明                         |
 |-------------------------|------------------------------|
 | [`crbegin`](crbegin.md) | 末尾を指す読み取り専用逆イテレータを返す |
-| [`cbegin`](begin.md)   | 先頭を指す読み取り専用イテレータを返す   |
-| [`cend`](end.md)       | 末尾の次を指す読み取り専用イテレータを返す   |
+| [`cbegin`](cbegin.md)   | 先頭を指す読み取り専用イテレータを返す   |
+| [`cend`](cend.md)       | 末尾の次を指す読み取り専用イテレータを返す   |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- fix some typo</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/end.html"/>
      <id>428490d294cf465ad23915c1d8cbf4e5383c9470:reference/set/multiset/end.md</id>
      <updated>2024-03-25T23:32:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/end.md b/reference/set/multiset/end.md
index 44fe3e8ba..80fe4e615 100644
--- a/reference/set/multiset/end.md
+++ b/reference/set/multiset/end.md
@@ -23,7 +23,7 @@ const_iterator end() const noexcept;  // (2) C++11
 
 
 ## 備考
-`const` 版ではない `begin` が返す `iterator` も読み取り専用イテレータである。
+`const` 版ではない `end` が返す `iterator` も読み取り専用イテレータである。
 
 （が、`iterator` と `const_iterator` が同じ型とは限らない）
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crend -- fix some typo</title>
      <link href="https://cpprefjp.github.io/reference/set/set/crend.html"/>
      <id>428490d294cf465ad23915c1d8cbf4e5383c9470:reference/set/set/crend.md</id>
      <updated>2024-03-25T23:32:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/crend.md b/reference/set/set/crend.md
index ebf206350..c41a1bc06 100644
--- a/reference/set/set/crend.md
+++ b/reference/set/set/crend.md
@@ -50,7 +50,7 @@ int main()
 
 | 名前                    | 説明                         |
 |-------------------------|------------------------------|
-| [`crbegin`](rbegin.md) | 末尾を指す読み取り専用逆イテレータを返す |
-| [`cbegin`](begin.md)   | 先頭を指す読み取り専用イテレータを返す   |
-| [`cend`](end.md)       | 末尾の次を指す読み取り専用イテレータを返す   |
+| [`crbegin`](crbegin.md) | 末尾を指す読み取り専用逆イテレータを返す |
+| [`cbegin`](cbegin.md)   | 先頭を指す読み取り専用イテレータを返す   |
+| [`cend`](cend.md)       | 末尾の次を指す読み取り専用イテレータを返す   |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- fix some typo</title>
      <link href="https://cpprefjp.github.io/reference/set/set/end.html"/>
      <id>428490d294cf465ad23915c1d8cbf4e5383c9470:reference/set/set/end.md</id>
      <updated>2024-03-25T23:32:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/end.md b/reference/set/set/end.md
index 2403d14fd..ac654ae64 100644
--- a/reference/set/set/end.md
+++ b/reference/set/set/end.md
@@ -23,7 +23,7 @@ const_iterator end() const noexcept;  // (2) C++11
 
 
 ## 備考
-`const` 版ではない `begin` が返す `iterator` も読み取り専用イテレータである。
+`const` 版ではない `end` が返す `iterator` も読み取り専用イテレータである。
 
 （が、`iterator` と `const_iterator` が同じ型とは限らない）
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end(size_type) -- fix some typo</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/end-size_type.html"/>
      <id>428490d294cf465ad23915c1d8cbf4e5383c9470:reference/unordered_set/unordered_multiset/end-size_type.md</id>
      <updated>2024-03-25T23:32:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_multiset/end-size_type.md b/reference/unordered_set/unordered_multiset/end-size_type.md
index 32bb2e99d..1ba5b08e2 100644
--- a/reference/unordered_set/unordered_multiset/end-size_type.md
+++ b/reference/unordered_set/unordered_multiset/end-size_type.md
@@ -29,7 +29,7 @@ const_local_iterator end(size_type n) const;
 
 
 ## 備考
-`const` 版ではない `begin` が返す `local_iterator` も読み取り専用イテレータである。
+`const` 版ではない `end` が返す `local_iterator` も読み取り専用イテレータである。
 
 （が、`local_iterator` と `const_local_iterator` が同じ型とは限らないと思われる）
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
</feed>
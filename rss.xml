<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-11-25T14:37:25.079317</updated>
  <id>0097f894-8bac-4521-9d2d-3824602035e8</id>

  
    <entry>
      <title>format -- chrono/format : インデントを2スペースに修正</title>
      <link href="https://cpprefjp.github.io/reference/chrono/format.html"/>
      <id>dd855a24b25425c8f88ffb3b4f1fd9df96a7762c:reference/chrono/format.md</id>
      <updated>2021-11-24T17:40:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/format.md b/reference/chrono/format.md
index 66c3d4a16..9107965ba 100644
--- a/reference/chrono/format.md
+++ b/reference/chrono/format.md
@@ -89,8 +89,8 @@ chronoライブラリではこれに加え、たとえばデフォルトでは
 #include &amp;lt;chrono&amp;gt;
 int main()
 {
-    const auto now = std::chrono::system_clock::now();
-    std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%Y}&amp;#34;, now); // =&amp;gt; 2021
+  const auto now = std::chrono::system_clock::now();
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%Y}&amp;#34;, now); // =&amp;gt; 2021
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>coroutine_handle -- coroutine_handle:coroutine_handle&lt;Promise&gt;のみの関数を明示</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle.html"/>
      <id>1024a15554363b30caeea7c6bd44ad0e489245d3:reference/coroutine/coroutine_handle.md</id>
      <updated>2021-11-24T17:13:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle.md b/reference/coroutine/coroutine_handle.md
index f5acc3d11..21c3dd67a 100644
--- a/reference/coroutine/coroutine_handle.md
+++ b/reference/coroutine/coroutine_handle.md
@@ -70,14 +70,14 @@ C++コルーチンとC API（コールバック関数へのポインタと`void*
 
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|----------------|
-| [`promise`](coroutine_handle/promise.md) | Promiseオブジェクトの参照 | C++20 |
+| [`promise`](coroutine_handle/promise.md) | Promiseオブジェクトの参照（`coroutine_handle&amp;lt;Promise&amp;gt;`のみ） | C++20 |
 
 
 ## 静的メンバ関数
 
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|----------------|
-| [`from_promise`](coroutine_handle/from_promise.md) | Promiseオブジェクトから対応するコルーチンハンドルへ変換 | C++20 |
+| [`from_promise`](coroutine_handle/from_promise.md) | Promiseオブジェクトから対応するコルーチンハンドルへ変換（`coroutine_handle&amp;lt;Promise&amp;gt;`のみ） | C++20 |
 | [`from_address`](coroutine_handle/from_address.md) | アドレス値から対応するコルーチンハンドルへ変換 | C++20 |
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- feat: chronoのformatにかんたんな例くらいあってもいいのではと思うので追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/format.html"/>
      <id>6da118199c832fc76f2a1974fb7487111fa085d6:reference/chrono/format.md</id>
      <updated>2021-11-22T21:33:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/format.md b/reference/chrono/format.md
index c3e33725b..66c3d4a16 100644
--- a/reference/chrono/format.md
+++ b/reference/chrono/format.md
@@ -83,6 +83,16 @@ chronoライブラリではこれに加え、たとえばデフォルトでは
 - 便宜上のリテラルキャスト`STATICALLY-WIDEN`を導入する。`STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;...&amp;#34;)`は、`charT`が`char`である場合は`&amp;#34;...&amp;#34;`、`charT`が`wchar_t`である場合は`L&amp;#34;...&amp;#34;`を意味する。
 - [`hh_mm_ss`](hh_mm_ss.md)オブジェクトの[`is_negative()`](hh_mm_ss/is_negative.md)が`true`である場合、出力される文字列の先頭に`STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;-&amp;#34;)`が挿入される
 
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;format&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+int main()
+{
+    const auto now = std::chrono::system_clock::now();
+    std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%Y}&amp;#34;, now); // =&amp;gt; 2021
+}
+```
 
 ## 例外
 - 指定されたフォーマットフラグに必要な情報が含まれていない場合、[`format_error`](/reference/format/format_error.md)例外が送出される (例として、[`duration`](duration.md)には曜日をフォーマットするために必要な情報が含まれていない)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>cpprefjpを編集するには -- 編集権限を得る方法 : 古くなっていた旧サイト編集者へのお誘い文章を削除 #922</title>
      <link href="https://cpprefjp.github.io/editors_doc/start_editing.html"/>
      <id>67763a1787cc7e22b977ba59f34c51b06f892c25:editors_doc/start_editing.md</id>
      <updated>2021-11-22T03:19:45+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;cpprefjpを編集するには&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本cpprefjpサイトは、GitHub Pagesのサービス上に構築されていますが、編集自体はGitHubリポジトリにあるMarkdown形式のプレーンテキストで行います。&lt;/p&gt;
&lt;p&gt;cpprefjpサイトのGitHubリポジトリは、以下になります：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site&#34; target=&#34;_blank&#34;&gt;https://github.com/cpprefjp/site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、cpprefjpサイト上に掲載する画像ファイルのようなリソースも、GitHubリポジトリで管理しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/image&#34; target=&#34;_blank&#34;&gt;画像ファイルリポジトリ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;GitHubからcpprefjpサイトへの自動反映&lt;/h2&gt;
&lt;p&gt;GitHub上で記述したMarkdown(.md)形式のリファレンスは、自動的にHTMLに変換されて、cpprefjpサイトに反映されます。&lt;/p&gt;
&lt;h3&gt;反映間隔&lt;/h3&gt;
&lt;p&gt;cpprefjp/site へ push すると、すぐに反映されます。&lt;/p&gt;
&lt;p&gt;毎日深夜0時ころに全ページの変換を行います。ページを追加したときのサイドバーの更新や、&lt;code&gt;GLOBAL_QUALIFY_LIST.txt&lt;/code&gt;を編集した場合の適用は、そのときの変換で全ページに変更が適用されます。&lt;/p&gt;
&lt;p&gt;日次の変換中にコミットした変更は、日次の変換がおわったあと (だいたい1時間30分〜2時間くらい) に自動で変換・反映されます。&lt;/p&gt;
&lt;h3&gt;変換エラーの検出&lt;/h3&gt;
&lt;h3&gt;自動反映ツール&lt;/h3&gt;
&lt;p&gt;自動反映ツールも、GitHub上で開発が進められています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site_generator&#34; target=&#34;_blank&#34;&gt;site_generator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;機能要望やpull request等がありましたら、こちらにお願いします。&lt;/p&gt;
&lt;h2&gt;編集権限を得るには&lt;/h2&gt;
&lt;p&gt;本サイトに対してpull requestを提出していただければ、取り込んだあとに管理者から編集権限をお渡しします。&lt;/p&gt;
&lt;p&gt;pull requestに慣れていない場合には、issueでの相談からはじめていただければと思います。&lt;/p&gt;
&lt;h2&gt;Markdown形式による編集方法&lt;/h2&gt;
&lt;p&gt;cpprefjpサイトは、Markdown(.md)形式でリファレンスを記述します。&lt;/p&gt;
&lt;p&gt;Markdownは、GitHubサービス上でドキュメントを記述するフォーマットとして広く使用されている形式です。&lt;/p&gt;
&lt;p&gt;Markdownの記述方法をわかりやすく解説してくれているWebサイトは、すでに数多く存在しますので、詳細はそちらを参照してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Qiita/items/c686397e4a0f4f11683d&#34; target=&#34;_blank&#34;&gt;Markdown記法 チートシート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kojika17.com/2013/01/starting-markdown.html&#34; target=&#34;_blank&#34;&gt;文章作成やメモ書きにも便利、Markdown記法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ただし、cpprefjp特有の拡張構文もあります。
以下のページにまとめてあるので、そちらを参照して下さい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/editors_doc/specialized.html&#34;&gt;cpprefjp特有の拡張構文&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Markdown形式では、HTMLのタグも併用できますが、cpprefjpサイトでは積極的にはHTMLタグを使用しない方針です。できるだけ、Markdown形式でできる範囲内で解決するようにしてください。&lt;/p&gt;
&lt;p&gt;ただし、注釈・出典を貼るためにHTMLタグを利用します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/editors_doc/cite_note_ref.html&#34;&gt;cpprefjpにおける注釈・出典の貼り方&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;それ以外に本サイト内で使用しているHTMLタグは以下です：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アンカーを貼るために、&lt;code&gt;&amp;lt;a id=&#34;アンカー名&#34;&amp;gt;対象文字列&amp;lt;/a&amp;gt;&lt;/code&gt;のようなHTML5に基づく記法を利用している&lt;/li&gt;
&lt;li&gt;表内での改行のために、&lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt;タグを利用している&lt;/li&gt;
&lt;li&gt;値の大きさを表現するために、上付き文字を表す&lt;code&gt;&amp;lt;sup&amp;gt;&lt;/code&gt;タグを利用している&lt;/li&gt;
&lt;li&gt;添字を表現するために、下付き文字を表す&lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;タグを利用している&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、Markdownパーサーの制限を回避し、表内で &lt;code&gt;|&lt;/code&gt; (縦線、vertical line) を使用するために、文字参照 &lt;code&gt;&amp;#x7C;&lt;/code&gt; を使用してます。&lt;/p&gt;
&lt;p&gt;新規リファレンスを書くにあたって、雛形ページを用意していますので、そちらをベースにして編集作業を行ってください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/editors_doc/header_template_page.html&#34;&gt;ヘッダファイルトップページの雛形&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/editors_doc/function_template_page.html&#34;&gt;関数の雛形&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/editors_doc/class_template_page.html&#34;&gt;クラスの雛形&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/editors_doc/type-type_template_page.html&#34;&gt;型の別名の雛形&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、リポジトリのトップディレクトリに&lt;code&gt;GLOBAL_QUALIFY_LIST.txt&lt;/code&gt;というファイルがあります。サイト全体のコードブロックに対して適用したい識別子の修飾があれば、ここに列挙していきます。書き方は各雛形ページに書いてあるコードブロックの修飾と同じです。&lt;/p&gt;
&lt;h2&gt;初めての人は見ておいたほうがよいページ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html&#34;&gt;処理系&lt;/a&gt; 処理系の正式な定義があります&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site/wiki/progress&#34; target=&#34;_blank&#34;&gt;進行状況&lt;/a&gt; リファレンス作成の進行状況が確認できます&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/working_style.html&#34;&gt;スタイル&lt;/a&gt; 作業を行う上でのスタイルの定義と、訳語があります&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;その他、cpprefjpを編集するにあたってのドキュメント&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/editors_doc/page_names.html&#34;&gt;ページファイル名の付け方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/editors_doc/random_figure.html&#34;&gt;乱数分布の図を作る方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;次期C++バージョンへの対応方針と作業方法&lt;/h2&gt;
&lt;p&gt;C++の次のバージョンで入ることが決まった機能については、以下の方針で対応を行います。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;次のバージョンの言語機能・ライブラリ機能の解説は、随時許可する&lt;/li&gt;
&lt;li&gt;ただし、Working Draftに採択された機能のみを対象とする。まだ提案中の機能は、本サイトでの解説の対象外とする&lt;ul&gt;
&lt;li&gt;例外は、機能テストマクロのようなコンパイラへの推奨機能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;採択された機能は、&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/&#34; target=&#34;_blank&#34;&gt;C++ Standards Committee Papers&lt;/a&gt;のEditor&#39;s Reportで確認できる&lt;/li&gt;
&lt;li&gt;次のC++バージョンに採択された機能は、本リポジトリのWikiページに随時記載しているので、対応状況を含めてそちらを確認すること&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>alignment_of -- Merge pull request #921 from cpprefjp/suomesta-patch1</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/alignment_of.html"/>
      <id>151a8969fbcad7d4d162898fe69b360ad31324de:reference/type_traits/alignment_of.md</id>
      <updated>2021-11-21T16:56:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/alignment_of.md b/reference/type_traits/alignment_of.md
index aaa862782..2ae236185 100644
--- a/reference/type_traits/alignment_of.md
+++ b/reference/type_traits/alignment_of.md
@@ -28,6 +28,10 @@ namespace std {
 `alignof(T)`で得られた[`std::size_t`](/reference/cstddef/size_t.md)型の値を、メンバ定数`value`として定義する。
 
 
+## 備考
+`alignment_of`は[`integral_constant`](integral_constant.md)から派生する。
+
+
 ## 例
 ```cpp example
 #include &amp;lt;type_traits&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>extent -- Merge pull request #921 from cpprefjp/suomesta-patch1</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/extent.html"/>
      <id>151a8969fbcad7d4d162898fe69b360ad31324de:reference/type_traits/extent.md</id>
      <updated>2021-11-21T16:56:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/extent.md b/reference/type_traits/extent.md
index 1fd0c4343..b23cee144 100644
--- a/reference/type_traits/extent.md
+++ b/reference/type_traits/extent.md
@@ -25,6 +25,10 @@ namespace std {
 - 型`T`が配列型ではない、もしくは配列の次元数が`I`以下の場合、値`0`をメンバ定数`value`として定義する。
 
 
+## 備考
+`extent`は[`integral_constant`](integral_constant.md)から派生する。
+
+
 ## 例
 ```cpp example
 #include &amp;lt;type_traits&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rank -- Merge pull request #921 from cpprefjp/suomesta-patch1</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/rank.html"/>
      <id>151a8969fbcad7d4d162898fe69b360ad31324de:reference/type_traits/rank.md</id>
      <updated>2021-11-21T16:56:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/rank.md b/reference/type_traits/rank.md
index 188f58d66..8673a3c15 100644
--- a/reference/type_traits/rank.md
+++ b/reference/type_traits/rank.md
@@ -24,6 +24,10 @@ namespace std {
 型`T`が配列型である場合、配列の次元数となる整数値をメンバ定数`value`の値として定義する。配列型でなければ`0`をメンバ定数`value`の値として定義する。
 
 
+## 備考
+`rank`は[`integral_constant`](integral_constant.md)から派生する。
+
+
 ## 例
 ```cpp example
 #include &amp;lt;type_traits&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-01-23T16:24:23.266061</updated>
  <id>589cbdbf-6374-45e2-8f5e-b93d75128ac0</id>

  
    <entry>
      <title>flat_map -- flat_map : add constructor (#1078)</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map.html"/>
      <id>ca2c47c1987f3601195b4009a43f04546eef236c:reference/flat_map/flat_map.md</id>
      <updated>2025-01-24T01:20:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map.md b/reference/flat_map/flat_map.md
index b914da540..bf06506b3 100644
--- a/reference/flat_map/flat_map.md
+++ b/reference/flat_map/flat_map.md
@@ -25,7 +25,7 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |---------------------------------|----------------|-------|
-| [`(constructor)`](flat_map/op_constructor.md.nolink) | コンストラクタ | C++23 |
+| [`(constructor)`](flat_map/op_constructor.md) | コンストラクタ | C++23 |
 | [`(destructor)`](flat_map/op_destructor.md.nolink) | デストラクタ | C++23 |
 | [`operator=`](flat_map/op_assign.md.nolink) | 代入演算子 | C++23 |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- flat_map : add constructor (#1078)</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/op_constructor.html"/>
      <id>ca2c47c1987f3601195b4009a43f04546eef236c:reference/flat_map/flat_map/op_constructor.md</id>
      <updated>2025-01-24T01:20:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/op_constructor.md b/reference/flat_map/flat_map/op_constructor.md
new file mode 100644
index 000000000..fa67760be
--- /dev/null
+++ b/reference/flat_map/flat_map/op_constructor.md
@@ -0,0 +1,257 @@
+# コンストラクタ
+* flat_map[meta header]
+* std[meta namespace]
+* flat_map[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+// ____要素数ゼロのflat_mapを構築____
+
+flat_map() : flat_map(key_compare()) { } // (1) C++23
+
+explicit flat_map(const key_compare&amp;amp; comp) // (2) C++23
+  : c(), compare(comp) { }
+
+template&amp;lt;class Allocator&amp;gt;
+explicit flat_map(const Allocator&amp;amp; a); // (3) C++23
+
+template&amp;lt;class Allocator&amp;gt;
+flat_map(const key_compare&amp;amp; comp, const Allocator&amp;amp; a); // (4) C++23
+
+// ____アロケータを伴うコピー＆ムーブコンストラクタ____
+
+ template&amp;lt;class Allocator&amp;gt;
+ flat_map(const flat_map&amp;amp; x, const Allocator&amp;amp; a); // (5) C++26
+
+ template&amp;lt;class Allocator&amp;gt;
+ flat_map(flat_map&amp;amp;&amp;amp; x, const Allocator&amp;amp; a); // (6) C++26
+
+// ____key_container_typeとmapped_container_typeから構築____
+
+flat_map(key_container_type key_cont, mapped_container_type mapped_cont,
+         const key_compare&amp;amp; comp = key_compare()); // (7) C++23
+
+template&amp;lt;class Allocator&amp;gt;
+flat_map(const key_container_type&amp;amp; key_cont, const mapped_container_type&amp;amp; mapped_cont,
+         const Allocator&amp;amp; a); // (8) C++23
+
+template&amp;lt;class Allocator&amp;gt;
+flat_map(const key_container_type&amp;amp; key_cont, const mapped_container_type&amp;amp; mapped_cont,
+         const key_compare&amp;amp; comp, const Allocator&amp;amp; a); // (9) C++23
+
+// ____key_container_typeとmapped_container_type（共にソート済み）から構築____
+
+flat_map(sorted_unique_t, key_container_type key_cont, mapped_container_type mapped_cont,
+         const key_compare&amp;amp; comp = key_compare()); // (10) C++23
+
+template&amp;lt;class Allocator&amp;gt;
+flat_map(sorted_unique_t, const key_container_type&amp;amp; key_cont,
+         const mapped_container_type&amp;amp; mapped_cont, const Allocator&amp;amp; a); // (11) C++23
+
+template&amp;lt;class Allocator&amp;gt;
+flat_map(sorted_unique_t, const key_container_type&amp;amp; key_cont,
+         const mapped_container_type&amp;amp; mapped_cont,
+         const key_compare&amp;amp; comp, const Allocator&amp;amp; a); // (12) C++23
+
+// ____イテレータから構築____
+
+template&amp;lt;class InputIterator&amp;gt;
+flat_map(InputIterator first, InputIterator last, const key_compare&amp;amp; comp = key_compare()) // (13) C++23
+  : c(), compare(comp) { insert(first, last); }
+
+template&amp;lt;class InputIterator, class Allocator&amp;gt;
+flat_map(InputIterator first, InputIterator last, const Allocator&amp;amp; a); // (14) C++23
+
+template&amp;lt;class InputIterator, class Allocator&amp;gt;
+flat_map(InputIterator first, InputIterator last,
+         const key_compare&amp;amp; comp, const Allocator&amp;amp; a); // (15) C++23
+
+// ____イテレータ（ソート済み）から構築____
+
+template&amp;lt;class InputIterator&amp;gt;
+flat_map(sorted_unique_t s, InputIterator first, InputIterator last,
+         const key_compare&amp;amp; comp = key_compare()) // (16) C++23
+  : c(), compare(comp) { insert(s, first, last); }
+
+template&amp;lt;class InputIterator, class Allocator&amp;gt;
+flat_map(sorted_unique_t, InputIterator first, InputIterator last, const Allocator&amp;amp; a); // (17) C++23
+
+template&amp;lt;class InputIterator, class Allocator&amp;gt;
+flat_map(sorted_unique_t, InputIterator first, InputIterator last,
+         const key_compare&amp;amp; comp, const Allocator&amp;amp; a); // (18) C++23
+
+// ____Rangeから構築____
+
+template&amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+flat_map(from_range_t fr, R&amp;amp;&amp;amp; rg) // (19) C++23
+  : flat_map(fr, forward&amp;lt;R&amp;gt;(rg), key_compare()) { }
+
+template&amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+flat_map(from_range_t, R&amp;amp;&amp;amp; rg, const key_compare&amp;amp; comp) // (20) C++23
+  : flat_map(comp) { insert_range(forward&amp;lt;R&amp;gt;(rg)); }
+
+template&amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R, class Allocator&amp;gt;
+flat_map(from_range_t, R&amp;amp;&amp;amp; rg, const Allocator&amp;amp; a); // (21) C++23
+
+template&amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R, class Allocator&amp;gt;
+flat_map(from_range_t, R&amp;amp;&amp;amp; rg, const key_compare&amp;amp; comp, const Allocator&amp;amp; a); // (22) C++23
+
+// ____initializer_listから構築____
+
+flat_map(initializer_list&amp;lt;value_type&amp;gt; il, const key_compare&amp;amp; comp = key_compare()) // (23) C++23
+  : flat_map(il.begin(), il.end(), comp) { }
+
+template&amp;lt;class Allocator&amp;gt;
+flat_map(initializer_list&amp;lt;value_type&amp;gt; il, const Allocator&amp;amp; a); // (24) C++23
+
+template&amp;lt;class Allocator&amp;gt;
+flat_map(initializer_list&amp;lt;value_type&amp;gt; il, const key_compare&amp;amp; comp, const Allocator&amp;amp; a); // (25) C++23
+
+// ____initializer_list（ソート済み）から構築____
+
+flat_map(sorted_unique_t s, initializer_list&amp;lt;value_type&amp;gt; il,
+const key_compare&amp;amp; comp = key_compare()) // (26) C++23
+  : flat_map(s, il.begin(), il.end(), comp) { }
+
+template&amp;lt;class Allocator&amp;gt;
+flat_map(sorted_unique_t, initializer_list&amp;lt;value_type&amp;gt; il, const Allocator&amp;amp; a); // (27) C++23
+
+template&amp;lt;class Allocator&amp;gt;
+flat_map(sorted_unique_t, initializer_list&amp;lt;value_type&amp;gt; il,
+         const key_compare&amp;amp; comp, const Allocator&amp;amp; a); // (28) C++23
+```
+* initializer_list[link /reference/initializer_list/initializer_list.md]
+* from_range_t[link ../../ranges/from_range_t.md]
+* sorted_unique_t[link ../sorted_unique_t.md]
+* forward[link ../../utility/forward.md]
+* insert[link insert.md]
+* insert_range[link insert_range.md]
+
+
+## 概要
+`flat_map`オブジェクトを次に示す通りの要素で初期化する。
+
+
+## 効果
+- (1) : デフォルトコンストラクタ。デフォルトの `key_compare` を作成し、要素を持たない空の `flat_map` オブジェクトを構築する。
+- (2) : `key_compare` を受け取り、要素を持たない空の `flat_map` オブジェクトを構築する。
+- (3) : アロケータを受け取り、要素を持たない空の `flat_map` オブジェクトを構築する。
+- (4) : `key_compare` とアロケータを受け取り、`flat_map` 要素を持たない空の `flat_map` オブジェクトを構築する。
+- (5) : アロケータを受け取り、`flat_map` オブジェクトをコピー構築する。
+- (6) : アロケータを受け取り、`flat_map` オブジェクトをムーブ構築する。
+- (7) : `key_container_type` と `mapped_container_type` から `flat_map` オブジェクトを構築する。構築に際し、`value_compare` に基づきソートされ、また、Key が重複している要素は削除される。
+- (8) : アロケータを受け取り、`key_container_type` と `mapped_container_type` から `flat_map` オブジェクトを構築する。構築に際し、`value_compare` に基づきソートされ、また、Key が重複している要素は削除される。
+- (9) : `key_compare` とアロケータを受け取り、`key_container_type` と `mapped_container_type` から `flat_map` オブジェクトを構築する。構築に際し、`value_compare` に基づきソートされ、また、Key が重複している要素は削除される。
+- (10) : `key_container_type` と `mapped_container_type`（共にソート済み）から `flat_map` オブジェクトを構築する。
+- (11) : アロケータを受け取り、`key_container_type` と `mapped_container_type`（共にソート済み）から `flat_map` オブジェクトを構築する。
+- (12) : `key_compare` とアロケータを受け取り、`key_container_type` と `mapped_container_type`（共にソート済み）から `flat_map` オブジェクトを構築する。
+- (13) : イテレータから `flat_map` オブジェクトを構築する。構築には [`insert()`](insert.md) が用いられる。
+- (14) : アロケータを受け取り、イテレータから `flat_map` オブジェクトを構築する。構築には [`insert()`](insert.md) が用いられる。
+- (15) : `key_compare` とアロケータを受け取り、イテレータから `flat_map` オブジェクトを構築する。構築には [`insert()`](insert.md) が用いられる。
+- (16) : イテレータ（ソート済み）から `flat_map` オブジェクトを構築する。
+- (17) : アロケータを受け取り、イテレータ（ソート済み）から `flat_map` オブジェクトを構築する。
+- (18) : `key_compare` とアロケータを受け取り、イテレータ（ソート済み）から `flat_map` オブジェクトを構築する。
+- (19) : Rangeから `flat_map` オブジェクトを構築する。構築には [`insert_range()`](insert_range.md) が用いられる。
+- (20) : `key_compare` を受け取り、Rangeから `flat_map` オブジェクトを構築する。。構築には [`insert_range()`](insert_range.md) が用いられる。
+- (21) : アロケータを受け取り、Rangeから `flat_map` オブジェクトを構築する。。構築には [`insert_range()`](insert_range.md) が用いられる。
+- (22) : `key_compare` とアロケータを受け取り、Rangeから `flat_map` オブジェクトを構築する。。構築には [`insert_range()`](insert_range.md) が用いられる。
+- (23) : initializer_listから `flat_map` オブジェクトを構築する。構築には [`insert()`](insert.md) が用いられる。
+- (24) : アロケータを受け取り、initializer_listから `flat_map` オブジェクトを構築する。構築には [`insert()`](insert.md) が用いられる。
+- (25) : `key_compare` とアロケータを受け取り、initializer_listから `flat_map` オブジェクトを構築する。構築には [`insert()`](insert.md) が用いられる。
+- (26) : initializer_list（ソート済み）から `flat_map` オブジェクトを構築する。
+- (27) : アロケータを受け取り、initializer_list（ソート済み）から `flat_map` オブジェクトを構築する。
+- (28) : `key_compare` とアロケータを受け取り、initializer_list（ソート済み）から `flat_map` オブジェクトを構築する。
+
+
+## 計算量
+- (1)-(4) : 定数時間。
+- (5) : 引数 `x` のサイズに対して線形時間。
+- (6) : 引数 `x` の `containers` をムーブした計算量と同じ。
+- (7)-(9) : 引数 `key_cont` のサイズを `N` とすると、`key_cont` がソート済みなら `N` に対して線形時間。そうでなければ `N log(N)`。
+- (10)-(12) : 引数 `key_cont` および `mapped_cont` をムーブした計算量と同じ。
+- (13)-(15) : 引数 `first` と `last` の距離を `N` とすると、イテレータの値が `value_compare` に基づきソート済みなら `N` に対して線形時間。そうでなければ `N log(N)`。
+- (16)-(18) : 引数 `first` と `last` の距離を `N` とすると、`N` に対して線形時間。
+- (19)-(22) : [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)` を `N` とすると、要素の値が `value_compare` に基づきソート済みなら `N` に対して線形時間。そうでなければ `N log(N)`。
+- (23)-(25) : 引数 `il` のサイズを `N` とすると、イテレータの値が `value_compare` に基づきソート済みなら `N` に対して線形時間。そうでなければ `N log(N)`。
+- (26)-(28) : 引数 `il` のサイズを `N` とすると、`N` に対して線形時間。
+
+
+## 備考
+- (7)-(12) において、引数の `key_cont` と `mapped_cont` のサイズが異なる場合の動作は定められていない。
+- (7)-(9), (13)-(15), (23)-(25) において、Key が重複している要素は削除されるが、どの要素が削除されるかは定められていない。
+- (3)-(6), (8), (9), (11), (12), (14), (15), (17), (18), (21), (22), (24), (25), (27), (28) は引数としてアロケータを受け取るが、引数のアロケータに対して [`uses_allocator`](uses_allocator.md) が `false` であれば、この引数は無視される。
+
+
+## 例
+```cpp example
+#include &amp;lt;flat_map&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+void print(const std::flat_map&amp;lt;std::string, int&amp;gt;&amp;amp; fm)
+{
+  std::cout &amp;lt;&amp;lt; &amp;#34;{&amp;#34; &amp;lt;&amp;lt; std::endl;
+  for (const auto&amp;amp; kv: fm) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;  &amp;#34; &amp;lt;&amp;lt; kv.first &amp;lt;&amp;lt; &amp;#34;: &amp;#34; &amp;lt;&amp;lt; kv.second &amp;lt;&amp;lt; &amp;#34;,&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+  std::cout &amp;lt;&amp;lt; &amp;#34;}&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+
+int main()
+{
+  std::cout &amp;lt;&amp;lt; &amp;#34;(1)&amp;#34; &amp;lt;&amp;lt; std::endl;
+  {
+    std::flat_map&amp;lt;std::string, int&amp;gt; fm;
+    print(fm);
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;(5)&amp;#34; &amp;lt;&amp;lt; std::endl;
+  {
+    std::vector&amp;lt;std::string&amp;gt; keys = {&amp;#34;Alice&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Carol&amp;#34;};
+    std::vector&amp;lt;int&amp;gt; values = {3, 1, 4};
+
+    std::flat_map&amp;lt;std::string, int&amp;gt; fm(keys, values);
+    print(fm);
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;(23)&amp;#34; &amp;lt;&amp;lt; std::endl;
+  {
+    std::initializer_list&amp;lt;std::pair&amp;lt;std::string, int&amp;gt;&amp;gt; elems = {{&amp;#34;Alice&amp;#34;, 3}, {&amp;#34;Bob&amp;#34;, 1}, {&amp;#34;Carol&amp;#34;, 4}};
+
+    std::flat_map&amp;lt;std::string, int&amp;gt; fm(elems);
+    print(fm);
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+
+### 出力
+```
+(1)
+{
+}
+
+(5)
+{
+  Alice: 3,
+  Bob: 1,
+  Carol: 4,
+}
+
+(23)
+{
+  Alice: 3,
+  Bob: 1,
+  Carol: 4,
+}
+```
+
+## 関連項目
+
+| 名前 | 説明 |
+|---------------------------------------|--------------------------------------------|
+| [`uses_allocator`](uses_allocator.md) | 指定されたアロケータと合致するかをチェックする |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uses_allocator -- flat_map : add constructor (#1078)</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/uses_allocator.html"/>
      <id>ca2c47c1987f3601195b4009a43f04546eef236c:reference/flat_map/flat_map/uses_allocator.md</id>
      <updated>2025-01-24T01:20:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/uses_allocator.md b/reference/flat_map/flat_map/uses_allocator.md
index e362db03f..c318a4d0f 100644
--- a/reference/flat_map/flat_map/uses_allocator.md
+++ b/reference/flat_map/flat_map/uses_allocator.md
@@ -19,7 +19,7 @@ namespace std {
 ## 概要
 `uses_allocator`の、`flat_map`に対する特殊化。
 
-アロケータを指定する`flat_map`のコンストラクタにおいて、指定されたアロケータと、`KeyContainer`および`MappedContainer`が合致するかをチェックするのに使われる。
+アロケータを指定する`flat_map`の[`コンストラクタ`](op_constructor.md)において、指定されたアロケータと、`KeyContainer`および`MappedContainer`のアロケータが合致するかをチェックするのに使われる。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flat_map -- flat_map : add uses_allocator (#1078)</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map.html"/>
      <id>9f13e4fa8982b01023db70eadb3cb1255e951d70:reference/flat_map/flat_map.md</id>
      <updated>2025-01-23T22:40:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map.md b/reference/flat_map/flat_map.md
index 3ed7bc59b..b914da540 100644
--- a/reference/flat_map/flat_map.md
+++ b/reference/flat_map/flat_map.md
@@ -152,6 +152,14 @@ namespace std {
 | [`(deduction_guide)`](flat_map/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++23 |
 
 
+## その他
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`uses_allocator`](flat_map/uses_allocator.md) | `flat_map`による特殊化 | C++23 |
+
+
+
 ## 例
 ### 基本的な使い方
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uses_allocator -- flat_map : add uses_allocator (#1078)</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/uses_allocator.html"/>
      <id>9f13e4fa8982b01023db70eadb3cb1255e951d70:reference/flat_map/flat_map/uses_allocator.md</id>
      <updated>2025-01-23T22:40:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/uses_allocator.md b/reference/flat_map/flat_map/uses_allocator.md
new file mode 100644
index 000000000..e362db03f
--- /dev/null
+++ b/reference/flat_map/flat_map/uses_allocator.md
@@ -0,0 +1,55 @@
+# uses_allocator
+* flat_map[meta header]
+* std[meta namespace]
+* class template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class Key, class T, class Compare, class KeyContainer, class MappedContainer,
+            class Alloc&amp;gt;
+  struct uses_allocator&amp;lt;flat_map&amp;lt;Key, T, Compare, KeyContainer, MappedContainer&amp;gt;,
+                        Alloc&amp;gt;
+    : bool_constant&amp;lt;uses_allocator_v&amp;lt;KeyContainer, Alloc&amp;gt; &amp;amp;&amp;amp;
+                    uses_allocator_v&amp;lt;MappedContainer, Alloc&amp;gt;&amp;gt; { };
+}
+```
+* bool_constant[link /reference/type_traits/bool_constant.md]
+
+## 概要
+`uses_allocator`の、`flat_map`に対する特殊化。
+
+アロケータを指定する`flat_map`のコンストラクタにおいて、指定されたアロケータと、`KeyContainer`および`MappedContainer`が合致するかをチェックするのに使われる。
+
+
+## 例
+```cpp
+#include &amp;lt;flat_map&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  using fm_t = std::flat_map&amp;lt;int, int&amp;gt;;
+
+  std::cout &amp;lt;&amp;lt; std::uses_allocator&amp;lt;fm_t, std::allocator&amp;lt;int&amp;gt;&amp;gt;::value &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::uses_allocator[color ff0000]
+* std::allocator[link /reference/memory/allocator.md]
+
+### 出力
+```cpp
+1
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wait -- atomic: wait系関数の事前条件を整理</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic/wait.html"/>
      <id>afdc0310222165306826831590ed0616c12367ab:reference/atomic/atomic/wait.md</id>
      <updated>2025-01-22T13:39:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic/wait.md b/reference/atomic/atomic/wait.md
index 226c45d3b..32b7f4d0d 100644
--- a/reference/atomic/atomic/wait.md
+++ b/reference/atomic/atomic/wait.md
@@ -35,6 +35,13 @@ constexpr void
     - C++20 : `atomic&amp;lt;T&amp;gt;::is_always_lock_free`が`true`であること
 
 
+## 事前条件
+`order`が以下のメモリオーダーではないこと：
+
+- [`memory_order_release`](/reference/atomic/memory_order.md)
+- [`memory_order_acq_rel`](/reference/atomic/memory_order.md)
+
+
 ## 効果
 - 以下のステップを順に繰り返し実行する：
     - [`load`](load.md)`(order)`によって現在の値を読み込み、`old`と値を比較する
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wait -- atomic: wait系関数の事前条件を整理</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_flag/wait.html"/>
      <id>afdc0310222165306826831590ed0616c12367ab:reference/atomic/atomic_flag/wait.md</id>
      <updated>2025-01-22T13:39:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_flag/wait.md b/reference/atomic/atomic_flag/wait.md
index 6a28dc057..ad1094855 100644
--- a/reference/atomic/atomic_flag/wait.md
+++ b/reference/atomic/atomic_flag/wait.md
@@ -30,6 +30,13 @@ constexpr void
 この関数によってブロッキング待機をしたら、対応する起床関数である[`notify_one()`](notify_one.md)、[`notify_all()`](notify_all.md)によってブロッキング待機を解除できる。
 
 
+## 事前条件
+`order`が以下のメモリオーダーではないこと：
+
+- [`memory_order_release`](/reference/atomic/memory_order.md)
+- [`memory_order_acq_rel`](/reference/atomic/memory_order.md)
+
+
 ## 効果
 - 以下のステップを順に繰り返し実行する：
     - 式[`test`](test.md)`(order) != old`を評価する
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_flag_test -- atomic: wait系関数の事前条件を整理</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_flag_test.html"/>
      <id>afdc0310222165306826831590ed0616c12367ab:reference/atomic/atomic_flag_test.md</id>
      <updated>2025-01-22T13:39:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_flag_test.md b/reference/atomic/atomic_flag_test.md
index fad333b8f..5e2ee461d 100644
--- a/reference/atomic/atomic_flag_test.md
+++ b/reference/atomic/atomic_flag_test.md
@@ -20,13 +20,6 @@ namespace std {
 現在の値を`bool`値として取得する。
 
 
-## 要件
-`order`が以下のメモリオーダーではないこと：
-
-- [`memory_order_release`](/reference/atomic/memory_order.md)
-- [`memory_order_acq_rel`](/reference/atomic/memory_order.md)
-
-
 ## 戻り値
 アトミックに読み込まれた`*this`が指している値を返す
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_flag_test_explicit -- atomic: wait系関数の事前条件を整理</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_flag_test_explicit.html"/>
      <id>afdc0310222165306826831590ed0616c12367ab:reference/atomic/atomic_flag_test_explicit.md</id>
      <updated>2025-01-22T13:39:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_flag_test_explicit.md b/reference/atomic/atomic_flag_test_explicit.md
index a03168008..d6e8d0b73 100644
--- a/reference/atomic/atomic_flag_test_explicit.md
+++ b/reference/atomic/atomic_flag_test_explicit.md
@@ -24,7 +24,7 @@ namespace std {
 現在の値を`bool`値として取得する。
 
 
-## 要件
+## 事前条件
 `order`が以下のメモリオーダーではないこと：
 
 - [`memory_order_release`](/reference/atomic/memory_order.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_flag_wait_explicit -- atomic: wait系関数の事前条件を整理</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_flag_wait_explicit.html"/>
      <id>afdc0310222165306826831590ed0616c12367ab:reference/atomic/atomic_flag_wait_explicit.md</id>
      <updated>2025-01-22T13:39:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_flag_wait_explicit.md b/reference/atomic/atomic_flag_wait_explicit.md
index 4a27b046d..7baa5cd5f 100644
--- a/reference/atomic/atomic_flag_wait_explicit.md
+++ b/reference/atomic/atomic_flag_wait_explicit.md
@@ -33,6 +33,13 @@ namespace std {
 この関数によってブロッキング待機をしたら、対応する起床関数である[`atomic_flag_notify_one()`](atomic_flag_notify_one.md)、[`atomic_flag_notify_all()`](atomic_flag_notify_all.md)によってブロッキング待機を解除できる。
 
 
+## 事前条件
+`order`が以下のメモリオーダーではないこと：
+
+- [`memory_order_release`](/reference/atomic/memory_order.md)
+- [`memory_order_acq_rel`](/reference/atomic/memory_order.md)
+
+
 ## 効果
 - 以下のステップを順に繰り返し実行する：
     - 式[`atomic_flag_test_explicit`](atomic_flag_test_explicit.md)`(object, order) != old`を評価する
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wait -- atomic: wait系関数の事前条件を整理</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_ref/wait.html"/>
      <id>afdc0310222165306826831590ed0616c12367ab:reference/atomic/atomic_ref/wait.md</id>
      <updated>2025-01-22T13:39:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_ref/wait.md b/reference/atomic/atomic_ref/wait.md
index 58f146c89..fd66c0b82 100644
--- a/reference/atomic/atomic_ref/wait.md
+++ b/reference/atomic/atomic_ref/wait.md
@@ -24,11 +24,10 @@ constexpr void
 
 
 ## 事前条件
-- `order`が以下のいずれかであること：
-    - [`memory_order::relaxed`](/reference/atomic/memory_order.md)
-    - [`memory_order::consume`](/reference/atomic/memory_order.md)
-    - [`memory_order::acquire`](/reference/atomic/memory_order.md)
-    - [`memory_order::seq_cst`](/reference/atomic/memory_order.md)
+`order`が以下のメモリオーダーではないこと：
+
+- [`memory_order_release`](/reference/atomic/memory_order.md)
+- [`memory_order_acq_rel`](/reference/atomic/memory_order.md)
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_wait_explicit -- atomic: wait系関数の事前条件を整理</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_wait_explicit.html"/>
      <id>afdc0310222165306826831590ed0616c12367ab:reference/atomic/atomic_wait_explicit.md</id>
      <updated>2025-01-22T13:39:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_wait_explicit.md b/reference/atomic/atomic_wait_explicit.md
index 1f273afa6..1c5f02754 100644
--- a/reference/atomic/atomic_wait_explicit.md
+++ b/reference/atomic/atomic_wait_explicit.md
@@ -37,6 +37,13 @@ namespace std {
 - (1) : `atomic&amp;lt;T&amp;gt;::is_always_lock_free`が`true`であること
 
 
+## 事前条件
+`order`が以下のメモリオーダーではないこと：
+
+- [`memory_order_release`](/reference/atomic/memory_order.md)
+- [`memory_order_acq_rel`](/reference/atomic/memory_order.md)
+
+
 ## 効果
 - 以下のステップを順に繰り返し実行する：
     - [`atomic_load_explicit`](atomic_load_explicit.md)`(object, order)`によって現在の値を読み込み、`old`と値を比較する
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>行末スペースを無視するよう規定 [P2223R2] -- P2223R2の解説を修正 (#1405)</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/trimming_whitespaces_before_line_splicing.html"/>
      <id>b394b14811a52179cdf0cfbd26948978170ab73e:lang/cpp23/trimming_whitespaces_before_line_splicing.md</id>
      <updated>2025-01-21T11:42:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/trimming_whitespaces_before_line_splicing.md b/lang/cpp23/trimming_whitespaces_before_line_splicing.md
index 5f97c4768..7aaba26e6 100644
--- a/lang/cpp23/trimming_whitespaces_before_line_splicing.md
+++ b/lang/cpp23/trimming_whitespaces_before_line_splicing.md
@@ -34,7 +34,7 @@ int main() {
 }
 ```
 
-このコードにおいて「`// \`」のあとにはスペースがあり、EDG (ICCのフロントエンド)、GCC、Clangは行末スペースをトリミング (削除) して関数`f()`は`43`を返すが、MSVCはトリミングせず`1`を返していた。プラットフォーム間の動作差異をなくすために、実装は行末スペースをトリミングしなければならないよう提案することとした。
+このコードにおいて「`// \`」のあとにはスペースがあり、EDG (ICCのフロントエンド)、GCC、Clangは行末スペースをトリミング (削除) して関数`f()`は`1`を返すが、MSVCはトリミングせず`43`を返していた。プラットフォーム間の動作差異をなくすために、実装は行末スペースをトリミングしなければならないよう提案することとした。
 
 例として、IDEやツール (コードフォーマッタ) はそのような行末スペースを削除する可能性があり、Googleのコーディングスタイルでは行末スペースを禁止している。
 
@@ -66,4 +66,4 @@ int main() {
 
 
 ## 参照
-- [P2223R2 Trimming whitespaces before line splicing](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2223r2.pdf)
\ No newline at end of file
+- [P2223R2 Trimming whitespaces before line splicing](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2223r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>0xbadfca11</name>
        <email>0xbadfca11@gmail.com</email>
      </author>
    </entry>
  
</feed>
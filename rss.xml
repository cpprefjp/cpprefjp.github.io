<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-06-13T14:39:16.067994</updated>
  <id>91efa15a-1cee-425b-821b-75244f93ff64</id>

  
    <entry>
      <title>右辺値参照・ムーブセマンティクス -- rvalue_ref_and_move_semantics: `T&amp;&amp;` is ユニヴァーサル参照</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/rvalue_ref_and_move_semantics.html"/>
      <id>3579376d862a7c9bd6c7f755fa4481746b4af216:lang/cpp11/rvalue_ref_and_move_semantics.md</id>
      <updated>2021-06-11T18:09:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/rvalue_ref_and_move_semantics.md b/lang/cpp11/rvalue_ref_and_move_semantics.md
index fa0bcb4d6..5aa504f0e 100644
--- a/lang/cpp11/rvalue_ref_and_move_semantics.md
+++ b/lang/cpp11/rvalue_ref_and_move_semantics.md
@@ -285,7 +285,7 @@ template &amp;lt;typename T&amp;gt;
 void f(T&amp;amp;&amp;amp; x) {}
 ```
 
-関数テンプレート`f()`の型パラメータ`T`はユニヴァーサル参照であり、
+関数テンプレート`f()`のテンプレートパラメータ`T`を用いた`T&amp;amp;&amp;amp;`はユニヴァーサル参照であり、
 `f()`に渡された実引数が左辺値の場合には左辺値参照となり、右辺値の場合は右辺値参照となる。  
 これは、次で説明する完全転送に関わる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_string -- to_string/to_wstring : 実装例として浮動小数点数は%fじゃなく%gだった</title>
      <link href="https://cpprefjp.github.io/reference/string/to_string.html"/>
      <id>2ebd4b04a8cf21f622cc2c2a64eaa818c06e080b:reference/string/to_string.md</id>
      <updated>2021-06-10T14:49:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/to_string.md b/reference/string/to_string.md
index 8cbbb3b90..5d1866eb2 100644
--- a/reference/string/to_string.md
+++ b/reference/string/to_string.md
@@ -121,7 +121,7 @@ std::string to_string(float val)
   char buffer[std::numeric_limits&amp;lt;float&amp;gt;::max_exponent10 + 1
           + 6   // fixed precision (printf&amp;#39;s default)
           + 3]; // &amp;#39;-&amp;#39; + &amp;#39;.&amp;#39; + &amp;#39;\0&amp;#39;
-  std::sprintf(buffer, &amp;#34;%f&amp;#34;, val);
+  std::sprintf(buffer, &amp;#34;%g&amp;#34;, val);
   return buffer;
 }
 
@@ -130,7 +130,7 @@ std::string to_string(double val)
   char buffer[std::numeric_limits&amp;lt;double&amp;gt;::max_exponent10 + 1
           + 6   // fixed precision (printf&amp;#39;s default)
           + 3]; // &amp;#39;-&amp;#39; + &amp;#39;.&amp;#39; + &amp;#39;\0&amp;#39;
-  std::sprintf(buffer, &amp;#34;%f&amp;#34;, val);
+  std::sprintf(buffer, &amp;#34;%g&amp;#34;, val);
   return buffer;
 }
 
@@ -139,7 +139,7 @@ std::string to_string(long double val)
   char buffer[std::numeric_limits&amp;lt;long double&amp;gt;::max_exponent10 + 1
           + 6   // fixed precision (printf&amp;#39;s default)
           + 3]; // &amp;#39;-&amp;#39; + &amp;#39;.&amp;#39; + &amp;#39;\0&amp;#39;
-  std::sprintf(buffer, &amp;#34;%Lf&amp;#34;, val);
+  std::sprintf(buffer, &amp;#34;%Lg&amp;#34;, val);
   return buffer;
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_wstring -- to_string/to_wstring : 実装例として浮動小数点数は%fじゃなく%gだった</title>
      <link href="https://cpprefjp.github.io/reference/string/to_wstring.html"/>
      <id>2ebd4b04a8cf21f622cc2c2a64eaa818c06e080b:reference/string/to_wstring.md</id>
      <updated>2021-06-10T14:49:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/to_wstring.md b/reference/string/to_wstring.md
index 665f5570d..99ec7344e 100644
--- a/reference/string/to_wstring.md
+++ b/reference/string/to_wstring.md
@@ -128,7 +128,7 @@ std::wstring to_wstring(float val)
                            + 6  // fixed precision (printf&amp;#39;s default)
                            + 3; // &amp;#39;-&amp;#39; + &amp;#39;.&amp;#39; + &amp;#39;\0&amp;#39;
   wchar_t buffer[size];
-  std::swprintf(buffer, size, L&amp;#34;%f&amp;#34;, val);
+  std::swprintf(buffer, size, L&amp;#34;%g&amp;#34;, val);
   return buffer;
 }
 
@@ -139,7 +139,7 @@ std::wstring to_wstring(double val)
                            + 3; // &amp;#39;-&amp;#39; + &amp;#39;.&amp;#39; + &amp;#39;\0&amp;#39;
 
   wchar_t buffer[size];
-  std::swprintf(buffer, size, L&amp;#34;%f&amp;#34;, val);
+  std::swprintf(buffer, size, L&amp;#34;%g&amp;#34;, val);
   return buffer;
 }
 
@@ -149,7 +149,7 @@ std::wstring to_wstring(long double val)
                            + 6  // fixed precision (printf&amp;#39;s default)
                            + 3; // &amp;#39;-&amp;#39; + &amp;#39;.&amp;#39; + &amp;#39;\0&amp;#39;
   wchar_t buffer[size];
-  std::swprintf(buffer, size, L&amp;#34;%Lf&amp;#34;, val);
+  std::swprintf(buffer, size, L&amp;#34;%Lg&amp;#34;, val);
   return buffer;
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>file_time -- chrono : C++20にバックポートされるロケール仕様に対応</title>
      <link href="https://cpprefjp.github.io/reference/chrono/file_time.html"/>
      <id>de1e51631c8944bf7bc562bf689fd7fdabc9930c:reference/chrono/file_time.md</id>
      <updated>2021-06-09T13:20:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/file_time.md b/reference/chrono/file_time.md
index 373ed845e..31069322e 100644
--- a/reference/chrono/file_time.md
+++ b/reference/chrono/file_time.md
@@ -47,9 +47,10 @@ namespace std {
 
 - (2) : 以下と等価：
     ```cpp
-    return os &amp;lt;&amp;lt; format(STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:%F %T}&amp;#34;), tp);
+    return os &amp;lt;&amp;lt; format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:L%F %T}&amp;#34;), tp);
     ```
     * format[link format.md]
+    * os.getloc()[link /reference/ios/ios_base/getloc.md]
 
 - (3) :
     - パラメータ`fmt`で指定されたフォーマットフラグを使用して、入力を解析し、`tp`に代入する
@@ -216,3 +217,8 @@ int main()
 ## 関連項目
 - [chronoの`std::format()`](/reference/chrono/format.md) (出力フォーマットの詳細)
 - [chronoの`parse()`](/reference/chrono/parse.md) (入力フォーマットの詳細)
+
+
+## 参照
+- [P2372R1 Fixing locale handling in chrono formatters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2372r1.html)
+    - この提案文書はC++20の策定後に採択されたが、実装が追いついていない時期の採択だったために、C++20の仕様として扱われる
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- chrono : C++20にバックポートされるロケール仕様に対応</title>
      <link href="https://cpprefjp.github.io/reference/chrono/format.html"/>
      <id>de1e51631c8944bf7bc562bf689fd7fdabc9930c:reference/chrono/format.md</id>
      <updated>2021-06-09T13:20:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/format.md b/reference/chrono/format.md
index ec985f6f7..c3e33725b 100644
--- a/reference/chrono/format.md
+++ b/reference/chrono/format.md
@@ -16,6 +16,22 @@ chronoライブラリのクラスオブジェクトに対する文字列フォ
 ここでは宣言はとくにないが、[`std::format()`](/reference/format/format.md)に対してchronoライブラリの各クラスオブジェクトを出力できるよう[`std::formatter`](/reference/format/formatter.md)クラスが各クラスで特殊化されている。
 
 
+## フォーマット構文
+```
+chrono-format-spec:
+  fill-and-align(opt) width(opt) precision(opt) L(opt) chrono-specs(opt)
+```
+
+- `fill` (省略可) : アライメントに使う文字 (デフォルト：スペース)
+- `align` (省略可) : アライメント
+    - `&amp;gt;` : 右寄せ
+    - `&amp;lt;` : 左寄せ
+    - `^` : 中央寄せ
+- `width` (省略可) : 幅 (省略時は値に応じて幅が決まり、アライメントは機能しない)
+- `precision` (省略可) : 精度(浮動小数点数の場合)、使う文字数(文字列の場合)
+- `L` (省略可) : この関数に指定されたロケールを使用し、指定されなければグローバルロケールを使用する。省略された場合はCロケールを使用する
+
+
 ### chronoライブラリでのフォーマットフラグ
 
 [`std::format()`](/reference/format/format.md)関数の通常の指定では、置換フィールド`{}`内に基数、精度、0埋め指定、アライメントなどを指定する。
@@ -90,3 +106,6 @@ chronoライブラリではこれに加え、たとえばデフォルトでは
 - [LWG Issue 3262. Formatting of negative durations is not specified](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2117r0.html#3262)
 - [LWG Issue 3270. Parsing and formatting `%j` with `duration`s](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2117r0.html#3270)
 - [LWG Issue 3272. `%I``%p` should `parse`/`format` `duration` since midnight](https://wg21.cmeerw.net/lwg/issue3272)
+- [P2372R1 Fixing locale handling in chrono formatters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2372r1.html)
+    - この提案文書はC++20の策定後に採択されたが、実装が追いついていない時期の採択だったために、C++20の仕様として扱われる
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>gps_time -- chrono : C++20にバックポートされるロケール仕様に対応</title>
      <link href="https://cpprefjp.github.io/reference/chrono/gps_time.html"/>
      <id>de1e51631c8944bf7bc562bf689fd7fdabc9930c:reference/chrono/gps_time.md</id>
      <updated>2021-06-09T13:20:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/gps_time.md b/reference/chrono/gps_time.md
index a6ced9619..0e962cd38 100644
--- a/reference/chrono/gps_time.md
+++ b/reference/chrono/gps_time.md
@@ -48,9 +48,10 @@ GPS時間の一点を指す[`time_point`](time_point.md)に対する別名。
 
 - (3) : 以下と等価：
     ```cpp
-    return os &amp;lt;&amp;lt; format(STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:%F %T}&amp;#34;), tp);
+    return os &amp;lt;&amp;lt; format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:L%F %T}&amp;#34;), tp);
     ```
     * format[link format.md]
+    * os.getloc()[link /reference/ios/ios_base/getloc.md]
 
 - (4) :
     - パラメータ`fmt`で指定されたフォーマットフラグを使用して、入力を解析し、`tp`に代入する
@@ -217,3 +218,9 @@ int main()
 ## 関連項目
 - [chronoの`std::format()`](/reference/chrono/format.md) (出力フォーマットの詳細)
 - [chronoの`parse()`](/reference/chrono/parse.md) (入力フォーマットの詳細)
+
+
+## 参照
+- [P2372R1 Fixing locale handling in chrono formatters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2372r1.html)
+    - この提案文書はC++20の策定後に採択されたが、実装が追いついていない時期の採択だったために、C++20の仕様として扱われる
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- chrono : C++20にバックポートされるロケール仕様に対応</title>
      <link href="https://cpprefjp.github.io/reference/chrono/hh_mm_ss/op_ostream.html"/>
      <id>de1e51631c8944bf7bc562bf689fd7fdabc9930c:reference/chrono/hh_mm_ss/op_ostream.md</id>
      <updated>2021-06-09T13:20:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/hh_mm_ss/op_ostream.md b/reference/chrono/hh_mm_ss/op_ostream.md
index 4b551c169..b26672459 100644
--- a/reference/chrono/hh_mm_ss/op_ostream.md
+++ b/reference/chrono/hh_mm_ss/op_ostream.md
@@ -22,10 +22,11 @@ namespace std::chrono {
 - (1) : 以下と等価：
     ```cpp
     return os &amp;lt;&amp;lt; format(os.getloc(),
-                        STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:%T}&amp;#34;),
+                        STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:L%T}&amp;#34;),
                         hms);
     ```
     * format[link /reference/format/format.md]
+    * os.getloc()[link /reference/ios/ios_base/getloc.md]
 
 
 ## 備考
@@ -75,3 +76,6 @@ int main()
 
 ## 参照
 - [LWG Issue 3262. Formatting of negative durations is not specified](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2117r0.html#3262)
+- [P2372R1 Fixing locale handling in chrono formatters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2372r1.html)
+    - この提案文書はC++20の策定後に採択されたが、実装が追いついていない時期の採択だったために、C++20の仕様として扱われる
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- chrono : C++20にバックポートされるロケール仕様に対応</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month/op_ostream.html"/>
      <id>de1e51631c8944bf7bc562bf689fd7fdabc9930c:reference/chrono/month/op_ostream.md</id>
      <updated>2021-06-09T13:20:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month/op_ostream.md b/reference/chrono/month/op_ostream.md
index b1c57b645..871c45246 100644
--- a/reference/chrono/month/op_ostream.md
+++ b/reference/chrono/month/op_ostream.md
@@ -22,7 +22,7 @@ namespace std::chrono {
 - (1) : 以下と等価：
     ```cpp
     return os &amp;lt;&amp;lt; (m.ok() ?
-      format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:%b}&amp;#34;), m) :
+      format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:L%b}&amp;#34;), m) :
       format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{} is not a valid month&amp;#34;),
              static_cast&amp;lt;unsigned int&amp;gt;(m)));
     ```
@@ -119,3 +119,9 @@ Dec
 
 ## 関連項目
 - [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
+
+
+## 参照
+- [P2372R1 Fixing locale handling in chrono formatters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2372r1.html)
+    - この提案文書はC++20の策定後に採択されたが、実装が追いついていない時期の採択だったために、C++20の仕様として扱われる
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- chrono : C++20にバックポートされるロケール仕様に対応</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month_day/op_ostream.html"/>
      <id>de1e51631c8944bf7bc562bf689fd7fdabc9930c:reference/chrono/month_day/op_ostream.md</id>
      <updated>2021-06-09T13:20:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month_day/op_ostream.md b/reference/chrono/month_day/op_ostream.md
index 82ab00383..1358b6bdb 100644
--- a/reference/chrono/month_day/op_ostream.md
+++ b/reference/chrono/month_day/op_ostream.md
@@ -21,9 +21,10 @@ namespace std::chrono {
 
 - (1) : 以下と等価：
     ```cpp
-    return os &amp;lt;&amp;lt; format(STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{}/{}&amp;#34;), md.month(), md.day());
+    return os &amp;lt;&amp;lt; format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:L}/{:L}&amp;#34;), md.month(), md.day());
     ```
     * format[link /reference/format/format.md]
+    * os.getloc()[link /reference/ios/ios_base/getloc.md]
     * md.month()[link month.md]
     * md.day()[link day.md]
 
@@ -59,3 +60,9 @@ Mar/01
 
 ## 関連項目
 - [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
+
+
+## 参照
+- [P2372R1 Fixing locale handling in chrono formatters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2372r1.html)
+    - この提案文書はC++20の策定後に採択されたが、実装が追いついていない時期の採択だったために、C++20の仕様として扱われる
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- chrono : C++20にバックポートされるロケール仕様に対応</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month_day_last/op_ostream.html"/>
      <id>de1e51631c8944bf7bc562bf689fd7fdabc9930c:reference/chrono/month_day_last/op_ostream.md</id>
      <updated>2021-06-09T13:20:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month_day_last/op_ostream.md b/reference/chrono/month_day_last/op_ostream.md
index 5ddd6b9be..ac6643ada 100644
--- a/reference/chrono/month_day_last/op_ostream.md
+++ b/reference/chrono/month_day_last/op_ostream.md
@@ -21,9 +21,10 @@ namespace std::chrono {
 
 - (1) : 以下と等価：
     ```cpp
-    return os &amp;lt;&amp;lt; format(STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{}/last&amp;#34;), mdl.month());
+    return os &amp;lt;&amp;lt; format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:L}/last&amp;#34;), mdl.month());
     ```
     * format[link /reference/format/format.md]
+    * os.getloc()[link /reference/ios/ios_base/getloc.md]
     * mdl.month()[link month.md]
 
 
@@ -59,3 +60,9 @@ Mar/last
 
 ## 関連項目
 - [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
+
+
+## 参照
+- [P2372R1 Fixing locale handling in chrono formatters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2372r1.html)
+    - この提案文書はC++20の策定後に採択されたが、実装が追いついていない時期の採択だったために、C++20の仕様として扱われる
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- chrono : C++20にバックポートされるロケール仕様に対応</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month_weekday/op_ostream.html"/>
      <id>de1e51631c8944bf7bc562bf689fd7fdabc9930c:reference/chrono/month_weekday/op_ostream.md</id>
      <updated>2021-06-09T13:20:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month_weekday/op_ostream.md b/reference/chrono/month_weekday/op_ostream.md
index 4d276d1be..23fb40104 100644
--- a/reference/chrono/month_weekday/op_ostream.md
+++ b/reference/chrono/month_weekday/op_ostream.md
@@ -21,9 +21,10 @@ namespace std::chrono {
 
 - (1) : 以下と等価：
     ```cpp
-    return os &amp;lt;&amp;lt; format(STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{}/{}&amp;#34;), mwd.month(), mwd.weeday_indexed());
+    return os &amp;lt;&amp;lt; format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:L}/{:L}&amp;#34;), mwd.month(), mwd.weeday_indexed());
     ```
     * format[link /reference/format/format.md]
+    * os.getloc()[link /reference/ios/ios_base/getloc.md]
     * mwd.month()[link month.md]
     * mwd.weekday_indexed()[link weekday_indexed.md]
 
@@ -60,3 +61,9 @@ Mar/Sun[1]
 
 ## 関連項目
 - [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
+
+
+## 参照
+- [P2372R1 Fixing locale handling in chrono formatters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2372r1.html)
+    - この提案文書はC++20の策定後に採択されたが、実装が追いついていない時期の採択だったために、C++20の仕様として扱われる
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- chrono : C++20にバックポートされるロケール仕様に対応</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month_weekday_last/op_ostream.html"/>
      <id>de1e51631c8944bf7bc562bf689fd7fdabc9930c:reference/chrono/month_weekday_last/op_ostream.md</id>
      <updated>2021-06-09T13:20:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month_weekday_last/op_ostream.md b/reference/chrono/month_weekday_last/op_ostream.md
index 1a9ade8e7..a263924e7 100644
--- a/reference/chrono/month_weekday_last/op_ostream.md
+++ b/reference/chrono/month_weekday_last/op_ostream.md
@@ -21,9 +21,10 @@ namespace std::chrono {
 
 - (1) : 以下と等価：
     ```cpp
-    return os &amp;lt;&amp;lt; format(STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{}/{}&amp;#34;), mwdl.month(), mwdl.weeday_last());
+    return os &amp;lt;&amp;lt; format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:L}/{:L}&amp;#34;), mwdl.month(), mwdl.weeday_last());
     ```
     * format[link /reference/format/format.md]
+    * os.getloc()[link /reference/ios/ios_base/getloc.md]
     * mwdl.month()[link month.md]
     * mwdl.weekday_last()[link weekday_last.md]
 
@@ -61,3 +62,9 @@ Mar/Sun[last]
 
 ## 関連項目
 - [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
+
+
+## 参照
+- [P2372R1 Fixing locale handling in chrono formatters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2372r1.html)
+    - この提案文書はC++20の策定後に採択されたが、実装が追いついていない時期の採択だったために、C++20の仕様として扱われる
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sys_time -- chrono : C++20にバックポートされるロケール仕様に対応</title>
      <link href="https://cpprefjp.github.io/reference/chrono/sys_time.html"/>
      <id>de1e51631c8944bf7bc562bf689fd7fdabc9930c:reference/chrono/sys_time.md</id>
      <updated>2021-06-09T13:20:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/sys_time.md b/reference/chrono/sys_time.md
index b3e976116..b25b4acb1 100644
--- a/reference/chrono/sys_time.md
+++ b/reference/chrono/sys_time.md
@@ -61,7 +61,7 @@ namespace std {
 - (4) : 以下と等価：
     ```cpp
     auto const dp = floor&amp;lt;days&amp;gt;(tp);
-    return os &amp;lt;&amp;lt; format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{} {}&amp;#34;),
+    return os &amp;lt;&amp;lt; format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:L} {:L}&amp;#34;),
                         year_month_day{dp}, hh_mm_ss{tp - dp});
     ```
     * floor[link time_point/floor.md]
@@ -267,3 +267,8 @@ int main()
 ## 関連項目
 - [chronoの`std::format()`](/reference/chrono/format.md) (出力フォーマットの詳細)
 - [chronoの`parse()`](/reference/chrono/parse.md) (入力フォーマットの詳細)
+
+
+## 参照
+- [P2372R1 Fixing locale handling in chrono formatters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2372r1.html)
+    - この提案文書はC++20の策定後に採択されたが、実装が追いついていない時期の採択だったために、C++20の仕様として扱われる
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tai_time -- chrono : C++20にバックポートされるロケール仕様に対応</title>
      <link href="https://cpprefjp.github.io/reference/chrono/tai_time.html"/>
      <id>de1e51631c8944bf7bc562bf689fd7fdabc9930c:reference/chrono/tai_time.md</id>
      <updated>2021-06-09T13:20:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/tai_time.md b/reference/chrono/tai_time.md
index 1babdb290..eeb23338a 100644
--- a/reference/chrono/tai_time.md
+++ b/reference/chrono/tai_time.md
@@ -48,9 +48,10 @@ TAI時間の一点を指す[`time_point`](time_point.md)に対する別名。
 
 - (3) : 以下と等価：
     ```cpp
-    return os &amp;lt;&amp;lt; format(STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:%F %T}&amp;#34;), tp);
+    return os &amp;lt;&amp;lt; format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:L%F %T}&amp;#34;), tp);
     ```
     * format[link format.md]
+    * os.getloc()[link /reference/ios/ios_base/getloc.md]
 
 - (4) :
     - パラメータ`fmt`で指定されたフォーマットフラグを使用して、入力を解析し、`tp`に代入する
@@ -216,3 +217,9 @@ int main()
 ## 関連項目
 - [chronoの`std::format()`](/reference/chrono/format.md) (出力フォーマットの詳細)
 - [chronoの`parse()`](/reference/chrono/parse.md) (入力フォーマットの詳細)
+
+
+## 参照
+- [P2372R1 Fixing locale handling in chrono formatters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2372r1.html)
+    - この提案文書はC++20の策定後に採択されたが、実装が追いついていない時期の採択だったために、C++20の仕様として扱われる
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>utc_time -- chrono : C++20にバックポートされるロケール仕様に対応</title>
      <link href="https://cpprefjp.github.io/reference/chrono/utc_time.html"/>
      <id>de1e51631c8944bf7bc562bf689fd7fdabc9930c:reference/chrono/utc_time.md</id>
      <updated>2021-06-09T13:20:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/utc_time.md b/reference/chrono/utc_time.md
index 4d0725e57..2ed6d8d29 100644
--- a/reference/chrono/utc_time.md
+++ b/reference/chrono/utc_time.md
@@ -48,9 +48,10 @@ UTC時間の一点を指す[`time_point`](time_point.md)に対する別名。
 
 - (3) : 以下と等価：
     ```cpp
-    return os &amp;lt;&amp;lt; format(STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:%F %T}&amp;#34;), tp);
+    return os &amp;lt;&amp;lt; format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:L%F %T}&amp;#34;), tp);
     ```
     * format[link format.md]
+    * os.getloc()[link /reference/ios/ios_base/getloc.md]
 
 - (4) :
     - パラメータ`fmt`で指定されたフォーマットフラグを使用して、入力を解析し、`tp`に代入する
@@ -214,3 +215,6 @@ int main()
 
 ## 参照
 - [LWG Issue 3359. `&amp;lt;chrono&amp;gt;` leap second support should allow for negative leap seconds](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2117r0.html#3359)
+- [P2372R1 Fixing locale handling in chrono formatters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2372r1.html)
+    - この提案文書はC++20の策定後に採択されたが、実装が追いついていない時期の採択だったために、C++20の仕様として扱われる
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- chrono : C++20にバックポートされるロケール仕様に対応</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday/op_ostream.html"/>
      <id>de1e51631c8944bf7bc562bf689fd7fdabc9930c:reference/chrono/weekday/op_ostream.md</id>
      <updated>2021-06-09T13:20:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday/op_ostream.md b/reference/chrono/weekday/op_ostream.md
index 2893fa338..4755937ad 100644
--- a/reference/chrono/weekday/op_ostream.md
+++ b/reference/chrono/weekday/op_ostream.md
@@ -22,7 +22,7 @@ namespace std::chrono {
 - (1) : 以下と等価：
     ```cpp
     return os &amp;lt;&amp;lt; (m.ok() ?
-      format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:%a}&amp;#34;), m) :
+      format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:L%a}&amp;#34;), m) :
       format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{} is not a valid weekday&amp;#34;),
              static_cast&amp;lt;unsigned int&amp;gt;(m)));
     ```
@@ -99,3 +99,9 @@ Sat
 
 ## 関連項目
 - [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
+
+
+## 参照
+- [P2372R1 Fixing locale handling in chrono formatters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2372r1.html)
+    - この提案文書はC++20の策定後に採択されたが、実装が追いついていない時期の採択だったために、C++20の仕様として扱われる
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- chrono : C++20にバックポートされるロケール仕様に対応</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_indexed/op_ostream.html"/>
      <id>de1e51631c8944bf7bc562bf689fd7fdabc9930c:reference/chrono/weekday_indexed/op_ostream.md</id>
      <updated>2021-06-09T13:20:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_indexed/op_ostream.md b/reference/chrono/weekday_indexed/op_ostream.md
index 734ef2c0b..9e1247802 100644
--- a/reference/chrono/weekday_indexed/op_ostream.md
+++ b/reference/chrono/weekday_indexed/op_ostream.md
@@ -23,8 +23,8 @@ namespace std::chrono {
     ```cpp
     auto i = wdi.index();
     return os &amp;lt;&amp;lt; (i &amp;gt;= 1 &amp;amp;&amp;amp; i &amp;lt;= 5 ?
-      format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{}[{}]&amp;#34;), wdi.weekday(), i) :
-      format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{}[{} is not a valid index]&amp;#34;),
+      format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:L}[{}]&amp;#34;), wdi.weekday(), i) :
+      format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:L}[{} is not a valid index]&amp;#34;),
              wdi.weekday(), i));
     ```
     * wdi.index()[link index.md]
@@ -64,3 +64,9 @@ Sun[1]
 
 ## 関連項目
 - [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
+
+
+## 参照
+- [P2372R1 Fixing locale handling in chrono formatters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2372r1.html)
+    - この提案文書はC++20の策定後に採択されたが、実装が追いついていない時期の採択だったために、C++20の仕様として扱われる
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- chrono : C++20にバックポートされるロケール仕様に対応</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_last/op_ostream.html"/>
      <id>de1e51631c8944bf7bc562bf689fd7fdabc9930c:reference/chrono/weekday_last/op_ostream.md</id>
      <updated>2021-06-09T13:20:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_last/op_ostream.md b/reference/chrono/weekday_last/op_ostream.md
index 476b87364..91d32b6fb 100644
--- a/reference/chrono/weekday_last/op_ostream.md
+++ b/reference/chrono/weekday_last/op_ostream.md
@@ -21,7 +21,7 @@ namespace std::chrono {
 
 - (1) : 以下と等価：
     ```cpp
-    return os &amp;lt;&amp;lt; format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{}[last]&amp;#34;), wdl.weekday());
+    return os &amp;lt;&amp;lt; format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:L}[last]&amp;#34;), wdl.weekday());
     ```
     * format[link /reference/chrono/format.md]
     * wdl.weekday()[link weekday.md]
@@ -60,3 +60,9 @@ Sun[last]
 
 ## 関連項目
 - [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
+
+
+## 参照
+- [P2372R1 Fixing locale handling in chrono formatters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2372r1.html)
+    - この提案文書はC++20の策定後に採択されたが、実装が追いついていない時期の採択だったために、C++20の仕様として扱われる
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- chrono : C++20にバックポートされるロケール仕様に対応</title>
      <link href="https://cpprefjp.github.io/reference/chrono/year_month/op_ostream.html"/>
      <id>de1e51631c8944bf7bc562bf689fd7fdabc9930c:reference/chrono/year_month/op_ostream.md</id>
      <updated>2021-06-09T13:20:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/year_month/op_ostream.md b/reference/chrono/year_month/op_ostream.md
index 3c36ed83d..163235834 100644
--- a/reference/chrono/year_month/op_ostream.md
+++ b/reference/chrono/year_month/op_ostream.md
@@ -21,9 +21,10 @@ namespace std::chrono {
 
 - (1) : 以下と等価：
     ```cpp
-    return os &amp;lt;&amp;lt; format(STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{}/{}&amp;#34;), ym.year(), ym.month());
+    return os &amp;lt;&amp;lt; format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:L}/{:L}&amp;#34;), ym.year(), ym.month());
     ```
     * format[link /reference/format/format.md]
+    * os.getloc()[link /reference/ios/ios_base/getloc.md]
     * ym.year()[link year.md]
     * ym.month()[link month.md]
 
@@ -63,3 +64,9 @@ int main()
 
 ## 関連項目
 - [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
+
+
+## 参照
+- [P2372R1 Fixing locale handling in chrono formatters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2372r1.html)
+    - この提案文書はC++20の策定後に採択されたが、実装が追いついていない時期の採択だったために、C++20の仕様として扱われる
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- chrono : C++20にバックポートされるロケール仕様に対応</title>
      <link href="https://cpprefjp.github.io/reference/chrono/year_month_day_last/op_ostream.html"/>
      <id>de1e51631c8944bf7bc562bf689fd7fdabc9930c:reference/chrono/year_month_day_last/op_ostream.md</id>
      <updated>2021-06-09T13:20:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/year_month_day_last/op_ostream.md b/reference/chrono/year_month_day_last/op_ostream.md
index bd1abc245..c26cedc89 100644
--- a/reference/chrono/year_month_day_last/op_ostream.md
+++ b/reference/chrono/year_month_day_last/op_ostream.md
@@ -21,10 +21,11 @@ namespace std::chrono {
 
 - (1) : 以下と等価：
     ```cpp
-    return os &amp;lt;&amp;lt; format(STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{}/{}&amp;#34;),
+    return os &amp;lt;&amp;lt; format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:L}/{:L}&amp;#34;),
                         ymdl.year(), ymdl.month_day_last());
     ```
     * format[link /reference/format/format.md]
+    * os.getloc()[link /reference/ios/ios_base/getloc.md]
     * ymdl.year()[link year.md]
     * ymdl.month_day_last()[link month_day_last.md]
 
@@ -62,3 +63,9 @@ int main()
 
 ## 関連項目
 - [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
+
+
+## 参照
+- [P2372R1 Fixing locale handling in chrono formatters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2372r1.html)
+    - この提案文書はC++20の策定後に採択されたが、実装が追いついていない時期の採択だったために、C++20の仕様として扱われる
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- chrono : C++20にバックポートされるロケール仕様に対応</title>
      <link href="https://cpprefjp.github.io/reference/chrono/year_month_weekday/op_ostream.html"/>
      <id>de1e51631c8944bf7bc562bf689fd7fdabc9930c:reference/chrono/year_month_weekday/op_ostream.md</id>
      <updated>2021-06-09T13:20:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/year_month_weekday/op_ostream.md b/reference/chrono/year_month_weekday/op_ostream.md
index fb08f16a5..d01dca61e 100644
--- a/reference/chrono/year_month_weekday/op_ostream.md
+++ b/reference/chrono/year_month_weekday/op_ostream.md
@@ -21,10 +21,11 @@ namespace std::chrono {
 
 - (1) : 以下と等価：
     ```cpp
-    return os &amp;lt;&amp;lt; format(STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{}/{}/{}&amp;#34;),
+    return os &amp;lt;&amp;lt; format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:L}/{:L}/{:L}&amp;#34;),
                         ymwd.year(), ymwd.month(), ymwd.weekday_indexed());
     ```
     * format[link /reference/format/format.md]
+    * os.getloc()[link /reference/ios/ios_base/getloc.md]
     * ymwd.year()[link year.md]
     * ymwd.month()[link month.md]
     * ymwd.weekday_indexed()[link weekday_indexed.md]
@@ -63,3 +64,9 @@ int main()
 
 ## 関連項目
 - [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
+
+
+## 参照
+- [P2372R1 Fixing locale handling in chrono formatters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2372r1.html)
+    - この提案文書はC++20の策定後に採択されたが、実装が追いついていない時期の採択だったために、C++20の仕様として扱われる
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- chrono : C++20にバックポートされるロケール仕様に対応</title>
      <link href="https://cpprefjp.github.io/reference/chrono/year_month_weekday_last/op_ostream.html"/>
      <id>de1e51631c8944bf7bc562bf689fd7fdabc9930c:reference/chrono/year_month_weekday_last/op_ostream.md</id>
      <updated>2021-06-09T13:20:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/year_month_weekday_last/op_ostream.md b/reference/chrono/year_month_weekday_last/op_ostream.md
index 96280d82a..3d7342a1d 100644
--- a/reference/chrono/year_month_weekday_last/op_ostream.md
+++ b/reference/chrono/year_month_weekday_last/op_ostream.md
@@ -22,10 +22,11 @@ namespace std::chrono {
 
 - (1) : 以下と等価：
     ```cpp
-    return os &amp;lt;&amp;lt; format(STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{}/{}/{}&amp;#34;),
+    return os &amp;lt;&amp;lt; format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:L}/{:L}/{:L}&amp;#34;),
                         ymwdl.year(), ymwdl.month(), ymwdl.weekday_last());
     ```
     * format[link /reference/format/format.md]
+    * os.getloc()[link /reference/ios/ios_base/getloc.md]
     * ymwdl.year()[link year.md]
     * ymwdl.month()[link month.md]
     * ymwdl.weekday_last()[link weekday_last.md]
@@ -65,3 +66,9 @@ int main()
 
 ## 関連項目
 - [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
+
+
+## 参照
+- [P2372R1 Fixing locale handling in chrono formatters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2372r1.html)
+    - この提案文書はC++20の策定後に採択されたが、実装が追いついていない時期の採択だったために、C++20の仕様として扱われる
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>comp_ellint_1 -- comp_ellint_1 : サンプルコードを追記</title>
      <link href="https://cpprefjp.github.io/reference/cmath/comp_ellint_1.html"/>
      <id>50a7c5ec1aaf8cf29e268259011460d4ddafbe2f:reference/cmath/comp_ellint_1.md</id>
      <updated>2021-06-09T12:43:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/comp_ellint_1.md b/reference/cmath/comp_ellint_1.md
index 5b5285cec..96c669a22 100644
--- a/reference/cmath/comp_ellint_1.md
+++ b/reference/cmath/comp_ellint_1.md
@@ -7,9 +7,9 @@
 
 ```cpp
 namespace std {
-float comp_ellint_1f(float k);
-double comp_ellint_1(double k);
-long double comp_ellint_1l(long double k);
+  float comp_ellint_1f(float k);
+  double comp_ellint_1(double k);
+  long double comp_ellint_1l(long double k);
 }
 ```
 
@@ -47,6 +47,46 @@ comp_ellint_1(0.5) = 1.68575
 comp_ellint_1(1)   = nan
 ```
 
+## 単振り子の周期と等時性の破れ
+
+単振り子の周期$ T $は、第一種完全楕円積分$ K $を用いて、$ T = 4 \sqrt{\frac{l}{g}} K(\sin(\frac{\theta}{2})) $と書ける（$ l $は長さ、$ g $は重力加速度）。$ l = 1 [m]$の時の周期 $ T [s]$と、近似値$ T_0 = 2\pi\sqrt{\frac{l}{g}}$との比$T/T_0$を計算する例。
+
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;cmath&amp;gt;
+#include &amp;lt;iomanip&amp;gt;
+
+constexpr double pi = 3.141592653589793;
+constexpr double g = 9.80665;
+
+double pendulum_period(double l, double theta) {
+  return 4.0 * std::sqrt(l/g) * std::comp_ellint_1(std::sin(theta/2.0));
+}
+
+double pendulum_period_shift(double theta) {
+  return (2.0 * std::comp_ellint_1(std::sin(theta/2.0))) / pi;
+}
+
+int main() {
+  std::cout &amp;lt;&amp;lt; std::setprecision(16);
+  
+  for (const auto theta : {15.0, 30.0, 45.0, 60.0}) {
+    const auto angle = theta * pi / 180.0;
+    std::cout &amp;lt;&amp;lt; theta &amp;lt;&amp;lt; &amp;#34; [°] : &amp;#34;;
+    std::cout &amp;lt;&amp;lt; &amp;#34;T = &amp;#34; &amp;lt;&amp;lt; pendulum_period(1.0, angle) &amp;lt;&amp;lt; &amp;#34; [s], T/T0 = &amp;#34;;
+    std::cout &amp;lt;&amp;lt; pendulum_period_shift(angle) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  }
+}
+```
+* std::comp_ellint_1[color ff0000]
+
+### 出力例
+```
+15 [°] : T = 2.015038014606197 [s], T/T0 = 1.004300579173466
+30 [°] : T = 2.041338465858369 [s], T/T0 = 1.017408797595956
+45 [°] : T = 2.08661217983496 [s], T/T0 = 1.039973343196804
+60 [°] : T = 2.153242351783843 [s], T/T0 = 1.073182007149365
+```
 
 ## バージョン
 ### 言語
@@ -72,7 +112,7 @@ GCC 7.1.0–8.0.0 では定義域エラーが発生したときに [`std::numeri
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
-
+- [振り子 - Wikipedia](https://ja.wikipedia.org/wiki/振り子)
 
 ## 実装例
 ### 級数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>invocable -- invocable: 例示コードstd::regular_invocable動作へのコメント補足</title>
      <link href="https://cpprefjp.github.io/reference/concepts/invocable.html"/>
      <id>7605b9cb624af37d15f238e6167f2eff3425136b:reference/concepts/invocable.md</id>
      <updated>2021-06-07T18:09:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/invocable.md b/reference/concepts/invocable.md
index 6da8359d9..a3dc2b4f9 100644
--- a/reference/concepts/invocable.md
+++ b/reference/concepts/invocable.md
@@ -144,7 +144,10 @@ int main() {
   // 内部状態を保ち、等しさを保持しない呼び出し可能な型
   f&amp;lt;decltype(mut_lambda), int&amp;gt;(&amp;#34;mut_lambda(int)&amp;#34;);
   f&amp;lt;std::mt19937&amp;gt;(&amp;#34;std::mt19937()&amp;#34;);
-  
+  // これらの型は std::regular_invocable コンセプトのモデルではないが
+  // C++構文上では std::invocable との差異を区別しない／できないため
+  // それぞれ「XXX is regular_invocable」と出力される。
+
   std::cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
   f&amp;lt;decltype(func), int*&amp;gt;(&amp;#34;func(int*)&amp;#34;);
   f&amp;lt;not_invocable&amp;gt;(&amp;#34;not_invocable()&amp;#34;);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
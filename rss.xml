<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-02-06T05:23:38.128098</updated>
  <id>a31dd29e-84f3-491c-b194-aa05c6e8e6da</id>

  
    <entry>
      <title>format -- format : ログ出力の例を追加</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>9ad08e064c4e949c87fbd7ec33534903de1f4d76:reference/format/format.md</id>
      <updated>2023-02-06T14:18:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index f611c3145..1aabd2faf 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -546,6 +546,46 @@ wstring format(const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... ar
 * make_wformat_args[link make_format_args.md]
 * locale[link /reference/locale/locale.md]
 
+### ログ出力の例 (C++23)
+```cpp
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;format&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+// コンパイルフラグによって無効化できるログ出力関数
+template &amp;lt;typename... Args&amp;gt;
+void debug_log(std::format_string&amp;lt;Args...&amp;gt; s, Args&amp;amp;&amp;amp;... args) {
+#if defined(DISABLE_DEBUG_LOG)
+    return;
+#else
+  namespace chrono = std::chrono;
+  auto now = chrono::floor&amp;lt;chrono::seconds&amp;gt;(chrono::system_clock::now());
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{}: {}&amp;#34;,
+    chrono::zoned_time{&amp;#34;Asia/Tokyo&amp;#34;, now},
+    std::format(s, std::forward&amp;lt;Args&amp;gt;(args)...)
+  ) &amp;lt;&amp;lt; std::endl;
+#endif
+}
+
+int main()
+{
+  debug_log(&amp;#34;Hello {} World&amp;#34;, 42);
+}
+```
+* std::format_string[link /reference/format/basic_format_string.md]
+* chrono::system_clock[link /reference/chrono/system_clock.md]
+* now[link /reference/chrono/system_clock/now.md]
+* chrono::floor[link /reference/chrono/time_point/floor.md]
+* chrono::seconds[link /reference/chrono/duration_aliases.md]
+* chrono::zoned_time[link /reference/chrono/zoned_time.md]
+* std::forward[link /reference/utility/forward.md]
+
+#### 出力
+```
+2023-02-06 10:46:53: Hello 42 World
+```
+
+
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- &lt;format&gt; : basic_format_stringクラスを追加 (close #1097)</title>
      <link href="https://cpprefjp.github.io/reference/format.html"/>
      <id>f770ec54101b867e1347bbe1c0352c3056c649a4:reference/format.md</id>
      <updated>2023-02-06T14:12:58+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;format&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt;ヘッダでは、書式文字列を使って引数をフォーマットする、いわゆる&lt;code&gt;printf&lt;/code&gt;スタイルのフォーマット関数を提供する。
このフォーマット関数は型安全であり、ユーザー定義型への拡張も可能である。&lt;/p&gt;
&lt;p&gt;書式文字列については&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;format&lt;/a&gt;&lt;/code&gt;を参照。&lt;/p&gt;
&lt;h2&gt;フォーマット関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;format&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列を使って引数をフォーマットした文字列を返す (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_to.html&#34;&gt;format_to&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列を使って引数をフォーマットし、出力イテレータに出力する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_to_n.html&#34;&gt;format_to_n&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列を使って引数をフォーマットし、指定した文字数を超えないように出力イテレータに出力する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_to_n_result.html&#34;&gt;format_to_n_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;format_to_n&lt;/code&gt;の結果を表す (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/formatted_size.html&#34;&gt;formatted_size&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列を使って引数をフォーマットした文字列を保存するのに必要な文字数を返す (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/vformat.html&#34;&gt;vformat&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;format&lt;/a&gt;&lt;/code&gt;の非テンプレート版 (function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/vformat_to.html&#34;&gt;vformat_to&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_to.html&#34;&gt;format_to&lt;/a&gt;&lt;/code&gt;の非テンプレート版 (function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;フォーマッター&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/formattable.html&#34;&gt;formattable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列フォーマット可能 (concept)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/formatter.html&#34;&gt;formatter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数の型に対応する書式文字列の解析、値のフォーマットを担う (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_parse_context.html&#34;&gt;basic_format_parse_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列の解析のコンテキスト (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_parse_context.html&#34;&gt;format_parse_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_parse_context&lt;/code&gt;のマルチバイト文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_parse_context.html&#34;&gt;wformat_parse_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_parse_context&lt;/code&gt;のワイド文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_context.html&#34;&gt;basic_format_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数のフォーマットのコンテキスト (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_context.html&#34;&gt;format_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_context&lt;/code&gt;のマルチバイト文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_context.html&#34;&gt;wformat_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_context&lt;/code&gt;のワイド文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/range_format.html&#34;&gt;range_format&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Rangeの書式種別 (enum)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_kind.html&#34;&gt;format_kind&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定したRangeの書式種別を取得する (variable)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/const-formattable-range.html&#34;&gt;const-formattable-range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const Range&lt;/code&gt;の要素型が文字列フォーマット可能 (concept)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/fmt-maybe-const.html&#34;&gt;fmt-maybe-const&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;formatter::format()&lt;/code&gt;関数のパラメータ型として使用するための(const) Range型を取得 (type-alias)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/range_formatter.html&#34;&gt;range_formatter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Rangeに対する書式文字列の解析、値のフォーマットを行う (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/range-default-formatter.html&#34;&gt;range-default-formatter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Rangeに対する共通の書式文字列の解析、値のフォーマットを行う説明専用クラス (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;引数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_arg.html&#34;&gt;basic_format_arg&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数1つへのアクセスを提供する (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/visit_format_arg.html&#34;&gt;visit_format_arg&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_arg&lt;/code&gt;オブジェクトが現在保持している型に対応する関数を呼び出す (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/make_format_args.html&#34;&gt;make_format_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可変長引数から&lt;code&gt;basic_format_arg&lt;/code&gt;の列を構築する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/make_format_args.html&#34;&gt;make_wformat_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;make_wformat_args&lt;/code&gt;のワイド文字列版 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_args.html&#34;&gt;basic_format_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数列へのアクセスを提供する (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_args.html&#34;&gt;format_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_args&lt;/code&gt;のマルチバイト文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_args.html&#34;&gt;wformat_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_args&lt;/code&gt;のワイド文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;書式文字列&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_string.html&#34;&gt;basic_format_string&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式のコンパイル時文字列クラス (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_error.html&#34;&gt;format_error&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;フォーマットの失敗を表す例外クラス (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++20&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/format&#34; target=&#34;_blank&#34;&gt;Working Draft, Standard for Programming Language C++ [format]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html&#34; target=&#34;_blank&#34;&gt;P0645R10 Text Formatting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_format_string -- &lt;format&gt; : basic_format_stringクラスを追加 (close #1097)</title>
      <link href="https://cpprefjp.github.io/reference/format/basic_format_string.html"/>
      <id>f770ec54101b867e1347bbe1c0352c3056c649a4:reference/format/basic_format_string.md</id>
      <updated>2023-02-06T14:12:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/basic_format_string.md b/reference/format/basic_format_string.md
new file mode 100644
index 000000000..38475c010
--- /dev/null
+++ b/reference/format/basic_format_string.md
@@ -0,0 +1,114 @@
+# basic_format_string
+* format[meta header]
+* class[meta id-type]
+* std[meta namespace]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class charT, class... Args&amp;gt;
+  struct basic_format_string;
+
+  template &amp;lt;class... Args&amp;gt;
+  using format_string = basic_format_string&amp;lt;char, type_identity_t&amp;lt;Args&amp;gt;...&amp;gt;;
+
+  template &amp;lt;class... Args&amp;gt;
+  using wformat_string = basic_format_string&amp;lt;wchar_t, type_identity_t&amp;lt;Args&amp;gt;...&amp;gt;;
+}
+```
+* type_identity_t[link /reference/type_traits/type_identity.md]
+
+
+## 概要
+`basic_format_string`クラスは、コンパイル時の書式文字列を表すクラスである。
+
+C++20までは説明専用クラス`basic-format-string`として定義されていたが、C++23からはユーザーが利用できる正式な機能として定義される。
+
+このクラスは、書式文字列のコンパイル時チェックを行う。
+
+```cpp
+auto str = std::format(&amp;#34;{:d}&amp;#34;, &amp;#34;I am not a number&amp;#34;); // コンパイルエラー！
+                                                     // 書式文字列は「d」で整数を要求しているが、引数として文字列が渡された
+```
+
+このクラスのコンストラクタは、パラメータの書式文字列と、クラステンプレートパラメータの`Args...`を照合し、
+
+- 書式文字列の型チェック
+- 開きカッコと閉じカッコの一致
+- その他、型ごとに許可されたオプションが正しいか
+
+などをチェックする。
+
+C++23で説明専用クラスでなく正式な機能として定義されたことにより、以下のように書式化を含むロギングなどをユーザーが定義できるようになる。
+
+```cpp
+template &amp;lt;typename... Args&amp;gt;
+void log(std::format_string&amp;lt;Args...&amp;gt; s, Args&amp;amp;&amp;amp;... args) {
+  if (logging_enabled) {
+    log_raw(std::format(s, std::forward&amp;lt;Args&amp;gt;(args)...));
+  }
+}
+```
+* std::format[link /reference/format/format.md]
+* std::forward[link /reference/utility/forward.md]
+
+
+## メンバ関数
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| [`(constructor)`](basic_format_string/op_constructor.md) | コンストラクタ | C++23 |
+| [`get`](basic_format_string/get.md)                      | 書式文字列を取得する | C++23 |
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;format&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+thread_local bool logging_enabled = true;
+
+// 現在時刻付きで、文字列フォーマットしてログ出力する
+template &amp;lt;typename... Args&amp;gt;
+void log(std::format_string&amp;lt;Args...&amp;gt; s, Args&amp;amp;&amp;amp;... args) {
+  if (!logging_enabled) {
+    return;
+  }
+
+  namespace chrono = std::chrono;
+  auto now = chrono::floor&amp;lt;chrono::seconds&amp;gt;(chrono::system_clock::now());
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{}: {}&amp;#34;,
+    chrono::zoned_time{&amp;#34;Asia/Tokyo&amp;#34;, now},
+    std::format(s, std::forward&amp;lt;Args&amp;gt;(args)...)
+  ) &amp;lt;&amp;lt; std::endl;
+}
+
+int main()
+{
+  log(&amp;#34;Hello {} World&amp;#34;, 42);
+}
+```
+* std::format_string[color ff0000]
+* chrono::system_clock[link /reference/chrono/system_clock.md]
+* now[link /reference/chrono/system_clock/now.md]
+* chrono::floor[link /reference/chrono/time_point/floor.md]
+* chrono::seconds[link /reference/chrono/duration_aliases.md]
+* chrono::zoned_time[link /reference/chrono/zoned_time.md]
+* std::forward[link /reference/utility/forward.md]
+
+### 出力
+```
+2023-02-06 10:46:53: Hello 42 World
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+- [P2508R1 Expose `std::basic-format-string&amp;lt;charT, Args...&amp;gt;`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2508r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get -- &lt;format&gt; : basic_format_stringクラスを追加 (close #1097)</title>
      <link href="https://cpprefjp.github.io/reference/format/basic_format_string/get.html"/>
      <id>f770ec54101b867e1347bbe1c0352c3056c649a4:reference/format/basic_format_string/get.md</id>
      <updated>2023-02-06T14:12:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/basic_format_string/get.md b/reference/format/basic_format_string/get.md
new file mode 100644
index 000000000..c13972bf0
--- /dev/null
+++ b/reference/format/basic_format_string/get.md
@@ -0,0 +1,52 @@
+# get
+* format[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* basic_format_string[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr basic_string_view&amp;lt;charT&amp;gt; get() const noexcept; // (1)
+```
+
+## 概要
+書式文字列を取得する。
+
+
+## 戻り値
+メンバ変数として`basic_string_view&amp;lt;charT&amp;gt; str;`が定義されるとして、
+
+```cpp
+return str;
+```
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+template &amp;lt;class... Args&amp;gt;
+void f(std::format_string&amp;lt;Args...&amp;gt; fmt, Args&amp;amp;&amp;amp;...) {
+  assert(fmt.get() == &amp;#34;Hello {} World&amp;#34;);
+}
+
+int main() {
+  f(&amp;#34;Hello {} World&amp;#34;, 42);
+}
+```
+* fmt.get()[color ff0000]
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2508R1 Expose `std::basic-format-string&amp;lt;charT, Args...&amp;gt;`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2508r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- &lt;format&gt; : basic_format_stringクラスを追加 (close #1097)</title>
      <link href="https://cpprefjp.github.io/reference/format/basic_format_string/op_constructor.html"/>
      <id>f770ec54101b867e1347bbe1c0352c3056c649a4:reference/format/basic_format_string/op_constructor.md</id>
      <updated>2023-02-06T14:12:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/basic_format_string/op_constructor.md b/reference/format/basic_format_string/op_constructor.md
new file mode 100644
index 000000000..e3f944b66
--- /dev/null
+++ b/reference/format/basic_format_string/op_constructor.md
@@ -0,0 +1,92 @@
+# コンストラクタ
+* format[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* basic_format_string[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;class T&amp;gt;
+consteval basic_format_string(const T&amp;amp; s);
+```
+
+## 概要
+`basic_format_string`オブジェクトを構築する。
+
+
+## テンプレートパラメータ制約
+- `const T&amp;amp;`は[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;`[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT&amp;gt;&amp;gt;`のモデルであること
+
+
+## 効果
+メンバ変数として`basic_string_view&amp;lt;charT&amp;gt; str;`が定義されるとして、`str(s)`で初期化する。
+
+
+## 備考
+- この関数の呼び出しは、`str`が`args`の書式文字列であるような`Args`型の`args`が存在しない限り、コア定数式ではない
+    - 意味 : 書式文字列が引数列`args`と合わせて正しくなければ、定数式評価 (`consteval`) が実行できずコンパイルエラーとなる
+    - 以下のようなコードはコンパイルエラーとなる：
+    ```cpp
+    int main() {
+      auto str = std::format(&amp;#34;{:d}&amp;#34;, &amp;#34;I am not a number&amp;#34;); // コンパイルエラー！型が合わない
+    }
+    ```
+    * std::format[link /reference/format/format.md]
+
+
+## 実装例
+```cpp
+// 書式文字列のチェック
+template &amp;lt;class CharT, class... Args&amp;gt;
+consteval void fmt_checker(std::basic_string_view&amp;lt;CharT&amp;gt; str)
+{
+  // …
+
+  if (/*カッコの開き・閉じが一致しない場合*/) {
+    throw &amp;#34;invalid brackets&amp;#34;; // throw式は定数式で実行できないため、
+                              // このパスを通ったらコンパイルエラーになる
+  }
+
+  // …
+
+  if (/*型が合わない時*/) {
+    throw &amp;#34;invalid type specifier&amp;#34;;
+  }
+
+  // …
+}
+
+namespace std {
+  template &amp;lt;class CharT, class... Args&amp;gt;
+  struct basic_format_string {
+    std::basic_string_view&amp;lt;CharT&amp;gt; str;
+
+    template &amp;lt;class T&amp;gt;
+      requires std::convertible_to&amp;lt;const T&amp;amp;, std::basic_string_view&amp;lt;charT&amp;gt;&amp;gt;
+    consteval basic_format_string(const T&amp;amp; s)
+      : str(s)
+    {
+      fmt_checker&amp;lt;CharT, Args...&amp;gt;(str);
+    }
+  };
+
+  template &amp;lt;class... Args&amp;gt;
+  using format_string = basic_format_string&amp;lt;char, std::type_identity_t&amp;lt;Args&amp;gt;...&amp;gt;;
+}
+```
+* std::convertible_to[link /reference/concepts/convertible_to.md]
+* std::type_identity_t[link /reference/type_traits/type_identity.md]
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2216R3 `std::format` improvements](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2216r3.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- &lt;format&gt; : basic_format_stringクラスを追加 (close #1097)</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>f770ec54101b867e1347bbe1c0352c3056c649a4:reference/format/format.md</id>
      <updated>2023-02-06T14:12:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index f8a57a28f..f611c3145 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -23,8 +23,8 @@ namespace std {
 * string[link /reference/string/basic_string.md]
 * wstring[link /reference/string/basic_string.md]
 * locale[link /reference/locale/locale.md]
-* format_string[italic]
-* wformat_string[italic]
+* format_string[link basic_format_string.md]
+* wformat_string[link basic_format_string.md]
 
 ## 概要
 
@@ -250,32 +250,13 @@ format(&amp;#34;{:n}&amp;#34;, 1234);                  // &amp;#34;1,234&amp;#34; (ロケールによる)
 
 ### コンパイル時の書式文字列チェック
 
-_`format_string`_ および _`basic_format_string`_ は次のように定義される。ただし、クラス名は規定されない。
+書式文字列は、[`basic_format_string`](basic_format_string.md)クラスによってコンパイル時にチェックされる。
 
-```cpp
-namespace std {
-  template&amp;lt;class charT, class... Args&amp;gt; struct basic_format_string { // exposition only
-  private:
-    basic_string_view&amp;lt;charT&amp;gt; str; // exposition only
-
-  public:
-    template&amp;lt;class T&amp;gt; consteval basic_format_string(const T&amp;amp; s): str(s) {
-      /*何らかのコンパイル時書式文字列チェック*/
-    }
-  };
-
-  template&amp;lt;class... Args&amp;gt; using format_string
-    = basic_format_string&amp;lt;char, type_identity_t&amp;lt;Args&amp;gt;...&amp;gt;; // exposition only
-
-  template&amp;lt;class... Args&amp;gt; using wformat_string
-    = basic_format_string&amp;lt;wchar_t, type_identity_t&amp;lt;Args&amp;gt;...&amp;gt;; // exposition only
-```
-* consteval[link /lang/cpp20/immediate_functions.md]
-
-_`basic_format_string`_ のコンストラクタは[即時関数](/lang/cpp20/immediate_functions.md)であり、書式文字列が正しい場合にのみ定数式として評価できるように実装される。即時関数であるため、定数式として評価できない場合はエラーとなる。
+[`basic_format_string`](basic_format_string.md) のコンストラクタは[即時関数](/lang/cpp20/immediate_functions.md)であり、書式文字列が正しい場合にのみ定数式として評価できるように実装される。即時関数であるため、定数式として評価できない場合はエラーとなる。
 
 書式文字列チェックをエラーがあった場合に例外を投げるような実装をすれば、`throw`は定数式として評価できないため、コンパイルエラーとすることが可能である。
 
+
 ## 適格要件
 
 * 書式文字列は定数式であり、[`string_view`](/reference/string_view/basic_string_view.md)(ワイド文字列版は[`wstring_view`](/reference/string_view/basic_string_view.md))に暗黙変換できること。
@@ -557,8 +538,8 @@ wstring format(const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... ar
 ```
 * string[link /reference/string/basic_string.md]
 * wstring[link /reference/string/basic_string.md]
-* format_string[italic]
-* wformat_string[italic]
+* format_string[link basic_format_string.md]
+* wformat_string[link basic_format_string.md]
 * str[italic]
 * vformat[link vformat.md]
 * make_format_args[link make_format_args.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format_to -- &lt;format&gt; : basic_format_stringクラスを追加 (close #1097)</title>
      <link href="https://cpprefjp.github.io/reference/format/format_to.html"/>
      <id>f770ec54101b867e1347bbe1c0352c3056c649a4:reference/format/format_to.md</id>
      <updated>2023-02-06T14:12:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format_to.md b/reference/format/format_to.md
index ddc5e3616..cfa27ed94 100644
--- a/reference/format/format_to.md
+++ b/reference/format/format_to.md
@@ -20,8 +20,8 @@ namespace std {
   Out format_to(Out out, const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args); // (4)
 }
 ```
-* format_string[italic]
-* wformat_string[italic]
+* format_string[link basic_format_string.md]
+* wformat_string[link basic_format_string.md]
 * locale[link /reference/locale/locale.md]
 
 ## 概要
@@ -135,8 +135,8 @@ wstring format_to(Out out, const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const
   return vformat_to(out, loc, fmt.str, {make_format_args&amp;lt;context&amp;gt;(args...)});
 }
 ```
-* format_string[italic]
-* wformat_string[italic]
+* format_string[link basic_format_string.md]
+* wformat_string[link basic_format_string.md]
 * str[italic]
 * basic_format_context[link basic_format_context.md]
 * vformat_to[link vformat.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format_to_n -- &lt;format&gt; : basic_format_stringクラスを追加 (close #1097)</title>
      <link href="https://cpprefjp.github.io/reference/format/format_to_n.html"/>
      <id>f770ec54101b867e1347bbe1c0352c3056c649a4:reference/format/format_to_n.md</id>
      <updated>2023-02-06T14:12:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format_to_n.md b/reference/format/format_to_n.md
index 1bf745c88..043e0b96e 100644
--- a/reference/format/format_to_n.md
+++ b/reference/format/format_to_n.md
@@ -8,20 +8,38 @@
 ```cpp
 namespace std {
   template&amp;lt;class Out, class... Args&amp;gt;
-  format_to_n_result&amp;lt;Out&amp;gt; format_to_n(Out out, iter_difference_t&amp;lt;Out&amp;gt; n, format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args); // (1)
+  format_to_n_result&amp;lt;Out&amp;gt;
+    format_to_n(Out out,
+                iter_difference_t&amp;lt;Out&amp;gt; n,
+                format_string&amp;lt;Args...&amp;gt; fmt,
+                const Args&amp;amp;... args);       // (1)
 
   template&amp;lt;class Out, class... Args&amp;gt;
-  format_to_n_result&amp;lt;Out&amp;gt; format_to_n(Out out, iter_difference_t&amp;lt;Out&amp;gt; n, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args); // (2)
+  format_to_n_result&amp;lt;Out&amp;gt;
+    format_to_n(Out out,
+                iter_difference_t&amp;lt;Out&amp;gt; n,
+                wformat_string&amp;lt;Args...&amp;gt; fmt,
+                const Args&amp;amp;... args);       // (2)
 
   template&amp;lt;class Out, class... Args&amp;gt;
-  format_to_n_result&amp;lt;Out&amp;gt; format_to_n(Out out, iter_difference_t&amp;lt;Out&amp;gt; n, const locale&amp;amp; loc, format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args); // (3)
+  format_to_n_result&amp;lt;Out&amp;gt;
+    format_to_n(Out out,
+                iter_difference_t&amp;lt;Out&amp;gt; n,
+                const locale&amp;amp; loc,
+                format_string&amp;lt;Args...&amp;gt; fmt,
+                const Args&amp;amp;... args);       // (3)
 
   template&amp;lt;class Out, class... Args&amp;gt;
-  format_to_n_result&amp;lt;Out&amp;gt; format_to_n(Out out, iter_difference_t&amp;lt;Out&amp;gt; n, const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args); // (4)
+  format_to_n_result&amp;lt;Out&amp;gt;
+    format_to_n(Out out,
+                iter_difference_t&amp;lt;Out&amp;gt; n,
+                const locale&amp;amp; loc,
+                wformat_string&amp;lt;Args...&amp;gt; fmt,
+                const Args&amp;amp;... args);       // (4)
 }
 ```
-* format_string[italic]
-* wformat_string[italic]
+* format_string[link basic_format_string.md]
+* wformat_string[link basic_format_string.md]
 * format_to_n_result[link format_to_n_result.md]
 * locale[link /reference/locale/locale.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatted_size -- &lt;format&gt; : basic_format_stringクラスを追加 (close #1097)</title>
      <link href="https://cpprefjp.github.io/reference/format/formatted_size.html"/>
      <id>f770ec54101b867e1347bbe1c0352c3056c649a4:reference/format/formatted_size.md</id>
      <updated>2023-02-06T14:12:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatted_size.md b/reference/format/formatted_size.md
index b6fef7077..ee62d3d40 100644
--- a/reference/format/formatted_size.md
+++ b/reference/format/formatted_size.md
@@ -20,8 +20,8 @@ namespace std {
   size_t formatted_size(const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args); // (4)
 }
 ```
-* format_string[italic]
-* wformat_string[italic]
+* format_string[link basic_format_string.md]
+* wformat_string[link basic_format_string.md]
 * locale[link /reference/locale/locale.md]
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>print -- &lt;format&gt; : basic_format_stringクラスを追加 (close #1097)</title>
      <link href="https://cpprefjp.github.io/reference/ostream/print.html"/>
      <id>f770ec54101b867e1347bbe1c0352c3056c649a4:reference/ostream/print.md</id>
      <updated>2023-02-06T14:12:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ostream/print.md b/reference/ostream/print.md
index c79697488..7f98d9107 100644
--- a/reference/ostream/print.md
+++ b/reference/ostream/print.md
@@ -12,7 +12,7 @@ namespace std {
              Args&amp;amp;&amp;amp;... args);             // (1) C++23
 }
 ```
-* format_string[link /reference/format/format_string.md.nolink]
+* format_string[link /reference/format/basic_format_string.md]
 * ostream[link basic_ostream.md]
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>println -- &lt;format&gt; : basic_format_stringクラスを追加 (close #1097)</title>
      <link href="https://cpprefjp.github.io/reference/ostream/println.html"/>
      <id>f770ec54101b867e1347bbe1c0352c3056c649a4:reference/ostream/println.md</id>
      <updated>2023-02-06T14:12:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ostream/println.md b/reference/ostream/println.md
index 1f3f7cc86..bb6e90f1b 100644
--- a/reference/ostream/println.md
+++ b/reference/ostream/println.md
@@ -12,7 +12,7 @@ namespace std {
                Args&amp;amp;&amp;amp;... args);             // (1) C++23
 }
 ```
-* format_string[link /reference/format/format_string.md.nolink]
+* format_string[link /reference/format/basic_format_string.md]
 * ostream[link basic_ostream.md]
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>print -- &lt;format&gt; : basic_format_stringクラスを追加 (close #1097)</title>
      <link href="https://cpprefjp.github.io/reference/print/print.html"/>
      <id>f770ec54101b867e1347bbe1c0352c3056c649a4:reference/print/print.md</id>
      <updated>2023-02-06T14:12:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/print/print.md b/reference/print/print.md
index 0f4624814..8ce2daf05 100644
--- a/reference/print/print.md
+++ b/reference/print/print.md
@@ -16,7 +16,7 @@ namespace std {
              Args&amp;amp;&amp;amp;... args);             // (2) C++23
 }
 ```
-* format_string[link /reference/format/format_string.md.nolink]
+* format_string[link /reference/format/basic_format_string.md]
 * FILE[link /reference/cstdio/file.md.nolink]
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>println -- &lt;format&gt; : basic_format_stringクラスを追加 (close #1097)</title>
      <link href="https://cpprefjp.github.io/reference/print/println.html"/>
      <id>f770ec54101b867e1347bbe1c0352c3056c649a4:reference/print/println.md</id>
      <updated>2023-02-06T14:12:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/print/println.md b/reference/print/println.md
index c352e6dc8..27f0d8dd2 100644
--- a/reference/print/println.md
+++ b/reference/print/println.md
@@ -16,7 +16,7 @@ namespace std {
                Args&amp;amp;&amp;amp;... args);             // (2) C++23
 }
 ```
-* format_string[link /reference/format/format_string.md.nolink]
+* format_string[link /reference/format/basic_format_string.md]
 * FILE[link /reference/cstdio/file.md.nolink]
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>expected -- expected/expected: operator==,!=(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.html"/>
      <id>4d920448512f40a8a9d1363b91491ab6b7dca3df:reference/expected/expected.md</id>
      <updated>2023-02-05T13:34:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.md b/reference/expected/expected.md
index 018ba2380..21b53d030 100644
--- a/reference/expected/expected.md
+++ b/reference/expected/expected.md
@@ -69,8 +69,8 @@ namespace std {
 
 | 名前         | 説明       | 対応バージョン |
 |--------------|------------|-------|
-| [`operator==`](unexpected/op_equal.md.nolink) | 等値比較 | C++23 |
-| [`operator!=`](unexpected/op_not_equal.md.nolink) | 非等値比較 | C++23 |
+| [`operator==`](expected/op_equal.md) | 等値比較 | C++23 |
+| [`operator!=`](expected/op_not_equal.md) | 非等値比較 | C++23 |
 
 
 ## メンバ型
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- expected/expected: operator==,!=(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/op_equal.html"/>
      <id>4d920448512f40a8a9d1363b91491ab6b7dca3df:reference/expected/expected/op_equal.md</id>
      <updated>2023-02-05T13:34:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/op_equal.md b/reference/expected/expected/op_equal.md
new file mode 100644
index 000000000..efbb18770
--- /dev/null
+++ b/reference/expected/expected/op_equal.md
@@ -0,0 +1,95 @@
+# operator==
+* expected[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* expected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class T2, class E2&amp;gt; requires (!is_void_v&amp;lt;T2&amp;gt;)
+friend constexpr bool operator==(const expected&amp;amp; x, const expected&amp;lt;T2, E2&amp;gt;&amp;amp; y); // (1)
+
+template&amp;lt;class T2&amp;gt;
+friend constexpr bool operator==(const expected&amp;amp; x, const T2&amp;amp; v); // (2)
+// (2)により、下記オーバーロードが使用可能になる
+template&amp;lt;class T2&amp;gt;
+friend constexpr bool operator==(const T2&amp;amp; v, const expected&amp;amp; x); // (3)
+
+template&amp;lt;class E2&amp;gt;
+friend constexpr bool operator==(const expected&amp;amp; x, const unexpected&amp;lt;E2&amp;gt;&amp;amp; e); // (4)
+// (4)により、下記オーバーロードが使用可能になる
+template&amp;lt;class E2&amp;gt;
+friend constexpr bool operator==(const unexpected&amp;lt;E2&amp;gt;&amp;amp; e, const expected&amp;amp; x); // (5)
+```
+* is_void_v[link /reference/type_traits/is_void.md]
+* unexpected[link ../unexpected.md]
+
+## 概要
+- (1) : `unexpected`オブジェクト同士の等値比較を行う。
+- (2), (3) : `unexpected`オブジェクトと正常値の等値比較を行う。
+- (4), (5) : `unexpected`オブジェクトとエラー値の等値比較を行う。
+
+
+## 適格要件
+- (1) : 式[`*x`](op_deref.md) `==` [`*y`](op_deref.md)および式`x.`[`error()`](error.md) `== y.`[`error()`](error.md)が適格であり、各式の結果を`bool`へ変換可能であること。
+- (2), (3) : 式[`*x`](op_deref.md) `== v`が適格であり、その結果を`bool`へ変換可能であること。
+- (4), (5) : 式`x.`[`error()`](error.md) `== e.`[`error()`](../unexpected/error.md.nolink)が適格であり、その結果を`bool`へ変換可能であること。
+
+
+## 戻り値
+- (1) : 次の値を返す
+    - `x.`[`has_value()`](has_value.md)と`y.`[`has_value()`](has_value.md)が異なるとき、`false`
+    - `x.`[`has_value()`](has_value.md) `== true`のとき、[`*x`](op_deref.md) `==` [`*y`](op_deref.md)
+    - `x.`[`error()`](error.md) `== y.`[`error()`](error.md)
+- (2), (3) : `x.`[`has_value()`](has_value.md) `&amp;amp;&amp;amp; static_cast&amp;lt;bool&amp;gt;(`[`*x`](op_deref.md) `== v)`
+- (4), (5) : `!x.`[`has_value()`](has_value.md) `&amp;amp;&amp;amp; static_cast&amp;lt;bool&amp;gt;(x.`[`error()`](error.md) `== e.`[`error()`](../unexpected/error.md.nolink)`)`
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+
+int main()
+{
+  std::expected&amp;lt;long, long&amp;gt;   x1 = 1;
+  std::expected&amp;lt;short, short&amp;gt; y1 = 1;
+  std::expected&amp;lt;long, long&amp;gt;   x2 = std::unexpected{1};
+  std::expected&amp;lt;short, short&amp;gt; y2 = std::unexpected{1};
+
+  // (1)
+  assert(x1 == y1);
+  assert(x2 == y2);
+  assert(not (x1 == y2));
+  assert(not (x2 == y1));
+
+  // (2), (3)
+  assert(x1 == 1);
+  assert(1 == x1);
+
+  // (4), (5)
+  assert(x2 == std::unexpected{1});
+  assert(std::unexpected{1} == x2);
+}
+```
+* ==[color ff0000]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- expected/expected: operator==,!=(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/op_not_equal.html"/>
      <id>4d920448512f40a8a9d1363b91491ab6b7dca3df:reference/expected/expected/op_not_equal.md</id>
      <updated>2023-02-05T13:34:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/op_not_equal.md b/reference/expected/expected/op_not_equal.md
new file mode 100644
index 000000000..dc9fb7370
--- /dev/null
+++ b/reference/expected/expected/op_not_equal.md
@@ -0,0 +1,92 @@
+# operator!=
+* expected[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* expected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+// operator==により、下記オーバーロードが使用可能になる
+template&amp;lt;class T2, class E2&amp;gt; requires (!is_void_v&amp;lt;T2&amp;gt;)
+friend constexpr bool operator!=(const expected&amp;amp; x, const expected&amp;lt;T2, E2&amp;gt;&amp;amp; y); // (1)
+
+template&amp;lt;class T2&amp;gt;
+friend constexpr bool operator!=(const expected&amp;amp; x, const T2&amp;amp; v); // (2)
+template&amp;lt;class T2&amp;gt;
+friend constexpr bool operator!=(const T2&amp;amp; v, const expected&amp;amp; x); // (3)
+
+template&amp;lt;class E2&amp;gt;
+friend constexpr bool operator!=(const expected&amp;amp; x, const unexpected&amp;lt;E2&amp;gt;&amp;amp; e); // (4)
+template&amp;lt;class E2&amp;gt;
+friend constexpr bool operator!=(const unexpected&amp;lt;E2&amp;gt;&amp;amp; e, const expected&amp;amp; x); // (5)
+```
+* operator==[link op_equal.md]
+* is_void_v[link /reference/type_traits/is_void.md]
+* unexpected[link ../unexpected.md]
+
+## 概要
+- (1) : `unexpected`オブジェクト同士の非等値比較を行う。
+- (2), (3) : `unexpected`オブジェクトと正常値の非等値比較を行う。
+- (4), (5) : `unexpected`オブジェクトとエラー値の非等値比較を行う。
+
+
+## 適格要件
+- (1) : 式[`*x`](op_deref.md) `==` [`*y`](op_deref.md)および式`x.`[`error()`](error.md) `== y.`[`error()`](error.md)が適格であり、各式の結果を`bool`へ変換可能であること。
+- (2), (3) : 式[`*x`](op_deref.md) `== v`が適格であり、その結果を`bool`へ変換可能であること。
+- (4), (5) : 式`x.`[`error()`](error.md) `== e.`[`error()`](../unexpected/error.md.nolink)が適格であり、その結果を`bool`へ変換可能であること。
+
+
+## 戻り値
+- (1) : `!`[`(x == y)`](op_equal.md)
+- (2), (3) : `!`[`(x == v)`](op_equal.md)
+- (4), (5) : `!`[`(x == e)`](op_equal.md)
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+
+int main()
+{
+  std::expected&amp;lt;long, long&amp;gt;   x1 = 1;
+  std::expected&amp;lt;short, short&amp;gt; y1 = 100;
+  std::expected&amp;lt;long, long&amp;gt;   x2 = std::unexpected{1};
+  std::expected&amp;lt;short, short&amp;gt; y2 = std::unexpected{100};
+
+  // (1)
+  assert(x1 != y1);
+  assert(x2 != y2);
+  assert(x1 != y2);
+  assert(x2 != y1);
+
+  // (2), (3)
+  assert(x1 != 2);
+  assert(2 != x1);
+
+  // (4), (5)
+  assert(x2 != std::unexpected{2});
+  assert(std::unexpected{2} != x2);
+}
+```
+* !=[color ff0000]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>and_then -- expected/expected: MonadicOperators調整(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/and_then.html"/>
      <id>c7fe7e269cffd85cbe741ba50482628f0840c716:reference/expected/expected/and_then.md</id>
      <updated>2023-02-05T11:16:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/and_then.md b/reference/expected/expected/and_then.md
index 4f0062460..358fdfb1b 100644
--- a/reference/expected/expected/and_then.md
+++ b/reference/expected/expected/and_then.md
@@ -16,6 +16,18 @@ template&amp;lt;class F&amp;gt; constexpr auto and_then(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
 正常値を保持していれば、正常値に対して`f`を適用した結果を`expected`として返す。
 エラー値を保持していれば、そのまま返す。
 
+実際には複数オーバーロードが提供されるが、大まかには下記シグニチャのようにみなせる。
+`and_then`へは、引数リストに1個の`T`型をとり`std::expected&amp;lt;Return, E&amp;gt;`型を返す関数や関数オブジェクトを与える。
+
+```cpp
+template &amp;lt;class T, class E&amp;gt;
+class expected {
+  template &amp;lt;class Return&amp;gt;
+  std::expected&amp;lt;Return, E&amp;gt; and_then(function&amp;lt;std::expected&amp;lt;Return, E&amp;gt;(T)&amp;gt; func);
+};
+```
+* function[link /reference/functional/function.md]
+
 
 ## テンプレートパラメータ制約
 - (1), (2) : [`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;E&amp;gt; == true`
@@ -62,6 +74,10 @@ template&amp;lt;class F&amp;gt; constexpr auto and_then(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
     * std::move[link /reference/utility/move.md]
 
 
+## 備考
+`and_then`は、メソッドチェーンをサポートするモナド風(monadic)操作として導入された。
+
+
 ## 例
 ```cpp example
 #include &amp;lt;cassert&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>or_else -- expected/expected: MonadicOperators調整(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/or_else.html"/>
      <id>c7fe7e269cffd85cbe741ba50482628f0840c716:reference/expected/expected/or_else.md</id>
      <updated>2023-02-05T11:16:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/or_else.md b/reference/expected/expected/or_else.md
index 9cac72496..8c7b08d78 100644
--- a/reference/expected/expected/or_else.md
+++ b/reference/expected/expected/or_else.md
@@ -16,6 +16,18 @@ template&amp;lt;class F&amp;gt; constexpr auto or_else(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
 エラー値を保持していれば、エラー値に対して`f`を適用した結果を`expected`として返す。
 正常値を保持していれば、そのまま返す。
 
+実際には複数オーバーロードが提供されるが、大まかには下記シグニチャのようにみなせる。
+`or_else`へは、引数リストに1個の`E`型をとり`std::expected&amp;lt;T, Return&amp;gt;`型を返す関数や関数オブジェクトを与える。
+
+```cpp
+template &amp;lt;class T, class E&amp;gt;
+class expected {
+  template &amp;lt;class Return&amp;gt;
+  std::expected&amp;lt;T, Return&amp;gt; or_else(function&amp;lt;std::expected&amp;lt;T, Return&amp;gt;(E)&amp;gt; func);
+};
+```
+* function[link /reference/functional/function.md]
+
 
 ## テンプレートパラメータ制約
 - (1), (2) : [`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;T&amp;gt; == true`
@@ -62,6 +74,10 @@ template&amp;lt;class F&amp;gt; constexpr auto or_else(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
     * std::move[link /reference/utility/move.md]
 
 
+## 備考
+`or_else`は、メソッドチェーンをサポートするモナド風(monadic)操作として導入された。
+
+
 ## 例
 ```cpp example
 #include &amp;lt;cassert&amp;gt;
@@ -98,6 +114,8 @@ int main()
 * value()[link value.md]
 * error()[link error.md]
 * std::unexpected[link ../unexpected.md]
+* std::from_chars[link /reference/charconv/from_chars.md]
+* std::errc[link /reference/system_error/errc.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transform -- expected/expected: MonadicOperators調整(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/transform.html"/>
      <id>c7fe7e269cffd85cbe741ba50482628f0840c716:reference/expected/expected/transform.md</id>
      <updated>2023-02-05T11:16:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/transform.md b/reference/expected/expected/transform.md
index 13f65dfbd..74439250d 100644
--- a/reference/expected/expected/transform.md
+++ b/reference/expected/expected/transform.md
@@ -16,6 +16,18 @@ template&amp;lt;class F&amp;gt; constexpr auto transform(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
 正常値を保持していれば、正常値に対して`f`を適用した結果を`expected`の正常値として格納して返す。
 エラー値を保持していれば、そのまま返す。
 
+実際には複数オーバーロードが提供されるが、大まかには下記シグニチャのようにみなせる。
+`transform`へは、引数リストに1個の`T`型をとり`Return`型を返す関数や関数オブジェクトを与える。
+
+```cpp
+template &amp;lt;class T, class E&amp;gt;
+class expected {
+  template &amp;lt;class Return&amp;gt;
+  std::expected&amp;lt;Return, E&amp;gt; transform(function&amp;lt;Return(T)&amp;gt; func);
+};
+```
+* function[link /reference/functional/function.md]
+
 
 ## テンプレートパラメータ制約
 - (1), (2) : [`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;E&amp;gt; == true`
@@ -25,10 +37,10 @@ template&amp;lt;class F&amp;gt; constexpr auto transform(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
 ## 適格要件
 - (1), (2) : 型`U`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`value()`](value.md)`)&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
     - `U`が`expected`の有効な正常値型である
-    - [`is_void_t`](/reference/type_traits/is_void.md)`&amp;lt;U&amp;gt; == false`のとき、宣言`U u(`[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`value()`](value.md)`));`が妥当である
+    - `U`が（CV修飾された）`void`ではないとき、宣言`U u(`[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`value()`](value.md)`));`が妥当である
 - (3), (4) : 型`U`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`))&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
     - `U`が`expected`の有効な正常値型である
-    - [`is_void_t`](/reference/type_traits/is_void.md)`&amp;lt;U&amp;gt; == false`のとき、宣言`U u(`[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`)));`が妥当である
+    - `U`が（CV修飾された）`void`ではないとき、宣言`U u(`[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`)));`が妥当である
 
 
 ## 効果
@@ -36,13 +48,16 @@ template&amp;lt;class F&amp;gt; constexpr auto transform(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
     - エラー値を保持していたら、`expected&amp;lt;U, E&amp;gt;(`[`unexpect`](../unexpect_t.md)`,` [`error()`](error.md)`)`を返す。
     - 型`U`が（CV修飾された）`void`でなければ、正常値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`value()`](value.md)`)`で非直接リスト初期化した`expected&amp;lt;U, E&amp;gt;`オブジェクトを返す。
     - そうでなければ、[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`value()`](value.md)`)`を評価し、`expected&amp;lt;U, E&amp;gt;()`を返す。
-
 - (3), (4) : 次の効果をもつ
     - エラー値を保持していたら、`expected&amp;lt;U, E&amp;gt;(`[`unexpect`](../unexpect_t.md)`,` [`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))`を返す。
     - 型`U`が（CV修飾された）`void`でなければ、正常値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`))`で非直接リスト初期化した`expected&amp;lt;U, E&amp;gt;`オブジェクトを返す。
     - そうでなければ、[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`))`を評価し、`expected&amp;lt;U, E&amp;gt;()`を返す。
 
 
+## 備考
+`transform`は、メソッドチェーンをサポートするモナド風(monadic)操作として導入された。
+
+
 ## 例
 ```cpp example
 #include &amp;lt;cassert&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transform_error -- expected/expected: MonadicOperators調整(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/transform_error.html"/>
      <id>c7fe7e269cffd85cbe741ba50482628f0840c716:reference/expected/expected/transform_error.md</id>
      <updated>2023-02-05T11:16:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/transform_error.md b/reference/expected/expected/transform_error.md
index 160c97d4b..100e135d1 100644
--- a/reference/expected/expected/transform_error.md
+++ b/reference/expected/expected/transform_error.md
@@ -16,6 +16,18 @@ template&amp;lt;class F&amp;gt; constexpr auto transform_error(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
 エラー値を保持していれば、エラー値に対して`f`を適用した結果を`expected`のエラー値として格納して返す。
 正常値を保持していれば、そのまま返す。
 
+実際には複数オーバーロードが提供されるが、大まかには下記シグニチャのようにみなせる。
+`transform_error`へは、引数リストに1個の`E`型をとり`Return`型を返す関数や関数オブジェクトを与える。
+
+```cpp
+template &amp;lt;class T, class E&amp;gt;
+class expected {
+  template &amp;lt;class Return&amp;gt;
+  std::expected&amp;lt;T, Return&amp;gt; transform_error(function&amp;lt;Return(E)&amp;gt; func);
+};
+```
+* function[link /reference/functional/function.md]
+
 
 ## テンプレートパラメータ制約
 - (1), (2) : [`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;T&amp;gt; == true`
@@ -24,10 +36,10 @@ template&amp;lt;class F&amp;gt; constexpr auto transform_error(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
 
 ## 適格要件
 - (1), (2) : 型`G`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`error()`](error.md)`)&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
-    - `G`が`expected`の有効な値型である
+    - `G`が`expected`の有効なエラー値型である
     - 宣言`G g(`[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`error()`](error.md)`));`が妥当である
 - (3), (4) : 型`G`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
-    - `G`が`expected`の有効な値型である
+    - `G`が`expected`の有効なエラー値型である
     - 宣言`G g(`[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`)));`が妥当である
 
 
@@ -36,8 +48,12 @@ template&amp;lt;class F&amp;gt; constexpr auto transform_error(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
     - 正常値を保持していたら、`expected&amp;lt;T, G&amp;gt;(`[`in_place`](/reference/utility/in_place_t.md)`,` [`value()`](value.md)`)`を返す。
     - エラー値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`error()`](error.md)`)`で非直接リスト初期化した`expected&amp;lt;T, G&amp;gt;`オブジェクトを返す。
 - (3), (4) : 次の効果をもつ
-    - エラー値を保持していたら、`expected&amp;lt;U, E&amp;gt;(`[`unexpect`](../unexpect_t.md)`,` [`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))`を返す。
-    - 正常値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))`で非直接リスト初期化した`expected&amp;lt;T, G&amp;gt;`オブジェクトを返す。
+    - 正常値を保持していたら、`expected&amp;lt;T, G&amp;gt;(`[`in_place`](/reference/utility/in_place_t.md)`,` [`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`))`を返す。
+    - エラー値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))`で非直接リスト初期化した`expected&amp;lt;T, G&amp;gt;`オブジェクトを返す。
+
+
+## 備考
+`transform_error`は、メソッドチェーンをサポートするモナド風(monadic)操作として導入された。
 
 
 ## 例
@@ -67,6 +83,7 @@ int main()
 * value()[link value.md]
 * error()[link error.md]
 * std::unexpected[link ../unexpected.md]
+* std::reverse[link /reference/algorithm/reverse.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>expected -- expected/expected: and_then,or_else,transform,transform_error(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.html"/>
      <id>7a5214d449873dbd48f51bb2a022775430b6aa89:reference/expected/expected.md</id>
      <updated>2023-02-04T23:35:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.md b/reference/expected/expected.md
index ecb45517a..018ba2380 100644
--- a/reference/expected/expected.md
+++ b/reference/expected/expected.md
@@ -60,10 +60,10 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`and_then`](expected/and_then.md.nolink)   | 正常値に対して関数を適用する | C++23 |
-| [`or_else`](expected/or_else.md.nolink)     | エラー値に対して関数を適用する | C++23 |
-| [`transform`](expected/transform.md.nolink) | 正常値を変換する | C++23 |
-| [`transform_error`](expected/transform_error.md.nolink) | エラー値を変換する | C++23 |
+| [`and_then`](expected/and_then.md) | 正常値に対して関数を適用する | C++23 |
+| [`or_else`](expected/or_else.md) | エラー値に対して関数を適用する | C++23 |
+| [`transform`](expected/transform.md) | 正常値を変換する | C++23 |
+| [`transform_error`](expected/transform_error.md) | エラー値を変換する | C++23 |
 
 ### 比較
 
@@ -120,6 +120,8 @@ int main()
 ```
 * std::expected[color ff0000]
 * std::unexpected[link unexpected.md]
+* *v[link expected/op_deref.md]
+* v.error()[link expected/error.md]
 * std::quoted[link ../iomanip/quoted.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>and_then -- expected/expected: and_then,or_else,transform,transform_error(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/and_then.html"/>
      <id>7a5214d449873dbd48f51bb2a022775430b6aa89:reference/expected/expected/and_then.md</id>
      <updated>2023-02-04T23:35:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/and_then.md b/reference/expected/expected/and_then.md
new file mode 100644
index 000000000..4f0062460
--- /dev/null
+++ b/reference/expected/expected/and_then.md
@@ -0,0 +1,121 @@
+# and_then
+* expected[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* expected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class F&amp;gt; constexpr auto and_then(F&amp;amp;&amp;amp; f) &amp;amp;;        // (1)
+template&amp;lt;class F&amp;gt; constexpr auto and_then(F&amp;amp;&amp;amp; f) const &amp;amp;;  // (2)
+template&amp;lt;class F&amp;gt; constexpr auto and_then(F&amp;amp;&amp;amp; f) &amp;amp;&amp;amp;;       // (3)
+template&amp;lt;class F&amp;gt; constexpr auto and_then(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
+```
+
+## 概要
+正常値を保持していれば、正常値に対して`f`を適用した結果を`expected`として返す。
+エラー値を保持していれば、そのまま返す。
+
+
+## テンプレートパラメータ制約
+- (1), (2) : [`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;E&amp;gt; == true`
+- (3), (4) : [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;E&amp;gt; == true`
+
+
+## 適格要件
+- (1), (2) : 型`U`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`value()`](value.md)`)&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `U`が`expected`の特殊化である
+    - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;U::error_type, E&amp;gt; == true`
+- (3), (4) : 型`U`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`))&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `U`が`expected`の特殊化である
+    - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;U::error_type, E&amp;gt; == true`
+
+
+## 効果
+- (1), (2) : 次の処理と等価
+    ```cpp
+    if (has_value())
+      return invoke(std::forward&amp;lt;F&amp;gt;(f), value());
+    else
+      return U(unexpect, error());
+    ```
+    * has_value[link has_value.md]
+    * value()[link value.md]
+    * error()[link error.md]
+    * unexpect[link ../unexpect_t.md]
+    * invoke[link /reference/functional/invoke.md]
+    * std::forward[link /reference/utility/forward.md]
+
+- (3), (4) : 次の処理と等価
+    ```cpp
+    if (has_value())
+      return invoke(std::forward&amp;lt;F&amp;gt;(f), std::move(value()));
+    else
+      return U(unexpect, std::move(error()));
+    ```
+    * has_value[link has_value.md]
+    * value()[link value.md]
+    * error()[link error.md]
+    * unexpect[link ../unexpect_t.md]
+    * invoke[link /reference/functional/invoke.md]
+    * std::forward[link /reference/utility/forward.md]
+    * std::move[link /reference/utility/move.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+// 正数なら2倍／それ以外はエラー値を返す関数
+std::expected&amp;lt;int, std::string&amp;gt; twice(int n)
+{
+  if (0 &amp;lt; n) {
+    return n * 2;
+  } else {
+    return std::unexpected{&amp;#34;out of domain&amp;#34;};
+  }
+}
+
+int main()
+{
+  std::expected&amp;lt;int, std::string&amp;gt; v1 = 1;
+  assert(v1.and_then(twice).value() == 2);
+
+  std::expected&amp;lt;int, std::string&amp;gt; v2 = 0;
+  assert(v2.and_then(twice).error() == &amp;#34;out of domain&amp;#34;);
+
+  std::expected&amp;lt;int, std::string&amp;gt; e1 = std::unexpected{&amp;#34;NaN&amp;#34;};
+  assert(e1.and_then(twice).error() == &amp;#34;NaN&amp;#34;);
+}
+```
+* and_then[color ff0000]
+* value()[link value.md]
+* error()[link error.md]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`or_else()`](or_else.md)
+- [`transform()`](transform.md)
+- [`transform_error()`](transform_error.md)
+
+
+## 参照
+- [P2505R5 Monadic Functions for `std::expected`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2505r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>or_else -- expected/expected: and_then,or_else,transform,transform_error(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/or_else.html"/>
      <id>7a5214d449873dbd48f51bb2a022775430b6aa89:reference/expected/expected/or_else.md</id>
      <updated>2023-02-04T23:35:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/or_else.md b/reference/expected/expected/or_else.md
new file mode 100644
index 000000000..9cac72496
--- /dev/null
+++ b/reference/expected/expected/or_else.md
@@ -0,0 +1,125 @@
+# or_else
+* expected[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* expected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class F&amp;gt; constexpr auto or_else(F&amp;amp;&amp;amp; f) &amp;amp;;        // (1)
+template&amp;lt;class F&amp;gt; constexpr auto or_else(F&amp;amp;&amp;amp; f) const &amp;amp;;  // (2)
+template&amp;lt;class F&amp;gt; constexpr auto or_else(F&amp;amp;&amp;amp; f) &amp;amp;&amp;amp;;       // (3)
+template&amp;lt;class F&amp;gt; constexpr auto or_else(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
+```
+
+## 概要
+エラー値を保持していれば、エラー値に対して`f`を適用した結果を`expected`として返す。
+正常値を保持していれば、そのまま返す。
+
+
+## テンプレートパラメータ制約
+- (1), (2) : [`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;T&amp;gt; == true`
+- (3), (4) : [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;T&amp;gt; == true`
+
+
+## 適格要件
+- (1), (2) : 型`G`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`value()`](value.md)`)&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `G`が`expected`の特殊化である
+    - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;G::value_type, T&amp;gt; == true`
+- (3), (4) : 型`G`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`))&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `G`が`expected`の特殊化である
+    - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;G::value_type, T&amp;gt; == true`
+
+
+## 効果
+- (1), (2) : 次の処理と等価
+    ```cpp
+    if (has_value())
+      return G(in_place, value());
+    else
+      return invoke(std::forward&amp;lt;F&amp;gt;(f), error());
+    ```
+    * has_value()[link has_value.md]
+    * value()[link value.md]
+    * error()[link error.md]
+    * invoke[link /reference/functional/invoke.md]
+    * in_place[link /reference/utility/in_place_t.md]
+    * std::forward[link /reference/utility/forward.md]
+
+- (3), (4) : 次の処理と等価
+    ```cpp
+    if (has_value())
+      return G(in_place, std::move(value()));
+    else
+      return invoke(std::forward&amp;lt;F&amp;gt;(f), std::move(error()));
+    ```
+    * has_value()[link has_value.md]
+    * value()[link value.md]
+    * error()[link error.md]
+    * invoke[link /reference/functional/invoke.md]
+    * in_place[link /reference/utility/in_place_t.md]
+    * std::forward[link /reference/utility/forward.md]
+    * std::move[link /reference/utility/move.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;charconv&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+
+// 文字列を正常値(数値)として再解釈する関数
+std::expected&amp;lt;int, std::string&amp;gt; parse(std::string_view s)
+{
+  int val{};
+  auto [ptr, ec] = std::from_chars(s.begin(), s.end(), val);
+  if (ec == std::errc{} &amp;amp;&amp;amp; ptr == s.end()) {
+    return val;
+  } else {
+    return std::unexpected&amp;lt;std::string&amp;gt;{s};
+  }
+}
+
+int main()
+{
+  std::expected&amp;lt;int, std::string&amp;gt; v1 = 1;
+  assert(v1.or_else(parse).value() == 1);
+
+  std::expected&amp;lt;int, std::string&amp;gt; e1 = std::unexpected{&amp;#34;123&amp;#34;};
+  assert(e1.or_else(parse) == 123);
+
+  std::expected&amp;lt;int, std::string&amp;gt; e2 = std::unexpected{&amp;#34;bad&amp;#34;};
+  assert(e2.or_else(parse).error() == &amp;#34;bad&amp;#34;);
+}
+```
+* or_else[color ff0000]
+* value()[link value.md]
+* error()[link error.md]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`and_then()`](and_then.md)
+- [`transform()`](transform.md)
+- [`transform_error()`](transform_error.md)
+
+
+## 参照
+- [P2505R5 Monadic Functions for `std::expected`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2505r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transform -- expected/expected: and_then,or_else,transform,transform_error(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/transform.html"/>
      <id>7a5214d449873dbd48f51bb2a022775430b6aa89:reference/expected/expected/transform.md</id>
      <updated>2023-02-04T23:35:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/transform.md b/reference/expected/expected/transform.md
new file mode 100644
index 000000000..13f65dfbd
--- /dev/null
+++ b/reference/expected/expected/transform.md
@@ -0,0 +1,99 @@
+# transform
+* expected[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* expected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class F&amp;gt; constexpr auto transform(F&amp;amp;&amp;amp; f) &amp;amp;;        // (1)
+template&amp;lt;class F&amp;gt; constexpr auto transform(F&amp;amp;&amp;amp; f) const &amp;amp;;  // (2)
+template&amp;lt;class F&amp;gt; constexpr auto transform(F&amp;amp;&amp;amp; f) &amp;amp;&amp;amp;;       // (3)
+template&amp;lt;class F&amp;gt; constexpr auto transform(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
+```
+
+## 概要
+正常値を保持していれば、正常値に対して`f`を適用した結果を`expected`の正常値として格納して返す。
+エラー値を保持していれば、そのまま返す。
+
+
+## テンプレートパラメータ制約
+- (1), (2) : [`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;E&amp;gt; == true`
+- (3), (4) : [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;E&amp;gt; == true`
+
+
+## 適格要件
+- (1), (2) : 型`U`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`value()`](value.md)`)&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `U`が`expected`の有効な正常値型である
+    - [`is_void_t`](/reference/type_traits/is_void.md)`&amp;lt;U&amp;gt; == false`のとき、宣言`U u(`[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`value()`](value.md)`));`が妥当である
+- (3), (4) : 型`U`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`))&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `U`が`expected`の有効な正常値型である
+    - [`is_void_t`](/reference/type_traits/is_void.md)`&amp;lt;U&amp;gt; == false`のとき、宣言`U u(`[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`)));`が妥当である
+
+
+## 効果
+- (1), (2) : 次の効果をもつ
+    - エラー値を保持していたら、`expected&amp;lt;U, E&amp;gt;(`[`unexpect`](../unexpect_t.md)`,` [`error()`](error.md)`)`を返す。
+    - 型`U`が（CV修飾された）`void`でなければ、正常値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`value()`](value.md)`)`で非直接リスト初期化した`expected&amp;lt;U, E&amp;gt;`オブジェクトを返す。
+    - そうでなければ、[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`value()`](value.md)`)`を評価し、`expected&amp;lt;U, E&amp;gt;()`を返す。
+
+- (3), (4) : 次の効果をもつ
+    - エラー値を保持していたら、`expected&amp;lt;U, E&amp;gt;(`[`unexpect`](../unexpect_t.md)`,` [`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))`を返す。
+    - 型`U`が（CV修飾された）`void`でなければ、正常値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`))`で非直接リスト初期化した`expected&amp;lt;U, E&amp;gt;`オブジェクトを返す。
+    - そうでなければ、[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`))`を評価し、`expected&amp;lt;U, E&amp;gt;()`を返す。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;numeric&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+// 1..N数列を生成する関数
+std::vector&amp;lt;int&amp;gt; make_seq(int n)
+{
+  std::vector&amp;lt;int&amp;gt; seq(n, 0);
+  std::iota(seq.begin(), seq.end(), 1);
+  return seq;
+}
+
+int main()
+{
+  std::expected&amp;lt;int, std::string&amp;gt; v1 = 3;
+  assert((v1.transform(make_seq).value() == std::vector&amp;lt;int&amp;gt;{1,2,3}));
+
+  std::expected&amp;lt;int, std::string&amp;gt; e1 = std::unexpected{&amp;#34;NaN&amp;#34;};
+  assert(e1.transform(make_seq).error() == &amp;#34;NaN&amp;#34;);
+}
+```
+* transform[color ff0000]
+* value()[link value.md]
+* error()[link error.md]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`and_then()`](and_then.md)
+- [`or_else()`](or_else.md)
+- [`transform_error()`](transform_error.md)
+
+
+## 参照
+- [P2505R5 Monadic Functions for `std::expected`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2505r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transform_error -- expected/expected: and_then,or_else,transform,transform_error(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/transform_error.html"/>
      <id>7a5214d449873dbd48f51bb2a022775430b6aa89:reference/expected/expected/transform_error.md</id>
      <updated>2023-02-04T23:35:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/transform_error.md b/reference/expected/expected/transform_error.md
new file mode 100644
index 000000000..160c97d4b
--- /dev/null
+++ b/reference/expected/expected/transform_error.md
@@ -0,0 +1,94 @@
+# transform_error
+* expected[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* expected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class F&amp;gt; constexpr auto transform_error(F&amp;amp;&amp;amp; f) &amp;amp;;        // (1)
+template&amp;lt;class F&amp;gt; constexpr auto transform_error(F&amp;amp;&amp;amp; f) const &amp;amp;;  // (2)
+template&amp;lt;class F&amp;gt; constexpr auto transform_error(F&amp;amp;&amp;amp; f) &amp;amp;&amp;amp;;       // (3)
+template&amp;lt;class F&amp;gt; constexpr auto transform_error(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
+```
+
+## 概要
+エラー値を保持していれば、エラー値に対して`f`を適用した結果を`expected`のエラー値として格納して返す。
+正常値を保持していれば、そのまま返す。
+
+
+## テンプレートパラメータ制約
+- (1), (2) : [`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;T&amp;gt; == true`
+- (3), (4) : [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;T&amp;gt; == true`
+
+
+## 適格要件
+- (1), (2) : 型`G`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`error()`](error.md)`)&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `G`が`expected`の有効な値型である
+    - 宣言`G g(`[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`error()`](error.md)`));`が妥当である
+- (3), (4) : 型`G`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `G`が`expected`の有効な値型である
+    - 宣言`G g(`[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`)));`が妥当である
+
+
+## 効果
+- (1), (2) : 次の効果をもつ
+    - 正常値を保持していたら、`expected&amp;lt;T, G&amp;gt;(`[`in_place`](/reference/utility/in_place_t.md)`,` [`value()`](value.md)`)`を返す。
+    - エラー値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`error()`](error.md)`)`で非直接リスト初期化した`expected&amp;lt;T, G&amp;gt;`オブジェクトを返す。
+- (3), (4) : 次の効果をもつ
+    - エラー値を保持していたら、`expected&amp;lt;U, E&amp;gt;(`[`unexpect`](../unexpect_t.md)`,` [`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))`を返す。
+    - 正常値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))`で非直接リスト初期化した`expected&amp;lt;T, G&amp;gt;`オブジェクトを返す。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+// 文字列を逆順に並べ替える関数
+std::string revstr(std::string str)
+{
+  std::reverse(str.begin(), str.end());
+  return str;
+}
+
+int main()
+{
+  std::expected&amp;lt;int, std::string&amp;gt; v1 = 42;
+  assert(v1.transform_error(revstr).value() == 42);
+
+  std::expected&amp;lt;int, std::string&amp;gt; e1 = std::unexpected{&amp;#34;Oops&amp;#34;};
+  assert(e1.transform_error(revstr).error() == &amp;#34;spoO&amp;#34;);
+}
+```
+* transform_error[color ff0000]
+* value()[link value.md]
+* error()[link error.md]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`and_then()`](and_then.md)
+- [`or_else()`](or_else.md)
+- [`transform()`](transform.md)
+
+
+## 参照
+- [P2505R5 Monadic Functions for `std::expected`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2505r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
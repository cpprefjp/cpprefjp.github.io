<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-06-10T08:02:33.870702</updated>
  <id>fc39db66-53f2-4527-a11c-8ee221250cbe</id>

  
    <entry>
      <title>weekday_indexed -- weekday_indexed : operator==を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_indexed.html"/>
      <id>f7ea4112a2582ff7de8831b50d0c3aaf9061dc47:reference/chrono/weekday_indexed.md</id>
      <updated>2020-06-10T16:58:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_indexed.md b/reference/chrono/weekday_indexed.md
index 2f17d01d0..f6edad3d9 100644
--- a/reference/chrono/weekday_indexed.md
+++ b/reference/chrono/weekday_indexed.md
@@ -43,7 +43,7 @@ Nの妥当な範囲は`[1, 5]`である。0ベースではないことに注意
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`operator==`](weekday_indexed/op_equal.md.nolink) | 等値比較を行う | C++20 |
+| [`operator==`](weekday_indexed/op_equal.md) | 等値比較を行う | C++20 |
 | `bool operator!=(const weekday_indexed&amp;amp;, const weekday_indexed&amp;amp;) noexcept;` | 非等値比較を行う (`==`により使用可能) | C++20 |
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- weekday_indexed : operator==を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_indexed/op_equal.html"/>
      <id>f7ea4112a2582ff7de8831b50d0c3aaf9061dc47:reference/chrono/weekday_indexed/op_equal.md</id>
      <updated>2020-06-10T16:58:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_indexed/op_equal.md b/reference/chrono/weekday_indexed/op_equal.md
new file mode 100644
index 000000000..168cc8c15
--- /dev/null
+++ b/reference/chrono/weekday_indexed/op_equal.md
@@ -0,0 +1,63 @@
+# operator==
+* chrono[meta header]
+* std::chrono[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  constexpr bool operator==(const weekday_indexed&amp;amp; x, const weekday_indexed&amp;amp; y) noexcept; // (1) C++20
+}
+```
+
+## 概要
+`weekday_indexed`同士の等値比較を行う。
+
+
+## 戻り値
+- (1) :
+
+```cpp
+return x.weekday() == y.weekday() &amp;amp;&amp;amp; x.index() == y.index();
+```
+* weekday()[link weekday.md]
+* index()[link index.md]
+
+
+## 例外
+投げない
+
+
+## 備考
+- この演算子により、`operator!=`が使用可能になる
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  assert(chrono::Sunday[1] == chrono::Sunday[1]);
+  assert(chrono::Sunday[1] != chrono::Sunday[2]);
+  assert(chrono::Sunday[1] != chrono::Monday[1]);
+}
+```
+* chrono::Sunday[link /reference/chrono/weekday_constants.md]
+* chrono::Monday[link /reference/chrono/weekday_constants.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 8.0
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>weekday -- weekday_indexed::weekday() : コード修飾を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_indexed/weekday.html"/>
      <id>88234747049f4134d8dedf666001b044da463ee7:reference/chrono/weekday_indexed/weekday.md</id>
      <updated>2020-06-10T16:45:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_indexed/weekday.md b/reference/chrono/weekday_indexed/weekday.md
index 67fff4182..6c27d639a 100644
--- a/reference/chrono/weekday_indexed/weekday.md
+++ b/reference/chrono/weekday_indexed/weekday.md
@@ -34,6 +34,7 @@ int main()
 }
 ```
 * weekday()[color ff0000]
+* chrono::weekday[link /reference/chrono/weekday.md]
 * chrono::Sunday[link /reference/chrono/weekday_constants.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>weekday_indexed -- weekday_indexed : コンストラクタを追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_indexed.html"/>
      <id>b2c37b96ef1501f796457ae3df13ebb4c3c36805:reference/chrono/weekday_indexed.md</id>
      <updated>2020-06-10T16:33:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_indexed.md b/reference/chrono/weekday_indexed.md
index efd8f8c26..2f17d01d0 100644
--- a/reference/chrono/weekday_indexed.md
+++ b/reference/chrono/weekday_indexed.md
@@ -13,7 +13,7 @@ namespace std::chrono {
 ## 概要
 `weekday_indexed`は、月内でのN回目の指定した曜日を表すクラスである。
 
-Nの範囲は`[1, 5]`である。0ベースではないことに注意。
+Nの妥当な範囲は`[1, 5]`である。0ベースではないことに注意。
 
 このクラスは等値比較ができ、[EqualityComparable](/reference/concepts/equality_comparable.md)の要件を満たす。しかし大小比較はできず、LessThanComparable要件は満たさない。
 
@@ -25,7 +25,7 @@ Nの範囲は`[1, 5]`である。0ベースではないことに注意。
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`(constructor)`](weekday_indexed/op_constructor.md.nolink) | コンストラクタ | C++20 |
+| [`(constructor)`](weekday_indexed/op_constructor.md) | コンストラクタ | C++20 |
 | `weekday_indexed&amp;amp; operator=(const weekday_indexed&amp;amp;) = default;`&amp;lt;br/&amp;gt; `weekday_indexed&amp;amp; operator=(weekday_indexed&amp;amp;&amp;amp;) = default;` | 代入演算子 | C++20 |
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- weekday_indexed : コンストラクタを追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_indexed/op_constructor.html"/>
      <id>b2c37b96ef1501f796457ae3df13ebb4c3c36805:reference/chrono/weekday_indexed/op_constructor.md</id>
      <updated>2020-06-10T16:33:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_indexed/op_constructor.md b/reference/chrono/weekday_indexed/op_constructor.md
new file mode 100644
index 000000000..95472dda1
--- /dev/null
+++ b/reference/chrono/weekday_indexed/op_constructor.md
@@ -0,0 +1,65 @@
+# コンストラクタ
+* chrono[meta header]
+* std::chrono[meta namespace]
+* weekday_indexed[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+weekday_indexed() = default;                            // (1) C++20
+constexpr weekday_indexed(const chrono::weekday&amp;amp; wd,
+                          unsigned int index) noexcept; // (2) C++20
+
+weekday_indexed(const weekday_indexed&amp;amp;) = default;      // (3) C++20
+weekday_indexed(weekday_indexed&amp;amp;&amp;amp;) = default;           // (4) C++20
+```
+* weekday[link /reference/chrono/weekday.md]
+
+## 概要
+- (1) : デフォルトコンストラクタ
+- (2) : 曜日とインデックスを指定して`weekday_indexed`オブジェクトを構築する
+- (3) : コピーコンストラクタ
+- (4) : ムーブコンストラクタ
+
+
+## 効果
+- (1) :
+    - デフォルト初期化では曜日とインデックスは符号なし整数の未初期化値となり、値初期化では値0となる
+- (2) :
+    - `wd`と`index`をメンバ変数として保持する
+    - `!wd.`[`ok()`](/reference/chrono/weekday/ok.md)もしくは`index`の値範囲が`[0, 7]`に含まれなければ、それぞれの保持される値は未規定
+
+
+## 例外
+投げない
+
+
+### 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main() {
+  chrono::weekday_indexed wi{chrono::Sunday, 1};
+  assert(wi.weekday() == chrono::Sunday);
+  assert(wi.index() == 1);
+}
+```
+* chrono::Sunday[link /reference/chrono/weekday_constants.md]
+* wi.weekday()[link weekday.md]
+* wi.index()[link index.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 8.0
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>weekday -- weekday_indexed::index : unsignedはunsigned intだった</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_indexed/index.html"/>
      <id>85226fde2ee49c2acca771ce9f7a69b0522932de:reference/chrono/weekday_indexed/index.md</id>
      <updated>2020-06-10T16:26:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_indexed/index.md b/reference/chrono/weekday_indexed/index.md
index 60cb674cc..576708e1b 100644
--- a/reference/chrono/weekday_indexed/index.md
+++ b/reference/chrono/weekday_indexed/index.md
@@ -6,7 +6,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-constexpr unsigned char index() const noexcept; // (1) C++20
+constexpr unsigned int index() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -27,7 +27,7 @@ namespace chrono = std::chrono;
 int main()
 {
   chrono::weekday_indexed wi = chrono::Sunday[1];
-  unsigned char index = wi.index();
+  unsigned int index = wi.index();
 
   assert(index == 1);
 }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>weekday_indexed -- weekday_indexed : メンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_indexed.html"/>
      <id>7e1d5c48eb0cdc38ab23180b56d45ce7d92dd40f:reference/chrono/weekday_indexed.md</id>
      <updated>2020-06-10T16:19:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_indexed.md b/reference/chrono/weekday_indexed.md
index 4081505cf..efd8f8c26 100644
--- a/reference/chrono/weekday_indexed.md
+++ b/reference/chrono/weekday_indexed.md
@@ -33,9 +33,9 @@ Nの範囲は`[1, 5]`である。0ベースではないことに注意。
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`weekday`](weekday_indexed/weekday.md.nolink) | 曜日を取得する | C++20 |
-| [`index`](weekday_indexed/index.md.nolink) | インデックスを取得する | C++20 |
-| [`ok`](weekday_indexed/ok.md.nolink) | 値が範囲に収まっているか判定する | C++20 |
+| [`weekday`](weekday_indexed/weekday.md) | 曜日を取得する | C++20 |
+| [`index`](weekday_indexed/index.md) | インデックスを取得する | C++20 |
+| [`ok`](weekday_indexed/ok.md) | 値が範囲に収まっているか判定する | C++20 |
 
 
 ## 非メンバ関数
@@ -89,8 +89,8 @@ int main() {
 * chrono::weekday_indexed[color ff0000]
 * chrono::Sunday[link weekday_constants.md]
 * 2020y[link year/op_y.md]
-* wi1.weekday()[link weekday_indexed/weekday.md.nolink]
-* wi1.index()[link weekday_indexed/index.md.nolink]
+* wi1.weekday()[link weekday_indexed/weekday.md]
+* wi1.index()[link weekday_indexed/index.md]
 * chrono::year_month_weekday[link year_month_weekday.md.nolink]
 * chrono::sys_days[link sys_time.md]
 * chrono::year_month_day[link year_month_day.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>weekday -- weekday_indexed : メンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_indexed/index.html"/>
      <id>7e1d5c48eb0cdc38ab23180b56d45ce7d92dd40f:reference/chrono/weekday_indexed/index.md</id>
      <updated>2020-06-10T16:19:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_indexed/index.md b/reference/chrono/weekday_indexed/index.md
new file mode 100644
index 000000000..60cb674cc
--- /dev/null
+++ b/reference/chrono/weekday_indexed/index.md
@@ -0,0 +1,50 @@
+# weekday
+* chrono[meta header]
+* std::chrono[meta namespace]
+* weekday_indexed[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr unsigned char index() const noexcept; // (1) C++20
+```
+
+## 概要
+インデックスを取得する。
+
+
+## 戻り値
+コンストラクタで設定されて保持している曜日のインデックスを返す。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  chrono::weekday_indexed wi = chrono::Sunday[1];
+  unsigned char index = wi.index();
+
+  assert(index == 1);
+}
+```
+* index()[color ff0000]
+* chrono::Sunday[link /reference/chrono/weekday_constants.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 8.0
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ok -- weekday_indexed : メンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_indexed/ok.html"/>
      <id>7e1d5c48eb0cdc38ab23180b56d45ce7d92dd40f:reference/chrono/weekday_indexed/ok.md</id>
      <updated>2020-06-10T16:19:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_indexed/ok.md b/reference/chrono/weekday_indexed/ok.md
new file mode 100644
index 000000000..aba5dfc0e
--- /dev/null
+++ b/reference/chrono/weekday_indexed/ok.md
@@ -0,0 +1,59 @@
+# ok
+* chrono[meta header]
+* std::chrono[meta namespace]
+* weekday_indexed[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr bool ok() const noexcept; // (1) C++20
+```
+
+## 概要
+`weekday_index`オブジェクトが保持する曜日とインデックスが妥当な範囲内にあるかを判定する。
+
+
+## 戻り値
+コンストラクタで設定されて保持している曜日を表す値`wd_`、およびインデックス値`index_`があるとして、以下を返す：
+
+```cpp
+return wd_.ok() &amp;amp;&amp;amp; 1 &amp;lt;= index_ &amp;amp;&amp;amp; index_ &amp;lt;= 5;
+```
+* wd_.ok()[link /reference/chrono/weekday/ok.md]
+
+## 備考
+- この関数は、値の妥当性を検証するのではなく、カレンダー範囲の値をもっているかの判定をする
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  assert(chrono::Sunday[1].ok());
+  assert(!chrono::Sunday[0].ok());
+  assert(!chrono::Sunday[6].ok());
+  assert(!(chrono::weekday_indexed{chrono::weekday{8}, 1}).ok());
+}
+```
+* ok()[color ff0000]
+* chrono::Sunday[link /reference/chrono/weekday_constants.md]
+* chrono::weekday[link /reference/chrono/weekday.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 8.0
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>weekday -- weekday_indexed : メンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_indexed/weekday.html"/>
      <id>7e1d5c48eb0cdc38ab23180b56d45ce7d92dd40f:reference/chrono/weekday_indexed/weekday.md</id>
      <updated>2020-06-10T16:19:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_indexed/weekday.md b/reference/chrono/weekday_indexed/weekday.md
new file mode 100644
index 000000000..67fff4182
--- /dev/null
+++ b/reference/chrono/weekday_indexed/weekday.md
@@ -0,0 +1,51 @@
+# weekday
+* chrono[meta header]
+* std::chrono[meta namespace]
+* weekday_indexed[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr chrono::weekday weekday() const noexcept; // (1) C++20
+```
+* chrono::weekday[link /reference/chrono/weekday.md]
+
+## 概要
+曜日を取得する。
+
+
+## 戻り値
+コンストラクタで設定されて保持している[`weekday`](/reference/chrono/weekday.md)型オブジェクトを返す。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  chrono::weekday_indexed wi = chrono::Sunday[1];
+  chrono::weekday w = wi.weekday();
+
+  assert(w == chrono::Sunday);
+}
+```
+* weekday()[color ff0000]
+* chrono::Sunday[link /reference/chrono/weekday_constants.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 8.0
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
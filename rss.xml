<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-05-01T08:04:22.384114</updated>
  <id>cec1e334-f98a-478d-863f-d5b3bd99ae37</id>

  
    <entry>
      <title>execution -- execution: sync_wait(_with_variant) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>2a210a5f43b9423bd5ed8e8e7f415953d99fd29d:reference/execution/execution.md</id>
      <updated>2025-05-01T16:59:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index 5501c1ee1..18549d320 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -133,8 +133,8 @@ namespace std::execution {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`this_thread::sync_wait`](this_thread/sync_wait.md.nolink) | 現在のスレッド上でSender完了を待機 (customization point object) | C++26 |
-| [`this_thread::sync_wait_with_variant`](this_thread/sync_wait_with_variant.md.nolink) | 現在のスレッド上でSender完了を待機 (customization point object) | C++26 |
+| [`this_thread::sync_wait`](this_thread/sync_wait.md) | 現在のスレッド上でSender完了を待機 (customization point object) | C++26 |
+| [`this_thread::sync_wait_with_variant`](this_thread/sync_wait_with_variant.md) | 現在のスレッド上でSender完了を待機 (customization point object) | C++26 |
 
 Senderコンシューマは名前空間 `std::this_thread` で定義される。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>completion-domain -- execution: sync_wait(_with_variant) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/completion-domain.html"/>
      <id>2a210a5f43b9423bd5ed8e8e7f415953d99fd29d:reference/execution/execution/completion-domain.md</id>
      <updated>2025-05-01T16:59:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/completion-domain.md b/reference/execution/execution/completion-domain.md
index 3d4aade36..2d83422ca 100644
--- a/reference/execution/execution/completion-domain.md
+++ b/reference/execution/execution/completion-domain.md
@@ -32,7 +32,7 @@ constexpr auto completion-domain(const Sndr&amp;amp; sndr) noexcept;
 
 
 ## 関連項目
-- [`get-domain-early`](get-domain-early.md.nolink)
+- [`get-domain-early`](get-domain-early.md)
 - [`get-domain-late`](get-domain-late.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get-domain-early -- execution: sync_wait(_with_variant) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/get-domain-early.html"/>
      <id>2a210a5f43b9423bd5ed8e8e7f415953d99fd29d:reference/execution/execution/get-domain-early.md</id>
      <updated>2025-05-01T16:59:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/get-domain-early.md b/reference/execution/execution/get-domain-early.md
new file mode 100644
index 000000000..cb2841199
--- /dev/null
+++ b/reference/execution/execution/get-domain-early.md
@@ -0,0 +1,46 @@
+# get-domain-early
+* execution[meta header]
+* function template[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class Sndr&amp;gt;
+constexpr auto get-domain-early(const Sndr&amp;amp; sndr) noexcept;
+```
+
+## 概要
+[Sender](sender.md)アルゴリズム構築時のカスタマイゼーションポイントとして、[実行ドメイン](default_domain.md)を取得する説明専用の関数テンプレート。
+
+下記の優先順で実行ドメインを検索し、最初に妥当となる型を採用する。
+
+- Senderの[属性](../queryable.md)の実行ドメイン
+- Senderの[完了Scheduler](get_completion_scheduler.md)の実行ドメイン
+- [デフォルト実行ドメイン](default_domain.md)
+
+
+## 効果
+説明用の型`Domain`を下記リストのうち最初に妥当となる式の型と定義したとき、`return Doamin();`と等価。
+
+- [`get_domain`](get_domain.md)`(`[`get_env`](get_env.md)`(sndr))`
+- [`completion-domain`](completion-domain.md)`(sndr)`
+- [`default_domain()`](default_domain.md)
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 関連項目
+- [`this_thread::sync_wait`](../this_thread/sync_wait.md)
+- [`this_thread::sync_wait_with_variant`](../this_thread/sync_wait_with_variant.md)
+
+
+## 参照
+- [P2999R3 Sender Algorithm Customization](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2999r3.html)
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get-domain-late -- execution: sync_wait(_with_variant) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/get-domain-late.html"/>
      <id>2a210a5f43b9423bd5ed8e8e7f415953d99fd29d:reference/execution/execution/get-domain-late.md</id>
      <updated>2025-05-01T16:59:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/get-domain-late.md b/reference/execution/execution/get-domain-late.md
index 19daa05a9..359031a6b 100644
--- a/reference/execution/execution/get-domain-late.md
+++ b/reference/execution/execution/get-domain-late.md
@@ -15,11 +15,11 @@ constexpr auto get-domain-late(const Sndr&amp;amp; sndr, const Env&amp;amp; env) noexcept;
 下記の優先順で実行ドメインを検索し、最初に妥当となる型を採用する。
 （Senderアルゴリズム[`continue_on`](continue_on.md.nolink)のみ引数に指定した[Scheduler](scheduler.md)から取得。）
 
-- Senderの[属性](../queryable.md)
-- Senderの[完了Scheduler](get_completion_scheduler.md)
-- Receiverの[環境](../queryable.md)
-- Receiver環境の[Scheduler](scheduler.md)
-- [`default_domain`](default_domain.md)
+- Senderの[属性](../queryable.md)の実行ドメイン
+- Senderの[完了Scheduler](get_completion_scheduler.md)の実行ドメイン
+- Receiverの[環境](../queryable.md)の実行ドメイン
+- Receiver環境の[Scheduler](scheduler.md)の実行ドメイン
+- [デフォルト実行ドメイン](default_domain.md)
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>this_thread -- execution: sync_wait(_with_variant) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/this_thread.html"/>
      <id>2a210a5f43b9423bd5ed8e8e7f415953d99fd29d:reference/execution/this_thread.md</id>
      <updated>2025-05-01T16:59:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/this_thread.md b/reference/execution/this_thread.md
new file mode 100644
index 000000000..dfa4cee96
--- /dev/null
+++ b/reference/execution/this_thread.md
@@ -0,0 +1,23 @@
+# this_thread
+* execution[meta header]
+* std[meta namespace]
+* namespace[meta id-type]
+* cpp26[meta cpp]
+
+ヘッダ [`&amp;lt;execution&amp;gt;`](../execution.md) の名前空間 `std::this_thread` では、実行制御ライブラリの一部エンティティを定義する。
+
+```cpp
+namespace std::this_thread {
+  …
+}
+```
+
+実行制御ライブラリ全体は名前空間 [`std::execution`](../execution/execution.md) ページを参照のこと。
+
+
+## バージョン
+### 言語
+- C++26
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sync-wait-env -- execution: sync_wait(_with_variant) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/this_thread/sync-wait-env.html"/>
      <id>2a210a5f43b9423bd5ed8e8e7f415953d99fd29d:reference/execution/this_thread/sync-wait-env.md</id>
      <updated>2025-05-01T16:59:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/this_thread/sync-wait-env.md b/reference/execution/this_thread/sync-wait-env.md
new file mode 100644
index 000000000..2d6ff1277
--- /dev/null
+++ b/reference/execution/this_thread/sync-wait-env.md
@@ -0,0 +1,45 @@
+# sync-wait-env
+* execution[meta header]
+* class template[meta id-type]
+* std::this_thread[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::this_thread {
+  struct sync-wait-env {
+    execution::run_loop* loop;  // exposition only
+
+    auto query(execution::get_scheduler_t) const noexcept {
+      return loop-&amp;gt;get_scheduler();
+    }
+
+    auto query(execution::get_delegation_scheduler_t) const noexcept {
+      return loop-&amp;gt;get_scheduler();
+    }
+  };
+}
+```
+* execution::run_loop[link ../execution/run_loop.md]
+* execution::get_scheduler_t[link ../execution/get_scheduler.md]
+* execution::get_delegation_scheduler_t[link ../execution/get_delegation_scheduler.md]
+* get_scheduler()[link ../execution/run_loop/get_scheduler.md]
+
+## 概要
+`sync-wait-env`は、実行制御ライブラリの仕様定義で用いられる説明専用のクラステンプレートである。
+
+Senderコンシューマ[`sync_wait`](sync_wait.md)、[`sync_wait_with_variant`](sync_wait_with_variant.md)動作において[Receiver](../execution/receiver.md)の[環境](../queryable.md)として利用される。
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 関連項目
+- [`this_thread::sync_wait`](sync_wait.md)
+- [`this_thread::sync_wait_with_variant`](sync_wait_with_variant.md)
+- [`execution::run_loop`](../execution/run_loop.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sync-wait-receiver -- execution: sync_wait(_with_variant) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/this_thread/sync-wait-receiver.html"/>
      <id>2a210a5f43b9423bd5ed8e8e7f415953d99fd29d:reference/execution/this_thread/sync-wait-receiver.md</id>
      <updated>2025-05-01T16:59:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/this_thread/sync-wait-receiver.md b/reference/execution/this_thread/sync-wait-receiver.md
new file mode 100644
index 000000000..f3823750a
--- /dev/null
+++ b/reference/execution/this_thread/sync-wait-receiver.md
@@ -0,0 +1,105 @@
+# sync-wait-receiver
+* execution[meta header]
+* class template[meta id-type]
+* std::this_thread[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::this_thread {
+  template&amp;lt;class Sndr&amp;gt;
+  struct sync-wait-receiver {      // exposition only
+    using receiver_concept = execution::receiver_t;
+    sync-wait-state&amp;lt;Sndr&amp;gt;* state;  // exposition only
+
+    template&amp;lt;class... Args&amp;gt;
+    void set_value(Args&amp;amp;&amp;amp;... args) &amp;amp;&amp;amp; noexcept;
+
+    template&amp;lt;class Error&amp;gt;
+    void set_error(Error&amp;amp;&amp;amp; err) &amp;amp;&amp;amp; noexcept;
+
+    void set_stopped() &amp;amp;&amp;amp; noexcept;
+
+    sync-wait-env get_env() const noexcept { return {&amp;amp;state-&amp;gt;loop}; }
+  };
+
+  template&amp;lt;class Sndr&amp;gt;
+  struct sync-wait-state {               // exposition only
+    execution::run_loop loop;            // exposition only
+    exception_ptr error;                 // exposition only
+    sync-wait-result-type&amp;lt;Sndr&amp;gt; result;  // exposition only
+  };
+}
+```
+* execution::receiver_t[link ../execution/receiver.md]
+* execution::run_loop[link ../execution/run_loop.md]
+* exception_ptr[link /reference/exception/exception_ptr.md]
+* sync-wait-result-type[link sync_wait.md]
+
+## 概要
+`sync-wait-receiver`および`sync-wait-state`は、実行制御ライブラリの仕様定義で用いられる説明専用のクラステンプレートである。
+
+Senderコンシューマ[`sync_wait`](sync_wait.md)動作において[Sender](../execution/sender.md)と[接続(connect)](../execution/connect.md)する[Receiver](../execution/receiver.md)、同Receiverの内部状態として利用される。
+
+
+### メンバ関数 `set_value`
+```cpp
+template&amp;lt;class... Args&amp;gt;
+void set_value(Args&amp;amp;&amp;amp;... args) &amp;amp;&amp;amp; noexcept;
+```
+
+効果 : 下記と等価
+
+```cpp
+try {
+  state-&amp;gt;result.emplace(std::forward&amp;lt;Args&amp;gt;(args)...);
+} catch (...) {
+  state-&amp;gt;error = current_exception();
+}
+state-&amp;gt;loop.finish();
+```
+* emplace[link /reference/optional/optional/emplace.md]
+* current_exception()[link /reference/exception/current_exception.md]
+* finish()[link ../execution/run_loop/finish.md]
+
+
+### メンバ関数 `set_error`
+```cpp
+template&amp;lt;class Error&amp;gt;
+void set_error(Error&amp;amp;&amp;amp; err) &amp;amp;&amp;amp; noexcept
+```
+
+説明用の式`err`に対して`decltype((err))`を型`Err`としたとき、式`AS-EXCEPT-PTR(err)`を下記の通り定義する。
+
+- [`decay_t`](/reference/type_traits/decay.md)`&amp;lt;Err&amp;gt;`が[`exception_ptr`](/reference/exception/exception_ptr.md)型と等しければ、`err`となる。このとき、事前条件として`!err == false`を満たすこと。
+- そうではなく、[`decay_t`](/reference/type_traits/decay.md)`&amp;lt;Err&amp;gt;`が[`error_code`](/reference/system_error/error_code.md)型と等しければ、[`make_exception_ptr`](/reference/exception/make_exception_ptr.md)`(`[`system_error`](/reference/system_error/system_error.md)`(err))`となる。
+- そうでなければ、[`make_exception_ptr`](/reference/exception/make_exception_ptr.md)`(err)`となる。
+
+効果 : 下記と等価
+
+```cpp
+state-&amp;gt;error = AS-EXCEPT-PTR(std::forward&amp;lt;Error&amp;gt;(err));
+state-&amp;gt;loop.finish();
+```
+* finish()[link ../execution/run_loop/finish.md]
+
+
+### メンバ関数 `set_stopped`
+```cpp
+void set_stopped() &amp;amp;&amp;amp; noexcept;
+```
+
+効果 : `state-&amp;gt;loop.`[`finish()`](../execution/run_loop/finish.md)と等価。
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 関連項目
+- [`this_thread::sync_wait`](sync_wait.md)
+- [`execution::run_loop`](../execution/run_loop.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sync_wait -- execution: sync_wait(_with_variant) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/this_thread/sync_wait.html"/>
      <id>2a210a5f43b9423bd5ed8e8e7f415953d99fd29d:reference/execution/this_thread/sync_wait.md</id>
      <updated>2025-05-01T16:59:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/this_thread/sync_wait.md b/reference/execution/this_thread/sync_wait.md
new file mode 100644
index 000000000..b54097da9
--- /dev/null
+++ b/reference/execution/this_thread/sync_wait.md
@@ -0,0 +1,144 @@
+# sync_wait
+* execution[meta header]
+* cpo[meta id-type]
+* std::this_thread[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::this_thread {
+  struct sync_wait_t { unspecified };
+  inline constexpr sync_wait_t sync_wait{};
+}
+```
+* unspecified[italic]
+
+## 概要
+`sync_wait`は、[Sender](../execution/sender.md)が完了するまで現在のスレッドをブロックし、非同期操作の結果を取得するSenderコンシューマである。
+
+`sync_wait`は入力Senderが[値完了シグネチャ](../execution/set_value.md)をただ1種類だけ持つことを要求する。
+
+
+## 効果
+説明用の`sndr`を`decltype((sndr))`が`Sndr`型となる式とする。
+
+[`sender_in`](../execution/sender_in.md)`&amp;lt;Sndr,` [`sync-wait-env`](sync-wait-env.md)`&amp;gt; == false`のとき、呼び出し式`this_thread::sync_wait(sndr)`は不適格となる。
+
+そうでなければ、呼び出し式`this_thread::sync_wait(sndr)`は`sndr`が1回だけ評価されることを除いて、下記と等価。
+
+```cpp
+apply_sender(get-domain-early(sndr), sync_wait, sndr)
+```
+* apply_sender[link ../execution/apply_sender.md]
+* get-domain-early[link ../execution/get-domain-early.md]
+
+- 型`sync-wait-result-type&amp;lt;Sndr&amp;gt;`が適格であること。
+- 上記の`apply_sender`式を`e`としたとき、[`same_as`](/reference/concepts/same_as.md)`&amp;lt;decltype(e), sync-wait-result-type&amp;lt;Sndr&amp;gt;&amp;gt; == true`であること。
+
+
+### 戻り値型
+`sync_wait`の戻り値型となる、説明専用のエイリアステンプレート`sync-wait-result-type`を下記の通り定義する。
+
+```cpp
+namespace std::this_thread {
+  template&amp;lt;execution::sender_in&amp;lt;sync-wait-env&amp;gt; Sndr&amp;gt;
+  using sync-wait-result-type =
+    optional&amp;lt;execution::value_types_of_t&amp;lt;Sndr, sync-wait-env,
+             decayed-tuple, type_identity_t&amp;gt;&amp;gt;;
+}
+```
+* execution::sender_in[link ../execution/sender_in.md]
+* sync-wait-env[link sync-wait-env.md]
+* execution::value_types_of_t[link ../execution/value_types_of_t.md]
+* optional[link /reference/optional/optional.md]
+* decayed-tuple[link decayed-tuple.md.nolink]
+* type_identity_t[link /reference/type_traits/type_identity.md]
+
+
+### Senderタグ `sync_wait`
+説明用の`sndr`を`decltype((sndr))`が`Sndr`型となる式とする。
+
+[`sender_to`](../execution/sender_to.md)`&amp;lt;Sndr,` [`sync-wait-receiver`](sync-wait-receiver.md)`&amp;lt;Sndr&amp;gt;&amp;gt; == false`のとき、式`sync_wait.apply_sender(sndr)`は不適格となる。
+
+そうでなければ、式`sync_wait.apply_sender(sndr)`は下記と等価。
+
+```cpp
+sync-wait-state&amp;lt;Sndr&amp;gt; state;
+auto op = connect(sndr, sync-wait-receiver&amp;lt;Sndr&amp;gt;{&amp;amp;state});
+start(op);
+
+state.loop.run();
+if (state.error) {
+  rethrow_exception(std::move(state.error));
+}
+return std::move(state.result);
+```
+* sync-wait-state[link sync-wait-receiver.md]
+* connect[link ../execution/connect.md]
+* sync-wait-receiver[link sync-wait-receiver.md]
+* start[link ../execution/start.md]
+* loop.run()[link ../execution/run_loop/run.md]
+* rethrow_exception[link /reference/exception/rethrow_exception.md]
+* std::move[link /reference/utility/move.md]
+
+
+## カスタマイゼーションポイント
+[Sender](../execution/sender.md)`sndr`に[関連付けられた実行ドメイン](../execution/get-domain-early.md)`dom`に対して、
+[`execution::apply_sender`](../execution/apply_sender.md)経由で`dom.apply_sender(sync_wait, sndr)`が呼ばれる。
+
+[デフォルト実行ドメイン](../execution/default_domain.md)では、`sync_wait.apply_sender(sndr)`が呼ばれる。
+
+下記を満たさない場合、呼び出し式`this_thread::sync_wait(sndr)`の動作は未定義となる。
+
+- 指定したSenderが完了するまで、前方進行保証委任(forward progress guarantee delegation)による現在のスレッドをブロックすること。
+- 指定したSenderの非同期操作の結果が返る場合
+    - 値完了の場合、結果データは[`optional`](/reference/optional/optional.md)オブジェクト内の[`tuple`](/reference/tuple/tuple.md)で返されること。
+    - エラー完了の場合、例外を送出すること。
+    - 停止完了の場合、空の[`optional`](/reference/optional/optional.md)オブジェクトが返されること。
+
+
+## 例
+```cpp
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  // 値(100, &amp;#39;X&amp;#39;)を送信するSender
+  ex::sender auto sndr = ex::just(100, &amp;#39;X&amp;#39;);
+  // メインスレッド上で完了待機
+  auto result = std::this_thread::sync_wait(sndr);
+  // 戻り値型optional&amp;lt;tuple&amp;lt;int,char&amp;gt;&amp;gt;から値を取り出す
+  auto [n, c] = result.value();
+  std::println(&amp;#34;result=({}, {})&amp;#34;, n, c);
+}
+```
+* std::this_thread::sync_wait[color ff0000]
+* ex::sender[link ../execution/sender.md]
+* ex::just[link ../execution/just.md.nolink]
+* value()[link /reference/optional/optional/value.md]
+
+### 出力
+```
+result=(100, X)
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::sender`](../execution/sender.md)
+- [`this_thread::sync_wait_with_variant`](sync_wait_with_variant.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sync_wait_with_variant -- execution: sync_wait(_with_variant) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/this_thread/sync_wait_with_variant.html"/>
      <id>2a210a5f43b9423bd5ed8e8e7f415953d99fd29d:reference/execution/this_thread/sync_wait_with_variant.md</id>
      <updated>2025-05-01T16:59:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/this_thread/sync_wait_with_variant.md b/reference/execution/this_thread/sync_wait_with_variant.md
new file mode 100644
index 000000000..8dc96b1d2
--- /dev/null
+++ b/reference/execution/this_thread/sync_wait_with_variant.md
@@ -0,0 +1,135 @@
+# sync_wait_with_variant
+* execution[meta header]
+* cpo[meta id-type]
+* std::this_thread[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::this_thread {
+  struct sync_wait_with_variant_t { unspecified };
+  inline constexpr sync_wait_with_variant_t sync_wait_with_variant{};
+}
+```
+* unspecified[italic]
+
+## 概要
+`sync_wait_with_variant`は、[Sender](../execution/sender.md)が完了するまで現在のスレッドをブロックし、非同期操作の結果を取得するSenderコンシューマである。
+
+`sync_wait_with_variant`は入力Senderが複数の[値完了シグネチャ](../execution/set_value.md)を持つケースに対応する。
+
+
+## 効果
+説明用の`sndr`を`decltype(`[`into_variant`](into_variant.md.nolink)`(sndr))`が`Sndr`型となる式とする。
+
+[`sender_in`](../execution/sender_in.md)`&amp;lt;Sndr,` [`sync-wait-env`](sync-wait-env.md)`&amp;gt; == false`のとき、呼び出し式`this_thread::sync_wait_with_variant(sndr)`は不適格となる。
+
+そうでなければ、呼び出し式`this_thread::sync_wait_with_variant(sndr)`は`sndr`が1回だけ評価されることを除いて、下記と等価。
+
+```cpp
+apply_sender(get-domain-early(sndr), sync_wait_with_variant, sndr)
+```
+* apply_sender[link ../execution/apply_sender.md]
+* get-domain-early[link ../execution/get-domain-early.md]
+
+- 型`sync-wait-with-variant-result-type&amp;lt;Sndr&amp;gt;`が適格であること。
+- 上記の`apply_sender`式を`e`としたとき、[`same_as`](/reference/concepts/same_as.md)`&amp;lt;decltype(e), sync-wait-with-variant-result-type&amp;lt;Sndr&amp;gt;&amp;gt; == true`であること。
+
+
+### 戻り値型
+`sync_wait_with_variant`の戻り値型となる、説明専用のエイリアステンプレート`sync-wait-with-variant-result-type`を下記の通り定義する。
+
+```cpp
+namespace std::this_thread {
+  template&amp;lt;execution::sender_in&amp;lt;sync-wait-env&amp;gt; Sndr&amp;gt;
+  using sync-wait-with-variant-result-type =
+    optional&amp;lt;execution::value_types_of_t&amp;lt;Sndr, sync-wait-env&amp;gt;&amp;gt;;
+```
+* execution::sender_in[link ../execution/sender_in.md]
+* sync-wait-env[link sync-wait-env.md]
+* execution::value_types_of_t[link ../execution/value_types_of_t.md]
+* optional[link /reference/optional/optional.md]
+
+
+### Senderタグ `sync_wait_with_variant`
+説明用の`sndr`を`decltype(`[`into_variant`](into_variant.md.nolink)`(sndr))`が`Sndr`型となる式とする。
+
+`callable&amp;lt;`[`sync_wait_t`](sync_wait.md)`, Sndr&amp;gt; == false`のとき、式`sync_wait_with_variant.apply_sender(sndr)`は不適格となる。
+
+そうでなければ、式`sync_wait_with_variant.apply_sender(sndr)`は下記と等価。
+
+```cpp
+using result_type = sync-wait-with-variant-result-type&amp;lt;Sndr&amp;gt;;
+if (auto opt_value = sync_wait(into_variant(sndr))) {
+  return result_type(std::move(get&amp;lt;0&amp;gt;(*opt_value)));
+}
+return result_type(nullopt);
+```
+* sync_wait[link sync_wait.md]
+* into_variant[link into_variant.md.nolink]
+* std::move[link /reference/utility/move.md]
+* get&amp;lt;0&amp;gt;[link /reference/tuple/tuple/get.md]
+* nullopt[link /reference/optional/nullopt_t.md]
+
+
+## カスタマイゼーションポイント
+[Sender](../execution/sender.md)`sndr`に[関連付けられた実行ドメイン](../execution/get-domain-early.md)`dom`に対して、
+[`execution::apply_sender`](../execution/apply_sender.md)経由で`dom.apply_sender(sync_wait_with_variant, sndr)`が呼ばれる。
+
+[デフォルト実行ドメイン](../execution/default_domain.md)では、`sync_wait_with_variant.apply_sender(sndr)`が呼ばれる。
+
+下記を満たさない場合、呼び出し式`this_thread::sync_wait_with_variant(sndr)`の動作は未定義となる。
+
+- 指定したSenderが完了するまで、前方進行保証委任(forward progress guarantee delegation)による現在のスレッドをブロックすること。
+- 指定したSenderの非同期操作の結果が返る場合
+    - 値完了の場合、結果データは[`optional`](/reference/optional/optional.md)オブジェクト内の[`tuple`](/reference/tuple/tuple.md)の[`variant`](/reference/variant/variant.md)で返されること。
+    - エラー完了の場合、例外を送出すること。
+    - 停止完了の場合、空の[`optional`](/reference/optional/optional.md)オブジェクトが返されること。
+
+
+## 例
+```cpp
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  // 値(100, &amp;#39;X&amp;#39;)を送信するSender
+  ex::sender auto sndr = ex::just(100, &amp;#39;X&amp;#39;);
+  // メインスレッド上で完了待機
+  auto result = std::this_thread::sync_wait_with_variant(sndr);
+  // 戻り値型optional&amp;lt;variant&amp;lt;tuple&amp;lt;int,char&amp;gt;&amp;gt;&amp;gt;からtupleを取り出す
+  auto tup = get&amp;lt;0&amp;gt;(result.value());
+  std::println(&amp;#34;result={}&amp;#34;, tup);
+}
+```
+* std::this_thread::sync_wait_with_variant[color ff0000]
+* ex::sender[link ../execution/sender.md]
+* ex::just[link ../execution/just.md.nolink]
+* get&amp;lt;0&amp;gt;[link /reference/variant/variant/get.md]
+* value()[link /reference/optional/optional/value.md]
+
+### 出力
+```
+result=(100, &amp;#39;X&amp;#39;)
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::sender`](../execution/sender.md)
+- [`this_thread::sync_wait`](sync_wait.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>run_loop -- execution/run_loop: 微調整 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop.html"/>
      <id>e6b7e2cfbe40cd345f07d28f060da229a653766d:reference/execution/execution/run_loop.md</id>
      <updated>2025-04-30T18:09:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop.md b/reference/execution/execution/run_loop.md
index 1d469bf4d..e87534f35 100644
--- a/reference/execution/execution/run_loop.md
+++ b/reference/execution/execution/run_loop.md
@@ -14,7 +14,7 @@ namespace std::execition {
 `run_loop`は、実行制御ライブラリの作業を[スケジュール](schedule.md)可能な実行リソース(execution resource)である。
 
 内部的にスレッドセーフなFIFO (first-in first-out) 作業キューを保持する。
-[`run`メンバ関数](run_loop/run.md)はキューから作業を取り出し、同関数を呼び出したスレッド上のループで実行する。
+[`run`メンバ関数](run_loop/run.md)はキューから作業を順次取り出し、同関数を呼び出すスレッド上で逐次実行する。
 
 `run_loop`インスタンスの動作説明のため、下記の説明用メンバ変数を持つ。
 
@@ -32,7 +32,7 @@ namespace std::execition {
 | [`run`](run_loop/run.md) | キュー上の作業を逐次実行 | C++26 |
 | [`finish`](run_loop/finish.md) | 状態を終了中に変更 | C++26 |
 
-## 説明専用のメンバ型
+## メンバ型
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|-------|
@@ -119,3 +119,4 @@ success
 
 ## 参照
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3396R1 std::execution wording fixes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3396r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>finish -- execution/run_loop: 微調整 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop/finish.html"/>
      <id>e6b7e2cfbe40cd345f07d28f060da229a653766d:reference/execution/execution/run_loop/finish.md</id>
      <updated>2025-04-30T18:09:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop/finish.md b/reference/execution/execution/run_loop/finish.md
index 45565054a..fe72b5e9a 100644
--- a/reference/execution/execution/run_loop/finish.md
+++ b/reference/execution/execution/run_loop/finish.md
@@ -63,3 +63,4 @@ int main()
 
 ## 参照
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3396R1 std::execution wording fixes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3396r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_scheduler -- execution/run_loop: 微調整 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop/get_scheduler.html"/>
      <id>e6b7e2cfbe40cd345f07d28f060da229a653766d:reference/execution/execution/run_loop/get_scheduler.md</id>
      <updated>2025-04-30T18:09:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop/get_scheduler.md b/reference/execution/execution/run_loop/get_scheduler.md
index 462704953..ba9707d1f 100644
--- a/reference/execution/execution/run_loop/get_scheduler.md
+++ b/reference/execution/execution/run_loop/get_scheduler.md
@@ -20,6 +20,8 @@ run-loop-scheduler get_scheduler();
 
 ## 例
 ```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;concepts&amp;gt;
 #include &amp;lt;execution&amp;gt;
 namespace ex = std::execution;
 
@@ -27,11 +29,34 @@ int main()
 {
   ex::run_loop loop;
   ex::scheduler auto sch = loop.get_scheduler();
+
+  // スケジュールSenderを作成
+  ex::sender auto sndr = ex::schedule(sch);
+
+  // スケジュールSenderの完了シグネチャ集合を確認
+  auto sigs = ex::get_completion_signatures(sndr);
+  static_assert(std::same_as&amp;lt;decltype(sigs),
+    ex::completion_signatures&amp;lt;ex::set_value_t(),
+                              ex::set_error_t(std::exception_ptr),
+                              ex::set_stopped_t()&amp;gt;&amp;gt;);
+
+  // スケジュールSender属性の値完了スケジューラを確認
+  auto compl_sch = ex::get_completion_scheduler&amp;lt;ex::set_value_t&amp;gt;(ex::get_env(sndr));
+  assert(compl_sch == sch);
 }
 ```
 * get_scheduler()[color ff0000]
 * ex::run_loop[link ../run_loop.md]
 * ex::scheduler[link ../scheduler.md]
+* ex::sender[link ../sender.md]
+* ex::schedule[link ../schedule.md]
+* ex::get_completion_signatures[link ../get_completion_signatures.md]
+* ex::completion_signatures[link ../completion_signatures.md]
+* ex::set_value_t[link ../set_value.md]
+* ex::set_error_t[link ../set_error.md]
+* ex::set_stopped_t[link ../set_stopped.md]
+* ex::get_completion_scheduler[link ../get_completion_scheduler.md]
+* ex::get_env[link ../get_env.md]
 
 ### 出力
 ```
@@ -51,6 +76,7 @@ int main()
 
 ## 関連項目
 - [`run-loop-scheduler`](run-loop-scheduler.md)
+- [`run-loop-sender`](run-loop-sender.md)
 - [`execution::schedule`](../schedule.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>run-loop-opstate -- execution/run_loop: 微調整 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop/run-loop-opstate.html"/>
      <id>e6b7e2cfbe40cd345f07d28f060da229a653766d:reference/execution/execution/run_loop/run-loop-opstate.md</id>
      <updated>2025-04-30T18:09:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop/run-loop-opstate.md b/reference/execution/execution/run_loop/run-loop-opstate.md
index 48d7ebd1c..fb631d051 100644
--- a/reference/execution/execution/run_loop/run-loop-opstate.md
+++ b/reference/execution/execution/run_loop/run-loop-opstate.md
@@ -67,6 +67,7 @@ struct run-loop-opstate-base {  // exposition only
 
 ## 関連項目
 - [`run`](run.md)
+- [`execution::connect`](../connect.md)
 - [`execution::start`](../start.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>run-loop-sender -- execution/run_loop: 微調整 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop/run-loop-sender.html"/>
      <id>e6b7e2cfbe40cd345f07d28f060da229a653766d:reference/execution/execution/run_loop/run-loop-sender.md</id>
      <updated>2025-04-30T18:09:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop/run-loop-sender.md b/reference/execution/execution/run_loop/run-loop-sender.md
index 24f642fed..65937e3ef 100644
--- a/reference/execution/execution/run_loop/run-loop-sender.md
+++ b/reference/execution/execution/run_loop/run-loop-sender.md
@@ -27,6 +27,7 @@ class run-loop-sender;  // exposition only
 
 
 ## 関連項目
+- [`get_scheduler`](get_scheduler.md)
 - [`run-loop-scheduler`](run-loop-scheduler.md)
 - [`execution::sender`](../sender.md)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>run -- execution/run_loop: 微調整 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop/run.html"/>
      <id>e6b7e2cfbe40cd345f07d28f060da229a653766d:reference/execution/execution/run_loop/run.md</id>
      <updated>2025-04-30T18:09:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop/run.md b/reference/execution/execution/run_loop/run.md
index 6519680ca..3c7970871 100644
--- a/reference/execution/execution/run_loop/run.md
+++ b/reference/execution/execution/run_loop/run.md
@@ -117,3 +117,4 @@ finished
 
 ## 参照
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3396R1 std::execution wording fixes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3396r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>completion-domain -- execution: run_loop全メンバ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/completion-domain.html"/>
      <id>88bcec60be484f0fe088f6211913885253221050:reference/execution/execution/completion-domain.md</id>
      <updated>2025-04-30T14:29:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/completion-domain.md b/reference/execution/execution/completion-domain.md
index 70eb1a6ac..3d4aade36 100644
--- a/reference/execution/execution/completion-domain.md
+++ b/reference/execution/execution/completion-domain.md
@@ -11,14 +11,14 @@ constexpr auto completion-domain(const Sndr&amp;amp; sndr) noexcept;
 * default_domain[link default_domain.md]
 
 ## 概要
-[Sender型](sender.md)`sndr`の[完了Scheduler](get_completion_scheduler.md)から[実行ドメイン](default_domain.md)を取得する説明専用の関数テンプレート。
+[Sender](sender.md)`sndr`の[完了Scheduler](get_completion_scheduler.md)から[実行ドメイン](default_domain.md)を取得する説明専用の関数テンプレート。
 
 
 ## 効果
 説明用の型`COMPL-DOMAIN(T)`を式[`get_domain`](get_domain.md)`(`[`get_completion_scheduler`](get_completion_scheduler.md)`&amp;lt;T&amp;gt;(`[`get_env`](get_env.md)`(sndr)))`の型とする。
 
 - 型`COMPL-DOMAIN(`[`set_value_t`](set_value.md)`)`、`COMPL-DOMAIN(`[`set_error_t`](set_error.md)`)`、`COMPL-DOMAIN(`[`set_stopped_t`](set_stopped.md)`)`の全てが不適格の場合、`completion-domain&amp;lt;Default&amp;gt;`は`Default`型のデフォルト構築されたprvalueとなる。
-- そうではなく、上記のうち不適格となる型を除いた型が[共通型](/reference/type_traits/common_type.md)を共有するならば、`completion-domain&amp;lt;Default&amp;gt;`はその共有型のデフォルト構築されたprvalueとなる。
+- そうではなく、上記のうち不適格となる型を除いた型が[共通型](/reference/type_traits/common_type.md)を共有するならば、`completion-domain&amp;lt;Default&amp;gt;`はその共通型のデフォルト構築されたprvalueとなる。
 - そうでなければ、`completion-domain&amp;lt;Default&amp;gt;`は不適格となる。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>run_loop -- execution: run_loop全メンバ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop.html"/>
      <id>88bcec60be484f0fe088f6211913885253221050:reference/execution/execution/run_loop.md</id>
      <updated>2025-04-30T14:29:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop.md b/reference/execution/execution/run_loop.md
index 4ed815e62..1d469bf4d 100644
--- a/reference/execution/execution/run_loop.md
+++ b/reference/execution/execution/run_loop.md
@@ -14,12 +14,12 @@ namespace std::execition {
 `run_loop`は、実行制御ライブラリの作業を[スケジュール](schedule.md)可能な実行リソース(execution resource)である。
 
 内部的にスレッドセーフなFIFO (first-in first-out) 作業キューを保持する。
-[`run`メンバ関数](run_loop/run.md.nolink)はキューから作業を取り出し、同関数を呼び出したスレッド上のループで実行する。
+[`run`メンバ関数](run_loop/run.md)はキューから作業を取り出し、同関数を呼び出したスレッド上のループで実行する。
 
 `run_loop`インスタンスの動作説明のため、下記の説明用メンバ変数を持つ。
 
-- `count` : FIFOキューが保持する作業の個数
-- `state` : 開始(starting)／実行中(running)／完了中(finishing)／完了済み(finished) いずれかのインスタンス状態
+- `count` : キュー上に保持している作業の個数
+- `state` : [開始(starting)](run_loop/op_constructor.md)／[実行中(running)](run_loop/run.md)／[終了中(finishing)](run_loop/finish.md)／[終了済み(finished)](run_loop/run.md) いずれかの状態
 
 
 ## メンバ関数
@@ -29,20 +29,22 @@ namespace std::execition {
 | [`(constructor)`](run_loop/op_constructor.md) | コンストラクタ | C++26 |
 | [`(destructor)`](run_loop/op_destructor.md) | デストラクタ | C++26 |
 | [`get_scheduler`](run_loop/get_scheduler.md) | Scheduler取得 | C++26 |
-| [`run`](run_loop/run.md.nolink) | ループ実行を開始 | C++26 |
-| [`finish`](run_loop/finish.md.nolink) | ループ実行を終了 | C++26 |
+| [`run`](run_loop/run.md) | キュー上の作業を逐次実行 | C++26 |
+| [`finish`](run_loop/finish.md) | 状態を終了中に変更 | C++26 |
 
 ## 説明専用のメンバ型
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|-------|
-| [`run-loop-scheduler`](run_loop/run-loop-scheduler.md) | 説明専用クラス | C++26 |
-| [`run-loop-sender`](run_loop/run-loop-sender.md) | 説明専用クラス | C++26 |
-| [`run-loop-opstate`](run_loop/run-loop-opstate.md.nolink) | 説明専用クラス | C++26 |
+| [`run-loop-scheduler`](run_loop/run-loop-scheduler.md) | 動作説明用の[Scheduler型](scheduler.md) | C++26 |
+| [`run-loop-sender`](run_loop/run-loop-sender.md) | 動作説明用の[Sender型](sender.md) | C++26 |
+| [`run-loop-opstate-base`](run_loop/run-loop-opstate.md) | 動作説明用の基底クラス | C++26 |
+| [`run-loop-opstate`](run_loop/run-loop-opstate.md) | 動作説明用のクラステンプレート | C++26 |
 
 
 ## 例
 ```cpp example
+#include &amp;lt;print&amp;gt;
 #include &amp;lt;execution&amp;gt;
 namespace ex = std::execution;
 
@@ -50,33 +52,36 @@ struct MyReceiver {
   using receiver_concept = ex::receiver_t;
 
   void set_value() noexcept
-    { std::println(&amp;#34;value&amp;#34;); }
+    { std::println(&amp;#34;success&amp;#34;); }
   void set_error(std::exception_ptr) noexcept
-    { std::println(&amp;#34;error&amp;#34;); }
+    { std::println(&amp;#34;failure&amp;#34;); }
   void set_stopped() noexcept
-    { std::println(&amp;#34;stopped&amp;#34;); }
+    { std::println(&amp;#34;cancellation&amp;#34;); }
 };
 
 
 int main()
 {
-  // run_loopのスケジュールSenderを取得
   ex::run_loop loop;
-  ex::scheduler auto sch = loop.get_scheduler();
-  // state:開始(starting)
+  // count=0, state=開始(starting)
 
+  // run_loopのスケジュールSenderとReceiverを接続
+  ex::scheduler auto sch = loop.get_scheduler();
   ex::sender auto sndr = ex::schedule(sch);
   ex::receiver auto rcvr = MyReceiver{};
-  ex::operation_state auto op = ex::connect(sndr, rcvr);
-  // キューに作業を1つ追加
+  auto op = ex::connect(sndr, rcvr);
+
+  // run_loopキューに作業を1つ追加
   ex::start(op);
+  // count=1, state=開始(starting)
 
-  // stateを完了中(finished)へ遷移
+  // run_loop状態を終了中(finished)へ変更
   loop.finish();
+  // count=1, state=終了中(finished)
 
-  // キュー上の作業を全て処理
+  // run_loopキュー上の作業を逐次実行
   loop.run();
-  // state:完了済み(finished)
+  // count=0, state=終了済み(finished)
 }
 ```
 * ex::run_loop[color ff0000]
@@ -85,16 +90,15 @@ int main()
 * ex::schedule[link schedule.md]
 * ex::receiver[link receiver.md]
 * ex::receiver_t[link receiver.md]
-* ex::operation_state[link operation_state.md]
 * ex::connect[link connect.md]
 * ex::start[link start.md]
 * get_scheduler()[link run_loop/get_scheduler.md]
-* finish()[link run_loop/finish.md.nolink]
-* run()[link run_loop/run.md.nolink]
+* finish()[link run_loop/finish.md]
+* run()[link run_loop/run.md]
 
 ### 出力
 ```
-value
+success
 ```
 
 
@@ -110,7 +114,7 @@ value
 
 
 ## 関連項目
-- [`execution::schedule`](schedule.md)
+- [`execution::scheduler`](scheduler.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>finish -- execution: run_loop全メンバ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop/finish.html"/>
      <id>88bcec60be484f0fe088f6211913885253221050:reference/execution/execution/run_loop/finish.md</id>
      <updated>2025-04-30T14:29:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop/finish.md b/reference/execution/execution/run_loop/finish.md
new file mode 100644
index 000000000..45565054a
--- /dev/null
+++ b/reference/execution/execution/run_loop/finish.md
@@ -0,0 +1,65 @@
+# finish
+* execution[meta header]
+* std::execution[meta namespace]
+* run_loop[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+void finish();
+```
+
+## 概要
+`run_loop`の状態を終了中(finishing)へ変更する。
+
+
+## 事前条件
+説明専用メンバ`state`は[開始(starting)](op_constructor.md)もしくは[実行中(running)](run.md)であること。
+
+
+## 効果
+説明専用メンバ`state`を終了中(finishing)に変更する。
+
+
+## 同期操作
+メンバ関数`finish`および説明専用メンバ関数[`pop-front`, `push-back`](run.md)は不可分(atomically)に実行される。
+
+`finish`は、`nullptr`を返す[`pop-front`操作](run.md)に対して同期する。
+
+
+## 例
+```cpp example
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  ex::run_loop loop;
+  loop.finish();
+}
+```
+* finish()[color ff0000]
+* ex::run_loop[link ../run_loop.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++26
+
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`run`](run.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- execution: run_loop全メンバ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop/op_destructor.html"/>
      <id>88bcec60be484f0fe088f6211913885253221050:reference/execution/execution/run_loop/op_destructor.md</id>
      <updated>2025-04-30T14:29:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop/op_destructor.md b/reference/execution/execution/run_loop/op_destructor.md
index 85c59fbe3..4c948e1ef 100644
--- a/reference/execution/execution/run_loop/op_destructor.md
+++ b/reference/execution/execution/run_loop/op_destructor.md
@@ -10,12 +10,16 @@
 ```
 
 ## 概要
-`run_loopオブジェクトを破棄する。
+`run_loop`オブジェクトを破棄する。
 
 
 ## 効果
-`count`が非`0`かつ`state`が実行中(running)のとき、[`terminate`](/reference/exception/terminate.md)を呼び出す。
-それ以外のときは、効果を持たない。
+`count`が非`0`かつ`state`が[実行中(running)](run.md)のとき、[`terminate`](/reference/exception/terminate.md)を呼び出してプログラムを異常終了させる。
+それ以外のとき、効果を持たない。
+
+
+## 同期操作
+[`run`](run.md)とデストラクタ以外のメンバ関数同時呼び出しは、データ競合を引き起こさない。
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>run-loop-opstate -- execution: run_loop全メンバ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop/run-loop-opstate.html"/>
      <id>88bcec60be484f0fe088f6211913885253221050:reference/execution/execution/run_loop/run-loop-opstate.md</id>
      <updated>2025-04-30T14:29:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop/run-loop-opstate.md b/reference/execution/execution/run_loop/run-loop-opstate.md
new file mode 100644
index 000000000..48d7ebd1c
--- /dev/null
+++ b/reference/execution/execution/run_loop/run-loop-opstate.md
@@ -0,0 +1,74 @@
+# run-loop-opstate
+* execution[meta header]
+* std::execution[meta namespace]
+* run_loop[meta class]
+* class template[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class Rcvr&amp;gt;
+struct run-loop-opstate;
+```
+
+## 概要
+`run-loop-opstate`は、[`run_loop`](../run_loop.md)動作説明で利用される説明専用のクラスである。
+
+
+## クラス仕様
+説明専用の基底クラス`run-loop-opstate-base`を下記の通り定義する。
+`run-loop-opstate&amp;lt;Rcvr&amp;gt;`は、`run-loop-opstate-base`から曖昧さなくprivate継承したクラスである。
+
+```cpp
+struct run-loop-opstate-base {  // exposition only
+  virtual void execute() = 0;   // exposition only
+  run_loop* loop;               // exposition only
+  run-loop-opstate-base* next;  // exposition only
+};
+```
+* run_loop[link ../run_loop.md]
+
+説明用の`o`を`run-loop-opstate&amp;lt;Rcvr&amp;gt;`型の非const左辺値、`REC(o)`を`o`を返す[接続(connect)](../connect.md)呼び出しへ渡した式`rcvr`で初期化された`Rcvr`型の非const左辺値参照とする。
+
+- `REC(o)`が参照するオブジェクトは、`o`が参照するオブジェクトの生存期間(lifetime)で有効である。
+- 型`run-loop-opstate&amp;lt;Rcvr&amp;gt;`は`run-loop-opstate-base::execute()`をオーバーライドし、式`o.execute()`は下記と等価 :
+
+    ```cpp
+    if (get_stop_token(REC(o)).stop_requested()) {
+      set_stopped(std::move(REC(o)));
+    } else {
+      set_value(std::move(REC(o)));
+    }
+    ```
+    * get_stop_token[link ../../get_stop_token.md]
+    * set_stopped[link ../set_stopped.md]
+    * set_value[link ../set_value.md]
+    * std::move[link /reference/utility/move.md]
+
+- 式`start(o)`は下記と等価 :
+
+    ```cpp
+    try {
+      o.loop-&amp;gt;push-back(addressof(o));
+    } catch(...) {
+      set_error(std::move(REC(o)), current_exception());
+    }
+    ```
+    * push-back[link run.md]
+    * set_error[link ../set_value.md]
+    * addressof[link /reference/memory/addressof.md]
+    * std::move[link /reference/utility/move.md]
+    * current_exception()[link /reference/exception/current_exception.md]
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 関連項目
+- [`run`](run.md)
+- [`execution::start`](../start.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>run-loop-scheduler -- execution: run_loop全メンバ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop/run-loop-scheduler.html"/>
      <id>88bcec60be484f0fe088f6211913885253221050:reference/execution/execution/run_loop/run-loop-scheduler.md</id>
      <updated>2025-04-30T14:29:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop/run-loop-scheduler.md b/reference/execution/execution/run_loop/run-loop-scheduler.md
index dce6681d5..a1b154a04 100644
--- a/reference/execution/execution/run_loop/run-loop-scheduler.md
+++ b/reference/execution/execution/run_loop/run-loop-scheduler.md
@@ -12,9 +12,11 @@ class run-loop-scheduler;  // exposition only
 ## 概要
 `run-loop-scheduler`は、[`get_scheduler`メンバ関数](get_scheduler.md)の戻り値型として利用される説明専用のクラスである。
 
+
+## クラス仕様
 - `run-loop-scheduler`型は[`scheduler`](../scheduler.md)のモデルとなる未規定の型。
 - `run-loop-scheduler`インスタンスは、同インスタンスを取得した[`run_loop`](../run_loop.md)インスタンスの生存期間(lifetime)終了まで有効。
-- 2個の`run-loop-scheduler`インスタンスは、[`run_loop`](../run_loop.md)インスタンスから取得された場合に限って等しい。
+- 2個の`run-loop-scheduler`インスタンスは、同一[`run_loop`](../run_loop.md)インスタンスから取得された場合に限って等しい。
 - 説明用の式`sch`の型が`run-loop-scheduler`であるとき、式[`schedule`](../schedule.md)`(sch)`は型[`run-loop-sender`](run-loop-sender.md)となり、式`sch`が潜在的に例外送出しない(not potentially-throwing)ならばそれに従う。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>run-loop-sender -- execution: run_loop全メンバ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop/run-loop-sender.html"/>
      <id>88bcec60be484f0fe088f6211913885253221050:reference/execution/execution/run_loop/run-loop-sender.md</id>
      <updated>2025-04-30T14:29:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop/run-loop-sender.md b/reference/execution/execution/run_loop/run-loop-sender.md
index 1ee6fa6ad..24f642fed 100644
--- a/reference/execution/execution/run_loop/run-loop-sender.md
+++ b/reference/execution/execution/run_loop/run-loop-sender.md
@@ -12,11 +12,12 @@ class run-loop-sender;  // exposition only
 ## 概要
 `run-loop-sender`は、[`get_scheduler`メンバ関数](get_scheduler.md)が返す[`run-loop-scheduler`](run-loop-scheduler.md)動作仕様の説明で利用される説明専用のクラスである。
 
+## クラス仕様
 - `run-loop-sender`型は[`sender`](../sender.md)のモデルである。
 - 任意の型`Env`に対して、[`completion_signatures_of_t`](../completion_signatures_of_t.md)`&amp;lt;run-loop-sender, Env&amp;gt;`は[`completion_signatures`](../completion_signatures.md)`&amp;lt;`[`set_value_t`](../set_value.md)`(),` [`set_error_t`](../set_error.md)`(`[`exception_ptr`](/reference/exception/exception_ptr.md)`),` [`set_stopped_t`](../set_stopped.md)`()&amp;gt;`
 - `run-loop-sender`インスタンスは、関連付けられた[`run_loop`](../run_loop.md)インスタンスの生存期間(lifetime)終了まで有効。
 - 説明用の式`sndr`の型を`run-loop-sender`、`CS`が上記[`completion_signatures`](../completion_signatures.md)の特殊化であるとき[`receiver_of`](../receiver_of.md)`&amp;lt;decltype((rcvr)), CS&amp;gt;`が`true`となる式`rcvr`としたとき、
-    - 式[`connect`](../connect.md)`(sndr, rcvr)`の型は[`run-loop-opstate`](run-loop-opstate.md.nolink)`&amp;lt;`[`decay_t`](/reference/type_traits/decay.md)`&amp;lt;decltype((rcvr))&amp;gt;&amp;gt;`であり、潜在的な例外送出(potentially-throwing)は式`(void(sndr), auto(rcvr))`に従う。
+    - 式[`connect`](../connect.md)`(sndr, rcvr)`の型は[`run-loop-opstate`](run-loop-opstate.md)`&amp;lt;`[`decay_t`](/reference/type_traits/decay.md)`&amp;lt;decltype((rcvr))&amp;gt;&amp;gt;`であり、潜在的な例外送出(potentially-throwing)は式`(void(sndr), auto(rcvr))`に従う。
     - 完了タグ`C`を[`set_value_t`](../set_value.md)または[`set_stopped_t`](../set_stopped.md)としたとき、式[`get_completion_scheduler`](../get_completion_scheduler.md)`&amp;lt;C&amp;gt;(`[`get_env`](../get_env.md)`(sndr))`の潜在的な例外送出は`sndr`に従う。式の型は[`run-loop-scheduler`](run-loop-scheduler.md)となり、そのインスタンスは同一`sndr`から取得された場合に等しくなる。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>run -- execution: run_loop全メンバ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop/run.html"/>
      <id>88bcec60be484f0fe088f6211913885253221050:reference/execution/execution/run_loop/run.md</id>
      <updated>2025-04-30T14:29:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop/run.md b/reference/execution/execution/run_loop/run.md
new file mode 100644
index 000000000..6519680ca
--- /dev/null
+++ b/reference/execution/execution/run_loop/run.md
@@ -0,0 +1,119 @@
+# run
+* execution[meta header]
+* std::execution[meta namespace]
+* run_loop[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+void run();
+```
+
+## 概要
+`run_loop`のFIFOキュー上にある作業を逐次実行する。
+
+`run_loop`動作説明のため、説明専用のメンバ関数`pop-front`, `push-back`を導入する。
+[`finish`](finish.md)および`pop-front`, `push-back`は不可分(atomically)に実行される。
+
+
+### 説明専用メンバ関数 `pop-front`
+
+```cpp
+run-loop-opstate-base* pop-front();
+```
+* run-loop-opstate-base[link run-loop-opstate.md]
+
+効果 : 下記条件のいずれか一つが`true`になるまでブロックする。
+
+- `count == 0`かつ`state`が[終了中(finishing)](finish.md)のとき、`pop-front`は`state`を終了済み(finished)に設定して`nullptr`を返す。
+- `count &amp;gt; 0`のとき、`count`を`1`減算してFIFOキューから先頭要素を削除し、同要素（ポインタ値）を返す。
+
+
+### 説明専用メンバ関数 `push-back`
+
+```cpp
+void push-back(run-loop-opstate-base* item);
+```
+* run-loop-opstate-base[link run-loop-opstate.md]
+
+効果 : FIFOキューの末尾に`item`を追加して`count`を`1`加算する。
+
+同期操作 : この操作は同`item`を取得する`pop-front`操作に対して同期する。
+
+
+## 事前条件
+説明専用メンバ`state`は[開始(starting)](op_constructor.md)もしくは[終了中(finishing)](finish.md)であること。
+
+
+## 効果
+説明専用メンバ`state`が[開始(starting)](op_constructor.md)の場合、実行中(running)に変更する。
+そうでなければ、`state`を変更しない。
+
+続いて、以下と等価 :
+
+```cpp
+while (auto* op = pop-front()) {
+  op-&amp;gt;execute();
+}
+```
+* execute()[link run-loop-opstate.md]
+
+
+## 同期操作
+`run`と[デストラクタ](op_destructor.md)以外のメンバ関数同時呼び出しは、データ競合を引き起こさない。
+
+
+## 例
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;thread&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  ex::run_loop loop;
+  std::println(&amp;#34;starting&amp;#34;);
+
+  std::jthread th([&amp;amp;]{
+    // 2) 別スレッドからfinishを呼び出し
+    std::println(&amp;#34;finishing&amp;#34;);
+    loop.finish();
+  });
+
+  // 1) メインスレッド上でrunを呼び出すとブロッキングする
+  loop.run();
+  // 3) ブロッキング解除されてメインスレッドを再開
+  std::println(&amp;#34;finished&amp;#34;);
+}
+```
+* run()[color ff0000]
+* ex::run_loop[link ../run_loop.md]
+* finish()[link finish.md]
+* std::jthread[link /reference/thread/jthread.md]
+
+### 出力
+```
+starting
+finishing
+finished
+```
+
+## バージョン
+### 言語
+- C++26
+
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`finish`](finish.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>schedule -- execution: run_loop全メンバ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/schedule.html"/>
      <id>88bcec60be484f0fe088f6211913885253221050:reference/execution/execution/schedule.md</id>
      <updated>2025-04-30T14:29:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/schedule.md b/reference/execution/execution/schedule.md
index f6557e166..f112291e5 100644
--- a/reference/execution/execution/schedule.md
+++ b/reference/execution/execution/schedule.md
@@ -66,8 +66,8 @@ int main()
 * ex::then[link then.md.nolink]
 * ex::run_loop[link run_loop.md]
 * get_scheduler()[link run_loop/get_scheduler.md]
-* run()[link run_loop/run.md.nolink]
-* finish()[link run_loop/finish.md.nolink]
+* run()[link run_loop/run.md]
+* finish()[link run_loop/finish.md]
 * std::move[link /reference/utility/move.md]
 * std::jthread[link /reference/thread/jthread.md]
 * std::this_thread::get_id()[link /reference/thread/this_thread/get_id.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sender_in -- execution: run_loop全メンバ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/sender_in.html"/>
      <id>88bcec60be484f0fe088f6211913885253221050:reference/execution/execution/sender_in.md</id>
      <updated>2025-04-30T14:29:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/sender_in.md b/reference/execution/execution/sender_in.md
index 52a2293d5..bb725c838 100644
--- a/reference/execution/execution/sender_in.md
+++ b/reference/execution/execution/sender_in.md
@@ -31,7 +31,7 @@ namespace std::execution {
 
 ある完了操作の完了シグネチャが[`completion_signatures_of_t`](completion_signatures_of_t.md)`&amp;lt;Sndr, Env&amp;gt;`で取得される[`completion_signatures`](completion_signatures.md)リストに含まれるとき、`Sndr`と`Env`における許容可能完了(permissible completion)となる。
 
-`sndr`と`rcvr`の[接続](connect.md)後に[Operation State](operation_state.md)を開始することで評価されうる完了操作が、全て許容可能完了(permissible completion)である場合、`Sndr`と`Env`は`sender_in&amp;lt;Sndr, Env&amp;gt;`のモデルとなる。
+`sndr`と`rcvr`の[接続(connect)](connect.md)後に[Operation State](operation_state.md)を開始することで評価されうる完了操作が、全て許容可能完了(permissible completion)である場合、`Sndr`と`Env`は`sender_in&amp;lt;Sndr, Env&amp;gt;`のモデルとなる。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>toupper -- reference/cctype/toupper.md: Created sample implementation</title>
      <link href="https://cpprefjp.github.io/reference/cctype/toupper.html"/>
      <id>665471d98e7999f8c2ab6af4ba0060ce9fb17491:reference/cctype/toupper.md</id>
      <updated>2025-04-30T12:56:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cctype/toupper.md b/reference/cctype/toupper.md
index b48446459..ca21a5652 100644
--- a/reference/cctype/toupper.md
+++ b/reference/cctype/toupper.md
@@ -42,3 +42,13 @@ toupper(&amp;#39;1&amp;#39;) = 1
 toupper(&amp;#39;.&amp;#39;) = .
 toupper(&amp;#39;$&amp;#39;) = $
 ```
+
+## 実装例
+```cpp
+int toupper(int ch) {
+  if (islower(ch)) {
+    ch ^= 32;
+  }
+  return ch;
+}
+```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tolower -- reference/cctype/tolower.md: Created sample implementation</title>
      <link href="https://cpprefjp.github.io/reference/cctype/tolower.html"/>
      <id>3b77b17e0ac396592a2bb77e481fc85edabf695d:reference/cctype/tolower.md</id>
      <updated>2025-04-30T12:55:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cctype/tolower.md b/reference/cctype/tolower.md
index 838d96ba0..88da612c6 100644
--- a/reference/cctype/tolower.md
+++ b/reference/cctype/tolower.md
@@ -42,3 +42,14 @@ tolower(&amp;#39;1&amp;#39;) = 1
 tolower(&amp;#39;.&amp;#39;) = .
 tolower(&amp;#39;$&amp;#39;) = $
 ```
+
+## 実装例
+```cpp
+int tolower(int ch) {
+  if (isupper(ch)) {
+    ch ^= 32
+  }
+  return ch;
+}
+```
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
</feed>
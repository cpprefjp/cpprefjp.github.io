<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-05-15T05:16:45.144597</updated>
  <id>5cd68fc6-c51c-4ddd-b20d-2d6a2d9278e1</id>

  
    <entry>
      <title>宣言のみで使用しない変数の名前として_をサポート [P2169R4] -- ignore : C++26対応として詳細な定義を追加し、例を追加 (close #1315)</title>
      <link href="https://cpprefjp.github.io/lang/cpp26/nice_placeholder_with_no_name.html"/>
      <id>676aba0cd327f2f742d2d3f3bb89c29e08247b74:lang/cpp26/nice_placeholder_with_no_name.md</id>
      <updated>2025-05-15T14:13:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp26/nice_placeholder_with_no_name.md b/lang/cpp26/nice_placeholder_with_no_name.md
index 8e36638dc..e26b12587 100644
--- a/lang/cpp26/nice_placeholder_with_no_name.md
+++ b/lang/cpp26/nice_placeholder_with_no_name.md
@@ -86,6 +86,7 @@ int main() {
 
 ## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++17 `[[maybe_unused]]`属性](/lang/cpp17/maybe_unused.md)
+- [`std::ignore`](/reference/tuple/ignore.md)
 
 ## 参照
 - [P2169R4 A nice placeholder with no name](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2169r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ignore -- ignore : C++26対応として詳細な定義を追加し、例を追加 (close #1315)</title>
      <link href="https://cpprefjp.github.io/reference/tuple/ignore.html"/>
      <id>676aba0cd327f2f742d2d3f3bb89c29e08247b74:reference/tuple/ignore.md</id>
      <updated>2025-05-15T14:13:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/ignore.md b/reference/tuple/ignore.md
index 46b212ca5..8d3d8a3bc 100644
--- a/reference/tuple/ignore.md
+++ b/reference/tuple/ignore.md
@@ -6,8 +6,15 @@
 
 ```cpp
 namespace std {
-  const unspecified ignore;            // C++11
-  inline constexpr unspecified ignore; // C++17
+  struct ignore-type { // 説明用の定義 (C++26)
+    constexpr const ignore-type&amp;amp;
+    operator=(const auto &amp;amp;) const noexcept
+      { return *this; }
+  };
+
+  const unspecified ignore;            // (1) C++11
+  inline constexpr unspecified ignore; // (1) C++17
+  inline constexpr ignore-type ignore; // (1) C++26
 }
 ```
 * unspecified[italic]
@@ -15,7 +22,61 @@ namespace std {
 ## 概要
 `ignore`は、[`tie()`](tie.md)を使用してタプルから値を抽出する際に、「不要な値」をマーキングするためのプレースホルダーである。
 
-使用例は[`tie()`](tie.md)を参照。
+そのほか、関数の戻り値を明示的に無視する際にも使用できる。
+
+C++26以降は、[`&amp;lt;utility&amp;gt;`](/reference/utility.md)をインクルードして使用することもできる。
+
+
+## 例
+### タプルの要素を取り出す際に一部の要素を無視する
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;tuple&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+std::tuple&amp;lt;int, char, std::string&amp;gt; f()
+{
+  return {1, &amp;#39;a&amp;#39;, &amp;#34;hello&amp;#34;};
+}
+
+int main() {
+  // char要素は無視する
+  int a;
+  std::string c;
+  std::tie(a, std::ignore, c) = f();
+
+  std::cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; c &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::ignore[color ff0000]
+
+#### 出力
+```
+1
+hello
+```
+
+### 関数の戻り値を無視する (C++17)
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;tuple&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+[[nodiscard]]
+int print_string(std::string s)
+{
+  std::cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; std::endl;
+  return 0;
+}
+
+int main() {
+  // 自分の用途ではこの関数は必ず成功するため、
+  // 戻り値を無視する
+  std::ignore = print_string(&amp;#34;hello&amp;#34;);
+}
+```
+* std::ignore[color ff0000]
 
 
 ## バージョン
@@ -33,4 +94,9 @@ namespace std {
 - [`std::make_tuple`](make_tuple.md)
 - [`std::forward_as_tuple`](forward_as_tuple.md)
 - [`std::tie`](tie.md)
+- [C++17 `[[nodiscard]]`属性](/lang/cpp17/nodiscard.md)
+- [C++26 宣言のみで使用しない変数の名前として`_`をサポート](/lang/cpp26/nice_placeholder_with_no_name.md)
+
 
+## 参照
+- [P2968R2 Make `std::ignore` a first-class object](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2968r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tie -- ignore : C++26対応として詳細な定義を追加し、例を追加 (close #1315)</title>
      <link href="https://cpprefjp.github.io/reference/tuple/tie.html"/>
      <id>676aba0cd327f2f742d2d3f3bb89c29e08247b74:reference/tuple/tie.md</id>
      <updated>2025-05-15T14:13:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tie.md b/reference/tuple/tie.md
index 255593bd6..949b3494c 100644
--- a/reference/tuple/tie.md
+++ b/reference/tuple/tie.md
@@ -160,4 +160,5 @@ text, b.txt
 
 ## 参照
 - [LWG2301 Why is std::tie not constexpr?](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#2301)
+- [P2968R2 Make `std::ignore` a first-class object](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2968r2.html)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iterator_concept -- move_iterator::iterator_concept : C++23対応 (close #1099)</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/type-iterator_concept.html"/>
      <id>2d8141892da0c3ada9b1835e213d303a89e10c41:reference/iterator/move_iterator/type-iterator_concept.md</id>
      <updated>2025-05-15T12:38:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/type-iterator_concept.md b/reference/iterator/move_iterator/type-iterator_concept.md
index 0df1bcae2..297c74b20 100644
--- a/reference/iterator/move_iterator/type-iterator_concept.md
+++ b/reference/iterator/move_iterator/type-iterator_concept.md
@@ -6,16 +6,26 @@
 * cpp20[meta cpp]
 
 ```cpp
-using iterator_concept = input_iterator_tag; // (1) C++20
+using iterator_concept = 以下参照; // (1) C++20
 ```
-* input_iterator_tag[link /reference/iterator/iterator_tag.md]
 
 ## 概要
 イテレータコンセプトを表す型。
 
+- C++20:
+    - [`input_iterator_tag`](/reference/iterator/iterator_tag.md)
+- C++23:
+    - `Iterator`が[`random_access_iterator`](/reference/iterator/random_access_iterator.md)コンセプトのモデルである場合、[`random_access_iterator_tag`](/reference/iterator/iterator_tag.md)
+    - `Iterator`が[`bidirectional_iterator`](/reference/iterator/bidirectional_iterator.md)コンセプトのモデルである場合、[`bidirectional_iterator_tag`](/reference/iterator/iterator_tag.md)
+    - `Iterator`が[`forward_iterator`](/reference/iterator/forward_iterator.md)コンセプトのモデルである場合、[`forward_iterator_tag`](/reference/iterator/iterator_tag.md)
+    - そうでない場合、[`input_iterator_tag`](/reference/iterator/iterator_tag.md)
+
+
 ## バージョン
 ### 言語
 - C++20
 
 ## 参照
 - [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
+- [P2520R0 `move_iterator&amp;lt;T*&amp;gt;` should be a random access iterator](https://wg21.link/p2520r0)
+    - C++23で`iterator_concept`がランダムアクセスイテレータにできるようになった
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>move_iterator -- move_iterator : メンバ型の表を整理してバージョン差異があるものは個別ページを用意した</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator.html"/>
      <id>b1ce4365524d542e92d772ce35a6d422cd7463eb:reference/iterator/move_iterator.md</id>
      <updated>2025-05-15T12:25:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator.md b/reference/iterator/move_iterator.md
index 56f23972f..29b57543f 100644
--- a/reference/iterator/move_iterator.md
+++ b/reference/iterator/move_iterator.md
@@ -42,28 +42,15 @@ namespace std {
 
 ## メンバ型
 
-### C++17まで
-
-| 名前 | 説明 | 対応バージョン |
-|------------------------------------------------------|-------------|-------|
-| `iterator_type` | `Iterator` | C++11 |
-| `difference_type` | [`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;Iterator&amp;gt;::difference_type` | C++11 |
-| `pointer` | `Iterator` | C++11 |
-| `value_type` | [`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;Iterator&amp;gt;::value_type` | C++11 |
-| `iterator_category` | [`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;Iterator&amp;gt;::iterator_category` | C++11 |
-| `reference` | `value_type&amp;amp;&amp;amp;` | C++11 |
-
-### C++20
-
 | 名前 | 説明 | 対応バージョン |
 |------------------------------------------------------|-------------|-------|
-| `iterator_type` | `Iterator` | C++11 |
-| `difference_type` | [`iter_difference_t`](/reference/iterator/iter_difference_t.md)`&amp;lt;Iterator&amp;gt;` | C++20 |
-| `pointer` | `Iterator` | C++11 |
-| `value_type` | [`iter_value_t`](/reference/iterator/iter_value_t.md)`&amp;lt;Iterator&amp;gt;` | C++20 |
-| `iterator_category` | [`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;Iterator&amp;gt;::iterator_category` &amp;lt;br/&amp;gt; ただし、[`contiguous_iterator_tag`](/reference/iterator/iterator_tag.md)となるときは`random_access_iterator_tag` | C++20 |
-| `iterator_concept` | [`input_iterator_tag`](/reference/iterator/iterator_tag.md) | C++20 |
-| `reference` | [`iter_rvalue_reference_t`](/reference/iterator/iter_rvalue_reference_t.md)`&amp;lt;Iterator&amp;gt;`  | C++20 |
+| `iterator_type` | 元となるイテレータ型 `Iterator` | C++11 |
+| [`difference_type`](move_iterator/type-deferrence_type.md) | イテレータ間の差を表す数値型 | C++11 |
+| `pointer` | ポインタ型 `Iterator` | C++11 |
+| [`value_type`](move_iterator/type-value_type.md) | イテレータが指す値型 | C++11 |
+| [`iterator_category`](move_iterator/type-iterator_category.md) | イテレータの分類を表す型 | C++11 |
+| [`iterator_concept`](move_iterator/type-iterator_concept.md) | イテレータコンセプトを表す型 | C++20 |
+| [`reference`](move_iterator/type-reference.md) | イテレータを間接参照する型 | C++11 |
 
 
 ## 非メンバ関数
@@ -137,6 +124,9 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 
-## 参照
+## 関連項目
 - [C++11 右辺値参照・ムーブセマンティクス](/lang/cpp11/rvalue_ref_and_move_semantics.md)
+
+
+## 参照
 - [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>deferrence_type -- move_iterator : メンバ型の表を整理してバージョン差異があるものは個別ページを用意した</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/type-deferrence_type.html"/>
      <id>b1ce4365524d542e92d772ce35a6d422cd7463eb:reference/iterator/move_iterator/type-deferrence_type.md</id>
      <updated>2025-05-15T12:25:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/type-deferrence_type.md b/reference/iterator/move_iterator/type-deferrence_type.md
new file mode 100644
index 000000000..1278ae8d0
--- /dev/null
+++ b/reference/iterator/move_iterator/type-deferrence_type.md
@@ -0,0 +1,22 @@
+# deferrence_type
+* iterator[meta header]
+* std[meta namespace]
+* move_iterator[meta class]
+* type-alias[meta id-type]
+* cpp11[meta cpp]
+
+```cpp
+using difference_type = iterator_traits&amp;lt;Iterator&amp;gt;::difference_type; // (1) C++11
+using difference_type = iter_difference_t&amp;lt;Iterator&amp;gt;;                // (1) C++20
+```
+
+## 概要
+イテレータの差を表す型。
+
+
+## バージョン
+### 言語
+- C++11
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iterator_category -- move_iterator : メンバ型の表を整理してバージョン差異があるものは個別ページを用意した</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/type-iterator_category.html"/>
      <id>b1ce4365524d542e92d772ce35a6d422cd7463eb:reference/iterator/move_iterator/type-iterator_category.md</id>
      <updated>2025-05-15T12:25:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/type-iterator_category.md b/reference/iterator/move_iterator/type-iterator_category.md
new file mode 100644
index 000000000..a7cbce247
--- /dev/null
+++ b/reference/iterator/move_iterator/type-iterator_category.md
@@ -0,0 +1,27 @@
+# iterator_category
+* iterator[meta header]
+* std[meta namespace]
+* move_iterator[meta class]
+* type-alias[meta id-type]
+* cpp11[meta cpp]
+
+```cpp
+using iterator_category = 以下参照; // (1) C++11
+```
+
+## 概要
+イテレータの分類を表す型。
+
+- C++11:
+    - [`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;Iterator&amp;gt;::iterator_category`
+- C++20:
+    - [`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;Iterator&amp;gt;::iterator_category`
+    - ただし、[`contiguous_iterator_tag`](/reference/iterator/iterator_tag.md)となる場合は[`random_access_iterator_tag`](/reference/iterator/iterator_tag.md)
+
+
+## バージョン
+### 言語
+- C++11
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iterator_concept -- move_iterator : メンバ型の表を整理してバージョン差異があるものは個別ページを用意した</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/type-iterator_concept.html"/>
      <id>b1ce4365524d542e92d772ce35a6d422cd7463eb:reference/iterator/move_iterator/type-iterator_concept.md</id>
      <updated>2025-05-15T12:25:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/type-iterator_concept.md b/reference/iterator/move_iterator/type-iterator_concept.md
new file mode 100644
index 000000000..0df1bcae2
--- /dev/null
+++ b/reference/iterator/move_iterator/type-iterator_concept.md
@@ -0,0 +1,21 @@
+# iterator_concept
+* iterator[meta header]
+* std[meta namespace]
+* move_iterator[meta class]
+* type-alias[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+using iterator_concept = input_iterator_tag; // (1) C++20
+```
+* input_iterator_tag[link /reference/iterator/iterator_tag.md]
+
+## 概要
+イテレータコンセプトを表す型。
+
+## バージョン
+### 言語
+- C++20
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reference -- move_iterator : メンバ型の表を整理してバージョン差異があるものは個別ページを用意した</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/type-reference.html"/>
      <id>b1ce4365524d542e92d772ce35a6d422cd7463eb:reference/iterator/move_iterator/type-reference.md</id>
      <updated>2025-05-15T12:25:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/type-reference.md b/reference/iterator/move_iterator/type-reference.md
new file mode 100644
index 000000000..2b96ab2d1
--- /dev/null
+++ b/reference/iterator/move_iterator/type-reference.md
@@ -0,0 +1,22 @@
+# reference
+* iterator[meta header]
+* std[meta namespace]
+* move_iterator[meta class]
+* type-alias[meta id-type]
+* cpp11[meta cpp]
+
+```cpp
+using difference_type = value_type&amp;amp;&amp;amp;;                      // (1) C++11
+using difference_type = iter_rvalue_reference_t&amp;lt;Iterator&amp;gt;; // (1) C++20
+```
+
+## 概要
+イテレータを間接参照する型。
+
+
+## バージョン
+### 言語
+- C++11
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>value_type -- move_iterator : メンバ型の表を整理してバージョン差異があるものは個別ページを用意した</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/type-value_type.html"/>
      <id>b1ce4365524d542e92d772ce35a6d422cd7463eb:reference/iterator/move_iterator/type-value_type.md</id>
      <updated>2025-05-15T12:25:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/type-value_type.md b/reference/iterator/move_iterator/type-value_type.md
new file mode 100644
index 000000000..983dd2b73
--- /dev/null
+++ b/reference/iterator/move_iterator/type-value_type.md
@@ -0,0 +1,22 @@
+# value_type
+* iterator[meta header]
+* std[meta namespace]
+* move_iterator[meta class]
+* type-alias[meta id-type]
+* cpp11[meta cpp]
+
+```cpp
+using difference_type = iterator_traits&amp;lt;Iterator&amp;gt;::value_type; // (1) C++11
+using difference_type = iter_value_t&amp;lt;Iterator&amp;gt;;                // (1) C++20
+```
+
+## 概要
+イテレータが指す値型。
+
+
+## バージョン
+### 言語
+- C++11
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
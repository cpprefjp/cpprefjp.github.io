<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-12-09T11:40:19.268615</updated>
  <id>7c78390b-c5bf-40f6-8e9e-00fed1ef5fb7</id>

  
    <entry>
      <title>reverse_iterator -- reverse_iterator : 三方比較演算子を追加 #900</title>
      <link href="https://cpprefjp.github.io/reference/iterator/reverse_iterator.html"/>
      <id>c3583f91c88145b46d808a3d7874c0165da38d54:reference/iterator/reverse_iterator.md</id>
      <updated>2022-12-09T20:34:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/reverse_iterator.md b/reference/iterator/reverse_iterator.md
index 8c90aa5f9..fa024206b 100644
--- a/reference/iterator/reverse_iterator.md
+++ b/reference/iterator/reverse_iterator.md
@@ -98,7 +98,7 @@ namespace std {
 | [`operator&amp;lt;=`](reverse_iterator/op_less_equal.md) | 左辺が右辺以下かの判定を行う | |
 | [`operator&amp;gt;`](reverse_iterator/op_greater.md) | 左辺が右辺より大きいかの判定を行う | |
 | [`operator&amp;gt;=`](reverse_iterator/op_greater_equal.md) | 左辺が右辺以上かの判定を行う | |
-| [`operator&amp;lt;=&amp;gt;`](reverse_iterator/op_compare_3way.md.nolink)           | 三方比較を行う | C++20 |
+| [`operator&amp;lt;=&amp;gt;`](reverse_iterator/op_compare_3way.md)           | 三方比較を行う | C++20 |
 | [`operator-`](reverse_iterator/op_minus.md) | 2つの`reverse_iterator`の差を求める | |
 | [`operator+`](reverse_iterator/op_plus.md) | イテレータを進める | |
 | [`iter_move`](reverse_iterator/iter_move.md)     | イテレータの要素の移動 | C++20 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- reverse_iterator : 三方比較演算子を追加 #900</title>
      <link href="https://cpprefjp.github.io/reference/iterator/reverse_iterator/op_compare_3way.html"/>
      <id>c3583f91c88145b46d808a3d7874c0165da38d54:reference/iterator/reverse_iterator/op_compare_3way.md</id>
      <updated>2022-12-09T20:34:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/reverse_iterator/op_compare_3way.md b/reference/iterator/reverse_iterator/op_compare_3way.md
new file mode 100644
index 000000000..2ae3e44d7
--- /dev/null
+++ b/reference/iterator/reverse_iterator/op_compare_3way.md
@@ -0,0 +1,73 @@
+# operator&amp;lt;=&amp;gt;
+* iterator[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class Iterator1, three_way_comparable_with&amp;lt;Iterator1&amp;gt; Iterator2&amp;gt;
+  constexpr compare_three_way_result_t&amp;lt;Iterator1, Iterator2&amp;gt;
+    operator&amp;lt;=&amp;gt;(const reverse_iterator&amp;lt;Iterator1&amp;gt;&amp;amp; x,
+                const reverse_iterator&amp;lt;Iterator2&amp;gt;&amp;amp; y); // (1) C++20
+}
+```
+
+## 概要
+`reverse_iterator`オブジェクトの三方比較を行う。
+
+
+## 戻り値
+```cpp
+return y.base() &amp;lt;=&amp;gt; x.base();
+```
+* base()[link base.md]
+
+
+## 備考
+- 逆順イテレータであるため、return文の引数順が逆になっている
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+
+int main()
+{
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3};
+
+  std::reverse_iterator&amp;lt;decltype(v)::iterator&amp;gt; it1(v.end());
+  std::reverse_iterator&amp;lt;decltype(v)::iterator&amp;gt; it2(v.end());
+
+  if ((it1 &amp;lt;=&amp;gt; it2) == 0) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;equal&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+  else {
+    std::cout &amp;lt;&amp;lt; &amp;#34;not equal&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* it1 &amp;lt;=&amp;gt; it2[color ff0000]
+
+
+### 出力
+```
+equal
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang):
+- [GCC](/implementation.md#gcc): 10
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+- [P0031R0 A Proposal to Add Constexpr Modifiers to `reverse_iterator`, `move_iterator`, `array` and Range Access](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0031r0.html)
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- function : operator==とoperator!=を自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/functional/function/op_equal.html"/>
      <id>e7b804719a22cf67f70d8a3a831f3e4fdeab3c01:reference/functional/function/op_equal.md</id>
      <updated>2022-12-09T20:21:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/function/op_equal.md b/reference/functional/function/op_equal.md
index c76f83d6c..193a57712 100644
--- a/reference/functional/function/op_equal.md
+++ b/reference/functional/function/op_equal.md
@@ -6,11 +6,12 @@
 
 ```cpp
 namespace std {
-template &amp;lt;class R, class... ArgTypes&amp;gt;
-bool operator==(const function&amp;lt;R(ArgTypes...)&amp;gt;&amp;amp; f, nullptr_t) noexcept;
+  template &amp;lt;class R, class... ArgTypes&amp;gt;
+  bool operator==(const function&amp;lt;R(ArgTypes...)&amp;gt;&amp;amp; f, nullptr_t) noexcept; // (1) C++11
 
-template &amp;lt;class R, class... ArgTypes&amp;gt;
-bool operator==(nullptr_t, const function&amp;lt;R(ArgTypes...)&amp;gt;&amp;amp; f) noexcept;
+  // (1)により、以下のオーバーロードが使用可能になる (C++20)
+  template &amp;lt;class R, class... ArgTypes&amp;gt;
+  bool operator==(nullptr_t, const function&amp;lt;R(ArgTypes...)&amp;gt;&amp;amp; f) noexcept; // (2) C++20
 }
 ```
 * nullptr_t[link /reference/cstddef/nullptr_t.md]
@@ -65,4 +66,5 @@ not empty
 
 
 ## 参照
-
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- function : operator==とoperator!=を自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/functional/function/op_not_equal.html"/>
      <id>e7b804719a22cf67f70d8a3a831f3e4fdeab3c01:reference/functional/function/op_not_equal.md</id>
      <updated>2022-12-09T20:21:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/function/op_not_equal.md b/reference/functional/function/op_not_equal.md
index 97f360b5a..44d0c9357 100644
--- a/reference/functional/function/op_not_equal.md
+++ b/reference/functional/function/op_not_equal.md
@@ -6,11 +6,12 @@
 
 ```cpp
 namespace std {
-template &amp;lt;class R, class... ArgTypes&amp;gt;
-bool operator!=(const function&amp;lt;R(ArgTypes...)&amp;gt;&amp;amp; f, nullptr_t) noexcept;
+  // operator==により、以下のオーバーロードが使用可能になる (C++20)
+  template &amp;lt;class R, class... ArgTypes&amp;gt;
+  bool operator!=(const function&amp;lt;R(ArgTypes...)&amp;gt;&amp;amp; f, nullptr_t) noexcept; // (1) C++11
 
-template &amp;lt;class R, class... ArgTypes&amp;gt;
-bool operator!=(nullptr_t, const function&amp;lt;R(ArgTypes...)&amp;gt;&amp;amp; f) noexcept;
+  template &amp;lt;class R, class... ArgTypes&amp;gt;
+  bool operator!=(nullptr_t, const function&amp;lt;R(ArgTypes...)&amp;gt;&amp;amp; f) noexcept; // (2) C++11
 }
 ```
 * nullptr_t[link /reference/cstddef/nullptr_t.md]
@@ -65,4 +66,5 @@ empty
 
 
 ## 参照
-
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- scoped_allocator_adaptor : operator!=を自動導出に対応</title>
      <link href="https://cpprefjp.github.io/reference/scoped_allocator/scoped_allocator_adaptor/op_not_equal.html"/>
      <id>b92503acd7c7769b2a188d0070329b2bae49633a:reference/scoped_allocator/scoped_allocator_adaptor/op_not_equal.md</id>
      <updated>2022-12-09T20:19:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/scoped_allocator/scoped_allocator_adaptor/op_not_equal.md b/reference/scoped_allocator/scoped_allocator_adaptor/op_not_equal.md
index cbcdeccb1..19552ce8e 100644
--- a/reference/scoped_allocator/scoped_allocator_adaptor/op_not_equal.md
+++ b/reference/scoped_allocator/scoped_allocator_adaptor/op_not_equal.md
@@ -6,9 +6,10 @@
 
 ```cpp
 namespace std {
+  // operator==により、以下のオーバーロードが使用可能になる (C++20)
   template &amp;lt;class OuterA1, class OuterA2, class... InnerAllocs&amp;gt;
   bool operator!=(const scoped_allocator_adaptor&amp;lt;OuterA1, InnerAllocs...&amp;gt;&amp;amp; a,
-                  const scoped_allocator_adaptor&amp;lt;OuterA2, InnerAllocs...&amp;gt;&amp;amp; b) noexcept;
+                  const scoped_allocator_adaptor&amp;lt;OuterA2, InnerAllocs...&amp;gt;&amp;amp; b) noexcept; // (1) C++11
 }
 ```
 
@@ -72,3 +73,7 @@ equal
 - [GCC](/implementation.md#gcc): 4.7.3
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- memory_resourceとpolymorphic_allocator : operator!=を自動導出に対応</title>
      <link href="https://cpprefjp.github.io/reference/memory_resource/memory_resource/op_not_equal.html"/>
      <id>a546610dc2ff9b301c370d6c0b32c28c7ce9cf5e:reference/memory_resource/memory_resource/op_not_equal.md</id>
      <updated>2022-12-09T20:18:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory_resource/memory_resource/op_not_equal.md b/reference/memory_resource/memory_resource/op_not_equal.md
index 846d451b9..8116e9239 100644
--- a/reference/memory_resource/memory_resource/op_not_equal.md
+++ b/reference/memory_resource/memory_resource/op_not_equal.md
@@ -6,7 +6,8 @@
 
 ```cpp
 namespace std::pmr {
-  bool operator!=(const memory_resource&amp;amp; a, const memory_resource&amp;amp; b) noexcept;
+  // operator==により、以下のオーバーロードが使用可能になる (C++20)
+  bool operator!=(const memory_resource&amp;amp; a, const memory_resource&amp;amp; b) noexcept; // (1) C++17
 }
 ```
 
@@ -61,4 +62,9 @@ true
 
 ## 関連項目
 - [`is_equal`](is_equal.md)
-- [`op_equal`](op_equal.md)
\ No newline at end of file
+- [`op_equal`](op_equal.md)
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- memory_resourceとpolymorphic_allocator : operator!=を自動導出に対応</title>
      <link href="https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/op_not_equal.html"/>
      <id>a546610dc2ff9b301c370d6c0b32c28c7ce9cf5e:reference/memory_resource/polymorphic_allocator/op_not_equal.md</id>
      <updated>2022-12-09T20:18:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory_resource/polymorphic_allocator/op_not_equal.md b/reference/memory_resource/polymorphic_allocator/op_not_equal.md
index 165b1b8d4..08a714517 100644
--- a/reference/memory_resource/polymorphic_allocator/op_not_equal.md
+++ b/reference/memory_resource/polymorphic_allocator/op_not_equal.md
@@ -6,9 +6,10 @@
 
 ```cpp
 namespace std::pmr {
+  // operator==により、以下のオーバーロードが使用可能になる (C++20)
   template &amp;lt;class T1, class T2&amp;gt;
   bool operator!=(const polymorphic_allocator&amp;lt;T1&amp;gt;&amp;amp; a,
-                  const polymorphic_allocator&amp;lt;T2&amp;gt;&amp;amp; b) noexcept;
+                  const polymorphic_allocator&amp;lt;T2&amp;gt;&amp;amp; b) noexcept; // (1) C++17
 }
 ```
 
@@ -61,4 +62,9 @@ false
 - [Visual C++](/implementation.md#visual_cpp): 2017 update 6 (2), 2022 17.4 (1)
 
 ## 関連項目
-- [`operator!=`](/reference/memory_resource/memory_resource/op_not_equal.md)
\ No newline at end of file
+- [`operator!=`](/reference/memory_resource/memory_resource/op_not_equal.md)
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- allocator : operator!=を自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/memory/allocator/op_not_equal.html"/>
      <id>04a289c79954df61303169ca7f73bf28ceeef151:reference/memory/allocator/op_not_equal.md</id>
      <updated>2022-12-09T20:17:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/allocator/op_not_equal.md b/reference/memory/allocator/op_not_equal.md
index dbf1ec6ec..961b68b15 100644
--- a/reference/memory/allocator/op_not_equal.md
+++ b/reference/memory/allocator/op_not_equal.md
@@ -5,6 +5,7 @@
 
 ```cpp
 namespace std {
+  // operator==により、以下のオーバーロードが使用可能になる (C++20)
   template &amp;lt;class T1, class T2&amp;gt;
   bool operator!=(const allocator&amp;lt;T1&amp;gt;&amp;amp;,
                   const allocator&amp;lt;T2&amp;gt;&amp;amp;) throw();           // (1) C++03
@@ -12,10 +13,6 @@ namespace std {
   template &amp;lt;class T, class U&amp;gt;
   bool operator!=(const allocator&amp;lt;T&amp;gt;&amp;amp;,
                   const allocator&amp;lt;U&amp;gt;&amp;amp;) noexcept;           // (1) C++11
-
-  template &amp;lt;class T, class U&amp;gt;
-  constexpr bool operator!=(const allocator&amp;lt;T&amp;gt;&amp;amp;,
-                            const allocator&amp;lt;U&amp;gt;&amp;amp;) noexcept; // (1) C++20
 }
 ```
 
@@ -54,3 +51,5 @@ equal
 
 ## 参照
 - [P0784R7 More constexpr containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0784r7.html)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
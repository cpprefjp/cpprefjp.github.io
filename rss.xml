<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-04-29T16:28:04.454334</updated>
  <id>b86c59f2-3a65-4be6-8a66-744db6566baf</id>

  
    <entry>
      <title>execution -- execution: run_loop/get_scheduler (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>7a7c220752f7479d782da47c80170b91c8ea01d5:reference/execution/execution.md</id>
      <updated>2025-04-30T01:23:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index b86510b3b..5501c1ee1 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -145,7 +145,7 @@ Senderコンシューマは名前空間 `std::this_thread` で定義される。
 | [`execution::completion_signatures`](execution/completion_signatures.md) | 完了シグネチャ集合を表現する型 (class template) | C++26 |
 | [`execution::transform_completion_signatures`](execution/transform_completion_signatures.md.nolink) | 完了シグネチャを変換 (alias template) | C++26 |
 | [`execution::transform_completion_signatures_of`](execution/transform_completion_signatures_of.md.nolink) | 完了シグネチャを変換 (alias template) | C++26 |
-| [`execution::run_loop`](execution/run_loop.md.nolink) | 実行ループ (class) | C++26 |
+| [`execution::run_loop`](execution/run_loop.md) | 単一スレッド上でのループ実行 (class) | C++26 |
 
 ### コルーチンユーティリティ
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_completion_scheduler -- execution: run_loop/get_scheduler (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/get_completion_scheduler.html"/>
      <id>7a7c220752f7479d782da47c80170b91c8ea01d5:reference/execution/execution/get_completion_scheduler.md</id>
      <updated>2025-04-30T01:23:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/get_completion_scheduler.md b/reference/execution/execution/get_completion_scheduler.md
index 6dc738598..566ed4334 100644
--- a/reference/execution/execution/get_completion_scheduler.md
+++ b/reference/execution/execution/get_completion_scheduler.md
@@ -76,7 +76,7 @@ int main()
 }
 ```
 * ex::get_completion_scheduler[color ff0000]
-* ex::run_loop[link run_loop.md.nolink]
+* ex::run_loop[link run_loop.md]
 * ex::scheduler[link scheduler.md]
 * ex::sender[link sender.md]
 * ex::schedule[link schedule.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>run_loop -- execution: run_loop/get_scheduler (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop.html"/>
      <id>7a7c220752f7479d782da47c80170b91c8ea01d5:reference/execution/execution/run_loop.md</id>
      <updated>2025-04-30T01:23:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop.md b/reference/execution/execution/run_loop.md
new file mode 100644
index 000000000..4ed815e62
--- /dev/null
+++ b/reference/execution/execution/run_loop.md
@@ -0,0 +1,117 @@
+# run_loop
+* execution[meta header]
+* class[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execition {
+  class run_loop;
+}
+```
+
+## 概要
+`run_loop`は、実行制御ライブラリの作業を[スケジュール](schedule.md)可能な実行リソース(execution resource)である。
+
+内部的にスレッドセーフなFIFO (first-in first-out) 作業キューを保持する。
+[`run`メンバ関数](run_loop/run.md.nolink)はキューから作業を取り出し、同関数を呼び出したスレッド上のループで実行する。
+
+`run_loop`インスタンスの動作説明のため、下記の説明用メンバ変数を持つ。
+
+- `count` : FIFOキューが保持する作業の個数
+- `state` : 開始(starting)／実行中(running)／完了中(finishing)／完了済み(finished) いずれかのインスタンス状態
+
+
+## メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|-------|
+| [`(constructor)`](run_loop/op_constructor.md) | コンストラクタ | C++26 |
+| [`(destructor)`](run_loop/op_destructor.md) | デストラクタ | C++26 |
+| [`get_scheduler`](run_loop/get_scheduler.md) | Scheduler取得 | C++26 |
+| [`run`](run_loop/run.md.nolink) | ループ実行を開始 | C++26 |
+| [`finish`](run_loop/finish.md.nolink) | ループ実行を終了 | C++26 |
+
+## 説明専用のメンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|-------|
+| [`run-loop-scheduler`](run_loop/run-loop-scheduler.md) | 説明専用クラス | C++26 |
+| [`run-loop-sender`](run_loop/run-loop-sender.md) | 説明専用クラス | C++26 |
+| [`run-loop-opstate`](run_loop/run-loop-opstate.md.nolink) | 説明専用クラス | C++26 |
+
+
+## 例
+```cpp example
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+struct MyReceiver {
+  using receiver_concept = ex::receiver_t;
+
+  void set_value() noexcept
+    { std::println(&amp;#34;value&amp;#34;); }
+  void set_error(std::exception_ptr) noexcept
+    { std::println(&amp;#34;error&amp;#34;); }
+  void set_stopped() noexcept
+    { std::println(&amp;#34;stopped&amp;#34;); }
+};
+
+
+int main()
+{
+  // run_loopのスケジュールSenderを取得
+  ex::run_loop loop;
+  ex::scheduler auto sch = loop.get_scheduler();
+  // state:開始(starting)
+
+  ex::sender auto sndr = ex::schedule(sch);
+  ex::receiver auto rcvr = MyReceiver{};
+  ex::operation_state auto op = ex::connect(sndr, rcvr);
+  // キューに作業を1つ追加
+  ex::start(op);
+
+  // stateを完了中(finished)へ遷移
+  loop.finish();
+
+  // キュー上の作業を全て処理
+  loop.run();
+  // state:完了済み(finished)
+}
+```
+* ex::run_loop[color ff0000]
+* ex::scheduler[link scheduler.md]
+* ex::sender[link sender.md]
+* ex::schedule[link schedule.md]
+* ex::receiver[link receiver.md]
+* ex::receiver_t[link receiver.md]
+* ex::operation_state[link operation_state.md]
+* ex::connect[link connect.md]
+* ex::start[link start.md]
+* get_scheduler()[link run_loop/get_scheduler.md]
+* finish()[link run_loop/finish.md.nolink]
+* run()[link run_loop/run.md.nolink]
+
+### 出力
+```
+value
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::schedule`](schedule.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_scheduler -- execution: run_loop/get_scheduler (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop/get_scheduler.html"/>
      <id>7a7c220752f7479d782da47c80170b91c8ea01d5:reference/execution/execution/run_loop/get_scheduler.md</id>
      <updated>2025-04-30T01:23:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop/get_scheduler.md b/reference/execution/execution/run_loop/get_scheduler.md
new file mode 100644
index 000000000..462704953
--- /dev/null
+++ b/reference/execution/execution/run_loop/get_scheduler.md
@@ -0,0 +1,58 @@
+# get_scheduler
+* execution[meta header]
+* std::execution[meta namespace]
+* run_loop[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+run-loop-scheduler get_scheduler();
+```
+* run-loop-scheduler[link run-loop-scheduler.md]
+
+## 概要
+`run_loop`上で実行する[Scheduler](../scheduler.md)を返す。
+
+
+## 戻り値
+`run_loop`インスタンス上で作業を[スケジュール](../schedule.md)する[`run-loop-scheduler`](run-loop-scheduler.md)インスタンスを返す。
+
+
+## 例
+```cpp example
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  ex::run_loop loop;
+  ex::scheduler auto sch = loop.get_scheduler();
+}
+```
+* get_scheduler()[color ff0000]
+* ex::run_loop[link ../run_loop.md]
+* ex::scheduler[link ../scheduler.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++26
+
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`run-loop-scheduler`](run-loop-scheduler.md)
+- [`execution::schedule`](../schedule.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- execution: run_loop/get_scheduler (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop/op_constructor.html"/>
      <id>7a7c220752f7479d782da47c80170b91c8ea01d5:reference/execution/execution/run_loop/op_constructor.md</id>
      <updated>2025-04-30T01:23:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop/op_constructor.md b/reference/execution/execution/run_loop/op_constructor.md
new file mode 100644
index 000000000..6358fb8ff
--- /dev/null
+++ b/reference/execution/execution/run_loop/op_constructor.md
@@ -0,0 +1,42 @@
+# コンストラクタ
+* execution[meta header]
+* std::execution[meta namespace]
+* run_loop[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+run_loop() noexcept;  // (1)
+run_loop(run_loop&amp;amp;&amp;amp;) = delete;  // (2)
+```
+
+## 概要
+- (1) : デフォルトコンストラクタ
+- (2) : コピー／ムーブ構築の禁止
+
+
+## 事後条件
+(1) : [`run_loop`](../run_loop.md)の説明専用メンバ変数が次の通り初期化される。
+
+- `count` : 値`0`
+- `state` : 開始(starting)
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- execution: run_loop/get_scheduler (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop/op_destructor.html"/>
      <id>7a7c220752f7479d782da47c80170b91c8ea01d5:reference/execution/execution/run_loop/op_destructor.md</id>
      <updated>2025-04-30T01:23:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop/op_destructor.md b/reference/execution/execution/run_loop/op_destructor.md
new file mode 100644
index 000000000..85c59fbe3
--- /dev/null
+++ b/reference/execution/execution/run_loop/op_destructor.md
@@ -0,0 +1,34 @@
+# デストラクタ
+* execution[meta header]
+* std::execution[meta namespace]
+* run_loop[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+~run_loop();
+```
+
+## 概要
+`run_loopオブジェクトを破棄する。
+
+
+## 効果
+`count`が非`0`かつ`state`が実行中(running)のとき、[`terminate`](/reference/exception/terminate.md)を呼び出す。
+それ以外のときは、効果を持たない。
+
+
+## バージョン
+### 言語
+- C++26
+
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>run-loop-scheduler -- execution: run_loop/get_scheduler (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop/run-loop-scheduler.html"/>
      <id>7a7c220752f7479d782da47c80170b91c8ea01d5:reference/execution/execution/run_loop/run-loop-scheduler.md</id>
      <updated>2025-04-30T01:23:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop/run-loop-scheduler.md b/reference/execution/execution/run_loop/run-loop-scheduler.md
new file mode 100644
index 000000000..dce6681d5
--- /dev/null
+++ b/reference/execution/execution/run_loop/run-loop-scheduler.md
@@ -0,0 +1,32 @@
+# run-loop-scheduler
+* execution[meta header]
+* std::execution[meta namespace]
+* run_loop[meta class]
+* class[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+class run-loop-scheduler;  // exposition only
+```
+
+## 概要
+`run-loop-scheduler`は、[`get_scheduler`メンバ関数](get_scheduler.md)の戻り値型として利用される説明専用のクラスである。
+
+- `run-loop-scheduler`型は[`scheduler`](../scheduler.md)のモデルとなる未規定の型。
+- `run-loop-scheduler`インスタンスは、同インスタンスを取得した[`run_loop`](../run_loop.md)インスタンスの生存期間(lifetime)終了まで有効。
+- 2個の`run-loop-scheduler`インスタンスは、[`run_loop`](../run_loop.md)インスタンスから取得された場合に限って等しい。
+- 説明用の式`sch`の型が`run-loop-scheduler`であるとき、式[`schedule`](../schedule.md)`(sch)`は型[`run-loop-sender`](run-loop-sender.md)となり、式`sch`が潜在的に例外送出しない(not potentially-throwing)ならばそれに従う。
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 関連項目
+- [`get_scheduler`](get_scheduler.md)
+- [`execution::scheduler`](../scheduler.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>run-loop-sender -- execution: run_loop/get_scheduler (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop/run-loop-sender.html"/>
      <id>7a7c220752f7479d782da47c80170b91c8ea01d5:reference/execution/execution/run_loop/run-loop-sender.md</id>
      <updated>2025-04-30T01:23:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop/run-loop-sender.md b/reference/execution/execution/run_loop/run-loop-sender.md
new file mode 100644
index 000000000..1ee6fa6ad
--- /dev/null
+++ b/reference/execution/execution/run_loop/run-loop-sender.md
@@ -0,0 +1,34 @@
+# run-loop-sender
+* execution[meta header]
+* std::execution[meta namespace]
+* run_loop[meta class]
+* class[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+class run-loop-sender;  // exposition only
+```
+
+## 概要
+`run-loop-sender`は、[`get_scheduler`メンバ関数](get_scheduler.md)が返す[`run-loop-scheduler`](run-loop-scheduler.md)動作仕様の説明で利用される説明専用のクラスである。
+
+- `run-loop-sender`型は[`sender`](../sender.md)のモデルである。
+- 任意の型`Env`に対して、[`completion_signatures_of_t`](../completion_signatures_of_t.md)`&amp;lt;run-loop-sender, Env&amp;gt;`は[`completion_signatures`](../completion_signatures.md)`&amp;lt;`[`set_value_t`](../set_value.md)`(),` [`set_error_t`](../set_error.md)`(`[`exception_ptr`](/reference/exception/exception_ptr.md)`),` [`set_stopped_t`](../set_stopped.md)`()&amp;gt;`
+- `run-loop-sender`インスタンスは、関連付けられた[`run_loop`](../run_loop.md)インスタンスの生存期間(lifetime)終了まで有効。
+- 説明用の式`sndr`の型を`run-loop-sender`、`CS`が上記[`completion_signatures`](../completion_signatures.md)の特殊化であるとき[`receiver_of`](../receiver_of.md)`&amp;lt;decltype((rcvr)), CS&amp;gt;`が`true`となる式`rcvr`としたとき、
+    - 式[`connect`](../connect.md)`(sndr, rcvr)`の型は[`run-loop-opstate`](run-loop-opstate.md.nolink)`&amp;lt;`[`decay_t`](/reference/type_traits/decay.md)`&amp;lt;decltype((rcvr))&amp;gt;&amp;gt;`であり、潜在的な例外送出(potentially-throwing)は式`(void(sndr), auto(rcvr))`に従う。
+    - 完了タグ`C`を[`set_value_t`](../set_value.md)または[`set_stopped_t`](../set_stopped.md)としたとき、式[`get_completion_scheduler`](../get_completion_scheduler.md)`&amp;lt;C&amp;gt;(`[`get_env`](../get_env.md)`(sndr))`の潜在的な例外送出は`sndr`に従う。式の型は[`run-loop-scheduler`](run-loop-scheduler.md)となり、そのインスタンスは同一`sndr`から取得された場合に等しくなる。
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 関連項目
+- [`run-loop-scheduler`](run-loop-scheduler.md)
+- [`execution::sender`](../sender.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>schedule -- execution: run_loop/get_scheduler (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/schedule.html"/>
      <id>7a7c220752f7479d782da47c80170b91c8ea01d5:reference/execution/execution/schedule.md</id>
      <updated>2025-04-30T01:23:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/schedule.md b/reference/execution/execution/schedule.md
index 519e98b5f..f6557e166 100644
--- a/reference/execution/execution/schedule.md
+++ b/reference/execution/execution/schedule.md
@@ -64,8 +64,8 @@ int main()
 * ex::scheduler[link scheduler.md]
 * ex::sender[link sender.md]
 * ex::then[link then.md.nolink]
-* ex::run_loop[link run_loop.md.nolink]
-* get_scheduler()[link run_loop/get_scheduler.md.nolink]
+* ex::run_loop[link run_loop.md]
+* get_scheduler()[link run_loop/get_scheduler.md]
 * run()[link run_loop/run.md.nolink]
 * finish()[link run_loop/finish.md.nolink]
 * std::move[link /reference/utility/move.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>scheduler -- execution: run_loop/get_scheduler (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/scheduler.html"/>
      <id>7a7c220752f7479d782da47c80170b91c8ea01d5:reference/execution/execution/scheduler.md</id>
      <updated>2025-04-30T01:23:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/scheduler.md b/reference/execution/execution/scheduler.md
index da64b22d9..f113de558 100644
--- a/reference/execution/execution/scheduler.md
+++ b/reference/execution/execution/scheduler.md
@@ -92,8 +92,8 @@ int main()
 }
 ```
 * ex::scheduler[color ff0000]
-* ex::run_loop[link run_loop.md.nolink]
-* get_scheduler()[link run_loop/get_scheduler.md.nolink]
+* ex::run_loop[link run_loop.md]
+* get_scheduler()[link run_loop/get_scheduler.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contracts -- reference/contracts.md: Removed nolink</title>
      <link href="https://cpprefjp.github.io/reference/contracts.html"/>
      <id>31813303d99331c6c63fbcf358ecbee2b7df15af:reference/contracts.md</id>
      <updated>2025-04-29T22:14:15+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;contracts&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;contracts&lt;/span&gt;&lt;span class=&#34;cpp cpp26&#34; title=&#34;C++26で追加&#34;&gt;(C++26)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;contracts&amp;gt;&lt;/code&gt;ヘッダでは、C++における契約プログラミングのサポートを提供する。&lt;/p&gt;
&lt;p&gt;契約プログラミングは、関数やクラスの前提条件、事後条件、およびアサーションを明示的に指定するプログラミング手法である。これらの条件が満たされない場合、プログラムは契約違反を報告する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/assertion_kind.md.nolink&#34;&gt;assertion_kind&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アサーションの種類 (enum)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/evaluation_semantic.md.nolink&#34;&gt;evaluation_semantic&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アサーションの評価の種類(enum)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/detection_mode.md.nolink&#34;&gt;detection_mode&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;契約違反の検出モード(enum)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/contract_violation.html&#34;&gt;contract_violation&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;契約違反に関する情報 (class)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/invoke_default_contract_violation_handler.nolink&#34;&gt;invoke_default_contract_violation_handler&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デフォルトcontract_violationハンドラー&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++26&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 未実装&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: 未実装&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 未実装&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../lang/future/contract-based_programming.html&#34;&gt;契約に基づくプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../lang/cpp26/contracts.html&#34;&gt;契約プログラミング&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0542r5.html&#34; target=&#34;_blank&#34;&gt;P0542R5 Support for contract based programming in C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contract_violation -- reference/contracts/contract_violation.md: Added reference column</title>
      <link href="https://cpprefjp.github.io/reference/contracts/contract_violation.html"/>
      <id>eaac109518925a0d97d7f4ea231a3c2b648ced72:reference/contracts/contract_violation.md</id>
      <updated>2025-04-29T22:07:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/contracts/contract_violation.md b/reference/contracts/contract_violation.md
index c973f670a..3e24a77db 100644
--- a/reference/contracts/contract_violation.md
+++ b/reference/contracts/contract_violation.md
@@ -32,3 +32,6 @@ namespace std::contracts {
 | [`kind`](contracts/kind.md.nolink) | 違反した契約の種類 | C++26|
 | [`location`](contracts/location.md.nolink) | 違反した場所を返す | C++26 |
 | [`semantic`](contracts/semantic.md.nolink) | 違反した契約のセマンティクス | C++26 |
+
+## 参照
+- [Contracts for C++](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p2900r14.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contract_violation -- reference/contracts/contract_violation.md: Added function description</title>
      <link href="https://cpprefjp.github.io/reference/contracts/contract_violation.html"/>
      <id>c3aa7d4600e5369ebae87bac56502c505dfc2fe7:reference/contracts/contract_violation.md</id>
      <updated>2025-04-29T22:04:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/contracts/contract_violation.md b/reference/contracts/contract_violation.md
index d0a984708..c973f670a 100644
--- a/reference/contracts/contract_violation.md
+++ b/reference/contracts/contract_violation.md
@@ -21,3 +21,14 @@ namespace std::contracts {
 `contract_violation`型は、実行時に発生した契約違反が`handle_contract_violation`関数に渡されるために使用される型である。
 
 この型は、ユーザーによって構築、コピー、ムーブ、変更してはならない。
+
+## メンバ関数
+| 名前 | 説明 | 対応バージョン |
+| ---- | ---- | ---- |
+| [`comment`](contracts/comment.md.nolink) | 契約違反の詳細を記録したchar列を返す | C++26 |
+| [`detection_mode`](contracts/detection_mode.md.nolink) | 契約違反が特定された方法を返す | C++26 |
+| [`evaluation_exception`](contracts/evaluation_exception.md.nolink) | 契約が例外を飛ばしたことによって終了した場合の例外へのポインタ | C++26 |
+| [`is_terminating`](contracts/is_terminating.md.nolink) | 契約違反によってプログラムがターミネートされるかを返す | C++26|
+| [`kind`](contracts/kind.md.nolink) | 違反した契約の種類 | C++26|
+| [`location`](contracts/location.md.nolink) | 違反した場所を返す | C++26 |
+| [`semantic`](contracts/semantic.md.nolink) | 違反した契約のセマンティクス | C++26 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-02-06T09:04:30.690895</updated>
  <id>6cabb5ac-eeb1-4496-89af-2be79316ee8e</id>

  
    <entry>
      <title>ディレクトリ構造 -- ディレクトリ構造 : オーバーロードを意図した例を追加</title>
      <link href="https://cpprefjp.github.io/start_editing/directory_structure.html"/>
      <id>4b80aa7366b63eb7ae96c0be2d2c355a056437ec:start_editing/directory_structure.md</id>
      <updated>2023-02-06T18:00:10+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;ディレクトリ構造&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;lang&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;cpp{version}.mdの形式で、各C++バージョンの言語機能ページを作る&lt;/li&gt;
&lt;li&gt;future.mdは、将来のC++で検討されている言語機能を記載するところである。導入予定だった機能が再検討になった場合などに使用する&lt;/li&gt;
&lt;li&gt;archive.mdは、廃案になったC++機能だが解説として残す価値のあるものがある場合に、記載するところである&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;reference / module&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;reference階層は、ヘッダベースのライブラリリファレンスで、その階層直下にはヘッダページを置く&lt;/li&gt;
&lt;li&gt;module階層は、モジュールベースのライブラリリファレンスで、その階層直下にはモジュールページを置く&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;reference階層とmodule階層は上記以外は同じであるため、以下、共通のルールを書きます。&lt;/p&gt;
&lt;h3&gt;ヘッダ・モジュール階層&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ヘッダ・モジュール階層以下に、それに所属している機能のページを置く&lt;/li&gt;
&lt;li&gt;どのヘッダ・モジュールにも属さない機能の場合は、以下のように対応する&lt;ul&gt;
&lt;li&gt;全体で使用する説明専用の機能は、仮のヘッダ&lt;code&gt;&amp;lt;exposition-only&amp;gt;&lt;/code&gt;に属するものとして記載する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;クラス階層&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;クラスに属するメンバ関数と型は、クラス階層の下に置く&lt;/li&gt;
&lt;li&gt;オーバーロードを意図している関数、そのクラス向けに特殊化した機能も、クラス階層の下に置き、機能の列挙としてもクラスページで行う&lt;ul&gt;
&lt;li&gt;オーバーロードを意図している関数の例は以下：&lt;ul&gt;
&lt;li&gt;非メンバ関数の演算子&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::get()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::begin()&lt;/code&gt;/&lt;code&gt;std::end()&lt;/code&gt;/&lt;code&gt;std::data()&lt;/code&gt;/&lt;code&gt;std::size()&lt;/code&gt;およびそれに類するもの&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::swap()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::erase()&lt;/code&gt;/&lt;code&gt;std::erase_if()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;floor()&lt;/code&gt;/&lt;code&gt;ceil()&lt;/code&gt;/&lt;code&gt;round()&lt;/code&gt; (chrono)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;演算子オーバーロードは、&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; (出力ストリームへの出力) と &lt;code&gt;std::operator&amp;gt;&amp;gt;&lt;/code&gt; (入力ストリームからの入力) を除き、左辺のクラスに属するものとする&lt;ul&gt;
&lt;li&gt;特殊な例として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/system_error/error_code.html&#34;&gt;std::error_code&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/system_error/error_condition.html&#34;&gt;std::error_condition&lt;/a&gt;&lt;/code&gt;の比較演算子は、クラス階層ではなくヘッダ階層としている。これは所属関係がむずかしいためである&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;コンセプト階層&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;コンセプトによってオーバーロード・特殊化されている場合は、コンセプトの階層を作って、その下に置く。機能の列挙としてはヘッダページで行う&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;名前空間階層&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;名前空間の階層は基本的に導入しない。例外は以下：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/thread/this_thread.html&#34;&gt;std::this_thread&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;名前空間に特殊な意味をもたせている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_address -- to_address : イテレータからポインタへの変換例の追加</title>
      <link href="https://cpprefjp.github.io/reference/memory/to_address.html"/>
      <id>44ce2423fe44bad90a3937cc11b6be83e14fcfac:reference/memory/to_address.md</id>
      <updated>2023-02-06T15:05:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/to_address.md b/reference/memory/to_address.md
index a301c42f8..98a1321d3 100644
--- a/reference/memory/to_address.md
+++ b/reference/memory/to_address.md
@@ -32,6 +32,9 @@ namespace std {
 
 
 ## 例
+
+### ポインタの例
+
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;memory&amp;gt;
@@ -55,12 +58,46 @@ int main()
 ```
 * std::to_address[color ff0000]
 
-### 出力
+#### 出力
 ```
 3
 1
 ```
 
+### イテレータの例
+
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main()
+{
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4};
+
+  // vectorやstring等のイテレータはcontiguousではあるが、実装によってポインタではない場合がある
+  auto it = vec.begin();
+  auto end = vec.end();
+
+  // contiguousなイテレータをその要素へのポインタに変換する
+  int* p = std::to_address(it);
+
+  // 特に、終端イテレータからポインタへの変換で未定義動作を回避できる
+  int* ep = std::to_address(end);
+  // この様にしてしまうと、オブジェクトを指していないポインタのデリファレンスとなり未定義動作
+  //int* ep = &amp;amp;*end;
+
+  std::cout &amp;lt;&amp;lt; *p &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; *(ep - 1);
+}
+```
+* std::to_address[color ff0000]
+
+#### 出力
+```
+1
+4
+```
+
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_format_string -- basic_format_string : コード修飾を追加</title>
      <link href="https://cpprefjp.github.io/reference/format/basic_format_string.html"/>
      <id>6a2ea7cae4b614ea47552d81e31eeae5b35c9b03:reference/format/basic_format_string.md</id>
      <updated>2023-02-06T14:32:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/basic_format_string.md b/reference/format/basic_format_string.md
index 38475c010..35af1c5af 100644
--- a/reference/format/basic_format_string.md
+++ b/reference/format/basic_format_string.md
@@ -95,6 +95,7 @@ int main()
 * chrono::seconds[link /reference/chrono/duration_aliases.md]
 * chrono::zoned_time[link /reference/chrono/zoned_time.md]
 * std::forward[link /reference/utility/forward.md]
+* std::format[link /reference/format/format.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- format : 段落ミスを修正</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>9140852ca87b0d97fe82e630ad5fe65f876f0f0c:reference/format/format.md</id>
      <updated>2023-02-06T14:28:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index 1aabd2faf..cf7c5f0d4 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -510,41 +510,6 @@ int main()
 [true, false, true]
 ```
 
-## 実装例
-```cpp
-template&amp;lt;class... Args&amp;gt;
-string format(format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args)
-{
-  return vformat(fmt.str, make_format_args(args...));
-}
-
-template&amp;lt;class... Args&amp;gt;
-wstring format(wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args)
-{
-  return vformat(fmt.str, make_wformat_args(args...));
-}
-
-template&amp;lt;class... Args&amp;gt;
-string format(const locale&amp;amp; loc, format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args)
-{
-  return vformat(loc, fmt.str, make_format_args(args...));
-}
-
-template&amp;lt;class... Args&amp;gt;
-wstring format(const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args)
-{
-  return vformat(loc, fmt.str, make_wformat_args(args...));
-}
-```
-* string[link /reference/string/basic_string.md]
-* wstring[link /reference/string/basic_string.md]
-* format_string[link basic_format_string.md]
-* wformat_string[link basic_format_string.md]
-* str[italic]
-* vformat[link vformat.md]
-* make_format_args[link make_format_args.md]
-* make_wformat_args[link make_format_args.md]
-* locale[link /reference/locale/locale.md]
 
 ### ログ出力の例 (C++23)
 ```cpp
@@ -586,6 +551,43 @@ int main()
 ```
 
 
+## 実装例
+```cpp
+template&amp;lt;class... Args&amp;gt;
+string format(format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args)
+{
+  return vformat(fmt.str, make_format_args(args...));
+}
+
+template&amp;lt;class... Args&amp;gt;
+wstring format(wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args)
+{
+  return vformat(fmt.str, make_wformat_args(args...));
+}
+
+template&amp;lt;class... Args&amp;gt;
+string format(const locale&amp;amp; loc, format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args)
+{
+  return vformat(loc, fmt.str, make_format_args(args...));
+}
+
+template&amp;lt;class... Args&amp;gt;
+wstring format(const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args)
+{
+  return vformat(loc, fmt.str, make_wformat_args(args...));
+}
+```
+* string[link /reference/string/basic_string.md]
+* wstring[link /reference/string/basic_string.md]
+* format_string[link basic_format_string.md]
+* wformat_string[link basic_format_string.md]
+* str[italic]
+* vformat[link vformat.md]
+* make_format_args[link make_format_args.md]
+* make_wformat_args[link make_format_args.md]
+* locale[link /reference/locale/locale.md]
+
+
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- format : ログ出力の例を追加</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>9ad08e064c4e949c87fbd7ec33534903de1f4d76:reference/format/format.md</id>
      <updated>2023-02-06T14:18:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index f611c3145..1aabd2faf 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -546,6 +546,46 @@ wstring format(const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... ar
 * make_wformat_args[link make_format_args.md]
 * locale[link /reference/locale/locale.md]
 
+### ログ出力の例 (C++23)
+```cpp
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;format&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+// コンパイルフラグによって無効化できるログ出力関数
+template &amp;lt;typename... Args&amp;gt;
+void debug_log(std::format_string&amp;lt;Args...&amp;gt; s, Args&amp;amp;&amp;amp;... args) {
+#if defined(DISABLE_DEBUG_LOG)
+    return;
+#else
+  namespace chrono = std::chrono;
+  auto now = chrono::floor&amp;lt;chrono::seconds&amp;gt;(chrono::system_clock::now());
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{}: {}&amp;#34;,
+    chrono::zoned_time{&amp;#34;Asia/Tokyo&amp;#34;, now},
+    std::format(s, std::forward&amp;lt;Args&amp;gt;(args)...)
+  ) &amp;lt;&amp;lt; std::endl;
+#endif
+}
+
+int main()
+{
+  debug_log(&amp;#34;Hello {} World&amp;#34;, 42);
+}
+```
+* std::format_string[link /reference/format/basic_format_string.md]
+* chrono::system_clock[link /reference/chrono/system_clock.md]
+* now[link /reference/chrono/system_clock/now.md]
+* chrono::floor[link /reference/chrono/time_point/floor.md]
+* chrono::seconds[link /reference/chrono/duration_aliases.md]
+* chrono::zoned_time[link /reference/chrono/zoned_time.md]
+* std::forward[link /reference/utility/forward.md]
+
+#### 出力
+```
+2023-02-06 10:46:53: Hello 42 World
+```
+
+
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
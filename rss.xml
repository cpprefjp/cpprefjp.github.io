<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-03-19T03:08:24.222103</updated>
  <id>25a8abed-7588-483b-a103-a8b0c70132df</id>

  
    <entry>
      <title>identity -- Merge branches &#39;master&#39; and &#39;master&#39; of https://github.com/cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/functional/identity.html"/>
      <id>1e06ce430915468de0a57f2fee361795626ce037:reference/functional/identity.md</id>
      <updated>2020-03-19T12:04:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/identity.md b/reference/functional/identity.md
index 8e60194ad..ad8b8975a 100644
--- a/reference/functional/identity.md
+++ b/reference/functional/identity.md
@@ -28,7 +28,7 @@ namespace std {
 
 | 名前         | 説明           | 対応バージョン |
 |--------------|----------------|----------------|
-| `operator()` | `return std​::​forward&amp;lt;T&amp;gt;(t);` | C++20          |
+| `operator()` | `return std::forward&amp;lt;T&amp;gt;(t);` | C++20          |
 
 
 ## メンバ型
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>random -- uniform_random_bit_generator 追加 #711</title>
      <link href="https://cpprefjp.github.io/reference/random.html"/>
      <id>d7593f908278a590a53a1acc793103a2c1e9ec18:reference/random.md</id>
      <updated>2020-03-19T12:04:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random.md b/reference/random.md
index 596ab4c17..577424c09 100644
--- a/reference/random.md
+++ b/reference/random.md
@@ -9,6 +9,12 @@
 - [`&amp;lt;initializer_list&amp;gt;`](initializer_list.md)
 
 
+## コンセプト
+
+| 名前 | 説明 | 対応バージョン |
+|----------------------------------------------------------------------|-------------------------------|-------|
+| [`uniform_random_bit_generator`](random/uniform_random_bit_generator.md) | 離散一様分布に従う乱数生成器(concept)             | C++20 |
+
 ## 擬似乱数生成器
 
 擬似乱数生成器は、ソフトウェアで乱雑な値のシーケンスを生成するクラスである。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uniform_random_bit_generator -- uniform_random_bit_generator 追加 #711</title>
      <link href="https://cpprefjp.github.io/reference/random/uniform_random_bit_generator.html"/>
      <id>d7593f908278a590a53a1acc793103a2c1e9ec18:reference/random/uniform_random_bit_generator.md</id>
      <updated>2020-03-19T12:04:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/uniform_random_bit_generator.md b/reference/random/uniform_random_bit_generator.md
new file mode 100644
index 000000000..8f21d35c8
--- /dev/null
+++ b/reference/random/uniform_random_bit_generator.md
@@ -0,0 +1,96 @@
+# uniform_random_bit_generator
+* random[meta header]
+* std[meta namespace]
+* concept[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class G&amp;gt;
+  concept uniform_random_bit_generator =
+    invocable&amp;lt;G&amp;amp;&amp;gt; &amp;amp;&amp;amp; unsigned_integral&amp;lt;invoke_result_t&amp;lt;G&amp;amp;&amp;gt;&amp;gt; &amp;amp;&amp;amp;
+    requires {
+      { G::min() } -&amp;gt; same_as&amp;lt;invoke_result_t&amp;lt;G&amp;amp;&amp;gt;&amp;gt;;
+      { G::max() } -&amp;gt; same_as&amp;lt;invoke_result_t&amp;lt;G&amp;amp;&amp;gt;&amp;gt;;
+      requires bool_constant&amp;lt;(G::min() &amp;lt; G::max())&amp;gt;::value;
+    };
+}
+```
+* invocable[link /reference/concepts/invocable.md]
+* unsigned_integral[link /reference/concepts/unsigned_integral.md]
+* same_as[link /reference/concepts/same_as.md]
+* invoke_result_t[link /reference/type_traits/invoke_result.md]
+* bool_constant[link /reference/type_traits/bool_constant.md]
+
+## 概要
+
+`uniform_random_bit_generator`は、任意の乱数生成器`G`が離散一様分布を示す（取り得る出力範囲における各値の出現確率が一定であり符号なし整数型を返す）関数オブジェクトであることを表すコンセプトである。
+
+## モデル
+
+型`G`のオブジェクト`g`について以下の条件を満たす場合に限って、型`G`は`uniform_random_bit_generator`のモデルである
+
+- `G​::​min() &amp;lt;= g()`であること
+- `g() &amp;lt;= G​::​max()`であること
+- `g()`の時間計算量は償却定数時間であること
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;random&amp;gt;
+
+template&amp;lt;std::uniform_random_bit_generator G&amp;gt;
+void f(const char* name) {
+  std::cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;#34; is uniform random bit generator&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+
+template&amp;lt;typename G&amp;gt;
+void f(const char* name) {
+  std::cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;#34; is not uniform random bit generator&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+
+int main() {
+  f&amp;lt;std::mt19937&amp;gt;(&amp;#34;std::mt19937&amp;#34;);
+  f&amp;lt;std::minstd_rand&amp;gt;(&amp;#34;std::minstd_rand&amp;#34;);
+  f&amp;lt;std::ranlux48&amp;gt;(&amp;#34;std::ranlux48&amp;#34;);
+  f&amp;lt;std::knuth_b&amp;gt;(&amp;#34;std::knuth_b&amp;#34;);
+  f&amp;lt;std::random_device&amp;gt;(&amp;#34;std::random_device&amp;#34;);
+  
+  std::cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
+  f&amp;lt;std::uniform_real_distribution&amp;lt;&amp;gt;&amp;gt;(&amp;#34;std::uniform_real_distribution&amp;lt;&amp;gt;&amp;#34;);
+  f&amp;lt;std::normal_distribution&amp;lt;&amp;gt;&amp;gt;(&amp;#34;std::normal_distribution&amp;lt;&amp;gt;&amp;#34;);
+  f&amp;lt;std::exponential_distribution&amp;lt;&amp;gt;&amp;gt;(&amp;#34;std::exponential_distribution&amp;lt;&amp;gt;&amp;#34;);
+}
+```
+* std::predicate[color ff0000]
+
+### 出力
+```
+std::mt19937 is uniform random bit generator
+std::minstd_rand is uniform random bit generator
+std::ranlux48 is uniform random bit generator
+std::knuth_b is uniform random bit generator
+std::random_device is uniform random bit generator
+
+std::uniform_real_distribution&amp;lt;&amp;gt; is not uniform random bit generator
+std::normal_distribution&amp;lt;&amp;gt; is not uniform random bit generator
+std::exponential_distribution&amp;lt;&amp;gt; is not uniform random bit generator
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 3
+
+## 関連項目
+
+- [C++20 コンセプト](/lang/cpp20/concepts.md)
+
+## 参照
+
+- [P0898R3 Standard Library Concepts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0898r3.pdf)
+- [P1754R1 Rename concepts to standard_case for C++20, while we still can](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1754r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>identity -- identity : 不可視の文字の削除</title>
      <link href="https://cpprefjp.github.io/reference/functional/identity.html"/>
      <id>5e77e8407ad71d5fb7e7e1d8cf57e1493fe086c6:reference/functional/identity.md</id>
      <updated>2020-03-19T11:20:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/identity.md b/reference/functional/identity.md
index 8e60194ad..ad8b8975a 100644
--- a/reference/functional/identity.md
+++ b/reference/functional/identity.md
@@ -28,7 +28,7 @@ namespace std {
 
 | 名前         | 説明           | 対応バージョン |
 |--------------|----------------|----------------|
-| `operator()` | `return std​::​forward&amp;lt;T&amp;gt;(t);` | C++20          |
+| `operator()` | `return std::forward&amp;lt;T&amp;gt;(t);` | C++20          |
 
 
 ## メンバ型
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>functional -- identity : サンプルコード出力の追加とclassへの修正</title>
      <link href="https://cpprefjp.github.io/reference/functional.html"/>
      <id>0d699bc654080c0397a0e43bd5236cf22d0d511c:reference/functional.md</id>
      <updated>2020-03-19T11:08:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional.md b/reference/functional.md
index e5f63fc6c..6e2a12ff2 100644
--- a/reference/functional.md
+++ b/reference/functional.md
@@ -122,7 +122,7 @@ struct doubler {
 
 | 名前 | 説明 | 対応バージョン |
 |---------------------------------------------|--------------------------|-------|
-| [`identity`](functional/identity.md)          | 入力値を値カテゴリも含めてそのまま返す (function template) | C++20 |
+| [`identity`](functional/identity.md)          | 入力値を値カテゴリも含めてそのまま返す (class) | C++20 |
 
 
 ## 検索
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>identity -- identity : サンプルコード出力の追加とclassへの修正</title>
      <link href="https://cpprefjp.github.io/reference/functional/identity.html"/>
      <id>0d699bc654080c0397a0e43bd5236cf22d0d511c:reference/functional/identity.md</id>
      <updated>2020-03-19T11:08:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/identity.md b/reference/functional/identity.md
index e649b5452..8e60194ad 100644
--- a/reference/functional/identity.md
+++ b/reference/functional/identity.md
@@ -1,7 +1,7 @@
 # identity
 * functional[meta header]
 * std[meta namespace]
-* class template[meta id-type]
+* class[meta id-type]
 * cpp20[meta cpp]
 
 ```cpp
@@ -68,6 +68,9 @@ int main()
 
 ### 出力
 ```
+20
+10
+30
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>functional -- identity追加 #711</title>
      <link href="https://cpprefjp.github.io/reference/functional.html"/>
      <id>18218a8b7daa8b6836d93bdd2233968c782d31df:reference/functional.md</id>
      <updated>2020-03-19T11:06:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional.md b/reference/functional.md
index 6caa4516d..e5f63fc6c 100644
--- a/reference/functional.md
+++ b/reference/functional.md
@@ -118,6 +118,13 @@ struct doubler {
 | [`not2`](functional/negators.md)          | 二項の述語を論理反転する (function template) | C++17から非推奨&amp;lt;br/&amp;gt; C++20で削除 |
 
 
+## 恒等写像関数オブジェクト
+
+| 名前 | 説明 | 対応バージョン |
+|---------------------------------------------|--------------------------|-------|
+| [`identity`](functional/identity.md)          | 入力値を値カテゴリも含めてそのまま返す (function template) | C++20 |
+
+
 ## 検索
 
 | 名前 | 説明 | 対応バージョン |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>identity -- identity追加 #711</title>
      <link href="https://cpprefjp.github.io/reference/functional/identity.html"/>
      <id>18218a8b7daa8b6836d93bdd2233968c782d31df:reference/functional/identity.md</id>
      <updated>2020-03-19T11:06:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/identity.md b/reference/functional/identity.md
new file mode 100644
index 000000000..e649b5452
--- /dev/null
+++ b/reference/functional/identity.md
@@ -0,0 +1,84 @@
+# identity
+* functional[meta header]
+* std[meta namespace]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+
+  struct identity {
+    template&amp;lt;class T&amp;gt;
+    constexpr T&amp;amp;&amp;amp; operator()(T&amp;amp;&amp;amp; t) const noexcept;
+
+    using is_transparent = unspecified;
+  };
+}
+```
+* unspecified[italic]
+
+## 概要
+
+`identity`クラスは、引数に対して恒等変換を行う関数オブジェクトである。この恒等変換はC++意味論においてのものであり、値そのもの及びCV修飾や値カテゴリも含めて引数をそのまま返す。
+
+この関数オブジェクトは一切のメンバ変数を持たず、状態を保持しない。
+
+
+## メンバ関数
+
+| 名前         | 説明           | 対応バージョン |
+|--------------|----------------|----------------|
+| `operator()` | `return std​::​forward&amp;lt;T&amp;gt;(t);` | C++20          |
+
+
+## メンバ型
+
+| 名前                   | 説明                                                                                                                                                       | 対応バージョン |
+|------------------------|--------------------------------|----------------|
+| `is_transparent`       | `operator()` が関数テンプレートである事を示すタグ型。&amp;lt;br/&amp;gt;実装依存の型であるがあくまでタグ型であり、型そのものには意味はない。（`T` が `void` の場合のみ） | C++20          |
+
+## 備考
+
+これは主に[`&amp;lt;ranges&amp;gt;`](/reference/ranges.md.nolink)において、カスタマイズ可能な射影操作のデフォルトとして利用される。
+
+## 例
+
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;functional&amp;gt;
+
+//intを受け取ってその値と射影した値を足して返す
+//デフォルトはnを2倍にする
+template&amp;lt;typename Projection = std::identity&amp;gt;
+auto f(int n, Projection proj = {}) -&amp;gt; int {
+  return n + proj(n);
+}
+
+int main()
+{
+  //デフォルトの射影で呼び出し
+  std::cout &amp;lt;&amp;lt; f(10) &amp;lt;&amp;lt; std::endl;
+  //何も足さないようにカスタマイズ
+  std::cout &amp;lt;&amp;lt; f(10, [](int){return 0;}) &amp;lt;&amp;lt; std::endl;
+  //3倍にする
+  std::cout &amp;lt;&amp;lt; f(10, [](int m){return m + m;}) &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::identity[color ff0000]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 3
+
+## 参照
+
+- [P0898R3 Standard Library Concepts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0898r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
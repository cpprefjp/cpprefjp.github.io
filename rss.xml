<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++ Reference Site</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2015-02-06T15:24:52.346127</updated>
  <id>4bccdd69-ecaa-4698-ac6e-f0622ed8d95f</id>

  
    <entry>
      <title>iterator -- C++14対応として、rend非メンバ関数を追加</title>
      <link href="http://cpprefjp.github.io/reference/iterator.html"/>
      <id>a930ed0c2ba82c561e7dae7027cce3939c0bf845:reference/iterator.md</id>
      <updated>2015-02-06 15:24:35 +0900</updated>
      
        <content type="html">&lt;h1&gt;iterator&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;ヘッダでは、イテレータに関する機能群を提供する。&lt;br /&gt;
イテレータは日本語では反復子とも呼ばれ、配列やコンテナのような範囲を横断する手段として使用できる。  &lt;/p&gt;
&lt;p&gt;C++標準ライブラリのイテレータは、以下のように階層的に定義される。&lt;br /&gt;
この階層はC++言語機能の継承と同じように見なせる。たとえば、入力イテレータと前方向イテレータはis a関係が成り立っており、前方向イテレータは入力イテレータと見なすことができる。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.github.com/cpprefjp/image/master/reference/iterator/iterators.png&#34; /&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;&lt;code&gt;iterator_traits&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;イテレータに関する型情報(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator.html&#34;&gt;&lt;code&gt;iterator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;イテレータを定義するための基本クラス(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;&lt;code&gt;input_iterator_tag&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;入力イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;&lt;code&gt;output_iterator_tag&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;出力イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;&lt;code&gt;forward_iterator_tag&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;前方向イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;&lt;code&gt;bidirectional_iterator_tag&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;双方向イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;&lt;code&gt;random_access_iterator_tag&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ランダムアクセスイテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/advance.html&#34;&gt;&lt;code&gt;advance&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;イテレータを進める(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;イテレータ間の距離を求める(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;イテレータを進める(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/prev.html&#34;&gt;&lt;code&gt;prev&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;イテレータを後方に進める(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;逆方向に進むイテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/make_reverse_iterator.html&#34;&gt;&lt;code&gt;make_reverse_iterator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;オブジェクトを作るヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/back_insert_iterator.html&#34;&gt;&lt;code&gt;back_insert_iterator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾に要素を挿入する出力イテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/front_insert_iterator.html&#34;&gt;&lt;code&gt;front_insert_iterator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭に要素を挿入する出力イテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/insert_iterator.html&#34;&gt;&lt;code&gt;insert_iterator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;任意の位置に要素を挿入する出力イテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/move_iterator.html&#34;&gt;&lt;code&gt;move_iterator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;間接参照時にムーブするイテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/istream_iterator.html&#34;&gt;&lt;code&gt;istream_iterator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;入力ストリームイテレータ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/ostream_iterator.html&#34;&gt;&lt;code&gt;ostream_iterator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;出力ストリームイテレータ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/istreambuf_iterator.html&#34;&gt;&lt;code&gt;istreambuf_iterator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;入力ストリームバッファイテレータ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/ostreambuf_iterator.html&#34;&gt;&lt;code&gt;ostreambuf_iterator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;出力ストリームバッファイテレータ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭を指すイテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾の次を指すイテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/cbegin.html&#34;&gt;&lt;code&gt;cbegin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭を指す読み取り専用イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/cend.html&#34;&gt;&lt;code&gt;cend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾の次を指す読み取り専用イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/rbegin.html&#34;&gt;&lt;code&gt;rbegin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾を指す逆イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/rend.html&#34;&gt;&lt;code&gt;rend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭の前を指す逆イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rbegin (C++14) -- C++14対応として、rend非メンバ関数を追加</title>
      <link href="http://cpprefjp.github.io/reference/iterator/rbegin.html"/>
      <id>a930ed0c2ba82c561e7dae7027cce3939c0bf845:reference/iterator/rbegin.md</id>
      <updated>2015-02-06 15:24:35 +0900</updated>
      
        <content type="html">&lt;h1&gt;rbegin (C++14)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; rbegin(C&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c) &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; decltype(c.rbegin());                 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; rbegin(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; C&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c) &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; decltype(c.rbegin());           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;reverse_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; rbegin(T (&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;array)[N]);                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;E&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;reverse_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; E&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; rbegin(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;E&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;範囲の末尾を指す逆イテレータを取得する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) : コンテナの&lt;code&gt;rbegin()&lt;/code&gt;メンバ関数で、範囲の末尾を指す、逆イテレータを返す。&lt;/li&gt;
&lt;li&gt;(2) : コンテナの&lt;code&gt;rbegin()&lt;/code&gt;メンバ関数で、範囲の末尾を指す、読み取り専用逆イテレータを返す。&lt;/li&gt;
&lt;li&gt;(3) : 組み込み配列の末尾を指す、逆イテレータを返す。&lt;/li&gt;
&lt;li&gt;(4) : &lt;code&gt;initializer_list&lt;/code&gt;オブジェクトの末尾を指す、読み取り専用逆イテレータを返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;code&gt;c.rbegin();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;c.rbegin();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(3) : &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T*&amp;gt;(array + N)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(4) : &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const E*&amp;gt;(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/end.html&#34;&gt;&lt;code&gt;il.end()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x)
{
  &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンテナ&lt;/span&gt;
  {
    &lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

    decltype(v)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;reverse_iterator first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;rbegin&lt;/span&gt;(v);
    decltype(v)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;reverse_iterator last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/rend.html&#34;&gt;rend&lt;/a&gt;(v);

    &lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/for_each.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each&lt;/a&gt;(first, last, print);
  }
  &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 組み込み配列&lt;/span&gt;
  {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; ar[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;};

    &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;reverse_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;rbegin&lt;/span&gt;(ar);
    &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;reverse_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/rend.html&#34;&gt;rend&lt;/a&gt;(ar);

    &lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/for_each.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each&lt;/a&gt;(first, last, print);
  }
  &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 初期化子リスト&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;};

    &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;reverse_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;rbegin&lt;/span&gt;(init);
    &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;reverse_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/rend.html&#34;&gt;rend&lt;/a&gt;(init);

    &lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/for_each.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each&lt;/a&gt;(first, last, print);
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3 2 1 
6 5 4 
9 8 7 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++14&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++14 mode&lt;/a&gt;: 3.3&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++14 mode&lt;/a&gt;: 5.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2128&#34; target=&#34;_blank&#34;&gt;LWG Issue 2128. Absence of global functions &lt;code&gt;cbegin&lt;/code&gt;/&lt;code&gt;cend&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rend (C++14) -- C++14対応として、rend非メンバ関数を追加</title>
      <link href="http://cpprefjp.github.io/reference/iterator/rend.html"/>
      <id>a930ed0c2ba82c561e7dae7027cce3939c0bf845:reference/iterator/rend.md</id>
      <updated>2015-02-06 15:24:35 +0900</updated>
      
        <content type="html">&lt;h1&gt;rend (C++14)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; rend(C&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c) &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; decltype(c.rend());                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; rend(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; C&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c) &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; decltype(c.rend());             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;reverse_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; rend(T (&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;array)[N]);                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;E&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;reverse_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; E&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; rend(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;E&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;範囲の先頭の前を指す逆イテレータを取得する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) : コンテナの&lt;code&gt;rend()&lt;/code&gt;メンバ関数で、範囲の先頭の前を指す、逆イテレータを返す。&lt;/li&gt;
&lt;li&gt;(2) : コンテナの&lt;code&gt;rend()&lt;/code&gt;メンバ関数で、範囲の先頭の前を指す、読み取り専用逆イテレータを返す。&lt;/li&gt;
&lt;li&gt;(3) : 組み込み配列の先頭の前を指す、逆イテレータを返す。&lt;/li&gt;
&lt;li&gt;(4) : &lt;code&gt;initializer_list&lt;/code&gt;オブジェクトの先頭の前を指す、読み取り専用逆イテレータを返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;code&gt;c.rend();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;c.rend();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(3) : &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T*&amp;gt;(array)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(4) : &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const E*&amp;gt;(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/begin.html&#34;&gt;&lt;code&gt;il.begin()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x)
{
  &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンテナ&lt;/span&gt;
  {
    &lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

    decltype(v)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;reverse_iterator first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/rbegin.html&#34;&gt;rbegin&lt;/a&gt;(v);
    decltype(v)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;reverse_iterator last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;rend&lt;/span&gt;(v);

    &lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/for_each.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each&lt;/a&gt;(first, last, print);
  }
  &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 組み込み配列&lt;/span&gt;
  {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; ar[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;};

    &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;reverse_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/rbegin.html&#34;&gt;rbegin&lt;/a&gt;(ar);
    &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;reverse_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;rend&lt;/span&gt;(ar);

    &lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/for_each.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each&lt;/a&gt;(first, last, print);
  }
  &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 初期化子リスト&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;};

    &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;reverse_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/rbegin.html&#34;&gt;rbegin&lt;/a&gt;(init);
    &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;reverse_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;rend&lt;/span&gt;(init);

    &lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/for_each.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each&lt;/a&gt;(first, last, print);
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3 2 1 
6 5 4 
9 8 7 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++14&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++14 mode&lt;/a&gt;: 3.3&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++14 mode&lt;/a&gt;: 5.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2128&#34; target=&#34;_blank&#34;&gt;LWG Issue 2128. Absence of global functions &lt;code&gt;cbegin&lt;/code&gt;/&lt;code&gt;cend&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rbegin (C++14) -- s/rbegin()関数/rbegin()メンバ関数/</title>
      <link href="http://cpprefjp.github.io/reference/iterator/rbegin.html"/>
      <id>c5cf5606a78d59335242928c0850022a172bee68:reference/iterator/rbegin.md</id>
      <updated>2015-02-06 15:04:14 +0900</updated>
      
        <content type="html">&lt;h1&gt;rbegin (C++14)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; rbegin(C&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c) &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; decltype(c.rbegin());                 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; rbegin(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; C&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c) &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; decltype(c.rbegin());           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;reverse_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; rbegin(T (&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;array)[N]);                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;E&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;reverse_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; E&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; rbegin(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;E&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;範囲の末尾を指す逆イテレータを取得する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) : コンテナの&lt;code&gt;rbegin()&lt;/code&gt;メンバ関数で、範囲の末尾を指す、逆イテレータを返す。&lt;/li&gt;
&lt;li&gt;(2) : コンテナの&lt;code&gt;rbegin()&lt;/code&gt;メンバ関数で、範囲の末尾を指す、読み取り専用逆イテレータを返す。&lt;/li&gt;
&lt;li&gt;(3) : 組み込み配列の末尾を指す、逆イテレータを返す。&lt;/li&gt;
&lt;li&gt;(4) : &lt;code&gt;initializer_list&lt;/code&gt;オブジェクトの末尾を指す、読み取り専用逆イテレータを返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;code&gt;c.rbegin();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;c.rbegin();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(3) : &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T*&amp;gt;(array + N)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(4) : &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const E*&amp;gt;(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/end.html&#34;&gt;&lt;code&gt;il.end()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x)
{
  &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンテナ&lt;/span&gt;
  {
    &lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

    decltype(v)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;reverse_iterator first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;rbegin&lt;/span&gt;(v);
    decltype(v)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;reverse_iterator last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/rend.md.nolink&#34;&gt;rend&lt;/a&gt;(v);

    &lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/for_each.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each&lt;/a&gt;(first, last, print);
  }
  &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 組み込み配列&lt;/span&gt;
  {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; ar[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;};

    &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;reverse_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;rbegin&lt;/span&gt;(ar);
    &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;reverse_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/rend.md.nolink&#34;&gt;rend&lt;/a&gt;(ar);

    &lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/for_each.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each&lt;/a&gt;(first, last, print);
  }
  &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 初期化子リスト&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;};

    &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;reverse_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;rbegin&lt;/span&gt;(init);
    &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;reverse_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/rend.md.nolink&#34;&gt;rend&lt;/a&gt;(init);

    &lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/for_each.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each&lt;/a&gt;(first, last, print);
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3 2 1 
6 5 4 
9 8 7 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++14&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++14 mode&lt;/a&gt;: 3.3&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++14 mode&lt;/a&gt;: 5.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2128&#34; target=&#34;_blank&#34;&gt;LWG Issue 2128. Absence of global functions &lt;code&gt;cbegin&lt;/code&gt;/&lt;code&gt;cend&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iterator -- C++14対応として、rbegin非メンバ関数を追加</title>
      <link href="http://cpprefjp.github.io/reference/iterator.html"/>
      <id>2be54d04fcec0c323faf8f24fa77448e0f51781d:reference/iterator.md</id>
      <updated>2015-02-06 15:00:55 +0900</updated>
      
        <content type="html">&lt;h1&gt;iterator&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;ヘッダでは、イテレータに関する機能群を提供する。&lt;br /&gt;
イテレータは日本語では反復子とも呼ばれ、配列やコンテナのような範囲を横断する手段として使用できる。  &lt;/p&gt;
&lt;p&gt;C++標準ライブラリのイテレータは、以下のように階層的に定義される。&lt;br /&gt;
この階層はC++言語機能の継承と同じように見なせる。たとえば、入力イテレータと前方向イテレータはis a関係が成り立っており、前方向イテレータは入力イテレータと見なすことができる。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.github.com/cpprefjp/image/master/reference/iterator/iterators.png&#34; /&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;&lt;code&gt;iterator_traits&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;イテレータに関する型情報(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator.html&#34;&gt;&lt;code&gt;iterator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;イテレータを定義するための基本クラス(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;&lt;code&gt;input_iterator_tag&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;入力イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;&lt;code&gt;output_iterator_tag&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;出力イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;&lt;code&gt;forward_iterator_tag&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;前方向イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;&lt;code&gt;bidirectional_iterator_tag&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;双方向イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;&lt;code&gt;random_access_iterator_tag&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ランダムアクセスイテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/advance.html&#34;&gt;&lt;code&gt;advance&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;イテレータを進める(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;イテレータ間の距離を求める(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;イテレータを進める(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/prev.html&#34;&gt;&lt;code&gt;prev&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;イテレータを後方に進める(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;逆方向に進むイテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/make_reverse_iterator.html&#34;&gt;&lt;code&gt;make_reverse_iterator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;オブジェクトを作るヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/back_insert_iterator.html&#34;&gt;&lt;code&gt;back_insert_iterator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾に要素を挿入する出力イテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/front_insert_iterator.html&#34;&gt;&lt;code&gt;front_insert_iterator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭に要素を挿入する出力イテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/insert_iterator.html&#34;&gt;&lt;code&gt;insert_iterator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;任意の位置に要素を挿入する出力イテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/move_iterator.html&#34;&gt;&lt;code&gt;move_iterator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;間接参照時にムーブするイテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/istream_iterator.html&#34;&gt;&lt;code&gt;istream_iterator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;入力ストリームイテレータ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/ostream_iterator.html&#34;&gt;&lt;code&gt;ostream_iterator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;出力ストリームイテレータ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/istreambuf_iterator.html&#34;&gt;&lt;code&gt;istreambuf_iterator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;入力ストリームバッファイテレータ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/ostreambuf_iterator.html&#34;&gt;&lt;code&gt;ostreambuf_iterator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;出力ストリームバッファイテレータ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭を指すイテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾の次を指すイテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/cbegin.html&#34;&gt;&lt;code&gt;cbegin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭を指す読み取り専用イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/cend.html&#34;&gt;&lt;code&gt;cend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾の次を指す読み取り専用イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/rbegin.html&#34;&gt;&lt;code&gt;rbegin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾を指す逆イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/rend.md.nolink&#34;&gt;&lt;code&gt;rend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭の前を指す逆イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rbegin (C++14) -- C++14対応として、rbegin非メンバ関数を追加</title>
      <link href="http://cpprefjp.github.io/reference/iterator/rbegin.html"/>
      <id>2be54d04fcec0c323faf8f24fa77448e0f51781d:reference/iterator/rbegin.md</id>
      <updated>2015-02-06 15:00:55 +0900</updated>
      
        <content type="html">&lt;h1&gt;rbegin (C++14)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; rbegin(C&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c) &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; decltype(c.rbegin());                 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; rbegin(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; C&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c) &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; decltype(c.rbegin());           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;reverse_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; rbegin(T (&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;array)[N]);                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;E&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;reverse_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; E&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; rbegin(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;E&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;範囲の末尾を指す逆イテレータを取得する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) : コンテナの&lt;code&gt;rbegin()&lt;/code&gt;関数で、範囲の末尾を指す、逆イテレータを返す。&lt;/li&gt;
&lt;li&gt;(2) : コンテナの&lt;code&gt;rbegin()&lt;/code&gt;関数で、範囲の末尾を指す、読み取り専用逆イテレータを返す。&lt;/li&gt;
&lt;li&gt;(3) : 組み込み配列の末尾を指す、逆イテレータを返す。&lt;/li&gt;
&lt;li&gt;(4) : &lt;code&gt;initializer_list&lt;/code&gt;オブジェクトの末尾を指す、読み取り専用逆イテレータを返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;code&gt;c.rbegin();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;c.rbegin();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(3) : &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T*&amp;gt;(array + N)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(4) : &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const E*&amp;gt;(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/end.html&#34;&gt;&lt;code&gt;il.end()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x)
{
  &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンテナ&lt;/span&gt;
  {
    &lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

    decltype(v)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;reverse_iterator first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;rbegin&lt;/span&gt;(v);
    decltype(v)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;reverse_iterator last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/rend.md.nolink&#34;&gt;rend&lt;/a&gt;(v);

    &lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/for_each.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each&lt;/a&gt;(first, last, print);
  }
  &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 組み込み配列&lt;/span&gt;
  {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; ar[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;};

    &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;reverse_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;rbegin&lt;/span&gt;(ar);
    &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;reverse_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/rend.md.nolink&#34;&gt;rend&lt;/a&gt;(ar);

    &lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/for_each.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each&lt;/a&gt;(first, last, print);
  }
  &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 初期化子リスト&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;};

    &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;reverse_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;rbegin&lt;/span&gt;(init);
    &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;reverse_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/rend.md.nolink&#34;&gt;rend&lt;/a&gt;(init);

    &lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/for_each.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each&lt;/a&gt;(first, last, print);
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3 2 1 
6 5 4 
9 8 7 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++14&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++14 mode&lt;/a&gt;: 3.3&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++14 mode&lt;/a&gt;: 5.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2128&#34; target=&#34;_blank&#34;&gt;LWG Issue 2128. Absence of global functions &lt;code&gt;cbegin&lt;/code&gt;/&lt;code&gt;cend&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mt19937 (C++11) -- mt19937, mt19937_64 : 文末に句点が抜けていた。</title>
      <link href="http://cpprefjp.github.io/reference/random/mt19937.html"/>
      <id>e41cfb3eb318884655b308e5410fc26196f78736:reference/random/mt19937.md</id>
      <updated>2015-02-05 18:10:36 +0900</updated>
      
        <content type="html">&lt;h1&gt;mt19937 (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt;
    &lt;a href=&#34;http://cpprefjp.github.io/reference/random/mersenne_twister_engine.html&#34;&gt;mersenne_twister_engine&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
      &lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint_fast32_t.html&#34;&gt;uint_fast32_t&lt;/a&gt;,
      &lt;span style=&#34;color: #666666&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;624&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;397&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;31&lt;/span&gt;,
      &lt;span style=&#34;color: #666666&#34;&gt;0x9908b0df&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0xffffffff&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;,
      &lt;span style=&#34;color: #666666&#34;&gt;0x9d2c5680&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0xefc60000&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1812433253&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  mt19937;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;パラメータ設定済みの&lt;a href=&#34;http://cpprefjp.github.io/reference/random/mersenne_twister_engine.html&#34;&gt;&lt;code&gt;mersenne_twister_engine&lt;/code&gt;&lt;/a&gt;。&lt;br /&gt;
32ビット版のメルセンヌ・ツイスター。64ビット版は&lt;a href=&#34;http://cpprefjp.github.io/reference/random/mt19937_64.html&#34;&gt;&lt;code&gt;mt19937_64&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;19937という名称は、メルセンヌ・ツイスター法によって生成される乱数列の周期から来ている(2&lt;sup&gt;19937&lt;/sup&gt; - 1)。  &lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;mt19937&lt;/code&gt;型オブジェクトをデフォルト構築した場合、10000番目に生成される擬似乱数の値は&lt;code&gt;4123659995&lt;/code&gt;であること。&lt;/p&gt;
&lt;h2&gt;乱数列の周期&lt;/h2&gt;
&lt;p&gt;2&lt;sup&gt;19937&lt;/sup&gt; - 1&lt;/p&gt;
&lt;h2&gt;シード、および生成される値の型&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint_fast32_t.html&#34;&gt;&lt;code&gt;uint_fast32_t&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;random_device seed_gen;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mt19937 engine(seed_gen());

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint32_t&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; engine();
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;187052875
1658563244
2429782613
1877839754
2940926841
869137381
1607700369
747874684
3520793428
1774920624
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mt19937_64 (C++11) -- mt19937, mt19937_64 : 文末に句点が抜けていた。</title>
      <link href="http://cpprefjp.github.io/reference/random/mt19937_64.html"/>
      <id>e41cfb3eb318884655b308e5410fc26196f78736:reference/random/mt19937_64.md</id>
      <updated>2015-02-05 18:10:36 +0900</updated>
      
        <content type="html">&lt;h1&gt;mt19937_64 (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt;
    &lt;a href=&#34;http://cpprefjp.github.io/reference/random/mersenne_twister_engine.html&#34;&gt;mersenne_twister_engine&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
      &lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint_fast64_t.html&#34;&gt;uint_fast64_t&lt;/a&gt;,
      &lt;span style=&#34;color: #666666&#34;&gt;64&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;312&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;156&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;31&lt;/span&gt;,
      &lt;span style=&#34;color: #666666&#34;&gt;0xb5026f5aa96619e9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;29&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0x5555555555555555&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;17&lt;/span&gt;,
      &lt;span style=&#34;color: #666666&#34;&gt;0x71d67fffeda60000&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0xfff7eee000000000&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;43&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6364136223846793005&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  mt19937_64;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;パラメータ設定済みの&lt;a href=&#34;http://cpprefjp.github.io/reference/random/mersenne_twister_engine.html&#34;&gt;&lt;code&gt;mersenne_twister_engine&lt;/code&gt;&lt;/a&gt;。&lt;br /&gt;
64ビット版のメルセンヌ・ツイスター。32ビット版は&lt;a href=&#34;http://cpprefjp.github.io/reference/random/mt19937.html&#34;&gt;&lt;code&gt;mt19937&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;19937という名称は、メルセンヌ・ツイスター法によって生成される乱数列の周期から来ている(2&lt;sup&gt;19937&lt;/sup&gt; - 1)。  &lt;/p&gt;
&lt;p&gt;この乱数生成器は、64ビット環境以上では、それ未満の環境に比べて高速に動作する。また、64ビット整数をシード値としてとれるため、32ビット版の&lt;a href=&#34;http://cpprefjp.github.io/reference/random/mt19937.html&#34;&gt;&lt;code&gt;mt19937&lt;/code&gt;&lt;/a&gt;に比べて、さらなる乱雑さを期待できる。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;mt19937_64&lt;/code&gt;型オブジェクトをデフォルト構築した場合、10000番目に生成される擬似乱数の値は&lt;code&gt;9981545732273789042&lt;/code&gt;であること。&lt;/p&gt;
&lt;h2&gt;乱数列の周期&lt;/h2&gt;
&lt;p&gt;2&lt;sup&gt;19937&lt;/sup&gt; - 1&lt;/p&gt;
&lt;h2&gt;シード、および生成される値の型&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint_fast64_t.html&#34;&gt;&lt;code&gt;uint_fast64_t&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;random_device seed_gen;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mt19937_64 engine(seed_gen());

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint64_t&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; engine();
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1621025592805379139
4514793392314528655
4543694396077351855
3612539632838912606
2625719985131503282
3238788996565779147
3317678171748965379
12700229574828234289
8869797388973705309
9625202625077775903
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>condition_variable (C++11) -- condition_variable[_any] : 概要文章を改行調整した。読みやすさのために、スラッシュを全角にした。</title>
      <link href="http://cpprefjp.github.io/reference/condition_variable/condition_variable.html"/>
      <id>35b11b8f741f48125e40057390c0d76977bd7101:reference/condition_variable/condition_variable.md</id>
      <updated>2015-02-05 16:50:01 +0900</updated>
      
        <content type="html">&lt;h1&gt;condition_variable (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;condition_variable&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;condition_variable&lt;/code&gt;は、特定のイベントもしくは条件を満たすまでスレッドの実行を待機するためのクラスである。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable/wait.html&#34;&gt;&lt;code&gt;wait()&lt;/code&gt;&lt;/a&gt;／&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable/wait_for.html&#34;&gt;&lt;code&gt;wait_for()&lt;/code&gt;&lt;/a&gt;／&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable/wait_until.html&#34;&gt;&lt;code&gt;wait_until()&lt;/code&gt;&lt;/a&gt;を使用してスレッドを待機させ、&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable/notify_one.html&#34;&gt;&lt;code&gt;notify_one()&lt;/code&gt;&lt;/a&gt;／&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable/notify_all.html&#34;&gt;&lt;code&gt;notify_all()&lt;/code&gt;&lt;/a&gt;によって待機しているスレッドを起床させる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;condition_variable&lt;/code&gt;は&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable_any.html&#34;&gt;&lt;code&gt;condition_variable_any&lt;/code&gt;&lt;/a&gt;と違い、ロック型として&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/unique_lock.html&#34;&gt;&lt;code&gt;unique_lock&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/mutex.html&#34;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;のみをサポートしている。これは、処理系に&lt;code&gt;condition_variable&lt;/code&gt;クラスに最も効率の良い実装を許可するためである。（例：POSIXスレッド環境においては&lt;code&gt;condition_variable&lt;/code&gt;が&lt;code&gt;pthread_cond_t&lt;/code&gt;の、&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/mutex.html&#34;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/a&gt;が&lt;code&gt;pthread_mutex_t&lt;/code&gt;の単純なラッパクラスとして実装されうる）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;condition_variable&lt;/code&gt;の適切な利用については、&lt;a href=&#34;http://cpprefjp.github.io/article/lib/how_to_use_cv.html&#34;&gt;条件変数の利用方法&lt;/a&gt;も参照のこと。&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable/op_constructor.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable/op_destructor.html&#34;&gt;&lt;code&gt;(destructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator=(const condition_variable&amp;amp;) = delete;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable/notify_one.html&#34;&gt;&lt;code&gt;notify_one&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;待機しているスレッドをひとつ起床させる&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable/notify_all.html&#34;&gt;&lt;code&gt;notify_all&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;待機している全てのスレッドを起床させる&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable/wait.html&#34;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;起床されるまで待機する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable/wait_for.html&#34;&gt;&lt;code&gt;wait_for&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;相対時間のタイムアウトを指定して、起床されるまで待機する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable/wait_until.html&#34;&gt;&lt;code&gt;wait_until&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;絶対時間のタイムアウトを指定して、起床されるまで待機する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable/native_handle.html&#34;&gt;&lt;code&gt;native_handle&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;条件変数のハンドルを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;native_handle_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実装依存のハンドル型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable/notify_all_at_thread_exit.html&#34;&gt;&lt;code&gt;notify_all_at_thread_exit&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;現在のスレッド終了時に、条件変数が待っている全てのスレッドを起床させる&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;condition_variable&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;mutex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;thread&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; ProcessData {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex mtx_;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;condition_variable cond_;

  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; data_ready_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 処理に必要なデータの準備をする&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;prepare_data_for_processing&lt;/span&gt;()
  {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ...準備処理...&lt;/span&gt;

    {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lock_guard&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lk(mtx_);
      data_ready_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;;
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 準備完了したので待機スレッドを起床させる&lt;/span&gt;
    cond_.notify_one();
  }

  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;wait_for_data_to_process&lt;/span&gt;()
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_lock&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lk(mtx_);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// データの準備ができるまで待機してから処理する&lt;/span&gt;
    cond_.wait(lk, [&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;] { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; data_ready_; });
    process_data();
  }

&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;process_data&lt;/span&gt;()
  {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ...データを処理する...&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;process data&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  ProcessData p;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; t1([&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;] { p.prepare_data_for_processing(); });
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; t2([&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;] { p.wait_for_data_to_process(); });

  t1.join();
  t2.join();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;process data
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 11.0, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://pages.cs.wisc.edu/~remzi/OSTEP/threads-cv.pdf&#34; target=&#34;_blank&#34;&gt;Condition Variables - Operating Systems: Three Easy Pieces&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>condition_variable_any (C++11) -- condition_variable[_any] : 概要文章を改行調整した。読みやすさのために、スラッシュを全角にした。</title>
      <link href="http://cpprefjp.github.io/reference/condition_variable/condition_variable_any.html"/>
      <id>35b11b8f741f48125e40057390c0d76977bd7101:reference/condition_variable/condition_variable_any.md</id>
      <updated>2015-02-05 16:50:01 +0900</updated>
      
        <content type="html">&lt;h1&gt;condition_variable_any (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;condition_variable_any&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;condition_variable_any&lt;/code&gt;は、特定のイベントもしくは条件を満たすまでスレッドの実行を待機するためのクラスである。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable_any/wait.html&#34;&gt;&lt;code&gt;wait()&lt;/code&gt;&lt;/a&gt;／&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable_any/wait_for.html&#34;&gt;&lt;code&gt;wait_for()&lt;/code&gt;&lt;/a&gt;／&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable_any/wait_until.html&#34;&gt;&lt;code&gt;wait_until()&lt;/code&gt;&lt;/a&gt;を使用してスレッドを待機させ、&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable_any/notify_one.html&#34;&gt;&lt;code&gt;notify_one()&lt;/code&gt;&lt;/a&gt;／&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable_any/notify_all.html&#34;&gt;&lt;code&gt;notify_all()&lt;/code&gt;&lt;/a&gt;によって待機しているスレッドを起床させる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable.html&#34;&gt;&lt;code&gt;condition_variable&lt;/code&gt;&lt;/a&gt;はロック型として&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/unique_lock.html&#34;&gt;&lt;code&gt;unique_lock&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/mutex.html&#34;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;のみをサポートしているが、&lt;code&gt;condition_variable_any&lt;/code&gt;はあらゆるロック型をサポートしている。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;condition_variable_any&lt;/code&gt;の適切な利用については、&lt;a href=&#34;http://cpprefjp.github.io/article/lib/how_to_use_cv.html&#34;&gt;条件変数の利用方法&lt;/a&gt;も参照のこと。&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable_any/op_constructor.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable_any/op_destructor.html&#34;&gt;&lt;code&gt;(destructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator=(const conditon_variable_any&amp;amp;) = delete;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable_any/notify_one.html&#34;&gt;&lt;code&gt;notify_one&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;待機しているスレッドをひとつ起床させる&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable_any/notify_all.html&#34;&gt;&lt;code&gt;notify_all&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;待機している全てのスレッドを起床させる&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable_any/wait.html&#34;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;起床されるまで待機する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable_any/wait_for.html&#34;&gt;&lt;code&gt;wait_for&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;相対時間のタイムアウトを指定して、起床されるまで待機する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable_any/wait_until.html&#34;&gt;&lt;code&gt;wait_until&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;絶対時間のタイムアウトを指定して、起床されるまで待機する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;condition_variable&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;mutex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;thread&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; ProcessData {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;recursive_mutex mtx_;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;condition_variable_any cond_;

  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; data_ready_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 処理に必要なデータの準備をする&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;prepare_data_for_processing&lt;/span&gt;()
  {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ...準備処理...&lt;/span&gt;

    {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lock_guard&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;recursive_mutex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lk(mtx_);
      data_ready_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;;
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 準備完了したので待機スレッドを起床させる&lt;/span&gt;
    cond_.notify_one();
  }

  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;wait_for_data_to_process&lt;/span&gt;()
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_lock&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;recursive_mutex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lk(mtx_);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// データの準備ができるまで待機してから処理する&lt;/span&gt;
    cond_.wait(lk, [&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;] { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; data_ready_; });
    process_data();
  }

&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;process_data&lt;/span&gt;()
  {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ...データを処理する...&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;process data&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  ProcessData p;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; t1([&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;] { p.prepare_data_for_processing(); });
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; t2([&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;] { p.wait_for_data_to_process(); });

  t1.join();
  t2.join();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;process data
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 11.0, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
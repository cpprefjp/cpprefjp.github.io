<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-06-08T08:39:38.343655</updated>
  <id>9d169eb1-6fea-4e67-92d9-c8699e6d137c</id>

  
    <entry>
      <title>page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- 関数の雛形ページ : 非推奨・削除の書き方が記載されていなかった</title>
      <link href="https://cpprefjp.github.io/start_editing/function_template_page.html"/>
      <id>1007613676069369e0090ad3305b504e2e83815c:start_editing/function_template_page.md</id>
      <updated>2023-06-08T17:35:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/function_template_page.md b/start_editing/function_template_page.md
index ab695a3b1..a8d92a04f 100644
--- a/start_editing/function_template_page.md
+++ b/start_editing/function_template_page.md
@@ -42,6 +42,10 @@
 void definition(); // 関数・変数・定数の宣言を記述します。
 ```
 
+(非推奨・削除となった場合は、その旨を記載し、代わりの機能に誘導します)
+
+(例：この関数は、C++14から非推奨となり、C++17で削除された。代わりに[`shuffle()`](/reference/algorithm/shuffle.md)関数を使用すること。)
+
 ## 概要
 (ここには、関数・変数・定数の概要を記述します。必須事項です。)
 
@@ -103,6 +107,10 @@ void definition(); // 関数・変数・定数の宣言を記述します。
 (ここには、関数・変数・定数を説明するにあたっての、補足事項を記述します。とくになければ、項目を削除してください。)
 
 
+## 非推奨・削除の詳細
+(非推奨・削除となった背景を記載します。)
+
+
 ## 例
 ```cpp example
 // (ここには、関数・変数・定数を解説するための、サンプルコードを記述します。)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ほとんどの`volatile`を非推奨化 -- 打ち消し線から追記へ</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecating_volatile.html"/>
      <id>afc7241e8a6dd56adef175e6b1174aa743c93f87:lang/cpp20/deprecating_volatile.md</id>
      <updated>2023-06-08T16:49:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/deprecating_volatile.md b/lang/cpp20/deprecating_volatile.md
index 9cded3cda..8de6ac723 100644
--- a/lang/cpp20/deprecating_volatile.md
+++ b/lang/cpp20/deprecating_volatile.md
@@ -7,7 +7,8 @@ C++20より、`volatile`の本来の役割に照らして不正確、あるい
 
 非推奨となるのは次のもの
 
-1. ~`volatile`値に対する複合代入演算子（算術型・ポインタ型のみ）~
+1. `volatile`値に対する複合代入演算子（算術型・ポインタ型のみ）
+    - C++23で非推奨化解除
 2. `volatile`値に対するインクリメント／デクリメント演算子（算術型・ポインタ型のみ）
 3. 間に`volatile`値がある場合の連鎖した代入演算子（非クラス型のみ）
 4. 関数引数のトップレベル`volatile`修飾
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ほとんどの`volatile`を非推奨化 -- 追記と打ち消し線修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecating_volatile.html"/>
      <id>13db5df18b405032ace43e3738009cda0f18bfe0:lang/cpp20/deprecating_volatile.md</id>
      <updated>2023-06-08T16:25:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/deprecating_volatile.md b/lang/cpp20/deprecating_volatile.md
index f2501ad9a..9cded3cda 100644
--- a/lang/cpp20/deprecating_volatile.md
+++ b/lang/cpp20/deprecating_volatile.md
@@ -7,7 +7,7 @@ C++20より、`volatile`の本来の役割に照らして不正確、あるい
 
 非推奨となるのは次のもの
 
-1. ~~`volatile`値に対する複合代入演算子（算術型・ポインタ型のみ）~~
+1. ~`volatile`値に対する複合代入演算子（算術型・ポインタ型のみ）~
 2. `volatile`値に対するインクリメント／デクリメント演算子（算術型・ポインタ型のみ）
 3. 間に`volatile`値がある場合の連鎖した代入演算子（非クラス型のみ）
 4. 関数引数のトップレベル`volatile`修飾
@@ -311,7 +311,7 @@ volatile int i;
 
 // iの領域へ何回のアクセスが発生するか不透明
 // これはどちらも非推奨化
-i += 42;
+i += 42;  // C++23で非推奨化解除
 ++i;
 ```
 
@@ -380,4 +380,4 @@ volatile device dev;
 - [P1831R0 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1831r0.html)
 - [P1831R0 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
 - [P2327R0 De-deprecating volatile compound assignment](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2327r1.pdf)
-- [CWG Issue 2654. Un-deprecation of compound volatile assignments](https://cplusplus.github.io/CWG/issues/2654.html)
\ No newline at end of file
+- [CWG Issue 2654. Un-deprecation of compound volatile assignments](https://cplusplus.github.io/CWG/issues/2654.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ほとんどの`volatile`を非推奨化 -- P23227R0とCWG2654について追記</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecating_volatile.html"/>
      <id>2e52939f7e606be73a4e5fdb0fb5689eef9f2c68:lang/cpp20/deprecating_volatile.md</id>
      <updated>2023-06-08T16:15:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/deprecating_volatile.md b/lang/cpp20/deprecating_volatile.md
index 7ed5700a4..f2501ad9a 100644
--- a/lang/cpp20/deprecating_volatile.md
+++ b/lang/cpp20/deprecating_volatile.md
@@ -7,7 +7,7 @@ C++20より、`volatile`の本来の役割に照らして不正確、あるい
 
 非推奨となるのは次のもの
 
-1. `volatile`値に対する複合代入演算子（算術型・ポインタ型のみ）
+1. ~~`volatile`値に対する複合代入演算子（算術型・ポインタ型のみ）~~
 2. `volatile`値に対するインクリメント／デクリメント演算子（算術型・ポインタ型のみ）
 3. 間に`volatile`値がある場合の連鎖した代入演算子（非クラス型のみ）
 4. 関数引数のトップレベル`volatile`修飾
@@ -66,6 +66,8 @@ a--;
 
 この場合、これらの複合的な演算子を用いず、明示的に「読み出し - 更新 - 書き込み」を分けて書くことで`volatile`変数へのアクセスをコード上でも明確にする事が推奨される。
 
+ただし、複合代入演算子についてはC++23で非推奨化が解除された。
+
 ### 連鎖した代入演算子
 
 代入演算子の一部の用法には、複合代入演算子・インクリメント演算子と同様の問題がある。
@@ -377,3 +379,5 @@ volatile device dev;
 - [P1152R4 Deprecating `volatile`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1152r4.html)
 - [P1831R0 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1831r0.html)
 - [P1831R0 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
+- [P2327R0 De-deprecating volatile compound assignment](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2327r1.pdf)
+- [CWG Issue 2654. Un-deprecation of compound volatile assignments](https://cplusplus.github.io/CWG/issues/2654.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>generator -- generator : クラス定義のセミコロン忘れを修正</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator.html"/>
      <id>8794a91852bd41ca1ca6aec28e304d2279c366cf:reference/generator/generator.md</id>
      <updated>2023-06-08T00:23:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator.md b/reference/generator/generator.md
index 8b8ada27b..47ac8b9c7 100644
--- a/reference/generator/generator.md
+++ b/reference/generator/generator.md
@@ -9,7 +9,7 @@ namespace std {
   template&amp;lt;class Ref, class V = void, class Allocator = void&amp;gt;
   class generator : public ranges::view_interface&amp;lt;generator&amp;lt;Ref, V, Allocator&amp;gt;&amp;gt; {
     ...
-  }
+  };
 
   namespace pmr {
     template&amp;lt;class R, class V = void&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
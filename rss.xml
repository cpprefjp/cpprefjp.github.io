<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-02-04T14:48:21.417330</updated>
  <id>8058a582-8b5b-468a-b8fd-433da73c1377</id>

  
    <entry>
      <title>expected -- expected/expected: and_then,or_else,transform,transform_error(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.html"/>
      <id>7a5214d449873dbd48f51bb2a022775430b6aa89:reference/expected/expected.md</id>
      <updated>2023-02-04T23:35:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.md b/reference/expected/expected.md
index ecb45517a..018ba2380 100644
--- a/reference/expected/expected.md
+++ b/reference/expected/expected.md
@@ -60,10 +60,10 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`and_then`](expected/and_then.md.nolink)   | 正常値に対して関数を適用する | C++23 |
-| [`or_else`](expected/or_else.md.nolink)     | エラー値に対して関数を適用する | C++23 |
-| [`transform`](expected/transform.md.nolink) | 正常値を変換する | C++23 |
-| [`transform_error`](expected/transform_error.md.nolink) | エラー値を変換する | C++23 |
+| [`and_then`](expected/and_then.md) | 正常値に対して関数を適用する | C++23 |
+| [`or_else`](expected/or_else.md) | エラー値に対して関数を適用する | C++23 |
+| [`transform`](expected/transform.md) | 正常値を変換する | C++23 |
+| [`transform_error`](expected/transform_error.md) | エラー値を変換する | C++23 |
 
 ### 比較
 
@@ -120,6 +120,8 @@ int main()
 ```
 * std::expected[color ff0000]
 * std::unexpected[link unexpected.md]
+* *v[link expected/op_deref.md]
+* v.error()[link expected/error.md]
 * std::quoted[link ../iomanip/quoted.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>and_then -- expected/expected: and_then,or_else,transform,transform_error(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/and_then.html"/>
      <id>7a5214d449873dbd48f51bb2a022775430b6aa89:reference/expected/expected/and_then.md</id>
      <updated>2023-02-04T23:35:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/and_then.md b/reference/expected/expected/and_then.md
new file mode 100644
index 000000000..4f0062460
--- /dev/null
+++ b/reference/expected/expected/and_then.md
@@ -0,0 +1,121 @@
+# and_then
+* expected[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* expected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class F&amp;gt; constexpr auto and_then(F&amp;amp;&amp;amp; f) &amp;amp;;        // (1)
+template&amp;lt;class F&amp;gt; constexpr auto and_then(F&amp;amp;&amp;amp; f) const &amp;amp;;  // (2)
+template&amp;lt;class F&amp;gt; constexpr auto and_then(F&amp;amp;&amp;amp; f) &amp;amp;&amp;amp;;       // (3)
+template&amp;lt;class F&amp;gt; constexpr auto and_then(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
+```
+
+## 概要
+正常値を保持していれば、正常値に対して`f`を適用した結果を`expected`として返す。
+エラー値を保持していれば、そのまま返す。
+
+
+## テンプレートパラメータ制約
+- (1), (2) : [`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;E&amp;gt; == true`
+- (3), (4) : [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;E&amp;gt; == true`
+
+
+## 適格要件
+- (1), (2) : 型`U`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`value()`](value.md)`)&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `U`が`expected`の特殊化である
+    - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;U::error_type, E&amp;gt; == true`
+- (3), (4) : 型`U`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`))&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `U`が`expected`の特殊化である
+    - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;U::error_type, E&amp;gt; == true`
+
+
+## 効果
+- (1), (2) : 次の処理と等価
+    ```cpp
+    if (has_value())
+      return invoke(std::forward&amp;lt;F&amp;gt;(f), value());
+    else
+      return U(unexpect, error());
+    ```
+    * has_value[link has_value.md]
+    * value()[link value.md]
+    * error()[link error.md]
+    * unexpect[link ../unexpect_t.md]
+    * invoke[link /reference/functional/invoke.md]
+    * std::forward[link /reference/utility/forward.md]
+
+- (3), (4) : 次の処理と等価
+    ```cpp
+    if (has_value())
+      return invoke(std::forward&amp;lt;F&amp;gt;(f), std::move(value()));
+    else
+      return U(unexpect, std::move(error()));
+    ```
+    * has_value[link has_value.md]
+    * value()[link value.md]
+    * error()[link error.md]
+    * unexpect[link ../unexpect_t.md]
+    * invoke[link /reference/functional/invoke.md]
+    * std::forward[link /reference/utility/forward.md]
+    * std::move[link /reference/utility/move.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+// 正数なら2倍／それ以外はエラー値を返す関数
+std::expected&amp;lt;int, std::string&amp;gt; twice(int n)
+{
+  if (0 &amp;lt; n) {
+    return n * 2;
+  } else {
+    return std::unexpected{&amp;#34;out of domain&amp;#34;};
+  }
+}
+
+int main()
+{
+  std::expected&amp;lt;int, std::string&amp;gt; v1 = 1;
+  assert(v1.and_then(twice).value() == 2);
+
+  std::expected&amp;lt;int, std::string&amp;gt; v2 = 0;
+  assert(v2.and_then(twice).error() == &amp;#34;out of domain&amp;#34;);
+
+  std::expected&amp;lt;int, std::string&amp;gt; e1 = std::unexpected{&amp;#34;NaN&amp;#34;};
+  assert(e1.and_then(twice).error() == &amp;#34;NaN&amp;#34;);
+}
+```
+* and_then[color ff0000]
+* value()[link value.md]
+* error()[link error.md]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`or_else()`](or_else.md)
+- [`transform()`](transform.md)
+- [`transform_error()`](transform_error.md)
+
+
+## 参照
+- [P2505R5 Monadic Functions for `std::expected`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2505r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>or_else -- expected/expected: and_then,or_else,transform,transform_error(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/or_else.html"/>
      <id>7a5214d449873dbd48f51bb2a022775430b6aa89:reference/expected/expected/or_else.md</id>
      <updated>2023-02-04T23:35:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/or_else.md b/reference/expected/expected/or_else.md
new file mode 100644
index 000000000..9cac72496
--- /dev/null
+++ b/reference/expected/expected/or_else.md
@@ -0,0 +1,125 @@
+# or_else
+* expected[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* expected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class F&amp;gt; constexpr auto or_else(F&amp;amp;&amp;amp; f) &amp;amp;;        // (1)
+template&amp;lt;class F&amp;gt; constexpr auto or_else(F&amp;amp;&amp;amp; f) const &amp;amp;;  // (2)
+template&amp;lt;class F&amp;gt; constexpr auto or_else(F&amp;amp;&amp;amp; f) &amp;amp;&amp;amp;;       // (3)
+template&amp;lt;class F&amp;gt; constexpr auto or_else(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
+```
+
+## 概要
+エラー値を保持していれば、エラー値に対して`f`を適用した結果を`expected`として返す。
+正常値を保持していれば、そのまま返す。
+
+
+## テンプレートパラメータ制約
+- (1), (2) : [`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;T&amp;gt; == true`
+- (3), (4) : [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;T&amp;gt; == true`
+
+
+## 適格要件
+- (1), (2) : 型`G`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`value()`](value.md)`)&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `G`が`expected`の特殊化である
+    - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;G::value_type, T&amp;gt; == true`
+- (3), (4) : 型`G`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`))&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `G`が`expected`の特殊化である
+    - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;G::value_type, T&amp;gt; == true`
+
+
+## 効果
+- (1), (2) : 次の処理と等価
+    ```cpp
+    if (has_value())
+      return G(in_place, value());
+    else
+      return invoke(std::forward&amp;lt;F&amp;gt;(f), error());
+    ```
+    * has_value()[link has_value.md]
+    * value()[link value.md]
+    * error()[link error.md]
+    * invoke[link /reference/functional/invoke.md]
+    * in_place[link /reference/utility/in_place_t.md]
+    * std::forward[link /reference/utility/forward.md]
+
+- (3), (4) : 次の処理と等価
+    ```cpp
+    if (has_value())
+      return G(in_place, std::move(value()));
+    else
+      return invoke(std::forward&amp;lt;F&amp;gt;(f), std::move(error()));
+    ```
+    * has_value()[link has_value.md]
+    * value()[link value.md]
+    * error()[link error.md]
+    * invoke[link /reference/functional/invoke.md]
+    * in_place[link /reference/utility/in_place_t.md]
+    * std::forward[link /reference/utility/forward.md]
+    * std::move[link /reference/utility/move.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;charconv&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+
+// 文字列を正常値(数値)として再解釈する関数
+std::expected&amp;lt;int, std::string&amp;gt; parse(std::string_view s)
+{
+  int val{};
+  auto [ptr, ec] = std::from_chars(s.begin(), s.end(), val);
+  if (ec == std::errc{} &amp;amp;&amp;amp; ptr == s.end()) {
+    return val;
+  } else {
+    return std::unexpected&amp;lt;std::string&amp;gt;{s};
+  }
+}
+
+int main()
+{
+  std::expected&amp;lt;int, std::string&amp;gt; v1 = 1;
+  assert(v1.or_else(parse).value() == 1);
+
+  std::expected&amp;lt;int, std::string&amp;gt; e1 = std::unexpected{&amp;#34;123&amp;#34;};
+  assert(e1.or_else(parse) == 123);
+
+  std::expected&amp;lt;int, std::string&amp;gt; e2 = std::unexpected{&amp;#34;bad&amp;#34;};
+  assert(e2.or_else(parse).error() == &amp;#34;bad&amp;#34;);
+}
+```
+* or_else[color ff0000]
+* value()[link value.md]
+* error()[link error.md]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`and_then()`](and_then.md)
+- [`transform()`](transform.md)
+- [`transform_error()`](transform_error.md)
+
+
+## 参照
+- [P2505R5 Monadic Functions for `std::expected`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2505r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transform -- expected/expected: and_then,or_else,transform,transform_error(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/transform.html"/>
      <id>7a5214d449873dbd48f51bb2a022775430b6aa89:reference/expected/expected/transform.md</id>
      <updated>2023-02-04T23:35:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/transform.md b/reference/expected/expected/transform.md
new file mode 100644
index 000000000..13f65dfbd
--- /dev/null
+++ b/reference/expected/expected/transform.md
@@ -0,0 +1,99 @@
+# transform
+* expected[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* expected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class F&amp;gt; constexpr auto transform(F&amp;amp;&amp;amp; f) &amp;amp;;        // (1)
+template&amp;lt;class F&amp;gt; constexpr auto transform(F&amp;amp;&amp;amp; f) const &amp;amp;;  // (2)
+template&amp;lt;class F&amp;gt; constexpr auto transform(F&amp;amp;&amp;amp; f) &amp;amp;&amp;amp;;       // (3)
+template&amp;lt;class F&amp;gt; constexpr auto transform(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
+```
+
+## 概要
+正常値を保持していれば、正常値に対して`f`を適用した結果を`expected`の正常値として格納して返す。
+エラー値を保持していれば、そのまま返す。
+
+
+## テンプレートパラメータ制約
+- (1), (2) : [`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;E&amp;gt; == true`
+- (3), (4) : [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;E&amp;gt; == true`
+
+
+## 適格要件
+- (1), (2) : 型`U`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`value()`](value.md)`)&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `U`が`expected`の有効な正常値型である
+    - [`is_void_t`](/reference/type_traits/is_void.md)`&amp;lt;U&amp;gt; == false`のとき、宣言`U u(`[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`value()`](value.md)`));`が妥当である
+- (3), (4) : 型`U`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`))&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `U`が`expected`の有効な正常値型である
+    - [`is_void_t`](/reference/type_traits/is_void.md)`&amp;lt;U&amp;gt; == false`のとき、宣言`U u(`[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`)));`が妥当である
+
+
+## 効果
+- (1), (2) : 次の効果をもつ
+    - エラー値を保持していたら、`expected&amp;lt;U, E&amp;gt;(`[`unexpect`](../unexpect_t.md)`,` [`error()`](error.md)`)`を返す。
+    - 型`U`が（CV修飾された）`void`でなければ、正常値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`value()`](value.md)`)`で非直接リスト初期化した`expected&amp;lt;U, E&amp;gt;`オブジェクトを返す。
+    - そうでなければ、[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`value()`](value.md)`)`を評価し、`expected&amp;lt;U, E&amp;gt;()`を返す。
+
+- (3), (4) : 次の効果をもつ
+    - エラー値を保持していたら、`expected&amp;lt;U, E&amp;gt;(`[`unexpect`](../unexpect_t.md)`,` [`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))`を返す。
+    - 型`U`が（CV修飾された）`void`でなければ、正常値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`))`で非直接リスト初期化した`expected&amp;lt;U, E&amp;gt;`オブジェクトを返す。
+    - そうでなければ、[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`))`を評価し、`expected&amp;lt;U, E&amp;gt;()`を返す。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;numeric&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+// 1..N数列を生成する関数
+std::vector&amp;lt;int&amp;gt; make_seq(int n)
+{
+  std::vector&amp;lt;int&amp;gt; seq(n, 0);
+  std::iota(seq.begin(), seq.end(), 1);
+  return seq;
+}
+
+int main()
+{
+  std::expected&amp;lt;int, std::string&amp;gt; v1 = 3;
+  assert((v1.transform(make_seq).value() == std::vector&amp;lt;int&amp;gt;{1,2,3}));
+
+  std::expected&amp;lt;int, std::string&amp;gt; e1 = std::unexpected{&amp;#34;NaN&amp;#34;};
+  assert(e1.transform(make_seq).error() == &amp;#34;NaN&amp;#34;);
+}
+```
+* transform[color ff0000]
+* value()[link value.md]
+* error()[link error.md]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`and_then()`](and_then.md)
+- [`or_else()`](or_else.md)
+- [`transform_error()`](transform_error.md)
+
+
+## 参照
+- [P2505R5 Monadic Functions for `std::expected`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2505r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transform_error -- expected/expected: and_then,or_else,transform,transform_error(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/transform_error.html"/>
      <id>7a5214d449873dbd48f51bb2a022775430b6aa89:reference/expected/expected/transform_error.md</id>
      <updated>2023-02-04T23:35:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/transform_error.md b/reference/expected/expected/transform_error.md
new file mode 100644
index 000000000..160c97d4b
--- /dev/null
+++ b/reference/expected/expected/transform_error.md
@@ -0,0 +1,94 @@
+# transform_error
+* expected[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* expected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class F&amp;gt; constexpr auto transform_error(F&amp;amp;&amp;amp; f) &amp;amp;;        // (1)
+template&amp;lt;class F&amp;gt; constexpr auto transform_error(F&amp;amp;&amp;amp; f) const &amp;amp;;  // (2)
+template&amp;lt;class F&amp;gt; constexpr auto transform_error(F&amp;amp;&amp;amp; f) &amp;amp;&amp;amp;;       // (3)
+template&amp;lt;class F&amp;gt; constexpr auto transform_error(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
+```
+
+## 概要
+エラー値を保持していれば、エラー値に対して`f`を適用した結果を`expected`のエラー値として格納して返す。
+正常値を保持していれば、そのまま返す。
+
+
+## テンプレートパラメータ制約
+- (1), (2) : [`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;T&amp;gt; == true`
+- (3), (4) : [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;T&amp;gt; == true`
+
+
+## 適格要件
+- (1), (2) : 型`G`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`error()`](error.md)`)&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `G`が`expected`の有効な値型である
+    - 宣言`G g(`[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`error()`](error.md)`));`が妥当である
+- (3), (4) : 型`G`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `G`が`expected`の有効な値型である
+    - 宣言`G g(`[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`)));`が妥当である
+
+
+## 効果
+- (1), (2) : 次の効果をもつ
+    - 正常値を保持していたら、`expected&amp;lt;T, G&amp;gt;(`[`in_place`](/reference/utility/in_place_t.md)`,` [`value()`](value.md)`)`を返す。
+    - エラー値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`error()`](error.md)`)`で非直接リスト初期化した`expected&amp;lt;T, G&amp;gt;`オブジェクトを返す。
+- (3), (4) : 次の効果をもつ
+    - エラー値を保持していたら、`expected&amp;lt;U, E&amp;gt;(`[`unexpect`](../unexpect_t.md)`,` [`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))`を返す。
+    - 正常値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))`で非直接リスト初期化した`expected&amp;lt;T, G&amp;gt;`オブジェクトを返す。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+// 文字列を逆順に並べ替える関数
+std::string revstr(std::string str)
+{
+  std::reverse(str.begin(), str.end());
+  return str;
+}
+
+int main()
+{
+  std::expected&amp;lt;int, std::string&amp;gt; v1 = 42;
+  assert(v1.transform_error(revstr).value() == 42);
+
+  std::expected&amp;lt;int, std::string&amp;gt; e1 = std::unexpected{&amp;#34;Oops&amp;#34;};
+  assert(e1.transform_error(revstr).error() == &amp;#34;spoO&amp;#34;);
+}
+```
+* transform_error[color ff0000]
+* value()[link value.md]
+* error()[link error.md]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`and_then()`](and_then.md)
+- [`or_else()`](or_else.md)
+- [`transform()`](transform.md)
+
+
+## 参照
+- [P2505R5 Monadic Functions for `std::expected`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2505r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- expected/expected: swap修正(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/swap.html"/>
      <id>74c922fff6904c42e88adb04f497dff5fa3088dc:reference/expected/expected/swap.md</id>
      <updated>2023-02-03T23:09:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/swap.md b/reference/expected/expected/swap.md
index 7a270c1f4..8df15366e 100644
--- a/reference/expected/expected/swap.md
+++ b/reference/expected/expected/swap.md
@@ -25,15 +25,15 @@ constexpr void swap(expected&amp;amp; rhs) noexcept(see below);
 
 - [`is_swappable_v`](/reference/type_traits/is_swappable.md)`&amp;lt;T&amp;gt; == true`
 - [`is_swappable_v`](/reference/type_traits/is_swappable.md)`&amp;lt;E&amp;gt; == true`
-- `(`[`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;E&amp;gt; &amp;amp;&amp;amp;` [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;E&amp;gt;) == true`
-- `(`[`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;E&amp;gt; &amp;amp;&amp;amp;` [`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;E&amp;gt;) == true`
+- `(`[`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;T&amp;gt; &amp;amp;&amp;amp;` [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;E&amp;gt;) == true`
+- `(`[`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;T&amp;gt; ||` [`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;E&amp;gt;) == true`
 
 
 ## 効果
 `*this`と`rhs`それぞれが正常値／エラー値いずれを保持しているかに応じて、以下の効果を持つ。
 
-- `*this`と`rhs`ともに正常値を保持していれば、次と等価 : `using std::swap;` [`swap`](/reference/utility/swap.md)`(val, rhs.val);`
-- `*this`と`rhs`ともにエラー値を保持していれば、次と等価 : `using std::swap;` [`swap`](/reference/utility/swap.md)`(unex, rhs.unex);`
+- `*this`と`rhs`ともに正常値を保持していれば、次と等価 : `using` [`std::swap`](/reference/utility/swap.md)`; swap(val, rhs.val);`
+- `*this`と`rhs`ともにエラー値を保持していれば、次と等価 : `using` [`std::swap`](/reference/utility/swap.md)`; swap(unex, rhs.unex);`
 - `*this`がエラー値を`rhs`が正常値を保持していれば、次と等価 : `rhs.swap(*this);`
 - `*this`が正常値を`rhs`がエラー値を保持していれば、次と等価 :
     ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>expected -- expected/expected: swap(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.html"/>
      <id>b79bb56d63ecdfa3568ca85fa5568d1ecb355d53:reference/expected/expected.md</id>
      <updated>2023-02-03T22:55:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.md b/reference/expected/expected.md
index bcb33b6ab..ecb45517a 100644
--- a/reference/expected/expected.md
+++ b/reference/expected/expected.md
@@ -41,7 +41,7 @@ namespace std {
 |-----------------|----------------|-------|
 | [`operator=`](expected/op_assign.md) | 代入演算子 | C++23 |
 | [`emplace`](expected/emplace.md) | 正常値型のコンストラクタ引数から直接構築する | C++23 |
-| [`swap`](expected/swap.md.nolink) | 他の`expected`オブジェクトとデータを入れ替える | C++23 |
+| [`swap`](expected/swap.md) | 他の`expected`オブジェクトとデータを入れ替える | C++23 |
 
 ### 値の観測
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- expected/expected: swap(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/swap.html"/>
      <id>b79bb56d63ecdfa3568ca85fa5568d1ecb355d53:reference/expected/expected/swap.md</id>
      <updated>2023-02-03T22:55:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/swap.md b/reference/expected/expected/swap.md
new file mode 100644
index 000000000..7a270c1f4
--- /dev/null
+++ b/reference/expected/expected/swap.md
@@ -0,0 +1,131 @@
+# swap
+* expected[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* expected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr void swap(expected&amp;amp; rhs) noexcept(see below);
+```
+* see below[italic]
+
+## 概要
+他の`expected`オブジェクトとデータを入れ替える。
+
+動作説明用の`expected`クラスメンバ変数として、下記を導入する。
+
+- `val` : `T`型の正常値。
+- `unex` : `E`型のエラー値。
+- `has_val` : `bool`型のフラグ変数。正常値を保持する場合は`true`に、エラー値を保持する場合は`false`となる。
+
+
+## テンプレートパラメータ制約
+次の制約を全て満たすこと
+
+- [`is_swappable_v`](/reference/type_traits/is_swappable.md)`&amp;lt;T&amp;gt; == true`
+- [`is_swappable_v`](/reference/type_traits/is_swappable.md)`&amp;lt;E&amp;gt; == true`
+- `(`[`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;E&amp;gt; &amp;amp;&amp;amp;` [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;E&amp;gt;) == true`
+- `(`[`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;E&amp;gt; &amp;amp;&amp;amp;` [`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;E&amp;gt;) == true`
+
+
+## 効果
+`*this`と`rhs`それぞれが正常値／エラー値いずれを保持しているかに応じて、以下の効果を持つ。
+
+- `*this`と`rhs`ともに正常値を保持していれば、次と等価 : `using std::swap;` [`swap`](/reference/utility/swap.md)`(val, rhs.val);`
+- `*this`と`rhs`ともにエラー値を保持していれば、次と等価 : `using std::swap;` [`swap`](/reference/utility/swap.md)`(unex, rhs.unex);`
+- `*this`がエラー値を`rhs`が正常値を保持していれば、次と等価 : `rhs.swap(*this);`
+- `*this`が正常値を`rhs`がエラー値を保持していれば、次と等価 :
+    ```cpp
+    if constexpr (is_nothrow_move_constructible_v&amp;lt;E&amp;gt;) {
+      E tmp(std::move(rhs.unex));
+      destroy_at(addressof(rhs.unex));
+      try {
+        construct_at(addressof(rhs.val), std::move(val));
+        destroy_at(addressof(val));
+        construct_at(addressof(unex), std::move(tmp));
+      } catch(...) {
+        construct_at(addressof(rhs.unex), std::move(tmp));
+        throw;
+      }
+    } else {
+      T tmp(std::move(val));
+      destroy_at(addressof(val));
+      try {
+        construct_at(addressof(unex), std::move(rhs.unex));
+        destroy_at(addressof(rhs.unex));
+        construct_at(addressof(rhs.val), std::move(tmp));
+      } catch (...) {
+        construct_at(addressof(val), std::move(tmp));
+        throw;
+      }
+    }
+    has_val = false;
+    rhs.has_val = true;
+    ```
+    * addressof[link /reference/memory/addressof.md]
+    * construct_at[link /reference/memory/construct_at.md]
+    * destroy_at[link /reference/memory/destroy_at.md]
+    * std::move[link /reference/utility/move.md]
+    * is_nothrow_move_constructible_v[link /reference/type_traits/is_nothrow_move_constructible.md]
+
+
+## 戻り値
+なし
+
+
+## 例外
+noexcept例外指定は次の式に従う :
+
+[`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;T&amp;gt; &amp;amp;&amp;amp;` [`is_nothrow_swappable_v`](/reference/type_traits/is_nothrow_swappable.md)`&amp;lt;T&amp;gt; &amp;amp;&amp;amp;` [`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;E&amp;gt; &amp;amp;&amp;amp;` [`is_nothrow_swappable_v`](/reference/type_traits/is_nothrow_swappable.md)`&amp;lt;E&amp;gt;`
+
+noexcept例外指定が`false`の場合、上記の「効果」による処理からの例外がスローされる。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::expected&amp;lt;int, std::string&amp;gt; x = 42;
+  std::expected&amp;lt;int, std::string&amp;gt; y = std::unexpected{&amp;#34;ERR&amp;#34;};
+  assert(x.value() == 42 &amp;amp;&amp;amp; y.error() == &amp;#34;ERR&amp;#34;);
+
+  x.swap(y);
+  assert(x.error() == &amp;#34;ERR&amp;#34; &amp;amp;&amp;amp; y.value() == 42);
+}
+```
+* swap[color ff0000]
+* value()[link value.md]
+* error()[link error.md]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+42
+0
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`operator-&amp;gt;`](op_arrow.md)
+- [`operator*`](op_deref.md)
+- [`value()`](value.md)
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>expected -- expected/expected: value_or,error_or(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.html"/>
      <id>195bd060727c2a7b967255fa8afb06d2d37c57d7:reference/expected/expected.md</id>
      <updated>2023-02-03T22:23:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.md b/reference/expected/expected.md
index a3ef99bf7..bcb33b6ab 100644
--- a/reference/expected/expected.md
+++ b/reference/expected/expected.md
@@ -53,8 +53,8 @@ namespace std {
 | [`has_value`](expected/has_value.md) | 正常値を保持しているかを判定する | C++23 |
 | [`value`](expected/value.md) | 正常値を取得する | C++23 |
 | [`error`](expected/error.md) | エラー値を取得する | C++23 |
-| [`value_or`](expected/value_or.md.nolink) | 正常値もしくは指定された値を取得する | C++23 |
-| [`error_or`](expected/error_or.md.nolink) | エラー値もしくは指定された値を取得する | C++23 |
+| [`value_or`](expected/value_or.md) | 正常値もしくは指定された値を取得する | C++23 |
+| [`error_or`](expected/error_or.md) | エラー値もしくは指定された値を取得する | C++23 |
 
 ### モナド操作
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>error -- expected/expected: value_or,error_or(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/error.html"/>
      <id>195bd060727c2a7b967255fa8afb06d2d37c57d7:reference/expected/expected/error.md</id>
      <updated>2023-02-03T22:23:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/error.md b/reference/expected/expected/error.md
index 75a60fe65..0803dd3d9 100644
--- a/reference/expected/expected/error.md
+++ b/reference/expected/expected/error.md
@@ -67,7 +67,7 @@ ERR
 
 
 ## 関連項目
-- [`error_or`](error_or.md.nolink)
+- [`error_or`](error_or.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>error_or -- expected/expected: value_or,error_or(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/error_or.html"/>
      <id>195bd060727c2a7b967255fa8afb06d2d37c57d7:reference/expected/expected/error_or.md</id>
      <updated>2023-02-03T22:23:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/error_or.md b/reference/expected/expected/error_or.md
new file mode 100644
index 000000000..e455fd330
--- /dev/null
+++ b/reference/expected/expected/error_or.md
@@ -0,0 +1,68 @@
+# error_or
+* expected[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* expected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class G = E&amp;gt; constexpr T error_or(G&amp;amp;&amp;amp; e) const &amp;amp;; // (1)
+template&amp;lt;class G = E&amp;gt; constexpr T error_or(G&amp;amp;&amp;amp; e) &amp;amp;&amp;amp;;      // (2)
+```
+
+## 概要
+エラー値もしくは指定された値を取得する。
+
+
+## 適格要件
+- (1) : [`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;E&amp;gt; == true &amp;amp;&amp;amp;` [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;G, E&amp;gt; == true`
+- (2) : [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;E&amp;gt; == true &amp;amp;&amp;amp;` [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;G, E&amp;gt; == true`
+
+
+## 戻り値
+- (1) : [`has_value()`](has_value.md) `?` [`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(e) :` [`error()`](error.md)
+- (2) : [`has_value()`](has_value.md) `?` [`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(e) :` [`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`)`
+
+
+## 例
+```cpp example
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::expected&amp;lt;int, std::string&amp;gt; x = 42;
+  std::cout &amp;lt;&amp;lt; x.error_or(&amp;#34;-&amp;#34;) &amp;lt;&amp;lt; std::endl;
+
+  std::expected&amp;lt;int, std::string&amp;gt; y = std::unexpected{&amp;#34;ERR&amp;#34;};
+  std::cout &amp;lt;&amp;lt; y.error_or(&amp;#34;-&amp;#34;) &amp;lt;&amp;lt; std::endl;
+}
+```
+* error_or()[color ff0000]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+-
+ERR
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`error()`](error.md)
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator-&gt; -- expected/expected: value_or,error_or(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/op_arrow.html"/>
      <id>195bd060727c2a7b967255fa8afb06d2d37c57d7:reference/expected/expected/op_arrow.md</id>
      <updated>2023-02-03T22:23:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/op_arrow.md b/reference/expected/expected/op_arrow.md
index dc0a82aa5..21f76bd96 100644
--- a/reference/expected/expected/op_arrow.md
+++ b/reference/expected/expected/op_arrow.md
@@ -65,7 +65,7 @@ int main()
 ## 関連項目
 - [`operator*`](op_deref.md)
 - [`value()`](value.md)
-- [`value_or()`](value_or.md.nolink)
+- [`value_or()`](value_or.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator* -- expected/expected: value_or,error_or(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/op_deref.html"/>
      <id>195bd060727c2a7b967255fa8afb06d2d37c57d7:reference/expected/expected/op_deref.md</id>
      <updated>2023-02-03T22:23:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/op_deref.md b/reference/expected/expected/op_deref.md
index 02ef3b9be..e26e01ebe 100644
--- a/reference/expected/expected/op_deref.md
+++ b/reference/expected/expected/op_deref.md
@@ -70,7 +70,7 @@ int main()
 ## 関連項目
 - [`operator-&amp;gt;`](op_arrow.md)
 - [`value()`](value.md)
-- [`value_or()`](value_or.md.nolink)
+- [`value_or()`](value_or.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>value -- expected/expected: value_or,error_or(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/value.html"/>
      <id>195bd060727c2a7b967255fa8afb06d2d37c57d7:reference/expected/expected/value.md</id>
      <updated>2023-02-03T22:23:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/value.md b/reference/expected/expected/value.md
index 136b805c8..8d2b2836d 100644
--- a/reference/expected/expected/value.md
+++ b/reference/expected/expected/value.md
@@ -73,7 +73,7 @@ throw:ERR
 ## 関連項目
 - [`operator-&amp;gt;`](op_arrow.md)
 - [`operator*`](op_deref.md)
-- [`value_or()`](value_or.md.nolink)
+- [`value_or()`](value_or.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>value_or -- expected/expected: value_or,error_or(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/value_or.html"/>
      <id>195bd060727c2a7b967255fa8afb06d2d37c57d7:reference/expected/expected/value_or.md</id>
      <updated>2023-02-03T22:23:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/value_or.md b/reference/expected/expected/value_or.md
new file mode 100644
index 000000000..5922c5ec9
--- /dev/null
+++ b/reference/expected/expected/value_or.md
@@ -0,0 +1,70 @@
+# value_or
+* expected[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* expected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class U&amp;gt; constexpr T value_or(U&amp;amp;&amp;amp; v) const &amp;amp;; // (1)
+template&amp;lt;class U&amp;gt; constexpr T value_or(U&amp;amp;&amp;amp; v) &amp;amp;&amp;amp;;      // (2)
+```
+
+## 概要
+正常値もしくは指定された値を取得する。
+
+
+## 適格要件
+- (1) : [`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;T&amp;gt; == true &amp;amp;&amp;amp;` [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;U, T&amp;gt; == true`
+- (2) : [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;T&amp;gt; == true &amp;amp;&amp;amp;` [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;U, T&amp;gt; == true`
+
+
+## 戻り値
+- (1) : [`has_value()`](has_value.md) `?` [`**this`](op_deref.md) `: static_cast&amp;lt;T&amp;gt;(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;U&amp;gt;(v))`
+- (2) : [`has_value()`](has_value.md) `?` [`std::move`](/reference/utility/move.md)`(`[`**this`](op_deref.md)`) : static_cast&amp;lt;T&amp;gt;(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;U&amp;gt;(v))`
+
+
+## 例
+```cpp example
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::expected&amp;lt;int, std::string&amp;gt; x = 42;
+  std::cout &amp;lt;&amp;lt; x.value_or(0) &amp;lt;&amp;lt; std::endl;
+
+  std::expected&amp;lt;int, std::string&amp;gt; y = std::unexpected{&amp;#34;ERR&amp;#34;};
+  std::cout &amp;lt;&amp;lt; y.value_or(0) &amp;lt;&amp;lt; std::endl;
+}
+```
+* value_or()[color ff0000]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+42
+0
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`operator-&amp;gt;`](op_arrow.md)
+- [`operator*`](op_deref.md)
+- [`value()`](value.md)
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cmp_equal -- 整数型比較関数の説明と例の改善</title>
      <link href="https://cpprefjp.github.io/reference/utility/cmp_equal.html"/>
      <id>991f1aca8f13b5d922ae94a2c51cdf043591c870:reference/utility/cmp_equal.md</id>
      <updated>2023-02-03T16:43:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/cmp_equal.md b/reference/utility/cmp_equal.md
index 7bd6d53ce..a0ab1b9cd 100644
--- a/reference/utility/cmp_equal.md
+++ b/reference/utility/cmp_equal.md
@@ -12,15 +12,19 @@ namespace std {
 ```
 
 ## 概要
-整数を安全に等値比較する。
+整数を安全に等値比較（`t == u`）する。
 
 この関数は、型`T`と型`U`がそれぞれ符号付き整数と符号なし整数のどちらであったとしても、安全に比較できる関数である。以下のように符号付き整数のインデックス変数と符号なし整数の配列要素数の比較によってコンパイラに警告が出力されてしまうような状況で使用できる：
 
 ```cpp
 std::vector&amp;lt;X&amp;gt; v;
+int N = 0;
 
-// 警告：式`i &amp;lt; v.size()`で、符号付き整数と符号なし整数の間で比較しようとした
-for (int i = 0; i &amp;lt; v.size(); ++i) {}
+// 警告：式`i == v.size()`で、符号付き整数と符号なし整数の間で比較しようとした
+if (N == v.size()) {}
+
+// OK
+if (std::cmp_equal(N, v.size())) {}
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cmp_greater -- 整数型比較関数の説明と例の改善</title>
      <link href="https://cpprefjp.github.io/reference/utility/cmp_greater.html"/>
      <id>991f1aca8f13b5d922ae94a2c51cdf043591c870:reference/utility/cmp_greater.md</id>
      <updated>2023-02-03T16:43:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/cmp_greater.md b/reference/utility/cmp_greater.md
index 78e8c92e3..4704f132b 100644
--- a/reference/utility/cmp_greater.md
+++ b/reference/utility/cmp_greater.md
@@ -12,15 +12,19 @@ namespace std {
 ```
 
 ## 概要
-整数に対して安全に、左辺が右辺より大きいかを比較する。
+整数に対して安全に、左辺が右辺より大きいかを比較（`t &amp;gt; u`）する。
 
 この関数は、型`T`と型`U`がそれぞれ符号付き整数と符号なし整数のどちらであったとしても、安全に比較できる関数である。以下のように符号付き整数のインデックス変数と符号なし整数の配列要素数の比較によってコンパイラに警告が出力されてしまうような状況で使用できる：
 
 ```cpp
 std::vector&amp;lt;X&amp;gt; v;
+int N = 0;
 
-// 警告：式`i &amp;lt; v.size()`で、符号付き整数と符号なし整数の間で比較しようとした
-for (int i = 0; i &amp;lt; v.size(); ++i) {}
+// 警告：式`N &amp;gt; v.size()`で、符号付き整数と符号なし整数の間で比較しようとした
+while (N &amp;gt; v.size()) {}
+
+// OK
+while (std::cmp_greater(N, v.size())) {}
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cmp_greater_equal -- 整数型比較関数の説明と例の改善</title>
      <link href="https://cpprefjp.github.io/reference/utility/cmp_greater_equal.html"/>
      <id>991f1aca8f13b5d922ae94a2c51cdf043591c870:reference/utility/cmp_greater_equal.md</id>
      <updated>2023-02-03T16:43:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/cmp_greater_equal.md b/reference/utility/cmp_greater_equal.md
index e85ea8eb9..9013db2a8 100644
--- a/reference/utility/cmp_greater_equal.md
+++ b/reference/utility/cmp_greater_equal.md
@@ -12,15 +12,19 @@ namespace std {
 ```
 
 ## 概要
-整数に対して安全に、左辺が右辺以上かを比較する。
+整数に対して安全に、左辺が右辺以上かを比較（`t &amp;gt;= u`）する。
 
 この関数は、型`T`と型`U`がそれぞれ符号付き整数と符号なし整数のどちらであったとしても、安全に比較できる関数である。以下のように符号付き整数のインデックス変数と符号なし整数の配列要素数の比較によってコンパイラに警告が出力されてしまうような状況で使用できる：
 
 ```cpp
 std::vector&amp;lt;X&amp;gt; v;
+int N = 0;
 
-// 警告：式`i &amp;lt; v.size()`で、符号付き整数と符号なし整数の間で比較しようとした
-for (int i = 0; i &amp;lt; v.size(); ++i) {}
+// 警告：式`N &amp;gt;= v.size()`で、符号付き整数と符号なし整数の間で比較しようとした
+while (N &amp;gt;= v.size()) {}
+
+// OK
+while (std::cmp_greater_equal(N, v.size())) {}
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cmp_less -- 整数型比較関数の説明と例の改善</title>
      <link href="https://cpprefjp.github.io/reference/utility/cmp_less.html"/>
      <id>991f1aca8f13b5d922ae94a2c51cdf043591c870:reference/utility/cmp_less.md</id>
      <updated>2023-02-03T16:43:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/cmp_less.md b/reference/utility/cmp_less.md
index e1e96ce30..3049c2f6b 100644
--- a/reference/utility/cmp_less.md
+++ b/reference/utility/cmp_less.md
@@ -12,7 +12,7 @@ namespace std {
 ```
 
 ## 概要
-整数に対して安全に、左辺が右辺より小さいかを比較する。
+整数に対して安全に、左辺が右辺より小さいかを比較（`t &amp;lt; u`）する。
 
 この関数は、型`T`と型`U`がそれぞれ符号付き整数と符号なし整数のどちらであったとしても、安全に比較できる関数である。以下のように符号付き整数のインデックス変数と符号なし整数の配列要素数の比較によってコンパイラに警告が出力されてしまうような状況で使用できる：
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cmp_less_equal -- 整数型比較関数の説明と例の改善</title>
      <link href="https://cpprefjp.github.io/reference/utility/cmp_less_equal.html"/>
      <id>991f1aca8f13b5d922ae94a2c51cdf043591c870:reference/utility/cmp_less_equal.md</id>
      <updated>2023-02-03T16:43:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/cmp_less_equal.md b/reference/utility/cmp_less_equal.md
index 22b3897bb..1caa8cd4f 100644
--- a/reference/utility/cmp_less_equal.md
+++ b/reference/utility/cmp_less_equal.md
@@ -12,15 +12,18 @@ namespace std {
 ```
 
 ## 概要
-整数に対して安全に、左辺が右辺以下かを比較する。
+整数に対して安全に、左辺が右辺以下かを比較（`t &amp;lt;= u`）する。
 
 この関数は、型`T`と型`U`がそれぞれ符号付き整数と符号なし整数のどちらであったとしても、安全に比較できる関数である。以下のように符号付き整数のインデックス変数と符号なし整数の配列要素数の比較によってコンパイラに警告が出力されてしまうような状況で使用できる：
 
 ```cpp
 std::vector&amp;lt;X&amp;gt; v;
 
-// 警告：式`i &amp;lt; v.size()`で、符号付き整数と符号なし整数の間で比較しようとした
-for (int i = 0; i &amp;lt; v.size(); ++i) {}
+// 警告：式`i &amp;lt;= v.size()`で、符号付き整数と符号なし整数の間で比較しようとした
+for (int i = 0; i &amp;lt;= v.size(); ++i) {}
+
+// OK
+for (int i = 0; cmp_less_equal(i, v.size()); ++i) {}
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cmp_not_equal -- 整数型比較関数の説明と例の改善</title>
      <link href="https://cpprefjp.github.io/reference/utility/cmp_not_equal.html"/>
      <id>991f1aca8f13b5d922ae94a2c51cdf043591c870:reference/utility/cmp_not_equal.md</id>
      <updated>2023-02-03T16:43:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/cmp_not_equal.md b/reference/utility/cmp_not_equal.md
index 642235b50..5a6ca5754 100644
--- a/reference/utility/cmp_not_equal.md
+++ b/reference/utility/cmp_not_equal.md
@@ -12,15 +12,19 @@ namespace std {
 ```
 
 ## 概要
-整数を安全に非等値比較する。
+整数を安全に非等値比較（`t != u`）する。
 
 この関数は、型`T`と型`U`がそれぞれ符号付き整数と符号なし整数のどちらであったとしても、安全に比較できる関数である。以下のように符号付き整数のインデックス変数と符号なし整数の配列要素数の比較によってコンパイラに警告が出力されてしまうような状況で使用できる：
 
 ```cpp
 std::vector&amp;lt;X&amp;gt; v;
+int N = 0;
 
-// 警告：式`i &amp;lt; v.size()`で、符号付き整数と符号なし整数の間で比較しようとした
-for (int i = 0; i &amp;lt; v.size(); ++i) {}
+// 警告：式`i != v.size()`で、符号付き整数と符号なし整数の間で比較しようとした
+if (N != v.size()) {}
+
+// OK
+if (std::cmp_not_equal(N, v.size())) {}
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-05-29T05:52:57.644439</updated>
  <id>192b7ef4-f148-478a-b09f-8ae77b5fe4de</id>

  
    <entry>
      <title>single_view -- single_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/single_view.html"/>
      <id>eb2177ac4b47fe64a28648dfec74e18ffc8e78f1:reference/ranges/single_view.md</id>
      <updated>2025-05-29T14:47:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/single_view.md b/reference/ranges/single_view.md
index 0ec0b96e0..f23b329b2 100644
--- a/reference/ranges/single_view.md
+++ b/reference/ranges/single_view.md
@@ -9,7 +9,6 @@ namespace std::ranges {
   template&amp;lt;copy_constructible T&amp;gt;
     requires is_object_v&amp;lt;T&amp;gt;
   class single_view : public view_interface&amp;lt;single_view&amp;lt;T&amp;gt;&amp;gt; { …… }; // (1) C++20
-
   template&amp;lt;move_constructible T&amp;gt;
     requires is_object_v&amp;lt;T&amp;gt;
   class single_view : public view_interface&amp;lt;single_view&amp;lt;T&amp;gt;&amp;gt; { …… }; // (1) C++23
@@ -30,23 +29,37 @@ namespace std::ranges {
 |----------|-------|--------|-------|---------|---------------|---------------|------------|--------|----------|------|
 |          | ○    | ○     | ○    | ○      | ○            | ○            | ○         | ○     | ○       | ○   |
 
+## テンプレートパラメータ制約
+- (1) :
+    - C++20 : 型`T`がコピー構築可能であること
+    - C++23 : 型`T`がムーブ構築可能であること
+
+
 ## 効果
 - 式`views::single(E)`の効果は`single_view&amp;lt;decay_t&amp;lt;decltype((E))&amp;gt;&amp;gt;(E)`と等しい。
 
+## メンバ変数
+
+| 名前                                        | 説明         | 対応バージョン        |
+|---------------------------------------------|--------------|-----------------------|
+| [`movable-box`](movable_box.md)`&amp;lt;T&amp;gt; value_` | 単一要素の値 | C++20                 |
+
+
 ## メンバ関数
 
 | 名前                                             | 説明                             | 対応バージョン |
 |--------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](single_view/op_constructor.md.nolink)  | コンストラクタ                   | C++20          |
-| [`begin`](single_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
-| [`end`](single_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
-| [`data`](single_view/data.md.nolink)                     | 配列の先頭へのポインタを取得する | C++20          |
+| [`(constructor)`](single_view/op_constructor.md) | コンストラクタ                   | C++20          |
+| [`begin`](single_view/begin.md)                  | 先頭を指すイテレータを取得する   | C++20          |
+| [`end`](single_view/end.md)                      | 番兵を取得する                   | C++20          |
+| [`data`](single_view/data.md)                    | 配列の先頭へのポインタを取得する | C++20          |
 
 ## 静的メンバ関数
 
-| 名前                                             | 説明                             | 対応バージョン |
-|--------------------------------------------------|----------------------------------|----------------|
-| [`size`](single_view/size.md.nolink)                     | 要素数を取得する                 | C++20          |
+| 名前                            | 説明                        | 対応バージョン |
+|---------------------------------|-----------------------------|----------------|
+| [`size`](single_view/size.md)   | 要素数を取得する            | C++20          |
+| [`empty`](single_view/empty.md) | Rangeが空かどうかを判定する | C++20          |
 
 ## 継承しているメンバ関数
 
@@ -56,12 +69,14 @@ namespace std::ranges {
 | [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
 | [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
 | [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++20          |
+| [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する          | C++23          |
+| [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する  | C++23          |
 
 ## 推論補助
 
-| 名前                                                  | 説明                         | 対応バージョン |
-|-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](single_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+| 名前                                                     | 説明                         | 対応バージョン |
+|----------------------------------------------------------|------------------------------|----------------|
+| [`(deduction_guide)`](single_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++20          |
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- single_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/single_view/begin.html"/>
      <id>eb2177ac4b47fe64a28648dfec74e18ffc8e78f1:reference/ranges/single_view/begin.md</id>
      <updated>2025-05-29T14:47:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/single_view/begin.md b/reference/ranges/single_view/begin.md
new file mode 100644
index 000000000..7ab33ec4d
--- /dev/null
+++ b/reference/ranges/single_view/begin.md
@@ -0,0 +1,58 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* single_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr T* begin() noexcept;             // (1) C++20
+constexpr const T* begin() const noexcept; // (2) C++20
+```
+
+## 概要
+`view`の先頭要素を指すイテレータを取得する。
+
+## 戻り値
+以下と等価：
+
+```cpp
+return data();
+```
+* data()[link data.md]
+
+
+## 例
+
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+
+int main() {
+  auto r = std::views::single(1);
+  int* it = r.begin();
+  int* last = r.end();
+
+  for (; it != last; ++it) {
+    std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* begin[color ff0000]
+* end[link end.md]
+
+### 出力
+
+```
+1
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>data -- single_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/single_view/data.html"/>
      <id>eb2177ac4b47fe64a28648dfec74e18ffc8e78f1:reference/ranges/single_view/data.md</id>
      <updated>2025-05-29T14:47:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/single_view/data.md b/reference/ranges/single_view/data.md
new file mode 100644
index 000000000..fbde21866
--- /dev/null
+++ b/reference/ranges/single_view/data.md
@@ -0,0 +1,53 @@
+# data
+* ranges[meta header]
+* std::ranges[meta namespace]
+* single_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr T* data() noexcept;             // (1) C++20
+constexpr const T* data() const noexcept; // (2) C++20
+```
+
+## 概要
+配列の先頭へのポインタを取得する。
+
+## 戻り値
+以下と等価：
+
+```cpp
+return value_.operator-&amp;gt;();
+```
+
+
+## 例
+
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+
+int main() {
+  auto r = std::views::single(1);
+  int* p = r.data();
+
+  std::cout &amp;lt;&amp;lt; *p &amp;lt;&amp;lt; std::endl;
+}
+```
+* data[color ff0000]
+
+### 出力
+
+```
+1
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- single_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/single_view/empty.html"/>
      <id>eb2177ac4b47fe64a28648dfec74e18ffc8e78f1:reference/ranges/single_view/empty.md</id>
      <updated>2025-05-29T14:47:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/single_view/empty.md b/reference/ranges/single_view/empty.md
new file mode 100644
index 000000000..346a5d2c4
--- /dev/null
+++ b/reference/ranges/single_view/empty.md
@@ -0,0 +1,30 @@
+# empty
+* ranges[meta header]
+* std::ranges[meta namespace]
+* single_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+static constexpr bool empty() noexcept; // (1) C++20
+```
+
+## 概要
+Rangeが空かどうかを判定する。
+
+## 戻り値
+
+```cpp
+return false;
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- single_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/single_view/end.html"/>
      <id>eb2177ac4b47fe64a28648dfec74e18ffc8e78f1:reference/ranges/single_view/end.md</id>
      <updated>2025-05-29T14:47:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/single_view/end.md b/reference/ranges/single_view/end.md
new file mode 100644
index 000000000..087d8b17b
--- /dev/null
+++ b/reference/ranges/single_view/end.md
@@ -0,0 +1,59 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* single_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr T* end() noexcept;             // (1) C++20
+constexpr const T* end() const noexcept; // (2) C++20
+```
+
+## 概要
+
+番兵を取得する。
+
+## 戻り値
+以下と等価：
+
+```cpp
+return data() + 1;
+```
+* data()[link data.md]
+
+
+## 例
+
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+
+int main() {
+  auto r = std::views::single(1);
+  int* it = r.begin();
+  int* last = r.end();
+
+  for (; it != last; ++it) {
+    std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* end[color ff0000]
+* begin[link begin.md]
+
+### 出力
+
+```
+1
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- single_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/single_view/op_constructor.html"/>
      <id>eb2177ac4b47fe64a28648dfec74e18ffc8e78f1:reference/ranges/single_view/op_constructor.md</id>
      <updated>2025-05-29T14:47:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/single_view/op_constructor.md b/reference/ranges/single_view/op_constructor.md
new file mode 100644
index 000000000..18467b299
--- /dev/null
+++ b/reference/ranges/single_view/op_constructor.md
@@ -0,0 +1,98 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* single_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+single_view()
+  requires default_initializable&amp;lt;T&amp;gt; = default; // (1) C++20
+
+constexpr explicit single_view(const T&amp;amp; t)
+  requires copy_constructible&amp;lt;T&amp;gt;;              // (2) C++20
+
+constexpr explicit single_view(T&amp;amp;&amp;amp; t);         // (3) C++20
+
+template &amp;lt;class... Args&amp;gt;
+  requires constructible_from&amp;lt;T, Args...&amp;gt;
+constexpr explicit single_view(in_place_t, Args&amp;amp;&amp;amp;... args); // (4) C++20
+```
+
+## 概要
+[`single_view`](../single_view.md)オブジェクトを構築する。
+
+- (1) : デフォルト構築
+- (2) : `t`をコピーして、`*this`に保持する
+- (3) : `t`をムーブして、`*this`に保持する
+- (4) : 型`T`のコンストラクタ引数`args...`を転送して`T`型オブジェクトを内部で構築し、`*this`に保持する
+
+
+## テンプレートパラメータ制約
+- (1) : 型`T`がデフォルト構築可能であること
+- (2) : 型`T`がコピー構築可能であること
+- (4) : 型`T`が`Args...`で構築可能であること
+
+
+## 効果
+
+- (2) : `value_`を`t`で初期化する
+- (3) : `value_`を[`std::move`](/reference/utility/move.md)`(t)`で初期化する
+- (4) : `value_{`[`in_place`](/reference/utility/in_place_t.md)`,` [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...}`で初期化する
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main() {
+  // (2) コピー構築
+  {
+    std::string s1 = &amp;#34;hello&amp;#34;;
+    for (const std::string&amp;amp; x : std::views::single(s1)) {
+      std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+    }
+  }
+
+  // (3) ムーブ構築
+  {
+    std::string s1 = &amp;#34;hello&amp;#34;;
+    for (const std::string&amp;amp; x : std::views::single(std::move(s1))) {
+      std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+    }
+  }
+
+  // (4) コンストラクタ引数から構築
+  {
+    for (const std::string&amp;amp; x : std::ranges::single_view&amp;lt;std::string&amp;gt;(std::in_place, 3, &amp;#39;a&amp;#39;)) {
+      std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+    }
+  }
+}
+
+```
+* std::ranges::single_view[color ff0000]
+* std::views::single[color ff0000]
+
+### 出力
+```
+hello
+hello
+aaa
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- single_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/single_view/op_deduction_guide.html"/>
      <id>eb2177ac4b47fe64a28648dfec74e18ffc8e78f1:reference/ranges/single_view/op_deduction_guide.md</id>
      <updated>2025-05-29T14:47:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/single_view/op_deduction_guide.md b/reference/ranges/single_view/op_deduction_guide.md
new file mode 100644
index 000000000..122d81045
--- /dev/null
+++ b/reference/ranges/single_view/op_deduction_guide.md
@@ -0,0 +1,47 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class T&amp;gt;
+  single_view(T) -&amp;gt; single_view&amp;lt;T&amp;gt;;
+}
+```
+* single_view[link ../single_view.md]
+
+## 概要
+
+[`single_view`](../single_view.md)クラステンプレートの型推論補助。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+
+int main() {
+  auto r = std::ranges::single_view(1);
+  for (int x : r) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+  }
+}
+
+```
+
+### 出力
+```
+1
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- single_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/single_view/size.html"/>
      <id>eb2177ac4b47fe64a28648dfec74e18ffc8e78f1:reference/ranges/single_view/size.md</id>
      <updated>2025-05-29T14:47:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/single_view/size.md b/reference/ranges/single_view/size.md
new file mode 100644
index 000000000..cfc519fc2
--- /dev/null
+++ b/reference/ranges/single_view/size.md
@@ -0,0 +1,32 @@
+# size
+* ranges[meta header]
+* std::ranges[meta namespace]
+* single_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+static constexpr size_t size() noexcept; // (1) C++20
+```
+
+## 概要
+要素数を取得する。
+
+## 戻り値
+
+以下と等価：
+
+```cpp
+return 1;
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty_view -- empty_view : 継承しているメンバ関数として不足していたものを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/empty_view.html"/>
      <id>2c260022753de92e7967e9f890b48111645577a3:reference/ranges/empty_view.md</id>
      <updated>2025-05-29T13:55:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/empty_view.md b/reference/ranges/empty_view.md
index 77a31f852..00d8cc509 100644
--- a/reference/ranges/empty_view.md
+++ b/reference/ranges/empty_view.md
@@ -45,12 +45,14 @@ namespace std::ranges {
 
 ## 継承しているメンバ関数
 
-| 名前                                         | 説明                             | 対応バージョン |
-|----------------------------------------------|----------------------------------|----------------|
+| 名前                                         | 説明                              | 対応バージョン |
+|----------------------------------------------|-----------------------------------|----------------|
 | [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++20          |
-| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する       | C++20          |
-| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する       | C++20          |
-| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする               | C++20          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
+| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++20          |
+| [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する          | C++23          |
+| [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する  | C++23          |
 
 ## カスタマイゼーション
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty_view -- empty_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/empty_view.html"/>
      <id>2a23e4da72a0e01764cf681b2f45f7823955cc16:reference/ranges/empty_view.md</id>
      <updated>2025-05-29T13:50:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/empty_view.md b/reference/ranges/empty_view.md
index 6be4b3008..77a31f852 100644
--- a/reference/ranges/empty_view.md
+++ b/reference/ranges/empty_view.md
@@ -8,14 +8,7 @@
 namespace std::ranges {
   template&amp;lt;class T&amp;gt;
     requires is_object_v&amp;lt;T&amp;gt;
-  class empty_view : public view_interface&amp;lt;empty_view&amp;lt;T&amp;gt;&amp;gt; { // (1)
-  public:
-    static constexpr T* begin() noexcept { return nullptr; }
-    static constexpr T* end() noexcept { return nullptr; }
-    static constexpr T* data() noexcept { return nullptr; }
-    static constexpr size_t size() noexcept { return 0; }
-    static constexpr bool empty() noexcept { return true; }
-  };
+  class empty_view : public view_interface&amp;lt;empty_view&amp;lt;T&amp;gt;&amp;gt; { …… }; // (1)
 
   namespace views {
     template&amp;lt;class T&amp;gt;
@@ -42,13 +35,13 @@ namespace std::ranges {
 
 ## 静的メンバ関数
 
-| 名前                                             | 説明                             | 対応バージョン |
-|--------------------------------------------------|----------------------------------|----------------|
-| [`begin`](empty_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
-| [`end`](empty_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
-| [`data`](empty_view/data.md.nolink)                     | 配列の先頭へのポインタを取得する | C++20          |
-| [`size`](empty_view/size.md.nolink)                     | 要素数を取得する                 | C++20          |
-| [`empty`](empty_view/empty.md.nolink)                   | Rangeが空かどうかを判定する       | C++20          |
+| 名前                           | 説明                             | 対応バージョン |
+|--------------------------------|----------------------------------|----------------|
+| [`begin`](empty_view/begin.md) | 先頭を指すイテレータを取得する   | C++20          |
+| [`end`](empty_view/end.md)     | 番兵を取得する                   | C++20          |
+| [`data`](empty_view/data.md)   | 配列の先頭へのポインタを取得する | C++20          |
+| [`size`](empty_view/size.md)   | 要素数を取得する                 | C++20          |
+| [`empty`](empty_view/empty.md) | Rangeが空かどうかを判定する      | C++20          |
 
 ## 継承しているメンバ関数
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- empty_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/empty_view/begin.html"/>
      <id>2a23e4da72a0e01764cf681b2f45f7823955cc16:reference/ranges/empty_view/begin.md</id>
      <updated>2025-05-29T13:50:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/empty_view/begin.md b/reference/ranges/empty_view/begin.md
new file mode 100644
index 000000000..eb5f274f5
--- /dev/null
+++ b/reference/ranges/empty_view/begin.md
@@ -0,0 +1,30 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* empty_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+static constexpr T* begin() noexcept; // (1) C++20
+```
+
+## 概要
+`view`の先頭要素を指すイテレータを取得する。
+
+## 戻り値
+
+```cpp
+return nullptr;
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>data -- empty_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/empty_view/data.html"/>
      <id>2a23e4da72a0e01764cf681b2f45f7823955cc16:reference/ranges/empty_view/data.md</id>
      <updated>2025-05-29T13:50:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/empty_view/data.md b/reference/ranges/empty_view/data.md
new file mode 100644
index 000000000..7ad10bd5e
--- /dev/null
+++ b/reference/ranges/empty_view/data.md
@@ -0,0 +1,30 @@
+# data
+* ranges[meta header]
+* std::ranges[meta namespace]
+* empty_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+static constexpr T* data() noexcept; // (1) C++20
+```
+
+## 概要
+配列の先頭へのポインタを取得する。
+
+## 戻り値
+
+```cpp
+return nullptr;
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- empty_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/empty_view/empty.html"/>
      <id>2a23e4da72a0e01764cf681b2f45f7823955cc16:reference/ranges/empty_view/empty.md</id>
      <updated>2025-05-29T13:50:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/empty_view/empty.md b/reference/ranges/empty_view/empty.md
new file mode 100644
index 000000000..fed7a28f0
--- /dev/null
+++ b/reference/ranges/empty_view/empty.md
@@ -0,0 +1,30 @@
+# empty
+* ranges[meta header]
+* std::ranges[meta namespace]
+* empty_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+static constexpr bool empty() noexcept; // (1) C++20
+```
+
+## 概要
+Rangeが空かどうかを判定する。
+
+## 戻り値
+
+```cpp
+return true;
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- empty_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/empty_view/end.html"/>
      <id>2a23e4da72a0e01764cf681b2f45f7823955cc16:reference/ranges/empty_view/end.md</id>
      <updated>2025-05-29T13:50:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/empty_view/end.md b/reference/ranges/empty_view/end.md
new file mode 100644
index 000000000..6ac4b4399
--- /dev/null
+++ b/reference/ranges/empty_view/end.md
@@ -0,0 +1,31 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* empty_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+static constexpr T* end() noexcept; // (1) C++20
+```
+
+## 概要
+
+番兵を取得する。
+
+
+## 戻り値
+
+```cpp
+return nullptr;
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- empty_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/empty_view/size.html"/>
      <id>2a23e4da72a0e01764cf681b2f45f7823955cc16:reference/ranges/empty_view/size.md</id>
      <updated>2025-05-29T13:50:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/empty_view/size.md b/reference/ranges/empty_view/size.md
new file mode 100644
index 000000000..f8adf916f
--- /dev/null
+++ b/reference/ranges/empty_view/size.md
@@ -0,0 +1,30 @@
+# size
+* ranges[meta header]
+* std::ranges[meta namespace]
+* empty_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+static constexpr size_t size() noexcept; // (1) C++20
+```
+
+## 概要
+要素数を取得する。
+
+## 戻り値
+
+```cpp
+return 0;
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty_view -- empty_view : コード修飾を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/empty_view.html"/>
      <id>38de7a55bc4e93cf202c44323e6d6a27c69c07f3:reference/ranges/empty_view.md</id>
      <updated>2025-05-29T13:49:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/empty_view.md b/reference/ranges/empty_view.md
index 14304e371..6be4b3008 100644
--- a/reference/ranges/empty_view.md
+++ b/reference/ranges/empty_view.md
@@ -81,6 +81,7 @@ int main() {
 }
 ```
 * views::empty[color ff0000]
+* ranges::empty[link /reference/ranges/empty.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-12-12T14:39:22.053390</updated>
  <id>898db1a4-270d-4233-9787-eaea4b4b77cc</id>

  
    <entry>
      <title>一貫比較 -- 表示調整</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/consistent_comparison.html"/>
      <id>9fb4ecb0ec5ebec1570ab373186ad6157adbff70:lang/cpp20/consistent_comparison.md</id>
      <updated>2020-12-12T13:37:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/consistent_comparison.md b/lang/cpp20/consistent_comparison.md
index 06d279e43..f1007587f 100644
--- a/lang/cpp20/consistent_comparison.md
+++ b/lang/cpp20/consistent_comparison.md
@@ -516,6 +516,7 @@ struct C {
 |ヌルポインタ定数とポインタ|×|△&amp;lt;br/&amp;gt;同値比較のみ可能| ― |
 
 表中の記号の意味
+
 - 〇 : 比較可能
 - △ : 制限があるが比較可能
 - × : 比較不可能
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>一貫比較 -- 一貫比較 : 従来比較の非推奨化の表整理</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/consistent_comparison.html"/>
      <id>473647973d28d0c0ffd18616d3f6846426ea768d:lang/cpp20/consistent_comparison.md</id>
      <updated>2020-12-12T13:29:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/consistent_comparison.md b/lang/cpp20/consistent_comparison.md
index 6b19f5e01..06d279e43 100644
--- a/lang/cpp20/consistent_comparison.md
+++ b/lang/cpp20/consistent_comparison.md
@@ -505,15 +505,21 @@ struct C {
 #### 従来の比較演算子との差異及び修正
 
 三方比較演算子`&amp;lt;=&amp;gt;`による比較は、従来の比較演算子(`&amp;lt; &amp;gt; &amp;lt;= &amp;gt;= == !=`)の挙動とは異なるところがある（より安全な比較となっている）。
-それに伴って、いくつかの比較演算子の挙動が修正された（C++20では非推奨とされ、削除されてはいない）。
+それに伴って、いくつかの比較演算子の挙動が修正された（C++20では非推奨とされ、禁止されてはいない）。
 
-|比較するペア|C++17までの従来演算子での比較の可否|`&amp;lt;=&amp;gt;`での比較の可否|C++20からの従来演算子での比較の可否|
+|比較するペア|`&amp;lt;=&amp;gt;`での比較の可否|C++17までの従来演算子での比較の可否|C++20からの非推奨化|
 |:-------------|:-------------|:-------------|:-------------|
-|符号なし整数型と符号付整数型|〇|×&amp;lt;br/&amp;gt;ただし定数式で符号付きオペランドが正の値に評価されれば可能|〇（従来通り）|
-|列挙型と算術型|〇&amp;lt;br/&amp;gt;例えば、列挙型と浮動小数点型の比較が可能|△&amp;lt;br/&amp;gt;スコープ無し列挙型と整数型のみ可能|△&amp;lt;br/&amp;gt;列挙型と浮動小数点型間比較は不可&amp;lt;br/&amp;gt;それ以外は従来通り|
-|異なる列挙型間|〇|×|×|
-|配列同士|△&amp;lt;br/&amp;gt;先頭要素へのポインタの比較になる|×|△（従来通り；非推奨）|
-|ヌルポインタ定数とポインタ|△&amp;lt;br/&amp;gt;同値比較のみ可能|×|△（従来通り）|
+|符号なし整数型と符号付整数型|×&amp;lt;br/&amp;gt;ただし定数式で符号付きオペランドが正の値に評価されれば可能|〇| ― |
+|列挙型と算術型|△&amp;lt;br/&amp;gt;スコープ無し列挙型と整数型のみ可能|〇&amp;lt;br/&amp;gt;例えば、列挙型と浮動小数点型の比較が可能| 列挙型と浮動小数点型の比較のみ非推奨 |
+|異なる列挙型間|×|〇| 非推奨 |
+|配列同士|×|△&amp;lt;br/&amp;gt;先頭要素へのポインタの比較になる| 非推奨 |
+|ヌルポインタ定数とポインタ|×|△&amp;lt;br/&amp;gt;同値比較のみ可能| ― |
+
+表中の記号の意味
+- 〇 : 比較可能
+- △ : 制限があるが比較可能
+- × : 比較不可能
+- ― : 変更なし
 
 ## C++17までの比較演算子実装の一例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>mona-@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>一貫比較 -- Merge pull request #827 from cpprefjp/tweak-3way-cmp</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/consistent_comparison.html"/>
      <id>5061aa43cbf4219bfc4a459e2b6eeb1ecd138867:lang/cpp20/consistent_comparison.md</id>
      <updated>2020-12-11T19:30:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/consistent_comparison.md b/lang/cpp20/consistent_comparison.md
index 0a15c7367..6b19f5e01 100644
--- a/lang/cpp20/consistent_comparison.md
+++ b/lang/cpp20/consistent_comparison.md
@@ -504,7 +504,7 @@ struct C {
 
 #### 従来の比較演算子との差異及び修正
 
-三方比較演算子による比較は従来の比較演算子の挙動とは異なるところがある（より安全な比較となっている）。  
+三方比較演算子`&amp;lt;=&amp;gt;`による比較は、従来の比較演算子(`&amp;lt; &amp;gt; &amp;lt;= &amp;gt;= == !=`)の挙動とは異なるところがある（より安全な比較となっている）。
 それに伴って、いくつかの比較演算子の挙動が修正された（C++20では非推奨とされ、削除されてはいない）。
 
 |比較するペア|C++17までの従来演算子での比較の可否|`&amp;lt;=&amp;gt;`での比較の可否|C++20からの従来演算子での比較の可否|
@@ -512,7 +512,7 @@ struct C {
 |符号なし整数型と符号付整数型|〇|×&amp;lt;br/&amp;gt;ただし定数式で符号付きオペランドが正の値に評価されれば可能|〇（従来通り）|
 |列挙型と算術型|〇&amp;lt;br/&amp;gt;例えば、列挙型と浮動小数点型の比較が可能|△&amp;lt;br/&amp;gt;スコープ無し列挙型と整数型のみ可能|△&amp;lt;br/&amp;gt;列挙型と浮動小数点型間比較は不可&amp;lt;br/&amp;gt;それ以外は従来通り|
 |異なる列挙型間|〇|×|×|
-|配列同士|△&amp;lt;br/&amp;gt;先頭要素へのポインタの比較になる|×|×|
+|配列同士|△&amp;lt;br/&amp;gt;先頭要素へのポインタの比較になる|×|△（従来通り；非推奨）|
 |ヌルポインタ定数とポインタ|△&amp;lt;br/&amp;gt;同値比較のみ可能|×|△（従来通り）|
 
 ## C++17までの比較演算子実装の一例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flush_emit -- flush_emit: 効果の説明文調整</title>
      <link href="https://cpprefjp.github.io/reference/ostream/flush_emit.html"/>
      <id>bbab27e1457b229d0ffa64da27fd3166de2ffe26:reference/ostream/flush_emit.md</id>
      <updated>2020-12-11T18:58:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ostream/flush_emit.md b/reference/ostream/flush_emit.md
index 72af05d8f..bd68d98fd 100644
--- a/reference/ostream/flush_emit.md
+++ b/reference/ostream/flush_emit.md
@@ -18,9 +18,8 @@ namespace std {
 
 
 ## 効果
-`os.flush()`を呼び出す。  
-`os.rdbuf()`が`std::basic_syncbuf&amp;lt;charT、traits、Allocator&amp;gt;*`である場合、これを`buf`とすると、`buf-&amp;gt;emit()`を呼び出す。  
-それ以外の場合、このマニピュレータは効果がない。
+`os.flush()`を呼び出す。
+続いて`os.rdbuf()`が`std::basic_syncbuf&amp;lt;charT、traits、Allocator&amp;gt;*`である場合、これを`buf`とすると、`buf-&amp;gt;emit()`を呼び出す。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>一貫比較 -- 一貫比較: C++20から配列同士の従来比較は非推奨</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/consistent_comparison.html"/>
      <id>3e415a9b47f5d284a1e6970a59a186ff3396c571:lang/cpp20/consistent_comparison.md</id>
      <updated>2020-12-11T18:34:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/consistent_comparison.md b/lang/cpp20/consistent_comparison.md
index 0a15c7367..6b19f5e01 100644
--- a/lang/cpp20/consistent_comparison.md
+++ b/lang/cpp20/consistent_comparison.md
@@ -504,7 +504,7 @@ struct C {
 
 #### 従来の比較演算子との差異及び修正
 
-三方比較演算子による比較は従来の比較演算子の挙動とは異なるところがある（より安全な比較となっている）。  
+三方比較演算子`&amp;lt;=&amp;gt;`による比較は、従来の比較演算子(`&amp;lt; &amp;gt; &amp;lt;= &amp;gt;= == !=`)の挙動とは異なるところがある（より安全な比較となっている）。
 それに伴って、いくつかの比較演算子の挙動が修正された（C++20では非推奨とされ、削除されてはいない）。
 
 |比較するペア|C++17までの従来演算子での比較の可否|`&amp;lt;=&amp;gt;`での比較の可否|C++20からの従来演算子での比較の可否|
@@ -512,7 +512,7 @@ struct C {
 |符号なし整数型と符号付整数型|〇|×&amp;lt;br/&amp;gt;ただし定数式で符号付きオペランドが正の値に評価されれば可能|〇（従来通り）|
 |列挙型と算術型|〇&amp;lt;br/&amp;gt;例えば、列挙型と浮動小数点型の比較が可能|△&amp;lt;br/&amp;gt;スコープ無し列挙型と整数型のみ可能|△&amp;lt;br/&amp;gt;列挙型と浮動小数点型間比較は不可&amp;lt;br/&amp;gt;それ以外は従来通り|
 |異なる列挙型間|〇|×|×|
-|配列同士|△&amp;lt;br/&amp;gt;先頭要素へのポインタの比較になる|×|×|
+|配列同士|△&amp;lt;br/&amp;gt;先頭要素へのポインタの比較になる|×|△（従来通り；非推奨）|
 |ヌルポインタ定数とポインタ|△&amp;lt;br/&amp;gt;同値比較のみ可能|×|△（従来通り）|
 
 ## C++17までの比較演算子実装の一例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
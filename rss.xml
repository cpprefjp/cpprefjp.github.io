<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-09-08T04:14:54.949621</updated>
  <id>dbc5d430-6ebd-442b-b7d4-4f9307539aad</id>

  
    <entry>
      <title>非推奨だった bool 型に対するインクリメント演算子を削除 -- C++17 非推奨だった bool 型に対するインクリメント演算子を削除 : 表示崩れを修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/remove_deprecated_increment_of_bool.html"/>
      <id>15ab164b44537fa6f6648e8b7e4811e4e62c2487:lang/cpp17/remove_deprecated_increment_of_bool.md</id>
      <updated>2020-09-07T23:30:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/remove_deprecated_increment_of_bool.md b/lang/cpp17/remove_deprecated_increment_of_bool.md
index f48a0edf8..548a00acf 100644
--- a/lang/cpp17/remove_deprecated_increment_of_bool.md
+++ b/lang/cpp17/remove_deprecated_increment_of_bool.md
@@ -158,10 +158,9 @@ C++14で`std::exchange()`が導入されたことにより、唯一使いみち
 - [Core issue 1653: Removing deprecated increment of bool](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4192.html#1653)
 - [N3668: exchange() utility function, revision 3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3668)
 - [history - Why does the boolean type in C++ support ++ but not --? - Software Engineering Stack Exchange](https://softwareengineering.stackexchange.com/questions/230928/why-does-the-boolean-type-in-c-support-but-not)
-- Leveson, Nancy G.; Turner, Clark S. (July 1993). [&amp;#34;An Investigation of the Therac-25 Accidents&amp;#34;](https://web.archive.org/web/20041128024227/http://www.cs.umd.edu/class/spring2003/cmsc838p/Misc/therac.pdf) (PDF). IEEE Computer. 26 (7): 18–41. doi:10.1109/MC.1993.274940.
-
-  テキスト起こし
-  1. [An Investigation of Therac-25 Accidents - I](http://web.archive.org/web/20171206153409/http://courses.cs.vt.edu/professionalism/Therac_25/Therac_1.html)
-  2. [Therac-25 - II](http://web.archive.org/web/20171212115910/http://courses.cs.vt.edu/professionalism/Therac_25/Therac_2.html)
-  3. [Therac-25 - III](http://web.archive.org/web/20170215125239/http://courses.cs.vt.edu/professionalism/Therac_25/Therac_3.html)
+- Leveson, Nancy G.; Turner, Clark S. (July 1993). [&amp;#34;An Investigation of the Therac-25 Accidents&amp;#34;](https://web.archive.org/web/20041128024227/http://www.cs.umd.edu/class/spring2003/cmsc838p/Misc/therac.pdf) (PDF). IEEE Computer. 26 (7): 18–41. doi:10.1109/MC.1993.274940.&amp;lt;br/&amp;gt;
+    テキスト起こし
+    1. [An Investigation of Therac-25 Accidents - I](http://web.archive.org/web/20171206153409/http://courses.cs.vt.edu/professionalism/Therac_25/Therac_1.html)
+    2. [Therac-25 - II](http://web.archive.org/web/20171212115910/http://courses.cs.vt.edu/professionalism/Therac_25/Therac_2.html)
+    3. [Therac-25 - III](http://web.archive.org/web/20170215125239/http://courses.cs.vt.edu/professionalism/Therac_25/Therac_3.html)
 - [Therac-25 - Wikipedia](https://en.wikipedia.org/wiki/Therac-25)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非推奨だった bool 型に対するインクリメント演算子を削除 -- fix(cpp17/remove_deprecated_increment_of_bool): fix link</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/remove_deprecated_increment_of_bool.html"/>
      <id>a9d753ce01226203f057c00ae006d02de8816e45:lang/cpp17/remove_deprecated_increment_of_bool.md</id>
      <updated>2020-09-07T20:35:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/remove_deprecated_increment_of_bool.md b/lang/cpp17/remove_deprecated_increment_of_bool.md
index dc9548963..f48a0edf8 100644
--- a/lang/cpp17/remove_deprecated_increment_of_bool.md
+++ b/lang/cpp17/remove_deprecated_increment_of_bool.md
@@ -158,6 +158,10 @@ C++14で`std::exchange()`が導入されたことにより、唯一使いみち
 - [Core issue 1653: Removing deprecated increment of bool](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4192.html#1653)
 - [N3668: exchange() utility function, revision 3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3668)
 - [history - Why does the boolean type in C++ support ++ but not --? - Software Engineering Stack Exchange](https://softwareengineering.stackexchange.com/questions/230928/why-does-the-boolean-type-in-c-support-but-not)
-- [An Investigation of Therac-25 Accidents - I](http://courses.cs.vt.edu/professionalism/Therac_25/Therac_1.html)
-- [Therac-25 - III](http://courses.cs.vt.edu/professionalism/Therac_25/Therac_3.html)
+- Leveson, Nancy G.; Turner, Clark S. (July 1993). [&amp;#34;An Investigation of the Therac-25 Accidents&amp;#34;](https://web.archive.org/web/20041128024227/http://www.cs.umd.edu/class/spring2003/cmsc838p/Misc/therac.pdf) (PDF). IEEE Computer. 26 (7): 18–41. doi:10.1109/MC.1993.274940.
+
+  テキスト起こし
+  1. [An Investigation of Therac-25 Accidents - I](http://web.archive.org/web/20171206153409/http://courses.cs.vt.edu/professionalism/Therac_25/Therac_1.html)
+  2. [Therac-25 - II](http://web.archive.org/web/20171212115910/http://courses.cs.vt.edu/professionalism/Therac_25/Therac_2.html)
+  3. [Therac-25 - III](http://web.archive.org/web/20170215125239/http://courses.cs.vt.edu/professionalism/Therac_25/Therac_3.html)
 - [Therac-25 - Wikipedia](https://en.wikipedia.org/wiki/Therac-25)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>インライン名前空間 -- chore(cpp11/inline_namespace): fix link</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/inline_namespaces.html"/>
      <id>e9494adce1d6bf7ca28af8353902247b285be765:lang/cpp11/inline_namespaces.md</id>
      <updated>2020-09-07T20:06:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/inline_namespaces.md b/lang/cpp11/inline_namespaces.md
index 08e2dd938..5a0fdee0e 100644
--- a/lang/cpp11/inline_namespaces.md
+++ b/lang/cpp11/inline_namespaces.md
@@ -238,7 +238,7 @@ v2
 - [N2013 Versioning with Namespaces](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2013.html)
 - [N2331 Namespace Association (&amp;#34;strong&amp;#34; using)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2331.html)
 - [N2535 Namespace Association (&amp;#34;inline namespace&amp;#34;)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2535.htm)
-- [7.9 Namespace Association - Using the GNU Compiler Collection (GCC)](https://gcc.gnu.org/onlinedocs/gcc/Namespace-Association.html#Namespace-Association)
+- [7.9 Namespace Association - Using the GNU Compiler Collection (GCC)](https://gcc.gnu.org/onlinedocs/gcc-4.9.4/gcc/Namespace-Association.html)
 - [CWG Issue 812. Duplicate names in inline namespaces](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#812)
 - [CWG Issue 861. Unintended ambiguity in inline namespace lookup](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#861)
 - [Inline namespaces and ambigous declarations - Stackoverflow](http://stackoverflow.com/questions/27252466/inline-namespaces-and-ambigous-declarations/)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>UTF-8エンコーディングされた文字の型として`char8_t`を追加 -- chore(cpp20/char8_t): fix link</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/char8_t.html"/>
      <id>bc6b75afc3d74ae37a92c9d949b31b2264418998:lang/cpp20/char8_t.md</id>
      <updated>2020-09-07T20:00:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/char8_t.md b/lang/cpp20/char8_t.md
index 781a7f315..cf44bc059 100644
--- a/lang/cpp20/char8_t.md
+++ b/lang/cpp20/char8_t.md
@@ -168,5 +168,5 @@ enum class char8_t : unsigned char {};
 
 ### その他
 
-- [Proposal for a C/C++ language extension to support portable UTF-16](http://www.unicode.org/%7Easmus/stdc-utf-16.txt)
+- [Proposal for a C/C++ language extension to support portable UTF-16](http://web.archive.org/web/20140701223639/http://www.unicode.org/~asmus/stdc-utf-16.txt)
 - [char8_tによせて - なるせにっき](https://naruse.hateblo.jp/entry/2018/12/24/013446)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr -- chore(cpp11/constexpr): fix link</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/constexpr.html"/>
      <id>b45e3d0e998d087d9ac8ad0537e2528368d0d2e9:lang/cpp11/constexpr.md</id>
      <updated>2020-09-07T19:51:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/constexpr.md b/lang/cpp11/constexpr.md
index 545fa4c44..8817c78d1 100644
--- a/lang/cpp11/constexpr.md
+++ b/lang/cpp11/constexpr.md
@@ -146,7 +146,7 @@ std::thread t2{job2};
 
 そんな状況のために、[`std::mutex`クラスのデフォルトコンストラクタ](/reference/mutex/mutex/op_constructor.md)には、`constexpr`修飾が行われている。そうすることで、その型の非ローカル変数を作ったときに、その変数は他の任意のスレッド開始よりも先に行われることが保証される。
 
-- [Constant Initialization - 雑貨&amp;#39;s tumblr](http://zakkas783.tumblr.com/post/25490513807/constant-initialization)
+- [雑貨&amp;#39;s tumblr - Constant Initialization](https://zakkas783-blog-blog.tumblr.com/post/25490513807/constant-initialization)
 - [`mutex`のconstexprコンストラクタ](http://d.hatena.ne.jp/yohhoy/20120621/p1)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
</feed>
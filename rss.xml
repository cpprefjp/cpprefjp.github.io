<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-06-21T14:39:35.799477</updated>
  <id>563da8a2-54d0-4ece-a5e0-0d8df0d74e9f</id>

  
    <entry>
      <title>erase -- map / setのerase : endが返る条件の文章がわかりにくかったので修正</title>
      <link href="https://cpprefjp.github.io/reference/map/map/erase.html"/>
      <id>ae7c515da20425de6c80b7b4336ec49ba8d7f0c6:reference/map/map/erase.md</id>
      <updated>2023-06-19T15:30:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/erase.md b/reference/map/map/erase.md
index df6cd4fe5..868c9e440 100644
--- a/reference/map/map/erase.md
+++ b/reference/map/map/erase.md
@@ -33,7 +33,7 @@ iterator erase(const_iterator first, const_iterator last); // (3) C++11
 ## 戻り値
 - (1), (3)
     - C++03 : 戻り値なし
-    - C++11 : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す(コンテナが空になった場合や、最後尾の要素を削除した場合)。
+    - C++11 : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す (要素を削除した結果としてコンテナが空になった場合)
 - (2) 削除された要素の数を返す。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- map / setのerase : endが返る条件の文章がわかりにくかったので修正</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/erase.html"/>
      <id>ae7c515da20425de6c80b7b4336ec49ba8d7f0c6:reference/map/multimap/erase.md</id>
      <updated>2023-06-19T15:30:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/erase.md b/reference/map/multimap/erase.md
index 0c19e0a46..2f45485d8 100644
--- a/reference/map/multimap/erase.md
+++ b/reference/map/multimap/erase.md
@@ -34,7 +34,7 @@ iterator erase(const_iterator first, const_iterator last); // (3) C++11
 ## 戻り値
 - (1), (3)
     - C++03 : 戻り値なし
-    - C++11 : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す(コンテナが空になった場合や、最後尾の要素を削除した場合)。
+    - C++11 : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す (要素を削除した結果としてコンテナが空になった場合)
 - (2) 削除された要素の数を返す。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- map / setのerase : endが返る条件の文章がわかりにくかったので修正</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/erase.html"/>
      <id>ae7c515da20425de6c80b7b4336ec49ba8d7f0c6:reference/set/multiset/erase.md</id>
      <updated>2023-06-19T15:30:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/erase.md b/reference/set/multiset/erase.md
index 73871bdc7..4aed5f014 100644
--- a/reference/set/multiset/erase.md
+++ b/reference/set/multiset/erase.md
@@ -33,7 +33,7 @@ size_type erase(const key_type&amp;amp; x);                        // (3)
 ## 戻り値
 - (1), (2) :
     - C++03 まで : なし
-    - C++11 から : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す(コンテナが空になった場合や、最後尾の要素を削除した場合)。
+    - C++11 : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す (要素を削除した結果としてコンテナが空になった場合)
 - (3) : 削除された要素の数を返す。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- map / setのerase : endが返る条件の文章がわかりにくかったので修正</title>
      <link href="https://cpprefjp.github.io/reference/set/set/erase.html"/>
      <id>ae7c515da20425de6c80b7b4336ec49ba8d7f0c6:reference/set/set/erase.md</id>
      <updated>2023-06-19T15:30:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/erase.md b/reference/set/set/erase.md
index a789cada3..1138910f9 100644
--- a/reference/set/set/erase.md
+++ b/reference/set/set/erase.md
@@ -33,7 +33,7 @@ size_type erase(const key_type&amp;amp; x);                        // (3)
 ## 戻り値
 - (1), (2) :
     - C++03 まで : なし
-    - C++11 から : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す(コンテナが空になった場合や、最後尾の要素を削除した場合)。
+    - C++11 : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す (要素を削除した結果としてコンテナが空になった場合)
 - (3) : 削除された要素の数を返す。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- map/setのerase : 範囲外のイテレータや存在しないキーが指定された場合の動作が未定義であることを記載</title>
      <link href="https://cpprefjp.github.io/reference/map/map/erase.html"/>
      <id>587bd5b265057b6b9f69895cf8c98d6c37bdd483:reference/map/map/erase.md</id>
      <updated>2023-06-19T15:23:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/erase.md b/reference/map/map/erase.md
index b0105266c..df6cd4fe5 100644
--- a/reference/map/map/erase.md
+++ b/reference/map/map/erase.md
@@ -19,6 +19,10 @@ iterator erase(const_iterator first, const_iterator last); // (3) C++11
 
 これは削除された要素の数だけコンテナの `size` を減らし、それぞれの要素のデストラクタを呼び出す。
 
+- (1) : 指定されたイテレータが指す要素を削除する
+- (2) : 指定されたキーをもつ要素を削除する
+- (3) : 指定されたイテレータ範囲の要素をすべて削除する
+
 
 ## パラメータ
 - `position` : `map` から削除する単一要素を指すイテレータ。`iterator` はメンバ型であり、双方向イテレータとして定義される。
@@ -40,7 +44,8 @@ iterator erase(const_iterator first, const_iterator last); // (3) C++11
 
 
 ## 備考
-- 削除された要素を指すイテレータ、および、参照のみ無効になる。なお、規格書に明確な記載は無いが、削除された要素を指すポインタも無効になる。
+- この関数に、範囲外のイテレータ (終端イテレータを含む) や存在しないキーを指定した場合の動作は未定義
+- 削除された要素を指すイテレータ、および、参照のみ無効になる。なお、規格書に明確な記載は無いが、削除された要素を指すポインタも無効になる
 - ループ中で `map` の要素を削除するためには、C++03 までは以下のようなコードを書く必要があった。
     ```cpp
     while (it != map_object.end()) {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- map/setのerase : 範囲外のイテレータや存在しないキーが指定された場合の動作が未定義であることを記載</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/erase.html"/>
      <id>587bd5b265057b6b9f69895cf8c98d6c37bdd483:reference/map/multimap/erase.md</id>
      <updated>2023-06-19T15:23:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/erase.md b/reference/map/multimap/erase.md
index 3a5579f7f..0c19e0a46 100644
--- a/reference/map/multimap/erase.md
+++ b/reference/map/multimap/erase.md
@@ -20,6 +20,10 @@ iterator erase(const_iterator first, const_iterator last); // (3) C++11
 
 これは削除された要素の数だけコンテナの `size` を減らし、それぞれの要素のデストラクタを呼び出す。
 
+- (1) : 指定されたイテレータが指す要素を削除する
+- (2) : 指定されたキーをもつ要素をすべて削除する
+- (3) : 指定されたイテレータ範囲の要素をすべて削除する
+
 
 ## パラメータ
 - `position` : `multimap` から削除する単一要素を指すイテレータ。`iterator` はメンバ型であり、双方向イテレータとして定義される。
@@ -41,6 +45,7 @@ iterator erase(const_iterator first, const_iterator last); // (3) C++11
 
 
 ## 備考
+- この関数に、範囲外のイテレータ (終端イテレータを含む) や存在しないキーを指定した場合の動作は未定義
 - 削除された要素を指すイテレータ、および、参照のみ無効になる。なお、規格書に明確な記載は無いが、削除された要素を指すポインタも無効になる。
 - ループ中で `multimap` の要素を削除するためには、C++03 までは以下のようなコードを書く必要があった。
     ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- map/setのerase : 範囲外のイテレータや存在しないキーが指定された場合の動作が未定義であることを記載</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/erase.html"/>
      <id>587bd5b265057b6b9f69895cf8c98d6c37bdd483:reference/set/multiset/erase.md</id>
      <updated>2023-06-19T15:23:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/erase.md b/reference/set/multiset/erase.md
index 5d22911a4..73871bdc7 100644
--- a/reference/set/multiset/erase.md
+++ b/reference/set/multiset/erase.md
@@ -19,6 +19,10 @@ size_type erase(const key_type&amp;amp; x);                        // (3)
 単一要素またはイテレータ範囲`[first, last)`を `multiset` コンテナから削除する。 
 これは削除された要素の数だけコンテナの [`size`](size.md)`()` を減らし、それぞれの要素のデストラクタを呼び出す。
 
+- (1) : 指定されたイテレータが指す要素を削除する
+- (2) : 指定されたキーをもつ要素をすべて削除する
+- (3) : 指定されたイテレータ範囲の要素をすべて削除する
+
 
 ## パラメータ
 - `position` : `multiset` から削除する単一要素を指すイテレータ。`iterator`、および、`const_iterator` はメンバ型であり、双方向イテレータとして定義される。
@@ -40,6 +44,7 @@ size_type erase(const key_type&amp;amp; x);                        // (3)
 
 
 ## 備考
+- この関数に、範囲外のイテレータ (終端イテレータを含む) や存在しないキーを指定した場合の動作は未定義
 - 削除された要素を指すイテレータ、および、参照のみ無効になる。なお、規格書に明確な記載は無いが、削除された要素を指すポインタも無効になる。
 - ループ中で `multiset` の要素を削除するためには、C++03 までは以下のようなコードを書く必要があった。
     ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- map/setのerase : 範囲外のイテレータや存在しないキーが指定された場合の動作が未定義であることを記載</title>
      <link href="https://cpprefjp.github.io/reference/set/set/erase.html"/>
      <id>587bd5b265057b6b9f69895cf8c98d6c37bdd483:reference/set/set/erase.md</id>
      <updated>2023-06-19T15:23:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/erase.md b/reference/set/set/erase.md
index 7dfa75ab7..a789cada3 100644
--- a/reference/set/set/erase.md
+++ b/reference/set/set/erase.md
@@ -19,6 +19,10 @@ size_type erase(const key_type&amp;amp; x);                        // (3)
 単一要素またはイテレータ範囲`[first, last)`を `set` コンテナから削除する。 
 これは削除された要素の数だけコンテナの [`size`](size.md)`()` を減らし、それぞれの要素のデストラクタを呼び出す。
 
+- (1) : 指定されたイテレータが指す要素を削除する
+- (2) : 指定されたキーをもつ要素を削除する
+- (3) : 指定されたイテレータ範囲の要素をすべて削除する
+
 
 ## パラメータ
 - `position` : `set` から削除する単一要素を指すイテレータ。`iterator`、および、`const_iterator` はメンバ型であり、双方向イテレータとして定義される。
@@ -40,6 +44,7 @@ size_type erase(const key_type&amp;amp; x);                        // (3)
 
 
 ## 備考
+- この関数に、範囲外のイテレータ (終端イテレータを含む) や存在しないキーを指定した場合の動作は未定義
 - 削除された要素を指すイテレータ、および、参照のみ無効になる。なお、規格書に明確な記載は無いが、削除された要素を指すポインタも無効になる。
 - ループ中で `set` の要素を削除するためには、C++03 までは以下のようなコードを書く必要があった。
     ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>offsetof -- offsetof : メタ情報の修正</title>
      <link href="https://cpprefjp.github.io/reference/cstddef/offsetof.html"/>
      <id>c46ebf4afd42816c9a9f10d04d668e336cfea25e:reference/cstddef/offsetof.md</id>
      <updated>2023-06-15T15:37:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstddef/offsetof.md b/reference/cstddef/offsetof.md
index 19146806b..94d3ac76d 100644
--- a/reference/cstddef/offsetof.md
+++ b/reference/cstddef/offsetof.md
@@ -1,7 +1,6 @@
 # offsetof
 * cstddef[meta header]
-* std[meta namespace]
-* type-alias[meta id-type]
+* macro[meta id-type]
 
 ```cpp
 # define offsetof(type, member) see-below
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンパイル時初期化を強制する`constinit`キーワードを追加 -- C++20 constinit : mutex/unique_ptrのコンストラクタと相互リンク</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/constinit.html"/>
      <id>5af768ad072b6415b1ed2d271af3f11270eaf5da:lang/cpp20/constinit.md</id>
      <updated>2023-06-14T18:24:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/constinit.md b/lang/cpp20/constinit.md
index 8d9a370fa..343186f49 100644
--- a/lang/cpp20/constinit.md
+++ b/lang/cpp20/constinit.md
@@ -196,6 +196,9 @@ int main() {}
 ## 関連項目
 
 - [C++11 `constexpr`](/lang/cpp11/constexpr.md)
+- [`mutex`のコンストラクタ](/reference/mutex/mutex/op_constructor.md)
+- [`unique_ptr`のコンストラクタ](/reference/memory/unique_ptr/op_constructor.md)
+
 
 ## 参照
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- C++20 constinit : mutex/unique_ptrのコンストラクタと相互リンク</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_constructor.html"/>
      <id>5af768ad072b6415b1ed2d271af3f11270eaf5da:reference/memory/unique_ptr/op_constructor.md</id>
      <updated>2023-06-14T18:24:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_constructor.md b/reference/memory/unique_ptr/op_constructor.md
index 6a6820ebf..58e858b2a 100644
--- a/reference/memory/unique_ptr/op_constructor.md
+++ b/reference/memory/unique_ptr/op_constructor.md
@@ -167,6 +167,10 @@ int main()
 	- 2012までは、delete宣言に対応していないため、代わりにprivateで宣言のみ行う手法で代用されている。
 
 
+## 関連項目
+- [C++20 コンパイル時初期化を強制する`constinit`キーワードを追加](/lang/cpp20/constinit.md)
+
+
 ## 参照
 - [N2435 Explicit bool for Smart Pointers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2435.htm)
     - (6)の経緯となる提案文書
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- C++20 constinit : mutex/unique_ptrのコンストラクタと相互リンク</title>
      <link href="https://cpprefjp.github.io/reference/mutex/mutex/op_constructor.html"/>
      <id>5af768ad072b6415b1ed2d271af3f11270eaf5da:reference/mutex/mutex/op_constructor.md</id>
      <updated>2023-06-14T18:24:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mutex/mutex/op_constructor.md b/reference/mutex/mutex/op_constructor.md
index 5067466c2..a725c6695 100644
--- a/reference/mutex/mutex/op_constructor.md
+++ b/reference/mutex/mutex/op_constructor.md
@@ -10,7 +10,7 @@ constexpr mutex() noexcept;   // (1)
 mutex(const mutex&amp;amp;) = delete; // (2)
 ```
 
-## mutexオブジェクトの構築
+## 概要
 - (1) : デフォルトコンストラクタ。`mutex`オブジェクトの初期化を行う。
 - (2) : コピーコンストラクタ。コピー不可。
 
@@ -106,6 +106,10 @@ A
     - 2012はコピーコンストラクタのdeleteに対応していないため、代わりにprivateで宣言のみ行う手法で代用されている。
 
 
+## 関連項目
+- [C++20 コンパイル時初期化を強制する`constinit`キーワードを追加](/lang/cpp20/constinit.md)
+
+
 ## 参照
 - [Constant Initialization - 雑貨&amp;#39;s tumblr](https://zakkas783-blog-blog.tumblr.com/post/25490513807/constant-initialization)
 - [mutexのconstexprコンストラクタ - yohhoyの日記](http://d.hatena.ne.jp/yohhoy/20120621/p1)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flat_map -- flat_map : begin, end系を追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map.html"/>
      <id>0376f471268c8f124984b4911a40bf6dec84eefc:reference/flat_map/flat_map.md</id>
      <updated>2023-06-14T18:17:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map.md b/reference/flat_map/flat_map.md
index 779e4536b..c699ae3a3 100644
--- a/reference/flat_map/flat_map.md
+++ b/reference/flat_map/flat_map.md
@@ -33,15 +33,15 @@ namespace std {
 ### イテレータ
 
 | 名前 | 説明 | 対応バージョン |
-|------------------------------|----------------------------------------------|-------|
-| [`begin`](flat_map/begin.md.nolink)     | 先頭を指すイテレータを取得する               | C++23 |
-| [`cbegin`](flat_map/cbegin.md.nolink)   | 先頭を指す読み取り専用イテレータを取得する   | C++23 |
-| [`end`](flat_map/end.md.nolink)         | 末尾を指すイテレータを取得する               | C++23 |
-| [`cend`](flat_map/cend.md.nolink)       | 末尾を指す読み取り専用イテレータを取得する   | C++23 |
-| [`rbegin`](flat_map/rbegin.md.nolink)   | 末尾を指す逆イテレータを取得する             | C++23 |
-| [`crbegin`](flat_map/crbegin.md.nolink) | 末尾を指す読み取り専用逆イテレータを取得する | C++23 |
-| [`rend`](flat_map/rend.md.nolink)       | 先頭を指す逆イテレータを取得する             | C++23 |
-| [`crend`](flat_map/crend.md.nolink)     | 先頭を指す読み取り専用逆イテレータを取得する | C++23 |
+|----------------------------------|--------------------------------------------------|-------|
+| [`begin`](flat_map/begin.md)     | 先頭を指すイテレータを取得する                   | C++23 |
+| [`cbegin`](flat_map/cbegin.md)   | 先頭を指す読み取り専用イテレータを取得する       | C++23 |
+| [`end`](flat_map/end.md)         | 末尾の次を指すイテレータを取得する               | C++23 |
+| [`cend`](flat_map/cend.md)       | 末尾の次を指す読み取り専用イテレータを取得する   | C++23 |
+| [`rbegin`](flat_map/rbegin.md)   | 末尾を指す逆イテレータを取得する                 | C++23 |
+| [`crbegin`](flat_map/crbegin.md) | 末尾を指す読み取り専用逆イテレータを取得する     | C++23 |
+| [`rend`](flat_map/rend.md)       | 先頭の前を指す逆イテレータを取得する             | C++23 |
+| [`crend`](flat_map/crend.md)     | 先頭の前を指す読み取り専用逆イテレータを取得する | C++23 |
 
 
 ### 領域
@@ -106,10 +106,10 @@ namespace std {
 | `const_reference` | 要素への`const`参照型。[`std::pair`](/reference/utility/pair.md)`&amp;lt;const key_type&amp;amp;, const mapped_type&amp;amp;&amp;gt;` | C++23 |
 | `size_type` | 要素数を表す符号なし整数型 [`size_t`](/reference/cstddef/size_t.md) | C++23 |
 | `difference_type` | 同一のコンテナを指す `iterator` の差を表す符号付き整数型 [`ptrdiff_t`](/reference/cstddef/ptrdiff_t.md) | C++23 |
-| `iterator` | 双方向イテレータ | C++23 |
-| `const_iterator` | 読み取り専用双方向イテレータ | C++23 |
-| `reverse_iterator` | 逆順双方向イテレータ。[`std::reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;iterator&amp;gt;` | C++23 |
-| `const_reverse_iterator` | 読み取り専用逆順双方向イテレータ。[`std::reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;const_iterator&amp;gt;` | C++23 |
+| `iterator` | ランダムアクセスイテレータ | C++23 |
+| `const_iterator` | 読み取り専用ランダムアクセスイテレータ | C++23 |
+| `reverse_iterator` | 逆順ランダムアクセスイテレータ。[`std::reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;iterator&amp;gt;` | C++23 |
+| `const_reverse_iterator` | 読み取り専用逆順ランダムアクセスイテレータ。[`std::reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;const_iterator&amp;gt;` | C++23 |
 | `key_container_type` | キーを格納するコンテナ型 `KeyContainer` | C++23 |
 | `mapped_container_type` | 値を格納するコンテナ型 `MappedContainer` | C++23 |
 | [`containers`](flat_map/containers.md) | キーのコンテナと値のコンテナを保持する型 | C++23 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- flat_map : begin, end系を追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/begin.html"/>
      <id>0376f471268c8f124984b4911a40bf6dec84eefc:reference/flat_map/flat_map/begin.md</id>
      <updated>2023-06-14T18:17:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/begin.md b/reference/flat_map/flat_map/begin.md
new file mode 100644
index 000000000..53f04ff97
--- /dev/null
+++ b/reference/flat_map/flat_map/begin.md
@@ -0,0 +1,88 @@
+# begin
+* flat_map[meta header]
+* std[meta namespace]
+* flat_map[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+iterator begin() noexcept;
+const_iterator begin() const noexcept;
+```
+
+
+## 概要
+コンテナの先頭のキーと要素のpairを参照するイテレータを取得する。
+
+内部的に、コンテナは要素を下位から上位へと並べており、従って`begin()`はコンテナ内の最下位のキーにあたるpairへのイテレータを返す。
+
+
+## 戻り値
+コンテナの先頭要素へのイテレータ。
+`iterator` と `const_iterator` はともにメンバ型である。このクラステンプレートにおいて、これらはランダムアクセスイテレータである。
+
+
+## 計算量
+定数時間。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;flat_map&amp;gt;
+
+int main()
+{
+  std::flat_map&amp;lt;int, char&amp;gt; fm;
+  fm[3] = &amp;#39;C&amp;#39;;
+  fm[7] = &amp;#39;G&amp;#39;;
+  fm[8] = &amp;#39;H&amp;#39;;
+  fm[4] = &amp;#39;D&amp;#39;;
+  fm[5] = &amp;#39;E&amp;#39;;
+  fm[1] = &amp;#39;A&amp;#39;;
+  fm[2] = &amp;#39;B&amp;#39;;
+  fm[6] = &amp;#39;F&amp;#39;;
+
+  for (auto i = fm.begin(); i != fm.end(); ++i) {
+      std::cout &amp;lt;&amp;lt; i-&amp;gt;first &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; i-&amp;gt;second &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
+  }
+}
+```
+* begin()[color ff0000]
+* fm.end()[link end.md]
+
+### 出力
+```
+1 A
+2 B
+3 C
+4 D
+5 E
+6 F
+7 G
+8 H
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前 | 説明 |
+|-----------------------------------|--------------------------------|
+| [`flat_map::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`flat_map::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`flat_map::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
+| [`flat_map::rbegin`](rbegin.md)   | 末尾を指す逆イテレータを取得する |
+| [`flat_map::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`flat_map::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`flat_map::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
+
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cbegin -- flat_map : begin, end系を追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/cbegin.html"/>
      <id>0376f471268c8f124984b4911a40bf6dec84eefc:reference/flat_map/flat_map/cbegin.md</id>
      <updated>2023-06-14T18:17:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/cbegin.md b/reference/flat_map/flat_map/cbegin.md
new file mode 100644
index 000000000..b128c228b
--- /dev/null
+++ b/reference/flat_map/flat_map/cbegin.md
@@ -0,0 +1,83 @@
+# cbegin
+* flat_map[meta header]
+* std[meta namespace]
+* flat_map[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+const_iterator cbegin() const noexcept;
+```
+
+
+## 概要
+コンテナの先頭のキーと要素のpairを参照するイテレータを取得する。
+
+内部的に、このコンテナは要素を下位から上位へと並べており、従って `cbegin()` はコンテナ内の最下位のキーにあたるpairへのイテレータを返す。
+
+
+## 戻り値
+コンテナの先頭要素へのイテレータ。
+`const_iterator` はメンバ型である。このクラステンプレートにおいて、これらはランダムアクセスイテレータである。
+
+
+## 計算量
+定数時間。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;flat_map&amp;gt;
+
+int main()
+{
+  std::flat_map&amp;lt;int, char&amp;gt; fm;
+  fm[3] = &amp;#39;C&amp;#39;;
+  fm[7] = &amp;#39;G&amp;#39;;
+  fm[8] = &amp;#39;H&amp;#39;;
+  fm[4] = &amp;#39;D&amp;#39;;
+  fm[5] = &amp;#39;E&amp;#39;;
+  fm[1] = &amp;#39;A&amp;#39;;
+  fm[2] = &amp;#39;B&amp;#39;;
+  fm[6] = &amp;#39;F&amp;#39;;
+
+  for (auto i = fm.cbegin(); i != fm.cend(); ++i) {
+      std::cout &amp;lt;&amp;lt; i-&amp;gt;first &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; i-&amp;gt;second &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
+  }
+}
+```
+* cbegin()[color ff0000]
+* fm.cend()[link cend.md]
+
+### 出力
+```
+1 A
+2 B
+3 C
+4 D
+5 E
+6 F
+7 G
+8 H
+```
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前 | 説明 |
+|-----------------------------------|--------------------------------|
+| [`flat_map::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`flat_map::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`flat_map::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
+| [`flat_map::rbegin`]rbegin.md)    | 末尾を指す逆イテレータを取得する |
+| [`flat_map::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`flat_map::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`flat_map::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cend -- flat_map : begin, end系を追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/cend.html"/>
      <id>0376f471268c8f124984b4911a40bf6dec84eefc:reference/flat_map/flat_map/cend.md</id>
      <updated>2023-06-14T18:17:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/cend.md b/reference/flat_map/flat_map/cend.md
new file mode 100644
index 000000000..ff0377cb5
--- /dev/null
+++ b/reference/flat_map/flat_map/cend.md
@@ -0,0 +1,86 @@
+# cend
+* flat_map[meta header]
+* std[meta namespace]
+* flat_map[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+const_iterator cend() const noexcept;
+```
+
+## 概要
+コンテナの末尾の次を参照するイテレータを取得する。
+
+
+## 戻り値
+コンテナの末尾の次を参照するイテレータ。 
+`const_iterator` はいずれもメンバ型である。このクラステンプレートにおいて、これらはランダムアクセスイテレータである。
+
+
+## 計算量
+定数時間
+
+
+## 備考
+- この関数によって返されるイテレータは、`*this`が保持するいずれの要素も参照しない。その指す先は、不正な範囲となるだろう
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;flat_map&amp;gt;
+
+int main()
+{
+  std::flat_map&amp;lt;int, char&amp;gt; fm;
+  fm[3] = &amp;#39;C&amp;#39;;
+  fm[7] = &amp;#39;G&amp;#39;;
+  fm[8] = &amp;#39;H&amp;#39;;
+  fm[4] = &amp;#39;D&amp;#39;;
+  fm[5] = &amp;#39;E&amp;#39;;
+  fm[1] = &amp;#39;A&amp;#39;;
+  fm[2] = &amp;#39;B&amp;#39;;
+  fm[6] = &amp;#39;F&amp;#39;;
+
+  for (auto i = fm.cbegin(); i != fm.cend(); ++i) {
+      std::cout &amp;lt;&amp;lt; i-&amp;gt;first &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; i-&amp;gt;second &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
+  }
+}
+```
+* cend()[color ff0000]
+* fm.cbegin()[link cbegin.md]
+
+### 出力
+```
+1 A
+2 B
+3 C
+4 D
+5 E
+6 F
+7 G
+8 H
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+## 関連項目
+
+| 名前 | 説明 |
+|------------------------------|-------------------------------------------|
+| [`flat_map::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`flat_map::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`flat_map::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`flat_map::rbegin`](rbegin.md)   | 末尾を指す逆イテレータを取得する |
+| [`flat_map::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`flat_map::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`flat_map::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contains -- flat_map : begin, end系を追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/contains.html"/>
      <id>0376f471268c8f124984b4911a40bf6dec84eefc:reference/flat_map/flat_map/contains.md</id>
      <updated>2023-06-14T18:17:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/contains.md b/reference/flat_map/flat_map/contains.md
index 8f2f27ae0..93009ba93 100644
--- a/reference/flat_map/flat_map/contains.md
+++ b/reference/flat_map/flat_map/contains.md
@@ -31,7 +31,7 @@ bool contains(const K&amp;amp; x) const;        // (2) C++23
 return find(x) != end();
 ```
 * find[link find.md]
-* end()[link end.md.nolink]
+* end()[link end.md]
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crbegin -- flat_map : begin, end系を追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/crbegin.html"/>
      <id>0376f471268c8f124984b4911a40bf6dec84eefc:reference/flat_map/flat_map/crbegin.md</id>
      <updated>2023-06-14T18:17:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/crbegin.md b/reference/flat_map/flat_map/crbegin.md
new file mode 100644
index 000000000..a1d900a90
--- /dev/null
+++ b/reference/flat_map/flat_map/crbegin.md
@@ -0,0 +1,78 @@
+# crbegin
+* flat_map[meta header]
+* std[meta namespace]
+* flat_map[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+const_reverse_iterator crbegin() const noexcept;
+```
+
+## 概要
+コンテナ内の末尾を指す逆イテレータを取得する。 
+内部的に、このコンテナは各要素をキーの値に従って下位から上位へと並べており、従って `crbegin()` は最上位のキーにあたる値へのイテレータを返す。 
+`crbegin()` は [`end()`](end.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
+
+
+## 戻り値
+反転したシーケンスの先頭を指す逆イテレータ。 
+`const_reverse_iterator` はメンバ型である。このクラステンプレートにおいて、これらは逆ランダムアクセスイテレータであり、`reverse_iterator&amp;lt;const_iterator&amp;gt;` と定義される。
+
+
+## 計算量
+定数時間。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;flat_map&amp;gt;
+
+int main()
+{
+  std::flat_map&amp;lt;int, char&amp;gt; fm {
+    {5, &amp;#39;e&amp;#39;},
+    {2, &amp;#39;b&amp;#39;},
+    {4, &amp;#39;d&amp;#39;},
+    {1, &amp;#39;a&amp;#39;},
+    {1, &amp;#39;a&amp;#39;}
+  };
+
+  std::flat_map&amp;lt;int, char&amp;gt;::const_reverse_iterator i = fm.crbegin();
+  for (; i != fm.crend() ; ++i) {
+    std::cout &amp;lt;&amp;lt; i-&amp;gt;first &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; i-&amp;gt;second &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* crbegin()[color ff0000]
+* fm.crend()[link crend.md]
+
+### 出力
+```
+5 e
+4 d
+2 b
+1 a
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+| 名前 | 説明 |
+-----------------------------|-------------------------------------------|
+| [`flat_map::begin`](begin.md)   | 先頭を指すイテレータを取得する |
+| [`flat_map::end`](end.md)       | 末尾の次を指すイテレータを取得する |
+| [`flat_map::cbegin`](cbegin.md) | 先頭を指すconstイテレータを取得する |
+| [`flat_map::cend`](cend.md)     | 末尾の次を指すconstイテレータを取得する |
+| [`flat_map::rbegin`](rbegin.md) | 末尾を指す逆イテレータを取得する |
+| [`flat_map::rend`](rend.md)     | 先頭の前を指す逆イテレータを取得する |
+| [`flat_map::crend`](crend.md)   | 先頭の前を指す逆constイテレータを取得する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crend -- flat_map : begin, end系を追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/crend.html"/>
      <id>0376f471268c8f124984b4911a40bf6dec84eefc:reference/flat_map/flat_map/crend.md</id>
      <updated>2023-06-14T18:17:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/crend.md b/reference/flat_map/flat_map/crend.md
new file mode 100644
index 000000000..ed608420b
--- /dev/null
+++ b/reference/flat_map/flat_map/crend.md
@@ -0,0 +1,76 @@
+# crend
+* flat_map[meta header]
+* std[meta namespace]
+* flat_map[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+const_reverse_iterator crend() const noexcept;
+```
+
+
+## 概要
+コンテナの先頭要素の前（これは反転シーケンスの末尾にあたる）を指す逆イテレータを取得する。 
+`crend()` は [`begin()`](begin.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
+
+
+## 戻り値
+反転シーケンスの終端を指す逆イテレータ。 
+`const_reverse_iterator` はメンバ型である。`map` クラステンプレートにおいて、これらは逆ランダムアクセスイテレータであり、`reverse_iterator&amp;lt;const_iterator&amp;gt;` と定義される。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;flat_map&amp;gt;
+
+int main()
+{
+  std::flat_map&amp;lt;int, char&amp;gt; fm {
+    {5, &amp;#39;e&amp;#39;},
+    {2, &amp;#39;b&amp;#39;},
+    {4, &amp;#39;d&amp;#39;},
+    {1, &amp;#39;a&amp;#39;},
+    {1, &amp;#39;a&amp;#39;}
+  };
+
+  std::flat_map&amp;lt;int, char&amp;gt;::const_reverse_iterator i = fm.crbegin();
+  for (; i != fm.crend() ; ++i) {
+    std::cout &amp;lt;&amp;lt; i-&amp;gt;first &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; i-&amp;gt;second &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* crend()[color ff0000]
+* fm.crbegin()[link crbegin.md]
+
+### 出力
+```
+5 e
+4 d
+2 b
+1 a
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+
+## 関連項目
+
+| 名前 | 説明 |
+|------------------------------|-----------------------------------------|
+| [`flat_map::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`flat_map::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`flat_map::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`flat_map::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
+| [`flat_map::rbegin`](rbegin.md)   | 末尾を指す逆イテレータを取得する |
+| [`flat_map::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`flat_map::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace_hint -- flat_map : begin, end系を追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/emplace_hint.html"/>
      <id>0376f471268c8f124984b4911a40bf6dec84eefc:reference/flat_map/flat_map/emplace_hint.md</id>
      <updated>2023-06-14T18:17:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/emplace_hint.md b/reference/flat_map/flat_map/emplace_hint.md
index 113abdf27..c9516eae4 100644
--- a/reference/flat_map/flat_map/emplace_hint.md
+++ b/reference/flat_map/flat_map/emplace_hint.md
@@ -52,7 +52,7 @@ int main()
 ```
 * emplace_hint[color ff0000]
 * fm.emplace[link emplace.md]
-* fm.end()[link end.md.nolink]
+* fm.end()[link end.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- flat_map : begin, end系を追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/end.html"/>
      <id>0376f471268c8f124984b4911a40bf6dec84eefc:reference/flat_map/flat_map/end.md</id>
      <updated>2023-06-14T18:17:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/end.md b/reference/flat_map/flat_map/end.md
new file mode 100644
index 000000000..a892c0acc
--- /dev/null
+++ b/reference/flat_map/flat_map/end.md
@@ -0,0 +1,87 @@
+# end
+* flat_map[meta header]
+* std[meta namespace]
+* flat_map[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+iterator end() noexcept;
+const_iterator end() const noexcept;
+```
+
+## 概要
+コンテナの末尾の次を参照するイテレータを取得する。
+
+
+## 戻り値
+コンテナの最後の要素の次を参照するイテレータ。 
+`iterator` と `const_iterator` はいずれもメンバ型である。`map` クラステンプレートにおいて、これらはランダムアクセスイテレータである。
+
+
+## 計算量
+定数時間
+
+
+## 備考
+- この関数によって返されるイテレータは、`*this`が保持するいずれの要素も参照しない。その指す先は、不正な範囲となるだろう
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;flat_map&amp;gt;
+
+int main()
+{
+  std::flat_map&amp;lt;int, char&amp;gt; fm;
+  fm[3] = &amp;#39;C&amp;#39;;
+  fm[7] = &amp;#39;G&amp;#39;;
+  fm[8] = &amp;#39;H&amp;#39;;
+  fm[4] = &amp;#39;D&amp;#39;;
+  fm[5] = &amp;#39;E&amp;#39;;
+  fm[1] = &amp;#39;A&amp;#39;;
+  fm[2] = &amp;#39;B&amp;#39;;
+  fm[6] = &amp;#39;F&amp;#39;;
+
+  for (auto i = fm.begin(); i != fm.end(); ++i) {
+      std::cout &amp;lt;&amp;lt; i-&amp;gt;first &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; i-&amp;gt;second &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
+  }
+}
+```
+* end()[color ff0000]
+* fm.begin()[link begin.md]
+
+### 出力
+```
+1 A
+2 B
+3 C
+4 D
+5 E
+6 F
+7 G
+8 H
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前 | 説明 |
+|-----------------------------------|-------------------------------------------|
+| [`flat_map::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`flat_map::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`flat_map::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
+| [`flat_map::rbegin`](rbegin.md)   | 末尾の次を指す逆イテレータを取得する |
+| [`flat_map::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`flat_map::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`flat_map::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find -- flat_map : begin, end系を追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/find.html"/>
      <id>0376f471268c8f124984b4911a40bf6dec84eefc:reference/flat_map/flat_map/find.md</id>
      <updated>2023-06-14T18:17:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/find.md b/reference/flat_map/flat_map/find.md
index 820727e59..5dcb21d11 100644
--- a/reference/flat_map/flat_map/find.md
+++ b/reference/flat_map/flat_map/find.md
@@ -29,8 +29,8 @@ const_iterator find(const K&amp;amp; x) const;        // (4) C++23
 
 
 ## 戻り値
-- (1), (3) : `x`と等価なキーの要素が見つかった場合は、見つかった要素へのイテレータを返す。そうでない場合は、 [`end()`](end.md.nolink) を返す。
-- (2), (4) : `key_compare`型の関数オブジェクトを`c`、コンテナ内の各要素が持つキーを`k`として、キーが等価か判定する式`!c(k, x) &amp;amp;&amp;amp; !c(x, k)`が`true`となる要素へのイテレータを返す。そのような要素がない場合は、[`end()`](end.md.nolink) を返す。
+- (1), (3) : `x`と等価なキーの要素が見つかった場合は、見つかった要素へのイテレータを返す。そうでない場合は、 [`end()`](end.md) を返す。
+- (2), (4) : `key_compare`型の関数オブジェクトを`c`、コンテナ内の各要素が持つキーを`k`として、キーが等価か判定する式`!c(k, x) &amp;amp;&amp;amp; !c(x, k)`が`true`となる要素へのイテレータを返す。そのような要素がない場合は、[`end()`](end.md) を返す。
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rbegin -- flat_map : begin, end系を追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/rbegin.html"/>
      <id>0376f471268c8f124984b4911a40bf6dec84eefc:reference/flat_map/flat_map/rbegin.md</id>
      <updated>2023-06-14T18:17:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/rbegin.md b/reference/flat_map/flat_map/rbegin.md
new file mode 100644
index 000000000..983534d7a
--- /dev/null
+++ b/reference/flat_map/flat_map/rbegin.md
@@ -0,0 +1,82 @@
+# rbegin
+* flat_map[meta header]
+* std[meta namespace]
+* flat_map[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+reverse_iterator rbegin() noexcept;
+const_reverse_iterator rbegin() const noexcept;
+```
+
+## 概要
+コンテナ内の末尾を指す逆イテレータを取得する。
+
+内部的に、このコンテナは各要素をキーの値に従って下位から上位へと並べており、従って `rbegin()` は最上位のキーにあたる値を指すイテレータを返す。 
+`rbegin()` は [`end()`](end.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
+
+
+## 戻り値
+反転したシーケンスの先頭を指す逆イテレータ。 
+`reverse_iterator` と `const_reverse_iterator` はともにメンバ型である。このクラステンプレートにおいて、これらは逆ランダムアクセスイテレータであり、それぞれ `reverse_iterator&amp;lt;iterator&amp;gt;`, `reverse_iterator&amp;lt;const_iterator&amp;gt;` と定義される。
+
+
+## 計算量
+定数時間。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;flat_map&amp;gt;
+
+int main()
+{
+  std::flat_map&amp;lt;int, char&amp;gt; fm {
+    {5, &amp;#39;e&amp;#39;},
+    {2, &amp;#39;b&amp;#39;},
+    {4, &amp;#39;d&amp;#39;},
+    {1, &amp;#39;a&amp;#39;},
+    {1, &amp;#39;a&amp;#39;}
+  };
+
+  std::flat_map&amp;lt;int, char&amp;gt;::reverse_iterator i = fm.rbegin();
+  for (; i != fm.rend() ; ++i) {
+    std::cout &amp;lt;&amp;lt; i-&amp;gt;first &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; i-&amp;gt;second &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* rbegin()[color ff0000]
+* fm.rend()[link rend.md]
+
+### 出力
+```
+5 e
+4 d
+2 b
+1 a
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前 | 説明 |
+-------------------------------|-----------------------------------------|
+| [`flat_map::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`flat_map::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`flat_map::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`flat_map::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
+| [`flat_map::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`flat_map::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`flat_map::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rend -- flat_map : begin, end系を追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/rend.html"/>
      <id>0376f471268c8f124984b4911a40bf6dec84eefc:reference/flat_map/flat_map/rend.md</id>
      <updated>2023-06-14T18:17:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/rend.md b/reference/flat_map/flat_map/rend.md
new file mode 100644
index 000000000..206000a68
--- /dev/null
+++ b/reference/flat_map/flat_map/rend.md
@@ -0,0 +1,75 @@
+# rend
+* flat_map[meta header]
+* std[meta namespace]
+* flat_map[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+reverse_iterator rend() noexcept;
+const_reverse_iterator rend() const noexcept;
+```
+
+## 概要
+コンテナの先頭要素の前（これは反転シーケンスの末尾にあたる）を指す逆イテレータを取得する。 
+`rend()` は [`begin()`](begin.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
+
+## 戻り値
+反転シーケンスの終端を指す逆イテレータ。 
+`reverse_iterator` と `const_reverse_iterator` はメンバ型である。このクラステンプレートにおいて、これらは逆ランダムアクセスイテレータであり、それぞれ `reverse_iterator&amp;lt;iterator&amp;gt;`, `reverse_iterator&amp;lt;const_iterator&amp;gt;` と定義される。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;flat_map&amp;gt;
+
+int main()
+{
+  std::flat_map&amp;lt;int, char&amp;gt; fm {
+    {5, &amp;#39;e&amp;#39;},
+    {2, &amp;#39;b&amp;#39;},
+    {4, &amp;#39;d&amp;#39;},
+    {1, &amp;#39;a&amp;#39;},
+    {1, &amp;#39;a&amp;#39;}
+  };
+
+  std::flat_map&amp;lt;int, char&amp;gt;::reverse_iterator i = fm.rbegin();
+  for (; i != fm.rend() ; ++i) {
+    std::cout &amp;lt;&amp;lt; i-&amp;gt;first &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; i-&amp;gt;second &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* rend()[color ff0000]
+* fm.rbegin()[link rbegin.md]
+
+### 出力
+```
+5 e
+4 d
+2 b
+1 a
+```
+
+## バージョン
+### 言語
+- C++23
+
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前 | 説明　|
+|------------------------------|--------------------------------------------|
+| [`flat_map::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`flat_map::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`flat_map::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`flat_map::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
+| [`flat_map::rbegin`](rbegin.md)   | 末尾を指す逆イテレータを取得する |
+| [`flat_map::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`flat_map::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2017-04-24T04:41:39.809498</updated>
  <id>14beccbc-a3bf-4e8b-9fff-38ec4a7432c8</id>

  
    <entry>
      <title>畳み込み式 -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site
</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/folding_expressions.html"/>
      <id>594c5daf281e11f36141f7552b11c6ef4244b2dd:lang/cpp17/folding_expressions.md</id>
      <updated>2017-04-24 04:41:25 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;畳み込み式&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;畳み込み式 (fold expression) は可変引数テンプレートのパラメータパックに対して二項演算を累積的に行う (畳み込む fold)。&lt;/p&gt;
&lt;h2&gt;仕様&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;pack&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;op&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;// (1) 単項右畳み込み&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;op&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;pack&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;// (2) 単項左畳み込み&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;pack&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;op&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;op&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;init&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// (3) 二項右畳み込み&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;init&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;op&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;op&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;pack&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// (4) 二項左畳み込み&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;畳み込み式は括弧 &lt;code&gt;()&lt;/code&gt; で囲まれなければならない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;op&lt;/code&gt; は後述する二項演算子&lt;br /&gt;
    二項畳み込み (3, 4) の場合 &lt;code&gt;op&lt;/code&gt; は同一でなければならない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pack&lt;/code&gt; は未展開のパラメータパック (規格ではキャスト式 cast-expression と呼ばれる)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;init&lt;/code&gt; は未展開のパラメータパック以外 (規格ではキャスト式 cast-expression と呼ばれる)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;畳み込み式は以下のように展開される:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;単項右畳み込みは &lt;code&gt;arg1 op (... op (argN-1 op argN))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;単項左畳み込みは &lt;code&gt;((arg1 op arg2) op ...) op argN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;二項右畳み込みは &lt;code&gt;arg1 op (... op (argN-1 op (argN op init)))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;二項左畳み込みは &lt;code&gt;(((init op arg1) op arg2) op ...) op argN&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ただし &lt;code&gt;argi&lt;/code&gt; はパラメータパックの i 番目の要素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;機能テストマクロは &lt;code&gt;__cpp_fold_expressions&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;演算子&lt;/h3&gt;
&lt;p&gt;オーバーロードを含めて以下の演算子を畳み込み式で使用できる:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;+&lt;/code&gt;
&lt;code&gt;-&lt;/code&gt;
&lt;code&gt;*&lt;/code&gt;
&lt;code&gt;/&lt;/code&gt;
&lt;code&gt;%&lt;/code&gt;
&lt;code&gt;^&lt;/code&gt;
&lt;code&gt;&amp;amp;&lt;/code&gt;
&lt;code&gt;|&lt;/code&gt;
&lt;code&gt;=&lt;/code&gt;
&lt;code&gt;&amp;lt;&lt;/code&gt;
&lt;code&gt;&amp;gt;&lt;/code&gt;
&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;
&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;
&lt;code&gt;+=&lt;/code&gt;
&lt;code&gt;-=&lt;/code&gt;
&lt;code&gt;*=&lt;/code&gt;
&lt;code&gt;/=&lt;/code&gt;
&lt;code&gt;%=&lt;/code&gt;
&lt;code&gt;^=&lt;/code&gt;
&lt;code&gt;&amp;amp;=&lt;/code&gt;
&lt;code&gt;|=&lt;/code&gt;
&lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt;
&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;
&lt;code&gt;==&lt;/code&gt;
&lt;code&gt;!=&lt;/code&gt;
&lt;code&gt;&amp;lt;=&lt;/code&gt;
&lt;code&gt;&amp;gt;=&lt;/code&gt;
&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;
&lt;code&gt;||&lt;/code&gt;
&lt;code&gt;,&lt;/code&gt;
&lt;code&gt;.*&lt;/code&gt;
&lt;code&gt;-&amp;gt;*&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;パラメータパックが空のときの式の値&lt;/h3&gt;
&lt;p&gt;単項畳み込み (1, 2) でパラメータパックが空の場合、以下の演算子については式の値が設定される:&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;演算子&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;`&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;上記以外の演算子に対し空のパラメータパックが適用された場合、プログラムは不適格となる。&lt;/p&gt;
&lt;p&gt;空のパラメータパックが適用された場合の挙動を変えるには二項畳み込み (3, 4) で値を与える。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 単項右畳み込みで和を計算&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 二項右畳み込みで和を計算、フォールバック値 0&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 単項左畳み込みで引数が全て true かどうかを返す&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 二項左畳み込みで引数を出力&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;print_all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ostream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;os&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;boolalpha&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//std::cout &amp;lt;&amp;lt; sum() &amp;lt;&amp;lt; &#39;\n&#39;;  // 不適格: 引数が必要&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// 引数がないので設定した 0 にフォールバック&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 引数がないので true にフォールバック&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print_all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;15
0
true
123
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;今までは、累積的に二項演算を行うには以下のように可変長引数関数を再帰的に呼び出さなければならなかった:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...);&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;畳み込み式によってこれを簡潔に書けるようになった。&lt;/p&gt;
&lt;h2&gt;検討されたほかの選択肢&lt;/h2&gt;
&lt;h3&gt;パラメータパックが空のときの &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt; の値&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4191.html&#34; target=&#34;_blank&#34;&gt;N4191&lt;/a&gt;,
&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4295.html&#34; target=&#34;_blank&#34;&gt;N4295&lt;/a&gt;
では以下の演算子についてもパラメータパックが空のときに値を設定することが提案されていた:&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;演算子&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;`\&lt;/td&gt;
&lt;td&gt;`&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;二項演算の単位元を設定するのは自然なことだと考えられた。&lt;/p&gt;
&lt;p&gt;しかしながら、&lt;code&gt;operator+&lt;/code&gt; をオーバーロードしてコンテナや文字列の連結に用いる (cf. &lt;code&gt;std::string&lt;/code&gt;) のは一般的なことである。
そのような場合、空のパラメータパックを与えたときに &lt;code&gt;int()&lt;/code&gt; が適用されるのは思わぬ挙動につながり、
しかもバグ発見が困難であることが
&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4358.pdf&#34; target=&#34;_blank&#34;&gt;N4358&lt;/a&gt;
で指摘された。&lt;br /&gt;
&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4072.html&#34; target=&#34;_blank&#34;&gt;N4072 Fixed Size Parameter Packs&lt;/a&gt;
との兼ね合いもあったが、
上記のフォールバック値は削除され、パラメータパックが空の場合は不適格となった。&lt;/p&gt;
&lt;p&gt;一方 &lt;code&gt;operator&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;operator||&lt;/code&gt;, &lt;code&gt;operator,&lt;/code&gt; はオーバーロードがバッドプラクティスとされているため残された。&lt;/p&gt;
&lt;h4&gt;上記の問題を解決するのに考えられた方法&lt;/h4&gt;
&lt;h5&gt;単位元 &lt;code&gt;identity_element&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;空のパラメータパックが与えられた場合、単項畳み込み式は以下のように実装される &lt;code&gt;empty_fold&lt;/code&gt; オブジェクトを返す:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BinaryFunction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;empty_fold&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;constexpr&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;identity_element&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BinaryFunction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;identity_element&lt;/code&gt; は単位元を持つあらゆるマグマに対して特殊化され、例えば &lt;code&gt;std::string::operator+&lt;/code&gt; では &lt;code&gt;&#34;&#34;s&lt;/code&gt; とする。&lt;br /&gt;
演算の左単位元と右単位元が異なる場合は、それぞれ &lt;code&gt;left_identity_element&lt;/code&gt; と &lt;code&gt;right_identity_element&lt;/code&gt; を定義する。
それらは特殊化されなかった場合 &lt;code&gt;identity_element&lt;/code&gt; にフォールバックする。&lt;/p&gt;
&lt;p&gt;この方法は可能な限りジェネリックであるが、以下のような問題があった:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空のパラメータパックは型付けされていないが、返り値の型は他の型に文脈的に変換可能である (暗黙の型変換につながり得る)&lt;/li&gt;
&lt;li&gt;テンプレート特殊化だけのために関数をオブジェクトしなければならない&lt;/li&gt;
&lt;li&gt;サポートする演算子と等価な関数オブジェクト間のマッピングを用意しなければならない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;結局のところこれは問題の解決にはつながらず、負担も大きいことから採用されなかった。&lt;/p&gt;
&lt;h5&gt;返り値の型推論&lt;/h5&gt;
&lt;p&gt;可能であれば空の畳み込みから返り値の型推論を行い、そうでなければプログラムを不適格とする。&lt;br /&gt;
例えば以下の例では &lt;code&gt;std::string&lt;/code&gt; に推論する:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;これは &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4072.html&#34; target=&#34;_blank&#34;&gt;N4072 Fixed Size Parameter Packs&lt;/a&gt;
と適合するが、以下のような問題があった:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空の単項畳み込みの型が必ずしも正しく推論されない&lt;/li&gt;
&lt;li&gt;単位元を持つ演算でしか機能しない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ルールが多い割に利点があまりないため採用されなかった。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;~&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;~&lt;/code&gt; も畳み込み式の演算子として
&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4191.html&#34; target=&#34;_blank&#34;&gt;N4191&lt;/a&gt;,
&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4295.html&#34; target=&#34;_blank&#34;&gt;N4295&lt;/a&gt;
で提案されていたが削除された (理由は発見できず)。&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/accumulate.html&#34;&gt;std::accumulate&lt;/a&gt;&lt;/code&gt; — イテレータの範囲について累積的に二項演算を行う&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4191.html&#34; target=&#34;_blank&#34;&gt;N4191 Folding expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4295.html&#34; target=&#34;_blank&#34;&gt;N4295 Folding expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4358.pdf&#34; target=&#34;_blank&#34;&gt;N4358 Unary Folds and Empty Parameter Packs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0036r0.pdf&#34; target=&#34;_blank&#34;&gt;P0036 Unary Folds and Empty Parameter Packs (revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>畳み込み式 -- 見た目の修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/folding_expressions.html"/>
      <id>44237633d8b57f2c577f48170b5ab50d75e9fd5f:lang/cpp17/folding_expressions.md</id>
      <updated>2017-04-24 04:41:03 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;畳み込み式&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;畳み込み式 (fold expression) は可変引数テンプレートのパラメータパックに対して二項演算を累積的に行う (畳み込む fold)。&lt;/p&gt;
&lt;h2&gt;仕様&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;pack&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;op&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;// (1) 単項右畳み込み&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;op&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;pack&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;// (2) 単項左畳み込み&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;pack&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;op&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;op&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;init&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// (3) 二項右畳み込み&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;init&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;op&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;op&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;pack&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// (4) 二項左畳み込み&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;畳み込み式は括弧 &lt;code&gt;()&lt;/code&gt; で囲まれなければならない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;op&lt;/code&gt; は後述する二項演算子&lt;br /&gt;
    二項畳み込み (3, 4) の場合 &lt;code&gt;op&lt;/code&gt; は同一でなければならない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pack&lt;/code&gt; は未展開のパラメータパック (規格ではキャスト式 cast-expression と呼ばれる)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;init&lt;/code&gt; は未展開のパラメータパック以外 (規格ではキャスト式 cast-expression と呼ばれる)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;畳み込み式は以下のように展開される:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;単項右畳み込みは &lt;code&gt;arg1 op (... op (argN-1 op argN))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;単項左畳み込みは &lt;code&gt;((arg1 op arg2) op ...) op argN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;二項右畳み込みは &lt;code&gt;arg1 op (... op (argN-1 op (argN op init)))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;二項左畳み込みは &lt;code&gt;(((init op arg1) op arg2) op ...) op argN&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ただし &lt;code&gt;argi&lt;/code&gt; はパラメータパックの i 番目の要素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;機能テストマクロは &lt;code&gt;__cpp_fold_expressions&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;演算子&lt;/h3&gt;
&lt;p&gt;オーバーロードを含めて以下の演算子を畳み込み式で使用できる:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;+&lt;/code&gt;
&lt;code&gt;-&lt;/code&gt;
&lt;code&gt;*&lt;/code&gt;
&lt;code&gt;/&lt;/code&gt;
&lt;code&gt;%&lt;/code&gt;
&lt;code&gt;^&lt;/code&gt;
&lt;code&gt;&amp;amp;&lt;/code&gt;
&lt;code&gt;|&lt;/code&gt;
&lt;code&gt;=&lt;/code&gt;
&lt;code&gt;&amp;lt;&lt;/code&gt;
&lt;code&gt;&amp;gt;&lt;/code&gt;
&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;
&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;
&lt;code&gt;+=&lt;/code&gt;
&lt;code&gt;-=&lt;/code&gt;
&lt;code&gt;*=&lt;/code&gt;
&lt;code&gt;/=&lt;/code&gt;
&lt;code&gt;%=&lt;/code&gt;
&lt;code&gt;^=&lt;/code&gt;
&lt;code&gt;&amp;amp;=&lt;/code&gt;
&lt;code&gt;|=&lt;/code&gt;
&lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt;
&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;
&lt;code&gt;==&lt;/code&gt;
&lt;code&gt;!=&lt;/code&gt;
&lt;code&gt;&amp;lt;=&lt;/code&gt;
&lt;code&gt;&amp;gt;=&lt;/code&gt;
&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;
&lt;code&gt;||&lt;/code&gt;
&lt;code&gt;,&lt;/code&gt;
&lt;code&gt;.*&lt;/code&gt;
&lt;code&gt;-&amp;gt;*&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;パラメータパックが空のときの式の値&lt;/h3&gt;
&lt;p&gt;単項畳み込み (1, 2) でパラメータパックが空の場合、以下の演算子については式の値が設定される:&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;演算子&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;`&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;上記以外の演算子に対し空のパラメータパックが適用された場合、プログラムは不適格となる。&lt;/p&gt;
&lt;p&gt;空のパラメータパックが適用された場合の挙動を変えるには二項畳み込み (3, 4) で値を与える。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 単項右畳み込みで和を計算&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 二項右畳み込みで和を計算、フォールバック値 0&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 単項左畳み込みで引数が全て true かどうかを返す&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 二項左畳み込みで引数を出力&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;print_all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ostream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;os&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;boolalpha&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//std::cout &amp;lt;&amp;lt; sum() &amp;lt;&amp;lt; &#39;\n&#39;;  // 不適格: 引数が必要&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// 引数がないので設定した 0 にフォールバック&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 引数がないので true にフォールバック&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print_all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;15
0
true
123
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;今までは、累積的に二項演算を行うには以下のように可変長引数関数を再帰的に呼び出さなければならなかった:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...);&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;畳み込み式によってこれを簡潔に書けるようになった。&lt;/p&gt;
&lt;h2&gt;検討されたほかの選択肢&lt;/h2&gt;
&lt;h3&gt;パラメータパックが空のときの &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt; の値&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4191.html&#34; target=&#34;_blank&#34;&gt;N4191&lt;/a&gt;,
&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4295.html&#34; target=&#34;_blank&#34;&gt;N4295&lt;/a&gt;
では以下の演算子についてもパラメータパックが空のときに値を設定することが提案されていた:&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;演算子&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;`\&lt;/td&gt;
&lt;td&gt;`&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;二項演算の単位元を設定するのは自然なことだと考えられた。&lt;/p&gt;
&lt;p&gt;しかしながら、&lt;code&gt;operator+&lt;/code&gt; をオーバーロードしてコンテナや文字列の連結に用いる (cf. &lt;code&gt;std::string&lt;/code&gt;) のは一般的なことである。
そのような場合、空のパラメータパックを与えたときに &lt;code&gt;int()&lt;/code&gt; が適用されるのは思わぬ挙動につながり、
しかもバグ発見が困難であることが
&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4358.pdf&#34; target=&#34;_blank&#34;&gt;N4358&lt;/a&gt;
で指摘された。&lt;br /&gt;
&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4072.html&#34; target=&#34;_blank&#34;&gt;N4072 Fixed Size Parameter Packs&lt;/a&gt;
との兼ね合いもあったが、
上記のフォールバック値は削除され、パラメータパックが空の場合は不適格となった。&lt;/p&gt;
&lt;p&gt;一方 &lt;code&gt;operator&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;operator||&lt;/code&gt;, &lt;code&gt;operator,&lt;/code&gt; はオーバーロードがバッドプラクティスとされているため残された。&lt;/p&gt;
&lt;h4&gt;上記の問題を解決するのに考えられた方法&lt;/h4&gt;
&lt;h5&gt;単位元 &lt;code&gt;identity_element&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;空のパラメータパックが与えられた場合、単項畳み込み式は以下のように実装される &lt;code&gt;empty_fold&lt;/code&gt; オブジェクトを返す:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BinaryFunction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;empty_fold&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;constexpr&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;identity_element&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BinaryFunction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;identity_element&lt;/code&gt; は単位元を持つあらゆるマグマに対して特殊化され、例えば &lt;code&gt;std::string::operator+&lt;/code&gt; では &lt;code&gt;&#34;&#34;s&lt;/code&gt; とする。&lt;br /&gt;
演算の左単位元と右単位元が異なる場合は、それぞれ &lt;code&gt;left_identity_element&lt;/code&gt; と &lt;code&gt;right_identity_element&lt;/code&gt; を定義する。
それらは特殊化されなかった場合 &lt;code&gt;identity_element&lt;/code&gt; にフォールバックする。&lt;/p&gt;
&lt;p&gt;この方法は可能な限りジェネリックであるが、以下のような問題があった:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空のパラメータパックは型付けされていないが、返り値の型は他の型に文脈的に変換可能である (暗黙の型変換につながり得る)&lt;/li&gt;
&lt;li&gt;テンプレート特殊化だけのために関数をオブジェクトしなければならない&lt;/li&gt;
&lt;li&gt;サポートする演算子と等価な関数オブジェクト間のマッピングを用意しなければならない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;結局のところこれは問題の解決にはつながらず、負担も大きいことから採用されなかった。&lt;/p&gt;
&lt;h5&gt;返り値の型推論&lt;/h5&gt;
&lt;p&gt;可能であれば空の畳み込みから返り値の型推論を行い、そうでなければプログラムを不適格とする。&lt;br /&gt;
例えば以下の例では &lt;code&gt;std::string&lt;/code&gt; に推論する:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;これは &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4072.html&#34; target=&#34;_blank&#34;&gt;N4072 Fixed Size Parameter Packs&lt;/a&gt;
と適合するが、以下のような問題があった:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空の単項畳み込みの型が必ずしも正しく推論されない&lt;/li&gt;
&lt;li&gt;単位元を持つ演算でしか機能しない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ルールが多い割に利点があまりないため採用されなかった。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;~&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;~&lt;/code&gt; も畳み込み式の演算子として
&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4191.html&#34; target=&#34;_blank&#34;&gt;N4191&lt;/a&gt;,
&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4295.html&#34; target=&#34;_blank&#34;&gt;N4295&lt;/a&gt;
で提案されていたが削除された (理由は発見できず)。&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/accumulate.html&#34;&gt;std::accumulate&lt;/a&gt;&lt;/code&gt; — イテレータの範囲について累積的に二項演算を行う&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4191.html&#34; target=&#34;_blank&#34;&gt;N4191 Folding expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4295.html&#34; target=&#34;_blank&#34;&gt;N4295 Folding expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4358.pdf&#34; target=&#34;_blank&#34;&gt;N4358 Unary Folds and Empty Parameter Packs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0036r0.pdf&#34; target=&#34;_blank&#34;&gt;P0036 Unary Folds and Empty Parameter Packs (revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>E Kawashima</name>
        <email>e-kwsm@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++17 -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site
</title>
      <link href="https://cpprefjp.github.io/lang/cpp17.html"/>
      <id>61e647a734542818b356ccbcef8712a6fa337172:lang/cpp17.md</id>
      <updated>2017-04-24 04:19:50 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;C++17&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++17とは、2017年中に改訂される予定の、C++バージョンの通称である。&lt;/p&gt;
&lt;p&gt;このバージョンは、策定中はC++1zと呼ばれていた。前バージョンであるC++11が策定中にC++0xと呼ばれ、C++14がC++1yと呼ばれており、「201z年にリリースされる」という年数の伏せ字として「z」が使われていた。&lt;/p&gt;
&lt;h2&gt;策定体制&lt;/h2&gt;
&lt;p&gt;C++14の策定開始段階から「Study Group (SG)」と呼ばれる専門家グループが複数作られ、そこで同時並行に新機能の議論、策定が進められていた。C++14ではそれらの機能は導入されなかったが、C++17ではSGで議論された機能のうち、仕様が固まったもののいくつかが導入されることとなった。&lt;/p&gt;
&lt;p&gt;各SGで考えられた仕様は「Technical Specification (TS)」という単位で個別に各国の承認をとっている。その段階では、ライブラリ機能は&lt;code&gt;std::exprerimental&lt;/code&gt;名前空間などで各コンパイラが実験的にサポートをしていた。これはコンパイラが実装経験を積み、ユーザーが使用経験を得てから標準に採用するためである。&lt;/p&gt;
&lt;p&gt;C++17では以下のTSが採用された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;TS&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Library Fundamentals TS&lt;/td&gt;
&lt;td&gt;基本的なライブラリ機能。&lt;code&gt;any&lt;/code&gt;, &lt;code&gt;optional&lt;/code&gt;, &lt;code&gt;string_view&lt;/code&gt;, メモリプール, 検索アルゴリズム, サンプリングアルゴリズム, タプルを展開して関数呼び出しする&lt;code&gt;apply&lt;/code&gt;関数, &lt;code&gt;shared_ptr&lt;/code&gt;の配列対応, 最大公約数と最小公倍数などが含まれる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Filesystem TS&lt;/td&gt;
&lt;td&gt;ファイルシステムのライブラリ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Parallelism TS&lt;/td&gt;
&lt;td&gt;並列ライブラリ。&lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt;や&lt;code&gt;&amp;lt;numeric&amp;gt;&lt;/code&gt;に並列アルゴリズムが追加される&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;言語機能&lt;/h2&gt;
&lt;h3&gt;変数・データ構造関係&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;浮動小数点数の16進数リテラル&lt;/td&gt;
&lt;td&gt;16進数表記で浮動小数点数リテラルを記述できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;インライン変数&lt;/td&gt;
&lt;td&gt;翻訳単位を跨いでひとつのオブジェクトになる変数を定義する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;構造化束縛&lt;/td&gt;
&lt;td&gt;組・タプル・配列を展開して変数定義する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;単一要素の波カッコ初期化を&lt;code&gt;T&lt;/code&gt;に推論する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;auto a{1};&lt;/code&gt;を&lt;code&gt;initializer_list&amp;lt;int&amp;gt;&lt;/code&gt;ではなく&lt;code&gt;int&lt;/code&gt;に推論する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/maybe_unused.html&#34;&gt;&lt;code&gt;[[maybe_unused]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用しない可能性のある変数に対する警告を抑制する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/nodiscard.html&#34;&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;戻り値を捨ててはならないことを指定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;値のコピー省略を保証&lt;/td&gt;
&lt;td&gt;右辺値を変数の初期化のために使用する場合、コピーもムーブも省略することを保証&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;厳密な式の評価順&lt;/td&gt;
&lt;td&gt;式の評価順を規定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;参照メンバをもつクラスの置き換え&lt;/td&gt;
&lt;td&gt;参照型メンバや&lt;code&gt;const&lt;/code&gt;データメンバを含むクラスについてこれまで結果は未定義とされていた配置&lt;code&gt;new&lt;/code&gt;によるオブジェクトの置き換えを条件付きで可能とする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;制御構文&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;if&lt;/code&gt;文と&lt;code&gt;switch&lt;/code&gt;文の条件式と初期化を分離&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if (init; condition)&lt;/code&gt;のように初期化と条件式を分けて記述できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/fallthrough.html&#34;&gt;&lt;code&gt;[[fallthrough]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;フォールスルー時の警告を抑制する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;if constexpr&lt;/code&gt;文&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if constexpr(cond)&lt;/code&gt;とすることで、その&lt;code&gt;if&lt;/code&gt;文はコンパイル時に処理される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;範囲&lt;code&gt;for&lt;/code&gt;文のための&lt;code&gt;begin()&lt;/code&gt;と&lt;code&gt;end()&lt;/code&gt;関数が、異なる型を返すことを許可&lt;/td&gt;
&lt;td&gt;&lt;code&gt;begin()&lt;/code&gt;と&lt;code&gt;end()&lt;/code&gt;が異なるイテレータ型を返せるようにすることで、終端イテレータを定義しやすくする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ラムダ式&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ラムダ式での&lt;code&gt;*this&lt;/code&gt;のコピーキャプチャ&lt;/td&gt;
&lt;td&gt;キャプチャリストに&lt;code&gt;*this&lt;/code&gt;を指定することで、&lt;code&gt;*this&lt;/code&gt;をコピーキャプチャする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;ラムダ&lt;/td&gt;
&lt;td&gt;ラムダ式の関数オブジェクトが定数式の文脈で使用された場合に、それがコンパイル時に評価されるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;テンプレート&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/folding_expressions.html&#34;&gt;畳み込み式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;パラメータパックに対する二項演算の累積処理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;テンプレートテンプレートパラメータに&lt;code&gt;typename&lt;/code&gt;キーワードの使用を許可&lt;/td&gt;
&lt;td&gt;&lt;code&gt;class&lt;/code&gt;キーワードしか使用できなかった部分に、&lt;code&gt;typename&lt;/code&gt;を許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;クラステンプレートのテンプレート引数推論&lt;/td&gt;
&lt;td&gt;コンストラクタの引数からクラスのテンプレート引数を推論できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;非型テンプレートパラメータの&lt;code&gt;auto&lt;/code&gt;宣言&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;auto x&amp;gt;&lt;/code&gt;とすることで、&lt;code&gt;X&amp;lt;3&amp;gt;; X&amp;lt;true&amp;gt;; X&amp;lt;&#39;a&#39;&amp;gt;&lt;/code&gt;のように定数を受け取りやすくする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;全ての非型テンプレート引数の定数式評価を許可&lt;/td&gt;
&lt;td&gt;ポインタの定数式評価として、配列からポインタへの変換や、関数から関数ポインタへの変換などを許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;using&lt;/code&gt;宣言のパック展開&lt;/td&gt;
&lt;td&gt;パラメータパックの型を基本クラスとして指定した場合に、using宣言に基本クラスのパラメータパックを指定できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;定数式&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/extending_static_assert.html&#34;&gt;&lt;code&gt;static_assert&lt;/code&gt;のメッセージ省略を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;第2引数だった診断メッセージの省略を許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;ラムダ&lt;/td&gt;
&lt;td&gt;ラムダ式の関数オブジェクトが定数式の文脈で使用された場合に、それがコンパイル時に評価されるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;if constexpr&lt;/code&gt;文&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if constexpr(cond)&lt;/code&gt;とすることで、その&lt;code&gt;if&lt;/code&gt;文はコンパイル時に処理される&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;名前空間&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/nested_namespace.html&#34;&gt;入れ子名前空間の定義&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;namespace A::B {}&lt;/code&gt;のように、入れ子の名前空間を簡単に定義できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;名前空間と列挙子への属性付加を許可&lt;/td&gt;
&lt;td&gt;名前空間の定義と、列挙型の各要素の定義に、属性を付けられるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;using&lt;/code&gt;宣言のパック展開&lt;/td&gt;
&lt;td&gt;パラメータパックの型を基本クラスとして指定した場合に、using宣言に基本クラスのパラメータパックを指定できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;例外&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/exception_spec_be_part_of_the_type_system.md.nolink&#34;&gt;例外仕様を型システムの一部にする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の型に例外仕様が含まれるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;非推奨だった古い例外仕様を削除&lt;/td&gt;
&lt;td&gt;&lt;code&gt;throw&lt;/code&gt;キーワードによる例外仕様を削除。&lt;code&gt;throw()&lt;/code&gt;は残る&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;属性&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/fallthrough.html&#34;&gt;&lt;code&gt;[[fallthrough]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;フォールスルー時の警告を抑制する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/maybe_unused.html&#34;&gt;&lt;code&gt;[[maybe_unused]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用しない可能性のある変数に対する警告を抑制する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/nodiscard.html&#34;&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;戻り値を捨ててはならないことを指定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;名前空間と列挙子への属性付加を許可&lt;/td&gt;
&lt;td&gt;名前空間の定義と、列挙型の各要素の定義に、属性を付けられるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/using_attribute_namespaces.html&#34;&gt;属性の名前空間指定に繰り返しをなくす&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[[using CC: opt(1), debug]]&lt;/code&gt;のように属性の名前空間宣言をまとめて行う&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/non_standard_attributes.html&#34;&gt;不明な属性を無視する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;実装が知らない名前空間の属性は無視する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;プリプロセッサ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/has_include.html&#34;&gt;__has_include&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;インクルードするファイルが存在するかを確認する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;機能の削除&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;トライグラフを削除&lt;/td&gt;
&lt;td&gt;現代では使用する必要がなくなったトライグラフ機能を削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;非推奨だった&lt;code&gt;register&lt;/code&gt;キーワードを削除&lt;/td&gt;
&lt;td&gt;コンパイラから単に無視されていた&lt;code&gt;register&lt;/code&gt;キーワードを削除。予約語は残る&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/remove_deprecated_increment_of_bool.html&#34;&gt;非推奨だった&lt;code&gt;bool&lt;/code&gt;型に対するインクリメント演算子を削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bool&lt;/code&gt;変数に対して&lt;code&gt;++&lt;/code&gt;すると&lt;code&gt;true&lt;/code&gt;になる仕様を削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;非推奨だった古い例外仕様を削除&lt;/td&gt;
&lt;td&gt;&lt;code&gt;throw&lt;/code&gt;キーワードによる例外仕様を削除。&lt;code&gt;throw()&lt;/code&gt;は残る&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;小さな変更&lt;/h3&gt;
&lt;p&gt;ここでは、コア言語作業グループへ問題報告され、その解決策として導入された言語仕様の変更を解説する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/predefined_macros.html&#34;&gt;更新された定義済みマクロ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;標準規格で定義されたマクロの更新&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/lambda_to_noexcept_function_pointer.html&#34;&gt;&lt;code&gt;noexcept&lt;/code&gt;付きのラムダ式から変換する関数ポインタに&lt;code&gt;noexcept&lt;/code&gt;を付加する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャプチャを持たない非ジェネリックラムダに&lt;code&gt;noexcept&lt;/code&gt;を付加した場合、変換した関数ポインタに&lt;code&gt;noexcept&lt;/code&gt;を付加する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブラリ更新の概要&lt;/h2&gt;
&lt;h3&gt;新ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem.md.nolink&#34;&gt;&amp;lt;filesystem&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダを新設し、ファイルシステムライブラリを追加。ファイル、ディレクトリなどを扱う&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;や&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;のアルゴリズムに、並列実行のオプションを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/optional.md.nolink&#34;&gt;&amp;lt;optional&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダを新設し、統一的な有効値と無効値の表現をもつ&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/optional/optional.md.nolink&#34;&gt;optional&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/variant.md.nolink&#34;&gt;&amp;lt;variant&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダを新設し、型安全な共用体&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/variant/variant.md.nolink&#34;&gt;variant&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/any.md.nolink&#34;&gt;&amp;lt;any&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダを新設し、なんでも代入できる&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/any/any.md.nolink&#34;&gt;any&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;標準ライブラリの参照をC11に更新&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cfloat.html&#34;&gt;&amp;lt;cfloat&amp;gt;&lt;/a&gt;&lt;/code&gt;に、非正規化数の有無を判定するマクロ、10進数の桁数を表すマクロ、正の最小数を表すマクロを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib.html&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/aligned_alloc.md.nolink&#34;&gt;aligned_alloc()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ctime.md.nolink&#34;&gt;&amp;lt;ctime&amp;gt;&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ctime/time_utc.md.nolink&#34;&gt;TIME_UTC&lt;/a&gt;&lt;/code&gt;マクロ, &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ctime/timespec.nolink&#34;&gt;timespec&lt;/a&gt;&lt;/code&gt;構造体, &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ctime/timespec_get.md.nolink&#34;&gt;timespec_get()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdio.md.nolink&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdio/vfscanf.md.nolink&#34;&gt;vfscanf()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;ccomplex&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;cstdalign&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;cstdbool&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;ctgmath&amp;gt;&lt;/code&gt;を非推奨化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;コンテナ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;コンテナのコピー・ムーブ、&lt;code&gt;swap&lt;/code&gt;操作に&lt;code&gt;noexcept&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;コンテナの要素情報にアクセスする非メンバ関数として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/size.md.nolink&#34;&gt;size()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/empty.md.nolink&#34;&gt;empty()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/data.md.nolink&#34;&gt;data()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;コンテナに不完全型の最小サポートを追加。&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&lt;/code&gt;の要素型に、不完全型の指定を許可。ただし、これらのコンテナのなんらかのメンバ関数を呼び出す前には、要素型が完全型になっていること&lt;/li&gt;
&lt;li&gt;多相アロケータとメモリプール。&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory_resource.md.nolink&#34;&gt;&amp;lt;memory_resource&amp;gt;&lt;/a&gt;&lt;/code&gt;が新設され、アロケートする型を規定しないアロケータと、それを利用したメモリプールの仕組みが導入される&lt;/li&gt;
&lt;li&gt;標準イテレータ全般と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/array.html&#34;&gt;array&lt;/a&gt;&lt;/code&gt;の変更操作に&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;emplace_front()&lt;/code&gt;と&lt;code&gt;emplace_back()&lt;/code&gt;メンバ関数で、追加された要素を返すようにする&lt;/li&gt;
&lt;li&gt;連想コンテナの接合機能を追加。ほかのコンテナに要素を移すために抽出する&lt;code&gt;extract()&lt;/code&gt;メンバ関数、抽出された要素をほかのコンテナに移すための&lt;code&gt;insert()&lt;/code&gt;メンバ関数のオーバーロード、2つの連想コンテナをまるごと接合する&lt;code&gt;merge()&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map&lt;/code&gt;と&lt;code&gt;unordered_map&lt;/code&gt;に、挿入失敗時の動作を規定した新たなメンバ関数として、&lt;code&gt;try_emplace()&lt;/code&gt;と&lt;code&gt;insert_or_assign()&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;イテレータの分類に「隣接イテレータ (contiguous iterator)」を追加。要素間のメモリが隣接していることを表す。以下のコンテナのイテレータは、隣接イテレータであることが規定される：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;basic_string&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/array.html&#34;&gt;array&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool&lt;/code&gt;以外を要素型とする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/valarray/valarray.html&#34;&gt;valarray&lt;/a&gt;&lt;/code&gt; (の非メンバ関数である&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/valarray/valarray/begin_free.html&#34;&gt;std::begin()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/valarray/valarray/end_free.html&#34;&gt;std::end()&lt;/a&gt;&lt;/code&gt;で返されるイテレータは隣接イテレータ)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;アルゴリズム&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ランダムサンプリングアルゴリズムとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/sample.md.nolink&#34;&gt;sample()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;値を範囲内に収める&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/clamp.md.nolink&#34;&gt;clamp()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool&lt;/code&gt;を返す関数オブジェクトの結果を反転させる&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/not_fn.md.nolink&#34;&gt;not_fn()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;INVOKEコンセプトに従った関数呼び出しをする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/invoke.md.nolink&#34;&gt;invoke()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/reference_wrapper.html&#34;&gt;reference_wrapper&lt;/a&gt;&lt;/code&gt;がTriviallyCopyableであることを保証&lt;/li&gt;
&lt;li&gt;オブジェクトを&lt;code&gt;const&lt;/code&gt;にする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/as_const.html&#34;&gt;as_const()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;未初期化メモリのアルゴリズムと、デストラクタ呼び出しの関数として、以下の関数を追加： &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/destroy_at.md.nolink&#34;&gt;destroy_at()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/destroy.md.nolink&#34;&gt;destroy()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/destroy_n.md.nolink&#34;&gt;destroy_n()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uninitialized_move.md.nolink&#34;&gt;uninitialized_move()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uninitialized_move_n.md.nolink&#34;&gt;uninitialized_move_n()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uninitialized_value_construct.md.nolink&#34;&gt;uninitialized_value_construct()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uninitialized_value_construct_n.md.nolink&#34;&gt;uninitialized_value_construct_n()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uninitialized_default_construct.md.nolink&#34;&gt;uninitialized_default_construct()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uninitialized_default_construct.md.nolink&#34;&gt;uninitialized_default_construct()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view.md.nolink&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;クラスを新設し、所有権を持たない文字列クラスである&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view/basic_string_view.md.nolink&#34;&gt;basic_string_view&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string/data.html&#34;&gt;basic_string::data()&lt;/a&gt;&lt;/code&gt;メンバ関数の非&lt;code&gt;const&lt;/code&gt;版を追加&lt;/li&gt;
&lt;li&gt;文字列検索アルゴリズムとして、「ボイヤー・ムーア法 (Boyer-Moore)」と「ボイヤー・ムーア・ホースプール法 (Boyer-Moore-Horspool)」を追加。&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/search.html&#34;&gt;std::search()&lt;/a&gt;&lt;/code&gt;関数のポリシーとして、検索アルゴリズムを指定する&lt;/li&gt;
&lt;li&gt;ロケール依存なし、フォーマット解析なしの高速な文字列・数値変換関数として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/to_chars.md.nolink&#34;&gt;to_chars()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/from_chars.md.nolink&#34;&gt;from_chars()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/char_traits.html&#34;&gt;char_traits&lt;/a&gt;&lt;/code&gt;クラスを&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;li&gt;バイトデータを表す&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstddef/byte.md.nolink&#34;&gt;byte&lt;/a&gt;&lt;/code&gt;型を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;並行処理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;タイムアウト機能がないReaders-writer lockのミューテックスとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/shared_mutex/shared_mutex.md.nolink&#34;&gt;shared_mutex&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;スコープ付きロックの可変引数版として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mutex/scoped_lock.md.nolink&#34;&gt;scoped_lock&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic.html&#34;&gt;atomic&lt;/a&gt;&lt;/code&gt;クラスに、指定された要素型に対するアトミック操作がロックフリー(非ミューテックス)に振る舞うかを判定するために&lt;code&gt;is_always_lock_free&lt;/code&gt;定数を追加&lt;/li&gt;
&lt;li&gt;false sharingとtrue sharingを制御するための機能として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/hardware_destructive_interference_size.md.nolink&#34;&gt;hardware_destructive_interference_size&lt;/a&gt;&lt;/code&gt;定数と、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/hardware_constructive_interference_size.md.nolink&#34;&gt;hardware_constructive_interference_size&lt;/a&gt;&lt;/code&gt;定数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;スマートポインタ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;shared_ptr&lt;/a&gt;&lt;/code&gt;を配列に対応&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;shared_ptr&lt;/a&gt;&lt;/code&gt;クラスに、指定された要素型の&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/weak_ptr.html&#34;&gt;weak_ptr&lt;/a&gt;&lt;/code&gt;型を表す&lt;code&gt;weak_type&lt;/code&gt;メンバ型を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;shared_ptr&lt;/a&gt;::&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr/use_count.html&#34;&gt;use_count()&lt;/a&gt;&lt;/code&gt;の仕様を明確化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/enable_shared_from_this/shared_from_this.html&#34;&gt;shared_from_this&lt;/a&gt;&lt;/code&gt;の指す先が書き換わらないことを規定&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配列版&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/unique_ptr.html&#34;&gt;unique_ptr&lt;/a&gt;&lt;/code&gt;の型変換として、以下のコードが不適格だった：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unique_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;このようなコードが適格になるよう、変換コンストラクタと変換代入演算子を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/unique_ptr.html&#34;&gt;unique_ptr&lt;/a&gt;&lt;/code&gt;のテンプレート代入演算子に、不足していたSFINAEルールを追加&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/owner_less.html&#34;&gt;owner_less&lt;/a&gt;&lt;/code&gt;で、任意の要素型を持つ&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;shared_ptr&lt;/a&gt;&lt;/code&gt;同士を比較できるようにする&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;数学&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;に数学の特殊関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/hypot.html&#34;&gt;hypot()&lt;/a&gt;&lt;/code&gt;関数の3引数版を追加&lt;/li&gt;
&lt;li&gt;最大公約数と最小公倍数の関数として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/gcd.md.nolink&#34;&gt;gcd()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/lcm.md.nolink&#34;&gt;lcm()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;タプル&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;タプルを展開して関数呼び出しする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple/apply.md.nolink&#34;&gt;apply()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;タプルを任意の型のオブジェクトに変換する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple/make_from_tuple.md.nolink&#34;&gt;make_from_tuple()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初期化子リストから&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;/code&gt;を構築しやすくするための改善として、以下のコードが適格になるようコンストラクタの仕様を調整：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tuple&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pixel_coordinates&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// コンパイルエラー&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NonCopyable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NonCopyable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NonCopyable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NonCopyable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pair&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NonCopyable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.14&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// C++14ではコンパイルエラー&lt;/span&gt;
                                              &lt;span class=&#34;c1&#34;&gt;// C++17ではOK&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;型特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;値を返す型特性クラスの&lt;code&gt;constexpr&lt;/code&gt;変数テンプレート版を追加。変数テンプレート版は、末尾に&lt;code&gt;_v&lt;/code&gt;が付く。&lt;code&gt;v&lt;/code&gt;は&lt;code&gt;value&lt;/code&gt; (値) を意味する&lt;/li&gt;
&lt;li&gt;型特性クラスを定義しやすくするために、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/void_t.md.nolink&#34;&gt;void_t&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool&lt;/code&gt;定数を表す&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/bool_constant.md.nolink&#34;&gt;bool_constant&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;コンパイル時条件の論理演算のために、論理積である&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/conjunction.md.nolink&#34;&gt;conjunction&lt;/a&gt;&lt;/code&gt;、論理和である&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/disjunction.md.nolink&#34;&gt;disjunction&lt;/a&gt;&lt;/code&gt;、否定である&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/negation.md.nolink&#34;&gt;negation&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swap&lt;/code&gt;可能かを判定する型特性クラスとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_swappable_with.md.nolink&#34;&gt;is_swappable_with&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_swappable.md.nolink&#34;&gt;is_swappable&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_swappable_with.md.nolink&#34;&gt;is_nothrow_swappable_with&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_swappable.md.nolink&#34;&gt;is_nothrow_swappable&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;関数が呼び出し可能かを判定する型特性として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_invocable.md.nolink&#34;&gt;is_invocable&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_invocable_r.md.nolink&#34;&gt;is_invocable_r&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_invocable.md.nolink&#34;&gt;is_nothrow_invocable&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_invocable_r.md.nolink&#34;&gt;is_nothrow_invocable_r&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;自動的にハッシュ値が求められる型かを判定するために&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/has_unique_object_representations.md.nolink&#34;&gt;has_unique_object_representations&lt;/a&gt;&lt;/code&gt;型特性を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/invoke.md.nolink&#34;&gt;invoke()&lt;/a&gt;&lt;/code&gt;の追加にともない、関数の戻り値型を取得する型特性&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/invoke_result.md.nolink&#34;&gt;invoke_result&lt;/a&gt;&lt;/code&gt;を追加。これまでの&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/result_of.html&#34;&gt;result_of&lt;/a&gt;&lt;/code&gt;と違って関数型のテンプレート引数を使用しないため、それによって起こっていた厄介な問題を回避する&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;時間演算&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/duration.html&#34;&gt;duration&lt;/a&gt;&lt;/code&gt;の丸め演算として、切り下げをする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/duration/floor.md.nolink&#34;&gt;floor()&lt;/a&gt;&lt;/code&gt;、切り上げをする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/duration/ceil.md.nolink&#34;&gt;ceil()&lt;/a&gt;&lt;/code&gt;、最近接遇数への丸めをする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/duration/round.md.nolink&#34;&gt;round()&lt;/a&gt;&lt;/code&gt;、絶対値を求める&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/duration/abs.md.nolink&#34;&gt;abs()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/time_point.html&#34;&gt;time_point&lt;/a&gt;&lt;/code&gt;の丸め演算として、切り下げをする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/time_point/floor.md.nolink&#34;&gt;floor()&lt;/a&gt;&lt;/code&gt;、切り上げをする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/time_point/ceil.md.nolink&#34;&gt;ceil()&lt;/a&gt;&lt;/code&gt;、最近接遇数への丸めをする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/time_point/round.md.nolink&#34;&gt;round()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/duration.html&#34;&gt;duration&lt;/a&gt;&lt;/code&gt;クラスと&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/time_point.html&#34;&gt;time_point&lt;/a&gt;&lt;/code&gt;クラスの変更操作を&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;乱数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ランダムサンプリングアルゴリズムとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/sample.md.nolink&#34;&gt;sample()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;乱数用語を変更。乱数生成器のコンセプトに 「URNG (Uniform Random Number Generator, 一様乱数生成器)」という用語を使用していたが、一般的なURNGの用語とは異なり、C++の乱数生成器は一度の呼び出しで、(32ビットを超えるような) より多くのビットを単一の符号なし整数にパックして返すという動作が許可されている。動作の誤解を避けるために、「URBG (Uniform Random Bit Generator)」という用語に変更する&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;エラーハンドリング&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;現在発生している例外の数を取得する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/exception/uncaught_exceptions.md.nolink&#34;&gt;uncaught_exceptions()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;取り決め&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std&lt;/code&gt; + 数字の名前空間を予約。C++の今後のバージョンアップで標準ライブラリに大きな変更を加えるときのために、「&lt;code&gt;std&lt;/code&gt; + 数字」 (正規表現では&lt;code&gt;std\d*&lt;/code&gt;) の名前空間が予約される&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機能の削除&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11から非推奨だった古いスマートポインタである&lt;code&gt;auto_ptr&lt;/code&gt;を削除。代わりに&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;shared_ptr&lt;/a&gt;&lt;/code&gt;か&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/unique_ptr.html&#34;&gt;unique_ptr&lt;/a&gt;&lt;/code&gt;を使用すること&lt;/li&gt;
&lt;li&gt;C++14から非推奨だった配列をランダムに入れ替える&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/random_shuffle.html&#34;&gt;random_shuffle()&lt;/a&gt;&lt;/code&gt;関数を削除。代わりに&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/shuffle.html&#34;&gt;shuffle()&lt;/a&gt;&lt;/code&gt;を使用すること&lt;/li&gt;
&lt;li&gt;C++11から非推奨だった&lt;code&gt;throw&lt;/code&gt;キーワードによる古い例外仕様に関連する、以下のライブラリ機能を削除する&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/exception/unexpected.html&#34;&gt;unexpected()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/exception/set_unexpected.html&#34;&gt;set_unexpected()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/exception/get_unexpected.html&#34;&gt;get_unexpected()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/exception/set_unexpected.html&#34;&gt;unexpected_handler&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noexcept&lt;/code&gt;による例外仕様では、例外を送出しないはずの関数から例外が送出された場合、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/exception/terminate.html&#34;&gt;terminate()&lt;/a&gt;&lt;/code&gt;関数によって即座にプログラムが異常終了するため、想定されていない例外が送出された場合のハンドリングは機能しない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++11から非推奨だった古い&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;の機能を削除&lt;ul&gt;
&lt;li&gt;引数を束縛する&lt;code&gt;bind1st()&lt;/code&gt;関数、&lt;code&gt;bind2nd()&lt;/code&gt;関数、&lt;code&gt;binder1st&lt;/code&gt;クラス、&lt;code&gt;binder2nd&lt;/code&gt;クラスを削除。代わりに&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/bind.html&#34;&gt;bind()&lt;/a&gt;&lt;/code&gt;関数や&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/lambda_expressions.html&#34;&gt;ラムダ式&lt;/a&gt;を使用すること&lt;/li&gt;
&lt;li&gt;関数ポインタから関数オブジェクトに変換するための&lt;code&gt;ptr_fun()&lt;/code&gt;関数、&lt;code&gt;pointer_to_unary_function&lt;/code&gt;クラス、&lt;code&gt;pointer_to_binary_function&lt;/code&gt;クラスを削除。&lt;code&gt;first_argument_type&lt;/code&gt;や&lt;code&gt;second_argument_type&lt;/code&gt;といった型が必要なくなったため、これらの機能は必要なくなった&lt;/li&gt;
&lt;li&gt;メンバ関数から関数オブジェクトへの変換をするための&lt;code&gt;mem_fun()&lt;/code&gt;関数、&lt;code&gt;mem_fun_ref()&lt;/code&gt;関数、&lt;code&gt;mem_fun_t&lt;/code&gt;クラス、&lt;code&gt;mem_fun1_t&lt;/code&gt;クラス、&lt;code&gt;mem_fun_ref_t&lt;/code&gt;クラス、&lt;code&gt;mem_fun1_ref_t&lt;/code&gt;クラス、&lt;code&gt;const_mem_fun_t&lt;/code&gt;クラス、&lt;code&gt;const_mem_fun1_t&lt;/code&gt;クラス、&lt;code&gt;const_mem_fun_ref_t&lt;/code&gt;クラス、&lt;code&gt;const_mem_fun1_ref_t&lt;/code&gt;クラスを削除。代わりに&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/mem_fn.html&#34;&gt;mem_fn()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/bind.html&#34;&gt;bind()&lt;/a&gt;&lt;/code&gt;関数や&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/lambda_expressions.html&#34;&gt;ラムダ式&lt;/a&gt;を使用すること&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/function.html&#34;&gt;function&lt;/a&gt;&lt;/code&gt;クラスのアロケータサポートを削除。コンパイラが実装していなかったり、不完全な実装だったりしていた&lt;/li&gt;
&lt;li&gt;C++98から非推奨だったiostreamのエイリアスを削除&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ios_base::io_state&lt;/code&gt;の代わりに&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/ios_base/type-iostate.html&#34;&gt;ios_base::iostate&lt;/a&gt;&lt;/code&gt;を使用すること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ios_base::open_mode&lt;/code&gt;の代わりに&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/ios_base/type-openmode.html&#34;&gt;ios_base::openmode&lt;/a&gt;&lt;/code&gt;を使用すること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ios_base::seek_dir&lt;/code&gt;の代わりに&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/ios_base/type-seekdir.html&#34;&gt;ios_base::seekdir&lt;/a&gt;&lt;/code&gt;を使用すること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ios_base::streamoff&lt;/code&gt;の代わりに、&lt;code&gt;char_traits&amp;lt;CharT&amp;gt;::off_type&lt;/code&gt;もしくは&lt;code&gt;basic_ios&amp;lt;CharT&amp;gt;::off_type&lt;/code&gt;を使用すること (&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iosfwd.md.nolink&#34;&gt;&amp;lt;iosfwd&amp;gt;&lt;/a&gt;&lt;/code&gt;で定義されている&lt;code&gt;std::streamoff&lt;/code&gt;は残る)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ios_base::streampos&lt;/code&gt;の代わりに、&lt;code&gt;char_traits&amp;lt;CharT&amp;gt;::pos_type&lt;/code&gt;もしくは&lt;code&gt;basic_ios&amp;lt;CharT&amp;gt;::pos_type&lt;/code&gt;を使用すること (&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iosfwd.md.nolink&#34;&gt;&amp;lt;iosfwd&amp;gt;&lt;/a&gt;&lt;/code&gt;で定義されている&lt;code&gt;std::streampos&lt;/code&gt;は残る)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_streambuf::stossc()&lt;/code&gt;メンバ関数を削除。&lt;code&gt;sbumpc()&lt;/code&gt;の単なる別名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ios_base&lt;/code&gt;クラスの別名型が削除されることにともない、それらの型をパラメータにとるオーバーロードを削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ios_base&lt;/code&gt;クラスの別名型が削除されることにともない、それらの型をパラメータにとる関数が削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機能の非推奨化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator.html&#34;&gt;std::iterator&lt;/a&gt;&lt;/code&gt;クラスを非推奨化。このクラスを使用しても、イテレータ定義は簡単にならなかった&lt;/li&gt;
&lt;li&gt;C++11で&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;allocator_traits&lt;/a&gt;&lt;/code&gt;クラスが導入されたことで不要になった、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;allocator&lt;/a&gt;&lt;/code&gt;の以下のメンバを非推奨化：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;size_type&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;difference_type&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pointer&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const_pointer&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reference&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const_reference&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rebind&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/address.html&#34;&gt;address()&lt;/a&gt;&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/allocate.html&#34;&gt;allocate()&lt;/a&gt;&lt;/code&gt;メンバ関数の&lt;code&gt;hint&lt;/code&gt;パラメータ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/max_size.html&#34;&gt;max_size()&lt;/a&gt;&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/construct.html&#34;&gt;construct()&lt;/a&gt;&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/destroy.html&#34;&gt;destroy()&lt;/a&gt;&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++11で&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;allocator_traits&lt;/a&gt;&lt;/code&gt;クラスが導入されたことで不要になった、要素型を再束縛するための&lt;code&gt;allocator&amp;lt;void&amp;gt;&lt;/code&gt;特殊化を非推奨化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;constexpr&lt;/code&gt;の機能拡張によって扱える型が増えている。将来的にほとんどの型が&lt;code&gt;constexpr&lt;/code&gt;で扱えるようになるため、&lt;code&gt;constexpr&lt;/code&gt;で扱える型の分類である&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_literal_type.html&#34;&gt;is_literal_type&lt;/a&gt;&lt;/code&gt;型特性を非推奨化&lt;/li&gt;
&lt;li&gt;一時的なメモリ確保のための&lt;code&gt;std::get_temporary_buffer()&lt;/code&gt;関数と&lt;code&gt;std::return_temporary_buffer()&lt;/code&gt;関数を非推奨化。これらは関数内での一時的なメモリ確保のために、最適化されたメモリ確保の仕組みを提供することを期待して定義されたが、実際にはどの実装も特別視せず、それゆえに便利に使われてはこなかった。将来的にスタックからのメモリ確保をする機能を作る予定だが、これらの関数は例外安全性やRAIIが考慮されていないため、これらの関数の実装・仕様のみを入れ替えるような改訂はできない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/raw_storage_iterator.html&#34;&gt;raw_storage_iterator&lt;/a&gt;&lt;/code&gt;クラスを非推奨化。アロケータとの連携ができず、限られた用途にしか使用できなかった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/not_fn.md.nolink&#34;&gt;not_fn()&lt;/a&gt;&lt;/code&gt;の追加にともない、古くなった以下の機能を非推奨化：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/negators.html&#34;&gt;not1()&lt;/a&gt;&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/negators.html&#34;&gt;not2()&lt;/a&gt;&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/negators.html&#34;&gt;unary_negate&lt;/a&gt;&lt;/code&gt;クラス&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/negators.html&#34;&gt;binary_nagate&lt;/a&gt;&lt;/code&gt;クラス&lt;/li&gt;
&lt;li&gt;標準関数オブジェクトの&lt;code&gt;result_type&lt;/code&gt;、&lt;code&gt;argument_type&lt;/code&gt;、&lt;code&gt;first_argument_type&lt;/code&gt;、&lt;code&gt;second_argument_type&lt;/code&gt;型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;デバッグ用途にしか使用しない、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;shared_ptr&lt;/a&gt;::&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr/unique.html&#34;&gt;unique()&lt;/a&gt;&lt;/code&gt;を非推奨化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/result_of.html&#34;&gt;result_of&lt;/a&gt;&lt;/code&gt;を非推奨化。代わりに&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/invoke_result.md.nolink&#34;&gt;invoke_result&lt;/a&gt;&lt;/code&gt;を使用すること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/codecvt.html&#34;&gt;&amp;lt;codecvt&amp;gt;&lt;/a&gt;&lt;/code&gt;を非推奨化。適切なエラーハンドリングの方法がなかったため、セキュリティ上攻撃の可能性があった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/memory_order.html&#34;&gt;memory_order_consume&lt;/a&gt;&lt;/code&gt;を一時的に非推奨化。「その定義が現実に即していない」「acquire/releaseより弱いから使いにくい」といった理由から、より良い定義に変更するまでの間、非推奨とする&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/files/papers/p0636r0.html&#34; target=&#34;_blank&#34;&gt;P0636R0 Changes between C++14 and C++17 DIS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>畳み込み式 -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site
</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/folding_expressions.html"/>
      <id>61e647a734542818b356ccbcef8712a6fa337172:lang/cpp17/folding_expressions.md</id>
      <updated>2017-04-24 04:19:50 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;畳み込み式&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;畳み込み式 (fold expression) は可変引数テンプレートのパラメータパックに対して二項演算を累積的に行う (畳み込む fold)。&lt;/p&gt;
&lt;h2&gt;仕様&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;pack&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;op&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;// (1) 単項右畳み込み&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;op&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;pack&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;// (2) 単項左畳み込み&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;pack&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;op&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;op&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;init&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// (3) 二項右畳み込み&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;init&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;op&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;op&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;pack&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// (4) 二項左畳み込み&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;畳み込み式は括弧 &lt;code&gt;()&lt;/code&gt; で囲まれなければならない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;op&lt;/code&gt; は後述する二項演算子&lt;br /&gt;
    二項畳み込み (3, 4) の場合 &lt;code&gt;op&lt;/code&gt; は同一でなければならない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pack&lt;/code&gt; は未展開のパラメータパック (規格ではキャスト式 cast-expression と呼ばれる)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;init&lt;/code&gt; は未展開のパラメータパック以外 (規格ではキャスト式 cast-expression と呼ばれる)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;畳み込み式は以下のように展開される:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;単項右畳み込みは &lt;code&gt;arg1 op (... op (argN-1 op argN))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;単項左畳み込みは &lt;code&gt;((arg1 op arg2) op ...) op argN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;二項右畳み込みは &lt;code&gt;arg1 op (... op (argN-1 op (argN op init)))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;二項左畳み込みは &lt;code&gt;(((init op arg1) op arg2) op ...) op argN&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ただし &lt;code&gt;argi&lt;/code&gt; はパラメータパックの i 番目の要素
* 機能テストマクロは &lt;code&gt;__cpp_fold_expressions&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;演算子&lt;/h3&gt;
&lt;p&gt;オーバーロードを含めて以下の演算子を畳み込み式で使用できる:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;+&lt;/code&gt;
&lt;code&gt;-&lt;/code&gt;
&lt;code&gt;*&lt;/code&gt;
&lt;code&gt;/&lt;/code&gt;
&lt;code&gt;%&lt;/code&gt;
&lt;code&gt;^&lt;/code&gt;
&lt;code&gt;&amp;amp;&lt;/code&gt;
&lt;code&gt;|&lt;/code&gt;
&lt;code&gt;=&lt;/code&gt;
&lt;code&gt;&amp;lt;&lt;/code&gt;
&lt;code&gt;&amp;gt;&lt;/code&gt;
&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;
&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;
&lt;code&gt;+=&lt;/code&gt;
&lt;code&gt;-=&lt;/code&gt;
&lt;code&gt;*=&lt;/code&gt;
&lt;code&gt;/=&lt;/code&gt;
&lt;code&gt;%=&lt;/code&gt;
&lt;code&gt;^=&lt;/code&gt;
&lt;code&gt;&amp;amp;=&lt;/code&gt;
&lt;code&gt;|=&lt;/code&gt;
&lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt;
&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;
&lt;code&gt;==&lt;/code&gt;
&lt;code&gt;!=&lt;/code&gt;
&lt;code&gt;&amp;lt;=&lt;/code&gt;
&lt;code&gt;&amp;gt;=&lt;/code&gt;
&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;
&lt;code&gt;||&lt;/code&gt;
&lt;code&gt;,&lt;/code&gt;
&lt;code&gt;.*&lt;/code&gt;
&lt;code&gt;-&amp;gt;*&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;パラメータパックが空のときの式の値&lt;/h3&gt;
&lt;p&gt;単項畳み込み (1, 2) でパラメータパックが空の場合、以下の演算子については式の値が設定される:&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;演算子&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;`&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;上記以外の演算子に対し空のパラメータパックが適用された場合、プログラムは不適格となる。&lt;/p&gt;
&lt;p&gt;空のパラメータパックが適用された場合の挙動を変えるには二項畳み込み (3, 4) で値を与える。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 単項右畳み込みで和を計算&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 二項右畳み込みで和を計算、フォールバック値 0&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 単項左畳み込みで引数が全て true かどうかを返す&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 二項左畳み込みで引数を出力&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;print_all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ostream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;os&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;boolalpha&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//std::cout &amp;lt;&amp;lt; sum() &amp;lt;&amp;lt; &#39;\n&#39;;  // 不適格: 引数が必要&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// 引数がないので設定した 0 にフォールバック&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 引数がないので true にフォールバック&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print_all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;15
0
true
123
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;今までは、累積的に二項演算を行うには以下のように可変長引数関数を再帰的に呼び出さなければならなかった:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...);&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;畳み込み式によってこれを簡潔に書けるようになった。&lt;/p&gt;
&lt;h2&gt;検討されたほかの選択肢&lt;/h2&gt;
&lt;h3&gt;パラメータパックが空のときの &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt; の値&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4191.html&#34; target=&#34;_blank&#34;&gt;N4191&lt;/a&gt;,
&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4295.html&#34; target=&#34;_blank&#34;&gt;N4295&lt;/a&gt;
では以下の演算子についてもパラメータパックが空のときに値を設定することが提案されていた:&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;演算子&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;`\&lt;/td&gt;
&lt;td&gt;`&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;二項演算の単位元を設定するのは自然なことだと考えられた。&lt;/p&gt;
&lt;p&gt;しかしながら、&lt;code&gt;operator+&lt;/code&gt; をオーバーロードしてコンテナや文字列の連結に用いる (cf. &lt;code&gt;std::string&lt;/code&gt;) のは一般的なことである。
そのような場合、空のパラメータパックを与えたときに &lt;code&gt;int()&lt;/code&gt; が適用されるのは思わぬ挙動につながり、
しかもバグ発見が困難であることが
&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4358.pdf&#34; target=&#34;_blank&#34;&gt;N4358&lt;/a&gt;
で指摘された。&lt;br /&gt;
&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4072.html&#34; target=&#34;_blank&#34;&gt;N4072 Fixed Size Parameter Packs&lt;/a&gt;
との兼ね合いもあったが、
上記のフォールバック値は削除され、パラメータパックが空の場合は不適格となった。&lt;/p&gt;
&lt;p&gt;一方 &lt;code&gt;operator&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;operator||&lt;/code&gt;, &lt;code&gt;operator,&lt;/code&gt; はオーバーロードがバッドプラクティスとされているため残された。&lt;/p&gt;
&lt;h4&gt;上記の問題を解決するのに考えられた方法&lt;/h4&gt;
&lt;h5&gt;単位元 &lt;code&gt;identity_element&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;空のパラメータパックが与えられた場合、単項畳み込み式は以下のように実装される &lt;code&gt;empty_fold&lt;/code&gt; オブジェクトを返す:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BinaryFunction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;empty_fold&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;constexpr&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;identity_element&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BinaryFunction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;identity_element&lt;/code&gt; は単位元を持つあらゆるマグマに対して特殊化され、例えば &lt;code&gt;std::string::operator+&lt;/code&gt; では &lt;code&gt;&#34;&#34;s&lt;/code&gt; とする。&lt;br /&gt;
演算の左単位元と右単位元が異なる場合は、それぞれ &lt;code&gt;left_identity_element&lt;/code&gt; と &lt;code&gt;right_identity_element&lt;/code&gt; を定義する。
それらは特殊化されなかった場合 &lt;code&gt;identity_element&lt;/code&gt; にフォールバックする。&lt;/p&gt;
&lt;p&gt;この方法は可能な限りジェネリックであるが、以下のような問題があった:
&lt;em&gt; 空のパラメータパックは型付けされていないが、返り値の型は他の型に文脈的に変換可能である (暗黙の型変換につながり得る)
&lt;/em&gt; テンプレート特殊化だけのために関数をオブジェクトしなければならない
* サポートする演算子と等価な関数オブジェクト間のマッピングを用意しなければならない&lt;/p&gt;
&lt;p&gt;結局のところこれは問題の解決にはつながらず、負担も大きいことから採用されなかった。&lt;/p&gt;
&lt;h5&gt;返り値の型推論&lt;/h5&gt;
&lt;p&gt;可能であれば空の畳み込みから返り値の型推論を行い、そうでなければプログラムを不適格とする。&lt;br /&gt;
例えば以下の例では &lt;code&gt;std::string&lt;/code&gt; に推論する:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;これは &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4072.html&#34; target=&#34;_blank&#34;&gt;N4072 Fixed Size Parameter Packs&lt;/a&gt;
と適合するが、以下のような問題があった:
&lt;em&gt; 空の単項畳み込みの型が必ずしも正しく推論されない
&lt;/em&gt; 単位元を持つ演算でしか機能しない&lt;/p&gt;
&lt;p&gt;ルールが多い割に利点があまりないため採用されなかった。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;~&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;~&lt;/code&gt; も畳み込み式の演算子として
&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4191.html&#34; target=&#34;_blank&#34;&gt;N4191&lt;/a&gt;,
&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4295.html&#34; target=&#34;_blank&#34;&gt;N4295&lt;/a&gt;
で提案されていたが削除された (理由は発見できず)。&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/accumulate.html&#34;&gt;std::accumulate&lt;/a&gt;&lt;/code&gt; — イテレータの範囲について累積的に二項演算を行う&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4191.html&#34; target=&#34;_blank&#34;&gt;N4191 Folding expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4295.html&#34; target=&#34;_blank&#34;&gt;N4295 Folding expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4358.pdf&#34; target=&#34;_blank&#34;&gt;N4358 Unary Folds and Empty Parameter Packs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0036r0.pdf&#34; target=&#34;_blank&#34;&gt;P0036 Unary Folds and Empty Parameter Packs (revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>C++17 -- 「畳み込み式」 (fix #418)</title>
      <link href="https://cpprefjp.github.io/lang/cpp17.html"/>
      <id>341591a596051e617d42b4d20e839e587cacff0b:lang/cpp17.md</id>
      <updated>2017-04-24 04:16:59 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;C++17&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++17とは、2017年中に改訂される予定の、C++バージョンの通称である。&lt;/p&gt;
&lt;p&gt;このバージョンは、策定中はC++1zと呼ばれていた。前バージョンであるC++11が策定中にC++0xと呼ばれ、C++14がC++1yと呼ばれており、「201z年にリリースされる」という年数の伏せ字として「z」が使われていた。&lt;/p&gt;
&lt;h2&gt;策定体制&lt;/h2&gt;
&lt;p&gt;C++14の策定開始段階から「Study Group (SG)」と呼ばれる専門家グループが複数作られ、そこで同時並行に新機能の議論、策定が進められていた。C++14ではそれらの機能は導入されなかったが、C++17ではSGで議論された機能のうち、仕様が固まったもののいくつかが導入されることとなった。&lt;/p&gt;
&lt;p&gt;各SGで考えられた仕様は「Technical Specification (TS)」という単位で個別に各国の承認をとっている。その段階では、ライブラリ機能は&lt;code&gt;std::exprerimental&lt;/code&gt;名前空間などで各コンパイラが実験的にサポートをしていた。これはコンパイラが実装経験を積み、ユーザーが使用経験を得てから標準に採用するためである。&lt;/p&gt;
&lt;p&gt;C++17では以下のTSが採用された：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;TS&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Library Fundamentals TS&lt;/td&gt;
&lt;td&gt;基本的なライブラリ機能。&lt;code&gt;any&lt;/code&gt;, &lt;code&gt;optional&lt;/code&gt;, &lt;code&gt;string_view&lt;/code&gt;, メモリプール, 検索アルゴリズム, サンプリングアルゴリズム, タプルを展開して関数呼び出しする&lt;code&gt;apply&lt;/code&gt;関数, &lt;code&gt;shared_ptr&lt;/code&gt;の配列対応, 最大公約数と最小公倍数などが含まれる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Filesystem TS&lt;/td&gt;
&lt;td&gt;ファイルシステムのライブラリ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Parallelism TS&lt;/td&gt;
&lt;td&gt;並列ライブラリ。&lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt;や&lt;code&gt;&amp;lt;numeric&amp;gt;&lt;/code&gt;に並列アルゴリズムが追加される&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;言語機能&lt;/h2&gt;
&lt;h3&gt;変数・データ構造関係&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;浮動小数点数の16進数リテラル&lt;/td&gt;
&lt;td&gt;16進数表記で浮動小数点数リテラルを記述できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;インライン変数&lt;/td&gt;
&lt;td&gt;翻訳単位を跨いでひとつのオブジェクトになる変数を定義する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;構造化束縛&lt;/td&gt;
&lt;td&gt;組・タプル・配列を展開して変数定義する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;単一要素の波カッコ初期化を&lt;code&gt;T&lt;/code&gt;に推論する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;auto a{1};&lt;/code&gt;を&lt;code&gt;initializer_list&amp;lt;int&amp;gt;&lt;/code&gt;ではなく&lt;code&gt;int&lt;/code&gt;に推論する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/maybe_unused.html&#34;&gt;&lt;code&gt;[[maybe_unused]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用しない可能性のある変数に対する警告を抑制する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/nodiscard.html&#34;&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;戻り値を捨ててはならないことを指定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;値のコピー省略を保証&lt;/td&gt;
&lt;td&gt;右辺値を変数の初期化のために使用する場合、コピーもムーブも省略することを保証&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;厳密な式の評価順&lt;/td&gt;
&lt;td&gt;式の評価順を規定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;参照メンバをもつクラスの置き換え&lt;/td&gt;
&lt;td&gt;参照型メンバや&lt;code&gt;const&lt;/code&gt;データメンバを含むクラスについてこれまで結果は未定義とされていた配置&lt;code&gt;new&lt;/code&gt;によるオブジェクトの置き換えを条件付きで可能とする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;制御構文&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;if&lt;/code&gt;文と&lt;code&gt;switch&lt;/code&gt;文の条件式と初期化を分離&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if (init; condition)&lt;/code&gt;のように初期化と条件式を分けて記述できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/fallthrough.html&#34;&gt;&lt;code&gt;[[fallthrough]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;フォールスルー時の警告を抑制する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;if constexpr&lt;/code&gt;文&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if constexpr(cond)&lt;/code&gt;とすることで、その&lt;code&gt;if&lt;/code&gt;文はコンパイル時に処理される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;範囲&lt;code&gt;for&lt;/code&gt;文のための&lt;code&gt;begin()&lt;/code&gt;と&lt;code&gt;end()&lt;/code&gt;関数が、異なる型を返すことを許可&lt;/td&gt;
&lt;td&gt;&lt;code&gt;begin()&lt;/code&gt;と&lt;code&gt;end()&lt;/code&gt;が異なるイテレータ型を返せるようにすることで、終端イテレータを定義しやすくする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ラムダ式&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ラムダ式での&lt;code&gt;*this&lt;/code&gt;のコピーキャプチャ&lt;/td&gt;
&lt;td&gt;キャプチャリストに&lt;code&gt;*this&lt;/code&gt;を指定することで、&lt;code&gt;*this&lt;/code&gt;をコピーキャプチャする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;ラムダ&lt;/td&gt;
&lt;td&gt;ラムダ式の関数オブジェクトが定数式の文脈で使用された場合に、それがコンパイル時に評価されるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;テンプレート&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/folding_expressions.html&#34;&gt;畳み込み式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;パラメータパックに対する二項演算の累積処理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;テンプレートテンプレートパラメータに&lt;code&gt;typename&lt;/code&gt;キーワードの使用を許可&lt;/td&gt;
&lt;td&gt;&lt;code&gt;class&lt;/code&gt;キーワードしか使用できなかった部分に、&lt;code&gt;typename&lt;/code&gt;を許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;クラステンプレートのテンプレート引数推論&lt;/td&gt;
&lt;td&gt;コンストラクタの引数からクラスのテンプレート引数を推論できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;非型テンプレートパラメータの&lt;code&gt;auto&lt;/code&gt;宣言&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;auto x&amp;gt;&lt;/code&gt;とすることで、&lt;code&gt;X&amp;lt;3&amp;gt;; X&amp;lt;true&amp;gt;; X&amp;lt;&#39;a&#39;&amp;gt;&lt;/code&gt;のように定数を受け取りやすくする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;全ての非型テンプレート引数の定数式評価を許可&lt;/td&gt;
&lt;td&gt;ポインタの定数式評価として、配列からポインタへの変換や、関数から関数ポインタへの変換などを許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;using&lt;/code&gt;宣言のパック展開&lt;/td&gt;
&lt;td&gt;パラメータパックの型を基本クラスとして指定した場合に、using宣言に基本クラスのパラメータパックを指定できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;定数式&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/extending_static_assert.html&#34;&gt;&lt;code&gt;static_assert&lt;/code&gt;のメッセージ省略を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;第2引数だった診断メッセージの省略を許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;ラムダ&lt;/td&gt;
&lt;td&gt;ラムダ式の関数オブジェクトが定数式の文脈で使用された場合に、それがコンパイル時に評価されるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;if constexpr&lt;/code&gt;文&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if constexpr(cond)&lt;/code&gt;とすることで、その&lt;code&gt;if&lt;/code&gt;文はコンパイル時に処理される&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;名前空間&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/nested_namespace.html&#34;&gt;入れ子名前空間の定義&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;namespace A::B {}&lt;/code&gt;のように、入れ子の名前空間を簡単に定義できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;名前空間と列挙子への属性付加を許可&lt;/td&gt;
&lt;td&gt;名前空間の定義と、列挙型の各要素の定義に、属性を付けられるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;using&lt;/code&gt;宣言のパック展開&lt;/td&gt;
&lt;td&gt;パラメータパックの型を基本クラスとして指定した場合に、using宣言に基本クラスのパラメータパックを指定できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;例外&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/exception_spec_be_part_of_the_type_system.md.nolink&#34;&gt;例外仕様を型システムの一部にする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の型に例外仕様が含まれるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;非推奨だった古い例外仕様を削除&lt;/td&gt;
&lt;td&gt;&lt;code&gt;throw&lt;/code&gt;キーワードによる例外仕様を削除。&lt;code&gt;throw()&lt;/code&gt;は残る&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;属性&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/fallthrough.html&#34;&gt;&lt;code&gt;[[fallthrough]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;フォールスルー時の警告を抑制する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/maybe_unused.html&#34;&gt;&lt;code&gt;[[maybe_unused]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用しない可能性のある変数に対する警告を抑制する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/nodiscard.html&#34;&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;戻り値を捨ててはならないことを指定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;名前空間と列挙子への属性付加を許可&lt;/td&gt;
&lt;td&gt;名前空間の定義と、列挙型の各要素の定義に、属性を付けられるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/using_attribute_namespaces.html&#34;&gt;属性の名前空間指定に繰り返しをなくす&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[[using CC: opt(1), debug]]&lt;/code&gt;のように属性の名前空間宣言をまとめて行う&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/non_standard_attributes.html&#34;&gt;不明な属性を無視する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;実装が知らない名前空間の属性は無視する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;プリプロセッサ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/has_include.html&#34;&gt;__has_include&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;インクルードするファイルが存在するかを確認する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;機能の削除&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;トライグラフを削除&lt;/td&gt;
&lt;td&gt;現代では使用する必要がなくなったトライグラフ機能を削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;非推奨だった&lt;code&gt;register&lt;/code&gt;キーワードを削除&lt;/td&gt;
&lt;td&gt;コンパイラから単に無視されていた&lt;code&gt;register&lt;/code&gt;キーワードを削除。予約語は残る&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/remove_deprecated_increment_of_bool.html&#34;&gt;非推奨だった&lt;code&gt;bool&lt;/code&gt;型に対するインクリメント演算子を削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bool&lt;/code&gt;変数に対して&lt;code&gt;++&lt;/code&gt;すると&lt;code&gt;true&lt;/code&gt;になる仕様を削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;非推奨だった古い例外仕様を削除&lt;/td&gt;
&lt;td&gt;&lt;code&gt;throw&lt;/code&gt;キーワードによる例外仕様を削除。&lt;code&gt;throw()&lt;/code&gt;は残る&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;小さな変更&lt;/h3&gt;
&lt;p&gt;ここでは、コア言語作業グループへ問題報告され、その解決策として導入された言語仕様の変更を解説する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/predefined_macros.html&#34;&gt;更新された定義済みマクロ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;標準規格で定義されたマクロの更新&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/lambda_to_noexcept_function_pointer.html&#34;&gt;&lt;code&gt;noexcept&lt;/code&gt;付きのラムダ式から変換する関数ポインタに&lt;code&gt;noexcept&lt;/code&gt;を付加する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャプチャを持たない非ジェネリックラムダに&lt;code&gt;noexcept&lt;/code&gt;を付加した場合、変換した関数ポインタに&lt;code&gt;noexcept&lt;/code&gt;を付加する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブラリ更新の概要&lt;/h2&gt;
&lt;h3&gt;新ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem.md.nolink&#34;&gt;&amp;lt;filesystem&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダを新設し、ファイルシステムライブラリを追加。ファイル、ディレクトリなどを扱う&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;や&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;のアルゴリズムに、並列実行のオプションを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/optional.md.nolink&#34;&gt;&amp;lt;optional&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダを新設し、統一的な有効値と無効値の表現をもつ&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/optional/optional.md.nolink&#34;&gt;optional&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/variant.md.nolink&#34;&gt;&amp;lt;variant&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダを新設し、型安全な共用体&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/variant/variant.md.nolink&#34;&gt;variant&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/any.md.nolink&#34;&gt;&amp;lt;any&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダを新設し、なんでも代入できる&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/any/any.md.nolink&#34;&gt;any&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;標準ライブラリの参照をC11に更新&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cfloat.html&#34;&gt;&amp;lt;cfloat&amp;gt;&lt;/a&gt;&lt;/code&gt;に、非正規化数の有無を判定するマクロ、10進数の桁数を表すマクロ、正の最小数を表すマクロを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib.html&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/aligned_alloc.md.nolink&#34;&gt;aligned_alloc()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ctime.md.nolink&#34;&gt;&amp;lt;ctime&amp;gt;&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ctime/time_utc.md.nolink&#34;&gt;TIME_UTC&lt;/a&gt;&lt;/code&gt;マクロ, &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ctime/timespec.nolink&#34;&gt;timespec&lt;/a&gt;&lt;/code&gt;構造体, &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ctime/timespec_get.md.nolink&#34;&gt;timespec_get()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdio.md.nolink&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdio/vfscanf.md.nolink&#34;&gt;vfscanf()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;ccomplex&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;cstdalign&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;cstdbool&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;ctgmath&amp;gt;&lt;/code&gt;を非推奨化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;コンテナ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;コンテナのコピー・ムーブ、&lt;code&gt;swap&lt;/code&gt;操作に&lt;code&gt;noexcept&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;コンテナの要素情報にアクセスする非メンバ関数として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/size.md.nolink&#34;&gt;size()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/empty.md.nolink&#34;&gt;empty()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/data.md.nolink&#34;&gt;data()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;コンテナに不完全型の最小サポートを追加。&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&lt;/code&gt;の要素型に、不完全型の指定を許可。ただし、これらのコンテナのなんらかのメンバ関数を呼び出す前には、要素型が完全型になっていること&lt;/li&gt;
&lt;li&gt;多相アロケータとメモリプール。&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory_resource.md.nolink&#34;&gt;&amp;lt;memory_resource&amp;gt;&lt;/a&gt;&lt;/code&gt;が新設され、アロケートする型を規定しないアロケータと、それを利用したメモリプールの仕組みが導入される&lt;/li&gt;
&lt;li&gt;標準イテレータ全般と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/array.html&#34;&gt;array&lt;/a&gt;&lt;/code&gt;の変更操作に&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;emplace_front()&lt;/code&gt;と&lt;code&gt;emplace_back()&lt;/code&gt;メンバ関数で、追加された要素を返すようにする&lt;/li&gt;
&lt;li&gt;連想コンテナの接合機能を追加。ほかのコンテナに要素を移すために抽出する&lt;code&gt;extract()&lt;/code&gt;メンバ関数、抽出された要素をほかのコンテナに移すための&lt;code&gt;insert()&lt;/code&gt;メンバ関数のオーバーロード、2つの連想コンテナをまるごと接合する&lt;code&gt;merge()&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map&lt;/code&gt;と&lt;code&gt;unordered_map&lt;/code&gt;に、挿入失敗時の動作を規定した新たなメンバ関数として、&lt;code&gt;try_emplace()&lt;/code&gt;と&lt;code&gt;insert_or_assign()&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;イテレータの分類に「隣接イテレータ (contiguous iterator)」を追加。要素間のメモリが隣接していることを表す。以下のコンテナのイテレータは、隣接イテレータであることが規定される：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;basic_string&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/array.html&#34;&gt;array&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool&lt;/code&gt;以外を要素型とする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/valarray/valarray.html&#34;&gt;valarray&lt;/a&gt;&lt;/code&gt; (の非メンバ関数である&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/valarray/valarray/begin_free.html&#34;&gt;std::begin()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/valarray/valarray/end_free.html&#34;&gt;std::end()&lt;/a&gt;&lt;/code&gt;で返されるイテレータは隣接イテレータ)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;アルゴリズム&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ランダムサンプリングアルゴリズムとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/sample.md.nolink&#34;&gt;sample()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;値を範囲内に収める&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/clamp.md.nolink&#34;&gt;clamp()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool&lt;/code&gt;を返す関数オブジェクトの結果を反転させる&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/not_fn.md.nolink&#34;&gt;not_fn()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;INVOKEコンセプトに従った関数呼び出しをする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/invoke.md.nolink&#34;&gt;invoke()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/reference_wrapper.html&#34;&gt;reference_wrapper&lt;/a&gt;&lt;/code&gt;がTriviallyCopyableであることを保証&lt;/li&gt;
&lt;li&gt;オブジェクトを&lt;code&gt;const&lt;/code&gt;にする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/as_const.html&#34;&gt;as_const()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;未初期化メモリのアルゴリズムと、デストラクタ呼び出しの関数として、以下の関数を追加： &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/destroy_at.md.nolink&#34;&gt;destroy_at()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/destroy.md.nolink&#34;&gt;destroy()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/destroy_n.md.nolink&#34;&gt;destroy_n()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uninitialized_move.md.nolink&#34;&gt;uninitialized_move()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uninitialized_move_n.md.nolink&#34;&gt;uninitialized_move_n()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uninitialized_value_construct.md.nolink&#34;&gt;uninitialized_value_construct()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uninitialized_value_construct_n.md.nolink&#34;&gt;uninitialized_value_construct_n()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uninitialized_default_construct.md.nolink&#34;&gt;uninitialized_default_construct()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uninitialized_default_construct.md.nolink&#34;&gt;uninitialized_default_construct()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view.md.nolink&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;クラスを新設し、所有権を持たない文字列クラスである&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view/basic_string_view.md.nolink&#34;&gt;basic_string_view&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string/data.html&#34;&gt;basic_string::data()&lt;/a&gt;&lt;/code&gt;メンバ関数の非&lt;code&gt;const&lt;/code&gt;版を追加&lt;/li&gt;
&lt;li&gt;文字列検索アルゴリズムとして、「ボイヤー・ムーア法 (Boyer-Moore)」と「ボイヤー・ムーア・ホースプール法 (Boyer-Moore-Horspool)」を追加。&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/search.html&#34;&gt;std::search()&lt;/a&gt;&lt;/code&gt;関数のポリシーとして、検索アルゴリズムを指定する&lt;/li&gt;
&lt;li&gt;ロケール依存なし、フォーマット解析なしの高速な文字列・数値変換関数として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/to_chars.md.nolink&#34;&gt;to_chars()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/from_chars.md.nolink&#34;&gt;from_chars()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/char_traits.html&#34;&gt;char_traits&lt;/a&gt;&lt;/code&gt;クラスを&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;li&gt;バイトデータを表す&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstddef/byte.md.nolink&#34;&gt;byte&lt;/a&gt;&lt;/code&gt;型を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;並行処理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;タイムアウト機能がないReaders-writer lockのミューテックスとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/shared_mutex/shared_mutex.md.nolink&#34;&gt;shared_mutex&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;スコープ付きロックの可変引数版として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mutex/scoped_lock.md.nolink&#34;&gt;scoped_lock&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic.html&#34;&gt;atomic&lt;/a&gt;&lt;/code&gt;クラスに、指定された要素型に対するアトミック操作がロックフリー(非ミューテックス)に振る舞うかを判定するために&lt;code&gt;is_always_lock_free&lt;/code&gt;定数を追加&lt;/li&gt;
&lt;li&gt;false sharingとtrue sharingを制御するための機能として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/hardware_destructive_interference_size.md.nolink&#34;&gt;hardware_destructive_interference_size&lt;/a&gt;&lt;/code&gt;定数と、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/hardware_constructive_interference_size.md.nolink&#34;&gt;hardware_constructive_interference_size&lt;/a&gt;&lt;/code&gt;定数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;スマートポインタ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;shared_ptr&lt;/a&gt;&lt;/code&gt;を配列に対応&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;shared_ptr&lt;/a&gt;&lt;/code&gt;クラスに、指定された要素型の&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/weak_ptr.html&#34;&gt;weak_ptr&lt;/a&gt;&lt;/code&gt;型を表す&lt;code&gt;weak_type&lt;/code&gt;メンバ型を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;shared_ptr&lt;/a&gt;::&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr/use_count.html&#34;&gt;use_count()&lt;/a&gt;&lt;/code&gt;の仕様を明確化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/enable_shared_from_this/shared_from_this.html&#34;&gt;shared_from_this&lt;/a&gt;&lt;/code&gt;の指す先が書き換わらないことを規定&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配列版&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/unique_ptr.html&#34;&gt;unique_ptr&lt;/a&gt;&lt;/code&gt;の型変換として、以下のコードが不適格だった：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unique_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;このようなコードが適格になるよう、変換コンストラクタと変換代入演算子を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/unique_ptr.html&#34;&gt;unique_ptr&lt;/a&gt;&lt;/code&gt;のテンプレート代入演算子に、不足していたSFINAEルールを追加&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/owner_less.html&#34;&gt;owner_less&lt;/a&gt;&lt;/code&gt;で、任意の要素型を持つ&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;shared_ptr&lt;/a&gt;&lt;/code&gt;同士を比較できるようにする&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;数学&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;に数学の特殊関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/hypot.html&#34;&gt;hypot()&lt;/a&gt;&lt;/code&gt;関数の3引数版を追加&lt;/li&gt;
&lt;li&gt;最大公約数と最小公倍数の関数として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/gcd.md.nolink&#34;&gt;gcd()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/lcm.md.nolink&#34;&gt;lcm()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;タプル&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;タプルを展開して関数呼び出しする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple/apply.md.nolink&#34;&gt;apply()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;タプルを任意の型のオブジェクトに変換する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple/make_from_tuple.md.nolink&#34;&gt;make_from_tuple()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初期化子リストから&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;/code&gt;を構築しやすくするための改善として、以下のコードが適格になるようコンストラクタの仕様を調整：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tuple&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pixel_coordinates&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// コンパイルエラー&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NonCopyable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NonCopyable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NonCopyable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NonCopyable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pair&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NonCopyable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.14&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// C++14ではコンパイルエラー&lt;/span&gt;
                                              &lt;span class=&#34;c1&#34;&gt;// C++17ではOK&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;型特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;値を返す型特性クラスの&lt;code&gt;constexpr&lt;/code&gt;変数テンプレート版を追加。変数テンプレート版は、末尾に&lt;code&gt;_v&lt;/code&gt;が付く。&lt;code&gt;v&lt;/code&gt;は&lt;code&gt;value&lt;/code&gt; (値) を意味する&lt;/li&gt;
&lt;li&gt;型特性クラスを定義しやすくするために、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/void_t.md.nolink&#34;&gt;void_t&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool&lt;/code&gt;定数を表す&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/bool_constant.md.nolink&#34;&gt;bool_constant&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;コンパイル時条件の論理演算のために、論理積である&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/conjunction.md.nolink&#34;&gt;conjunction&lt;/a&gt;&lt;/code&gt;、論理和である&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/disjunction.md.nolink&#34;&gt;disjunction&lt;/a&gt;&lt;/code&gt;、否定である&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/negation.md.nolink&#34;&gt;negation&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swap&lt;/code&gt;可能かを判定する型特性クラスとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_swappable_with.md.nolink&#34;&gt;is_swappable_with&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_swappable.md.nolink&#34;&gt;is_swappable&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_swappable_with.md.nolink&#34;&gt;is_nothrow_swappable_with&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_swappable.md.nolink&#34;&gt;is_nothrow_swappable&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;関数が呼び出し可能かを判定する型特性として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_invocable.md.nolink&#34;&gt;is_invocable&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_invocable_r.md.nolink&#34;&gt;is_invocable_r&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_invocable.md.nolink&#34;&gt;is_nothrow_invocable&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_invocable_r.md.nolink&#34;&gt;is_nothrow_invocable_r&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;自動的にハッシュ値が求められる型かを判定するために&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/has_unique_object_representations.md.nolink&#34;&gt;has_unique_object_representations&lt;/a&gt;&lt;/code&gt;型特性を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/invoke.md.nolink&#34;&gt;invoke()&lt;/a&gt;&lt;/code&gt;の追加にともない、関数の戻り値型を取得する型特性&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/invoke_result.md.nolink&#34;&gt;invoke_result&lt;/a&gt;&lt;/code&gt;を追加。これまでの&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/result_of.html&#34;&gt;result_of&lt;/a&gt;&lt;/code&gt;と違って関数型のテンプレート引数を使用しないため、それによって起こっていた厄介な問題を回避する&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;時間演算&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/duration.html&#34;&gt;duration&lt;/a&gt;&lt;/code&gt;の丸め演算として、切り下げをする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/duration/floor.md.nolink&#34;&gt;floor()&lt;/a&gt;&lt;/code&gt;、切り上げをする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/duration/ceil.md.nolink&#34;&gt;ceil()&lt;/a&gt;&lt;/code&gt;、最近接遇数への丸めをする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/duration/round.md.nolink&#34;&gt;round()&lt;/a&gt;&lt;/code&gt;、絶対値を求める&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/duration/abs.md.nolink&#34;&gt;abs()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/time_point.html&#34;&gt;time_point&lt;/a&gt;&lt;/code&gt;の丸め演算として、切り下げをする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/time_point/floor.md.nolink&#34;&gt;floor()&lt;/a&gt;&lt;/code&gt;、切り上げをする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/time_point/ceil.md.nolink&#34;&gt;ceil()&lt;/a&gt;&lt;/code&gt;、最近接遇数への丸めをする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/time_point/round.md.nolink&#34;&gt;round()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/duration.html&#34;&gt;duration&lt;/a&gt;&lt;/code&gt;クラスと&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/time_point.html&#34;&gt;time_point&lt;/a&gt;&lt;/code&gt;クラスの変更操作を&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;乱数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ランダムサンプリングアルゴリズムとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/sample.md.nolink&#34;&gt;sample()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;乱数用語を変更。乱数生成器のコンセプトに 「URNG (Uniform Random Number Generator, 一様乱数生成器)」という用語を使用していたが、一般的なURNGの用語とは異なり、C++の乱数生成器は一度の呼び出しで、(32ビットを超えるような) より多くのビットを単一の符号なし整数にパックして返すという動作が許可されている。動作の誤解を避けるために、「URBG (Uniform Random Bit Generator)」という用語に変更する&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;エラーハンドリング&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;現在発生している例外の数を取得する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/exception/uncaught_exceptions.md.nolink&#34;&gt;uncaught_exceptions()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;取り決め&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std&lt;/code&gt; + 数字の名前空間を予約。C++の今後のバージョンアップで標準ライブラリに大きな変更を加えるときのために、「&lt;code&gt;std&lt;/code&gt; + 数字」 (正規表現では&lt;code&gt;std\d*&lt;/code&gt;) の名前空間が予約される&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機能の削除&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11から非推奨だった古いスマートポインタである&lt;code&gt;auto_ptr&lt;/code&gt;を削除。代わりに&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;shared_ptr&lt;/a&gt;&lt;/code&gt;か&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/unique_ptr.html&#34;&gt;unique_ptr&lt;/a&gt;&lt;/code&gt;を使用すること&lt;/li&gt;
&lt;li&gt;C++14から非推奨だった配列をランダムに入れ替える&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/random_shuffle.html&#34;&gt;random_shuffle()&lt;/a&gt;&lt;/code&gt;関数を削除。代わりに&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/shuffle.html&#34;&gt;shuffle()&lt;/a&gt;&lt;/code&gt;を使用すること&lt;/li&gt;
&lt;li&gt;C++11から非推奨だった&lt;code&gt;throw&lt;/code&gt;キーワードによる古い例外仕様に関連する、以下のライブラリ機能を削除する&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/exception/unexpected.html&#34;&gt;unexpected()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/exception/set_unexpected.html&#34;&gt;set_unexpected()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/exception/get_unexpected.html&#34;&gt;get_unexpected()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/exception/set_unexpected.html&#34;&gt;unexpected_handler&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noexcept&lt;/code&gt;による例外仕様では、例外を送出しないはずの関数から例外が送出された場合、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/exception/terminate.html&#34;&gt;terminate()&lt;/a&gt;&lt;/code&gt;関数によって即座にプログラムが異常終了するため、想定されていない例外が送出された場合のハンドリングは機能しない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++11から非推奨だった古い&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;の機能を削除&lt;ul&gt;
&lt;li&gt;引数を束縛する&lt;code&gt;bind1st()&lt;/code&gt;関数、&lt;code&gt;bind2nd()&lt;/code&gt;関数、&lt;code&gt;binder1st&lt;/code&gt;クラス、&lt;code&gt;binder2nd&lt;/code&gt;クラスを削除。代わりに&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/bind.html&#34;&gt;bind()&lt;/a&gt;&lt;/code&gt;関数や&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/lambda_expressions.html&#34;&gt;ラムダ式&lt;/a&gt;を使用すること&lt;/li&gt;
&lt;li&gt;関数ポインタから関数オブジェクトに変換するための&lt;code&gt;ptr_fun()&lt;/code&gt;関数、&lt;code&gt;pointer_to_unary_function&lt;/code&gt;クラス、&lt;code&gt;pointer_to_binary_function&lt;/code&gt;クラスを削除。&lt;code&gt;first_argument_type&lt;/code&gt;や&lt;code&gt;second_argument_type&lt;/code&gt;といった型が必要なくなったため、これらの機能は必要なくなった&lt;/li&gt;
&lt;li&gt;メンバ関数から関数オブジェクトへの変換をするための&lt;code&gt;mem_fun()&lt;/code&gt;関数、&lt;code&gt;mem_fun_ref()&lt;/code&gt;関数、&lt;code&gt;mem_fun_t&lt;/code&gt;クラス、&lt;code&gt;mem_fun1_t&lt;/code&gt;クラス、&lt;code&gt;mem_fun_ref_t&lt;/code&gt;クラス、&lt;code&gt;mem_fun1_ref_t&lt;/code&gt;クラス、&lt;code&gt;const_mem_fun_t&lt;/code&gt;クラス、&lt;code&gt;const_mem_fun1_t&lt;/code&gt;クラス、&lt;code&gt;const_mem_fun_ref_t&lt;/code&gt;クラス、&lt;code&gt;const_mem_fun1_ref_t&lt;/code&gt;クラスを削除。代わりに&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/mem_fn.html&#34;&gt;mem_fn()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/bind.html&#34;&gt;bind()&lt;/a&gt;&lt;/code&gt;関数や&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/lambda_expressions.html&#34;&gt;ラムダ式&lt;/a&gt;を使用すること&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/function.html&#34;&gt;function&lt;/a&gt;&lt;/code&gt;クラスのアロケータサポートを削除。コンパイラが実装していなかったり、不完全な実装だったりしていた&lt;/li&gt;
&lt;li&gt;C++98から非推奨だったiostreamのエイリアスを削除&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ios_base::io_state&lt;/code&gt;の代わりに&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/ios_base/type-iostate.html&#34;&gt;ios_base::iostate&lt;/a&gt;&lt;/code&gt;を使用すること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ios_base::open_mode&lt;/code&gt;の代わりに&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/ios_base/type-openmode.html&#34;&gt;ios_base::openmode&lt;/a&gt;&lt;/code&gt;を使用すること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ios_base::seek_dir&lt;/code&gt;の代わりに&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/ios_base/type-seekdir.html&#34;&gt;ios_base::seekdir&lt;/a&gt;&lt;/code&gt;を使用すること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ios_base::streamoff&lt;/code&gt;の代わりに、&lt;code&gt;char_traits&amp;lt;CharT&amp;gt;::off_type&lt;/code&gt;もしくは&lt;code&gt;basic_ios&amp;lt;CharT&amp;gt;::off_type&lt;/code&gt;を使用すること (&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iosfwd.md.nolink&#34;&gt;&amp;lt;iosfwd&amp;gt;&lt;/a&gt;&lt;/code&gt;で定義されている&lt;code&gt;std::streamoff&lt;/code&gt;は残る)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ios_base::streampos&lt;/code&gt;の代わりに、&lt;code&gt;char_traits&amp;lt;CharT&amp;gt;::pos_type&lt;/code&gt;もしくは&lt;code&gt;basic_ios&amp;lt;CharT&amp;gt;::pos_type&lt;/code&gt;を使用すること (&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iosfwd.md.nolink&#34;&gt;&amp;lt;iosfwd&amp;gt;&lt;/a&gt;&lt;/code&gt;で定義されている&lt;code&gt;std::streampos&lt;/code&gt;は残る)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_streambuf::stossc()&lt;/code&gt;メンバ関数を削除。&lt;code&gt;sbumpc()&lt;/code&gt;の単なる別名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ios_base&lt;/code&gt;クラスの別名型が削除されることにともない、それらの型をパラメータにとるオーバーロードを削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ios_base&lt;/code&gt;クラスの別名型が削除されることにともない、それらの型をパラメータにとる関数が削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機能の非推奨化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator.html&#34;&gt;std::iterator&lt;/a&gt;&lt;/code&gt;クラスを非推奨化。このクラスを使用しても、イテレータ定義は簡単にならなかった&lt;/li&gt;
&lt;li&gt;C++11で&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;allocator_traits&lt;/a&gt;&lt;/code&gt;クラスが導入されたことで不要になった、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;allocator&lt;/a&gt;&lt;/code&gt;の以下のメンバを非推奨化：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;size_type&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;difference_type&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pointer&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const_pointer&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reference&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const_reference&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rebind&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/address.html&#34;&gt;address()&lt;/a&gt;&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/allocate.html&#34;&gt;allocate()&lt;/a&gt;&lt;/code&gt;メンバ関数の&lt;code&gt;hint&lt;/code&gt;パラメータ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/max_size.html&#34;&gt;max_size()&lt;/a&gt;&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/construct.html&#34;&gt;construct()&lt;/a&gt;&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/destroy.html&#34;&gt;destroy()&lt;/a&gt;&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++11で&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;allocator_traits&lt;/a&gt;&lt;/code&gt;クラスが導入されたことで不要になった、要素型を再束縛するための&lt;code&gt;allocator&amp;lt;void&amp;gt;&lt;/code&gt;特殊化を非推奨化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;constexpr&lt;/code&gt;の機能拡張によって扱える型が増えている。将来的にほとんどの型が&lt;code&gt;constexpr&lt;/code&gt;で扱えるようになるため、&lt;code&gt;constexpr&lt;/code&gt;で扱える型の分類である&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_literal_type.html&#34;&gt;is_literal_type&lt;/a&gt;&lt;/code&gt;型特性を非推奨化&lt;/li&gt;
&lt;li&gt;一時的なメモリ確保のための&lt;code&gt;std::get_temporary_buffer()&lt;/code&gt;関数と&lt;code&gt;std::return_temporary_buffer()&lt;/code&gt;関数を非推奨化。これらは関数内での一時的なメモリ確保のために、最適化されたメモリ確保の仕組みを提供することを期待して定義されたが、実際にはどの実装も特別視せず、それゆえに便利に使われてはこなかった。将来的にスタックからのメモリ確保をする機能を作る予定だが、これらの関数は例外安全性やRAIIが考慮されていないため、これらの関数の実装・仕様のみを入れ替えるような改訂はできない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/raw_storage_iterator.html&#34;&gt;raw_storage_iterator&lt;/a&gt;&lt;/code&gt;クラスを非推奨化。アロケータとの連携ができず、限られた用途にしか使用できなかった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/not_fn.md.nolink&#34;&gt;not_fn()&lt;/a&gt;&lt;/code&gt;の追加にともない、古くなった以下の機能を非推奨化：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/negators.html&#34;&gt;not1()&lt;/a&gt;&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/negators.html&#34;&gt;not2()&lt;/a&gt;&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/negators.html&#34;&gt;unary_negate&lt;/a&gt;&lt;/code&gt;クラス&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/negators.html&#34;&gt;binary_nagate&lt;/a&gt;&lt;/code&gt;クラス&lt;/li&gt;
&lt;li&gt;標準関数オブジェクトの&lt;code&gt;result_type&lt;/code&gt;、&lt;code&gt;argument_type&lt;/code&gt;、&lt;code&gt;first_argument_type&lt;/code&gt;、&lt;code&gt;second_argument_type&lt;/code&gt;型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;デバッグ用途にしか使用しない、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;shared_ptr&lt;/a&gt;::&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr/unique.html&#34;&gt;unique()&lt;/a&gt;&lt;/code&gt;を非推奨化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/result_of.html&#34;&gt;result_of&lt;/a&gt;&lt;/code&gt;を非推奨化。代わりに&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/invoke_result.md.nolink&#34;&gt;invoke_result&lt;/a&gt;&lt;/code&gt;を使用すること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/codecvt.html&#34;&gt;&amp;lt;codecvt&amp;gt;&lt;/a&gt;&lt;/code&gt;を非推奨化。適切なエラーハンドリングの方法がなかったため、セキュリティ上攻撃の可能性があった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/memory_order.html&#34;&gt;memory_order_consume&lt;/a&gt;&lt;/code&gt;を一時的に非推奨化。「その定義が現実に即していない」「acquire/releaseより弱いから使いにくい」といった理由から、より良い定義に変更するまでの間、非推奨とする&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/files/papers/p0636r0.html&#34; target=&#34;_blank&#34;&gt;P0636R0 Changes between C++14 and C++17 DIS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>E Kawashima</name>
        <email>e-kwsm@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>畳み込み式 -- 「畳み込み式」 (fix #418)</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/folding_expressions.html"/>
      <id>341591a596051e617d42b4d20e839e587cacff0b:lang/cpp17/folding_expressions.md</id>
      <updated>2017-04-24 04:16:59 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;畳み込み式&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;畳み込み式 (fold expression) は可変引数テンプレートのパラメータパックに対して二項演算を累積的に行う (畳み込む fold)。&lt;/p&gt;
&lt;h2&gt;仕様&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;pack&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;op&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;// (1) 単項右畳み込み&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;op&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;pack&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;// (2) 単項左畳み込み&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;pack&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;op&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;op&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;init&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// (3) 二項右畳み込み&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;init&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;op&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;op&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;pack&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// (4) 二項左畳み込み&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;畳み込み式は括弧 &lt;code&gt;()&lt;/code&gt; で囲まれなければならない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;op&lt;/code&gt; は後述する二項演算子&lt;br /&gt;
    二項畳み込み (3, 4) の場合 &lt;code&gt;op&lt;/code&gt; は同一でなければならない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pack&lt;/code&gt; は未展開のパラメータパック (規格ではキャスト式 cast-expression と呼ばれる)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;init&lt;/code&gt; は未展開のパラメータパック以外 (規格ではキャスト式 cast-expression と呼ばれる)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;畳み込み式は以下のように展開される:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;単項右畳み込みは &lt;code&gt;arg1 op (... op (argN-1 op argN))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;単項左畳み込みは &lt;code&gt;((arg1 op arg2) op ...) op argN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;二項右畳み込みは &lt;code&gt;arg1 op (... op (argN-1 op (argN op init)))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;二項左畳み込みは &lt;code&gt;(((init op arg1) op arg2) op ...) op argN&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ただし &lt;code&gt;argi&lt;/code&gt; はパラメータパックの i 番目の要素
* 機能テストマクロは &lt;code&gt;__cpp_fold_expressions&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;演算子&lt;/h3&gt;
&lt;p&gt;オーバーロードを含めて以下の演算子を畳み込み式で使用できる:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;+&lt;/code&gt;
&lt;code&gt;-&lt;/code&gt;
&lt;code&gt;*&lt;/code&gt;
&lt;code&gt;/&lt;/code&gt;
&lt;code&gt;%&lt;/code&gt;
&lt;code&gt;^&lt;/code&gt;
&lt;code&gt;&amp;amp;&lt;/code&gt;
&lt;code&gt;|&lt;/code&gt;
&lt;code&gt;=&lt;/code&gt;
&lt;code&gt;&amp;lt;&lt;/code&gt;
&lt;code&gt;&amp;gt;&lt;/code&gt;
&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;
&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;
&lt;code&gt;+=&lt;/code&gt;
&lt;code&gt;-=&lt;/code&gt;
&lt;code&gt;*=&lt;/code&gt;
&lt;code&gt;/=&lt;/code&gt;
&lt;code&gt;%=&lt;/code&gt;
&lt;code&gt;^=&lt;/code&gt;
&lt;code&gt;&amp;amp;=&lt;/code&gt;
&lt;code&gt;|=&lt;/code&gt;
&lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt;
&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;
&lt;code&gt;==&lt;/code&gt;
&lt;code&gt;!=&lt;/code&gt;
&lt;code&gt;&amp;lt;=&lt;/code&gt;
&lt;code&gt;&amp;gt;=&lt;/code&gt;
&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;
&lt;code&gt;||&lt;/code&gt;
&lt;code&gt;,&lt;/code&gt;
&lt;code&gt;.*&lt;/code&gt;
&lt;code&gt;-&amp;gt;*&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;パラメータパックが空のときの式の値&lt;/h3&gt;
&lt;p&gt;単項畳み込み (1, 2) でパラメータパックが空の場合、以下の演算子については式の値が設定される:&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;演算子&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;`&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;上記以外の演算子に対し空のパラメータパックが適用された場合、プログラムは不適格となる。&lt;/p&gt;
&lt;p&gt;空のパラメータパックが適用された場合の挙動を変えるには二項畳み込み (3, 4) で値を与える。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 単項右畳み込みで和を計算&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 二項右畳み込みで和を計算、フォールバック値 0&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 単項左畳み込みで引数が全て true かどうかを返す&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 二項左畳み込みで引数を出力&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;print_all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ostream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;os&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;boolalpha&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//std::cout &amp;lt;&amp;lt; sum() &amp;lt;&amp;lt; &#39;\n&#39;;  // 不適格: 引数が必要&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// 引数がないので設定した 0 にフォールバック&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 引数がないので true にフォールバック&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print_all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;15
0
true
123
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;今までは、累積的に二項演算を行うには以下のように可変長引数関数を再帰的に呼び出さなければならなかった:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...);&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;畳み込み式によってこれを簡潔に書けるようになった。&lt;/p&gt;
&lt;h2&gt;検討されたほかの選択肢&lt;/h2&gt;
&lt;h3&gt;パラメータパックが空のときの &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt; の値&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4191.html&#34; target=&#34;_blank&#34;&gt;N4191&lt;/a&gt;,
&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4295.html&#34; target=&#34;_blank&#34;&gt;N4295&lt;/a&gt;
では以下の演算子についてもパラメータパックが空のときに値を設定することが提案されていた:&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;演算子&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;`\&lt;/td&gt;
&lt;td&gt;`&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;二項演算の単位元を設定するのは自然なことだと考えられた。&lt;/p&gt;
&lt;p&gt;しかしながら、&lt;code&gt;operator+&lt;/code&gt; をオーバーロードしてコンテナや文字列の連結に用いる (cf. &lt;code&gt;std::string&lt;/code&gt;) のは一般的なことである。
そのような場合、空のパラメータパックを与えたときに &lt;code&gt;int()&lt;/code&gt; が適用されるのは思わぬ挙動につながり、
しかもバグ発見が困難であることが
&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4358.pdf&#34; target=&#34;_blank&#34;&gt;N4358&lt;/a&gt;
で指摘された。&lt;br /&gt;
&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4072.html&#34; target=&#34;_blank&#34;&gt;N4072 Fixed Size Parameter Packs&lt;/a&gt;
との兼ね合いもあったが、
上記のフォールバック値は削除され、パラメータパックが空の場合は不適格となった。&lt;/p&gt;
&lt;p&gt;一方 &lt;code&gt;operator&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;operator||&lt;/code&gt;, &lt;code&gt;operator,&lt;/code&gt; はオーバーロードがバッドプラクティスとされているため残された。&lt;/p&gt;
&lt;h4&gt;上記の問題を解決するのに考えられた方法&lt;/h4&gt;
&lt;h5&gt;単位元 &lt;code&gt;identity_element&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;空のパラメータパックが与えられた場合、単項畳み込み式は以下のように実装される &lt;code&gt;empty_fold&lt;/code&gt; オブジェクトを返す:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BinaryFunction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;empty_fold&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;constexpr&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;identity_element&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BinaryFunction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;identity_element&lt;/code&gt; は単位元を持つあらゆるマグマに対して特殊化され、例えば &lt;code&gt;std::string::operator+&lt;/code&gt; では &lt;code&gt;&#34;&#34;s&lt;/code&gt; とする。&lt;br /&gt;
演算の左単位元と右単位元が異なる場合は、それぞれ &lt;code&gt;left_identity_element&lt;/code&gt; と &lt;code&gt;right_identity_element&lt;/code&gt; を定義する。
それらは特殊化されなかった場合 &lt;code&gt;identity_element&lt;/code&gt; にフォールバックする。&lt;/p&gt;
&lt;p&gt;この方法は可能な限りジェネリックであるが、以下のような問題があった:
&lt;em&gt; 空のパラメータパックは型付けされていないが、返り値の型は他の型に文脈的に変換可能である (暗黙の型変換につながり得る)
&lt;/em&gt; テンプレート特殊化だけのために関数をオブジェクトしなければならない
* サポートする演算子と等価な関数オブジェクト間のマッピングを用意しなければならない&lt;/p&gt;
&lt;p&gt;結局のところこれは問題の解決にはつながらず、負担も大きいことから採用されなかった。&lt;/p&gt;
&lt;h5&gt;返り値の型推論&lt;/h5&gt;
&lt;p&gt;可能であれば空の畳み込みから返り値の型推論を行い、そうでなければプログラムを不適格とする。&lt;br /&gt;
例えば以下の例では &lt;code&gt;std::string&lt;/code&gt; に推論する:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;これは &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4072.html&#34; target=&#34;_blank&#34;&gt;N4072 Fixed Size Parameter Packs&lt;/a&gt;
と適合するが、以下のような問題があった:
&lt;em&gt; 空の単項畳み込みの型が必ずしも正しく推論されない
&lt;/em&gt; 単位元を持つ演算でしか機能しない&lt;/p&gt;
&lt;p&gt;ルールが多い割に利点があまりないため採用されなかった。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;~&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;~&lt;/code&gt; も畳み込み式の演算子として
&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4191.html&#34; target=&#34;_blank&#34;&gt;N4191&lt;/a&gt;,
&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4295.html&#34; target=&#34;_blank&#34;&gt;N4295&lt;/a&gt;
で提案されていたが削除された (理由は発見できず)。&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/accumulate.html&#34;&gt;std::accumulate&lt;/a&gt;&lt;/code&gt; — イテレータの範囲について累積的に二項演算を行う&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4191.html&#34; target=&#34;_blank&#34;&gt;N4191 Folding expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4295.html&#34; target=&#34;_blank&#34;&gt;N4295 Folding expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4358.pdf&#34; target=&#34;_blank&#34;&gt;N4358 Unary Folds and Empty Parameter Packs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0036r0.pdf&#34; target=&#34;_blank&#34;&gt;P0036 Unary Folds and Empty Parameter Packs (revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>E Kawashima</name>
        <email>e-kwsm@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンパイル時アサート -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site
</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/static_assert.html"/>
      <id>432724b8a824a2335f872f9f7dade8df34bb923b:lang/cpp11/static_assert.md</id>
      <updated>2017-04-23 02:57:32 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;コンパイル時アサート&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;static_assert&lt;/code&gt;宣言は、指定した定数式が真であることを表明するための機能である。&lt;/p&gt;
&lt;p&gt;これは、コンパイル時に満たされるべき要件を検証するために使用できる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;static_assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;number of array elements must greater than 0&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;指定した定数式が偽である場合はコンパイルエラーとなり、&lt;code&gt;static_assert&lt;/code&gt;の第2引数で指定した文字列リテラルが診断メッセージとして出力される。&lt;/p&gt;
&lt;h2&gt;仕様&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;static_assert&lt;/code&gt;宣言は、以下の形式を持つ：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;static_assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;定数式&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;文字列リテラル&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定数式は、&lt;code&gt;bool&lt;/code&gt;に変換可能な整数定数式であること&lt;/li&gt;
&lt;li&gt;この宣言は、名前空間スコープ、ブロックスコープ、メンバ宣言といった場所で記述できる&lt;/li&gt;
&lt;li&gt;定数式が真であると評価された場合は何も効果がない。定数式が偽であると評価された場合は、指定された文字列リテラルを含む診断メッセージがコンパイラによって問題報告される。ただし、基本ソース文字集合に含まれない文字集合は、診断メッセージに表示することはコンパイラに要求されない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static_assert&lt;/code&gt;宣言では、新たな型やオブジェクトは宣言しない。また、実行時にサイズや時間コストは発生しない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;static_assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_integral.html&#34;&gt;std::is_integral&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;template parameter T must be integral type&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// …&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// OK&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//X&amp;lt;double&amp;gt;(); // コンパイルエラー : template parameter T must be integral type&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;標準C++にはこれまで、ソフトウェアの正しさを表明するための機能として、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;実行時の&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cassert/assert.html&#34;&gt;assert&lt;/a&gt;&lt;/code&gt;マクロ&lt;/li&gt;
&lt;li&gt;プリプロセス時の&lt;code&gt;#error&lt;/code&gt;ディレクティブ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この2つがあった。テンプレートライブラリを作るにあたって、これらはテンプレート引数のアサーションには使用できなかった。&lt;/p&gt;
&lt;p&gt;この問題を解決する必要性は、&lt;a href=&#34;http://www.boost.org/libs/static_assert&#34; target=&#34;_blank&#34;&gt;Boost Static Assertion Library&lt;/a&gt;と、それを利用する他のBoostライブラリの存在によって示されている。Boostには含まれていないLokiライブラリにも&lt;code&gt;STATIC_CHECK&lt;/code&gt;というマクロの形で同様の機能がある。CzarneckiとEiseneckerによる著書『&lt;a href=&#34;https://www.amazon.co.jp/dp/0201309777&#34; target=&#34;_blank&#34;&gt;Generative Programming&lt;/a&gt; (邦訳 : &lt;a href=&#34;https://www.amazon.co.jp/dp/479811331X&#34; target=&#34;_blank&#34;&gt;ジェネレーティブプログラミング&lt;/a&gt;)』では、コンパイル時アサートをシミュレートするためにテンプレートメタプログラミング手法を使用し、コンフィグレーションを生成する中間段階でのチェックを行っている。&lt;/p&gt;
&lt;p&gt;Boost Static Assertion Libraryが開発されたときに、コンパイル時アサートの設計要件が認識された：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アサーションに関する全ての処理は、コンパイル時に実行する必要がある。実行時に空間的、時間的なコストをかけることは許可しない&lt;/li&gt;
&lt;li&gt;初心者に教えることが容易な構文を持つ必要がある&lt;/li&gt;
&lt;li&gt;アサーションの失敗には、意味がわかり(meaningful)、十分な情報がある(informative)診断メッセージが必要である&lt;/li&gt;
&lt;li&gt;それは名前空間、クラス、ブロックスコープで使用できること&lt;/li&gt;
&lt;li&gt;この機能の誤用によって静かに故障したりはせず、誤用もまたコンパイル時に診断される&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回導入された機能は、これら全ての要件を満たす。&lt;/p&gt;
&lt;p&gt;コンパイル時アサートのために&lt;code&gt;BOOST_STATIC_ASSERT&lt;/code&gt;や&lt;code&gt;STATIC_CHECK&lt;/code&gt;のようなマクロを使用することは、名前空間を汚染する問題があるが、コア言語にその機能を追加することでその問題は解消される。&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/extending_static_assert.html&#34;&gt;C++17 &lt;code&gt;static_assert&lt;/code&gt;&lt;/a&gt; — 第2引数の診断メッセージを省略できるようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1381.htm&#34; target=&#34;_blank&#34;&gt;N1381 Proposal to Add Static Assertions to the Core Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1604.html&#34; target=&#34;_blank&#34;&gt;N1604 Proposal to Add Static Assertions to the Core Language (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1617.html&#34; target=&#34;_blank&#34;&gt;N1617 Proposal to Add Static Assertions to the Core Language (Revision 2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1720.html&#34; target=&#34;_blank&#34;&gt;N1720 Proposal to Add Static Assertions to the Core Language (Revision 3)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
</feed>
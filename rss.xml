<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-02-26T14:43:43.159356</updated>
  <id>093bd4e2-47ea-4f18-a6a9-8238a75530a1</id>

  
    <entry>
      <title>非型テンプレートパラメータとしてクラス型を許可する [P0732R2] -- C++20 非型テンプレートパラメータとしてクラス型を許可する : プレースホルダー型とリテラル演算子の例を追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/class_types_in_non-type_template_parameters.html"/>
      <id>15399cae51a375371e61af1eae0426b72ada8a84:lang/cpp20/class_types_in_non-type_template_parameters.md</id>
      <updated>2025-02-26T17:06:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/class_types_in_non-type_template_parameters.md b/lang/cpp20/class_types_in_non-type_template_parameters.md
index 743d86a47..0758e8aae 100644
--- a/lang/cpp20/class_types_in_non-type_template_parameters.md
+++ b/lang/cpp20/class_types_in_non-type_template_parameters.md
@@ -44,6 +44,7 @@ C++11以降での[汎用的な定数式`constexpr`](/lang/cpp11/constexpr.md)の
 
 
 ## 例
+### floatやクラス型を非型テンプレートパラメータにする例
 ```cpp example
 #include &amp;lt;utility&amp;gt;
 
@@ -105,10 +106,79 @@ int main() {
 }
 ```
 
-### 出力
+#### 出力
 ```
 ```
 
+### プレースホルダーを含む型を非型テンプレートパラメータにする例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+
+template &amp;lt;class T&amp;gt;
+struct X {
+  constexpr X(T x) : value(x) {}
+  T value;
+};
+
+template &amp;lt;X x&amp;gt;
+struct Y {
+  void print() {
+    std::cout &amp;lt;&amp;lt; x.value &amp;lt;&amp;lt; std::endl;
+  }
+};
+
+int main() {
+  // Xクラステンプレートのテンプレートパラメータが
+  // コンストラクタ引数`3`から推論される
+  Y&amp;lt;3&amp;gt;{}.print();
+}
+```
+
+#### 出力
+```
+3
+```
+
+
+### 文字列クラスオブジェクトを非型テンプレートパラメータにしてリテラル演算子を定義する例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+
+template &amp;lt;typename CharT, std::size_t N&amp;gt;
+struct basic_fixed_string {
+  constexpr basic_fixed_string(const CharT (&amp;amp;str)[N+1])
+  { std::copy_n(str, N+1, data); }
+
+  friend auto operator&amp;lt;=&amp;gt;(const basic_fixed_string&amp;amp;, const basic_fixed_string&amp;amp;) = default;
+  CharT data[N+1];
+};
+
+template &amp;lt;typename CharT, std::size_t N&amp;gt;
+basic_fixed_string(const CharT (&amp;amp;str)[N]) -&amp;gt; basic_fixed_string&amp;lt;CharT, N-1&amp;gt;;
+
+template &amp;lt;std::size_t N&amp;gt;
+using fixed_string = basic_fixed_string&amp;lt;char, N&amp;gt;;
+
+namespace my_literals {
+template &amp;lt;basic_fixed_string str&amp;gt;
+auto operator&amp;#34;&amp;#34;_udl() {
+    return str;
+}
+}
+
+int main() {
+  using namespace my_literals;
+  auto s = &amp;#34;hello&amp;#34;_udl;
+  std::cout &amp;lt;&amp;lt; s.data &amp;lt;&amp;lt; std::endl;
+}
+```
+
+#### 出力
+```
+hello
+```
+
 
 ## 備考
 - [Bug 97930 - `pair` is not a structural type](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=97930)
@@ -121,4 +191,4 @@ int main() {
 
 ## 参照
 - [P0732R2 Class Types in Non-Type Template Parameters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0732r2.pdf)
-- [P1907R1 Inconsistencies with non-type template parameters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1907r1.html)
\ No newline at end of file
+- [P1907R1 Inconsistencies with non-type template parameters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1907r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contains -- fix sample in flat_multiset</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/contains.html"/>
      <id>816853121ff41b05699b3edb3ec38c95cce82db5:reference/flat_set/flat_multiset/contains.md</id>
      <updated>2025-02-18T20:11:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/contains.md b/reference/flat_set/flat_multiset/contains.md
index 48e2daa1a..3bc429600 100644
--- a/reference/flat_set/flat_multiset/contains.md
+++ b/reference/flat_set/flat_multiset/contains.md
@@ -51,7 +51,7 @@ return find(x) != end();
 
 int main()
 {
-  std::flat_set&amp;lt;int&amp;gt; fs = {3, 1, 4, 1};
+  std::flat_multiset&amp;lt;int&amp;gt; fs = {3, 1, 4, 1};
 
   // キー3の要素が含まれているか
   if (fs.contains(3)) {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[nodiscard]]をコンストラクタのオーバーロードごとに付加できるようにする [P1771R1] -- C++20 / C++23 : ページタイトルに提案文書の番号を追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/nodiscard_for_constructors.html"/>
      <id>7a572ea68617b61516b1e1820b42c813d103ca73:lang/cpp20/nodiscard_for_constructors.md</id>
      <updated>2025-02-18T15:53:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/nodiscard_for_constructors.md b/lang/cpp20/nodiscard_for_constructors.md
index bd3a0a979..4fe7d3183 100644
--- a/lang/cpp20/nodiscard_for_constructors.md
+++ b/lang/cpp20/nodiscard_for_constructors.md
@@ -1,4 +1,4 @@
-# [[nodiscard]]をコンストラクタのオーバーロードごとに付加できるようにする
+# [[nodiscard]]をコンストラクタのオーバーロードごとに付加できるようにする [P1771R1]
 * cpp20[meta cpp]
 
 &amp;lt;!-- start lang caution --&amp;gt;
@@ -64,4 +64,4 @@ prog.cc:11:12: note: declared here
 
 
 ## 参照
-- [P1771R1 `[[nodiscard]]` for constructors](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1771r1.pdf)
\ No newline at end of file
+- [P1771R1 `[[nodiscard]]` for constructors](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1771r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>throw()による例外送出しない指定を削除 [P0619R4] -- C++20 / C++23 : ページタイトルに提案文書の番号を追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/remove_deprecated_nothrow_exception_specification.html"/>
      <id>7a572ea68617b61516b1e1820b42c813d103ca73:lang/cpp20/remove_deprecated_nothrow_exception_specification.md</id>
      <updated>2025-02-18T15:53:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/remove_deprecated_nothrow_exception_specification.md b/lang/cpp20/remove_deprecated_nothrow_exception_specification.md
index 088f25b9a..bd7edaa94 100644
--- a/lang/cpp20/remove_deprecated_nothrow_exception_specification.md
+++ b/lang/cpp20/remove_deprecated_nothrow_exception_specification.md
@@ -1,4 +1,4 @@
-# throw()による例外送出しない指定を削除
+# throw()による例外送出しない指定を削除 [P0619R4]
 * cpp20[meta cpp]
 
 &amp;lt;!-- start lang caution --&amp;gt;
@@ -27,4 +27,4 @@ C++20では、非推奨とされていた`throw()`指定の機能を削除する
 
 
 ## 参照
-- [P0619R4 Reviewing Deprecated Facilities of C++17 for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0619r4.html)
\ No newline at end of file
+- [P0619R4 Reviewing Deprecated Facilities of C++17 for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0619r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>属性の名前空間を予約 [P1908R1] -- C++20 / C++23 : ページタイトルに提案文書の番号を追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/reserving_attribute_namespaces_for_future_use.html"/>
      <id>7a572ea68617b61516b1e1820b42c813d103ca73:lang/cpp20/reserving_attribute_namespaces_for_future_use.md</id>
      <updated>2025-02-18T15:53:36+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;属性の名前空間を予約 [P1908R1]&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative-page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;将来的に標準で定義する属性のために、以下の名前空間の属性を予約する：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名前空間に属さない属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std&lt;/code&gt;および&lt;code&gt;std&lt;/code&gt; + 数字の名前空間の属性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#relative-page&#34; id=&#34;relative-page&#34;&gt;関連項目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../cpp11/attributes.html&#34;&gt;C++11 属性構文&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1908r1.pdf&#34; target=&#34;_blank&#34;&gt;P1908R1 Reserving Attribute Namespaces for Future Use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Unicode標準への参照を更新 [P1025R1] -- C++20 / C++23 : ページタイトルに提案文書の番号を追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/update_the_reference_to_the_unicode_standard.html"/>
      <id>7a572ea68617b61516b1e1820b42c813d103ca73:lang/cpp20/update_the_reference_to_the_unicode_standard.md</id>
      <updated>2025-02-18T15:53:36+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Unicode標準への参照を更新 [P1025R1]&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++20に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative-page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;Unicode標準 (ISO/IEC 10646) としてこれまで、「ISO/IEC 10646-1:1993, Information technology — Universal Multiple-Octet Coded Character Set (UCS) — Part 1: Architecture and Basic Multilingual Plane」が参照されていた。&lt;/p&gt;
&lt;p&gt;従来の古い仕様への参照は、非推奨化された古い機能のものであるとして残し、Unicode標準の最新仕様「ISO/IEC 10646, Information technology — Universal Coded Character Set (UCS)」を参照するよう追加する。&lt;/p&gt;
&lt;p&gt;Unicode標準で非推奨化された用語UCS2とUCS4の扱いは、以下のようになる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UTC-32はUCS4と見なせるため、文字エンコーディングの説明ではUCS4の代わりにUTF-32を使用する&lt;/li&gt;
&lt;li&gt;ただしUTF-16はUCS2と見なすことができないため、古い機能のために古い仕様を参照するとして一部そのまま残す&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実装が常に最新のUnicode標準を参照していることから、この変更によるユーザーへの直接的な影響はない。&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;C++規格上ではISO/IEC 10646-1:1993を参照していても、実装は最新仕様に更新し続けていた。たとえば1996の仕様ではハングル文字のセットが削除されて別な位置に追加され、チベット文字が再追加された。実装はそれに対応している。&lt;/p&gt;
&lt;p&gt;また、C++標準が参照しているECMAScript標準でUnicode標準の参照が競合してしまう。&lt;/p&gt;
&lt;p&gt;Unicode標準での用語定義が変更されたことにも影響がある。UCS2とUCS4という用語が非推奨化されたために、その用語をC++標準が使用し続けることは望ましくない。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1025r1.html&#34; target=&#34;_blank&#34;&gt;P1025R1 Update The Reference To The Unicode Standard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>参照するPOSIX規格を更新 [P2227R0] -- C++20 / C++23 : ページタイトルに提案文書の番号を追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/update_normative_reference_to_posix.html"/>
      <id>7a572ea68617b61516b1e1820b42c813d103ca73:lang/cpp23/update_normative_reference_to_posix.md</id>
      <updated>2025-02-18T15:53:36+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;参照するPOSIX規格を更新 [P2227R0]&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative-page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++20まではPOSIX規格としてISO/IEC 9945:2003 (別名POSIX.1-2001 aka The Single UNIX Specification, version 3) を参照していた。&lt;/p&gt;
&lt;p&gt;しかし、標準C++の一部の機能はより新しいPOSIX規格の機能を使用していたため、ISO/IEC 9945:2003への参照を削除した上で、以下の3つの規格を参照するよう変更する：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ISO/IEC/IEEE 9945:20032009, Information Technology — Portable Operating System Interface (POSIX)&lt;/li&gt;
&lt;li&gt;ISO/IEC/IEEE 9945:2009/Cor 1:2013, Information Technology — Portable Operating System Interface (POSIX), Technical Corrigendum 1&lt;/li&gt;
&lt;li&gt;ISO/IEC/IEEE 9945:2009/Cor 2:2017, Information Technology — Portable Operating System Interface (POSIX), Technical Corrigendum 2&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;posix&lt;/code&gt;名前空間の予約に関してのPOSIX規格の参照もまた、ISO/IEC 9945からISO/IEC/IEEE 9945に変更する。&lt;/p&gt;
&lt;p&gt;また、POSIXの一部環境で非推奨となっている機能である&lt;code&gt;readdir_r()&lt;/code&gt;を参照していたところを、&lt;code&gt;readdir()&lt;/code&gt;に置き換える。&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;ここでは、具体的に問題になった、標準C++が参照するPOSIXの機能を列挙する。&lt;/p&gt;
&lt;h3&gt;errno&lt;/h3&gt;
&lt;p&gt;C++03まで、&lt;code&gt;&lt;a href=&#34;../../reference/cerrno.html&#34;&gt;&amp;lt;cerrno&amp;gt;&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&amp;lt;errno.h&amp;gt;&lt;/code&gt;にはISO Cが要求する&lt;code&gt;EDOM&lt;/code&gt; (定義域エラー)、&lt;code&gt;ERANGE&lt;/code&gt; (値域エラー)、&lt;code&gt;errno&lt;/code&gt;といった必要最低限のマクロのみが含まれていた。&lt;/p&gt;
&lt;p&gt;C++11での&lt;code&gt;&lt;a href=&#34;../../reference/system_error.html&#34;&gt;&amp;lt;system_error&amp;gt;&lt;/a&gt;&lt;/code&gt;ライブラリの導入にともなって、「&lt;code&gt;&lt;a href=&#34;../../reference/cerrno.html&#34;&gt;&amp;lt;cerrno&amp;gt;&lt;/a&gt;&lt;/code&gt;で定義される内容は、&lt;code&gt;errno&lt;/code&gt;がマクロ定義されることを除いてPOSIXの&lt;code&gt;&amp;lt;errno.h&amp;gt;&lt;/code&gt;ヘッダと同じである」という規定となった。この規定のあとにマクロのリストが定義されるが、&lt;code&gt;ENOTRECOVERABLE&lt;/code&gt;と&lt;code&gt;EOWNERDEAD&lt;/code&gt;はPOSIXの2006規格、&lt;code&gt;ENOTSUP&lt;/code&gt;と&lt;code&gt;EOPNOTSUPP&lt;/code&gt;は2008規格で追加されたものだった。&lt;/p&gt;
&lt;p&gt;POSIXの2008年では標準C++で定義されるマクロのほかに&lt;code&gt;EDQUOT&lt;/code&gt;、&lt;code&gt;EMULTIHOP&lt;/code&gt;、&lt;code&gt;ENOLINK&lt;/code&gt;といった具体的な意味をもたない「予約済み」というだけのマクロももっている。すでに定義されている&lt;code&gt;ESTALE&lt;/code&gt;のようにそれらを標準C++に追加することは今後検討する必要はあるが、ここでは提案しない。&lt;/p&gt;
&lt;h3&gt;ファイルシステム&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&#34;../../reference/filesystem/path.html&#34;&gt;path&lt;/a&gt;&lt;/code&gt;クラスについて、POSIX.1-2008の4.12 Pathname ResolutionとPOSIX.1-2017の4.13 Pathname Resolutionを追加で参照する必要がある。&lt;/p&gt;
&lt;p&gt;ここで参照するほとんどの機能はPOSIX.1-2001に存在するが、ファイルの最終更新日時の&lt;code&gt;futimens()&lt;/code&gt;関数、ファイル権限の&lt;code&gt;fchmodat()&lt;/code&gt;関数は存在していない。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;truncate()&lt;/code&gt;と&lt;code&gt;statvfs()&lt;/code&gt;の機能はオプションであり、POSIXに準拠する環境に存在する必要がない。POSIX.1-2008ではこれらの機能がオプションではなくなった。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stat()&lt;/code&gt;で使用される&lt;code&gt;S_ISVTX&lt;/code&gt;マクロはオプション機能であり、XSIの一部である。これはPOSIX.1-2008とPOSIX.1-2017でもオプションのままである。&lt;/p&gt;
&lt;p&gt;POSIX.1-2001のスレッドセーフ関数 (Thread-Safe Functions : TSF) オプションの一部である&lt;code&gt;readdir_r()&lt;/code&gt;を参照する注記もあるが、POSIX.1-2008ではBaseに移動されている。ただし、&lt;code&gt;readdir_r()&lt;/code&gt; APIの実装には欠陥があり、一部の実装では非推奨となっており、将来のバージョンから削除される可能性がある。ここでは&lt;code&gt;readdir_r()&lt;/code&gt;に固有のものに依存してはいないため、&lt;code&gt;readdir()&lt;/code&gt;を参照するよう変更する。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2227r0.html&#34; target=&#34;_blank&#34;&gt;P2227R0 Update normative reference to POSIX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>条件付きで特殊メンバ関数をトリビアルに定義するように [P0848R3] -- 見出しの表示崩れを修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/conditionally_trivial_special_member_functions.html"/>
      <id>cce034a5cd5372fb36a549fc6b134a340b1482f3:lang/cpp20/conditionally_trivial_special_member_functions.md</id>
      <updated>2025-02-18T15:43:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/conditionally_trivial_special_member_functions.md b/lang/cpp20/conditionally_trivial_special_member_functions.md
index 6a4cd44e5..e33bd76fa 100644
--- a/lang/cpp20/conditionally_trivial_special_member_functions.md
+++ b/lang/cpp20/conditionally_trivial_special_member_functions.md
@@ -287,7 +287,7 @@ C++20のコンセプトの導入によって、コンセプトによって特殊
 
 この機能は、C++23の`std::expceted`の実装で活用されるだろう。
 
-## ## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
 - [コンセプト](./concepts.md)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>条件付きで特殊メンバ関数をトリビアルに定義するように [P0848R3] -- C++20: 提案文書の番号をタイトルに記載</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/conditionally_trivial_special_member_functions.html"/>
      <id>50250aec626a8d887e6730af931cf2e46512d67d:lang/cpp20/conditionally_trivial_special_member_functions.md</id>
      <updated>2025-02-18T15:42:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/conditionally_trivial_special_member_functions.md b/lang/cpp20/conditionally_trivial_special_member_functions.md
index 7a305b64c..6a4cd44e5 100644
--- a/lang/cpp20/conditionally_trivial_special_member_functions.md
+++ b/lang/cpp20/conditionally_trivial_special_member_functions.md
@@ -1,4 +1,4 @@
-# 条件付きで特殊メンバ関数をトリビアルに定義するように
+# 条件付きで特殊メンバ関数をトリビアルに定義するように [P0848R3]
 * cpp20[meta cpp]
 
 このページはC++20に採用された言語機能の変更を解説しています。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>未初期化領域への暗黙的なオブジェクト構築 [P0593R6] -- C++20: 提案文書の番号をタイトルに記載</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.html"/>
      <id>50250aec626a8d887e6730af931cf2e46512d67d:lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md</id>
      <updated>2025-02-18T15:42:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md b/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
index 37bd5f5bf..4f19a53d9 100644
--- a/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
+++ b/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
@@ -1,4 +1,4 @@
-# 未初期化領域への暗黙的なオブジェクト構築
+# 未初期化領域への暗黙的なオブジェクト構築 [P0593R6]
 * cpp20[meta cpp]
 
 &amp;lt;!-- start lang caution --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
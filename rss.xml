<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-01-26T22:48:42.673661</updated>
  <id>100d9342-9409-433e-b40e-562b09685c7b</id>

  
    <entry>
      <title>basic_stacktrace -- basic_stacktrace : operator[ ]とatを追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace.html"/>
      <id>aa3ea60a32343d41274457aab0017d8dd25bfac4:reference/stacktrace/basic_stacktrace.md</id>
      <updated>2021-01-27T07:43:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace.md b/reference/stacktrace/basic_stacktrace.md
index fd8e3ebbf..b9411740b 100644
--- a/reference/stacktrace/basic_stacktrace.md
+++ b/reference/stacktrace/basic_stacktrace.md
@@ -76,8 +76,8 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`operator[]`](basic_stacktrace/op_at.md.nolink) | 要素アクセス | C++23 |
-| [`at`](basic_stacktrace/at.md.nolink)            | 要素アクセス | C++23 |
+| [`operator[]`](basic_stacktrace/op_at.md) | 任意の位置の要素を取得する | C++23 |
+| [`at`](basic_stacktrace/at.md)            | 任意の位置の要素を取得する | C++23 |
 
 
 ### 変更
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>at -- basic_stacktrace : operator[ ]とatを追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/at.html"/>
      <id>aa3ea60a32343d41274457aab0017d8dd25bfac4:reference/stacktrace/basic_stacktrace/at.md</id>
      <updated>2021-01-27T07:43:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/at.md b/reference/stacktrace/basic_stacktrace/at.md
new file mode 100644
index 000000000..8e34e8f89
--- /dev/null
+++ b/reference/stacktrace/basic_stacktrace/at.md
@@ -0,0 +1,58 @@
+# at
+* stacktrace[meta header]
+* std[meta namespace]
+* basic_stacktrace[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+const_reference at(size_type frame_no) const; // (1) C++23
+```
+
+## 概要
+任意の位置の要素を取得する。
+
+
+## 戻り値
+保持しているスタックトレースの履歴の、`frame_no`番目の要素を返す。
+
+
+## 例外
+`frame_no &amp;gt;=` [`size()`](size.md)である場合、[`std::out_of_range`](/reference/stdexcept.md)例外を送出する。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+
+void g() {
+  std::stacktrace st = std::stacktrace::current();
+  std::cout &amp;lt;&amp;lt; st.at(0) &amp;lt;&amp;lt; std::endl;
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+}
+```
+* st.at[color ff0000]
+* current()[link current.md]
+
+### 出力例
+```
+g() at main.cpp:5
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator[] -- basic_stacktrace : operator[ ]とatを追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/op_at.html"/>
      <id>aa3ea60a32343d41274457aab0017d8dd25bfac4:reference/stacktrace/basic_stacktrace/op_at.md</id>
      <updated>2021-01-27T07:43:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/op_at.md b/reference/stacktrace/basic_stacktrace/op_at.md
new file mode 100644
index 000000000..8b7d642cb
--- /dev/null
+++ b/reference/stacktrace/basic_stacktrace/op_at.md
@@ -0,0 +1,62 @@
+# operator[]
+* stacktrace[meta header]
+* std[meta namespace]
+* basic_stacktrace[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+const_reference operator[](size_type frame_no) const; // (1) C++23
+```
+
+## 概要
+任意の位置の要素を取得する。
+
+
+## 事前条件
+- `frame_no &amp;lt;` [`size()`](size.md)であること
+
+
+## 戻り値
+保持しているスタックトレースの履歴の、`frame_no`番目の要素を返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+
+void g() {
+  std::stacktrace st = std::stacktrace::current();
+  std::cout &amp;lt;&amp;lt; st[0] &amp;lt;&amp;lt; std::endl;
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+}
+```
+* st[0][color ff0000]
+* current()[link current.md]
+
+### 出力例
+```
+g() at main.cpp:5
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_stacktrace -- basic_stacktrace : get_allocatorを追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace.html"/>
      <id>60be88671a5ca51d8cc7d91b2468a613676b1849:reference/stacktrace/basic_stacktrace.md</id>
      <updated>2021-01-27T07:33:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace.md b/reference/stacktrace/basic_stacktrace.md
index 63e64f736..fd8e3ebbf 100644
--- a/reference/stacktrace/basic_stacktrace.md
+++ b/reference/stacktrace/basic_stacktrace.md
@@ -46,7 +46,7 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`get_allocator`](basic_stacktrace/get_allocator.md.nolink) | アロケータオブジェクトを取得する | C++23 |
+| [`get_allocator`](basic_stacktrace/get_allocator.md) | アロケータオブジェクトを取得する | C++23 |
 
 
 ### イテレータ
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max_size -- basic_stacktrace : get_allocatorを追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/get_allocator.html"/>
      <id>60be88671a5ca51d8cc7d91b2468a613676b1849:reference/stacktrace/basic_stacktrace/get_allocator.md</id>
      <updated>2021-01-27T07:33:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/get_allocator.md b/reference/stacktrace/basic_stacktrace/get_allocator.md
new file mode 100644
index 000000000..badcba136
--- /dev/null
+++ b/reference/stacktrace/basic_stacktrace/get_allocator.md
@@ -0,0 +1,47 @@
+# max_size
+* stacktrace[meta header]
+* std[meta namespace]
+* basic_stacktrace[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+allocator_type get_allocator() const noexcept; // (1) C++23
+```
+
+## 概要
+アロケータオブジェクトを取得する。
+
+
+## 戻り値
+コンストラクタで設定され、保持しているアロケータオブジェクトを返す。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+
+int main() {
+  std::allocator&amp;lt;std::stacktrace_entry&amp;gt; alloc{};
+  std::stacktrace trace{alloc};
+
+  assert(trace.get_allocator() == alloc);
+}
+```
+* trace.get_allocator()[color ff0000]
+* std::stacktrace_entry[link /reference/stacktrace/stacktrace_entry.md.nolink]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_stacktrace -- basic_stacktrace : max_sizeを追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace.html"/>
      <id>26f13c1654e00fbbd368af1add732f8f75985609:reference/stacktrace/basic_stacktrace.md</id>
      <updated>2021-01-27T07:27:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace.md b/reference/stacktrace/basic_stacktrace.md
index e111e35d4..63e64f736 100644
--- a/reference/stacktrace/basic_stacktrace.md
+++ b/reference/stacktrace/basic_stacktrace.md
@@ -68,7 +68,7 @@ namespace std {
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
 | [`size`](basic_stacktrace/size.md)         | スタックトレースの履歴数を取得する | C++23 |
-| [`max_size`](basic_stacktrace/max_size.md.nolink) | 格納可能な最大の要素数を取得する | C++23 |
+| [`max_size`](basic_stacktrace/max_size.md) | 格納可能な最大の要素数を取得する | C++23 |
 | [`empty`](basic_stacktrace/empty.md)       | スタックトレースの履歴が空かどうかを判定する | C++23 |
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max_size -- basic_stacktrace : max_sizeを追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/max_size.html"/>
      <id>26f13c1654e00fbbd368af1add732f8f75985609:reference/stacktrace/basic_stacktrace/max_size.md</id>
      <updated>2021-01-27T07:27:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/max_size.md b/reference/stacktrace/basic_stacktrace/max_size.md
new file mode 100644
index 000000000..cb2587715
--- /dev/null
+++ b/reference/stacktrace/basic_stacktrace/max_size.md
@@ -0,0 +1,45 @@
+# max_size
+* stacktrace[meta header]
+* std[meta namespace]
+* basic_stacktrace[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+size_type max_size() const noexcept; // (1) C++23
+```
+
+## 概要
+格納可能な最大の要素数を取得する。
+
+
+## 戻り値
+保持している[`std::vector`](/reference/vector/vector.md)`&amp;lt;`[`std::stacktrace_entry`](/reference/stacktrace/stacktrace_entry.md.nolink)`&amp;gt;`型スタックトレースの履歴の、[`max_size()`](/reference/vector/vector/max_size.md)を返す。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+
+int main() {
+  std::stacktrace trace{};
+  std::cout &amp;lt;&amp;lt; tract.max_size() &amp;lt;&amp;lt; std::endl;
+}
+```
+* trace.max_size()[color ff0000]
+
+### 出力例
+```
+288230376151711743
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_stacktrace -- basic_stacktrace : sizeとemptyを追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace.html"/>
      <id>a40ef68427b399f16ec2ba9fe9313bcec3e7ddc3:reference/stacktrace/basic_stacktrace.md</id>
      <updated>2021-01-27T00:29:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace.md b/reference/stacktrace/basic_stacktrace.md
index f1631688f..e111e35d4 100644
--- a/reference/stacktrace/basic_stacktrace.md
+++ b/reference/stacktrace/basic_stacktrace.md
@@ -67,9 +67,9 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`size`](basic_stacktrace/size.md.nolink)         | 要素数を取得する | C++23 |
+| [`size`](basic_stacktrace/size.md)         | スタックトレースの履歴数を取得する | C++23 |
 | [`max_size`](basic_stacktrace/max_size.md.nolink) | 格納可能な最大の要素数を取得する | C++23 |
-| [`empty`](basic_stacktrace/empty.md.nolink)       | 空かどうかを判定する | C++23 |
+| [`empty`](basic_stacktrace/empty.md)       | スタックトレースの履歴が空かどうかを判定する | C++23 |
 
 
 ### 要素アクセス
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>current -- basic_stacktrace : sizeとemptyを追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/current.html"/>
      <id>a40ef68427b399f16ec2ba9fe9313bcec3e7ddc3:reference/stacktrace/basic_stacktrace/current.md</id>
      <updated>2021-01-27T00:29:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/current.md b/reference/stacktrace/basic_stacktrace/current.md
index f1814964e..ad992dc60 100644
--- a/reference/stacktrace/basic_stacktrace/current.md
+++ b/reference/stacktrace/basic_stacktrace/current.md
@@ -36,10 +36,10 @@ static basic_stacktrace
     - 現在の実行スレッドでの、現在の評価のスタックトレースを保持する`basic_stacktrace`オブジェクトを構築する
     - `alloc`は[`stacktrace_entry`](/reference/stacktrace/stacktrace_entry.md.nolink)オブジェクトの配列を保持する[`std::vector`](/reference/vector/vector.md)型メンバ変数に渡される
 - (2) :
-    - `basic_stacktrace::current(alloc)`で構築されたオブジェクト`st`の[`st.size()`](size.md.nolink)を`n`として、
+    - `basic_stacktrace::current(alloc)`で構築されたオブジェクト`st`の[`st.size()`](size.md)を`n`として、
     - 範囲`[st.begin() + min(n, skip), st.end())`と`alloc`を、[`stacktrace_entry`](/reference/stacktrace/stacktrace_entry.md.nolink)オブジェクトの配列を保持する[`std::vector`](/reference/vector/vector.md)型メンバ変数として保持する。ただし、その初期化に失敗した場合、`basic_stacktrace`オブジェクトは空になる
 - (3) :
-    - `basic_stacktrace::current(alloc)`で構築されたオブジェクト`st`の[`st.size()`](size.md.nolink)を`n`として、
+    - `basic_stacktrace::current(alloc)`で構築されたオブジェクト`st`の[`st.size()`](size.md)を`n`として、
     - 範囲`[st.begin() + min(n, skip), st.begin() + min(n, skip + max_depth))`と`alloc`を、[`stacktrace_entry`](/reference/stacktrace/stacktrace_entry.md.nolink)オブジェクトの配列を保持する[`std::vector`](/reference/vector/vector.md)型メンバ変数として保持する。ただし、その初期化に失敗した場合、`basic_stacktrace`オブジェクトは空になる
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- basic_stacktrace : sizeとemptyを追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/empty.html"/>
      <id>a40ef68427b399f16ec2ba9fe9313bcec3e7ddc3:reference/stacktrace/basic_stacktrace/empty.md</id>
      <updated>2021-01-27T00:29:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/empty.md b/reference/stacktrace/basic_stacktrace/empty.md
new file mode 100644
index 000000000..37b248853
--- /dev/null
+++ b/reference/stacktrace/basic_stacktrace/empty.md
@@ -0,0 +1,56 @@
+# empty
+* stacktrace[meta header]
+* std[meta namespace]
+* basic_stacktrace[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+[[nodiscard]] bool empty() const noexcept; // (1) C++23
+```
+
+## 概要
+スタックトレースの履歴数が空かどうかを判定する。
+
+
+## 戻り値
+保持しているスタックトレースの履歴が空であれば`true`、そうでなければ`false`を返す。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+
+void g() {
+  auto trace = std::stacktrace::current(0, 0);
+  assert(trace.empty());
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+
+  std::stacktrace trace{};
+  assert(trace.empty());
+}
+```
+* trace.empty()[color ff0000]
+* current[link current.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- basic_stacktrace : sizeとemptyを追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/size.html"/>
      <id>a40ef68427b399f16ec2ba9fe9313bcec3e7ddc3:reference/stacktrace/basic_stacktrace/size.md</id>
      <updated>2021-01-27T00:29:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/size.md b/reference/stacktrace/basic_stacktrace/size.md
new file mode 100644
index 000000000..5cf95e4b0
--- /dev/null
+++ b/reference/stacktrace/basic_stacktrace/size.md
@@ -0,0 +1,88 @@
+# size
+* stacktrace[meta header]
+* std[meta namespace]
+* basic_stacktrace[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+size_type size() const noexcept; // (1) C++23
+```
+
+## 概要
+スタックトレースの履歴数を取得する。
+
+
+## 戻り値
+保持しているスタックトレースの履歴の、要素数を返す。
+
+
+## 例
+### 全体のスタックトレースの要素数
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+
+void g() {
+  auto trace = std::stacktrace::current();
+  std::cout &amp;lt;&amp;lt; trace.size() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; trace &amp;lt;&amp;lt; std::endl;
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+}
+```
+* trace.size()[color ff0000]
+* current()[link current.md]
+
+#### 出力例
+```
+3
+ 0# g() at main.cpp:5
+ 1# f() at main.cpp:11
+ 2# main at main.cpp:15
+```
+
+
+### 指定範囲のスタックトレースの要素数
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+
+void g() {
+  auto trace = std::stacktrace::current(1, 1);
+  std::cout &amp;lt;&amp;lt; trace.size() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; trace &amp;lt;&amp;lt; std::endl;
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+}
+```
+* trace.size()[color ff0000]
+* current()[link current.md]
+
+#### 出力例
+```
+1
+ 0# f() at main.cpp:11
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_string -- basic_stacktrace : sizeとemptyを追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/to_string.html"/>
      <id>a40ef68427b399f16ec2ba9fe9313bcec3e7ddc3:reference/stacktrace/basic_stacktrace/to_string.md</id>
      <updated>2021-01-27T00:29:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/to_string.md b/reference/stacktrace/basic_stacktrace/to_string.md
index 913f87a1e..ad35d05a0 100644
--- a/reference/stacktrace/basic_stacktrace/to_string.md
+++ b/reference/stacktrace/basic_stacktrace/to_string.md
@@ -22,7 +22,7 @@ namespace std {
 
 
 ## 備考
-- 戻り値となる文字列の行数は、[`size()`](size.md.nolink)と等値であるという保証はない
+- 戻り値となる文字列の行数は、[`size()`](size.md)と等値であるという保証はない
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>current -- basic_stacktrace::current : 見出しミスを修正</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/current.html"/>
      <id>41c62fdd04f69d9438028aeb6dd64ff3289b4c08:reference/stacktrace/basic_stacktrace/current.md</id>
      <updated>2021-01-27T00:01:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/current.md b/reference/stacktrace/basic_stacktrace/current.md
index fb27445f6..f1814964e 100644
--- a/reference/stacktrace/basic_stacktrace/current.md
+++ b/reference/stacktrace/basic_stacktrace/current.md
@@ -93,7 +93,7 @@ int main() {
 ```
 * current()[color ff0000]
 
-### 出力例
+#### 出力例
 ```
  0# f() at main.cpp:9
  1# main at main.cpp:13
@@ -118,7 +118,7 @@ int main() {
 ```
 * current()[color ff0000]
 
-### 出力例
+#### 出力例
 ```
  0# f() at main.cpp:9
  1# main at main.cpp:13
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
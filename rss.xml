<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-09-09T07:39:12.489947</updated>
  <id>7e265718-7784-476b-9782-2c34f9c7ba8c</id>

  
    <entry>
      <title>format -- consteval/即時関数に当該言語機能へのリンク付与</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>8fd39c7d3a324e27967350123188860d4edc0a37:reference/format/format.md</id>
      <updated>2021-09-09T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index 99f7fd060..87071c218 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -198,6 +198,7 @@ namespace std {
   template&amp;lt;class... Args&amp;gt; using wformat_string
     = basic_format_string&amp;lt;wchar_t, type_identity_t&amp;lt;Args&amp;gt;...&amp;gt;; // exposition only
 ```
+* consteval[link /lang/cpp20/immediate_functions.md]
 
 _`basic_format_string`_ のコンストラクタは[即時関数](/lang/cpp20/immediate_functions.md)であり、書式文字列が正しい場合にのみ定数式として評価できるように実装される。即時関数であるため、定数式として評価できない場合はエラーとなる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>source_location -- consteval/即時関数に当該言語機能へのリンク付与</title>
      <link href="https://cpprefjp.github.io/reference/source_location/source_location.html"/>
      <id>8fd39c7d3a324e27967350123188860d4edc0a37:reference/source_location/source_location.md</id>
      <updated>2021-09-09T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/source_location/source_location.md b/reference/source_location/source_location.md
index d47337d4d..abccdb775 100644
--- a/reference/source_location/source_location.md
+++ b/reference/source_location/source_location.md
@@ -23,6 +23,7 @@ namespace std {
   };
 }
 ```
+* consteval[link /lang/cpp20/immediate_functions.md]
 * uint_least32_t[link /reference/cstdint/uint_least32_t.md]
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>current -- consteval/即時関数に当該言語機能へのリンク付与</title>
      <link href="https://cpprefjp.github.io/reference/source_location/source_location/current.html"/>
      <id>8fd39c7d3a324e27967350123188860d4edc0a37:reference/source_location/source_location/current.md</id>
      <updated>2021-09-09T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/source_location/source_location/current.md b/reference/source_location/source_location/current.md
index 919d9f4f1..cd61cd057 100644
--- a/reference/source_location/source_location/current.md
+++ b/reference/source_location/source_location/current.md
@@ -8,6 +8,7 @@
 ```cpp
 static consteval source_location current() noexcept;
 ```
+* consteval[link /lang/cpp20/immediate_functions.md]
 * source_location[link ../source_location.md]
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_constant_evaluated -- consteval/即時関数に当該言語機能へのリンク付与</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/is_constant_evaluated.html"/>
      <id>8fd39c7d3a324e27967350123188860d4edc0a37:reference/type_traits/is_constant_evaluated.md</id>
      <updated>2021-09-09T16:33:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/is_constant_evaluated.md b/reference/type_traits/is_constant_evaluated.md
index 42c671631..a8c246564 100644
--- a/reference/type_traits/is_constant_evaluated.md
+++ b/reference/type_traits/is_constant_evaluated.md
@@ -21,7 +21,7 @@ namespace std {
 
 - 文法上の定数式（配列型の要素数、`case`ラベルの値、など）
 - `constexpr if`の条件式
-- `consteval`関数の呼び出し内
+- [`consteval`関数](/lang/cpp20/immediate_functions.md)の呼び出し内
 - コンセプトの定義式
     - `requires`節内
     - 入れ子要件内
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>view_interface -- &lt;ranges&gt; 説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/view_interface.html"/>
      <id>109ea61e830f32bf1253067101bb7ece3c84b8ba:reference/ranges/view_interface.md</id>
      <updated>2021-09-09T04:55:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/view_interface.md b/reference/ranges/view_interface.md
index f9f46f59e..74deb62e8 100644
--- a/reference/ranges/view_interface.md
+++ b/reference/ranges/view_interface.md
@@ -20,6 +20,10 @@ namespace std::ranges {
 
 `view_interface`は、[`view`](view.md)を実装する際に便利なクラステンプレートである。使用するときは、派生クラスを`view_interface`のテンプレート引数にする(CRTP)。
 
+## テンプレートパラメータ制約
+
+`D`は`view_interface&amp;lt;D&amp;gt;`の派生クラスであること。
+
 ## メンバ関数
 
 これらのメンバ関数は、`std::ranges`以下のカスタマイゼーションポイントオブジェクトを使って実装されており、テンプレート引数`D`として渡された範囲型に対して該当する呼び出しが可能な場合のみオーバーロード解決に参加する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iota_view -- &lt;ranges&gt; iota_viewの説明を修正 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/iota_view.html"/>
      <id>488b384904fbece195057a7464ee4cbb8361131c:reference/ranges/iota_view.md</id>
      <updated>2021-09-09T04:42:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/iota_view.md b/reference/ranges/iota_view.md
index 648ec7d82..b141915c8 100644
--- a/reference/ranges/iota_view.md
+++ b/reference/ranges/iota_view.md
@@ -34,19 +34,20 @@ namespace std {
 
 `iota_view`のオブジェクトは(2)のカスタマイゼーションポイントオブジェクト`views::iota`で生成できる。
 
-### 範囲カテゴリ
-
-有限長のとき:
-
-| borrowed | sized | output | input | forward | bidirectional | random_access | contiguous | common | viewable | view |
-|----------|-------|--------|-------|---------|---------------|---------------|------------|--------|----------|------|
-| ○       | ○    |        | ○    | ○      | ○            | ○            |            | ○     | ○       | ○   |
+`iota_view`の要素は、`iota_view`が作られる時に初めの要素が生成され、残りはアクセスするときに生成される。
 
-無限長のとき:
+### 範囲カテゴリ
 
 | borrowed | sized | output | input | forward | bidirectional | random_access | contiguous | common | viewable | view |
 |----------|-------|--------|-------|---------|---------------|---------------|------------|--------|----------|------|
-| ○       |       |        | ○    | ○      | ○            | ○            |            |        | ○       | ○   |
+| ○       | (1)   |        | ○    | (2)     | (2)           | (2)           |            | (3)    | ○       | ○   |
+
+- (1): [`common_range`](common_range.md)かつ[`random_access_range`](random_access_range.md)のとき
+- (2):
+    - `W`が[`incrementable`](/reference/iterator/incrementable.md)のとき、[`forward_range`](forward_range.md)
+    - `W`が[`incrementable`](/reference/iterator/incrementable.md)かつデクリメント操作が可能であるとき、[`bidirectional_range`](bidirectional_range.md)
+    - `W`が[`incrementable`](/reference/iterator/incrementable.md)かつデクリメント操作と加減算が可能であるとき、[`random_access_range`](random_access_range.md)
+- (3): `W`と`Bound`が等しいとき
 
 ## テンプレートパラメータ制約
 - [`weakly_incrementable`](/reference/type_traits/is_object.md)`&amp;lt;W&amp;gt;`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ref_view -- 不可視文字を削除</title>
      <link href="https://cpprefjp.github.io/reference/ranges/ref_view.html"/>
      <id>31873f9afb2760b1ac5be9f6b9a9a0a1088b37c9:reference/ranges/ref_view.md</id>
      <updated>2021-09-09T04:27:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/ref_view.md b/reference/ranges/ref_view.md
index 90d23c222..42fb6c013 100644
--- a/reference/ranges/ref_view.md
+++ b/reference/ranges/ref_view.md
@@ -50,9 +50,9 @@ namespace std {
 
 ## 効果
 
-- (2): 式`views​::​all(E)`の効果は次の通り
+- (2): 式`views::all(E)`の効果は次の通り
     - `E`の[`decay`](/reference/type_traits/decay.md)した型が[`view`](view.md)のモデルであれば、[`decay-copy`](/reference/exposition-only/decay-copy.md)`(E)`と等しい
-    - それ以外のとき、`ref_­view{E}`が有効な式であれば、`ref_­view{E}`と等しい
+    - それ以外のとき、`ref_view{E}`が有効な式であれば、`ref_view{E}`と等しい
     - それ以外のとき、[`subrange`](subrange.md)`{E}`と等しい
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges -- &lt;ranges&gt; ref_viewを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges.html"/>
      <id>f2d47eac4b68d18e0098ee84a8ea5e783a648edd:reference/ranges.md</id>
      <updated>2021-09-09T04:20:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges.md b/reference/ranges.md
index fedf6ade0..b4908527d 100644
--- a/reference/ranges.md
+++ b/reference/ranges.md
@@ -90,6 +90,9 @@ C++20では関数によるカスタマイゼーションポイントの問題点
 
 ## 範囲ファクトリ
 
+範囲ファクトリは、範囲ではないオブジェクトから[`view`](ranges/view.md)を生成するものである。
+その実体は、引数の無いものは変数テンプレート、引数のあるものは関数テンプレートやカスタマイゼーションポイントオブジェクトとなっている。
+
 ### empty view
 
 | 名前                                 | 説明                                       | 対応バージョン |
@@ -120,13 +123,40 @@ C++20では関数によるカスタマイゼーションポイントの問題点
 
 ## 範囲アダプタ
 
+範囲アダプタは、既存の範囲に作用して新たな[`view`](ranges/view.md)を生成するものである。
+その実体は、引数の無いものは変数テンプレート、引数のあるものは関数テンプレートやカスタマイゼーションポイントオブジェクトとなっている。
+
+範囲アダプタを範囲に作用させる方法には、関数記法とパイプライン記法の2つがある。
+
+`R`を範囲アダプタ、`r`を元になる範囲とする。このとき、以下の2つの式は同じ[`view`](ranges/view.md)を生成する。
+
+```cpp
+R(r)   // 関数記法
+r | R  // パイプライン記法
+```
+
+範囲アダプタを適用した結果は[`view`](ranges/view.md)、すなわち範囲であることから、範囲アダプタを次々と繋いでいくことができる。
+
+```cpp
+R1(R2(R3(r)))     // 関数記法
+r | R1 | R2 | R3  // パイプライン記法
+```
+
+範囲アダプタの処理は遅延評価され、要素は必要になるまで生成されない。このような仕組みは実際の仕事の多くをイテレータが担うことで実現している。
+
+```cpp
+for (auto&amp;amp;&amp;amp; item : r | R) {
+  // ループ一回ごとに、(r | R)の要素を1つ生成する。このとき、rの要素を必要なだけ取得する。
+}
+```
+
 ### all view
 
-| 名前                                    | 説明           | 対応バージョン |
-|-----------------------------------------|----------------|----------------|
-| [`ref_view`](ranges/ref_view.md.nolink) | 範囲への参照として振る舞うビュー (class template)     | C++20          |
-| [`all`](ranges/all.md.nolink)           | 範囲への参照として振る舞うビューを生成する (customization point object) | C++20          |
-| [`all_t`](ranges/all_t.md.nolink)       | `all`の戻り値型 (alias template)     | C++20          |
+| 名前                             | 説明                                                                    | 対応バージョン |
+|----------------------------------|-------------------------------------------------------------------------|----------------|
+| [`ref_view`](ranges/ref_view.md) | 範囲への参照として振る舞うビュー (class template)                       | C++20          |
+| [`all`](ranges/ref_view.md)      | 範囲への参照として振る舞うビューを生成する (customization point object) | C++20          |
+| [`all_t`](ranges/ref_view.md)    | `all`の戻り値型 (alias template)                                        | C++20          |
 
 ### filter view
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ref_view -- &lt;ranges&gt; ref_viewを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/ref_view.html"/>
      <id>f2d47eac4b68d18e0098ee84a8ea5e783a648edd:reference/ranges/ref_view.md</id>
      <updated>2021-09-09T04:20:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/ref_view.md b/reference/ranges/ref_view.md
new file mode 100644
index 000000000..90d23c222
--- /dev/null
+++ b/reference/ranges/ref_view.md
@@ -0,0 +1,119 @@
+# ref_view
+* ranges[meta header]
+* std::ranges[meta namespace]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  namespace ranges {
+    template&amp;lt;range R&amp;gt;
+    requires is_object_v&amp;lt;R&amp;gt;
+    class ref_view : public view_interface&amp;lt;ref_view&amp;lt;R&amp;gt;&amp;gt; { …… }; // (1)
+
+    namespace views {
+      inline constexpr /*unspecified*/ all = /*unspecified*/;     // (2)
+
+      template&amp;lt;viewable_range R&amp;gt;
+      using all_t = decltype(all(declval&amp;lt;R&amp;gt;()));                  // (3)
+    }
+  }
+
+  namespace views = ranges::views;
+}
+```
+* movable[link /reference/concepts/movable.md]
+* default_initializable[link /reference/concepts/default_initializable.md]
+* viewable_range[link viewable_range.md]
+* view_interface[link view_interface.md]
+* stream-extractable[italic]
+
+## 概要
+`ref_view`(1)は、範囲への参照として振る舞う[`view`](view.md)。
+
+カスタマイゼーションポイントオブジェクト`all`(2)で、範囲への参照として振る舞う[`view`](view.md)を生成できる。
+
+`all`の戻り値は`ref_view`とは限らず、元の範囲そのものや[`subrange`](subrange.md)にもなる。戻り値型はエイリアステンプレート`all_t`(3)で取得できる。これらをまとめて&amp;#34;all view&amp;#34;と呼ぶことがある。
+
+### 範囲カテゴリ
+
+| borrowed | sized | output | input | forward | bidirectional | random_access | contiguous | common | viewable | view |
+|----------|-------|--------|-------|---------|---------------|---------------|------------|--------|----------|------|
+| ○       | ※    | ※     | ※    | ※      | ※            | ※            | ※         | ※     | ○       | ○   |
+
+※ 参照先の範囲に従う
+
+## テンプレートパラメータ制約
+
+- [`range`](range.md)`&amp;lt;R&amp;gt;`
+- [`is_object_v`](/reference/type_traits/is_object.md)`&amp;lt;R&amp;gt;`
+
+## 効果
+
+- (2): 式`views​::​all(E)`の効果は次の通り
+    - `E`の[`decay`](/reference/type_traits/decay.md)した型が[`view`](view.md)のモデルであれば、[`decay-copy`](/reference/exposition-only/decay-copy.md)`(E)`と等しい
+    - それ以外のとき、`ref_­view{E}`が有効な式であれば、`ref_­view{E}`と等しい
+    - それ以外のとき、[`subrange`](subrange.md)`{E}`と等しい
+
+## メンバ関数
+
+| 名前                                             | 説明                             | 対応バージョン |
+|--------------------------------------------------|----------------------------------|----------------|
+| [`(constructor)`](ref_view/op_constructor.md.nolink)  | コンストラクタ                   | C++20          |
+| [`base`](ref_view/base.md.nolink)                     | `R`の参照を取得する              | C++20          |
+| [`begin`](ref_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
+| [`end`](ref_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
+| [`empty`](ref_view/empty.md.nolink)                   | 範囲が空かどうかを判定する       | C++20          |
+| [`size`](ref_view/size.md.nolink)                     | 要素数を取得する                 | C++20          |
+| [`data`](ref_view/data.md.nolink)                     | 範囲の先頭へのポインタを取得する | C++20          |
+
+`r`を参照先の範囲とする。`empty`、`size`、`data`は、それぞれ[`ranges::empty`](empty.md)`(r)`、[`ranges::size`](size.md)`(r)`、[`ranges::data`](data.md)`(r)`が有効な式であるときに定義される。
+
+## 継承しているメンバ関数
+
+| 名前                                         | 説明                             | 対応バージョン |
+|----------------------------------------------|----------------------------------|----------------|
+| [`operator bool`](view_interface/op_bool.md) | 範囲が空でないかどうかを判定する | C++20          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する       | C++20          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する       | C++20          |
+| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする               | C++20          |
+
+## 推論補助
+
+| 名前                                                  | 説明                         | 対応バージョン |
+|-------------------------------------------------------|------------------------------|----------------|
+| [`(deduction_guide)`](ref_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+
+int main() {
+  using namespace std;
+  int a[] = {1, 2, 3, 4, 5};
+
+  for (int i : a | views::all) {
+    cout &amp;lt;&amp;lt; i;
+  }
+}
+```
+* views::all[color ff0000]
+
+### 出力
+```
+12345
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-12-16T14:45:01.790724</updated>
  <id>de4cf1ad-632f-4237-b8cd-eeccfcbdb8db</id>

  
    <entry>
      <title>属性構文 [N2761] -- C++11 属性構文 : indeterminate属性の解説ページにリンク</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/attributes.html"/>
      <id>b956b7708095b80da1c364a4d68cc66d65bde231:lang/cpp11/attributes.md</id>
      <updated>2024-12-16T16:36:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/attributes.md b/lang/cpp11/attributes.md
index 1a15b8ba0..b48a93794 100644
--- a/lang/cpp11/attributes.md
+++ b/lang/cpp11/attributes.md
@@ -170,6 +170,7 @@ C++11で採用されたもの以外で検討された以下の機能は、属性
 - [C++20 属性の名前空間を予約](/lang/cpp20/reserving_attribute_namespaces_for_future_use.md)
 - [C++23 ラムダ式に対する属性](/lang/cpp23/attributes_on_lambda_expressions.md)
 - [C++26 構造化束縛への属性を許可](/lang/cpp26/attributes_for_structured_bindings.md)
+- [C++26 未初期化変数の読み取りをエラー性動作とする (`[[indeterminate]]`属性)](/lang/cpp26/erroneous_behavior_for_uninitialized_reads.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>未初期化変数の読み取りをエラー性動作とする [P2795R5] -- C++11 属性構文 : indeterminate属性の解説ページにリンク</title>
      <link href="https://cpprefjp.github.io/lang/cpp26/erroneous_behavior_for_uninitialized_reads.html"/>
      <id>b956b7708095b80da1c364a4d68cc66d65bde231:lang/cpp26/erroneous_behavior_for_uninitialized_reads.md</id>
      <updated>2024-12-16T16:36:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp26/erroneous_behavior_for_uninitialized_reads.md b/lang/cpp26/erroneous_behavior_for_uninitialized_reads.md
index 79b80c7ac..4f118a77d 100644
--- a/lang/cpp26/erroneous_behavior_for_uninitialized_reads.md
+++ b/lang/cpp26/erroneous_behavior_for_uninitialized_reads.md
@@ -137,5 +137,8 @@ int main() {
 | 契約違反 | 契約に関する現在の策定作業では、契約違反時になにが起こるべきかという問題に直面している。エラー性動作という概念は有用な回答を与えてくれる可能性がある |
 
 
+## 関連項目
+- [C++11 属性構文](/lang/cpp11/attributes.md)
+
 ## 参照
 - [P2795R5 Erroneous behaviour for uninitialized reads](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2795r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>jthread -- jthread: コード修飾ミスを修正</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread.html"/>
      <id>073c4bc6ac4734a56d512f81872f87fa12538db3:reference/thread/jthread.md</id>
      <updated>2024-12-16T10:59:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread.md b/reference/thread/jthread.md
index 9ba75dc41..bd9afa005 100644
--- a/reference/thread/jthread.md
+++ b/reference/thread/jthread.md
@@ -114,7 +114,7 @@ int main()
 ```
 * std::uint64_t[link /reference/cstdint/uint64_t.md]
 * std::stop_token[link /reference/stop_token/stop_token.md]
-* token.stop_requested()[link /reference/stop_token/stop_token/stop_requested.md]
+* stoken.stop_requested()[link /reference/stop_token/stop_token/stop_requested.md]
 * std::this_thread::sleep_for[link /reference/thread/this_thread/sleep_for.md]
 * t1.request_stop()[link jthread/request_stop.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- jthread: コード修飾ミスを修正</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/op_constructor.html"/>
      <id>073c4bc6ac4734a56d512f81872f87fa12538db3:reference/thread/jthread/op_constructor.md</id>
      <updated>2024-12-16T10:59:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/op_constructor.md b/reference/thread/jthread/op_constructor.md
index d6d6cee7a..f8f6b19ef 100644
--- a/reference/thread/jthread/op_constructor.md
+++ b/reference/thread/jthread/op_constructor.md
@@ -145,7 +145,7 @@ int main()
 ```
 * std::uint64_t[link /reference/cstdint/uint64_t.md]
 * std::stop_token[link /reference/stop_token/stop_token.md]
-* token.stop_requested()[link /reference/stop_token/stop_token/stop_requested.md]
+* stoken.stop_requested()[link /reference/stop_token/stop_token/stop_requested.md]
 * std::this_thread::sleep_for[link /reference/thread/this_thread/sleep_for.md]
 * t1.request_stop()[link request_stop.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- jthread::コンストラクタ : 表示崩れを修正</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/op_constructor.html"/>
      <id>8cf3afda9d84d4b11909769986c644ae3095976c:reference/thread/jthread/op_constructor.md</id>
      <updated>2024-12-16T10:51:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/op_constructor.md b/reference/thread/jthread/op_constructor.md
index e56789e7a..d6d6cee7a 100644
--- a/reference/thread/jthread/op_constructor.md
+++ b/reference/thread/jthread/op_constructor.md
@@ -60,14 +60,11 @@ jthread(jthread&amp;amp;&amp;amp;) noexcept;             // (4) C++20
         * std::forward[link /reference/utility/forward.md]
 
     - この呼び出しでの戻り値は無視される。この関数呼び出しが例外を送出する場合、呼び出し元スレッドで[`std::terminate`](/reference/exception/terminate.md)が呼び出される
-- (3) :
 
 
 ## 同期
 - (2) : コンストラクタ呼び出しの完了は、`f`のコピーの呼び出し開始と同期する
-
-
-新しいスレッドを生成し、[`INVOKE`](/reference/concepts/Invoke.md)`(DECAY_COPY(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f)), DECAY_COPY(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args))...)`を実行する。ただし`DECAY_COPY`は同コンストラクタを呼び出したスレッド上にて評価される。また`f`のコピーの戻り値は無視される。
+    新しいスレッドを生成し、[`INVOKE`](/reference/concepts/Invoke.md)`(DECAY_COPY(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f)), DECAY_COPY(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args))...)`を実行する。ただし`DECAY_COPY`は同コンストラクタを呼び出したスレッド上にて評価される。また`f`のコピーの戻り値は無視される。
     - `DECAY_COPY(x)`は `template &amp;lt;class T&amp;gt; typename std::decay&amp;lt;T&amp;gt;::type decay_copy(T&amp;amp;&amp;amp; v) { return` [`std::forward`](/reference/utility/forward.md)`&amp;lt;T&amp;gt;(v); }` と定義される。おおよそ、`x`が配列型なら先頭要素へのポインタ、`x`が関数型ならその関数ポインタ、`x`がコピーコンストラクト可能な型なら`x`からコピーされたオブジェクト、`x`がムーブコンストラクト可能な型なら`x`からムーブされたオブジェクトとなる。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cpprefjpでのMarkdown記法の制限と拡張 -- Markdown拡張: 「箇条書きの前に空行が必要」「コードブロックのあとに空行が必要」の制限がなくなったので削除 #1362</title>
      <link href="https://cpprefjp.github.io/start_editing/markdown_cpprefjp.html"/>
      <id>46badd13c71e5da942317b3d1a14baf3ba843f0c:start_editing/markdown_cpprefjp.md</id>
      <updated>2024-12-16T10:47:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/markdown_cpprefjp.md b/start_editing/markdown_cpprefjp.md
index ea8d3cb62..469aa5c78 100644
--- a/start_editing/markdown_cpprefjp.md
+++ b/start_editing/markdown_cpprefjp.md
@@ -65,32 +65,6 @@ comment out text...
 ```
 
 
-### リストの前に空行が必要な制限
-```
-適当な文字列
-* リスト
-* リスト2
-```
-
-このような書き方をすると、cpprefjpでは以下の様な表示になります。
-
-```
-適当な文字列 * リスト * リスト2
-```
-
-通常の文字列に続いてリストを置く場合、空行を入れる必要があります。
-
-```
-適当な文字列
-
-* リスト
-* リスト2
-```
-
-### コードブロックのあとに空行が必要な制限
-後述する「プログラムの修飾に関する拡張」に関連して、コードブロックのあとに説明文章を書く際には空行をあけなければなりません。
-
-
 ## Markdown記法の拡張
 
 Markdownだけだと表現力が足りないため、cpprefjpでは構文を拡張しています。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iterator_traits -- リンク: 定義の説明に用いられているコードにリンクを追加</title>
      <link href="https://cpprefjp.github.io/reference/iterator/iterator_traits.html"/>
      <id>45569a7e59814e9353063a3c5699d64a25992534:reference/iterator/iterator_traits.md</id>
      <updated>2024-12-16T02:43:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/iterator_traits.md b/reference/iterator/iterator_traits.md
index c5c314468..393499fff 100644
--- a/reference/iterator/iterator_traits.md
+++ b/reference/iterator/iterator_traits.md
@@ -119,6 +119,7 @@ namespace std {
     using reference = typename I::reference;
     using reference = iter_reference_t&amp;lt;I&amp;gt;;
     ```
+    * iter_reference_t[link /reference/iterator/iter_reference_t.md]
 
     - `iterator_category`は、上から順に次のいずれか
         - `I`が`cpp17-random-access-iterator`コンセプトを満たす場合、`random_access_iterator_tag`
@@ -135,6 +136,7 @@ namespace std {
     using reference         = void;
     using iterator_category = output_iterator_tag;
     ```
+    * incrementable_traits[link /reference/iterator/incrementable_traits.md]
 
     - この時、`incrementable_traits&amp;lt;I&amp;gt;::difference_type`が定義されない場合、`difference_type = void`
 
@@ -195,7 +197,16 @@ concept cpp17-random-access-iterator =
     {  i[n]  } -&amp;gt; convertible_to&amp;lt;iter_reference_t&amp;lt;I&amp;gt;&amp;gt;;
   };
 ```
-
+* copyable[link /reference/concepts/copyable.md]
+* can-reference[link /reference/iterator/dereferenceable.md]
+* incrementable_traits[link /reference/iterator/incrementable_traits.md]
+* indirectly_readable_traits[link /reference/iterator/indirectly_readable_traits.md]
+* iter_reference_t[link /reference/iterator/iter_reference_t.md]
+* signed_integral[link /reference/concepts/signed_integral.md]
+* constructible_from[link /reference/concepts/constructible_from.md]
+* is_lvalue_reference_v[link /reference/type_traits/is_lvalue_reference.md]
+* convertible_to[link /reference/concepts/convertible_to.md]
+* totally_ordered[link /reference/concepts/totally_ordered.md]
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>biobios</name>
        <email>biobios1024@gmail.com</email>
      </author>
    </entry>
  
</feed>
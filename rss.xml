<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-09-05T14:40:51.778516</updated>
  <id>42913903-73ea-456f-8378-f5e992361974</id>

  
    <entry>
      <title>monotonic_buffer_resource -- 誤植を訂正</title>
      <link href="https://cpprefjp.github.io/reference/memory_resource/monotonic_buffer_resource.html"/>
      <id>54bc5579a332978cc5f87687f8e68560e070a6be:reference/memory_resource/monotonic_buffer_resource.md</id>
      <updated>2024-09-05T22:04:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory_resource/monotonic_buffer_resource.md b/reference/memory_resource/monotonic_buffer_resource.md
index 5b0347624..ad7684948 100644
--- a/reference/memory_resource/monotonic_buffer_resource.md
+++ b/reference/memory_resource/monotonic_buffer_resource.md
@@ -12,8 +12,8 @@ namespace std::pmr {
 
 
 ## 概要
-`monotonic_buffer_resource`はオブジェクトの破棄時にのみ管理しているメモリを全て開放する特殊な [`memory_resource`](memory_resource.md)実装である。  
-小さなオブジェクトを多数構築するために割り当てを行い、最後にまとめて開放するといった状況において高速なメモリ割り当てを行うことを目的としている。
+`monotonic_buffer_resource`はオブジェクトの破棄時にのみ管理しているメモリを全て解放する特殊な [`memory_resource`](memory_resource.md)実装である。
+小さなオブジェクトを多数構築するために割り当てを行い、最後にまとめて解放するといった状況において高速なメモリ割り当てを行うことを目的としている。
 
 このクラスはスレッドセーフではない。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping/op_constructor.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_left/mapping/op_constructor.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping/op_constructor.md b/reference/mdspan/layout_left/mapping/op_constructor.md
index 14a9af04a..84170e7f5 100644
--- a/reference/mdspan/layout_left/mapping/op_constructor.md
+++ b/reference/mdspan/layout_left/mapping/op_constructor.md
@@ -71,7 +71,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
     - `other.`[`required_span_size()`](../../layout_stride/mapping/required_span_size.md)を、`index_type`型で表現できること。
 - (7) :
     - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 1`のとき、`other.stride(1) == other.extents(0)`
-    - `other.`[`required_span_size()`](../../layout_left_padded/mapping/required_span_size.md.nolink)を、`index_type`型で表現できること。
+    - `other.`[`required_span_size()`](../../layout_left_padded/mapping/required_span_size.md)を、`index_type`型で表現できること。
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mapping -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded/mapping.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_left_padded/mapping.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded/mapping.md b/reference/mdspan/layout_left_padded/mapping.md
index 7b80516ca..d78a0ac3b 100644
--- a/reference/mdspan/layout_left_padded/mapping.md
+++ b/reference/mdspan/layout_left_padded/mapping.md
@@ -70,11 +70,11 @@ namespace std {
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
 | `extents` | 多次元配列のサイズ`extents_`を取得する | C++26 |
-| [`strides`](mapping/strides.md.nolink) | ストライド幅配列を取得する | C++26 |
-| [`required_span_size`](mapping/required_span_size.md.nolink) | 要素アクセス範囲を取得する | C++26 |
-| [`operator()`](mapping/op_call.md.nolink) | 多次元配列インデクスから要素位置へ変換する | C++26 |
-| [`is_exhaustive`](mapping/is_exhaustive.md.nolink) | [Exhaustive特性](../LayoutMapping.md)を取得する | C++26 |
-| [`stride`](mapping/stride.md.nolink) | 指定次元のストライド幅を取得する | C++26 |
+| [`strides`](mapping/strides.md) | ストライド幅配列を取得する | C++26 |
+| [`required_span_size`](mapping/required_span_size.md) | 要素アクセス範囲を取得する | C++26 |
+| [`operator()`](mapping/op_call.md) | 多次元配列インデクスから要素位置へ変換する | C++26 |
+| [`is_exhaustive`](mapping/is_exhaustive.md) | [Exhaustive特性](../LayoutMapping.md)を取得する | C++26 |
+| [`stride`](mapping/stride.md) | 指定次元のストライド幅を取得する | C++26 |
 
 
 ## 静的メンバ関数
@@ -82,7 +82,7 @@ namespace std {
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
 | `is_always_unique`  | `true`を返す | C++26 |
-| [`is_always_exhaustive`](mapping/is_always_exhaustive.md.nolink) | 型の[Exhaustive特性](../LayoutMapping.md)を取得する | C++26 |
+| [`is_always_exhaustive`](mapping/is_always_exhaustive.md) | 型の[Exhaustive特性](../LayoutMapping.md)を取得する | C++26 |
 | `is_always_strided` | `true`を返す | C++26 |
 | `is_unique`  | `true`を返す | C++26 |
 | `is_strided` | `true`を返す | C++26 |
@@ -109,8 +109,8 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`operator==`](mapping/op_equal.md.nolink) | 等値比較 | C++26 |
-| [`operator!=`](mapping/op_equal.md.nolink) | 非等値比較 (`==`により使用可能) | C++26 |
+| [`operator==`](mapping/op_equal.md) | 等値比較 | C++26 |
+| [`operator!=`](mapping/op_equal.md) | 非等値比較 (`==`により使用可能) | C++26 |
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_always_exhaustive -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded/mapping/is_always_exhaustive.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_left_padded/mapping/is_always_exhaustive.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded/mapping/is_always_exhaustive.md b/reference/mdspan/layout_left_padded/mapping/is_always_exhaustive.md
new file mode 100644
index 000000000..79aeaa5f6
--- /dev/null
+++ b/reference/mdspan/layout_left_padded/mapping/is_always_exhaustive.md
@@ -0,0 +1,38 @@
+# is_always_exhaustive
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_left_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+static constexpr bool is_always_exhaustive() noexcept;
+```
+
+## 概要
+型の[Exhaustive特性](../../LayoutMapping.md)を取得する。
+
+
+## 戻り値
+- `rank_`が`0`または`1`のとき、`true`を返す。
+- `static-padding-stride`または`first-static-extent`のいずれも[`dynamic_extent`](/reference/span/dynamic_extent.md)に等しくないとき、`static-padding-stride == first-static-extent`を返す。
+- そうではないとき、`false`を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_exhaustive -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded/mapping/is_exhaustive.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_left_padded/mapping/is_exhaustive.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded/mapping/is_exhaustive.md b/reference/mdspan/layout_left_padded/mapping/is_exhaustive.md
new file mode 100644
index 000000000..36ff30231
--- /dev/null
+++ b/reference/mdspan/layout_left_padded/mapping/is_exhaustive.md
@@ -0,0 +1,36 @@
+# is_exhaustive
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_left_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+constexpr bool is_exhaustive() const noexcept;
+```
+
+## 概要
+レイアウトマッピングの[Exhaustive特性](../../LayoutMapping.md)を取得する。
+
+## 戻り値
+- `rank_`が`0`または`1`のとき、`true`を返す。
+- そうではないとき、`extents_.extent(0) == stride(1)`を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded/mapping/op_call.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_left_padded/mapping/op_call.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded/mapping/op_call.md b/reference/mdspan/layout_left_padded/mapping/op_call.md
new file mode 100644
index 000000000..a0561eeb1
--- /dev/null
+++ b/reference/mdspan/layout_left_padded/mapping/op_call.md
@@ -0,0 +1,50 @@
+# operator()
+* mdspan[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* layout_left_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class... Indices&amp;gt;
+constexpr size_t operator()(Indices... idxs) const noexcept;
+```
+
+## 概要
+多次元インデクス値`idxs...`に対応する要素位置を求める。
+
+
+## テンプレートパラメータ制約
+- `sizeof...(Indices) == rank_`が`true`、かつ
+- `(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;Indices, index_type&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
+- `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, Indices&amp;gt; &amp;amp;&amp;amp; ...)`が`true`であること。
+
+
+## 事前条件
+多次元インデクス値[`extents_type::index-cast`](../../extents/index-cast.md)`(idxs)`は、多次元配列サイズ`extents_`における有効なインデクスであること。
+
+
+## 戻り値
+```cpp
+return ((static_cast&amp;lt;index_type&amp;gt;(idxs) * stride(P_rank)) + ... + 0);
+```
+* stride[link stride.md]
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded/mapping/op_equal.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_left_padded/mapping/op_equal.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded/mapping/op_equal.md b/reference/mdspan/layout_left_padded/mapping/op_equal.md
new file mode 100644
index 000000000..734a10cd1
--- /dev/null
+++ b/reference/mdspan/layout_left_padded/mapping/op_equal.md
@@ -0,0 +1,49 @@
+# operator==
+* mdspan[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* layout_left_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class LayoutLeftPaddedMapping&amp;gt;
+friend constexpr bool operator==(
+  const mapping&amp;amp; x, const LayoutLeftPaddedMapping&amp;amp; y) noexcept;
+
+//operator==により、以下のオーバーロードが使用可能になる        
+template&amp;lt;class LayoutLeftPaddedMapping&amp;gt;
+friend constexpr bool operator!=(
+  const mapping&amp;amp; x, const LayoutLeftPaddedMapping&amp;amp; y) noexcept;
+```
+
+## 概要
+`mapping`の等値比較を行う。
+
+
+## テンプレートパラメータ制約
+- [`is-layout-left-padded-mapping-of`](../../is-layout-left-padded-mapping-of.md)`&amp;lt;LayoutLeftPaddedMapping&amp;gt;`
+- `LayoutLeftPaddedMapping::extents_type::`[`rank()`](../../extents/rank.md) `== rank_`
+
+
+## 戻り値
+- [`x.extents() == y.extents()`](../../extents/op_equal.md)かつ`rank_ &amp;lt; 2 || x.`[`stride`](stride.md)`(1) == y.stride(1)`のとき、`true`を返す。
+- そうでなければ、`false`を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>required_span_size -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded/mapping/required_span_size.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_left_padded/mapping/required_span_size.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded/mapping/required_span_size.md b/reference/mdspan/layout_left_padded/mapping/required_span_size.md
new file mode 100644
index 000000000..4499cc0af
--- /dev/null
+++ b/reference/mdspan/layout_left_padded/mapping/required_span_size.md
@@ -0,0 +1,37 @@
+# required_span_size
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_left_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+constexpr index_type required_span_size() const noexcept;
+```
+
+## 概要
+メモリブロックに対する要素アクセス範囲を取得する。
+
+
+## 戻り値
+- 多次元インデクス空間`extents_`のサイズが0のとき、値`0`を返す。
+- そうではないとき、`*this(((extents_(P_rank) - index_type(1))...)) + 1`を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stride -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded/mapping/stride.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_left_padded/mapping/stride.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded/mapping/stride.md b/reference/mdspan/layout_left_padded/mapping/stride.md
new file mode 100644
index 000000000..b798eaab3
--- /dev/null
+++ b/reference/mdspan/layout_left_padded/mapping/stride.md
@@ -0,0 +1,46 @@
+# stride
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_left_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+constexpr index_type stride(rank_type r) const noexcept;
+```
+
+## 概要
+`r`番目次元のストライド幅を取得する。
+
+
+## 事前条件
+`r &amp;lt; rank_`
+
+
+## 戻り値
+- `r == 0`のとき、値`1`を返す。
+- `r == 1`のとき、値`stride-1`を返す。
+- そうでなければ、半開区間`[1, r)`の全ての値`k`に対して値`stride-1`と全ての`extents_.extent(k)`を乗算した値を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`strides`](strides.md)
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>strides -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded/mapping/strides.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_left_padded/mapping/strides.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded/mapping/strides.md b/reference/mdspan/layout_left_padded/mapping/strides.md
new file mode 100644
index 000000000..0fd7389f9
--- /dev/null
+++ b/reference/mdspan/layout_left_padded/mapping/strides.md
@@ -0,0 +1,41 @@
+# strides
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_left_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+constexpr array&amp;lt;index_type, rank_&amp;gt; strides() const noexcept;
+```
+* array[link /reference/array/array.md]
+
+## 概要
+ストライド幅配列を取得する。
+
+
+## 戻り値
+[`array`](/reference/array/array.md)`&amp;lt;index_type, rank_&amp;gt;({`[`stride`](stride.md)`(P_rank)...})`
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`stride`](stride.md)
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>submdspan_mapping -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded/mapping/submdspan_mapping.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_left_padded/mapping/submdspan_mapping.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded/mapping/submdspan_mapping.md b/reference/mdspan/layout_left_padded/mapping/submdspan_mapping.md
index 699123482..39da81837 100644
--- a/reference/mdspan/layout_left_padded/mapping/submdspan_mapping.md
+++ b/reference/mdspan/layout_left_padded/mapping/submdspan_mapping.md
@@ -54,10 +54,10 @@ friend constexpr auto submdspan_mapping(
 - 値`sub_ext` : 式[`submdspan_extents`](../../submdspan_extents.md)`(extents(), slices...)`の結果
 - 型`SubExtents` : `decltype(sub_ext)`
 - 値`sub_strides` : `extents()`の各次元インデクス`k`において、[`map-rank[k]`](../../submdspan_extents.md)が[`dynamic_extent`](/reference/span/dynamic_extent.md)ではない`k`に対し`sub_strides[map-rank[k]]`が下記を満たす、[`array`](/reference/array/array.md)`&amp;lt;SubExtents::index_type,` [`SubExtents::rank()`](../../extents/rank.md)`&amp;gt;`型の配列値
-    - 型`S_k`が[`strided_slice`](../../strided_slice.md)の特殊化かつ`s_k.stride &amp;lt; s_k.extent`の場合、[`stride(k)`](stride.md.nolink) `*` [`de-ice`](../../de-ice.md)`(s_k.stride)`
-    - そうでなければ、[`stride(k)`](stride.md.nolink)
+    - 型`S_k`が[`strided_slice`](../../strided_slice.md)の特殊化かつ`s_k.stride &amp;lt; s_k.extent`の場合、[`stride(k)`](stride.md) `*` [`de-ice`](../../de-ice.md)`(s_k.stride)`
+    - そうでなければ、[`stride(k)`](stride.md)
 - パラメータパック`P` : [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`make_index_sequence`](/reference/utility/make_index_sequence.md)`&amp;lt;rank()&amp;gt;,` [`index_sequence`](/reference/utility/index_sequence.md)`&amp;lt;P...&amp;gt;&amp;gt; == true`
-- 値`offset` : `size_t`型の値[`(*this)`](op_call.md.nolink)`(`[`first_`](../../first_.md)`&amp;lt;index_type, P&amp;gt;(slices...)...)`
+- 値`offset` : `size_t`型の値[`(*this)`](op_call.md)`(`[`first_`](../../first_.md)`&amp;lt;index_type, P&amp;gt;(slices...)...)`
 
 説明専用の`submdspan-mapping-impl`関数テンプレートは下記の値を返す。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping/op_constructor.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_right/mapping/op_constructor.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping/op_constructor.md b/reference/mdspan/layout_right/mapping/op_constructor.md
index a26d29527..e11c6ff4d 100644
--- a/reference/mdspan/layout_right/mapping/op_constructor.md
+++ b/reference/mdspan/layout_right/mapping/op_constructor.md
@@ -71,7 +71,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
     - `other.`[`required_span_size()`](../../layout_stride/mapping/required_span_size.md)を、`index_type`型で表現できること。
 - (7) :
     - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 1`のとき、`other.stride(extents_type::rank() - 2) == other.extents().extent(extents_type::rank() - 1)`
-    - `other.`[`required_span_size()`](../../layout_right_padded/mapping/required_span_size.md.nolink)を、`index_type`型で表現できること。
+    - `other.`[`required_span_size()`](../../layout_right_padded/mapping/required_span_size.md)を、`index_type`型で表現できること。
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mapping -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded/mapping.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_right_padded/mapping.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded/mapping.md b/reference/mdspan/layout_right_padded/mapping.md
index 97528c06a..d71ae3215 100644
--- a/reference/mdspan/layout_right_padded/mapping.md
+++ b/reference/mdspan/layout_right_padded/mapping.md
@@ -70,11 +70,11 @@ namespace std {
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
 | `extents` | 多次元配列のサイズ`extents_`を取得する | C++26 |
-| [`strides`](mapping/strides.md.nolink) | ストライド幅配列を取得する | C++26 |
-| [`required_span_size`](mapping/required_span_size.md.nolink) | 要素アクセス範囲を取得する | C++26 |
-| [`operator()`](mapping/op_call.md.nolink) | 多次元配列インデクスから要素位置へ変換する | C++26 |
-| [`is_exhaustive`](mapping/is_exhaustive.md.nolink) | [Exhaustive特性](../LayoutMapping.md)を取得する | C++26 |
-| [`stride`](mapping/stride.md.nolink) | 指定次元のストライド幅を取得する | C++26 |
+| [`strides`](mapping/strides.md) | ストライド幅配列を取得する | C++26 |
+| [`required_span_size`](mapping/required_span_size.md) | 要素アクセス範囲を取得する | C++26 |
+| [`operator()`](mapping/op_call.md) | 多次元配列インデクスから要素位置へ変換する | C++26 |
+| [`is_exhaustive`](mapping/is_exhaustive.md) | [Exhaustive特性](../LayoutMapping.md)を取得する | C++26 |
+| [`stride`](mapping/stride.md) | 指定次元のストライド幅を取得する | C++26 |
 
 
 ## 静的メンバ関数
@@ -82,7 +82,7 @@ namespace std {
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
 | `is_always_unique`  | `true`を返す | C++26 |
-| [`is_always_exhaustive`](mapping/is_always_exhaustive.md.nolink) | 型の[Exhaustive特性](../LayoutMapping.md)を取得する | C++26 |
+| [`is_always_exhaustive`](mapping/is_always_exhaustive.md) | 型の[Exhaustive特性](../LayoutMapping.md)を取得する | C++26 |
 | `is_always_strided` | `true`を返す | C++26 |
 | `is_unique`  | `true`を返す | C++26 |
 | `is_strided` | `true`を返す | C++26 |
@@ -109,8 +109,8 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`operator==`](mapping/op_equal.md.nolink) | 等値比較 | C++26 |
-| [`operator!=`](mapping/op_equal.md.nolink) | 非等値比較 (`==`により使用可能) | C++26 |
+| [`operator==`](mapping/op_equal.md) | 等値比較 | C++26 |
+| [`operator!=`](mapping/op_equal.md) | 非等値比較 (`==`により使用可能) | C++26 |
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_always_exhaustive -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded/mapping/is_always_exhaustive.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_right_padded/mapping/is_always_exhaustive.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded/mapping/is_always_exhaustive.md b/reference/mdspan/layout_right_padded/mapping/is_always_exhaustive.md
new file mode 100644
index 000000000..41c5aaebc
--- /dev/null
+++ b/reference/mdspan/layout_right_padded/mapping/is_always_exhaustive.md
@@ -0,0 +1,38 @@
+# is_always_exhaustive
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_right_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+static constexpr bool is_always_exhaustive() noexcept;
+```
+
+## 概要
+型の[Exhaustive特性](../../LayoutMapping.md)を取得する。
+
+
+## 戻り値
+- `rank_`が`0`または`1`のとき、`true`を返す。
+- `static-padding-stride`または`last-static-extent`のいずれも[`dynamic_extent`](/reference/span/dynamic_extent.md)に等しくないとき、`static-padding-stride == last-static-extent`を返す。
+- そうではないとき、`false`を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_exhaustive -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded/mapping/is_exhaustive.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_right_padded/mapping/is_exhaustive.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded/mapping/is_exhaustive.md b/reference/mdspan/layout_right_padded/mapping/is_exhaustive.md
new file mode 100644
index 000000000..d507a7ca7
--- /dev/null
+++ b/reference/mdspan/layout_right_padded/mapping/is_exhaustive.md
@@ -0,0 +1,36 @@
+# is_exhaustive
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_right_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+constexpr bool is_exhaustive() const noexcept;
+```
+
+## 概要
+レイアウトマッピングの[Exhaustive特性](../../LayoutMapping.md)を取得する。
+
+## 戻り値
+- `rank_`が`0`または`1`のとき、`true`を返す。
+- そうではないとき、`extents_.extent(rank_ - 1) == stride(rank_ - 2)`を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded/mapping/op_call.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_right_padded/mapping/op_call.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded/mapping/op_call.md b/reference/mdspan/layout_right_padded/mapping/op_call.md
new file mode 100644
index 000000000..04a3416ea
--- /dev/null
+++ b/reference/mdspan/layout_right_padded/mapping/op_call.md
@@ -0,0 +1,50 @@
+# operator()
+* mdspan[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* layout_right_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class... Indices&amp;gt;
+constexpr size_t operator()(Indices... idxs) const noexcept;
+```
+
+## 概要
+多次元インデクス値`idxs...`に対応する要素位置を求める。
+
+
+## テンプレートパラメータ制約
+- `sizeof...(Indices) == rank_`が`true`、かつ
+- `(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;Indices, index_type&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
+- `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, Indices&amp;gt; &amp;amp;&amp;amp; ...)`が`true`であること。
+
+
+## 事前条件
+多次元インデクス値[`extents_type::index-cast`](../../extents/index-cast.md)`(idxs)`は、多次元配列サイズ`extents_`における有効なインデクスであること。
+
+
+## 戻り値
+```cpp
+return ((static_cast&amp;lt;index_type&amp;gt;(idxs) * stride(P_rank)) + ... + 0);
+```
+* stride[link stride.md]
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded/mapping/op_equal.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_right_padded/mapping/op_equal.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded/mapping/op_equal.md b/reference/mdspan/layout_right_padded/mapping/op_equal.md
new file mode 100644
index 000000000..c5e50bf42
--- /dev/null
+++ b/reference/mdspan/layout_right_padded/mapping/op_equal.md
@@ -0,0 +1,49 @@
+# operator==
+* mdspan[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* layout_right_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class LayoutRightPaddedMapping&amp;gt;
+friend constexpr bool operator==(
+  const mapping&amp;amp; x, const LayoutRightPaddedMapping&amp;amp; y) noexcept;
+
+//operator==により、以下のオーバーロードが使用可能になる        
+template&amp;lt;class LayoutRightPaddedMapping&amp;gt;
+friend constexpr bool operator!=(
+  const mapping&amp;amp; x, const LayoutRightPaddedMapping&amp;amp; y) noexcept;
+```
+
+## 概要
+`mapping`の等値比較を行う。
+
+
+## テンプレートパラメータ制約
+- [`is-layout-right-padded-mapping-of`](../../is-layout-right-padded-mapping-of.md)`&amp;lt;LayoutRightPaddedMapping&amp;gt;`
+- `LayoutRightPaddedMapping::extents_type::`[`rank()`](../../extents/rank.md) `== rank_`
+
+
+## 戻り値
+- [`x.extents() == y.extents()`](../../extents/op_equal.md)かつ`rank_ &amp;lt; 2 || x.`[`stride`](stride.md)`(rank_ - 2) == y.stride(rank_ - 1)`のとき、`true`を返す。
+- そうでなければ、`false`を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>required_span_size -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded/mapping/required_span_size.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_right_padded/mapping/required_span_size.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded/mapping/required_span_size.md b/reference/mdspan/layout_right_padded/mapping/required_span_size.md
new file mode 100644
index 000000000..13de5e5bf
--- /dev/null
+++ b/reference/mdspan/layout_right_padded/mapping/required_span_size.md
@@ -0,0 +1,37 @@
+# required_span_size
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_right_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+constexpr index_type required_span_size() const noexcept;
+```
+
+## 概要
+メモリブロックに対する要素アクセス範囲を取得する。
+
+
+## 戻り値
+- 多次元インデクス空間`extents_`のサイズが0のとき、値`0`を返す。
+- そうではないとき、`*this(((extents_(P_rank) - index_type(1))...)) + 1`を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stride -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded/mapping/stride.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_right_padded/mapping/stride.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded/mapping/stride.md b/reference/mdspan/layout_right_padded/mapping/stride.md
new file mode 100644
index 000000000..4cb1b8cb4
--- /dev/null
+++ b/reference/mdspan/layout_right_padded/mapping/stride.md
@@ -0,0 +1,46 @@
+# stride
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_right_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+constexpr index_type stride(rank_type r) const noexcept;
+```
+
+## 概要
+`r`番目次元のストライド幅を取得する。
+
+
+## 事前条件
+`r &amp;lt; rank_`
+
+
+## 戻り値
+- `r == rank_ - 1`のとき、値`1`を返す。
+- `r == rank_ - 2`のとき、値`stride-rm2`を返す。
+- そうでなければ、半開区間`[r + 1, rank_ - 1)`の全ての値`k`に対して値`stride-rm2`と全ての`extents_.extent(k)`を乗算した値を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`strides`](strides.md)
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>strides -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded/mapping/strides.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_right_padded/mapping/strides.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded/mapping/strides.md b/reference/mdspan/layout_right_padded/mapping/strides.md
new file mode 100644
index 000000000..d7a4192b5
--- /dev/null
+++ b/reference/mdspan/layout_right_padded/mapping/strides.md
@@ -0,0 +1,41 @@
+# strides
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_right_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+constexpr array&amp;lt;index_type, rank_&amp;gt; strides() const noexcept;
+```
+* array[link /reference/array/array.md]
+
+## 概要
+ストライド幅配列を取得する。
+
+
+## 戻り値
+[`array`](/reference/array/array.md)`&amp;lt;index_type, rank_&amp;gt;({`[`stride`](stride.md)`(P_rank)...})`
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`stride`](stride.md)
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>submdspan_mapping -- layout_*_padded/mapping: メンバ関数(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded/mapping/submdspan_mapping.html"/>
      <id>110d32855a2c2ee349d4f1b25903182da17ce2af:reference/mdspan/layout_right_padded/mapping/submdspan_mapping.md</id>
      <updated>2024-09-05T19:41:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded/mapping/submdspan_mapping.md b/reference/mdspan/layout_right_padded/mapping/submdspan_mapping.md
index 6d5a1beff..b53c0d1e4 100644
--- a/reference/mdspan/layout_right_padded/mapping/submdspan_mapping.md
+++ b/reference/mdspan/layout_right_padded/mapping/submdspan_mapping.md
@@ -54,10 +54,10 @@ friend constexpr auto submdspan_mapping(
 - 値`sub_ext` : 式[`submdspan_extents`](../../submdspan_extents.md)`(extents(), slices...)`の結果
 - 型`SubExtents` : `decltype(sub_ext)`
 - 値`sub_strides` : `extents()`の各次元インデクス`k`において、[`map-rank[k]`](../../submdspan_extents.md)が[`dynamic_extent`](/reference/span/dynamic_extent.md)ではない`k`に対し`sub_strides[map-rank[k]]`が下記を満たす、[`array`](/reference/array/array.md)`&amp;lt;SubExtents::index_type,` [`SubExtents::rank()`](../../extents/rank.md)`&amp;gt;`型の配列値
-    - 型`S_k`が[`strided_slice`](../../strided_slice.md)の特殊化かつ`s_k.stride &amp;lt; s_k.extent`の場合、[`stride(k)`](stride.md.nolink) `*` [`de-ice`](../../de-ice.md)`(s_k.stride)`
-    - そうでなければ、[`stride(k)`](stride.md.nolink)
+    - 型`S_k`が[`strided_slice`](../../strided_slice.md)の特殊化かつ`s_k.stride &amp;lt; s_k.extent`の場合、[`stride(k)`](stride.md) `*` [`de-ice`](../../de-ice.md)`(s_k.stride)`
+    - そうでなければ、[`stride(k)`](stride.md)
 - パラメータパック`P` : [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`make_index_sequence`](/reference/utility/make_index_sequence.md)`&amp;lt;rank()&amp;gt;,` [`index_sequence`](/reference/utility/index_sequence.md)`&amp;lt;P...&amp;gt;&amp;gt; == true`
-- 値`offset` : `size_t`型の値[`(*this)`](op_call.md.nolink)`(`[`first_`](../../first_.md)`&amp;lt;index_type, P&amp;gt;(slices...)...)`
+- 値`offset` : `size_t`型の値[`(*this)`](op_call.md)`(`[`first_`](../../first_.md)`&amp;lt;index_type, P&amp;gt;(slices...)...)`
 
 説明専用の`submdspan-mapping-impl`関数テンプレートは下記の値を返す。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>monotonic_buffer_resource -- 誤植を訂正</title>
      <link href="https://cpprefjp.github.io/reference/memory_resource/monotonic_buffer_resource.html"/>
      <id>00567b320c4021e984609c242307e6ff0e1bcbe7:reference/memory_resource/monotonic_buffer_resource.md</id>
      <updated>2024-09-05T19:37:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory_resource/monotonic_buffer_resource.md b/reference/memory_resource/monotonic_buffer_resource.md
index 281daea1d..5b0347624 100644
--- a/reference/memory_resource/monotonic_buffer_resource.md
+++ b/reference/memory_resource/monotonic_buffer_resource.md
@@ -13,7 +13,7 @@ namespace std::pmr {
 
 ## 概要
 `monotonic_buffer_resource`はオブジェクトの破棄時にのみ管理しているメモリを全て開放する特殊な [`memory_resource`](memory_resource.md)実装である。  
-少さなオブジェクトを多数構築するために割り当てを行い、最後にまとめて開放するといった状況において高速なメモリ割り当てを行うことを目的としている。
+小さなオブジェクトを多数構築するために割り当てを行い、最後にまとめて開放するといった状況において高速なメモリ割り当てを行うことを目的としている。
 
 このクラスはスレッドセーフではない。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator-- -- Filter view: 説明を微調整</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/iterator/op_decrement.html"/>
      <id>9c0072035c215430fa226e4830bd839015bd4c77:reference/ranges/filter_view/iterator/op_decrement.md</id>
      <updated>2024-09-01T18:49:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/iterator/op_decrement.md b/reference/ranges/filter_view/iterator/op_decrement.md
index c7405e6c7..79450e66d 100644
--- a/reference/ranges/filter_view/iterator/op_decrement.md
+++ b/reference/ranges/filter_view/iterator/op_decrement.md
@@ -34,6 +34,7 @@ auto tmp = *this;
 --*this;
 return tmp;
 ```
+
 と等しい。
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator++ -- Filter view: 説明を微調整</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/iterator/op_increment.html"/>
      <id>9c0072035c215430fa226e4830bd839015bd4c77:reference/ranges/filter_view/iterator/op_increment.md</id>
      <updated>2024-09-01T18:49:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/iterator/op_increment.md b/reference/ranges/filter_view/iterator/op_increment.md
index c217c2883..28de17ad0 100644
--- a/reference/ranges/filter_view/iterator/op_increment.md
+++ b/reference/ranges/filter_view/iterator/op_increment.md
@@ -40,6 +40,7 @@ auto tmp = *this;
 ++*this;
 return tmp;
 ```
+
 と等しい。
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges -- パイプライン記法を提供しないRangeアダプタについての説明を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges.html"/>
      <id>4480388968a9520f87470287392f1d31354c179b:reference/ranges.md</id>
      <updated>2024-08-31T01:58:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges.md b/reference/ranges.md
index c7e7f9234..5a824b4bf 100644
--- a/reference/ranges.md
+++ b/reference/ranges.md
@@ -217,7 +217,7 @@ range | adaptor(args...)
 
 このとき、式`adaptor(args...)`の値がRangeアダプタクロージャオブジェクトになっている。
 
-なお、
+なお、元となるRangeを複数とるRangeアダプタは、パイプライン記法を提供しない。
 
 | 名前                                                         | 説明                                                                | 対応バージョン |
 |--------------------------------------------------------------|---------------------------------------------------------------------|----------------|
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
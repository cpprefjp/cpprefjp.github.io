<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-12-13T13:58:10.182445</updated>
  <id>203c00d3-d8b8-4d68-8e00-4662a7c14645</id>

  
    <entry>
      <title>unique_ptr -- unique_ptr : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr.html"/>
      <id>57678971b5fdd014ed6ce5ac8148ca8ecfefd68f:reference/memory/unique_ptr.md</id>
      <updated>2022-12-13T22:52:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr.md b/reference/memory/unique_ptr.md
index ff994f1fa..9f1a4861c 100644
--- a/reference/memory/unique_ptr.md
+++ b/reference/memory/unique_ptr.md
@@ -70,9 +70,10 @@ namespace std {
 ## 非メンバ関数
 
 | 名前 | 説明 | 対応バージョン |
-|--------------------------------------------------|-------------------------------------------|-------|
+|------------------------------------------------|-------------------------------------------|-------|
 | [`operator==`](unique_ptr/op_equal.md)         | 等値比較                                  | C++11 |
 | [`operator!=`](unique_ptr/op_not_equal.md)     | 非等値比較                                | C++11 |
+| [`operator&amp;lt;=&amp;gt;`](unique_ptr/op_compare_3way.md) | 三方比較                                  | C++20 |
 | [`operator&amp;lt;`](unique_ptr/op_less.md)           | 左辺が右辺より小さいかを判定する          | C++11 |
 | [`operator&amp;lt;=`](unique_ptr/op_less_equal.md)    | 左辺が右辺以下かを判定する                | C++11 |
 | [`operator&amp;gt;`](unique_ptr/op_greater.md)        | 左辺が右辺より大きいかを判定する          | C++11 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- unique_ptr : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_compare_3way.html"/>
      <id>57678971b5fdd014ed6ce5ac8148ca8ecfefd68f:reference/memory/unique_ptr/op_compare_3way.md</id>
      <updated>2022-12-13T22:52:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_compare_3way.md b/reference/memory/unique_ptr/op_compare_3way.md
new file mode 100644
index 000000000..927572fd1
--- /dev/null
+++ b/reference/memory/unique_ptr/op_compare_3way.md
@@ -0,0 +1,98 @@
+# operator&amp;lt;=&amp;gt;
+* memory[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class T1, class D1, class T2, class D2&amp;gt;
+    requires three_way_comparable_with&amp;lt;
+               typename unique_ptr&amp;lt;T1, D1&amp;gt;::pointer,
+               typename unique_ptr&amp;lt;T2, D2&amp;gt;::pointer&amp;gt;
+  compare_three_way_result_t&amp;lt;
+    typename unique_ptr&amp;lt;T1, D1&amp;gt;::pointer,
+    typename unique_ptr&amp;lt;T2, D2&amp;gt;::pointer&amp;gt;
+  operator&amp;lt;=&amp;gt;(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; x, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; y); // (1) C++20
+
+  template &amp;lt;class T, class D&amp;gt;
+    requires three_way_comparable_with&amp;lt;
+               typename unique_ptr&amp;lt;T, D&amp;gt;::pointer,
+               nullptr_t&amp;gt;
+  compare_three_way_result_t&amp;lt;
+    typename unique_ptr&amp;lt;T, D&amp;gt;::pointer,
+    nullptr_t&amp;gt;
+  operator&amp;lt;=&amp;gt;(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);                     // (2) C++20
+}
+```
+* nullptr_t[link /reference/cstddef/nullptr_t.md]
+
+## 概要
+`unique_ptr`オブジェクトの三方比較を行う。
+
+
+## テンプレートパラメータ制約
+
+- (1) : 型`unique_ptr&amp;lt;T1, D1&amp;gt;::pointer`と型`unique_ptr&amp;lt;T2, D2&amp;gt;::pointer`が三方比較可能であること
+- (2) : 型`unique_ptr&amp;lt;T, D&amp;gt;::pointer`と型[`nullptr_t`](/reference/cstddef/nullptr_t.md)が三方比較可能であること
+
+
+## 戻り値
+- (1) :
+    ```cpp
+    return compare_three_way()(x.get(), y.get());
+    ```
+    * compare_three_way[link /reference/compare/compare_three_way.md]
+    * get()[link get.md]
+
+- (2) :
+    ```cpp
+    return compare_three_way()(x.get(), nullptr);
+    ```
+    * compare_three_way[link /reference/compare/compare_three_way.md]
+    * get()[link get.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;memory&amp;gt;
+
+int main()
+{
+  std::unique_ptr&amp;lt;int&amp;gt; p1(new int(3));
+  if ((p1 &amp;lt;=&amp;gt; p1) == 0) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;equal&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+
+  std::unique_ptr&amp;lt;int&amp;gt; p2;
+  if ((p2 &amp;lt;=&amp;gt; nullptr) == 0) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;p2 is nullptr&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+
+  if ((nullptr &amp;lt;=&amp;gt; p2) == 0) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;p2 is nullptr&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+
+### 出力
+```
+equal
+p2 is nullptr
+p2 is nullptr
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang):
+- [GCC](/implementation.md#gcc): 10
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- unique_ptr : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_equal.html"/>
      <id>57678971b5fdd014ed6ce5ac8148ca8ecfefd68f:reference/memory/unique_ptr/op_equal.md</id>
      <updated>2022-12-13T22:52:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_equal.md b/reference/memory/unique_ptr/op_equal.md
index f483e6a4f..d2f8a3b2b 100644
--- a/reference/memory/unique_ptr/op_equal.md
+++ b/reference/memory/unique_ptr/op_equal.md
@@ -7,13 +7,14 @@
 ```cpp
 namespace std {
   template &amp;lt;class T1, class D1, class T2, class D2&amp;gt;
-  bool operator==(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; a, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; b); // (1)
+  bool operator==(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; a, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; b); // (1) C++11
 
   template &amp;lt;class T, class D&amp;gt;
-  bool operator==(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t) noexcept;            // (2)
+  bool operator==(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t) noexcept;            // (2) C++11
 
+  // (2)により以下のオーバーロードが使用可能 (C++20)
   template &amp;lt;class T, class D&amp;gt;
-  bool operator==(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x) noexcept;            // (3)
+  bool operator==(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x) noexcept;            // (3) C++11
 }
 ```
 * nullptr_t[link /reference/cstddef/nullptr_t.md]
@@ -27,6 +28,11 @@ namespace std {
 - (2), (3) : `!x`
 
 
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator!=`
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
@@ -67,3 +73,8 @@ p2 is nullptr
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): 2010, 2012, 2013
 	- 2012までは`nullptr`バージョンがない。
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- unique_ptr : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_not_equal.html"/>
      <id>57678971b5fdd014ed6ce5ac8148ca8ecfefd68f:reference/memory/unique_ptr/op_not_equal.md</id>
      <updated>2022-12-13T22:52:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_not_equal.md b/reference/memory/unique_ptr/op_not_equal.md
index e706bc12f..d200e0915 100644
--- a/reference/memory/unique_ptr/op_not_equal.md
+++ b/reference/memory/unique_ptr/op_not_equal.md
@@ -6,14 +6,15 @@
 
 ```cpp
 namespace std {
+  // operator==により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T1, class D1, class T2, class D2&amp;gt;
-  bool operator!=(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; a, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; b); // (1)
+  bool operator!=(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; a, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; b); // (1) C++11
 
   template &amp;lt;class T, class D&amp;gt;
-  bool operator!=(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t) noexcept;            // (2)
+  bool operator!=(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t) noexcept;            // (2) C++11
 
   template &amp;lt;class T, class D&amp;gt;
-  bool operator!=(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x) noexcept;            // (3)
+  bool operator!=(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x) noexcept;            // (3) C++11
 }
 ```
 * nullptr_t[link /reference/cstddef/nullptr_t.md]
@@ -68,3 +69,8 @@ p3 is not nullptr
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): 2010, 2012, 2013
 	- 2012までは`nullptr`バージョンがない。
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>variant -- variant : 三方比較演算子を追加 #900</title>
      <link href="https://cpprefjp.github.io/reference/variant/variant.html"/>
      <id>584eb3e60661c730a23c4bd96df7ee316b9456b0:reference/variant/variant.md</id>
      <updated>2022-12-13T04:18:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/variant/variant.md b/reference/variant/variant.md
index 2bcff796b..fa7cd33db 100644
--- a/reference/variant/variant.md
+++ b/reference/variant/variant.md
@@ -120,6 +120,7 @@ std::visit([](auto&amp;amp; x) {
 |------|------|----------------|
 | [`operator==`](variant/op_equal.md)         | 等値比較 | C++17 |
 | [`operator!=`](variant/op_not_equal.md)     | 非等値比較 | C++17 |
+| [`operator&amp;lt;=&amp;gt;`](variant/op_compare_3way.md) | 三方比較 | C++20 |
 | [`operator&amp;lt;`](variant/op_less.md)           | 左辺が右辺より小さいかを判定する | C++17 |
 | [`operator&amp;lt;=`](variant/op_less_equal.md)    | 左辺が右辺以下かを判定する | C++17 |
 | [`operator&amp;gt;`](variant/op_greater.md)        | 左辺が右辺より大きいかを判定する | C++17 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- variant : 三方比較演算子を追加 #900</title>
      <link href="https://cpprefjp.github.io/reference/variant/variant/op_compare_3way.html"/>
      <id>584eb3e60661c730a23c4bd96df7ee316b9456b0:reference/variant/variant/op_compare_3way.md</id>
      <updated>2022-12-13T04:18:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/variant/variant/op_compare_3way.md b/reference/variant/variant/op_compare_3way.md
new file mode 100644
index 000000000..072bf4493
--- /dev/null
+++ b/reference/variant/variant/op_compare_3way.md
@@ -0,0 +1,80 @@
+# operator&amp;lt;=&amp;gt;
+* variant[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class... Types&amp;gt;
+    requires (three_way_comparable&amp;lt;Types&amp;gt; &amp;amp;&amp;amp; ...)
+  constexpr common_comparison_category_t&amp;lt;compare_three_way_result_t&amp;lt;Types&amp;gt;...&amp;gt;
+    operator&amp;lt;=&amp;gt;(const variant&amp;lt;Types...&amp;gt;&amp;amp; v, const variant&amp;lt;Types...&amp;gt;&amp;amp; w); // (1) C++20
+}
+```
+* common_comparison_category_t[link /reference/compare/common_comparison_category.md]
+
+## 概要
+`variant`オブジェクトの三方比較を行う。
+
+
+## テンプレートパラメータ制約
+- 全ての候補型が[三方比較可能](/reference/compare/three_way_comparable.md)であること
+
+
+## 戻り値
+以下と等価：
+
+```cpp
+if (v.valueless_by_exception() &amp;amp;&amp;amp; w.valueless_by_exception())
+  return strong_ordering::equal;
+if (v.valueless_by_exception())
+  return strong_ordering::less;
+if (w.valueless_by_exception())
+  return strong_ordering::greater;
+if (auto c = v.index() &amp;lt;=&amp;gt; w.index(); c != 0)
+  return c;
+return get&amp;lt;i&amp;gt;(v) &amp;lt;=&amp;gt; get&amp;lt;i&amp;gt;(w);
+```
+* valueless_by_exception()[link valueless_by_exception.md]
+* index()[link index.md]
+* get[link get.md]
+
+ここで`i`は`v.index()`である。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;variant&amp;gt;
+
+int main()
+{
+  std::variant&amp;lt;int, char, double&amp;gt; a = 1;
+  std::variant&amp;lt;int, char, double&amp;gt; b = 3.14;
+  std::variant&amp;lt;int, char, double&amp;gt; c = 3;
+
+  assert((a &amp;lt;=&amp;gt; a) == 0); // 保持する型と値が同じ
+  assert((b &amp;lt;=&amp;gt; b) == 0); // 保持する型と値が同じ
+  assert((a &amp;lt;=&amp;gt; b) != 0); // 保持する型が異なる
+  assert((a &amp;lt;=&amp;gt; c) != 0); // 保持する型が同じだが、値が異なる
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang):
+- [GCC](/implementation.md#gcc): 10
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>monostate -- monostate : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/variant/monostate.html"/>
      <id>66a9622721641b682ca0189385ef492f60c6efa0:reference/variant/monostate.md</id>
      <updated>2022-12-13T04:10:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/variant/monostate.md b/reference/variant/monostate.md
index 5cda28465..911a62676 100644
--- a/reference/variant/monostate.md
+++ b/reference/variant/monostate.md
@@ -39,11 +39,12 @@ namespace std {
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
 | `constexpr bool operator==(monostate, monostate) noexcept;` | 等値比較。`true`を返す | C++17 |
-| `constexpr bool operator!=(monostate, monostate) noexcept;` | 非等値比較。`false`を返す | C++17 |
-| `constexpr bool operator&amp;lt;(monostate, monostate) noexcept;`  | 左辺が右辺より小さいかを判定する。`false`を返す | C++17 |
-| `constexpr bool operator&amp;lt;=(monostate, monostate) noexcept;` | 左辺が右辺以下かを判定する。`true`を返す | C++17 |
-| `constexpr bool operator&amp;gt;(monostate, monostate) noexcept;`  | 左辺が右辺より大きいかを判定する。`false`を返す | C++17 |
-| `constexpr bool operator&amp;gt;=(monostate, monostate) noexcept;` | 左辺が右辺以上かを判定する。`true`を返す | C++17 |
+| `constexpr bool operator!=(monostate, monostate) noexcept;` | 非等値比較。`false`を返す (C++20から`==`により使用可能) | C++17 |
+| `constexpr strong_ordering operator&amp;lt;=&amp;gt;(monostate, monostate) noexcept;` | 三方比較。`strong_ordering::equal`を返す | C++20 |
+| `constexpr bool operator&amp;lt;(monostate, monostate) noexcept;`  | 左辺が右辺より小さいかを判定する。`false`を返す (C++20から`&amp;lt;=&amp;gt;`により使用可能) | C++17 |
+| `constexpr bool operator&amp;lt;=(monostate, monostate) noexcept;` | 左辺が右辺以下かを判定する。`true`を返す (C++20から`&amp;lt;=&amp;gt;`により使用可能) | C++17 |
+| `constexpr bool operator&amp;gt;(monostate, monostate) noexcept;`  | 左辺が右辺より大きいかを判定する。`false`を返す (C++20から`&amp;lt;=&amp;gt;`により使用可能) | C++17 |
+| `constexpr bool operator&amp;gt;=(monostate, monostate) noexcept;` | 左辺が右辺以上かを判定する。`true`を返す (C++20から`&amp;lt;=&amp;gt;`により使用可能) | C++17 |
 
 
 ## 例
@@ -82,3 +83,8 @@ empty
 - [Clang](/implementation.md#clang): 7.3
 - [GCC](/implementation.md#gcc): 4.0
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_string_view -- basic_string_view : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view.html"/>
      <id>2e73c88c2c4e7a6733fcaca6cd75b3911f48baac:reference/string_view/basic_string_view.md</id>
      <updated>2022-12-13T03:47:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view.md b/reference/string_view/basic_string_view.md
index 479d71544..5e7bc85b2 100644
--- a/reference/string_view/basic_string_view.md
+++ b/reference/string_view/basic_string_view.md
@@ -142,6 +142,7 @@ string_view hello = sv.substr(0, 5); // 先頭5文字を抽出する
 |------|------|----------------|
 | [`operator==`](basic_string_view/op_equal.md)         | 等値比較                           | C++17 |
 | [`operator!=`](basic_string_view/op_not_equal.md)     | 非等値比較                         | C++17 |
+| [`operator&amp;lt;=&amp;gt;`](basic_string_view/op_compare_3way.md) | 三方比較                           | C++20 |
 | [`operator&amp;lt;`](basic_string_view/op_less.md)           | 左辺が右辺より小さいかの判定を行う | C++17 |
 | [`operator&amp;lt;=`](basic_string_view/op_less_equal.md)    | 左辺が右辺以下かの判定を行う       | C++17 |
 | [`operator&amp;gt;`](basic_string_view/op_greater.md)        | 左辺が右辺より大きいかの判定を行う | C++17 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- basic_string_view : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/op_compare_3way.html"/>
      <id>2e73c88c2c4e7a6733fcaca6cd75b3911f48baac:reference/string_view/basic_string_view/op_compare_3way.md</id>
      <updated>2022-12-13T03:47:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/op_compare_3way.md b/reference/string_view/basic_string_view/op_compare_3way.md
new file mode 100644
index 000000000..c9783d134
--- /dev/null
+++ b/reference/string_view/basic_string_view/op_compare_3way.md
@@ -0,0 +1,74 @@
+# operator&amp;lt;=&amp;gt;
+* string_view[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class charT, class traits&amp;gt;
+    constexpr see below
+  operator&amp;lt;=&amp;gt;(basic_string_view&amp;lt;charT, traits&amp;gt; x,
+              basic_string_view&amp;lt;charT, traits&amp;gt; y) noexcept; // (1) C++20
+}
+```
+
+## 概要
+`basic_string_view`オブジェクトの三方比較を行う。
+
+
+## 戻り値
+戻り値の型`R`は、`traits::comparison_category`が存在していればその型、そうでなければ[`weak_ordering`](/reference/compare/weak_ordering.md)となり、以下と等価：
+
+
+```cpp
+return static_cast&amp;lt;R&amp;gt;(lhs.compare(rhs) &amp;lt;=&amp;gt; 0);
+```
+* compare[link compare.md]
+
+
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator&amp;lt;`
+    - `operator&amp;lt;=`
+    - `operator&amp;gt;`
+    - `operator&amp;gt;=`
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+
+int main()
+{
+  std::string_view a = &amp;#34;aaa&amp;#34;;
+  std::string_view b {&amp;#34;aaaBB&amp;#34;, 3}; // 先頭3文字を参照
+
+  if ((a &amp;lt;=&amp;gt; b) == 0) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;equal&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+  else {
+    std::cout &amp;lt;&amp;lt; &amp;#34;not equal&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+
+### 出力
+```
+equal
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang):
+- [GCC](/implementation.md#gcc): 10
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- basic_string_view : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/op_equal.html"/>
      <id>2e73c88c2c4e7a6733fcaca6cd75b3911f48baac:reference/string_view/basic_string_view/op_equal.md</id>
      <updated>2022-12-13T03:47:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/op_equal.md b/reference/string_view/basic_string_view/op_equal.md
index 59e08d35a..2919eb6e9 100644
--- a/reference/string_view/basic_string_view/op_equal.md
+++ b/reference/string_view/basic_string_view/op_equal.md
@@ -8,7 +8,7 @@
 namespace std {
   template &amp;lt;class CharT, class Traits&amp;gt;
   constexpr bool operator==(basic_string_view&amp;lt;CharT, Traits&amp;gt; x,
-                            basic_string_view&amp;lt;CharT, Traits&amp;gt; y) noexcept;
+                            basic_string_view&amp;lt;CharT, Traits&amp;gt; y) noexcept; // (1) C++17
 }
 ```
 
@@ -23,6 +23,11 @@ return x.compare(y) == 0;
 * compare[link compare.md]
 
 
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator!=`
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
@@ -42,7 +47,7 @@ int main()
 }
 ```
 
-### 出力例
+### 出力
 ```
 equal
 ```
@@ -56,3 +61,8 @@ equal
 - [GCC](/implementation.md#gcc): 7.1
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt; -- basic_string_view : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/op_greater.html"/>
      <id>2e73c88c2c4e7a6733fcaca6cd75b3911f48baac:reference/string_view/basic_string_view/op_greater.md</id>
      <updated>2022-12-13T03:47:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/op_greater.md b/reference/string_view/basic_string_view/op_greater.md
index b152b79bf..b220585b5 100644
--- a/reference/string_view/basic_string_view/op_greater.md
+++ b/reference/string_view/basic_string_view/op_greater.md
@@ -6,9 +6,10 @@
 
 ```cpp
 namespace std {
+  // operator==により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class CharT, class Traits&amp;gt;
   constexpr bool operator&amp;gt;(basic_string_view&amp;lt;CharT, Traits&amp;gt; x,
-                           basic_string_view&amp;lt;CharT, Traits&amp;gt; y) noexcept;
+                           basic_string_view&amp;lt;CharT, Traits&amp;gt; y) noexcept; // (1) C++17
 }
 ```
 
@@ -56,3 +57,8 @@ greater
 - [GCC](/implementation.md#gcc): 7.1
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= -- basic_string_view : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/op_greater_equal.html"/>
      <id>2e73c88c2c4e7a6733fcaca6cd75b3911f48baac:reference/string_view/basic_string_view/op_greater_equal.md</id>
      <updated>2022-12-13T03:47:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/op_greater_equal.md b/reference/string_view/basic_string_view/op_greater_equal.md
index 4112f9ffb..6594a449e 100644
--- a/reference/string_view/basic_string_view/op_greater_equal.md
+++ b/reference/string_view/basic_string_view/op_greater_equal.md
@@ -6,9 +6,10 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class CharT, class Traits&amp;gt;
   constexpr bool operator&amp;gt;=(basic_string_view&amp;lt;CharT, Traits&amp;gt; x,
-                            basic_string_view&amp;lt;CharT, Traits&amp;gt; y) noexcept;
+                            basic_string_view&amp;lt;CharT, Traits&amp;gt; y) noexcept; // (1) C++17
 }
 ```
 
@@ -56,3 +57,8 @@ greater equal
 - [GCC](/implementation.md#gcc): 7.1
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- basic_string_view : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/op_less.html"/>
      <id>2e73c88c2c4e7a6733fcaca6cd75b3911f48baac:reference/string_view/basic_string_view/op_less.md</id>
      <updated>2022-12-13T03:47:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/op_less.md b/reference/string_view/basic_string_view/op_less.md
index 1de41a941..fa1f09b44 100644
--- a/reference/string_view/basic_string_view/op_less.md
+++ b/reference/string_view/basic_string_view/op_less.md
@@ -6,9 +6,10 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class CharT, class Traits&amp;gt;
   constexpr bool operator&amp;lt;(basic_string_view&amp;lt;CharT, Traits&amp;gt; x,
-                           basic_string_view&amp;lt;CharT, Traits&amp;gt; y) noexcept;
+                           basic_string_view&amp;lt;CharT, Traits&amp;gt; y) noexcept; // (1) C++17
 }
 ```
 
@@ -56,3 +57,8 @@ less
 - [GCC](/implementation.md#gcc): 7.1
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;= -- basic_string_view : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/op_less_equal.html"/>
      <id>2e73c88c2c4e7a6733fcaca6cd75b3911f48baac:reference/string_view/basic_string_view/op_less_equal.md</id>
      <updated>2022-12-13T03:47:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/op_less_equal.md b/reference/string_view/basic_string_view/op_less_equal.md
index 0c63c3e78..a2aae9478 100644
--- a/reference/string_view/basic_string_view/op_less_equal.md
+++ b/reference/string_view/basic_string_view/op_less_equal.md
@@ -6,9 +6,10 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class CharT, class Traits&amp;gt;
   constexpr bool operator&amp;lt;=(basic_string_view&amp;lt;CharT, Traits&amp;gt; x,
-                            basic_string_view&amp;lt;CharT, Traits&amp;gt; y) noexcept;
+                            basic_string_view&amp;lt;CharT, Traits&amp;gt; y) noexcept; // (1) C++17
 }
 ```
 
@@ -56,3 +57,8 @@ less equal
 - [GCC](/implementation.md#gcc): 7.1
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- basic_string_view : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/op_not_equal.html"/>
      <id>2e73c88c2c4e7a6733fcaca6cd75b3911f48baac:reference/string_view/basic_string_view/op_not_equal.md</id>
      <updated>2022-12-13T03:47:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/op_not_equal.md b/reference/string_view/basic_string_view/op_not_equal.md
index 78df8f543..68e46fe07 100644
--- a/reference/string_view/basic_string_view/op_not_equal.md
+++ b/reference/string_view/basic_string_view/op_not_equal.md
@@ -6,9 +6,10 @@
 
 ```cpp
 namespace std {
+  // operator==により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class CharT, class Traits&amp;gt;
   constexpr bool operator!=(basic_string_view&amp;lt;CharT, Traits&amp;gt; x,
-                            basic_string_view&amp;lt;CharT, Traits&amp;gt; y) noexcept;
+                            basic_string_view&amp;lt;CharT, Traits&amp;gt; y) noexcept; // (1) C++17
 }
 ```
 
@@ -42,7 +43,7 @@ int main()
 }
 ```
 
-### 出力例
+### 出力
 ```
 not equal
 ```
@@ -56,3 +57,8 @@ not equal
 - [GCC](/implementation.md#gcc): 7.1
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_string -- basic_string : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string.html"/>
      <id>5b0b9b47dd27c3106bcee7c2834c03752829a667:reference/string/basic_string.md</id>
      <updated>2022-12-13T03:40:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string.md b/reference/string/basic_string.md
index f6b3e6b66..3480d5efd 100644
--- a/reference/string/basic_string.md
+++ b/reference/string/basic_string.md
@@ -186,6 +186,7 @@ namespace std {
 |------|------|----------------|
 | [`operator==`](basic_string/op_equal.md)         | 等値比較                           | |
 | [`operator!=`](basic_string/op_not_equal.md)     | 非等値比較                         | |
+| [`operator&amp;lt;=&amp;gt;`](basic_string/op_compare_3way.md) | 三方比較                           | C++20 |
 | [`operator&amp;lt;`](basic_string/op_less.md)           | 左辺が右辺より小さいかの判定を行う | |
 | [`operator&amp;lt;=`](basic_string/op_less_equal.md)    | 左辺が右辺以下かの判定を行う       | |
 | [`operator&amp;gt;`](basic_string/op_greater.md)        | 左辺が右辺より大きいかの判定を行う | |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- basic_string : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_compare_3way.html"/>
      <id>5b0b9b47dd27c3106bcee7c2834c03752829a667:reference/string/basic_string/op_compare_3way.md</id>
      <updated>2022-12-13T03:40:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_compare_3way.md b/reference/string/basic_string/op_compare_3way.md
new file mode 100644
index 000000000..de311f999
--- /dev/null
+++ b/reference/string/basic_string/op_compare_3way.md
@@ -0,0 +1,72 @@
+# operator&amp;lt;=&amp;gt;
+* string[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+    see below
+  operator&amp;lt;=&amp;gt;(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
+              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs) noexcept; // (1) C++20
+
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+    see below
+  operator&amp;lt;=&amp;gt;(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
+              const charT* rhs);                                           // (2) C++20
+}
+```
+
+## 概要
+`basic_string`オブジェクトの三方比較を行う。
+
+デフォルトの比較では、大文字と小文字は区別される（`&amp;#39;a&amp;#39; == &amp;#39;A&amp;#39;`は`false`）。  
+なお、この比較方法は[`char_traits`](/reference/string/char_traits.md)によってカスタマイズでき、大文字・小文字を区別しない比較もできる。
+
+
+## 戻り値
+以下と等価：
+
+```cpp
+return basic_string_view&amp;lt;charT, traits&amp;gt;(lhs) &amp;lt;=&amp;gt; basic_string_view&amp;lt;charT, traits&amp;gt;(rhs);
+```
+* basic_string_view[link /reference/string_view/basic_string_view.md]
+
+戻り値の型は、`traits::comparison_category`が存在していればその型、そうでなければ[`weak_ordering`](/reference/compare/weak_ordering.md)となる。
+
+
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator&amp;lt;`
+    - `operator&amp;lt;=`
+    - `operator&amp;gt;`
+    - `operator&amp;gt;=`
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::string a = &amp;#34;abc&amp;#34;;
+  std::string b = &amp;#34;abc&amp;#34;;
+
+  if ((a &amp;lt;=&amp;gt; b) == 0) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;equal&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+  else {
+    std::cout &amp;lt;&amp;lt; &amp;#34;not equal&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+
+### 出力
+```
+```
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- basic_string : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_equal.html"/>
      <id>5b0b9b47dd27c3106bcee7c2834c03752829a667:reference/string/basic_string/op_equal.md</id>
      <updated>2022-12-13T03:40:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_equal.md b/reference/string/basic_string/op_equal.md
index 6ec1f6a40..e9477fc48 100644
--- a/reference/string/basic_string/op_equal.md
+++ b/reference/string/basic_string/op_equal.md
@@ -20,21 +20,22 @@ namespace std {
 
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
   bool
-    operator==(const CharT* a,
-               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (2) C++03
+    operator==(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const CharT* b);                                  // (2) C++03
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
   constexpr bool
-    operator==(const CharT* a,
-               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (2) C++20
+    operator==(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const CharT* b);                                  // (2) C++20
 
+  // (2)により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
   bool
-    operator==(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-               const CharT* b);                                  // (3) C++03
+    operator==(const CharT* a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (3) C++03
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
   constexpr bool
-    operator==(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-               const CharT* b);                                  // (3) C++20
+    operator==(const CharT* a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (3) C++20
 }
 ```
 
@@ -45,14 +46,19 @@ namespace std {
 なお、この比較方法は[`char_traits`](/reference/string/char_traits.md)によってカスタマイズでき、大文字・小文字を区別しない比較もできる。
 
 
-## 要件
-- (3) パラメータ`b`が、[`Traits::length`](/reference/string/char_traits/length.md)`(b) + 1`の要素数を持つ`CharT`文字型の配列を指していること
+## 事前条件
+- (2) パラメータ`b`が、[`Traits::length`](/reference/string/char_traits/length.md)`(b) + 1`の要素数を持つ`CharT`文字型の配列を指していること
 
 
 ## 戻り値
 - (1) `a.`[`compare`](compare.md)`(b) == 0`
-- (2) `b == a`
 - (3) `a.`[`compare`](compare.md)`(b) == 0`
+- (2) `b == a`
+
+
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator!=`
 
 
 ## 例
@@ -82,3 +88,5 @@ equal
 ## 参照
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
 - [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt; -- basic_string : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_greater.html"/>
      <id>5b0b9b47dd27c3106bcee7c2834c03752829a667:reference/string/basic_string/op_greater.md</id>
      <updated>2022-12-13T03:40:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_greater.md b/reference/string/basic_string/op_greater.md
index 9f0081048..5c045b87e 100644
--- a/reference/string/basic_string/op_greater.md
+++ b/reference/string/basic_string/op_greater.md
@@ -5,6 +5,7 @@
 
 ```cpp
 namespace std {
+  // operator==により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
   bool
     operator&amp;gt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
@@ -71,3 +72,5 @@ true
 ## 参照
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
 - [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= -- basic_string : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_greater_equal.html"/>
      <id>5b0b9b47dd27c3106bcee7c2834c03752829a667:reference/string/basic_string/op_greater_equal.md</id>
      <updated>2022-12-13T03:40:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_greater_equal.md b/reference/string/basic_string/op_greater_equal.md
index e3e1b3c20..c1dd0d0cf 100644
--- a/reference/string/basic_string/op_greater_equal.md
+++ b/reference/string/basic_string/op_greater_equal.md
@@ -5,6 +5,7 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
   bool
     operator&amp;gt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
@@ -71,3 +72,5 @@ true
 ## 参照
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
 - [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- basic_string : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_less.html"/>
      <id>5b0b9b47dd27c3106bcee7c2834c03752829a667:reference/string/basic_string/op_less.md</id>
      <updated>2022-12-13T03:40:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_less.md b/reference/string/basic_string/op_less.md
index ce83e281b..3ac179685 100644
--- a/reference/string/basic_string/op_less.md
+++ b/reference/string/basic_string/op_less.md
@@ -5,6 +5,7 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
   bool
     operator&amp;lt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
@@ -70,3 +71,5 @@ true
 ## 参照
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
 - [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;= -- basic_string : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_less_equal.html"/>
      <id>5b0b9b47dd27c3106bcee7c2834c03752829a667:reference/string/basic_string/op_less_equal.md</id>
      <updated>2022-12-13T03:40:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_less_equal.md b/reference/string/basic_string/op_less_equal.md
index 4f080dff4..107357465 100644
--- a/reference/string/basic_string/op_less_equal.md
+++ b/reference/string/basic_string/op_less_equal.md
@@ -5,6 +5,7 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
   bool
     operator&amp;lt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
@@ -71,3 +72,5 @@ true
 ## 参照
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
 - [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- basic_string : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_not_equal.html"/>
      <id>5b0b9b47dd27c3106bcee7c2834c03752829a667:reference/string/basic_string/op_not_equal.md</id>
      <updated>2022-12-13T03:40:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_not_equal.md b/reference/string/basic_string/op_not_equal.md
index a5b55f9ca..957e81642 100644
--- a/reference/string/basic_string/op_not_equal.md
+++ b/reference/string/basic_string/op_not_equal.md
@@ -5,6 +5,7 @@
 
 ```cpp
 namespace std {
+  // operator==により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
   bool
     operator!=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
@@ -80,3 +81,5 @@ not equal
 ## 参照
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
 - [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-04-21T10:48:27.981258</updated>
  <id>ab013253-7a34-4947-adf1-74e5639976ff</id>

  
    <entry>
      <title>completion_signatures -- execution: vaild-completion-signatures説明を移動</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/completion_signatures.html"/>
      <id>e57a099f313bf449e43178496d7ca45d7d6bb454:reference/execution/execution/completion_signatures.md</id>
      <updated>2025-04-21T19:44:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/completion_signatures.md b/reference/execution/execution/completion_signatures.md
index b45088cbb..26bb51878 100644
--- a/reference/execution/execution/completion_signatures.md
+++ b/reference/execution/execution/completion_signatures.md
@@ -14,6 +14,16 @@ namespace std::execution {
 ## 概要
 `completion_signatures`クラステンプレートは、完了シグネチャの集合をテンプレートパラメータとして表現する。
 
+実行制御ライブラリ仕様定義では、説明専用のコンセプト`valid-completion-signatures`を利用する。
+
+```cpp
+template&amp;lt;class Sigs&amp;gt;
+concept valid-completion-signatures = see below;
+```
+* see below[italic]
+
+`Sigs`が[`completion_signatures`](completion_signatures.md)クラステンプレートの特殊化であるとき、`Sigs`は説明専用コンセプト`valid-completion-signatures`のモデルである。
+
 
 ## テンプレートパラメータ制約
 `Fns`の各要素`Fn`が、下記の説明専用コンセプト`completion-signature`を満たすこと。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sender_in -- execution: vaild-completion-signatures説明を移動</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/sender_in.html"/>
      <id>e57a099f313bf449e43178496d7ca45d7d6bb454:reference/execution/execution/sender_in.md</id>
      <updated>2025-04-21T19:44:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/sender_in.md b/reference/execution/execution/sender_in.md
index 76dfa7530..52a2293d5 100644
--- a/reference/execution/execution/sender_in.md
+++ b/reference/execution/execution/sender_in.md
@@ -20,6 +20,7 @@ namespace std::execution {
 * sender[link sender.md]
 * queryable[link ../queryable.md]
 * get_completion_signatures[link get_completion_signatures.md]
+* valid-completion-signatures[link completion_signatures.md]
 
 ## 概要
 `sender_in`は、[Sender型](sender.md)`Sndr`が[環境](../queryable.md)`Env`において非同期操作を作成できることを表すコンセプトである。
@@ -28,15 +29,7 @@ namespace std::execution {
 ## モデル
 説明用に`sndr`を`decltype((sndr))`が`Sndr`型となる式、`rcvr`を環境`Env`に関連付けられた[Receiver](receiver.md)とする。
 
-```cpp
-template&amp;lt;class Sigs&amp;gt;
-concept valid-completion-signatures = see below;
-```
-* see below[italic]
-
-[`completion_signatures`](completion_signatures.md)クラステンプレートの特殊化であるとき、`Sigs`は説明専用コンセプト`valid-completion-signatures`のモデルである。
-
-また、ある完了操作の完了シグネチャが[`completion_signatures_of_t`](completion_signatures_of_t.md)`&amp;lt;Sndr, Env&amp;gt;`で取得される[`completion_signatures`](completion_signatures.md)リストに含まれるとき、`Sndr`と`Env`における許容可能完了(permissible completion)となる。
+ある完了操作の完了シグネチャが[`completion_signatures_of_t`](completion_signatures_of_t.md)`&amp;lt;Sndr, Env&amp;gt;`で取得される[`completion_signatures`](completion_signatures.md)リストに含まれるとき、`Sndr`と`Env`における許容可能完了(permissible completion)となる。
 
 `sndr`と`rcvr`の[接続](connect.md)後に[Operation State](operation_state.md)を開始することで評価されうる完了操作が、全て許容可能完了(permissible completion)である場合、`Sndr`と`Env`は`sender_in&amp;lt;Sndr, Env&amp;gt;`のモデルとなる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>execution -- execution: get_allocator (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>b74d3e8a3c43de280c7f4ba960abc400f190e818:reference/execution/execution.md</id>
      <updated>2025-04-21T19:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index e614367a5..72368c267 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -36,7 +36,7 @@ namespace std::execution {
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
 | [`forwarding_query`](forwarding_query.md.nolink) | クエリオブジェクトに転送問い合わせ可能か否かを返す (customization point object) | C++26 |
-| [`get_allocator`](get_allocator.md.nolink) | アロケータ取得のクエリオブジェクト (customization point object) | C++26 |
+| [`get_allocator`](get_allocator.md) | アロケータ取得のクエリオブジェクト (customization point object) | C++26 |
 | [`get_stop_token`](get_stop_token.md) | 停止トークン取得のクエリオブジェクト (customization point object) | C++26 |
 | [`stop_token_of_t`](stop_token_of_t.md) | 指定型から停止トークン型を取得 (alias template) | C++26 |
 | [`execution::get_domain`](execution/get_domain.md.nolink) | 実行ドメイン取得のクエリオブジェクト (customization point object) | C++26 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>env -- execution: get_allocator (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/env.html"/>
      <id>b74d3e8a3c43de280c7f4ba960abc400f190e818:reference/execution/execution/env.md</id>
      <updated>2025-04-21T19:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/env.md b/reference/execution/execution/env.md
index 769d43c01..c44e65d76 100644
--- a/reference/execution/execution/env.md
+++ b/reference/execution/execution/env.md
@@ -61,7 +61,7 @@ int main()
 ```
 * ex::env[color ff0000]
 * ex::prop[link prop.md]
-* std::get_allocator[link get_allocator.md.nolink]
+* std::get_allocator[link ../get_allocator.md]
 * std::get_stop_token[link ../get_stop_token.md]
 * std::never_stop_token[link /reference/stop_token/never_stop_token.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>query -- execution: get_allocator (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/env/query.html"/>
      <id>b74d3e8a3c43de280c7f4ba960abc400f190e818:reference/execution/execution/env/query.md</id>
      <updated>2025-04-21T19:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/env/query.md b/reference/execution/execution/env/query.md
index da8641029..3a4620af3 100644
--- a/reference/execution/execution/env/query.md
+++ b/reference/execution/execution/env/query.md
@@ -12,7 +12,7 @@ constexpr decltype(auto) query(QueryTag q) const noexcept(see below);
 * see below[italic]
 
 ## 概要
-クエリオブジェクト`q`をキーとして、対応する値を問い合わせる。
+[クエリオブジェクト](../../queryable.md)`q`をキーとして、対応する値を問い合わせる。
 
 
 ## テンプレートパラメータ制約
@@ -69,7 +69,7 @@ int main()
 * query[color ff0000]
 * ex::env[link ../env.md]
 * ex::prop[link ../prop.md]
-* std::get_allocator[link get_allocator.md.nolink]
+* std::get_allocator[link ../../get_allocator.md]
 * std::get_stop_token[link ../../get_stop_token.md]
 * std::never_stop_token[link /reference/stop_token/never_stop_token.md]
 * std::stop_token[link /reference/stop_token/stop_token.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_env -- execution: get_allocator (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/get_env.html"/>
      <id>b74d3e8a3c43de280c7f4ba960abc400f190e818:reference/execution/execution/get_env.md</id>
      <updated>2025-04-21T19:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/get_env.md b/reference/execution/execution/get_env.md
index 91f10c134..91f76cd4f 100644
--- a/reference/execution/execution/get_env.md
+++ b/reference/execution/execution/get_env.md
@@ -22,7 +22,7 @@ namespace std::execution {
 ## 効果
 式`get_env(o)`は下記と等価であり、[`queryable`](../queryable.md)を満たす型の値となる。
 
-- 引数`o`がconst修飾された`co`を用いて、式`co.get_env()`が有効であればその値。
+- 引数`o`がconst修飾された`co`を用いて、式`co.get_env()`が適格であればその値。
 - そうでなければ、空のクエリ可能オブジェクト[`env&amp;lt;&amp;gt;{}`](env.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>prop -- execution: get_allocator (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/prop.html"/>
      <id>b74d3e8a3c43de280c7f4ba960abc400f190e818:reference/execution/execution/prop.md</id>
      <updated>2025-04-21T19:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/prop.md b/reference/execution/execution/prop.md
index e3790653f..05055d8db 100644
--- a/reference/execution/execution/prop.md
+++ b/reference/execution/execution/prop.md
@@ -23,7 +23,7 @@ namespace std::execution {
 * unwrap_reference_t[link /reference/type_traits/unwrap_reference.md]
 
 ## 概要
-`QueryTag`型クエリオブジェクトのキーと`ValueType`型の値から、[クエリ可能オブジェクト](../queryable.md)を構築する。
+`QueryTag`型[クエリオブジェクト](../queryable.md)のキーと`ValueType`型の値から、[クエリ可能オブジェクト](../queryable.md)を構築する。
 
 
 ## 適格要件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_allocator -- execution: get_allocator (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/get_allocator.html"/>
      <id>b74d3e8a3c43de280c7f4ba960abc400f190e818:reference/execution/get_allocator.md</id>
      <updated>2025-04-21T19:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/get_allocator.md b/reference/execution/get_allocator.md
new file mode 100644
index 000000000..6747421d6
--- /dev/null
+++ b/reference/execution/get_allocator.md
@@ -0,0 +1,82 @@
+# get_allocator
+* execution[meta header]
+* cpo[meta id-type]
+* std[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  struct get_allocator_t { unspecified };
+  constexpr get_allocator_t get_allocator{};
+}
+```
+* unspecified[italic]
+
+## 概要
+`get_allocator`は、[クエリ可能オブジェクト](queryable.md)からアロケータを取得する[クエリオブジェクト](queryable.md)である。
+
+コア定数式[`forwarding_query`](forwarding_query.md.nolink)`(get_allocator)`は`true`値を返す。
+
+
+## 効果
+式`get_allocator(env)`は下記と等価であり、説明専用コンセプト`simple-allocator`を満たす型の値となる。
+
+- 引数`env`がconst修飾された`cenv`を用いて、式`cenv.query(get_allocator)`が適格であること。
+
+```cpp
+template&amp;lt;class Alloc&amp;gt;
+concept simple-allocator =
+  requires(Alloc alloc, size_t n) {
+    { *alloc.allocate(n) } -&amp;gt; same_as&amp;lt;typename Alloc::value_type&amp;amp;&amp;gt;;
+    { alloc.deallocate(alloc.allocate(n), n) };
+  } &amp;amp;&amp;amp;
+  copy_constructible&amp;lt;Alloc&amp;gt; &amp;amp;&amp;amp;
+  equality_comparable&amp;lt;Alloc&amp;gt;;
+```
+
+
+## 例外
+投げない
+
+
+## カスタマイゼーションポイント
+const修飾[クエリ可能オブジェクト](queryable.md)`env`に対して式`env.query(get_allocator)`が呼び出される。
+このとき、`noexcept(cenv.query(get_allocator)) == true`であること。
+
+
+## 例
+```cpp
+#include &amp;lt;concepts&amp;gt;
+#include &amp;lt;memory&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  auto env = ex::prop(std::get_allocator, std::allocator&amp;lt;int&amp;gt;{});
+
+  auto alloc = std::get_allocator(env);
+  static_assert(std::same_as&amp;lt;decltype(alloc), std::allocator&amp;lt;int&amp;gt;&amp;gt;);
+}
+```
+* std::get_allocator[color ff0000]
+* ex::prop[link execution/prop.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_stop_token -- execution: get_allocator (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/get_stop_token.html"/>
      <id>b74d3e8a3c43de280c7f4ba960abc400f190e818:reference/execution/get_stop_token.md</id>
      <updated>2025-04-21T19:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/get_stop_token.md b/reference/execution/get_stop_token.md
index 53e7d91fc..9bd1ad082 100644
--- a/reference/execution/get_stop_token.md
+++ b/reference/execution/get_stop_token.md
@@ -21,7 +21,7 @@ namespace std {
 ## 効果
 式`get_stop_token(env)`は下記と等価であり、[`stoppable_token`](/reference/stop_token/stoppable_token.md)を満たす型の値となる。
 
-- 引数`env`がconst修飾された`cenv`を用いて、式`cenv.query(get_stop_token)`が有効であればその値。
+- 引数`env`がconst修飾された`cenv`を用いて、式`cenv.query(get_stop_token)`が適格であればその値。
 - そうでなければ、[`never_stop_token{}`](/reference/stop_token/never_stop_token.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>execution -- execution: get_stop_token,stop_token_of_t (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>d512f5b175382335a2becad9da0311a9de99dc42:reference/execution/execution.md</id>
      <updated>2025-04-21T18:43:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index 835352c5b..e614367a5 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -37,8 +37,8 @@ namespace std::execution {
 |------|------|----------------|
 | [`forwarding_query`](forwarding_query.md.nolink) | クエリオブジェクトに転送問い合わせ可能か否かを返す (customization point object) | C++26 |
 | [`get_allocator`](get_allocator.md.nolink) | アロケータ取得のクエリオブジェクト (customization point object) | C++26 |
-| [`get_stop_token`](get_stop_token.md.nolink) | 停止トークン取得のクエリオブジェクト (customization point object) | C++26 |
-| [`stop_token_of_t`](get_stop_token.md.nolink) | 指定型から停止トークン型を取得 (alias template) | C++26 |
+| [`get_stop_token`](get_stop_token.md) | 停止トークン取得のクエリオブジェクト (customization point object) | C++26 |
+| [`stop_token_of_t`](stop_token_of_t.md) | 指定型から停止トークン型を取得 (alias template) | C++26 |
 | [`execution::get_domain`](execution/get_domain.md.nolink) | 実行ドメイン取得のクエリオブジェクト (customization point object) | C++26 |
 | [`execution::get_scheduler`](execution/get_scheduler.md.nolink) | Scheduler取得のクエリオブジェクト (customization point object) | C++26 |
 | [`execution::get_delegation_scheduler`](execution/get_delegation_scheduler.md.nolink) | 委譲Scheduler取得のクエリオブジェクト (customization point object) | C++26 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>env -- execution: get_stop_token,stop_token_of_t (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/env.html"/>
      <id>d512f5b175382335a2becad9da0311a9de99dc42:reference/execution/execution/env.md</id>
      <updated>2025-04-21T18:43:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/env.md b/reference/execution/execution/env.md
index 947d376b4..769d43c01 100644
--- a/reference/execution/execution/env.md
+++ b/reference/execution/execution/env.md
@@ -62,7 +62,7 @@ int main()
 * ex::env[color ff0000]
 * ex::prop[link prop.md]
 * std::get_allocator[link get_allocator.md.nolink]
-* std::get_stop_token[link get_stop_token.md.nolink]
+* std::get_stop_token[link ../get_stop_token.md]
 * std::never_stop_token[link /reference/stop_token/never_stop_token.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>query -- execution: get_stop_token,stop_token_of_t (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/env/query.html"/>
      <id>d512f5b175382335a2becad9da0311a9de99dc42:reference/execution/execution/env/query.md</id>
      <updated>2025-04-21T18:43:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/env/query.md b/reference/execution/execution/env/query.md
index dbd030f8f..da8641029 100644
--- a/reference/execution/execution/env/query.md
+++ b/reference/execution/execution/env/query.md
@@ -70,7 +70,7 @@ int main()
 * ex::env[link ../env.md]
 * ex::prop[link ../prop.md]
 * std::get_allocator[link get_allocator.md.nolink]
-* std::get_stop_token[link get_stop_token.md.nolink]
+* std::get_stop_token[link ../../get_stop_token.md]
 * std::never_stop_token[link /reference/stop_token/never_stop_token.md]
 * std::stop_token[link /reference/stop_token/stop_token.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_completion_scheduler -- execution: get_stop_token,stop_token_of_t (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/get_completion_scheduler.html"/>
      <id>d512f5b175382335a2becad9da0311a9de99dc42:reference/execution/execution/get_completion_scheduler.md</id>
      <updated>2025-04-21T18:43:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/get_completion_scheduler.md b/reference/execution/execution/get_completion_scheduler.md
index 91fbdf5c1..6dc738598 100644
--- a/reference/execution/execution/get_completion_scheduler.md
+++ b/reference/execution/execution/get_completion_scheduler.md
@@ -11,7 +11,7 @@ namespace std::execution {
 
   template&amp;lt;class CPO&amp;gt;
   constexpr get_completion_scheduler_t&amp;lt;CPO&amp;gt; get_completion_scheduler{};
-  }
+}
 ```
 * unspecified[italic]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>prop -- execution: get_stop_token,stop_token_of_t (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/prop.html"/>
      <id>d512f5b175382335a2becad9da0311a9de99dc42:reference/execution/execution/prop.md</id>
      <updated>2025-04-21T18:43:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/prop.md b/reference/execution/execution/prop.md
index 893422d1f..e3790653f 100644
--- a/reference/execution/execution/prop.md
+++ b/reference/execution/execution/prop.md
@@ -49,7 +49,7 @@ int main()
 }
 ```
 * ex::prop[color ff0000]
-* std::get_stop_token[link get_stop_token.md.nolink]
+* std::get_stop_token[link ../get_stop_token.md]
 * std::never_stop_token[link /reference/stop_token/never_stop_token.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_stop_token -- execution: get_stop_token,stop_token_of_t (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/get_stop_token.html"/>
      <id>d512f5b175382335a2becad9da0311a9de99dc42:reference/execution/get_stop_token.md</id>
      <updated>2025-04-21T18:43:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/get_stop_token.md b/reference/execution/get_stop_token.md
new file mode 100644
index 000000000..53e7d91fc
--- /dev/null
+++ b/reference/execution/get_stop_token.md
@@ -0,0 +1,79 @@
+# get_stop_token
+* execution[meta header]
+* cpo[meta id-type]
+* std[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  struct get_stop_token_t { unspecified };
+  constexpr get_stop_token_t get_stop_token{};
+}
+```
+* unspecified[italic]
+
+## 概要
+`get_stop_token`は、[クエリ可能オブジェクト](queryable.md)から[停止トークン](/reference/stop_token/stoppable_token.md)を取得する[クエリオブジェクト](queryable.md)である。
+
+コア定数式[`forwarding_query`](forwarding_query.md.nolink)`(get_stop_token)`は`true`値を返す。
+
+
+## 効果
+式`get_stop_token(env)`は下記と等価であり、[`stoppable_token`](/reference/stop_token/stoppable_token.md)を満たす型の値となる。
+
+- 引数`env`がconst修飾された`cenv`を用いて、式`cenv.query(get_stop_token)`が有効であればその値。
+- そうでなければ、[`never_stop_token{}`](/reference/stop_token/never_stop_token.md)
+
+
+## 例外
+投げない
+
+
+## カスタマイゼーションポイント
+const修飾[クエリ可能オブジェクト](queryable.md)`env`に対して式`env.query(get_stop_token)`が呼び出される。
+このとき、`noexcept(cenv.query(get_stop_token)) == true`であること。
+
+
+## 例
+```cpp
+#include &amp;lt;concepts&amp;gt;
+#include &amp;lt;stop_token&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  // just Senderは停止トークンを持たない
+  ex::sender auto sndr = ex::just(42);
+  auto token = std::get_stop_token(ex::get_env(sndr));
+  static_assert(std::same_as&amp;lt;decltype(token), std::never_stop_token&amp;gt;);
+}
+```
+* std::get_stop_token[color ff0000]
+* ex::sender[link execution/sender.md]
+* ex::just[link execution/just.md.nolink]
+* ex::get_env[link execution/get_env.md]
+* std::never_stop_token[link /reference/stop_token/never_stop_token.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`stoppable_token`](/reference/stop_token/stoppable_token.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stop_token_of_t -- execution: get_stop_token,stop_token_of_t (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/stop_token_of_t.html"/>
      <id>d512f5b175382335a2becad9da0311a9de99dc42:reference/execution/stop_token_of_t.md</id>
      <updated>2025-04-21T18:43:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/stop_token_of_t.md b/reference/execution/stop_token_of_t.md
new file mode 100644
index 000000000..459870901
--- /dev/null
+++ b/reference/execution/stop_token_of_t.md
@@ -0,0 +1,35 @@
+# stop_token_of_t
+* execution[meta header]
+* std[meta namespace]
+* type-alias[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class T&amp;gt;
+  using stop_token_of_t = remove_cvref_t&amp;lt;decltype(get_stop_token(declval&amp;lt;T&amp;gt;()))&amp;gt;;
+}
+```
+* get_stop_token[link get_stop_token.md]
+
+## 概要
+[クエリ可能オブジェクト型](queryable.md)`T`から[停止トークン型](/reference/stop_token/stoppable_token.md)を取得する。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`get_stop_token`](get_stop_token.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>execution -- execution: get_completion_scheduler (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>3785ecf0824360bb18848fe0f4ee5c14a4deb770:reference/execution/execution.md</id>
      <updated>2025-04-21T18:00:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index 9487a1788..835352c5b 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -44,7 +44,7 @@ namespace std::execution {
 | [`execution::get_delegation_scheduler`](execution/get_delegation_scheduler.md.nolink) | 委譲Scheduler取得のクエリオブジェクト (customization point object) | C++26 |
 | [`execution::forward_progress_guarantee`](execution/forward_progress_guarantee.md.nolink) | 前進保証 (enum) | C++26 |
 | [`execution::get_forward_progress_guarantee`](execution/get_forward_progress_guarantee.md.nolink) | 前進保証取得のクエリオブジェクト (customization point object) | C++26 |
-| [`execution::get_completion_scheduler`](execution/get_completion_scheduler.md.nolink) | 完了Scheduler取得のクエリオブジェクト (customization point object) | C++26 |
+| [`execution::get_completion_scheduler`](execution/get_completion_scheduler.md) | 完了Scheduler取得のクエリオブジェクト (customization point object) | C++26 |
 | [`execution::get_env`](execution/get_env.md) | 環境取得のクエリオブジェクト (customization point object) | C++26 |
 | [`execution::env_of_t`](execution/env_of_t.md) | 指定型から環境型を取得 (alias template) | C++26 |
 | [`execution::prop`](execution/prop.md) | Key/Valueペアによる[クエリ可能オブジェクト](queryable.md) (class template) | C++26 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_completion_scheduler -- execution: get_completion_scheduler (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/get_completion_scheduler.html"/>
      <id>3785ecf0824360bb18848fe0f4ee5c14a4deb770:reference/execution/execution/get_completion_scheduler.md</id>
      <updated>2025-04-21T18:00:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/get_completion_scheduler.md b/reference/execution/execution/get_completion_scheduler.md
new file mode 100644
index 000000000..91fbdf5c1
--- /dev/null
+++ b/reference/execution/execution/get_completion_scheduler.md
@@ -0,0 +1,112 @@
+# get_completion_scheduler
+* execution[meta header]
+* cpo[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  template&amp;lt;class CPO&amp;gt;
+  struct get_completion_scheduler_t { unspecified };
+
+  template&amp;lt;class CPO&amp;gt;
+  constexpr get_completion_scheduler_t&amp;lt;CPO&amp;gt; get_completion_scheduler{};
+  }
+```
+* unspecified[italic]
+
+## 概要
+`get_completion_scheduler&amp;lt;completion-tag&amp;gt;`は、[Sender](sender.md)の[属性](get_env.md)から指定完了タグに関連付けられた完了Schedulerを取得する[クエリオブジェクト](../queryable.md)である。
+完了タグ`completion-tag`には、[`set_value_t`](set_value.md), [`set_error_t`](set_error.md), [`set_stopped_t`](set_stopped.md)のいずれかを指定する。
+
+コア定数式[`forwarding_query`](forwarding_query.md.nolink)`(get_completion_scheduler&amp;lt;completion-tag&amp;gt;)`は`true`値を返す。
+
+
+### 完了Scheduler
+完了Scheduler(completion scheduler)は、非同期操作の完了操作を実行するための実行リソース（例：CPUスレッド）と関連付けられた[Scheduler](scheduler.md)である。
+
+非同期操作の完了操作は、下記いずれかの完了関数呼び出しが該当する。
+
+- 値完了関数 [`execution::set_value`](set_value.md)
+- エラー完了関数 [`execution::set_error`](set_error.md) 
+- 停止完了関数 [`execution::set_stopped`](set_stopped.md)
+
+
+## 効果
+呼び出し式`get_completion_scheduler&amp;lt;completion-tag&amp;gt;(q)`は下記と等価であり、式が適格ならば[`scheduler`](scheduler.md)を満たす型の値となる。
+
+- 引数`q`がconst修飾された`cq`を用いて、式`cq.query(get_completion_scheduler&amp;lt;completion-tag&amp;gt;)`が適格であればその値。
+- そうでなければ、呼び出し式は不適格となる。
+
+
+## 例外
+投げない
+
+
+## カスタマイゼーションポイント
+const修飾[クエリ可能オブジェクト](../queryable.md)`cq`に対して式`cq.query(get_completion_scheduler&amp;lt;completion-tag&amp;gt;)`が呼び出される。
+このとき、`noexcept(cq.query(get_completion_scheduler&amp;lt;completion-tag&amp;gt;)) == true`であること。
+
+
+## 例
+```cpp
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  ex::run_loop loop;
+  ex::scheduler auto loop_sch = loop.get_scheduler();
+
+  // schedule(loop_sch)の完了Schedulerはloop_schに等しい
+  ex::sender auto snd0 = ex::schedule(loop_sch);
+  auto sch0 = ex::get_completion_scheduler&amp;lt;ex::set_value_t&amp;gt;(ex::get_env(snd0));
+  assert(sch0 == loop_sch);
+
+  // 完了Schedulerは接続されたSenderへと引き継がれる
+  ex::sender auto snd1 = snd0 | ex::then([]{ return 42; });
+  auto sch1 = ex::get_completion_scheduler&amp;lt;ex::set_value_t&amp;gt;(ex::get_env(snd1));
+  assert(sch1 == loop_sch);
+
+#if 0
+  // just Senderは完了Schedulerを持たない
+  ex::sender auto snd2 = ex::just(42);
+  auto sch2 = ex::get_completion_scheduler&amp;lt;ex::set_value_t&amp;gt;(ex::get_env(snd2));
+#endif
+}
+```
+* ex::get_completion_scheduler[color ff0000]
+* ex::run_loop[link run_loop.md.nolink]
+* ex::scheduler[link scheduler.md]
+* ex::sender[link sender.md]
+* ex::schedule[link schedule.md]
+* ex::set_value_t[link set_value.md]
+* ex::get_env[link get_env.md]
+* ex::then[link then.md.nolink]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::scheduler`](scheduler.md)
+- [`execution::schedule`](schedule.md)
+- [`execution::set_value`](set_value.md)
+- [`execution::set_error`](set_error.md)
+- [`execution::set_stopped`](set_stopped.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_env -- execution: get_completion_scheduler (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/get_env.html"/>
      <id>3785ecf0824360bb18848fe0f4ee5c14a4deb770:reference/execution/execution/get_env.md</id>
      <updated>2025-04-21T18:00:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/get_env.md b/reference/execution/execution/get_env.md
index a6afad75c..91f10c134 100644
--- a/reference/execution/execution/get_env.md
+++ b/reference/execution/execution/get_env.md
@@ -23,7 +23,7 @@ namespace std::execution {
 式`get_env(o)`は下記と等価であり、[`queryable`](../queryable.md)を満たす型の値となる。
 
 - 引数`o`がconst修飾された`co`を用いて、式`co.get_env()`が有効であればその値。
-- そうでなければ、空(empty)のクエリ可能オブジェクト[`env&amp;lt;&amp;gt;{}`](env.md)
+- そうでなければ、空のクエリ可能オブジェクト[`env&amp;lt;&amp;gt;{}`](env.md)
 
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>schedule -- execution: get_completion_scheduler (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/schedule.html"/>
      <id>3785ecf0824360bb18848fe0f4ee5c14a4deb770:reference/execution/execution/schedule.md</id>
      <updated>2025-04-21T18:00:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/schedule.md b/reference/execution/execution/schedule.md
index 8bd90c80c..519e98b5f 100644
--- a/reference/execution/execution/schedule.md
+++ b/reference/execution/execution/schedule.md
@@ -16,12 +16,13 @@ namespace std::execution {
 `schedule`は、[Scheduler](scheduler.md)から[スケジュールSender](sender.md)を取得するSenderファクトリである。
 
 スケジュールSenderより生成される[非同期操作](operation_state.md)を開始すると、Schedulerに関連付けられた実行リソース上で空の[値完了関数](set_value.md)を呼び出す。
+スケジュールSenderの[値完了Scheduler](get_completion_scheduler.md)は、引数に指定したScheduler`sch`に等しい。
 
 
 ## 効果
 呼び出し式`schedule(sch)`は式`sch.schedule()`と等価であり、式の型は[`sender`](sender.md)を満たすこと。
 
-式[`get_completion_scheduler`](get_completion_scheduler.md.nolink)`&amp;lt;`[`set_value_t`](set_value.md)`&amp;gt;(`[`get_env`](get_env.md)`(sch.schedule())) == sch`が不適格もしくは`false`となる場合、呼び出し式`schedule(sch)`の動作は未定義となる。
+式[`get_completion_scheduler`](get_completion_scheduler.md)`&amp;lt;`[`set_value_t`](set_value.md)`&amp;gt;(`[`get_env`](get_env.md)`(sch.schedule())) == sch`が不適格もしくは`false`となる場合、呼び出し式`schedule(sch)`の動作は未定義となる。
 
 
 ## カスタマイゼーションポイント
@@ -93,6 +94,7 @@ val=42
 
 ## 関連項目
 - [`execution::scheduler`](scheduler.md)
+- [`execution::get_completion_scheduler`](get_completion_scheduler.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>scheduler -- execution: get_completion_scheduler (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/scheduler.html"/>
      <id>3785ecf0824360bb18848fe0f4ee5c14a4deb770:reference/execution/execution/scheduler.md</id>
      <updated>2025-04-21T18:00:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/scheduler.md b/reference/execution/execution/scheduler.md
index 427727a05..1cbe9d0ab 100644
--- a/reference/execution/execution/scheduler.md
+++ b/reference/execution/execution/scheduler.md
@@ -26,7 +26,7 @@ namespace std::execution {
 * sender[link sender.md]
 * queryable[link ../queryable.md]
 * schedule[link schedule.md]
-* get_completion_scheduler[link get_completion_scheduler.md.nolink]
+* get_completion_scheduler[link get_completion_scheduler.md]
 * set_value_t[link set_value.md]
 * get_env[link get_env.md]
 * equality_comparable[link /reference/concepts/equality_comparable.md]
@@ -41,7 +41,7 @@ namespace std::execution {
 - [クエリ可能オブジェクト](../queryable.md)である
 - `Sch`型の値`sch`に対して下記を満たすこと
     - [`execution::schedule`](schedule.md)`(sch)`が[Sender](sender.md)を返す
-    - 上記Senderの[値完了関数](set_value.md)の[完了Scheduler](get_completion_scheduler.md.nolink)が`Sch`に等しいこと
+    - 上記Senderの[値完了関数](set_value.md)の[完了Scheduler](get_completion_scheduler.md)が`Sch`に等しいこと
 - コピー可能かつ同値比較可能
 
 
@@ -66,14 +66,14 @@ namespace std::execution {
 * value_types_of_t[link value_types_of_t.md.nolink]
 * type_identity_t[link /reference/type_traits/true_type.md]
 
-型`Sch`を`scheduler`の型、型`Env`を[`sender_in`](sender_in.md)`&amp;lt;schedule_result_t&amp;lt;Sch&amp;gt;, Env&amp;gt;`を満たす実行環境の型としたとき、`sender-in-of&amp;lt;schedule_result_t&amp;lt;Sch&amp;gt;, Env&amp;gt;`のモデルとなること。
+型`Sch`を`scheduler`の型、型`Env`を[`sender_in`](sender_in.md)`&amp;lt;`[`schedule_result_t`](schedule_result_t.md)`&amp;lt;Sch&amp;gt;, Env&amp;gt;`を満たす実行環境の型としたとき、`sender-in-of&amp;lt;`[`schedule_result_t`](schedule_result_t.md)`&amp;lt;Sch&amp;gt;, Env&amp;gt;`のモデルとなること。
 
 [`copyable`](/reference/concepts/copyable.md)`&amp;lt;remove_cvref_t&amp;lt;Sch&amp;gt;&amp;gt;`および[`equality_comparable`](/reference/concepts/equality_comparable.md)`&amp;lt;remove_cvref_t&amp;lt;Sch&amp;gt;&amp;gt;`により要求される操作は、例外で終了してはならない。
 これらの操作やScheduler型の[`schedule`](schedule.md)関数は、異なるスレッドから同時に操作を呼び出す可能性がある場合でも、データ競合を引き起こしてはならない。
 
 あるScheduler型`Sch`の2つの値`sch1`と`sch2`に対して、`sch1`と`sch2`が同じ実行リソースを共有する場合に限って、`sch1 == sch2`は`true`となる。
 
-あるScheduler`sch`に対して、式[`get_completion_scheduler`](get_completion_scheduler.md.nolink)`&amp;lt;`[`set_value_t`](set_value.md)`&amp;gt;(`[`get_env`](get_env.md)`(`[`schedule`](schedule.md)`(sch)))`が`sch`と等しいこと。
+あるScheduler`sch`に対して、式[`get_completion_scheduler`](get_completion_scheduler.md)`&amp;lt;`[`set_value_t`](set_value.md)`&amp;gt;(`[`get_env`](get_env.md)`(`[`schedule`](schedule.md)`(sch)))`が`sch`と等しいこと。
 
 あるScheduler`sch`に対して式[`get_domain`](get_domain.md.nolink)`(sch)`が適格であるとき、式`get_domain(`[`get_env`](get_env.md)`(`[`schedule`](schedule.md)`(sch)))`も適格であり、かつ同じ型を持つ。
 
@@ -113,6 +113,7 @@ int main()
 
 ## 関連項目
 - [`execution::schedule`](schedule.md)
+- [`execution::get_completion_scheduler`](get_completion_scheduler.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>queryable -- execution: get_completion_scheduler (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/queryable.html"/>
      <id>3785ecf0824360bb18848fe0f4ee5c14a4deb770:reference/execution/queryable.md</id>
      <updated>2025-04-21T18:00:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/queryable.md b/reference/execution/queryable.md
index f5f95c9b9..b6caabdc0 100644
--- a/reference/execution/queryable.md
+++ b/reference/execution/queryable.md
@@ -11,13 +11,13 @@ concept queryable = destructible&amp;lt;T&amp;gt;;
 * destructible[link /reference/concepts/destructible.md]
 
 ## 概要
-`queryable`は、型`T`がクエリ可能オブジェクト(queryable object)の制約を満たすことを表す説明専用のコンセプトである。
+`queryable`は、型`T`がクエリ可能オブジェクトの制約を満たすことを表す説明専用のコンセプトである。
 
 
-### クエリ可能オブジェクト
-クエリ可能オブジェクトは、クエリオブジェクト(query object)をキーとして対応する値を保持する、読み取り専用のKey/Valueデータ構造とみなせる。
+### クエリ可能オブジェクト(queryable object)
+クエリ可能オブジェクトは、クエリオブジェクトをキーとして対応する値を保持する、読み取り専用のKey/Valueデータ構造とみなせる。
 
-- [`execution::env&amp;lt;&amp;gt;{}`](execution/env.md) : 空(empty)のクエリ可能オブジェクト
+- [`execution::env&amp;lt;&amp;gt;{}`](execution/env.md) : 空のクエリ可能オブジェクト
 - [`execution::prop(q, v)`](execution/prop.md) : キー`q`と対応値`v`を保持する最小のクエリ可能オブジェクト
 - [`execution::env{...}`](execution/env.md) : 複数のKey/Valueを保持するクエリ可能オブジェクト
 - `queryable`コンセプトを満たすユーザ定義クラスのオブジェクト
@@ -29,6 +29,16 @@ concept queryable = destructible&amp;lt;T&amp;gt;;
 - [Scheduler](execution/scheduler.md)オブジェクト自身
 
 
+### クエリオブジェクト(query object)
+クエリオブジェクトは、クエリ可能オブジェクトに対する問い合わせ(query)を行うカスタマイゼーションポイントオブジェクトである。
+
+説明用のクエリオブジェクト`q`、クエリ可能オブジェクト`env`、引数パック`args`としたとき
+
+- 問い合わせ式`q(env, args...)`は、`void`型であってはならない。
+- 問い合わせ式`q(env, args...)`は、クエリオブジェクトや引数を変更せず、等しさを保持(equality-preserving)する。
+- 式`env.query(q, args...)`が適格であれば、問い合わせ式`q(env, args...)`と等価である。
+
+
 ## モデル
 説明用の`env`を`Env`型のオブジェクトとする。
 呼び出し可能オブジェクト`q`と部分式パック`args`に対して、`requires { q(env, args...) }`が`true`であれば、`q(env, args...)`が`q`に課されるセマンティック要件を満たす場合に、`Env`は`queryable`のモデルである。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>契約プログラミング [P2900R14] -- lang/cpp26/contracts.md: Removed zero-width space</title>
      <link href="https://cpprefjp.github.io/lang/cpp26/contracts.html"/>
      <id>148bb8c64c8f9f14e08b00ec1be607102c9d40d1:lang/cpp26/contracts.md</id>
      <updated>2025-04-20T23:00:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp26/contracts.md b/lang/cpp26/contracts.md
index 2681cba7d..f8af8f946 100644
--- a/lang/cpp26/contracts.md
+++ b/lang/cpp26/contracts.md
@@ -95,7 +95,7 @@ g++ -std=c++26 -fcontracts -fcontract-semantic=observe main.cpp
 のように指定できる。
 
 ### 契約違反ハンドラ
-契約違反が発生した場合、`std::contracts::contract_violation`型の情報（&amp;amp;lt;contracts&amp;amp;gt;ヘッダー）がハンドラに渡されます。​この情報には、違反の種類、発生場所、違反した条件式などが含まれます。
+契約違反が発生した場合、`std::contracts::contract_violation`型の情報（&amp;amp;lt;contracts&amp;amp;gt;ヘッダー）がハンドラに渡されます。この情報には、違反の種類、発生場所、違反した条件式などが含まれます。
 
 ### 使用上の注意
 以下の操作は、気をつけなければならない。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
</feed>
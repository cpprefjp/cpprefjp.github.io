<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-11-24T08:57:49.429390</updated>
  <id>558c08cd-3b5b-4f23-9453-beb519a5514f</id>

  
    <entry>
      <title>what -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/filesystem_error/what.html"/>
      <id>37290198e34bc2e9d6e0714c0c18a7b415b91fe4:reference/filesystem/filesystem_error/what.md</id>
      <updated>2020-11-24T17:53:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/filesystem_error/what.md b/reference/filesystem/filesystem_error/what.md
index 7799638a6..1bd430f4d 100644
--- a/reference/filesystem/filesystem_error/what.md
+++ b/reference/filesystem/filesystem_error/what.md
@@ -16,7 +16,7 @@ const char* what() const noexcept override;
 ## 戻り値
 コンストラクタで設定されたエラー理由を含む未規定のフォーマットの実装定義の文字列を返す。
 
-実装は、[`system_error`](/reference/system_error/system_error.md)`::`[`what()`](/reference/system_error/system_error/what.md)で返される文字列とネイティブ形式の`path1`と`path2`を含める必要がある。
+実装は、[`system_error`](/reference/system_error/system_error.md)`::what()`で返される文字列とネイティブ形式の`path1`と`path2`を含める必要がある。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>what -- filesystem_error::what : 戻り値の詳細を記載</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/filesystem_error/what.html"/>
      <id>9f4447eeb7446f37f378c58a33d9e7d061ebb56a:reference/filesystem/filesystem_error/what.md</id>
      <updated>2020-11-24T17:46:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/filesystem_error/what.md b/reference/filesystem/filesystem_error/what.md
index 330fe7ff8..7799638a6 100644
--- a/reference/filesystem/filesystem_error/what.md
+++ b/reference/filesystem/filesystem_error/what.md
@@ -14,7 +14,9 @@ const char* what() const noexcept override;
 
 
 ## 戻り値
-コンストラクタで設定されたエラー理由の文字列を返す。
+コンストラクタで設定されたエラー理由を含む未規定のフォーマットの実装定義の文字列を返す。
+
+実装は、[`system_error`](/reference/system_error/system_error.md)`::`[`what()`](/reference/system_error/system_error/what.md)で返される文字列とネイティブ形式の`path1`と`path2`を含める必要がある。
 
 
 ## 例
@@ -54,3 +56,7 @@ filesystem error: can&amp;#39;t copy file. source file doesn&amp;#39;t found: No such file or di
 - [Clang](/implementation.md#clang):
 - [GCC](/implementation.md#gcc): 8.1
 - [Visual C++](/implementation.md#visual_cpp):
+
+
+## 参照
+- [LWG Issue 3043. Bogus postcondition for `filesystem_error` constructor](https://wg21.cmeerw.net/lwg/issue3043)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_literal_type -- is_literal_type_v : inline対応のissueを参照に追加</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/is_literal_type.html"/>
      <id>0f25a4e13f9b14ad554896223ca3687a13a21fa6:reference/type_traits/is_literal_type.md</id>
      <updated>2020-11-24T17:27:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/is_literal_type.md b/reference/type_traits/is_literal_type.md
index 244883aa8..927fd9b9e 100644
--- a/reference/type_traits/is_literal_type.md
+++ b/reference/type_traits/is_literal_type.md
@@ -93,3 +93,4 @@ Clang 3.0では、上記サンプルにおける`X`型が、リテラル型と
 - [P0006R0 Adopt Type Traits Variable Templates from Library Fundamentals TS for C++17](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0006r0.html)
 - [P0174R2 Deprecating Vestigial Library Parts in C++17](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0174r2.html)
 - [P0619R4 Reviewing deprecated facilities of C++17 for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0619r4.html)
+- [LWG Issue `is_literal_type_v` should be `inline`](https://wg21.cmeerw.net/lwg/issue3042)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copy -- filesystem : noexceptをいくつか外した</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/copy.html"/>
      <id>eae6ded8fe190a5b331b77816e9461fd1bec8045:reference/filesystem/copy.md</id>
      <updated>2020-11-24T17:23:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/copy.md b/reference/filesystem/copy.md
index 0475ee7fe..6a4ff6215 100644
--- a/reference/filesystem/copy.md
+++ b/reference/filesystem/copy.md
@@ -195,3 +195,4 @@ int main()
 - [LWG Issue 2682. `filesystem::copy()` won&amp;#39;t create a symlink to a directory](https://wg21.cmeerw.net/lwg/issue2682)
     - C++17策定同時の仕様では、`copy(&amp;#34;/&amp;#34;, &amp;#34;root&amp;#34;, copy_options::create_symlinks);`のような状況 (コピー元がディレクトリで、`create_symlinks`オプション付き) でコピー先ディレクトリにシンボリックリンクが作られない問題があった。GNUの`cp -s`コマンドでは「ディレクトリ`&amp;#34;/&amp;#34;`の処理は省略された」と表示されてエラー終了する。この問題に対する仕様変更ではその動作に合わせて、コピー元がディレクトリで`create_symlinks`オプションが指定された場合、エラーを報告するようになった
     - この問題は2016年4月に報告された。仕様としてはC++20に含まれるが、過去に遡ってC++17のコンパイラでもこの仕様に対応している可能性がある
+- [LWG Issue 3013. `(recursive_)directory_iterator` construction and traversal should not be `noexcept`](https://wg21.cmeerw.net/lwg/issue3013)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>increment -- filesystem : noexceptをいくつか外した</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/directory_iterator/increment.html"/>
      <id>eae6ded8fe190a5b331b77816e9461fd1bec8045:reference/filesystem/directory_iterator/increment.md</id>
      <updated>2020-11-24T17:23:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/directory_iterator/increment.md b/reference/filesystem/directory_iterator/increment.md
index c317a14fd..cba9bb553 100644
--- a/reference/filesystem/directory_iterator/increment.md
+++ b/reference/filesystem/directory_iterator/increment.md
@@ -6,7 +6,7 @@
 * cpp17[meta cpp]
 
 ```cpp
-directory_iterator&amp;amp; increment(std::error_code&amp;amp; ec) noexcept;
+directory_iterator&amp;amp; increment(std::error_code&amp;amp; ec);
 ```
 
 ## 概要
@@ -70,3 +70,7 @@ after  : &amp;#34;dir/a.txt&amp;#34;
 - [Clang](/implementation.md#clang): 7.0
 - [GCC](/implementation.md#gcc): 8.1
 - [Visual C++](/implementation.md#visual_cpp):
+
+
+## 参照
+- [LWG Issue 3013. `(recursive_)directory_iterator` construction and traversal should not be `noexcept`](https://wg21.cmeerw.net/lwg/issue3013)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- filesystem : noexceptをいくつか外した</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/directory_iterator/op_constructor.html"/>
      <id>eae6ded8fe190a5b331b77816e9461fd1bec8045:reference/filesystem/directory_iterator/op_constructor.md</id>
      <updated>2020-11-24T17:23:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/directory_iterator/op_constructor.md b/reference/filesystem/directory_iterator/op_constructor.md
index eef67f53d..0bb967aef 100644
--- a/reference/filesystem/directory_iterator/op_constructor.md
+++ b/reference/filesystem/directory_iterator/op_constructor.md
@@ -11,10 +11,10 @@ explicit directory_iterator(const path&amp;amp; p);            // (2)
 directory_iterator(const path&amp;amp; p,
                    directory_options options);         // (3)
 directory_iterator(const path&amp;amp; p,
-                   std::error_code&amp;amp; ec) noexcept;      // (4)
+                   std::error_code&amp;amp; ec);               // (4)
 directory_iterator(const path&amp;amp; p,
                    directory_options options,
-                   std::error_code&amp;amp; ec) noexcept;      // (5)
+                   std::error_code&amp;amp; ec);               // (5)
 directory_iterator(const directory_iterator&amp;amp; rhs);     // (6)
 directory_iterator(directory_iterator&amp;amp;&amp;amp; rhs) noexcept; // (7)
 ```
@@ -112,3 +112,7 @@ int main()
 - [Clang](/implementation.md#clang): 7.0
 - [GCC](/implementation.md#gcc): 8.1
 - [Visual C++](/implementation.md#visual_cpp):
+
+
+## 参照
+- [LWG Issue 3013. `(recursive_)directory_iterator` construction and traversal should not be `noexcept`](https://wg21.cmeerw.net/lwg/issue3013)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_empty -- filesystem : noexceptをいくつか外した</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/is_empty.html"/>
      <id>eae6ded8fe190a5b331b77816e9461fd1bec8045:reference/filesystem/is_empty.md</id>
      <updated>2020-11-24T17:23:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/is_empty.md b/reference/filesystem/is_empty.md
index 22b322634..e1f58b814 100644
--- a/reference/filesystem/is_empty.md
+++ b/reference/filesystem/is_empty.md
@@ -6,8 +6,8 @@
 
 ```cpp
 namespace std::filesystem {
-  bool is_empty(const path&amp;amp; p);                               // (1)
-  bool is_empty(const path&amp;amp; p, std::error_code&amp;amp; ec) noexcept; // (2)
+  bool is_empty(const path&amp;amp; p);                      // (1)
+  bool is_empty(const path&amp;amp; p, std::error_code&amp;amp; ec); // (2)
 }
 ```
 * path[link path.md]
@@ -77,3 +77,7 @@ int main()
 - [Clang](/implementation.md#clang): 7.0
 - [GCC](/implementation.md#gcc): 8.1
 - [Visual C++](/implementation.md#visual_cpp):
+
+
+## 参照
+- [LWG Issue 3013. `(recursive_)directory_iterator` construction and traversal should not be `noexcept`](https://wg21.cmeerw.net/lwg/issue3013)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>increment -- filesystem : noexceptをいくつか外した</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/recursive_directory_iterator/increment.html"/>
      <id>eae6ded8fe190a5b331b77816e9461fd1bec8045:reference/filesystem/recursive_directory_iterator/increment.md</id>
      <updated>2020-11-24T17:23:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/recursive_directory_iterator/increment.md b/reference/filesystem/recursive_directory_iterator/increment.md
index 718d84ab8..51f1bffcd 100644
--- a/reference/filesystem/recursive_directory_iterator/increment.md
+++ b/reference/filesystem/recursive_directory_iterator/increment.md
@@ -6,7 +6,7 @@
 * cpp17[meta cpp]
 
 ```cpp
-recursive_directory_iterator&amp;amp; increment(std::error_code&amp;amp; ec) noexcept;
+recursive_directory_iterator&amp;amp; increment(std::error_code&amp;amp; ec);
 ```
 
 ## 概要
@@ -70,3 +70,7 @@ after  : &amp;#34;dir/a.txt&amp;#34;
 - [Clang](/implementation.md#clang): 7.0
 - [GCC](/implementation.md#gcc): 8.1
 - [Visual C++](/implementation.md#visual_cpp):
+
+
+## 参照
+- [LWG Issue 3013. `(recursive_)directory_iterator` construction and traversal should not be `noexcept`](https://wg21.cmeerw.net/lwg/issue3013)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- filesystem : noexceptをいくつか外した</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/recursive_directory_iterator/op_constructor.html"/>
      <id>eae6ded8fe190a5b331b77816e9461fd1bec8045:reference/filesystem/recursive_directory_iterator/op_constructor.md</id>
      <updated>2020-11-24T17:23:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/recursive_directory_iterator/op_constructor.md b/reference/filesystem/recursive_directory_iterator/op_constructor.md
index 4b146ca2a..57545d5b3 100644
--- a/reference/filesystem/recursive_directory_iterator/op_constructor.md
+++ b/reference/filesystem/recursive_directory_iterator/op_constructor.md
@@ -11,10 +11,10 @@ explicit recursive_directory_iterator(const path&amp;amp; p);            // (2)
 recursive_directory_iterator(const path&amp;amp; p,
                    directory_options options);                   // (3)
 recursive_directory_iterator(const path&amp;amp; p,
-                   std::error_code&amp;amp; ec) noexcept;                // (4)
+                   std::error_code&amp;amp; ec);                         // (4)
 recursive_directory_iterator(const path&amp;amp; p,
                    directory_options options,
-                   std::error_code&amp;amp; ec) noexcept;                // (5)
+                   std::error_code&amp;amp; ec);                         // (5)
 recursive_directory_iterator(const directory_iterator&amp;amp; rhs);     // (6)
 recursive_directory_iterator(directory_iterator&amp;amp;&amp;amp; rhs) noexcept; // (7)
 ```
@@ -114,3 +114,7 @@ int main()
 - [Clang](/implementation.md#clang): 7.0
 - [GCC](/implementation.md#gcc): 8.1
 - [Visual C++](/implementation.md#visual_cpp):
+
+
+## 参照
+- [LWG Issue 3013. `(recursive_)directory_iterator` construction and traversal should not be `noexcept`](https://wg21.cmeerw.net/lwg/issue3013)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- leap_second : operator&lt;=&gt;の制約見直しに対応</title>
      <link href="https://cpprefjp.github.io/reference/chrono/leap_second/op_compare_3way.html"/>
      <id>a76aeeabcf7b0f6852f01ade4fd40c4dcf840b40:reference/chrono/leap_second/op_compare_3way.md</id>
      <updated>2020-11-24T17:00:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/leap_second/op_compare_3way.md b/reference/chrono/leap_second/op_compare_3way.md
index f47435620..c3e2b584d 100644
--- a/reference/chrono/leap_second/op_compare_3way.md
+++ b/reference/chrono/leap_second/op_compare_3way.md
@@ -9,7 +9,8 @@ namespace std::chrono {
   constexpr strong_ordering
     operator&amp;lt;=&amp;gt;(const leap_second&amp;amp; x, const leap_second&amp;amp; y) noexcept;        // (1) C++20
 
-  template &amp;lt;three_way_comparable_with&amp;lt;sys_seconds&amp;gt; Duration&amp;gt;
+  template &amp;lt;class Duration&amp;gt;
+    requires three_way_comparable_with&amp;lt;sys_seconds, sys_time&amp;lt;Duration&amp;gt;&amp;gt;
   constexpr auto
     operator&amp;lt;=&amp;gt;(const leap_second&amp;amp; x, const sys_time&amp;lt;Duration&amp;gt;&amp;amp; y) noexcept; // (2) C++20
 }
@@ -55,3 +56,7 @@ namespace std::chrono {
 - [Clang](/implementation.md#clang): (9.0時点で実装なし)
 - [GCC](/implementation.md#gcc): (9.2時点で実装なし)
 - [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+
+## 参照
+- [LWG Issue 3383. §[time.zone.leap.nonmembers] `sys_seconds` should be replaced with `seconds`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2117r0.html#3383)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-07-02T03:55:21.611187</updated>
  <id>4359b4cb-8ebb-4016-90f3-16013f4988dd</id>

  
    <entry>
      <title>charconv -- improve &lt;charconv&gt;</title>
      <link href="https://cpprefjp.github.io/reference/charconv.html"/>
      <id>be3b1439fbb6c27137451b60c305739abfc1165c:reference/charconv.md</id>
      <updated>2025-07-01T21:03:30+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;charconv&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;charconv&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;charconv&amp;gt;&lt;/code&gt;ヘッダでは、ロケール依存なし、フォーマット解析なしの高速な文字列・数値変換を提供する。&lt;/p&gt;
&lt;p&gt;これらの変換は以下のような特徴がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;フォーマットは引数で指定し、入力値のフォーマットを実行時に解析することはない&lt;/li&gt;
&lt;li&gt;動的にメモリ確保を行わない&lt;/li&gt;
&lt;li&gt;ロケールを考慮しない（Cロケール (POSIXロケール) 固定）&lt;/li&gt;
&lt;li&gt;バッファオーバーランしない&lt;/li&gt;
&lt;li&gt;例外を投げない（エラーは戻り値で表現、エラーと有効値は区別可能）&lt;/li&gt;
&lt;li&gt;使用可能なフォーマットは最小限&lt;ul&gt;
&lt;li&gt;スペースが現れた場合はそこで変換終了&lt;/li&gt;
&lt;li&gt;浮動小数点数の指数部以外の&lt;code&gt;+&lt;/code&gt;符号は考慮されない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt;による小数点以下の桁数指定はできない&lt;/li&gt;
&lt;li&gt;16進数に&lt;code&gt;0x&lt;/code&gt;は付けられない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;文字列 ⇔ 数値変換関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;charconv/to_chars.html&#34;&gt;to_chars&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数値 → 文字列の変換&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;charconv/from_chars.html&#34;&gt;from_chars&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列 → 数値の変換&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;クラス&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;charconv/chars_format.html&#34;&gt;chars_format&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;変換時の浮動小数点フォーマット指定のための列挙体&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;charconv/to_chars_result.html&#34;&gt;to_chars_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;charconv/to_chars.html&#34;&gt;to_chars&lt;/a&gt;&lt;/code&gt;の結果型&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;charconv/from_chars_result.html&#34;&gt;from_chars_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;charconv/from_chars.html&#34;&gt;from_chars&lt;/a&gt;&lt;/code&gt;の結果型&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;導入された経緯&lt;/h2&gt;
&lt;p&gt;XMLやJSONに代表されるテキストベースのデータを利用するケースが増えており、C++においてそれを利用するケースも増加している。
それらは多くの場合コンピュータによって生成されコンピュータによって読まれるため国際化対応の必要がなく、生成する側でも読む側でもロケールに非依存であり、考慮するべきではない。&lt;br /&gt;
そして、これらのデータは多くの場合通信に利用されており高いスループットを要求される。&lt;/p&gt;
&lt;p&gt;しかし、C++17未満の環境で利用可能であった文字列変換法はいずれもロケールに依存しておりロケール非依存な変換が提供されていなかったうえに、いずれの方法も動的なフォーマットの解析・指定や動的メモリ確保、エラー報告の不足等何かしら使いにくい所があった。&lt;br /&gt;
動的なフォーマット解析はコンパイル時のフォーマットチェック及び選択を妨げ、（&lt;code&gt;iostream&lt;/code&gt;のマニピュレータのような）動的なフォーマット指定はその状態のスレッド間共有が必要になるため好ましくなく、動的メモリ確保を行わず変換エラーは区別できることが望ましい。&lt;/p&gt;
&lt;p&gt;また、浮動小数点数を10進文字列→2進浮動小数点数→10進文字列と変換した時に最初と最後の文字列が一致する保証がある変換方法も提供されていなかった。&lt;/p&gt;
&lt;p&gt;各変換方法とその問題点&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;関数&lt;/th&gt;
&lt;th&gt;欠点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sprintf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール依存、フォーマットの動的解析、バッファオーバーランの危険性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;snprintf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール依存、フォーマットの動的解析&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sscanf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール依存、フォーマットの動的解析&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール依存、エラー報告の不足&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール依存、先頭ホワイトスペースの無視、接頭辞(0x等)を考慮する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strstream&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール依存、先頭ホワイトスペースの無視&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;stringstream&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール依存、先頭ホワイトスペースの無視、動的メモリ確保&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;num_put / num_get facets&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール依存、仮想関数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;to_string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール依存、動的メモリ確保&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;stoi&lt;/code&gt;等&lt;/td&gt;
&lt;td&gt;ロケール依存、動的メモリ確保、先頭ホワイトスペースの無視、接頭辞(0x等)を考慮する、例外の送出&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;これらの問題がなく高速な文字列・数値変換を提供するために、本ヘッダ及び&lt;code&gt;to_chars, from_chars&lt;/code&gt;関数が導入された。各関数の特徴は冒頭及び個別のページを参照のこと。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++17&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 7.0(整数のみ) &lt;span aria-label=&#34;検証済&#34; role=&#34;img&#34; title=&#34;検証済&#34;&gt;✅&lt;/span&gt;, 14.0(to_chars()のみ浮動小数点もsupport), 20.1(from_chars()もdouble, floatをsupport) &lt;span aria-label=&#34;検証済&#34; role=&#34;img&#34; title=&#34;検証済&#34;&gt;✅&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: 8.0(整数のみ) &lt;span aria-label=&#34;検証済&#34; role=&#34;img&#34; title=&#34;検証済&#34;&gt;✅&lt;/span&gt;, 11.1(full support) &lt;span aria-label=&#34;検証済&#34; role=&#34;img&#34; title=&#34;検証済&#34;&gt;✅&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 2017 update 7(整数のみ) &lt;span aria-label=&#34;検証済&#34; role=&#34;img&#34; title=&#34;検証済&#34;&gt;✅&lt;/span&gt;, update 9(full support) &lt;span aria-label=&#34;検証済&#34; role=&#34;img&#34; title=&#34;検証済&#34;&gt;✅&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://faithandbrave.hateblo.jp/entry/2016/08/24/181540&#34; target=&#34;_blank&#34;&gt;C++1z ロケール依存なし、フォーマット解析なしの高速な文字列・数値変換 - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0067r0.html&#34; target=&#34;_blank&#34;&gt;P0067R0 Elementary string conversions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0067r1.html&#34; target=&#34;_blank&#34;&gt;P0067R1 Elementary string conversions, revision 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0067r2.html&#34; target=&#34;_blank&#34;&gt;P0067R2 Elementary string conversions, revision 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0067r3.html&#34; target=&#34;_blank&#34;&gt;P0067R3 Elementary string conversions, revision 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0067r4.html&#34; target=&#34;_blank&#34;&gt;P0067R4 Elementary string conversions, revision 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0067r5.html&#34; target=&#34;_blank&#34;&gt;P0067R5 Elementary string conversions, revision 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0682r1.html&#34; target=&#34;_blank&#34;&gt;P0682R1: Repairing elementary string conversions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://open-std.org/JTC1/SC22/WG21/docs/papers/2015/n4412.html&#34; target=&#34;_blank&#34;&gt;N4412: Shortcomings of iostreams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wg21.cmeerw.net/lwg/issue3080&#34; target=&#34;_blank&#34;&gt;LWG Issue 3080. Floating point from_chars pattern specification breaks round-tripping&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_chars -- improve &lt;charconv&gt;</title>
      <link href="https://cpprefjp.github.io/reference/charconv/from_chars.html"/>
      <id>be3b1439fbb6c27137451b60c305739abfc1165c:reference/charconv/from_chars.md</id>
      <updated>2025-07-01T21:03:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/charconv/from_chars.md b/reference/charconv/from_chars.md
index 03215c68a..352832016 100644
--- a/reference/charconv/from_chars.md
+++ b/reference/charconv/from_chars.md
@@ -514,7 +514,7 @@ int main() {
 - C++17
 
 ### 処理系
-- [Clang](/implementation.md#clang): 7.0(整数のみ) [mark verified]
+- [Clang](/implementation.md#clang): 7.0(整数のみ), 20.1(from_chars()もdouble, floatをsupport) [mark verified]
 - [GCC](/implementation.md#gcc): 8.0(整数のみ) [mark verified], 11.1(full support) [mark verified]
 - [Visual C++](/implementation.md#visual_cpp): 2017 update 7(整数のみ) [mark verified], update 9(full support) [mark verified]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_chars -- improve &lt;charconv&gt;</title>
      <link href="https://cpprefjp.github.io/reference/charconv/to_chars.html"/>
      <id>be3b1439fbb6c27137451b60c305739abfc1165c:reference/charconv/to_chars.md</id>
      <updated>2025-07-01T21:03:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/charconv/to_chars.md b/reference/charconv/to_chars.md
index 26417c913..e3f267787 100644
--- a/reference/charconv/to_chars.md
+++ b/reference/charconv/to_chars.md
@@ -396,10 +396,12 @@ z
 - C++17
 
 ### 処理系
-- [Clang](/implementation.md#clang): 7.0(整数のみ) [mark verified], 14.0(full support) [mark verified]
+- [Clang](/implementation.md#clang): 7.0(整数のみ) [mark verified], 14.0(full support ※) [mark verified]
 - [GCC](/implementation.md#gcc): 8.0(整数のみ) [mark verified], 11.1(full support) [mark verified]
 - [Visual C++](/implementation.md#visual_cpp): 2017 update 7(整数のみ) [mark verified], update 9(full support) [mark verified]
 
+※ Clangの実装では、(8), (12)は第３引数のlong double変数が関数内でdouble型に変換される。
+
 ## 関連項目
 - [`chars_format`](../charconv/chars_format.md)
 - [`to_chars_result`](../charconv/to_chars_result.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contains_subrange -- タイトルの間違いを修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_contains_subrange.html"/>
      <id>4f4fdfb987f51eaf72cf6e4bb4df98612f035ced:reference/algorithm/ranges_contains_subrange.md</id>
      <updated>2025-07-01T17:10:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_contains_subrange.md b/reference/algorithm/ranges_contains_subrange.md
index 460c17b48..9be4d01fe 100644
--- a/reference/algorithm/ranges_contains_subrange.md
+++ b/reference/algorithm/ranges_contains_subrange.md
@@ -1,4 +1,4 @@
-# search
+# contains_subrange
 * algorithm[meta header]
 * std::ranges[meta namespace]
 * function template[meta id-type]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>index -- タイトルの間違いを修正</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_indexed/index.html"/>
      <id>4f4fdfb987f51eaf72cf6e4bb4df98612f035ced:reference/chrono/weekday_indexed/index.md</id>
      <updated>2025-07-01T17:10:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_indexed/index.md b/reference/chrono/weekday_indexed/index.md
index cb7053089..52651980d 100644
--- a/reference/chrono/weekday_indexed/index.md
+++ b/reference/chrono/weekday_indexed/index.md
@@ -1,4 +1,4 @@
-# weekday
+# index
 * chrono[meta header]
 * std::chrono[meta namespace]
 * weekday_indexed[meta class]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_allocator -- タイトルの間違いを修正</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/get_allocator.html"/>
      <id>4f4fdfb987f51eaf72cf6e4bb4df98612f035ced:reference/stacktrace/basic_stacktrace/get_allocator.md</id>
      <updated>2025-07-01T17:10:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/get_allocator.md b/reference/stacktrace/basic_stacktrace/get_allocator.md
index 44153124c..41a87e8ae 100644
--- a/reference/stacktrace/basic_stacktrace/get_allocator.md
+++ b/reference/stacktrace/basic_stacktrace/get_allocator.md
@@ -1,4 +1,4 @@
-# max_size
+# get_allocator
 * stacktrace[meta header]
 * std[meta namespace]
 * basic_stacktrace[meta class]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>shrink_to_fit -- improve std::vector::shrink_to_fit()</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/shrink_to_fit.html"/>
      <id>88ba553f248e6237f9bb24e603f54ada47725bd2:reference/vector/vector/shrink_to_fit.md</id>
      <updated>2025-06-30T21:27:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/shrink_to_fit.md b/reference/vector/vector/shrink_to_fit.md
index 686f2ad5a..8224094cf 100644
--- a/reference/vector/vector/shrink_to_fit.md
+++ b/reference/vector/vector/shrink_to_fit.md
@@ -53,13 +53,13 @@ int main()
   // 領域を切り詰める
   v.shrink_to_fit();
   std::cout &amp;lt;&amp;lt; v.capacity() &amp;lt;&amp;lt; std::endl;
-  assert(v.capacity() == v.size());
 }
 ```
 * shrink_to_fit()[color ff0000]
 * v.capacity()[link capacity.md]
+* v.erase[link erase.md]
 
-### 出力
+### 出力例
 ```
 3
 3
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>compare_three_way_result -- クラス定義の後のセミコロン忘れを修正</title>
      <link href="https://cpprefjp.github.io/reference/compare/compare_three_way_result.html"/>
      <id>0328c1179dd1c665ec5d8485801c14a4da9555e1:reference/compare/compare_three_way_result.md</id>
      <updated>2025-06-30T14:34:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/compare_three_way_result.md b/reference/compare/compare_three_way_result.md
index 9728ea4d2..f47860679 100644
--- a/reference/compare/compare_three_way_result.md
+++ b/reference/compare/compare_three_way_result.md
@@ -52,7 +52,7 @@ struct wrap {
   auto operator&amp;lt;=&amp;gt;(const wrap&amp;amp;) const
     -&amp;gt; fallback_comp3way_t&amp;lt;T, std::weak_ordering&amp;gt;
       = default;
-}
+};
 
 // &amp;lt;=&amp;gt;を定義しない型
 struct no_spaceship {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>istream_iterator -- クラス定義の後のセミコロン忘れを修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/istream_iterator.html"/>
      <id>0328c1179dd1c665ec5d8485801c14a4da9555e1:reference/iterator/istream_iterator.md</id>
      <updated>2025-06-30T14:34:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/istream_iterator.md b/reference/iterator/istream_iterator.md
index 3d2818ea5..c325f3e27 100644
--- a/reference/iterator/istream_iterator.md
+++ b/reference/iterator/istream_iterator.md
@@ -8,7 +8,7 @@ namespace std {
   template &amp;lt;class T, class CharT = char,
             class Traits = char_traits&amp;lt;CharT&amp;gt;, class Distance = ptrdiff_t&amp;gt;
   class istream_iterator
-    : public iterator&amp;lt;input_iterator_tag, T, Distance, const T*, const T&amp;amp;&amp;gt;
+    : public iterator&amp;lt;input_iterator_tag, T, Distance, const T*, const T&amp;amp;&amp;gt;;
 }
 ```
 * char_traits[link /reference/string/char_traits.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>istreambuf_iterator -- クラス定義の後のセミコロン忘れを修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/istreambuf_iterator.html"/>
      <id>0328c1179dd1c665ec5d8485801c14a4da9555e1:reference/iterator/istreambuf_iterator.md</id>
      <updated>2025-06-30T14:34:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/istreambuf_iterator.md b/reference/iterator/istreambuf_iterator.md
index 066c5a35f..c76d20f76 100644
--- a/reference/iterator/istreambuf_iterator.md
+++ b/reference/iterator/istreambuf_iterator.md
@@ -7,7 +7,7 @@
 namespace std {
   template &amp;lt;class CharT, class Traits = char_traits&amp;lt;CharT&amp;gt; &amp;gt;
   class istreambuf_iterator
-    : public iterator&amp;lt;input_iterator_tag, CharT, typename Traits::off_type, unspecified, CharT&amp;gt;
+    : public iterator&amp;lt;input_iterator_tag, CharT, typename Traits::off_type, unspecified, CharT&amp;gt;;
 }
 ```
 * char_traits[link /reference/string/char_traits.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ostream_iterator -- クラス定義の後のセミコロン忘れを修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/ostream_iterator.html"/>
      <id>0328c1179dd1c665ec5d8485801c14a4da9555e1:reference/iterator/ostream_iterator.md</id>
      <updated>2025-06-30T14:34:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/ostream_iterator.md b/reference/iterator/ostream_iterator.md
index 86bcb604f..0a8e0a1a4 100644
--- a/reference/iterator/ostream_iterator.md
+++ b/reference/iterator/ostream_iterator.md
@@ -7,7 +7,7 @@
 namespace std {
   template &amp;lt;class T, class CharT = char, class Traits = char_traits&amp;lt;CharT&amp;gt; &amp;gt;
   class ostream_iterator
-    : public iterator&amp;lt;output_iterator_tag, void, void, void, void&amp;gt;
+    : public iterator&amp;lt;output_iterator_tag, void, void, void, void&amp;gt;;
 }
 ```
 * char_traits[link /reference/string/char_traits.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ostreambuf_iterator -- クラス定義の後のセミコロン忘れを修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/ostreambuf_iterator.html"/>
      <id>0328c1179dd1c665ec5d8485801c14a4da9555e1:reference/iterator/ostreambuf_iterator.md</id>
      <updated>2025-06-30T14:34:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/ostreambuf_iterator.md b/reference/iterator/ostreambuf_iterator.md
index 57f100277..6670f32e2 100644
--- a/reference/iterator/ostreambuf_iterator.md
+++ b/reference/iterator/ostreambuf_iterator.md
@@ -7,7 +7,7 @@
 namespace std {
   template &amp;lt;class CharT, class Traits = char_traits&amp;lt;CharT&amp;gt; &amp;gt;
   class ostreambuf_iterator
-    : public iterator&amp;lt;output_iterator_tag, void, void, void, void&amp;gt;
+    : public iterator&amp;lt;output_iterator_tag, void, void, void, void&amp;gt;;
 }
 ```
 * char_traits[link /reference/string/char_traits.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2015-11-02T21:52:37.347374</updated>
  <id>76f1883d-75b7-4482-acca-303f2d7e90a8</id>

  
    <entry>
      <title>detach -- thread:コードの空白の調整</title>
      <link href="http://cpprefjp.github.io/reference/thread/thread/detach.html"/>
      <id>be774ad05335ea98c41be85c88ad7347afc52fb1:reference/thread/thread/detach.md</id>
      <updated>2015-11-02 21:52:18 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;thread&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class thread&#34;&gt;thread::&lt;/span&gt;detach&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;detach&lt;/span&gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;スレッドの管理を手放す&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;thread&lt;/code&gt;オブジェクトにスレッドが関連付けられていること(&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/joinable.html&#34;&gt;joinable()&lt;/a&gt; == true&lt;/code&gt;)。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;this&lt;/code&gt;に関連付けられていたスレッドはそのまま処理が続行される。またそのスレッドが完了した後には、処理系が同スレッドで利用していたリソース（スレッドローカル変数など）を開放する。一方、この関数を呼び出したスレッドはブロックされない。&lt;/p&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;this&lt;/code&gt;は何も指さない空の&lt;code&gt;thread&lt;/code&gt;オブジェクトとなる。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;detach操作に失敗した場合、&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/system_error.html&#34;&gt;system_error&lt;/a&gt;&lt;/code&gt;例外を投げる。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;detachされたスレッドは、他のスレッドから直接アクセスすることが出来なくなる。ただし、&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/mutex.html&#34;&gt;mutex&lt;/a&gt;&lt;/code&gt;や&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/future/future.html&#34;&gt;future&lt;/a&gt;&lt;/code&gt;オブジェクトなどを介して間接的に同期することは可能。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;thread&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/future/future.html&#34;&gt;future&lt;/a&gt;&amp;gt;&lt;/span&gt;

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/future/future.html&#34;&gt;future&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; start_async(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; y)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/future/packaged_task.html&#34;&gt;packaged_task&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;()&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; task([x,y]{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非同期実行されるタスク...&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; y;
  });
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; ftr &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; task.get_future();

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 新しいスレッド作成後に&lt;span style=&#34;color:#ff0000&#34;&gt;detach&lt;/span&gt;操作&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; th(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(task));
  th.&lt;span style=&#34;color:#ff0000&#34;&gt;detach&lt;/span&gt;();

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; ftr;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 変数thにはスレッドが紐付いていないため破棄可能&lt;/span&gt;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; start_async(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result.get() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.6.3, 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>join -- thread:コードの空白の調整</title>
      <link href="http://cpprefjp.github.io/reference/thread/thread/join.html"/>
      <id>be774ad05335ea98c41be85c88ad7347afc52fb1:reference/thread/thread/join.md</id>
      <updated>2015-11-02 21:52:18 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;thread&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class thread&#34;&gt;thread::&lt;/span&gt;join&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;join&lt;/span&gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;スレッドが終了するまで待機する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;thread&lt;/code&gt;オブジェクトにスレッドが関連付けられていること(&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/joinable.html&#34;&gt;joinable()&lt;/a&gt; == true&lt;/code&gt;)。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;this&lt;/code&gt;に関連付けれられたスレッドが完了するまで、この関数を呼び出したスレッドをブロックする。&lt;/p&gt;
&lt;h2&gt;同期&lt;/h2&gt;
&lt;p&gt;関連付けられたスレッドの完了は、&lt;code&gt;join()&lt;/code&gt;メンバ関数の正常リターンと &lt;strong&gt;同期する&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;つまり、「&lt;code&gt;this&lt;/code&gt;に関連付けられたスレッドT1上で行われる全処理の完了」は、
「&lt;code&gt;join()&lt;/code&gt;メンバ関数を呼び出したスレッドT0上での同メンバ関数からの正常リターン」よりも &lt;strong&gt;前に発生する&lt;/strong&gt; 。&lt;/p&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;this&lt;/code&gt;は何も指さない空の&lt;code&gt;thread&lt;/code&gt;オブジェクトとなる。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;join操作に失敗した場合、&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/system_error.html&#34;&gt;system_error&lt;/a&gt;&lt;/code&gt;例外を投げる。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;thread&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; thd([&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;]{ &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;x; });

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ここでxにアクセスするとdata raceにより未定義動作&lt;/span&gt;

  thd.&lt;span style=&#34;color:#ff0000&#34;&gt;join&lt;/span&gt;();

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 別スレッド上で行われた全処理が完了している&lt;/span&gt;
  assert(x &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.6.3, 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 11.0&lt;ul&gt;
&lt;li&gt;11.0現在はバグ有り &lt;a href=&#34;http://connect.microsoft.com/VisualStudio/feedback/details/747145/&#34; target=&#34;_blank&#34;&gt;std::thread::join() hangs if called after main() exits when using VS2012 RC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;main 関数を抜けた後に join() を呼ぶとハングアップするというもの&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- thread:コードの空白の調整</title>
      <link href="http://cpprefjp.github.io/reference/thread/thread/op_constructor.html"/>
      <id>be774ad05335ea98c41be85c88ad7347afc52fb1:reference/thread/thread/op_constructor.md</id>
      <updated>2015-11-02 21:52:18 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;thread&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class thread&#34;&gt;thread::&lt;/span&gt;コンストラクタ&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt;() noexcept;                      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Args&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt;(F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f, Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;;         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;) noexcept;              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : デフォルトコンストラクタ。新しいスレッドを生成せず、空の状態にする。&lt;/li&gt;
&lt;li&gt;(2) : 新しいスレッドを生成し、そのスレッド上で引数&lt;code&gt;args...&lt;/code&gt;を渡して、関数オブジェクト&lt;code&gt;f&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;li&gt;(3) : コピーコンストラクタ。コピー不可。&lt;/li&gt;
&lt;li&gt;(4) : ムーブコンストラクタ。スレッドの所有権を移動する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(2) : 型&lt;code&gt;F&lt;/code&gt;および&lt;code&gt;Args&lt;/code&gt;に含まれるすべての型&lt;code&gt;Ti&lt;/code&gt;はムーブコンストラクト可能な型でなければならない。また、&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/invoke.html&#34;&gt;INVOKE&lt;/a&gt;(DECAY_COPY(&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;std::forward&lt;/a&gt;&amp;lt;F&amp;gt;(f)), DECAY_COPY(&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args))...)&lt;/code&gt;が有効な式でなければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(2) : 新しいスレッドを生成し、&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/invoke.html&#34;&gt;INVOKE&lt;/a&gt;(DECAY_COPY(&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;std::forward&lt;/a&gt;&amp;lt;F&amp;gt;(f)), DECAY_COPY(&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args))...)&lt;/code&gt;を実行する。ただし&lt;code&gt;DECAY_COPY&lt;/code&gt;は同コンストラクタを呼び出したスレッド上にて評価される。また&lt;code&gt;f&lt;/code&gt;のコピーの戻り値は無視される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DECAY_COPY(x)&lt;/code&gt;は &lt;code&gt;template &amp;lt;class T&amp;gt; typename std::decay&amp;lt;T&amp;gt;::type decay_copy(T&amp;amp;&amp;amp; v) { return &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;std::forward&lt;/a&gt;&amp;lt;T&amp;gt;(v); }&lt;/code&gt; と定義される。おおよそ、&lt;code&gt;x&lt;/code&gt;が配列型なら先頭要素へのポインタ、&lt;code&gt;x&lt;/code&gt;が関数型ならその関数ポインタ、&lt;code&gt;x&lt;/code&gt;がコピーコンストラクト可能な型なら&lt;code&gt;x&lt;/code&gt;からコピーされたオブジェクト、&lt;code&gt;x&lt;/code&gt;がムーブコンストラクト可能な型なら&lt;code&gt;x&lt;/code&gt;からムーブされたオブジェクトとなる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;INVOKE(f, arg...)&lt;/code&gt;は&lt;code&gt;f&lt;/code&gt;が関数オブジェクトならば &lt;code&gt;f(arg...)&lt;/code&gt; 形式の関数呼び出しとなる。詳細は&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/invoke.html&#34;&gt;INVOKE&lt;/a&gt;&lt;/code&gt;の定義参照。
もし&lt;code&gt;INVOKE(DECAY_COPY(&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;std::forward&lt;/a&gt;&amp;lt;F&amp;gt;(f)), DECAY_COPY(&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args))...)&lt;/code&gt;呼び出しからcatchされない例外が送出された場合、&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/terminate.html&#34;&gt;std::terminate()&lt;/a&gt;&lt;/code&gt;が呼び出されてプログラムは異常終了する。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;同期&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(2) : 同コンストラクタの呼び出し完了は、fのコピーの呼び出し開始と&lt;strong&gt;同期する&lt;/strong&gt;。つまり、「コンストラクタ呼び出し側スレッドT0でのコンストラクタ呼び出し完了」は、「新しいスレッド&lt;code&gt;T1&lt;/code&gt;上での&lt;code&gt;f&lt;/code&gt;のコピーの呼び出し開始」よりも&lt;strong&gt;前に発生する&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/get_id.html&#34;&gt;get_id()&lt;/a&gt; == &lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/id.html&#34;&gt;id()&lt;/a&gt;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/get_id.html&#34;&gt;get_id()&lt;/a&gt; != &lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/id.html&#34;&gt;id()&lt;/a&gt;&lt;/code&gt;。&lt;code&gt;*this&lt;/code&gt;は新しいスレッドと関連付けられる。&lt;/li&gt;
&lt;li&gt;(4) : ムーブ前の&lt;code&gt;x.&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/get_id.html&#34;&gt;get_id()&lt;/a&gt; == &lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/get_id.html&#34;&gt;get_id()&lt;/a&gt;&lt;/code&gt; かつ ムーブ後の&lt;code&gt;x.&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/get_id.html&#34;&gt;get_id()&lt;/a&gt; == &lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/id.html&#34;&gt;id()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(2) : 新しいスレッドの作成に失敗した場合、&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/system_error.html&#34;&gt;system_error&lt;/a&gt;&lt;/code&gt;例外を投げる。その例外オブジェクトには、以下のエラー状態が設定されうる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;resource_unavailable_try_again&lt;/code&gt; : 新たなスレッドを作るためのリソースが不足している。もしくはシステムやプロセスが規定するスレッド数の上限を超過した。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(2) :&lt;ul&gt;
&lt;li&gt;C++14 : &lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/decay.html&#34;&gt;std::decay&lt;/a&gt;&amp;lt;F&amp;gt;::type&lt;/code&gt;が&lt;code&gt;std::thread&lt;/code&gt;型である場合、この関数はオーバーロード解決に参加しない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;memory&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;thread&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; ri, &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; sp, &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_ptr&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; up)
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// spはコピーされた値が、upはムーブされた値が渡されてくる&lt;/span&gt;
  v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; ri &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;42&lt;/span&gt;;

  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;sp &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;up;
  assert(x &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// この戻り値は無視される&lt;/span&gt;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i2;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; sp0 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/make_shared.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_shared&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);
  &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_ptr&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; up0(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;));

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; thd( func, i1,  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ref(i2), sp0, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(up0) );
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ...&lt;/span&gt;
  thd.join();

  assert(i1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; i2 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;42&lt;/span&gt;);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.6.3, 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2097&#34; target=&#34;_blank&#34;&gt;LWG Issue 2097. &lt;code&gt;packaged_task&lt;/code&gt; constructors should be constrained&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- basic_istream::sentry:コードの空白の調整</title>
      <link href="http://cpprefjp.github.io/reference/istream/basic_istream/sentry/op_constructor.html"/>
      <id>ce1ddbeb0ab95ef154b45aad2d10d14ef359178b:reference/istream/basic_istream/sentry/op_constructor.md</id>
      <updated>2015-11-02 21:39:51 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;istream&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class basic_istream::sentry&#34;&gt;basic_istream::sentry::&lt;/span&gt;コンストラクタ&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;sentry&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/istream/basic_istream.html&#34;&gt;basic_istream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; is, &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; noskipws &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;入力処理の前処理を行う。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;is.&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/basic_ios/good.html&#34;&gt;good&lt;/a&gt;()&lt;/code&gt;が&lt;code&gt;false&lt;/code&gt;なら、&lt;code&gt;is.&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/basic_ios/setstate.html&#34;&gt;setstate&lt;/a&gt;(failbit)&lt;/code&gt;を呼び出し、関数から帰る。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is.&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/basic_ios/tie.html&#34;&gt;tie&lt;/a&gt;()&lt;/code&gt;が非ヌルポインタなら、&lt;code&gt;is.&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/basic_ios/tie.html&#34;&gt;tie&lt;/a&gt;()-&amp;gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream/flush.html&#34;&gt;flush&lt;/a&gt;()&lt;/code&gt;を呼び出す。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;is.&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/basic_ios/tie.html&#34;&gt;tie&lt;/a&gt;()&lt;/code&gt;が指す先のストリームバッファのput areaが空なら、この処理を省略しても良い。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is.&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/basic_ios/rdbuf.html&#34;&gt;rdbuf&lt;/a&gt;()-&amp;gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/streambuf/basic_streambuf/underflow.md.nolink&#34;&gt;underflow&lt;/a&gt;()&lt;/code&gt;の呼び出しが発生するまで、この処理を遅延させても良い。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is.&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/basic_ios/rdbuf.html&#34;&gt;rdbuf&lt;/a&gt;()-&amp;gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/streambuf/basic_streambuf/underflow.md.nolink&#34;&gt;underflow&lt;/a&gt;()&lt;/code&gt;の呼び出しが発生しなかったら、この処理を省略して良い（標準ライブラリ実装内部で、そのような最適化を行っても良い）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noskipws&lt;/code&gt;が&lt;code&gt;false&lt;/code&gt;かつ&lt;code&gt;is.&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/ios_base/flags.html&#34;&gt;flags&lt;/a&gt;() &amp;amp; &lt;a href=&#34;http://cpprefjp.github.io/reference/ios/ios_base.html&#34;&gt;ios_base&lt;/a&gt;::skipws&lt;/code&gt;が真なら、ストリームから空白文字を読み捨てる。&lt;ul&gt;
&lt;li&gt;空白文字の判定は、文字&lt;code&gt;c&lt;/code&gt;について&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/locale/use_facet.md.nolink&#34;&gt;use_facet&lt;/a&gt;&amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/locale/ctype.html&#34;&gt;ctype&lt;/a&gt;&amp;lt;CharT&amp;gt;&amp;gt;(is.&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/ios_base/getloc.html&#34;&gt;getloc&lt;/a&gt;()).&lt;a href=&#34;http://cpprefjp.github.io/reference/locale/ctype/is.md.nolink&#34;&gt;is&lt;/a&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/locale/ctype.html&#34;&gt;ctype&lt;/a&gt;::&lt;a href=&#34;http://cpprefjp.github.io/reference/locale/ctype_base.html&#34;&gt;space&lt;/a&gt;, c)&lt;/code&gt;と等価な方法で行う。&lt;/li&gt;
&lt;li&gt;このとき&lt;code&gt;is.&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/basic_ios/rdbuf.html&#34;&gt;rdbuf&lt;/a&gt;()-&amp;gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/streambuf/basic_streambuf/sbumpc.md.nolink&#34;&gt;sbumpc&lt;/a&gt;()&lt;/code&gt;または&lt;code&gt;is.&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/basic_ios/rdbuf.html&#34;&gt;rdbuf&lt;/a&gt;()-&amp;gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/streambuf/basic_streambuf/sgetc.md.nolink&#34;&gt;sgetc&lt;/a&gt;()&lt;/code&gt;が&lt;code&gt;Traits::eof()&lt;/code&gt;を返したら、&lt;code&gt;is.&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/basic_ios/setstate.html&#34;&gt;setstate&lt;/a&gt;(failbit | eofbit)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ここまでの手順が完了したら、このオブジェクトの&lt;code&gt;operator bool&lt;/code&gt;関数は&lt;code&gt;true&lt;/code&gt;を、さもなくば&lt;code&gt;false&lt;/code&gt;を返すようになる。&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>codecvt -- codecvt:コードの空白の調整</title>
      <link href="http://cpprefjp.github.io/reference/locale/codecvt.html"/>
      <id>8bf2e1109a2a80a33c08859f52c9d98d399ab086:reference/locale/codecvt.md</id>
      <updated>2015-11-02 21:37:10 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;locale&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;codecvt&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;internT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;externT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;stateT&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;codecvt&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/locale/locale/facet.html&#34;&gt;locale&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;facet&lt;/a&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/locale/codecvt_base.html&#34;&gt;codecvt_base&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;(ここに、クラスの概要を記載する)&lt;/p&gt;
&lt;h3&gt;publicメンバ関数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;out&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;内部型から外部型に変換&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;in&lt;/td&gt;
&lt;td&gt;外部型から内部型に変換&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unshift&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;変換が不完全だった場合のために、変換の開始位置をずらす&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;encoding&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;内部型の1文字への変換に必要な外部型の長さを取得する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;always_noconv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;変換を行う必要がないか判定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;内部型文字列への変換で消費される外部型文字列の長さを取得する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;max_length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;内部型の1文字への変換に必要な外部型の最大の長さを取得する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;静的メンバ変数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static &lt;a href=&#34;http://cpprefjp.github.io/reference/locale/locale/id.html&#34;&gt;locale::id&lt;/a&gt; id;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;protectedメンバ関数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(destructor)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;do_out&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;内部型から外部型に変換&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;do_in&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;外部型から内部型に変換&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;do_unshift&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;変換が不完全だった場合のために、変換の開始位置をずらす&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;do_encoding&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;内部型の1文字への変換に必要な外部型の長さを取得する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;do_always_noconv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;変換を行う必要がないか判定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;do_length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;内部型文字列への変換で消費される外部型文字列の長さを取得する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;do_max_length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;内部型の1文字への変換に必要な外部型の最大の長さを取得する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;メンバ型&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;intern_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;内部型 &lt;code&gt;internT&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;extern_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;外部型 &lt;code&gt;externT&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;state_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;変換の状態を表す型 &lt;code&gt;stateT&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;例&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;参照&lt;/h3&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wstring_convert -- wstring_convert:コードの空白の調整</title>
      <link href="http://cpprefjp.github.io/reference/locale/wstring_convert.html"/>
      <id>2f98bc966d6faca565b98e9ce70a5f61daf3a905:reference/locale/wstring_convert.md</id>
      <updated>2015-11-02 21:34:53 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;locale&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;wstring_convert&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Codecvt&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Elem&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Wide_alloc&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;allocator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Elem&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Byte_alloc&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;allocator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;wstring_convert&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;wstring_convert&lt;/code&gt;は、ワイド文字列とバイト文字列を相互変換するクラスである。&lt;/p&gt;
&lt;p&gt;バイト文字列とは、ひとつの文字を表すのに可変長のバイト数を必要とする、UTF-8やShift_JISのような文字コードの文字列である。&lt;/p&gt;
&lt;p&gt;ワイド文字列とは、ひとつの文字を表すのに固定長のバイト数を必要とする、UTF-16やUTF-32のような文字コードの文字列である。&lt;/p&gt;
&lt;p&gt;このクラスの&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/locale/wstring_convert/from_bytes.html&#34;&gt;from_bytes()&lt;/a&gt;&lt;/code&gt;メンバ関数を使用することによってバイト文字列からワイド文字列への変換ができ、&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/locale/wstring_convert/to_bytes.html&#34;&gt;to_bytes()&lt;/a&gt;&lt;/code&gt;メンバ関数を使用することによってワイド文字列からバイト文字列への変換ができる。&lt;/p&gt;
&lt;p&gt;テンプレートパラメータは、以下を意味する：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Codecvt&lt;/code&gt; : コード変換を行うクラス。&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/codecvt.html&#34;&gt;&amp;lt;codecvt&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダでいくつかの変換器が定義されている。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Elem&lt;/code&gt; : ワイド文字列の内部表現で使用する文字型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Wide_alloc&lt;/code&gt; : ワイド文字列のアロケータ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Byte_alloc&lt;/code&gt; : バイト文字列のアロケータ。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;テンプレートパラメータの設定例：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;目的&lt;/th&gt;
&lt;th&gt;バイト文字列型&lt;/th&gt;
&lt;th&gt;ワイド文字列&lt;/th&gt;
&lt;th&gt;パラメータ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;UTF-8とUTF-16の変換&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::string&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::u16string&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::wstring_convert&amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/codecvt/codecvt_utf8_utf16.html&#34;&gt;std::codecvt_utf8_utf16&lt;/a&gt;&amp;lt;char16_t&amp;gt;, char16_t&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UTF-8とUTF-32の変換&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::string&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::u32string&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::wstring_convert&amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/codecvt/codecvt_utf8.html&#34;&gt;std::codecvt_utf8&lt;/a&gt;&amp;lt;char32_t&amp;gt;, char32_t&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/locale/wstring_convert/op_constructor.html&#34;&gt;(constructor)&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/locale/wstring_convert/op_destructor.html&#34;&gt;(destructor)&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/locale/wstring_convert/op_assign.html&#34;&gt;operator=&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/locale/wstring_convert/from_bytes.html&#34;&gt;from_bytes&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;バイト文字列からワイド文字列に変換する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/locale/wstring_convert/to_bytes.html&#34;&gt;to_bytes&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字列からバイト文字列に変換する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/locale/wstring_convert/converted.html&#34;&gt;converted&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;変換した要素数を取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/locale/wstring_convert/state.html&#34;&gt;state&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;変換の状態を取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;byte_string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;バイト列型 &lt;code&gt;std::&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;basic_string&lt;/a&gt;&amp;lt;char, &lt;a href=&#34;http://cpprefjp.github.io/reference/string/char_traits.html&#34;&gt;char_traits&lt;/a&gt;&amp;lt;char&amp;gt;, Byte_alloc&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wide_string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字列型 &lt;code&gt;std::&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;basic_string&lt;/a&gt;&amp;lt;Elem, &lt;a href=&#34;http://cpprefjp.github.io/reference/string/char_traits.html&#34;&gt;char_traits&lt;/a&gt;&amp;lt;Elem&amp;gt;, Wide_alloc&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;state_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストリームのマルチバイト文字の変換の状態を表す型 &lt;code&gt;Codecvt::state_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;int_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字に対応する値を表す数値型 &lt;code&gt;wide_string::traits_type::int_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;locale&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;codecvt&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// UTF-8とUTF-32の相互変換を行うコンバーター&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;wstring_convert&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/codecvt/codecvt_utf8.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;codecvt_utf8&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char32_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char32_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; converter;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// UTF-8からUTF-32に変換&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt; u8str &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; u8&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;あいうえお&#34;&lt;/span&gt;;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;u32string&lt;/a&gt; u32str &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; converter.&lt;a href=&#34;http://cpprefjp.github.io/reference/locale/wstring_convert/from_bytes.html&#34;&gt;from_bytes&lt;/a&gt;(u8str);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コードポイント数を取得&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;size_t&lt;/a&gt; codepoint_count &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; u32str.&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;size()&lt;/a&gt;;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; codepoint_count &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;5
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 5.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 10.0, 11.0, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2007.html&#34; target=&#34;_blank&#34;&gt;N2007 Proposed Library Additions for Code Conversion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- locale:コードの空白の調整</title>
      <link href="http://cpprefjp.github.io/reference/locale/locale/op_constructor.html"/>
      <id>c2217062e2a86982da8d58e7b14eec718dee04f0:reference/locale/locale/op_constructor.md</id>
      <updated>2015-11-02 20:40:50 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;locale&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class locale&#34;&gt;locale::&lt;/span&gt;コンストラクタ&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;locale() noexcept;
locale(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; locale&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) noexcept;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;locale&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;locale&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;);
locale(cosnt locale&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;, category);
locale(cosnt locale&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;, category);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Facet&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
locale(cosnt locale&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;, Facet&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;);
locale(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; locale&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; locale&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;, category);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;localeオブジェクトの構築&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;locale() noexcept;&lt;/code&gt;&lt;br /&gt;デフォルトコンストラクタ。呼び出した時点のグローバル&lt;code&gt;locale&lt;/code&gt;のコピーを作成する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locale(const locale&amp;amp;) noexcept;&lt;/code&gt;&lt;br /&gt;コピーコンストラクタ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;explicit locale(const char* name);&lt;/code&gt;&lt;br /&gt;名前からの構築。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;explicit locale(const &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;string&lt;/a&gt;&amp;amp; name);&lt;/code&gt;&lt;br /&gt;名前からの構築。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locale(cosnt locale&amp;amp; other, const char* name, category cats);&lt;/code&gt;&lt;br /&gt;&lt;code&gt;cats&lt;/code&gt;で指定された部分については&lt;code&gt;name&lt;/code&gt;で指定される&lt;code&gt;locale&lt;/code&gt;の、それ以外は&lt;code&gt;other&lt;/code&gt;のファセットを組み合わせた&lt;code&gt;locale&lt;/code&gt;を構築。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locale(cosnt locale&amp;amp; other, const string&amp;amp; name, category cats);&lt;/code&gt;&lt;br /&gt;同上。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template&amp;lt;typename Facet&amp;gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;locale(cosnt locale&amp;amp; other, Facet* f);&lt;/code&gt;&lt;br /&gt;&lt;code&gt;f&lt;/code&gt;と&lt;code&gt;other&lt;/code&gt;のファセット（&lt;code&gt;f&lt;/code&gt;と同種のファセット以外）を組み合わせた&lt;code&gt;locale&lt;/code&gt;の構築。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locale(const locale&amp;amp; other, const locale&amp;amp; one, category cats);&lt;/code&gt;&lt;br /&gt;&lt;code&gt;cats&lt;/code&gt;で指定された部分については&lt;code&gt;one&lt;/code&gt;の、それ以外は&lt;code&gt;other&lt;/code&gt;のファセットを組み合わせた&lt;code&gt;locale&lt;/code&gt;を構築。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
</feed>
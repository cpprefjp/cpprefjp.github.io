<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-04-20T14:39:28.267501</updated>
  <id>715e6d9d-4999-444e-b473-e33f33655a35</id>

  
    <entry>
      <title>digits -- Merge pull request #1143 from nu4nu/fix-numeric-limits</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/digits.html"/>
      <id>521696613d6ef237fd0ec8c46ab743889bc973f1:reference/limits/numeric_limits/digits.md</id>
      <updated>2023-04-20T11:15:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/digits.md b/reference/limits/numeric_limits/digits.md
index d2df4503d..a31713bcc 100644
--- a/reference/limits/numeric_limits/digits.md
+++ b/reference/limits/numeric_limits/digits.md
@@ -30,7 +30,7 @@ static constexpr int digits; // C++11
 |---------------|-----------------------------------------------------|
 | `float`       | [`FLT_MANT_DIG`](/reference/cfloat/flt_mant_dig.md) |
 | `double`      | [`DBL_MANT_DIG`](/reference/cfloat/dbl_mant_dig.md) |
-| `long double` | [`LDBL_MANT_DIG`](/reference/cfloat/ldbl_dig.md)    |
+| `long double` | [`LDBL_MANT_DIG`](/reference/cfloat/ldbl_mant_dig.md)    |
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max_exponent -- Merge pull request #1143 from nu4nu/fix-numeric-limits</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/max_exponent.html"/>
      <id>521696613d6ef237fd0ec8c46ab743889bc973f1:reference/limits/numeric_limits/max_exponent.md</id>
      <updated>2023-04-20T11:15:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/max_exponent.md b/reference/limits/numeric_limits/max_exponent.md
index 9a0e69216..95f84a9c5 100644
--- a/reference/limits/numeric_limits/max_exponent.md
+++ b/reference/limits/numeric_limits/max_exponent.md
@@ -14,16 +14,16 @@ static constexpr int max_exponent;
 
 ## 概要
 浮動小数点数型において、型`T`の指数上限値を得る。  
-基数[`radix`](radix.md)を`max_exponent`の値で累乗した値が、型`T`で表現可能な正規化された値となる最大の正の値。  
+基数[`radix`](radix.md)を`max_exponent - 1`の値で累乗した値が、型`T`で表現可能な正規化された値となる最大の正の値。  
 浮動小数点数型以外は0になる。  
 
 対応するマクロを次の表に挙げる。
 
 | 型            | 対応するマクロ |
 |---------------|----------------|
-| `float`       | `FLT_MAX_EXP`  |
-| `double`      | `DBL_MAX_EXP`  |
-| `long double` | `LDBL_MAX_EXP` |
+| `float`       | [`FLT_MAX_EXP`](/reference/cfloat/flt_max_exp.md)   |
+| `double`      | [`DBL_MAX_EXP`](/reference/cfloat/dbl_max_exp.md)   |
+| `long double` | [`LDBL_MAX_EXP`](/reference/cfloat/ldbl_max_exp.md) |
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>min_exponent -- Merge pull request #1143 from nu4nu/fix-numeric-limits</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/min_exponent.html"/>
      <id>521696613d6ef237fd0ec8c46ab743889bc973f1:reference/limits/numeric_limits/min_exponent.md</id>
      <updated>2023-04-20T11:15:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/min_exponent.md b/reference/limits/numeric_limits/min_exponent.md
index ad9f2ea1c..253e15063 100644
--- a/reference/limits/numeric_limits/min_exponent.md
+++ b/reference/limits/numeric_limits/min_exponent.md
@@ -14,16 +14,16 @@ static constexpr int min_exponent;
 
 ## 概要
 浮動小数点数型において、型`T`の指数下限値を得る。  
-基数[`radix`](radix.md)を`min_exponent`の値で累乗した値が、型`T`で表現可能な正規化された値となる最小の負の値。   
+基数[`radix`](radix.md)を`min_exponent - 1`の値で累乗した値が、型`T`で表現可能な正規化された値となる最小の負の値。   
 浮動小数点数以外は0となる。  
 
 対応するマクロを次の表に挙げる。
 
 | 型            | 対応するマクロ |
 |---------------|----------------|
-| `float`       | `FLT_MIN_EXP`  |
-| `double`      | `DBL_MIN_EXP`  |
-| `long double` | `LDBL_MIN_EXP` |
+| `float`       | [`FLT_MIN_EXP`](/reference/cfloat/flt_min_exp.md)   |
+| `double`      | [`DBL_MIN_EXP`](/reference/cfloat/dbl_min_exp.md)   |
+| `long double` | [`LDBL_MIN_EXP`](/reference/cfloat/ldbl_min_exp.md) |
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max_exponent -- numeric_limits: Fix description of max/min_exponent</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/max_exponent.html"/>
      <id>4816cf7b669210665378bf3cdf43dd1b6b2cfa70:reference/limits/numeric_limits/max_exponent.md</id>
      <updated>2023-04-20T01:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/max_exponent.md b/reference/limits/numeric_limits/max_exponent.md
index ee9ca5812..95f84a9c5 100644
--- a/reference/limits/numeric_limits/max_exponent.md
+++ b/reference/limits/numeric_limits/max_exponent.md
@@ -14,7 +14,7 @@ static constexpr int max_exponent;
 
 ## 概要
 浮動小数点数型において、型`T`の指数上限値を得る。  
-基数[`radix`](radix.md)を`max_exponent`の値で累乗した値が、型`T`で表現可能な正規化された値となる最大の正の値。  
+基数[`radix`](radix.md)を`max_exponent - 1`の値で累乗した値が、型`T`で表現可能な正規化された値となる最大の正の値。  
 浮動小数点数型以外は0になる。  
 
 対応するマクロを次の表に挙げる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tomoya Adachi</name>
        <email>git@nu4.nu</email>
      </author>
    </entry>
  
    <entry>
      <title>min_exponent -- numeric_limits: Fix description of max/min_exponent</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/min_exponent.html"/>
      <id>4816cf7b669210665378bf3cdf43dd1b6b2cfa70:reference/limits/numeric_limits/min_exponent.md</id>
      <updated>2023-04-20T01:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/min_exponent.md b/reference/limits/numeric_limits/min_exponent.md
index 30828fe39..253e15063 100644
--- a/reference/limits/numeric_limits/min_exponent.md
+++ b/reference/limits/numeric_limits/min_exponent.md
@@ -14,7 +14,7 @@ static constexpr int min_exponent;
 
 ## 概要
 浮動小数点数型において、型`T`の指数下限値を得る。  
-基数[`radix`](radix.md)を`min_exponent`の値で累乗した値が、型`T`で表現可能な正規化された値となる最小の負の値。   
+基数[`radix`](radix.md)を`min_exponent - 1`の値で累乗した値が、型`T`で表現可能な正規化された値となる最小の負の値。   
 浮動小数点数以外は0となる。  
 
 対応するマクロを次の表に挙げる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tomoya Adachi</name>
        <email>git@nu4.nu</email>
      </author>
    </entry>
  
    <entry>
      <title>digits -- numeric_limits: Add and fix links to cfloat</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/digits.html"/>
      <id>a13c86a40039bef44b954d1f33455a41fc1eaab9:reference/limits/numeric_limits/digits.md</id>
      <updated>2023-04-20T01:20:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/digits.md b/reference/limits/numeric_limits/digits.md
index d2df4503d..a31713bcc 100644
--- a/reference/limits/numeric_limits/digits.md
+++ b/reference/limits/numeric_limits/digits.md
@@ -30,7 +30,7 @@ static constexpr int digits; // C++11
 |---------------|-----------------------------------------------------|
 | `float`       | [`FLT_MANT_DIG`](/reference/cfloat/flt_mant_dig.md) |
 | `double`      | [`DBL_MANT_DIG`](/reference/cfloat/dbl_mant_dig.md) |
-| `long double` | [`LDBL_MANT_DIG`](/reference/cfloat/ldbl_dig.md)    |
+| `long double` | [`LDBL_MANT_DIG`](/reference/cfloat/ldbl_mant_dig.md)    |
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tomoya Adachi</name>
        <email>git@nu4.nu</email>
      </author>
    </entry>
  
    <entry>
      <title>max_exponent -- numeric_limits: Add and fix links to cfloat</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/max_exponent.html"/>
      <id>a13c86a40039bef44b954d1f33455a41fc1eaab9:reference/limits/numeric_limits/max_exponent.md</id>
      <updated>2023-04-20T01:20:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/max_exponent.md b/reference/limits/numeric_limits/max_exponent.md
index 9a0e69216..ee9ca5812 100644
--- a/reference/limits/numeric_limits/max_exponent.md
+++ b/reference/limits/numeric_limits/max_exponent.md
@@ -21,9 +21,9 @@ static constexpr int max_exponent;
 
 | 型            | 対応するマクロ |
 |---------------|----------------|
-| `float`       | `FLT_MAX_EXP`  |
-| `double`      | `DBL_MAX_EXP`  |
-| `long double` | `LDBL_MAX_EXP` |
+| `float`       | [`FLT_MAX_EXP`](/reference/cfloat/flt_max_exp.md)   |
+| `double`      | [`DBL_MAX_EXP`](/reference/cfloat/dbl_max_exp.md)   |
+| `long double` | [`LDBL_MAX_EXP`](/reference/cfloat/ldbl_max_exp.md) |
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tomoya Adachi</name>
        <email>git@nu4.nu</email>
      </author>
    </entry>
  
    <entry>
      <title>min_exponent -- numeric_limits: Add and fix links to cfloat</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/min_exponent.html"/>
      <id>a13c86a40039bef44b954d1f33455a41fc1eaab9:reference/limits/numeric_limits/min_exponent.md</id>
      <updated>2023-04-20T01:20:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/min_exponent.md b/reference/limits/numeric_limits/min_exponent.md
index ad9f2ea1c..30828fe39 100644
--- a/reference/limits/numeric_limits/min_exponent.md
+++ b/reference/limits/numeric_limits/min_exponent.md
@@ -21,9 +21,9 @@ static constexpr int min_exponent;
 
 | 型            | 対応するマクロ |
 |---------------|----------------|
-| `float`       | `FLT_MIN_EXP`  |
-| `double`      | `DBL_MIN_EXP`  |
-| `long double` | `LDBL_MIN_EXP` |
+| `float`       | [`FLT_MIN_EXP`](/reference/cfloat/flt_min_exp.md)   |
+| `double`      | [`DBL_MIN_EXP`](/reference/cfloat/dbl_min_exp.md)   |
+| `long double` | [`LDBL_MIN_EXP`](/reference/cfloat/ldbl_min_exp.md) |
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tomoya Adachi</name>
        <email>git@nu4.nu</email>
      </author>
    </entry>
  
    <entry>
      <title>未初期化領域への暗黙的なオブジェクト構築 -- 参考リンク追加と修正 #1117</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.html"/>
      <id>f81c873437dd6933e6a0668ba1b3959051b865b1:lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md</id>
      <updated>2023-04-19T18:02:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md b/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
index ac70f082a..9ade0289a 100644
--- a/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
+++ b/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
@@ -391,7 +391,7 @@ unique_ptr&amp;lt;char[]&amp;gt; Stream::read() {
 
 最終的には、暗黙的なオブジェクト構築のように、C++のオブジェクトモデルを修正する形でこの問題を解消することになった。
 
-ただし、２番目の特殊なライブラリ関数もC++23で`std::start_lifetime_as()`として追加されテイル。
+ただし、２番目の特殊なライブラリ関数もC++23で`std::start_lifetime_as()`として追加されている。
 
 ## 関連項目
 
@@ -402,6 +402,7 @@ unique_ptr&amp;lt;char[]&amp;gt; Stream::read() {
 ## 参照
 
 - [P0593R6 Implicit creation of objects for low-level object manipulation](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p0593r6.html)
+- [P0593R０ What to do with buffers that are not arrays, and undefined behavior thereof?](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0593r0.html)
 - [CWG Issue 2325. `std::launder` and reuse of character buffers](https://cplusplus.github.io/CWG/issues/2325.html)
 - [CWG Issue 2605. Implicit-lifetime aggregates](https://cplusplus.github.io/CWG/issues/2605.html)
 - [P1839R5 Accessing Object Representations](https://wg21.link/p1839r5)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>未初期化領域への暗黙的なオブジェクト構築 -- 背景とその他選択肢追記 #1117</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.html"/>
      <id>1c743fb17397e72155bcdc8c3f60f431add22fce:lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md</id>
      <updated>2023-04-19T18:00:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md b/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
index a2e04f066..ac70f082a 100644
--- a/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
+++ b/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
@@ -369,15 +369,29 @@ unique_ptr&amp;lt;char[]&amp;gt; Stream::read() {
 
 この例では、`reserve()`内`newbuf`及びそれを保存している`Vec::buf`の領域に`T[]`（`T`の配列型）と`char[]`のオブジェクトが暗黙的に構築され、同時に生存期間内にあることで、問題（配列オブジェクトを指さないポインタのイテレータとしての使用）は解消される。
 
-ただし、`newbuf`及び`Vec::buf`から都度適切なオブジェクトへのポインタを得るのに[`std::launder()`](/reference/new/launder.md)を適切使用する必要がある。
+ただし、`newbuf`及び`Vec::buf`から都度適切なオブジェクトへのポインタを得るのに[`std::launder()`](/reference/new/launder.md)を適切に使用する必要がある。
 
 ## この機能が必要になった背景・経緯
-(執筆中)
 
+例に上がっているようなコードはC言語では一般的な操作であり、Cでは問題がない。このようなコードはCとC++のコード共有部分でC++コードとして現れる可能性があり、その場合には未定義動作となる。
+
+また、動的配列の例などは、`std::vector`の実装において問題となることで、そこは完全にC++のコードでありながらC++がサポートしてないことを行うことになってしまう。
+
+これらの問題は、影響を受けるコードが多すぎるため実装はこれを最適化に用いたりはしないと考えられるため、実際には問題とならない可能性が高かった。しかし、これらのよく書かれているコードをC++がサポートしていないという奇妙な状況を改善するため、暗黙的なオブジェクト構築という仕様が導入された。
 
 ## 検討されたほかの選択肢
-(執筆中)
 
+上記の問題を解決するための方法として、暗黙的なオブジェクト構築以外に
+
+- 問題となる操作を無条件で合法化
+- ライブラリ関数を追加して、それを介してコンパイラに意図を伝達
+- `std::span`を特別扱いして、関連する操作を合法化
+
+などが考案されていた。
+
+最終的には、暗黙的なオブジェクト構築のように、C++のオブジェクトモデルを修正する形でこの問題を解消することになった。
+
+ただし、２番目の特殊なライブラリ関数もC++23で`std::start_lifetime_as()`として追加されテイル。
 
 ## 関連項目
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
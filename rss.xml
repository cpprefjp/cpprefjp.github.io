<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-02-06T19:55:10.100537</updated>
  <id>4afa450c-16f7-40c8-b2e3-2ce567b7c1cb</id>

  
    <entry>
      <title>ends_with -- リンク修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_ends_with.html"/>
      <id>2f357e23042619ad16ce2da45216e87dd317f911:reference/algorithm/ranges_ends_with.md</id>
      <updated>2022-02-07T04:50:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_ends_with.md b/reference/algorithm/ranges_ends_with.md
index 84cd76c80..06fa0976c 100644
--- a/reference/algorithm/ranges_ends_with.md
+++ b/reference/algorithm/ranges_ends_with.md
@@ -113,7 +113,8 @@ inline constexpr ends_with_impl ends_with;
 * forward_range[link /reference/ranges/forward_range.md]
 * sized_range[link /reference/ranges/sized_range.md]
 * iterator_t[link /reference/ranges/iterator_t.md]
-* distance[link /reference/iterator/distance.md]
+* move[link /reference/utility/move.md]
+* distance[link /reference/iterator/ranges_distance.md]
 * equal[link ranges_equal.md]
 * drop_view[link /reference/ranges/drop_view.md]
 * ref_view[link /reference/ranges/ref_view.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find -- リンク修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_find.html"/>
      <id>2f357e23042619ad16ce2da45216e87dd317f911:reference/algorithm/ranges_find.md</id>
      <updated>2022-02-07T04:50:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_find.md b/reference/algorithm/ranges_find.md
index 1bb8378f9..c48ae0f43 100644
--- a/reference/algorithm/ranges_find.md
+++ b/reference/algorithm/ranges_find.md
@@ -15,15 +15,15 @@ namespace std::ranges {
   constexpr borrowed_iterator_t&amp;lt;R&amp;gt; find(R&amp;amp;&amp;amp; r, const T&amp;amp; value, Proj proj = {});
 }
 ```
-- input_iterator[link /reference/iterator/input_iterator.md]
-- sentinel_for[link /reference/iterator/sentinel_for.md]
-- borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
-- iterator_t[link /reference/ranges/iterator_t.md]
-- identity[link /reference/functional/identity.md]
-- indirect_binary_predicate[link /reference/iterator/indirect_binary_predicate.md]
-- ranges::equal_to[link /reference/functional/ranges_equal_to.md]
-- input_range[link /reference/ranges/input_range.md]
-- projected[link /reference/iterator/projected.md]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* identity[link /reference/functional/identity.md]
+* indirect_binary_predicate[link /reference/iterator/indirect_binary_predicate.md]
+* ranges::equal_to[link /reference/functional/ranges_equal_to.md]
+* input_range[link /reference/ranges/input_range.md]
+* projected[link /reference/iterator/projected.md]
 
 ## 概要
 指定された値を検索する。
@@ -80,10 +80,14 @@ struct find_impl {
 
 inline constexpr find_impl find;
 ```
+* input_iterator[link /reference/iterator/input_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
 * identity[link /reference/functional/identity.md]
 * indirect_binary_predicate[link /reference/iterator/indirect_binary_predicate.md]
 * ranges::equal_to[link /reference/functional/ranges_equal_to.md]
+* input_range[link /reference/ranges/input_range.md]
 * projected[link /reference/iterator/projected.md]
 * invoke[link /reference/functional/invoke.md]
 * begin[link /reference/ranges/begin.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_if -- リンク修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_find_if.html"/>
      <id>2f357e23042619ad16ce2da45216e87dd317f911:reference/algorithm/ranges_find_if.md</id>
      <updated>2022-02-07T04:50:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_find_if.md b/reference/algorithm/ranges_find_if.md
index c2181730f..00aecc5bc 100644
--- a/reference/algorithm/ranges_find_if.md
+++ b/reference/algorithm/ranges_find_if.md
@@ -13,14 +13,14 @@ namespace std::ranges {
   constexpr borrowed_iterator_t&amp;lt;R&amp;gt; find_if(R&amp;amp;&amp;amp; r, Pred pred, Proj proj = {});
 }
 ```
-- input_iterator[link /reference/iterator/input_iterator.md]
-- sentinel_for[link /reference/iterator/sentinel_for.md]
-- borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
-- iterator_t[link /reference/ranges/iterator_t.md]
-- identity[link /reference/functional/identity.md]
-- indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
-- input_range[link /reference/ranges/input_range.md]
-- projected[link /reference/iterator/projected.md]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* identity[link /reference/functional/identity.md]
+* indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
+* input_range[link /reference/ranges/input_range.md]
+* projected[link /reference/iterator/projected.md]
 
 ## 概要
 範囲の中から、指定された条件を満たす最初の要素を検索する。
@@ -77,12 +77,14 @@ struct find_if_impl {
 
 inline constexpr find_if_impl find_if;
 ```
+* input_iterator[link /reference/iterator/input_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
 * identity[link /reference/functional/identity.md]
 * indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
+* input_range[link /reference/ranges/input_range.md]
 * projected[link /reference/iterator/projected.md]
-* iter_difference_t[link /reference/iterator/iter_difference_t.md]
-* range_difference_t[link /reference/ranges/range_difference_t.md]
 * invoke[link /reference/functional/invoke.md]
 * begin[link /reference/ranges/begin.md]
 * end[link /reference/ranges/end.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_if_not -- リンク修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_find_if_not.html"/>
      <id>2f357e23042619ad16ce2da45216e87dd317f911:reference/algorithm/ranges_find_if_not.md</id>
      <updated>2022-02-07T04:50:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_find_if_not.md b/reference/algorithm/ranges_find_if_not.md
index b92565a21..dd7ce77e7 100644
--- a/reference/algorithm/ranges_find_if_not.md
+++ b/reference/algorithm/ranges_find_if_not.md
@@ -13,14 +13,14 @@ namespace std::ranges {
   constexpr borrowed_iterator_t&amp;lt;R&amp;gt; find_if_not(R&amp;amp;&amp;amp; r, Pred pred, Proj proj = {});
 }
 ```
-- input_iterator[link /reference/iterator/input_iterator.md]
-- sentinel_for[link /reference/iterator/sentinel_for.md]
-- borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
-- iterator_t[link /reference/ranges/iterator_t.md]
-- identity[link /reference/functional/identity.md]
-- indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
-- input_range[link /reference/ranges/input_range.md]
-- projected[link /reference/iterator/projected.md]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* identity[link /reference/functional/identity.md]
+* indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
+* input_range[link /reference/ranges/input_range.md]
+* projected[link /reference/iterator/projected.md]
 
 ## 概要
 範囲の中から、指定された条件を満たさない最初の要素を検索する。
@@ -77,12 +77,14 @@ struct find_if_not_impl {
 
 inline constexpr find_if_not_impl find_if_not;
 ```
+* input_iterator[link /reference/iterator/input_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
 * identity[link /reference/functional/identity.md]
 * indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
+* input_range[link /reference/ranges/input_range.md]
 * projected[link /reference/iterator/projected.md]
-* iter_difference_t[link /reference/iterator/iter_difference_t.md]
-* range_difference_t[link /reference/ranges/range_difference_t.md]
 * invoke[link /reference/functional/invoke.md]
 * begin[link /reference/ranges/begin.md]
 * end[link /reference/ranges/end.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>priority_queue -- Merge pull request #939 from nrnrk/patch-1</title>
      <link href="https://cpprefjp.github.io/reference/queue/priority_queue.html"/>
      <id>a901a7d16bd7c2671f6fad934764d52614399d4d:reference/queue/priority_queue.md</id>
      <updated>2022-01-29T23:35:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/queue/priority_queue.md b/reference/queue/priority_queue.md
index 855de0c64..5e92093c2 100644
--- a/reference/queue/priority_queue.md
+++ b/reference/queue/priority_queue.md
@@ -27,7 +27,7 @@ namespace std {
 
 この要件を満たすものとしては[`vector`](/reference/vector.md)と[`deque`](/reference/deque/deque.md)があり、デフォルトでは[`vector`](/reference/vector.md)が使用される。
 
-`queue`は2つのテンプレート引数を持つ。
+`priority_queue`は3つのテンプレート引数を持つ。
 
 各テンプレートパラメータの意味は以下の通りである。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>priority_queue -- Fix typo in priority_queue description</title>
      <link href="https://cpprefjp.github.io/reference/queue/priority_queue.html"/>
      <id>a85a7e8eda98c06830cb801345fa2ba4ad170266:reference/queue/priority_queue.md</id>
      <updated>2022-01-29T22:15:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/queue/priority_queue.md b/reference/queue/priority_queue.md
index 855de0c64..5e92093c2 100644
--- a/reference/queue/priority_queue.md
+++ b/reference/queue/priority_queue.md
@@ -27,7 +27,7 @@ namespace std {
 
 この要件を満たすものとしては[`vector`](/reference/vector.md)と[`deque`](/reference/deque/deque.md)があり、デフォルトでは[`vector`](/reference/vector.md)が使用される。
 
-`queue`は2つのテンプレート引数を持つ。
+`priority_queue`は3つのテンプレート引数を持つ。
 
 各テンプレートパラメータの意味は以下の通りである。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>nrnrk</name>
        <email>noriki6t@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>UTF-8エンコーディングされた文字の型として`char8_t`を追加 -- char8_tマクロの更新について追記</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/char8_t.html"/>
      <id>85be0bfab59e5ad13cedb369d4bdc336aa2f3a6e:lang/cpp20/char8_t.md</id>
      <updated>2022-01-28T18:14:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/char8_t.md b/lang/cpp20/char8_t.md
index 1a6f056d1..f1b2588d4 100644
--- a/lang/cpp20/char8_t.md
+++ b/lang/cpp20/char8_t.md
@@ -32,7 +32,7 @@ UTF-8でエンコードされた文字を格納することを想定した型と
 | マクロ名            | 値       |
 |---------------------|----------|
 | `__cpp_char8_t`     | `201811` |
-| `__cpp_lib_char8_t` | `201811` |
+| `__cpp_lib_char8_t` | `201811` &amp;lt;br/&amp;gt; `201907` （P1423R3によって更新） |
 
 ## 例
 ```cpp example
@@ -150,7 +150,7 @@ enum class char8_t : unsigned char {};
 - [`path::generic_u8string`](/reference/filesystem/path/generic_u8string.md)
 - [`operator &amp;#34;&amp;#34;s`](/reference/string/basic_string/op_s.md)
 - [`operator &amp;#34;&amp;#34;sv`](/reference/string_view/basic_string_view/op_sv.md)
-
+- [`operator&amp;lt;&amp;lt;`](/reference/ostream/basic_ostream/op_ostream_free.md)
 
 ## 参照
 
@@ -169,5 +169,6 @@ enum class char8_t : unsigned char {};
 
 ### その他
 
+- [P1423R3: char8_t backward compatibility remediation](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1423r3.html)
 - [Proposal for a C/C++ language extension to support portable UTF-16](http://web.archive.org/web/20140701223639/http://www.unicode.org/~asmus/stdc-utf-16.txt)
 - [char8_tによせて - なるせにっき](https://naruse.hateblo.jp/entry/2018/12/24/013446)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>UTF-8エンコーディングされた文字の型として`char8_t`を追加 -- リンク修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/char8_t.html"/>
      <id>bfacff37eb96ca170a92a8981dec9a99176bf1bd:lang/cpp20/char8_t.md</id>
      <updated>2022-01-28T18:12:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/char8_t.md b/lang/cpp20/char8_t.md
index 33d9e4451..1a6f056d1 100644
--- a/lang/cpp20/char8_t.md
+++ b/lang/cpp20/char8_t.md
@@ -27,7 +27,7 @@ UTF-8でエンコードされた文字を格納することを想定した型と
 
 ## 備考
 
-[機能テストマクロ](../../lang/cpp20/feature_test_macros.md.nolink)は以下の通り。
+[機能テストマクロ](../../lang/cpp20/feature_test_macros.md)は以下の通り。
 
 | マクロ名            | 値       |
 |---------------------|----------|
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; (非メンバ関数) -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/ostream/basic_ostream/op_ostream_free.html"/>
      <id>bfacff37eb96ca170a92a8981dec9a99176bf1bd:reference/ostream/basic_ostream/op_ostream_free.md</id>
      <updated>2022-01-28T18:12:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ostream/basic_ostream/op_ostream_free.md b/reference/ostream/basic_ostream/op_ostream_free.md
index 593a3cbf2..3ea6ffb76 100644
--- a/reference/ostream/basic_ostream/op_ostream_free.md
+++ b/reference/ostream/basic_ostream/op_ostream_free.md
@@ -229,7 +229,7 @@ int main()
 
 そこで(6)～(12)、(18)～(24)のように`delete`指定された`operator&amp;lt;&amp;lt;`を追加することで不適格にし、このような直感的ではない挙動を避ける。
 
-[機能テストマクロ](/lang/cpp20/feature_test_macros.md.nolink)は`__cpp_lib_char8_t`で、値は`201907`。
+[機能テストマクロ](/lang/cpp20/feature_test_macros.md)は`__cpp_lib_char8_t`で、値は`201907`。
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
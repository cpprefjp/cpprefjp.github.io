<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-12-18T14:41:10.421096</updated>
  <id>8f66d33d-a2dd-4f24-89c2-aa1f83f934d6</id>

  
    <entry>
      <title>partition -- partition : Nの定義とそれを使うように説明を修正 #930</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/partition.html"/>
      <id>35854637554ec1aa16bc46e8ef3007a632336f42:reference/algorithm/partition.md</id>
      <updated>2021-12-18T01:43:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/partition.md b/reference/algorithm/partition.md
index 76ac6c7d4..0d4e57d0c 100644
--- a/reference/algorithm/partition.md
+++ b/reference/algorithm/partition.md
@@ -49,7 +49,10 @@ namespace std {
 
 
 ## 計算量
-- (1) : `ForwardIterator` が `BidirectionalIterator` の要求を満たしている場合、最大で `(last - first) / 2` 回 swap され、そうでない場合、最大で `last - first` 回 swap される。それに加えて、正確に `last - first` 回だけ述語が適用される
+
+`N = last - first`として
+
+- (1) : `ForwardIterator` が `BidirectionalIterator` の要求を満たしている場合、最大で `N / 2` 回 swap され、そうでない場合、最大で `N` 回 swap される。それに加えて、正確に `N` 回だけ述語が適用される
 - (2) : O(NlogN) 回の swap に加え、述語が O(N) 回適用される
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>binary_search -- Merge pull request #930 from rsk0315/fix/algorithm</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/binary_search.html"/>
      <id>2e5ae9811539ce82846bc9881d634a3fb0818302:reference/algorithm/binary_search.md</id>
      <updated>2021-12-18T00:05:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/binary_search.md b/reference/algorithm/binary_search.md
index f2551d74d..9bf8bd586 100644
--- a/reference/algorithm/binary_search.md
+++ b/reference/algorithm/binary_search.md
@@ -44,7 +44,7 @@ namespace std {
 
 
 ## 計算量
-最大で log2(`last - first`) + 1 回の比較を行う
+最大で log2(`last - first`) + O(1) 回の比較を行う
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal -- Merge pull request #930 from rsk0315/fix/algorithm</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/equal.html"/>
      <id>2e5ae9811539ce82846bc9881d634a3fb0818302:reference/algorithm/equal.md</id>
      <updated>2021-12-18T00:05:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/equal.md b/reference/algorithm/equal.md
index c646af80b..cfd70a295 100644
--- a/reference/algorithm/equal.md
+++ b/reference/algorithm/equal.md
@@ -108,7 +108,7 @@ namespace std {
 `last2` が与えられていない形式では、`last2 = first2 + (last1 - first1)`であるとして説明する。
 
 - (1), (2), (3), (4) : `InputIterator1` と `InputIterator2` が共にランダムアクセスイテレータの要件を満たす場合で、かつ、`last1 - first1 != last2 - first2` の場合、1 度も比較または述語は適用されない。そうでない場合、最大で `min(last1 - first1, last2 - first2)` 回の比較または述語が適用される。
-- (5), (6), (7), (8) : `ForwardIterator1` と `ForwardIterator2` が共にランダムアクセスイテレータの要件を満たす場合で、かつ、`last1 - first1 != last2 - first2` の場合、1 度も比較または述語は適用されない。そうでない場合、O(`min(last1 - first1, last2 - first2)`) の計算量で比較または述語が適用される。
+- (5), (6), (7), (8) : `ForwardIterator1` と `ForwardIterator2` が共にランダムアクセスイテレータの要件を満たす場合で、かつ、`last1 - first1 != last2 - first2` の場合、1 度も比較または述語は適用されない。そうでない場合、O(`min(last1 - first1, last2 - first2)`) 回の比較または述語が適用される。
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal_range -- Merge pull request #930 from rsk0315/fix/algorithm</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/equal_range.html"/>
      <id>2e5ae9811539ce82846bc9881d634a3fb0818302:reference/algorithm/equal_range.md</id>
      <updated>2021-12-18T00:05:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/equal_range.md b/reference/algorithm/equal_range.md
index fd3c00ba9..9e1add89e 100644
--- a/reference/algorithm/equal_range.md
+++ b/reference/algorithm/equal_range.md
@@ -51,7 +51,7 @@ namespace std {
 
 
 ## 計算量
-最大で 2 * log2(`last - first`) + 1 回の比較を行う
+最大で 2 * log2(`last - first`) + O(1) 回の比較を行う
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>inplace_merge -- Merge pull request #930 from rsk0315/fix/algorithm</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/inplace_merge.html"/>
      <id>2e5ae9811539ce82846bc9881d634a3fb0818302:reference/algorithm/inplace_merge.md</id>
      <updated>2021-12-18T00:05:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/inplace_merge.md b/reference/algorithm/inplace_merge.md
index be6e36924..8d75f70c6 100644
--- a/reference/algorithm/inplace_merge.md
+++ b/reference/algorithm/inplace_merge.md
@@ -54,8 +54,8 @@ namespace std {
 ## 計算量
 `N = last - first`であるとして説明する。
 
-- (1), (2) : 余分なメモリを使用する場合は、`N - 1` 回比較する。そうでない場合は、N log(N)回程度比較する
-- (3), (4) : O(N log N)計算量で比較する
+- (1), (2) : 余分なメモリを使用する場合は、`N - 1` 回比較する。そうでない場合は、O(N log(N))回比較する
+- (3), (4) : O(N log N)回比較する
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lower_bound -- Merge pull request #930 from rsk0315/fix/algorithm</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/lower_bound.html"/>
      <id>2e5ae9811539ce82846bc9881d634a3fb0818302:reference/algorithm/lower_bound.md</id>
      <updated>2021-12-18T00:05:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/lower_bound.md b/reference/algorithm/lower_bound.md
index 0a2f4fe73..2449a80c4 100644
--- a/reference/algorithm/lower_bound.md
+++ b/reference/algorithm/lower_bound.md
@@ -62,7 +62,7 @@ namespace std {
 
 
 ## 計算量
-最大で log2(`last - first`) + 1 回の比較を行う
+最大で log2(`last - first`) + O(1) 回の比較を行う
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>merge -- Merge pull request #930 from rsk0315/fix/algorithm</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/merge.html"/>
      <id>2e5ae9811539ce82846bc9881d634a3fb0818302:reference/algorithm/merge.md</id>
      <updated>2021-12-18T00:05:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/merge.md b/reference/algorithm/merge.md
index e05118dc0..09087bd18 100644
--- a/reference/algorithm/merge.md
+++ b/reference/algorithm/merge.md
@@ -85,7 +85,7 @@ namespace std {
 `N = (last1 - first1) + (last2 - first2)`であるとして説明する。
 
 - (1), (2) : 最大でN - 1回比較する
-- (3), (4) : O(N)計算量の回数だけ比較する
+- (3), (4) : O(N) 回だけ比較する
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>minmax -- Merge pull request #930 from rsk0315/fix/algorithm</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/minmax.html"/>
      <id>2e5ae9811539ce82846bc9881d634a3fb0818302:reference/algorithm/minmax.md</id>
      <updated>2021-12-18T00:05:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/minmax.md b/reference/algorithm/minmax.md
index 6db906e06..1d9c9a1b0 100644
--- a/reference/algorithm/minmax.md
+++ b/reference/algorithm/minmax.md
@@ -107,17 +107,17 @@ int main()
 template &amp;lt;class T&amp;gt;
 std::pair&amp;lt;const T&amp;amp;, const T&amp;amp;&amp;gt; minmax(const T&amp;amp; a, const T&amp;amp; b)
 {
-  return a &amp;lt; b ?
-            std::pair&amp;lt;const T&amp;amp;, const T&amp;amp;&amp;gt;(a, b) :
-            std::pair&amp;lt;const T&amp;amp;, const T&amp;amp;&amp;gt;(b, a);
+  return b &amp;lt; a ?
+            std::pair&amp;lt;const T&amp;amp;, const T&amp;amp;&amp;gt;(b, a) :
+            std::pair&amp;lt;const T&amp;amp;, const T&amp;amp;&amp;gt;(a, b);
 }
 
 template &amp;lt;class T, class Compare&amp;gt;
 std::pair&amp;lt;const T&amp;amp;, const T&amp;amp;&amp;gt; minmax(const T&amp;amp; a, const T&amp;amp; b, Compare comp)
 {
-  return comp(a, b) ?
-            std::pair&amp;lt;const T&amp;amp;, const T&amp;amp;&amp;gt;(a, b) :
-            std::pair&amp;lt;const T&amp;amp;, const T&amp;amp;&amp;gt;(b, a);
+  return comp(b, a) ?
+            std::pair&amp;lt;const T&amp;amp;, const T&amp;amp;&amp;gt;(b, a) :
+            std::pair&amp;lt;const T&amp;amp;, const T&amp;amp;&amp;gt;(a, b);
 }
 
 template &amp;lt;class T&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>minmax_element -- Merge pull request #930 from rsk0315/fix/algorithm</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/minmax_element.html"/>
      <id>2e5ae9811539ce82846bc9881d634a3fb0818302:reference/algorithm/minmax_element.md</id>
      <updated>2021-12-18T00:05:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/minmax_element.md b/reference/algorithm/minmax_element.md
index f475d357f..a6527a3ab 100644
--- a/reference/algorithm/minmax_element.md
+++ b/reference/algorithm/minmax_element.md
@@ -44,7 +44,7 @@ namespace std {
 
 
 ## 計算量
-`n` を範囲の要素数とする場合、[`max`](max.md)`(3(n / 2) - 1, 0)` 回の述語適用を行う。
+`n` を範囲の要素数とする場合、[`max`](max.md)`(floor(3(n - 1) / 2), 0)` 回の述語適用を行う。
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>nth_element -- Merge pull request #930 from rsk0315/fix/algorithm</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/nth_element.html"/>
      <id>2e5ae9811539ce82846bc9881d634a3fb0818302:reference/algorithm/nth_element.md</id>
      <updated>2021-12-18T00:05:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/nth_element.md b/reference/algorithm/nth_element.md
index b279543d2..8050f7f4b 100644
--- a/reference/algorithm/nth_element.md
+++ b/reference/algorithm/nth_element.md
@@ -64,7 +64,7 @@ namespace std {
 
 ## 計算量
 - (1), (2) : 平均で線形時間
-- (3), (4) : `N = last - first`であるとして、O(N)計算量の回数だけ比較または述語の適用と、O(NlogN)計算量の回数だけswap操作を行う
+- (3), (4) : `N = last - first`であるとして、O(N)回だけ比較または述語の適用と、O(NlogN)回だけswap操作を行う
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>partition -- Merge pull request #930 from rsk0315/fix/algorithm</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/partition.html"/>
      <id>2e5ae9811539ce82846bc9881d634a3fb0818302:reference/algorithm/partition.md</id>
      <updated>2021-12-18T00:05:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/partition.md b/reference/algorithm/partition.md
index 541b4b5fc..76ac6c7d4 100644
--- a/reference/algorithm/partition.md
+++ b/reference/algorithm/partition.md
@@ -50,7 +50,7 @@ namespace std {
 
 ## 計算量
 - (1) : `ForwardIterator` が `BidirectionalIterator` の要求を満たしている場合、最大で `(last - first) / 2` 回 swap され、そうでない場合、最大で `last - first` 回 swap される。それに加えて、正確に `last - first` 回だけ述語が適用される
-- (2) : O(NlogN)計算量でswapが行われ、それに加えてO(N)計算量の回数だけ述語が適用される
+- (2) : O(NlogN) 回の swap に加え、述語が O(N) 回適用される
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>partition_point -- Merge pull request #930 from rsk0315/fix/algorithm</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/partition_point.html"/>
      <id>2e5ae9811539ce82846bc9881d634a3fb0818302:reference/algorithm/partition_point.md</id>
      <updated>2021-12-18T00:05:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/partition_point.md b/reference/algorithm/partition_point.md
index a357fefb9..31c83e155 100644
--- a/reference/algorithm/partition_point.md
+++ b/reference/algorithm/partition_point.md
@@ -34,7 +34,7 @@ namespace std {
 
 
 ## 計算量
-O(log(`last - first`)) のオーダーで `pred` が適用される。
+`pred` が O(log(`last - first`)) 回適用される。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sort -- Merge pull request #930 from rsk0315/fix/algorithm</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/sort.html"/>
      <id>2e5ae9811539ce82846bc9881d634a3fb0818302:reference/algorithm/sort.md</id>
      <updated>2021-12-18T00:05:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/sort.md b/reference/algorithm/sort.md
index 2a488dd5a..40a654951 100644
--- a/reference/algorithm/sort.md
+++ b/reference/algorithm/sort.md
@@ -54,13 +54,13 @@ namespace std {
 
 ## 計算量
 - C++03: 平均して約N log N (N == `last - first`) 回の比較
-- C++11以降: O(N log N) (N == `last - first`) 計算量での比較
+- C++11以降: O(N log N) (N == `last - first`) 回の比較
 
 
 ## 備考
 - この関数には、特定のアルゴリズムで実装すべきという規定はない
 - 実装のアルゴリズムとしては、クイックソートの改良版であるイントロソートが使われることが多い
-- クイックソートは平均計算量がO(N Log N)だが、最悪計算量がO(n&amp;lt;sup&amp;gt;2&amp;lt;/sup&amp;gt;)である。そのため、C++03の計算量要件には合致するが、C++11の要件には合致しない
+- クイックソートは平均計算量がO(N log N)だが、最悪計算量がO(n&amp;lt;sup&amp;gt;2&amp;lt;/sup&amp;gt;)である。そのため、C++03の計算量要件には合致するが、C++11の要件には合致しない
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stable_partition -- Merge pull request #930 from rsk0315/fix/algorithm</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/stable_partition.html"/>
      <id>2e5ae9811539ce82846bc9881d634a3fb0818302:reference/algorithm/stable_partition.md</id>
      <updated>2021-12-18T00:05:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/stable_partition.md b/reference/algorithm/stable_partition.md
index 00f704a3e..523787490 100644
--- a/reference/algorithm/stable_partition.md
+++ b/reference/algorithm/stable_partition.md
@@ -45,7 +45,7 @@ namespace std {
 `N = last - first`として説明する。
 
 - (1) : 最大でN log N回 swap が行われるが、余分なメモリを使って構わないのであれば線形回数の swap になる。それに加えて、正確にN回だけ述語が適用される
-- (2) : O(N log N)計算量の回数だけswap操作が行われ、それに加えてO(N)計算量の回数だけ述語が適用される
+- (2) : O(N log N) 回の swap に加え、述語が O(N) 回適用される
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>upper_bound -- Merge pull request #930 from rsk0315/fix/algorithm</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/upper_bound.html"/>
      <id>2e5ae9811539ce82846bc9881d634a3fb0818302:reference/algorithm/upper_bound.md</id>
      <updated>2021-12-18T00:05:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/upper_bound.md b/reference/algorithm/upper_bound.md
index 7dea6d963..025155cfe 100644
--- a/reference/algorithm/upper_bound.md
+++ b/reference/algorithm/upper_bound.md
@@ -60,7 +60,7 @@ namespace std {
 
 
 ## 計算量
-最大で log2(`last - first`) + 1 回の比較を行う
+最大で log2(`last - first`) + O(1) 回の比較を行う
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cstdlib -- Merge pull request #930 from rsk0315/fix/algorithm</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib.html"/>
      <id>2e5ae9811539ce82846bc9881d634a3fb0818302:reference/cstdlib.md</id>
      <updated>2021-12-18T00:05:38+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;cstdlib&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt;ヘッダでは、一般的なユーティリティの関数を定義する。これらの機能は基本的には、&lt;code&gt;std&lt;/code&gt;名前空間に属することを除いてC言語の標準ライブラリ&lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt;ヘッダと同じである。&lt;/p&gt;
&lt;p&gt;ただし、一部の機能には、&lt;code&gt;[[noreturn]]&lt;/code&gt;属性、&lt;code&gt;noexcept&lt;/code&gt;キーワード、スレッドローカルストレージのような、C++特有の言語機能に関する規定がある。&lt;/p&gt;
&lt;h2&gt;数値変換&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atoi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;int&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atoll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;long long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atof&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;double&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtoll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;long long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtoul&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;unsigned long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtoull&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;unsigned long long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtof&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、&lt;code&gt;float&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtod&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、&lt;code&gt;double&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtold&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、&lt;code&gt;long double&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;擬似乱数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;RAND_MAX&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rand&lt;/code&gt;関数によって生成される値域の最大値を表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;C++14から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;srand&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rand&lt;/code&gt;関数によって生成される擬似乱数のシードを指定する (function)&lt;/td&gt;
&lt;td&gt;C++14から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rand&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;srand&lt;/code&gt;で指定されたシードを元に、擬似乱数を生成する (function)&lt;/td&gt;
&lt;td&gt;C++14から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メモリ管理&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;aligned_alloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定したアライメントでメモリを確保する (function)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;malloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリを確保する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;calloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリを確保し、領域をゼロ初期化する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;realloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリを再確保する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;free&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;確保したメモリを解放する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;プログラムの開始と終了&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit_failure.html&#34;&gt;EXIT_FAILURE&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが異常終了したことを表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit_success.html&#34;&gt;EXIT_SUCCESS&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが正常終了したことを表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/abort.html&#34;&gt;abort&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムを異常終了させる (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit_.html&#34;&gt;_Exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;後処理をせずに、プログラムを終了させる (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit.html&#34;&gt;exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムを終了させる (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/atexit.html&#34;&gt;atexit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが通常の方法で終了するときに呼ばれる関数を登録する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/quick_exit.html&#34;&gt;quick_exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;後処理をせずに、プログラムを終了させる (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/at_quick_exit.html&#34;&gt;at_quick_exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quick_exit&lt;/code&gt;関数でプログラムが終了するときに呼ばれる関数を登録する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;getenv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;環境変数を取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;system&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;システムコマンドを実行する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;検索と並び替え&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bsearch&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;二分探索を行う (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;qsort&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の並べ替えを行う (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;整数に対する算術関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;abs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;の絶対値を取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;labs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long&lt;/code&gt;の絶対値を取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;llabs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long long&lt;/code&gt;の絶対値を取得する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;div_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;div&lt;/code&gt;関数の戻り値型 (class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;div&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;の除算を行う (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ldiv_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;div&lt;/code&gt;関数の戻り値型 (class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ldiv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long&lt;/code&gt;の除算を行う (functon)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lldiv_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;div&lt;/code&gt;関数の戻り値型 (class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lldiv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long long&lt;/code&gt;の除算を行う (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;マルチバイト文字とワイド文字の変換&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MB_CUR_MAX&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字列の最大サイズを表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mblen&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字の長さを取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mbtowc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字を、ワイド文字に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wctomb&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字を、マルチバイト文字に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mbstowcs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字列を、ワイド文字列に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wcstombs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字列を、マルチバイト文字列に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>実行ポリシー -- Merge pull request #930 from rsk0315/fix/algorithm</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/execution_policy.html"/>
      <id>2e5ae9811539ce82846bc9881d634a3fb0818302:reference/execution/execution/execution_policy.md</id>
      <updated>2021-12-18T00:05:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/execution_policy.md b/reference/execution/execution/execution_policy.md
index 50324c440..f1ee35df3 100644
--- a/reference/execution/execution/execution_policy.md
+++ b/reference/execution/execution/execution_policy.md
@@ -69,7 +69,7 @@ namespace std::execution {
 
 
 ## 計算量
-実行ポリシーをとらないアルゴリズムは「最大N回だけ関数`f()`を呼び出す」や「正確にN回だけ関数`f()`を呼び出す」のように計算量を規定する。実行ポリシーはそれを緩和し、ビッグオー記法を使用して「O(N)計算量の回数だけ関数`f()`を呼び出す」のように表記する。
+実行ポリシーをとらないアルゴリズムは「最大N回だけ関数`f()`を呼び出す」や「正確にN回だけ関数`f()`を呼び出す」のように計算量を規定する。実行ポリシーはそれを緩和し、ビッグオー記法を使用して「O(N)回だけ関数`f()`を呼び出す」のように表記する。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>exclusive_scan -- Merge pull request #930 from rsk0315/fix/algorithm</title>
      <link href="https://cpprefjp.github.io/reference/numeric/exclusive_scan.html"/>
      <id>2e5ae9811539ce82846bc9881d634a3fb0818302:reference/numeric/exclusive_scan.md</id>
      <updated>2021-12-18T00:05:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/exclusive_scan.md b/reference/numeric/exclusive_scan.md
index b52cb9287..c2d383d83 100644
--- a/reference/numeric/exclusive_scan.md
+++ b/reference/numeric/exclusive_scan.md
@@ -109,7 +109,7 @@ namespace std{
 
 
 ## 計算量
-関数オブジェクト`binary_op`をO(`last - first`)計算量の回数だけ適用する
+関数オブジェクト`binary_op`をO(`last - first`)回だけ適用する
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>inclusive_scan -- Merge pull request #930 from rsk0315/fix/algorithm</title>
      <link href="https://cpprefjp.github.io/reference/numeric/inclusive_scan.html"/>
      <id>2e5ae9811539ce82846bc9881d634a3fb0818302:reference/numeric/inclusive_scan.md</id>
      <updated>2021-12-18T00:05:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/inclusive_scan.md b/reference/numeric/inclusive_scan.md
index 8645b31bc..17092d984 100644
--- a/reference/numeric/inclusive_scan.md
+++ b/reference/numeric/inclusive_scan.md
@@ -136,7 +136,7 @@ namespace std{
 
 
 ## 計算量
-関数オブジェクト`binary_op`をO(`last - first`)計算量の回数だけ適用する
+関数オブジェクト`binary_op`をO(`last - first`)回だけ適用する
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reduce -- Merge pull request #930 from rsk0315/fix/algorithm</title>
      <link href="https://cpprefjp.github.io/reference/numeric/reduce.html"/>
      <id>2e5ae9811539ce82846bc9881d634a3fb0818302:reference/numeric/reduce.md</id>
      <updated>2021-12-18T00:05:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/reduce.md b/reference/numeric/reduce.md
index aff48bab0..755e20e55 100644
--- a/reference/numeric/reduce.md
+++ b/reference/numeric/reduce.md
@@ -108,7 +108,7 @@ namespace std{
 
 
 ## 計算量
-関数オブジェクト`binary_op`をO(`last - first`)計算量の回数だけ適用する
+関数オブジェクト`binary_op`をO(`last - first`)回だけ適用する
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transform_exclusive_scan -- Merge pull request #930 from rsk0315/fix/algorithm</title>
      <link href="https://cpprefjp.github.io/reference/numeric/transform_exclusive_scan.html"/>
      <id>2e5ae9811539ce82846bc9881d634a3fb0818302:reference/numeric/transform_exclusive_scan.md</id>
      <updated>2021-12-18T00:05:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/transform_exclusive_scan.md b/reference/numeric/transform_exclusive_scan.md
index 40381bab0..52fd1d58c 100644
--- a/reference/numeric/transform_exclusive_scan.md
+++ b/reference/numeric/transform_exclusive_scan.md
@@ -79,7 +79,7 @@ namespace std{
 
 
 ## 計算量
-関数オブジェクト`unary_op`と`binary_op`をO(`last - first`)計算量の回数だけ適用する
+関数オブジェクト`unary_op`と`binary_op`をO(`last - first`)回だけ適用する
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transform_inclusive_scan -- Merge pull request #930 from rsk0315/fix/algorithm</title>
      <link href="https://cpprefjp.github.io/reference/numeric/transform_inclusive_scan.html"/>
      <id>2e5ae9811539ce82846bc9881d634a3fb0818302:reference/numeric/transform_inclusive_scan.md</id>
      <updated>2021-12-18T00:05:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/transform_inclusive_scan.md b/reference/numeric/transform_inclusive_scan.md
index 91816812b..86a5fd071 100644
--- a/reference/numeric/transform_inclusive_scan.md
+++ b/reference/numeric/transform_inclusive_scan.md
@@ -113,7 +113,7 @@ namespace std{
 
 
 ## 計算量
-関数オブジェクト`unary_op`と`binary_op`をO(`last - first`)計算量の回数だけ適用する
+関数オブジェクト`unary_op`と`binary_op`をO(`last - first`)回だけ適用する
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transform_reduce -- Merge pull request #930 from rsk0315/fix/algorithm</title>
      <link href="https://cpprefjp.github.io/reference/numeric/transform_reduce.html"/>
      <id>2e5ae9811539ce82846bc9881d634a3fb0818302:reference/numeric/transform_reduce.md</id>
      <updated>2021-12-18T00:05:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/transform_reduce.md b/reference/numeric/transform_reduce.md
index 1dfb01fc2..ae05eaadd 100644
--- a/reference/numeric/transform_reduce.md
+++ b/reference/numeric/transform_reduce.md
@@ -140,8 +140,8 @@ namespace std{
 
 
 ## 計算量
-- (1), (2), (4), (5) : 関数オブジェクト`binary_op1`と`binary_op2`を、O(`last1 - first1`)計算量の回数だけ適用する
-- (3), (6) : 関数オブジェクト`unary_op`と`binary_op`をO(`last - first`)計算量の回数だけ適用する
+- (1), (2), (4), (5) : 関数オブジェクト`binary_op1`と`binary_op2`を、O(`last1 - first1`)回だけ適用する
+- (3), (6) : 関数オブジェクト`unary_op`と`binary_op`をO(`last - first`)回だけ適用する
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>minmax_element -- [fix] 適用回数</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/minmax_element.html"/>
      <id>437795a63e1cf270bed6d00fd996635745ef8288:reference/algorithm/minmax_element.md</id>
      <updated>2021-12-16T21:40:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/minmax_element.md b/reference/algorithm/minmax_element.md
index f475d357f..a6527a3ab 100644
--- a/reference/algorithm/minmax_element.md
+++ b/reference/algorithm/minmax_element.md
@@ -44,7 +44,7 @@ namespace std {
 
 
 ## 計算量
-`n` を範囲の要素数とする場合、[`max`](max.md)`(3(n / 2) - 1, 0)` 回の述語適用を行う。
+`n` を範囲の要素数とする場合、[`max`](max.md)`(floor(3(n - 1) / 2), 0)` 回の述語適用を行う。
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rsk0315</name>
        <email>rsk0315@icloud.com</email>
      </author>
    </entry>
  
    <entry>
      <title>minmax -- [fix] 実装例</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/minmax.html"/>
      <id>de0d7ca952f59be60d4fa3953432c330ddb317f1:reference/algorithm/minmax.md</id>
      <updated>2021-12-16T21:39:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/minmax.md b/reference/algorithm/minmax.md
index 6db906e06..1d9c9a1b0 100644
--- a/reference/algorithm/minmax.md
+++ b/reference/algorithm/minmax.md
@@ -107,17 +107,17 @@ int main()
 template &amp;lt;class T&amp;gt;
 std::pair&amp;lt;const T&amp;amp;, const T&amp;amp;&amp;gt; minmax(const T&amp;amp; a, const T&amp;amp; b)
 {
-  return a &amp;lt; b ?
-            std::pair&amp;lt;const T&amp;amp;, const T&amp;amp;&amp;gt;(a, b) :
-            std::pair&amp;lt;const T&amp;amp;, const T&amp;amp;&amp;gt;(b, a);
+  return b &amp;lt; a ?
+            std::pair&amp;lt;const T&amp;amp;, const T&amp;amp;&amp;gt;(b, a) :
+            std::pair&amp;lt;const T&amp;amp;, const T&amp;amp;&amp;gt;(a, b);
 }
 
 template &amp;lt;class T, class Compare&amp;gt;
 std::pair&amp;lt;const T&amp;amp;, const T&amp;amp;&amp;gt; minmax(const T&amp;amp; a, const T&amp;amp; b, Compare comp)
 {
-  return comp(a, b) ?
-            std::pair&amp;lt;const T&amp;amp;, const T&amp;amp;&amp;gt;(a, b) :
-            std::pair&amp;lt;const T&amp;amp;, const T&amp;amp;&amp;gt;(b, a);
+  return comp(b, a) ?
+            std::pair&amp;lt;const T&amp;amp;, const T&amp;amp;&amp;gt;(b, a) :
+            std::pair&amp;lt;const T&amp;amp;, const T&amp;amp;&amp;gt;(a, b);
 }
 
 template &amp;lt;class T&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rsk0315</name>
        <email>rsk0315@icloud.com</email>
      </author>
    </entry>
  
    <entry>
      <title>binary_search -- [fix] 表現</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/binary_search.html"/>
      <id>945d669242aa613ffa35253a1ca07d67a4e736f4:reference/algorithm/binary_search.md</id>
      <updated>2021-12-16T21:39:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/binary_search.md b/reference/algorithm/binary_search.md
index f2551d74d..9bf8bd586 100644
--- a/reference/algorithm/binary_search.md
+++ b/reference/algorithm/binary_search.md
@@ -44,7 +44,7 @@ namespace std {
 
 
 ## 計算量
-最大で log2(`last - first`) + 1 回の比較を行う
+最大で log2(`last - first`) + O(1) 回の比較を行う
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rsk0315</name>
        <email>rsk0315@icloud.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal -- [fix] 表現</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/equal.html"/>
      <id>945d669242aa613ffa35253a1ca07d67a4e736f4:reference/algorithm/equal.md</id>
      <updated>2021-12-16T21:39:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/equal.md b/reference/algorithm/equal.md
index c646af80b..cfd70a295 100644
--- a/reference/algorithm/equal.md
+++ b/reference/algorithm/equal.md
@@ -108,7 +108,7 @@ namespace std {
 `last2` が与えられていない形式では、`last2 = first2 + (last1 - first1)`であるとして説明する。
 
 - (1), (2), (3), (4) : `InputIterator1` と `InputIterator2` が共にランダムアクセスイテレータの要件を満たす場合で、かつ、`last1 - first1 != last2 - first2` の場合、1 度も比較または述語は適用されない。そうでない場合、最大で `min(last1 - first1, last2 - first2)` 回の比較または述語が適用される。
-- (5), (6), (7), (8) : `ForwardIterator1` と `ForwardIterator2` が共にランダムアクセスイテレータの要件を満たす場合で、かつ、`last1 - first1 != last2 - first2` の場合、1 度も比較または述語は適用されない。そうでない場合、O(`min(last1 - first1, last2 - first2)`) の計算量で比較または述語が適用される。
+- (5), (6), (7), (8) : `ForwardIterator1` と `ForwardIterator2` が共にランダムアクセスイテレータの要件を満たす場合で、かつ、`last1 - first1 != last2 - first2` の場合、1 度も比較または述語は適用されない。そうでない場合、O(`min(last1 - first1, last2 - first2)`) 回の比較または述語が適用される。
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rsk0315</name>
        <email>rsk0315@icloud.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal_range -- [fix] 表現</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/equal_range.html"/>
      <id>945d669242aa613ffa35253a1ca07d67a4e736f4:reference/algorithm/equal_range.md</id>
      <updated>2021-12-16T21:39:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/equal_range.md b/reference/algorithm/equal_range.md
index fd3c00ba9..9e1add89e 100644
--- a/reference/algorithm/equal_range.md
+++ b/reference/algorithm/equal_range.md
@@ -51,7 +51,7 @@ namespace std {
 
 
 ## 計算量
-最大で 2 * log2(`last - first`) + 1 回の比較を行う
+最大で 2 * log2(`last - first`) + O(1) 回の比較を行う
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rsk0315</name>
        <email>rsk0315@icloud.com</email>
      </author>
    </entry>
  
    <entry>
      <title>inplace_merge -- [fix] 表現</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/inplace_merge.html"/>
      <id>945d669242aa613ffa35253a1ca07d67a4e736f4:reference/algorithm/inplace_merge.md</id>
      <updated>2021-12-16T21:39:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/inplace_merge.md b/reference/algorithm/inplace_merge.md
index be6e36924..8d75f70c6 100644
--- a/reference/algorithm/inplace_merge.md
+++ b/reference/algorithm/inplace_merge.md
@@ -54,8 +54,8 @@ namespace std {
 ## 計算量
 `N = last - first`であるとして説明する。
 
-- (1), (2) : 余分なメモリを使用する場合は、`N - 1` 回比較する。そうでない場合は、N log(N)回程度比較する
-- (3), (4) : O(N log N)計算量で比較する
+- (1), (2) : 余分なメモリを使用する場合は、`N - 1` 回比較する。そうでない場合は、O(N log(N))回比較する
+- (3), (4) : O(N log N)回比較する
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rsk0315</name>
        <email>rsk0315@icloud.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lower_bound -- [fix] 表現</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/lower_bound.html"/>
      <id>945d669242aa613ffa35253a1ca07d67a4e736f4:reference/algorithm/lower_bound.md</id>
      <updated>2021-12-16T21:39:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/lower_bound.md b/reference/algorithm/lower_bound.md
index 0a2f4fe73..2449a80c4 100644
--- a/reference/algorithm/lower_bound.md
+++ b/reference/algorithm/lower_bound.md
@@ -62,7 +62,7 @@ namespace std {
 
 
 ## 計算量
-最大で log2(`last - first`) + 1 回の比較を行う
+最大で log2(`last - first`) + O(1) 回の比較を行う
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rsk0315</name>
        <email>rsk0315@icloud.com</email>
      </author>
    </entry>
  
    <entry>
      <title>merge -- [fix] 表現</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/merge.html"/>
      <id>945d669242aa613ffa35253a1ca07d67a4e736f4:reference/algorithm/merge.md</id>
      <updated>2021-12-16T21:39:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/merge.md b/reference/algorithm/merge.md
index e05118dc0..09087bd18 100644
--- a/reference/algorithm/merge.md
+++ b/reference/algorithm/merge.md
@@ -85,7 +85,7 @@ namespace std {
 `N = (last1 - first1) + (last2 - first2)`であるとして説明する。
 
 - (1), (2) : 最大でN - 1回比較する
-- (3), (4) : O(N)計算量の回数だけ比較する
+- (3), (4) : O(N) 回だけ比較する
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rsk0315</name>
        <email>rsk0315@icloud.com</email>
      </author>
    </entry>
  
    <entry>
      <title>nth_element -- [fix] 表現</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/nth_element.html"/>
      <id>945d669242aa613ffa35253a1ca07d67a4e736f4:reference/algorithm/nth_element.md</id>
      <updated>2021-12-16T21:39:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/nth_element.md b/reference/algorithm/nth_element.md
index b279543d2..8050f7f4b 100644
--- a/reference/algorithm/nth_element.md
+++ b/reference/algorithm/nth_element.md
@@ -64,7 +64,7 @@ namespace std {
 
 ## 計算量
 - (1), (2) : 平均で線形時間
-- (3), (4) : `N = last - first`であるとして、O(N)計算量の回数だけ比較または述語の適用と、O(NlogN)計算量の回数だけswap操作を行う
+- (3), (4) : `N = last - first`であるとして、O(N)回だけ比較または述語の適用と、O(NlogN)回だけswap操作を行う
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rsk0315</name>
        <email>rsk0315@icloud.com</email>
      </author>
    </entry>
  
    <entry>
      <title>partition -- [fix] 表現</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/partition.html"/>
      <id>945d669242aa613ffa35253a1ca07d67a4e736f4:reference/algorithm/partition.md</id>
      <updated>2021-12-16T21:39:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/partition.md b/reference/algorithm/partition.md
index 541b4b5fc..76ac6c7d4 100644
--- a/reference/algorithm/partition.md
+++ b/reference/algorithm/partition.md
@@ -50,7 +50,7 @@ namespace std {
 
 ## 計算量
 - (1) : `ForwardIterator` が `BidirectionalIterator` の要求を満たしている場合、最大で `(last - first) / 2` 回 swap され、そうでない場合、最大で `last - first` 回 swap される。それに加えて、正確に `last - first` 回だけ述語が適用される
-- (2) : O(NlogN)計算量でswapが行われ、それに加えてO(N)計算量の回数だけ述語が適用される
+- (2) : O(NlogN) 回の swap に加え、述語が O(N) 回適用される
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rsk0315</name>
        <email>rsk0315@icloud.com</email>
      </author>
    </entry>
  
    <entry>
      <title>partition_point -- [fix] 表現</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/partition_point.html"/>
      <id>945d669242aa613ffa35253a1ca07d67a4e736f4:reference/algorithm/partition_point.md</id>
      <updated>2021-12-16T21:39:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/partition_point.md b/reference/algorithm/partition_point.md
index a357fefb9..31c83e155 100644
--- a/reference/algorithm/partition_point.md
+++ b/reference/algorithm/partition_point.md
@@ -34,7 +34,7 @@ namespace std {
 
 
 ## 計算量
-O(log(`last - first`)) のオーダーで `pred` が適用される。
+`pred` が O(log(`last - first`)) 回適用される。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rsk0315</name>
        <email>rsk0315@icloud.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sort -- [fix] 表現</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/sort.html"/>
      <id>945d669242aa613ffa35253a1ca07d67a4e736f4:reference/algorithm/sort.md</id>
      <updated>2021-12-16T21:39:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/sort.md b/reference/algorithm/sort.md
index b49efaa26..15f97fb2b 100644
--- a/reference/algorithm/sort.md
+++ b/reference/algorithm/sort.md
@@ -54,13 +54,13 @@ namespace std {
 
 ## 計算量
 - C++03: 平均して約N log N (N == `last - first`) 回の比較
-- C++11以降: O(N log N) (N == `last - first`) 計算量での比較
+- C++11以降: O(N log N) (N == `last - first`) 回の比較
 
 
 ## 備考
 - この関数には、特定のアルゴリズムで実装すべきという規定はない
 - 実装のアルゴリズムとしては、クイックソートの改良版であるイントロソートが使われることが多い
-- クイックソートは平均計算量がO(N Log N)だが、最悪計算量がO(n&amp;lt;sup&amp;gt;2&amp;lt;/sup&amp;gt;)である。そのため、C++03の計算量要件には合致するが、C++11の要件には合致しない
+- クイックソートは平均計算量がO(N log N)だが、最悪計算量がO(n&amp;lt;sup&amp;gt;2&amp;lt;/sup&amp;gt;)である。そのため、C++03の計算量要件には合致するが、C++11の要件には合致しない
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rsk0315</name>
        <email>rsk0315@icloud.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stable_partition -- [fix] 表現</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/stable_partition.html"/>
      <id>945d669242aa613ffa35253a1ca07d67a4e736f4:reference/algorithm/stable_partition.md</id>
      <updated>2021-12-16T21:39:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/stable_partition.md b/reference/algorithm/stable_partition.md
index 00f704a3e..523787490 100644
--- a/reference/algorithm/stable_partition.md
+++ b/reference/algorithm/stable_partition.md
@@ -45,7 +45,7 @@ namespace std {
 `N = last - first`として説明する。
 
 - (1) : 最大でN log N回 swap が行われるが、余分なメモリを使って構わないのであれば線形回数の swap になる。それに加えて、正確にN回だけ述語が適用される
-- (2) : O(N log N)計算量の回数だけswap操作が行われ、それに加えてO(N)計算量の回数だけ述語が適用される
+- (2) : O(N log N) 回の swap に加え、述語が O(N) 回適用される
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rsk0315</name>
        <email>rsk0315@icloud.com</email>
      </author>
    </entry>
  
    <entry>
      <title>upper_bound -- [fix] 表現</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/upper_bound.html"/>
      <id>945d669242aa613ffa35253a1ca07d67a4e736f4:reference/algorithm/upper_bound.md</id>
      <updated>2021-12-16T21:39:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/upper_bound.md b/reference/algorithm/upper_bound.md
index 7dea6d963..025155cfe 100644
--- a/reference/algorithm/upper_bound.md
+++ b/reference/algorithm/upper_bound.md
@@ -60,7 +60,7 @@ namespace std {
 
 
 ## 計算量
-最大で log2(`last - first`) + 1 回の比較を行う
+最大で log2(`last - first`) + O(1) 回の比較を行う
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rsk0315</name>
        <email>rsk0315@icloud.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cstdlib -- [fix] 表現</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib.html"/>
      <id>945d669242aa613ffa35253a1ca07d67a4e736f4:reference/cstdlib.md</id>
      <updated>2021-12-16T21:39:17+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;cstdlib&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt;ヘッダでは、一般的なユーティリティの関数を定義する。これらの機能は基本的には、&lt;code&gt;std&lt;/code&gt;名前空間に属することを除いてC言語の標準ライブラリ&lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt;ヘッダと同じである。&lt;/p&gt;
&lt;p&gt;ただし、一部の機能には、&lt;code&gt;[[noreturn]]&lt;/code&gt;属性、&lt;code&gt;noexcept&lt;/code&gt;キーワード、スレッドローカルストレージのような、C++特有の言語機能に関する規定がある。&lt;/p&gt;
&lt;h2&gt;数値変換&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atoi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;int&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atoll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;long long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atof&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;double&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtoll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;long long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtoul&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;unsigned long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtoull&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;unsigned long long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtof&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、&lt;code&gt;float&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtod&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、&lt;code&gt;double&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtold&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、&lt;code&gt;long double&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;擬似乱数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;RAND_MAX&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rand&lt;/code&gt;関数によって生成される値域の最大値を表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;C++14から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;srand&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rand&lt;/code&gt;関数によって生成される擬似乱数のシードを指定する (function)&lt;/td&gt;
&lt;td&gt;C++14から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rand&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;srand&lt;/code&gt;で指定されたシードを元に、擬似乱数を生成する (function)&lt;/td&gt;
&lt;td&gt;C++14から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メモリ管理&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;aligned_alloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定したアライメントでメモリを確保する (function)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;malloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリを確保する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;calloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリを確保し、領域をゼロ初期化する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;realloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリを再確保する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;free&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;確保したメモリを解放する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;プログラムの開始と終了&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit_failure.html&#34;&gt;EXIT_FAILURE&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが異常終了したことを表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit_success.html&#34;&gt;EXIT_SUCCESS&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが正常終了したことを表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/abort.html&#34;&gt;abort&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムを異常終了させる (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit_.html&#34;&gt;_Exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;後処理をせずに、プログラムを終了させる (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit.html&#34;&gt;exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムを終了させる (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/atexit.html&#34;&gt;atexit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが通常の方法で終了するときに呼ばれる関数を登録する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/quick_exit.html&#34;&gt;quick_exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;後処理をせずに、プログラムを終了させる (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/at_quick_exit.html&#34;&gt;at_quick_exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quick_exit&lt;/code&gt;関数でプログラムが終了するときに呼ばれる関数を登録する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;getenv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;環境変数を取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;system&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;システムコマンドを実行する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;検索と並び替え&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bsearch&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;二分探索を行う (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;qsort&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の並べ替えを行う (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;整数に対する算術関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;abs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;の絶対値を取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;labs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long&lt;/code&gt;の絶対値を取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;llabs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long long&lt;/code&gt;の絶対値を取得する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;div_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;div&lt;/code&gt;関数の戻り値型 (class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;div&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;の除算を行う (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ldiv_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;div&lt;/code&gt;関数の戻り値型 (class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ldiv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long&lt;/code&gt;の除算を行う (functon)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lldiv_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;div&lt;/code&gt;関数の戻り値型 (class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lldiv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long long&lt;/code&gt;の除算を行う (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;マルチバイト文字とワイド文字の変換&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MB_CUR_MAX&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字列の最大サイズを表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mblen&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字の長さを取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mbtowc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字を、ワイド文字に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wctomb&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字を、マルチバイト文字に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mbstowcs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字列を、ワイド文字列に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wcstombs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字列を、マルチバイト文字列に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>rsk0315</name>
        <email>rsk0315@icloud.com</email>
      </author>
    </entry>
  
    <entry>
      <title>実行ポリシー -- [fix] 表現</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/execution_policy.html"/>
      <id>945d669242aa613ffa35253a1ca07d67a4e736f4:reference/execution/execution/execution_policy.md</id>
      <updated>2021-12-16T21:39:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/execution_policy.md b/reference/execution/execution/execution_policy.md
index 50324c440..f1ee35df3 100644
--- a/reference/execution/execution/execution_policy.md
+++ b/reference/execution/execution/execution_policy.md
@@ -69,7 +69,7 @@ namespace std::execution {
 
 
 ## 計算量
-実行ポリシーをとらないアルゴリズムは「最大N回だけ関数`f()`を呼び出す」や「正確にN回だけ関数`f()`を呼び出す」のように計算量を規定する。実行ポリシーはそれを緩和し、ビッグオー記法を使用して「O(N)計算量の回数だけ関数`f()`を呼び出す」のように表記する。
+実行ポリシーをとらないアルゴリズムは「最大N回だけ関数`f()`を呼び出す」や「正確にN回だけ関数`f()`を呼び出す」のように計算量を規定する。実行ポリシーはそれを緩和し、ビッグオー記法を使用して「O(N)回だけ関数`f()`を呼び出す」のように表記する。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rsk0315</name>
        <email>rsk0315@icloud.com</email>
      </author>
    </entry>
  
    <entry>
      <title>exclusive_scan -- [fix] 表現</title>
      <link href="https://cpprefjp.github.io/reference/numeric/exclusive_scan.html"/>
      <id>945d669242aa613ffa35253a1ca07d67a4e736f4:reference/numeric/exclusive_scan.md</id>
      <updated>2021-12-16T21:39:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/exclusive_scan.md b/reference/numeric/exclusive_scan.md
index b52cb9287..c2d383d83 100644
--- a/reference/numeric/exclusive_scan.md
+++ b/reference/numeric/exclusive_scan.md
@@ -109,7 +109,7 @@ namespace std{
 
 
 ## 計算量
-関数オブジェクト`binary_op`をO(`last - first`)計算量の回数だけ適用する
+関数オブジェクト`binary_op`をO(`last - first`)回だけ適用する
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rsk0315</name>
        <email>rsk0315@icloud.com</email>
      </author>
    </entry>
  
    <entry>
      <title>inclusive_scan -- [fix] 表現</title>
      <link href="https://cpprefjp.github.io/reference/numeric/inclusive_scan.html"/>
      <id>945d669242aa613ffa35253a1ca07d67a4e736f4:reference/numeric/inclusive_scan.md</id>
      <updated>2021-12-16T21:39:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/inclusive_scan.md b/reference/numeric/inclusive_scan.md
index 8645b31bc..17092d984 100644
--- a/reference/numeric/inclusive_scan.md
+++ b/reference/numeric/inclusive_scan.md
@@ -136,7 +136,7 @@ namespace std{
 
 
 ## 計算量
-関数オブジェクト`binary_op`をO(`last - first`)計算量の回数だけ適用する
+関数オブジェクト`binary_op`をO(`last - first`)回だけ適用する
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rsk0315</name>
        <email>rsk0315@icloud.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reduce -- [fix] 表現</title>
      <link href="https://cpprefjp.github.io/reference/numeric/reduce.html"/>
      <id>945d669242aa613ffa35253a1ca07d67a4e736f4:reference/numeric/reduce.md</id>
      <updated>2021-12-16T21:39:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/reduce.md b/reference/numeric/reduce.md
index aff48bab0..755e20e55 100644
--- a/reference/numeric/reduce.md
+++ b/reference/numeric/reduce.md
@@ -108,7 +108,7 @@ namespace std{
 
 
 ## 計算量
-関数オブジェクト`binary_op`をO(`last - first`)計算量の回数だけ適用する
+関数オブジェクト`binary_op`をO(`last - first`)回だけ適用する
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rsk0315</name>
        <email>rsk0315@icloud.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transform_exclusive_scan -- [fix] 表現</title>
      <link href="https://cpprefjp.github.io/reference/numeric/transform_exclusive_scan.html"/>
      <id>945d669242aa613ffa35253a1ca07d67a4e736f4:reference/numeric/transform_exclusive_scan.md</id>
      <updated>2021-12-16T21:39:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/transform_exclusive_scan.md b/reference/numeric/transform_exclusive_scan.md
index 40381bab0..52fd1d58c 100644
--- a/reference/numeric/transform_exclusive_scan.md
+++ b/reference/numeric/transform_exclusive_scan.md
@@ -79,7 +79,7 @@ namespace std{
 
 
 ## 計算量
-関数オブジェクト`unary_op`と`binary_op`をO(`last - first`)計算量の回数だけ適用する
+関数オブジェクト`unary_op`と`binary_op`をO(`last - first`)回だけ適用する
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rsk0315</name>
        <email>rsk0315@icloud.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transform_inclusive_scan -- [fix] 表現</title>
      <link href="https://cpprefjp.github.io/reference/numeric/transform_inclusive_scan.html"/>
      <id>945d669242aa613ffa35253a1ca07d67a4e736f4:reference/numeric/transform_inclusive_scan.md</id>
      <updated>2021-12-16T21:39:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/transform_inclusive_scan.md b/reference/numeric/transform_inclusive_scan.md
index 91816812b..86a5fd071 100644
--- a/reference/numeric/transform_inclusive_scan.md
+++ b/reference/numeric/transform_inclusive_scan.md
@@ -113,7 +113,7 @@ namespace std{
 
 
 ## 計算量
-関数オブジェクト`unary_op`と`binary_op`をO(`last - first`)計算量の回数だけ適用する
+関数オブジェクト`unary_op`と`binary_op`をO(`last - first`)回だけ適用する
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rsk0315</name>
        <email>rsk0315@icloud.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transform_reduce -- [fix] 表現</title>
      <link href="https://cpprefjp.github.io/reference/numeric/transform_reduce.html"/>
      <id>945d669242aa613ffa35253a1ca07d67a4e736f4:reference/numeric/transform_reduce.md</id>
      <updated>2021-12-16T21:39:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/transform_reduce.md b/reference/numeric/transform_reduce.md
index 1dfb01fc2..ae05eaadd 100644
--- a/reference/numeric/transform_reduce.md
+++ b/reference/numeric/transform_reduce.md
@@ -140,8 +140,8 @@ namespace std{
 
 
 ## 計算量
-- (1), (2), (4), (5) : 関数オブジェクト`binary_op1`と`binary_op2`を、O(`last1 - first1`)計算量の回数だけ適用する
-- (3), (6) : 関数オブジェクト`unary_op`と`binary_op`をO(`last - first`)計算量の回数だけ適用する
+- (1), (2), (4), (5) : 関数オブジェクト`binary_op1`と`binary_op2`を、O(`last1 - first1`)回だけ適用する
+- (3), (6) : 関数オブジェクト`unary_op`と`binary_op`をO(`last - first`)回だけ適用する
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rsk0315</name>
        <email>rsk0315@icloud.com</email>
      </author>
    </entry>
  
</feed>
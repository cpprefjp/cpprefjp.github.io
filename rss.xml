<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-01-30T13:52:22.848348</updated>
  <id>82c1ac66-3af6-4e91-a6a0-13f7f52f488d</id>

  
    <entry>
      <title>print -- print : コードの言語指定を追加</title>
      <link href="https://cpprefjp.github.io/reference/print/print.html"/>
      <id>e388ca69c6b456116a9cda79e221a8df66454bd2:reference/print/print.md</id>
      <updated>2023-01-30T22:39:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/print/print.md b/reference/print/print.md
index dfa7d6707..035692dca 100644
--- a/reference/print/print.md
+++ b/reference/print/print.md
@@ -65,7 +65,7 @@ namespace std {
 - LinuxやmacOSといった環境では、通常の`char`配列の文字列リテラルはUTF-8にエンコーディングされる
 - WindowsのVisual Studioにおいては、ソースコードと実行時文字集合をUTF-8にする[`/utf-8`オプション](https://learn.microsoft.com/en-us/cpp/build/reference/utf-8-set-source-and-executable-character-sets-to-utf-8?view=msvc-170)を使用することで、通常の`char`配列の文字列リテラルがUTF-8にエンコーディングされる
 - 「通常の文字列リテラルがUTF-8エンコーディングされている場合」という仕様は、コードでは以下のように表現できる：
-    ```
+    ```cpp
     constexpr bool is_utf8() {
       const unsigned char micro[] = &amp;#34;\u00B5&amp;#34;;
       return sizeof(micro) == 3 &amp;amp;&amp;amp; micro[0] == 0xC2 &amp;amp;&amp;amp; micro[1] == 0xB5;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- format : print / printlnへの言及を追加 #1082</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>dfae47736e42e6bf4603692f494e00540d05e3de:reference/format/format.md</id>
      <updated>2023-01-30T22:37:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index cac2cb3e8..5b94a42d8 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -42,6 +42,9 @@ string message = format(&amp;#34;The answer is {}.&amp;#34;, 42); // =&amp;gt; &amp;#34;The answer is 42.&amp;#34;
 
 書式文字列は定数式でなければならず、その妥当性がコンパイル時にチェックされる。実行時に決まるフォーマット文字列を使用したい場合、[`vformat`](vformat.md)を使用できる。
 
+C++23以降、書式指定で出力する[`std::print()`](/reference/print/print.md)、[`std::println()`](/reference/print/println.md)関数が定義される。
+
+
 ### 書式文字列
 
 書式文字列中では、`{`と`}`で囲まれた範囲が置換フィールドとなる(エスケープシーケンスは`{{`と`}}`)。
@@ -571,6 +574,16 @@ wstring format(const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... ar
 - [GCC](/implementation.md#gcc): 13
 - [Visual C++](/implementation.md#visual_cpp): ??
 
+
+## 関連項目
+- [`&amp;lt;print&amp;gt;`](/reference/print.md)
+    - [`std::print()`](/reference/print/print.md)
+    - [`std::println()`](/reference/print/println.md)
+- [`&amp;lt;ostream&amp;gt;`](/reference/ostream.md)
+    - [`std::print()`](/reference/ostream/print.md.nolink)
+    - [`std::println()`](/reference/ostream/println.md.nolink)
+
+
 ## 参照
 - [Working Draft, Standard for Programming Language C++ [format]](https://timsong-cpp.github.io/cppwp/format)
 - [P0645R10 Text Formatting](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>print -- &lt;print&gt; : vprint_(non)unicodeを追加 #1082</title>
      <link href="https://cpprefjp.github.io/reference/print.html"/>
      <id>a235d11124e9da535c0af2a90407538d283fb260:reference/print.md</id>
      <updated>2023-01-30T22:35:29+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;print&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;print&amp;gt;&lt;/code&gt;ヘッダでは、書式指定で出力する機能を定義する。&lt;/p&gt;
&lt;p&gt;このヘッダでは、デフォルトの出力先、および&lt;code&gt;FILE*&lt;/code&gt;指定のオーバーロードが定義される。&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;std::ostream&lt;/a&gt;&lt;/code&gt;指定のオーバーロードは&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream.html&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/a&gt;&lt;/code&gt;で定義される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/print/print.html&#34;&gt;print&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式指定で出力する (function template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/print/println.html&#34;&gt;println&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式指定で出力する。末尾改行付き (function template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/print/vprint_unicode.html&#34;&gt;vprint_unicode&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式指定でUnicode出力する (function)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/print/vprint_nonunicode.html&#34;&gt;vprint_nonunicode&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式指定で非Unicode出力する (function)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++23&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream.html&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2093r14.html&#34; target=&#34;_blank&#34;&gt;P2093R14 Formatted output&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>print -- &lt;print&gt; : vprint_(non)unicodeを追加 #1082</title>
      <link href="https://cpprefjp.github.io/reference/print/print.html"/>
      <id>a235d11124e9da535c0af2a90407538d283fb260:reference/print/print.md</id>
      <updated>2023-01-30T22:35:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/print/print.md b/reference/print/print.md
index bb5108a04..dfa7d6707 100644
--- a/reference/print/print.md
+++ b/reference/print/print.md
@@ -46,7 +46,7 @@ namespace std {
     ```cpp
     vprint_unicode(stream, fmt.get(), make_format_args(std::forward&amp;lt;Args&amp;gt;(args)...));
     ```
-    * vprint_unicode[link vprint_unicode.md.nolink]
+    * vprint_unicode[link vprint_unicode.md]
     * fmt.get()[link /reference/format/format_string/get.md.nolink]
     * make_format_args[link /reference/format/make_format_args.md]
     * std::forward[link /reference/utility/forward.md]
@@ -55,7 +55,7 @@ namespace std {
     ```cpp
     vprint_nonunicode(stream, fmt.get(), make_format_args(std::forward&amp;lt;Args&amp;gt;(args)...));
     ```
-    * vprint_nonunicode[link vprint_nonunicode.md.nolink]
+    * vprint_nonunicode[link vprint_nonunicode.md]
     * fmt.get()[link /reference/format/format_string/get.md.nolink]
     * make_format_args[link /reference/format/make_format_args.md]
     * std::forward[link /reference/utility/forward.md]
@@ -79,8 +79,8 @@ namespace std {
         vprint_nonunicode(fmt, make_format_args(args...));
     }
     ```
-    * vprint_unicode[link vprint_unicode.md.nolink]
-    * vprint_nonunicode[link vprint_nonunicode.md.nolink]
+    * vprint_unicode[link vprint_unicode.md]
+    * vprint_nonunicode[link vprint_nonunicode.md]
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vprint_nonunicode -- &lt;print&gt; : vprint_(non)unicodeを追加 #1082</title>
      <link href="https://cpprefjp.github.io/reference/print/vprint_nonunicode.html"/>
      <id>a235d11124e9da535c0af2a90407538d283fb260:reference/print/vprint_nonunicode.md</id>
      <updated>2023-01-30T22:35:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/print/vprint_nonunicode.md b/reference/print/vprint_nonunicode.md
new file mode 100644
index 000000000..22f5842c1
--- /dev/null
+++ b/reference/print/vprint_nonunicode.md
@@ -0,0 +1,67 @@
+# vprint_nonunicode
+* print[meta header]
+* std[meta namespace]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  void vprint_nonunicode(string_view fmt,
+                         format_args args); // (1) C++23
+
+  void vprint_nonunicode(FILE* stream,
+                         string_view fmt,
+                         format_args args); // (2) C++23
+}
+```
+* FILE[link /reference/cstdio/file.md.nolink]
+* format_args[link /reference/format/basic_format_args.md]
+
+## 概要
+書式指定で非Unicode出力する。
+
+- (1) : 標準出力に、書式指定で非Unicode出力する
+- (2) : 指定された[`FILE`](/reference/cstdio/file.md.nolink)に、書式指定で非Unicode出力する
+
+[`std::ostream`](/reference/ostream/basic_ostream.md)から派生したクラスオブジェクトに対して出力したい場合は、[`&amp;lt;ostream&amp;gt;`](/reference/ostream.md)ヘッダの[`std::vprint_nonunicode()`](/reference/ostream/vprint_nonunicode.md.nolink)関数を使用すること。
+
+
+## 事前条件
+- (2) : `stream`が有効な出力Cストリームを指していること
+
+
+## 効果
+- (1) : 以下と等価：
+    ```cpp
+    vprint_unicode(stdout, fmt, args);
+    ```
+    * stdout[link /reference/cstdio/stdout.md.nolink]
+
+- (2) : [`vformat`](/reference/format/vformat.md)`(fmt, args)`の結果を`stream`に書き出す
+
+
+## 例外
+- [`vformat()`](/reference/format/vformat.md)関数がなんらかの例外を送出する可能性がある
+- 端末かストリームへの書き込みに失敗した場合、[`system_error`](/reference/system_error/system_error.md)を送出する
+- [`bad_alloc`](/reference/new/bad_alloc.md)を送出する可能性がある
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`std::print()`](print.md)
+- [`std::println()`](println.md)
+- [`std::vprint_unicode()`](vprint_nonunicode.md)
+
+
+## 参照
+- [P2093R14 Formatted output](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2093r14.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vprint_unicode -- &lt;print&gt; : vprint_(non)unicodeを追加 #1082</title>
      <link href="https://cpprefjp.github.io/reference/print/vprint_unicode.html"/>
      <id>a235d11124e9da535c0af2a90407538d283fb260:reference/print/vprint_unicode.md</id>
      <updated>2023-01-30T22:35:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/print/vprint_unicode.md b/reference/print/vprint_unicode.md
new file mode 100644
index 000000000..ed2ae9e2b
--- /dev/null
+++ b/reference/print/vprint_unicode.md
@@ -0,0 +1,83 @@
+# vprint_unicode
+* print[meta header]
+* std[meta namespace]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  void vprint_unicode(string_view fmt,
+                      format_args args); // (1) C++23
+
+  void vprint_unicode(FILE* stream,
+                      string_view fmt,
+                      format_args args); // (2) C++23
+}
+```
+* FILE[link /reference/cstdio/file.md.nolink]
+* format_args[link /reference/format/basic_format_args.md]
+
+## 概要
+書式指定でUnicode出力する。
+
+- (1) : 標準出力に、書式指定でUnicode出力する
+- (2) : 指定された[`FILE`](/reference/cstdio/file.md.nolink)に、書式指定でUnicode出力する
+
+[`std::ostream`](/reference/ostream/basic_ostream.md)から派生したクラスオブジェクトに対して出力したい場合は、[`&amp;lt;ostream&amp;gt;`](/reference/ostream.md)ヘッダの[`std::vprint_unicode()`](/reference/ostream/vprint_unicode.md.nolink)関数を使用すること。
+
+
+## 事前条件
+- (2) `stream`が有効な出力Cストリームを指していること
+
+
+## 効果
+- (1) : 以下と等価：
+    ```cpp
+    vprint_unicode(stdout, fmt, args);
+    ```
+    * stdout[link /reference/cstdio/stdout.md.nolink]
+
+- (2) : 以下の方法で自動変数を初期化する：
+    ```cpp
+    string out = vformat(fmt, args);
+    ```
+    * string[link /reference/string/basic_string.md]
+    * vformat[link /reference/format/vformat.md]
+
+    - `stream`がUnicodeを表示できる端末を参照している場合、ネイティブのUnicode APIを使用して端末に書き出す。`out`が無効なコードユニットを含んでいる場合、その動作は未定義であり、実装はそれを診断することが望まれる。
+    - `out`に無効なコードユニットが含まれる場合、その動作は未定義であり，実装者はそれを診断することが推奨される。それ以外の場合は、変更せずにストリームに書き出します。そうでなければ、変更せず`stream`に`out`を書き出す。
+    - ネイティブのUnicode APIを使用する場合、この関数は`out`に書き出す前にフラッシュする
+
+
+## 例外
+- [`vformat()`](/reference/format/vformat.md)関数がなんらかの例外を送出する可能性がある
+- 端末かストリームへの書き込みに失敗した場合、[`system_error`](/reference/system_error/system_error.md)を送出する
+- [`bad_alloc`](/reference/new/bad_alloc.md)を送出する可能性がある
+
+
+## 備考
+- POSIXおよびWindowsにおいて、「`stream`が端末を参照している」とは、それぞれ、`isatty(fileno(stream))`、および`GetConsoleMode(_get_osfhandle(_fileno(stream)), ...) != 0`を意味する
+- Windowsにおいて、ネイティブなUnicode APIとは`WriteConsoleW()`である
+- 推奨の方式：ネイティブのUnicode APIを呼び出す際に文字コード変換が必要な場合、実装はUnicode標準 (Unicode Standard Version 14.0 - Core Specification, Chapter 3.9) に従って無効なコードユニットを「U+FFFD REPLACEMENT CHARACTER」で置き換える必要がある
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`std::print()`](print.md)
+- [`std::println()`](println.md)
+- [`std::vprint_nonunicode()`](vprint_nonunicode.md)
+
+
+## 参照
+- [P2093R14 Formatted output](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2093r14.html)
+- [P2539R4 Should the output of `std::print` to a terminal be synchronized with the underlying stream?](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2539r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>print -- &lt;print&gt; : print, printlnを追加 #1082</title>
      <link href="https://cpprefjp.github.io/reference/print.html"/>
      <id>469297fa7a5b27cdd4c4eca4b637a576ee496734:reference/print.md</id>
      <updated>2023-01-30T22:06:53+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;print&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;print&amp;gt;&lt;/code&gt;ヘッダでは、書式指定で出力する機能を定義する。&lt;/p&gt;
&lt;p&gt;このヘッダでは、デフォルトの出力先、および&lt;code&gt;FILE*&lt;/code&gt;指定のオーバーロードが定義される。&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;std::ostream&lt;/a&gt;&lt;/code&gt;指定のオーバーロードは&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream.html&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/a&gt;&lt;/code&gt;で定義される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/print/print.html&#34;&gt;print&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式指定で出力する (function template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/print/println.html&#34;&gt;println&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式指定で出力する。末尾改行付き (function template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/print/vprint_unicode.md.nolink&#34;&gt;vprint_unicode&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式指定でUnicode出力する (function template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/print/vprint_nonunicode.md.nolink&#34;&gt;vprint_nonunicode&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式指定で非Unicode出力する (function template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++23&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream.html&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2093r14.html&#34; target=&#34;_blank&#34;&gt;P2093R14 Formatted output&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>print -- &lt;print&gt; : print, printlnを追加 #1082</title>
      <link href="https://cpprefjp.github.io/reference/print/print.html"/>
      <id>469297fa7a5b27cdd4c4eca4b637a576ee496734:reference/print/print.md</id>
      <updated>2023-01-30T22:06:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/print/print.md b/reference/print/print.md
new file mode 100644
index 000000000..bb5108a04
--- /dev/null
+++ b/reference/print/print.md
@@ -0,0 +1,119 @@
+# print
+* print[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class... Args&amp;gt;
+  void print(format_string&amp;lt;Args...&amp;gt; fmt,
+             Args&amp;amp;&amp;amp;... args);             // (1) C++23
+
+  template &amp;lt;class... Args&amp;gt;
+  void print(FILE* stream,
+             format_string&amp;lt;Args...&amp;gt; fmt,
+             Args&amp;amp;&amp;amp;... args);             // (2) C++23
+}
+```
+* format_string[link /reference/format/format_string.md.nolink]
+* FILE[link /reference/cstdio/file.md.nolink]
+
+## 概要
+書式指定で出力する。
+
+書式は[`std::format()`](/reference/format/format.md)関数のページを参照。
+
+この関数は、[`std::printf()`](/reference/cstdio/printf.md.nolink)関数ライクな書式指定で引数を文字列化して出力する。
+
+- (1) : 標準出力に、書式指定で出力する
+- (2) : 指定された[`FILE`](/reference/cstdio/file.md.nolink)に、書式指定で出力する
+
+この関数は、末尾に改行コードが付かないことに注意。改行コードを自動で付けたい場合は、[`std::println()`](println.md)関数を使用すること。
+
+[`std::ostream`](/reference/ostream/basic_ostream.md)から派生したクラスオブジェクトに対して出力したい場合は、[`&amp;lt;ostream&amp;gt;`](/reference/ostream.md)ヘッダの[`std::print()`](/reference/ostream/print.md.nolink)関数を使用すること。
+
+
+## 効果
+- (1) : 以下と等価：
+    ```cpp
+    print(stdout, fmt, std::forward&amp;lt;Args&amp;gt;(args)...);
+    ```
+    * stdout[link /reference/cstdio/stdout.md.nolink]
+    * std::forward[link /reference/utility/forward.md]
+
+- (2) : 通常の文字列リテラルがUTF-8エンコーディングされている場合、以下と等価：
+    ```cpp
+    vprint_unicode(stream, fmt.get(), make_format_args(std::forward&amp;lt;Args&amp;gt;(args)...));
+    ```
+    * vprint_unicode[link vprint_unicode.md.nolink]
+    * fmt.get()[link /reference/format/format_string/get.md.nolink]
+    * make_format_args[link /reference/format/make_format_args.md]
+    * std::forward[link /reference/utility/forward.md]
+
+    - そうでなければ、以下と等価：
+    ```cpp
+    vprint_nonunicode(stream, fmt.get(), make_format_args(std::forward&amp;lt;Args&amp;gt;(args)...));
+    ```
+    * vprint_nonunicode[link vprint_nonunicode.md.nolink]
+    * fmt.get()[link /reference/format/format_string/get.md.nolink]
+    * make_format_args[link /reference/format/make_format_args.md]
+    * std::forward[link /reference/utility/forward.md]
+
+
+## 備考
+- LinuxやmacOSといった環境では、通常の`char`配列の文字列リテラルはUTF-8にエンコーディングされる
+- WindowsのVisual Studioにおいては、ソースコードと実行時文字集合をUTF-8にする[`/utf-8`オプション](https://learn.microsoft.com/en-us/cpp/build/reference/utf-8-set-source-and-executable-character-sets-to-utf-8?view=msvc-170)を使用することで、通常の`char`配列の文字列リテラルがUTF-8にエンコーディングされる
+- 「通常の文字列リテラルがUTF-8エンコーディングされている場合」という仕様は、コードでは以下のように表現できる：
+    ```
+    constexpr bool is_utf8() {
+      const unsigned char micro[] = &amp;#34;\u00B5&amp;#34;;
+      return sizeof(micro) == 3 &amp;amp;&amp;amp; micro[0] == 0xC2 &amp;amp;&amp;amp; micro[1] == 0xB5;
+    }
+
+    template &amp;lt;typename... Args&amp;gt;
+    void print(string_view fmt, const Args&amp;amp;... args) {
+      if (is_utf8())
+        vprint_unicode(fmt, make_format_args(args...));
+      else
+        vprint_nonunicode(fmt, make_format_args(args...));
+    }
+    ```
+    * vprint_unicode[link vprint_unicode.md.nolink]
+    * vprint_nonunicode[link vprint_nonunicode.md.nolink]
+
+
+## 例
+```cpp example
+#include &amp;lt;print&amp;gt;
+
+int main()
+{
+  std::print(&amp;#34;Hello {} World\n&amp;#34;, 42);
+}
+```
+* std::print[color ff0000]
+
+### 出力
+```
+Hello 42 World
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`std::format()`](/reference/format/format.md)
+- [`std::println()`](println.md)
+
+
+## 参照
+- [P2093R14 Formatted output](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2093r14.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>println -- &lt;print&gt; : print, printlnを追加 #1082</title>
      <link href="https://cpprefjp.github.io/reference/print/println.html"/>
      <id>469297fa7a5b27cdd4c4eca4b637a576ee496734:reference/print/println.md</id>
      <updated>2023-01-30T22:06:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/print/println.md b/reference/print/println.md
new file mode 100644
index 000000000..54cc70128
--- /dev/null
+++ b/reference/print/println.md
@@ -0,0 +1,87 @@
+# println
+* print[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class... Args&amp;gt;
+  void println(format_string&amp;lt;Args...&amp;gt; fmt,
+               Args&amp;amp;&amp;amp;... args);             // (1) C++23
+
+  template &amp;lt;class... Args&amp;gt;
+  void println(FILE* stream,
+               format_string&amp;lt;Args...&amp;gt; fmt,
+               Args&amp;amp;&amp;amp;... args);             // (2) C++23
+}
+```
+* format_string[link /reference/format/format_string.md.nolink]
+* FILE[link /reference/cstdio/file.md.nolink]
+
+## 概要
+書式指定で出力する。この関数は、出力の末尾に改行コードが自動で付加される。
+
+書式は[`std::format()`](/reference/format/format.md)関数のページを参照。
+
+この関数は、[`std::printf()`](/reference/cstdio/printf.md.nolink)関数ライクな書式指定で引数を文字列化して出力する。
+
+- (1) : 標準出力に、書式指定で出力する
+- (2) : 指定された[`FILE`](/reference/cstdio/file.md.nolink)に、書式指定で出力する
+
+この関数は、末尾に改行コードが付くことに注意。改行コードが不要な場合は、[`std::print()`](print.md)関数を使用すること。
+
+[`std::ostream`](/reference/ostream/basic_ostream.md)から派生したクラスオブジェクトに対して出力したい場合は、[`&amp;lt;ostream&amp;gt;`](/reference/ostream.md)ヘッダの[`std::print()`](/reference/ostream/println.md.nolink)関数を使用すること。
+
+
+## 効果
+- (1) : 以下と等価：
+    ```cpp
+    println(stdout, fmt, std::forward&amp;lt;Args&amp;gt;(args)...);
+    ```
+    * stdout[link /reference/cstdio/stdout.md.nolink]
+    * std::forward[link /reference/utility/forward.md]
+
+- (2) : 以下と等価：
+    ```cpp
+    print(stream, &amp;#34;{}\n&amp;#34;, format(fmt, std::forward&amp;lt;Args&amp;gt;(args)...));
+    ```
+    * print[link print.md]
+    * format[link /reference/format/format.md]
+    * std::forward[link /reference/utility/forward.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;print&amp;gt;
+
+int main()
+{
+  std::println(&amp;#34;Hello {} World&amp;#34;, 42);
+}
+```
+* std::println[color ff0000]
+
+### 出力
+```
+Hello 42 World
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`std::format()`](/reference/format/format.md)
+- [`std::print()`](print.md)
+
+
+## 参照
+- [P2093R14 Formatted output](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2093r14.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>expected -- expected : コード修飾を追加</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.html"/>
      <id>6d029cb18ead0f2abc706638978bc258ef4e5ea1:reference/expected/expected.md</id>
      <updated>2023-01-30T17:47:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.md b/reference/expected/expected.md
index 60b59f6af..d2177e5fa 100644
--- a/reference/expected/expected.md
+++ b/reference/expected/expected.md
@@ -15,6 +15,7 @@ namespace std {
   class expected&amp;lt;T, E&amp;gt;;
 }
 ```
+* is_void_v[link /reference/type_traits/is_void.md]
 
 ## 概要
 `expected`クラスは、任意の型`T`の値を正常値とし任意の型`E`の値をエラー値として、正常もしくはエラーいずれかの状態を取ることを値として表現できる型である。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-09-21T14:41:56.829446</updated>
  <id>4cc45206-8ccf-4f31-b6f8-221a1e46bb68</id>

  
    <entry>
      <title>一貫比較 -- Merge pull request #1168 from yknishidate/fix-typo</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/consistent_comparison.html"/>
      <id>a6f77cd529d9935209c4b960c1a65b2c56780684:lang/cpp20/consistent_comparison.md</id>
      <updated>2023-09-21T23:33:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/consistent_comparison.md b/lang/cpp20/consistent_comparison.md
index e3a13d8eb..c13451d44 100644
--- a/lang/cpp20/consistent_comparison.md
+++ b/lang/cpp20/consistent_comparison.md
@@ -80,7 +80,7 @@ auto comp = a &amp;lt;=&amp;gt; b;
 
 //全て未定義動作
 bool is_less = comp == 1;
-bool is_greator = -1 &amp;lt; comp
+bool is_greater = -1 &amp;lt; comp
 bool is_equal = comp == 0.0;
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lexicographical_compare_three_way -- Merge pull request #1168 from yknishidate/fix-typo</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/lexicographical_compare_three_way.html"/>
      <id>a6f77cd529d9935209c4b960c1a65b2c56780684:reference/algorithm/lexicographical_compare_three_way.md</id>
      <updated>2023-09-21T23:33:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/lexicographical_compare_three_way.md b/reference/algorithm/lexicographical_compare_three_way.md
index 6897cc909..7daeae3f0 100644
--- a/reference/algorithm/lexicographical_compare_three_way.md
+++ b/reference/algorithm/lexicographical_compare_three_way.md
@@ -66,7 +66,7 @@ namespace std {
 ## 戻り値
 
 戻り値型となる比較カテゴリ型を`Cat`とすると、  
-イテレータ範囲`[first1, last1)`が、辞書式比較でイテレータ範囲`[first2, last2)`より大きい場合は`Cat::greator`を返し、小さい場合`Cat::less`を返し、等しいのならば`Cat::equivalent`を返す。
+イテレータ範囲`[first1, last1)`が、辞書式比較でイテレータ範囲`[first2, last2)`より大きい場合は`Cat::greater`を返し、小さい場合`Cat::less`を返し、等しいのならば`Cat::equivalent`を返す。
 
 ## 計算量
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>一貫比較 -- fix typo</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/consistent_comparison.html"/>
      <id>20a027aad1db4757d4cbed18de465c1af86c3403:lang/cpp20/consistent_comparison.md</id>
      <updated>2023-09-21T23:25:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/consistent_comparison.md b/lang/cpp20/consistent_comparison.md
index e3a13d8eb..c13451d44 100644
--- a/lang/cpp20/consistent_comparison.md
+++ b/lang/cpp20/consistent_comparison.md
@@ -80,7 +80,7 @@ auto comp = a &amp;lt;=&amp;gt; b;
 
 //全て未定義動作
 bool is_less = comp == 1;
-bool is_greator = -1 &amp;lt; comp
+bool is_greater = -1 &amp;lt; comp
 bool is_equal = comp == 0.0;
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>nishidate-yuki</name>
        <email>yuki18425@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lexicographical_compare_three_way -- fix typo</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/lexicographical_compare_three_way.html"/>
      <id>194a6b77fcf421e024c1838300c6522302775323:reference/algorithm/lexicographical_compare_three_way.md</id>
      <updated>2023-09-21T23:17:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/lexicographical_compare_three_way.md b/reference/algorithm/lexicographical_compare_three_way.md
index 6897cc909..7daeae3f0 100644
--- a/reference/algorithm/lexicographical_compare_three_way.md
+++ b/reference/algorithm/lexicographical_compare_three_way.md
@@ -66,7 +66,7 @@ namespace std {
 ## 戻り値
 
 戻り値型となる比較カテゴリ型を`Cat`とすると、  
-イテレータ範囲`[first1, last1)`が、辞書式比較でイテレータ範囲`[first2, last2)`より大きい場合は`Cat::greator`を返し、小さい場合`Cat::less`を返し、等しいのならば`Cat::equivalent`を返す。
+イテレータ範囲`[first1, last1)`が、辞書式比較でイテレータ範囲`[first2, last2)`より大きい場合は`Cat::greater`を返し、小さい場合`Cat::less`を返し、等しいのならば`Cat::equivalent`を返す。
 
 ## 計算量
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>nishidate-yuki</name>
        <email>yuki18425@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flat_map -- flat_map : operator&lt;=&gt;を追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map.html"/>
      <id>842cacbb7d3c6d5da2c4f25ab7c829b50571c8a7:reference/flat_map/flat_map.md</id>
      <updated>2023-09-19T16:10:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map.md b/reference/flat_map/flat_map.md
index bc10182cc..c2887c226 100644
--- a/reference/flat_map/flat_map.md
+++ b/reference/flat_map/flat_map.md
@@ -131,7 +131,7 @@ namespace std {
 |------|------|----------------|
 | [`operator==`](flat_map/op_equal.md)         | 左辺と右辺が等しいかの判定を行う           | C++23 |
 | `bool operator!=(const flat_map&amp;amp; x, const flat_map&amp;amp; y);` | 左辺と右辺が等しくないかの判定を行う (`==`により使用可能) | C++23 |
-| [`operator&amp;lt;=&amp;gt;`](flat_map/op_compare_3way.md.nolink) | 三方比較を行う                             | C++23 |
+| [`operator&amp;lt;=&amp;gt;`](flat_map/op_compare_3way.md) | 三方比較を行う                             | C++23 |
 | `bool operator&amp;lt;(const flat_map&amp;amp; x, const flat_map&amp;amp; y);`  | 左辺が右辺より小さいかの判定を行う  (`&amp;lt;=&amp;gt;`により使用可能) | C++23 |
 | `bool operator&amp;lt;=(const flat_map&amp;amp; x, const flat_map&amp;amp; y);` | 左辺が右辺より小さいか等しいかの判定を行う (`&amp;lt;=&amp;gt;`により使用可能) | C++23 |
 | `bool operator&amp;gt;(const flat_map&amp;amp; x, const flat_map&amp;amp; y);`  | 左辺が右辺より大きいかの判定を行う (`&amp;lt;=&amp;gt;`により使用可能) | C++23 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- flat_map : operator&lt;=&gt;を追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/op_compare_3way.html"/>
      <id>842cacbb7d3c6d5da2c4f25ab7c829b50571c8a7:reference/flat_map/flat_map/op_compare_3way.md</id>
      <updated>2023-09-19T16:10:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/op_compare_3way.md b/reference/flat_map/flat_map/op_compare_3way.md
new file mode 100644
index 000000000..40c926b92
--- /dev/null
+++ b/reference/flat_map/flat_map/op_compare_3way.md
@@ -0,0 +1,90 @@
+# operator&amp;lt;=&amp;gt;
+* flat_map[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* flat_map[meta class]
+* cpp23[meta cpp]
+
+```cpp
+synth-three-way-result&amp;lt;value_type&amp;gt;
+  operator&amp;lt;=&amp;gt;(const flat_map&amp;amp; x,
+              const flat_map&amp;amp; y); // (1) C++23
+```
+
+## 概要
+`flat_map`オブジェクトの三方比較を行う。
+
+
+## テンプレートパラメータ制約
+- 型 (`const`) `value_type` の値に対して`operator&amp;lt;=&amp;gt;`が定義されるか、型 (`const`) `value_type` の値に対して`operator&amp;lt;`が定義され全順序をもつこと
+
+
+## 効果
+```cpp
+return lexicographical_compare_three_way(
+    x.begin(), x.end(),
+    y.begin(), y.end(),
+    synth-three-way);
+```
+* lexicographical_compare_three_way[link /reference/algorithm/lexicographical_compare_three_way.md]
+* begin()[link begin.md]
+* end()[link end.md]
+
+
+## 計算量
+線形時間
+
+
+## 備考
+- この演算子により、以下の演算子が使用可能になる：
+    - `operator&amp;lt;`
+    - `operator&amp;lt;=`
+    - `operator&amp;gt;`
+    - `operator&amp;gt;=`
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;flat_map&amp;gt;
+
+int main()
+{
+  stdx::flat_map&amp;lt;int, char&amp;gt; fm1 = {
+    {3, &amp;#39;a&amp;#39;},
+    {1, &amp;#39;b&amp;#39;},
+    {4, &amp;#39;c&amp;#39;}
+  };
+
+  stdx::flat_map&amp;lt;int, char&amp;gt; fm2 = {
+    {3, &amp;#39;a&amp;#39;},
+    {1, &amp;#39;b&amp;#39;},
+  };
+
+  std::cout &amp;lt;&amp;lt; std::boolalpha;
+  std::cout &amp;lt;&amp;lt; ((fm1 &amp;lt;=&amp;gt; fm1) == 0) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; (fm1 &amp;lt; fm2) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; (fm1 &amp;lt;= fm1) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; (fm1 &amp;gt; fm2) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; (fm2 &amp;gt;= fm1) &amp;lt;&amp;lt; std::endl;
+}
+```
+
+### 出力
+```
+true
+false
+true
+true
+false
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++ Reference Site</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2014-12-11T02:12:53.824005</updated>
  <id>78592bfb-21d6-477b-b09d-be86ddf37c1b</id>

  
    <entry>
      <title>operator-&gt; (C++11) -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site
</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_iterator/op_arrow.html"/>
      <id>b5f7e95327b5e9305644bc57dd9ff7737ca0234e:reference/regex/regex_iterator/op_arrow.md</id>
      <updated>2014-12-11 02:12:35 +0900
</updated>
      
        <content type="html">&lt;h1&gt;operator-&amp;gt; (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;イテレータを通してメンバにアクセスする。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;シーケンスの終端を示すイテレータではない事。（シーケンス終端イテレータに対して呼び出した場合は未定義動作となる）&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;メンバ変数 &lt;code&gt;match&lt;/code&gt; への &lt;code&gt;const&lt;/code&gt; ポインタ &lt;code&gt;&amp;amp;match&lt;/code&gt; を返す。（&lt;code&gt;match&lt;/code&gt; は最後に&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; を呼び出した際の値を保持している）&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value_type&lt;/code&gt; は &lt;code&gt;regex_iterator&lt;/code&gt; のメンバ型で、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;&lt;/code&gt; である。&lt;/li&gt;
&lt;li&gt;戻り値の型は &lt;code&gt;const&lt;/code&gt; へのポインタであるため、このポインタを通した変更はできない。&lt;/li&gt;
&lt;li&gt;メンバ変数 &lt;code&gt;match&lt;/code&gt; はあくまでも説明用のプライベートメンバ変数であるため、注意すること。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;abc123def456ghi&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator it(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re), end; it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; end; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;prefix = &#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;prefix() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;, str = &#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;, suffix = &#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;suffix() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\&#39;&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;prefix = &#39;abc&#39;, str = &#39;123&#39;, suffix = &#39;def456ghi&#39;
prefix = &#39;def&#39;, str = &#39;456&#39;, suffix = &#39;ghi&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_deref.html&#34;&gt;&lt;code&gt;operator*&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;間接参照&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/regex_iterator.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_increment.html&#34;&gt;&lt;code&gt;operator++&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;インクリメント&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>operator* (C++11) -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site
</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_iterator/op_deref.html"/>
      <id>b5f7e95327b5e9305644bc57dd9ff7737ca0234e:reference/regex/regex_iterator/op_deref.md</id>
      <updated>2014-12-11 02:12:35 +0900
</updated>
      
        <content type="html">&lt;h1&gt;operator* (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;イテレータを間接参照する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;シーケンスの終端を示すイテレータではない事。（シーケンス終端イテレータに対して呼び出した場合は未定義動作となる）&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;メンバ変数 &lt;code&gt;match&lt;/code&gt; への &lt;code&gt;const&lt;/code&gt; 参照を返す。（最後に&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; を呼び出した際の値を保持している）&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value_type&lt;/code&gt; は &lt;code&gt;regex_iterator&lt;/code&gt; のメンバ型で、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;&lt;/code&gt; である。&lt;/li&gt;
&lt;li&gt;戻り値の型は &lt;code&gt;const&lt;/code&gt; への参照であるため、この参照を通した変更はできない。&lt;/li&gt;
&lt;li&gt;メンバ変数 &lt;code&gt;match&lt;/code&gt; はあくまでも説明用のプライベートメンバ変数であるため、注意すること。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;abc123def456ghi&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator it(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re), end; it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; end; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; match &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;prefix = &#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; match.prefix() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;, str = &#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; match.str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;, suffix = &#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; match.suffix() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\&#39;&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;prefix = &#39;abc&#39;, str = &#39;123&#39;, suffix = &#39;def456ghi&#39;
prefix = &#39;def&#39;, str = &#39;456&#39;, suffix = &#39;ghi&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 1.9, 2.9, 3.0, 3.1, 3.2, 3.3&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.3.6, 4.4.7, 4.5.3, 4.6.3, 4.7.2, 4.8.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_arrow.html&#34;&gt;&lt;code&gt;operator-&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバアクセス&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/regex_iterator.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_increment.html&#34;&gt;&lt;code&gt;operator++&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;インクリメント&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== (C++11) -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site
</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_iterator/op_equal.html"/>
      <id>b5f7e95327b5e9305644bc57dd9ff7737ca0234e:reference/regex/regex_iterator/op_equal.md</id>
      <updated>2014-12-11 02:12:35 +0900
</updated>
      
        <content type="html">&lt;h1&gt;operator== (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; right) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;regex_iterator&lt;/code&gt; の等値比較を行う。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt; と引数 &lt;code&gt;right&lt;/code&gt; が共にシーケンスの終端を示すイテレータの場合、&lt;code&gt;true&lt;/code&gt; を返す。&lt;br /&gt;
&lt;code&gt;*this&lt;/code&gt; と引数 &lt;code&gt;right&lt;/code&gt; のいずれか一方のみがシーケンスの終端を示すイテレータの場合、&lt;code&gt;false&lt;/code&gt; を返す。&lt;br /&gt;
&lt;code&gt;*this&lt;/code&gt; と引数 &lt;code&gt;right&lt;/code&gt; が共にシーケンスの終端を示すイテレータではない場合、各メンバ変数が以下の全ての条件を満たしていれば &lt;code&gt;true&lt;/code&gt; を、そうでなければ &lt;code&gt;false&lt;/code&gt; を返す。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;begin == right.begin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;end == right.end&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pregex == right.pregex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flags == right.flags&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;match[0] == right.match[0]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンバ変数 &lt;code&gt;begin&lt;/code&gt;、&lt;code&gt;end&lt;/code&gt;、&lt;code&gt;pregex&lt;/code&gt;、&lt;code&gt;flags&lt;/code&gt;、&lt;code&gt;match&lt;/code&gt; はあくまでも説明用のプライベートメンバ変数であるため、注意すること。&lt;/li&gt;
&lt;li&gt;本メンバ関数が &lt;code&gt;true&lt;/code&gt; を返したとしても、イテレータが同じ個所を指しているとは限らないことに注意すること。（下記の例を参照）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;+1-1+1-&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 2 つのイテレータを同一引数で生成する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator it1(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator it2(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 一方は 2 つ、もう一方は 1 つ進める&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it1; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it1;
  &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it2;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator== で比較する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (it1 &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;&lt;/span&gt; it2) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 参考のため、それぞれのマッチ結果の詳細を出力する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;it1:&#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it1&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;(&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ((&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1)[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;].first &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ((&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1)[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;].second &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;it2:&#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it2&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;(&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ((&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2)[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;].first &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ((&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2)[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;].second &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;true
it1:&#39;1&#39;(5, 6)
it2:&#39;1&#39;(3, 4)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_not_equal.html&#34;&gt;&lt;code&gt;operator!=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非等値比較&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>operator++ (C++11) -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site
</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_iterator/op_increment.html"/>
      <id>b5f7e95327b5e9305644bc57dd9ff7737ca0234e:reference/regex/regex_iterator/op_increment.md</id>
      <updated>2014-12-11 02:12:35 +0900
</updated>
      
        <content type="html">&lt;h1&gt;operator++ (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;();   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) 前置形式&lt;/span&gt;

regex_iterator &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) 後置形式&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;イテレータを次のマッチに進める&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;シーケンスの終端を示すイテレータではない事。（シーケンス終端イテレータに対して呼び出した場合は未定義動作となる）&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) の形式（前置形式）は、以下のように振る舞う。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BidirectionalIterator&lt;/code&gt; 型のローカル変数 &lt;code&gt;start&lt;/code&gt; を構築し、値 &lt;code&gt;match[0].second&lt;/code&gt; で初期化する。&lt;/li&gt;
&lt;li&gt;イテレータが長さゼロのマッチの場合（&lt;code&gt;match[0].matched == true&lt;/code&gt; かつ &lt;code&gt;match[0].first == match[0].second&lt;/code&gt; の場合）で、かつ、&lt;code&gt;start == end&lt;/code&gt; の場合、&lt;code&gt;*this&lt;/code&gt; をシーケンス終端イテレータにして &lt;code&gt;*this&lt;/code&gt; を返す。&lt;/li&gt;
&lt;li&gt;そうではなくて、イテレータが長さゼロのマッチの場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(start, end, match, *pregex, flags | regex_constants::match_not_null | regex_constants::match_continuous)&lt;/code&gt; を呼び出す。&lt;br /&gt;
    もしマッチしたら（&lt;code&gt;true&lt;/code&gt; が返されたら）、&lt;code&gt;*this&lt;/code&gt; を返す。マッチしなかったら、&lt;code&gt;start&lt;/code&gt; をインクリメントし、イテレータが長さゼロのマッチで無いかのように、以下の処理を続ける。&lt;/li&gt;
&lt;li&gt;イテレータが長さゼロのマッチでない場合、&lt;code&gt;flags&lt;/code&gt; を &lt;code&gt;flags | regex_constants ::match_prev_avail&lt;/code&gt; に更新し、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(start, end, match, *pregex, flags)&lt;/code&gt; を呼び出す。&lt;br /&gt;
    もしマッチしなかったら、&lt;code&gt;*this&lt;/code&gt; をシーケンス終端イテレータにする。その後、&lt;code&gt;*this&lt;/code&gt; を返す。&lt;/li&gt;
&lt;li&gt;上記のうち、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; が &lt;code&gt;true&lt;/code&gt; を返した全てのケースでは、以下の補正が行われる。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match.prefix().first&lt;/code&gt; を直前の &lt;code&gt;match[0].second&lt;/code&gt; に設定する。&lt;/li&gt;
&lt;li&gt;半開区間 &lt;code&gt;[0, match.size())&lt;/code&gt; の全てのインデックス &lt;code&gt;i&lt;/code&gt; について、&lt;code&gt;match[i].matched&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; であれば、&lt;code&gt;match.position(i)&lt;/code&gt; が &lt;code&gt;distance(begin, match[i].first)&lt;/code&gt; を返すように設定する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) の形式（後置形式）は、以下のように振る舞う。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    regex_iterator tmp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;
    &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; tmp;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) &lt;code&gt;*this&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(2) インクリメントを行う前の &lt;code&gt;*this&lt;/code&gt; のコピー&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンバ変数 &lt;code&gt;begin&lt;/code&gt;、&lt;code&gt;end&lt;/code&gt;、&lt;code&gt;pregex&lt;/code&gt;、&lt;code&gt;flags&lt;/code&gt;、&lt;code&gt;match&lt;/code&gt; はあくまでも説明用のプライベートメンバ変数であるため、注意すること。&lt;/li&gt;
&lt;li&gt;「効果」にあるように、&lt;code&gt;match&lt;/code&gt; には検索後に補正が行われるため、&lt;code&gt;regex_iterator&lt;/code&gt; を間接参照した結果は、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; を順に呼び出した結果とは異なる。&lt;br /&gt;
    また、これらの補正が実装でどのように行われるかについては、規格では規定されていない。&lt;/li&gt;
&lt;li&gt;「効果」では &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; が呼ばれるものとして記載されているが、実際に &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; が呼ばれるかどうかについては、規格では規定されていない。&lt;br /&gt;
    したがって、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; にユーザ定義の特殊化バージョンを提供しても、呼ばれないかもしれない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;a*|b*|c*&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;aaabbbccc&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator it(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re), end; it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; end; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;position = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;position() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, length = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;length() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, str = &#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;, prefix = &#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;prefix() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\&#39;&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;position = 0, length = 3, str = &#39;aaa&#39;, prefix = &#39;&#39;
position = 3, length = 0, str = &#39;&#39;, prefix = &#39;&#39;
position = 3, length = 3, str = &#39;bbb&#39;, prefix = &#39;&#39;
position = 6, length = 0, str = &#39;&#39;, prefix = &#39;&#39;
position = 6, length = 3, str = &#39;ccc&#39;, prefix = &#39;&#39;
position = 9, length = 0, str = &#39;&#39;, prefix = &#39;&#39;
&lt;/code&gt;&lt;/pre&gt;
注意：Clang &amp;amp; libc++ では正常に実行されない（終了しなくなってしまう）。また、GCC &amp;amp; libstdc++ の 4.9.1 までのバージョンでは、結果が正しくない。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;備考&lt;/h3&gt;
&lt;p&gt;Clang &amp;amp; libc++ と GCC &amp;amp; libstdc++ の 4.9.1 までのバージョンには、長さ 0 の文字列にマッチした時の挙動に問題があるため、注意が必要。
（特に、Clang は長さ 0 の文字列にマッチするとそこから先に進まなくなってしまう。例を参照）&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/regex_iterator.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_deref.html&#34;&gt;&lt;code&gt;operator*&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;間接参照&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_arrow.html&#34;&gt;&lt;code&gt;operator-&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバアクセス&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= (C++11) -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site
</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_iterator/op_not_equal.html"/>
      <id>b5f7e95327b5e9305644bc57dd9ff7737ca0234e:reference/regex/regex_iterator/op_not_equal.md</id>
      <updated>2014-12-11 02:12:35 +0900
</updated>
      
        <content type="html">&lt;h1&gt;operator!= (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; right) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;regex_iterator&lt;/code&gt; の非等値比較を行う。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;!(*this == right)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;本メンバ関数が &lt;code&gt;true&lt;/code&gt; を返したとしても、イテレータの指す文字列が等しくないとは限らないことに注意すること。（下記の例を参照）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;+1-1+1-&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 2 つのイテレータを同一引数で生成する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator it1(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator it2(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 一方だけ  1 つ進める&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it1;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator!= で比較する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (it1 &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt;&lt;/span&gt; it2) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 参考のため、それぞれのマッチ結果の詳細を出力する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;it1:&#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it1&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;(&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ((&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1)[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;].first &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ((&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1)[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;].second &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;it2:&#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it2&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;(&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ((&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2)[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;].first &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ((&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2)[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;].second &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;true
it1:&#39;1&#39;(3, 4)
it2:&#39;1&#39;(1, 2)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ (C++11) -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site
</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_iterator/regex_iterator.html"/>
      <id>b5f7e95327b5e9305644bc57dd9ff7737ca0234e:reference/regex/regex_iterator/regex_iterator.md</id>
      <updated>2014-12-11 02:12:35 +0900
</updated>
      
        <content type="html">&lt;h1&gt;コンストラクタ (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;regex_iterator();                                                                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

regex_iterator(BidirectionalIterator a, BidirectionalIterator b,
               &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; re,
               regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_flag_type m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_default);           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

regex_iterator(BidirectionalIterator a, BidirectionalIterator b,
               &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; re,
               regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_flag_type m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_default) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++14 から&lt;/span&gt;

regex_iterator(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;);                                                         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;regex_iterator&lt;/code&gt; オブジェクトを構築する&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) デフォルトコンストラクタ。シーケンスの終端を示す特別なイテレータを構築する。&lt;/li&gt;
&lt;li&gt;(2) メンバ変数 &lt;code&gt;begin&lt;/code&gt;、&lt;code&gt;end&lt;/code&gt;、&lt;code&gt;pregex&lt;/code&gt;、&lt;code&gt;flags&lt;/code&gt; をそれぞれ &lt;code&gt;a&lt;/code&gt;、&lt;code&gt;b&lt;/code&gt;、&lt;code&gt;&amp;amp;re&lt;/code&gt;、&lt;code&gt;m&lt;/code&gt; で初期化して、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(begin, end, match, *pregex, flags)&lt;/code&gt; を呼び出す。
    検索に成功しなかった場合（&lt;code&gt;false&lt;/code&gt; が返された場合）、デフォルトコンストラクタで構築した場合と同様、直ちにシーケンスの終端を示す特別なイテレータとなる。&lt;/li&gt;
&lt;li&gt;(3) deleted コンストラクタであるため、使用するとコンパイルエラーとなる。&lt;/li&gt;
&lt;li&gt;(4) コピーコンストラクタ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンバ変数 &lt;code&gt;begin&lt;/code&gt;、&lt;code&gt;end&lt;/code&gt;、&lt;code&gt;pregex&lt;/code&gt;、&lt;code&gt;flags&lt;/code&gt;、&lt;code&gt;match&lt;/code&gt; はあくまでも説明用のプライベートメンバ変数であるため、注意すること。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;regex_iterator&lt;/code&gt; は指定された正規表現 &lt;code&gt;re&lt;/code&gt; のコピーではなく、&lt;code&gt;re&lt;/code&gt; へのポインタをオブジェクト内に保持するため、引数に渡した正規表現オブジェクトは当該イテレータを使用し終わるまで破棄されないようにする必要がある。&lt;br /&gt;
    従って、(2) の形式のコンストラクタに渡す引数 &lt;code&gt;re&lt;/code&gt; に一時オブジェクトを指定することはほぼ間違いなくプログラミング上のエラーを意味する。&lt;br /&gt;
    (3) の形式のコンストラクタが C++14 で追加された理由は、この事態をコンパイル時に検出するためである。&lt;br /&gt;
    しかし、この追加のため、C++11 では合法となりうる以下のようなコードは C++14 ではコンパイルエラーになる。
  &lt;br /&gt;
&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;f&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;);

    f(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator(s.begin(), s.end(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;)));
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;This compiler supports the C++11 standard.&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;sregex_iterator&lt;/span&gt; it(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;sregex_iterator&lt;/span&gt;()) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;match:&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  } &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;not match&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;match:11
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11（一部 C++14）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;備考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;libstdc++ には 5.0.0 rev.218373 現在、(3) の形式のコンストラクタは存在しない。&lt;/li&gt;
&lt;li&gt;libc++ には、3.4 までは (3) の形式のコンストラクタは存在しない。&lt;/li&gt;
&lt;li&gt;libstdc++ では 5.0.0 rev.218373 現在、コピーコンストラクタで構築したオブジェクトの &lt;code&gt;match.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/position.html&#34;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(i)&lt;/code&gt; が補正されずに誤っている。（補正については &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_increment.html&#34;&gt;&lt;code&gt;operator++&lt;/code&gt;&lt;/a&gt; の「効果」を参照）&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>operator-&gt; (C++11) -- regex_iterator: 例で不必要に参照を使っていたので修正</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_iterator/op_arrow.html"/>
      <id>f08fdc31dfda371c7e7a79f59d038b74c3662b6d:reference/regex/regex_iterator/op_arrow.md</id>
      <updated>2014-12-11 02:09:48 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator-&amp;gt; (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;イテレータを通してメンバにアクセスする。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;シーケンスの終端を示すイテレータではない事。（シーケンス終端イテレータに対して呼び出した場合は未定義動作となる）&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;メンバ変数 &lt;code&gt;match&lt;/code&gt; への &lt;code&gt;const&lt;/code&gt; ポインタ &lt;code&gt;&amp;amp;match&lt;/code&gt; を返す。（&lt;code&gt;match&lt;/code&gt; は最後に&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; を呼び出した際の値を保持している）&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value_type&lt;/code&gt; は &lt;code&gt;regex_iterator&lt;/code&gt; のメンバ型で、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;&lt;/code&gt; である。&lt;/li&gt;
&lt;li&gt;戻り値の型は &lt;code&gt;const&lt;/code&gt; へのポインタであるため、このポインタを通した変更はできない。&lt;/li&gt;
&lt;li&gt;メンバ変数 &lt;code&gt;match&lt;/code&gt; はあくまでも説明用のプライベートメンバ変数であるため、注意すること。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;abc123def456ghi&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator it(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re), end; it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; end; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;prefix = &#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;prefix() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;, str = &#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;, suffix = &#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;suffix() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\&#39;&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;prefix = &#39;abc&#39;, str = &#39;123&#39;, suffix = &#39;def456ghi&#39;
prefix = &#39;def&#39;, str = &#39;456&#39;, suffix = &#39;ghi&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_deref.html&#34;&gt;&lt;code&gt;operator*&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;間接参照&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/regex_iterator.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_increment.html&#34;&gt;&lt;code&gt;operator++&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;インクリメント&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator* (C++11) -- regex_iterator: 例で不必要に参照を使っていたので修正</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_iterator/op_deref.html"/>
      <id>f08fdc31dfda371c7e7a79f59d038b74c3662b6d:reference/regex/regex_iterator/op_deref.md</id>
      <updated>2014-12-11 02:09:48 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator* (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;イテレータを間接参照する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;シーケンスの終端を示すイテレータではない事。（シーケンス終端イテレータに対して呼び出した場合は未定義動作となる）&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;メンバ変数 &lt;code&gt;match&lt;/code&gt; への &lt;code&gt;const&lt;/code&gt; 参照を返す。（最後に&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; を呼び出した際の値を保持している）&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value_type&lt;/code&gt; は &lt;code&gt;regex_iterator&lt;/code&gt; のメンバ型で、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;&lt;/code&gt; である。&lt;/li&gt;
&lt;li&gt;戻り値の型は &lt;code&gt;const&lt;/code&gt; への参照であるため、この参照を通した変更はできない。&lt;/li&gt;
&lt;li&gt;メンバ変数 &lt;code&gt;match&lt;/code&gt; はあくまでも説明用のプライベートメンバ変数であるため、注意すること。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;abc123def456ghi&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator it(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re), end; it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; end; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; match &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;prefix = &#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; match.prefix() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;, str = &#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; match.str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;, suffix = &#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; match.suffix() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\&#39;&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;prefix = &#39;abc&#39;, str = &#39;123&#39;, suffix = &#39;def456ghi&#39;
prefix = &#39;def&#39;, str = &#39;456&#39;, suffix = &#39;ghi&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 1.9, 2.9, 3.0, 3.1, 3.2, 3.3&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.3.6, 4.4.7, 4.5.3, 4.6.3, 4.7.2, 4.8.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_arrow.html&#34;&gt;&lt;code&gt;operator-&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバアクセス&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/regex_iterator.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_increment.html&#34;&gt;&lt;code&gt;operator++&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;インクリメント&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== (C++11) -- regex_iterator: 例で不必要に参照を使っていたので修正</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_iterator/op_equal.html"/>
      <id>f08fdc31dfda371c7e7a79f59d038b74c3662b6d:reference/regex/regex_iterator/op_equal.md</id>
      <updated>2014-12-11 02:09:48 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator== (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; right) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;regex_iterator&lt;/code&gt; の等値比較を行う。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt; と引数 &lt;code&gt;right&lt;/code&gt; が共にシーケンスの終端を示すイテレータの場合、&lt;code&gt;true&lt;/code&gt; を返す。&lt;br /&gt;
&lt;code&gt;*this&lt;/code&gt; と引数 &lt;code&gt;right&lt;/code&gt; のいずれか一方のみがシーケンスの終端を示すイテレータの場合、&lt;code&gt;false&lt;/code&gt; を返す。&lt;br /&gt;
&lt;code&gt;*this&lt;/code&gt; と引数 &lt;code&gt;right&lt;/code&gt; が共にシーケンスの終端を示すイテレータではない場合、各メンバ変数が以下の全ての条件を満たしていれば &lt;code&gt;true&lt;/code&gt; を、そうでなければ &lt;code&gt;false&lt;/code&gt; を返す。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;begin == right.begin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;end == right.end&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pregex == right.pregex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flags == right.flags&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;match[0] == right.match[0]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンバ変数 &lt;code&gt;begin&lt;/code&gt;、&lt;code&gt;end&lt;/code&gt;、&lt;code&gt;pregex&lt;/code&gt;、&lt;code&gt;flags&lt;/code&gt;、&lt;code&gt;match&lt;/code&gt; はあくまでも説明用のプライベートメンバ変数であるため、注意すること。&lt;/li&gt;
&lt;li&gt;本メンバ関数が &lt;code&gt;true&lt;/code&gt; を返したとしても、イテレータが同じ個所を指しているとは限らないことに注意すること。（下記の例を参照）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;+1-1+1-&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 2 つのイテレータを同一引数で生成する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator it1(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator it2(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 一方は 2 つ、もう一方は 1 つ進める&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it1; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it1;
  &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it2;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator== で比較する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (it1 &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;&lt;/span&gt; it2) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 参考のため、それぞれのマッチ結果の詳細を出力する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;it1:&#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it1&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;(&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ((&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1)[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;].first &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ((&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1)[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;].second &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;it2:&#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it2&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;(&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ((&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2)[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;].first &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ((&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2)[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;].second &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;true
it1:&#39;1&#39;(5, 6)
it2:&#39;1&#39;(3, 4)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_not_equal.html&#34;&gt;&lt;code&gt;operator!=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非等値比較&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator++ (C++11) -- regex_iterator: 例で不必要に参照を使っていたので修正</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_iterator/op_increment.html"/>
      <id>f08fdc31dfda371c7e7a79f59d038b74c3662b6d:reference/regex/regex_iterator/op_increment.md</id>
      <updated>2014-12-11 02:09:48 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator++ (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;();   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) 前置形式&lt;/span&gt;

regex_iterator &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) 後置形式&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;イテレータを次のマッチに進める&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;シーケンスの終端を示すイテレータではない事。（シーケンス終端イテレータに対して呼び出した場合は未定義動作となる）&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) の形式（前置形式）は、以下のように振る舞う。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BidirectionalIterator&lt;/code&gt; 型のローカル変数 &lt;code&gt;start&lt;/code&gt; を構築し、値 &lt;code&gt;match[0].second&lt;/code&gt; で初期化する。&lt;/li&gt;
&lt;li&gt;イテレータが長さゼロのマッチの場合（&lt;code&gt;match[0].matched == true&lt;/code&gt; かつ &lt;code&gt;match[0].first == match[0].second&lt;/code&gt; の場合）で、かつ、&lt;code&gt;start == end&lt;/code&gt; の場合、&lt;code&gt;*this&lt;/code&gt; をシーケンス終端イテレータにして &lt;code&gt;*this&lt;/code&gt; を返す。&lt;/li&gt;
&lt;li&gt;そうではなくて、イテレータが長さゼロのマッチの場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(start, end, match, *pregex, flags | regex_constants::match_not_null | regex_constants::match_continuous)&lt;/code&gt; を呼び出す。&lt;br /&gt;
    もしマッチしたら（&lt;code&gt;true&lt;/code&gt; が返されたら）、&lt;code&gt;*this&lt;/code&gt; を返す。マッチしなかったら、&lt;code&gt;start&lt;/code&gt; をインクリメントし、イテレータが長さゼロのマッチで無いかのように、以下の処理を続ける。&lt;/li&gt;
&lt;li&gt;イテレータが長さゼロのマッチでない場合、&lt;code&gt;flags&lt;/code&gt; を &lt;code&gt;flags | regex_constants ::match_prev_avail&lt;/code&gt; に更新し、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(start, end, match, *pregex, flags)&lt;/code&gt; を呼び出す。&lt;br /&gt;
    もしマッチしなかったら、&lt;code&gt;*this&lt;/code&gt; をシーケンス終端イテレータにする。その後、&lt;code&gt;*this&lt;/code&gt; を返す。&lt;/li&gt;
&lt;li&gt;上記のうち、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; が &lt;code&gt;true&lt;/code&gt; を返した全てのケースでは、以下の補正が行われる。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match.prefix().first&lt;/code&gt; を直前の &lt;code&gt;match[0].second&lt;/code&gt; に設定する。&lt;/li&gt;
&lt;li&gt;半開区間 &lt;code&gt;[0, match.size())&lt;/code&gt; の全てのインデックス &lt;code&gt;i&lt;/code&gt; について、&lt;code&gt;match[i].matched&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; であれば、&lt;code&gt;match.position(i)&lt;/code&gt; が &lt;code&gt;distance(begin, match[i].first)&lt;/code&gt; を返すように設定する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) の形式（後置形式）は、以下のように振る舞う。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    regex_iterator tmp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;
    &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; tmp;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) &lt;code&gt;*this&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(2) インクリメントを行う前の &lt;code&gt;*this&lt;/code&gt; のコピー&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンバ変数 &lt;code&gt;begin&lt;/code&gt;、&lt;code&gt;end&lt;/code&gt;、&lt;code&gt;pregex&lt;/code&gt;、&lt;code&gt;flags&lt;/code&gt;、&lt;code&gt;match&lt;/code&gt; はあくまでも説明用のプライベートメンバ変数であるため、注意すること。&lt;/li&gt;
&lt;li&gt;「効果」にあるように、&lt;code&gt;match&lt;/code&gt; には検索後に補正が行われるため、&lt;code&gt;regex_iterator&lt;/code&gt; を間接参照した結果は、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; を順に呼び出した結果とは異なる。&lt;br /&gt;
    また、これらの補正が実装でどのように行われるかについては、規格では規定されていない。&lt;/li&gt;
&lt;li&gt;「効果」では &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; が呼ばれるものとして記載されているが、実際に &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; が呼ばれるかどうかについては、規格では規定されていない。&lt;br /&gt;
    したがって、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; にユーザ定義の特殊化バージョンを提供しても、呼ばれないかもしれない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;a*|b*|c*&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;aaabbbccc&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator it(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re), end; it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; end; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;position = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;position() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, length = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;length() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, str = &#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;, prefix = &#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;prefix() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\&#39;&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;position = 0, length = 3, str = &#39;aaa&#39;, prefix = &#39;&#39;
position = 3, length = 0, str = &#39;&#39;, prefix = &#39;&#39;
position = 3, length = 3, str = &#39;bbb&#39;, prefix = &#39;&#39;
position = 6, length = 0, str = &#39;&#39;, prefix = &#39;&#39;
position = 6, length = 3, str = &#39;ccc&#39;, prefix = &#39;&#39;
position = 9, length = 0, str = &#39;&#39;, prefix = &#39;&#39;
&lt;/code&gt;&lt;/pre&gt;
注意：Clang &amp;amp; libc++ では正常に実行されない（終了しなくなってしまう）。また、GCC &amp;amp; libstdc++ の 4.9.1 までのバージョンでは、結果が正しくない。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;備考&lt;/h3&gt;
&lt;p&gt;Clang &amp;amp; libc++ と GCC &amp;amp; libstdc++ の 4.9.1 までのバージョンには、長さ 0 の文字列にマッチした時の挙動に問題があるため、注意が必要。
（特に、Clang は長さ 0 の文字列にマッチするとそこから先に進まなくなってしまう。例を参照）&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/regex_iterator.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_deref.html&#34;&gt;&lt;code&gt;operator*&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;間接参照&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_arrow.html&#34;&gt;&lt;code&gt;operator-&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバアクセス&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= (C++11) -- regex_iterator: 例で不必要に参照を使っていたので修正</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_iterator/op_not_equal.html"/>
      <id>f08fdc31dfda371c7e7a79f59d038b74c3662b6d:reference/regex/regex_iterator/op_not_equal.md</id>
      <updated>2014-12-11 02:09:48 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator!= (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; right) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;regex_iterator&lt;/code&gt; の非等値比較を行う。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;!(*this == right)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;本メンバ関数が &lt;code&gt;true&lt;/code&gt; を返したとしても、イテレータの指す文字列が等しくないとは限らないことに注意すること。（下記の例を参照）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;+1-1+1-&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 2 つのイテレータを同一引数で生成する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator it1(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator it2(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 一方だけ  1 つ進める&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it1;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator!= で比較する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (it1 &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt;&lt;/span&gt; it2) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 参考のため、それぞれのマッチ結果の詳細を出力する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;it1:&#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it1&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;(&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ((&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1)[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;].first &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ((&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1)[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;].second &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;it2:&#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it2&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;(&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ((&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2)[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;].first &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ((&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2)[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;].second &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;true
it1:&#39;1&#39;(3, 4)
it2:&#39;1&#39;(1, 2)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ (C++11) -- regex_iterator: 例で不必要に参照を使っていたので修正</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_iterator/regex_iterator.html"/>
      <id>f08fdc31dfda371c7e7a79f59d038b74c3662b6d:reference/regex/regex_iterator/regex_iterator.md</id>
      <updated>2014-12-11 02:09:48 +0900</updated>
      
        <content type="html">&lt;h1&gt;コンストラクタ (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;regex_iterator();                                                                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

regex_iterator(BidirectionalIterator a, BidirectionalIterator b,
               &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; re,
               regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_flag_type m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_default);           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

regex_iterator(BidirectionalIterator a, BidirectionalIterator b,
               &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; re,
               regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_flag_type m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_default) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++14 から&lt;/span&gt;

regex_iterator(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;);                                                         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;regex_iterator&lt;/code&gt; オブジェクトを構築する&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) デフォルトコンストラクタ。シーケンスの終端を示す特別なイテレータを構築する。&lt;/li&gt;
&lt;li&gt;(2) メンバ変数 &lt;code&gt;begin&lt;/code&gt;、&lt;code&gt;end&lt;/code&gt;、&lt;code&gt;pregex&lt;/code&gt;、&lt;code&gt;flags&lt;/code&gt; をそれぞれ &lt;code&gt;a&lt;/code&gt;、&lt;code&gt;b&lt;/code&gt;、&lt;code&gt;&amp;amp;re&lt;/code&gt;、&lt;code&gt;m&lt;/code&gt; で初期化して、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(begin, end, match, *pregex, flags)&lt;/code&gt; を呼び出す。
    検索に成功しなかった場合（&lt;code&gt;false&lt;/code&gt; が返された場合）、デフォルトコンストラクタで構築した場合と同様、直ちにシーケンスの終端を示す特別なイテレータとなる。&lt;/li&gt;
&lt;li&gt;(3) deleted コンストラクタであるため、使用するとコンパイルエラーとなる。&lt;/li&gt;
&lt;li&gt;(4) コピーコンストラクタ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンバ変数 &lt;code&gt;begin&lt;/code&gt;、&lt;code&gt;end&lt;/code&gt;、&lt;code&gt;pregex&lt;/code&gt;、&lt;code&gt;flags&lt;/code&gt;、&lt;code&gt;match&lt;/code&gt; はあくまでも説明用のプライベートメンバ変数であるため、注意すること。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;regex_iterator&lt;/code&gt; は指定された正規表現 &lt;code&gt;re&lt;/code&gt; のコピーではなく、&lt;code&gt;re&lt;/code&gt; へのポインタをオブジェクト内に保持するため、引数に渡した正規表現オブジェクトは当該イテレータを使用し終わるまで破棄されないようにする必要がある。&lt;br /&gt;
    従って、(2) の形式のコンストラクタに渡す引数 &lt;code&gt;re&lt;/code&gt; に一時オブジェクトを指定することはほぼ間違いなくプログラミング上のエラーを意味する。&lt;br /&gt;
    (3) の形式のコンストラクタが C++14 で追加された理由は、この事態をコンパイル時に検出するためである。&lt;br /&gt;
    しかし、この追加のため、C++11 では合法となりうる以下のようなコードは C++14 ではコンパイルエラーになる。
  &lt;br /&gt;
&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;f&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;);

    f(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator(s.begin(), s.end(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;)));
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;This compiler supports the C++11 standard.&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;sregex_iterator&lt;/span&gt; it(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;sregex_iterator&lt;/span&gt;()) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;match:&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  } &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;not match&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;match:11
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11（一部 C++14）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;備考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;libstdc++ には 5.0.0 rev.218373 現在、(3) の形式のコンストラクタは存在しない。&lt;/li&gt;
&lt;li&gt;libc++ には、3.4 までは (3) の形式のコンストラクタは存在しない。&lt;/li&gt;
&lt;li&gt;libstdc++ では 5.0.0 rev.218373 現在、コピーコンストラクタで構築したオブジェクトの &lt;code&gt;match.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/position.html&#34;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(i)&lt;/code&gt; が補正されずに誤っている。（補正については &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_increment.html&#34;&gt;&lt;code&gt;operator++&lt;/code&gt;&lt;/a&gt; の「効果」を参照）&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ (C++11) -- regex_iterator: コピーコンストラクタについて libstdc++ の備考を追記</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_iterator/regex_iterator.html"/>
      <id>b818692efaaa70390641193154ce9aaa1c2ccce0:reference/regex/regex_iterator/regex_iterator.md</id>
      <updated>2014-12-11 01:54:19 +0900</updated>
      
        <content type="html">&lt;h1&gt;コンストラクタ (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;regex_iterator();                                                                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

regex_iterator(BidirectionalIterator a, BidirectionalIterator b,
               &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; re,
               regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_flag_type m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_default);           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

regex_iterator(BidirectionalIterator a, BidirectionalIterator b,
               &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; re,
               regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_flag_type m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_default) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++14 から&lt;/span&gt;

regex_iterator(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;);                                                         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;regex_iterator&lt;/code&gt; オブジェクトを構築する&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) デフォルトコンストラクタ。シーケンスの終端を示す特別なイテレータを構築する。&lt;/li&gt;
&lt;li&gt;(2) メンバ変数 &lt;code&gt;begin&lt;/code&gt;、&lt;code&gt;end&lt;/code&gt;、&lt;code&gt;pregex&lt;/code&gt;、&lt;code&gt;flags&lt;/code&gt; をそれぞれ &lt;code&gt;a&lt;/code&gt;、&lt;code&gt;b&lt;/code&gt;、&lt;code&gt;&amp;amp;re&lt;/code&gt;、&lt;code&gt;m&lt;/code&gt; で初期化して、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(begin, end, match, *pregex, flags)&lt;/code&gt; を呼び出す。
    検索に成功しなかった場合（&lt;code&gt;false&lt;/code&gt; が返された場合）、デフォルトコンストラクタで構築した場合と同様、直ちにシーケンスの終端を示す特別なイテレータとなる。&lt;/li&gt;
&lt;li&gt;(3) deleted コンストラクタであるため、使用するとコンパイルエラーとなる。&lt;/li&gt;
&lt;li&gt;(4) コピーコンストラクタ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンバ変数 &lt;code&gt;begin&lt;/code&gt;、&lt;code&gt;end&lt;/code&gt;、&lt;code&gt;pregex&lt;/code&gt;、&lt;code&gt;flags&lt;/code&gt;、&lt;code&gt;match&lt;/code&gt; はあくまでも説明用のプライベートメンバ変数であるため、注意すること。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;regex_iterator&lt;/code&gt; は指定された正規表現 &lt;code&gt;re&lt;/code&gt; のコピーではなく、&lt;code&gt;re&lt;/code&gt; へのポインタをオブジェクト内に保持するため、引数に渡した正規表現オブジェクトは当該イテレータを使用し終わるまで破棄されないようにする必要がある。&lt;br /&gt;
    従って、(2) の形式のコンストラクタに渡す引数 &lt;code&gt;re&lt;/code&gt; に一時オブジェクトを指定することはほぼ間違いなくプログラミング上のエラーを意味する。&lt;br /&gt;
    (3) の形式のコンストラクタが C++14 で追加された理由は、この事態をコンパイル時に検出するためである。&lt;br /&gt;
    しかし、この追加のため、C++11 では合法となりうる以下のようなコードは C++14 ではコンパイルエラーになる。
  &lt;br /&gt;
&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;f&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;);

    f(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator(s.begin(), s.end(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;)));
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;This compiler supports the C++11 standard.&#34;&lt;/span&gt;);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;sregex_iterator&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;sregex_iterator&lt;/span&gt;()) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;match:&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  } &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;not match&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;match:11
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11（一部 C++14）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;備考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;libstdc++ には 5.0.0 rev.218373 現在、(3) の形式のコンストラクタは存在しない。&lt;/li&gt;
&lt;li&gt;libc++ には、3.4 までは (3) の形式のコンストラクタは存在しない。&lt;/li&gt;
&lt;li&gt;libstdc++ では 5.0.0 rev.218373 現在、コピーコンストラクタで構築したオブジェクトの &lt;code&gt;match.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/position.html&#34;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(i)&lt;/code&gt; が補正されずに誤っている。（補正については &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_increment.html&#34;&gt;&lt;code&gt;operator++&lt;/code&gt;&lt;/a&gt; の「効果」を参照）&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ (C++11) -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site
</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_token_iterator/regex_token_iterator.html"/>
      <id>b81e9fb61ce3e5c7350cc1f18da168f92b48bc59:reference/regex/regex_token_iterator/regex_token_iterator.md</id>
      <updated>2014-12-10 03:23:24 +0900
</updated>
      
        <content type="html">&lt;h1&gt;コンストラクタ (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;regex_token_iterator();                                                                             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                     &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; re, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; submatch &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;,
                     regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_flag_type m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_default);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                     &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; re, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; submatches,
                     regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_flag_type m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_default);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                     &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; re, initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; submatches,
                     regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_flag_type m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_default);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                     &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; re, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;submatches)[N],
                     regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_flag_type m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_default);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;

regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                     regex_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; re, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; submatch &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;,
                     regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_flag_type m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_default) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6) C++14 から&lt;/span&gt;

regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                     regex_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; re, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; submatches,
                     regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_flag_type m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_default) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7) C++14 から&lt;/span&gt;

regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                     regex_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; re, initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; submatches,
                     regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_flag_type m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_default) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8) C++14 から&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                     regex_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; re, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;submatches)[N],
                     regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_flag_type m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_default) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (9) C++14 から&lt;/span&gt;

regex_token_iterator(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_token_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;);                                                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (10)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;regex_token_iterator&lt;/code&gt; オブジェクトを構築する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;引数 &lt;code&gt;submatch&lt;/code&gt;、あるいは、引数 &lt;code&gt;submatches&lt;/code&gt; の各要素は、&lt;code&gt;-1&lt;/code&gt; 以上である事。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) デフォルトコンストラクタ。シーケンス終端イテレータ（シーケンスの終端を示す特別なイテレータ）を構築する。&lt;/li&gt;
&lt;li&gt;(2)～(5) メンバ変数 &lt;code&gt;subs&lt;/code&gt; を、引数 &lt;code&gt;submatch&lt;/code&gt; の 1 要素のみで（(2) の形式の場合）、あるいは、引数 &lt;code&gt;submatches&lt;/code&gt; で（(3)～(5) の形式の場合）初期化する。
    また、メンバ変数 &lt;code&gt;N&lt;/code&gt;、&lt;code&gt;position&lt;/code&gt; をそれぞれ、&lt;code&gt;0&lt;/code&gt;、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator.html&#34;&gt;&lt;code&gt;regex_iterator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;(a, b, re, m)&lt;/code&gt; で初期化する。
    もし、&lt;code&gt;position&lt;/code&gt; がシーケンス終端イテレータでなければ、メンバ変数 &lt;code&gt;result&lt;/code&gt; を現在のマッチ（備考参照）のアドレスに設定する。&lt;br /&gt;
    そうでなくて、もし、メンバ変数 &lt;code&gt;subs&lt;/code&gt; が &lt;code&gt;-1&lt;/code&gt; を含んでいたら、&lt;code&gt;*this&lt;/code&gt; を範囲 &lt;code&gt;[a, b)&lt;/code&gt; を指す接尾辞イテレータとして設定する。&lt;br /&gt;
    そうでなければ、&lt;code&gt;*this&lt;/code&gt; をシーケンス終端イテレータとして設定する。&lt;/li&gt;
&lt;li&gt;(6)～(9) deleted コンストラクタであるため、使用するとコンパイルエラーとなる。（(2)～(5) の形式の &lt;code&gt;re&lt;/code&gt; の型を &lt;code&gt;const regex_type&amp;amp;&lt;/code&gt; から &lt;code&gt;regex_type&amp;amp;&amp;amp;&lt;/code&gt; に変更したもの）&lt;/li&gt;
&lt;li&gt;(10) コピーコンストラクタ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;「現在のマッチ」とは、もし &lt;code&gt;subs[N]&lt;/code&gt; が -1 の場合には &lt;code&gt;(*position).&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/prefix.html&#34;&gt;&lt;code&gt;prefix&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;、そうでなければ &lt;code&gt;(*position).[subs[N]]&lt;/code&gt; の事を指す。&lt;/li&gt;
&lt;li&gt;メンバ変数 &lt;code&gt;subs&lt;/code&gt;、&lt;code&gt;N&lt;/code&gt;、&lt;code&gt;position&lt;/code&gt;、&lt;code&gt;result&lt;/code&gt; はあくまでも説明用のプライベートメンバ変数であるため、注意すること。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;regex_token_iterator&lt;/code&gt; は、メンバ変数 &lt;code&gt;position&lt;/code&gt; を通して指定された正規表現 &lt;code&gt;re&lt;/code&gt; のコピーではなく、&lt;code&gt;re&lt;/code&gt; へのポインタをオブジェクト内に保持するため、引数に渡した正規表現オブジェクトは当該イテレータを使用し終わるまで破棄されないようにする必要がある。&lt;br /&gt;
    従って、(2)～(5) の形式のコンストラクタに渡す引数 &lt;code&gt;re&lt;/code&gt; に一時オブジェクトを指定することはほぼ間違いなくプログラミング上のエラーを意味する。&lt;br /&gt;
    (6)～(9) の形式のコンストラクタが C++14 で追加された理由は、この事態をコンパイル時に検出するためである。&lt;br /&gt;
    しかし、この追加のため、C++11 では合法となりうる以下のようなコードは C++14 ではコンパイルエラーになる。
  &lt;br /&gt;
&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;f&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_token_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;);

    f(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_token_iterator(s.begin(), s.end(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;)));
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;initializer_list&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; f(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; submatch)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;enum E { enumerator1 = value1, enumerator2 = value2, enumerator3 = value3, };&#34;&lt;/span&gt;);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex re(R&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;((\w+)\s*=\s*(\w+))&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 引数で指定されたサブマッチを列挙する。ループ終了条件には (1) の形式で構築されたシーケンス終端イテレータとの比較を行う。&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;sregex_token_iterator&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re, submatch), end &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;sregex_token_iterator&lt;/span&gt;();
       it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; end; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;match range = (&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;first &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;), &#34;&lt;/span&gt;
                 &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;str = &#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;;
  }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) の形式で構築（列挙子のみ抽出）&lt;/span&gt;
  f(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) の形式で構築（値のみ抽出）&lt;/span&gt;
  f(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;{ &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt; });

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) の形式で構築（マッチしない部分のみ抽出）&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; il &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color: #666666&#34;&gt;-1&lt;/span&gt; };
  f(il);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5) の形式で構築（列挙子と値の両方を抽出）&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; ia[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt; };
  f(ia);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;match range = (9, 20), str = &#39;enumerator1&#39;
match range = (31, 42), str = &#39;enumerator2&#39;
match range = (53, 64), str = &#39;enumerator3&#39;

match range = (23, 29), str = &#39;value1&#39;
match range = (45, 51), str = &#39;value2&#39;
match range = (67, 73), str = &#39;value3&#39;

match range = (0, 9), str = &#39;enum E { &#39;
match range = (29, 31), str = &#39;, &#39;
match range = (51, 53), str = &#39;, &#39;
match range = (73, 77), str = &#39;, };&#39;

match range = (9, 20), str = &#39;enumerator1&#39;
match range = (23, 29), str = &#39;value1&#39;
match range = (31, 42), str = &#39;enumerator2&#39;
match range = (45, 51), str = &#39;value2&#39;
match range = (53, 64), str = &#39;enumerator3&#39;
match range = (67, 73), str = &#39;value3&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11（一部 C++14）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;備考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;libstdc++ には 5.0.0 rev.218373 現在、(6)～(9) の形式のコンストラクタは存在しない。&lt;/li&gt;
&lt;li&gt;libc++ には、3.4 までは (6)～(9) の形式のコンストラクタは存在しない。&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ (C++11) -- regex_token_iterator: コンストラクタを追加(#237)</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_token_iterator/regex_token_iterator.html"/>
      <id>333691c256d34345d5cc2c87bc14d3118333bbcf:reference/regex/regex_token_iterator/regex_token_iterator.md</id>
      <updated>2014-12-10 03:17:13 +0900</updated>
      
        <content type="html">&lt;h1&gt;コンストラクタ (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;regex_token_iterator();                                                                             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                     &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; re, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; submatch &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;,
                     regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_flag_type m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_default);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                     &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; re, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; submatches,
                     regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_flag_type m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_default);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                     &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; re, initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; submatches,
                     regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_flag_type m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_default);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                     &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; re, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;submatches)[N],
                     regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_flag_type m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_default);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;

regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                     regex_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; re, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; submatch &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;,
                     regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_flag_type m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_default) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6) C++14 から&lt;/span&gt;

regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                     regex_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; re, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; submatches,
                     regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_flag_type m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_default) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7) C++14 から&lt;/span&gt;

regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                     regex_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; re, initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; submatches,
                     regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_flag_type m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_default) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8) C++14 から&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                     regex_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; re, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;submatches)[N],
                     regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_flag_type m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_default) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (9) C++14 から&lt;/span&gt;

regex_token_iterator(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_token_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;);                                                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (10)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;regex_token_iterator&lt;/code&gt; オブジェクトを構築する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;引数 &lt;code&gt;submatch&lt;/code&gt;、あるいは、引数 &lt;code&gt;submatches&lt;/code&gt; の各要素は、&lt;code&gt;-1&lt;/code&gt; 以上である事。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) デフォルトコンストラクタ。シーケンス終端イテレータ（シーケンスの終端を示す特別なイテレータ）を構築する。&lt;/li&gt;
&lt;li&gt;(2)～(5) メンバ変数 &lt;code&gt;subs&lt;/code&gt; を、引数 &lt;code&gt;submatch&lt;/code&gt; の 1 要素のみで（(2) の形式の場合）、あるいは、引数 &lt;code&gt;submatches&lt;/code&gt; で（(3)～(5) の形式の場合）初期化する。
    また、メンバ変数 &lt;code&gt;N&lt;/code&gt;、&lt;code&gt;position&lt;/code&gt; をそれぞれ、&lt;code&gt;0&lt;/code&gt;、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator.html&#34;&gt;&lt;code&gt;regex_iterator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;(a, b, re, m)&lt;/code&gt; で初期化する。
    もし、&lt;code&gt;position&lt;/code&gt; がシーケンス終端イテレータでなければ、メンバ変数 &lt;code&gt;result&lt;/code&gt; を現在のマッチ（備考参照）のアドレスに設定する。&lt;br /&gt;
    そうでなくて、もし、メンバ変数 &lt;code&gt;subs&lt;/code&gt; が &lt;code&gt;-1&lt;/code&gt; を含んでいたら、&lt;code&gt;*this&lt;/code&gt; を範囲 &lt;code&gt;[a, b)&lt;/code&gt; を指す接尾辞イテレータとして設定する。&lt;br /&gt;
    そうでなければ、&lt;code&gt;*this&lt;/code&gt; をシーケンス終端イテレータとして設定する。&lt;/li&gt;
&lt;li&gt;(6)～(9) deleted コンストラクタであるため、使用するとコンパイルエラーとなる。（(2)～(5) の形式の &lt;code&gt;re&lt;/code&gt; の型を &lt;code&gt;const regex_type&amp;amp;&lt;/code&gt; から &lt;code&gt;regex_type&amp;amp;&amp;amp;&lt;/code&gt; に変更したもの）&lt;/li&gt;
&lt;li&gt;(10) コピーコンストラクタ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;「現在のマッチ」とは、もし &lt;code&gt;subs[N]&lt;/code&gt; が -1 の場合には &lt;code&gt;(*position).&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/prefix.html&#34;&gt;&lt;code&gt;prefix&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;、そうでなければ &lt;code&gt;(*position).[subs[N]]&lt;/code&gt; の事を指す。&lt;/li&gt;
&lt;li&gt;メンバ変数 &lt;code&gt;subs&lt;/code&gt;、&lt;code&gt;N&lt;/code&gt;、&lt;code&gt;position&lt;/code&gt;、&lt;code&gt;result&lt;/code&gt; はあくまでも説明用のプライベートメンバ変数であるため、注意すること。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;regex_token_iterator&lt;/code&gt; は、メンバ変数 &lt;code&gt;position&lt;/code&gt; を通して指定された正規表現 &lt;code&gt;re&lt;/code&gt; のコピーではなく、&lt;code&gt;re&lt;/code&gt; へのポインタをオブジェクト内に保持するため、引数に渡した正規表現オブジェクトは当該イテレータを使用し終わるまで破棄されないようにする必要がある。&lt;br /&gt;
    従って、(2)～(5) の形式のコンストラクタに渡す引数 &lt;code&gt;re&lt;/code&gt; に一時オブジェクトを指定することはほぼ間違いなくプログラミング上のエラーを意味する。&lt;br /&gt;
    (6)～(9) の形式のコンストラクタが C++14 で追加された理由は、この事態をコンパイル時に検出するためである。&lt;br /&gt;
    しかし、この追加のため、C++11 では合法となりうる以下のようなコードは C++14 ではコンパイルエラーになる。
  &lt;br /&gt;
&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;f&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_token_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;);

    f(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_token_iterator(s.begin(), s.end(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;)));
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;initializer_list&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; f(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; submatch)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;enum E { enumerator1 = value1, enumerator2 = value2, enumerator3 = value3, };&#34;&lt;/span&gt;);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex re(R&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;((\w+)\s*=\s*(\w+))&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 引数で指定されたサブマッチを列挙する。ループ終了条件には (1) の形式で構築されたシーケンス終端イテレータとの比較を行う。&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;sregex_token_iterator&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re, submatch), end &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;sregex_token_iterator&lt;/span&gt;();
       it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; end; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;match range = (&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;first &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;), &#34;&lt;/span&gt;
                 &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;str = &#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;;
  }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) の形式で構築（列挙子のみ抽出）&lt;/span&gt;
  f(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) の形式で構築（値のみ抽出）&lt;/span&gt;
  f(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;{ &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt; });

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) の形式で構築（マッチしない部分のみ抽出）&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; il &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color: #666666&#34;&gt;-1&lt;/span&gt; };
  f(il);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5) の形式で構築（列挙子と値の両方を抽出）&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; ia[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt; };
  f(ia);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;match range = (9, 20), str = &#39;enumerator1&#39;
match range = (31, 42), str = &#39;enumerator2&#39;
match range = (53, 64), str = &#39;enumerator3&#39;

match range = (23, 29), str = &#39;value1&#39;
match range = (45, 51), str = &#39;value2&#39;
match range = (67, 73), str = &#39;value3&#39;

match range = (0, 9), str = &#39;enum E { &#39;
match range = (29, 31), str = &#39;, &#39;
match range = (51, 53), str = &#39;, &#39;
match range = (73, 77), str = &#39;, };&#39;

match range = (9, 20), str = &#39;enumerator1&#39;
match range = (23, 29), str = &#39;value1&#39;
match range = (31, 42), str = &#39;enumerator2&#39;
match range = (45, 51), str = &#39;value2&#39;
match range = (53, 64), str = &#39;enumerator3&#39;
match range = (67, 73), str = &#39;value3&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11（一部 C++14）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;備考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;libstdc++ には 5.0.0 rev.218373 現在、(6)～(9) の形式のコンストラクタは存在しない。&lt;/li&gt;
&lt;li&gt;libc++ には、3.4 までは (6)～(9) の形式のコンストラクタは存在しない。&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
</feed>
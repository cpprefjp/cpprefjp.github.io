<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-05-08T04:07:22.990791</updated>
  <id>a8eedd45-0bd7-4b4a-ab55-1d33d6e3073e</id>

  
    <entry>
      <title>contract_violation -- fix: Added version for contract_violation</title>
      <link href="https://cpprefjp.github.io/reference/contracts/contract_violation.html"/>
      <id>77d4a16738e24aaa0624b55333bcf630978e9d91:reference/contracts/contract_violation.md</id>
      <updated>2025-05-08T08:54:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/contracts/contract_violation.md b/reference/contracts/contract_violation.md
index 4e4cf7725..b09eb9335 100644
--- a/reference/contracts/contract_violation.md
+++ b/reference/contracts/contract_violation.md
@@ -2,6 +2,7 @@
 * contracts[meta header]
 * std::contracts[meta namespace]
 * class[meta id-type]
+* cpp26[meta cpp]
 
 ```cpp
 namespace std::contracts {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非推奨となっていた列挙型の算術変換を削除 [P2864R2] -- Merge pull request #1446 from 50c0019uy/master</title>
      <link href="https://cpprefjp.github.io/lang/cpp26/remove_deprecated_arithmetic_conversion_on_enumerations.html"/>
      <id>6208428b5a009dcfae8202f568cef35d8892c13f:lang/cpp26/remove_deprecated_arithmetic_conversion_on_enumerations.md</id>
      <updated>2025-05-07T18:35:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp26/remove_deprecated_arithmetic_conversion_on_enumerations.md b/lang/cpp26/remove_deprecated_arithmetic_conversion_on_enumerations.md
index c44035a45..62b6c1f61 100644
--- a/lang/cpp26/remove_deprecated_arithmetic_conversion_on_enumerations.md
+++ b/lang/cpp26/remove_deprecated_arithmetic_conversion_on_enumerations.md
@@ -1,4 +1,4 @@
-# 列挙値から算術型への暗黙変換を非推奨化 [P2864R2]
+# 非推奨となっていた列挙型の算術変換を削除 [P2864R2]
 * cpp26[meta cpp]
 
 &amp;lt;!-- start lang caution --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非推奨となっていた列挙型の算術変換を削除 [P2864R2] -- ページタイトルを修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp26/remove_deprecated_arithmetic_conversion_on_enumerations.html"/>
      <id>8acf79c216090dcb5818046ae852eb8677cd6a36:lang/cpp26/remove_deprecated_arithmetic_conversion_on_enumerations.md</id>
      <updated>2025-05-07T17:43:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp26/remove_deprecated_arithmetic_conversion_on_enumerations.md b/lang/cpp26/remove_deprecated_arithmetic_conversion_on_enumerations.md
index c44035a45..62b6c1f61 100644
--- a/lang/cpp26/remove_deprecated_arithmetic_conversion_on_enumerations.md
+++ b/lang/cpp26/remove_deprecated_arithmetic_conversion_on_enumerations.md
@@ -1,4 +1,4 @@
-# 列挙値から算術型への暗黙変換を非推奨化 [P2864R2]
+# 非推奨となっていた列挙型の算術変換を削除 [P2864R2]
 * cpp26[meta cpp]
 
 &amp;lt;!-- start lang caution --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>50c0019uy</name>
        <email>137173525+50c0019uy@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_clock -- is_clock : Clock要件を記載 #1445</title>
      <link href="https://cpprefjp.github.io/reference/chrono/is_clock.html"/>
      <id>0de1d6d997254af003ec11bd19f597de81eb3fa3:reference/chrono/is_clock.md</id>
      <updated>2025-05-07T15:26:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/is_clock.md b/reference/chrono/is_clock.md
index c7fe8e4de..01d3f7292 100644
--- a/reference/chrono/is_clock.md
+++ b/reference/chrono/is_clock.md
@@ -21,6 +21,22 @@ namespace std::chrono {
 
 Clock要件を満たすには、以下が必要である：
 
+| 有効であるべき式 | 戻り値型 | 操作の意味論 |
+|------------------|----------|--------------|
+| `C1::rep`        | 算術型もしくはそのように振る舞うクラス | `C1::duration`の値型 |
+| `C1::period`     | [`std::ratio`](/reference/ratio/ratio.md)の特殊化 | クロックの時間周期 (秒ベース) |
+| `C1::duration`   | [`chrono::duration`](duration.md)`&amp;lt;C1::rep, C1::period&amp;gt;` | クロックの`duation`型 |
+| `C1::time_point` | [`chrono::time_point`](time_point.md)`&amp;lt;C1&amp;gt;`もしくは[`chrono::time_point`](time_point.md)`&amp;lt;C2, C1::duration&amp;gt;` | クロックの`time_point`型。`C1`と`C2`は同じエポックを参照する |
+| `C1::is_steady`  | `const bool` | `t1 &amp;lt;= t2`が常に真であり (注：時間が戻らない)、時間間隔が常に一定である場合に`true`、そうでなければ`false` |
+| `C1::now()`      | `C1::time_point` | 現在の時間点を表す`time_point`オブジェクトを返す |
+
+ここで、以下のように定義する：
+
+- `C1`と`C2` : クロックの種類
+- `t1`と`t2` : `C1::now()`によって返される値。ここで、`t1`を返す`now()`呼び出しは`t2`を返す`now()`呼び出しよりも前に発生し、これらの呼び出しは両方とも`C1::time_point::max()`よりも前に発生するものとする (注: これは、`C1`が`t1`と`t2`の間でラップアラウンドしていないことを意味する)
+
+`is_clock`は、以下を満たさない限り、`Clock`要件として適格ではない：
+
 - 修飾された型`T`が、`T::period`、`T::duration`、`T::time_point`メンバ型を持っていること
 - 式`T::is_steady`が評価されないオペランドで使用された場合に妥当であること
 - 式`T::now()`が評価されないオペランドで使用された場合に妥当であること
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>then -- execution/then: fix example</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/then.html"/>
      <id>63b19a362e53407399882264694b97482dd2a700:reference/execution/execution/then.md</id>
      <updated>2025-05-07T01:00:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/then.md b/reference/execution/execution/then.md
index e950bc0be..3758369d3 100644
--- a/reference/execution/execution/then.md
+++ b/reference/execution/execution/then.md
@@ -80,8 +80,8 @@ int main()
 {
   { // 関数呼び出し
     ex::sender auto snd0 = ex::just(&amp;#39;C&amp;#39;, 2);
-    ex::sender auto snd1 = ex::then(snd0, [](char ch, int s){
-      return ch + std::string(2, &amp;#39;+&amp;#39;);
+    ex::sender auto snd1 = ex::then(snd0, [](char ch, int n) {
+      return ch + std::string(n, &amp;#39;+&amp;#39;);
     });
     auto [s] = std::this_thread::sync_wait(snd1).value();
     std::println(&amp;#34;{}&amp;#34;, s);
@@ -89,8 +89,8 @@ int main()
 
   { // パイプライン記法
     ex::sender auto sndr = ex::just(&amp;#39;C&amp;#39;, 2);
-      | ex::then([](char ch, int s){
-          return ch + std::string(2, &amp;#39;+&amp;#39;);
+      | ex::then([](char ch, int n) {
+          return ch + std::string(n, &amp;#39;+&amp;#39;);
         });
     auto [s] = std::this_thread::sync_wait(sndr).value();
     std::println(&amp;#34;{}&amp;#34;, s);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
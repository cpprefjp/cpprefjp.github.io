<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-01-10T14:41:54.199702</updated>
  <id>80fa97a0-60f4-4113-9638-fd61e566da84</id>

  
    <entry>
      <title>count -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_count.html"/>
      <id>710005aa37df5d7e7220d899c738642f795abeed:reference/algorithm/ranges_count.md</id>
      <updated>2022-01-08T12:02:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_count.md b/reference/algorithm/ranges_count.md
index 051f737c4..748e65a72 100644
--- a/reference/algorithm/ranges_count.md
+++ b/reference/algorithm/ranges_count.md
@@ -19,6 +19,7 @@ namespace std::ranges {
 * input_range[link /reference/ranges/input_range.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * identity[link /reference/functional/identity.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
 * indirect_binary_predicate[link /reference/iterator/indirect_binary_predicate.md]
 * ranges::equal_to[link /reference/functional/ranges_equal_to.md]
 * projected[link /reference/iterator/projected.md]
@@ -90,6 +91,7 @@ inline constexpr count_impl count;
 * input_range[link /reference/ranges/input_range.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * identity[link /reference/functional/identity.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
 * indirect_binary_predicate[link /reference/iterator/indirect_binary_predicate.md]
 * ranges::equal_to[link /reference/functional/ranges_equal_to.md]
 * projected[link /reference/iterator/projected.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>count_if -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_count_if.html"/>
      <id>710005aa37df5d7e7220d899c738642f795abeed:reference/algorithm/ranges_count_if.md</id>
      <updated>2022-01-08T12:02:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_count_if.md b/reference/algorithm/ranges_count_if.md
index b93b39613..39e9df16c 100644
--- a/reference/algorithm/ranges_count_if.md
+++ b/reference/algorithm/ranges_count_if.md
@@ -17,6 +17,7 @@ namespace std::ranges {
 * input_range[link /reference/ranges/input_range.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * identity[link /reference/functional/identity.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
 * indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
 * projected[link /reference/iterator/projected.md]
 * iter_difference_t[link /reference/iterator/iter_difference_t.md]
@@ -89,6 +90,7 @@ inline constexpr count_if_impl count_if;
 * input_range[link /reference/ranges/input_range.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * identity[link /reference/functional/identity.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
 * indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
 * projected[link /reference/iterator/projected.md]
 * iter_difference_t[link /reference/iterator/iter_difference_t.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>adjacent_find -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_adjacent_find.html"/>
      <id>9bc833141edeb7a6acda64a8c65cc2e7c36136ee:reference/algorithm/ranges_adjacent_find.md</id>
      <updated>2022-01-08T12:00:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_adjacent_find.md b/reference/algorithm/ranges_adjacent_find.md
index 44f88300c..622ddb3b2 100644
--- a/reference/algorithm/ranges_adjacent_find.md
+++ b/reference/algorithm/ranges_adjacent_find.md
@@ -13,19 +13,15 @@ namespace std::ranges {
   constexpr borrowed_iterator_t&amp;lt;R&amp;gt; adjacent_find(R&amp;amp;&amp;amp; r, Pred pred = {}, Proj proj = {});
 }
 ```
-- forward_iterator[link /reference/iterator/forward_iterator.md]
-- sentinel_for[link /reference/iterator/sentinel_for.md]
-- identity[link /reference/functional/identity.md]
-- indirect_binary_predicate[link /reference/iterator/indirect_binary_predicate.md]
-- projected[link /reference/iterator/projected.md]
-- ranges::equal_to[link /reference/functional/ranges_equal_to.md]
-- forward_range[link /reference/ranges/forward_range.md]
-- iterator_t[link /reference/ranges/iterator_t.md]
-- borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
-- invoke[link /reference/functional/invoke.md]
-- begin[link /reference/ranges/begin.md]
-- end[link /reference/ranges/end.md]
-- ref[link /reference/functional/ref.md]
+* forward_iterator[link /reference/iterator/forward_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* identity[link /reference/functional/identity.md]
+* indirect_binary_predicate[link /reference/iterator/indirect_binary_predicate.md]
+* projected[link /reference/iterator/projected.md]
+* ranges::equal_to[link /reference/functional/ranges_equal_to.md]
+* forward_range[link /reference/ranges/forward_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
 
 
 ## 概要
@@ -95,19 +91,19 @@ struct adjacent_find_impl {
 
 inline constexpr adjacent_find_impl adjacent_find;
 ```
-- forward_iterator[link /reference/iterator/forward_iterator.md]
-- sentinel_for[link /reference/iterator/sentinel_for.md]
-- identity[link /reference/functional/identity.md]
-- indirect_binary_predicate[link /reference/iterator/indirect_binary_predicate.md]
-- projected[link /reference/iterator/projected.md]
-- ranges::equal_to[link /reference/functional/ranges_equal_to.md]
-- forward_range[link /reference/ranges/forward_range.md]
-- iterator_t[link /reference/ranges/iterator_t.md]
-- borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
-- invoke[link /reference/functional/invoke.md]
-- begin[link /reference/ranges/begin.md]
-- end[link /reference/ranges/end.md]
-- ref[link /reference/functional/ref.md]
+* forward_iterator[link /reference/iterator/forward_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* identity[link /reference/functional/identity.md]
+* indirect_binary_predicate[link /reference/iterator/indirect_binary_predicate.md]
+* projected[link /reference/iterator/projected.md]
+* ranges::equal_to[link /reference/functional/ranges_equal_to.md]
+* forward_range[link /reference/ranges/forward_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+* invoke[link /reference/functional/invoke.md]
+* begin[link /reference/ranges/begin.md]
+* end[link /reference/ranges/end.md]
+* ref[link /reference/functional/ref.md]
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_equal.html"/>
      <id>9bc833141edeb7a6acda64a8c65cc2e7c36136ee:reference/algorithm/ranges_equal.md</id>
      <updated>2022-01-08T12:00:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_equal.md b/reference/algorithm/ranges_equal.md
index bf491598e..06dd47a12 100644
--- a/reference/algorithm/ranges_equal.md
+++ b/reference/algorithm/ranges_equal.md
@@ -15,17 +15,17 @@ namespace std::ranges {
   constexpr bool equal(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2, Pred pred = {}, Proj1 proj1 = {}, Proj2 proj2 = {});
 }
 ```
-- input_iterator[link /reference/iterator/input_iterator.md]
-- sentinel_for[link /reference/iterator/sentinel_for.md]
-- ranges::equal_to[link /reference/functional/ranges_equal_to.md]
-- identity[link /reference/functional/identity.md]
-- indirectly_comparable[link /reference/iterator/indirectly_comparable.md]
-- input_range[link /reference/ranges/input_range.md]
-- iterator_t[link /reference/ranges/iterator_t.md]
-- invoke[link /reference/functional/invoke.md]
-- begin[link /reference/ranges/begin.md]
-- end[link /reference/ranges/end.md]
-- ref[link /reference/functional/ref.md]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* ranges::equal_to[link /reference/functional/ranges_equal_to.md]
+* identity[link /reference/functional/identity.md]
+* indirectly_comparable[link /reference/iterator/indirectly_comparable.md]
+* input_range[link /reference/ranges/input_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* invoke[link /reference/functional/invoke.md]
+* begin[link /reference/ranges/begin.md]
+* end[link /reference/ranges/end.md]
+* ref[link /reference/functional/ref.md]
 
 ## 概要
 2つの範囲を等値比較する。
@@ -97,19 +97,19 @@ struct equal_impl {
 
 inline constexpr equal_impl equal;
 ```
-- input_iterator[link /reference/iterator/input_iterator.md]
-- sentinel_for[link /reference/iterator/sentinel_for.md]
-- ranges::equal_to[link /reference/functional/ranges_equal_to.md]
-- identity[link /reference/functional/identity.md]
-- indirectly_comparable[link /reference/iterator/indirectly_comparable.md]
-- input_range[link /reference/ranges/input_range.md]
-- iterator_t[link /reference/ranges/iterator_t.md]
-- sized_sentinel_for[link /reference/iterator/sized_sentinel_for.md]
-- distance[link /reference/iterator/ranges_distance.md]
-- invoke[link /reference/functional/invoke.md]
-- begin[link /reference/ranges/begin.md]
-- end[link /reference/ranges/end.md]
-- ref[link /reference/functional/ref.md]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* ranges::equal_to[link /reference/functional/ranges_equal_to.md]
+* identity[link /reference/functional/identity.md]
+* indirectly_comparable[link /reference/iterator/indirectly_comparable.md]
+* input_range[link /reference/ranges/input_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* sized_sentinel_for[link /reference/iterator/sized_sentinel_for.md]
+* distance[link /reference/iterator/ranges_distance.md]
+* invoke[link /reference/functional/invoke.md]
+* begin[link /reference/ranges/begin.md]
+* end[link /reference/ranges/end.md]
+* ref[link /reference/functional/ref.md]
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_first_of -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_find_first_of.html"/>
      <id>9bc833141edeb7a6acda64a8c65cc2e7c36136ee:reference/algorithm/ranges_find_first_of.md</id>
      <updated>2022-01-08T12:00:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_find_first_of.md b/reference/algorithm/ranges_find_first_of.md
index 3c3f0c838..b8b5c40e5 100644
--- a/reference/algorithm/ranges_find_first_of.md
+++ b/reference/algorithm/ranges_find_first_of.md
@@ -15,16 +15,16 @@ namespace std::ranges {
   constexpr borrowed_iterator_t&amp;lt;R1&amp;gt; find_first_of(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2, Pred pred = {}, Proj1 proj1 = {}, Proj2 proj2 = {});
 }
 ```
-- input_iterator[link /reference/iterator/input_iterator.md]
-- forward_iterator[link /reference/iterator/forward_iterator.md]
-- sentinel_for[link /reference/iterator/sentinel_for.md]
-- ranges::equal_to[link /reference/functional/ranges_equal_to.md]
-- borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
-- iterator_t[link /reference/ranges/iterator_t.md]
-- identity[link /reference/functional/identity.md]
-- indirectly_comparable[link /reference/iterator/indirectly_comparable.md]
-- input_range[link /reference/ranges/input_range.md]
-- forward_range[link /reference/ranges/forward_range.md]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* forward_iterator[link /reference/iterator/forward_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* ranges::equal_to[link /reference/functional/ranges_equal_to.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* identity[link /reference/functional/identity.md]
+* indirectly_comparable[link /reference/iterator/indirectly_comparable.md]
+* input_range[link /reference/ranges/input_range.md]
+* forward_range[link /reference/ranges/forward_range.md]
 
 ## 概要
 ある集合の1つとマッチする最初の要素を検索する。
@@ -91,20 +91,20 @@ struct find_first_of_impl {
 
 inline constexpr find_first_of_impl find_first_of;
 ```
-- input_iterator[link /reference/iterator/input_iterator.md]
-- forward_iterator[link /reference/iterator/forward_iterator.md]
-- sentinel_for[link /reference/iterator/sentinel_for.md]
-- ranges::equal_to[link /reference/functional/ranges_equal_to.md]
-- borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
-- iterator_t[link /reference/ranges/iterator_t.md]
-- identity[link /reference/functional/identity.md]
-- indirectly_comparable[link /reference/iterator/indirectly_comparable.md]
-- input_range[link /reference/ranges/input_range.md]
-- forward_range[link /reference/ranges/forward_range.md]
-- invoke[link /reference/functional/invoke.md]
-- begin[link /reference/ranges/begin.md]
-- end[link /reference/ranges/end.md]
-- ref[link /reference/functional/ref.md]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* forward_iterator[link /reference/iterator/forward_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* ranges::equal_to[link /reference/functional/ranges_equal_to.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* identity[link /reference/functional/identity.md]
+* indirectly_comparable[link /reference/iterator/indirectly_comparable.md]
+* input_range[link /reference/ranges/input_range.md]
+* forward_range[link /reference/ranges/forward_range.md]
+* invoke[link /reference/functional/invoke.md]
+* begin[link /reference/ranges/begin.md]
+* end[link /reference/ranges/end.md]
+* ref[link /reference/functional/ref.md]
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mismatch -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_mismatch.html"/>
      <id>9bc833141edeb7a6acda64a8c65cc2e7c36136ee:reference/algorithm/ranges_mismatch.md</id>
      <updated>2022-01-08T12:00:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_mismatch.md b/reference/algorithm/ranges_mismatch.md
index 3ff9af144..3f7e70a58 100644
--- a/reference/algorithm/ranges_mismatch.md
+++ b/reference/algorithm/ranges_mismatch.md
@@ -18,20 +18,20 @@ namespace std::ranges {
   constexpr mismatch_result&amp;lt;borrowed_iterator_t&amp;lt;R1&amp;gt;, borrowed_iterator_t&amp;lt;R2&amp;gt;&amp;gt; mismatch(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2, Pred pred = {}, Proj1 proj1 = {}, Proj2 proj2 = {});    // (3)
 }
 ```
-- in_fun_result[link ranges_in_fun_result.md.nolink]
-- input_iterator[link /reference/iterator/input_iterator.md]
-- sentinel_for[link /reference/iterator/sentinel_for.md]
-- ranges::equal_to[link /reference/functional/ranges_equal_to.md]
-- identity[link /reference/functional/identity.md]
-- indirectly_comparable[link /reference/iterator/indirectly_comparable.md]
-- subrange[link /reference/ranges/subrange.md]
-- input_range[link /reference/ranges/input_range.md]
-- iterator_t[link /reference/ranges/iterator_t.md]
-- borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
-- invoke[link /reference/functional/invoke.md]
-- begin[link /reference/ranges/begin.md]
-- end[link /reference/ranges/end.md]
-- ref[link /reference/functional/ref.md]
+* in_fun_result[link ranges_in_fun_result.md.nolink]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* ranges::equal_to[link /reference/functional/ranges_equal_to.md]
+* identity[link /reference/functional/identity.md]
+* indirectly_comparable[link /reference/iterator/indirectly_comparable.md]
+* subrange[link /reference/ranges/subrange.md]
+* input_range[link /reference/ranges/input_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+* invoke[link /reference/functional/invoke.md]
+* begin[link /reference/ranges/begin.md]
+* end[link /reference/ranges/end.md]
+* ref[link /reference/functional/ref.md]
 
 
 ## 概要
@@ -126,20 +126,20 @@ struct mismatch_impl {
 
 inline constexpr mismatch_impl mismatch;
 ```
-- in_fun_result[link ranges_in_fun_result.md.nolink]
-- input_iterator[link /reference/iterator/input_iterator.md]
-- sentinel_for[link /reference/iterator/sentinel_for.md]
-- ranges::equal_to[link /reference/functional/ranges_equal_to.md]
-- identity[link /reference/functional/identity.md]
-- indirectly_comparable[link /reference/iterator/indirectly_comparable.md]
-- subrange[link /reference/ranges/subrange.md]
-- input_range[link /reference/ranges/input_range.md]
-- iterator_t[link /reference/ranges/iterator_t.md]
-- borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
-- invoke[link /reference/functional/invoke.md]
-- begin[link /reference/ranges/begin.md]
-- end[link /reference/ranges/end.md]
-- ref[link /reference/functional/ref.md]
+* in_fun_result[link ranges_in_fun_result.md.nolink]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* ranges::equal_to[link /reference/functional/ranges_equal_to.md]
+* identity[link /reference/functional/identity.md]
+* indirectly_comparable[link /reference/iterator/indirectly_comparable.md]
+* subrange[link /reference/ranges/subrange.md]
+* input_range[link /reference/ranges/input_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+* invoke[link /reference/functional/invoke.md]
+* begin[link /reference/ranges/begin.md]
+* end[link /reference/ranges/end.md]
+* ref[link /reference/functional/ref.md]
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>search -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_search.html"/>
      <id>9bc833141edeb7a6acda64a8c65cc2e7c36136ee:reference/algorithm/ranges_search.md</id>
      <updated>2022-01-08T12:00:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_search.md b/reference/algorithm/ranges_search.md
index 11fa1679f..c5fcd40e1 100644
--- a/reference/algorithm/ranges_search.md
+++ b/reference/algorithm/ranges_search.md
@@ -16,15 +16,15 @@ namespace std::ranges {
   constexpr borrowed_subrange_t&amp;lt;R1&amp;gt; search(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2, Pred pred = {}, Proj1 proj1 = {}, Proj2 proj2 = {});              // (2)
 }
 ```
-- forward_iterator[link /reference/iterator/forward_iterator.md]
-- sentinel_for[link /reference/iterator/sentinel_for.md]
-- ranges::equal_to[link /reference/functional/ranges_equal_to.md]
-- identity[link /reference/functional/identity.md]
-- indirectly_comparable[link /reference/iterator/indirectly_comparable.md]
-- subrange[link /reference/ranges/subrange.md]
-- forward_range[link /reference/ranges/forward_range.md]
-- iterator_t[link /reference/ranges/iterator_t.md]
-- borrowed_subrange_t[link /reference/ranges/borrowed_subrange_t.md]
+* forward_iterator[link /reference/iterator/forward_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* ranges::equal_to[link /reference/functional/ranges_equal_to.md]
+* identity[link /reference/functional/identity.md]
+* indirectly_comparable[link /reference/iterator/indirectly_comparable.md]
+* subrange[link /reference/ranges/subrange.md]
+* forward_range[link /reference/ranges/forward_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* borrowed_subrange_t[link /reference/ranges/borrowed_subrange_t.md]
 
 ## 概要
 あるシーケンスの中から、特定のサブシーケンスを探す
@@ -96,19 +96,19 @@ struct search_impl {
 
 inline constexpr search_impl search;
 ```
-- forward_iterator[link /reference/iterator/forward_iterator.md]
-- sentinel_for[link /reference/iterator/sentinel_for.md]
-- ranges::equal_to[link /reference/functional/ranges_equal_to.md]
-- identity[link /reference/functional/identity.md]
-- indirectly_comparable[link /reference/iterator/indirectly_comparable.md]
-- subrange[link /reference/ranges/subrange.md]
-- forward_range[link /reference/ranges/forward_range.md]
-- iterator_t[link /reference/ranges/iterator_t.md]
-- borrowed_subrange_t[link /reference/ranges/borrowed_subrange_t.md]
-- invoke[link /reference/functional/invoke.md]
-- begin[link /reference/ranges/begin.md]
-- end[link /reference/ranges/end.md]
-- ref[link /reference/functional/ref.md]
+* forward_iterator[link /reference/iterator/forward_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* ranges::equal_to[link /reference/functional/ranges_equal_to.md]
+* identity[link /reference/functional/identity.md]
+* indirectly_comparable[link /reference/iterator/indirectly_comparable.md]
+* subrange[link /reference/ranges/subrange.md]
+* forward_range[link /reference/ranges/forward_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* borrowed_subrange_t[link /reference/ranges/borrowed_subrange_t.md]
+* invoke[link /reference/functional/invoke.md]
+* begin[link /reference/ranges/begin.md]
+* end[link /reference/ranges/end.md]
+* ref[link /reference/functional/ref.md]
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>search_n -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_search_n.html"/>
      <id>9bc833141edeb7a6acda64a8c65cc2e7c36136ee:reference/algorithm/ranges_search_n.md</id>
      <updated>2022-01-08T12:00:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_search_n.md b/reference/algorithm/ranges_search_n.md
index 51769626c..60dbcc95f 100644
--- a/reference/algorithm/ranges_search_n.md
+++ b/reference/algorithm/ranges_search_n.md
@@ -15,16 +15,16 @@ namespace std::ranges {]
   constexpr borrowed_subrange_t&amp;lt;R&amp;gt; search_n(R&amp;amp;&amp;amp; r, range_difference_t&amp;lt;R&amp;gt; count, const T&amp;amp; value, Pred pred = {}, Proj proj = {});
 }
 ```
-- forward_iterator[link /reference/iterator/forward_iterator.md]
-- sentinel_for[link /reference/iterator/sentinel_for.md]
-- ranges::equal_to[link /reference/functional/ranges_equal_to.md]
-- identity[link /reference/functional/identity.md]
-- indirectly_comparable[link /reference/iterator/indirectly_comparable.md]
-- iter_difference_t[link /reference/iterator/iter_difference_t.md]
-- subrange[link /reference/ranges/subrange.md]
-- forward_range[link /reference/ranges/forward_range.md]
-- iterator_t[link /reference/ranges/iterator_t.md]
-- borrowed_subrange_t[link /reference/ranges/borrowed_subrange_t.md]
+* forward_iterator[link /reference/iterator/forward_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* ranges::equal_to[link /reference/functional/ranges_equal_to.md]
+* identity[link /reference/functional/identity.md]
+* indirectly_comparable[link /reference/iterator/indirectly_comparable.md]
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
+* subrange[link /reference/ranges/subrange.md]
+* forward_range[link /reference/ranges/forward_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* borrowed_subrange_t[link /reference/ranges/borrowed_subrange_t.md]
 
 
 ## 概要
@@ -114,20 +114,20 @@ struct search_n_impl {
 
 inline constexpr search_n_impl search_n;
 ```
-- forward_iterator[link /reference/iterator/forward_iterator.md]
-- sentinel_for[link /reference/iterator/sentinel_for.md]
-- ranges::equal_to[link /reference/functional/ranges_equal_to.md]
-- identity[link /reference/functional/identity.md]
-- indirectly_comparable[link /reference/iterator/indirectly_comparable.md]
-- iter_difference_t[link /reference/iterator/iter_difference_t.md]
-- subrange[link /reference/ranges/subrange.md]
-- forward_range[link /reference/ranges/forward_range.md]
-- iterator_t[link /reference/ranges/iterator_t.md]
-- borrowed_subrange_t[link /reference/ranges/borrowed_subrange_t.md]
-- invoke[link /reference/functional/invoke.md]
-- begin[link /reference/ranges/begin.md]
-- end[link /reference/ranges/end.md]
-- ref[link /reference/functional/ref.md]
+* forward_iterator[link /reference/iterator/forward_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* ranges::equal_to[link /reference/functional/ranges_equal_to.md]
+* identity[link /reference/functional/identity.md]
+* indirectly_comparable[link /reference/iterator/indirectly_comparable.md]
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
+* subrange[link /reference/ranges/subrange.md]
+* forward_range[link /reference/ranges/forward_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* borrowed_subrange_t[link /reference/ranges/borrowed_subrange_t.md]
+* invoke[link /reference/functional/invoke.md]
+* begin[link /reference/ranges/begin.md]
+* end[link /reference/ranges/end.md]
+* ref[link /reference/functional/ref.md]
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator/ -- chrono/month/op_append: リンク付与, 微調整</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month/op_append.html"/>
      <id>a595b0f859327c029153746733b8ff03df088022:reference/chrono/month/op_append.md</id>
      <updated>2022-01-06T10:02:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month/op_append.md b/reference/chrono/month/op_append.md
index 163d77105..8ef66076c 100644
--- a/reference/chrono/month/op_append.md
+++ b/reference/chrono/month/op_append.md
@@ -33,6 +33,7 @@ namespace std::chrono {
 * month_day[link /reference/chrono/month_day.md]
 * last_spec[link /reference/chrono/last_spec.md]
 * month_day_last[link /reference/chrono/month_day_last.md]
+* month_weekday[link /reference/chrono/month_weekday.md]
 * weekday_indexed[link /reference/chrono/weekday_indexed.md]
 * weekday_last[link /reference/chrono/weekday_last.md]
 * month_weekday_last[link /reference/chrono/month_weekday_last.md]
@@ -55,7 +56,7 @@ namespace std::chrono {
 - (1) : `return {m, d};`
 - (2) : `return m /` [`day`](/reference/chrono/day.md)`{d};`
 - (3) : `return` [`month`](/reference/chrono/month.md)`{m} / d;`
-- (4) : `return `[`month_day_last`](/reference/chrono/month_day_last.md)`{m};`
+- (4) : `return` [`month_day_last`](/reference/chrono/month_day_last.md)`{m};`
 - (5) : `return` [`month`](/reference/chrono/month.md)`{m} /` [`last`](/reference/chrono/last_spec.md)`;`
 - (6) : `return {m, wdi};`
 - (7) : `return` [`month`](/reference/chrono/month.md)`{m} / wdi;`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>dangling -- Update dangling.md</title>
      <link href="https://cpprefjp.github.io/reference/ranges/dangling.html"/>
      <id>eda7632ac7db82ab8a061cd15aa0772afad030d9:reference/ranges/dangling.md</id>
      <updated>2021-12-31T16:19:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/dangling.md b/reference/ranges/dangling.md
index 34ef12c01..907a723b1 100644
--- a/reference/ranges/dangling.md
+++ b/reference/ranges/dangling.md
@@ -19,7 +19,9 @@ namespace std::ranges {
 
 `dangling`は、イテレータまたはRangeがダングリングであることを示す型である。
 
-この型のオブジェクトは、イテレータまたはRangeを返す関数において、戻り値のイテレータやRangeがダングリングとなる場合に代わりに返される。
+この型のオブジェクトは、イテレータまたはRangeを返す関数において、戻り値のイテレータやRangeがダングリングとなる場合に代わりに返される(逆は成立しない)。
+
+`dangling`自身はイテレータでもRangeでもないため、呼び出し側でそれらを期待したコードを書いていればコンパイルエラーとなる。その結果、ダングリングイテレータ/Rangeにアクセスするというエラーをコンパイル時に発見することができる。
 
 ## メンバ関数
 ### 構築・破棄
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>search -- サンプルコードの色を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_search.html"/>
      <id>9235c5656eb04f01581c9b8e12e21dd69ed68c07:reference/algorithm/ranges_search.md</id>
      <updated>2021-12-31T15:54:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_search.md b/reference/algorithm/ranges_search.md
index 05d51acd9..11fa1679f 100644
--- a/reference/algorithm/ranges_search.md
+++ b/reference/algorithm/ranges_search.md
@@ -60,7 +60,7 @@ int main() {
   }
 }
 ```
-* std::search[color ff0000]
+* std::ranges::search[color ff0000]
 
 #### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>search_n -- サンプルコードの色を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_search_n.html"/>
      <id>9235c5656eb04f01581c9b8e12e21dd69ed68c07:reference/algorithm/ranges_search_n.md</id>
      <updated>2021-12-31T15:54:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_search_n.md b/reference/algorithm/ranges_search_n.md
index 72dd0b3e6..51769626c 100644
--- a/reference/algorithm/ranges_search_n.md
+++ b/reference/algorithm/ranges_search_n.md
@@ -68,7 +68,7 @@ int main() {
   }
 }
 ```
-* std::search_n[color ff0000]
+* std::ranges::search_n[color ff0000]
 * v.begin()[link /reference/vector/vector/begin.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-04-28T12:08:27.097264</updated>
  <id>a63ac28b-f5b4-41b7-9c90-6f871708c877</id>

  
    <entry>
      <title>formatter -- エスケープできなかったので、ドットを削除</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter.html"/>
      <id>02edaa738b274396727c9a03033e145e289c957f:reference/format/formatter.md</id>
      <updated>2020-04-28T21:04:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter.md b/reference/format/formatter.md
index 9049e502e..337690122 100644
--- a/reference/format/formatter.md
+++ b/reference/format/formatter.md
@@ -17,7 +17,7 @@ namespace std {
 
 `charT`を`char`または`wchar_t`とすると、標準で以下の特殊化が利用できる。
 
-- \1. 以下のもの。
+- 1 以下のもの。
     ```cpp
     template&amp;lt;&amp;gt; struct formatter&amp;lt;charT, charT&amp;gt;;
 
@@ -38,7 +38,7 @@ namespace std {
     * basic_string[link /reference/string/basic_string.md]
     * basic_string_view[link /reference/string_view/basic_string_view.md]
 
-- \2. 第1テンプレート引数が`nullptr_t`, `void*`, `const void*`, `bool`, すべてのCV修飾されない標準の整数型, 拡張整数型, 浮動小数点数型であり、第2テンプレート引数が`charT`であるもの。
+- 2 第1テンプレート引数が`nullptr_t`, `void*`, `const void*`, `bool`, すべてのCV修飾されない標準の整数型, 拡張整数型, 浮動小数点数型であり、第2テンプレート引数が`charT`であるもの。
 
 さらに、ユーザーが`formatter`を特殊化した場合、それも有効である。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- 番号付き箇条書きはエスケープできるのかな</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter.html"/>
      <id>43bdcdaab30909a61518b414f4109d0d36f415b7:reference/format/formatter.md</id>
      <updated>2020-04-28T20:52:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter.md b/reference/format/formatter.md
index 9441b3b1a..9049e502e 100644
--- a/reference/format/formatter.md
+++ b/reference/format/formatter.md
@@ -17,7 +17,7 @@ namespace std {
 
 `charT`を`char`または`wchar_t`とすると、標準で以下の特殊化が利用できる。
 
-- 1. 以下のもの。
+- \1. 以下のもの。
     ```cpp
     template&amp;lt;&amp;gt; struct formatter&amp;lt;charT, charT&amp;gt;;
 
@@ -38,7 +38,7 @@ namespace std {
     * basic_string[link /reference/string/basic_string.md]
     * basic_string_view[link /reference/string_view/basic_string_view.md]
 
-- 2. 第1テンプレート引数が`nullptr_t`, `void*`, `const void*`, `bool`, すべてのCV修飾されない標準の整数型, 拡張整数型, 浮動小数点数型であり、第2テンプレート引数が`charT`であるもの。
+- \2. 第1テンプレート引数が`nullptr_t`, `void*`, `const void*`, `bool`, すべてのCV修飾されない標準の整数型, 拡張整数型, 浮動小数点数型であり、第2テンプレート引数が`charT`であるもの。
 
 さらに、ユーザーが`formatter`を特殊化した場合、それも有効である。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- formatter : デフォルトテンプレート引数を追加</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter.html"/>
      <id>b0f0c29ae2b6ee8c017b8b63d525e4e690f47011:reference/format/formatter.md</id>
      <updated>2020-04-28T20:47:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter.md b/reference/format/formatter.md
index 73ffdace4..9441b3b1a 100644
--- a/reference/format/formatter.md
+++ b/reference/format/formatter.md
@@ -7,7 +7,7 @@
 
 ```cpp
 namespace std {
-  template&amp;lt;class T, class U&amp;gt;
+  template&amp;lt;class T, class U = char&amp;gt;
   struct formatter;
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- formatter : 説明を整理。見た目崩れを修正</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter.html"/>
      <id>04d2a5cdfb5c14db17a00b7a7a7e922c0ce563ed:reference/format/formatter.md</id>
      <updated>2020-04-28T20:42:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter.md b/reference/format/formatter.md
index 0a4716c16..73ffdace4 100644
--- a/reference/format/formatter.md
+++ b/reference/format/formatter.md
@@ -15,30 +15,30 @@ namespace std {
 ## 概要
 フォーマット引数の個々の型に対応する書式文字列の解析と値のフォーマットを担うクラス。
 
-`charT`を`char`または`wchar_t`とすると、標準で次の特殊化が有効である。
+`charT`を`char`または`wchar_t`とすると、標準で以下の特殊化が利用できる。
 
-1. 以下のもの。
-```cpp
-template&amp;lt;&amp;gt; struct formatter&amp;lt;charT, charT&amp;gt;;
+- 1. 以下のもの。
+    ```cpp
+    template&amp;lt;&amp;gt; struct formatter&amp;lt;charT, charT&amp;gt;;
 
-template&amp;lt;&amp;gt; struct formatter&amp;lt;char, wchar_t&amp;gt;;
+    template&amp;lt;&amp;gt; struct formatter&amp;lt;char, wchar_t&amp;gt;;
 
-template&amp;lt;&amp;gt; struct formatter&amp;lt;charT*, charT&amp;gt;;
+    template&amp;lt;&amp;gt; struct formatter&amp;lt;charT*, charT&amp;gt;;
 
-template&amp;lt;&amp;gt; struct formatter&amp;lt;const charT*, charT&amp;gt;;
+    template&amp;lt;&amp;gt; struct formatter&amp;lt;const charT*, charT&amp;gt;;
 
-template&amp;lt;size_t N&amp;gt; struct formatter&amp;lt;const charT[N], charT&amp;gt;;
+    template&amp;lt;size_t N&amp;gt; struct formatter&amp;lt;const charT[N], charT&amp;gt;;
 
-template&amp;lt;class traits, class Allocator&amp;gt;
-struct formatter&amp;lt;basic_string&amp;lt;charT, traits, Allocator&amp;gt;, charT&amp;gt;;
+    template&amp;lt;class traits, class Allocator&amp;gt;
+    struct formatter&amp;lt;basic_string&amp;lt;charT, traits, Allocator&amp;gt;, charT&amp;gt;;
 
-template&amp;lt;class traits&amp;gt;
-struct formatter&amp;lt;basic_string_view&amp;lt;charT, traits&amp;gt;, charT&amp;gt;;
-```
-* basic_string[link /reference/string/basic_string.md]
-* basic_string_view[link /reference/string_view/basic_string_view.md]
+    template&amp;lt;class traits&amp;gt;
+    struct formatter&amp;lt;basic_string_view&amp;lt;charT, traits&amp;gt;, charT&amp;gt;;
+    ```
+    * basic_string[link /reference/string/basic_string.md]
+    * basic_string_view[link /reference/string_view/basic_string_view.md]
 
-2. 第1テンプレート引数が`nullptr_t`, `void*`, `const void*`, `bool`, すべてのCV修飾されない標準の整数型, 拡張整数型, 浮動小数点数型であり、第2テンプレート引数が`charT`であるもの。
+- 2. 第1テンプレート引数が`nullptr_t`, `void*`, `const void*`, `bool`, すべてのCV修飾されない標準の整数型, 拡張整数型, 浮動小数点数型であり、第2テンプレート引数が`charT`であるもの。
 
 さらに、ユーザーが`formatter`を特殊化した場合、それも有効である。
 
@@ -54,7 +54,7 @@ struct formatter&amp;lt;basic_string_view&amp;lt;charT, traits&amp;gt;, charT&amp;gt;;
 
 * `F`は`Cpp17DefaultConstructible`、`Cpp17CopyConstructible`、`Cpp17CopyAssignable`、`Cpp17Destructible`であること (注: ここはC++20の策定までにコンセプトで書き換えられるかもしれない)
 
-さらに、
+さらに、以下の条件を満たすこと
 
 1. 式 `f.parse(pc)` が有効であり、
     * 戻り値の型が`PC::iterator`である
@@ -69,7 +69,7 @@ struct formatter&amp;lt;basic_string_view&amp;lt;charT, traits&amp;gt;, charT&amp;gt;;
     * 出力は`t`、グローバルロケール、最後に呼び出された`f.parse(pc)`の`[pc.begin(), pc.end())`の範囲以外に依存しない
     * `u`を変更しない
 
-ただし、
+条件内の各要素を、以下のように定義する
 
 * 文字の型を`charT`
 * 出力イテレーターの型を`Out`
@@ -84,8 +84,6 @@ struct formatter&amp;lt;basic_string_view&amp;lt;charT, traits&amp;gt;, charT&amp;gt;;
 * `pc.begin()`は書式文字列中の対応する置換フィールドのオプションの先頭を指す
 * オプションが空なら、`pc.begin() == pc.end()`または`*pc.begin() == &amp;#39;}&amp;#39;`である
 
-とする。
-
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>jthread -- thread/jthread.md リンクを修正</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread.html"/>
      <id>d54c4fe2af2102af27612203043664ad3a9e4485:reference/thread/jthread.md</id>
      <updated>2020-04-26T21:08:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread.md b/reference/thread/jthread.md
index 8672840b6..92d54a113 100644
--- a/reference/thread/jthread.md
+++ b/reference/thread/jthread.md
@@ -91,7 +91,7 @@ int main()
 * std::jthread[link jthread.md]
 * std::stop_token[link /reference/stop_token/stop_token.md]
 * std::stop_callback[link /reference/stop_token/stop_callback.md]
-* get_stop_token()[link jthread/get_stop_token.md]
+* get_stop_token()[link jthread/get_stop_token.md.nolink]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>hotwatermorning</name>
        <email>hotwatermorning@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-08-29T13:11:14.604284</updated>
  <id>8a762a13-ea82-4a7b-aa71-b6ed0c0ee0e9</id>

  
    <entry>
      <title>filter_view -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view.md b/reference/ranges/filter_view.md
index ff09dcee7..f89fc8ae7 100644
--- a/reference/ranges/filter_view.md
+++ b/reference/ranges/filter_view.md
@@ -15,12 +15,6 @@ namespace std::ranges {
   }
 }
 ```
-* input_range[link input_range.md]
-* indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
-* iterator_t[link iterator_t.md]
-* view[link view.md]
-* is_object_v[link /reference/type_traits/is_object.md]
-* view_interface[link view_interface.md]
 
 ## 概要
 - (1): 指定された条件`Pred`を満たす要素だけが要素となる[`view`](view.md)
@@ -28,8 +22,9 @@ namespace std::ranges {
 
 元のRangeから条件を満たす要素を探す処理は遅延評価される。
 
-- 初めてメンバ関数[`begin`](filter_view/begin.md.nolink)が呼び出されたときに先頭の要素を決定し、残りはイテレータが進むときに求める。
-- [`begin`](filter_view/begin.md.nolink)は償却定数時間で実行できなければならないため、[`begin`](filter_view/begin.md.nolink)の値はキャッシュされる。
+- 初めてメンバ関数[`begin`](filter_view/begin.md)が呼び出されたときに先頭の要素を決定し、残りはイテレータが進むときに求める。
+    - 探索は [`ranges::find_if`](/reference/algorithm/ranges_find_if.md) と同様に行われる。
+- [`begin`](filter_view/begin.md)は償却定数時間で実行できなければならないため、[`begin`](filter_view/begin.md)の値はキャッシュされる。
 
 `filter_view`の要素を書き換えてもよいが、書き換えた後の要素が`Pred`を満たさない場合は未定義動作となる。
 
@@ -53,33 +48,48 @@ namespace std::ranges {
 
 ## 効果
 
-- (2): 式`views::filter(E, P)`の効果は`filter_view(E, P)`と等しい
+- (2): 式`views::filter(E, P)`の効果は[`filter_view`](filter_view/op_constructor.md)`(E, P)`と等しい
+
+## メンバ変数
+
+| 名前                                            | 説明                               | 対応バージョン        |
+|-------------------------------------------------|------------------------------------|-----------------------|
+| `V base_ = V()`                                 | 元の[`view`](view.md) (説明専用)   | C++20                 |
+| [`copyable-box`](copyable_box.md)`&amp;lt;Pred&amp;gt; pred_` | 述語 (説明専用)                    | C++20&amp;lt;br/&amp;gt;C++23で削除 |
+| [`movable-box`](movable_box.md)`&amp;lt;Pred&amp;gt; pred_`   | 述語 (説明専用)                    | C++23                 |
 
 ## メンバ関数
 
 | 名前                                             | 説明                             | 対応バージョン |
 |--------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](filter_view/op_constructor.md.nolink)  | コンストラクタ                   | C++20          |
-| [`base`](filter_view/base.md.nolink)                     | `V`の参照を取得する              | C++20          |
-| [`pred`](filter_view/pred.md.nolink)                     | 述語を取得する                   | C++20          |
-| [`begin`](filter_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
-| [`end`](filter_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
+| [`(constructor)`](filter_view/op_constructor.md) | コンストラクタ                   | C++20          |
+| [`base`](filter_view/base.md)                    | `V`の参照を取得する              | C++20          |
+| [`pred`](filter_view/pred.md)                    | 述語を取得する                   | C++20          |
+| [`begin`](filter_view/begin.md)                  | 先頭を指すイテレータを取得する   | C++20          |
+| [`end`](filter_view/end.md)                      | 番兵を取得する                   | C++20          |
 
 ## 継承しているメンバ関数
 
-| 名前                                         | 説明                             | 対応バージョン |
-|----------------------------------------------|----------------------------------|----------------|
+| 名前                                         | 説明                              | 対応バージョン |
+|----------------------------------------------|-----------------------------------|----------------|
 | [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++20          |
-| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する       | C++20          |
-| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する       | C++20          |
-| [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する             | C++23          |
-| [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する      | C++23          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
+| [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する          | C++23          |
+| [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する  | C++23          |
+
+## メンバ型
+
+| 名前                                      | 説明                         | 対応バージョン |
+|-------------------------------------------|------------------------------|----------------|
+| [`iterator`](filter_view/iterator.md)     | イテレータ型(説明専用)       | C++20          |
+| [`sentinel`](filter_view/sentinel.md)     | 番兵型(説明専用)             | C++20          |
 
 ## 推論補助
 
-| 名前                                                  | 説明                         | 対応バージョン |
-|-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](filter_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+| 名前                                                     | 説明                         | 対応バージョン |
+|----------------------------------------------------------|------------------------------|----------------|
+| [`(deduction_guide)`](filter_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++20          |
 
 ## 例
 ```cpp example
@@ -119,6 +129,6 @@ int main() {
 - [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
 
 ## 参照
-- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
 - [C++20 ranges](https://techbookfest.org/product/5134506308665344)
 - [P2367R0 Remove misuses of list-initialization from Clause 24](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2367r0.html) (本提案文書はC++20に遡って適用されている)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/base.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/base.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/base.md b/reference/ranges/filter_view/base.md
new file mode 100644
index 000000000..d9f3dac03
--- /dev/null
+++ b/reference/ranges/filter_view/base.md
@@ -0,0 +1,70 @@
+# base
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr V base() const &amp;amp; requires copy_constructible&amp;lt;V&amp;gt;;  // (1)
+constexpr V base() &amp;amp;&amp;amp;;                                      // (2)
+```
+
+## 概要
+
+メンバ変数として保持している、元の`view`を取得する。
+
+## 効果
+
+入力`view`（`V`）のオブジェクトを`base_`というメンバに保持するとして
+
+- (1) : `return base_;` と等しい
+- (2) : `return std::move(base_);` と等しい
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using std::ranges::view;
+
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+
+  std::ranges::filter_view fv{vec, [](int i) { return i % 2 == 0; }};
+
+  // (1) コピーして取得
+  view auto b1 = fv.base();
+
+  // (2) ムーブして取得
+  view auto b2 = std::move(fv).base();
+
+  // 得られるのは元のRangeではなく、あくまでview
+  static_assert(not std::same_as&amp;lt;decltype(b1), std::vector&amp;lt;int&amp;gt;&amp;gt;);
+  static_assert(    std::same_as&amp;lt;decltype(b1), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+  static_assert(    std::same_as&amp;lt;decltype(b2), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+}
+```
+* base[color ff0000]
+* filter_view[link ../filter_view.md]
+
+### 出力
+
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/begin.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/begin.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/begin.md b/reference/ranges/filter_view/begin.md
new file mode 100644
index 000000000..b632457e5
--- /dev/null
+++ b/reference/ranges/filter_view/begin.md
@@ -0,0 +1,65 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr iterator begin();
+```
+* iterator[link iterator.md]
+
+## 概要
+
+`view`の先頭要素を指すイテレータを取得する。
+
+## 事前条件
+
+`pred_.`[`has_value`](/reference/optional/optional/has_value.md)`()`が`true`であること。
+
+## 戻り値
+
+`{*this, `[`ranges​::​find_if`](/reference/algorithm/ranges_find_if.md)`(base_, `[`ref`](/reference/functional/ref.md)`(*pred_))}`
+
+[`range`](../range.md)のモデルとなるためにはこの関数が償却定数時間で実行できなければならないため、値はキャッシュされる。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+
+  std::ranges::filter_view fv{vec, [](int i) { return i % 2 == 0; }};
+
+  auto it = fv.begin();
+
+  std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* begin[color ff0000]
+* filter_view[link ../filter_view.md]
+
+### 出力
+
+```
+2
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/end.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/end.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/end.md b/reference/ranges/filter_view/end.md
new file mode 100644
index 000000000..bbb68419e
--- /dev/null
+++ b/reference/ranges/filter_view/end.md
@@ -0,0 +1,64 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto end() {
+  if constexpr (common_range&amp;lt;V&amp;gt;)
+    return iterator{*this, ranges::end(base_)};
+  else
+    return sentinel{*this};
+}
+```
+* ranges::end[link ../end.md]
+* iterator[link iterator.md]
+* sentinel[link sentinel.md]
+
+## 概要
+
+番兵を取得する。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+
+  std::ranges::filter_view fv{vec, [](int i) { return i % 2 == 0; }};
+
+  auto e = fv.end();
+
+  --e;
+
+  std::cout &amp;lt;&amp;lt; *e &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* end[color ff0000]
+* filter_view[link ../filter_view.md]
+
+### 出力
+
+```
+4
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iterator -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/iterator.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/iterator.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/iterator.md b/reference/ranges/filter_view/iterator.md
new file mode 100644
index 000000000..80f79e151
--- /dev/null
+++ b/reference/ranges/filter_view/iterator.md
@@ -0,0 +1,80 @@
+# iterator
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view[meta class]
+* class template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;input_range V, indirect_unary_predicate&amp;lt;iterator_t&amp;lt;V&amp;gt;&amp;gt; Pred&amp;gt;
+    requires view&amp;lt;V&amp;gt; &amp;amp;&amp;amp; is_object_v&amp;lt;Pred&amp;gt;
+  class filter_view&amp;lt;V, Pred&amp;gt;::iterator { …… };
+}
+```
+* filter_view[link ../filter_view.md]
+
+## 概要
+
+[`filter_view`](../filter_view.md)のイテレータ。
+
+このクラスの名前は規定されておらず、振る舞いのみが規定されている。
+
+このクラスの型を取得したい場合、[`iterator_t`](../iterator_t.md)を使用できる。
+
+このイテレータを通じて値を書き換える場合、その結果が述語の条件を満たさない場合は未定義動作となる。
+
+## メンバ変数
+
+| 名前                                                               | 説明                       | 対応バージョン |
+|--------------------------------------------------------------------|----------------------------|----------------|
+| [`iterator_t`](../iterator_t.md)`&amp;lt;V&amp;gt; current_ = iterator_t&amp;lt;V&amp;gt;();`  | 元のイテレータ(説明専用)   | C++20          |
+| [`filter_view`](../filter_view.md)`* parent_ = nullptr;`           | 参照先のRange(説明専用)    | C++20          |
+
+## メンバ関数
+
+| 名前                                           | 説明                           | 対応バージョン |
+|------------------------------------------------|--------------------------------|----------------|
+| [`(constructor)`](iterator/op_constructor.md)  | コンストラクタ                 | C++20          |
+| [`base`](iterator/base.md)                     | 元のイテレータを取得する       | C++20          |
+| [`operator*`](iterator/op_deref.md)            | 間接参照演算子                 | C++20          |
+| [`operator-&amp;gt;`](iterator/op_arrow.md)           | メンバアクセス演算子           | C++20          |
+| [`operator++`](iterator/op_increment.md)       | イテレータをインクリメントする | C++20          |
+| [`operator--`](iterator/op_decrement.md)       | イテレータをデクリメントする   | C++20          |
+
+## メンバ型
+
+| 名前                                                 | 説明                                                     | 対応バージョン |
+|------------------------------------------------------|----------------------------------------------------------|----------------|
+| [`iterator_concept`](iterator/iterator_concept.md.nolink)   | イテレータコンセプト                                     | C++20          |
+| [`iterator_category`](iterator/iterator_category.md.nolink) | イテレータカテゴリ                                       | C++20          |
+| `value_type`                                         | [`range_value_t&amp;lt;V&amp;gt;`](../range_value_t.md)                | C++20          |
+| `difference_type`                                    | [`range_difference_t&amp;lt;V&amp;gt;`](../range_difference_t.md)      | C++20          |
+
+## 非メンバ（*Hidden friends*）関数
+
+| 名前                                     | 説明                   | 対応バージョン |
+|------------------------------------------|------------------------|----------------|
+| [`iter_move`](iterator/iter_move.md.nolink)     | イテレータの要素の移動 | C++20          |
+| [`iter_swap`](iterator/iter_swap.md.nolink)     | イテレータの要素の交換 | C++20          |
+
+### 比較演算子
+
+| 名前                                 | 説明                            | 対応バージョン |
+|--------------------------------------|---------------------------------|----------------|
+| [`operator==`](iterator/op_equal.md) | 等値比較                        | C++20          |
+| `operator!=`                         | 非等値比較 (`==`により使用可能) | C++20          |
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/iterator/base.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/iterator/base.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/iterator/base.md b/reference/ranges/filter_view/iterator/base.md
new file mode 100644
index 000000000..1843f5f45
--- /dev/null
+++ b/reference/ranges/filter_view/iterator/base.md
@@ -0,0 +1,68 @@
+# base
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view::iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr const iterator_t&amp;lt;V&amp;gt; base() const &amp;amp; noexcept;  // (1)
+constexpr iterator_t&amp;lt;V&amp;gt; base() &amp;amp;&amp;amp;;                      // (2)
+```
+
+## 概要
+
+元の`view`のイテレータを取得する。
+
+## 効果
+
+入力`view`（`V`）のイテレータを`current_`というメンバに保持するとして
+
+- (1) : `return current_;` と等しい
+- (2) : `return std::move(current_);` と等しい
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using std::ranges::view;
+
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+
+  std::ranges::filter_view fv{vec, [](int i) { return i % 2 == 0; }};
+  auto itr = fv.begin();
+
+  // (1) コピーして取得
+  auto b1 = itr.base();
+
+  // (2) ムーブして取得
+  auto b2 = std::move(itr).base();
+
+  static_assert(std::same_as&amp;lt;decltype(b1), std::vector&amp;lt;int&amp;gt;::iterator&amp;gt;);
+  static_assert(std::same_as&amp;lt;decltype(b2), std::vector&amp;lt;int&amp;gt;::iterator&amp;gt;);
+}
+```
+* base[color ff0000]
+
+### 出力
+
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator-&gt; -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/iterator/op_arrow.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/iterator/op_arrow.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/iterator/op_arrow.md b/reference/ranges/filter_view/iterator/op_arrow.md
new file mode 100644
index 000000000..9fce302f7
--- /dev/null
+++ b/reference/ranges/filter_view/iterator/op_arrow.md
@@ -0,0 +1,37 @@
+# operator-&amp;gt;
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view::iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr iterator_t&amp;lt;V&amp;gt; operator-&amp;gt;() const requires has-arrow&amp;lt;iterator_t&amp;lt;V&amp;gt;&amp;gt; &amp;amp;&amp;amp; copyable&amp;lt;iterator_t&amp;lt;V&amp;gt;&amp;gt;;
+```
+* copyable[link /reference/concepts/copyable.md]
+
+## 概要
+
+イテレータを通じてオブジェクトにアクセスする。
+
+## テンプレートパラメータ制約
+
+元のイテレータがコピー可能であり、アロー演算子を持つこと。
+
+## 効果
+
+`return current_;` と等しい
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/iterator/op_constructor.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/iterator/op_constructor.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/iterator/op_constructor.md b/reference/ranges/filter_view/iterator/op_constructor.md
new file mode 100644
index 000000000..1a84cc040
--- /dev/null
+++ b/reference/ranges/filter_view/iterator/op_constructor.md
@@ -0,0 +1,66 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view::iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+iterator() requires default_initializable&amp;lt;iterator_t&amp;lt;V&amp;gt;&amp;gt; = default;    // (1)
+
+constexpr iterator(filter_view&amp;amp; parent, iterator_t&amp;lt;V&amp;gt; current);        // (2)
+```
+
+## 概要
+
+[`filter_view::iterator`](../iterator.md)オブジェクトを構築する。
+
+## 効果
+
+- (1) : `current_`、`parent_`をデフォルト構築する
+- (2) : `current_`を`std::move(current_)`で、`parent_`を[`addressof`](/reference/memory/addressof.md)`(parent_)`で初期化する
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  using std::ranges::filter_view;
+  using std::ranges::iterator_t;
+
+  std::vector&amp;lt;int&amp;gt; vec = {0, 1, 2, 3, 4, 5};
+
+  filter_view fv{vec, [](int x){ return x % 2 == 0; }};
+
+  iterator_t&amp;lt;filter_view&amp;gt; i(fv, vec.begin());
+
+  std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; `\n`;
+  i++;
+  std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; `\n`;
+  i++;
+  std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; `\n`;
+}
+```
+* iterator_t&amp;lt;filter_view&amp;gt;[color ff0000]
+
+### 出力
+```
+0
+2
+4
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator-- -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/iterator/op_decrement.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/iterator/op_decrement.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/iterator/op_decrement.md b/reference/ranges/filter_view/iterator/op_decrement.md
new file mode 100644
index 000000000..c7405e6c7
--- /dev/null
+++ b/reference/ranges/filter_view/iterator/op_decrement.md
@@ -0,0 +1,81 @@
+# operator--
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view::iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr iterator&amp;amp; operator++() requires bidirectional_range&amp;lt;V&amp;gt;;      // (1)
+constexpr iterator operator--(int) requires bidirectional_range&amp;lt;V&amp;gt;;    // (2)
+```
+
+## 概要
+
+イテレータを1つ進める。
+
+## 効果
+
+(1)は、
+
+```cpp
+do
+  --current_;
+while (!invoke(*parent_-&amp;gt;pred_, *current_));
+return *this;
+```
+- invoke[link /reference/functional/invoke.md]
+
+と等しい。
+
+(3)は、
+```cpp
+auto tmp = *this;
+--*this;
+return tmp;
+```
+と等しい。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  using std::ranges::filter_view;
+  using std::ranges::iterator_t;
+
+  std::vector&amp;lt;int&amp;gt; vec = {0, 1, 2, 3, 4, 5};
+
+  filter_view fv{vec, [](int x){ return x % 2 == 0; }};
+
+  iterator_t&amp;lt;filter_view&amp;gt; i(fv, vec.begin());
+
+  std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; `\n`;
+  i--;
+  std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; `\n`;
+  i--;
+  std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; `\n`;
+}
+```
+
+### 出力
+```
+0
+2
+4
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator* -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/iterator/op_deref.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/iterator/op_deref.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/iterator/op_deref.md b/reference/ranges/filter_view/iterator/op_deref.md
new file mode 100644
index 000000000..22bf342e6
--- /dev/null
+++ b/reference/ranges/filter_view/iterator/op_deref.md
@@ -0,0 +1,62 @@
+# operator*
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view::iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr range_reference_t&amp;lt;V&amp;gt; operator*() const;
+```
+
+## 概要
+
+イテレータを間接参照する。
+
+## 効果
+
+`return *current_;` と等しい
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  using std::ranges::filter_view;
+  using std::ranges::iterator_t;
+
+  std::vector&amp;lt;int&amp;gt; vec = {0, 1, 2, 3, 4, 5};
+
+  filter_view fv{vec, [](int x){ return x % 2 == 0; }};
+
+  iterator_t&amp;lt;filter_view&amp;gt; i(fv, vec.begin());
+
+  std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; `\n`;
+  i++;
+  std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; `\n`;
+  i++;
+  std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; `\n`;
+}
+```
+
+### 出力
+```
+0
+2
+4
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/iterator/op_equal.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/iterator/op_equal.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/iterator/op_equal.md b/reference/ranges/filter_view/iterator/op_equal.md
new file mode 100644
index 000000000..4aceb4181
--- /dev/null
+++ b/reference/ranges/filter_view/iterator/op_equal.md
@@ -0,0 +1,48 @@
+# operator==
+* iterator[meta header]
+* std[meta namespace]
+* filter_view::iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+friend constexpr bool operator==(const iterator&amp;amp; x, const iterator&amp;amp; y) requires equality_comparable&amp;lt;iterator_t&amp;lt;V&amp;gt;&amp;gt;;
+```
+* iterator[link ../iterator.md]
+
+## 概要
+
+自身と別のイテレータが同じ要素を指しているかを判定する。
+
+## 効果
+
+ラップしているイテレータを`current_`メンバ変数に保持するとして、以下と等価
+
+```cpp
+return x.current_ == y.current_;
+```
+
+## 戻り値
+
+元のビューの2つのイテレータが等しい場合に`true`を返す。
+
+## 備考
+
+- この演算子により `!=` 演算子が使用可能になる。
+
+## 例
+(執筆中)
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator++ -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/iterator/op_increment.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/iterator/op_increment.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/iterator/op_increment.md b/reference/ranges/filter_view/iterator/op_increment.md
new file mode 100644
index 000000000..c217c2883
--- /dev/null
+++ b/reference/ranges/filter_view/iterator/op_increment.md
@@ -0,0 +1,87 @@
+# operator++
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view::iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr iterator&amp;amp; operator++();                             // (1)
+constexpr void operator++(int);                               // (2)
+constexpr iterator operator++(int) requires forward_range&amp;lt;V&amp;gt;; // (3)
+```
+
+## 概要
+
+イテレータを1つ進める。
+
+## 効果
+
+(1)は、
+
+```cpp
+current_ = ranges::find_if(
+  std::move(++current_),
+  ranges::end(parent_-&amp;gt;base_),
+  ref(*parent_-&amp;gt;pred_));
+return *this;
+```
+- ranges::find_if[link /reference/algorithm/ranges_find_if.md]
+- ranges::end[link /reference/ranges/end.md]
+- ref[link /reference/functional/ref.md]
+
+と等しい。
+
+(2)は、`++*this` と等しい。
+
+(3)は、
+```cpp
+auto tmp = *this;
+++*this;
+return tmp;
+```
+と等しい。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  using std::ranges::filter_view;
+  using std::ranges::iterator_t;
+
+  std::vector&amp;lt;int&amp;gt; vec = {0, 1, 2, 3, 4, 5};
+
+  filter_view fv{vec, [](int x){ return x % 2 == 0; }};
+
+  iterator_t&amp;lt;filter_view&amp;gt; i(fv, vec.begin());
+
+  std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; `\n`;
+  i++;
+  std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; `\n`;
+  i++;
+  std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; `\n`;
+}
+```
+
+### 出力
+```
+0
+2
+4
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/op_constructor.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/op_constructor.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/op_constructor.md b/reference/ranges/filter_view/op_constructor.md
new file mode 100644
index 000000000..f3c4002a5
--- /dev/null
+++ b/reference/ranges/filter_view/op_constructor.md
@@ -0,0 +1,58 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+filter_view() requires default_initializable&amp;lt;V&amp;gt; &amp;amp;&amp;amp; default_initializable&amp;lt;Pred&amp;gt; = default;    // (1)
+
+constexpr explicit filter_view(V base, Pred pred);                                           // (2)
+```
+
+## 概要
+
+[`filter_view`](../filter_view.md)オブジェクトを構築する。
+
+## 効果
+
+- (1) : `base_`、`pred_`をデフォルト構築する
+- (2) : `base_`を`std::move(base)`で、`pred_`を`std::move(pred)`で初期化する
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  using std::ranges::filter_view;
+
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+
+  // (1) デフォルト構築
+  filter_view&amp;lt;std::views::all_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;, bool(*)(int)&amp;gt; v1{};
+  
+  // (2) viewを入力して構築
+  filter_view v2{vec, [](int x){ return x % 2 == 0; }};
+}
+```
+* filter_view[color ff0000]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/op_deduction_guide.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/op_deduction_guide.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/op_deduction_guide.md b/reference/ranges/filter_view/op_deduction_guide.md
new file mode 100644
index 000000000..2c8de43f0
--- /dev/null
+++ b/reference/ranges/filter_view/op_deduction_guide.md
@@ -0,0 +1,67 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class R, class Pred&amp;gt;
+  filter_view(R&amp;amp;&amp;amp;, Pred) -&amp;gt; filter_view&amp;lt;views::all_t&amp;lt;R&amp;gt;, Pred&amp;gt;;
+}
+```
+* filter_view[link ../filter_view.md]
+
+## 概要
+
+[`filter_view`](../filter_view.md)クラステンプレートの型推論補助。
+
+この推論補助によって、元のRangeが暗黙的に[all view](../all.md)でラップされる。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4};
+
+  auto pred = [](int i) { return i % 2 == 0; };
+
+  std::ranges::filter_view v1{vec, pred};
+  
+  static_assert(std::same_as&amp;lt;
+    decltype(v1),
+    std::ranges::filter_view&amp;lt;std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;
+  &amp;gt;);
+
+  std::ranges::filter_view v2{std::vector&amp;lt;int&amp;gt;{1, 2}, pred};
+  
+  static_assert(std::same_as&amp;lt;
+    decltype(v2),
+    std::ranges::filter_view&amp;lt;std::ranges::owning_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;
+  &amp;gt;);
+}
+```
+* ref_view[link /reference/ranges/ref_view.md]
+* owning_view[link /reference/ranges/owning_view.md]
+* filter_view[link ../filter_view.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>pred -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/pred.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/pred.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/pred.md b/reference/ranges/filter_view/pred.md
new file mode 100644
index 000000000..6d3978c28
--- /dev/null
+++ b/reference/ranges/filter_view/pred.md
@@ -0,0 +1,62 @@
+# pred
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr const Pred&amp;amp; pred() const;
+```
+
+## 概要
+
+メンバ変数として保持している述語を取得する。
+
+## 戻り値
+
+述語`Pred`のオブジェクトを[`movable-box`](../movable_box.md)(C++20は[`copyable-box`](../copyable_box.md))でラップした `pred_`というメンバに保持するとして
+
+```cpp
+return *pred_;
+```
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+
+  std::ranges::filter_view fv{vec, [](int i) { return i % 2 == 0; }};
+
+  std::cout &amp;lt;&amp;lt; fv.pred()(2) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; fv.pred()(3) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* pred[color ff0000]
+* filter_view[link ../filter_view.md]
+
+### 出力
+
+```
+2
+3
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sentinel -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/sentinel.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/sentinel.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/sentinel.md b/reference/ranges/filter_view/sentinel.md
new file mode 100644
index 000000000..6cbf94292
--- /dev/null
+++ b/reference/ranges/filter_view/sentinel.md
@@ -0,0 +1,59 @@
+# sentinel
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view[meta class]
+* class template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;input_range V, indirect_unary_predicate&amp;lt;sentinel_t&amp;lt;V&amp;gt;&amp;gt; Pred&amp;gt;
+    requires view&amp;lt;V&amp;gt; &amp;amp;&amp;amp; is_object_v&amp;lt;Pred&amp;gt;
+  class filter_view&amp;lt;V, Pred&amp;gt;::sentinel { …… };
+}
+```
+* filter_view[link ../filter_view.md]
+
+## 概要
+
+[`filter_view`](../filter_view.md)が[`common_range`](../common_range.md)でない場合のみ使用される番兵。
+
+このクラスの名前は規定されておらず、振る舞いのみが規定されている。
+
+このクラスの型を取得したい場合、[`sentinel_t`](../sentinel_t.md)を使用できる。
+
+## メンバ変数
+
+| 名前                                                               | 説明                       | 対応バージョン |
+|--------------------------------------------------------------------|----------------------------|----------------|
+| [`sentinel_t`](../sentinel_t.md)`&amp;lt;V&amp;gt; end_ = sentinel_t&amp;lt;V&amp;gt;();`      | 元の番兵(説明専用)         | C++20          |
+
+## メンバ関数
+
+| 名前                                           | 説明                 | 対応バージョン |
+|------------------------------------------------|----------------------|----------------|
+| [`(constructor)`](sentinel/op_constructor.md)  | コンストラクタ       | C++20          |
+| [`base`](sentinel/base.md)                     | 元の番兵を取得する   | C++20          |
+
+## 非メンバ（*Hidden friends*）関数
+
+### 比較演算子
+
+| 名前                                 | 説明                            | 対応バージョン |
+|--------------------------------------|---------------------------------|----------------|
+| [`operator==`](sentinel/op_equal.md) | 等値比較                        | C++20          |
+| `operator!=`                         | 非等値比較 (`==`により使用可能) | C++20          |
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/sentinel/base.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/sentinel/base.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/sentinel/base.md b/reference/ranges/filter_view/sentinel/base.md
new file mode 100644
index 000000000..10a6aebe8
--- /dev/null
+++ b/reference/ranges/filter_view/sentinel/base.md
@@ -0,0 +1,35 @@
+# base
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view::sentinel[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr const sentinel_t&amp;lt;V&amp;gt; base() const;
+```
+
+## 概要
+
+元の`view`の番兵を取得する。
+
+## 効果
+
+入力`view`（`V`）の番兵を`end_`というメンバに保持するとして、`return end_;` と等しい
+
+## 例
+(執筆中)
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/sentinel/op_constructor.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/sentinel/op_constructor.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/sentinel/op_constructor.md b/reference/ranges/filter_view/sentinel/op_constructor.md
new file mode 100644
index 000000000..c320f1d1d
--- /dev/null
+++ b/reference/ranges/filter_view/sentinel/op_constructor.md
@@ -0,0 +1,37 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view::sentinel[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+sentinel() = default;                             // (1)
+constexpr explicit sentinel(filter_view&amp;amp; parent); // (2)
+```
+
+## 概要
+
+[`filter_view::sentinel`](../sentinel.md)オブジェクトを構築する。
+
+## 効果
+
+- (1) : `end_`をデフォルト構築する
+- (2) : `end_`を[`std::ranges::end`](../../end.md)`(parent.base_)`で初期化する
+
+## 例
+(執筆中)
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/sentinel/op_equal.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/sentinel/op_equal.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/sentinel/op_equal.md b/reference/ranges/filter_view/sentinel/op_equal.md
new file mode 100644
index 000000000..a5f8ce27f
--- /dev/null
+++ b/reference/ranges/filter_view/sentinel/op_equal.md
@@ -0,0 +1,49 @@
+# operator==
+* sentinel[meta header]
+* std[meta namespace]
+* filter_view::sentinel[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+friend constexpr bool operator==(const iterator&amp;amp; x, const sentinel&amp;amp; y);
+```
+* iterator[link ../iterator.md]
+* sentinel[link ../sentinel.md]
+
+## 概要
+
+自身と別のイテレータが同じかを判定する。
+
+## 効果
+
+ラップしている番兵を`end_`メンバ変数に保持するとして、以下と等価
+
+```cpp
+return x.current_ == y.end_;
+```
+
+## 戻り値
+
+元のビューのイテレータと番兵が等しい場合に`true`を返す。
+
+## 備考
+
+- この演算子により逆順の `==` 演算子と、それぞれに対応する `!=` 演算子が使用可能になる。
+
+## 例
+(執筆中)
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- layout_right_padded/mapping: コンストラクタ(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded/mapping/op_constructor.html"/>
      <id>8c041b3bd1aa46282a0dbb33c7671ec30bb385cb:reference/mdspan/layout_left_padded/mapping/op_constructor.md</id>
      <updated>2024-08-26T22:25:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded/mapping/op_constructor.md b/reference/mdspan/layout_left_padded/mapping/op_constructor.md
index 4a1356666..fab88cd47 100644
--- a/reference/mdspan/layout_left_padded/mapping/op_constructor.md
+++ b/reference/mdspan/layout_left_padded/mapping/op_constructor.md
@@ -35,8 +35,7 @@ constexpr explicit(see below)
 * rank()[link ../../extents/rank.md]
 * layout_left::mapping[link ../../layout_left/mapping.md]
 * layout_stride::mapping[link ../../layout_stride/mapping.md]
-* LayoutLeftPaddedMapping[link ../../layout_left_padded/mapping.md]
-* see below[itaic]
+* see below[italic]
 
 ## 概要
 - (1) : デフォルトコンストラクタ
@@ -72,21 +71,21 @@ constexpr explicit(see below)
 ## 事前条件
 - (3) :
     - `ext`の多次元インデクス空間のサイズを、`index_type`型で表現できること。
-    - `rank_ &amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`LEAST-MULTIPLE-AT-LEAST(padding_value, ext.extent(0))`を`index_type`型で表現できること。
-    - `rank_ &amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、半開区間`[1, rank_)`の全ての値`k`に対して`LEAST-MULTIPLE-AT-LEAST(padding_value, ext.extent(0))`と全ての`ext.extent(k)`を乗算した値を`index_type`型で表現できること。
+    - `rank_ &amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`LEAST-MULTIPLE-AT-LEAST(padding_value, ext.`[`extent`](../../extents/extent.md)`(0))`を`index_type`型で表現できること。
+    - `rank_ &amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、半開区間`[1, rank_)`の全ての値`k`に対して`LEAST-MULTIPLE-AT-LEAST(padding_value, ext.`[`extent`](../../extents/extent.md)`(0))`と全ての`ext.extent(k)`を乗算した値を`index_type`型で表現できること。
 - (4) :
     - `pad`の値を`index_type`型で表現できること。
     - `extetns_type::`[`index-cast`](../../extents/index-cast.md)`(pad) &amp;gt; 0`
-    - `rank_ &amp;gt; 1`のとき、`LEAST-MULTIPLE-AT-LEAST(pad, ext.extent(0))`を`index_type`型で表現できること。
-    - `rank_ &amp;gt; 1`のとき、半開区間`[1, rank_)`の全ての値`k`に対して`LEAST-MULTIPLE-AT-LEAST(pad, ext.extent(0))`と全ての`ext.extent(k)`を乗算した値を`index_type`型で表現できること。
+    - `rank_ &amp;gt; 1`のとき、`LEAST-MULTIPLE-AT-LEAST(pad, ext.`[`extent`](../../extents/extent.md)`(0))`を`index_type`型で表現できること。
+    - `rank_ &amp;gt; 1`のとき、半開区間`[1, rank_)`の全ての値`k`に対して`LEAST-MULTIPLE-AT-LEAST(pad, ext.`[`extent`](../../extents/extent.md)`(0))`と全ての`ext.extent(k)`を乗算した値を`index_type`型で表現できること。
     - `padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`padding_value == extetns_type::`[`index-cast`](../../extents/index-cast.md)`(pad)`
 - (5) :
-    - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`other.`[`stride`](../../layout_left/mapping/stride.md))`(1) == LEAST-MULTIPLE-AT-LEAST(padding_value, extents_type::`[`index-cast`](../../extents/index-cast.md)`(other.extents().extent(0)))`
+    - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`other.`[`stride`](../../layout_left/mapping/stride.md)`(1) == LEAST-MULTIPLE-AT-LEAST(padding_value, extents_type::`[`index-cast`](../../extents/index-cast.md)`(other.extents().`[`extent`](../../extents/extent.md)`(0)))`
     - `other.`[`required_span_size()`](../../layout_left/mapping/required_span_size.md)を、`index_type`型で表現できること。
 - (6) :
-    - `rank_ &amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`other.`[`stride`](../../layout_left/mapping/stride.md)`(1) == LEAST-MULTIPLE-AT-LEAST(padding_value, extents_type::`[`index-cast`](../../extents/index-cast.md)`(other.extents().extent(0)))`
+    - `rank_ &amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`other.`[`stride`](../../layout_stride/mapping/stride.md)`(1) == LEAST-MULTIPLE-AT-LEAST(padding_value, extents_type::`[`index-cast`](../../extents/index-cast.md)`(other.extents().`[`extent`](../../extents/extent.md)`(0)))`
     - `rank_ &amp;gt; 0`のとき、`other.`[`stride`](../../layout_stride/mapping/stride.md)`(0) == 1`
-    - `rank_ &amp;gt; 2`のとき、半開区間`[2, rank_)`の全ての値`r`に対して`other.stride(r) == (other.extents().fwd-prod-of-extents(r) / other.extents().extent(0)) * other.stride(1)`
+    - `rank_ &amp;gt; 2`のとき、半開区間`[2, rank_)`の全ての値`r`に対して`other.`[`stride`](../../layout_stride/mapping/stride.md)`(r) == (other.extents().fwd-prod-of-extents(r) / other.extents().`[`extent`](../../extents/extent.md)`(0)) * other.stride(1)`
     - `other.`[`required_span_size()`](../../layout_stride/mapping/required_span_size.md)を、`index_type`型で表現できること。
 - (7) :
     - `rank_ &amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`other.stride(1) == LEAST-MULTIPLE-AT-LEAST(padding_value, extents_type::`[`index-cast`](../../extents/index-cast.md)`(other.extent(0)))`
@@ -101,11 +100,11 @@ constexpr explicit(see below)
 - (3) :
     - `ext`を用いて`extents_`を直接非リスト初期化する。
     - `rank_ &amp;gt; 1`のとき、次の値を用いて`stride-1`を直接非リスト初期化する。
-        - `padding_value ==` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`ext.extent(0)`
-        - そうでなければ、`LEAST-MULTIPLE-AT-LEAST(padding_value, ext.extent(0))`
+        - `padding_value ==` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`ext.`[`extent`](../../extents/extent.md)`(0)`
+        - そうでなければ、`LEAST-MULTIPLE-AT-LEAST(padding_value, ext.`[`extent`](../../extents/extent.md)`(0))`
 - (4) :
     - `ext`を用いて`extents_`を直接非リスト初期化する。
-    - `rank_ &amp;gt; 1`のとき、`LEAST-MULTIPLE-AT-LEAST(pad, ext.extent(0))`を用いて`stride-1`を直接非リスト初期化する。
+    - `rank_ &amp;gt; 1`のとき、`LEAST-MULTIPLE-AT-LEAST(pad, ext.`[`extent`](../../extents/extent.md)`(0))`を用いて`stride-1`を直接非リスト初期化する。
 - (5) :
     - `mapping(other.extents())`と等価。
 - (6), (7) :
@@ -192,6 +191,7 @@ int main()
 ```
 * std::layout_left_padded&amp;lt;4&amp;gt;::mapping[color ff0000]
 * std::layout_left_padded&amp;lt;&amp;gt;::mapping[color ff0000]
+* std::layout_left::mapping[link ../../layout_left/mapping.md]
 * std::layout_right::mapping[link ../../layout_right/mapping.md]
 * std::layout_stride::mapping[link ../../layout_stride/mapping.md]
 * std::dims[link ../../extents.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mapping -- layout_right_padded/mapping: コンストラクタ(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded/mapping.html"/>
      <id>8c041b3bd1aa46282a0dbb33c7671ec30bb385cb:reference/mdspan/layout_right_padded/mapping.md</id>
      <updated>2024-08-26T22:25:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded/mapping.md b/reference/mdspan/layout_right_padded/mapping.md
index 55e170826..97528c06a 100644
--- a/reference/mdspan/layout_right_padded/mapping.md
+++ b/reference/mdspan/layout_right_padded/mapping.md
@@ -61,7 +61,7 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`(constructor)`](mapping/op_constructor.md.nolink) | コンストラクタ | C++26 |
+| [`(constructor)`](mapping/op_constructor.md) | コンストラクタ | C++26 |
 | `(destructor)` | デストラクタ | C++26 |
 | `operator=`    | コピー代入演算子 | C++26 |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- layout_right_padded/mapping: コンストラクタ(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded/mapping/op_constructor.html"/>
      <id>8c041b3bd1aa46282a0dbb33c7671ec30bb385cb:reference/mdspan/layout_right_padded/mapping/op_constructor.md</id>
      <updated>2024-08-26T22:25:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded/mapping/op_constructor.md b/reference/mdspan/layout_right_padded/mapping/op_constructor.md
new file mode 100644
index 000000000..5ae9da9d3
--- /dev/null
+++ b/reference/mdspan/layout_right_padded/mapping/op_constructor.md
@@ -0,0 +1,222 @@
+# コンストラクタ
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_right_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+constexpr mapping() noexcept;  // (1)
+
+constexpr mapping(const mapping&amp;amp;) noexcept = default;  // (2)
+
+constexpr mapping(const extents_type&amp;amp; ext);  // (3)
+
+template&amp;lt;class OtherIndexType&amp;gt;
+constexpr mapping(const extents_type&amp;amp; ext, OtherIndexType pad);  // (4)
+
+template&amp;lt;class OtherExtents&amp;gt;
+constexpr explicit(!is_convertible_v&amp;lt;OtherExtents, extents_type&amp;gt;)
+  mapping(const layout_right::mapping&amp;lt;OtherExtents&amp;gt;&amp;amp; other);  // (5)
+
+template&amp;lt;class OtherExtents&amp;gt;
+constexpr explicit(rank_ &amp;gt; 0)
+  mapping(const layout_stride::mapping&amp;lt;OtherExtents&amp;gt;&amp;amp; other);  // (6)
+
+template&amp;lt;class LayoutRightPaddedMapping&amp;gt;
+constexpr explicit(see below)
+  mapping(const LayoutRightPaddedMapping&amp;amp; other);  // (7)
+
+template&amp;lt;class LayoutLeftPaddedMapping&amp;gt;
+constexpr explicit(see below)
+  mapping(const LayoutLeftPaddedMapping&amp;amp; other) noexcept;  // (8)
+```
+* is_convertible_v[link /reference/type_traits/is_convertible.md]
+* layout_right::mapping[link ../../layout_right/mapping.md]
+* layout_stride::mapping[link ../../layout_stride/mapping.md]
+* see below[italic]
+
+## 概要
+- (1) : デフォルトコンストラクタ
+- (2) : コピーコンストラクタ
+- (3) : [`extents`](../../extents.md)から構築
+- (4) : [`extents`](../../extents.md)とパディングから構築
+- (5) : [`layout_right::mapping`](../../layout_right/mapping.md)からの変換コンストラクタ
+- (6) : [`layout_stride::mapping`](../../layout_stride/mapping.md)からの変換コンストラクタ
+- (7) : 他`layout_right_padded&amp;lt;S&amp;gt;::mapping`からの変換コンストラクタ
+- (8) : [`layout_left::mapping`](../../layout_left/mapping.md)または[`layout_left_padded&amp;lt;S&amp;gt;::mapping`](../../layout_left_padded/mapping.md)からの変換コンストラクタ
+
+
+## テンプレートパラメータ制約
+- (4) :
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;OtherIndexType, index_type&amp;gt;`が`true`であること。
+    - [`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, OtherIndexType&amp;gt;`が`true`であること。
+- (5), (6) :
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, OtherExtents&amp;gt;`が`true`であること。
+- (7) :
+    - [`is-layout-right-padded-mapping-of`](../../is-layout-right-padded-mapping-of.md)`&amp;lt;LayoutRightPaddedMapping&amp;gt;`が`true`であること。
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, LayoutRightPaddedMapping::extents_type&amp;gt;`が`true`であること。
+- (8) :
+    - [`is-layout-left-padded-mapping-of`](../../is-layout-left-padded-mapping-of.md)`&amp;lt;LayoutLeftPaddedMapping&amp;gt;`が`true`、または[`is-mapping-of`](../../is-mapping-of.md)`&amp;lt;`[`layout_left`](../../layout_left.md)`, LayoutLeftPaddedMapping&amp;gt;`が`true`であること。
+    - `rank_`が`0`または`1`であること。
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, LayoutLeftPaddedMapping::extents_type&amp;gt;`が`true`であること。
+
+
+## 適格要件
+- (5) : `OhterExtents::`[`rank()`](../../extents/rank.md) `&amp;gt; 1`のとき、`(static-padding-stride ==` [`dynamic_extent`](/reference/span/dynamic_extent.md)`) || (OtherExtents::`[`static_extent`](../../extents/static_extent.md)`(rank_ - 1) == dynamic_extent) || (static-padding-stride == OtherExtents::static_extent(rank_ - 1))`が`true`であること。
+- (7) : `rank_ &amp;gt; 1`のとき、`(padding_value ==` [`dynamic_extent`](/reference/span/dynamic_extent.md)`) || (LayoutRightPaddedMapping::padding_value == dynamic_extent) || (padding_value == LayoutRightPaddedMapping::padding_value)`が`true`であること。
+
+
+## 事前条件
+- (3) :
+    - `ext`の多次元インデクス空間のサイズを、`index_type`型で表現できること。
+    - `rank_ &amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`LEAST-MULTIPLE-AT-LEAST(padding_value, ext.`[`extent`](../../extents/extent.md)`(rank_ - 1))`を`index_type`型で表現できること。
+    - `rank_ &amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、半開区間`[0, rank_ - 1)`の全ての値`k`に対して`LEAST-MULTIPLE-AT-LEAST(padding_value, ext.`[`extent`](../../extents/extent.md)`(rank_ - 1))`と全ての`ext.extent(k)`を乗算した値を`index_type`型で表現できること。
+- (4) :
+    - `pad`の値を`index_type`型で表現できること。
+    - `extetns_type::`[`index-cast`](../../extents/index-cast.md)`(pad) &amp;gt; 0`
+    - `rank_ &amp;gt; 1`のとき、`LEAST-MULTIPLE-AT-LEAST(pad, ext.`[`extent`](../../extents/extent.md)`(rank_ - 1))`を`index_type`型で表現できること。
+    - `rank_ &amp;gt; 1`のとき、半開区間`[0, rank_ - 1)`の全ての値`k`に対して`LEAST-MULTIPLE-AT-LEAST(pad, ext.`[`extent`](../../extents/extent.md)`(rank_ - 1))`と全ての`ext.extent(k)`を乗算した値を`index_type`型で表現できること。
+    - `padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`padding_value == extetns_type::`[`index-cast`](../../extents/index-cast.md)`(pad)`
+- (5) :
+    - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`other.`[`stride`](../../layout_right/mapping/stride.md)`(rank_ - 2) == LEAST-MULTIPLE-AT-LEAST(padding_value, extents_type::`[`index-cast`](../../extents/index-cast.md)`(other.extents().`[`extent`](../../extents/extent.md)`(rank_ - 1)))`
+    - `other.`[`required_span_size()`](../../layout_right/mapping/required_span_size.md)を、`index_type`型で表現できること。
+- (6) :
+    - `rank_ &amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`other.`[`stride`](../../layout_stride/mapping/stride.md)`(rank_ - 2) == LEAST-MULTIPLE-AT-LEAST(padding_value, extents_type::`[`index-cast`](../../extents/index-cast.md)`(other.extents().`[`extent`](../../extents/extent.md)`(rank_ - 1)))`
+    - `rank_ &amp;gt; 0`のとき、`other.`[`stride`](../../layout_stride/mapping/stride.md)`(rank_ - 1) == 1`
+    - `rank_ &amp;gt; 2`のとき、半開区間`[0, rank_ - 2)`の全ての値`r`に対して`other.`[`stride`](../../layout_stride/mapping/stride.md)`(r) == (other.extents().rev-prod-of-extents(r) / other.extents().`[`extent`](../../extents/extent.md)`(rank_ - 1)) * other.stride(rank_ - 2)`
+    - `other.`[`required_span_size()`](../../layout_stride/mapping/required_span_size.md)を、`index_type`型で表現できること。
+- (7) :
+    - `rank_ &amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`other.stride(rank_ - 2) == LEAST-MULTIPLE-AT-LEAST(padding_value, extents_type::`[`index-cast`](../../extents/index-cast.md)`(other.extent(rank_ - 1)))`
+    - `other.required_span_size()`を、`index_type`型で表現できること。
+- (8) :
+    - `other.required_span_size()`を、`index_type`型で表現できること。
+
+
+## 効果
+- (1) :
+    - `mapping(extents_type{})`と等価。
+- (3) :
+    - `ext`を用いて`extents_`を直接非リスト初期化する。
+    - `rank_ &amp;gt; 1`のとき、次の値を用いて`stride-rm2`を直接非リスト初期化する。
+        - `padding_value ==` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`ext.`[`extent`](../../extents/extent.md)`(rank_ - 1)`
+        - そうでなければ、`LEAST-MULTIPLE-AT-LEAST(padding_value, ext.`[`extent`](../../extents/extent.md)`(rank_ - 1))`
+- (4) :
+    - `ext`を用いて`extents_`を直接非リスト初期化する。
+    - `rank_ &amp;gt; 1`のとき、`LEAST-MULTIPLE-AT-LEAST(pad, ext.`[`extent`](../../extents/extent.md)`(rank_ - 1))`を用いて`stride-rm2`を直接非リスト初期化する。
+- (5) :
+    - `mapping(other.extents())`と等価。
+- (6), (7) :
+    - `other.extents()`を用いて`extents_`を直接非リスト初期化する。
+    - `rank_ &amp;gt; 1`のとき、`other.stride(rank_ - 1)`を用いて`stride-rm2`を直接非リスト初期化する。
+- (8) :
+    - `other.extents()`を用いて`extents_`を直接非リスト初期化する。
+
+
+## 例外
+- (1), (2), (8) : 投げない
+
+
+## explicitになる条件
+- (5) : `!`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;OtherExtents, extents_type&amp;gt;`
+- (6) : [`extents_type::rank()`](../../extents/rank.md) `&amp;gt; 0`
+- (7) : `rank_ &amp;gt; 1 &amp;amp;&amp;amp; (padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md) `|| LayoutRightPaddedMapping::padding_value == dynamic_extent)`
+- (8) : `!`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;LayoutLeftPaddedMapping::extents_type, extents_type&amp;gt;`
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+using Ext3x3 = std::extents&amp;lt;size_t, 3, 3&amp;gt;;
+using Ext2D = std::dims&amp;lt;2&amp;gt;;
+
+int main()
+{
+  // (1) : デフォルトコンストラクタ
+  {
+    std::layout_right_padded&amp;lt;4&amp;gt;::mapping&amp;lt;Ext3x3&amp;gt; map1s;
+    std::layout_right_padded&amp;lt;&amp;gt;::mapping&amp;lt;Ext3x3&amp;gt; map1d;
+    assert(map1s.stride(0) == 4);
+    assert(map1d.stride(0) == 3);
+  }
+  // (2) : コピーコンストラクタ
+  {
+    std::layout_right_padded&amp;lt;4&amp;gt;::mapping&amp;lt;Ext3x3&amp;gt; map2_a;
+    std::layout_right_padded&amp;lt;4&amp;gt;::mapping&amp;lt;Ext3x3&amp;gt; map2_b = map2_a;
+    assert(map2_a == map2_b);
+  }
+  // (3) : extentsから構築
+  {
+    Ext2D ext{3, 3};
+    std::layout_right_padded&amp;lt;&amp;gt;::mapping&amp;lt;Ext2D&amp;gt; map3 = ext;
+    assert(map3.extents() == ext);
+  }
+  // (4) : extentsとパディングから構築
+  {
+    Ext2D ext{3, 3};
+    std::layout_right_padded&amp;lt;&amp;gt;::mapping&amp;lt;Ext2D&amp;gt; map4{ext, 4};
+    assert(map4.extents() == ext &amp;amp;&amp;amp; map4.stride(0) == 4);
+  }
+  // (5) : layout_right::mappingからの変換コンストラクタ
+  {
+    std::layout_right::mapping src5{Ext3x3{}};
+    std::layout_right_padded&amp;lt;&amp;gt;::mapping&amp;lt;Ext2D&amp;gt; dst5 = src5;
+    assert(dst5.stride(0) == 3);
+  }
+  // (6) : layout_stride::mappingからの変換コンストラクタ
+  {
+    std::array&amp;lt;int, 2&amp;gt; strides{4, 1};
+    std::layout_stride::mapping src6{Ext3x3{}, strides};
+    std::layout_right_padded&amp;lt;&amp;gt;::mapping&amp;lt;Ext2D&amp;gt; dst6{src6};
+    assert(dst6.stride(0) == 4);
+  }
+  // (7) : 他layout_right_padded::mappingからの変換コンストラクタ
+  {
+    std::layout_right_padded&amp;lt;4&amp;gt;::mapping&amp;lt;Ext3x3&amp;gt; src7;
+    std::layout_right_padded&amp;lt;&amp;gt;::mapping&amp;lt;Ext2D&amp;gt; dst7{src7};
+    assert(dst7.extents() == Ext3x3{} &amp;amp;&amp;amp; dst7.stride(0) == 4);
+  }
+  // (8) : layout_left(_padded)::mappingからの変換コンストラクタ
+  {
+    using Ext1D = std::dims&amp;lt;1&amp;gt;;
+    std::layout_left::mapping&amp;lt;Ext1D&amp;gt; src8{Ext1D{5}};
+    std::layout_right_padded&amp;lt;&amp;gt;::mapping&amp;lt;Ext1D&amp;gt; dst8{src8};
+    assert(dst8.extent(0) == 5);
+  }
+}
+```
+* std::layout_right_padded&amp;lt;4&amp;gt;::mapping[color ff0000]
+* std::layout_right_padded&amp;lt;&amp;gt;::mapping[color ff0000]
+* std::layout_right::mapping[link ../../layout_right/mapping.md]
+* std::layout_left::mapping[link ../../layout_left/mapping.md]
+* std::layout_stride::mapping[link ../../layout_stride/mapping.md]
+* std::dims[link ../../extents.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`layout_left::mapping`](../../layout_left/mapping.md)
+- [`layout_left_padded::mapping`](../../layout_left_padded/mapping.md)
+- [`layout_right::mapping`](../../layout_right/mapping.md)
+- [`layout_stride::mapping`](../../layout_stride/mapping.md)
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is-mapping-of -- layout_left_padded/mapping: コンストラクタ(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/is-mapping-of.html"/>
      <id>5c9ff3ec896ede1d91fadd3f23023cfe7986693a:reference/mdspan/is-mapping-of.md</id>
      <updated>2024-08-26T20:40:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/is-mapping-of.md b/reference/mdspan/is-mapping-of.md
new file mode 100644
index 000000000..546ed4033
--- /dev/null
+++ b/reference/mdspan/is-mapping-of.md
@@ -0,0 +1,29 @@
+# is-mapping-of
+* mdspan[meta header]
+* variable[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class Layout, class Mapping&amp;gt;
+constexpr bool is-mapping-of =  // exposition only
+  is_same_v&amp;lt;typename Layout::template mapping&amp;lt;typename Mapping::extents_type&amp;gt;, Mapping&amp;gt;;
+```
+* is_same_v[link /reference/type_traits/is_same.md]
+
+
+## 概要
+`is-mapping-of`は、`Mapping`が`Layout`の[レイアウトマッピング](LayoutMapping.md)か否かを判定する説明専用変数テンプレートである。
+
+
+## バージョン
+### 言語
+- C++23
+
+
+## 関連項目
+- [LayoutMappingPolicy](LayoutMappingPolicy.md)
+- [LayoutMapping](LayoutMapping.md)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- layout_left_padded/mapping: コンストラクタ(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping/op_constructor.html"/>
      <id>5c9ff3ec896ede1d91fadd3f23023cfe7986693a:reference/mdspan/layout_left/mapping/op_constructor.md</id>
      <updated>2024-08-26T20:40:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping/op_constructor.md b/reference/mdspan/layout_left/mapping/op_constructor.md
index d2a2497d2..14a9af04a 100644
--- a/reference/mdspan/layout_left/mapping/op_constructor.md
+++ b/reference/mdspan/layout_left/mapping/op_constructor.md
@@ -37,7 +37,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 ## 概要
 - (1) : デフォルトコンストラクタ
 - (2) : コピーコンストラクタ
-- (3) : [`extents`](../../extents.md)からの変換コンストラクタ
+- (3) : [`extents`](../../extents.md)から構築
 - (4) : 他`layout_left::mapping`からの変換コンストラクタ
 - (5) : [`layout_right::mapping`](../../layout_right/mapping.md)からの変換コンストラクタ
 - (6) : [`layout_stride::mapping`](../../layout_stride/mapping.md)からの変換コンストラクタ
@@ -58,7 +58,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 ## 適格要件
 - (7) : 以下を満たすとき、`extents_type::`[`static_extent`](../../extents/static_extent.md)`(0)`が[`LayoutLeftPaddedMapping::static-padding-stride`](../../layout_left_padded/mapping.md)に等しいこと。
     - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 1`、かつ
-    - `extents_type::`[`static_extent`](../../extents/static_extent.md)`(0)`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくなく、かつ
+    - `extents_type::`[`static_extent`](../../extents/static_extent.md)`(0) !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)、かつ
     - `LayoutLeftPaddedMapping::static-padding-stride`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくないとき。
 
 
@@ -113,7 +113,7 @@ int main()
     std::layout_left::mapping&amp;lt;Ext3xN&amp;gt; map2_b = map2_a;
     assert(map2_a == map2_b);
   }
-  // (3) : extentsからの変換コンストラクタ
+  // (3) : extentsから構築
   {
     Ext3xN ext{4};
     std::layout_left::mapping&amp;lt;Ext3xN&amp;gt; map3 = ext;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mapping -- layout_left_padded/mapping: コンストラクタ(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded/mapping.html"/>
      <id>5c9ff3ec896ede1d91fadd3f23023cfe7986693a:reference/mdspan/layout_left_padded/mapping.md</id>
      <updated>2024-08-26T20:40:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded/mapping.md b/reference/mdspan/layout_left_padded/mapping.md
index 7f6c4f2fd..7b80516ca 100644
--- a/reference/mdspan/layout_left_padded/mapping.md
+++ b/reference/mdspan/layout_left_padded/mapping.md
@@ -48,11 +48,11 @@ namespace std {
 - 値`padding_value`が`index_type`型で表現できること。
 - 以下を満たすとき、`LEAST-MULTIPLE-AT-LEAST(padding_value, first-static-extent)`が、`size_t`型および`index_type`型で表現できること。
     - `rank_ &amp;gt; 1`、かつ
-    - `padding_value`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくなく、かつ
+    - `padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)、かつ
     - `first-static-extent`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくないとき。
 - 以下を満たすとき、半開区間`[1, rank_)`の全ての値`k`に対して`LEAST-MULTIPLE-AT-LEAST(padding_value, ext.static_extent(0))`と全ての`ext.static_extent(k)`を乗じた結果が、`size_t`型および`index_type`型で表現できること。
     - `rank_ &amp;gt; 1`、かつ
-    - `padding_value`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくなく、かつ
+    - `padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)、かつ
     - 半開区間`[0, extents_type::`[`rank()`](../extents/rank.md)`)`の全ての値`k`に対して`extents_type::`[`static_extent`](../extents/static_extent.md)`(k)`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくないとき。
 
 
@@ -61,7 +61,7 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`(constructor)`](mapping/op_constructor.md.nolink) | コンストラクタ | C++26 |
+| [`(constructor)`](mapping/op_constructor.md) | コンストラクタ | C++26 |
 | `(destructor)` | デストラクタ | C++26 |
 | `operator=`    | コピー代入演算子 | C++26 |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- layout_left_padded/mapping: コンストラクタ(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded/mapping/op_constructor.html"/>
      <id>5c9ff3ec896ede1d91fadd3f23023cfe7986693a:reference/mdspan/layout_left_padded/mapping/op_constructor.md</id>
      <updated>2024-08-26T20:40:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded/mapping/op_constructor.md b/reference/mdspan/layout_left_padded/mapping/op_constructor.md
new file mode 100644
index 000000000..4a1356666
--- /dev/null
+++ b/reference/mdspan/layout_left_padded/mapping/op_constructor.md
@@ -0,0 +1,223 @@
+# コンストラクタ
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_left_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+constexpr mapping() noexcept;  // (1)
+
+constexpr mapping(const mapping&amp;amp;) noexcept = default;  // (2)
+
+constexpr mapping(const extents_type&amp;amp; ext);  // (3)
+
+template&amp;lt;class OtherIndexType&amp;gt;
+constexpr mapping(const extents_type&amp;amp; ext, OtherIndexType pad);  // (4)
+
+template&amp;lt;class OtherExtents&amp;gt;
+constexpr explicit(!is_convertible_v&amp;lt;OtherExtents, extents_type&amp;gt;)
+  mapping(const layout_left::mapping&amp;lt;OtherExtents&amp;gt;&amp;amp; other);  // (5)
+
+template&amp;lt;class OtherExtents&amp;gt;
+constexpr explicit(extents_type::rank() &amp;gt; 0)
+  mapping(const layout_stride::mapping&amp;lt;OtherExtents&amp;gt;&amp;amp; other);  // (6)
+
+template&amp;lt;class LayoutLeftPaddedMapping&amp;gt;
+constexpr explicit(see below)
+  mapping(const LayoutLeftPaddedMapping&amp;amp; other);  // (7)
+
+template&amp;lt;class LayoutRightPaddedMapping&amp;gt;
+constexpr explicit(see below)
+  mapping(const LayoutRightPaddedMapping&amp;amp; other) noexcept;  // (8)
+```
+* is_convertible_v[link /reference/type_traits/is_convertible.md]
+* rank()[link ../../extents/rank.md]
+* layout_left::mapping[link ../../layout_left/mapping.md]
+* layout_stride::mapping[link ../../layout_stride/mapping.md]
+* LayoutLeftPaddedMapping[link ../../layout_left_padded/mapping.md]
+* see below[itaic]
+
+## 概要
+- (1) : デフォルトコンストラクタ
+- (2) : コピーコンストラクタ
+- (3) : [`extents`](../../extents.md)から構築
+- (4) : [`extents`](../../extents.md)とパディングから構築
+- (5) : [`layout_left::mapping`](../../layout_left/mapping.md)からの変換コンストラクタ
+- (6) : [`layout_stride::mapping`](../../layout_stride/mapping.md)からの変換コンストラクタ
+- (7) : 他`layout_left_padded&amp;lt;S&amp;gt;::mapping`からの変換コンストラクタ
+- (8) : [`layout_right::mapping`](../../layout_right/mapping.md)または[`layout_right_padded&amp;lt;S&amp;gt;::mapping`](../../layout_right_padded/mapping.md)からの変換コンストラクタ
+
+
+## テンプレートパラメータ制約
+- (4) :
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;OtherIndexType, index_type&amp;gt;`が`true`であること。
+    - [`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, OtherIndexType&amp;gt;`が`true`であること。
+- (5), (6) :
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, OtherExtents&amp;gt;`が`true`であること。
+- (7) :
+    - [`is-layout-left-padded-mapping-of`](../../is-layout-left-padded-mapping-of.md)`&amp;lt;LayoutLeftPaddedMapping&amp;gt;`が`true`であること。
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, LayoutLeftPaddedMapping::extents_type&amp;gt;`が`true`であること。
+- (8) :
+    - [`is-layout-right-padded-mapping-of`](../../is-layout-right-padded-mapping-of.md)`&amp;lt;LayoutRightPaddedMapping&amp;gt;`が`true`、または[`is-mapping-of`](../../is-mapping-of.md)`&amp;lt;`[`layout_right`](../../layout_right.md)`, LayoutRightPaddedMapping&amp;gt;`が`true`であること。
+    - `rank_`が`0`または`1`であること。
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, LayoutRightPaddedMapping::extents_type&amp;gt;`が`true`であること。
+
+
+## 適格要件
+- (5) : `OhterExtents::`[`rank()`](../../extents/rank.md) `&amp;gt; 1`のとき、`(static-padding-stride ==` [`dynamic_extent`](/reference/span/dynamic_extent.md)`) || (OtherExtents::`[`static_extent`](../../extents/static_extent.md)`(0) == dynamic_extent) || (static-padding-stride == OtherExtents::static_extent(0))`が`true`であること。
+- (7) : `rank_ &amp;gt; 1`のとき、`(padding_value ==` [`dynamic_extent`](/reference/span/dynamic_extent.md)`) || (LayoutLeftPaddedMapping::padding_value == dynamic_extent) || (padding_value == LayoutLeftPaddedMapping::padding_value)`が`true`であること。
+
+
+## 事前条件
+- (3) :
+    - `ext`の多次元インデクス空間のサイズを、`index_type`型で表現できること。
+    - `rank_ &amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`LEAST-MULTIPLE-AT-LEAST(padding_value, ext.extent(0))`を`index_type`型で表現できること。
+    - `rank_ &amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、半開区間`[1, rank_)`の全ての値`k`に対して`LEAST-MULTIPLE-AT-LEAST(padding_value, ext.extent(0))`と全ての`ext.extent(k)`を乗算した値を`index_type`型で表現できること。
+- (4) :
+    - `pad`の値を`index_type`型で表現できること。
+    - `extetns_type::`[`index-cast`](../../extents/index-cast.md)`(pad) &amp;gt; 0`
+    - `rank_ &amp;gt; 1`のとき、`LEAST-MULTIPLE-AT-LEAST(pad, ext.extent(0))`を`index_type`型で表現できること。
+    - `rank_ &amp;gt; 1`のとき、半開区間`[1, rank_)`の全ての値`k`に対して`LEAST-MULTIPLE-AT-LEAST(pad, ext.extent(0))`と全ての`ext.extent(k)`を乗算した値を`index_type`型で表現できること。
+    - `padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`padding_value == extetns_type::`[`index-cast`](../../extents/index-cast.md)`(pad)`
+- (5) :
+    - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`other.`[`stride`](../../layout_left/mapping/stride.md))`(1) == LEAST-MULTIPLE-AT-LEAST(padding_value, extents_type::`[`index-cast`](../../extents/index-cast.md)`(other.extents().extent(0)))`
+    - `other.`[`required_span_size()`](../../layout_left/mapping/required_span_size.md)を、`index_type`型で表現できること。
+- (6) :
+    - `rank_ &amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`other.`[`stride`](../../layout_left/mapping/stride.md)`(1) == LEAST-MULTIPLE-AT-LEAST(padding_value, extents_type::`[`index-cast`](../../extents/index-cast.md)`(other.extents().extent(0)))`
+    - `rank_ &amp;gt; 0`のとき、`other.`[`stride`](../../layout_stride/mapping/stride.md)`(0) == 1`
+    - `rank_ &amp;gt; 2`のとき、半開区間`[2, rank_)`の全ての値`r`に対して`other.stride(r) == (other.extents().fwd-prod-of-extents(r) / other.extents().extent(0)) * other.stride(1)`
+    - `other.`[`required_span_size()`](../../layout_stride/mapping/required_span_size.md)を、`index_type`型で表現できること。
+- (7) :
+    - `rank_ &amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`other.stride(1) == LEAST-MULTIPLE-AT-LEAST(padding_value, extents_type::`[`index-cast`](../../extents/index-cast.md)`(other.extent(0)))`
+    - `other.required_span_size()`を、`index_type`型で表現できること。
+- (8) :
+    - `other.required_span_size()`を、`index_type`型で表現できること。
+
+
+## 効果
+- (1) :
+    - `mapping(extents_type{})`と等価。
+- (3) :
+    - `ext`を用いて`extents_`を直接非リスト初期化する。
+    - `rank_ &amp;gt; 1`のとき、次の値を用いて`stride-1`を直接非リスト初期化する。
+        - `padding_value ==` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`ext.extent(0)`
+        - そうでなければ、`LEAST-MULTIPLE-AT-LEAST(padding_value, ext.extent(0))`
+- (4) :
+    - `ext`を用いて`extents_`を直接非リスト初期化する。
+    - `rank_ &amp;gt; 1`のとき、`LEAST-MULTIPLE-AT-LEAST(pad, ext.extent(0))`を用いて`stride-1`を直接非リスト初期化する。
+- (5) :
+    - `mapping(other.extents())`と等価。
+- (6), (7) :
+    - `other.extents()`を用いて`extents_`を直接非リスト初期化する。
+    - `rank_ &amp;gt; 1`のとき、`other.stride(1)`を用いて`stride-1`を直接非リスト初期化する。
+- (8) :
+    - `other.extents()`を用いて`extents_`を直接非リスト初期化する。
+
+
+## 例外
+- (1), (2), (8) : 投げない
+
+
+## explicitになる条件
+- (5) : `!`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;OtherExtents, extents_type&amp;gt;`
+- (6) : [`extents_type::rank()`](../../extents/rank.md) `&amp;gt; 0`
+- (7) : `rank_ &amp;gt; 1 &amp;amp;&amp;amp; (padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md) `|| LayoutLeftPaddedMapping::padding_value == dynamic_extent)`
+- (8) : `!`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;LayoutRightPaddedMapping::extents_type, extents_type&amp;gt;`
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+using Ext3x3 = std::extents&amp;lt;size_t, 3, 3&amp;gt;;
+using Ext2D = std::dims&amp;lt;2&amp;gt;;
+
+int main()
+{
+  // (1) : デフォルトコンストラクタ
+  {
+    std::layout_left_padded&amp;lt;4&amp;gt;::mapping&amp;lt;Ext3x3&amp;gt; map1s;
+    std::layout_left_padded&amp;lt;&amp;gt;::mapping&amp;lt;Ext3x3&amp;gt; map1d;
+    assert(map1s.stride(1) == 4);
+    assert(map1d.stride(1) == 3);
+  }
+  // (2) : コピーコンストラクタ
+  {
+    std::layout_left_padded&amp;lt;4&amp;gt;::mapping&amp;lt;Ext3x3&amp;gt; map2_a;
+    std::layout_left_padded&amp;lt;4&amp;gt;::mapping&amp;lt;Ext3x3&amp;gt; map2_b = map2_a;
+    assert(map2_a == map2_b);
+  }
+  // (3) : extentsから構築
+  {
+    Ext2D ext{3, 3};
+    std::layout_left_padded&amp;lt;&amp;gt;::mapping&amp;lt;Ext2D&amp;gt; map3 = ext;
+    assert(map3.extents() == ext);
+  }
+  // (4) : extentsとパディングから構築
+  {
+    Ext2D ext{3, 3};
+    std::layout_left_padded&amp;lt;&amp;gt;::mapping&amp;lt;Ext2D&amp;gt; map4{ext, 4};
+    assert(map4.extents() == ext &amp;amp;&amp;amp; map4.stride(1) == 4);
+  }
+  // (5) : layout_left::mappingからの変換コンストラクタ
+  {
+    std::layout_left::mapping src5{Ext3x3{}};
+    std::layout_left_padded&amp;lt;&amp;gt;::mapping&amp;lt;Ext2D&amp;gt; dst5 = src5;
+    assert(dst5.stride(1) == 3);
+  }
+  // (6) : layout_stride::mappingからの変換コンストラクタ
+  {
+    std::array&amp;lt;int, 2&amp;gt; strides{1, 4};
+    std::layout_stride::mapping src6{Ext3x3{}, strides};
+    std::layout_left_padded&amp;lt;&amp;gt;::mapping&amp;lt;Ext2D&amp;gt; dst6{src6};
+    assert(dst6.stride(1) == 4);
+  }
+  // (7) : 他layout_left_padded::mappingからの変換コンストラクタ
+  {
+    std::layout_left_padded&amp;lt;4&amp;gt;::mapping&amp;lt;Ext3x3&amp;gt; src7;
+    std::layout_left_padded&amp;lt;&amp;gt;::mapping&amp;lt;Ext2D&amp;gt; dst7{src7};
+    assert(dst7.extents() == Ext3x3{} &amp;amp;&amp;amp; dst7.stride(1) == 4);
+  }
+  // (8) : layout_right(_padded)::mappingからの変換コンストラクタ
+  {
+    using Ext1D = std::dims&amp;lt;1&amp;gt;;
+    std::layout_right::mapping&amp;lt;Ext1D&amp;gt; src8{Ext1D{5}};
+    std::layout_left_padded&amp;lt;&amp;gt;::mapping&amp;lt;Ext1D&amp;gt; dst8{src8};
+    assert(dst8.extent(0) == 5);
+  }
+}
+```
+* std::layout_left_padded&amp;lt;4&amp;gt;::mapping[color ff0000]
+* std::layout_left_padded&amp;lt;&amp;gt;::mapping[color ff0000]
+* std::layout_right::mapping[link ../../layout_right/mapping.md]
+* std::layout_stride::mapping[link ../../layout_stride/mapping.md]
+* std::dims[link ../../extents.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`layout_left::mapping`](../../layout_left/mapping.md)
+- [`layout_right::mapping`](../../layout_right/mapping.md)
+- [`layout_right_padded::mapping`](../../layout_right_padded/mapping.md)
+- [`layout_stride::mapping`](../../layout_stride/mapping.md)
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- layout_left_padded/mapping: コンストラクタ(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping/op_constructor.html"/>
      <id>5c9ff3ec896ede1d91fadd3f23023cfe7986693a:reference/mdspan/layout_right/mapping/op_constructor.md</id>
      <updated>2024-08-26T20:40:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping/op_constructor.md b/reference/mdspan/layout_right/mapping/op_constructor.md
index f226bf47f..a26d29527 100644
--- a/reference/mdspan/layout_right/mapping/op_constructor.md
+++ b/reference/mdspan/layout_right/mapping/op_constructor.md
@@ -22,7 +22,7 @@ constexpr explicit(!is_convertible_v&amp;lt;OtherExtents, extents_type&amp;gt;)
 
 template&amp;lt;class LayoutRightPaddedMapping&amp;gt;
 constexpr explicit(!is_convertible_v&amp;lt;typename LayoutRightPaddedMapping::extents_type, extents_type&amp;gt;)
-  mapping(const LayoutRightPaddedMapping&amp;amp;) noexcept;  // (7) C++26
+  mapping(const LayoutRightPaddedMapping&amp;amp; other) noexcept;  // (7) C++26
 
 template&amp;lt;class OtherExtents&amp;gt;
 constexpr explicit(extents_type::rank() &amp;gt; 0)
@@ -37,7 +37,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 ## 概要
 - (1) : デフォルトコンストラクタ
 - (2) : コピーコンストラクタ
-- (3) : [`extents`](../../extents.md)からの変換コンストラクタ
+- (3) : [`extents`](../../extents.md)から構築
 - (4) : 他`layout_right::mapping`からの変換コンストラクタ
 - (5) : [`layout_left::mapping`](../../layout_left/mapping.md)からの変換コンストラクタ
 - (6) : [`layout_stride::mapping`](../../layout_stride/mapping.md)からの変換コンストラクタ
@@ -58,7 +58,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 ## 適格要件
 - (7) : 以下を満たすとき、`extents_type::`[`static_extent`](../../extents/static_extent.md)`(`[`Extents::rank()`](../../extents/rank.md) `- 1)`が[`LayoutRightPaddedMapping::static-padding-stride`](../../layout_right_padded/mapping.md)に等しいこと。
     - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 1`、かつ
-    - `extents_type::`[`static_extent`](../../extents/static_extent.md)`(Extents::rank() - 1)`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくなく、かつ
+    - `extents_type::`[`static_extent`](../../extents/static_extent.md)`(Extents::rank() - 1) !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)、かつ
     - `LayoutRightPaddedMapping::static-padding-stride`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくないとき。
 
 
@@ -113,7 +113,7 @@ int main()
     std::layout_right::mapping&amp;lt;Ext3xN&amp;gt; map2_b = map2_a;
     assert(map2_a == map2_b);
   }
-  // (3) : extentsからの変換コンストラクタ
+  // (3) : extentsから構築
   {
     Ext3xN ext{4};
     std::layout_right::mapping&amp;lt;Ext3xN&amp;gt; map3 = ext;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mapping -- layout_left_padded/mapping: コンストラクタ(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded/mapping.html"/>
      <id>5c9ff3ec896ede1d91fadd3f23023cfe7986693a:reference/mdspan/layout_right_padded/mapping.md</id>
      <updated>2024-08-26T20:40:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded/mapping.md b/reference/mdspan/layout_right_padded/mapping.md
index d755227d7..55e170826 100644
--- a/reference/mdspan/layout_right_padded/mapping.md
+++ b/reference/mdspan/layout_right_padded/mapping.md
@@ -48,11 +48,11 @@ namespace std {
 - 値`padding_value`が`index_type`型で表現できること。
 - 以下を満たすとき、`LEAST-MULTIPLE-AT-LEAST(padding_value, last-static-extent)`が、`size_t`型および`index_type`型で表現できること。
     - `rank_ &amp;gt; 1`、かつ
-    - `padding_value`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくなく、かつ
+    - `padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)、かつ
     - `last-static-extent`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくないとき。
 - 以下を満たすとき、半開区間`[1, rank_ - 1)`の全ての値`k`に対して`LEAST-MULTIPLE-AT-LEAST(padding_value, ext.static_extent(rank_ - 1))`と全ての`ext.static_extent(k)`を乗じた結果が、`size_t`型および`index_type`型で表現できること。
     - `rank_ &amp;gt; 1`、かつ
-    - `padding_value`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくなく、かつ
+    - `padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)、かつ
     - 半開区間`[0, rank_)`の全ての値`k`に対して`extents_type::`[`static_extent`](../extents/static_extent.md)`(k)`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくないとき。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- layout_left_padded/mapping: コンストラクタ(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride/mapping/op_constructor.html"/>
      <id>5c9ff3ec896ede1d91fadd3f23023cfe7986693a:reference/mdspan/layout_stride/mapping/op_constructor.md</id>
      <updated>2024-08-26T20:40:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride/mapping/op_constructor.md b/reference/mdspan/layout_stride/mapping/op_constructor.md
index 0265e9235..df6009e6e 100644
--- a/reference/mdspan/layout_stride/mapping/op_constructor.md
+++ b/reference/mdspan/layout_stride/mapping/op_constructor.md
@@ -11,13 +11,13 @@ constexpr mapping() noexcept;  // (1)
 constexpr mapping(const mapping&amp;amp;) noexcept = default;  // (2)
 
 template&amp;lt;class OtherIndexType&amp;gt;
-  constexpr mapping(const extents_type&amp;amp;, span&amp;lt;OtherIndexType, rank_&amp;gt;) noexcept;  // (3)
+  constexpr mapping(const extents_type&amp;amp; e, span&amp;lt;OtherIndexType, rank_&amp;gt; s) noexcept;  // (3)
 
 template&amp;lt;class OtherIndexType&amp;gt;
-  constexpr mapping(const extents_type&amp;amp;, const array&amp;lt;OtherIndexType, rank_&amp;gt;&amp;amp;) noexcept;  // (4)
+  constexpr mapping(const extents_type&amp;amp; e, const array&amp;lt;OtherIndexType, rank_&amp;gt;&amp;amp; s) noexcept;  // (4)
 
 template&amp;lt;class StridedLayoutMapping&amp;gt;
-  constexpr explicit(see below) mapping(const StridedLayoutMapping&amp;amp;) noexcept;  // (5)
+  constexpr explicit(see below) mapping(const StridedLayoutMapping&amp;amp; other) noexcept;  // (5)
 ```
 * span[link /reference/span/span.md]
 * array[link /reference/array/array.md]
@@ -27,7 +27,7 @@ template&amp;lt;class StridedLayoutMapping&amp;gt;
 ## 概要
 - (1) : デフォルトコンストラクタ
 - (2) : コピーコンストラクタ
-- (3), (4) : [`extents`](../../extents.md)とストライド幅からの構築（定数`rank_`は次元数）
+- (3), (4) : [`extents`](../../extents.md)とストライド幅から構築（定数`rank_`は次元数）
 - (5) : [レイアウトマッピング](../../LayoutMapping.md)からの変換コンストラクタ
 
 
@@ -47,7 +47,7 @@ template&amp;lt;class StridedLayoutMapping&amp;gt;
 - (3), (4) :
     - 半開区間`[0, rank_)`の全ての`i`に対して、`s[i]`を`index_type`へ変換した結果が`0`より大きいこと。
     - [`REQUIRED-SPAN-SIZE`](required_span_size.md)`(e, s)`を`index_type`型で表現できること。
-    - `rank_`が`0`より大きいとき、半開区間`[1, rank_)`の全ての`i`に対して`j = i-1`として`s[Pi] &amp;gt;= s[Pj] * e.extents(Pj)`を満たすの整数値の組合せ`P`が存在すること。
+    - `rank_ &amp;gt; 0`のとき、半開区間`[1, rank_)`の全ての`i`に対して`j = i-1`として`s[Pi] &amp;gt;= s[Pj] * e.extents(Pj)`を満たすの整数値の組合せ`P`が存在すること。
 - (5) :
     - `StridedLayoutMapping`が[レイアウトマッピングポリシー](../../LayoutMappingPolicy.md)を満たす
     - `extents()`の全ての次元`r`に対して`other.stride(r) &amp;gt; 0`
@@ -66,16 +66,6 @@ template&amp;lt;class StridedLayoutMapping&amp;gt;
 
 
 ## explicitになる条件
-説明専用の変数テンプレート`is-mapping-of`を下記の通り定義する：
-
-```cpp
-template&amp;lt;class Layout, class Mapping&amp;gt;
-constexpr bool is-mapping-of = // exposition only
-  is_same_v&amp;lt;typename Layout::template mapping&amp;lt;typename Mapping::extents_type&amp;gt;, Mapping&amp;gt;;
-```
-* is-mapping-of[italic]
-* is_same_v[link /reference/type_traits/is_same.md]
-
 - (5) : `explicit`指定子の式は以下と等価
 ```cpp
 // C++23
@@ -93,10 +83,10 @@ constexpr bool is-mapping-of = // exposition only
    is-mapping-of&amp;lt;layout_stride, StridedLayoutMapping&amp;gt;))
 ```
 * is_convertible_v[link /reference/type_traits/is_convertible.md]
-* is-mapping-of[italic]
 * layout_left[link ../../layout_left.md]
 * layout_right[link ../../layout_right.md]
 * layout_stride[link ../../layout_stride.md]
+* is-mapping-of[link ../../is-mapping-of.md]
 * is-layout-left-padded-mapping-of[link ../../is-layout-left-padded-mapping-of.md]
 * is-layout-right-padded-mapping-of[link ../../is-layout-right-padded-mapping-of.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンパイラの実装状況 -- コンパイラの実装状況 : libc++のC++14ステータスページが削除されたのでリンク削除 #1346</title>
      <link href="https://cpprefjp.github.io/implementation-status.html"/>
      <id>4e4c416a32250b8ee845fde5e82b8159d23688a8:implementation-status.md</id>
      <updated>2024-08-26T07:00:59+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;コンパイラの実装状況&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;このページでは、C++のバージョンごとの言語機能を、どのコンパイラがどのバージョンからサポートしているかをまとめる。&lt;/p&gt;
&lt;p&gt;ライブラリ機能については、本サイトのリファレンスで各機能を参照してもらいたい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#cpp11&#34;&gt;C++11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cpp14&#34;&gt;C++14&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cpp17&#34;&gt;C++17&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cpp20&#34;&gt;C++20&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cpp23&#34;&gt;C++23&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cpp26&#34;&gt;C++26&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#cpp11&#34; id=&#34;cpp11&#34;&gt;C++11言語機能の実装状況&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;implementation.html#clang&#34;&gt;Clang&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;implementation.html#icc&#34;&gt;ICC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;implementation.html#visual_cpp&#34;&gt;MSVC&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;N2341: &lt;code&gt;&lt;a href=&#34;lang/cpp11/alignas.html&#34;&gt;alignas&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アライメント指定&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;15.0&lt;/td&gt;
&lt;td&gt;2015&lt;br /&gt;2003あるいはそれ以前からある&lt;code&gt;__declspec(align(x))&lt;/code&gt;構文で代替可能。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2341: &lt;code&gt;&lt;a href=&#34;lang/cpp11/alignof.html&#34;&gt;alignof&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アライメント取得&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;15.0&lt;/td&gt;
&lt;td&gt;2015&lt;br /&gt;2003あるいはそれ以前よりある&lt;code&gt;__alignof&lt;/code&gt;で代替可能。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N1984: &lt;a href=&#34;lang/cpp11/auto.html&#34;&gt;変数の型推論のためのauto&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型推論&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2343: &lt;code&gt;&lt;a href=&#34;lang/cpp11/decltype.html&#34;&gt;decltype&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式の型を取得&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;13.0&lt;/td&gt;
&lt;td&gt;2010 (partial)&lt;br /&gt; 2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N1653: C99互換のプリプロセッサ&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;lang/cpp11/variadic_macros.html&#34;&gt;可変引数マクロ&lt;/a&gt;、&lt;a href=&#34;lang/cpp11/pragma_operator.html&#34;&gt;Pragma演算子&lt;/a&gt;、&lt;code&gt;&lt;a href=&#34;lang/cpp11/func.html&#34;&gt;__func__&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;2005 (partial): 可変引数のみ &lt;code&gt;_Pragma&lt;/code&gt;の代わりに&lt;code&gt;__pragma&lt;/code&gt;が存在する。&lt;br /&gt; 2019 Update 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2235: &lt;code&gt;&lt;a href=&#34;lang/cpp11/constexpr.html&#34;&gt;constexpr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定数式&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;13.0 (partial)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2015 (partial)&lt;br /&gt; 2015 Update 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2346: &lt;a href=&#34;lang/cpp11/defaulted_and_deleted_functions.html&#34;&gt;関数の&lt;code&gt;default/delete&lt;/code&gt;宣言&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;自動定義される特殊関数の制御&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2013: ムーブコンストラクタ・ムーブ代入演算子の&lt;code&gt;default&lt;/code&gt;は不可&lt;br /&gt; 2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N1986: &lt;a href=&#34;lang/cpp11/delegating_constructors.html&#34;&gt;委譲コンストラクタ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタから他のコンストラクタに処理を委譲する&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2437: &lt;a href=&#34;lang/cpp11/explicit_conversion_operator.html&#34;&gt;明示的な型変換演算子のオーバーロード&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;明示的な型変換が行われる場合にのみ呼び出される演算子をオーバーロードできるようにする&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N1791: &lt;a href=&#34;lang/cpp11/extend_friend_targets.html&#34;&gt;&lt;code&gt;friend&lt;/code&gt;宣言できる対象を拡張&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;テンプレートパラメータや型の別名を&lt;code&gt;friend&lt;/code&gt;宣言&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1 (partial) &lt;br /&gt; 12.0&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N1987: &lt;code&gt;&lt;a href=&#34;lang/cpp11/extern_template.html&#34;&gt;extern template&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;テンプレートのインスタンス化抑止&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2540: &lt;a href=&#34;lang/cpp11/inheriting_constructors.html&#34;&gt;継承コンストラクタ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;基底クラスのコンストラクタを継承する&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;15.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2927: &lt;a href=&#34;lang/cpp11/lambda_expressions.html&#34;&gt;ラムダ式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数オブジェクトをその場に書く&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2010 (partial)&lt;br /&gt; 2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2657: &lt;a href=&#34;lang/cpp11/local_and_unnamed_type_as_template_arguments.html&#34;&gt;ローカル型と無名型を、テンプレート引数として使用することを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ローカルおよび無名として定義したクラスや列挙型を、テンプレート引数として渡せるようにする&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N1811: &lt;a href=&#34;lang/cpp11/long_long_type.html&#34;&gt;&lt;code&gt;long long&lt;/code&gt;型&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;64ビット以上の大きさを持つ整数型&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;2003&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2535: &lt;a href=&#34;lang/cpp11/inline_namespaces.html&#34;&gt;インライン名前空間&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ネストした名前空間に、透過的にアクセスする&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2249: &lt;a href=&#34;lang/cpp11/char16_32.html&#34;&gt;&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;UTF-16とUTF-32の文字型&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.1 (Windows: partial) &lt;br /&gt; 12.1 (GNU/Linux, macOS)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2015&lt;br /&gt; 2010より組み込み型ではなく型の別名として存在する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2442: &lt;a href=&#34;lang/cpp11/utf8_string_literals.html&#34;&gt;UTF-8文字列リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;char&lt;/code&gt;の文字列をUTF-8エンコーディングするプレフィックス&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;12.1 (Windows: partial) &lt;br /&gt; 12.1 (GNU/Linux, macOS)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2442: &lt;a href=&#34;lang/cpp11/raw_string_literals.html&#34;&gt;生文字列リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字列リテラルにRプレフィックスを付けることで、エスケープシーケンスを無視する&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2765: &lt;a href=&#34;lang/cpp11/user_defined_literals.html&#34;&gt;ユーザー定義リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;リテラルのサフィックスをユーザー定義する&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;15.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2541: &lt;a href=&#34;lang/cpp11/trailing_return_types.html&#34;&gt;戻り値の型を後置する関数宣言構文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;以下のような形式での関数宣言&lt;br /&gt; &lt;code&gt;auto f(arg_types...) -&amp;gt; return_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2431: &lt;code&gt;&lt;a href=&#34;lang/cpp11/nullptr.html&#34;&gt;nullptr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ヌルポインタを表すポインタリテラル&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N1757: &lt;a href=&#34;lang/cpp11/right_angle_brackets.html&#34;&gt;テンプレートでの連続した右山カッコを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vector&amp;lt;basic_string&amp;lt;char&amp;gt;&amp;gt;&lt;/code&gt;のように、&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;をスペースを空けずに記述可能にする&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;2005&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2118: &lt;a href=&#34;lang/cpp11/rvalue_ref_and_move_semantics.html&#34;&gt;右辺値参照・ムーブセマンティクス&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;右辺値によるオーバーロード、およびそれによるリソースの所有権移動&lt;/td&gt;
&lt;td&gt;4.3 (partial)&lt;br /&gt; 4.6&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2010 (partial) ムーブコンストラクタと代入演算子の暗黙定義に対応していない。&lt;br /&gt; 2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N1720: &lt;a href=&#34;lang/cpp11/static_assert.html&#34;&gt;コンパイル時アサート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時に条件式が真であることを表明する&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2347: &lt;a href=&#34;lang/cpp11/scoped_enum.html#extended-unscoped-enum&#34;&gt;&lt;code&gt;enum&lt;/code&gt;の先行宣言&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;11.1 (partial)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2347: &lt;a href=&#34;lang/cpp11/scoped_enum.html&#34;&gt;スコープを持つ列挙型&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;強い型付けとスコープを持つ列挙型&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1 (partial)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2258: &lt;a href=&#34;lang/cpp11/alias_templates.html&#34;&gt;エイリアステンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;テンプレートによって型の別名を定義する&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;12.1&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2544: &lt;a href=&#34;lang/cpp11/unrestricted_unions.html&#34;&gt;共用体でクラスオブジェクトをもつことを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;共用体のメンバ変数として、クラスオブジェクトを持つ&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;14.0(Linux系OSおよびMacのみ。Windowsは非対応)&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2242: &lt;a href=&#34;lang/cpp11/variadic_templates.html&#34;&gt;可変引数テンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;任意の数のテンプレートパラメータを受け取れるようにする&lt;/td&gt;
&lt;td&gt;4.3 (partial)&lt;br /&gt; 4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.1&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2930: &lt;a href=&#34;lang/cpp11/range_based_for.html&#34;&gt;範囲for文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;配列やコンテナといった範囲を表すオブジェクトを、簡潔に走査する&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;13.0&lt;/td&gt;
&lt;td&gt;2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2928: &lt;a href=&#34;lang/cpp11/override_final.html&#34;&gt;&lt;code&gt;override&lt;/code&gt;と&lt;code&gt;final&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバ関数のオーバーライド指定、および派生クラスでのオーバーロードを禁止する指定&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2005 (partial): &lt;code&gt;override&lt;/code&gt;のみ。&lt;code&gt;final&lt;/code&gt;の代わりにsealedが存在する。ただし両者ともデストラクタには指定できない。&lt;br /&gt; 2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2761: &lt;a href=&#34;lang/cpp11/attributes.html&#34;&gt;属性構文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[[attr]]&lt;/code&gt;構文による、クラス、関数、変数の属性指定&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;12.1&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2439: &lt;a href=&#34;lang/cpp11/ref_qualifier_for_this.html&#34;&gt;メンバ関数の左辺値／右辺値修飾&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;オブジェクトが左辺値／右辺値の場合のみ呼び出し可能であることの指定&lt;/td&gt;
&lt;td&gt;4.8.1&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2756: &lt;a href=&#34;lang/cpp11/non_static_data_member_initializers.html&#34;&gt;非静的メンバ変数の初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバ変数を、宣言と同時に初期値指定する&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2672: &lt;a href=&#34;lang/cpp11/initializer_lists.html&#34;&gt;初期化子リスト&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;波カッコによる初期化をユーザー定義する。&lt;code&gt;vector&amp;lt;int&amp;gt; v = {1, 2, 3};&lt;/code&gt;など。&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2672: &lt;a href=&#34;lang/cpp11/uniform_initialization.html&#34;&gt;一様初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ呼び出しを波カッコで行う。 &lt;code&gt;T x { a, b, c };&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;13.0(partial)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N3050: &lt;code&gt;&lt;a href=&#34;lang/cpp11/noexcept.html&#34;&gt;noexcept&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数の例外指定、例外を投げる可能性のある式かbool値を返す演算子&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;13.0(partial)&lt;br /&gt;14.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2634: &lt;a href=&#34;lang/cpp11/sfinae_expressions.html&#34;&gt;任意の式によるSFINAE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;特定の式が有効かどうかで、その関数をオーバーロード解決に含めるかどうかを決定する&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2015 Update 1 (partial)&lt;br /&gt; 2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2659: &lt;a href=&#34;lang/cpp11/thread_local_storage.html&#34;&gt;スレッドローカルストレージ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;スレッドごとに異なる静的記憶域に保持される変数&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;11.1 (partial)&lt;/td&gt;
&lt;td&gt;2010&lt;br /&gt; &lt;code&gt;__declspec(thread)&lt;/code&gt;属性での部分サポート&lt;br /&gt; 2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2660: &lt;a href=&#34;lang/cpp11/static_initialization_thread_safely.html&#34;&gt;ブロックスコープを持つ&lt;code&gt;static&lt;/code&gt;変数初期化のスレッドセーフ化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数ローカルで定義した&lt;code&gt;static&lt;/code&gt;変数の初期化を、スレッドセーフにする&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.0 (Lnux/macOS)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;各処理系のC++11実装状況ページ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全体的な対応状況： &lt;a href=&#34;http://web.archive.org/web/20160327011707/https://wiki.apache.org/stdcxx/C++0xCompilerSupport&#34; target=&#34;_blank&#34;&gt;C++0xCompilerSupport&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GCC： &lt;a href=&#34;https://gcc.gnu.org/projects/cxx-status.html#cxx11&#34; target=&#34;_blank&#34;&gt;C++11 Support in GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libstdc++ : &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#status.iso.2011&#34; target=&#34;_blank&#34;&gt;C++ 2011&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clang： &lt;a href=&#34;http://clang.llvm.org/cxx_status.html&#34; target=&#34;_blank&#34;&gt;C++98 and C++11 Support in Clang&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://clang.llvm.org/cxx_dr_status.html&#34; target=&#34;_blank&#34;&gt;C++ Defect Report Support in Clang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ICC : &lt;a href=&#34;https://software.intel.com/en-us/articles/c0x-features-supported-by-intel-c-compiler&#34; target=&#34;_blank&#34;&gt;C++11 Features Supported by Intel® C++ Compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual C++ (MSVC):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/cpp/visual-cpp-language-conformance&#34; target=&#34;_blank&#34;&gt;Visual C++ 言語への準拠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/vcblog/2018/05/07/announcing-msvc-conforms-to-the-c-standard/&#34; target=&#34;_blank&#34;&gt;Announcing: MSVC Conforms to the C++ Standard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#cpp14&#34; id=&#34;cpp14&#34;&gt;C++14言語機能の実装状況&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;implementation.html#clang&#34;&gt;Clang&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;implementation.html#icc&#34;&gt;ICC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;implementation.html#visual_cpp&#34;&gt;MSVC&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;N3472: &lt;a href=&#34;lang/cpp14/binary_literals.html&#34;&gt;2進数リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2進数を表す&lt;code&gt;0b&lt;/code&gt; or &lt;code&gt;0B&lt;/code&gt;プレフィックスを付けた数値リテラルの記述を可能とする&lt;/td&gt;
&lt;td&gt;4.3(GNU)&lt;br /&gt; 4.9&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N3638: &lt;a href=&#34;lang/cpp14/return_type_deduction_for_normal_functions.html&#34;&gt;通常関数の戻り値型推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の戻り値型を&lt;code&gt;auto&lt;/code&gt;にすることで、&lt;code&gt;return&lt;/code&gt;文から戻り値の型を推論させる&lt;/td&gt;
&lt;td&gt;4.8(partial)&lt;br /&gt;4.9&lt;/td&gt;
&lt;td&gt;3.3(partial)&lt;br /&gt; 3.4&lt;/td&gt;
&lt;td&gt;15.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N3648: &lt;a href=&#34;lang/cpp14/initialize_capture.html&#34;&gt;ラムダ式の初期化キャプチャ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャプチャに代入構文を導入し、一つの変数に複数のキャプチャ方法を指定可能にする&lt;/td&gt;
&lt;td&gt;4.9&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;15.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N3649: &lt;a href=&#34;lang/cpp14/generic_lambdas.html&#34;&gt;ジェネリックラムダ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ラムダ式のパラメータを&lt;code&gt;auto&lt;/code&gt;にすることで、ジェネリックな関数呼び出し演算子を持つ関数オブジェクトを生成する&lt;/td&gt;
&lt;td&gt;4.9&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N3651: &lt;a href=&#34;lang/cpp14/variable_templates.html&#34;&gt;変数テンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;変数定義時のテンプレート指定を可能にする。&lt;/td&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2015 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N3652: &lt;a href=&#34;lang/cpp14/relaxing_constraints_on_constexpr.html&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;関数内での条件分岐とループの文を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if&lt;/code&gt;文、&lt;code&gt;switch&lt;/code&gt;文による条件分岐の許可。&lt;br /&gt;&lt;code&gt;for&lt;/code&gt;文、&lt;code&gt;while&lt;/code&gt;文、&lt;code&gt;do-while&lt;/code&gt;文によるループの許可。&lt;br /&gt;&lt;code&gt;void&lt;/code&gt;戻り値型の許可&lt;br /&gt;初期化を伴う変数宣言の許可。&lt;br /&gt;変数書き換えの許可。&lt;/td&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;td&gt;3.3(partial) &lt;br /&gt; 3.4&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N3653: &lt;a href=&#34;lang/cpp14/brace_elision_in_array_temporary_initialization.html&#34;&gt;宣言時のメンバ初期化を持つ型の集成体初期化を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一様初期化と初期化子リストを組み合わせた際、二重に波カッコが必要となっていた仕様を緩和し、波カッコを省略できるようにする&lt;/td&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N3760: &lt;a href=&#34;lang/cpp14/deprecated_attr.html&#34;&gt;&lt;code&gt;[[deprecated]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非推奨の機能であることを示す属性。&lt;/td&gt;
&lt;td&gt;4.9&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;15.0&lt;br /&gt; (Linux/Mac OS)&lt;/td&gt;
&lt;td&gt;2015&lt;br /&gt;それ以前は&lt;code&gt;__declspec(deprecated)&lt;/code&gt;で代替可能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N3781: &lt;a href=&#34;lang/cpp14/digit_separators.html&#34;&gt;数値リテラルの桁区切り文字&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;シングルクォーテーションで数値リテラルを桁区切りする。&lt;/td&gt;
&lt;td&gt;4.9&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N3778: &lt;a href=&#34;lang/cpp14/sized_deallocation.html&#34;&gt;サイズ付きデアロケーション&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;サイズをとる&lt;code&gt;delete&lt;/code&gt;演算子のオーバーロードを許可する。&lt;/td&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;各処理系のC++14実装状況ページ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: &lt;a href=&#34;https://gcc.gnu.org/projects/cxx-status.html#cxx14&#34; target=&#34;_blank&#34;&gt;C++14 Support in GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libstdc++: &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#status.iso.2014&#34; target=&#34;_blank&#34;&gt;C++ 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clang: &lt;a href=&#34;http://clang.llvm.org/cxx_status.html&#34; target=&#34;_blank&#34;&gt;C++98, C++11, and C++14 Support in Clang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual C++ (MSVC):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/cpp/visual-cpp-language-conformance&#34; target=&#34;_blank&#34;&gt;Visual C++ 言語への準拠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/vcblog/2018/05/07/announcing-msvc-conforms-to-the-c-standard/&#34; target=&#34;_blank&#34;&gt;Announcing: MSVC Conforms to the C++ Standard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ICC: &lt;a href=&#34;https://software.intel.com/en-us/articles/c14-features-supported-by-intel-c-compiler&#34; target=&#34;_blank&#34;&gt;C++14 Features Supported by Intel C++ Compiler&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://software.intel.com/en-us/forums/topic/549502&#34; target=&#34;_blank&#34;&gt;Intel (R) Parallel Studio XE 2016 Beta program has begun&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#cpp17&#34; id=&#34;cpp17&#34;&gt;C++17言語機能の実装状況&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;implementation.html#clang&#34;&gt;Clang&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;implementation.html#icc&#34;&gt;ICC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;implementation.html#visual_cpp&#34;&gt;MSVC&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;N3928: &lt;a href=&#34;lang/cpp17/extending_static_assert.html&#34;&gt;メッセージなしの&lt;code&gt;static_assert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デフォルトの表明メッセージを使用する&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.5&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N4086: &lt;a href=&#34;lang/cpp17/removing_trigraphs.html&#34;&gt;トライグラフを削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;td&gt;3.5&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N4051: &lt;a href=&#34;lang/cpp17/allow_typename_in_a_template_template_parameter.html&#34;&gt;テンプレートテンプレートパラメータに&lt;code&gt;typename&lt;/code&gt;を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;class&lt;/code&gt;キーワードしか使用できなかった部分に、&lt;code&gt;typename&lt;/code&gt;を許可&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;td&gt;3.5&lt;/td&gt;
&lt;td&gt;17.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N3922: &lt;a href=&#34;lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.html&#34;&gt;単一要素の波カッコ初期化を非配列とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;initializer_list&amp;lt;T&amp;gt;&lt;/code&gt;だったのを&lt;code&gt;T&lt;/code&gt;に変更&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;3.8&lt;/td&gt;
&lt;td&gt;17.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N4295: &lt;a href=&#34;lang/cpp17/folding_expressions.html&#34;&gt;畳み込み式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;パラメータパックに対する2項演算の集積処理&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.6&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N4267: &lt;a href=&#34;lang/cpp17/utf8_character_literals.html&#34;&gt;UTF-8文字リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字列リテラルだけでなく、文字リテラルにもUTF-8指定できるようにする&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.6&lt;/td&gt;
&lt;td&gt;17.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N4230: &lt;a href=&#34;lang/cpp17/nested_namespace.html&#34;&gt;入れ子名前空間の定義&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;namespace A::B {}&lt;/code&gt;のように、入れ子の名前空間を簡単に定義できるようにする&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.6&lt;/td&gt;
&lt;td&gt;17.0&lt;/td&gt;
&lt;td&gt;2015 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N4266: &lt;a href=&#34;lang/cpp17/attributes_for_namespaces_and_enumerators.html&#34;&gt;名前空間と列挙子に属性の付加を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;名前空間の定義と、列挙型の各要素の定義に、属性を付けられるようにする&lt;/td&gt;
&lt;td&gt;名前空間は4.0&lt;br /&gt;列挙子は6&lt;/td&gt;
&lt;td&gt;3.6&lt;/td&gt;
&lt;td&gt;17.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N4268: &lt;a href=&#34;lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.html&#34;&gt;全ての非型テンプレート引数の定数式評価を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ポインタの定数式評価として、配列からポインタへの変換や、関数から関数ポインタへの変換などを許可&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.6&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0001R1: &lt;a href=&#34;lang/cpp17/remove_deprecated_use_of_the_register_keyword.html&#34;&gt;非推奨だった&lt;code&gt;register&lt;/code&gt;キーワードを削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.8&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0002R1: &lt;a href=&#34;lang/cpp17/remove_deprecated_increment_of_bool.html&#34;&gt;非推奨だった&lt;code&gt;bool&lt;/code&gt;型オブジェクトに対するインクリメントの仕様を削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.8&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0012R1: &lt;a href=&#34;lang/cpp17/exception_spec_be_part_of_the_type_system.html&#34;&gt;例外仕様を型システムの一部にする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0061R1: &lt;a href=&#34;lang/cpp17/has_include.html&#34;&gt;プリプロセッサでの条件式&lt;code&gt;__has_include&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;対象のインクルードファイルが存在するかをプリプロセス時に判定する&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0136R1: &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0136r1.html&#34; target=&#34;_blank&#34;&gt;継承コンストラクタの新仕様&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デフォルト引数を引き継ぐようにした&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0188R1: &lt;a href=&#34;lang/cpp17/fallthrough.html&#34;&gt;&lt;code&gt;[[fallthrough]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;case&lt;/code&gt;節で&lt;code&gt;break&lt;/code&gt;や&lt;code&gt;return&lt;/code&gt;を書かなかった場合に、それが意図したフォールスルーであることをコンパイラに伝える属性&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0189R1: &lt;a href=&#34;lang/cpp17/nodiscard.html&#34;&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の戻り値を無視してはならないことをユーザーに伝える属性&lt;/td&gt;
&lt;td&gt;4.8からは&lt;code&gt;[[gnu::warn_unused_result]]&lt;/code&gt;を使用すること&lt;br /&gt; 7からサポート&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0212R1: &lt;a href=&#34;lang/cpp17/maybe_unused.html&#34;&gt;&lt;code&gt;[[maybe_unused]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用しない可能性がある変数であることをコンパイラに伝える属性&lt;/td&gt;
&lt;td&gt;4.8からは&lt;code&gt;[[gnu::unused]]&lt;/code&gt;を使用すること&lt;br /&gt; 7からサポート&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0017R1: &lt;a href=&#34;lang/cpp17/extension_to_aggregate_initialization.html&#34;&gt;基底クラスのメンバ変数を集成体初期化するための波カッコを省略できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;基底クラスのメンバを集成体初期化するために、&lt;code&gt;derived d {{42}};&lt;/code&gt;の代わりに&lt;code&gt;derived d {42};&lt;/code&gt;と書けるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0170R1: &lt;a href=&#34;lang/cpp17/constexpr_lambda.html&#34;&gt;ラムダ式を&lt;code&gt;constexpr&lt;/code&gt;として使用できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ラムダ式の関数オブジェクトが定数式の文脈で使用された場合に、それがコンパイル時に評価されるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0184R0: &lt;a href=&#34;lang/cpp17/generalizing_the_range-based_for_loop.html&#34;&gt;範囲for文のイテレータ型が一致しないことを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;begin()&lt;/code&gt;と&lt;code&gt;end()&lt;/code&gt;が異なるイテレータ型を返せるようにすることで、終端イテレータを定義しやすくする&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0018R3: &lt;a href=&#34;lang/cpp17/lambda_capture_of_this_by_value.html&#34;&gt;ラムダ式での&lt;code&gt;*this&lt;/code&gt;のコピーキャプチャ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャプチャリストに&lt;code&gt;*this&lt;/code&gt;を指定することで、&lt;code&gt;*this&lt;/code&gt;をコピーキャプチャする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0138R2: &lt;a href=&#34;lang/cpp17/construction_enum_class_values.html&#34;&gt;&lt;code&gt;enum class&lt;/code&gt;変数の初期値として整数を指定する際の規則を調整&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャストを使用することなく整数を初期値として使用し、&lt;code&gt;E e{0};&lt;/code&gt;のような初期化を許可&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0245R1: &lt;a href=&#34;lang/cpp17/hexadecimal_floating_literals.html&#34;&gt;16進浮動小数点数リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;hexfloat&lt;/code&gt;マニピュレータや&lt;code&gt;printf()&lt;/code&gt;の16進数出力に合わせて、浮動小数点数のリテラルも16進数表記できるようにする&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0028R4: &lt;a href=&#34;lang/cpp17/using_attribute_namespaces.html&#34;&gt;属性の名前空間指定に繰り返しをなくす&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[[using CC: opt(1), debug]]&lt;/code&gt;のように属性の名前空間宣言をまとめて行う&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0035R4: &lt;a href=&#34;lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.html&#34;&gt;アライメント指定されたデータの動的メモリ確保&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;operator new&lt;/code&gt;と&lt;code&gt;operator delete&lt;/code&gt;でアライメント値を取得できるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0091R3: &lt;a href=&#34;lang/cpp17/type_deduction_for_class_templates.html&#34;&gt;クラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタの引数からクラスのテンプレート引数を推論できるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0127R2: &lt;a href=&#34;lang/cpp17/declaring_non-type_template_arguments_with_auto.html&#34;&gt;非型テンプレート引数の&lt;code&gt;auto&lt;/code&gt;宣言&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;typename T, T x&amp;gt;&lt;/code&gt;という冗長なコードを&lt;code&gt;template &amp;lt;auto x&amp;gt;&lt;/code&gt;のようにして受けられるようにし、&lt;br /&gt; &lt;code&gt;X&amp;lt;3&amp;gt;; X&amp;lt;true&amp;gt;; X&amp;lt;&#39;a&#39;&amp;gt;&lt;/code&gt;のように定数を簡潔に渡せるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0135R1: &lt;a href=&#34;lang/cpp17/guaranteed_copy_elision.html&#34;&gt;値のコピー省略を保証&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一時オブジェクトをコピーする際に、単純な値を持つクラスであればコピーが省略されることを保証する&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0145R3: &lt;a href=&#34;lang/cpp17/expression_evaluation_order.html&#34;&gt;厳密な式の評価順&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;式の項が評価される順序を厳密に規定する。&lt;br /&gt; &lt;code&gt;b = a;&lt;/code&gt;の式が右から順番(a, bの順)に評価される&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0283R2: &lt;a href=&#34;lang/cpp17/non_standard_attributes.html&#34;&gt;不明な属性を無視する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;実装が知らない名前空間の属性は無視する&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0292R2: &lt;a href=&#34;lang/cpp17/if_constexpr.html&#34;&gt;constexpr if文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if constexpr(cond)&lt;/code&gt;とすることで、そのif文はコンパイル時に処理される&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0386R2: &lt;a href=&#34;lang/cpp17/inline_variables.html&#34;&gt;インライン変数&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;インライン指定を関数だけでなく変数にも指定できるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0217R3: &lt;a href=&#34;lang/cpp17/structured_bindings.html&#34;&gt;構造化束縛&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;タプルやユーザー定義型を分解して受け取れるようにする&lt;br /&gt; &lt;code&gt;tuple&amp;lt;int, string&amp;gt; f();&lt;/code&gt; &lt;br /&gt; &lt;code&gt;const auto [a, b] = f(); // aはintの値、bはstringの値&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0305R1: &lt;a href=&#34;lang/cpp17/selection_statements_with_initializer.html&#34;&gt;if文とswitch文の条件式と初期化を分離&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if (init; condition)&lt;/code&gt;のように初期化と条件式を分けて記述できるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0137R1: &lt;a href=&#34;lang/cpp17/replacement_of_class_objects_containing_reference_members.html&#34;&gt;参照メンバをもつクラスの置き換え&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;参照型メンバや&lt;code&gt;const&lt;/code&gt;メンバ変数を含むクラスについてこれまで結果は未定義とされていた配置&lt;code&gt;new&lt;/code&gt;によるオブジェクトの置き換えを条件付きで可能とする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0003R5: &lt;a href=&#34;lang/cpp17/remove_deprecated_exception_specifications.html&#34;&gt;非推奨だった例外仕様を削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;noexcept&lt;/code&gt;が入ったことによって非推奨になった&lt;code&gt;throw&lt;/code&gt;キーワードによる例外仕様を削除&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0195R2: &lt;a href=&#34;lang/cpp17/pack_expansions_in_using.html&#34;&gt;using宣言でのパック展開&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;パラメータパックの型を基底クラスとして指定した場合に、&lt;code&gt;using&lt;/code&gt;宣言に基底クラスのパラメータパックを指定できるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0512R0: &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0512r0.pdf&#34; target=&#34;_blank&#34;&gt;クラステンプレート引数の推論仕様を調整&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0490R0: &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0490r0.html&#34; target=&#34;_blank&#34;&gt;Committee Draftに対するNational Body Commentへの対応&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0522R0: &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0522r0.html&#34; target=&#34;_blank&#34;&gt;テンプレートテンプレート引数のマッチングにおいて、互換性のあるテンプレートを除外&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4 (partial)&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;各処理系のC++17実装状況ページ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: &lt;a href=&#34;https://gcc.gnu.org/projects/cxx-status.html#cxx17&#34; target=&#34;_blank&#34;&gt;C++17 Support in GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clang: &lt;a href=&#34;http://clang.llvm.org/cxx_status.html&#34; target=&#34;_blank&#34;&gt;C++ Support in Clang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libc++ : &lt;a href=&#34;https://libcxx.llvm.org/Status/Cxx17.html&#34; target=&#34;_blank&#34;&gt;libc++ C++17 Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual C++ (MSVC):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/cpp/visual-cpp-language-conformance&#34; target=&#34;_blank&#34;&gt;Visual C++ 言語への準拠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/vcblog/2018/05/07/announcing-msvc-conforms-to-the-c-standard/&#34; target=&#34;_blank&#34;&gt;Announcing: MSVC Conforms to the C++ Standard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ICC: &lt;a href=&#34;https://software.intel.com/en-us/articles/c17-features-supported-by-intel-c-compiler&#34; target=&#34;_blank&#34;&gt;C++17 Features Supported by Intel C++ Compiler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#cpp20&#34; id=&#34;cpp20&#34;&gt;C++20言語機能の実装状況&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;implementation.html#clang&#34;&gt;Clang&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;implementation.html#icc&#34;&gt;ICC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;implementation.html#visual_cpp&#34;&gt;MSVC&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;P0683R1: &lt;a href=&#34;lang/cpp20/default_member_initializers_for_bit_fields.html&#34;&gt;ビットフィールドのメンバ変数初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ビットフィールドメンバ変数のデフォルト値を設定する構文を追加する&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0409R2: &lt;a href=&#34;lang/cpp20/allow_lambda_capture_equal_this.html&#34;&gt;ラムダ式のキャプチャとして&lt;code&gt;[=, this]&lt;/code&gt;を許可する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デフォルトコピーキャプチャと&lt;code&gt;this&lt;/code&gt;ポインタのコピーキャプチャを両方指定できるようにする&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0806R2: &lt;a href=&#34;lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.html&#34;&gt;&lt;code&gt;[=]&lt;/code&gt;による&lt;code&gt;this&lt;/code&gt;の暗黙のキャプチャを非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コピーのデフォルトキャプチャでは、&lt;code&gt;this&lt;/code&gt;ポインタをキャプチャされなくする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0428R2: &lt;a href=&#34;lang/cpp20/familiar_template_syntax_for_generic_lambdas.html&#34;&gt;ジェネリックラムダのテンプレート構文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ジェネリックラムダでテンプレートパラメータを定義できるようにする&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0704R1: &lt;a href=&#34;lang/cpp20/fixing_const_qualified_pointers_to_members.html&#34;&gt;&lt;code&gt;const&lt;/code&gt;修飾されたメンバポインタの制限を修正&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.*&lt;/code&gt;演算子での左辺値の&lt;code&gt;const&lt;/code&gt;メンバ関数呼び出しを許可する&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0306R4: &lt;a href=&#34;lang/cpp20/va_opt.html&#34;&gt;可変引数が空でない場合のトークン置換&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;プリプロセッサの置換で可変引数が空の場合に余計なカンマが付いてしまう問題に対処&lt;/td&gt;
&lt;td&gt;8 (partial, &lt;code&gt;#__VA_OPT__&lt;/code&gt;による文字列化が未サポート)&lt;/td&gt;
&lt;td&gt;6.0&lt;br /&gt; 9.0 (&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1042r1.html&#34; target=&#34;_blank&#34;&gt;p1042&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0329R4: &lt;a href=&#34;lang/cpp20/designated_initialization.html&#34;&gt;指示付き初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;波カッコによる集成体初期化でメンバ名を指定して初期化できるようにする&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6.0 (partial)&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0734R0: &lt;a href=&#34;lang/cpp20/concepts.html&#34;&gt;コンセプト&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;テンプレートパラメータに対する制約を行う&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;10.0 (partial)&lt;/td&gt;
&lt;td&gt;2021.6&lt;/td&gt;
&lt;td&gt;2019 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0614R1: &lt;a href=&#34;lang/cpp20/range-based_for_statements_with_initializer.html&#34;&gt;初期化式をともなう範囲for文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;範囲for文スコープで使用する変数の初期化のための構文を追加&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;2021.7&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0588R1: &lt;a href=&#34;lang/cpp20/simplifying_implicit_lambda_capture.html&#34;&gt;暗黙のラムダキャプチャを簡略化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ラムダ式のキャプチャに関する仕様整理&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0846R0: &lt;a href=&#34;lang/cpp20/adl_and_function_templates_that_are_not_visible.html&#34;&gt;関数テンプレートに明示的に型指定した場合にADLで見つからない問題を修正&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;名前空間内の関数テンプレートをテンプレート引数指定かつ非修飾・ADLで正しく呼び出せるよう修正&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0641R2: &lt;a href=&#34;lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.html&#34;&gt;デフォルトのコピーコンストラクタと非&lt;code&gt;const&lt;/code&gt;なコンストラクタが衝突する問題を修正&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非&lt;code&gt;const&lt;/code&gt;なオブジェクトをとるコンストラクタを定義すると、そのクラスをラップしたクラスのコピーコンストラクタが&lt;a class=&#34;cpprefjp-defined-word&#34;&gt;不適格&lt;/a&gt;になってしまう問題を修正&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0859R0: &lt;a href=&#34;lang/cpp20/less_eager_instantiation_of_constexpr_functions.html&#34;&gt;評価されない文脈での定数式評価によって特殊メンバ関数がインスタンス化されることを規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sizeof&lt;/code&gt;や&lt;code&gt;decltype&lt;/code&gt;などの評価されない文脈において定数式評価を行った場合に、ムーブコンストラクタのような特殊メンバ関数が定義されることを規定&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Partial in 2019 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0515R3: &lt;a href=&#34;lang/cpp20/consistent_comparison.html&#34;&gt;&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;/&lt;code&gt;==&lt;/code&gt;による比較演算子の自動定義&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;三方比較演算子によって比較演算子の自動生成を行うようにする&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;8.0 (partial)&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0692R1: &lt;a href=&#34;lang/cpp20/access_checking_on_specializations.html&#34;&gt;特殊化のアクセスチェック&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;partial&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0624R2: &lt;a href=&#34;lang/cpp20/default_constructible_and_assignable_stateless_lambdas.html&#34;&gt;状態を持たないラムダ式を、デフォルト構築可能、代入可能とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャプチャしていないラムダ式をデフォルト構築・代入可能にする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0767R1: &lt;a href=&#34;lang/cpp20/deprecate_pod.html&#34;&gt;PODを非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;PODという用語を非推奨化する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0315R4: &lt;a href=&#34;lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.html&#34;&gt;評価されない文脈でのラムダ式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;評価されない文脈でもラムダ式を書くことができるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;Partial&lt;/td&gt;
&lt;td&gt;2024.0&lt;/td&gt;
&lt;td&gt;2019 Update 8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0840R2: &lt;a href=&#34;lang/cpp20/language_support_for_empty_objects.html&#34;&gt;空オブジェクトを言語サポート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[[no_unique_address]]&lt;/code&gt;属性を導入し、空の型のオブジェクトをほかのオブジェクトと共有する最適化を許可する&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 9 &lt;sup&gt;&lt;a href=&#34;#note-t1-1&#34; id=&#34;note_ref-t1-1&#34;&gt;†1&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0962R1: &lt;a href=&#34;lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.html&#34;&gt;範囲for文がカスタマイゼーションポイントを見つけるルールを緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;begin()&lt;/code&gt;/&lt;code&gt;end()&lt;/code&gt;メンバ関数のどちらかが見つからなかった場合に非メンバ関数の&lt;code&gt;begin()&lt;/code&gt;/&lt;code&gt;end()&lt;/code&gt;を探しにいく&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0969R0: &lt;a href=&#34;lang/cpp20/allow_structured_bindings_to_accessible_members.html&#34;&gt;friend指定された関数内から構造化束縛を使用して非公開メンバ変数にアクセスすることを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;構造化束縛の仕様として公開メンバ変数のみを取り出せるようになっていたが、friend指定された関数からは非公開メンバ変数にもアクセスできるようにする&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0961R1: &lt;a href=&#34;lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.html&#34;&gt;構造化束縛がカスタマイゼーションポイントを見つけるルールを緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非テンプレートの&lt;code&gt;get()&lt;/code&gt;メンバ関数が見つかった場合は、非メンバ関数の&lt;code&gt;get()&lt;/code&gt;を探しにいく&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0634R3: &lt;a href=&#34;lang/cpp20/down_with_typename.html&#34;&gt;型の文脈で&lt;code&gt;typename&lt;/code&gt;の省略を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型しか現れない文脈では、依存名を解決するための&lt;code&gt;typename&lt;/code&gt;キーワードを省略できるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;2023.1&lt;/td&gt;
&lt;td&gt;2019 Update 9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0780R2: &lt;a href=&#34;lang/cpp20/allow_pack_expansion_in_lambda_init_capture.html&#34;&gt;ラムダ式の初期化キャプチャでのパック展開を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[...args = std::move(args)]&lt;/code&gt;のようなキャプチャを許可&lt;/td&gt;
&lt;td&gt;9&lt;br /&gt;10&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;2021.7&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0479R5: &lt;a href=&#34;lang/cpp20/likely_and_unlikely_attributes.html&#34;&gt;確率が高い分岐と低い分岐を伝える属性 &lt;code&gt;[[likely]]&lt;/code&gt;, &lt;code&gt;[[unlikely]]&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;条件分岐の最適化ヒントを与える属性&lt;/td&gt;
&lt;td&gt;9 (partial, &lt;code&gt;switch&lt;/code&gt; 文のみ可能)&lt;br /&gt; 10&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2021.7&lt;/td&gt;
&lt;td&gt;2019 Update 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0929R2: &lt;a href=&#34;lang/cpp20/checking_for_abstract_class_types.html&#34;&gt;抽象型のチェック&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の宣言段階では、パラメータおよび戻り値型が抽象型かどうかをチェックしないようにする&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0732R2: &lt;a href=&#34;lang/cpp20/class_types_in_non-type_template_parameters.html&#34;&gt;非型テンプレートパラメータとしてクラス型を許可する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定数式として使用できる型を広く非型テンプレートパラメータとして使用できるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;partial&lt;/td&gt;
&lt;td&gt;2022.2 Partial&lt;/td&gt;
&lt;td&gt;2019 Update 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0722R3: &lt;a href=&#34;lang/cpp20/efficient_sized_delete_for_variable_sized_classes.html&#34;&gt;可変長データを扱うクラスの効率的な&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;クラスの&lt;code&gt;delete&lt;/code&gt;演算子が呼び出される前にデストラクタが呼ばれないようにするオプションを追加&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;2023.0&lt;/td&gt;
&lt;td&gt;2019 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1064R0: &lt;a href=&#34;lang/cpp20/allow_virtual_function_calls_in_constant_expressions.html&#34;&gt;定数式からの仮想関数の呼び出しを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;仮想関数に&lt;code&gt;constexpr&lt;/code&gt;を付けられない制限を解除&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1327R1: &lt;a href=&#34;lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.html&#34;&gt;定数式での&lt;code&gt;dynamic_cast&lt;/code&gt;、多態的な&lt;code&gt;typeid&lt;/code&gt;を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定数式での動的多態を許可&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1002R1: &lt;a href=&#34;lang/cpp20/try-catch_blocks_in_constexpr_functions.html&#34;&gt;constexpr関数内でのtry-catchブロックを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;constexpr関数内でtry-catchブロックを書けるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;2023.1&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1073R3: &lt;a href=&#34;lang/cpp20/immediate_functions.html&#34;&gt;常に定数式評価する&lt;code&gt;consteval&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;consteval&lt;/code&gt;キーワードを追加し、常に定数式評価されるよう指定できるようにする&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1330R0: &lt;a href=&#34;lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.html&#34;&gt;定数式内での共用体のアクティブメンバの変更を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;共用体メンバの書き換えを定数式内で行えるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1008R1: &lt;a href=&#34;lang/cpp20/prohibit_aggregates_with_user-declared_constructors.html&#34;&gt;ユーザー宣言したコンストラクタを持つクラスの集成体初期化を禁止&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタが&lt;code&gt;delete&lt;/code&gt;／&lt;code&gt;default&lt;/code&gt;宣言されているクラスを、集成体初期化によってコンストラクタ呼び出しを回避して構築できてしまっていた技法を禁止&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0892R2: &lt;a href=&#34;lang/cpp20/explicit_bool.html&#34;&gt;関数を条件付きで&lt;code&gt;explicit&lt;/code&gt;にする構文を追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;explicit(true)&lt;/code&gt;のように&lt;code&gt;explicit&lt;/code&gt;に真理値パラメータを指定できるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1236R1: &lt;a href=&#34;lang/cpp20/signed_integers_are_twos_complement.html&#34;&gt;符号付き整数型が2の補数表現であることを規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;符号付き整数型のビット表現を2の補数に規定する&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;2023.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0482R6: &lt;a href=&#34;lang/cpp20/char8_t.html&#34;&gt;UTF-8エンコーディングされた文字の型として&lt;code&gt;char8_t&lt;/code&gt;を追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;UTF-8エンコードされた文字かどうかでオーバーロード・特殊化をできるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;7 (&lt;code&gt;-fchar8_t&lt;/code&gt;オプションが必要)&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1094R2: &lt;a href=&#34;lang/cpp20/nested_inline_mamespaces.html&#34;&gt;入れ子名前空間定義でのインライン名前空間&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;namespace ns1::inline ns2::ns3 {}&lt;/code&gt;のように、入れ子名前空間を定義する式にインライン名前空間の指定を含められるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1091R3: &lt;a href=&#34;lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.html&#34;&gt;構造化束縛を拡張して通常の変数宣言のように使用できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;記憶域指定子として&lt;code&gt;static&lt;/code&gt;と&lt;code&gt;thread_local&lt;/code&gt;の指定を許可&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;8.0 (partial)&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1381R1: &lt;a href=&#34;lang/cpp20/reference_capture_of_structured_bindings.html&#34;&gt;構造化束縛した変数の参照キャプチャを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;構造化束縛をした変数は特殊な扱いのためラムダ式で参照キャプチャできない規定となっていたがこれを許可する&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;8.0 (partial)&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0960R3: &lt;a href=&#34;lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.html&#34;&gt;丸カッコの値リストからの集成体初期化を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T x{1, 2, 3};&lt;/code&gt;と同様に&lt;code&gt;T x(1, 2, 3);&lt;/code&gt;でも集成体初期化できるようにする&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1009R2: &lt;a href=&#34;lang/cpp20/array_size_deduction_in_new-expressions.html&#34;&gt;&lt;code&gt;new&lt;/code&gt;式での配列要素数の推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;double* p = new double[]{1,2,3};&lt;/code&gt;を許可&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1041R4: &lt;a href=&#34;lang/cpp20/make_char16t_char32t_string_literals_be_utf16_32.html&#34;&gt;&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;の文字・文字列リテラルを、文字コードUTF-16/32に規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__STDC_UTF_16__&lt;/code&gt;、&lt;code&gt;__STDC_UTF_32__&lt;/code&gt;の定義に関係なく、&lt;code&gt;char16_t&lt;/code&gt;、&lt;code&gt;char32_t&lt;/code&gt;のリテラルをUTF-16/32文字コードに規定する&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;2023.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1103R3: &lt;a href=&#34;lang/cpp20/modules.html&#34;&gt;モジュール&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ヘッダファイル・ソースファイル、インクルードに変わる仕組みとしてモジュールを導入する&lt;/td&gt;
&lt;td&gt;11 (&lt;code&gt;-fmodules-ts&lt;/code&gt;が必要)&lt;/td&gt;
&lt;td&gt;15&lt;br /&gt;8.0 partial (&lt;code&gt;-fmodules&lt;/code&gt;, &lt;code&gt;-fmodules-ts&lt;/code&gt;が必要)&lt;/td&gt;
&lt;td&gt;2023.1 (Partial)&lt;/td&gt;
&lt;td&gt;2019 Update 8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0912R5: &lt;a href=&#34;lang/cpp20/coroutines.html&#34;&gt;コルーチン&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数実行を中断・再開する仕組みとしてコルーチンを導入する&lt;/td&gt;
&lt;td&gt;10 (&lt;code&gt;-fcoroutines&lt;/code&gt;が必要)&lt;/td&gt;
&lt;td&gt;8.0 (partial)&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1161R3: &lt;a href=&#34;lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.html&#34;&gt;添字演算子内でのカンマ演算子の使用を非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ar[i, j]&lt;/code&gt;を非推奨化。&lt;code&gt;ar[(i, j)]&lt;/code&gt;はOK&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;2021.6&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1331R2: &lt;a href=&#34;lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.html&#34;&gt;constexpr関数内でのトリビアルなデフォルト初期化を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;constexpr関数内でのデフォルト初期化を許可し、未初期化値を読むことのみ禁止する&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;2022.3&lt;/td&gt;
&lt;td&gt;2019 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0848R3: &lt;a href=&#34;lang/cpp20/conditionally_trivial_special_member_functions.md.nolink&#34;&gt;条件付きで特殊メンバ関数をトリビアルに定義するように&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;制約によってトリビアルな特殊メンバ関数と非トリビアルな特殊メンバ関数をオーバーロードできるようにする&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;16 Partial (consepts 未実装部あり)&lt;/td&gt;
&lt;td&gt;2022.3&lt;/td&gt;
&lt;td&gt;2019 Update 8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1301R4: &lt;a href=&#34;lang/cpp20/nodiscard_should_have_a_reason.html&#34;&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt;属性に理由となる文字列を付加できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の戻り値を無視してはならない理由を関数宣言に持たせ、警告メッセージに役立てる&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;2021.6&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1099R5: &lt;a href=&#34;lang/cpp20/using_enum.html&#34;&gt;スコープ付き列挙型のusing宣言&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;using enum EnumType;&lt;/code&gt;もしくは&lt;code&gt;using EnumType::enumerator&lt;/code&gt;とすることで、列挙値のスコープ指定を省略できるようにする&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;2023.0&lt;/td&gt;
&lt;td&gt;2019 Update 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1816R0: &lt;a href=&#34;lang/cpp20/class_template_argument_deduction_for_aggregates.html&#34;&gt;集成体クラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;クラステンプレートのテンプレート引数推論はコンストラクタ引数から推論されるが、集成体初期化からも推論できるようにする&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2024.0&lt;/td&gt;
&lt;td&gt;2019 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1668R1: &lt;a href=&#34;lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.html&#34;&gt;constexpr関数内で未評価のインラインアセンブリを許可することによる組み込み関数のconstexpr有効化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時に評価されない場合にconstexpr関数にasm定義を含めることを許可&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;2022.3&lt;/td&gt;
&lt;td&gt;2019 Update 9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0388R4: &lt;a href=&#34;lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.html&#34;&gt;要素数不明の配列への変換を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数が判明している配列から、要素数が不明の配列への変換を許可&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;2021.6&lt;/td&gt;
&lt;td&gt;2019 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1143R2: &lt;a href=&#34;lang/cpp20/constinit.html&#34;&gt;コンパイル時初期化を強制する&lt;code&gt;constinit&lt;/code&gt;キーワードを追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;初期化のみコンパイル時におわらせたい場合に使用する&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;2022.3&lt;/td&gt;
&lt;td&gt;2019 Update 10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1152R4: &lt;a href=&#34;lang/cpp20/deprecating_volatile.html&#34;&gt;ほとんどの&lt;code&gt;volatile&lt;/code&gt;を非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;volatile&lt;/code&gt;の有用な機能のみを残し、効果が疑わしい、または壊れている機能を非推奨化する&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;2021.6&lt;/td&gt;
&lt;td&gt;2019 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1814R0: &lt;a href=&#34;lang/cpp20/class_template_argument_deduction_for_alias_templates.html&#34;&gt;エイリアステンプレート経由でのクラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;エイリアステンプレートからクラステンプレートのテンプレート引数を推論できるようにする&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0784R7: &lt;a href=&#34;lang/cpp20/more_constexpr_containers.html&#34;&gt;可変サイズをもつコンテナの&lt;code&gt;constexpr&lt;/code&gt;化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;記憶域をもつメモリアロケータの存在を考慮することで、可変サイズをもつコンテナをコンパイル時に使用できるようにする&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;2021.6&lt;/td&gt;
&lt;td&gt;2019 Update 9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1957R2: &lt;a href=&#34;lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.html&#34;&gt;ポインタから&lt;code&gt;bool&lt;/code&gt;への変換を縮小変換とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ポインタから&lt;code&gt;bool&lt;/code&gt;値への変換を縮小変換と規定することで、意図しない変換を防止する&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;11.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#note_ref-t1-1&#34; id=&#34;note-t1-1&#34;&gt;&lt;strong&gt;^&lt;/strong&gt;&lt;/a&gt; 不明な属性として無視されなくなっただけで期待する効果は得られない。完全に実装されるまでは、代わりに&lt;code&gt;&lt;a href=&#34;https://devblogs.microsoft.com/cppblog/msvc-cpp20-and-the-std-cpp20-switch/#msvc-extensions-and-abi&#34; target=&#34;_blank&#34;&gt;[[msvc::no_unique_address]]&lt;/a&gt;&lt;/code&gt;を使用できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;各処理系のC++20実装状況ページ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: &lt;a href=&#34;https://gcc.gnu.org/projects/cxx-status.html#cxx20&#34; target=&#34;_blank&#34;&gt;C++20 Support in GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clang: &lt;a href=&#34;http://clang.llvm.org/cxx_status.html&#34; target=&#34;_blank&#34;&gt;C++ Support in Clang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libstdc++: &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#status.iso.2020&#34; target=&#34;_blank&#34;&gt;C++ 2020 Implementation Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libc++: &lt;a href=&#34;https://libcxx.llvm.org/Status/Cxx20.html&#34; target=&#34;_blank&#34;&gt;libc++ C++20 Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual C++ (MSVC):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/cpp/visual-cpp-language-conformance&#34; target=&#34;_blank&#34;&gt;Visual C++ 言語への準拠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/STL/wiki/Changelog&#34; target=&#34;_blank&#34;&gt;次リリース情報(VS2019,2022) - Change log&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ICC: &lt;a href=&#34;https://www.intel.com/content/www/us/en/developer/articles/technical/c20-features-supported-by-intel-cpp-compiler.html&#34; target=&#34;_blank&#34;&gt;C++20 Features Supported by Intel® C++ Compiler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#cpp23&#34; id=&#34;cpp23&#34;&gt;C++23言語機能の実装状況&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;implementation.html#clang&#34;&gt;Clang&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;implementation.html#icc&#34;&gt;ICX&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;implementation.html#visual_cpp&#34;&gt;MSVC&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;P0330R8: &lt;a href=&#34;lang/cpp23/literal_suffix_for_signed_size_t.html&#34;&gt;(符号付き)&lt;code&gt;size_t&lt;/code&gt;リテラルのためのサフィックス&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;42z&lt;/code&gt;/&lt;code&gt;42Z&lt;/code&gt;とすることで&lt;code&gt;size_t&lt;/code&gt;に対応する符号付き整数型のリテラルとする&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;2022.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2290R3: &lt;a href=&#34;lang/cpp23/delimited_escape_sequences.html&#34;&gt;エスケープシーケンスの区切り&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;エスケープシーケンスの範囲を明確にする構文を追加する&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;2023.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2266R3: &lt;a href=&#34;lang/cpp23/simpler_implicit_move.html&#34;&gt;暗黙的なムーブを簡略化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;参照を返す関数の&lt;code&gt;return&lt;/code&gt;文で暗黙的にムーブされない問題を修正&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;2022.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1787R6: &lt;a href=&#34;lang/cpp23/declarations_and_where_to_find_them.md.nolink&#34;&gt;スコープと名前ルックアップの仕様整理&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複雑で不完全になっているスコープと名前ルックアップの仕様を整理し、一部の問題を解決する&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2615R1: &lt;a href=&#34;lang/cpp23/meaningful_exports.html&#34;&gt;無意味なexport宣言を禁止する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;いくつかの不必要な宣言に対するモジュールexportを禁止する&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2360R0: &lt;a href=&#34;lang/cpp23/extend_init_statement_to_allow_alias_declaration.html&#34;&gt;初期化文での型の別名宣言を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;for (using T = int; T e : v) {}&lt;/code&gt;を許可&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;2022.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2718R0: &lt;a href=&#34;lang/cpp23/lifetime_extension_in_range_based_for_loop.html&#34;&gt;範囲for文が範囲初期化子内で生じた一時オブジェクトを延命することを規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;範囲初期化子内で生じた一時オブジェクトは範囲for文の終わりまで延命される&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2324R2: &lt;a href=&#34;lang/cpp23/labels_at_the_end_of_compound_statements.html&#34;&gt;複合文の末尾へのラベルを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C互換のため、複合文の末尾でのgoto文のラベルを許可する&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;2023.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0847R7: &lt;a href=&#34;lang/cpp23/deducing_this.md.nolink&#34;&gt;自身のオブジェクトを明示的にパラメータとして指定する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバ関数が&lt;code&gt;*this&lt;/code&gt;の型・オブジェクトをパラメータとしてとり、&lt;code&gt;*this&lt;/code&gt;オブジェクトがconst/非const、左辺値/右辺値であるかをメンバ関数内で識別できるようにする&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;2022 Update 2 (partial)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1847R4: &lt;a href=&#34;lang/cpp23/make_declaration_order_layout_mandated.html&#34;&gt;アクセス制御の異なるメンバ変数のレイアウトを宣言順に規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;アクセス制御の異なるメンバ変数のレイアウトは並び替えを許可されていたが宣言順に規定する&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;2022&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2128R6: &lt;a href=&#34;lang/cpp23/multidimensional_subscript_operator.html&#34;&gt;添字演算子の多次元サポート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;operator[](int x, int y, int z)&lt;/code&gt;のように添字演算子のオーバーロードで複数のパラメータをとることを許可&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;2022.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1169R4: &lt;a href=&#34;lang/cpp23/static_operator.html&#34;&gt;&lt;code&gt;this&lt;/code&gt;ポインタをもつ必要のない演算子を&lt;code&gt;static&lt;/code&gt;として宣言できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;状態をもたないいくつかの演算子を&lt;code&gt;static&lt;/code&gt;として宣言できるようにする&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;2023.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2201R1: &lt;a href=&#34;lang/cpp23/mixed_string_literal_concatenation.html&#34;&gt;異なる文字エンコーディングをもつ文字列リテラルの連結を不適格とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;auto a = u8&#34;&#34; L&#34;&#34;;&lt;/code&gt;のような異なる文字エンコーディング同士での文字列リテラルを連結を禁止する&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;2022.2&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2029R4: &lt;a href=&#34;lang/cpp23/numeric_and_universal_character_escapes_in_character_and_string_literals.md.nolink&#34;&gt;文字・文字列リテラル中の数値・ユニバーサルキャラクタのエスケープに関する問題解決&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2362R3: &lt;a href=&#34;lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.html&#34;&gt;1ワイド文字に収まらないワイド文字リテラルを禁止する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;エンコード結果として&lt;code&gt;wchar_t&lt;/code&gt;の大きさに収まらないワイド文字リテラルを禁止する&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;2023.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2071R2: &lt;a href=&#34;lang/cpp23/named_universal_character_escapes.html&#34;&gt;名前付きユニバーサルキャラクタ名&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;16進数のユニバーサルキャラクタだけでなく、その文字の名前を入力できるようにする&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;2023.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2096R2: &lt;a href=&#34;lang/cpp23/generalized_wording_for_partial_specializations.html&#34;&gt;変数テンプレートの部分特殊化を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;変数テンプレートの部分特殊化を許可するために部分特殊化の仕様を汎用化&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2582R1: &lt;a href=&#34;lang/cpp23/class_template_argument_deduction_from_inherited.html&#34;&gt;継承コンストラクタからのクラステンプレート引数の推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;継承コンストラクタからもクラステンプレート引数を推論できるようにする&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1938R3: &lt;code&gt;&lt;a href=&#34;lang/cpp23/if_consteval.html&#34;&gt;if consteval&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時の文脈かどうかで分岐させる&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1401R5: &lt;a href=&#34;lang/cpp23/narrowing_contextual_conversions_to_bool.html&#34;&gt;定数式の文脈での&lt;code&gt;bool&lt;/code&gt;への縮小変換を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if constexpr(flags &amp;amp; Flags::Exec)&lt;/code&gt;や&lt;code&gt;static_assert(N);&lt;/code&gt;を許可&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;2022.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2242R3: &lt;a href=&#34;lang/cpp23/non_literal_variables_in_constexpr_functions.html&#34;&gt;定数式内での非リテラル変数、静的変数・スレッドローカル変数およびgotoとラベルの存在を許可する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時に評価されない限り、定数式内に静的変数・スレッドローカル変数およびgoto文とラベルを含むことを許可する&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;2022.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2246R1: &lt;a href=&#34;lang/cpp23/character_encoding_of_diagnostic_text.html&#34;&gt;静的な診断メッセージの文字エンコーディング&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static_assert&lt;/code&gt;や&lt;code&gt;[[deprecated]]&lt;/code&gt;などの診断メッセージの文字集合に関する要件をなくす&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;2022&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2448R2: &lt;a href=&#34;lang/cpp23/relaxing_some_constexpr_restrictions.html&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;関数が定数実行できない場合でも適格とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;17 (partial)&lt;/td&gt;
&lt;td&gt;2024.0 (partial)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2647R1: &lt;a href=&#34;lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.html&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;関数内での&lt;code&gt;static constexpr&lt;/code&gt;変数を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;関数のローカルで定数を定義できるようにする&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;2023.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2564R3: &lt;a href=&#34;lang/cpp23/consteval_needs_to_propagate_up.html&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;関数内で&lt;code&gt;consteval&lt;/code&gt;関数を呼び出せない問題を緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;consteval&lt;/code&gt;呼び出しを含む&lt;code&gt;constexpr&lt;/code&gt;関数を条件付きで&lt;code&gt;consteval&lt;/code&gt;関数とみなすようにする&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;2024.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1102R2: &lt;a href=&#34;lang/cpp23/down_with_lambda_parens.html&#34;&gt;ラムダ式で&lt;code&gt;()&lt;/code&gt;を省略できる条件を緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;修飾や戻り値型をともなってもパラメータリストが空であれば&lt;code&gt;()&lt;/code&gt;を省略できる&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;2022.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2173R1: &lt;a href=&#34;lang/cpp23/attributes_on_lambda_expressions.html&#34;&gt;ラムダ式に対する属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ラムダ式のいくつかの箇所に属性を記述できるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;2022.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1774R8: &lt;a href=&#34;lang/cpp23/portable_assumptions.html&#34;&gt;コード内容の仮定をコンパイラに伝えるassume属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最適化のために、コードの仮定をコンパイラに伝える属性を標準化する&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2316R2: &lt;a href=&#34;lang/cpp23/consistent_character_literal_encoding.html&#34;&gt;文字リテラルエンコーディングを一貫させる&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;プリプロセッサの条件式での文字リテラルの扱いをC++式と同様にする&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;2022.2&lt;/td&gt;
&lt;td&gt;2022&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2334R1: &lt;a href=&#34;lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.html&#34;&gt;&lt;code&gt;elif&lt;/code&gt;/&lt;code&gt;elifdef&lt;/code&gt;/&lt;code&gt;elifndef&lt;/code&gt;のサポートを追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;#if&lt;/code&gt;/&lt;code&gt;#ifdef&lt;/code&gt;/&lt;code&gt;#ifndef&lt;/code&gt;に対応する複数条件命令のサポートを追加する&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;2022.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2437R1: &lt;a href=&#34;lang/cpp23/warning.html&#34;&gt;&lt;code&gt;#warning&lt;/code&gt;のサポートを追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;多くのC++コンパイラが実装していたプリプロセス時の警告&lt;code&gt;#warning message&lt;/code&gt;を正式サポート&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;2023.2&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2295R6: &lt;a href=&#34;lang/cpp23/support_for_utf8_as_a_portable_source_file_encoding.html&#34;&gt;汎用的なソースコードのエンコーディングとしてUTF-8をサポート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;すべてのコンパイラはUTF-8文字コードのソースコードをサポートしなければならない&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;2023.2&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2223R2: &lt;a href=&#34;lang/cpp23/trimming_whitespaces_before_line_splicing.html&#34;&gt;行末スペースを無視するよう規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;行末が「&lt;code&gt;\ &lt;/code&gt;」でおわっていた場合にMSVCは行の継続をしない実装になっていたため動作を共通化するため仕様を規定&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;2022.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;各処理系のC++23実装状況ページ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: &lt;a href=&#34;https://gcc.gnu.org/projects/cxx-status.html#cxx23&#34; target=&#34;_blank&#34;&gt;C++23 Support in GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clang: &lt;a href=&#34;https://clang.llvm.org/cxx_status.html#cxx23&#34; target=&#34;_blank&#34;&gt;C++2b implementation status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual C++ (MSVC):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/cpp/visual-cpp-language-conformance&#34; target=&#34;_blank&#34;&gt;Visual C++ 言語への準拠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/STL/wiki/Changelog&#34; target=&#34;_blank&#34;&gt;次リリース情報(VS2019,2022) - Change log&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ICX: &lt;a href=&#34;https://www.intel.com/content/www/us/en/developer/articles/technical/c23-features-supported-by-intel-c-compiler.html&#34; target=&#34;_blank&#34;&gt;C++23 Features Supported by Intel® C++ Compiler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#cpp26&#34; id=&#34;cpp26&#34;&gt;C++26言語機能の実装状況&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;implementation.html#clang&#34;&gt;Clang&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;implementation.html#icc&#34;&gt;ICX&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;implementation.html#visual_cpp&#34;&gt;MSVC&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;P2752R3: &lt;a href=&#34;lang/cpp26/static_storage_for_braced_initializers.md.nolink&#34;&gt;&lt;code&gt;std::initializer_list&lt;/code&gt;の配列を静的ストレージに配置する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::vector v = {1, 2, 3};&lt;/code&gt;のような初期化で初期化子リストを静的ストレージに配置することで無駄なコピーをなくす&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2169R4: &lt;a href=&#34;lang/cpp26/nice_placeholder_with_no_name.md.nolink&#34;&gt;宣言のみで使用しない変数の名前として&lt;code&gt;_&lt;/code&gt;をサポート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;変数名&lt;code&gt;_&lt;/code&gt;は暗黙で&lt;code&gt;[[maybe_unused]]&lt;/code&gt;が指定される&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1854R4: &lt;a href=&#34;lang/cpp26/making_non-encodable_string_literals_ill-formed.md.nolink&#34;&gt;文字列リテラルの文字エンコーディング失敗を不適格とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字列リテラルのエンコーディング時に文字表現が失われる場合にコンパイルエラーにする&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2361R6: &lt;a href=&#34;lang/cpp26/unevaluated_strings.md.nolink&#34;&gt;コンパイル時にのみ使用される文字列の扱いを明確化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static_assert&lt;/code&gt;や&lt;code&gt;[[deprecated]]&lt;/code&gt;などで使用されるコンパイル時の文字列について、文字コードの指定を禁止し、実行時エンコーディングが行われないことを規定&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2552R3: &lt;a href=&#34;lang/cpp26/on_the_ignorability_of_standard_attributes.md.nolink&#34;&gt;属性の無視性を見直し&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;構文として適格な属性のみを無視できるようにし、そうでない属性の使用を&lt;a class=&#34;cpprefjp-defined-word&#34;&gt;不適格&lt;/a&gt;とする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2738R1: &lt;a href=&#34;lang/cpp26/constexpr_cast_from_voidptr.md.nolink&#34;&gt;定数式での&lt;code&gt;void*&lt;/code&gt;からポインタ型へのキャストを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型消去のために&lt;code&gt;void*&lt;/code&gt;からポインタ型へのキャストを許可する&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2741R3: &lt;a href=&#34;lang/cpp26/user-generated_static_assert_messages.html&#34;&gt;&lt;code&gt;static_assert&lt;/code&gt;の診断メッセージにユーザーが生成した文字列の指定を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;な&lt;code&gt;S.size()&lt;/code&gt;と&lt;code&gt;S.data()&lt;/code&gt;メンバ関数をもつオブジェクトをコンパイル時文字列として指定できるようにする&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2558R2: &lt;a href=&#34;lang/cpp26/add_atsign_dollar_graveaccent_to_the_basic_character_set.md.nolink&#34;&gt;基本文字集合に@、$、`を追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C言語との互換性のためにこれらの文字を基本文字集合に追加&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2662R3: &lt;a href=&#34;lang/cpp26/pack_indexing.md.nolink&#34;&gt;パラメータパックへのインデックスアクセスを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;可変引数テンプレートのパラメータパックに添字アクセスできるようにする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2864R2: &lt;a href=&#34;lang/cpp26/remove_deprecated_arithmetic_conversion_on_enumerations.md.nolink&#34;&gt;非推奨となっていた列挙値から算術型への暗黙変換を削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C++20から非推奨となっていた列挙値への算術演算で算術型に暗黙変換される仕様を削除&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2748R5: &lt;a href=&#34;lang/cpp26/disallow_binding_a_returned_glvalue_to_a_temporary.md.nolink&#34;&gt;返却された左辺値から暗黙変換された一時オブジェクトが参照に束縛されることを禁止する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;寿命切れの変数によって引き起こされるバグを防止する&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P3106R1: &lt;a href=&#34;lang/cpp26/clarifying_rules_for_brace_elision_in_aggregate_initialization.md.nolink&#34;&gt;要素数不明の配列を集成体初期化する規則を明確化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;配列要素の集成体初期化で&lt;code&gt;{}&lt;/code&gt;が省略された場合の矛盾していた規定を修正&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0609R3: &lt;a href=&#34;lang/cpp26/attributes_for_structured_bindings.md.nolink&#34;&gt;構造化束縛への属性を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;auto [a, [[maybe_unused]] b, c] = f();&lt;/code&gt;のように構造化束縛の要素に対して属性を付加できるようにする&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P3034R1: &lt;a href=&#34;lang/cpp26/module_declarations_shouldnt_be_macros.md.nolink&#34;&gt;モジュール宣言でのモジュール名のマクロ展開を禁止する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;export module MACRO_NAME;&lt;/code&gt;を禁止&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2809R3: &lt;a href=&#34;lang/cpp26/trivial_infinite_loops_are_not_undefined_behavior.md.nolink&#34;&gt;自明な無限ループは未定義動作ではないと規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;並行プログラムの進行保証などを考慮して無限ループを未定義動作ではないものとする&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2795R5: &lt;a href=&#34;lang/cpp26/erroneous_behaviour_for_uninitialized_reads.md.nolink&#34;&gt;未初期化変数の読み取りを不正動作 (erroneous behaviour: EB) とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;初期化されていない自動変数の読み取りの安全性を規定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2573R2: &lt;a href=&#34;lang/cpp26/delete_reason.md.nolink&#34;&gt;関数宣言を削除する理由を指定できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;f() = delete(&#34;reason&#34;);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2893R3: &lt;a href=&#34;lang/cpp26/variadic_friends.md.nolink&#34;&gt;可変引数テンプレートで&lt;code&gt;friend&lt;/code&gt;宣言をできるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;クラステンプレートの可変引数テンプレートでまとめて&lt;code&gt;friend&lt;/code&gt;宣言できるようにする&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2747R2: &lt;a href=&#34;lang/cpp26/constexpr_placement_new.md.nolink&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;配置&lt;code&gt;new&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定数式の文脈での配置&lt;code&gt;new&lt;/code&gt;を許可&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P3144R2: &lt;a href=&#34;lang/cpp26/deleting_a_pointer_to_an_incomplete_type_should_be_ill-formed.md.nolink&#34;&gt;不完全型へのポインタに対する&lt;code&gt;delete&lt;/code&gt;を不適格とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;未定義動作となる操作をコンパイルエラーとする&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2963R3: &lt;a href=&#34;lang/cpp26/ordering_of_constraints_involving_fold_expressions.md.nolink&#34;&gt;制約式内での畳み込み式の順序付け&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;畳み込み式では全体ではなく個別の制約を原子制約式として扱う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0963R3: &lt;a href=&#34;lang/cpp26/structured_binding_declaration_as_a_condition.md.nolink&#34;&gt;条件式での構造化束縛の使用を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;式全体を&lt;code&gt;bool&lt;/code&gt;値に変換できる場合に条件式で構造化束縛を使用できることとする&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;各処理系のC++26実装状況ページ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: &lt;a href=&#34;https://gcc.gnu.org/projects/cxx-status.html#cxx26&#34; target=&#34;_blank&#34;&gt;C++26 Support in GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clang:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://clang.llvm.org/cxx_status.html#cxx26&#34; target=&#34;_blank&#34;&gt;C++2c implementation status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://libcxx.llvm.org/Status/Format.html&#34; target=&#34;_blank&#34;&gt;libc++ Format Status&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Visual C++ (MSVC):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/STL/wiki/Changelog&#34; target=&#34;_blank&#34;&gt;Change log&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-11-25T06:37:57.431549</updated>
  <id>f9dbc36f-8b2e-46b6-a3c2-adeac3b8f16c</id>

  
    <entry>
      <title>common_iterator -- common_iterator : ==追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/common_iterator.html"/>
      <id>a266fd7718be32a5972f8070f6fd54fb69115272:reference/iterator/common_iterator.md</id>
      <updated>2020-11-25T15:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/common_iterator.md b/reference/iterator/common_iterator.md
index 4ab53bf6c..b16b6366a 100644
--- a/reference/iterator/common_iterator.md
+++ b/reference/iterator/common_iterator.md
@@ -63,7 +63,7 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------------------------------------------------------|-------------|-------|
-| [`operator==`](common_iterator/op_equal.md.nolink)         | 等値比較 | C++20 |
+| [`operator==`](common_iterator/op_equal.md)         | 等値比較 | C++20 |
 | `operator!=`     | 非等値比較 (`==`により使用可能) | C++20 |
 | [`operator-`](common_iterator/op_minus.md.nolink)          | 2つの`common_iterator`の差を求める | C++20 |
 | [`iter_move`](common_iterator/iter_move.md.nolink)     | イテレータの要素の移動 | C++20 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- common_iterator : ==追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/common_iterator/op_equal.html"/>
      <id>a266fd7718be32a5972f8070f6fd54fb69115272:reference/iterator/common_iterator/op_equal.md</id>
      <updated>2020-11-25T15:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/common_iterator/op_equal.md b/reference/iterator/common_iterator/op_equal.md
new file mode 100644
index 000000000..40b39dc1b
--- /dev/null
+++ b/reference/iterator/common_iterator/op_equal.md
@@ -0,0 +1,111 @@
+# operator==
+* iterator[meta header]
+* std[meta namespace]
+* common_iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;input_or_output_iterator I, sentinel_for&amp;lt;I&amp;gt; S&amp;gt;
+  class common_iterator {
+
+    template&amp;lt;class I2, sentinel_for&amp;lt;I&amp;gt; S2&amp;gt;
+      requires sentinel_for&amp;lt;S, I2&amp;gt;
+    friend bool operator==(const common_iterator&amp;amp; x, const common_iterator&amp;lt;I2, S2&amp;gt;&amp;amp; y);   // (1)
+
+    template&amp;lt;class I2, sentinel_for&amp;lt;I&amp;gt; S2&amp;gt;
+      requires sentinel_for&amp;lt;S, I2&amp;gt; &amp;amp;&amp;amp; equality_comparable_with&amp;lt;I, I2&amp;gt;
+    friend bool operator==(const common_iterator&amp;amp; x, const common_iterator&amp;lt;I2, S2&amp;gt;&amp;amp; y);   // (2)
+  };
+}
+```
+* input_or_output_iterator[link /reference/iterator/input_or_output_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* equality_comparable_with[link /reference/iterator/equality_comparable_with.md]
+
+## 概要
+2つの`common_iterator`オブジェクトが同じ要素を指しているかを判定する。
+
+## 事前条件
+
+`x.v_.`[`valueless_by_exception`](/reference/variant/variant/valueless_by_exception)`()`、`y.v_.`[`valueless_by_exception`](/reference/variant/variant/valueless_by_exception)`()`はどちらも`false`であること。
+
+## 戻り値
+
+`I, S`（`I2, S2`）の値のどちらかを[`variant&amp;lt;I, S&amp;gt;`](/reference/variant/variant.md)型のメンバ変数`_v`に保持しており、`i = x.v_.`[`index()`](/reference/variant/variant/index.md)、`j = y.v_.`[`index()`](/reference/variant/variant/index.md)として
+
+- (1)
+    - `i == j`の場合 : `true`
+    - それ以外の場合 : `get&amp;lt;i&amp;gt;(x.v_) == get&amp;lt;j&amp;gt;(y.v_)`
+- (2)
+    - `i, j`がどちらも`1`の場合 : `true`
+    - それ以外の場合 : `get&amp;lt;i&amp;gt;(x.v_) == get&amp;lt;j&amp;gt;(y.v_)`
+
+
+## 備考
+
+C++20以降、これらの演算子により以下の演算子が使用可能になる（制約は使用する`==`に準ずる）。
+
+```cpp
+template&amp;lt;class I2, sentinel_for&amp;lt;I&amp;gt; S2&amp;gt;
+friend bool operator==(const common_iterator&amp;lt;I2, S2&amp;gt;&amp;amp; y, const common_iterator&amp;amp; x);
+
+template&amp;lt;class I2, sentinel_for&amp;lt;I&amp;gt; S2&amp;gt;
+friend bool operator!=(const common_iterator&amp;amp; x, const common_iterator&amp;lt;I2, S2&amp;gt;&amp;amp; y);
+
+template&amp;lt;class I2, sentinel_for&amp;lt;I&amp;gt; S2&amp;gt;
+friend bool operator!=(const common_iterator&amp;lt;I2, S2&amp;gt;&amp;amp; y, const common_iterator&amp;amp; x);
+```
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+
+int main() {
+  auto seq = std::views::iota(1) | std::views::take(5);
+
+  // common_iteratorを通すことでイテレータ型と番兵型を合わせる
+  using CI = std::common_iterator&amp;lt;std::ranges::iterator_t&amp;lt;decltype(seq)&amp;gt;, std::ranges::sentinel_t&amp;lt;decltype(seq)&amp;gt;&amp;gt;;
+
+  CI ci{std::ranges::begin(seq)};
+  CI ce{std::ranges::end(seq)};
+  auto ci2 = ci++;
+  
+  std::cout &amp;lt;&amp;lt; std::boolalpha;
+  
+  std::cout &amp;lt;&amp;lt; (ci == ci2) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; (ci == ce) &amp;lt;&amp;lt; std::endl;
+
+  // ==から導出される!=
+  std::cout &amp;lt;&amp;lt; (ci != ci2) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; (ci != ce) &amp;lt;&amp;lt; std::endl;
+}
+```
+* views::iota[link /reference/ranges/iota_view.md.nolink]
+* views::take[link /reference/ranges/take_view.md.nolink]
+* iterator_t[link /reference/ranges/iterator_t.md.nolink]
+* sentinel_t[link /reference/ranges/sentinel_t.md.nolink]
+* ranges::begin[link /reference/ranges/begin.md.nolink]
+
+### 出力
+```
+false
+false
+true
+true
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 9
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++国際標準規格 -- chore(international-standard): remove )</title>
      <link href="https://cpprefjp.github.io/international-standard.html"/>
      <id>ffe01362d93bedb53819757b9b2ef11cdcfd186d:international-standard.md</id>
      <updated>2020-11-25T15:30:55+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C++国際標準規格&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#summary&#34; id=&#34;summary&#34;&gt;概要&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;C++ の標準規格の実例として ISO/IEC による&lt;strong&gt;国際標準規格&lt;/strong&gt; (international standard) がある。
最新の国際標準規格は「ISO/IEC 14882:2017 Programming Languages -- C++」(通称 C++17) である。
C++ の標準規格は、他にも各国の規格化団体によって国際標準規格に等価なものが定められている。
日本では日本工業標準調査会 (JISC) により「JIS X 3014:2003 プログラム言語C++」が定められているが古い (C++03 相当)。
ここでは特に国際標準規格について取り扱う。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#list-of-iso-cpp&#34; id=&#34;list-of-iso-cpp&#34;&gt;国際標準規格の一覧&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;通称&lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note-t1-1&#34; id=&#34;note_ref-t1-1&#34;&gt;†1&lt;/a&gt;&lt;/sup&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;名称&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;参照する規格案&lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note-t1-2&#34; id=&#34;note_ref-t1-2&#34;&gt;†2&lt;/a&gt;&lt;/sup&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;規格案・原案&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;code&gt;__cplusplus&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23.html&#34;&gt;C++23&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ISO/IEC 14882:2023 (予定)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;--&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4861&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;--&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20.html&#34;&gt;C++20&lt;/a&gt; (C++2a)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ISO/IEC 14882:2020 (予定)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4861&lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note-t1-3&#34; id=&#34;note_ref-t1-3&#34;&gt;†3&lt;/a&gt;&lt;/sup&gt;(&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/n4861.pdf&#34; target=&#34;_blank&#34;&gt;PDF&lt;/a&gt;/&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/n4861/&#34; target=&#34;_blank&#34;&gt;HTML&lt;/a&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4860 N4849 N4842 N4835 N4830&lt;br /&gt;N4820 N4810 N4800 N4791 &lt;del&gt;N4788&lt;/del&gt;&lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note-t1-4&#34; id=&#34;note_ref-t1-4&#34;&gt;†4&lt;/a&gt;&lt;/sup&gt;&lt;br /&gt;N4778 N4762 N4750 N4741 N4727&lt;br /&gt;N4713 N4700 N4687&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17.html&#34;&gt;C++17&lt;/a&gt; (C++1z)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ISO/IEC 14882:2017&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4659(&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4659.pdf&#34; target=&#34;_blank&#34;&gt;PDF&lt;/a&gt;/&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/n4659/&#34; target=&#34;_blank&#34;&gt;HTML&lt;/a&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4660 N4659 N4640 N4618 N4606&lt;br /&gt;N4594 N4582 N4567 N4527 N4431&lt;br /&gt;N4296&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;201703L&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14.html&#34;&gt;C++14&lt;/a&gt; (C++1y)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ISO/IEC 14882:2014&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4140(&lt;a href=&#34;https://github.com/cplusplus/draft/blob/master/papers/n4140.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;PDF&lt;/a&gt;/&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/n4140/&#34; target=&#34;_blank&#34;&gt;HTML&lt;/a&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4141 N4140 N3937 N3936 N3797&lt;br /&gt;N3691 N3690 N3485 N3376 N3337&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;201402L&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11.html&#34;&gt;C++11&lt;/a&gt; (C++0x)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ISO/IEC 14882:2011&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N3337&lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note-t1-5&#34; id=&#34;note_ref-t1-5&#34;&gt;†5&lt;/a&gt;&lt;/sup&gt;(&lt;a href=&#34;https://wg21.link/std11&#34; target=&#34;_blank&#34;&gt;PDF&lt;/a&gt;/&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/n3337/&#34; target=&#34;_blank&#34;&gt;HTML&lt;/a&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N3291 N3290 N3242 N3225 N3126&lt;br /&gt;N3090 N3035 N3000 N2960 N2914&lt;br /&gt;N2857 N2798 N2723 N2691 N2606&lt;br /&gt;N2588 N2521 N2461 N2369 N2315&lt;br /&gt;N2284 N2134 N2009 N1905 N1804&lt;br /&gt;N1733 N1655&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;201103L&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;C++03&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ISO/IEC 14882:2003&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N1577&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N1577 ?&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;199711L&lt;/code&gt;&lt;br /&gt;(C++98 と同じ)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;C++98&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ISO/IEC 14882:1998&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;?&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;?&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;199711L&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note_ref-t1-1&#34; id=&#34;note-t1-1&#34;&gt;&lt;strong&gt;^&lt;/strong&gt;&lt;/a&gt; 括弧内は策定時・標準化前に一時的に用いられた通称&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note_ref-t1-2&#34; id=&#34;note-t1-2&#34;&gt;&lt;strong&gt;^&lt;/strong&gt;&lt;/a&gt; 最終国際規格案はPDFやHTMLなどの形で一般公開されていないため、それにほぼ同一の内容の規格案を参照する。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note_ref-t1-3&#34; id=&#34;note-t1-3&#34;&gt;&lt;strong&gt;^&lt;/strong&gt;&lt;/a&gt; N4861 は、C++20 DISであるN4860に対するデザインレベルの差とC++17との相互参照がない以外の差はないため、事実上 N4861 が C++20 を参照する時に用いられる。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note_ref-t1-4&#34; id=&#34;note-t1-4&#34;&gt;&lt;strong&gt;^&lt;/strong&gt;&lt;/a&gt; N4788 は政治的事情により撤回された (参照 N4792)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note_ref-t1-5&#34; id=&#34;note-t1-5&#34;&gt;&lt;strong&gt;^&lt;/strong&gt;&lt;/a&gt; N3337 は、C++11規格に対する編集レベルの修正のみが適用された仕様案であるため、事実上 N3337 が C++11 を参照する時に用いられる。C++11規格からN3337への変更点は、&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3338.html&#34; target=&#34;_blank&#34;&gt;N3338&lt;/a&gt;を参照。&lt;br /&gt;
(それより前の公開されているC++11向け仕様案であるN3242からC++11規格に対しては、機能的な変更がいくつかあるため、C++11規格として参照するには適さない)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最新のDraftのHTML版は以下で公開されている。&lt;br /&gt;
&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/&#34; target=&#34;_blank&#34;&gt;Draft C++ Standard: Contents&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;標準規格の文章はtexで書かれており、そのソースコードは以下で2011年8月16日以降のものについて(つまりN3291より後、N3337より前)公開されている。&lt;br /&gt;
&lt;a href=&#34;https://github.com/cplusplus/draft&#34; target=&#34;_blank&#34;&gt;cplusplus/draft: C++ standards drafts&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#iso-cpp-committee&#34; id=&#34;iso-cpp-committee&#34;&gt;用語: 国際標準規格を定める組織&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;C++標準化委員会&lt;/strong&gt; (C++ Standards Committee): C++ の国際標準規格を策定する団体。
  組織としての位置づけはISO/IEC JTC1/SC22/WG21になる。
  &lt;strong&gt;国際標準化機構&lt;/strong&gt; (ISO; international organization for standardization) および&lt;strong&gt;国際電気標準会議&lt;/strong&gt; (IEC; International Electronics Commission) はそれぞれ様々な規格の標準化団体である。
  &lt;strong&gt;第一合同技術委員会&lt;/strong&gt; (JTC1; Joint Technical Committee 1) は ISO/IEC の下で情報技術の標準化を行う団体である。
  下部組織の SC22 はプログラム言語の標準化を行う&lt;strong&gt;副委員会&lt;/strong&gt; (SC; subcommittee) である。
  C++標準化委員会は WG21 という&lt;strong&gt;作業グループ&lt;/strong&gt; (WG; working group) である。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CWG&lt;/strong&gt; (Core working group): C++標準化委員会の内、コア言語機能の策定を行う作業グループ&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LWG&lt;/strong&gt; (Library working group): C++標準化委員会の内、標準ライブラリ機能の策定を行う作業グループ&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NB&lt;/strong&gt; (national body) または&lt;strong&gt;MB/NC&lt;/strong&gt; (member body/national committee): C++標準化委員会の正会員つまり各国から派遣される団体のこと。本来は member body は ISO での名称で、national committee は IEC での名称。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#iso-cpp-documents&#34; id=&#34;iso-cpp-documents&#34;&gt;用語: 国際標準規格の文書&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;提案&lt;/strong&gt; (proposal): 標準規格の変更についての提案文書&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;問題&lt;/strong&gt; (issue): C++標準規格の問題や課題のこと&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;欠陥&lt;/strong&gt; (defect): C++標準規格に含まれるいわば &#34;バグ&#34; のこと&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DR&lt;/strong&gt; (defect report, defect resolution): 委員会で承認された欠陥の報告または欠陥の修正のこと&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NAD&lt;/strong&gt; (not a defect): 委員会により標準規格の欠陥ではないとされた問題のこと&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DRWP&lt;/strong&gt;: 最新の規格原案に取り込み済みの DR のこと&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WD&lt;/strong&gt; (working draft): 作業原案&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CD&lt;/strong&gt; (committee draft): 委員会原案&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FCD&lt;/strong&gt; (final committee draft): 最終委員会原案&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DIS&lt;/strong&gt; (draft international standard): 国際規格案&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FDIS&lt;/strong&gt; (final draft international standard): 最終国際規格案&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IS&lt;/strong&gt; (international standard): 国際規格&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TR&lt;/strong&gt; (technical report): 技術報告書。用例: TR1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TS&lt;/strong&gt; (technical specifications): 技術仕様書。用例: Concepts TS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;標準規格&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iso.org/standard/68564.html&#34; target=&#34;_blank&#34;&gt;ISO/IEC 14882:2017 - Programming languages -- C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iso.org/standard/64029.html&#34; target=&#34;_blank&#34;&gt;ISO/IEC 14882:2014 - Information technology -- Programming languages -- C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iso.org/standard/50372.html&#34; target=&#34;_blank&#34;&gt;ISO/IEC 14882:2011 - Information technology -- Programming languages -- C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iso.org/standard/38110.html&#34; target=&#34;_blank&#34;&gt;ISO/IEC 14882:2003 - Programming languages -- C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iso.org/standard/25845.html&#34; target=&#34;_blank&#34;&gt;ISO/IEC 14882:1998 - Programming languages -- C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://webdesk.jsa.or.jp/books/W11M0090/index/?bunsyo_id=JIS%20X%203014:2003&#34; target=&#34;_blank&#34;&gt;JIS X 3014:2003 プログラム言語Ｃ＋＋／Information Technology -- Programming languages -- C++ 日本規格協会 JSA Webdesk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.cppreference.com/w/cpp/experimental&#34; target=&#34;_blank&#34;&gt;Experimental C++ Features - cppreference.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/29115656/which-draft-is-closest-to-the-c14-standard&#34; target=&#34;_blank&#34;&gt;c++ - Which draft is closest to the C++14 standard? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/81656/where-do-i-find-the-current-c-or-c-standard-documents&#34; target=&#34;_blank&#34;&gt;Where do I find the current C or C++ standard documents? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/11053960/how-are-the-cplusplus-directive-defined-in-various-compilers&#34; target=&#34;_blank&#34;&gt;c++ - How are the __cplusplus directive defined in various compilers? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/&#34; target=&#34;_blank&#34;&gt;ISO/IEC JTC1/SC22/WG21 - The C++ Standards Committee - ISOCPP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E5%9B%BD%E9%9A%9B%E6%A8%99%E6%BA%96%E5%8C%96%E6%A9%9F%E6%A7%8B&#34; target=&#34;_blank&#34;&gt;国際標準化機構 - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E5%9B%BD%E9%9A%9B%E9%9B%BB%E6%B0%97%E6%A8%99%E6%BA%96%E4%BC%9A%E8%AD%B0&#34; target=&#34;_blank&#34;&gt;国際電気標準会議 - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/ISO/IEC_JTC_1&#34; target=&#34;_blank&#34;&gt;ISO/IEC JTC 1 - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/ISO/IEC_JTC_1/SC_22&#34; target=&#34;_blank&#34;&gt;ISO/IEC JTC 1/SC 22 - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>optional -- optional, variant: 型の要件をdestructibleにまとめた</title>
      <link href="https://cpprefjp.github.io/reference/optional/optional.html"/>
      <id>08c80265d635ed63f1dac11409fe8f158e851bfc:reference/optional/optional.md</id>
      <updated>2020-11-25T15:29:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/optional/optional.md b/reference/optional/optional.md
index 31c09f7cd..5f3a1d9d8 100644
--- a/reference/optional/optional.md
+++ b/reference/optional/optional.md
@@ -199,3 +199,4 @@ error
 - [P0307R0 Making Optional Greater Equal Again](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0307r0.pdf)
 - [P0307R2 Making Optional Greater Equal Again](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0307r2.pdf)
 - [P0504R0 Revisiting in-place tag types for `any`/`optional`/`variant`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0504r0.html)
+- [LWG Issue 3196. `std::optional&amp;lt;T&amp;gt;` is ill-formed is `T` is an array](https://wg21.cmeerw.net/lwg/issue3196)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>variant -- optional, variant: 型の要件をdestructibleにまとめた</title>
      <link href="https://cpprefjp.github.io/reference/variant/variant.html"/>
      <id>08c80265d635ed63f1dac11409fe8f158e851bfc:reference/variant/variant.md</id>
      <updated>2020-11-25T15:29:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/variant/variant.md b/reference/variant/variant.md
index a84d12276..851df0eb2 100644
--- a/reference/variant/variant.md
+++ b/reference/variant/variant.md
@@ -55,8 +55,7 @@ std::visit([](auto&amp;amp; x) {
 
 
 ## テンプレートパラメータ制約
-- `Types...`の全ての型が、 (CV修飾された) [オブジェクト型](/reference/type_traits/is_object.md)であること
-- `Types...`の全ての型が、配列型ではないこと
+- `Types...`の全ての型が、[`std::destructible`](/reference/concepts/destructible.md)要件を満たすこと
 - コンストラクタや代入の制約として、`variant&amp;lt;`[`std::string`](/reference/string/basic_string.md)`,` [`std::string`](/reference/string/basic_string.md)`&amp;gt;`のように、`Types...`内に同じ型が複数回現れる指定をする場合は、型のインデックスを指定する形式の機能のみ使用できる
     - こういった指定は、正常データかエラーデータどちらかが代入されるオブジェクトを用意する状況で、正常データとエラーデータがどちらも文字列、という場合に必要になる
 
@@ -211,3 +210,4 @@ Hello
 - [P0110R0 Implementing the strong guarantee for `variant&amp;lt;&amp;gt;` assignment](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0110r0.html)
 - [P0308R0 Valueless Variants Considered Harmful](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0308r0.html)
 - [P0510R0 Disallowing references, incomplete types, arrays, and empty variants](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0510r0.html)
+- [LWG Issue 3196. `std::optional&amp;lt;T&amp;gt;` is ill-formed is `T` is an array](https://wg21.cmeerw.net/lwg/issue3196)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_destructible -- is_destructible : 配列が破棄可能ではないことを明記 (例は元々あった)</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/is_destructible.html"/>
      <id>4d2e5f376723ac12f5f72e787c461fd6748fcf43:reference/type_traits/is_destructible.md</id>
      <updated>2020-11-25T15:26:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/is_destructible.md b/reference/type_traits/is_destructible.md
index fd4cd0f03..584790056 100644
--- a/reference/type_traits/is_destructible.md
+++ b/reference/type_traits/is_destructible.md
@@ -27,10 +27,12 @@ namespace std {
 `is_destructible`は、型`T`が破棄可能であるならば[`true_type`](true_type.md)から派生し、そうでなければ[`false_type`](false_type.md)から派生する。
 
 - C++11 : 型`T`が完全型で `template &amp;lt;class U&amp;gt; struct test { U u; };` があるときに `test&amp;lt;T&amp;gt;::~test()` が`delete`宣言されていなければ、型`T`は破棄可能であると判断される。
-- C++14 : 実行時に評価されない文脈で、オブジェクト型`T`に対する式[`std::declval`](/reference/utility/declval.md)`&amp;lt;T&amp;amp;&amp;gt;().~T()`が有効であれば破棄可能、そうでなければ破棄できないと判断される。以下、オブジェクト型に含まれない型の場合の判断について記載する：
-    - `T`が`void`の場合は破棄できない
-    - `T`が参照型の場合は破棄可能
-    - `T`が関数型の場合は破棄できない
+- C++14 : 実行時に評価されない文脈で、オブジェクト型`T`に対する式[`std::declval`](/reference/utility/declval.md)`&amp;lt;T&amp;amp;&amp;gt;().~T()`が有効であれば破棄可能、そうでなければ破棄できないと判断される。
+    - オブジェクト型に含まれない型の場合の判断は以下：
+        - `T`が`void`の場合は破棄できない
+        - `T`が参照型の場合は破棄可能
+        - `T`が関数型の場合は破棄できない
+    - また、配列型は`~T()`という式が有効でないため、破棄できない
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>parse -- addressof関係の対応</title>
      <link href="https://cpprefjp.github.io/reference/chrono/parse.html"/>
      <id>55e6851ea2c52af5d82cff05d9f1d3b3e16fcbf4:reference/chrono/parse.md</id>
      <updated>2020-11-25T15:15:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/parse.md b/reference/chrono/parse.md
index f2e563bb4..65c628be9 100644
--- a/reference/chrono/parse.md
+++ b/reference/chrono/parse.md
@@ -178,6 +178,7 @@ JST
 
 
 ## 参照
+- [LWG Issue 3131. `addressof` all the things](https://wg21.cmeerw.net/lwg/issue3131)
 - [LWG Issue 3218. Modifier for `%d` parse flag does not match POSIX and format specification](https://wg21.cmeerw.net/lwg/issue3218)
 - [LWG Issue 3235. `parse` manipulator without abbreviation is not callable](https://wg21.cmeerw.net/lwg/issue3235)
 - [LWG Issue 3245. Unnecessary restriction on `&amp;#39;%p&amp;#39;` parse specifier](https://wg21.cmeerw.net/lwg/issue3245)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>splice_after -- addressof関係の対応</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/splice_after.html"/>
      <id>55e6851ea2c52af5d82cff05d9f1d3b3e16fcbf4:reference/forward_list/forward_list/splice_after.md</id>
      <updated>2020-11-25T15:15:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/splice_after.md b/reference/forward_list/forward_list/splice_after.md
index 1f03b056e..712bd8cfd 100644
--- a/reference/forward_list/forward_list/splice_after.md
+++ b/reference/forward_list/forward_list/splice_after.md
@@ -31,6 +31,7 @@ void splice_after(const_iterator position, forward_list&amp;amp;&amp;amp; x,
 - 第1パラメータ`position`が、[`before_begin()`](before_begin.md)もしくは`[`[`begin()`](begin.md)`,` [`end()`](end.md))の範囲の間接参照可能なイテレータであること。
 - `i`, `first`, `last`が、`x`のイテレータであること。
 - [`get_allocator()`](get_allocator.md) `== x.`[`get_allocator()`](get_allocator.md)であること。(C++14)
+- [`addressof`](/reference/memory/addressof.md)`(x) != this`であること
 
 
 ## 効果
@@ -135,4 +136,4 @@ int main()
 - [LWG Issue 2045. `forward_list::merge` and `forward_list::splice_after` with unequal allocators](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2045)
 - [LWG Issue 2222. Inconsistency in description of `forward_list::splice_after` single-element overload](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2222)
 	- (3)と(4)のオーバーロードについて、有効性が継続される対象が、`*i`となっていたが、`*++i`の間違いであったため、C++14で修正された。
-
+- [LWG Issue 3017. `list` `splice` functions should use `addressof`](https://wg21.cmeerw.net/lwg/issue3017)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- addressof関係の対応</title>
      <link href="https://cpprefjp.github.io/reference/fstream/basic_fstream/op_constructor.html"/>
      <id>55e6851ea2c52af5d82cff05d9f1d3b3e16fcbf4:reference/fstream/basic_fstream/op_constructor.md</id>
      <updated>2020-11-25T15:15:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/fstream/basic_fstream/op_constructor.md b/reference/fstream/basic_fstream/op_constructor.md
index 9a52a997e..12bb50112 100644
--- a/reference/fstream/basic_fstream/op_constructor.md
+++ b/reference/fstream/basic_fstream/op_constructor.md
@@ -67,13 +67,17 @@ int main()
 ```cpp
 // (1)
 template&amp;lt;class CharT, class Traits&amp;gt;
-basic_fstream&amp;lt;CharT, Traits&amp;gt;::basic_fstream() : basic_iostream(&amp;amp;sb), sb() {
+basic_fstream&amp;lt;CharT, Traits&amp;gt;::basic_fstream()
+//: basic_iostream(&amp;amp;sb), sb() {           // C++98
+  : basic_iostream(addressof(sb)), sb() { // C++11
   // 本体は空
 }
 
 // (2)
 template&amp;lt;class CharT, class Traits&amp;gt;
-basic_fstream&amp;lt;CharT, Traits&amp;gt;::basic_fstream(const char* s, ios_base::openmode mode) : basic_iostream(&amp;amp;sb), sb() {
+basic_fstream&amp;lt;CharT, Traits&amp;gt;::basic_fstream(const char* s, ios_base::openmode mode)
+//: basic_iostream(&amp;amp;sb), sb() {           // C++98
+  : basic_iostream(addressof(sb)), sb() { // C++11
   if (rdbuf()-&amp;gt;open(s, mode) == nullptr) {
     setstate(failbit);
   }
@@ -81,16 +85,20 @@ basic_fstream&amp;lt;CharT, Traits&amp;gt;::basic_fstream(const char* s, ios_base::openmode mo
 
 // (3)
 template&amp;lt;class CharT, class Traits&amp;gt;
-basic_fstream&amp;lt;CharT, Traits&amp;gt;::basic_fstream(const string&amp;amp; s, ios_base::openmode mode) : basic_fstream(s.c_str(), mode) {
+basic_fstream&amp;lt;CharT, Traits&amp;gt;::basic_fstream(const string&amp;amp; s, ios_base::openmode mode)
+  : basic_fstream(s.c_str(), mode) {
   // 本体は空
 }
 
 // (5)
 template&amp;lt;class CharT, class Traits&amp;gt;
-basic_fstream&amp;lt;CharT, Traits&amp;gt;::basic_fstream(basic_fstream&amp;amp;&amp;amp; rhs) : basic_iostream(move(rhs)), sb(move(rhs.sb)) {
-  set_rdbuf(&amp;amp;sb);
+basic_fstream&amp;lt;CharT, Traits&amp;gt;::basic_fstream(basic_fstream&amp;amp;&amp;amp; rhs)
+  : basic_iostream(move(rhs)), sb(move(rhs.sb)) {
+  // set_rdbuf(&amp;amp;sb);        // C++98
+  set_rdbuf(addressof(sb)); // C++11
 }
 ```
+* addressof[link /reference/memory/addressof.md]
 
 ## バージョン
 ### 言語
@@ -101,3 +109,4 @@ basic_fstream&amp;lt;CharT, Traits&amp;gt;::basic_fstream(basic_fstream&amp;amp;&amp;amp; rhs) : basic_iostrea
 ## 参照
 
 - [LGW issue 2676. Provide filesystem::path overloads for File-based streams](https://wg21.cmeerw.net/lwg/issue2676)
+- [LWG Issue 3130. §[input.output] needs many `addressof`](https://wg21.cmeerw.net/lwg/issue3130)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- addressof関係の対応</title>
      <link href="https://cpprefjp.github.io/reference/fstream/basic_ifstream/op_constructor.html"/>
      <id>55e6851ea2c52af5d82cff05d9f1d3b3e16fcbf4:reference/fstream/basic_ifstream/op_constructor.md</id>
      <updated>2020-11-25T15:15:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/fstream/basic_ifstream/op_constructor.md b/reference/fstream/basic_ifstream/op_constructor.md
index 112b8df6a..253cf9e49 100644
--- a/reference/fstream/basic_ifstream/op_constructor.md
+++ b/reference/fstream/basic_ifstream/op_constructor.md
@@ -67,13 +67,17 @@ int main()
 ```cpp
 // (1)
 template&amp;lt;class CharT, class Traits&amp;gt;
-basic_ifstream&amp;lt;CharT, Traits&amp;gt;::basic_ifstream() : basic_istream(&amp;amp;sb), sb() {
+basic_ifstream&amp;lt;CharT, Traits&amp;gt;::basic_ifstream()
+//: basic_istream(&amp;amp;sb), sb() {           // C++98
+  : basic_istream(addressof(sb)), sb() { // C++11
   // 本体は空
 }
 
 // (2)
 template&amp;lt;class CharT, class Traits&amp;gt;
-basic_ifstream&amp;lt;CharT, Traits&amp;gt;::basic_ifstream(const char* s, ios_base::openmode mode) : basic_istream(&amp;amp;sb), sb() {
+basic_ifstream&amp;lt;CharT, Traits&amp;gt;::basic_ifstream(const char* s, ios_base::openmode mode)
+//: basic_istream(&amp;amp;sb), sb() {           // C++98
+  : basic_istream(addressof(sb)), sb() { // C++11
   if (rdbuf()-&amp;gt;open(s, mode | ios_base::in) == nullptr) {
     setstate(failbit);
   }
@@ -81,16 +85,20 @@ basic_ifstream&amp;lt;CharT, Traits&amp;gt;::basic_ifstream(const char* s, ios_base::openmode
 
 // (3)
 template&amp;lt;class CharT, class Traits&amp;gt;
-basic_ifstream&amp;lt;CharT, Traits&amp;gt;::basic_ifstream(const string&amp;amp; s, ios_base::openmode mode) : basic_ifstream(s.c_str(), mode) {
+basic_ifstream&amp;lt;CharT, Traits&amp;gt;::basic_ifstream(const string&amp;amp; s, ios_base::openmode mode)
+  : basic_ifstream(s.c_str(), mode) {
   // 本体は空
 }
 
 // (5)
 template&amp;lt;class CharT, class Traits&amp;gt;
-basic_ifstream&amp;lt;CharT, Traits&amp;gt;::basic_ifstream(basic_ifstream&amp;amp;&amp;amp; rhs) : basic_istream(move(rhs)), sb(move(rhs.sb)) {
-  set_rdbuf(&amp;amp;sb);
+basic_ifstream&amp;lt;CharT, Traits&amp;gt;::basic_ifstream(basic_ifstream&amp;amp;&amp;amp; rhs)
+  : basic_istream(move(rhs)), sb(move(rhs.sb)) {
+  // set_rdbuf(&amp;amp;sb);        // C++98
+  set_rdbuf(addressof(sb)); // C++11
 }
 ```
+* addressof[link /reference/memory/addressof.md]
 
 ## バージョン
 ### 言語
@@ -101,3 +109,4 @@ basic_ifstream&amp;lt;CharT, Traits&amp;gt;::basic_ifstream(basic_ifstream&amp;amp;&amp;amp; rhs) : basic_istr
 ## 参照
 
 - [LGW issue 2676. Provide filesystem::path overloads for File-based streams](https://wg21.cmeerw.net/lwg/issue2676)
+- [LWG Issue 3130. §[input.output] needs many `addressof`](https://wg21.cmeerw.net/lwg/issue3130)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- addressof関係の対応</title>
      <link href="https://cpprefjp.github.io/reference/fstream/basic_ofstream/op_constructor.html"/>
      <id>55e6851ea2c52af5d82cff05d9f1d3b3e16fcbf4:reference/fstream/basic_ofstream/op_constructor.md</id>
      <updated>2020-11-25T15:15:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/fstream/basic_ofstream/op_constructor.md b/reference/fstream/basic_ofstream/op_constructor.md
index ee067c14d..d25a91bfa 100644
--- a/reference/fstream/basic_ofstream/op_constructor.md
+++ b/reference/fstream/basic_ofstream/op_constructor.md
@@ -66,13 +66,17 @@ int main()
 ```cpp
 // (1)
 template&amp;lt;class CharT, class Traits&amp;gt;
-basic_ofstream&amp;lt;CharT, Traits&amp;gt;::basic_ofstream() : basic_istream(&amp;amp;sb), sb() {
+basic_ofstream&amp;lt;CharT, Traits&amp;gt;::basic_ofstream()
+//: basic_istream(&amp;amp;sb), sb() {           // C++98
+  : basic_istream(addressof(sb)), sb() { // C++11
   // 本体は空
 }
 
 // (2)
 template&amp;lt;class CharT, class Traits&amp;gt;
-basic_ofstream&amp;lt;CharT, Traits&amp;gt;::basic_ofstream(const char* s, ios_base::openmode mode) : basic_istream(&amp;amp;sb), sb() {
+basic_ofstream&amp;lt;CharT, Traits&amp;gt;::basic_ofstream(const char* s, ios_base::openmode mode)
+//: basic_istream(&amp;amp;sb), sb() {           // C++98
+  : basic_istream(addressof(sb)), sb() { // C++11
   if (rdbuf()-&amp;gt;open(s, mode | ios_base::out) == nullptr) {
     setstate(failbit);
   }
@@ -80,16 +84,20 @@ basic_ofstream&amp;lt;CharT, Traits&amp;gt;::basic_ofstream(const char* s, ios_base::openmode
 
 // (3)
 template&amp;lt;class CharT, class Traits&amp;gt;
-basic_ofstream&amp;lt;CharT, Traits&amp;gt;::basic_ofstream(const string&amp;amp; s, ios_base::openmode mode) : basic_ofstream(s.c_str(), mode) {
+basic_ofstream&amp;lt;CharT, Traits&amp;gt;::basic_ofstream(const string&amp;amp; s, ios_base::openmode mode)
+  : basic_ofstream(s.c_str(), mode) {
   // 本体は空
 }
 
 // (5)
 template&amp;lt;class CharT, class Traits&amp;gt;
-basic_ofstream&amp;lt;CharT, Traits&amp;gt;::basic_ofstream(basic_ofstream&amp;amp;&amp;amp; rhs) : basic_istream(move(rhs)), sb(move(rhs.sb)) {
-  set_rdbuf(&amp;amp;sb);
+basic_ofstream&amp;lt;CharT, Traits&amp;gt;::basic_ofstream(basic_ofstream&amp;amp;&amp;amp; rhs)
+  : basic_istream(move(rhs)), sb(move(rhs.sb)) {
+  // set_rdbuf(&amp;amp;sb);        // C++98
+  set_rdbuf(addressof(sb)); // C++11
 }
 ```
+* addressof[link /reference/memory/addressof.md]
 
 ## バージョン
 ### 言語
@@ -100,3 +108,4 @@ basic_ofstream&amp;lt;CharT, Traits&amp;gt;::basic_ofstream(basic_ofstream&amp;amp;&amp;amp; rhs) : basic_istr
 ## 参照
 
 - [LGW issue 2676. Provide filesystem::path overloads for File-based streams](https://wg21.cmeerw.net/lwg/issue2676)
+- [LWG Issue 3130. §[input.output] needs many `addressof`](https://wg21.cmeerw.net/lwg/issue3130)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copyfmt -- addressof関係の対応</title>
      <link href="https://cpprefjp.github.io/reference/ios/basic_ios/copyfmt.html"/>
      <id>55e6851ea2c52af5d82cff05d9f1d3b3e16fcbf4:reference/ios/basic_ios/copyfmt.md</id>
      <updated>2020-11-25T15:15:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ios/basic_ios/copyfmt.md b/reference/ios/basic_ios/copyfmt.md
index 97a122b73..a4dd8d4f1 100644
--- a/reference/ios/basic_ios/copyfmt.md
+++ b/reference/ios/basic_ios/copyfmt.md
@@ -14,8 +14,12 @@ basic_ios&amp;amp; copyfmt(const basic_ios&amp;amp; rhs);
 
 
 ## 効果
-もし `this == &amp;amp;rhs` であれば、何もしない。  
-そうでなければ、以下のように引数 `rhs` のメンバオブジェクトを `*this` の対応するメンバオブジェクトに代入する。
+- `*this`と`rhs`が同じオブジェクトを指している場合、何もしない
+    - C++03 : `this == &amp;amp;rhs`
+    - C++11 : `this ==` [`addressof`](/reference/memory/addressof.md)`(rhs)`
+- そうでなければ、以下のように引数 `rhs` のメンバオブジェクトを `*this` の対応するメンバオブジェクトに代入する。
+
+以下、代入の詳細：
 
 - [`register_callback`](../ios_base/register_callback.md) で登録されているすべてのコールバックの組 `(fn, index)` について、`(*fn)(`[`erase_event`](../ios_base/type-event.md)`, this, index)` の形式で呼び出す。
 - 以下の例外を除いて、引数 `rhs` のメンバオブジェクトを `*this` の対応するメンバオブジェクトに代入する。
@@ -72,7 +76,7 @@ int main()
 ### 言語
 - C++98
 
-## 参照
+## 関連項目
 - [`basic_ios`](../basic_ios.md)`::`[`rdstate`](rdstate.md)
 - [`basic_ios`](../basic_ios.md)`::`[`rdbuf`](rdbuf.md)
 - [`basic_ios`](../basic_ios.md)`::`[`exceptions`](exceptions.md)
@@ -81,3 +85,7 @@ int main()
 - [`ios_base`](../ios_base.md)`::`[`event`](../ios_base/type-event.md)
 - [`ios_base`](../ios_base.md)`::`[`event_callback`](../ios_base/type-event_callback.md)
 - [`ios_base`](../ios_base.md)`::`[`register_callback`](../ios_base/register_callback.md)
+
+
+## 参照
+- [LWG Issue 3130. §[input.output] needs many `addressof`](https://wg21.cmeerw.net/lwg/issue3130)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>splice -- addressof関係の対応</title>
      <link href="https://cpprefjp.github.io/reference/list/list/splice.html"/>
      <id>55e6851ea2c52af5d82cff05d9f1d3b3e16fcbf4:reference/list/list/splice.md</id>
      <updated>2020-11-25T15:15:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/splice.md b/reference/list/list/splice.md
index 24eb8eb62..23a7f3947 100644
--- a/reference/list/list/splice.md
+++ b/reference/list/list/splice.md
@@ -38,8 +38,9 @@ void splice(const_iterator position, list&amp;amp;&amp;amp; x,
 ## 要件
 - 第1パラメータ`position`が、`[`[`begin()`](begin.md)`,` [`end()`](end.md)`)`の範囲の間接参照可能なイテレータであること。
 - `i`, `first`, `last`が、`x`のイテレータであること。
-
-- (1), (2) : `&amp;amp;x != this`であること
+- (1), (2) :
+    - C++03 : `&amp;amp;x != this`であること
+    - C++11 : [`addressof`](/reference/memory/addressof.md)`(x) != this`であること
 - (5), (6) : `position`が`[first, last)`に含まれる場合、未定義動作。
 
 
@@ -55,7 +56,7 @@ void splice(const_iterator position, list&amp;amp;&amp;amp; x,
 - C++11から
     - (1), (2) : 定数時間
     - (3), (4) : 定数時間
-    - (5), (6) : `&amp;amp;x == this`の場合、定数時間。そうでない場合、`[first, last)`の要素数に対して線形時間
+    - (5), (6) : [`addressof`](/reference/memory/addressof.md)`(x) == this`の場合、定数時間。そうでない場合、`[first, last)`の要素数に対して線形時間
 
 
 ## 例外
@@ -138,3 +139,5 @@ int main()
 - [LWG Issue 250. splicing invalidates iterators](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#250)
 - [LWG Issue 1133. Does N2844 break current specification of `list::splice`?](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#250)
 - [N2350 Container insert/erase and iterator constness (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2350.pdf)
+- [LWG Issue 3017. `list` `splice` functions should use `addressof`](https://wg21.cmeerw.net/lwg/issue3017)
+- [LWG Issue 3087. One final `&amp;amp;x` in §[list.ops]](https://wg21.cmeerw.net/lwg/issue3087)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator-&gt; -- addressof関係の対応</title>
      <link href="https://cpprefjp.github.io/reference/regex/regex_iterator/op_arrow.html"/>
      <id>55e6851ea2c52af5d82cff05d9f1d3b3e16fcbf4:reference/regex/regex_iterator/op_arrow.md</id>
      <updated>2020-11-25T15:15:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/regex/regex_iterator/op_arrow.md b/reference/regex/regex_iterator/op_arrow.md
index ab4684be8..265f1fe18 100644
--- a/reference/regex/regex_iterator/op_arrow.md
+++ b/reference/regex/regex_iterator/op_arrow.md
@@ -18,7 +18,7 @@ const value_type* operator-&amp;gt;() const;
 
 
 ## 戻り値
-メンバ変数 `match` への `const` ポインタ `&amp;amp;match` を返す。（`match` は最後に[`regex_search`](../regex_search.md) を呼び出した際の値を保持している）
+メンバ変数 `match` への `const` ポインタ [`addressof`](/reference/memory/addressof.md)`(match)` を返す。（`match` は最後に[`regex_search`](../regex_search.md) を呼び出した際の値を保持している）
 
 
 ## 備考
@@ -75,3 +75,7 @@ prefix = &amp;#39;def&amp;#39;, str = &amp;#39;456&amp;#39;, suffix = &amp;#39;ghi&amp;#39;
 | [`(constructor)`](op_constructor.md) | コンストラクタ | C++11          |
 | [`operator++`](op_increment.md)      | インクリメント | C++11          |
 | [`operator==`](op_equal.md)          | 等値比較       | C++11          |
+
+
+## 参照
+- [LWG Issue 3040. `basic_string_view::starts_with` Effects are incorrect](https://wg21.cmeerw.net/lwg/issue3040)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- addressof関係の対応</title>
      <link href="https://cpprefjp.github.io/reference/regex/regex_iterator/op_constructor.html"/>
      <id>55e6851ea2c52af5d82cff05d9f1d3b3e16fcbf4:reference/regex/regex_iterator/op_constructor.md</id>
      <updated>2020-11-25T15:15:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/regex/regex_iterator/op_constructor.md b/reference/regex/regex_iterator/op_constructor.md
index 04b92cba9..7f31b25ce 100644
--- a/reference/regex/regex_iterator/op_constructor.md
+++ b/reference/regex/regex_iterator/op_constructor.md
@@ -26,7 +26,7 @@ regex_iterator(const regex_iterator&amp;amp;);
 
 ## 効果
 - (1) デフォルトコンストラクタ。シーケンスの終端を示す特別なイテレータを構築する。
-- (2) メンバ変数 `begin`、`end`、`pregex`、`flags` をそれぞれ `a`、`b`、`&amp;amp;re`、`m` で初期化して、[`regex_search`](../regex_search.md)`(begin, end, match, *pregex, flags)` を呼び出す。
+- (2) メンバ変数 `begin`、`end`、`pregex`、`flags` をそれぞれ `a`、`b`、[`addressof`](/reference/memory/addressof.md)`(re)`、`m` で初期化して、[`regex_search`](../regex_search.md)`(begin, end, match, *pregex, flags)` を呼び出す。
     検索に成功しなかった場合（`false` が返された場合）、デフォルトコンストラクタで構築した場合と同様、直ちにシーケンスの終端を示す特別なイテレータとなる。
 - (3) deleted コンストラクタであるため、使用するとコンパイルエラーとなる。
 - (4) コピーコンストラクタ。
@@ -88,3 +88,7 @@ match:11
 - libstdc++ には 5.0.0 rev.218373 現在、(3) の形式のコンストラクタは存在しない。
 - libc++ には、3.4 までは (3) の形式のコンストラクタは存在しない。
 - libstdc++ では 5.0.0 rev.218373 現在、コピーコンストラクタで構築したオブジェクトの `match.`[`position`](../match_results/position.md)`(i)` が補正されずに誤っている。（補正については [`operator++`](op_increment.md) の「効果」を参照）
+
+
+## 参照
+- [LWG Issue 3040. `basic_string_view::starts_with` Effects are incorrect](https://wg21.cmeerw.net/lwg/issue3040)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transform -- addressof関係の対応</title>
      <link href="https://cpprefjp.github.io/reference/regex/regex_traits/transform.html"/>
      <id>55e6851ea2c52af5d82cff05d9f1d3b3e16fcbf4:reference/regex/regex_traits/transform.md</id>
      <updated>2020-11-25T15:15:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/regex/regex_traits/transform.md b/reference/regex/regex_traits/transform.md
index 60fcfe8da..8e5c1b0dc 100644
--- a/reference/regex/regex_traits/transform.md
+++ b/reference/regex/regex_traits/transform.md
@@ -19,13 +19,13 @@ string_type transform(ForwardIterator first, ForwardIterator last) const;
 ```cpp
 string_type str(first, last);
 return use_facet&amp;lt;collate&amp;lt;char_type&amp;gt;&amp;gt;(getloc())
-         .transform(&amp;amp;*str.begin(), &amp;amp;*str.begin() + str.length());
+         .transform(str.data(), str.data() + str.length());
 ```
 * use_facet[link /reference/locale/use_facet.md.nolink]
 * collate[link /reference/locale/collate.md]
 * getloc()[link getloc.md]
 * transform[link /reference/locale/collate/transform.md.nolink]
-* str.begin()[link /reference/string/basic_string/begin.md]
+* str.data()[link /reference/string/basic_string/data.md]
 * str.length()[link /reference/string/basic_string/length.md]
 
 
@@ -77,3 +77,6 @@ int main()
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
 
+
+## 参照
+- [LWG Issue 3040. `basic_string_view::starts_with` Effects are incorrect](https://wg21.cmeerw.net/lwg/issue3040)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>c_str -- addressof関係の対応</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/c_str.html"/>
      <id>55e6851ea2c52af5d82cff05d9f1d3b3e16fcbf4:reference/string/basic_string/c_str.md</id>
      <updated>2020-11-25T15:15:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/c_str.md b/reference/string/basic_string/c_str.md
index df6d31654..af19d486c 100644
--- a/reference/string/basic_string/c_str.md
+++ b/reference/string/basic_string/c_str.md
@@ -41,7 +41,7 @@ C 言語で使用されている文字列表現である、NULL（つまり `cha
 	* C++11 から：対象オブジェクトに対する [`operator[]`](op_at.md)、[`at`](at.md)、[`front`](front.md)、[`back`](back.md)、[`begin`](begin.md)、[`rbegin`](rbegin.md)、[`end`](end.md)、[`rend`](rend.md) 以外の非コンストメンバ関数呼び出し、あるいは、[`basic_string`](/reference/string/basic_string.md) への非コンスト参照を引数に取る標準ライブラリ関数の、対象オブジェクトを渡しての呼び出し
 
 - 本メンバが返すポインタは、長さが [`size`](size.md)`() + 1` の `charT` 型の配列を指す。この配列は、最初の [`size`](size.md)`()` 要素は対象オブジェクトの文字列と等しく、最後の要素は NULL 文字、すなわち `charT()` である。  
-	なお、C++11 からは、本メンバ関数が返すポインタを `p` とすると、範囲 `[0,` [`size`](size.md)`()]` の全ての `i` について `p + i == &amp;amp;operator[](i)` を満たす。このことから、`*`[`end`](end.md)`() == charT()` を満たす。
+	なお、C++11 からは、本メンバ関数が返すポインタを `p` とすると、範囲 `[0,` [`size`](size.md)`()]` の全ての `i` について `p + i ==` [`addressof`](/reference/memory/addressof.md)`(operator[](i))` を満たす。このことから、`*`[`end`](end.md)`() == charT()` を満たす。
 
 - 対象オブジェクト内に NULL 文字があった場合、C 言語の文字列表現では正しく扱うことができないので注意すること。
 
@@ -79,3 +79,5 @@ Hello
 | [`data`](data.md) | 文字配列表現を取得する |
 
 
+## 参照
+- [LWG Issue 3131. `addressof` all the things](https://wg21.cmeerw.net/lwg/issue3131)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>data -- addressof関係の対応</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/data.html"/>
      <id>55e6851ea2c52af5d82cff05d9f1d3b3e16fcbf4:reference/string/basic_string/data.md</id>
      <updated>2020-11-25T15:15:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/data.md b/reference/string/basic_string/data.md
index bdd5f8533..fa3858190 100644
--- a/reference/string/basic_string/data.md
+++ b/reference/string/basic_string/data.md
@@ -45,7 +45,7 @@ charT* data() noexcept;             // (2) C++17
         - 本メンバ関数を呼び出しても、対象オブジェクトの要素への既存の参照、ポインタ、イテレータは無効にはならない。
         - 本メンバ関数で返されたポインタは、対象オブジェクトに対する非constメンバ関数呼び出しにより無効になる可能性がある。
         - 本メンバが返すポインタは、長さが [`size`](size.md)`() + 1` の `charT` 型の配列を指す。この配列は、最初の [`size`](size.md)`()` 要素は対象オブジェクトの文字列と等しく、最後の要素は NULL 文字、すなわち `charT()` である。  
-            - 本メンバ関数が返すポインタを `p` とすると、範囲 `[0,` [`size`](size.md)`()]` の全ての `i` について `p + i == &amp;amp;operator[](i)` を満たす。このことから、`*`[`end`](end.md)`() == charT()` を満たす。
+            - 本メンバ関数が返すポインタを `p` とすると、範囲 `[0,` [`size`](size.md)`()]` の全ての `i` について `p + i ==` [`addressof`](/reference/memory/addressof.md)`(operator[](i))` を満たす。このことから、`*`[`end`](end.md)`() == charT()` を満たす。
 - 対象オブジェクト内に NULL 文字があった場合、C 言語の文字列表現では正しく扱うことができないので注意すること。
 - (2) :
     - この関数を使用するユーザーは、`p +` [`size()`](size.md) (NULL終端) に格納されている値を変更してはならない
@@ -81,3 +81,4 @@ Hello, world!
 
 ## 参照
 - [P0272R1 Give `std::string` a non-const `.data()` member function.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0272r1.html)
+- [LWG Issue 3131. `addressof` all the things](https://wg21.cmeerw.net/lwg/issue3131)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- addressof関係の対応</title>
      <link href="https://cpprefjp.github.io/reference/syncstream/basic_osyncstream/op_constructor.html"/>
      <id>55e6851ea2c52af5d82cff05d9f1d3b3e16fcbf4:reference/syncstream/basic_osyncstream/op_constructor.md</id>
      <updated>2020-11-25T15:15:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/syncstream/basic_osyncstream/op_constructor.md b/reference/syncstream/basic_osyncstream/op_constructor.md
index 65a17ba24..1f5430d96 100644
--- a/reference/syncstream/basic_osyncstream/op_constructor.md
+++ b/reference/syncstream/basic_osyncstream/op_constructor.md
@@ -62,3 +62,4 @@ Hello, World!
 
 ## 参照
 - [P0053R7 C++ Synchronized Buffered Ostream](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0053r7.pdf)
+- [LWG Issue 3130. §[input.output] needs many `addressof`](https://wg21.cmeerw.net/lwg/issue3130)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rdbuf -- addressof関係の対応</title>
      <link href="https://cpprefjp.github.io/reference/syncstream/basic_osyncstream/rdbuf.html"/>
      <id>55e6851ea2c52af5d82cff05d9f1d3b3e16fcbf4:reference/syncstream/basic_osyncstream/rdbuf.md</id>
      <updated>2020-11-25T15:15:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/syncstream/basic_osyncstream/rdbuf.md b/reference/syncstream/basic_osyncstream/rdbuf.md
index aa1bf1f4d..4b65410e7 100644
--- a/reference/syncstream/basic_osyncstream/rdbuf.md
+++ b/reference/syncstream/basic_osyncstream/rdbuf.md
@@ -31,10 +31,10 @@ int main()
 {
   std::osyncstream bout(std::cout);
   bout1 &amp;lt;&amp;lt; &amp;#34;Hello, &amp;#34;;
-  
+
   auto syncbuf_ptr = bout.rdbuf();
   syncbuf_ptr-&amp;gt;emit(); // 文字が転送される
-  
+
   bout &amp;lt;&amp;lt; &amp;#34;World!&amp;#34; &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
 }
 ```
@@ -60,3 +60,4 @@ Hello, World!
 
 ## 参照
 - [P0053R7 C++ Synchronized Buffered Ostream](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0053r7.pdf)
+- [LWG Issue 3130. §[input.output] needs many `addressof`](https://wg21.cmeerw.net/lwg/issue3130)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
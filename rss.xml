<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2015-10-26T15:25:13.094154</updated>
  <id>6ccd0d60-9b51-419b-87a5-a5abe3edae66</id>

  
    <entry>
      <title>C++14 -- fix typo</title>
      <link href="http://cpprefjp.github.io/lang/cpp14.html"/>
      <id>080932fbd1de93ba54567a7aadfed16e28c3020f:lang/cpp14.md</id>
      <updated>2015-10-26 15:24:59 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;C++14&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++14とは、2014年12月に改訂され、ISO/IEC 14882:2014で標準規格化されたC++バージョンの通称である。&lt;/p&gt;
&lt;p&gt;前バージョンであるC++11からマイナーバージョンアップされ、小さな機能拡張が行われた。&lt;/p&gt;
&lt;p&gt;このバージョンは、策定中はC++1yと呼ばれていた。前バージョンであるC++11が策定中、C++0xと呼ばれていたことから、「xの次」という意味で「y」が使われていた。&lt;/p&gt;
&lt;h2&gt;言語機能&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2進数リテラル&lt;/td&gt;
&lt;td&gt;2進数を表す&lt;code&gt;0b&lt;/code&gt; or &lt;code&gt;0B&lt;/code&gt;プレフィックスを付けた数値リテラルの記述を可能とする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;通常関数の戻り値型推論&lt;/td&gt;
&lt;td&gt;関数の戻り値型を&lt;code&gt;auto&lt;/code&gt;にすることで、&lt;code&gt;return&lt;/code&gt;文から戻り値の型を推論させる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;汎用ラムダキャプチャ&lt;/td&gt;
&lt;td&gt;キャプチャに代入構文を導入し、一つの変数に複数のキャプチャ方法を指定可能にする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ジェネリックラムダ&lt;/td&gt;
&lt;td&gt;ラムダ式のパラメータを&lt;code&gt;auto&lt;/code&gt;にすることで、ジェネリックな関数呼び出し演算子を持つ関数オブジェクトを生成する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;変数テンプレート&lt;/td&gt;
&lt;td&gt;変数定義時のテンプレート指定を可能にする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;の制限緩和&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if&lt;/code&gt;文、&lt;code&gt;switch&lt;/code&gt;文による条件分岐の許可。&lt;br /&gt;&lt;code&gt;for&lt;/code&gt;文、&lt;code&gt;while&lt;/code&gt;文、&lt;code&gt;do-while&lt;/code&gt;文によるループの許可。&lt;br /&gt;&lt;code&gt;void&lt;/code&gt;戻り値型の許可&lt;br /&gt;初期化を伴う変数宣言の許可。&lt;br /&gt;変数書き換えの許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;宣言時のメンバ初期化を持つ型の集成体初期化を許可&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[[deprecated]]&lt;/code&gt;属性&lt;/td&gt;
&lt;td&gt;非推奨の機能であることを示す属性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数値リテラルの桁区切り文字&lt;/td&gt;
&lt;td&gt;シングルクォーテーションで数値リテラルを桁区切りする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;サイズ付きデアロケーション&lt;/td&gt;
&lt;td&gt;サイズをとる&lt;code&gt;delete&lt;/code&gt;演算子のオーバーロードを許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブラリ更新の概要&lt;/h2&gt;
&lt;h3&gt;コンテナ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;順序付き連想コンテナのルックアップ処理で、一時オブジェクトが生成されるコストを抑える拡張が行われた&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/find.html&#34;&gt;&lt;code&gt;std::map::find()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/count.html&#34;&gt;&lt;code&gt;std::map::count()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/lower_bound.html&#34;&gt;&lt;code&gt;std::map::lower_bound()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/upper_bound.html&#34;&gt;&lt;code&gt;std::map::upper_bound()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/equal_range.html&#34;&gt;&lt;code&gt;std::map::equal_range()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::map&lt;/code&gt;クラスのほか、&lt;code&gt;std::set&lt;/code&gt;、&lt;code&gt;std::multiset&lt;/code&gt;、&lt;code&gt;std::multimap&lt;/code&gt;の上記メンバ関数も対象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;イテレータ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Forward Iteratorを値初期化した場合に、どこも指さないヌルイテレータになる、という規定が追加された(参照 : &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3644.pdf&#34; target=&#34;_blank&#34;&gt;N3644 Null Forward Iterators&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;アルゴリズム&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;以下のアルゴリズムに、2つ目の範囲の終端イテレータをパラメータにとるバージョンを追加。これにより、2つの範囲が同じ長さかを事前にユーザーがチェックする必要がなくなった&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/mismatch.html&#34;&gt;&lt;code&gt;std::mismatch()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/equal.html&#34;&gt;&lt;code&gt;std::equal()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/is_permutation.html&#34;&gt;&lt;code&gt;std::is_permutation()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;乱数生成を行うアルゴリズム、&lt;code&gt;std::rand()&lt;/code&gt;と&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/random_shuffle.html&#34;&gt;&lt;code&gt;std::random_shuffle()&lt;/code&gt;&lt;/a&gt;を非推奨とする。&lt;code&gt;std::rand()&lt;/code&gt;の代わりに&lt;a href=&#34;http://cpprefjp.github.io/reference/random.html&#34;&gt;&lt;code&gt;&amp;lt;random&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダで定義される乱数生成器と分布クラスを、&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/random_shuffle.html&#34;&gt;&lt;code&gt;std::random_shuffle()&lt;/code&gt;&lt;/a&gt;の代わりに&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/shuffle.html&#34;&gt;&lt;code&gt;std::shuffle()&lt;/code&gt;&lt;/a&gt;を使用すること&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;メモリ管理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr.html&#34;&gt;&lt;code&gt;std::unique_ptr&lt;/code&gt;&lt;/a&gt;を生成するヘルパ関数&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/make_unique.html&#34;&gt;&lt;code&gt;std::make_unique()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;入出力&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;文字列をクォート修飾する&lt;a href=&#34;http://cpprefjp.github.io/reference/iomanip/quoted.html&#34;&gt;&lt;code&gt;std::quoted&lt;/code&gt;&lt;/a&gt;マニピュレータを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;汎用的なユーティリティ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2つの値を入れ替える関数&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/exchange.html&#34;&gt;&lt;code&gt;std::exchange()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;コンパイル時整数シーケンス&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/integer_sequence.html&#34;&gt;&lt;code&gt;std::integer_sequence&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;タプルを型の集合と見なし、型を指定して対応する値を取得する&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/get.html&#34;&gt;&lt;code&gt;std::get()&lt;/code&gt;&lt;/a&gt;のオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&lt;code&gt;&amp;lt;type_traits&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダの、メンバ型&lt;code&gt;type&lt;/code&gt;を定義するクラステンプレートに、エイリアステンプレート版を追加。そのバージョンには、&lt;code&gt;_t&lt;/code&gt;サフィックスが付く&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;リテラル演算子&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;&lt;code&gt;std::basic_string&lt;/code&gt;&lt;/a&gt;の&lt;a href=&#34;http://cpprefjp.github.io/reference/string/op_s.html&#34;&gt;リテラル演算子&lt;code&gt;s&lt;/code&gt;&lt;/a&gt;を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#34;hello&#34;s&lt;/code&gt;は、文字コード未規定の&lt;code&gt;std::string&lt;/code&gt;オブジェクトを表すリテラル&lt;/li&gt;
&lt;li&gt;&lt;code&gt;L&#34;hello&#34;s&lt;/code&gt;は、文字コード未規定の&lt;code&gt;std::wstring&lt;/code&gt;オブジェクトを表すリテラル&lt;/li&gt;
&lt;li&gt;&lt;code&gt;u8&#34;hello&#34;s&lt;/code&gt;は、UTF-8文字コードの&lt;code&gt;std::string&lt;/code&gt;オブジェクトを表すリテラル&lt;/li&gt;
&lt;li&gt;&lt;code&gt;u&#34;hello&#34;s&lt;/code&gt;は、UTF-16文字コードの&lt;code&gt;std::u16string&lt;/code&gt;オブジェクトを表すリテラル&lt;/li&gt;
&lt;li&gt;&lt;code&gt;U&#34;hello&#34;s&lt;/code&gt;は、UTF-32文字コードの&lt;code&gt;std::u32string&lt;/code&gt;オブジェクトを表すリテラル&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/duration.html&#34;&gt;&lt;code&gt;std::chrono::duration&lt;/code&gt;&lt;/a&gt;の、各時間単位を表す、以下のリテラルを追加&lt;ul&gt;
&lt;li&gt;ナノ秒単位を表す&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/duration/op_ns.html&#34;&gt;&lt;code&gt;ns&lt;/code&gt;リテラル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;マイクロ秒単位を表す&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/duration/op_us.html&#34;&gt;&lt;code&gt;us&lt;/code&gt;リテラル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ミリ秒単位を表す&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/duration/op_ms.html&#34;&gt;&lt;code&gt;ms&lt;/code&gt;リテラル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;秒単位を表す&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/duration/op_s.html&#34;&gt;&lt;code&gt;s&lt;/code&gt;リテラル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;分単位を表す&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/duration/op_min.html&#34;&gt;&lt;code&gt;min&lt;/code&gt;リテラル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;時単位を表す&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/duration/op_h.html&#34;&gt;&lt;code&gt;h&lt;/code&gt;リテラル&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex.html&#34;&gt;&lt;code&gt;std::complex&lt;/code&gt;&lt;/a&gt;の、各要素型を表す、以下のリテラルを追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::complex&amp;lt;double&amp;gt;&lt;/code&gt;を表す&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/op_i.html&#34;&gt;&lt;code&gt;i&lt;/code&gt;リテラル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::complex&amp;lt;float&amp;gt;&lt;/code&gt;を表す&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/op_if.html&#34;&gt;&lt;code&gt;if&lt;/code&gt;リテラル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::complex&amp;lt;long double&amp;gt;&lt;/code&gt;を表す&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/op_il.html&#34;&gt;&lt;code&gt;il&lt;/code&gt;リテラル&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;並行処理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Readers-writer lockと呼ばれる、書き込みを行うユーザーが1人、読み込みを行うユーザーが複数いる状況で効率的に振る舞うミューテックスの実装として、&lt;a href=&#34;http://cpprefjp.github.io/reference/shared_mutex.html&#34;&gt;&lt;code&gt;&amp;lt;shared_mutex&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/wiki/faq/cpp14&#34; target=&#34;_blank&#34;&gt;C++14 Overview - Standard C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>E Kawashima</name>
        <email>e-kwsm@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++14 -- C++14 : リンク切れを修正</title>
      <link href="http://cpprefjp.github.io/lang/cpp14.html"/>
      <id>7ef6d0898cea43e417d69cdd4f99f6945f5251c3:lang/cpp14.md</id>
      <updated>2015-10-26 14:55:09 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;C++14&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++14とは、2014年12月に改訂され、ISO/IEC 14882:2014で標準規格化されたC++バージョンの通称である。&lt;/p&gt;
&lt;p&gt;前バージョンであるC++11からマイナーバージョンアップされ、小さな機能拡張が行われた。&lt;/p&gt;
&lt;p&gt;このバージョンは、策定中はC++1yと呼ばれていた。前バージョンであるC++11が策定中、C++0xと呼ばれていたことから、「xの次」という意味で「y」が使われていた。&lt;/p&gt;
&lt;h2&gt;言語機能&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2進数リテラル&lt;/td&gt;
&lt;td&gt;2進数を表す&lt;code&gt;0b&lt;/code&gt; or &lt;code&gt;0B&lt;/code&gt;プレフィックスを付けた数値リテラルの記述を可能とする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;通常関数の戻り値型推論&lt;/td&gt;
&lt;td&gt;関数の戻り値型を&lt;code&gt;auto&lt;/code&gt;にすることで、&lt;code&gt;return&lt;/code&gt;文から戻り値の型を推論させる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;汎用ラムダキャプチャ&lt;/td&gt;
&lt;td&gt;キャプチャに代入構文を導入し、一つの変数に複数のキャプチャ方法を指定可能にする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ジェネリックラムダ&lt;/td&gt;
&lt;td&gt;ラムダ式のパラメータを&lt;code&gt;auto&lt;/code&gt;にすることで、ジェネリックな関数呼び出し演算子を持つ関数オブジェクトを生成する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;変数テンプレート&lt;/td&gt;
&lt;td&gt;変数定義時のテンプレート指定を可能にする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;の制限緩和&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if&lt;/code&gt;文、&lt;code&gt;switch&lt;/code&gt;文による条件分岐の許可。&lt;br /&gt;&lt;code&gt;for&lt;/code&gt;文、&lt;code&gt;while&lt;/code&gt;文、&lt;code&gt;do-while&lt;/code&gt;文によるループの許可。&lt;br /&gt;&lt;code&gt;void&lt;/code&gt;戻り値型の許可&lt;br /&gt;初期化を伴う変数宣言の許可。&lt;br /&gt;変数書き換えの許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;宣言時のメンバ初期化を持つ型の集成体初期化を許可&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[[deprecated]]&lt;/code&gt;属性&lt;/td&gt;
&lt;td&gt;非推奨の機能であることを示す属性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数値リテラルの桁区切り文字&lt;/td&gt;
&lt;td&gt;シングルクォーテーションで数値リテラルを桁区切りする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;サイズ付きデアロケーション&lt;/td&gt;
&lt;td&gt;サイズをとる&lt;code&gt;delete&lt;/code&gt;演算子のオーバーロードを許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブラリ更新の概要&lt;/h2&gt;
&lt;h3&gt;コンテナ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;順序付き連想コンテナのルックアップ処理で、一時オブジェクトが生成されるコストを抑える拡張が行われた&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/find.html&#34;&gt;&lt;code&gt;std::map::find()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/count.html&#34;&gt;&lt;code&gt;std::map::count()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/lower_bound.html&#34;&gt;&lt;code&gt;std::map::lower_bound()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/upper_bound.html&#34;&gt;&lt;code&gt;std::map::upper_bound()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/equal_range.html&#34;&gt;&lt;code&gt;std::map::equal_range()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::map&lt;/code&gt;クラスのほか、&lt;code&gt;std::set&lt;/code&gt;、&lt;code&gt;std::multiset&lt;/code&gt;、&lt;code&gt;std::multimap&lt;/code&gt;の上記メンバ関数も対象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;イテレータ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Forward Iteratorを値初期化した場合に、どこも指さない塗るイテレータになる、という規定が追加された(参照 : &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3644.pdf&#34; target=&#34;_blank&#34;&gt;N3644 Null Forward Iterators&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;アルゴリズム&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;以下のアルゴリズムに、2つ目の範囲の終端イテレータをパラメータにとるバージョンを追加。これにより、2つの範囲が同じ長さかを事前にユーザーがチェックする必要がなくなった&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/mismatch.html&#34;&gt;&lt;code&gt;std::mismatch()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/equal.html&#34;&gt;&lt;code&gt;std::equal()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/is_permutation.html&#34;&gt;&lt;code&gt;std::is_permutation()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;乱数生成を行うアルゴリズム、&lt;code&gt;std::rand()&lt;/code&gt;と&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/random_shuffle.html&#34;&gt;&lt;code&gt;std::random_shuffle()&lt;/code&gt;&lt;/a&gt;を非推奨とする。&lt;code&gt;std::rand()&lt;/code&gt;の代わりに&lt;a href=&#34;http://cpprefjp.github.io/reference/random.html&#34;&gt;&lt;code&gt;&amp;lt;random&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダで定義される乱数生成器と分布クラスを、&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/random_shuffle.html&#34;&gt;&lt;code&gt;std::random_shuffle()&lt;/code&gt;&lt;/a&gt;の代わりに&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/shuffle.html&#34;&gt;&lt;code&gt;std::shuffle()&lt;/code&gt;&lt;/a&gt;を使用すること&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;メモリ管理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr.html&#34;&gt;&lt;code&gt;std::unique_ptr&lt;/code&gt;&lt;/a&gt;を生成するヘルパ関数&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/make_unique.html&#34;&gt;&lt;code&gt;std::make_unique()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;入出力&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;文字列をクォート修飾する&lt;a href=&#34;http://cpprefjp.github.io/reference/iomanip/quoted.html&#34;&gt;&lt;code&gt;std::quoted&lt;/code&gt;&lt;/a&gt;マニピュレータを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;汎用的なユーティリティ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2つの値を入れ替える関数&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/exchange.html&#34;&gt;&lt;code&gt;std::exchange()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;コンパイル時整数シーケンス&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/integer_sequence.html&#34;&gt;&lt;code&gt;std::integer_sequence&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;タプルを型の集合と見なし、型を指定して対応する値を取得する&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/get.html&#34;&gt;&lt;code&gt;std::get()&lt;/code&gt;&lt;/a&gt;のオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&lt;code&gt;&amp;lt;type_traits&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダの、メンバ型&lt;code&gt;type&lt;/code&gt;を定義するクラステンプレートに、エイリアステンプレート版を追加。そのバージョンには、&lt;code&gt;_t&lt;/code&gt;サフィックスが付く&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;リテラル演算子&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;&lt;code&gt;std::basic_string&lt;/code&gt;&lt;/a&gt;の&lt;a href=&#34;http://cpprefjp.github.io/reference/string/op_s.html&#34;&gt;リテラル演算子&lt;code&gt;s&lt;/code&gt;&lt;/a&gt;を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#34;hello&#34;s&lt;/code&gt;は、文字コード未規定の&lt;code&gt;std::string&lt;/code&gt;オブジェクトを表すリテラル&lt;/li&gt;
&lt;li&gt;&lt;code&gt;L&#34;hello&#34;s&lt;/code&gt;は、文字コード未規定の&lt;code&gt;std::wstring&lt;/code&gt;オブジェクトを表すリテラル&lt;/li&gt;
&lt;li&gt;&lt;code&gt;u8&#34;hello&#34;s&lt;/code&gt;は、UTF-8文字コードの&lt;code&gt;std::string&lt;/code&gt;オブジェクトを表すリテラル&lt;/li&gt;
&lt;li&gt;&lt;code&gt;u&#34;hello&#34;s&lt;/code&gt;は、UTF-16文字コードの&lt;code&gt;std::u16string&lt;/code&gt;オブジェクトを表すリテラル&lt;/li&gt;
&lt;li&gt;&lt;code&gt;U&#34;hello&#34;s&lt;/code&gt;は、UTF-32文字コードの&lt;code&gt;std::u32string&lt;/code&gt;オブジェクトを表すリテラル&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/duration.html&#34;&gt;&lt;code&gt;std::chrono::duration&lt;/code&gt;&lt;/a&gt;の、各時間単位を表す、以下のリテラルを追加&lt;ul&gt;
&lt;li&gt;ナノ秒単位を表す&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/duration/op_ns.html&#34;&gt;&lt;code&gt;ns&lt;/code&gt;リテラル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;マイクロ秒単位を表す&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/duration/op_us.html&#34;&gt;&lt;code&gt;us&lt;/code&gt;リテラル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ミリ秒単位を表す&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/duration/op_ms.html&#34;&gt;&lt;code&gt;ms&lt;/code&gt;リテラル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;秒単位を表す&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/duration/op_s.html&#34;&gt;&lt;code&gt;s&lt;/code&gt;リテラル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;分単位を表す&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/duration/op_min.html&#34;&gt;&lt;code&gt;min&lt;/code&gt;リテラル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;時単位を表す&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/duration/op_h.html&#34;&gt;&lt;code&gt;h&lt;/code&gt;リテラル&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex.html&#34;&gt;&lt;code&gt;std::complex&lt;/code&gt;&lt;/a&gt;の、各要素型を表す、以下のリテラルを追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::complex&amp;lt;double&amp;gt;&lt;/code&gt;を表す&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/op_i.html&#34;&gt;&lt;code&gt;i&lt;/code&gt;リテラル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::complex&amp;lt;float&amp;gt;&lt;/code&gt;を表す&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/op_if.html&#34;&gt;&lt;code&gt;if&lt;/code&gt;リテラル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::complex&amp;lt;long double&amp;gt;&lt;/code&gt;を表す&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/op_il.html&#34;&gt;&lt;code&gt;il&lt;/code&gt;リテラル&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;並行処理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Readers-writer lockと呼ばれる、書き込みを行うユーザーが1人、読み込みを行うユーザーが複数いる状況で効率的に振る舞うミューテックスの実装として、&lt;a href=&#34;http://cpprefjp.github.io/reference/shared_mutex.html&#34;&gt;&lt;code&gt;&amp;lt;shared_mutex&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/wiki/faq/cpp14&#34; target=&#34;_blank&#34;&gt;C++14 Overview - Standard C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++14 -- C++14 : ライブラリ更新の概要を追加(fix #282)</title>
      <link href="http://cpprefjp.github.io/lang/cpp14.html"/>
      <id>260663e6308bc9616a6a89d37ffa154d56f18ca0:lang/cpp14.md</id>
      <updated>2015-10-26 14:50:58 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;C++14&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++14とは、2014年12月に改訂され、ISO/IEC 14882:2014で標準規格化されたC++バージョンの通称である。&lt;/p&gt;
&lt;p&gt;前バージョンであるC++11からマイナーバージョンアップされ、小さな機能拡張が行われた。&lt;/p&gt;
&lt;p&gt;このバージョンは、策定中はC++1yと呼ばれていた。前バージョンであるC++11が策定中、C++0xと呼ばれていたことから、「xの次」という意味で「y」が使われていた。&lt;/p&gt;
&lt;h2&gt;言語機能&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2進数リテラル&lt;/td&gt;
&lt;td&gt;2進数を表す&lt;code&gt;0b&lt;/code&gt; or &lt;code&gt;0B&lt;/code&gt;プレフィックスを付けた数値リテラルの記述を可能とする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;通常関数の戻り値型推論&lt;/td&gt;
&lt;td&gt;関数の戻り値型を&lt;code&gt;auto&lt;/code&gt;にすることで、&lt;code&gt;return&lt;/code&gt;文から戻り値の型を推論させる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;汎用ラムダキャプチャ&lt;/td&gt;
&lt;td&gt;キャプチャに代入構文を導入し、一つの変数に複数のキャプチャ方法を指定可能にする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ジェネリックラムダ&lt;/td&gt;
&lt;td&gt;ラムダ式のパラメータを&lt;code&gt;auto&lt;/code&gt;にすることで、ジェネリックな関数呼び出し演算子を持つ関数オブジェクトを生成する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;変数テンプレート&lt;/td&gt;
&lt;td&gt;変数定義時のテンプレート指定を可能にする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;の制限緩和&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if&lt;/code&gt;文、&lt;code&gt;switch&lt;/code&gt;文による条件分岐の許可。&lt;br /&gt;&lt;code&gt;for&lt;/code&gt;文、&lt;code&gt;while&lt;/code&gt;文、&lt;code&gt;do-while&lt;/code&gt;文によるループの許可。&lt;br /&gt;&lt;code&gt;void&lt;/code&gt;戻り値型の許可&lt;br /&gt;初期化を伴う変数宣言の許可。&lt;br /&gt;変数書き換えの許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;宣言時のメンバ初期化を持つ型の集成体初期化を許可&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[[deprecated]]&lt;/code&gt;属性&lt;/td&gt;
&lt;td&gt;非推奨の機能であることを示す属性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数値リテラルの桁区切り文字&lt;/td&gt;
&lt;td&gt;シングルクォーテーションで数値リテラルを桁区切りする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;サイズ付きデアロケーション&lt;/td&gt;
&lt;td&gt;サイズをとる&lt;code&gt;delete&lt;/code&gt;演算子のオーバーロードを許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブラリ更新の概要&lt;/h2&gt;
&lt;h3&gt;コンテナ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;順序付き連想コンテナのルックアップ処理で、一時オブジェクトが生成されるコストを抑える拡張が行われた&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/find.html&#34;&gt;&lt;code&gt;std::map::find()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/count.html&#34;&gt;&lt;code&gt;std::map::count()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/lower_bound.html&#34;&gt;&lt;code&gt;std::map::lower_bound()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/upper_bound.html&#34;&gt;&lt;code&gt;std::map::upper_bound()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/equal_range.html&#34;&gt;&lt;code&gt;std::map::equal_range()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::map&lt;/code&gt;クラスのほか、&lt;code&gt;std::set&lt;/code&gt;、&lt;code&gt;std::multiset&lt;/code&gt;、&lt;code&gt;std::multimap&lt;/code&gt;の上記メンバ関数も対象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;イテレータ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Forward Iteratorを値初期化した場合に、どこも指さない塗るイテレータになる、という規定が追加された(参照 : &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3644.pdf&#34; target=&#34;_blank&#34;&gt;N3644 Null Forward Iterators&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;アルゴリズム&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;以下のアルゴリズムに、2つ目の範囲の終端イテレータをパラメータにとるバージョンを追加。これにより、2つの範囲が同じ長さかを事前にユーザーがチェックする必要がなくなった&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/mismatch.html&#34;&gt;&lt;code&gt;std::mismatch()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/equal.html&#34;&gt;&lt;code&gt;std::equal()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/is_permutation.html&#34;&gt;&lt;code&gt;std::is_permutation()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;乱数生成を行うアルゴリズム、&lt;code&gt;std::rand()&lt;/code&gt;と&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/random_shuffle.html&#34;&gt;&lt;code&gt;std::random_shuffle()&lt;/code&gt;&lt;/a&gt;を非推奨とする。&lt;code&gt;std::rand()&lt;/code&gt;の代わりに&lt;a href=&#34;http://cpprefjp.github.io/reference/random.html&#34;&gt;&lt;code&gt;&amp;lt;random&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダで定義される乱数生成器と分布クラスを、&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/random_shuffle.html&#34;&gt;&lt;code&gt;std::random_shuffle()&lt;/code&gt;&lt;/a&gt;の代わりに&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/shuffle.html&#34;&gt;&lt;code&gt;std::shuffle()&lt;/code&gt;&lt;/a&gt;を使用すること&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;メモリ管理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr.html&#34;&gt;&lt;code&gt;std::unique_ptr&lt;/code&gt;&lt;/a&gt;を生成するヘルパ関数&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/make_unique.html&#34;&gt;&lt;code&gt;std::make_unique()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;入出力&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;文字列をクォート修飾する&lt;a href=&#34;http://cpprefjp.github.io/reference/iomanip/quated.html&#34;&gt;&lt;code&gt;std::quated&lt;/code&gt;&lt;/a&gt;マニピュレータを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;汎用的なユーティリティ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2つの値を入れ替える関数&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/exchange.html&#34;&gt;&lt;code&gt;std::exchange()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;コンパイル時整数シーケンス&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/integer_sequence.html&#34;&gt;&lt;code&gt;std::integer_sequence&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;タプルを型の集合と見なし、型を指定して対応する値を取得する&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/get.html&#34;&gt;&lt;code&gt;std::get()&lt;/code&gt;&lt;/a&gt;のオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&lt;code&gt;&amp;lt;type_traits&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダの、メンバ型&lt;code&gt;type&lt;/code&gt;を定義するクラステンプレートに、エイリアステンプレート版を追加。そのバージョンには、&lt;code&gt;_t&lt;/code&gt;サフィックスが付く&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;リテラル演算子&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;&lt;code&gt;std::basic_string&lt;/code&gt;&lt;/a&gt;の&lt;a href=&#34;http://cpprefjp.github.io/reference/string/op_s.html&#34;&gt;リテラル演算子&lt;code&gt;s&lt;/code&gt;&lt;/a&gt;を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#34;hello&#34;s&lt;/code&gt;は、文字コード未規定の&lt;code&gt;std::string&lt;/code&gt;オブジェクトを表すリテラル&lt;/li&gt;
&lt;li&gt;&lt;code&gt;L&#34;hello&#34;s&lt;/code&gt;は、文字コード未規定の&lt;code&gt;std::wstring&lt;/code&gt;オブジェクトを表すリテラル&lt;/li&gt;
&lt;li&gt;&lt;code&gt;u8&#34;hello&#34;s&lt;/code&gt;は、UTF-8文字コードの&lt;code&gt;std::string&lt;/code&gt;オブジェクトを表すリテラル&lt;/li&gt;
&lt;li&gt;&lt;code&gt;u&#34;hello&#34;s&lt;/code&gt;は、UTF-16文字コードの&lt;code&gt;std::u16string&lt;/code&gt;オブジェクトを表すリテラル&lt;/li&gt;
&lt;li&gt;&lt;code&gt;U&#34;hello&#34;s&lt;/code&gt;は、UTF-32文字コードの&lt;code&gt;std::u32string&lt;/code&gt;オブジェクトを表すリテラル&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/duration.html&#34;&gt;&lt;code&gt;std::chrono::duration&lt;/code&gt;&lt;/a&gt;の、各時間単位を表す、以下のリテラルを追加&lt;ul&gt;
&lt;li&gt;ナノ秒単位を表す&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/duration/op_ns.html&#34;&gt;&lt;code&gt;ns&lt;/code&gt;リテラル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;マイクロ秒単位を表す&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/duration/op_us.html&#34;&gt;&lt;code&gt;us&lt;/code&gt;リテラル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ミリ秒単位を表す&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/duration/op_ms.html&#34;&gt;&lt;code&gt;ms&lt;/code&gt;リテラル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;秒単位を表す&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/op_s.html&#34;&gt;&lt;code&gt;s&lt;/code&gt;リテラル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;分単位を表す&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/op_min.html&#34;&gt;&lt;code&gt;min&lt;/code&gt;リテラル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;時単位を表す&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/op_h.html&#34;&gt;&lt;code&gt;h&lt;/code&gt;リテラル&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex.html&#34;&gt;&lt;code&gt;std::complex&lt;/code&gt;&lt;/a&gt;の、各要素型を表す、以下のリテラルを追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::complex&amp;lt;double&amp;gt;&lt;/code&gt;を表す&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/op_i.html&#34;&gt;&lt;code&gt;i&lt;/code&gt;リテラル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::complex&amp;lt;float&amp;gt;&lt;/code&gt;を表す&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/op_if.html&#34;&gt;&lt;code&gt;if&lt;/code&gt;リテラル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::complex&amp;lt;long double&amp;gt;&lt;/code&gt;を表す&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/il.html&#34;&gt;&lt;code&gt;il&lt;/code&gt;リテラル&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;並行処理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Readers-writer lockと呼ばれる、書き込みを行うユーザーが1人、読み込みを行うユーザーが複数いる状況で効率的に振る舞うミューテックスの実装として、&lt;a href=&#34;http://cpprefjp.github.io/reference/shared_mutex.html&#34;&gt;&lt;code&gt;&amp;lt;shared_mutex&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/wiki/faq/cpp14&#34; target=&#34;_blank&#34;&gt;C++14 Overview - Standard C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++11 -- C++11 : 見出しレベルの設定ミスを修正</title>
      <link href="http://cpprefjp.github.io/lang/cpp11.html"/>
      <id>d95df6e4275394f3a96e7019ec23ba1f7ee04875:lang/cpp11.md</id>
      <updated>2015-10-26 01:48:39 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;C++11&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++11とは、2011年8月に改訂され、ISO/IEC 14882:2011で標準規格化されたC++バージョンの通称である。&lt;/p&gt;
&lt;p&gt;前バージョンであるC++03からメジャーバージョンアップされ、多くの有用な機能が追加された。&lt;/p&gt;
&lt;p&gt;このバージョンは、策定中はC++0xと呼ばれていた。これは、2009年中までに策定を完了させることを目指して、下一桁を伏せ字にしたものである。&lt;/p&gt;
&lt;h2&gt;言語機能&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;alignas&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アラインメント指定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;alignof&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アラインメント取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型推論&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;decltype&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式の型を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;定義済みマクロ&lt;/td&gt;
&lt;td&gt;C++11で更新された定義済みマクロ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定数式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;関数の&lt;code&gt;default&lt;/code&gt;／&lt;code&gt;delete&lt;/code&gt;宣言&lt;/td&gt;
&lt;td&gt;自動定義される特殊関数の制御&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;移譲コンストラクタ&lt;/td&gt;
&lt;td&gt;コンストラクタから他のコンストラクタに処理を移譲する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;explicit operator T()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;明示的型変換の演算子オーバーロード&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;拡張&lt;code&gt;friend&lt;/code&gt;宣言&lt;/td&gt;
&lt;td&gt;テンプレートパラメータや&lt;code&gt;typedef&lt;/code&gt;名を&lt;code&gt;friend&lt;/code&gt;宣言する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;extern template&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;テンプレートのインスタンス化を抑止する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;継承コンストラクタ&lt;/td&gt;
&lt;td&gt;基本クラスのコンストラクタを継承する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ラムダ式&lt;/td&gt;
&lt;td&gt;関数オブジェクトをその場に書く&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ローカルクラスと無名クラスを、テンプレート引数として使用する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;インライン名前空間&lt;/td&gt;
&lt;td&gt;ネストした名前空間に、透過的にアクセスする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;char16_t&lt;/code&gt;、&lt;code&gt;char32_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;UTF-16とUTF-8の文字型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Unicode文字列リテラル&lt;/td&gt;
&lt;td&gt;UTF-8、UTF-16、UTF-32のエンコーディングを規定したプレフィックス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;生文字列リテラル&lt;/td&gt;
&lt;td&gt;エスケープシーケンスを無視する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ユーザー定義リテラル&lt;/td&gt;
&lt;td&gt;リテラルのサフィックスをユーザー定義する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;戻り値の型を後置する関数宣言構文&lt;/td&gt;
&lt;td&gt;戻り値の型を後ろに書けるようにすることで、パラメータオブジェクトを戻り値型の文脈で使用できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/lang/cpp11/nullptr.html&#34;&gt;&lt;code&gt;nullptr&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ヌルポインタを表すポインタリテラル&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;テンプレートの右山カッコ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vector&amp;lt;basic_string&amp;lt;char&amp;gt;&amp;gt;&lt;/code&gt;のように、&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;をスペースを空けずに記述可能にする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;右辺値参照・ムーブセマンティクス&lt;/td&gt;
&lt;td&gt;右辺値によるオーバーロード、およびそれによるリソースの所有権移動&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static_assert&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時アサート&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;enum&lt;/code&gt;の先行宣言&lt;/td&gt;
&lt;td&gt;&lt;code&gt;enum&lt;/code&gt;の先行宣言を許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;enum class&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;強い型付けとスコープを持つ列挙型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;エイリアステンプレート&lt;/td&gt;
&lt;td&gt;テンプレートによって型の別名を定義する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;union&lt;/code&gt;の制限解除&lt;/td&gt;
&lt;td&gt;共用体のメンバ変数として、クラスオブジェクトを持てるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可変引数テンプレート&lt;/td&gt;
&lt;td&gt;任意の数のテンプレートパラメータを受け取れるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;範囲for文&lt;/td&gt;
&lt;td&gt;配列やコンテナといった範囲を表すオブジェクトを、簡潔に走査する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;override&lt;/code&gt;と&lt;code&gt;final&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メンバ関数のオーバーライド指定、および派生クラスでのオーバーロードの禁止を指定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;属性構文&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[[attr]]&lt;/code&gt;構文による、クラス、関数、変数の属性指定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;メンバ関数の左辺値／右辺値修飾&lt;/td&gt;
&lt;td&gt;オブジェクトが左辺値／右辺値の場合のみ呼び出し可能であることの指定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;非静的データメンバの初期化&lt;/td&gt;
&lt;td&gt;メンバ変数を、宣言と同時に初期値指定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;初期化子リスト&lt;/td&gt;
&lt;td&gt;波括弧による初期化をユーザー定義する。&lt;code&gt;vector&amp;lt;int&amp;gt; v = {1, 2, 3};&lt;/code&gt;など。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;一様初期化&lt;/td&gt;
&lt;td&gt;コンストラクタの呼び出しを、波カッコで行う。&lt;code&gt;T x {a, b, c};&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;noexcept&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数の例外指定、例外を投げる可能性のある式か`boolP値を返す演算子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;任意の式によるSFINAE&lt;/td&gt;
&lt;td&gt;特定の式が有効かどうかで、その関数をオーバーロード解決に含めるかどうかを決定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;thread_local&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;スレッドローカルストレージ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ブロックスコープを持つ&lt;code&gt;static&lt;/code&gt;変数初期化のスレッドセーフ化&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;C99互換機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;可変引数マクロ&lt;/td&gt;
&lt;td&gt;マクロで任意の数の引数を受け取る&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_Pragma&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;処理系定義の機能を使用する単項演算子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;定義済みマクロ&lt;/td&gt;
&lt;td&gt;C99互換で導入された定義済みマクロ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;文字列リテラルとワイド文字列リテラルの結合&lt;/td&gt;
&lt;td&gt;ワイド文字列定数として結合する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;long long&lt;/code&gt;型&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long&lt;/code&gt;以上の大きさを持つ整数型&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブラリ更新の概要&lt;/h2&gt;
&lt;h3&gt;コンテナ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;固定長配列クラス&lt;a href=&#34;http://cpprefjp.github.io/reference/array.html&#34;&gt;&lt;code&gt;std::array&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;単方向リンクリストの実装である&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;&lt;code&gt;std::forward_list&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;ハッシュ表の連想コンテナである&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map.html&#34;&gt;&lt;code&gt;std::unordered_map&lt;/code&gt;&lt;/a&gt;クラス、&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set.html&#34;&gt;&lt;code&gt;std::unordered_set&lt;/code&gt;&lt;/a&gt;クラス、およびその重複を許可するバージョンを追加&lt;/li&gt;
&lt;li&gt;コンテナ全般がムーブセマンティクスに対応&lt;ul&gt;
&lt;li&gt;クラステンプレートのパラメータ&lt;code&gt;T&lt;/code&gt;が、コピー構築可能な型だけでなく、ムーブ構築のみ可能な型も受け付けるようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;push_back()&lt;/code&gt;や&lt;code&gt;insert()&lt;/code&gt;等の要素追加のためのメンバ関数が、新たな要素のコピーだけでなく、一時オブジェクトも受け取れて、ムーブで挿入ができるようになった。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;要素追加のためのメンバ関数として、クラステンプレートのパラメータ&lt;code&gt;T&lt;/code&gt;のコンストラクタ引数を受け取り、一時オブジェクトの生成コストを減らせるものが追加された。これらは、以下のように命名されたメンバ関数である：&lt;code&gt;emplace()&lt;/code&gt;、&lt;code&gt;emplace_back()&lt;/code&gt;、&lt;code&gt;emplace_front()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;コンテナのメモリアロケータが状態を持てるようになった&lt;/li&gt;
&lt;li&gt;初期化子リストでコンテナを初期化できるようになった&lt;/li&gt;
&lt;li&gt;初期化子リストをパラメータで受け取れるようにするためのクラス&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;&lt;code&gt;std::initializer_list&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;型情報型を連想コンテナのキーとして使用するための&lt;a href=&#34;http://cpprefjp.github.io/reference/typeindex/type_index.html&#34;&gt;&lt;code&gt;std::type_index&lt;/code&gt;&lt;/a&gt;クラスを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;イテレータ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;イテレータを進める関数&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;&lt;code&gt;std::next()&lt;/code&gt;&lt;/a&gt;、イテレータを逆に進める関数&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/prev.html&#34;&gt;&lt;code&gt;std::prev()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;要素をムーブするイテレータとして、&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/move_iterator.html&#34;&gt;&lt;code&gt;std::move_iterator&lt;/code&gt;&lt;/a&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;先頭イテレータと末尾イテレータを取得する非メンバ関数として、&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/begin.html&#34;&gt;&lt;code&gt;std::begin()&lt;/code&gt;&lt;/a&gt;と&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/end.html&#34;&gt;&lt;code&gt;std::end()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;アルゴリズム&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;範囲が特定の条件を満たしているか調べる、&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/all_of.html&#34;&gt;&lt;code&gt;std::all_of()&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/any_of.html&#34;&gt;&lt;code&gt;std::any_of()&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/none_of.html&#34;&gt;&lt;code&gt;std::none_of&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;条件を満たしていない最初の要素を検索する&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/find_if_not.html&#34;&gt;&lt;code&gt;std::find_if_not()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;指定された数の要素をコピーする&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/copy_n.html&#34;&gt;&lt;code&gt;std::copy_n()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;条件を満たす要素のみをコピーする&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/copy_if.html&#34;&gt;&lt;code&gt;std::copy_if()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;範囲の要素をムーブする&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/move.html&#34;&gt;&lt;code&gt;std::move()&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/move_backward.html&#34;&gt;&lt;code&gt;std::move_backward()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;新たな乱数ライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/random.html&#34;&gt;&lt;code&gt;&amp;lt;random&amp;gt;&lt;/code&gt;&lt;/a&gt;に対応した範囲のシャッフルアルゴリズム&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/shuffle.html&#34;&gt;&lt;code&gt;std::shuffle()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;範囲がソート済みか調べる&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/is_sorted.html&#34;&gt;&lt;code&gt;std::is_sorted()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;2つの値の最小値を取得する&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/min.html&#34;&gt;&lt;code&gt;std::min()&lt;/code&gt;&lt;/a&gt;、最大値を取得する&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/max.html&#34;&gt;&lt;code&gt;std::max()&lt;/code&gt;&lt;/a&gt;に、初期化子リストによる可変引数版を追加&lt;/li&gt;
&lt;li&gt;最小値と最大値を同時に取得する関数&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/minmax.html&#34;&gt;&lt;code&gt;std::minmax()&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/minmax_element.html&#34;&gt;&lt;code&gt;std::minmax_element()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;指定された値から始まる整数列を生成する&lt;a href=&#34;http://cpprefjp.github.io/reference/numeric/iota.html&#34;&gt;&lt;code&gt;std::iota()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;メモリ管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;メモリアロケータの実装をより容易にするために、コンテナとメモリアロケータの中間インタフェースとして&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;std::allocator_traits&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;スマートポインタの実装として、所有権共有方式の&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;&lt;code&gt;std::shared_ptr&lt;/code&gt;&lt;/a&gt;クラスと、所有権専有方式の&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr.html&#34;&gt;&lt;code&gt;std::unique_ptr&lt;/code&gt;&lt;/a&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;従来のスマートポインタ&lt;code&gt;auto_ptr&lt;/code&gt;クラスを、非推奨とする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;operator&amp;amp;()&lt;/code&gt;がオーバーロードされていたとしても正しく変数のアドレスを取得する関数、&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/addressof.html&#34;&gt;&lt;code&gt;std::addressof()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;入出力&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;標準ライブラリ中の入力ストリーム演算子&lt;code&gt;operator&amp;lt;&amp;lt;()&lt;/code&gt;と出力ストリーム演算子&lt;code&gt;operator&amp;gt;&amp;gt;()&lt;/code&gt;がムーブセマンティクスに対応。ストリームの一時オブジェクトを受け取れるようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;文字列処理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;UTF-16の文字列型&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;&lt;code&gt;std::u16string&lt;/code&gt;&lt;/a&gt;、UTF-32の文字列型&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;&lt;code&gt;std::u32string&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;UTF-8とUTF-16、UTF-8とUTF-32といった、マルチバイト文字とワイド文字列の相互変換を行うクラス&lt;a href=&#34;http://cpprefjp.github.io/reference/locale/wstring_convert.html&#34;&gt;&lt;code&gt;std::wstring_convert&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;数値から文字列オブジェクトに変換する関数として、&lt;a href=&#34;http://cpprefjp.github.io/reference/string/to_string.html&#34;&gt;&lt;code&gt;std::to_string()&lt;/code&gt;&lt;/a&gt;と&lt;a href=&#34;http://cpprefjp.github.io/reference/string/to_wstring.html&#34;&gt;&lt;code&gt;std::to_wstring()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;文字列オブジェクトから数値に変換する、&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoi.html&#34;&gt;&lt;code&gt;std::stoi()&lt;/code&gt;&lt;/a&gt;や&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stof.html&#34;&gt;&lt;code&gt;std::stof()&lt;/code&gt;&lt;/a&gt;といった関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;関数オブジェクト&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;関数ポインタと関数オブジェクトを統一的に扱えるクラス&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/function.html&#34;&gt;&lt;code&gt;std::function&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;関数の引数を束縛して部分適用する関数&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/bind.html&#34;&gt;&lt;code&gt;std::bind()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;メンバ関数ポインタを関数オブジェクトにアダプトする関数&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/mem_fn.html&#34;&gt;&lt;code&gt;std::mem_fn()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;テンプレートに、明示的に左辺値参照を渡すための渡すためのクラス&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/reference_wrapper.html&#34;&gt;&lt;code&gt;std::reference_wrapper&lt;/code&gt;&lt;/a&gt;と、そのヘルパ関数である&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/ref.html&#34;&gt;&lt;code&gt;std::ref()&lt;/code&gt;&lt;/a&gt;と&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/cref.html&#34;&gt;&lt;code&gt;std::cref()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;ハッシュ表コンテナの追加にともない、オブジェクトのハッシュ値を計算する関数オブジェクト&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;&lt;code&gt;std::hash&lt;/code&gt;&lt;/a&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;ビット演算の関数オブジェクトとして、&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/bit_and.html&#34;&gt;&lt;code&gt;std::bit_and&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/bit_or.html&#34;&gt;&lt;code&gt;std::bit_or&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/bit_xor.html&#34;&gt;&lt;code&gt;std::bit_xor&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;従来の関数オブジェクトアダプタ&lt;code&gt;std::unary_function&lt;/code&gt;、&lt;code&gt;std::binary_function&lt;/code&gt;、&lt;code&gt;std::mem_fun()&lt;/code&gt;、&lt;code&gt;std::mem_fun_ref()&lt;/code&gt;等を非推奨とする&lt;/li&gt;
&lt;li&gt;従来の関数バインダ&lt;code&gt;std::bind1st&lt;/code&gt;、&lt;code&gt;std::bind2nd&lt;/code&gt;等を非推奨とする&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;並行処理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;スレッドを管理するクラス&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread.html&#34;&gt;&lt;code&gt;std::thread&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;スレッド間での排他制御を行うミューテックスの実装である&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/mutex.html&#34;&gt;&lt;code&gt;std::mutex&lt;/code&gt;&lt;/a&gt;クラス、&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/recursive_mutex.html&#34;&gt;&lt;code&gt;std::recursive_mutex&lt;/code&gt;&lt;/a&gt;クラス等を追加&lt;ul&gt;
&lt;li&gt;ミューテックスの所有権放棄を自動的に行うためのクラス&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/lock_guard.html&#34;&gt;&lt;code&gt;std::lock_guard&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/unique_lock.html&#34;&gt;&lt;code&gt;std::unique_lock&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;スレッドセーフに一度だけ処理を呼び出す関数、&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/call_once.html&#34;&gt;&lt;code&gt;std::call_once()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;条件変数の実装である&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable.html&#34;&gt;&lt;code&gt;std::condition_variable&lt;/code&gt;&lt;/a&gt;クラス、&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable_any.html&#34;&gt;&lt;code&gt;std::condition_variable_any&lt;/code&gt;&lt;/a&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;Futureデザインパターンをサポートする&lt;a href=&#34;http://cpprefjp.github.io/reference/future/future.html&#34;&gt;&lt;code&gt;std::future&lt;/code&gt;&lt;/a&gt;クラス、&lt;a href=&#34;http://cpprefjp.github.io/reference/future/promise.html&#34;&gt;&lt;code&gt;std::promise&lt;/code&gt;&lt;/a&gt;クラス、およびその補助機能を追加&lt;/li&gt;
&lt;li&gt;アトミック操作のライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic.html&#34;&gt;&lt;code&gt;&amp;lt;atomic&amp;gt;&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;汎用的なユーティリティ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::swap()&lt;/code&gt;関数を、&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt;&lt;/a&gt;から&lt;a href=&#34;http://cpprefjp.github.io/reference/utility.html&#34;&gt;&lt;code&gt;&amp;lt;utility&amp;gt;&lt;/code&gt;&lt;/a&gt;に移動&lt;/li&gt;
&lt;li&gt;ムーブセマンティクスのために、左辺値を右辺値に変換する関数&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/move.html&#34;&gt;&lt;code&gt;std::move()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;引数転送のための関数&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;std::pair&lt;/code&gt;&lt;/a&gt;クラスの&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair/op_constructor.html&#34;&gt;コンストラクタ&lt;/a&gt;が、それぞれの要素型のコンストラクタ引数を直接受け取れるようになった&lt;/li&gt;
&lt;li&gt;タプルの実装である&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;&lt;code&gt;std::tuple&lt;/code&gt;&lt;/a&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;SFINAEのために、型の値を取得する関数&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/declval.html&#34;&gt;&lt;code&gt;std::declval()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;時間ユーティリティライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono.html&#34;&gt;&lt;code&gt;&amp;lt;chrono&amp;gt;&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;型特性ライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&lt;code&gt;&amp;lt;type_traits&amp;gt;&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;エラー報告&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;OSのエラー値を扱うライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error.html&#34;&gt;&lt;code&gt;&amp;lt;system_error&amp;gt;&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;正規表現ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;正規表現ライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/regex.html&#34;&gt;&lt;code&gt;&amp;lt;regex&amp;gt;&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;ECMAScript、POSIX、AWK、grepなどの構文を切り替えて使用できるのが特徴。デフォルトではECMAScript&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;乱数ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;乱数ライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/random.html&#34;&gt;&lt;code&gt;&amp;lt;random&amp;gt;&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;複数定義されている乱数生成器と分布アルゴリズムを、組み合わせて使用するのが特徴&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C互換ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ビット幅規定の整数型ライブラリである&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint.html&#34;&gt;&lt;code&gt;&amp;lt;cstdint&amp;gt;&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/wiki/faq/cpp11&#34; target=&#34;_blank&#34;&gt;C++11 Overview - Standard C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++11 -- fix typo</title>
      <link href="http://cpprefjp.github.io/lang/cpp11.html"/>
      <id>6a30b23d073d889840c0466e0c9376bb96a500c2:lang/cpp11.md</id>
      <updated>2015-10-24 00:51:02 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;C++11&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++11とは、2011年8月に改訂され、ISO/IEC 14882:2011で標準規格化されたC++バージョンの通称である。&lt;/p&gt;
&lt;p&gt;前バージョンであるC++03からメジャーバージョンアップされ、多くの有用な機能が追加された。&lt;/p&gt;
&lt;p&gt;このバージョンは、策定中はC++0xと呼ばれていた。これは、2009年中までに策定を完了させることを目指して、下一桁を伏せ字にしたものである。&lt;/p&gt;
&lt;h2&gt;言語機能&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;alignas&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アラインメント指定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;alignof&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アラインメント取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型推論&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;decltype&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式の型を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;定義済みマクロ&lt;/td&gt;
&lt;td&gt;C++11で更新された定義済みマクロ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定数式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;関数の&lt;code&gt;default&lt;/code&gt;／&lt;code&gt;delete&lt;/code&gt;宣言&lt;/td&gt;
&lt;td&gt;自動定義される特殊関数の制御&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;移譲コンストラクタ&lt;/td&gt;
&lt;td&gt;コンストラクタから他のコンストラクタに処理を移譲する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;explicit operator T()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;明示的型変換の演算子オーバーロード&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;拡張&lt;code&gt;friend&lt;/code&gt;宣言&lt;/td&gt;
&lt;td&gt;テンプレートパラメータや&lt;code&gt;typedef&lt;/code&gt;名を&lt;code&gt;friend&lt;/code&gt;宣言する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;extern template&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;テンプレートのインスタンス化を抑止する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;継承コンストラクタ&lt;/td&gt;
&lt;td&gt;基本クラスのコンストラクタを継承する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ラムダ式&lt;/td&gt;
&lt;td&gt;関数オブジェクトをその場に書く&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ローカルクラスと無名クラスを、テンプレート引数として使用する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;インライン名前空間&lt;/td&gt;
&lt;td&gt;ネストした名前空間に、透過的にアクセスする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;char16_t&lt;/code&gt;、&lt;code&gt;char32_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;UTF-16とUTF-8の文字型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Unicode文字列リテラル&lt;/td&gt;
&lt;td&gt;UTF-8、UTF-16、UTF-32のエンコーディングを規定したプレフィックス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;生文字列リテラル&lt;/td&gt;
&lt;td&gt;エスケープシーケンスを無視する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ユーザー定義リテラル&lt;/td&gt;
&lt;td&gt;リテラルのサフィックスをユーザー定義する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;戻り値の型を後置する関数宣言構文&lt;/td&gt;
&lt;td&gt;戻り値の型を後ろに書けるようにすることで、パラメータオブジェクトを戻り値型の文脈で使用できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/lang/cpp11/nullptr.html&#34;&gt;&lt;code&gt;nullptr&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ヌルポインタを表すポインタリテラル&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;テンプレートの右山カッコ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vector&amp;lt;basic_string&amp;lt;char&amp;gt;&amp;gt;&lt;/code&gt;のように、&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;をスペースを空けずに記述可能にする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;右辺値参照・ムーブセマンティクス&lt;/td&gt;
&lt;td&gt;右辺値によるオーバーロード、およびそれによるリソースの所有権移動&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static_assert&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時アサート&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;enum&lt;/code&gt;の先行宣言&lt;/td&gt;
&lt;td&gt;&lt;code&gt;enum&lt;/code&gt;の先行宣言を許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;enum class&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;強い型付けとスコープを持つ列挙型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;エイリアステンプレート&lt;/td&gt;
&lt;td&gt;テンプレートによって型の別名を定義する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;union&lt;/code&gt;の制限解除&lt;/td&gt;
&lt;td&gt;共用体のメンバ変数として、クラスオブジェクトを持てるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可変引数テンプレート&lt;/td&gt;
&lt;td&gt;任意の数のテンプレートパラメータを受け取れるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;範囲for文&lt;/td&gt;
&lt;td&gt;配列やコンテナといった範囲を表すオブジェクトを、簡潔に走査する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;override&lt;/code&gt;と&lt;code&gt;final&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メンバ関数のオーバーライド指定、および派生クラスでのオーバーロードの禁止を指定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;属性構文&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[[attr]]&lt;/code&gt;構文による、クラス、関数、変数の属性指定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;メンバ関数の左辺値／右辺値修飾&lt;/td&gt;
&lt;td&gt;オブジェクトが左辺値／右辺値の場合のみ呼び出し可能であることの指定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;非静的データメンバの初期化&lt;/td&gt;
&lt;td&gt;メンバ変数を、宣言と同時に初期値指定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;初期化子リスト&lt;/td&gt;
&lt;td&gt;波括弧による初期化をユーザー定義する。&lt;code&gt;vector&amp;lt;int&amp;gt; v = {1, 2, 3};&lt;/code&gt;など。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;一様初期化&lt;/td&gt;
&lt;td&gt;コンストラクタの呼び出しを、波カッコで行う。&lt;code&gt;T x {a, b, c};&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;noexcept&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数の例外指定、例外を投げる可能性のある式か`boolP値を返す演算子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;任意の式によるSFINAE&lt;/td&gt;
&lt;td&gt;特定の式が有効かどうかで、その関数をオーバーロード解決に含めるかどうかを決定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;thread_local&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;スレッドローカルストレージ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ブロックスコープを持つ&lt;code&gt;static&lt;/code&gt;変数初期化のスレッドセーフ化&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;C99互換機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;可変引数マクロ&lt;/td&gt;
&lt;td&gt;マクロで任意の数の引数を受け取る&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;_Pragma&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;処理系定義の機能を使用する単項演算子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;定義済みマクロ&lt;/td&gt;
&lt;td&gt;C99互換で導入された定義済みマクロ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;文字列リテラルとワイド文字列リテラルの結合&lt;/td&gt;
&lt;td&gt;ワイド文字列定数として結合する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;long long&lt;/code&gt;型&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long&lt;/code&gt;以上の大きさを持つ整数型&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブラリ更新の概要&lt;/h2&gt;
&lt;h3&gt;コンテナ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;固定長配列クラス&lt;a href=&#34;http://cpprefjp.github.io/reference/array.html&#34;&gt;&lt;code&gt;std::array&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;単方向リンクリストの実装である&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;&lt;code&gt;std::forward_list&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;ハッシュ表の連想コンテナである&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map.html&#34;&gt;&lt;code&gt;std::unordered_map&lt;/code&gt;&lt;/a&gt;クラス、&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set.html&#34;&gt;&lt;code&gt;std::unordered_set&lt;/code&gt;&lt;/a&gt;クラス、およびその重複を許可するバージョンを追加&lt;/li&gt;
&lt;li&gt;コンテナ全般がムーブセマンティクスに対応&lt;ul&gt;
&lt;li&gt;クラステンプレートのパラメータ&lt;code&gt;T&lt;/code&gt;が、コピー構築可能な型だけでなく、ムーブ構築のみ可能な型も受け付けるようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;push_back()&lt;/code&gt;や&lt;code&gt;insert()&lt;/code&gt;等の要素追加のためのメンバ関数が、新たな要素のコピーだけでなく、一時オブジェクトも受け取れて、ムーブで挿入ができるようになった。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;要素追加のためのメンバ関数として、クラステンプレートのパラメータ&lt;code&gt;T&lt;/code&gt;のコンストラクタ引数を受け取り、一時オブジェクトの生成コストを減らせるものが追加された。これらは、以下のように命名されたメンバ関数である：&lt;code&gt;emplace()&lt;/code&gt;、&lt;code&gt;emplace_back()&lt;/code&gt;、&lt;code&gt;emplace_front()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;コンテナのメモリアロケータが状態を持てるようになった&lt;/li&gt;
&lt;li&gt;初期化子リストでコンテナを初期化できるようになった&lt;/li&gt;
&lt;li&gt;初期化子リストをパラメータで受け取れるようにするためのクラス&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;&lt;code&gt;std::initializer_list&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;型情報型を連想コンテナのキーとして使用するための&lt;a href=&#34;http://cpprefjp.github.io/reference/typeindex/type_index.html&#34;&gt;&lt;code&gt;std::type_index&lt;/code&gt;&lt;/a&gt;クラスを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;イテレータ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;イテレータを進める関数&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;&lt;code&gt;std::next()&lt;/code&gt;&lt;/a&gt;、イテレータを逆に進める関数&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/prev.html&#34;&gt;&lt;code&gt;std::prev()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;要素をムーブするイテレータとして、&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/move_iterator.html&#34;&gt;&lt;code&gt;std::move_iterator&lt;/code&gt;&lt;/a&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;先頭イテレータと末尾イテレータを取得する非メンバ関数として、&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/begin.html&#34;&gt;&lt;code&gt;std::begin()&lt;/code&gt;&lt;/a&gt;と&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/end.html&#34;&gt;&lt;code&gt;std::end()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;アルゴリズム&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;範囲が特定の条件を満たしているか調べる、&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/all_of.html&#34;&gt;&lt;code&gt;std::all_of()&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/any_of.html&#34;&gt;&lt;code&gt;std::any_of()&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/none_of.html&#34;&gt;&lt;code&gt;std::none_of&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;条件を満たしていない最初の要素を検索する&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/find_if_not.html&#34;&gt;&lt;code&gt;std::find_if_not()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;指定された数の要素をコピーする&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/copy_n.html&#34;&gt;&lt;code&gt;std::copy_n()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;条件を満たす要素のみをコピーする&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/copy_if.html&#34;&gt;&lt;code&gt;std::copy_if()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;範囲の要素をムーブする&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/move.html&#34;&gt;&lt;code&gt;std::move()&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/move_backward.html&#34;&gt;&lt;code&gt;std::move_backward()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;新たな乱数ライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/random.html&#34;&gt;&lt;code&gt;&amp;lt;random&amp;gt;&lt;/code&gt;&lt;/a&gt;に対応した範囲のシャッフルアルゴリズム&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/shuffle.html&#34;&gt;&lt;code&gt;std::shuffle()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;範囲がソート済みか調べる&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/is_sorted.html&#34;&gt;&lt;code&gt;std::is_sorted()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;2つの値の最小値を取得する&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/min.html&#34;&gt;&lt;code&gt;std::min()&lt;/code&gt;&lt;/a&gt;、最大値を取得する&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/max.html&#34;&gt;&lt;code&gt;std::max()&lt;/code&gt;&lt;/a&gt;に、初期化子リストによる可変引数版を追加&lt;/li&gt;
&lt;li&gt;最小値と最大値を同時に取得する関数&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/minmax.html&#34;&gt;&lt;code&gt;std::minmax()&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/minmax_element.html&#34;&gt;&lt;code&gt;std::minmax_element()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;指定された値から始まる整数列を生成する&lt;a href=&#34;http://cpprefjp.github.io/reference/numeric/iota.html&#34;&gt;&lt;code&gt;std::iota()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;メモリ管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;メモリアロケータの実装をより容易にするために、コンテナとメモリアロケータの中間インタフェースとして&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;std::allocator_traits&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;スマートポインタの実装として、所有権共有方式の&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;&lt;code&gt;std::shared_ptr&lt;/code&gt;&lt;/a&gt;クラスと、所有権専有方式の&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr.html&#34;&gt;&lt;code&gt;std::unique_ptr&lt;/code&gt;&lt;/a&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;従来のスマートポインタ&lt;code&gt;auto_ptr&lt;/code&gt;クラスを、非推奨とする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;operator&amp;amp;()&lt;/code&gt;がオーバーロードされていたとしても正しく変数のアドレスを取得する関数、&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/addressof.html&#34;&gt;&lt;code&gt;std::addressof()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;入出力&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;標準ライブラリ中の入力ストリーム演算子&lt;code&gt;operator&amp;lt;&amp;lt;()&lt;/code&gt;と出力ストリーム演算子&lt;code&gt;operator&amp;gt;&amp;gt;()&lt;/code&gt;がムーブセマンティクスに対応。ストリームの一時オブジェクトを受け取れるようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;文字列処理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;UTF-16の文字列型&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;&lt;code&gt;std::u16string&lt;/code&gt;&lt;/a&gt;、UTF-32の文字列型&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;&lt;code&gt;std::u32string&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;UTF-8とUTF-16、UTF-8とUTF-32といった、マルチバイト文字とワイド文字列の相互変換を行うクラス&lt;a href=&#34;http://cpprefjp.github.io/reference/locale/wstring_convert.html&#34;&gt;&lt;code&gt;std::wstring_convert&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;数値から文字列オブジェクトに変換する関数として、&lt;a href=&#34;http://cpprefjp.github.io/reference/string/to_string.html&#34;&gt;&lt;code&gt;std::to_string()&lt;/code&gt;&lt;/a&gt;と&lt;a href=&#34;http://cpprefjp.github.io/reference/string/to_wstring.html&#34;&gt;&lt;code&gt;std::to_wstring()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;文字列オブジェクトから数値に変換する、&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoi.html&#34;&gt;&lt;code&gt;std::stoi()&lt;/code&gt;&lt;/a&gt;や&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stof.html&#34;&gt;&lt;code&gt;std::stof()&lt;/code&gt;&lt;/a&gt;といった関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;関数オブジェクト&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;関数ポインタと関数オブジェクトを統一的に扱えるクラス&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/function.html&#34;&gt;&lt;code&gt;std::function&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;関数の引数を束縛して部分適用する関数&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/bind.html&#34;&gt;&lt;code&gt;std::bind()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;メンバ関数ポインタを関数オブジェクトにアダプトする関数&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/mem_fn.html&#34;&gt;&lt;code&gt;std::mem_fn()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;テンプレートに、明示的に左辺値参照を渡すための渡すためのクラス&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/reference_wrapper.html&#34;&gt;&lt;code&gt;std::reference_wrapper&lt;/code&gt;&lt;/a&gt;と、そのヘルパ関数である&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/ref.html&#34;&gt;&lt;code&gt;std::ref()&lt;/code&gt;&lt;/a&gt;と&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/cref.html&#34;&gt;&lt;code&gt;std::cref()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;ハッシュ表コンテナの追加にともない、オブジェクトのハッシュ値を計算する関数オブジェクト&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;&lt;code&gt;std::hash&lt;/code&gt;&lt;/a&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;ビット演算の関数オブジェクトとして、&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/bit_and.html&#34;&gt;&lt;code&gt;std::bit_and&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/bit_or.html&#34;&gt;&lt;code&gt;std::bit_or&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/bit_xor.html&#34;&gt;&lt;code&gt;std::bit_xor&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;従来の関数オブジェクトアダプタ&lt;code&gt;std::unary_function&lt;/code&gt;、&lt;code&gt;std::binary_function&lt;/code&gt;、&lt;code&gt;std::mem_fun()&lt;/code&gt;、&lt;code&gt;std::mem_fun_ref()&lt;/code&gt;等を非推奨とする&lt;/li&gt;
&lt;li&gt;従来の関数バインダ&lt;code&gt;std::bind1st&lt;/code&gt;、&lt;code&gt;std::bind2nd&lt;/code&gt;等を非推奨とする&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;並行処理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;スレッドを管理するクラス&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread.html&#34;&gt;&lt;code&gt;std::thread&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;スレッド間での排他制御を行うミューテックスの実装である&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/mutex.html&#34;&gt;&lt;code&gt;std::mutex&lt;/code&gt;&lt;/a&gt;クラス、&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/recursive_mutex.html&#34;&gt;&lt;code&gt;std::recursive_mutex&lt;/code&gt;&lt;/a&gt;クラス等を追加&lt;ul&gt;
&lt;li&gt;ミューテックスの所有権放棄を自動的に行うためのクラス&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/lock_guard.html&#34;&gt;&lt;code&gt;std::lock_guard&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/unique_lock.html&#34;&gt;&lt;code&gt;std::unique_lock&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;スレッドセーフに一度だけ処理を呼び出す関数、&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/call_once.html&#34;&gt;&lt;code&gt;std::call_once()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;条件変数の実装である&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable.html&#34;&gt;&lt;code&gt;std::condition_variable&lt;/code&gt;&lt;/a&gt;クラス、&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable_any.html&#34;&gt;&lt;code&gt;std::condition_variable_any&lt;/code&gt;&lt;/a&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;Futureデザインパターンをサポートする&lt;a href=&#34;http://cpprefjp.github.io/reference/future/future.html&#34;&gt;&lt;code&gt;std::future&lt;/code&gt;&lt;/a&gt;クラス、&lt;a href=&#34;http://cpprefjp.github.io/reference/future/promise.html&#34;&gt;&lt;code&gt;std::promise&lt;/code&gt;&lt;/a&gt;クラス、およびその補助機能を追加&lt;/li&gt;
&lt;li&gt;アトミック操作のライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic.html&#34;&gt;&lt;code&gt;&amp;lt;atomic&amp;gt;&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;汎用的なユーティリティ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::swap()&lt;/code&gt;関数を、&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt;&lt;/a&gt;から&lt;a href=&#34;http://cpprefjp.github.io/reference/utility.html&#34;&gt;&lt;code&gt;&amp;lt;utility&amp;gt;&lt;/code&gt;&lt;/a&gt;に移動&lt;/li&gt;
&lt;li&gt;ムーブセマンティクスのために、左辺値を右辺値に変換する関数&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/move.html&#34;&gt;&lt;code&gt;std::move()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;引数転送のための関数&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;std::pair&lt;/code&gt;&lt;/a&gt;クラスの&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair/op_constructor.html&#34;&gt;コンストラクタ&lt;/a&gt;が、それぞれの要素型のコンストラクタ引数を直接受け取れるようになった&lt;/li&gt;
&lt;li&gt;タプルの実装である&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;&lt;code&gt;std::tuple&lt;/code&gt;&lt;/a&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;SFINAEのために、型の値を取得する関数&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/declval.html&#34;&gt;&lt;code&gt;std::declval()&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;時間ユーティリティライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono.html&#34;&gt;&lt;code&gt;&amp;lt;chrono&amp;gt;&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;型特性ライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&lt;code&gt;&amp;lt;type_traits&amp;gt;&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;エラー報告&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;OSのエラー値を扱うライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error.html&#34;&gt;&lt;code&gt;&amp;lt;system_error&amp;gt;&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;正規表現ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;正規表現ライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/regex.html&#34;&gt;&lt;code&gt;&amp;lt;regex&amp;gt;&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;ECMAScript、POSIX、AWK、grepなどの構文を切り替えて使用できるのが特徴。デフォルトではECMAScript&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;乱数ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;乱数ライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/random.html&#34;&gt;&lt;code&gt;&amp;lt;random&amp;gt;&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;li&gt;複数定義されている乱数生成器と分布アルゴリズムを、組み合わせて使用するのが特徴&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C互換ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ビット幅規定の整数型ライブラリである&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint.html&#34;&gt;&lt;code&gt;&amp;lt;cstdint&amp;gt;&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/wiki/faq/cpp11&#34; target=&#34;_blank&#34;&gt;C++11 Overview - Standard C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
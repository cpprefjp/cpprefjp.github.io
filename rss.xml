<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-11-12T01:58:08.302650</updated>
  <id>68727aeb-40dc-44c6-8d4a-6f9def24c9e0</id>

  
    <entry>
      <title>reverse_iterator -- reverse_iterator iter_swap_move 追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/reverse_iterator.html"/>
      <id>3d265348f08eb15d0f99728a7b94dbd7c53e530d:reference/iterator/reverse_iterator.md</id>
      <updated>2020-11-12T10:53:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/reverse_iterator.md b/reference/iterator/reverse_iterator.md
index 2a6c24ce1..8c90aa5f9 100644
--- a/reference/iterator/reverse_iterator.md
+++ b/reference/iterator/reverse_iterator.md
@@ -101,8 +101,8 @@ namespace std {
 | [`operator&amp;lt;=&amp;gt;`](reverse_iterator/op_compare_3way.md.nolink)           | 三方比較を行う | C++20 |
 | [`operator-`](reverse_iterator/op_minus.md) | 2つの`reverse_iterator`の差を求める | |
 | [`operator+`](reverse_iterator/op_plus.md) | イテレータを進める | |
-| [`iter_move`](reverse_iterator/iter_move.md.nolink)     | イテレータの要素の移動 | C++20 |
-| [`iter_swap`](reverse_iterator/iter_swap.md.nolink)     | イテレータの要素の交換 | C++20 |
+| [`iter_move`](reverse_iterator/iter_move.md)     | イテレータの要素の移動 | C++20 |
+| [`iter_swap`](reverse_iterator/iter_swap.md)     | イテレータの要素の交換 | C++20 |
 
 ### ヘルパ関数
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iter_move -- reverse_iterator iter_swap_move 追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/reverse_iterator/iter_move.html"/>
      <id>3d265348f08eb15d0f99728a7b94dbd7c53e530d:reference/iterator/reverse_iterator/iter_move.md</id>
      <updated>2020-11-12T10:53:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/reverse_iterator/iter_move.md b/reference/iterator/reverse_iterator/iter_move.md
new file mode 100644
index 000000000..d9487d89e
--- /dev/null
+++ b/reference/iterator/reverse_iterator/iter_move.md
@@ -0,0 +1,96 @@
+# iter_move
+* iterator[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class Iterator&amp;gt;
+  class reverse_iterator {
+
+    friend constexpr iter_rvalue_reference_t&amp;lt;Iterator&amp;gt;
+      iter_move(const reverse_iterator&amp;amp; i) noexcept(/*see below*/);
+  };
+}
+```
+* reverse_iterator[link /reference/iterator/reverse_iterator.md]
+* iter_rvalue_reference_t[link /reference/iterator/iter_rvalue_reference_t.md]
+
+## 概要
+
+逆順イテレータ`i`の指す要素をムーブする。
+
+## 効果
+
+以下と等価
+
+```cpp
+auto tmp = i.base();
+return ranges::iter_move(--tmp);
+```
+* base[link /reference/iterator/reverse_iterator/base.md]
+* ranges::iter_move[link /reference/iterator/iter_move.md.nolink]
+
+## 例外
+
+以下の式が指定される
+
+```cpp
+is_nothrow_copy_constructible_v&amp;lt;Iterator&amp;gt; &amp;amp;&amp;amp;
+noexcept(ranges::iter_move(--declval&amp;lt;Iterator&amp;amp;&amp;gt;()))
+```
+* is_nothrow_copy_constructible_v[link /reference/type_traits/is_nothrow_copy_constructible.md]
+* ranges::iter_move[link /reference/iterator/iter_move.md.nolink]
+
+## 備考
+
+この関数は`reverse_iterator`のクラス定義内で`friend`関数として定義される。そのため、メンバ関数としても非メンバ関数としても明示的に呼び出すことはできず、ADLによってのみ呼び出すことができる。  
+基本的には[`ranges::iter_move`](/reference/iterator/iter_move.md.nolink)カスタマイゼーションポイントオブジェクトを通して利用する。
+
+## 例
+```cpp example
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+
+  std::reverse_iterator&amp;lt;decltype(v)::iterator&amp;gt; it(v.end());
+
+  // ADLによる呼び出し
+  int n1 = iter_move(it);
+  std::cout &amp;lt;&amp;lt; n1 &amp;lt;&amp;lt; std::endl;
+  
+  ++it;
+
+  // ranges::iter_move CPOによる呼び出し
+  int n2 = std::ranges::iter_move(it);
+  std::cout &amp;lt;&amp;lt; n2 &amp;lt;&amp;lt; std::endl;
+}
+```
+* iter_move[color ff0000]
+* ranges::iter_move[link /reference/iterator/iter_move.md.nolink]
+
+### 出力
+```
+5
+4
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 6
+
+## 関連項目
+
+- [`ranges::iter_move`](/reference/iterator/iter_move.md.nolink)
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iter_swap -- reverse_iterator iter_swap_move 追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/reverse_iterator/iter_swap.html"/>
      <id>3d265348f08eb15d0f99728a7b94dbd7c53e530d:reference/iterator/reverse_iterator/iter_swap.md</id>
      <updated>2020-11-12T10:53:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/reverse_iterator/iter_swap.md b/reference/iterator/reverse_iterator/iter_swap.md
new file mode 100644
index 000000000..c8f391475
--- /dev/null
+++ b/reference/iterator/reverse_iterator/iter_swap.md
@@ -0,0 +1,111 @@
+# iter_swap
+* iterator[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class Iterator&amp;gt;
+  class reverse_iterator {
+
+    template&amp;lt;indirectly_swappable&amp;lt;Iterator&amp;gt; Iterator2&amp;gt;
+    friend constexpr void
+      iter_swap(const reverse_iterator&amp;amp; x,
+              const reverse_iterator&amp;lt;Iterator2&amp;gt;&amp;amp; y) noexcept(see below);
+  };
+}
+```
+* reverse_iterator[link /reference/iterator/reverse_iterator.md]
+* indirectly_swappable[link /reference/iterator/indirectly_swappable.md]
+
+## 概要
+
+逆順イテレータ`x, y`の指す要素を交換する。
+
+## 効果
+
+以下と等価
+
+```cpp
+auto xtmp = x.base();
+auto ytmp = y.base();
+ranges::iter_swap(--xtmp, --ytmp);
+```
+* base[link /reference/iterator/reverse_iterator/base.md]
+* ranges::iter_swap[link /reference/iterator/iter_swap.md.nolink]
+
+## 例外
+
+以下の式が指定される
+
+```cpp
+is_nothrow_copy_constructible_v&amp;lt;Iterator&amp;gt; &amp;amp;&amp;amp;
+is_nothrow_copy_constructible_v&amp;lt;Iterator2&amp;gt; &amp;amp;&amp;amp;
+noexcept(ranges::iter_swap(--declval&amp;lt;Iterator&amp;amp;&amp;gt;(), --declval&amp;lt;Iterator2&amp;amp;&amp;gt;()))
+```
+* is_nothrow_copy_constructible_v[link /reference/type_traits/is_nothrow_copy_constructible.md]
+* ranges::iter_swap[link /reference/iterator/iter_swap.md.nolink]
+
+## 備考
+
+この関数は`reverse_iterator`のクラス定義内で`friend`関数として定義される。そのため、メンバ関数としても非メンバ関数としても明示的に呼び出すことはできず、ADLによってのみ呼び出すことができる。  
+基本的には[`ranges::iter_swap`](/reference/iterator/iter_swap.md.nolink)カスタマイゼーションポイントオブジェクトを通して利用する。
+
+## 例
+```cpp example
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  int array[] = {6, 7, 8, 9, 10};
+
+  std::reverse_iterator&amp;lt;decltype(v)::iterator&amp;gt; it1(v.end());
+  std::reverse_iterator&amp;lt;int*&amp;gt; it2(std::ranges::end(array));
+
+  // ADLによる呼び出し
+  iter_swap(it1, it2);
+
+  ++it1;
+  ++it2;
+
+  // ranges::iter_swap CPOによる呼び出し
+  std::ranges::iter_swap(it1, it2);
+
+  for (int n : v) {
+    std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
+  }
+
+  std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  for (int n : array) {
+    std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
+  }
+}
+```
+* iter_swap[color ff0000]
+* ranges::iter_swap[link /reference/iterator/iter_swap.md.nolink]
+
+### 出力
+```
+1 2 3 9 10 
+6 7 8 4 5 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 6
+
+## 関連項目
+
+- [`ranges::iter_swap`](/reference/iterator/iter_swap.md.nolink)
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iter_value_t -- iter_value_t : 書き方の変更</title>
      <link href="https://cpprefjp.github.io/reference/iterator/iter_value_t.html"/>
      <id>48f9debc7024dc8dbcb7683d80423d43e1baae62:reference/iterator/iter_value_t.md</id>
      <updated>2020-11-11T16:43:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/iter_value_t.md b/reference/iterator/iter_value_t.md
index 3e077d691..49d2b47cc 100644
--- a/reference/iterator/iter_value_t.md
+++ b/reference/iterator/iter_value_t.md
@@ -19,10 +19,10 @@ namespace std {
 
 `RI = remove_cvref_t&amp;lt;I&amp;gt;`とすると、次のどちらか
 
-- [`indirectly_readable_traits`](indirectly_readable_traits.md)`&amp;lt;RI&amp;gt;::value_type`
-    - [`iterator_traits`](iterator_traits.md)`&amp;lt;RI&amp;gt;`がプライマリテンプレートの特殊化となる場合
-- [`iterator_traits`](iterator_traits.md)`&amp;lt;RI&amp;gt;::value_type`
-    - その他の場合
+- [`iterator_traits`](iterator_traits.md)`&amp;lt;RI&amp;gt;`がプライマリテンプレートの特殊化となる場合
+    - [`indirectly_readable_traits`](indirectly_readable_traits.md)`&amp;lt;RI&amp;gt;::value_type`
+- その他の場合
+    - [`iterator_traits`](iterator_traits.md)`&amp;lt;RI&amp;gt;::value_type`
 
 ## 備考
 
@@ -62,4 +62,4 @@ int main() {
 
 ## 参照
 
-- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
\ No newline at end of file
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_string_view -- basic_string_view : Rangeコンストラクタに対応</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view.html"/>
      <id>b6c6ae7e15b7eb523501bb6dbbfd19d376a29a8c:reference/string_view/basic_string_view.md</id>
      <updated>2020-11-11T15:58:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view.md b/reference/string_view/basic_string_view.md
index 8e70e22c7..5107b74bd 100644
--- a/reference/string_view/basic_string_view.md
+++ b/reference/string_view/basic_string_view.md
@@ -135,6 +135,7 @@ string_view hello = sv.substr(0, 5); // 先頭5文字を抽出する
 
 
 ## 非メンバ関数
+### 比較演算
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
@@ -144,7 +145,19 @@ string_view hello = sv.substr(0, 5); // 先頭5文字を抽出する
 | [`operator&amp;lt;=`](basic_string_view/op_less_equal.md)    | 左辺が右辺以下かの判定を行う       | C++17 |
 | [`operator&amp;gt;`](basic_string_view/op_greater.md)        | 左辺が右辺より大きいかの判定を行う | C++17 |
 | [`operator&amp;gt;=`](basic_string_view/op_greater_equal.md) | 左辺が右辺以上かの判定を行う       | C++17 |
-| [`operator&amp;lt;&amp;lt;`](basic_string_view/op_ostream.md)       | ストリームへの出力                 | C++17 |
+
+### 入出力
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`operator&amp;lt;&amp;lt;`](basic_string_view/op_ostream.md) | ストリームへの出力 | C++17 |
+
+
+### 推論ガイド
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`(op_deduction_guide)`](basic_string_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++20 |
 
 
 ### リテラル
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- basic_string_view : Rangeコンストラクタに対応</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/op_constructor.html"/>
      <id>b6c6ae7e15b7eb523501bb6dbbfd19d376a29a8c:reference/string_view/basic_string_view/op_constructor.md</id>
      <updated>2020-11-11T15:58:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/op_constructor.md b/reference/string_view/basic_string_view/op_constructor.md
index 185b992c5..2847ad67a 100644
--- a/reference/string_view/basic_string_view/op_constructor.md
+++ b/reference/string_view/basic_string_view/op_constructor.md
@@ -11,6 +11,9 @@ constexpr basic_string_view(
             const basic_string_view&amp;amp;) noexcept = default;     // (2)
 constexpr basic_string_view(const CharT* str);                // (3)
 constexpr basic_string_view(const CharT* str, size_type len); // (4)
+
+template &amp;lt;class It, class End&amp;gt;
+constexpr basic_string_view(It first, End last);               // (5)
 ```
 
 ## 概要
@@ -18,11 +21,24 @@ constexpr basic_string_view(const CharT* str, size_type len); // (4)
 - (2) : コピーコンストラクタ。コピー元と同じ文字列を参照する
 - (3) : 文字配列を受けとって、その文字配列の全体(ただしヌル文字列を含む場合はそこまで)を参照する
 - (4) : 文字配列と長さを受けとって、文字配列`str`の先頭`len`文字を参照する
+- (5) : 文字のイテレータ範囲`[first, last)`を参照する
+
+
+## テンプレートパラメータ制約
+- (5) :
+    - `It`は[`contiguous_iterator`](/reference/iterator/contiguous_iterator.md)の要件を満たすこと
+    - `End`は[`sized_sentinel_for`](/reference/iterator/sized_sentinel_for.md)`&amp;lt;It&amp;gt;`の要件を満たすこと
+    - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`iter_value_t`](/reference/iterator/iter_value_t.md)`&amp;lt;It&amp;gt;, charT&amp;gt;`が`true`であること
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;End, size_type&amp;gt;`が`false`であること
 
 
-## 要件
+## 事前条件
 - (3) : 範囲`[str, str + Traits::`[`length`](/reference/string/char_traits/length.md)`(str))`が妥当であること (アクセス可能であること)
 - (4) : 範囲`[str, str + len)`が妥当であること
+- (5) :
+    - 範囲`[first, last)`が妥当であること
+    - `It`が[`contiguous_iterator`](/reference/iterator/contiguous_iterator.md)のモデルであること
+    - `End`が[`sized_sentinel_for`](/reference/iterator/sized_sentinel_for.md)`&amp;lt;It&amp;gt;`のモデルであること
 
 
 ## 効果
@@ -31,6 +47,7 @@ constexpr basic_string_view(const CharT* str, size_type len); // (4)
 - (1) : `data_ = nullptr;`および`size_ = 0;`とする
 - (3) : `data_ = str;`および`size_ = Traits::`[`length`](/reference/string/char_traits/length.md)`(str);`とする
 - (4) : `data_ = str;`および`size_ = len;`とする
+- (5) : `data_ =` [`to_address`](/reference/memory/to_address.md)`(first);`および`size_ = last - first;`とする
 
 
 ## 計算量
@@ -88,13 +105,26 @@ int main()
     std::string_view sv{&amp;#34;Hello World&amp;#34;, 5};
     std::cout &amp;lt;&amp;lt; &amp;#34;(4) : &amp;#34; &amp;lt;&amp;lt; sv &amp;lt;&amp;lt; std::endl;
   }
+
+  // (5)
+  // 文字のイテレータ範囲を受け取って参照するコンストラクタ
+  {
+    std::string s = &amp;#34;Hello World&amp;#34;;
+    std::string_view sv{s.begin(), s.begin() + 5};
+    std::cout &amp;lt;&amp;lt; &amp;#34;(5) : &amp;#34; &amp;lt;&amp;lt; sv &amp;lt;&amp;lt; std::endl;
+  }
 }
 ```
 * sv.data()[link data.md]
 * sv.size()[link size.md]
+* s.begin()[link /reference/string/basic_string/begin.md]
 
 ### 出力
 ```
+(2) : Hello World
+(3) : Hello World
+(4) : Hello
+(5) : Hello
 ```
 
 ## バージョン
@@ -102,10 +132,11 @@ int main()
 - C++17
 
 ### 処理系
-- [Clang](/implementation.md#clang): 4.0
-- [GCC](/implementation.md#gcc): 7.1
+- [Clang](/implementation.md#clang): 4.0 (5以外)
+- [GCC](/implementation.md#gcc): 7.1 (5以外), 10.1
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 ## 参照
 - [ISO/IEC JTC1 SC22 WG21 N3762](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3762.html#avoid-strlen)
+- [P1391R4 Range constructor for `std::string_view`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1391r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- basic_string_view : Rangeコンストラクタに対応</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/op_deduction_guide.html"/>
      <id>b6c6ae7e15b7eb523501bb6dbbfd19d376a29a8c:reference/string_view/basic_string_view/op_deduction_guide.md</id>
      <updated>2020-11-11T15:58:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/op_deduction_guide.md b/reference/string_view/basic_string_view/op_deduction_guide.md
new file mode 100644
index 000000000..c9cf98813
--- /dev/null
+++ b/reference/string_view/basic_string_view/op_deduction_guide.md
@@ -0,0 +1,61 @@
+# 推論補助
+* string_view[meta header]
+* std[meta namespace]
+* basic_string_view[meta class]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class It, class End&amp;gt;
+  basic_string_view(It, End) -&amp;gt; basic_string_view&amp;lt;iter_value_t&amp;lt;It&amp;gt;&amp;gt;; // (1) C++20
+}
+```
+* iter_value_t[link /reference/iterator/iter_value_t.md]
+
+## 概要
+`std::basic_string_view`クラステンプレートの型推論補助。イテレータ範囲から推論する。
+
+
+## テンプレートパラメータ制約
+- (1) :
+    - `It`は[`contiguous_iterator`](/reference/iterator/contiguous_iterator.md)の要件を満たすこと
+    - `End`は[`sized_sentinel_for`](/reference/iterator/sized_sentinel_for.md)`&amp;lt;It&amp;gt;`の要件を満たすこと
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+
+int main()
+{
+  std::string s = &amp;#34;Hello&amp;#34;;
+  std::basic_string_view sv{s.begin(), s.end()};
+  std::cout &amp;lt;&amp;lt; sv &amp;lt;&amp;lt; std::endl;
+}
+```
+* s.begin()[link /reference/string/basic_string/begin.md]
+* s.end()[link /reference/string/basic_string/end.md]
+
+### 出力
+```
+Hello
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang):
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++17 クラステンプレートのテンプレート引数推論](/lang/cpp17/type_deduction_for_class_templates.md)
+
+
+## 参照
+- [P1391R4 Range constructor for `std::string_view`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1391r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase (非メンバ関数) -- C++20 コンテナの非メンバ関数erase/erase_if : 戻り値改善の仕様変更を適用</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/erase_free.html"/>
      <id>4940a0396f240235951c227aec58ec85e1d12f0b:reference/deque/deque/erase_free.md</id>
      <updated>2020-11-11T14:03:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/erase_free.md b/reference/deque/deque/erase_free.md
index a787bf638..7b9d7667d 100644
--- a/reference/deque/deque/erase_free.md
+++ b/reference/deque/deque/erase_free.md
@@ -19,10 +19,14 @@ namespace std {
 以下と等価：
 
 ```
-c.erase(remove(c.begin(), c.end(), value), c.end());
+auto it = remove(c.begin(), c.end(), value);
+auto r = distance(it, c.end());
+c.erase(it, c.end());
+return r;
 ```
 * c.erase[link erase.md]
 * remove[link /reference/algorithm/remove.md]
+* distance[link /reference/iterator/distance.md]
 * c.begin()[link begin.md]
 * c.end()[link end.md]
 
@@ -68,4 +72,5 @@ int main()
 
 
 ## 参照
-- [P1209R0 | Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [P1209R0 Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [R1115R3 Improving the Return Value of Erase-Like Algorithms II: Free `erase`/`erase_if`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1115r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase_if -- C++20 コンテナの非メンバ関数erase/erase_if : 戻り値改善の仕様変更を適用</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/erase_if_free.html"/>
      <id>4940a0396f240235951c227aec58ec85e1d12f0b:reference/deque/deque/erase_if_free.md</id>
      <updated>2020-11-11T14:03:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/erase_if_free.md b/reference/deque/deque/erase_if_free.md
index f281ad3a6..9ec37a902 100644
--- a/reference/deque/deque/erase_if_free.md
+++ b/reference/deque/deque/erase_if_free.md
@@ -19,10 +19,14 @@ namespace std {
 以下と等価：
 
 ```
-c.erase(remove_if(c.begin(), c.end(), pred), c.end());
+auto it = remove_if(c.begin(), c.end(), pred);
+auto r = distance(it, c.end());
+c.erase(it, c.end());
+return r;
 ```
 * c.erase[link erase.md]
 * remove_if[link /reference/algorithm/remove_if.md]
+* distance[link /reference/iterator/distance.md]
 * c.begin()[link begin.md]
 * c.end()[link end.md]
 
@@ -68,4 +72,5 @@ int main()
 
 
 ## 参照
-- [P1209R0 | Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [P1209R0 Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [R1115R3 Improving the Return Value of Erase-Like Algorithms II: Free `erase`/`erase_if`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1115r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase (非メンバ関数) -- C++20 コンテナの非メンバ関数erase/erase_if : 戻り値改善の仕様変更を適用</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/erase_free.html"/>
      <id>4940a0396f240235951c227aec58ec85e1d12f0b:reference/forward_list/forward_list/erase_free.md</id>
      <updated>2020-11-11T14:03:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/erase_free.md b/reference/forward_list/forward_list/erase_free.md
index acd017318..a5f9a288e 100644
--- a/reference/forward_list/forward_list/erase_free.md
+++ b/reference/forward_list/forward_list/erase_free.md
@@ -65,4 +65,5 @@ int main()
 
 
 ## 参照
-- [P1209R0 | Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [P1209R0 Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [R1115R3 Improving the Return Value of Erase-Like Algorithms II: Free `erase`/`erase_if`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1115r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase_if -- C++20 コンテナの非メンバ関数erase/erase_if : 戻り値改善の仕様変更を適用</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/erase_if_free.html"/>
      <id>4940a0396f240235951c227aec58ec85e1d12f0b:reference/forward_list/forward_list/erase_if_free.md</id>
      <updated>2020-11-11T14:03:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/erase_if_free.md b/reference/forward_list/forward_list/erase_if_free.md
index d08bd2484..1a25fd487 100644
--- a/reference/forward_list/forward_list/erase_if_free.md
+++ b/reference/forward_list/forward_list/erase_if_free.md
@@ -65,4 +65,5 @@ int main()
 
 
 ## 参照
-- [P1209R0 | Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [P1209R0 Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [R1115R3 Improving the Return Value of Erase-Like Algorithms II: Free `erase`/`erase_if`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1115r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase (非メンバ関数) -- C++20 コンテナの非メンバ関数erase/erase_if : 戻り値改善の仕様変更を適用</title>
      <link href="https://cpprefjp.github.io/reference/list/list/erase_free.html"/>
      <id>4940a0396f240235951c227aec58ec85e1d12f0b:reference/list/list/erase_free.md</id>
      <updated>2020-11-11T14:03:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/erase_free.md b/reference/list/list/erase_free.md
index 0bb8f1944..7b7243f57 100644
--- a/reference/list/list/erase_free.md
+++ b/reference/list/list/erase_free.md
@@ -65,4 +65,5 @@ int main()
 
 
 ## 参照
-- [P1209R0 | Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [P1209R0 Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [R1115R3 Improving the Return Value of Erase-Like Algorithms II: Free `erase`/`erase_if`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1115r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase_if -- C++20 コンテナの非メンバ関数erase/erase_if : 戻り値改善の仕様変更を適用</title>
      <link href="https://cpprefjp.github.io/reference/list/list/erase_if_free.html"/>
      <id>4940a0396f240235951c227aec58ec85e1d12f0b:reference/list/list/erase_if_free.md</id>
      <updated>2020-11-11T14:03:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/erase_if_free.md b/reference/list/list/erase_if_free.md
index 8716cc7c5..863915e01 100644
--- a/reference/list/list/erase_if_free.md
+++ b/reference/list/list/erase_if_free.md
@@ -65,4 +65,5 @@ int main()
 
 
 ## 参照
-- [P1209R0 | Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [P1209R0 Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [R1115R3 Improving the Return Value of Erase-Like Algorithms II: Free `erase`/`erase_if`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1115r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase_if -- C++20 コンテナの非メンバ関数erase/erase_if : 戻り値改善の仕様変更を適用</title>
      <link href="https://cpprefjp.github.io/reference/map/map/erase_if_free.html"/>
      <id>4940a0396f240235951c227aec58ec85e1d12f0b:reference/map/map/erase_if_free.md</id>
      <updated>2020-11-11T14:03:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/erase_if_free.md b/reference/map/map/erase_if_free.md
index 18bb85bd0..f0ff43d5e 100644
--- a/reference/map/map/erase_if_free.md
+++ b/reference/map/map/erase_if_free.md
@@ -7,7 +7,8 @@
 ```cpp
 namespace std {
   template &amp;lt;class Key, class T, class Compare, class Allocator, class Predicate&amp;gt;
-  void erase_if(map&amp;lt;Key, T, Compare, Allocator&amp;gt;&amp;amp; c, Predicate pred);
+  typename map&amp;lt;Key, T, Compare, Allocator&amp;gt;::size_type
+    erase_if(map&amp;lt;Key, T, Compare, Allocator&amp;gt;&amp;amp; c, Predicate pred);
 }
 ```
 
@@ -21,6 +22,7 @@ namespace std {
 以下と等価：
 
 ```
+auto original_size = c.size();
 for (auto i = c.begin(), last = c.end(); i != last;) {
   if (pred(*i)) {
     i = c.erase(i);
@@ -28,14 +30,16 @@ for (auto i = c.begin(), last = c.end(); i != last;) {
     ++i;
   }
 }
+return original_size - c.size();
 ```
 * c.begin()[link begin.md]
 * c.end()[link end.md]
 * c.erase[link erase.md]
+* c.size()[link size.md]
 
 
 ## 戻り値
-なし
+削除した要素数を返す。
 
 
 ## 例
@@ -78,4 +82,5 @@ int main()
 
 
 ## 参照
-- [P1209R0 | Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [P1209R0 Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [R1115R3 Improving the Return Value of Erase-Like Algorithms II: Free `erase`/`erase_if`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1115r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase_if -- C++20 コンテナの非メンバ関数erase/erase_if : 戻り値改善の仕様変更を適用</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/erase_if_free.html"/>
      <id>4940a0396f240235951c227aec58ec85e1d12f0b:reference/map/multimap/erase_if_free.md</id>
      <updated>2020-11-11T14:03:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/erase_if_free.md b/reference/map/multimap/erase_if_free.md
index c3656cfa9..b891823c5 100644
--- a/reference/map/multimap/erase_if_free.md
+++ b/reference/map/multimap/erase_if_free.md
@@ -7,7 +7,8 @@
 ```cpp
 namespace std {
   template &amp;lt;class Key, class T, class Compare, class Allocator, class Predicate&amp;gt;
-  void erase_if(multimap&amp;lt;Key, T, Compare, Allocator&amp;gt;&amp;amp; c, Predicate pred);
+  typename multimap&amp;lt;Key, T, Compare, Allocator&amp;gt;::size_type
+    erase_if(multimap&amp;lt;Key, T, Compare, Allocator&amp;gt;&amp;amp; c, Predicate pred);
 }
 ```
 
@@ -21,6 +22,7 @@ namespace std {
 以下と等価：
 
 ```
+auto original_size = c.size();
 for (auto i = c.begin(), last = c.end(); i != last;) {
   if (pred(*i)) {
     i = c.erase(i);
@@ -28,14 +30,16 @@ for (auto i = c.begin(), last = c.end(); i != last;) {
     ++i;
   }
 }
+return original_size - c.size();
 ```
 * c.begin()[link begin.md]
 * c.end()[link end.md]
 * c.erase[link erase.md]
+* c.size()[link size.md]
 
 
 ## 戻り値
-なし
+削除した要素数を返す。
 
 
 ## 例
@@ -78,4 +82,5 @@ int main()
 
 
 ## 参照
-- [P1209R0 | Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [P1209R0 Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [R1115R3 Improving the Return Value of Erase-Like Algorithms II: Free `erase`/`erase_if`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1115r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase_if -- C++20 コンテナの非メンバ関数erase/erase_if : 戻り値改善の仕様変更を適用</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/erase_if_free.html"/>
      <id>4940a0396f240235951c227aec58ec85e1d12f0b:reference/set/multiset/erase_if_free.md</id>
      <updated>2020-11-11T14:03:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/erase_if_free.md b/reference/set/multiset/erase_if_free.md
index 7b9c0088d..d503543b9 100644
--- a/reference/set/multiset/erase_if_free.md
+++ b/reference/set/multiset/erase_if_free.md
@@ -7,7 +7,8 @@
 ```cpp
 namespace std {
   template &amp;lt;class Key, class Compare, class Allocator, class Predicate&amp;gt;
-  void erase_if(multiset&amp;lt;Key, Compare, Allocator&amp;gt;&amp;amp; c, Predicate pred);
+  typename multiset&amp;lt;Key, Compare, Allocator&amp;gt;::size_type
+    erase_if(multiset&amp;lt;Key, Compare, Allocator&amp;gt;&amp;amp; c, Predicate pred);
 }
 ```
 
@@ -19,6 +20,7 @@ namespace std {
 以下と等価：
 
 ```
+auto original_size = c.size();
 for (auto i = c.begin(), last = c.end(); i != last;) {
   if (pred(*i)) {
     i = c.erase(i);
@@ -26,14 +28,16 @@ for (auto i = c.begin(), last = c.end(); i != last;) {
     ++i;
   }
 }
+return original_size - c.size();
 ```
 * c.begin()[link begin.md]
 * c.end()[link end.md]
 * c.erase[link erase.md]
+* c.size()[link size.md]
 
 
 ## 戻り値
-なし
+削除した要素数を返す。
 
 
 ## 例
@@ -72,4 +76,5 @@ int main()
 
 
 ## 参照
-- [P1209R0 | Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [P1209R0 Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [R1115R3 Improving the Return Value of Erase-Like Algorithms II: Free `erase`/`erase_if`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1115r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase_if -- C++20 コンテナの非メンバ関数erase/erase_if : 戻り値改善の仕様変更を適用</title>
      <link href="https://cpprefjp.github.io/reference/set/set/erase_if_free.html"/>
      <id>4940a0396f240235951c227aec58ec85e1d12f0b:reference/set/set/erase_if_free.md</id>
      <updated>2020-11-11T14:03:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/erase_if_free.md b/reference/set/set/erase_if_free.md
index 883ab4f0d..b8bfd0272 100644
--- a/reference/set/set/erase_if_free.md
+++ b/reference/set/set/erase_if_free.md
@@ -7,7 +7,8 @@
 ```cpp
 namespace std {
   template &amp;lt;class Key, class Compare, class Allocator, class Predicate&amp;gt;
-  void erase_if(set&amp;lt;Key, Compare, Allocator&amp;gt;&amp;amp; c, Predicate pred);
+  typename set&amp;lt;Key, Compare, Allocator&amp;gt;::size_type
+    erase_if(set&amp;lt;Key, Compare, Allocator&amp;gt;&amp;amp; c, Predicate pred);
 }
 ```
 
@@ -19,6 +20,7 @@ namespace std {
 以下と等価：
 
 ```
+auto original_size = c.size();
 for (auto i = c.begin(), last = c.end(); i != last;) {
   if (pred(*i)) {
     i = c.erase(i);
@@ -26,14 +28,16 @@ for (auto i = c.begin(), last = c.end(); i != last;) {
     ++i;
   }
 }
+return original_size - c.size();
 ```
 * c.begin()[link begin.md]
 * c.end()[link end.md]
 * c.erase[link erase.md]
+* c.size()[link size.md]
 
 
 ## 戻り値
-なし
+削除した要素数を返す。
 
 
 ## 例
@@ -72,4 +76,5 @@ int main()
 
 
 ## 参照
-- [P1209R0 | Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [P1209R0 Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [R1115R3 Improving the Return Value of Erase-Like Algorithms II: Free `erase`/`erase_if`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1115r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase (非メンバ関数) -- C++20 コンテナの非メンバ関数erase/erase_if : 戻り値改善の仕様変更を適用</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/erase_free.html"/>
      <id>4940a0396f240235951c227aec58ec85e1d12f0b:reference/string/basic_string/erase_free.md</id>
      <updated>2020-11-11T14:03:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/erase_free.md b/reference/string/basic_string/erase_free.md
index f3d175a67..4b9d7315e 100644
--- a/reference/string/basic_string/erase_free.md
+++ b/reference/string/basic_string/erase_free.md
@@ -19,10 +19,14 @@ namespace std {
 以下と等価：
 
 ```
-c.erase(remove(c.begin(), c.end(), value), c.end());
+auto it = remove(c.begin(), c.end(), value);
+auto r = distance(it, c.end());
+c.erase(it, c.end());
+return r;
 ```
 * c.erase[link erase.md]
 * remove[link /reference/algorithm/remove.md]
+* distance[link /reference/iterator/distance.md]
 * c.begin()[link begin.md]
 * c.end()[link end.md]
 
@@ -64,4 +68,5 @@ HelloWorld
 
 
 ## 参照
-- [P1209R0 | Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [P1209R0 Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [R1115R3 Improving the Return Value of Erase-Like Algorithms II: Free `erase`/`erase_if`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1115r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase_if -- C++20 コンテナの非メンバ関数erase/erase_if : 戻り値改善の仕様変更を適用</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/erase_if_free.html"/>
      <id>4940a0396f240235951c227aec58ec85e1d12f0b:reference/string/basic_string/erase_if_free.md</id>
      <updated>2020-11-11T14:03:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/erase_if_free.md b/reference/string/basic_string/erase_if_free.md
index 3d8572a52..922a6b3bc 100644
--- a/reference/string/basic_string/erase_if_free.md
+++ b/reference/string/basic_string/erase_if_free.md
@@ -19,10 +19,14 @@ namespace std {
 以下と等価：
 
 ```
-c.erase(remove_if(c.begin(), c.end(), pred), c.end());
+auto it = remove_if(c.begin(), c.end(), pred);
+auto r = distance(it, c.end());
+c.erase(it, c.end());
+return r;
 ```
 * c.erase[link erase.md]
 * remove_if[link /reference/algorithm/remove_if.md]
+* distance[link /reference/iterator/distance.md]
 * c.begin()[link begin.md]
 * c.end()[link end.md]
 
@@ -64,4 +68,5 @@ HelloWorld
 
 
 ## 参照
-- [P1209R0 | Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [P1209R0 Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [R1115R3 Improving the Return Value of Erase-Like Algorithms II: Free `erase`/`erase_if`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1115r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase_if -- C++20 コンテナの非メンバ関数erase/erase_if : 戻り値改善の仕様変更を適用</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/erase_if_free.html"/>
      <id>4940a0396f240235951c227aec58ec85e1d12f0b:reference/unordered_map/unordered_map/erase_if_free.md</id>
      <updated>2020-11-11T14:03:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/erase_if_free.md b/reference/unordered_map/unordered_map/erase_if_free.md
index da0317de9..5dbbcd2db 100644
--- a/reference/unordered_map/unordered_map/erase_if_free.md
+++ b/reference/unordered_map/unordered_map/erase_if_free.md
@@ -7,7 +7,8 @@
 ```cpp
 namespace std {
   template &amp;lt;class K, class T, class H, class P, class A, class Predicate&amp;gt;
-  void erase_if(unordered_map&amp;lt;K, T, H, P, A&amp;gt;&amp;amp; c, Predicate pred);
+  typename unordered_map&amp;lt;K, T, H, P, A&amp;gt;::size_type
+    erase_if(unordered_map&amp;lt;K, T, H, P, A&amp;gt;&amp;amp; c, Predicate pred);
 }
 ```
 
@@ -21,6 +22,7 @@ namespace std {
 以下と等価：
 
 ```
+auto original_size = c.size();
 for (auto i = c.begin(), last = c.end(); i != last;) {
   if (pred(*i)) {
     i = c.erase(i);
@@ -28,14 +30,16 @@ for (auto i = c.begin(), last = c.end(); i != last;) {
     ++i;
   }
 }
+return original_size - c.size();
 ```
 * c.begin()[link begin.md]
 * c.end()[link end.md]
 * c.erase[link erase.md]
+* c.size()[link size.md]
 
 
 ## 戻り値
-なし
+削除した要素数を返す。
 
 
 ## 例
@@ -78,4 +82,5 @@ int main()
 
 
 ## 参照
-- [P1209R0 | Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [P1209R0 Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [R1115R3 Improving the Return Value of Erase-Like Algorithms II: Free `erase`/`erase_if`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1115r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase_if -- C++20 コンテナの非メンバ関数erase/erase_if : 戻り値改善の仕様変更を適用</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/erase_if_free.html"/>
      <id>4940a0396f240235951c227aec58ec85e1d12f0b:reference/unordered_map/unordered_multimap/erase_if_free.md</id>
      <updated>2020-11-11T14:03:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_multimap/erase_if_free.md b/reference/unordered_map/unordered_multimap/erase_if_free.md
index 0249d22f1..a22fe1934 100644
--- a/reference/unordered_map/unordered_multimap/erase_if_free.md
+++ b/reference/unordered_map/unordered_multimap/erase_if_free.md
@@ -7,7 +7,8 @@
 ```cpp
 namespace std {
   template &amp;lt;class K, class T, class H, class P, class A, class Predicate&amp;gt;
-  void erase_if(unordered_multimap&amp;lt;K, T, H, P, A&amp;gt;&amp;amp; c, Predicate pred);
+  typename unordered_multimap&amp;lt;K, T, H, P, A&amp;gt;::size_type
+    erase_if(unordered_multimap&amp;lt;K, T, H, P, A&amp;gt;&amp;amp; c, Predicate pred);
 }
 ```
 
@@ -21,6 +22,7 @@ namespace std {
 以下と等価：
 
 ```
+auto original_size = c.size();
 for (auto i = c.begin(), last = c.end(); i != last;) {
   if (pred(*i)) {
     i = c.erase(i);
@@ -28,14 +30,16 @@ for (auto i = c.begin(), last = c.end(); i != last;) {
     ++i;
   }
 }
+return original_size - c.size();
 ```
 * c.begin()[link begin.md]
 * c.end()[link end.md]
 * c.erase[link erase.md]
+* c.size()[link size.md]
 
 
 ## 戻り値
-なし
+削除した要素数を返す。
 
 
 ## 例
@@ -79,4 +83,5 @@ int main()
 
 
 ## 参照
-- [P1209R0 | Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [P1209R0 Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [R1115R3 Improving the Return Value of Erase-Like Algorithms II: Free `erase`/`erase_if`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1115r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase_if -- C++20 コンテナの非メンバ関数erase/erase_if : 戻り値改善の仕様変更を適用</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/erase_if_free.html"/>
      <id>4940a0396f240235951c227aec58ec85e1d12f0b:reference/unordered_set/unordered_multiset/erase_if_free.md</id>
      <updated>2020-11-11T14:03:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_multiset/erase_if_free.md b/reference/unordered_set/unordered_multiset/erase_if_free.md
index daabf319f..c228a4e66 100644
--- a/reference/unordered_set/unordered_multiset/erase_if_free.md
+++ b/reference/unordered_set/unordered_multiset/erase_if_free.md
@@ -7,7 +7,8 @@
 ```cpp
 namespace std {
   template &amp;lt;class K, class H, class P, class A, class Predicate&amp;gt;
-  void erase_if(unordered_multiset&amp;lt;K, H, P, A&amp;gt;&amp;amp; c, Predicate pred);
+  typename unordered_multiset&amp;lt;K, H, P, A&amp;gt;::size_type
+    erase_if(unordered_multiset&amp;lt;K, H, P, A&amp;gt;&amp;amp; c, Predicate pred);
 }
 ```
 
@@ -19,6 +20,7 @@ namespace std {
 以下と等価：
 
 ```
+auto original_size = c.size();
 for (auto i = c.begin(), last = c.end(); i != last;) {
   if (pred(*i)) {
     i = c.erase(i);
@@ -26,14 +28,16 @@ for (auto i = c.begin(), last = c.end(); i != last;) {
     ++i;
   }
 }
+return original_size - c.size();
 ```
 * c.begin()[link begin.md]
 * c.end()[link end.md]
 * c.erase[link erase.md]
+* c.size()[link size.md]
 
 
 ## 戻り値
-なし
+削除した要素数を返す。
 
 
 ## 例
@@ -72,4 +76,5 @@ int main()
 
 
 ## 参照
-- [P1209R0 | Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [P1209R0 Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [R1115R3 Improving the Return Value of Erase-Like Algorithms II: Free `erase`/`erase_if`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1115r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase_if -- C++20 コンテナの非メンバ関数erase/erase_if : 戻り値改善の仕様変更を適用</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/erase_if_free.html"/>
      <id>4940a0396f240235951c227aec58ec85e1d12f0b:reference/unordered_set/unordered_set/erase_if_free.md</id>
      <updated>2020-11-11T14:03:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/erase_if_free.md b/reference/unordered_set/unordered_set/erase_if_free.md
index 7b34f4344..1b3f5a4ff 100644
--- a/reference/unordered_set/unordered_set/erase_if_free.md
+++ b/reference/unordered_set/unordered_set/erase_if_free.md
@@ -7,7 +7,8 @@
 ```cpp
 namespace std {
   template &amp;lt;class K, class H, class P, class A, class Predicate&amp;gt;
-  void erase_if(unordered_set&amp;lt;K, H, P, A&amp;gt;&amp;amp; c, Predicate pred);
+  typename unordered_set&amp;lt;K, H, P, A&amp;gt;::size_type
+    erase_if(unordered_set&amp;lt;K, H, P, A&amp;gt;&amp;amp; c, Predicate pred);
 }
 ```
 
@@ -19,6 +20,7 @@ namespace std {
 以下と等価：
 
 ```
+auto original_size = c.size();
 for (auto i = c.begin(), last = c.end(); i != last;) {
   if (pred(*i)) {
     i = c.erase(i);
@@ -26,14 +28,16 @@ for (auto i = c.begin(), last = c.end(); i != last;) {
     ++i;
   }
 }
+return original_size - c.size();
 ```
 * c.begin()[link begin.md]
 * c.end()[link end.md]
 * c.erase[link erase.md]
+* c.size()[link size.md]
 
 
 ## 戻り値
-なし
+削除した要素数を返す。
 
 
 ## 例
@@ -72,4 +76,5 @@ int main()
 
 
 ## 参照
-- [P1209R0 | Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [P1209R0 Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [R1115R3 Improving the Return Value of Erase-Like Algorithms II: Free `erase`/`erase_if`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1115r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase (非メンバ関数) -- C++20 コンテナの非メンバ関数erase/erase_if : 戻り値改善の仕様変更を適用</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/erase_free.html"/>
      <id>4940a0396f240235951c227aec58ec85e1d12f0b:reference/vector/vector/erase_free.md</id>
      <updated>2020-11-11T14:03:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/erase_free.md b/reference/vector/vector/erase_free.md
index e02a87e02..bba3313d7 100644
--- a/reference/vector/vector/erase_free.md
+++ b/reference/vector/vector/erase_free.md
@@ -19,10 +19,14 @@ namespace std {
 以下と等価：
 
 ```
-c.erase(remove(c.begin(), c.end(), value), c.end());
+auto it = remove(c.begin(), c.end(), value);
+auto r = distance(it, c.end());
+c.erase(it, c.end());
+return r;
 ```
 * c.erase[link erase.md]
 * remove[link /reference/algorithm/remove.md]
+* distance[link /reference/iterator/distance.md]
 * c.begin()[link begin.md]
 * c.end()[link end.md]
 
@@ -68,4 +72,5 @@ int main()
 
 
 ## 参照
-- [P1209R0 | Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [P1209R0 Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [R1115R3 Improving the Return Value of Erase-Like Algorithms II: Free `erase`/`erase_if`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1115r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase_if -- C++20 コンテナの非メンバ関数erase/erase_if : 戻り値改善の仕様変更を適用</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/erase_if_free.html"/>
      <id>4940a0396f240235951c227aec58ec85e1d12f0b:reference/vector/vector/erase_if_free.md</id>
      <updated>2020-11-11T14:03:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/erase_if_free.md b/reference/vector/vector/erase_if_free.md
index ac4e97569..76991aa04 100644
--- a/reference/vector/vector/erase_if_free.md
+++ b/reference/vector/vector/erase_if_free.md
@@ -19,10 +19,14 @@ namespace std {
 以下と等価：
 
 ```
-c.erase(remove_if(c.begin(), c.end(), pred), c.end());
+auto it = remove_if(c.begin(), c.end(), pred);
+auto r = distance(it, c.end());
+c.erase(it, c.end());
+return r;
 ```
 * c.erase[link erase.md]
 * remove_if[link /reference/algorithm/remove_if.md]
+* distance[link /reference/iterator/distance.md]
 * c.begin()[link begin.md]
 * c.end()[link end.md]
 
@@ -68,4 +72,5 @@ int main()
 
 
 ## 参照
-- [P1209R0 | Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [P1209R0 Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
+- [R1115R3 Improving the Return Value of Erase-Like Algorithms II: Free `erase`/`erase_if`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1115r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- spanのコンストラクタ : 参照文献のタイトルを修正</title>
      <link href="https://cpprefjp.github.io/reference/span/span/op_constructor.html"/>
      <id>31fb83bf38e7416de0a02094c52384fcb6183004:reference/span/span/op_constructor.md</id>
      <updated>2020-11-11T13:24:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/span/span/op_constructor.md b/reference/span/span/op_constructor.md
index 8c54a0619..8c0822a87 100644
--- a/reference/span/span/op_constructor.md
+++ b/reference/span/span/op_constructor.md
@@ -271,4 +271,4 @@ int main()
 - [LWG Issue 3101. `span`&amp;#39;s Container constructors need another constraint](https://wg21.cmeerw.net/lwg/issue3101)
 - [LWG Issue 3198. Bad constraint on `std::span::span()`](https://cplusplus.github.io/LWG/issue3198)
 - [P1872R0 `span` should have `size_type`, not `index_type`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1872r0.pdf)
-- [P1394R4 Range constructor forstd::span](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1394r4.pdf)
+- [P1394R4 Range constructor for `std::span`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1394r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-07-29T14:39:31.681405</updated>
  <id>992f256b-cbd7-47ba-ae7c-ecfe0305e460</id>

  
    <entry>
      <title>submdspan_mapping --  mdspan/layout_*_padded/mapping: submdspan_mapping P2642R6</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping/submdspan_mapping.html"/>
      <id>2276b3aaac29f6f532e7ffafc0d3d80204651158:reference/mdspan/layout_left/mapping/submdspan_mapping.md</id>
      <updated>2024-07-29T22:39:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping/submdspan_mapping.md b/reference/mdspan/layout_left/mapping/submdspan_mapping.md
index 874fe9b30..ed45bc337 100644
--- a/reference/mdspan/layout_left/mapping/submdspan_mapping.md
+++ b/reference/mdspan/layout_left/mapping/submdspan_mapping.md
@@ -3,7 +3,7 @@
 * function template[meta id-type]
 * std[meta namespace]
 * layout_left::mapping[meta class]
-* cpp23[meta cpp]
+* cpp26[meta cpp]
 
 ```cpp
 template&amp;lt;class... SliceSpecifiers&amp;gt;
@@ -62,15 +62,24 @@ friend constexpr auto submdspan_mapping(
 説明専用の`submdspan-mapping-impl`関数テンプレートは下記の値を返す。
 
 - [`Extents::rank()`](../../extents/rank.md) `== 0`のとき、[`submdspan_mapping_result`](../../submdspan_mapping_result.md)`{*this, 0}`
+- `SubExtents::rank() == 0`のとき、[`submdspan_mapping_result`](../../submdspan_mapping_result.md)`{`[`layout_left::mapping`](../../layout_left.md)`(sub_ext), offset}`
 - 以下を満たすとき、[`submdspan_mapping_result`](../../submdspan_mapping_result.md)`{`[`layout_left::mapping`](../../layout_left.md)`(sub_ext), offset}`
     - 半開区間`[0, SubExtents::rank()-1)`の値`k`に対して、[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_k,` [`full_extent_t`](../../full_extent_t.md)`&amp;gt;`が`true`、かつ
     - `SubExtents::rank()-1`に等しい値`k`に対して、型`S_k`が[`index-pair-like`](../../index-pair-like.md)`&amp;lt;index_type&amp;gt;`のモデルもしくは[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_k,` [`full_extent_t`](../../full_extent_t.md)`&amp;gt;`が`true`
+- 以下を満たすとき、[`submdspan_mapping_result`](../../submdspan_mapping_result.md)`{`[`layout_left_padded&amp;lt;S_static&amp;gt;::mapping`](../../layout_left_padded/mapping.md)`(sub_ext, stride(u + 1)), offset}`
+    - 型`S_p`が[`index-pair-like`](../../index-pair-like.md)`&amp;lt;index_type&amp;gt;`のモデルもしくは[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_k,` [`full_extent_t`](../../full_extent_t.md)`&amp;gt;`が`true`を満たす`0`より大きい最小値`p`に対して、`u+1`が`p`となる値`u`を用いて
+        - 型`S_0`が[`index-pair-like`](../../index-pair-like.md)`&amp;lt;index_type&amp;gt;`のモデルもしくは[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_0,` [`full_extent_t`](../../full_extent_t.md)`&amp;gt;`が`true`、かつ
+        - 半開区間`[u+1, u+SubExtents::rank()-1)`の値`k`に対して、[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_k,` [`full_extent_t`](../../full_extent_t.md)`&amp;gt;`、かつ
+        - `u+SubExtents::rank()-1`に等しい値`k`に対して、型`S_k`が[`index-pair-like`](../../index-pair-like.md)`&amp;lt;index_type&amp;gt;`のモデルもしくは[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_k,` [`full_extent_t`](../../full_extent_t.md)`&amp;gt;`が`true`
+    - ここで定数`S_static`は
+        - 半開区間`[0, u+1)`のいずれかの値`k`に対して`static_extent(k)`が[`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`dynamic_extent`
+        - そうでなければ、半開区間`[0, u+1)`の全ての値`k`に対して`static_extent(k)`を乗算した値
 - [`submdspan_mapping_result`](../../submdspan_mapping_result.md)`{`[`layout_stride::mapping`](../../layout_stride.md)`(sub_ext, sub_strides), offset}`
 
 
 ## バージョン
 ### 言語
-- C++23
+- C++26
 
 ### 処理系
 - [Clang](/implementation.md#clang): ??
@@ -85,3 +94,4 @@ friend constexpr auto submdspan_mapping(
 
 ## 参照
 - [P2630R4 Submdspan](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2630r4.html)
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mapping --  mdspan/layout_*_padded/mapping: submdspan_mapping P2642R6</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded/mapping.html"/>
      <id>2276b3aaac29f6f532e7ffafc0d3d80204651158:reference/mdspan/layout_left_padded/mapping.md</id>
      <updated>2024-07-29T22:39:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded/mapping.md b/reference/mdspan/layout_left_padded/mapping.md
index b561c74a8..02c167755 100644
--- a/reference/mdspan/layout_left_padded/mapping.md
+++ b/reference/mdspan/layout_left_padded/mapping.md
@@ -97,7 +97,7 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`submdspan_mapping`](mapping/submdspan_mapping.md.nolink) | [`submdspan`](../submdspan.md)サポート | C++26 |
+| [`submdspan_mapping`](mapping/submdspan_mapping.md) | [`submdspan`](../submdspan.md)サポート | C++26 |
 
 ### 比較演算子
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>submdspan_mapping --  mdspan/layout_*_padded/mapping: submdspan_mapping P2642R6</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded/mapping/submdspan_mapping.html"/>
      <id>2276b3aaac29f6f532e7ffafc0d3d80204651158:reference/mdspan/layout_left_padded/mapping/submdspan_mapping.md</id>
      <updated>2024-07-29T22:39:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded/mapping/submdspan_mapping.md b/reference/mdspan/layout_left_padded/mapping/submdspan_mapping.md
new file mode 100644
index 000000000..6eeeb0f2e
--- /dev/null
+++ b/reference/mdspan/layout_left_padded/mapping/submdspan_mapping.md
@@ -0,0 +1,99 @@
+# submdspan_mapping
+* mdspan[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* layout_left_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class... SliceSpecifiers&amp;gt;
+constexpr auto submdspan-mapping-impl(  // exposition only
+  SliceSpecifiers ... slices) const -&amp;gt; see below;
+
+template&amp;lt;class... SliceSpecifiers&amp;gt;
+friend constexpr auto submdspan_mapping(
+  const mapping&amp;amp; src, SliceSpecifiers... slices)
+{
+  return src.submdspan-mapping-impl(slices...);
+}
+```
+* see below[italic]
+* submdspan-mapping-impl[italic]
+
+## 概要
+[`submdspan`](../../submdspan.md)関数をサポートするためのカスタマイゼーションポイント。
+
+説明用の型`index_type`を[`Extents::index_type`](../../extents.md)、型`S_k`を`SliceSpecifiers`の`k`番目の型とする。
+
+
+## テンプレートパラメータ制約
+`sizeof...(slices)`が[`Extents::rank()`](../../extents/rank.md)と等しいこと。
+
+
+## 適格要件
+`extents()`の各次元インデクス`k`において、下記いずれかのうち1つだけを満たすこと。
+
+- 型`S_k`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;index_type&amp;gt;`のモデル
+- 型`S_k`が[`index-pair-like`](../../index-pair-like.md)`&amp;lt;index_type&amp;gt;`のモデル
+- [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_k,` [`full_extent_t`](../../full_extent_t.md)`&amp;gt;`が`true`
+- 型`S_k`が[`strided_slice`](../../strided_slice.md)の特殊化
+
+
+## 事前条件
+`extents()`の各次元インデクス`k`において、`s_k`を`slices`の`k`番目の値としたとき、下記を全て満たすこと。
+
+- 型`S_k`が[`strided_slice`](../../strided_slice.md)の特殊化のとき
+    - `s_k.extent == 0`、または
+    - `s_k.stride &amp;gt; 0`
+- `0` ≤ [`first_`](../../first_.md)`&amp;lt;index_type, k&amp;gt;(slices...)` ≤ [`last_`](../../last_.md)`&amp;lt;k&amp;gt;(extents(), slices...)` ≤ `extents().`[`extent(k)`](../../extents/extent.md)
+
+
+## 戻り値
+説明用の値や型を次の通り定義する。
+
+- 値`sub_ext` : 式[`submdspan_extents`](../../submdspan_extents.md)`(extents(), slices...)`の結果
+- 型`SubExtents` : `decltype(sub_ext)`
+- 値`sub_strides` : `extents()`の各次元インデクス`k`において、[`map-rank[k]`](../../submdspan_extents.md)が[`dynamic_extent`](/reference/span/dynamic_extent.md)ではない`k`に対し`sub_strides[map-rank[k]]`が下記を満たす、[`array`](/reference/array/array.md)`&amp;lt;SubExtents::index_type,` [`SubExtents::rank()`](../../extents/rank.md)`&amp;gt;`型の配列値
+    - 型`S_k`が[`strided_slice`](../../strided_slice.md)の特殊化かつ`s_k.stride &amp;lt; s_k.extent`の場合、[`stride(k)`](stride.md.nolink) `*` [`de-ice`](../../de-ice.md)`(s_k.stride)`
+    - そうでなければ、[`stride(k)`](stride.md.nolink)
+- パラメータパック`P` : [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`make_index_sequence`](/reference/utility/make_index_sequence.md)`&amp;lt;rank()&amp;gt;,` [`index_sequence`](/reference/utility/index_sequence.md)`&amp;lt;P...&amp;gt;&amp;gt; == true`
+- 値`offset` : `size_t`型の値[`(*this)`](op_call.md.nolink)`(`[`first_`](../../first_.md)`&amp;lt;index_type, P&amp;gt;(slices...)...)`
+
+説明専用の`submdspan-mapping-impl`関数テンプレートは下記の値を返す。
+
+- [`Extents::rank()`](../../extents/rank.md) `== 0`のとき、[`submdspan_mapping_result`](../../submdspan_mapping_result.md)`{*this, 0}`
+- 以下を満たすとき、[`submdspan_mapping_result`](../../submdspan_mapping_result.md)`{`[`layout_left::mapping`](../../layout_left.md)`(sub_ext), offset}`
+    - `rank_ == 1`、または
+    - `SubExtents::rank() == 0`
+- 以下を満たすとき、[`submdspan_mapping_result`](../../submdspan_mapping_result.md)`{`[`layout_left::mapping`](../../layout_left.md)`(sub_ext), offset}`
+    - `SubExtents::rank() == 1`、かつ
+    - 型`S_0`が[`index-pair-like`](../../index-pair-like.md)`&amp;lt;index_type&amp;gt;`のモデルもしくは[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_0,` [`full_extent_t`](../../full_extent_t.md)`&amp;gt;`が`true`
+- 以下を満たすとき、[`submdspan_mapping_result`](../../submdspan_mapping_result.md)`{layout_left_padded&amp;lt;S_static&amp;gt;::mapping(sub_ext, stride(u + 1)), offset}`
+    - 型`S_p`が[`index-pair-like`](../../index-pair-like.md)`&amp;lt;index_type&amp;gt;`のモデルもしくは[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_k,` [`full_extent_t`](../../full_extent_t.md)`&amp;gt;`が`true`を満たす`0`より大きい最小値`p`に対して、`u+1`が`p`となる値`u`を用いて
+        - 型`S_0`が[`index-pair-like`](../../index-pair-like.md)`&amp;lt;index_type&amp;gt;`のモデルもしくは[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_0,` [`full_extent_t`](../../full_extent_t.md)`&amp;gt;`が`true`、かつ
+        - 半開区間`[u+1, u+SubExtents::rank()-1)`の値`k`に対して、[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_k,` [`full_extent_t`](../../full_extent_t.md)`&amp;gt;`、かつ
+        - `u+SubExtents::rank()-1`に等しい値`k`に対して、型`S_k`が[`index-pair-like`](../../index-pair-like.md)`&amp;lt;index_type&amp;gt;`のモデルもしくは[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_k,` [`full_extent_t`](../../full_extent_t.md)`&amp;gt;`が`true`
+    - ここで定数`S_static`は
+        - 半開区間`[0, u+1)`のいずれかの値`k`に対して`static_extent(k)`が[`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`dynamic_extent`
+        - そうでなければ、半開区間`[0, u+1)`の全ての値`k`に対して`static_extent(k)`を乗算した値
+- [`submdspan_mapping_result`](../../submdspan_mapping_result.md)`{`[`layout_stride::mapping`](../../layout_stride.md)`(sub_ext, sub_strides), offset}`
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`submdspan`](../../submdspan.md)
+
+
+## 参照
+- [P2630R4 Submdspan](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2630r4.html)
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>submdspan_mapping --  mdspan/layout_*_padded/mapping: submdspan_mapping P2642R6</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping/submdspan_mapping.html"/>
      <id>2276b3aaac29f6f532e7ffafc0d3d80204651158:reference/mdspan/layout_right/mapping/submdspan_mapping.md</id>
      <updated>2024-07-29T22:39:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping/submdspan_mapping.md b/reference/mdspan/layout_right/mapping/submdspan_mapping.md
index e7669a672..3b7ba7f52 100644
--- a/reference/mdspan/layout_right/mapping/submdspan_mapping.md
+++ b/reference/mdspan/layout_right/mapping/submdspan_mapping.md
@@ -3,7 +3,7 @@
 * function template[meta id-type]
 * std[meta namespace]
 * layout_right::mapping[meta class]
-* cpp23[meta cpp]
+* cpp26[meta cpp]
 
 ```cpp
 template&amp;lt;class... SliceSpecifiers&amp;gt;
@@ -62,15 +62,24 @@ friend constexpr auto submdspan_mapping(
 説明専用の`submdspan-mapping-impl`関数テンプレートは下記の値を返す。
 
 - [`Extents::rank()`](../../extents/rank.md) `== 0`のとき、[`submdspan_mapping_result`](../../submdspan_mapping_result.md)`{*this, 0}`
+- `SubExtents::rank() == 0`のとき、[`submdspan_mapping_result`](../../submdspan_mapping_result.md)`{`[`layout_right::mapping`](../../layout_right.md)`(sub_ext), offset}`
 - 以下を満たすとき、[`submdspan_mapping_result`](../../submdspan_mapping_result.md)`{`[`layout_right::mapping`](../../layout_right.md)`(sub_ext), offset}`
     - 半開区間`[Extents::rank() - SubExtents::rank()+1, Extents::rank())`の値`k`に対して、[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_k,` [`full_extent_t`](../../full_extent_t.md)`&amp;gt;`が`true`、かつ
     - `Extents::rank()-SubExtents::rank()`に等しい値`k`に対して、型`S_k`が[`index-pair-like`](../../index-pair-like.md)`&amp;lt;index_type&amp;gt;`のモデルもしくは[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_k,` [`full_extent_t`](../../full_extent_t.md)`&amp;gt;`が`true`
+- 以下を満たすとき、[`submdspan_mapping_result`](../../submdspan_mapping_result.md)`{`[`layout_right_padded&amp;lt;S_static&amp;gt;::mapping`](../../layout_right_padded/mapping.md)`(sub_ext, stride(rank_-u-2)), offset}`
+    - 型`S_p`が[`index-pair-like`](../../index-pair-like.md)`&amp;lt;index_type&amp;gt;`のモデルもしくは[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_k,` [`full_extent_t`](../../full_extent_t.md)`&amp;gt;`が`true`を満たす`rank_-1`より小さい最大値`p`に対して、`rank_-u-2`が`p`となる値`u`を用いて
+        - `rank_-1`に等しい値`k`に対して、型`S_k`が[`index-pair-like`](../../index-pair-like.md)`&amp;lt;index_type&amp;gt;`のモデルもしくは[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_k,` [`full_extent_t`](../../full_extent_t.md)`&amp;gt;`が`true`、かつ
+        - 半開区間`[rank_-SubExtents::rank()-u+1, rank_-u-1)`の値`k`に対して、[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_k,` [`full_extent_t`](../../full_extent_t.md)`&amp;gt;`、かつ
+        - `rank_-SubExtents::rank()-u`に等しい値`k`に対して、型`S_k`が[`index-pair-like`](../../index-pair-like.md)`&amp;lt;index_type&amp;gt;`のモデルもしくは[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_k,` [`full_extent_t`](../../full_extent_t.md)`&amp;gt;`が`true`
+    - ここで定数`S_static`は
+        - 半開区間`[rank_-u-1, rank_)`のいずれかの値`k`に対して`static_extent(k)`が[`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`dynamic_extent`
+        - そうでなければ、半開区間`[rank_-u-1, rank_)`の全ての値`k`に対して`static_extent(k)`を乗算した値
 - [`submdspan_mapping_result`](../../submdspan_mapping_result.md)`{`[`layout_stride::mapping`](../../layout_stride.md)`(sub_ext, sub_strides), offset}`
 
 
 ## バージョン
 ### 言語
-- C++23
+- C++26
 
 ### 処理系
 - [Clang](/implementation.md#clang): ??
@@ -85,3 +94,4 @@ friend constexpr auto submdspan_mapping(
 
 ## 参照
 - [P2630R4 Submdspan](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2630r4.html)
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mapping --  mdspan/layout_*_padded/mapping: submdspan_mapping P2642R6</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded/mapping.html"/>
      <id>2276b3aaac29f6f532e7ffafc0d3d80204651158:reference/mdspan/layout_right_padded/mapping.md</id>
      <updated>2024-07-29T22:39:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded/mapping.md b/reference/mdspan/layout_right_padded/mapping.md
index 1e8839d62..f21b13273 100644
--- a/reference/mdspan/layout_right_padded/mapping.md
+++ b/reference/mdspan/layout_right_padded/mapping.md
@@ -97,7 +97,7 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`submdspan_mapping`](mapping/submdspan_mapping.md.nolink) | [`submdspan`](../submdspan.md)サポート | C++26 |
+| [`submdspan_mapping`](mapping/submdspan_mapping.md) | [`submdspan`](../submdspan.md)サポート | C++26 |
 
 ### 比較演算子
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>submdspan_mapping --  mdspan/layout_*_padded/mapping: submdspan_mapping P2642R6</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded/mapping/submdspan_mapping.html"/>
      <id>2276b3aaac29f6f532e7ffafc0d3d80204651158:reference/mdspan/layout_right_padded/mapping/submdspan_mapping.md</id>
      <updated>2024-07-29T22:39:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded/mapping/submdspan_mapping.md b/reference/mdspan/layout_right_padded/mapping/submdspan_mapping.md
new file mode 100644
index 000000000..79c87a52e
--- /dev/null
+++ b/reference/mdspan/layout_right_padded/mapping/submdspan_mapping.md
@@ -0,0 +1,99 @@
+# submdspan_mapping
+* mdspan[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* layout_right_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class... SliceSpecifiers&amp;gt;
+constexpr auto submdspan-mapping-impl(  // exposition only
+  SliceSpecifiers ... slices) const -&amp;gt; see below;
+
+template&amp;lt;class... SliceSpecifiers&amp;gt;
+friend constexpr auto submdspan_mapping(
+  const mapping&amp;amp; src, SliceSpecifiers... slices)
+{
+  return src.submdspan-mapping-impl(slices...);
+}
+```
+* see below[italic]
+* submdspan-mapping-impl[italic]
+
+## 概要
+[`submdspan`](../../submdspan.md)関数をサポートするためのカスタマイゼーションポイント。
+
+説明用の型`index_type`を[`Extents::index_type`](../../extents.md)、型`S_k`を`SliceSpecifiers`の`k`番目の型とする。
+
+
+## テンプレートパラメータ制約
+`sizeof...(slices)`が[`Extents::rank()`](../../extents/rank.md)と等しいこと。
+
+
+## 適格要件
+`extents()`の各次元インデクス`k`において、下記いずれかのうち1つだけを満たすこと。
+
+- 型`S_k`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;index_type&amp;gt;`のモデル
+- 型`S_k`が[`index-pair-like`](../../index-pair-like.md)`&amp;lt;index_type&amp;gt;`のモデル
+- [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_k,` [`full_extent_t`](../../full_extent_t.md)`&amp;gt;`が`true`
+- 型`S_k`が[`strided_slice`](../../strided_slice.md)の特殊化
+
+
+## 事前条件
+`extents()`の各次元インデクス`k`において、`s_k`を`slices`の`k`番目の値としたとき、下記を全て満たすこと。
+
+- 型`S_k`が[`strided_slice`](../../strided_slice.md)の特殊化のとき
+    - `s_k.extent == 0`、または
+    - `s_k.stride &amp;gt; 0`
+- `0` ≤ [`first_`](../../first_.md)`&amp;lt;index_type, k&amp;gt;(slices...)` ≤ [`last_`](../../last_.md)`&amp;lt;k&amp;gt;(extents(), slices...)` ≤ `extents().`[`extent(k)`](../../extents/extent.md)
+
+
+## 戻り値
+説明用の値や型を次の通り定義する。
+
+- 値`sub_ext` : 式[`submdspan_extents`](../../submdspan_extents.md)`(extents(), slices...)`の結果
+- 型`SubExtents` : `decltype(sub_ext)`
+- 値`sub_strides` : `extents()`の各次元インデクス`k`において、[`map-rank[k]`](../../submdspan_extents.md)が[`dynamic_extent`](/reference/span/dynamic_extent.md)ではない`k`に対し`sub_strides[map-rank[k]]`が下記を満たす、[`array`](/reference/array/array.md)`&amp;lt;SubExtents::index_type,` [`SubExtents::rank()`](../../extents/rank.md)`&amp;gt;`型の配列値
+    - 型`S_k`が[`strided_slice`](../../strided_slice.md)の特殊化かつ`s_k.stride &amp;lt; s_k.extent`の場合、[`stride(k)`](stride.md.nolink) `*` [`de-ice`](../../de-ice.md)`(s_k.stride)`
+    - そうでなければ、[`stride(k)`](stride.md.nolink)
+- パラメータパック`P` : [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`make_index_sequence`](/reference/utility/make_index_sequence.md)`&amp;lt;rank()&amp;gt;,` [`index_sequence`](/reference/utility/index_sequence.md)`&amp;lt;P...&amp;gt;&amp;gt; == true`
+- 値`offset` : `size_t`型の値[`(*this)`](op_call.md.nolink)`(`[`first_`](../../first_.md)`&amp;lt;index_type, P&amp;gt;(slices...)...)`
+
+説明専用の`submdspan-mapping-impl`関数テンプレートは下記の値を返す。
+
+- [`Extents::rank()`](../../extents/rank.md) `== 0`のとき、[`submdspan_mapping_result`](../../submdspan_mapping_result.md)`{*this, 0}`
+- 以下を満たすとき、[`submdspan_mapping_result`](../../submdspan_mapping_result.md)`{`[`layout_right::mapping`](../../layout_right.md)`(sub_ext), offset}`
+    - `rank_ == 1`、または
+    - `SubExtents::rank() == 1`
+- 以下を満たすとき、[`submdspan_mapping_result`](../../submdspan_mapping_result.md)`{`[`layout_right::mapping`](../../layout_right.md)`(sub_ext), offset}`
+    - `SubExtents::rank() == 1`、かつ
+    - `rank_-1`に等しい値`k`に対して、型`S_k`が[`index-pair-like`](../../index-pair-like.md)`&amp;lt;index_type&amp;gt;`のモデルもしくは[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_k,` [`full_extent_t`](../../full_extent_t.md)`&amp;gt;`が`true`
+- 以下を満たすとき、[`submdspan_mapping_result`](../../submdspan_mapping_result.md)`{layout_right_padded&amp;lt;S_static&amp;gt;::mapping(sub_ext, stride(rank_-u-2)), offset}`
+    - 型`S_p`が[`index-pair-like`](../../index-pair-like.md)`&amp;lt;index_type&amp;gt;`のモデルもしくは[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_k,` [`full_extent_t`](../../full_extent_t.md)`&amp;gt;`が`true`を満たす`rank_-1`より小さい最大値`p`に対して、`rank_-u-2`が`p`となる値`u`を用いて
+        - `rank_-1`に等しい値`k`に対して、型`S_k`が[`index-pair-like`](../../index-pair-like.md)`&amp;lt;index_type&amp;gt;`のモデルもしくは[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_k,` [`full_extent_t`](../../full_extent_t.md)`&amp;gt;`が`true`、かつ
+        - 半開区間`[rank_-SubExtents::rank()-u+1, rank_-u-1)`の値`k`に対して、[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_k,` [`full_extent_t`](../../full_extent_t.md)`&amp;gt;`、かつ
+        - `rank_-SubExtents::rank()-u`に等しい値`k`に対して、型`S_k`が[`index-pair-like`](../../index-pair-like.md)`&amp;lt;index_type&amp;gt;`のモデルもしくは[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_k,` [`full_extent_t`](../../full_extent_t.md)`&amp;gt;`が`true`
+    - ここで定数`S_static`は
+        - 半開区間`[rank_-u-1, rank_-1)`のいずれかの値`k`に対して`static_extent(k)`が[`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`dynamic_extent`
+        - そうでなければ、半開区間`[rank_-u-1, rank_-1)`の全ての値`k`に対して`static_extent(k)`を乗算した値
+- [`submdspan_mapping_result`](../../submdspan_mapping_result.md)`{`[`layout_stride::mapping`](../../layout_stride.md)`(sub_ext, sub_strides), offset}`
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`submdspan`](../../submdspan.md)
+
+
+## 参照
+- [P2630R4 Submdspan](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2630r4.html)
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>submdspan_mapping --  mdspan/layout_*_padded/mapping: submdspan_mapping P2642R6</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride/mapping/submdspan_mapping.html"/>
      <id>2276b3aaac29f6f532e7ffafc0d3d80204651158:reference/mdspan/layout_stride/mapping/submdspan_mapping.md</id>
      <updated>2024-07-29T22:39:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride/mapping/submdspan_mapping.md b/reference/mdspan/layout_stride/mapping/submdspan_mapping.md
index d66c72281..de042c4ed 100644
--- a/reference/mdspan/layout_stride/mapping/submdspan_mapping.md
+++ b/reference/mdspan/layout_stride/mapping/submdspan_mapping.md
@@ -3,7 +3,7 @@
 * function template[meta id-type]
 * std[meta namespace]
 * layout_stride::mapping[meta class]
-* cpp23[meta cpp]
+* cpp26[meta cpp]
 
 ```cpp
 template&amp;lt;class... SliceSpecifiers&amp;gt;
@@ -67,7 +67,7 @@ friend constexpr auto submdspan_mapping(
 
 ## バージョン
 ### 言語
-- C++23
+- C++26
 
 ### 処理系
 - [Clang](/implementation.md#clang): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ --  mdspan/layout_{left,right}_padded/mapping: コンストラクタ P2642R6</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping/op_constructor.html"/>
      <id>e88b8d541bd25d302fadf0b1c658521f72731c51:reference/mdspan/layout_left/mapping/op_constructor.md</id>
      <updated>2024-07-29T15:21:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping/op_constructor.md b/reference/mdspan/layout_left/mapping/op_constructor.md
index e76ad02e4..d2a2497d2 100644
--- a/reference/mdspan/layout_left/mapping/op_constructor.md
+++ b/reference/mdspan/layout_left/mapping/op_constructor.md
@@ -56,17 +56,16 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 
 
 ## 適格要件
-- (7) : 以下を満たすとき、`extents_type::`[`static_extent`](../../extents/static_extent.md)`(0)`が`LayoutLeftPaddedMapping::padding_stride`の倍数であること。
+- (7) : 以下を満たすとき、`extents_type::`[`static_extent`](../../extents/static_extent.md)`(0)`が[`LayoutLeftPaddedMapping::static-padding-stride`](../../layout_left_padded/mapping.md)に等しいこと。
     - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 1`、かつ
     - `extents_type::`[`static_extent`](../../extents/static_extent.md)`(0)`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくなく、かつ
-    - `LayoutLeftPaddedMapping::extents_type::`[`static_extent`](../../extents/static_extent.md)`(0)`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくなく、かつ
-    - `LayoutLeftPaddedMapping::padding_stride`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくないこと。
+    - `LayoutLeftPaddedMapping::static-padding-stride`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくないとき。
 
 
 ## 事前条件
 - (3) : `e`の多次元インデクス空間のサイズを、`index_type`型で表現できること。
 - (4) : `other.`[`required_span_size()`](required_span_size.md)を、`index_type`型で表現できること。
-- (5) : `other.`[`required_span_size()`](../../layout_left/mapping/required_span_size.md)を、`index_type`型で表現できること。
+- (5) : `other.`[`required_span_size()`](../../layout_right/mapping/required_span_size.md)を、`index_type`型で表現できること。
 - (6) :
     - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 0`のとき、`other`における全次元のストライド幅が[`layout_left::mapping`相当の制約](stride.md)をもつこと。
     - `other.`[`required_span_size()`](../../layout_stride/mapping/required_span_size.md)を、`index_type`型で表現できること。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ --  mdspan/layout_{left,right}_padded/mapping: コンストラクタ P2642R6</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping/op_constructor.html"/>
      <id>e88b8d541bd25d302fadf0b1c658521f72731c51:reference/mdspan/layout_right/mapping/op_constructor.md</id>
      <updated>2024-07-29T15:21:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping/op_constructor.md b/reference/mdspan/layout_right/mapping/op_constructor.md
index abf8a4034..f226bf47f 100644
--- a/reference/mdspan/layout_right/mapping/op_constructor.md
+++ b/reference/mdspan/layout_right/mapping/op_constructor.md
@@ -20,6 +20,10 @@ template&amp;lt;class OtherExtents&amp;gt;
 constexpr explicit(!is_convertible_v&amp;lt;OtherExtents, extents_type&amp;gt;)
   mapping(const layout_left::mapping&amp;lt;OtherExtents&amp;gt;&amp;amp; other) noexcept;  // (5)
 
+template&amp;lt;class LayoutRightPaddedMapping&amp;gt;
+constexpr explicit(!is_convertible_v&amp;lt;typename LayoutRightPaddedMapping::extents_type, extents_type&amp;gt;)
+  mapping(const LayoutRightPaddedMapping&amp;amp;) noexcept;  // (7) C++26
+
 template&amp;lt;class OtherExtents&amp;gt;
 constexpr explicit(extents_type::rank() &amp;gt; 0)
   mapping(const layout_stride::mapping&amp;lt;OtherExtents&amp;gt;&amp;amp; other) noexcept;  // (6)
@@ -27,6 +31,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 * is_convertible_v[link /reference/type_traits/is_convertible.md]
 * rank()[link ../../extents/rank.md]
 * layout_left::mapping[link ../../layout_left/mapping.md]
+* LayoutRightPaddedMapping[link ../../layout_right_padded/mapping.md]
 * layout_stride::mapping[link ../../layout_stride/mapping.md]
 
 ## 概要
@@ -36,6 +41,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 - (4) : 他`layout_right::mapping`からの変換コンストラクタ
 - (5) : [`layout_left::mapping`](../../layout_left/mapping.md)からの変換コンストラクタ
 - (6) : [`layout_stride::mapping`](../../layout_stride/mapping.md)からの変換コンストラクタ
+- (7) : [`layout_right_padded&amp;lt;S&amp;gt;::mapping`](../../layout_right_padded/mapping.md)からの変換コンストラクタ
 
 
 ## テンプレートパラメータ制約
@@ -44,6 +50,16 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
     - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;lt;= 1`、かつ
     - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, OtherExtents&amp;gt;`が`true`であること。
 - (6) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, OtherExtents&amp;gt;`が`true`であること。
+- (7) :
+    - [`is-layout-right-padded-mapping-of`](../../is-layout-right-padded-mapping-of.md)`&amp;lt;LayoutRightPaddedMapping&amp;gt;`が`true`、かつ
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, typename LayoutRightPaddedMapping::extents_type&amp;gt;`が`true`であること。
+
+
+## 適格要件
+- (7) : 以下を満たすとき、`extents_type::`[`static_extent`](../../extents/static_extent.md)`(`[`Extents::rank()`](../../extents/rank.md) `- 1)`が[`LayoutRightPaddedMapping::static-padding-stride`](../../layout_right_padded/mapping.md)に等しいこと。
+    - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 1`、かつ
+    - `extents_type::`[`static_extent`](../../extents/static_extent.md)`(Extents::rank() - 1)`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくなく、かつ
+    - `LayoutRightPaddedMapping::static-padding-stride`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくないとき。
 
 
 ## 事前条件
@@ -53,11 +69,14 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 - (6) :
     - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 0`のとき、`other`における全次元のストライド幅が[`layout_right::mapping`相当の制約](stride.md)をもつこと。
     - `other.`[`required_span_size()`](../../layout_stride/mapping/required_span_size.md)を、`index_type`型で表現できること。
+- (7) :
+    - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 1`のとき、`other.stride(extents_type::rank() - 2) == other.extents().extent(extents_type::rank() - 1)`
+    - `other.`[`required_span_size()`](../../layout_right_padded/mapping/required_span_size.md.nolink)を、`index_type`型で表現できること。
 
 
 ## 効果
 - (3) : `e`を用いて`extents_`を直接非リスト初期化する。
-- (4), (5), (6) : `other.extents()`を用いて`extents_`を直接非リスト初期化する。
+- (4), (5), (6), (7) : `other.extents()`を用いて`extents_`を直接非リスト初期化する。
 
 
 ## 例外
@@ -67,6 +86,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 ## explicitになる条件
 - (4), (5) : `!`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;OtherExtents, extents_type&amp;gt;`
 - (6) : [`extents_type::rank()`](../../extents/rank.md) `&amp;gt; 0`
+- (7) : `!`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;typename LayoutRightPaddedMapping::extents_type, extents_type&amp;gt;`
 
 
 ## 例
@@ -143,7 +163,9 @@ int main()
 ## 関連項目
 - [`layout_left::mapping`](../../layout_left/mapping.md)
 - [`layout_stride::mapping`](../../layout_stride/mapping.md)
+- [`layout_right_padded::mapping`](../../layout_right_padded/mapping.md)
 
 
 ## 参照
 - [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/op_constructor.html"/>
      <id>4a43d0094cbd08ecc3dfdf9cfa8ecf288ad24ce3:reference/deque/deque/op_constructor.md</id>
      <updated>2024-07-28T23:00:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/op_constructor.md b/reference/deque/deque/op_constructor.md
index 8841fdf4f..81bb9d044 100644
--- a/reference/deque/deque/op_constructor.md
+++ b/reference/deque/deque/op_constructor.md
@@ -31,8 +31,13 @@ deque(deque&amp;amp;&amp;amp; y, const Allocator&amp;amp; a);             // (9) C++11 から
 
 deque(initializer_list&amp;lt;T&amp;gt; il,
       const Allocator&amp;amp; a = Allocator());          // (10) C++11 から
+
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+deque(from_range_t, R&amp;amp;&amp;amp; rg,
+      const Allocator&amp;amp; a = Allocator());          // (11) C++23 から
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
+* from_range_t[link ../../ranges/from_range_t.md]
 
 
 ## 概要
@@ -55,6 +60,7 @@ deque(initializer_list&amp;lt;T&amp;gt; il,
 - (8) : コピーコンストラクタ。アロケータに `a` を使用して、`x` と同じ要素を保持した `deque` を構築する。
 - (9) : ムーブコンストラクタ。アロケータに `a` を使用して、ムーブセマンティクスを使って `y` の要素でコンテナを構築する。
 - (10) : 初期化子リストで要素を構築するコンストラクタ。`deque(il.`[`begin`](../../initializer_list/initializer_list/begin.md)`(), il.`[`end`](../../initializer_list/initializer_list/end.md)`(), a)` と等価。
+- (11) : Rangeコンストラクタ。アロケータに `a` を使用して、`rg` の要素で `deque` を構築する。
 
 
 ## 計算量
@@ -68,7 +74,8 @@ deque(initializer_list&amp;lt;T&amp;gt; il,
 - (7) : 定数時間
 - (8) : `x` の要素数に対して線形時間
 - (9) : `a == y.`[`get_allocator`](get_allocator.md)`()` の場合、定数時間、そうでなければ `y` の要素数に対して線形時間
-- (10) : `il`の要素数に対して線形時間
+- (10) : `il` の要素数に対して線形時間
+- (11) : `rg` の要素数に対して線形時間
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koile</name>
        <email>zbdk@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/op_constructor.html"/>
      <id>4a43d0094cbd08ecc3dfdf9cfa8ecf288ad24ce3:reference/forward_list/forward_list/op_constructor.md</id>
      <updated>2024-07-28T23:00:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/op_constructor.md b/reference/forward_list/forward_list/op_constructor.md
index 8429ac4d3..8c5aea629 100644
--- a/reference/forward_list/forward_list/op_constructor.md
+++ b/reference/forward_list/forward_list/op_constructor.md
@@ -32,8 +32,13 @@ forward_list(forward_list&amp;amp;&amp;amp; x, const Allocator&amp;amp; a);      // (9) C++11
 
 forward_list(initializer_list&amp;lt;T&amp;gt; il,
              const Allocator&amp;amp; a = Allocator());          // (10) C++11
+
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+forward_list(from_range_t, R&amp;amp;&amp;amp; rg,
+             const Allocator&amp;amp; a = Allocator());          // (11) C++23
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
+* from_range_t[link ../../ranges/from_range_t.md]
 
 ## 概要
 `forward_list`オブジェクトを、以下に示す通りの要素で初期化する。
@@ -53,6 +58,7 @@ forward_list(initializer_list&amp;lt;T&amp;gt; il,
 - (8) : アロケータを指定したコピーコンストラクタ  
 - (9) : アロケータを指定したムーブコンストラクタ  
 - (10) : 初期化子リストを受け取るコンストラクタ。`forward_list(il.`[`begin`](../../initializer_list/initializer_list/begin.md)`(), il.`[`end`](../../initializer_list/initializer_list/end.md)`(), a)` と等価。
+- (11) : Range `rg` の要素をコピーした `forward_list` オブジェクトを構築する。
 
 
 ## 計算量
@@ -65,6 +71,7 @@ forward_list(initializer_list&amp;lt;T&amp;gt; il,
 - (8) : `x` の要素数に対して線形時間
 - (9) : `x.`[`get_allocator`](get_allocator.md)`() == a` であれば、定数時間。そうでなければ `x` の要素数に対して線形時間
 - (10) : `il` の要素数に対して線形時間
+- (11) : `rg` の要素数に対して線形時間
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koile</name>
        <email>zbdk@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/list/list/op_constructor.html"/>
      <id>4a43d0094cbd08ecc3dfdf9cfa8ecf288ad24ce3:reference/list/list/op_constructor.md</id>
      <updated>2024-07-28T23:00:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/op_constructor.md b/reference/list/list/op_constructor.md
index 2ec356e95..a881629f4 100644
--- a/reference/list/list/op_constructor.md
+++ b/reference/list/list/op_constructor.md
@@ -29,8 +29,13 @@ list(list&amp;amp;&amp;amp; x, const Allocator&amp;amp; a);              // (9) C++11 から
 
 list(initializer_list&amp;lt;T&amp;gt; il,
      const Allocator&amp;amp; a = Allocator());          // (10) C++11 から
+
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+list(from_range_t, R&amp;amp;&amp;amp; rg,
+     const Allocator&amp;amp; a = Allocator());          // (11) C++23 から
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
+* from_range_t[link ../../ranges/from_range_t.md]
 
 
 ## 概要
@@ -48,6 +53,7 @@ list オブジェクトの構築
 - (8) : アロケータを指定したコピーコンストラクタ。
 - (9) : アロケータを指定したムーブコンストラクタ。
 - (10) : 初期化子リストを受け取るコンストラクタ。`list(il.`[`begin`](../../initializer_list/initializer_list/begin.md)`(), il.`[`end`](../../initializer_list/initializer_list/end.md)`(), a)` と等価。
+- (11) : Rangeコンストラクタ。Range `rg` の要素で `list` を構築する。
 
 
 ## 計算量
@@ -57,6 +63,8 @@ list オブジェクトの構築
 - (6), (8) : `x.`[`size`](size.md)`()` に対して線形時間
 - (7) : 定数時間
 - (9) : `a == x.`[`get_allocator`](get_allocator.md)`()` であれば定数時間。そうでなければ `x.`[`size`](size.md)`()` に対して線形時間
+- (10) : `il.`[`size`](../../initializer_list/initializer_list/size.md)`()` に対して線形時間
+- (11) : [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)` に対して線形時間
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koile</name>
        <email>zbdk@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/map/map/op_constructor.html"/>
      <id>4a43d0094cbd08ecc3dfdf9cfa8ecf288ad24ce3:reference/map/map/op_constructor.md</id>
      <updated>2024-07-28T23:00:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/op_constructor.md b/reference/map/map/op_constructor.md
index 044525df9..a6a69716a 100644
--- a/reference/map/map/op_constructor.md
+++ b/reference/map/map/op_constructor.md
@@ -40,8 +40,18 @@ map(initializer_list&amp;lt;value_type&amp;gt; init,
 
 map(initializer_list&amp;lt;value_type&amp;gt; init,
     const Allocator&amp;amp; alloc);                           // (11) C++14 から
+
+template &amp;lt;container-compatible-range &amp;lt;value_type&amp;gt; R&amp;gt;
+map(from_range_t, R&amp;amp;&amp;amp; rg,
+    const Compare&amp;amp; comp = Compare(),
+    const Allocator&amp;amp; alloc = Allocator());             // (12) C++23 から
+
+template &amp;lt;container-compatible-range &amp;lt;value_type&amp;gt; R&amp;gt;
+map(from_range_t, R&amp;amp;&amp;amp; rg,
+    const Allocator&amp;amp; alloc);                           // (13) C++23 から
 ```
 * initializer_list[link ../../initializer_list.md]
+* from_range_t[link ../../ranges/from_range_t.md]
 
 ## 概要
 `map` オブジェクトの構築
@@ -60,6 +70,8 @@ map(initializer_list&amp;lt;value_type&amp;gt; init,
 - (9) アロケータ `alloc` を指定したムーブコンストラクタ。`y` の要素をムーブすることで `map` オブジェクトを構築する。（C++11 から）
 - (10) 比較オブジェクト `comp`、アロケータ `alloc` 、および初期化リスト `init` の要素で `map` オブジェクトを構築する。`map(init.`[`begin`](../../initializer_list/initializer_list/begin.md)`(), init.`[`end`](../../initializer_list/initializer_list/end.md)`(), comp, alloc)` と等価。（C++11 から）
 - (11) アロケータ `alloc` 、および初期化リスト `init` の要素で `map` オブジェクトを構築する。`map(init, Compare(), alloc)` と等価。（C++14 から）
+- (12) Rangeコンストラクタ。比較オブジェクト `comp`、アロケータ `alloc` 、およびRange `rg` の要素で `map` オブジェクトを構築する。
+- (13) Rangeコンストラクタ。アロケータ `alloc` 、およびRange `rg` の要素で `map` オブジェクトを構築する。
 
 
 ## 計算量
@@ -67,8 +79,9 @@ map(initializer_list&amp;lt;value_type&amp;gt; init,
 - (4)、(5) `N =` [`distance`](../../iterator/distance.md)`(first, last)` とすると、範囲 `[first, last)` が比較オブジェクト `comp` によって既にソート済みである場合は `N` に比例、そうでなければ `N log N` に比例
 - (6)、(7) `x.`[`size`](size.md)`()`  に対して線形時間
 - (8) 定数時間
-- (9) 定数時間。但し、`alloc == y.`[`get_allocator`](/reference/map/map/get_allocator.md)`()` でなければ `y.`[`size`](size.md)`()` に対して線形時間。
-- (10)、(11) `init.`[`size`](size.md)`()` に対して線形時間。
+- (9) 定数時間。但し、`alloc == y.`[`get_allocator`](/reference/map/map/get_allocator.md)`()` でなければ `y.`[`size`](size.md)`()` に対して線形時間
+- (10)、(11) `N = init.`[`size`](../../initializer_list/initializer_list/size.md)`()` とすると、範囲 `[init.`[`begin`](../../initializer_list/initializer_list/begin.md)`(), init.`[`end`](../../initializer_list/initializer_list/end.md)`())` が比較オブジェクト `comp` によって既にソート済みである場合は `N` に比例、そうでなければ `N log N` に比例
+- (12)、(13) `N =` [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)` とすると、`rg` が比較オブジェクト `comp` によって既にソート済みである場合は `N` に比例、そうでなければ `N log N` に比例
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koile</name>
        <email>zbdk@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/op_constructor.html"/>
      <id>4a43d0094cbd08ecc3dfdf9cfa8ecf288ad24ce3:reference/map/multimap/op_constructor.md</id>
      <updated>2024-07-28T23:00:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/op_constructor.md b/reference/map/multimap/op_constructor.md
index 399f10e85..72cfb0496 100644
--- a/reference/map/multimap/op_constructor.md
+++ b/reference/map/multimap/op_constructor.md
@@ -42,8 +42,18 @@ multimap(initializer_list&amp;lt;value_type&amp;gt; init,
 
 multimap(initializer_list&amp;lt;value_type&amp;gt; init,
          const Allocator&amp;amp; alloc);                        // (11) C++14 から
+
+template &amp;lt;container-compatible-range &amp;lt;value_type&amp;gt; R&amp;gt;
+multimap(from_range_t, R&amp;amp;&amp;amp; rg,
+         const Compare&amp;amp; comp = Compare(),
+         const Allocator&amp;amp; alloc = Allocator());          // (12) C++23 から
+
+template &amp;lt;container-compatible-range &amp;lt;value_type&amp;gt; R&amp;gt;
+multimap(from_range_t, R&amp;amp;&amp;amp; rg,
+         const Allocator&amp;amp; alloc);                        // (13) C++23 から
 ```
 * initializer_list[link ../../initializer_list.md]
+* from_range_t[link ../../ranges/from_range_t.md]
 
 
 ## 概要
@@ -63,6 +73,8 @@ multimap(initializer_list&amp;lt;value_type&amp;gt; init,
 - (9) アロケータ `alloc` を指定したムーブコンストラクタ。`y` の要素をムーブすることでコンテナを構築する。（C++11 から）
 - (10) 比較オブジェクト `comp`、アロケータ `alloc`、および初期化リスト `init` の要素で `multimap` オブジェクトを構築する。`multimap(init.`[`begin`](../../initializer_list/initializer_list/begin.md)`, init.`[`end`](../../initializer_list/initializer_list/end.md)`, comp, alloc)` と等価。（C++11 から）
 - (11) アロケータ `alloc`、および初期化リスト `init` の要素で `multimap` オブジェクトを構築する。`multimap(init, Compare(), alloc)` と等価。（C++14 から）
+- (12) Rangeコンストラクタ。比較オブジェクト `comp`、アロケータ `alloc` 、およびRange `rg` の要素で `multimap` オブジェクトを構築する。
+- (13) Rangeコンストラクタ。アロケータ `alloc` 、およびRange `rg` の要素で `multimap` オブジェクトを構築する。
 
 
 ## 計算量
@@ -71,7 +83,8 @@ multimap(initializer_list&amp;lt;value_type&amp;gt; init,
 - (6)、(7) `x.`[`size`](size.md)`()` に対して線形時間
 - (8) 定数時間
 - (9) 定数時間。ただし、`alloc == y.`[`get_allocator`](get_allocator.md)`()` でなければ `y.`[`size`](size.md)`()` に対して線形時間
-- (10)、(11) `init.`[`size`](size.md)`()` に対して線形時間
+- (10)、(11) `N = init.`[`size`](../../initializer_list/initializer_list/size.md)`()` とすると、範囲 `[init.`[`begin`](../../initializer_list/initializer_list/begin.md)`(), init.`[`end`](../../initializer_list/initializer_list/end.md)`())` が比較オブジェクト `comp` によって既にソート済みである場合は `N` に比例、そうでなければ `N log N` に比例
+- (12)、(13) `N =` [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)` とすると、`rg` が比較オブジェクト `comp` によって既にソート済みである場合は `N` に比例、そうでなければ `N log N` に比例
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koile</name>
        <email>zbdk@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mdspan -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/mdspan.html"/>
      <id>4a43d0094cbd08ecc3dfdf9cfa8ecf288ad24ce3:reference/mdspan.md</id>
      <updated>2024-07-28T23:00:18+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;mdspan&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;mdspan&amp;gt;&lt;/code&gt;ヘッダでは、任意のメモリブロックに対して多次元配列のようにアクセスする機能を定義する。&lt;/p&gt;
&lt;h2&gt;多次元配列サイズ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/extents.html&#34;&gt;extents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列のサイズを表す値 (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/extents.html&#34;&gt;dextents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全次元が動的な多次元配列のサイズを表す値 (alias template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/extents.html&#34;&gt;dims&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全次元が動的な多次元配列のサイズを表す値 (alias template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;レイアウトマッピング&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/layout_left.html&#34;&gt;layout_left&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;列優先(Fortran/Matlabスタイル)レイアウトマッピングポリシー (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/layout_right.html&#34;&gt;layout_right&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行優先(C/C++スタイル)レイアウトマッピングポリシー (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/layout_stride.html&#34;&gt;layout_stride&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストライド幅指定レイアウトマッピングポリシー (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/layout_left_padded.html&#34;&gt;layout_left_padded&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;パディングあり列優先レイアウトマッピングポリシー (class templte)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/layout_right_padded.html&#34;&gt;layout_right_padded&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;パディングあり行優先レイアウトマッピングポリシー (class templte)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;要素アクセサ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/default_accessor.html&#34;&gt;default_accessor&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デフォルト要素アクセサ (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;多次元配列ビュー&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/mdspan.html&#34;&gt;mdspan&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列ビュー (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;多次元配列部分ビュー&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/strided_slice.html&#34;&gt;strided_slice&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定次元のストライド指定要素取り出しを指示する集成体クラステンプレート (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/full_extent_t.html&#34;&gt;full_extent_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定次元の全要素取り出しを指示するタグ型 (class)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/full_extent_t.html&#34;&gt;full_extent&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定次元の全要素取り出しを指示するタグ値 (variable)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/submdspan_mapping_result.html&#34;&gt;submdspan_mapping_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列部分ビューのレイアウトマッピング情報 (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/submdspan_extents.html&#34;&gt;submdspan_extents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列部分ビューの多次元配列サイズを計算する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/submdspan.html&#34;&gt;submdspan&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列部分ビューを取得する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++23&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20 &lt;code&gt;&lt;a href=&#34;span.html&#34;&gt;&amp;lt;span&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++26 &lt;code&gt;&lt;a href=&#34;linalg.html&#34;&gt;&amp;lt;linalg&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html&#34; target=&#34;_blank&#34;&gt;P0009R18 MDSPAN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2630r4.html&#34; target=&#34;_blank&#34;&gt;P2630R4 Submdspan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf&#34; target=&#34;_blank&#34;&gt;P2642R6 Padded mdspan layouts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>koile</name>
        <email>zbdk@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>LayoutMapping -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/LayoutMapping.html"/>
      <id>4a43d0094cbd08ecc3dfdf9cfa8ecf288ad24ce3:reference/mdspan/LayoutMapping.md</id>
      <updated>2024-07-28T23:00:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/LayoutMapping.md b/reference/mdspan/LayoutMapping.md
index fbc2c425f..832809d48 100644
--- a/reference/mdspan/LayoutMapping.md
+++ b/reference/mdspan/LayoutMapping.md
@@ -93,8 +93,8 @@ LayoutMappingを満たす型`M`は
 - [`layout_left::mapping&amp;lt;E&amp;gt;`](layout_left/mapping.md)
 - [`layout_right::mapping&amp;lt;E&amp;gt;`](layout_right/mapping.md)
 - [`layout_stride::mapping&amp;lt;E&amp;gt;`](layout_stride/mapping.md)
-- [`layout_left_padded&amp;lt;PV&amp;gt;::mapping&amp;lt;E&amp;gt;`](layout_left_padded/mapping.md.nolink)
-- [`layout_right_padded&amp;lt;PV&amp;gt;::mapping&amp;lt;E&amp;gt;`](layout_right_padded/mapping.md.nolink)
+- [`layout_left_padded&amp;lt;S&amp;gt;::mapping&amp;lt;E&amp;gt;`](layout_left_padded/mapping.md)
+- [`layout_right_padded&amp;lt;S&amp;gt;::mapping&amp;lt;E&amp;gt;`](layout_right_padded/mapping.md)
 - [`layout_blas_packed&amp;lt;T,SO&amp;gt;::mapping&amp;lt;E&amp;gt;`](/reference/linalg/layout_blas_packed/mapping.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koile</name>
        <email>zbdk@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>LayoutMappingPolicy -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/LayoutMappingPolicy.html"/>
      <id>4a43d0094cbd08ecc3dfdf9cfa8ecf288ad24ce3:reference/mdspan/LayoutMappingPolicy.md</id>
      <updated>2024-07-28T23:00:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/LayoutMappingPolicy.md b/reference/mdspan/LayoutMappingPolicy.md
index 52161f276..30044509a 100644
--- a/reference/mdspan/LayoutMappingPolicy.md
+++ b/reference/mdspan/LayoutMappingPolicy.md
@@ -40,8 +40,8 @@ LayoutMappingPolicyを満たす型`MP`は
 - [`layout_left`](layout_left.md)
 - [`layout_right`](layout_right.md)
 - [`layout_stride`](layout_stride.md)
-- [`layout_left_padded&amp;lt;PV&amp;gt;`](layout_left_padded.md)
-- [`layout_right_padded&amp;lt;PV&amp;gt;`](layout_right_padded.md)
+- [`layout_left_padded&amp;lt;S&amp;gt;`](layout_left_padded.md)
+- [`layout_right_padded&amp;lt;S&amp;gt;`](layout_right_padded.md)
 - [`linalg::layout_blas_packed&amp;lt;T,SO&amp;gt;`](/reference/linalg/layout_blas_packed.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koile</name>
        <email>zbdk@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is-layout-left-padded-mapping-of -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/is-layout-left-padded-mapping-of.html"/>
      <id>4a43d0094cbd08ecc3dfdf9cfa8ecf288ad24ce3:reference/mdspan/is-layout-left-padded-mapping-of.md</id>
      <updated>2024-07-28T23:00:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/is-layout-left-padded-mapping-of.md b/reference/mdspan/is-layout-left-padded-mapping-of.md
new file mode 100644
index 000000000..e3b3bca45
--- /dev/null
+++ b/reference/mdspan/is-layout-left-padded-mapping-of.md
@@ -0,0 +1,25 @@
+# is-layout-left-padded-mapping-of
+* mdspan[meta header]
+* variable[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class Mapping&amp;gt;
+constexpr bool is-layout-left-padded-mapping-of = see below;  // exposition only
+```
+* see below[italic]
+
+
+## 概要
+`is-layout-left-padded-mapping-of`は、[`layout_left_padded&amp;lt;S&amp;gt;::mapping`](layout_left_padded/mapping.md)を判定する説明専用変数テンプレートである。
+
+`size_t`型の任意の値`S`として`Mapping`が[`layout_left_padded&amp;lt;S&amp;gt;::mapping`](layout_left_padded/mapping.md)の特殊化であるときに限り、`is-layout-left-padded-mapping-of&amp;lt;Mapping&amp;gt;`は`true`となる。
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koile</name>
        <email>zbdk@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is-layout-right-padded-mapping-of -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/is-layout-right-padded-mapping-of.html"/>
      <id>4a43d0094cbd08ecc3dfdf9cfa8ecf288ad24ce3:reference/mdspan/is-layout-right-padded-mapping-of.md</id>
      <updated>2024-07-28T23:00:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/is-layout-right-padded-mapping-of.md b/reference/mdspan/is-layout-right-padded-mapping-of.md
new file mode 100644
index 000000000..587e8d5cf
--- /dev/null
+++ b/reference/mdspan/is-layout-right-padded-mapping-of.md
@@ -0,0 +1,25 @@
+# is-layout-right-padded-mapping-of
+* mdspan[meta header]
+* variable[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class Mapping&amp;gt;
+constexpr bool is-layout-right-padded-mapping-of = see below;  // exposition only
+```
+* see below[italic]
+
+
+## 概要
+`is-layout-right-padded-mapping-of`は、[`layout_right_padded&amp;lt;S&amp;gt;::mapping`](layout_right_padded/mapping.md)を判定する説明専用変数テンプレートである。
+
+`size_t`型の任意の値`S`として`Mapping`が[`layout_right_padded&amp;lt;S&amp;gt;::mapping`](layout_right_padded/mapping.md)の特殊化であるときに限り、`is-layout-right-padded-mapping-of&amp;lt;Mapping&amp;gt;`は`true`となる。
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koile</name>
        <email>zbdk@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping/op_constructor.html"/>
      <id>4a43d0094cbd08ecc3dfdf9cfa8ecf288ad24ce3:reference/mdspan/layout_left/mapping/op_constructor.md</id>
      <updated>2024-07-28T23:00:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping/op_constructor.md b/reference/mdspan/layout_left/mapping/op_constructor.md
index 199c1994f..e76ad02e4 100644
--- a/reference/mdspan/layout_left/mapping/op_constructor.md
+++ b/reference/mdspan/layout_left/mapping/op_constructor.md
@@ -20,6 +20,10 @@ template&amp;lt;class OtherExtents&amp;gt;
 constexpr explicit(!is_convertible_v&amp;lt;OtherExtents, extents_type&amp;gt;)
   mapping(const layout_right::mapping&amp;lt;OtherExtents&amp;gt;&amp;amp; other) noexcept;  // (5)
 
+template&amp;lt;class LayoutLeftPaddedMapping&amp;gt;
+constexpr explicit(!is_convertible_v&amp;lt;typename LayoutLeftPaddedMapping::extents_type, extents_type&amp;gt;)
+  mapping(const LayoutLeftPaddedMapping&amp;amp; other) noexcept;  // (7) C++26
+
 template&amp;lt;class OtherExtents&amp;gt;
 constexpr explicit(extents_type::rank() &amp;gt; 0)
   mapping(const layout_stride::mapping&amp;lt;OtherExtents&amp;gt;&amp;amp; other) noexcept;  // (6)
@@ -27,6 +31,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 * is_convertible_v[link /reference/type_traits/is_convertible.md]
 * rank()[link ../../extents/rank.md]
 * layout_right::mapping[link ../../layout_right/mapping.md]
+* LayoutLeftPaddedMapping[link ../../layout_left_padded/mapping.md]
 * layout_stride::mapping[link ../../layout_stride/mapping.md]
 
 ## 概要
@@ -36,6 +41,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 - (4) : 他`layout_left::mapping`からの変換コンストラクタ
 - (5) : [`layout_right::mapping`](../../layout_right/mapping.md)からの変換コンストラクタ
 - (6) : [`layout_stride::mapping`](../../layout_stride/mapping.md)からの変換コンストラクタ
+- (7) : [`layout_left_padded&amp;lt;S&amp;gt;::mapping`](../../layout_left_padded/mapping.md)からの変換コンストラクタ
 
 
 ## テンプレートパラメータ制約
@@ -44,6 +50,17 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
     - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;lt;= 1`、かつ
     - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, OtherExtents&amp;gt;`が`true`であること。
 - (6) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, OtherExtents&amp;gt;`が`true`であること。
+- (7) :
+    - [`is-layout-left-padded-mapping-of`](../../is-layout-left-padded-mapping-of.md)`&amp;lt;LayoutLeftPaddedMapping&amp;gt;`が`true`、かつ
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, typename LayoutLeftPaddedMapping::extents_type&amp;gt;`が`true`であること。
+
+
+## 適格要件
+- (7) : 以下を満たすとき、`extents_type::`[`static_extent`](../../extents/static_extent.md)`(0)`が`LayoutLeftPaddedMapping::padding_stride`の倍数であること。
+    - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 1`、かつ
+    - `extents_type::`[`static_extent`](../../extents/static_extent.md)`(0)`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくなく、かつ
+    - `LayoutLeftPaddedMapping::extents_type::`[`static_extent`](../../extents/static_extent.md)`(0)`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくなく、かつ
+    - `LayoutLeftPaddedMapping::padding_stride`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくないこと。
 
 
 ## 事前条件
@@ -53,11 +70,14 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 - (6) :
     - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 0`のとき、`other`における全次元のストライド幅が[`layout_left::mapping`相当の制約](stride.md)をもつこと。
     - `other.`[`required_span_size()`](../../layout_stride/mapping/required_span_size.md)を、`index_type`型で表現できること。
+- (7) :
+    - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 1`のとき、`other.stride(1) == other.extents(0)`
+    - `other.`[`required_span_size()`](../../layout_left_padded/mapping/required_span_size.md.nolink)を、`index_type`型で表現できること。
 
 
 ## 効果
 - (3) : `e`を用いて`extents_`を直接非リスト初期化する。
-- (4), (5), (6) : `other.extents()`を用いて`extents_`を直接非リスト初期化する。
+- (4), (5), (6), (7) : `other.extents()`を用いて`extents_`を直接非リスト初期化する。
 
 
 ## 例外
@@ -67,6 +87,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 ## explicitになる条件
 - (4), (5) : `!`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;OtherExtents, extents_type&amp;gt;`
 - (6) : [`extents_type::rank()`](../../extents/rank.md) `&amp;gt; 0`
+- (7) : `!`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;typename LayoutLeftPaddedMapping::extents_type, extents_type&amp;gt;`
 
 
 ## 例
@@ -143,7 +164,9 @@ int main()
 ## 関連項目
 - [`layout_right::mapping`](../../layout_right/mapping.md)
 - [`layout_stride::mapping`](../../layout_stride/mapping.md)
+- [`layout_left_padded::mapping`](../../layout_left_padded/mapping.md)
 
 
 ## 参照
 - [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koile</name>
        <email>zbdk@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_left_padded -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded.html"/>
      <id>4a43d0094cbd08ecc3dfdf9cfa8ecf288ad24ce3:reference/mdspan/layout_left_padded.md</id>
      <updated>2024-07-28T23:00:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded.md b/reference/mdspan/layout_left_padded.md
index 32d916a80..4fc89ce69 100644
--- a/reference/mdspan/layout_left_padded.md
+++ b/reference/mdspan/layout_left_padded.md
@@ -15,7 +15,7 @@ namespace std {
 ```
 * dynamic_extent[link /reference/span/dynamic_extent.md]
 * Extents[link extents.md]
-* mapping[link layout_left_padded/mapping.md.nolink]
+* mapping[link layout_left_padded/mapping.md]
 
 ## 概要
 `layout_left_padded`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、パディングあり列優先(column major)[レイアウトマッピング](LayoutMapping.md)を表現するポリシークラスである。
@@ -29,7 +29,7 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`mapping`](layout_left_padded/mapping.md.nolink) | レイアウトマッピング | C++26 |
+| [`mapping`](layout_left_padded/mapping.md) | レイアウトマッピング | C++26 |
 
 
 ## 例
@@ -83,4 +83,4 @@ int main()
 
 
 ## 参照
-- [P2642R5 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2642r5.html)
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koile</name>
        <email>zbdk@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mapping -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded/mapping.html"/>
      <id>4a43d0094cbd08ecc3dfdf9cfa8ecf288ad24ce3:reference/mdspan/layout_left_padded/mapping.md</id>
      <updated>2024-07-28T23:00:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded/mapping.md b/reference/mdspan/layout_left_padded/mapping.md
new file mode 100644
index 000000000..b561c74a8
--- /dev/null
+++ b/reference/mdspan/layout_left_padded/mapping.md
@@ -0,0 +1,127 @@
+# mapping
+* mdspan[meta header]
+* class template[meta id-type]
+* std[meta namespace]
+* layout_left_padded[meta class]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;size_t PaddingValue&amp;gt;
+  template&amp;lt;class Extents&amp;gt;
+  class layout_left_padded&amp;lt;PaddingValue&amp;gt;::mapping;
+}
+```
+* layout_left_padded[link ../layout_left_padded.md]
+* Extents[link ../extents.md]
+
+## 概要
+`layout_left_padded&amp;lt;S&amp;gt;::mapping&amp;lt;E&amp;gt;`は、[`extents`](../extents.md)型の多次元配列サイズ`E`をパラメータとして、パディングあり列優先(column major)[レイアウトマッピング](../LayoutMapping.md)を表現するクラスである。
+
+`layout_left_padded&amp;lt;S&amp;gt;::mapping&amp;lt;E&amp;gt;`は[トリビアルコピー可能](/reference/type_traits/is_trivially_copyable.md)であり、[`regular`](/reference/concepts/regular.md)のモデルである。
+
+### 説明専用メンバ変数
+`layout_left_padded&amp;lt;S&amp;gt;::mapping`クラステンプレートは、下記の説明専用メンバ変数を保持する。
+
+- `stride-1` : `index_type`型の値`static-padding-stride`
+- `extents_` : `extents_type`型の[多次元配列サイズ情報](../extents.md)
+
+また下記の説明専用静的メンバ変数を保持する。
+
+- `rank_` : `size_t`型の定数`extents_type::`[`rank()`](../extents/rank.md)
+- `first-static-extent` : `size_t`型の定数`extents_type::`[`static_extent`](../extents/static_extent.md)`(0)`
+- `static-padding-stride` : `size_t`型の下記定数
+    - `rank_`が`0`または`1`のとき、値`0`
+    - `padding_value`または`first-static-extent`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しいとき、`dynamic_extent`
+    - そうでなければ、`LEAST-MULTIPLE-AT-LEAST(padding_value, first-static-extent)`
+
+
+## 適格要件
+- `Extents`は[`extents`](../extents.md)の特殊化であること。
+- `rank_dynamic() == 0`が`true`のとき、多次元インデクス空間`Extents()`のサイズが`index_type`型で表現できること。
+- 値`padding_value`が`index_type`型で表現できること。
+- 以下を満たすとき、`LEAST-MULTIPLE-AT-LEAST(padding_value, first-static-extent)`が、`size_t`型および`index_type`型で表現できること。
+    - `rank_ &amp;gt; 1`、かつ
+    - `padding_value`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくなく、かつ
+    - `first-static-extent`が`dynamic_extent`と等しくないとき。
+- 以下を満たすとき、半開区間`[1, rank_)`の全ての値`k`に対して`LEAST-MULTIPLE-AT-LEAST(padding_value, ext.static_extent(0))`と全ての`ext.static_extent(k)`値を乗じた結果が、`size_t`型および`index_type`型で表現できること。
+    - `rank_ &amp;gt; 1`、かつ
+    - `padding_value`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくなく、かつ
+    - 半開区間`[0, extents_type::`[`rank()`](../extents/rank.md)`)`の全ての値`k`に対して`extents_type::`[`static_extent`](../extents/static_extent.md)`(k)`が`dynamic_extent`と等しくないとき。
+
+
+## メンバ関数
+### 構築・破棄
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`(constructor)`](mapping/op_constructor.md.nolink) | コンストラクタ | C++26 |
+| `(destructor)` | デストラクタ | C++26 |
+| `operator=`    | コピー代入演算子 | C++26 |
+
+### 観測
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `extents` | 多次元配列のサイズ`extents_`を取得する | C++26 |
+| [`strides`](mapping/strides.md.nolink) | ストライド幅配列を取得する | C++26 |
+| [`required_span_size`](mapping/required_span_size.md.nolink) | 要素アクセス範囲を取得する | C++26 |
+| [`operator()`](mapping/op_call.md.nolink) | 多次元配列インデクスから要素位置へ変換する | C++26 |
+| [`is_exhaustive`](mapping/is_exhaustive.md.nolink) | [Exhaustive特性](../LayoutMapping.md)を取得する | C++26 |
+| [`stride`](mapping/stride.md.nolink) | 指定次元のストライド幅を取得する | C++26 |
+
+
+## 静的メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `is_always_unique`  | `true`を返す | C++26 |
+| [`is_always_exhaustive`](mapping/is_always_exhaustive.md.nolink) | 型の[Exhaustive特性](../LayoutMapping.md)を取得する | C++26 |
+| `is_always_strided` | `true`を返す | C++26 |
+| `is_unique`  | `true`を返す | C++26 |
+| `is_strided` | `true`を返す | C++26 |
+
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `extents_type` | [`Extents`](../extents.md) | C++26 |
+| `index_type` | [`Extents::index_type`](../extents.md) | C++26 |
+| `size_type` | [`Extents::size_type`](../extents.md) | C++26 |
+| `rank_type` | [`Extents::rank_type`](../extents.md) | C++26 |
+| `layout_type` | [`layout_left_padded`](../layout_left_padded.md)`&amp;lt;PaddingValue&amp;gt;` | C++26 |
+
+
+## 非メンバ（*Hidden friends*）関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`submdspan_mapping`](mapping/submdspan_mapping.md.nolink) | [`submdspan`](../submdspan.md)サポート | C++26 |
+
+### 比較演算子
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`operator==`](mapping/op_equal.md.nolink) | 等値比較 | C++26 |
+| [`operator!=`](mapping/op_equal.md.nolink) | 非等値比較 (`==`により使用可能) | C++26 |
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`mdspan`](../mdspan.md)
+- [`submdspan`](../submdspan.md)
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koile</name>
        <email>zbdk@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_right_padded -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded.html"/>
      <id>4a43d0094cbd08ecc3dfdf9cfa8ecf288ad24ce3:reference/mdspan/layout_right_padded.md</id>
      <updated>2024-07-28T23:00:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded.md b/reference/mdspan/layout_right_padded.md
index d411b07d5..18185c070 100644
--- a/reference/mdspan/layout_right_padded.md
+++ b/reference/mdspan/layout_right_padded.md
@@ -15,7 +15,7 @@ namespace std {
 ```
 * dynamic_extent[link /reference/span/dynamic_extent.md]
 * Extents[link extents.md]
-* mapping[link layout_right_padded/mapping.md.nolink]
+* mapping[link layout_right_padded/mapping.md]
 
 ## 概要
 `layout_right_padded`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、パディングあり行優先(row major)[レイアウトマッピング](LayoutMapping.md)を表現するポリシークラスである。
@@ -29,7 +29,7 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`mapping`](layout_right_padded/mapping.md.nolink) | レイアウトマッピング | C++26 |
+| [`mapping`](layout_right_padded/mapping.md) | レイアウトマッピング | C++26 |
 
 
 ## 例
@@ -81,4 +81,4 @@ int main()
 
 
 ## 参照
-- [P2642R5 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2642r5.html)
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koile</name>
        <email>zbdk@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mapping -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded/mapping.html"/>
      <id>4a43d0094cbd08ecc3dfdf9cfa8ecf288ad24ce3:reference/mdspan/layout_right_padded/mapping.md</id>
      <updated>2024-07-28T23:00:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded/mapping.md b/reference/mdspan/layout_right_padded/mapping.md
new file mode 100644
index 000000000..1e8839d62
--- /dev/null
+++ b/reference/mdspan/layout_right_padded/mapping.md
@@ -0,0 +1,127 @@
+# mapping
+* mdspan[meta header]
+* class template[meta id-type]
+* std[meta namespace]
+* layout_right_padded[meta class]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;size_t PaddingValue&amp;gt;
+  template&amp;lt;class Extents&amp;gt;
+  class layout_right_padded&amp;lt;PaddingValue&amp;gt;::mapping;
+}
+```
+* layout_right_padded[link ../layout_right_padded.md]
+* Extents[link ../extents.md]
+
+## 概要
+`layout_right_padded&amp;lt;S&amp;gt;::mapping&amp;lt;E&amp;gt;`は、[`extents`](../extents.md)型の多次元配列サイズ`E`をパラメータとして、パディングあり行優先(row major)[レイアウトマッピング](../LayoutMapping.md)を表現するクラスである。
+
+`layout_right_padded&amp;lt;S&amp;gt;::mapping&amp;lt;E&amp;gt;`は[トリビアルコピー可能](/reference/type_traits/is_trivially_copyable.md)であり、[`regular`](/reference/concepts/regular.md)のモデルである。
+
+### 説明専用メンバ変数
+`layout_right_padded&amp;lt;S&amp;gt;::mapping`クラステンプレートは、下記の説明専用メンバ変数を保持する。
+
+- `stride-rm2` : `index_type`型の値`static-padding-stride`
+- `extents_` : `extents_type`型の[多次元配列サイズ情報](../extents.md)
+
+また下記の説明専用静的メンバ変数を保持する。
+
+- `rank_` : `size_t`型の定数`extents_type::`[`rank()`](../extents/rank.md)
+- `last-static-extent` : `size_t`型の定数`extents_type::`[`static_extent`](../extents/static_extent.md)`(rank_ - 1)`
+- `static-padding-stride` : `size_t`型の下記定数
+    - `rank_`が`0`または`1`のとき、値`0`
+    - `padding_value`または`last-static-extent`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しいとき、`dynamic_extent`
+    - そうでなければ、`LEAST-MULTIPLE-AT-LEAST(padding_value, last-static-extent)`
+
+
+## 適格要件
+- `Extents`は[`extents`](../extents.md)の特殊化であること。
+- `rank_dynamic() == 0`が`true`のとき、多次元インデクス空間`Extents()`のサイズが`index_type`型で表現できること。
+- 値`padding_value`が`index_type`型で表現できること。
+- 以下を満たすとき、`LEAST-MULTIPLE-AT-LEAST(padding_value, last-static-extent)`が、`size_t`型および`index_type`型で表現できること。
+    - `rank_ &amp;gt; 1`、かつ
+    - `padding_value`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくなく、かつ
+    - `last-static-extent`が`dynamic_extent`と等しくないとき。
+- 以下を満たすとき、半開区間`[1, rank_ - 1)`の全ての値`k`に対して`LEAST-MULTIPLE-AT-LEAST(padding_value, ext.static_extent(rank_ - 1))`と全ての`ext.static_extent(k)`値を乗じた結果が、`size_t`型および`index_type`型で表現できること。
+    - `rank_ &amp;gt; 1`、かつ
+    - `padding_value`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくなく、かつ
+    - 半開区間`[0, rank_)`の全ての値`k`に対して`extents_type::`[`static_extent`](../extents/static_extent.md)`(k)`が`dynamic_extent`と等しくないとき。
+
+
+## メンバ関数
+### 構築・破棄
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`(constructor)`](mapping/op_constructor.md.nolink) | コンストラクタ | C++26 |
+| `(destructor)` | デストラクタ | C++26 |
+| `operator=`    | コピー代入演算子 | C++26 |
+
+### 観測
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `extents` | 多次元配列のサイズ`extents_`を取得する | C++26 |
+| [`strides`](mapping/strides.md.nolink) | ストライド幅配列を取得する | C++26 |
+| [`required_span_size`](mapping/required_span_size.md.nolink) | 要素アクセス範囲を取得する | C++26 |
+| [`operator()`](mapping/op_call.md.nolink) | 多次元配列インデクスから要素位置へ変換する | C++26 |
+| [`is_exhaustive`](mapping/is_exhaustive.md.nolink) | [Exhaustive特性](../LayoutMapping.md)を取得する | C++26 |
+| [`stride`](mapping/stride.md.nolink) | 指定次元のストライド幅を取得する | C++26 |
+
+
+## 静的メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `is_always_unique`  | `true`を返す | C++26 |
+| [`is_always_exhaustive`](mapping/is_always_exhaustive.md.nolink) | 型の[Exhaustive特性](../LayoutMapping.md)を取得する | C++26 |
+| `is_always_strided` | `true`を返す | C++26 |
+| `is_unique`  | `true`を返す | C++26 |
+| `is_strided` | `true`を返す | C++26 |
+
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `extents_type` | [`Extents`](../extents.md) | C++26 |
+| `index_type` | [`Extents::index_type`](../extents.md) | C++26 |
+| `size_type` | [`Extents::size_type`](../extents.md) | C++26 |
+| `rank_type` | [`Extents::rank_type`](../extents.md) | C++26 |
+| `layout_type` | [`layout_right_padded`](../layout_right_padded.md)`&amp;lt;PaddingValue&amp;gt;` | C++26 |
+
+
+## 非メンバ（*Hidden friends*）関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`submdspan_mapping`](mapping/submdspan_mapping.md.nolink) | [`submdspan`](../submdspan.md)サポート | C++26 |
+
+### 比較演算子
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`operator==`](mapping/op_equal.md.nolink) | 等値比較 | C++26 |
+| [`operator!=`](mapping/op_equal.md.nolink) | 非等値比較 (`==`により使用可能) | C++26 |
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`mdspan`](../mdspan.md)
+- [`submdspan`](../submdspan.md)
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koile</name>
        <email>zbdk@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride/mapping/op_constructor.html"/>
      <id>4a43d0094cbd08ecc3dfdf9cfa8ecf288ad24ce3:reference/mdspan/layout_stride/mapping/op_constructor.md</id>
      <updated>2024-07-28T23:00:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride/mapping/op_constructor.md b/reference/mdspan/layout_stride/mapping/op_constructor.md
index 78c153acb..0265e9235 100644
--- a/reference/mdspan/layout_stride/mapping/op_constructor.md
+++ b/reference/mdspan/layout_stride/mapping/op_constructor.md
@@ -78,16 +78,27 @@ constexpr bool is-mapping-of = // exposition only
 
 - (5) : `explicit`指定子の式は以下と等価
 ```cpp
+// C++23
 !(is_convertible_v&amp;lt;typename StridedLayoutMapping::extents_type, extents_type&amp;gt; &amp;amp;&amp;amp;
   (is-mapping-of&amp;lt;layout_left, StridedLayoutMapping&amp;gt; ||
    is-mapping-of&amp;lt;layout_right, StridedLayoutMapping&amp;gt; ||
    is-mapping-of&amp;lt;layout_stride, StridedLayoutMapping&amp;gt;))
+
+// C++26
+!(is_convertible_v&amp;lt;typename StridedLayoutMapping::extents_type, extents_type&amp;gt; &amp;amp;&amp;amp;
+  (is-mapping-of&amp;lt;layout_left, StridedLayoutMapping&amp;gt; ||
+   is-mapping-of&amp;lt;layout_right, StridedLayoutMapping&amp;gt; ||
+   is-layout-left-padded-mapping-of&amp;lt;StridedLayoutMapping&amp;gt; ||
+   is-layout-right-padded-mapping-of&amp;lt;StridedLayoutMapping&amp;gt; ||
+   is-mapping-of&amp;lt;layout_stride, StridedLayoutMapping&amp;gt;))
 ```
 * is_convertible_v[link /reference/type_traits/is_convertible.md]
 * is-mapping-of[italic]
 * layout_left[link ../../layout_left.md]
 * layout_right[link ../../layout_right.md]
 * layout_stride[link ../../layout_stride.md]
+* is-layout-left-padded-mapping-of[link ../../is-layout-left-padded-mapping-of.md]
+* is-layout-right-padded-mapping-of[link ../../is-layout-right-padded-mapping-of.md]
 
 
 ## 例
@@ -158,9 +169,11 @@ int main()
 
 ## 関連項目
 - [`layout_left::mapping`](../../layout_left/mapping.md)
-- [`layout_stride::mapping`](../../layout_stride/mapping.md)
+- [`layout_right::mapping`](../../layout_right/mapping.md)
 
 
 ## 参照
 - [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
 - [P2763R1 `layout_stride` static extents default constructor fix](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2763r1.html)
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
+    - C++26でオーバーロード(5)のexplicit条件に[`layout_left_padded`](../../layout_left_padded.md), [`layout_right_padded`](../../layout_right_padded.md)対応が追加された。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koile</name>
        <email>zbdk@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/queue/priority_queue/op_constructor.html"/>
      <id>4a43d0094cbd08ecc3dfdf9cfa8ecf288ad24ce3:reference/queue/priority_queue/op_constructor.md</id>
      <updated>2024-07-28T23:00:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/queue/priority_queue/op_constructor.md b/reference/queue/priority_queue/op_constructor.md
index 0623ab810..ef3ff162e 100644
--- a/reference/queue/priority_queue/op_constructor.md
+++ b/reference/queue/priority_queue/op_constructor.md
@@ -62,7 +62,38 @@ priority_queue(const priority_queue&amp;amp; que,
 template &amp;lt;class Alloc&amp;gt;
 priority_queue(priority_queue&amp;amp;&amp;amp; que,
                const Alloc&amp;amp; alloc);                       // (14) C++11
+
+template &amp;lt;class InputIterator, class Alloc&amp;gt;
+priority_queue(InputIterator first, InputIterator last,
+               const Compare&amp;amp; x,
+               const Alloc&amp;amp; alloc);                       // (15) C++23
+
+template &amp;lt;class InputIterator, class Alloc&amp;gt;
+priority_queue(InputIterator first, InputIterator last,
+               const Compare&amp;amp; x,
+               const Container&amp;amp; other,
+               const Alloc&amp;amp; alloc);                       // (16) C++23
+
+template &amp;lt;class InputIterator, class Alloc&amp;gt;
+priority_queue(InputIterator first, InputIterator last,
+               const Compare&amp;amp; x,
+               Container&amp;amp;&amp;amp; other,
+               const Alloc&amp;amp; alloc);                       // (17) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+priority_queue(from_range_t, R&amp;amp;&amp;amp; rg,
+               const Compare&amp;amp; x = Compare());             // (18) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R, class Alloc&amp;gt;
+priority_queue(from_range_t, R&amp;amp;&amp;amp; rg,
+               const Compare&amp;amp; x,
+               const Alloc&amp;amp; alloc);                       // (19) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R, class Alloc&amp;gt;
+priority_queue(from_range_t, R&amp;amp;&amp;amp; rg,
+               const Alloc&amp;amp; alloc);                       // (20) C++23
 ```
+* from_range_t[link ../../ranges/from_range_t.md]
 
 ## 概要
 - (1) : デフォルトコンストラクタ
@@ -80,6 +111,8 @@ priority_queue(priority_queue&amp;amp;&amp;amp; que,
 - (12) : 比較関数、元となるコンテナの一時オブジェクト、アロケータを受け取るコンストラクタ
 - (13) : アロケータ指定でコピー構築する
 - (14) : アロケータ指定でムーブ構築する
+- (15), (16), (17) : アロケータ指定でイテレータ範囲から優先順位付きキューを構築する
+- (18), (19), (20) : Rangeから優先順位付きキューを構築する
 
 
 ## 要件
@@ -143,6 +176,37 @@ priority_queue(priority_queue&amp;amp;&amp;amp; que,
     2. メンバ変数`c`を`que.c`でムーブ構築する。
     3. メンバ変数`c`のメモリアロケートに`alloc`を使用する。
     4. [`make_heap`](/reference/algorithm/make_heap.md)`(c.begin(), c.end(), comp)`を呼び出す。
+- (15) :
+    1. メンバ変数`comp`を`x`でコピー構築する。
+    2. メンバ変数`c`のメモリアロケートに`alloc`を使用する。
+    3. `c.insert(c.end(), first, last)`を呼び出す。
+    4. [`make_heap`](/reference/algorithm/make_heap.md)`(c.begin(), c.end(), comp)`を呼び出す。
+- (16) :
+    1. メンバ変数`comp`を`x`でコピー構築する。
+    2. メンバ変数`c`を`other`でコピー構築する。
+    3. メンバ変数`c`のメモリアロケートに`alloc`を使用する。
+    4. `c.insert(c.end(), first, last)`を呼び出す。
+    5. [`make_heap`](/reference/algorithm/make_heap.md)`(c.begin(), c.end(), comp)`を呼び出す。
+- (17) :
+    1. メンバ変数`comp`を`x`でコピー構築する。
+    2. メンバ変数`c`を`other`でムーブ構築する。
+    3. メンバ変数`c`のメモリアロケートに`alloc`を使用する。
+    4. `c.insert(c.end(), first, last)`を呼び出す。
+    5. [`make_heap`](/reference/algorithm/make_heap.md)`(c.begin(), c.end(), comp)`を呼び出す。
+- (18) :
+    1. メンバ変数`comp`を`x`でコピー構築する。
+    2. `c.insert(c.end(), ranges::begin(rg), ranges::end(rg))`を呼び出す。
+    3. [`make_heap`](/reference/algorithm/make_heap.md)`(c.begin(), c.end(), comp)`を呼び出す。
+- (19) :
+    1. メンバ変数`comp`を`x`でコピー構築する。
+    2. メンバ変数`c`のメモリアロケートに`alloc`を使用する。
+    3. `c.insert(c.end(), ranges::begin(rg), ranges::end(rg))`を呼び出す。
+    4. [`make_heap`](/reference/algorithm/make_heap.md)`(c.begin(), c.end(), comp)`を呼び出す。
+- (20) :
+    1. メンバ変数`comp`を値初期化する。
+    2. メンバ変数`c`のメモリアロケートに`alloc`を使用する。
+    3. `c.insert(c.end(), ranges::begin(rg), ranges::end(rg))`を呼び出す。
+    4. [`make_heap`](/reference/algorithm/make_heap.md)`(c.begin(), c.end(), comp)`を呼び出す。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koile</name>
        <email>zbdk@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/queue/queue/op_constructor.html"/>
      <id>4a43d0094cbd08ecc3dfdf9cfa8ecf288ad24ce3:reference/queue/queue/op_constructor.md</id>
      <updated>2024-07-28T23:00:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/queue/queue/op_constructor.md b/reference/queue/queue/op_constructor.md
index a5f74dd5e..0dfe840c6 100644
--- a/reference/queue/queue/op_constructor.md
+++ b/reference/queue/queue/op_constructor.md
@@ -33,7 +33,13 @@ queue(queue&amp;amp;&amp;amp; que, const Alloc&amp;amp; alloc);            // (9) C++11
 
 template&amp;lt;class InputIterator, class Alloc&amp;gt;
 queue(InputIterator first, InputIterator last, const Alloc&amp;amp;);  // (10) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+queue(from_range_t, R&amp;amp;&amp;amp; rg);                       // (11) C++23
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R, class Alloc&amp;gt;
+queue(from_range_t, R&amp;amp;&amp;amp; rg, const Alloc&amp;amp; alloc);   // (12) C++23
 ```
+* from_range_t[link ../../ranges/from_range_t.md]
 
 ## 概要
 `queue` コンテナアダプタのオブジェクトを構築する。 
@@ -46,6 +52,7 @@ queue(InputIterator first, InputIterator last, const Alloc&amp;amp;);  // (10) C++23
 `alloc`: 内部のコンテナで使用するアロケータオブジェクト
 `que`: コピー・ムーブ元の`queue`オブジェクト
 `first`, `last`: 初期化に用いるイテレータのペア
+`rg`: 初期化に用いるRange
 
 ## 計算量
 線形 O(n)。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koile</name>
        <email>zbdk@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/op_constructor.html"/>
      <id>4a43d0094cbd08ecc3dfdf9cfa8ecf288ad24ce3:reference/set/multiset/op_constructor.md</id>
      <updated>2024-07-28T23:00:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/op_constructor.md b/reference/set/multiset/op_constructor.md
index ff871be24..dff5fb8b5 100644
--- a/reference/set/multiset/op_constructor.md
+++ b/reference/set/multiset/op_constructor.md
@@ -31,13 +31,23 @@ multiset(const set&amp;amp; x, const Allocator&amp;amp; alloc);          // (8) C++11
 multiset(set&amp;amp;&amp;amp; y, const Allocator&amp;amp; alloc);               // (9) C++11
 
 multiset(initializer_list&amp;lt;value_type&amp;gt; init,
-    const Compare&amp;amp; comp = Compare(),
-    const Allocator&amp;amp; alloc = Allocator());          // (10) C++11
+         const Compare&amp;amp; comp = Compare(),
+         const Allocator&amp;amp; alloc = Allocator());          // (10) C++11
 
 multiset(initializer_list&amp;lt;value_type&amp;gt; init,
-    const Allocator&amp;amp; a);                            // (11) C++14
+         const Allocator&amp;amp; a);                            // (11) C++14
+
+template &amp;lt;container-compatible-range &amp;lt;value_type&amp;gt; R&amp;gt;
+multiset(from_range_t, R&amp;amp;&amp;amp; rg,
+         const Compare&amp;amp; comp = Compare(),
+         const Allocator&amp;amp; alloc = Allocator());          // (12) C++23
+
+template &amp;lt;container-compatible-range &amp;lt;value_type&amp;gt; R&amp;gt;
+multiset(from_range_t, R&amp;amp;&amp;amp; rg,
+         const Allocator&amp;amp; alloc);                        // (13) C++23
 ```
 * initializer_list[link ../../initializer_list.md]
+* from_range_t[link ../../ranges/from_range_t.md]
 
 
 ## 概要
@@ -54,7 +64,9 @@ multiset(initializer_list&amp;lt;value_type&amp;gt; init,
 - (6), (8) : コピーコンストラクタ。`x`のコンテンツのコピーでコンテナを構築する。もし `alloc` が与えられなかった場合、アロケータを `std::`[`allocator_traits`](../../memory/allocator_traits.md)`&amp;lt;allocator_type&amp;gt;::`[`select_on_container_copy_construction`](../../memory/allocator_traits/select_on_container_copy_construction.md)`(x.`[`get_allocator`](get_allocator.md)`())` の呼び出しによって取得する。
 - (7), (9) : ムーブコンストラクタ。`y` のコンテンツをムーブすることでコンテナを構築する。もし `alloc` が与えられなかった場合、アロケータを `y` に属しているアロケータをムーブして取得する。
 - (10) : 初期化リスト `init` のコンテンツでコンテナを構築する。
-- (11) : (10)のコンストラクタを `set(init, Compare(), a)` のように呼び出して、`multiset`オブジェクトを構築する。
+- (11) : (10)のコンストラクタを `multiset(init, Compare(), a)` のように呼び出して、`multiset`オブジェクトを構築する。
+- (12) : Range `rg` の要素で `multiset` オブジェクトを構築する。
+- (13) : (12)のコンストラクタを `multiset(`[`from_range`](../../ranges/from_range_t.md)`, rg, Compare(), alloc)` のように呼び出して、`multiset`オブジェクトを構築する。
 
 
 ## 計算量
@@ -62,7 +74,8 @@ multiset(initializer_list&amp;lt;value_type&amp;gt; init,
 - (4), (5) : `comp` によって既にソート済みである場合は、イテレータ間の距離（コピーコンストラクト）。未ソートのシーケンスの場合は、それらの距離について N * logN （ソート、コピーコンストラクト）。
 - (6), (8) : `x` の [`size`](size.md) に対して線形時間（全要素をコピー構築する）。
 - (7), (9) : 定数時間。ただし、`alloc` が与えられてかつ `alloc != y.`[`get_allocator`](get_allocator.md)`()` の場合は線形時間。
-- (10), (11) : `init` の要素数に対して線形時間。
+- (10), (11) : `comp` によって既にソート済みである場合は、`init` のサイズ（コピーコンストラクト）。未ソートの `init` の場合は、`init` のサイズについて N * logN （ソート、コピーコンストラクト）。
+- (12), (13) : `comp` によって既にソート済みである場合は、`rg` のサイズ（コピーコンストラクト）。未ソートの `rg` の場合は、`rg` のサイズについて N * logN （ソート、コピーコンストラクト）。
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koile</name>
        <email>zbdk@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/set/set/op_constructor.html"/>
      <id>4a43d0094cbd08ecc3dfdf9cfa8ecf288ad24ce3:reference/set/set/op_constructor.md</id>
      <updated>2024-07-28T23:00:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/op_constructor.md b/reference/set/set/op_constructor.md
index d87fbf344..69d2b4834 100644
--- a/reference/set/set/op_constructor.md
+++ b/reference/set/set/op_constructor.md
@@ -36,8 +36,18 @@ set(initializer_list&amp;lt;value_type&amp;gt; init,
 
 set(initializer_list&amp;lt;value_type&amp;gt; init,
     const Allocator&amp;amp; a);                            // (11) C++14
+
+template &amp;lt;container-compatible-range &amp;lt;value_type&amp;gt; R&amp;gt;
+set(from_range_t, R&amp;amp;&amp;amp; rg,
+    const Compare&amp;amp; comp = Compare(),
+    const Allocator&amp;amp; alloc = Allocator());          // (12) C++23
+
+template &amp;lt;container-compatible-range &amp;lt;value_type&amp;gt; R&amp;gt;
+set(from_range_t, R&amp;amp;&amp;amp; rg,
+    const Allocator&amp;amp; alloc);                        // (13) C++23
 ```
 * initializer_list[link ../../initializer_list.md]
+* from_range_t[link ../../ranges/from_range_t.md]
 
 
 ## 概要
@@ -55,6 +65,8 @@ set(initializer_list&amp;lt;value_type&amp;gt; init,
 - (7), (9) : ムーブコンストラクタ。`y` のコンテンツをムーブすることでコンテナを構築する。もし `alloc` が与えられなかった場合、アロケータを `y` に属しているアロケータをムーブして取得する。
 - (10) : 初期化リスト `init` のコンテンツでコンテナを構築する。
 - (11) : (10)のコンストラクタを `set(init, Compare(), a)` のように呼び出して、`set`オブジェクトを構築する。
+- (12) : Range `rg` の要素で `set` オブジェクトを構築する。
+- (13) : (12)のコンストラクタを `set(`[`from_range`](../../ranges/from_range_t.md)`, rg, Compare(), alloc)` のように呼び出して、`set`オブジェクトを構築する。
 
 
 ## 計算量
@@ -62,7 +74,8 @@ set(initializer_list&amp;lt;value_type&amp;gt; init,
 - (4), (5) : `comp` によって既にソート済みである場合は、イテレータ間の距離（コピーコンストラクト）。未ソートのシーケンスの場合は、それらの距離について N * logN （ソート、コピーコンストラクト）。
 - (6), (8) : `x` の [`size`](size.md) に対して線形時間（全要素をコピー構築する）。
 - (7), (9) : 定数時間。ただし、`alloc` が与えられてかつ `alloc != y.`[`get_allocator`](get_allocator.md)`()` の場合は線形時間。
-- (10), (11) : `init` の要素数に対して線形時間。
+- (10), (11) : `comp` によって既にソート済みである場合は、`init` のサイズ（コピーコンストラクト）。未ソートの `init` の場合は、`init` のサイズについて N * logN （ソート、コピーコンストラクト）。
+- (12), (13) : `comp` によって既にソート済みである場合は、`rg` のサイズ（コピーコンストラクト）。未ソートの `rg` の場合は、`rg` のサイズについて N * logN （ソート、コピーコンストラクト）。
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koile</name>
        <email>zbdk@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/stack/stack/op_constructor.html"/>
      <id>4a43d0094cbd08ecc3dfdf9cfa8ecf288ad24ce3:reference/stack/stack/op_constructor.md</id>
      <updated>2024-07-28T23:00:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stack/stack/op_constructor.md b/reference/stack/stack/op_constructor.md
index c5da7122c..14b0c8d2f 100644
--- a/reference/stack/stack/op_constructor.md
+++ b/reference/stack/stack/op_constructor.md
@@ -17,7 +17,7 @@ stack() : stack(Container()) {}    // (1)
 explicit stack(const Container&amp;amp;);  // (2)
 explicit stack(Container&amp;amp;&amp;amp;);       // (3)
 
-template&amp;lt;class InputIterator&amp;gt;
+template &amp;lt;class InputIterator&amp;gt;
 stack(InputIterator first, InputIterator last);       // (4) C++23
 
 template &amp;lt;class Allocator&amp;gt;
@@ -35,9 +35,16 @@ stack(const stack&amp;amp; st, const Allocator&amp;amp; alloc);       // (8) C++11
 template &amp;lt;class Allocator&amp;gt;
 stack(stack&amp;amp;&amp;amp; st, const Allocator&amp;amp; alloc);            // (9) C++11
 
-template&amp;lt;class InputIterator, class Alloc&amp;gt;
+template &amp;lt;class InputIterator, class Alloc&amp;gt;
 stack(InputIterator first, InputIterator last, const Alloc&amp;amp;);  // (10) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+stack(from_range_t, R&amp;amp;&amp;amp; rg);                          // (11) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R, class Alloc&amp;gt;
+stack(from_range_t, R&amp;amp;&amp;amp; rg, const Alloc&amp;amp; alloc);      // (12) C++23
 ```
+* from_range_t[link ../../ranges/from_range_t.md]
 
 ## 概要
 - (1) : デフォルトコンストラクタ。
@@ -50,6 +57,8 @@ stack(InputIterator first, InputIterator last, const Alloc&amp;amp;);  // (10) C++23
 - (8) : アロケータを受け取るコピーコンストラクタ。
 - (9) : アロケータを受け取るムーブコンストラクタ。
 - (10) : 元となるコンテナのイテレータペアとアロケータを受け取るコンストラクタ。
+- (11) : 元となるRangeを受け取るコンストラクタ。
+- (12) : 元となるRangeとアロケータを受け取るコンストラクタ。
 
 
 ## 効果
@@ -62,6 +71,8 @@ stack(InputIterator first, InputIterator last, const Alloc&amp;amp;);  // (10) C++23
 - (8) : メンバ変数`c`を`Container(st.c, alloc)`で初期化する。
 - (9) : メンバ変数`c`を`Container(`[`std::move`](/reference/utility/move.md)`(st.c), alloc)`で初期化する。
 - (10) : メンバ変数`c`を3つの引数`first`, `last`, `alloc`で初期化する。
+- (11) : メンバ変数`c`を`Container(from_range, rg)`で初期化する。
+- (12) : メンバ変数`c`を`Container(from_range, rg, alloc)`で初期化する。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koile</name>
        <email>zbdk@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_constructor.html"/>
      <id>4a43d0094cbd08ecc3dfdf9cfa8ecf288ad24ce3:reference/string/basic_string/op_constructor.md</id>
      <updated>2024-07-28T23:00:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_constructor.md b/reference/string/basic_string/op_constructor.md
index a4d4337da..5bf500824 100644
--- a/reference/string/basic_string/op_constructor.md
+++ b/reference/string/basic_string/op_constructor.md
@@ -118,8 +118,13 @@ constexpr basic_string(const T&amp;amp; t,
                        size_type pos,
                        size_type n,
                        const Allocator&amp;amp; a = Allocator());        // (15) C++20
+
+template &amp;lt;container-compatible-range&amp;lt;CharT&amp;gt; R&amp;gt;
+constexpr basic_string(from_range_t, R&amp;amp;&amp;amp; rg,
+                       const Allocator&amp;amp; a = Allocator());        // (19) C++23
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
+* from_range_t[link ../../ranges/from_range_t.md]
 
 ## 概要
 - (1) : デフォルトコンストラクタ。アロケータをデフォルト構築して空の`basic_string`オブジェクトを構築する。
@@ -139,6 +144,7 @@ constexpr basic_string(const T&amp;amp; t,
 - (15) : [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;`に変換可能な`t`が参照する範囲の文字列の`pos`番目から`n`文字の部分文字列がコピーされる。`n == npos`の場合、`pos`番目から末尾までの部分文字列がコピーされる。
 - (17) : `str`オブジェクトの部分文字列のコピーから`basic_string`オブジェクトを構築する。`str`オブジェクトの`pos`番目から`n`文字の部分文字列がコピーされる。`n == npos`の場合、`pos`番目から末尾までの部分文字列がコピーされる。`str`は未規定の値になる。
 - (18) : `str`オブジェクトの部分文字列のコピーから`basic_string`オブジェクトを構築する。`str`オブジェクトの`pos`番目から末尾までの部分文字列がコピーされる。`str`は未規定の値になる。
+- (19) : Range`rg`から`basic_string`オブジェクトを構築する。
 
 
 ## テンプレートパラメータ制約
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koile</name>
        <email>zbdk@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/op_constructor.html"/>
      <id>4a43d0094cbd08ecc3dfdf9cfa8ecf288ad24ce3:reference/unordered_map/unordered_map/op_constructor.md</id>
      <updated>2024-07-28T23:00:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/op_constructor.md b/reference/unordered_map/unordered_map/op_constructor.md
index e7bc4911e..34b0d996e 100644
--- a/reference/unordered_map/unordered_map/op_constructor.md
+++ b/reference/unordered_map/unordered_map/op_constructor.md
@@ -67,8 +67,27 @@ unordered_map(initializer_list&amp;lt;value_type&amp;gt; il,
               size_type n,
               const hasher&amp;amp; hf, 
               const allocator_type&amp;amp; a);                             // (15) C++14
+
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+unordered_map(std::from_range_t, R&amp;amp;&amp;amp; rg,
+              size_type n = 実装依存の既定値,
+              const hasher&amp;amp; hf = hasher(),
+              const key_equal&amp;amp; eql = key_equal(),
+              const allocator_type&amp;amp; a = allocator_type());          // (16) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+unordered_map(std::from_range_t, R&amp;amp;&amp;amp; rg,
+              size_type n,
+              const allocator_type&amp;amp; a);                             // (17) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+unordered_map(std::from_range_t, R&amp;amp;&amp;amp; rg,
+              size_type n,
+              const hasher&amp;amp; hf,
+              const allocator_type&amp;amp; a);                             // (18) C++23
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
+* from_range_t[link ../../ranges/from_range_t.md]
 
 ## 概要
 `unordered_map` オブジェクトを構築する
@@ -133,6 +152,12 @@ unordered_map(initializer_list&amp;lt;value_type&amp;gt; il,
 
 - (15) : (5) の形式を `unordered_map(il, n, hf, key_equal(), a)` として呼び出した場合と等価である。
 
+- (16) : バケット数最低 `n`、ハッシュ関数オブジェクト `hf`、キー比較用関数オブジェクト `eql`、アロケータオブジェクト `a` で `unordered_map` が構築された後、Range `rg` の要素が挿入される。
+
+- (17) : (16) の形式を `unordered_map(from_range, std::forward&amp;lt;R&amp;gt;(rg), n, hasher(), key_equal(), a)` として呼び出した場合と等価である。
+
+- (18) : (16) の形式を `unordered_map(from_range, std::forward&amp;lt;R&amp;gt;(rg), n, hf, key_equal(), a)` として呼び出した場合と等価である。
+
 
 ## 事後条件
 以下では構築されたオブジェクトを `u` とする。
@@ -190,6 +215,7 @@ unordered_map(initializer_list&amp;lt;value_type&amp;gt; il,
 - (13) : (3) の形式を `unordered_map(f, l, n, hf, key_equal(), a)` として呼び出した場合と等価。
 - (14) : (5) の形式を `unordered_map(il, n, hasher(), key_equal(), a)` として呼び出した場合と等価。
 - (15) : (5) の形式を `unordered_map(il, n, hf, key_equal(), a)` として呼び出した場合と等価。
+- (16), (17), (18) : 平均的には O(n)、ここで、n は [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)`。最悪のケースでは O(n&amp;lt;sup&amp;gt;2&amp;lt;/sup&amp;gt;)
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koile</name>
        <email>zbdk@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/op_constructor.html"/>
      <id>4a43d0094cbd08ecc3dfdf9cfa8ecf288ad24ce3:reference/unordered_map/unordered_multimap/op_constructor.md</id>
      <updated>2024-07-28T23:00:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_multimap/op_constructor.md b/reference/unordered_map/unordered_multimap/op_constructor.md
index 766900cdf..0e44aed11 100644
--- a/reference/unordered_map/unordered_multimap/op_constructor.md
+++ b/reference/unordered_map/unordered_multimap/op_constructor.md
@@ -68,8 +68,27 @@ unordered_multimap(initializer_list&amp;lt;value_type&amp;gt; il,
                    size_type n,
                    const hasher&amp;amp; hf, 
                    const allocator_type&amp;amp; a);                              // (15) C++14
+
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+unordered_multimap(std::from_range_t, R&amp;amp;&amp;amp; rg,
+                   size_type n = 実装依存の既定値,
+                   const hasher&amp;amp; hf = hasher(),
+                   const key_equal&amp;amp; eql = key_equal(),
+                   const allocator_type&amp;amp; a = allocator_type());           // (16) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+unordered_multimap(std::from_range_t, R&amp;amp;&amp;amp; rg,
+                   size_type n,
+                   const allocator_type&amp;amp; a);                              // (17) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+unordered_multimap(std::from_range_t, R&amp;amp;&amp;amp; rg,
+                   size_type n,
+                   const hasher&amp;amp; hf,
+                   const allocator_type&amp;amp; a);                              // (18) C++23
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
+* from_range_t[link ../../ranges/from_range_t.md]
 
 ## 概要
 `unordered_multimap` オブジェクトを構築する
@@ -136,6 +155,12 @@ unordered_multimap(initializer_list&amp;lt;value_type&amp;gt; il,
 
 - (15) : (5) の形式を `unordered_multimap(il, n, hf, key_equal(), a)` として呼び出した場合と等価である。
 
+- (16) : バケット数最低 `n`、ハッシュ関数オブジェクト `hf`、キー比較用関数オブジェクト `eql`、アロケータオブジェクト `a` で `unordered_multimap` が構築された後、Range `rg` の要素が挿入される。
+
+- (17) : (16) の形式を `unordered_multimap(from_range, std::forward&amp;lt;R&amp;gt;(rg), n, hasher(), key_equal(), a)` として呼び出した場合と等価である。
+
+- (18) : (16) の形式を `unordered_multimap(from_range, std::forward&amp;lt;R&amp;gt;(rg), n, hf, key_equal(), a)` として呼び出した場合と等価である。
+
 
 ## 事後条件
 以下では構築されたオブジェクトを `u` とする。
@@ -194,6 +219,7 @@ unordered_multimap(initializer_list&amp;lt;value_type&amp;gt; il,
 - (13) : (3) の形式を `unordered_multimap(f, l, n, hf, key_equal(), a)` として呼び出した場合と等価。
 - (14) : (5) の形式を `unordered_multimap(il, n, hasher(), key_equal(), a)` として呼び出した場合と等価。
 - (15) : (5) の形式を `unordered_multimap(il, n, hf, key_equal(), a)` として呼び出した場合と等価。
+- (16), (17), (18) : 平均的には O(n)、ここで、n は [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)`。最悪のケースでは O(n&amp;lt;sup&amp;gt;2&amp;lt;/sup&amp;gt;)
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koile</name>
        <email>zbdk@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/op_constructor.html"/>
      <id>4a43d0094cbd08ecc3dfdf9cfa8ecf288ad24ce3:reference/unordered_set/unordered_multiset/op_constructor.md</id>
      <updated>2024-07-28T23:00:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_multiset/op_constructor.md b/reference/unordered_set/unordered_multiset/op_constructor.md
index e6fe7d5fb..3cbeb1ced 100644
--- a/reference/unordered_set/unordered_multiset/op_constructor.md
+++ b/reference/unordered_set/unordered_multiset/op_constructor.md
@@ -69,8 +69,27 @@ unordered_multiset(initializer_list&amp;lt;value_type&amp;gt; il,
                    size_type n,
                    const hasher&amp;amp; hf, 
                    const allocator_type&amp;amp; a);                              // (15) C++14
+
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+unordered_multiset(std::from_range_t, R&amp;amp;&amp;amp; rg,
+                   size_type n = 実装依存の既定値,
+                   const hasher&amp;amp; hf = hasher(),
+                   const key_equal&amp;amp; eql = key_equal(),
+                   const allocator_type&amp;amp; a = allocator_type());           // (16) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+unordered_multiset(std::from_range_t, R&amp;amp;&amp;amp; rg,
+                   size_type n,
+                   const allocator_type&amp;amp; a);                              // (17) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+unordered_multiset(std::from_range_t, R&amp;amp;&amp;amp; rg,
+                   size_type n,
+                   const hasher&amp;amp; hf,
+                   const allocator_type&amp;amp; a);                              // (18) C++23
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
+* from_range_t[link ../../ranges/from_range_t.md]
 
 ## 概要
 `unordered_multiset` オブジェクトを構築する
@@ -137,6 +156,12 @@ unordered_multiset(initializer_list&amp;lt;value_type&amp;gt; il,
 
 - (15) : (5) の形式を `unordered_multiset(il, n, hf, key_equal(), a)` として呼び出した場合と等価である。
 
+- (16) : バケット数最低 `n`、ハッシュ関数オブジェクト `hf`、キー比較用関数オブジェクト `eql`、アロケータオブジェクト `a` で `unordered_multiset` が構築された後、Range `rg` の要素が挿入される。
+
+- (17) : (16) の形式を `unordered_multiset(from_range, std::forward&amp;lt;R&amp;gt;(rg), n, hasher(), key_equal(), a)` として呼び出した場合と等価である。
+
+- (18) : (16) の形式を `unordered_multiset(from_range, std::forward&amp;lt;R&amp;gt;(rg), n, hf, key_equal(), a)` として呼び出した場合と等価である。
+
 
 ## 事後条件
 以下では構築されたオブジェクトを `u` とする。
@@ -195,6 +220,7 @@ unordered_multiset(initializer_list&amp;lt;value_type&amp;gt; il,
 - (13) : (3) の形式を `unordered_multiset(f, l, n, hf, key_equal(), a)` として呼び出した場合と等価。
 - (14) : (5) の形式を `unordered_multiset(il, n, hasher(), key_equal(), a)` として呼び出した場合と等価。
 - (15) : (5) の形式を `unordered_multiset(il, n, hf, key_equal(), a)` として呼び出した場合と等価。
+- (16), (17), (18) : 平均的には O(n)、ここで、n は [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)`。最悪のケースでは O(n&amp;lt;sup&amp;gt;2&amp;lt;/sup&amp;gt;)
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koile</name>
        <email>zbdk@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/op_constructor.html"/>
      <id>4a43d0094cbd08ecc3dfdf9cfa8ecf288ad24ce3:reference/unordered_set/unordered_set/op_constructor.md</id>
      <updated>2024-07-28T23:00:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/op_constructor.md b/reference/unordered_set/unordered_set/op_constructor.md
index 83ceb4e1e..e55faf15e 100644
--- a/reference/unordered_set/unordered_set/op_constructor.md
+++ b/reference/unordered_set/unordered_set/op_constructor.md
@@ -69,8 +69,27 @@ unordered_set(initializer_list&amp;lt;value_type&amp;gt; il,
               size_type n,
               const hasher&amp;amp; hf, 
               const allocator_type&amp;amp; a);                             // (15) C++14
+
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+unordered_set(std::from_range_t, R&amp;amp;&amp;amp; rg,
+              size_type n = 実装依存の既定値,
+              const hasher&amp;amp; hf = hasher(),
+              const key_equal&amp;amp; eql = key_equal(),
+              const allocator_type&amp;amp; a = allocator_type());          // (16) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+unordered_set(std::from_range_t, R&amp;amp;&amp;amp; rg,
+              size_type n,
+              const allocator_type&amp;amp; a);                             // (17) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+unordered_set(std::from_range_t, R&amp;amp;&amp;amp; rg,
+              size_type n,
+              const hasher&amp;amp; hf,
+              const allocator_type&amp;amp; a);                             // (18) C++23
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
+* from_range_t[link ../../ranges/from_range_t.md]
 
 ## 概要
 `unordered_set` オブジェクトを構築する
@@ -137,6 +156,12 @@ unordered_set(initializer_list&amp;lt;value_type&amp;gt; il,
 
 - (15) : (5) の形式を `unordered_set(il, n, hf, key_equal(), a)` として呼び出した場合と等価である。
 
+- (16) : バケット数最低 `n`、ハッシュ関数オブジェクト `hf`、キー比較用関数オブジェクト `eql`、アロケータオブジェクト `a` で `unordered_set` が構築された後、Range `rg` の要素が挿入される。
+
+- (17) : (16) の形式を `unordered_set(from_range, std::forward&amp;lt;R&amp;gt;(rg), n, hasher(), key_equal(), a)` として呼び出した場合と等価である。
+
+- (18) : (16) の形式を `unordered_set(from_range, std::forward&amp;lt;R&amp;gt;(rg), n, hf, key_equal(), a)` として呼び出した場合と等価である。
+
 
 ## 事後条件
 以下では構築されたオブジェクトを `u` とする。
@@ -195,6 +220,7 @@ unordered_set(initializer_list&amp;lt;value_type&amp;gt; il,
 - (13) : (3) の形式を `unordered_set(f, l, n, hf, key_equal(), a)` として呼び出した場合と等価。
 - (14) : (5) の形式を `unordered_set(il, n, hasher(), key_equal(), a)` として呼び出した場合と等価。
 - (15) : (5) の形式を `unordered_set(il, n, hf, key_equal(), a)` として呼び出した場合と等価。
+- (16), (17), (18) : 平均的には O(n)、ここで、n は [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)`。最悪のケースでは O(n&amp;lt;sup&amp;gt;2&amp;lt;/sup&amp;gt;)
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koile</name>
        <email>zbdk@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/op_constructor.html"/>
      <id>4a43d0094cbd08ecc3dfdf9cfa8ecf288ad24ce3:reference/vector/vector/op_constructor.md</id>
      <updated>2024-07-28T23:00:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/op_constructor.md b/reference/vector/vector/op_constructor.md
index 6c76bec67..0e73477f4 100644
--- a/reference/vector/vector/op_constructor.md
+++ b/reference/vector/vector/op_constructor.md
@@ -56,8 +56,13 @@ vector(initializer_list&amp;lt;T&amp;gt; il,
        const Allocator&amp;amp; a = Allocator());            // (10) C++11
 constexpr vector(initializer_list&amp;lt;T&amp;gt; il,
                  const Allocator&amp;amp; a = Allocator());  // (10) C++20
+
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+constexpr vector(std::from_range_t, R&amp;amp;&amp;amp; rg,
+                 const Allocator&amp;amp; a = Allocator());  // (11) C++23
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
+* from_range_t[link ../../ranges/from_range_t.md]
 
 ## 概要
 `vector`オブジェクトを次に示す通りの要素で初期化する。
@@ -79,6 +84,7 @@ constexpr vector(initializer_list&amp;lt;T&amp;gt; il,
 - (8) : アロケータを別で受け取り、`vector` オブジェクトをコピー構築する。
 - (9) : アロケータを別で受け取り、`vector` オブジェクトをムーブ構築する。
 - (10) : 初期化子リストを受け取るコンストラクタ。`vector(il.`[`begin`](/reference/initializer_list/initializer_list/begin.md)`(), li.`[`end`](/reference/initializer_list/initializer_list/end.md)`(), a)` と等価。
+- (11) : Rangeコンストラクタ。アロケータ `a` を使用して、Range `rg` の要素から `vector` オブジェクトを構築する。
 
 
 ## 計算量
@@ -90,6 +96,7 @@ constexpr vector(initializer_list&amp;lt;T&amp;gt; il,
 - (8) : `x.`[`size`](size.md)`()` に対して線形時間
 - (9) : 定数時間。ただし、`a == x.`[`get_allocator`](get_allocator.md)`()` でなければ `x.`[`size`](size.md)`()` に対して線形時間。
 - (10) : `il.`[`size`](/reference/initializer_list/initializer_list/size.md)`()` に対して線形時間
+- (11) : [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)` に対して線形時間。`R` のモデルが [`ranges::forward_range`](../../ranges/forward_range.md) でも [`ranges::sized_range`](../../ranges/sized_range.md) でもなければ、あらかじめ要素数が分からないため、再確保のコストが(対数オーダで)別途発生する。
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koile</name>
        <email>zbdk@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mdspan -- mdspan: layout_{left,right}_padded::mapping概要</title>
      <link href="https://cpprefjp.github.io/reference/mdspan.html"/>
      <id>01cb1074891be1c83b96d153521f35666abc548c:reference/mdspan.md</id>
      <updated>2024-07-28T22:32:33+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;mdspan&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;mdspan&amp;gt;&lt;/code&gt;ヘッダでは、任意のメモリブロックに対して多次元配列のようにアクセスする機能を定義する。&lt;/p&gt;
&lt;h2&gt;多次元配列サイズ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/extents.html&#34;&gt;extents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列のサイズを表す値 (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/extents.html&#34;&gt;dextents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全次元が動的な多次元配列のサイズを表す値 (alias template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/extents.html&#34;&gt;dims&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全次元が動的な多次元配列のサイズを表す値 (alias template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;レイアウトマッピング&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/layout_left.html&#34;&gt;layout_left&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;列優先(Fortran/Matlabスタイル)レイアウトマッピングポリシー (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/layout_right.html&#34;&gt;layout_right&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行優先(C/C++スタイル)レイアウトマッピングポリシー (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/layout_stride.html&#34;&gt;layout_stride&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストライド幅指定レイアウトマッピングポリシー (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/layout_left_padded.html&#34;&gt;layout_left_padded&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;パディングあり列優先レイアウトマッピングポリシー (class templte)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/layout_right_padded.html&#34;&gt;layout_right_padded&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;パディングあり行優先レイアウトマッピングポリシー (class templte)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;要素アクセサ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/default_accessor.html&#34;&gt;default_accessor&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デフォルト要素アクセサ (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;多次元配列ビュー&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/mdspan.html&#34;&gt;mdspan&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列ビュー (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;多次元配列部分ビュー&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/strided_slice.html&#34;&gt;strided_slice&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定次元のストライド指定要素取り出しを指示する集成体クラステンプレート (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/full_extent_t.html&#34;&gt;full_extent_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定次元の全要素取り出しを指示するタグ型 (class)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/full_extent_t.html&#34;&gt;full_extent&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定次元の全要素取り出しを指示するタグ値 (variable)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/submdspan_mapping_result.html&#34;&gt;submdspan_mapping_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列部分ビューのレイアウトマッピング情報 (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/submdspan_extents.html&#34;&gt;submdspan_extents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列部分ビューの多次元配列サイズを計算する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/submdspan.html&#34;&gt;submdspan&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列部分ビューを取得する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++23&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20 &lt;code&gt;&lt;a href=&#34;span.html&#34;&gt;&amp;lt;span&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++26 &lt;code&gt;&lt;a href=&#34;linalg.html&#34;&gt;&amp;lt;linalg&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html&#34; target=&#34;_blank&#34;&gt;P0009R18 MDSPAN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2630r4.html&#34; target=&#34;_blank&#34;&gt;P2630R4 Submdspan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf&#34; target=&#34;_blank&#34;&gt;P2642R6 Padded mdspan layouts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>LayoutMapping -- mdspan: layout_{left,right}_padded::mapping概要</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/LayoutMapping.html"/>
      <id>01cb1074891be1c83b96d153521f35666abc548c:reference/mdspan/LayoutMapping.md</id>
      <updated>2024-07-28T22:32:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/LayoutMapping.md b/reference/mdspan/LayoutMapping.md
index fbc2c425f..832809d48 100644
--- a/reference/mdspan/LayoutMapping.md
+++ b/reference/mdspan/LayoutMapping.md
@@ -93,8 +93,8 @@ LayoutMappingを満たす型`M`は
 - [`layout_left::mapping&amp;lt;E&amp;gt;`](layout_left/mapping.md)
 - [`layout_right::mapping&amp;lt;E&amp;gt;`](layout_right/mapping.md)
 - [`layout_stride::mapping&amp;lt;E&amp;gt;`](layout_stride/mapping.md)
-- [`layout_left_padded&amp;lt;PV&amp;gt;::mapping&amp;lt;E&amp;gt;`](layout_left_padded/mapping.md.nolink)
-- [`layout_right_padded&amp;lt;PV&amp;gt;::mapping&amp;lt;E&amp;gt;`](layout_right_padded/mapping.md.nolink)
+- [`layout_left_padded&amp;lt;S&amp;gt;::mapping&amp;lt;E&amp;gt;`](layout_left_padded/mapping.md)
+- [`layout_right_padded&amp;lt;S&amp;gt;::mapping&amp;lt;E&amp;gt;`](layout_right_padded/mapping.md)
 - [`layout_blas_packed&amp;lt;T,SO&amp;gt;::mapping&amp;lt;E&amp;gt;`](/reference/linalg/layout_blas_packed/mapping.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>LayoutMappingPolicy -- mdspan: layout_{left,right}_padded::mapping概要</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/LayoutMappingPolicy.html"/>
      <id>01cb1074891be1c83b96d153521f35666abc548c:reference/mdspan/LayoutMappingPolicy.md</id>
      <updated>2024-07-28T22:32:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/LayoutMappingPolicy.md b/reference/mdspan/LayoutMappingPolicy.md
index 52161f276..30044509a 100644
--- a/reference/mdspan/LayoutMappingPolicy.md
+++ b/reference/mdspan/LayoutMappingPolicy.md
@@ -40,8 +40,8 @@ LayoutMappingPolicyを満たす型`MP`は
 - [`layout_left`](layout_left.md)
 - [`layout_right`](layout_right.md)
 - [`layout_stride`](layout_stride.md)
-- [`layout_left_padded&amp;lt;PV&amp;gt;`](layout_left_padded.md)
-- [`layout_right_padded&amp;lt;PV&amp;gt;`](layout_right_padded.md)
+- [`layout_left_padded&amp;lt;S&amp;gt;`](layout_left_padded.md)
+- [`layout_right_padded&amp;lt;S&amp;gt;`](layout_right_padded.md)
 - [`linalg::layout_blas_packed&amp;lt;T,SO&amp;gt;`](/reference/linalg/layout_blas_packed.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is-layout-left-padded-mapping-of -- mdspan: layout_{left,right}_padded::mapping概要</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/is-layout-left-padded-mapping-of.html"/>
      <id>01cb1074891be1c83b96d153521f35666abc548c:reference/mdspan/is-layout-left-padded-mapping-of.md</id>
      <updated>2024-07-28T22:32:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/is-layout-left-padded-mapping-of.md b/reference/mdspan/is-layout-left-padded-mapping-of.md
new file mode 100644
index 000000000..e3b3bca45
--- /dev/null
+++ b/reference/mdspan/is-layout-left-padded-mapping-of.md
@@ -0,0 +1,25 @@
+# is-layout-left-padded-mapping-of
+* mdspan[meta header]
+* variable[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class Mapping&amp;gt;
+constexpr bool is-layout-left-padded-mapping-of = see below;  // exposition only
+```
+* see below[italic]
+
+
+## 概要
+`is-layout-left-padded-mapping-of`は、[`layout_left_padded&amp;lt;S&amp;gt;::mapping`](layout_left_padded/mapping.md)を判定する説明専用変数テンプレートである。
+
+`size_t`型の任意の値`S`として`Mapping`が[`layout_left_padded&amp;lt;S&amp;gt;::mapping`](layout_left_padded/mapping.md)の特殊化であるときに限り、`is-layout-left-padded-mapping-of&amp;lt;Mapping&amp;gt;`は`true`となる。
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is-layout-right-padded-mapping-of -- mdspan: layout_{left,right}_padded::mapping概要</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/is-layout-right-padded-mapping-of.html"/>
      <id>01cb1074891be1c83b96d153521f35666abc548c:reference/mdspan/is-layout-right-padded-mapping-of.md</id>
      <updated>2024-07-28T22:32:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/is-layout-right-padded-mapping-of.md b/reference/mdspan/is-layout-right-padded-mapping-of.md
new file mode 100644
index 000000000..587e8d5cf
--- /dev/null
+++ b/reference/mdspan/is-layout-right-padded-mapping-of.md
@@ -0,0 +1,25 @@
+# is-layout-right-padded-mapping-of
+* mdspan[meta header]
+* variable[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class Mapping&amp;gt;
+constexpr bool is-layout-right-padded-mapping-of = see below;  // exposition only
+```
+* see below[italic]
+
+
+## 概要
+`is-layout-right-padded-mapping-of`は、[`layout_right_padded&amp;lt;S&amp;gt;::mapping`](layout_right_padded/mapping.md)を判定する説明専用変数テンプレートである。
+
+`size_t`型の任意の値`S`として`Mapping`が[`layout_right_padded&amp;lt;S&amp;gt;::mapping`](layout_right_padded/mapping.md)の特殊化であるときに限り、`is-layout-right-padded-mapping-of&amp;lt;Mapping&amp;gt;`は`true`となる。
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- mdspan: layout_{left,right}_padded::mapping概要</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping/op_constructor.html"/>
      <id>01cb1074891be1c83b96d153521f35666abc548c:reference/mdspan/layout_left/mapping/op_constructor.md</id>
      <updated>2024-07-28T22:32:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping/op_constructor.md b/reference/mdspan/layout_left/mapping/op_constructor.md
index 199c1994f..e76ad02e4 100644
--- a/reference/mdspan/layout_left/mapping/op_constructor.md
+++ b/reference/mdspan/layout_left/mapping/op_constructor.md
@@ -20,6 +20,10 @@ template&amp;lt;class OtherExtents&amp;gt;
 constexpr explicit(!is_convertible_v&amp;lt;OtherExtents, extents_type&amp;gt;)
   mapping(const layout_right::mapping&amp;lt;OtherExtents&amp;gt;&amp;amp; other) noexcept;  // (5)
 
+template&amp;lt;class LayoutLeftPaddedMapping&amp;gt;
+constexpr explicit(!is_convertible_v&amp;lt;typename LayoutLeftPaddedMapping::extents_type, extents_type&amp;gt;)
+  mapping(const LayoutLeftPaddedMapping&amp;amp; other) noexcept;  // (7) C++26
+
 template&amp;lt;class OtherExtents&amp;gt;
 constexpr explicit(extents_type::rank() &amp;gt; 0)
   mapping(const layout_stride::mapping&amp;lt;OtherExtents&amp;gt;&amp;amp; other) noexcept;  // (6)
@@ -27,6 +31,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 * is_convertible_v[link /reference/type_traits/is_convertible.md]
 * rank()[link ../../extents/rank.md]
 * layout_right::mapping[link ../../layout_right/mapping.md]
+* LayoutLeftPaddedMapping[link ../../layout_left_padded/mapping.md]
 * layout_stride::mapping[link ../../layout_stride/mapping.md]
 
 ## 概要
@@ -36,6 +41,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 - (4) : 他`layout_left::mapping`からの変換コンストラクタ
 - (5) : [`layout_right::mapping`](../../layout_right/mapping.md)からの変換コンストラクタ
 - (6) : [`layout_stride::mapping`](../../layout_stride/mapping.md)からの変換コンストラクタ
+- (7) : [`layout_left_padded&amp;lt;S&amp;gt;::mapping`](../../layout_left_padded/mapping.md)からの変換コンストラクタ
 
 
 ## テンプレートパラメータ制約
@@ -44,6 +50,17 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
     - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;lt;= 1`、かつ
     - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, OtherExtents&amp;gt;`が`true`であること。
 - (6) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, OtherExtents&amp;gt;`が`true`であること。
+- (7) :
+    - [`is-layout-left-padded-mapping-of`](../../is-layout-left-padded-mapping-of.md)`&amp;lt;LayoutLeftPaddedMapping&amp;gt;`が`true`、かつ
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, typename LayoutLeftPaddedMapping::extents_type&amp;gt;`が`true`であること。
+
+
+## 適格要件
+- (7) : 以下を満たすとき、`extents_type::`[`static_extent`](../../extents/static_extent.md)`(0)`が`LayoutLeftPaddedMapping::padding_stride`の倍数であること。
+    - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 1`、かつ
+    - `extents_type::`[`static_extent`](../../extents/static_extent.md)`(0)`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくなく、かつ
+    - `LayoutLeftPaddedMapping::extents_type::`[`static_extent`](../../extents/static_extent.md)`(0)`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくなく、かつ
+    - `LayoutLeftPaddedMapping::padding_stride`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくないこと。
 
 
 ## 事前条件
@@ -53,11 +70,14 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 - (6) :
     - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 0`のとき、`other`における全次元のストライド幅が[`layout_left::mapping`相当の制約](stride.md)をもつこと。
     - `other.`[`required_span_size()`](../../layout_stride/mapping/required_span_size.md)を、`index_type`型で表現できること。
+- (7) :
+    - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 1`のとき、`other.stride(1) == other.extents(0)`
+    - `other.`[`required_span_size()`](../../layout_left_padded/mapping/required_span_size.md.nolink)を、`index_type`型で表現できること。
 
 
 ## 効果
 - (3) : `e`を用いて`extents_`を直接非リスト初期化する。
-- (4), (5), (6) : `other.extents()`を用いて`extents_`を直接非リスト初期化する。
+- (4), (5), (6), (7) : `other.extents()`を用いて`extents_`を直接非リスト初期化する。
 
 
 ## 例外
@@ -67,6 +87,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 ## explicitになる条件
 - (4), (5) : `!`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;OtherExtents, extents_type&amp;gt;`
 - (6) : [`extents_type::rank()`](../../extents/rank.md) `&amp;gt; 0`
+- (7) : `!`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;typename LayoutLeftPaddedMapping::extents_type, extents_type&amp;gt;`
 
 
 ## 例
@@ -143,7 +164,9 @@ int main()
 ## 関連項目
 - [`layout_right::mapping`](../../layout_right/mapping.md)
 - [`layout_stride::mapping`](../../layout_stride/mapping.md)
+- [`layout_left_padded::mapping`](../../layout_left_padded/mapping.md)
 
 
 ## 参照
 - [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_left_padded -- mdspan: layout_{left,right}_padded::mapping概要</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded.html"/>
      <id>01cb1074891be1c83b96d153521f35666abc548c:reference/mdspan/layout_left_padded.md</id>
      <updated>2024-07-28T22:32:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded.md b/reference/mdspan/layout_left_padded.md
index 32d916a80..4fc89ce69 100644
--- a/reference/mdspan/layout_left_padded.md
+++ b/reference/mdspan/layout_left_padded.md
@@ -15,7 +15,7 @@ namespace std {
 ```
 * dynamic_extent[link /reference/span/dynamic_extent.md]
 * Extents[link extents.md]
-* mapping[link layout_left_padded/mapping.md.nolink]
+* mapping[link layout_left_padded/mapping.md]
 
 ## 概要
 `layout_left_padded`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、パディングあり列優先(column major)[レイアウトマッピング](LayoutMapping.md)を表現するポリシークラスである。
@@ -29,7 +29,7 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`mapping`](layout_left_padded/mapping.md.nolink) | レイアウトマッピング | C++26 |
+| [`mapping`](layout_left_padded/mapping.md) | レイアウトマッピング | C++26 |
 
 
 ## 例
@@ -83,4 +83,4 @@ int main()
 
 
 ## 参照
-- [P2642R5 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2642r5.html)
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mapping -- mdspan: layout_{left,right}_padded::mapping概要</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded/mapping.html"/>
      <id>01cb1074891be1c83b96d153521f35666abc548c:reference/mdspan/layout_left_padded/mapping.md</id>
      <updated>2024-07-28T22:32:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded/mapping.md b/reference/mdspan/layout_left_padded/mapping.md
new file mode 100644
index 000000000..b561c74a8
--- /dev/null
+++ b/reference/mdspan/layout_left_padded/mapping.md
@@ -0,0 +1,127 @@
+# mapping
+* mdspan[meta header]
+* class template[meta id-type]
+* std[meta namespace]
+* layout_left_padded[meta class]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;size_t PaddingValue&amp;gt;
+  template&amp;lt;class Extents&amp;gt;
+  class layout_left_padded&amp;lt;PaddingValue&amp;gt;::mapping;
+}
+```
+* layout_left_padded[link ../layout_left_padded.md]
+* Extents[link ../extents.md]
+
+## 概要
+`layout_left_padded&amp;lt;S&amp;gt;::mapping&amp;lt;E&amp;gt;`は、[`extents`](../extents.md)型の多次元配列サイズ`E`をパラメータとして、パディングあり列優先(column major)[レイアウトマッピング](../LayoutMapping.md)を表現するクラスである。
+
+`layout_left_padded&amp;lt;S&amp;gt;::mapping&amp;lt;E&amp;gt;`は[トリビアルコピー可能](/reference/type_traits/is_trivially_copyable.md)であり、[`regular`](/reference/concepts/regular.md)のモデルである。
+
+### 説明専用メンバ変数
+`layout_left_padded&amp;lt;S&amp;gt;::mapping`クラステンプレートは、下記の説明専用メンバ変数を保持する。
+
+- `stride-1` : `index_type`型の値`static-padding-stride`
+- `extents_` : `extents_type`型の[多次元配列サイズ情報](../extents.md)
+
+また下記の説明専用静的メンバ変数を保持する。
+
+- `rank_` : `size_t`型の定数`extents_type::`[`rank()`](../extents/rank.md)
+- `first-static-extent` : `size_t`型の定数`extents_type::`[`static_extent`](../extents/static_extent.md)`(0)`
+- `static-padding-stride` : `size_t`型の下記定数
+    - `rank_`が`0`または`1`のとき、値`0`
+    - `padding_value`または`first-static-extent`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しいとき、`dynamic_extent`
+    - そうでなければ、`LEAST-MULTIPLE-AT-LEAST(padding_value, first-static-extent)`
+
+
+## 適格要件
+- `Extents`は[`extents`](../extents.md)の特殊化であること。
+- `rank_dynamic() == 0`が`true`のとき、多次元インデクス空間`Extents()`のサイズが`index_type`型で表現できること。
+- 値`padding_value`が`index_type`型で表現できること。
+- 以下を満たすとき、`LEAST-MULTIPLE-AT-LEAST(padding_value, first-static-extent)`が、`size_t`型および`index_type`型で表現できること。
+    - `rank_ &amp;gt; 1`、かつ
+    - `padding_value`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくなく、かつ
+    - `first-static-extent`が`dynamic_extent`と等しくないとき。
+- 以下を満たすとき、半開区間`[1, rank_)`の全ての値`k`に対して`LEAST-MULTIPLE-AT-LEAST(padding_value, ext.static_extent(0))`と全ての`ext.static_extent(k)`値を乗じた結果が、`size_t`型および`index_type`型で表現できること。
+    - `rank_ &amp;gt; 1`、かつ
+    - `padding_value`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくなく、かつ
+    - 半開区間`[0, extents_type::`[`rank()`](../extents/rank.md)`)`の全ての値`k`に対して`extents_type::`[`static_extent`](../extents/static_extent.md)`(k)`が`dynamic_extent`と等しくないとき。
+
+
+## メンバ関数
+### 構築・破棄
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`(constructor)`](mapping/op_constructor.md.nolink) | コンストラクタ | C++26 |
+| `(destructor)` | デストラクタ | C++26 |
+| `operator=`    | コピー代入演算子 | C++26 |
+
+### 観測
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `extents` | 多次元配列のサイズ`extents_`を取得する | C++26 |
+| [`strides`](mapping/strides.md.nolink) | ストライド幅配列を取得する | C++26 |
+| [`required_span_size`](mapping/required_span_size.md.nolink) | 要素アクセス範囲を取得する | C++26 |
+| [`operator()`](mapping/op_call.md.nolink) | 多次元配列インデクスから要素位置へ変換する | C++26 |
+| [`is_exhaustive`](mapping/is_exhaustive.md.nolink) | [Exhaustive特性](../LayoutMapping.md)を取得する | C++26 |
+| [`stride`](mapping/stride.md.nolink) | 指定次元のストライド幅を取得する | C++26 |
+
+
+## 静的メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `is_always_unique`  | `true`を返す | C++26 |
+| [`is_always_exhaustive`](mapping/is_always_exhaustive.md.nolink) | 型の[Exhaustive特性](../LayoutMapping.md)を取得する | C++26 |
+| `is_always_strided` | `true`を返す | C++26 |
+| `is_unique`  | `true`を返す | C++26 |
+| `is_strided` | `true`を返す | C++26 |
+
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `extents_type` | [`Extents`](../extents.md) | C++26 |
+| `index_type` | [`Extents::index_type`](../extents.md) | C++26 |
+| `size_type` | [`Extents::size_type`](../extents.md) | C++26 |
+| `rank_type` | [`Extents::rank_type`](../extents.md) | C++26 |
+| `layout_type` | [`layout_left_padded`](../layout_left_padded.md)`&amp;lt;PaddingValue&amp;gt;` | C++26 |
+
+
+## 非メンバ（*Hidden friends*）関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`submdspan_mapping`](mapping/submdspan_mapping.md.nolink) | [`submdspan`](../submdspan.md)サポート | C++26 |
+
+### 比較演算子
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`operator==`](mapping/op_equal.md.nolink) | 等値比較 | C++26 |
+| [`operator!=`](mapping/op_equal.md.nolink) | 非等値比較 (`==`により使用可能) | C++26 |
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`mdspan`](../mdspan.md)
+- [`submdspan`](../submdspan.md)
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_right_padded -- mdspan: layout_{left,right}_padded::mapping概要</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded.html"/>
      <id>01cb1074891be1c83b96d153521f35666abc548c:reference/mdspan/layout_right_padded.md</id>
      <updated>2024-07-28T22:32:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded.md b/reference/mdspan/layout_right_padded.md
index d411b07d5..18185c070 100644
--- a/reference/mdspan/layout_right_padded.md
+++ b/reference/mdspan/layout_right_padded.md
@@ -15,7 +15,7 @@ namespace std {
 ```
 * dynamic_extent[link /reference/span/dynamic_extent.md]
 * Extents[link extents.md]
-* mapping[link layout_right_padded/mapping.md.nolink]
+* mapping[link layout_right_padded/mapping.md]
 
 ## 概要
 `layout_right_padded`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、パディングあり行優先(row major)[レイアウトマッピング](LayoutMapping.md)を表現するポリシークラスである。
@@ -29,7 +29,7 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`mapping`](layout_right_padded/mapping.md.nolink) | レイアウトマッピング | C++26 |
+| [`mapping`](layout_right_padded/mapping.md) | レイアウトマッピング | C++26 |
 
 
 ## 例
@@ -81,4 +81,4 @@ int main()
 
 
 ## 参照
-- [P2642R5 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2642r5.html)
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mapping -- mdspan: layout_{left,right}_padded::mapping概要</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded/mapping.html"/>
      <id>01cb1074891be1c83b96d153521f35666abc548c:reference/mdspan/layout_right_padded/mapping.md</id>
      <updated>2024-07-28T22:32:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded/mapping.md b/reference/mdspan/layout_right_padded/mapping.md
new file mode 100644
index 000000000..1e8839d62
--- /dev/null
+++ b/reference/mdspan/layout_right_padded/mapping.md
@@ -0,0 +1,127 @@
+# mapping
+* mdspan[meta header]
+* class template[meta id-type]
+* std[meta namespace]
+* layout_right_padded[meta class]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;size_t PaddingValue&amp;gt;
+  template&amp;lt;class Extents&amp;gt;
+  class layout_right_padded&amp;lt;PaddingValue&amp;gt;::mapping;
+}
+```
+* layout_right_padded[link ../layout_right_padded.md]
+* Extents[link ../extents.md]
+
+## 概要
+`layout_right_padded&amp;lt;S&amp;gt;::mapping&amp;lt;E&amp;gt;`は、[`extents`](../extents.md)型の多次元配列サイズ`E`をパラメータとして、パディングあり行優先(row major)[レイアウトマッピング](../LayoutMapping.md)を表現するクラスである。
+
+`layout_right_padded&amp;lt;S&amp;gt;::mapping&amp;lt;E&amp;gt;`は[トリビアルコピー可能](/reference/type_traits/is_trivially_copyable.md)であり、[`regular`](/reference/concepts/regular.md)のモデルである。
+
+### 説明専用メンバ変数
+`layout_right_padded&amp;lt;S&amp;gt;::mapping`クラステンプレートは、下記の説明専用メンバ変数を保持する。
+
+- `stride-rm2` : `index_type`型の値`static-padding-stride`
+- `extents_` : `extents_type`型の[多次元配列サイズ情報](../extents.md)
+
+また下記の説明専用静的メンバ変数を保持する。
+
+- `rank_` : `size_t`型の定数`extents_type::`[`rank()`](../extents/rank.md)
+- `last-static-extent` : `size_t`型の定数`extents_type::`[`static_extent`](../extents/static_extent.md)`(rank_ - 1)`
+- `static-padding-stride` : `size_t`型の下記定数
+    - `rank_`が`0`または`1`のとき、値`0`
+    - `padding_value`または`last-static-extent`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しいとき、`dynamic_extent`
+    - そうでなければ、`LEAST-MULTIPLE-AT-LEAST(padding_value, last-static-extent)`
+
+
+## 適格要件
+- `Extents`は[`extents`](../extents.md)の特殊化であること。
+- `rank_dynamic() == 0`が`true`のとき、多次元インデクス空間`Extents()`のサイズが`index_type`型で表現できること。
+- 値`padding_value`が`index_type`型で表現できること。
+- 以下を満たすとき、`LEAST-MULTIPLE-AT-LEAST(padding_value, last-static-extent)`が、`size_t`型および`index_type`型で表現できること。
+    - `rank_ &amp;gt; 1`、かつ
+    - `padding_value`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくなく、かつ
+    - `last-static-extent`が`dynamic_extent`と等しくないとき。
+- 以下を満たすとき、半開区間`[1, rank_ - 1)`の全ての値`k`に対して`LEAST-MULTIPLE-AT-LEAST(padding_value, ext.static_extent(rank_ - 1))`と全ての`ext.static_extent(k)`値を乗じた結果が、`size_t`型および`index_type`型で表現できること。
+    - `rank_ &amp;gt; 1`、かつ
+    - `padding_value`が[`dynamic_extent`](/reference/span/dynamic_extent.md)と等しくなく、かつ
+    - 半開区間`[0, rank_)`の全ての値`k`に対して`extents_type::`[`static_extent`](../extents/static_extent.md)`(k)`が`dynamic_extent`と等しくないとき。
+
+
+## メンバ関数
+### 構築・破棄
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`(constructor)`](mapping/op_constructor.md.nolink) | コンストラクタ | C++26 |
+| `(destructor)` | デストラクタ | C++26 |
+| `operator=`    | コピー代入演算子 | C++26 |
+
+### 観測
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `extents` | 多次元配列のサイズ`extents_`を取得する | C++26 |
+| [`strides`](mapping/strides.md.nolink) | ストライド幅配列を取得する | C++26 |
+| [`required_span_size`](mapping/required_span_size.md.nolink) | 要素アクセス範囲を取得する | C++26 |
+| [`operator()`](mapping/op_call.md.nolink) | 多次元配列インデクスから要素位置へ変換する | C++26 |
+| [`is_exhaustive`](mapping/is_exhaustive.md.nolink) | [Exhaustive特性](../LayoutMapping.md)を取得する | C++26 |
+| [`stride`](mapping/stride.md.nolink) | 指定次元のストライド幅を取得する | C++26 |
+
+
+## 静的メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `is_always_unique`  | `true`を返す | C++26 |
+| [`is_always_exhaustive`](mapping/is_always_exhaustive.md.nolink) | 型の[Exhaustive特性](../LayoutMapping.md)を取得する | C++26 |
+| `is_always_strided` | `true`を返す | C++26 |
+| `is_unique`  | `true`を返す | C++26 |
+| `is_strided` | `true`を返す | C++26 |
+
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `extents_type` | [`Extents`](../extents.md) | C++26 |
+| `index_type` | [`Extents::index_type`](../extents.md) | C++26 |
+| `size_type` | [`Extents::size_type`](../extents.md) | C++26 |
+| `rank_type` | [`Extents::rank_type`](../extents.md) | C++26 |
+| `layout_type` | [`layout_right_padded`](../layout_right_padded.md)`&amp;lt;PaddingValue&amp;gt;` | C++26 |
+
+
+## 非メンバ（*Hidden friends*）関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`submdspan_mapping`](mapping/submdspan_mapping.md.nolink) | [`submdspan`](../submdspan.md)サポート | C++26 |
+
+### 比較演算子
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`operator==`](mapping/op_equal.md.nolink) | 等値比較 | C++26 |
+| [`operator!=`](mapping/op_equal.md.nolink) | 非等値比較 (`==`により使用可能) | C++26 |
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`mdspan`](../mdspan.md)
+- [`submdspan`](../submdspan.md)
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- mdspan: layout_{left,right}_padded::mapping概要</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride/mapping/op_constructor.html"/>
      <id>01cb1074891be1c83b96d153521f35666abc548c:reference/mdspan/layout_stride/mapping/op_constructor.md</id>
      <updated>2024-07-28T22:32:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride/mapping/op_constructor.md b/reference/mdspan/layout_stride/mapping/op_constructor.md
index 78c153acb..0265e9235 100644
--- a/reference/mdspan/layout_stride/mapping/op_constructor.md
+++ b/reference/mdspan/layout_stride/mapping/op_constructor.md
@@ -78,16 +78,27 @@ constexpr bool is-mapping-of = // exposition only
 
 - (5) : `explicit`指定子の式は以下と等価
 ```cpp
+// C++23
 !(is_convertible_v&amp;lt;typename StridedLayoutMapping::extents_type, extents_type&amp;gt; &amp;amp;&amp;amp;
   (is-mapping-of&amp;lt;layout_left, StridedLayoutMapping&amp;gt; ||
    is-mapping-of&amp;lt;layout_right, StridedLayoutMapping&amp;gt; ||
    is-mapping-of&amp;lt;layout_stride, StridedLayoutMapping&amp;gt;))
+
+// C++26
+!(is_convertible_v&amp;lt;typename StridedLayoutMapping::extents_type, extents_type&amp;gt; &amp;amp;&amp;amp;
+  (is-mapping-of&amp;lt;layout_left, StridedLayoutMapping&amp;gt; ||
+   is-mapping-of&amp;lt;layout_right, StridedLayoutMapping&amp;gt; ||
+   is-layout-left-padded-mapping-of&amp;lt;StridedLayoutMapping&amp;gt; ||
+   is-layout-right-padded-mapping-of&amp;lt;StridedLayoutMapping&amp;gt; ||
+   is-mapping-of&amp;lt;layout_stride, StridedLayoutMapping&amp;gt;))
 ```
 * is_convertible_v[link /reference/type_traits/is_convertible.md]
 * is-mapping-of[italic]
 * layout_left[link ../../layout_left.md]
 * layout_right[link ../../layout_right.md]
 * layout_stride[link ../../layout_stride.md]
+* is-layout-left-padded-mapping-of[link ../../is-layout-left-padded-mapping-of.md]
+* is-layout-right-padded-mapping-of[link ../../is-layout-right-padded-mapping-of.md]
 
 
 ## 例
@@ -158,9 +169,11 @@ int main()
 
 ## 関連項目
 - [`layout_left::mapping`](../../layout_left/mapping.md)
-- [`layout_stride::mapping`](../../layout_stride/mapping.md)
+- [`layout_right::mapping`](../../layout_right/mapping.md)
 
 
 ## 参照
 - [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
 - [P2763R1 `layout_stride` static extents default constructor fix](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2763r1.html)
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
+    - C++26でオーバーロード(5)のexplicit条件に[`layout_left_padded`](../../layout_left_padded.md), [`layout_right_padded`](../../layout_right_padded.md)対応が追加された。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- add range constructor to stack and queue (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/queue/priority_queue/op_constructor.html"/>
      <id>14cc1a065c03a11cdaed748034843e3a66e125bd:reference/queue/priority_queue/op_constructor.md</id>
      <updated>2024-07-28T17:03:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/queue/priority_queue/op_constructor.md b/reference/queue/priority_queue/op_constructor.md
index 1c92229a6..ef3ff162e 100644
--- a/reference/queue/priority_queue/op_constructor.md
+++ b/reference/queue/priority_queue/op_constructor.md
@@ -79,7 +79,21 @@ priority_queue(InputIterator first, InputIterator last,
                const Compare&amp;amp; x,
                Container&amp;amp;&amp;amp; other,
                const Alloc&amp;amp; alloc);                       // (17) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+priority_queue(from_range_t, R&amp;amp;&amp;amp; rg,
+               const Compare&amp;amp; x = Compare());             // (18) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R, class Alloc&amp;gt;
+priority_queue(from_range_t, R&amp;amp;&amp;amp; rg,
+               const Compare&amp;amp; x,
+               const Alloc&amp;amp; alloc);                       // (19) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R, class Alloc&amp;gt;
+priority_queue(from_range_t, R&amp;amp;&amp;amp; rg,
+               const Alloc&amp;amp; alloc);                       // (20) C++23
 ```
+* from_range_t[link ../../ranges/from_range_t.md]
 
 ## 概要
 - (1) : デフォルトコンストラクタ
@@ -98,6 +112,7 @@ priority_queue(InputIterator first, InputIterator last,
 - (13) : アロケータ指定でコピー構築する
 - (14) : アロケータ指定でムーブ構築する
 - (15), (16), (17) : アロケータ指定でイテレータ範囲から優先順位付きキューを構築する
+- (18), (19), (20) : Rangeから優先順位付きキューを構築する
 
 
 ## 要件
@@ -166,7 +181,6 @@ priority_queue(InputIterator first, InputIterator last,
     2. メンバ変数`c`のメモリアロケートに`alloc`を使用する。
     3. `c.insert(c.end(), first, last)`を呼び出す。
     4. [`make_heap`](/reference/algorithm/make_heap.md)`(c.begin(), c.end(), comp)`を呼び出す。
-    5. メンバ変数`c`のメモリアロケートに`alloc`を使用する。
 - (16) :
     1. メンバ変数`comp`を`x`でコピー構築する。
     2. メンバ変数`c`を`other`でコピー構築する。
@@ -179,6 +193,20 @@ priority_queue(InputIterator first, InputIterator last,
     3. メンバ変数`c`のメモリアロケートに`alloc`を使用する。
     4. `c.insert(c.end(), first, last)`を呼び出す。
     5. [`make_heap`](/reference/algorithm/make_heap.md)`(c.begin(), c.end(), comp)`を呼び出す。
+- (18) :
+    1. メンバ変数`comp`を`x`でコピー構築する。
+    2. `c.insert(c.end(), ranges::begin(rg), ranges::end(rg))`を呼び出す。
+    3. [`make_heap`](/reference/algorithm/make_heap.md)`(c.begin(), c.end(), comp)`を呼び出す。
+- (19) :
+    1. メンバ変数`comp`を`x`でコピー構築する。
+    2. メンバ変数`c`のメモリアロケートに`alloc`を使用する。
+    3. `c.insert(c.end(), ranges::begin(rg), ranges::end(rg))`を呼び出す。
+    4. [`make_heap`](/reference/algorithm/make_heap.md)`(c.begin(), c.end(), comp)`を呼び出す。
+- (20) :
+    1. メンバ変数`comp`を値初期化する。
+    2. メンバ変数`c`のメモリアロケートに`alloc`を使用する。
+    3. `c.insert(c.end(), ranges::begin(rg), ranges::end(rg))`を呼び出す。
+    4. [`make_heap`](/reference/algorithm/make_heap.md)`(c.begin(), c.end(), comp)`を呼び出す。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- add range constructor to stack and queue (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/queue/queue/op_constructor.html"/>
      <id>14cc1a065c03a11cdaed748034843e3a66e125bd:reference/queue/queue/op_constructor.md</id>
      <updated>2024-07-28T17:03:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/queue/queue/op_constructor.md b/reference/queue/queue/op_constructor.md
index a5f74dd5e..0dfe840c6 100644
--- a/reference/queue/queue/op_constructor.md
+++ b/reference/queue/queue/op_constructor.md
@@ -33,7 +33,13 @@ queue(queue&amp;amp;&amp;amp; que, const Alloc&amp;amp; alloc);            // (9) C++11
 
 template&amp;lt;class InputIterator, class Alloc&amp;gt;
 queue(InputIterator first, InputIterator last, const Alloc&amp;amp;);  // (10) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+queue(from_range_t, R&amp;amp;&amp;amp; rg);                       // (11) C++23
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R, class Alloc&amp;gt;
+queue(from_range_t, R&amp;amp;&amp;amp; rg, const Alloc&amp;amp; alloc);   // (12) C++23
 ```
+* from_range_t[link ../../ranges/from_range_t.md]
 
 ## 概要
 `queue` コンテナアダプタのオブジェクトを構築する。 
@@ -46,6 +52,7 @@ queue(InputIterator first, InputIterator last, const Alloc&amp;amp;);  // (10) C++23
 `alloc`: 内部のコンテナで使用するアロケータオブジェクト
 `que`: コピー・ムーブ元の`queue`オブジェクト
 `first`, `last`: 初期化に用いるイテレータのペア
+`rg`: 初期化に用いるRange
 
 ## 計算量
 線形 O(n)。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- add range constructor to stack and queue (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/stack/stack/op_constructor.html"/>
      <id>14cc1a065c03a11cdaed748034843e3a66e125bd:reference/stack/stack/op_constructor.md</id>
      <updated>2024-07-28T17:03:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stack/stack/op_constructor.md b/reference/stack/stack/op_constructor.md
index c5da7122c..14b0c8d2f 100644
--- a/reference/stack/stack/op_constructor.md
+++ b/reference/stack/stack/op_constructor.md
@@ -17,7 +17,7 @@ stack() : stack(Container()) {}    // (1)
 explicit stack(const Container&amp;amp;);  // (2)
 explicit stack(Container&amp;amp;&amp;amp;);       // (3)
 
-template&amp;lt;class InputIterator&amp;gt;
+template &amp;lt;class InputIterator&amp;gt;
 stack(InputIterator first, InputIterator last);       // (4) C++23
 
 template &amp;lt;class Allocator&amp;gt;
@@ -35,9 +35,16 @@ stack(const stack&amp;amp; st, const Allocator&amp;amp; alloc);       // (8) C++11
 template &amp;lt;class Allocator&amp;gt;
 stack(stack&amp;amp;&amp;amp; st, const Allocator&amp;amp; alloc);            // (9) C++11
 
-template&amp;lt;class InputIterator, class Alloc&amp;gt;
+template &amp;lt;class InputIterator, class Alloc&amp;gt;
 stack(InputIterator first, InputIterator last, const Alloc&amp;amp;);  // (10) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+stack(from_range_t, R&amp;amp;&amp;amp; rg);                          // (11) C++23
+
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R, class Alloc&amp;gt;
+stack(from_range_t, R&amp;amp;&amp;amp; rg, const Alloc&amp;amp; alloc);      // (12) C++23
 ```
+* from_range_t[link ../../ranges/from_range_t.md]
 
 ## 概要
 - (1) : デフォルトコンストラクタ。
@@ -50,6 +57,8 @@ stack(InputIterator first, InputIterator last, const Alloc&amp;amp;);  // (10) C++23
 - (8) : アロケータを受け取るコピーコンストラクタ。
 - (9) : アロケータを受け取るムーブコンストラクタ。
 - (10) : 元となるコンテナのイテレータペアとアロケータを受け取るコンストラクタ。
+- (11) : 元となるRangeを受け取るコンストラクタ。
+- (12) : 元となるRangeとアロケータを受け取るコンストラクタ。
 
 
 ## 効果
@@ -62,6 +71,8 @@ stack(InputIterator first, InputIterator last, const Alloc&amp;amp;);  // (10) C++23
 - (8) : メンバ変数`c`を`Container(st.c, alloc)`で初期化する。
 - (9) : メンバ変数`c`を`Container(`[`std::move`](/reference/utility/move.md)`(st.c), alloc)`で初期化する。
 - (10) : メンバ変数`c`を3つの引数`first`, `last`, `alloc`で初期化する。
+- (11) : メンバ変数`c`を`Container(from_range, rg)`で初期化する。
+- (12) : メンバ変数`c`を`Container(from_range, rg, alloc)`で初期化する。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-12-10T08:28:33.554879</updated>
  <id>22cdff1a-6dac-49d8-afeb-6fbcaa346ee0</id>

  
    <entry>
      <title>ADLを無効にする関数定義 -- ADLを無効にする関数定義 : サンプルコード修正</title>
      <link href="https://cpprefjp.github.io/article/lib/disable_adl_function.html"/>
      <id>2f2b4d57f179ae58ae22286c6354fe8feafdafc6:article/lib/disable_adl_function.md</id>
      <updated>2020-12-10T17:24:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/article/lib/disable_adl_function.md b/article/lib/disable_adl_function.md
index bfdaad89e..50eb7e9cb 100644
--- a/article/lib/disable_adl_function.md
+++ b/article/lib/disable_adl_function.md
@@ -38,7 +38,7 @@ namespace my_range {
       return n;
     }
   };
-  const inline distance_t distance{};
+  constexpr inline distance_t distance{};
 }
 
 int main() {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>map -- map : less&lt;&gt;を使用したサンプルコードを追加</title>
      <link href="https://cpprefjp.github.io/reference/map/map.html"/>
      <id>16adb1f86bc509d0a9f0ea9bc885f8259a4c5f49:reference/map/map.md</id>
      <updated>2020-12-10T17:08:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map.md b/reference/map/map.md
index b29699e32..ea97bc459 100644
--- a/reference/map/map.md
+++ b/reference/map/map.md
@@ -375,6 +375,47 @@ int main() {
 ```
 
 
+### 文字列比較のコストを下げる比較関数オブジェクトの指定方法 (C++14)
+```cpp
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;map&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main() {
+  // 比較関数オブジェクトをデフォルトのstd::less&amp;lt;Key&amp;gt;の代わりに
+  // std::less&amp;lt;&amp;gt; (std::less&amp;lt;void&amp;gt;と同じ) と指定する。
+  // 検索関係のインタフェースに文字列リテラルを指定した際に
+  // キーのためのstd::stringオブジェクトが作られない。
+  // 余分なメモリ確保を回避できる
+  std::map&amp;lt;std::string, int, std::less&amp;lt;&amp;gt;&amp;gt; m = {
+    {&amp;#34;Alice&amp;#34;, 3},
+    {&amp;#34;Bob&amp;#34;, 1},
+    {&amp;#34;Carol&amp;#34;, 4}
+  };
+
+  // 文字列リテラル&amp;#34;Bob&amp;#34;からstd::stringオブジェクトが作られない
+  m[&amp;#34;Bob&amp;#34;] = 2;
+
+  // 文字列リテラル&amp;#34;Carol&amp;#34;からstd::stringオブジェクトが作られない
+  auto it = m.find(&amp;#34;Carol&amp;#34;);
+  if (it != m.end()) {
+    std::cout &amp;lt;&amp;lt; it-&amp;gt;second &amp;lt;&amp;lt; std::endl;
+  }
+  else {
+    std::cout &amp;lt;&amp;lt; &amp;#34;not found&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::less[link /reference/functional/less.md]
+* m.find[link map/find.md]
+* m.end()[link map/end.md]
+
+#### 出力
+```
+4
+```
+
+
 ## 関連項目
 - [C++20 一貫比較](/lang/cpp20/consistent_comparison.md)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>barrier -- latch / barrierのサンプルコード : コード修飾を追加</title>
      <link href="https://cpprefjp.github.io/reference/barrier/barrier.html"/>
      <id>e9faa97a03255c75aa834074f96c1eb043c8b522:reference/barrier/barrier.md</id>
      <updated>2020-12-10T16:50:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/barrier/barrier.md b/reference/barrier/barrier.md
index 17eaedc95..ace394ada 100644
--- a/reference/barrier/barrier.md
+++ b/reference/barrier/barrier.md
@@ -131,6 +131,7 @@ int main()
 ```
 * std::barrier[color ff0000]
 * arrive_and_wait()[link barrier/arrive_and_wait.md]
+* detach()[link /reference/thread/thread/detach.md]
 
 ### 出力例
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>arrive -- latch / barrierのサンプルコード : コード修飾を追加</title>
      <link href="https://cpprefjp.github.io/reference/barrier/barrier/arrive.html"/>
      <id>e9faa97a03255c75aa834074f96c1eb043c8b522:reference/barrier/barrier/arrive.md</id>
      <updated>2020-12-10T16:50:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/barrier/barrier/arrive.md b/reference/barrier/barrier/arrive.md
index c31a99f17..e4288e446 100644
--- a/reference/barrier/barrier/arrive.md
+++ b/reference/barrier/barrier/arrive.md
@@ -93,6 +93,7 @@ int main()
 * wait[link wait.md]
 * arrive_and_wait[link arrive_and_wait.md]
 * std::move[link /reference/utility/move.md]
+* std::this_thread::sleep_for[link /reference/thread/this_thread/sleep_for.md]
 
 ### 出力例
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>arrive_and_drop -- latch / barrierのサンプルコード : コード修飾を追加</title>
      <link href="https://cpprefjp.github.io/reference/barrier/barrier/arrive_and_drop.html"/>
      <id>e9faa97a03255c75aa834074f96c1eb043c8b522:reference/barrier/barrier/arrive_and_drop.md</id>
      <updated>2020-12-10T16:50:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/barrier/barrier/arrive_and_drop.md b/reference/barrier/barrier/arrive_and_drop.md
index e765080a8..ceebaa67f 100644
--- a/reference/barrier/barrier/arrive_and_drop.md
+++ b/reference/barrier/barrier/arrive_and_drop.md
@@ -94,6 +94,7 @@ int main()
 ```
 * arrive_and_drop[color ff0000]
 * arrive_and_wait[link arrive_and_wait.md]
+* std::this_thread::sleep_for[link /reference/thread/this_thread/sleep_for.md]
 
 ### 出力例
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>arrive_and_wait -- latch / barrierのサンプルコード : コード修飾を追加</title>
      <link href="https://cpprefjp.github.io/reference/barrier/barrier/arrive_and_wait.html"/>
      <id>e9faa97a03255c75aa834074f96c1eb043c8b522:reference/barrier/barrier/arrive_and_wait.md</id>
      <updated>2020-12-10T16:50:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/barrier/barrier/arrive_and_wait.md b/reference/barrier/barrier/arrive_and_wait.md
index da0306bde..17627b672 100644
--- a/reference/barrier/barrier/arrive_and_wait.md
+++ b/reference/barrier/barrier/arrive_and_wait.md
@@ -75,6 +75,7 @@ int main()
 }
 ```
 * arrive_and_wait[color ff0000]
+* std::this_thread::sleep_for[link /reference/thread/this_thread/sleep_for.md]
 
 ### 出力例
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wait -- latch / barrierのサンプルコード : コード修飾を追加</title>
      <link href="https://cpprefjp.github.io/reference/barrier/barrier/wait.html"/>
      <id>e9faa97a03255c75aa834074f96c1eb043c8b522:reference/barrier/barrier/wait.md</id>
      <updated>2020-12-10T16:50:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/barrier/barrier/wait.md b/reference/barrier/barrier/wait.md
index 8971a60dd..4085eebca 100644
--- a/reference/barrier/barrier/wait.md
+++ b/reference/barrier/barrier/wait.md
@@ -86,6 +86,7 @@ int main()
 * arrive[link wait.md]
 * arrive_and_wait[link arrive_and_wait.md]
 * std::move[link /reference/utility/move.md]
+* std::this_thread::sleep_for[link /reference/thread/this_thread/sleep_for.md]
 
 ### 出力例
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>latch -- latch / barrierのサンプルコード : コード修飾を追加</title>
      <link href="https://cpprefjp.github.io/reference/latch/latch.html"/>
      <id>e9faa97a03255c75aa834074f96c1eb043c8b522:reference/latch/latch.md</id>
      <updated>2020-12-10T16:50:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/latch/latch.md b/reference/latch/latch.md
index 837911df7..f611011ec 100644
--- a/reference/latch/latch.md
+++ b/reference/latch/latch.md
@@ -108,6 +108,7 @@ int main()
 * count_down()[link latch/count_down.md]
 * wait()[link latch/wait.md]
 * arrive_and_wait()[link latch/arrive_and_wait.md]
+* detach()[link /reference/thread/thread/detach.md]
 
 ### 出力例
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>counted_iterator -- counted_iterator::operator-追加#712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator.html"/>
      <id>e50d50ac27a06f9fbc92d15b4cdc6730031128aa:reference/iterator/counted_iterator.md</id>
      <updated>2020-12-10T16:29:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator.md b/reference/iterator/counted_iterator.md
index c8f0c8668..1c905b30d 100644
--- a/reference/iterator/counted_iterator.md
+++ b/reference/iterator/counted_iterator.md
@@ -55,7 +55,7 @@ namespace std {
 | [`operator--`](counted_iterator/op_decrement.md)      | イテレータをインクリメントする | C++20 |
 | [`operator+`](counted_iterator/op_plus.md)      | イテレータを進める | C++20 |
 | [`operator+=`](counted_iterator/op_plus_assign.md.nolink)    | イテレータ自身を進める | C++20 |
-| [`operator-`](counted_iterator/op_minus.md.nolink)     | イテレータを逆に進める | C++20 |
+| [`operator-`](counted_iterator/op_unary_minus.md)     | イテレータを逆に進める | C++20 |
 | [`operator-=`](counted_iterator/op_minus_assign.md.nolink)   | イテレータ自身を逆に進める | C++20 |
 | [`operator[]`](counted_iterator/op_at.md)             | 任意の位置にランダムアクセスする | C++20 |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator- -- counted_iterator::operator-追加#712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator/op_unary_minus.html"/>
      <id>e50d50ac27a06f9fbc92d15b4cdc6730031128aa:reference/iterator/counted_iterator/op_unary_minus.md</id>
      <updated>2020-12-10T16:29:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator/op_unary_minus.md b/reference/iterator/counted_iterator/op_unary_minus.md
new file mode 100644
index 000000000..20f47a036
--- /dev/null
+++ b/reference/iterator/counted_iterator/op_unary_minus.md
@@ -0,0 +1,67 @@
+# operator-
+* iterator[meta header]
+* std[meta namespace]
+* counted_iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr counted_iterator operator-(iter_difference_t&amp;lt;I&amp;gt; n) const
+  requires random_access_iterator&amp;lt;I&amp;gt;;
+```
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
+* random_access_iterator[link /reference/iterator/random_access_iterator.md]
+
+
+## 概要
+
+イテレータを`n`回逆に進める。
+
+## 効果
+
+現在のイテレータとカウントの値をそれぞれ、`current`、`length`メンバ変数に保持するとして、以下と等価。
+
+```cpp
+return counted_iterator(current - n, length + n);
+```
+
+## 戻り値
+
+現在位置から`n`戻したイテレータのコピーを返す。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::counted_iterator ci{std::ranges::begin(vec), 5};
+  ci += 3;
+  
+  auto ci2 = ci - 2;
+
+  std::cout &amp;lt;&amp;lt; *ci2 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* ranges::begin[link /reference/ranges/begin.md.nolink]
+
+### 出力
+```
+2
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 9
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>counted_iterator -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator.html"/>
      <id>8f1491735bb471ba9a38383d3c765de4c3b78a7d:reference/iterator/counted_iterator.md</id>
      <updated>2020-12-10T12:26:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator.md b/reference/iterator/counted_iterator.md
index 4a99d1fd8..c8f0c8668 100644
--- a/reference/iterator/counted_iterator.md
+++ b/reference/iterator/counted_iterator.md
@@ -64,7 +64,7 @@ namespace std {
 | 名前 | 説明 | 対応バージョン |
 |------------------------------------------------------|-------------|-------|
 | [`operator-`](counted_iterator/op_minus.md.nolink)          | 2つの`counted_iterator`の差を求める | C++20 |
-| [`operator+`](counted_iterator/op_plus.md.nolink)           | イテレータを進める | C++20 |
+| [`operator+`](counted_iterator/op_plus.md)           | イテレータを進める | C++20 |
 | [`operator==`](counted_iterator/op_equal.md.nolink)         | 等値比較 | C++20 |
 | `operator!=`     | 非等値比較 (`==`により使用可能) | C++20 |
 | [`operator&amp;lt;=&amp;gt;`](counted_iterator/op_compare_3way.md.nolink)          | 三方比較 | C++20 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
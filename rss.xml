<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++ Reference Site</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2015-01-14T14:08:08.289886</updated>
  <id>cc878885-a16b-46b3-bef2-bf45473d21fe</id>

  
    <entry>
      <title>tuple (C++11) -- tuple : 演算子のページファイル名にop_が付いていなかったので修正。</title>
      <link href="http://cpprefjp.github.io/reference/tuple/tuple.html"/>
      <id>78675f9f42cf090c13b87367f40c33c41f36c12a:reference/tuple/tuple.md</id>
      <updated>2015-01-14 14:07:40 +0900</updated>
      
        <content type="html">&lt;h1&gt;tuple (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;tuple&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;概要&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;tuple&lt;/code&gt;型は、複数の型の値を保持する「タプル」を表現するためのクラスである。
&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;型は2つの型の値を保持する「組」を表現することができるが、&lt;code&gt;tuple&lt;/code&gt;ではN個の型の値を扱うことができる。&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/tuple.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/op_assign.html&#34;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;異なる&lt;code&gt;tuple&lt;/code&gt;オブジェクトと値を入れ替える&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ関数&lt;/h2&gt;
&lt;h3&gt;タプル生成関数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/ignore.html&#34;&gt;&lt;code&gt;ignore&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;無視する要素のプレースホルダー(constant variable)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/make_tuple.html&#34;&gt;&lt;code&gt;make_tuple&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;引数のコピーからタプルを生成する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/forward_as_tuple.html&#34;&gt;&lt;code&gt;forward_as_tuple&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;引数の完全な型からタプルを生成する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/tie.html&#34;&gt;&lt;code&gt;tie&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;引数への参照からタプルを生成する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/tuple_cat.html&#34;&gt;&lt;code&gt;tuple_cat&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複数のタプルから1つのタプルを生成する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;要素アクセス&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/get.html&#34;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;tuple&lt;/code&gt;の&lt;code&gt;i&lt;/code&gt;番目の要素を参照する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;関係演算子&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値判定を行う&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/op_not_equal.html&#34;&gt;&lt;code&gt;operator!=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非等値判定を行う&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/op_less.html&#34;&gt;&lt;code&gt;operator&amp;lt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺よりも小さいか判定を行う&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/op_less_equal.html&#34;&gt;&lt;code&gt;operator&amp;lt;=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺以下か判定を行う&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/op_greater.html&#34;&gt;&lt;code&gt;operator&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より大きいか判定を行う&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/op_greater_equal.html&#34;&gt;&lt;code&gt;operator&amp;gt;=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺以上か判定を行う&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;例&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;tuple&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3要素のタプルを作る&lt;/span&gt;
  &lt;span style=&#34;color:#ff0000&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tuple&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; t &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_tuple(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 0番目の要素を参照&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;get&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;0&amp;gt;&lt;/span&gt;(t);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 2番目の要素を参照&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;get&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;2&amp;gt;&lt;/span&gt;(t);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
hello
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.3.4, 4.4.4, 4.5.2, 4.6.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 9.0, 10.0&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal.md -- tuple : 演算子のページファイル名にop_が付いていなかったので修正。</title>
      <link href="http://cpprefjp.github.io/reference/tuple/tuple/equal.html"/>
      <id>78675f9f42cf090c13b87367f40c33c41f36c12a:reference/tuple/tuple/equal.md</id>
      <updated>2015-01-14 14:07:40 +0900</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple/equal.md b/reference/tuple/tuple/equal.md
deleted file mode 100644
index a266e6c..0000000
--- a/reference/tuple/tuple/equal.md
+++ /dev/null
@@ -1,68 +0,0 @@
-#operator== (C++11)
-```cpp
-namespace std {
-  template&amp;lt;class... TTypes, class... UTypes&amp;gt;
-  bool operator==(const tuple&amp;lt;TTypes...&amp;gt;&amp;amp; t, const tuple&amp;lt;UTypes...&amp;gt;&amp;amp; u);
-}
-```
-* tuple[link ../tuple.md]
-
-##概要
-2つの[`tuple`](../tuple.md)オブジェクトの等値比較を行う。
-
-
-##要件
-2つの[`tuple`](../tuple.md)オブジェクトの要素数が同じであること。 
-[`tuple`](../tuple.md)の要素`std::`[`get`](./get.md)`&amp;lt;i&amp;gt;(t)`と`std::`[`get`](./get.md)`&amp;lt;i&amp;gt;(u)`において、すべての要素の比較 `std::`[`get`](./get.md)`&amp;lt;i&amp;gt;(t) == std::`[`get`](./get.md)`&amp;lt;i&amp;gt;(u)` の比較結果が`bool`に変換可能な型であること。
-
-##効果
-0番目の要素から順に等値比較を行う。
-
-
-##戻り値
-[`tuple`](../tuple.md)の全ての要素を`std::`[`get`](./get.md)`&amp;lt;i&amp;gt;(t) ==std::`[`get`](./get.md)`&amp;lt;i&amp;gt;(u)` した結果が`true`である場合`true`を返し、そうでなければ`false`を返す。
-
-
-##例
-```cpp
-#include &amp;lt;iostream&amp;gt;
-#include &amp;lt;tuple&amp;gt;
-#include &amp;lt;string&amp;gt;
-
-int main()
-{
-  std::tuple&amp;lt;int, char, const char*&amp;gt; t1(1, &amp;#39;a&amp;#39;, &amp;#34;hello&amp;#34;);
-  std::tuple&amp;lt;int, char, std::string&amp;gt; t2(1, &amp;#39;a&amp;#39;, &amp;#34;hello&amp;#34;);
-  std::tuple&amp;lt;int, char, std::string&amp;gt; t3(1, &amp;#39;a&amp;#39;, &amp;#34;hellot&amp;#34;);
-
-  std::cout &amp;lt;&amp;lt; std::boolalpha;
-  {
-    bool result = t1 == t2; // ※型は異なっていてもかまわない
-    std::cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
-  }
-  {
-    bool result = t1 == t3;
-    std::cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
-  }
-}
-```
-
-###出力
-```
-true
-false
-```
-
-##バージョン
-###言語
-- C++11
-
-###処理系
-- [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): 
-- [GCC, C++0x mode](/implementation.md#gcc): 4.6.1
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp) ??
-
-
-##参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>greater.md -- tuple : 演算子のページファイル名にop_が付いていなかったので修正。</title>
      <link href="http://cpprefjp.github.io/reference/tuple/tuple/greater.html"/>
      <id>78675f9f42cf090c13b87367f40c33c41f36c12a:reference/tuple/tuple/greater.md</id>
      <updated>2015-01-14 14:07:40 +0900</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple/greater.md b/reference/tuple/tuple/greater.md
deleted file mode 100644
index 6a3e8a2..0000000
--- a/reference/tuple/tuple/greater.md
+++ /dev/null
@@ -1,64 +0,0 @@
-#operator&amp;gt; (C++11)
-```cpp
-namespace std {
-  template&amp;lt;class... TTypes, class... UTypes&amp;gt;
-  bool operator&amp;gt;(const tuple&amp;lt;TTypes...&amp;gt;&amp;amp; t, const tuple&amp;lt;UTypes...&amp;gt;&amp;amp; u);
-}
-```
-
-##概要
-2つの`tuple`において、左辺が右辺より大きいかの判定を行う。
-
-
-##要件
-2つの`tuple`の要素数が同じであること。
-
-
-##戻り値
-`u &amp;lt; t`
-
-
-##例
-```cpp
-#include &amp;lt;iostream&amp;gt;
-#include &amp;lt;tuple&amp;gt;
-#include &amp;lt;string&amp;gt;
-
-int main()
-{
-  std::tuple&amp;lt;int, char, std::string&amp;gt; t1(1, &amp;#39;a&amp;#39;, &amp;#34;hello&amp;#34;);
-  std::tuple&amp;lt;int, char, std::string&amp;gt; t2(2, &amp;#39;b&amp;#39;, &amp;#34;world&amp;#34;);
-
-  std::cout &amp;lt;&amp;lt; std::boolalpha;
-  {
-    bool result = t1 &amp;gt; t2;
-    std::cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
-  }
-  {
-    bool result = t2 &amp;gt; t1;
-    std::cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
-  }
-}
-```
-
-###出力
-```
-false
-true
-```
-
-##バージョン
-###言語
-- C++11
-
-###処理系
-- [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): 
-- [GCC, C++0x mode](/implementation.md#gcc): 4.6.1
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp) ??
-
-
-##参照
-- [`operator&amp;lt;`](./less.md)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>greater_equal.md -- tuple : 演算子のページファイル名にop_が付いていなかったので修正。</title>
      <link href="http://cpprefjp.github.io/reference/tuple/tuple/greater_equal.html"/>
      <id>78675f9f42cf090c13b87367f40c33c41f36c12a:reference/tuple/tuple/greater_equal.md</id>
      <updated>2015-01-14 14:07:40 +0900</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple/greater_equal.md b/reference/tuple/tuple/greater_equal.md
deleted file mode 100644
index 8ae3b3a..0000000
--- a/reference/tuple/tuple/greater_equal.md
+++ /dev/null
@@ -1,70 +0,0 @@
-#operator&amp;gt;= (C++11)
-```cpp
-namespace std {
-  template&amp;lt;class... TTypes, class... UTypes&amp;gt;
-  bool operator&amp;gt;=(const tuple&amp;lt;TTypes...&amp;gt;&amp;amp; t, const tuple&amp;lt;UTypes...&amp;gt;&amp;amp; u);
-}
-```
-
-##概要
-2つの`tuple`において、左辺が右辺以上かの判定を行う。
-
-
-##要件
-2つの`tuple`の要素数が同じであること。
-
-
-##戻り値
-`!(t &amp;lt; u)`
-
-
-##例
-```cpp
-#include &amp;lt;iostream&amp;gt;
-#include &amp;lt;tuple&amp;gt;
-#include &amp;lt;string&amp;gt;
-
-int main()
-{
-  std::tuple&amp;lt;int, char, std::string&amp;gt; t1(1, &amp;#39;a&amp;#39;, &amp;#34;hello&amp;#34;);
-  std::tuple&amp;lt;int, char, std::string&amp;gt; t2(2, &amp;#39;b&amp;#39;, &amp;#34;world&amp;#34;);
-  std::tuple&amp;lt;int, char, std::string&amp;gt; t3(2, &amp;#39;b&amp;#39;, &amp;#34;world&amp;#34;);
-
-  std::cout &amp;lt;&amp;lt; std::boolalpha;
-  {
-    bool result = t1 &amp;gt;= t2;
-    std::cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
-  }
-  {
-    bool result = t2 &amp;gt;= t1;
-    std::cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
-  }
-  {
-    bool result = t2 &amp;gt;= t3;
-    std::cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
-  }
-}
-```
-
-###出力
-```
-false
-true
-true
-```
-
-##バージョン
-###言語
-- C++11
-
-###処理系
-- [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): 
-- [GCC, C++0x mode](/implementation.md#gcc): 4.6.1
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp) ??
-
-
-##参照
-- [`operator&amp;lt;`](./less.md)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>less.md -- tuple : 演算子のページファイル名にop_が付いていなかったので修正。</title>
      <link href="http://cpprefjp.github.io/reference/tuple/tuple/less.html"/>
      <id>78675f9f42cf090c13b87367f40c33c41f36c12a:reference/tuple/tuple/less.md</id>
      <updated>2015-01-14 14:07:40 +0900</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple/less.md b/reference/tuple/tuple/less.md
deleted file mode 100644
index e1b7c4c..0000000
--- a/reference/tuple/tuple/less.md
+++ /dev/null
@@ -1,65 +0,0 @@
-#operator&amp;lt; (C++11)
-```cpp
-namespace std {
-  template&amp;lt;class... TTypes, class... UTypes&amp;gt;
-  bool operator&amp;lt;(const tuple&amp;lt;TTypes...&amp;gt;&amp;amp; t, const tuple&amp;lt;UTypes...&amp;gt;&amp;amp; u);
-}
-```
-
-##概要
-2つの`tuple`において、左辺が右辺より小さいかの判定を行う。
-
-
-##要件
-2つの`tuple`の要素数が同じであること。 
-`tuple`の要素`std::`[`get`](./get.md)`&amp;lt;i&amp;gt;(t)`と`std::`[`get`](./get.md)`&amp;lt;i&amp;gt;(u)`において、すべての要素の比較 `std::`[`get`](./get.md)`&amp;lt;i&amp;gt;(t) &amp;lt; std::`[`get`](./get.md)`&amp;lt;i&amp;gt;(u)` の比較結果が`bool`に変換可能な型であること。
-
-
-##戻り値
-2つの`tuple`オブジェクト、`t`と`u`の辞書順比較を行った結果を返す。定義は以下のようになる：
-
-[`get`](./get.md)`&amp;lt;i&amp;gt;(t) &amp;lt; `[`get`](./get.md)`&amp;lt;i&amp;gt;(u) || !(`[`get`](./get.md)`&amp;lt;i&amp;gt;(u) &amp;lt; `[`get`](./get.md)`&amp;lt;i&amp;gt;(t)) &amp;amp;&amp;amp; `[`get`](./get.md)`&amp;lt;i+N...&amp;gt;(t) &amp;lt; `[`get`](./get.md)`&amp;lt;i+N...&amp;gt;(u) ...`
-
-
-##例
-```cpp
-#include &amp;lt;iostream&amp;gt;
-#include &amp;lt;tuple&amp;gt;
-#include &amp;lt;string&amp;gt;
-
-int main()
-{
-  std::tuple&amp;lt;int, char, std::string&amp;gt; t1(1, &amp;#39;a&amp;#39;, &amp;#34;hello&amp;#34;);
-  std::tuple&amp;lt;int, char, std::string&amp;gt; t2(2, &amp;#39;b&amp;#39;, &amp;#34;world&amp;#34;);
-
-  std::cout &amp;lt;&amp;lt; std::boolalpha;
-  {
-    bool result = t1 &amp;lt; t2;
-    std::cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
-  }
-  {
-    bool result = t2 &amp;lt; t1;
-    std::cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
-  }
-}
-```
-
-###出力
-```
-true
-false
-```
-
-##バージョン
-###言語
-- C++11
-
-###処理系
-- [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): 
-- [GCC, C++0x mode](/implementation.md#gcc): 4.6.1
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp) ??
-
-
-##参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>less_equal.md -- tuple : 演算子のページファイル名にop_が付いていなかったので修正。</title>
      <link href="http://cpprefjp.github.io/reference/tuple/tuple/less_equal.html"/>
      <id>78675f9f42cf090c13b87367f40c33c41f36c12a:reference/tuple/tuple/less_equal.md</id>
      <updated>2015-01-14 14:07:40 +0900</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple/less_equal.md b/reference/tuple/tuple/less_equal.md
deleted file mode 100644
index 2def336..0000000
--- a/reference/tuple/tuple/less_equal.md
+++ /dev/null
@@ -1,70 +0,0 @@
-#operator&amp;lt;= (C++11)
-```cpp
-namespace std {
-  template&amp;lt;class... TTypes, class... UTypes&amp;gt;
-  bool operator&amp;lt;=(const tuple&amp;lt;TTypes...&amp;gt;&amp;amp;, const tuple&amp;lt;UTypes...&amp;gt;&amp;amp;);
-}
-```
-
-##概要
-2つの`tuple`において、左辺が右辺以下かの判定を行う。
-
-
-##要件
-2つの`tuple`の要素数が同じであること。
-
-
-##戻り値
-`!(u &amp;lt; t)`
-
-
-##例
-```cpp
-#include &amp;lt;iostream&amp;gt;
-#include &amp;lt;tuple&amp;gt;
-#include &amp;lt;string&amp;gt;
-
-int main()
-{
-  std::tuple&amp;lt;int, char, std::string&amp;gt; t1(1, &amp;#39;a&amp;#39;, &amp;#34;hello&amp;#34;);
-  std::tuple&amp;lt;int, char, std::string&amp;gt; t2(2, &amp;#39;b&amp;#39;, &amp;#34;world&amp;#34;);
-  std::tuple&amp;lt;int, char, std::string&amp;gt; t3(2, &amp;#39;b&amp;#39;, &amp;#34;world&amp;#34;);
-
-  std::cout &amp;lt;&amp;lt; std::boolalpha;
-  {
-    bool result = t1 &amp;lt;= t2;
-    std::cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
-  }
-  {
-    bool result = t2 &amp;lt;= t1;
-    std::cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
-  }
-  {
-    bool result = t2 &amp;lt;= t3;
-    std::cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
-  }
-}
-```
-
-###出力
-```
-true
-false
-true
-```
-
-##バージョン
-###言語
-- C++11
-
-###処理系
-- [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): 
-- [GCC, C++0x mode](/implementation.md#gcc): 4.6.1
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp) ??
-
-
-##参照
-- [`operator&amp;lt;`](./less.md)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>not_equal.md -- tuple : 演算子のページファイル名にop_が付いていなかったので修正。</title>
      <link href="http://cpprefjp.github.io/reference/tuple/tuple/not_equal.html"/>
      <id>78675f9f42cf090c13b87367f40c33c41f36c12a:reference/tuple/tuple/not_equal.md</id>
      <updated>2015-01-14 14:07:40 +0900</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple/not_equal.md b/reference/tuple/tuple/not_equal.md
deleted file mode 100644
index f484ad2..0000000
--- a/reference/tuple/tuple/not_equal.md
+++ /dev/null
@@ -1,66 +0,0 @@
-#operator!= (C++11)
-```cpp
-namespace std {
-  template&amp;lt;class... TTypes, class... UTypes&amp;gt;
-  bool operator!=(const tuple&amp;lt;TTypes...&amp;gt;&amp;amp; t, const tuple&amp;lt;UTypes...&amp;gt;&amp;amp; u);
-}
-```
-* tuple[link ../tuple.md]
-
-##概要
-2つの`tuple`オブジェクトの非等値比較を行う。
-
-
-##要件
-2つの`tuple`オブジェクトの要素数が同じであること。
-
-
-##戻り値
-`!(t `[`==`](./equal.md)` u);`
-
-
-##例
-```cpp
-#include &amp;lt;iostream&amp;gt;
-#include &amp;lt;tuple&amp;gt;
-#include &amp;lt;string&amp;gt;
-
-int main()
-{
-  std::tuple&amp;lt;int, char, const char*&amp;gt; t1(1, &amp;#39;a&amp;#39;, &amp;#34;hello&amp;#34;);
-  std::tuple&amp;lt;int, char, std::string&amp;gt; t2(1, &amp;#39;a&amp;#39;, &amp;#34;hello&amp;#34;);
-  std::tuple&amp;lt;int, char, std::string&amp;gt; t3(1, &amp;#39;a&amp;#39;, &amp;#34;hellot&amp;#34;);
-
-  std::cout &amp;lt;&amp;lt; std::boolalpha;
-  {
-    bool result = t1 != t2;
-    std::cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
-  }
-  {
-    bool result = t1 != t3;
-    std::cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
-  }
-}
-```
-
-###出力
-```
-false
-true
-```
-
-##バージョン
-###言語
-- C++11
-
-###処理系
-- [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): ??
-- [GCC, C++0x mode](/implementation.md#gcc): 4.6.1
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp) ??
-
-
-##参照
-- [`operator==`](./equal.md)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== (C++11) -- tuple : 演算子のページファイル名にop_が付いていなかったので修正。</title>
      <link href="http://cpprefjp.github.io/reference/tuple/tuple/op_equal.html"/>
      <id>78675f9f42cf090c13b87367f40c33c41f36c12a:reference/tuple/tuple/op_equal.md</id>
      <updated>2015-01-14 14:07:40 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator== (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... TTypes, class... UTypes&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;TTypes...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; t, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;UTypes...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; u);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;2つの&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt;オブジェクトの等値比較を行う。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;2つの&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt;オブジェクトの要素数が同じであること。 
&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt;の要素&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/get.html&#34;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;i&amp;gt;(t)&lt;/code&gt;と&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/get.html&#34;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;i&amp;gt;(u)&lt;/code&gt;において、すべての要素の比較 &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/get.html&#34;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;i&amp;gt;(t) == std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/get.html&#34;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;i&amp;gt;(u)&lt;/code&gt; の比較結果が&lt;code&gt;bool&lt;/code&gt;に変換可能な型であること。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;0番目の要素から順に等値比較を行う。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt;の全ての要素を&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/get.html&#34;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;i&amp;gt;(t) ==std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/get.html&#34;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;i&amp;gt;(u)&lt;/code&gt; した結果が&lt;code&gt;true&lt;/code&gt;である場合&lt;code&gt;true&lt;/code&gt;を返し、そうでなければ&lt;code&gt;false&lt;/code&gt;を返す。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;tuple&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; t1(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; t2(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; t3(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hellot&#34;&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha;
  {
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; t1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; t2; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ※型は異なっていてもかまわない&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
  {
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; t1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; t3;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;true
false
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.6.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt; (C++11) -- tuple : 演算子のページファイル名にop_が付いていなかったので修正。</title>
      <link href="http://cpprefjp.github.io/reference/tuple/tuple/op_greater.html"/>
      <id>78675f9f42cf090c13b87367f40c33c41f36c12a:reference/tuple/tuple/op_greater.md</id>
      <updated>2015-01-14 14:07:40 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator&amp;gt; (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... TTypes, class... UTypes&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;TTypes...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; t, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;UTypes...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; u);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;2つの&lt;code&gt;tuple&lt;/code&gt;において、左辺が右辺より大きいかの判定を行う。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;2つの&lt;code&gt;tuple&lt;/code&gt;の要素数が同じであること。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;u &amp;lt; t&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;tuple&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; t1(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; t2(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;world&#34;&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha;
  {
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; t1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; t2;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
  {
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; t2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; t1;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;false
true
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.6.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/less.html&#34;&gt;&lt;code&gt;operator&amp;lt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= (C++11) -- tuple : 演算子のページファイル名にop_が付いていなかったので修正。</title>
      <link href="http://cpprefjp.github.io/reference/tuple/tuple/op_greater_equal.html"/>
      <id>78675f9f42cf090c13b87367f40c33c41f36c12a:reference/tuple/tuple/op_greater_equal.md</id>
      <updated>2015-01-14 14:07:40 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator&amp;gt;= (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... TTypes, class... UTypes&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;TTypes...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; t, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;UTypes...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; u);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;2つの&lt;code&gt;tuple&lt;/code&gt;において、左辺が右辺以上かの判定を行う。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;2つの&lt;code&gt;tuple&lt;/code&gt;の要素数が同じであること。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;!(t &amp;lt; u)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;tuple&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; t1(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; t2(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;world&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; t3(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;world&#34;&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha;
  {
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; t1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;=&lt;/span&gt; t2;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
  {
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; t2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;=&lt;/span&gt; t1;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
  {
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; t2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;=&lt;/span&gt; t3;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;false
true
true
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.6.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/less.html&#34;&gt;&lt;code&gt;operator&amp;lt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; (C++11) -- tuple : 演算子のページファイル名にop_が付いていなかったので修正。</title>
      <link href="http://cpprefjp.github.io/reference/tuple/tuple/op_less.html"/>
      <id>78675f9f42cf090c13b87367f40c33c41f36c12a:reference/tuple/tuple/op_less.md</id>
      <updated>2015-01-14 14:07:40 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator&amp;lt; (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... TTypes, class... UTypes&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;TTypes...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; t, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;UTypes...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; u);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;2つの&lt;code&gt;tuple&lt;/code&gt;において、左辺が右辺より小さいかの判定を行う。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;2つの&lt;code&gt;tuple&lt;/code&gt;の要素数が同じであること。 
&lt;code&gt;tuple&lt;/code&gt;の要素&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/get.html&#34;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;i&amp;gt;(t)&lt;/code&gt;と&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/get.html&#34;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;i&amp;gt;(u)&lt;/code&gt;において、すべての要素の比較 &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/get.html&#34;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;i&amp;gt;(t) &amp;lt; std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/get.html&#34;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;i&amp;gt;(u)&lt;/code&gt; の比較結果が&lt;code&gt;bool&lt;/code&gt;に変換可能な型であること。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;2つの&lt;code&gt;tuple&lt;/code&gt;オブジェクト、&lt;code&gt;t&lt;/code&gt;と&lt;code&gt;u&lt;/code&gt;の辞書順比較を行った結果を返す。定義は以下のようになる：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/get.html&#34;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;i&amp;gt;(t) &amp;lt;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/get.html&#34;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;i&amp;gt;(u) || !(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/get.html&#34;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;i&amp;gt;(u) &amp;lt;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/get.html&#34;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;i&amp;gt;(t)) &amp;amp;&amp;amp;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/get.html&#34;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;i+N...&amp;gt;(t) &amp;lt;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/get.html&#34;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;i+N...&amp;gt;(u) ...&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;tuple&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; t1(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; t2(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;world&#34;&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha;
  {
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; t1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; t2;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
  {
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; t2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; t1;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;true
false
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.6.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;= (C++11) -- tuple : 演算子のページファイル名にop_が付いていなかったので修正。</title>
      <link href="http://cpprefjp.github.io/reference/tuple/tuple/op_less_equal.html"/>
      <id>78675f9f42cf090c13b87367f40c33c41f36c12a:reference/tuple/tuple/op_less_equal.md</id>
      <updated>2015-01-14 14:07:40 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator&amp;lt;= (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... TTypes, class... UTypes&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;TTypes...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;UTypes...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;2つの&lt;code&gt;tuple&lt;/code&gt;において、左辺が右辺以下かの判定を行う。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;2つの&lt;code&gt;tuple&lt;/code&gt;の要素数が同じであること。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;!(u &amp;lt; t)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;tuple&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; t1(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; t2(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;world&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; t3(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;world&#34;&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha;
  {
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; t1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;=&lt;/span&gt; t2;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
  {
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; t2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;=&lt;/span&gt; t1;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
  {
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; t2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;=&lt;/span&gt; t3;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;true
false
true
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.6.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/less.html&#34;&gt;&lt;code&gt;operator&amp;lt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= (C++11) -- tuple : 演算子のページファイル名にop_が付いていなかったので修正。</title>
      <link href="http://cpprefjp.github.io/reference/tuple/tuple/op_not_equal.html"/>
      <id>78675f9f42cf090c13b87367f40c33c41f36c12a:reference/tuple/tuple/op_not_equal.md</id>
      <updated>2015-01-14 14:07:40 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator!= (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... TTypes, class... UTypes&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;TTypes...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; t, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;UTypes...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; u);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;2つの&lt;code&gt;tuple&lt;/code&gt;オブジェクトの非等値比較を行う。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;2つの&lt;code&gt;tuple&lt;/code&gt;オブジェクトの要素数が同じであること。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;!(t&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/equal.html&#34;&gt;&lt;code&gt;==&lt;/code&gt;&lt;/a&gt;&lt;code&gt;u);&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;tuple&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; t1(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; t2(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; t3(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hellot&#34;&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha;
  {
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; t1 &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; t2;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
  {
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; t1 &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; t3;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;false
true
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.6.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple/equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get (C++11) -- tupleのget : 参照ドキュメントを追加</title>
      <link href="http://cpprefjp.github.io/reference/tuple/tuple/get.html"/>
      <id>778e20948c754f66f1515bac18aea336a18f6c20:reference/tuple/tuple/get.md</id>
      <updated>2015-01-14 14:05:50 +0900</updated>
      
        <content type="html">&lt;h1&gt;get (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;size_t&lt;/a&gt; I, class... Types&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple_element.html&#34;&gt;tuple_element&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;I, &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Types...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;
    get(&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Types...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; t) noexcept;                      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++11&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;size_t&lt;/a&gt; I, class... Types&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  constexpr &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple_element.html&#34;&gt;tuple_element_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;I, &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Types...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt;
    get(&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Types...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;) noexcept;                        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++14&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;size_t&lt;/a&gt; I, class... types&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple_element.html&#34;&gt;tuple_element&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;I, &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Types...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    get(&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Types...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&amp;amp;&lt;/span&gt; t) noexcept;                     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++11&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;size_t&lt;/a&gt; I, class... Types&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  constexpr &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple_element.html&#34;&gt;tuple_element_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;I, &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Types...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&amp;amp;&lt;/span&gt;
    get(&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Types...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&amp;amp;&lt;/span&gt;) noexcept;                       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;size_t&lt;/a&gt; I, class... Types&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple_element.html&#34;&gt;tuple_element&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;I, &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Types...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;
    get(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Types...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; t) noexcept;                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++11&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;size_t&lt;/a&gt; I, class... Types&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  constexpr &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple_element.html&#34;&gt;tuple_element_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;I, &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Types...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt;
    get(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Types...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;) noexcept;                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++14&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;tuple&lt;/code&gt;オブジェクトから指定した位置の要素を取得する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;テンプレートパラメータ&lt;code&gt;I&lt;/code&gt;が&lt;code&gt;tuple&lt;/code&gt;の要素数よりも小さいこと。
この要件を満たさない場合はコンパイルエラーとなる。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;tuple&lt;/code&gt;オブジェクトの&lt;code&gt;I&lt;/code&gt;番目の要素への参照&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;tuple&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; t(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;0&amp;gt;&lt;/span&gt;(t);
  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;1&amp;gt;&lt;/span&gt;(t);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;2&amp;gt;&lt;/span&gt;(t);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
a
hello
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.6.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3471.html&#34; target=&#34;_blank&#34;&gt;N3471 Constexpr Library Additions: utilities, v3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3887.pdf&#34; target=&#34;_blank&#34;&gt;N3887 Consistent Metafunction Aliases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bind (C++11) -- functional/bind: 箇条書きの表示崩れを再修正</title>
      <link href="http://cpprefjp.github.io/reference/functional/bind.html"/>
      <id>60d138b30f12b76de0674d18335e546399c6dd33:reference/functional/bind.md</id>
      <updated>2015-01-14 12:53:35 +0900</updated>
      
        <content type="html">&lt;h1&gt;bind (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, class... BoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;i&gt;unspecified&lt;/i&gt; bind(F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f, BoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... bound_args);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;R&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, class... BoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;i&gt;unspecified&lt;/i&gt; bind(F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f, BoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... bound_args);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;概要&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/callable.html&#34;&gt;&lt;i&gt;Callable&lt;/i&gt;&lt;/a&gt; オブジェクトに対し、引数を部分的に束縛(bind)する。&lt;/p&gt;
&lt;h3&gt;引数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; -- 束縛先となる &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/callable.html&#34;&gt;&lt;i&gt;Callable&lt;/i&gt;&lt;/a&gt; オブジェクト&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bound_args&lt;/code&gt; -- 束縛対象の値やプレースホルダ(&lt;code&gt;_1&lt;/code&gt;, &lt;code&gt;_2&lt;/code&gt;, ...)、別の &lt;code&gt;bind()&lt;/code&gt; 呼び出し&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;戻り値&lt;/h3&gt;
&lt;p&gt;引数を部分束縛された &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/callable.html&#34;&gt;&lt;i&gt;Callable&lt;/i&gt;&lt;/a&gt; オブジェクト。このオブジェクトは、次のような関数オブジェクトとして扱うことができる：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;i&gt;bound_function_type &lt;/i&gt;{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt; result_type;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... UnBoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;i&gt;unspecified&lt;/i&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(UnBoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... unbound_args) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;型名 &lt;code&gt;result_type&lt;/code&gt; は、&lt;code&gt;bind()&lt;/code&gt; 呼び出し時のテンプレートパラメータ &lt;code&gt;R&lt;/code&gt; そのもの(明示的に指定した場合)か、&lt;code&gt;F&lt;/code&gt; の戻り値型(&lt;code&gt;F&lt;/code&gt; が関数へのポインタまたはメンバ関数へのポインタである場合)か、&lt;code&gt;F::result_type&lt;/code&gt; (&lt;code&gt;F&lt;/code&gt; が型名 &lt;code&gt;result_type&lt;/code&gt; の定義を持つ場合)である。いずれの条件も満たさない場合、&lt;code&gt;result_type&lt;/code&gt; は定義されない。
&lt;i&gt;&lt;code&gt;bound_function_type&lt;/code&gt;&lt;/i&gt;&lt;code&gt;::operator ()()&lt;/code&gt;を呼び出すと、&lt;code&gt;bound_args&lt;/code&gt; と &lt;code&gt;unbound_args&lt;/code&gt; が次のように使われ、最終的に &lt;code&gt;f&lt;/code&gt; の呼出しに到達する。(説明用に、 &lt;code&gt;BoundArgs&lt;/code&gt; のそれぞれの &lt;code&gt;decay&lt;/code&gt; された型を &lt;code&gt;TiD&lt;/code&gt; 、値を &lt;code&gt;ti&lt;/code&gt; 、&lt;code&gt;UnBoundArgs&lt;/code&gt; のそれぞれの値を &lt;code&gt;uj&lt;/code&gt; とおく)。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;型&lt;code&gt;Ti&lt;/code&gt; が &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/reference_wrapper.html&#34;&gt;&lt;code&gt;reference_wrapper&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;X&amp;gt;&lt;/code&gt; である場合、&lt;code&gt;ti.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/reference_wrapper/get.html&#34;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; が &lt;code&gt;ti&lt;/code&gt; の代わりに使用される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/is_bind_expression.html&#34;&gt;&lt;code&gt;is_bind_expression&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;TiD&amp;gt;::value&lt;/code&gt;が &lt;code&gt;true&lt;/code&gt; に評価される場合、&lt;code&gt;ti(unbound_args...)&lt;/code&gt; の結果が &lt;code&gt;ti&lt;/code&gt; の代わりに使用される(これは、ネストされた &lt;code&gt;bind()&lt;/code&gt; が一度の呼び出しで再帰的に全て評価されることを示す)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/is_placeholder.html&#34;&gt;&lt;code&gt;is_placeholder&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;TiD&amp;gt;::value&lt;/code&gt;が非ゼロに評価される場合、&lt;code&gt;uj&lt;/code&gt; (ただし &lt;code&gt;j = std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/is_placeholder.html&#34;&gt;&lt;code&gt;is_placeholder&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Ti&amp;gt;::value+1&lt;/code&gt;) が &lt;code&gt;ti&lt;/code&gt; の代わりに使用される。&lt;/li&gt;
&lt;li&gt;その他の場合、&lt;code&gt;ti&lt;/code&gt; がそのまま使用される。
上記の置換を行った後、 &lt;code&gt;f(ti...)&lt;/code&gt; を呼び出した結果が &lt;i&gt;&lt;code&gt;bound_function_type&lt;/code&gt;&lt;/i&gt;&lt;code&gt;::operator ()()&lt;/code&gt; の呼出し結果として返される。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意： &lt;code&gt;bound_args&lt;/code&gt; は明示的に &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/reference_wrapper/ref.html&#34;&gt;&lt;code&gt;std::ref()&lt;/code&gt;&lt;/a&gt; または &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/reference_wrapper/cref.html&#34;&gt;&lt;code&gt;std::cref()&lt;/code&gt;&lt;/a&gt; で包まない限り、内部でコピーして保持される。他方、&lt;code&gt;unbound_args&lt;/code&gt; は通常の &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;perfect forwarding&lt;/a&gt; が行われるため、&lt;code&gt;move&lt;/code&gt; で渡したあるいは一時オブジェクトを直接渡した &lt;code&gt;unbound_args&lt;/code&gt; を複数回プレースホルダ経由で使用すると予期しない結果になることがある。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional.html&#34;&gt;functional&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; b, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; c)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; c;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 第1引数のみを先に渡す&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/placeholders.html&#34;&gt;placeholders&lt;/a&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/function.html&#34;&gt;function&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;bind&lt;/span&gt;(add, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, _1, _2);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 残りの引数を渡して関数を呼び出す&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; f(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;9
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bind (C++11) -- functional/bind: 表示崩れを修正</title>
      <link href="http://cpprefjp.github.io/reference/functional/bind.html"/>
      <id>092072b3fffd986c1199606eae6b619b56169551:reference/functional/bind.md</id>
      <updated>2015-01-14 12:50:09 +0900</updated>
      
        <content type="html">&lt;h1&gt;bind (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, class... BoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;i&gt;unspecified&lt;/i&gt; bind(F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f, BoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... bound_args);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;R&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, class... BoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;i&gt;unspecified&lt;/i&gt; bind(F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f, BoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... bound_args);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;概要&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/callable.html&#34;&gt;&lt;i&gt;Callable&lt;/i&gt;&lt;/a&gt; オブジェクトに対し、引数を部分的に束縛(bind)する。&lt;/p&gt;
&lt;h3&gt;引数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; -- 束縛先となる &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/callable.html&#34;&gt;&lt;i&gt;Callable&lt;/i&gt;&lt;/a&gt; オブジェクト&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bound_args&lt;/code&gt; -- 束縛対象の値やプレースホルダ(&lt;code&gt;_1&lt;/code&gt;, &lt;code&gt;_2&lt;/code&gt;, ...)、別の &lt;code&gt;bind()&lt;/code&gt; 呼び出し&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;戻り値&lt;/h3&gt;
&lt;p&gt;引数を部分束縛された &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/callable.html&#34;&gt;&lt;i&gt;Callable&lt;/i&gt;&lt;/a&gt; オブジェクト。このオブジェクトは、次のような関数オブジェクトとして扱うことができる：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;i&gt;bound_function_type &lt;/i&gt;{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt; result_type;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... UnBoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;i&gt;unspecified&lt;/i&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(UnBoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... unbound_args) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;型名 &lt;code&gt;result_type&lt;/code&gt; は、&lt;code&gt;bind()&lt;/code&gt; 呼び出し時のテンプレートパラメータ &lt;code&gt;R&lt;/code&gt; そのもの(明示的に指定した場合)か、&lt;code&gt;F&lt;/code&gt; の戻り値型(&lt;code&gt;F&lt;/code&gt; が関数へのポインタまたはメンバ関数へのポインタである場合)か、&lt;code&gt;F::result_type&lt;/code&gt; (&lt;code&gt;F&lt;/code&gt; が型名 &lt;code&gt;result_type&lt;/code&gt; の定義を持つ場合)である。いずれの条件も満たさない場合、&lt;code&gt;result_type&lt;/code&gt; は定義されない
&lt;i&gt;&lt;code&gt;bound_function_type&lt;/code&gt;&lt;/i&gt;&lt;code&gt;::operator ()()&lt;/code&gt;を呼び出すと、&lt;code&gt;bound_args&lt;/code&gt; と &lt;code&gt;unbound_args&lt;/code&gt; が次のように使われ、最終的に &lt;code&gt;f&lt;/code&gt; の呼出しに到達する。(説明用に、 &lt;code&gt;BoundArgs&lt;/code&gt; のそれぞれの &lt;code&gt;decay&lt;/code&gt; された型を &lt;code&gt;TiD&lt;/code&gt; 、値を &lt;code&gt;ti&lt;/code&gt; 、&lt;code&gt;UnBoundArgs&lt;/code&gt; のそれぞれの値を &lt;code&gt;uj&lt;/code&gt; とおく)。
1. 型&lt;code&gt;Ti&lt;/code&gt; が &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/reference_wrapper.html&#34;&gt;&lt;code&gt;reference_wrapper&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;X&amp;gt;&lt;/code&gt; である場合、&lt;code&gt;ti.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/reference_wrapper/get.html&#34;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; が &lt;code&gt;ti&lt;/code&gt; の代わりに使用される。
2. &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/is_bind_expression.html&#34;&gt;&lt;code&gt;is_bind_expression&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;TiD&amp;gt;::value&lt;/code&gt;が &lt;code&gt;true&lt;/code&gt; に評価される場合、&lt;code&gt;ti(unbound_args...)&lt;/code&gt; の結果が &lt;code&gt;ti&lt;/code&gt; の代わりに使用される(これは、ネストされた &lt;code&gt;bind()&lt;/code&gt; が一度の呼び出しで再帰的に全て評価されることを示す)。
3. &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/is_placeholder.html&#34;&gt;&lt;code&gt;is_placeholder&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;TiD&amp;gt;::value&lt;/code&gt;が非ゼロに評価される場合、&lt;code&gt;uj&lt;/code&gt; (ただし &lt;code&gt;j = std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/is_placeholder.html&#34;&gt;&lt;code&gt;is_placeholder&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Ti&amp;gt;::value+1&lt;/code&gt;) が &lt;code&gt;ti&lt;/code&gt; の代わりに使用される。
4. その他の場合、&lt;code&gt;ti&lt;/code&gt; がそのまま使用される。
上記の置換を行った後、 &lt;code&gt;f(ti...)&lt;/code&gt; を呼び出した結果が &lt;i&gt;&lt;code&gt;bound_function_type&lt;/code&gt;&lt;/i&gt;&lt;code&gt;::operator ()()&lt;/code&gt; の呼出し結果として返される。&lt;/p&gt;
&lt;p&gt;注意： &lt;code&gt;bound_args&lt;/code&gt; は明示的に &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/reference_wrapper/ref.html&#34;&gt;&lt;code&gt;std::ref()&lt;/code&gt;&lt;/a&gt; または &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/reference_wrapper/cref.html&#34;&gt;&lt;code&gt;std::cref()&lt;/code&gt;&lt;/a&gt; で包まない限り、内部でコピーして保持される。他方、&lt;code&gt;unbound_args&lt;/code&gt; は通常の &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;perfect forwarding&lt;/a&gt; が行われるため、&lt;code&gt;move&lt;/code&gt; で渡したあるいは一時オブジェクトを直接渡した &lt;code&gt;unbound_args&lt;/code&gt; を複数回プレースホルダ経由で使用すると予期しない結果になることがある。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional.html&#34;&gt;functional&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; b, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; c)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; c;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 第1引数のみを先に渡す&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/placeholders.html&#34;&gt;placeholders&lt;/a&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/function.html&#34;&gt;function&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;bind&lt;/span&gt;(add, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, _1, _2);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 残りの引数を渡して関数を呼び出す&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; f(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;9
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- pairのコンストラクタ： (5)のconstexpr版オーバーロードをC++11と書いていたが、C++14の間違い。</title>
      <link href="http://cpprefjp.github.io/reference/utility/pair/pair.html"/>
      <id>ca8a88cd9634f671fcdc8d81011548560149f960:reference/utility/pair/pair.md</id>
      <updated>2015-01-14 01:03:43 +0900</updated>
      
        <content type="html">&lt;h1&gt;コンストラクタ&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;pair();                                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++03&lt;/span&gt;
constexpr &lt;span style=&#34;color: #0000FF&#34;&gt;pair&lt;/span&gt;();                         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++11&lt;/span&gt;

pair(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;default&lt;/span&gt;;              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
pair(pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;default&lt;/span&gt;;                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++11&lt;/span&gt;

pair(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T1&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T2&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; y);           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++03&lt;/span&gt;
constexpr &lt;span style=&#34;color: #0000FF&#34;&gt;pair&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T1&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T2&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; y); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++14&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
pair(U&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x, V&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y);                       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5) C++11&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
constexpr pair(U&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x, V&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y);             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5) C++14&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
pair(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;U, V&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; p);                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6) C++03&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
constexpr pair(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;U, V&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; p);      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6) C++14&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
pair(pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;U, V&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&amp;amp;&lt;/span&gt; p);                     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7) C++11&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
constexpr pair(pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;U, V&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&amp;amp;&lt;/span&gt; p);           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7) C++14&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args1, class... Args2&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
pair(&lt;span style=&#34;color: #B00040&#34;&gt;piecewise_construct_t&lt;/span&gt;,
     tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Args1...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; first_args,
     tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Args2...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; second_args);        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8) C++11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;pairの構築&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;code&gt;first&lt;/code&gt;と&lt;code&gt;second&lt;/code&gt;を初期化して構築&lt;/li&gt;
&lt;li&gt;(2) : コピーコンストラクタ&lt;/li&gt;
&lt;li&gt;(3) : ムーブコンストラクタ&lt;/li&gt;
&lt;li&gt;(4) : &lt;code&gt;first&lt;/code&gt;と&lt;code&gt;second&lt;/code&gt;の初期値を受け取って構築&lt;/li&gt;
&lt;li&gt;(5) : &lt;code&gt;first&lt;/code&gt;と&lt;code&gt;second&lt;/code&gt;に変換可能な型の値を受け取ってムーブ構築&lt;/li&gt;
&lt;li&gt;(6) : &lt;code&gt;first&lt;/code&gt;と&lt;code&gt;second&lt;/code&gt;に変換可能な&lt;code&gt;pair&lt;/code&gt;型の値を受け取って構築&lt;/li&gt;
&lt;li&gt;(7) : &lt;code&gt;first&lt;/code&gt;と&lt;code&gt;second&lt;/code&gt;に変換可能なpair型の右辺値を受け取って構築&lt;/li&gt;
&lt;li&gt;(8) : &lt;code&gt;first&lt;/code&gt;と&lt;code&gt;second&lt;/code&gt;のコンストラクタ引数を受け取り、&lt;code&gt;first_args&lt;/code&gt;と&lt;code&gt;second_args&lt;/code&gt;それぞれの要素から&lt;code&gt;first&lt;/code&gt;と&lt;code&gt;second&lt;/code&gt;をムーブ構築&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;code&gt;first_type&lt;/code&gt;と&lt;code&gt;second_type&lt;/code&gt;が&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_default_constructible.html&#34;&gt;&lt;code&gt;is_default_constructible&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T&amp;gt;::value == true&lt;/code&gt;であること&lt;/li&gt;
&lt;li&gt;(4) : &lt;code&gt;first_type&lt;/code&gt;と&lt;code&gt;second_type&lt;/code&gt;が&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_copy_constructible.html&#34;&gt;&lt;code&gt;is_copy_constructible&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T&amp;gt;::value == true&lt;/code&gt;であること&lt;/li&gt;
&lt;li&gt;(5) : &lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_constructible.html&#34;&gt;&lt;code&gt;is_constructible&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;first_type, U&amp;amp;&amp;amp;&amp;gt;::value &amp;amp;&amp;amp;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_constructible.html&#34;&gt;&lt;code&gt;is_constructible&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;second_type, V&amp;amp;&amp;amp;&amp;gt;::value&lt;/code&gt;であること&lt;/li&gt;
&lt;li&gt;(6) : &lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_constructible.html&#34;&gt;&lt;code&gt;is_constructible&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;first_type, const U&amp;amp;&amp;gt;::value &amp;amp;&amp;amp;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_constructible.html&#34;&gt;&lt;code&gt;is_constructible&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;second_type, const V&amp;amp;&amp;gt;::value&lt;/code&gt;であること&lt;/li&gt;
&lt;li&gt;(7) : &lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_constructible.html&#34;&gt;&lt;code&gt;is_constructible&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;first_type, U&amp;amp;&amp;amp;&amp;gt;::value &amp;amp;&amp;amp;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_constructible.html&#34;&gt;&lt;code&gt;is_constructible&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;second_type, V&amp;amp;&amp;amp;&amp;gt;::value&lt;/code&gt;であること&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;注記&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(5) : &lt;code&gt;U&lt;/code&gt;が&lt;code&gt;first_type&lt;/code&gt;に暗黙変換可能でない場合、もしくは&lt;code&gt;V&lt;/code&gt;が&lt;code&gt;second_type&lt;/code&gt;に暗黙変換可能でない場合、この関数はオーバーロード解決から除外される&lt;/li&gt;
&lt;li&gt;(6) : &lt;code&gt;const U&amp;amp;&lt;/code&gt;が&lt;code&gt;first_type&lt;/code&gt;に暗黙変換可能でない場合、もしくは&lt;code&gt;const V&amp;amp;&lt;/code&gt;が&lt;code&gt;second_type&lt;/code&gt;に暗黙変換可能でない場合、この関数はオーバーロード解決から除外される&lt;/li&gt;
&lt;li&gt;(7) : &lt;code&gt;U&lt;/code&gt;が&lt;code&gt;first_type&lt;/code&gt;に暗黙変換可能でない場合、もしくは&lt;code&gt;V&lt;/code&gt;が&lt;code&gt;second_type&lt;/code&gt;に暗黙変換可能でない場合、この関数はオーバーロード解決から除外される&lt;/li&gt;
&lt;li&gt;(8) : &lt;code&gt;is_constructible&amp;lt;first_type, Args1&amp;amp;&amp;amp;...&amp;gt;::value &amp;amp;&amp;amp; is_constructible&amp;lt;second_type, Args2&amp;amp;&amp;amp;...&amp;gt;::value&lt;/code&gt;であること&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;tuple&amp;gt; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::make_tuple&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T1&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T2&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; name, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T1, T2&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; p)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : (&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;,&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;)&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; X {
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a, b, c;

  X() &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; a(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), b(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), c(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) {}
  X(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; b, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; c) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; a(a), b(b), c(c) {}
};

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; X&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;X(&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.a &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.b &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.c &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;)&#34;&lt;/span&gt;;
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Y {
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a, b;

  Y() &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; a(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), b(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) {}
  Y(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; b) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; a(a), b(b) {}
};

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Y&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; y)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Y(&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; y.a &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; y.b &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;)&#34;&lt;/span&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) デフォルト構築&lt;/span&gt;
  {
    constexpr std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p1;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;p1&#34;&lt;/span&gt;, p1);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) コピー構築&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;abc&#34;&lt;/span&gt;);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; p;
     print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;p2&#34;&lt;/span&gt;, p2);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) ムーブ構築&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;abc&#34;&lt;/span&gt;);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(p);
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;p3&#34;&lt;/span&gt;, p3);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) firstとsecondの初期値を受け取って構築&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p4(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;abc&#34;&lt;/span&gt;));
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;p4&#34;&lt;/span&gt;, p4);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5) firstとsecondの右辺値を受け取ってムーブ構築&lt;/span&gt;
  {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;abc&#34;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p5(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(x), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(s));
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;p5&#34;&lt;/span&gt;, p5);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6) 変換可能なpairから構築&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; p(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;abc&#34;&lt;/span&gt;);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p6 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; p;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;p6&#34;&lt;/span&gt;, p6);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7) 変換可能なpairからムーブ構築&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; p(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;abc&#34;&lt;/span&gt;);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p7 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(p);
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;p7&#34;&lt;/span&gt;, p7);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8) first_typeとsecond_typeのコンストラクタ引数を受け取って構築&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;X, Y&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p8(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;piecewise_construct,
                       std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_tuple(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;),
                       std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_tuple(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;));
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;p8&#34;&lt;/span&gt;, p8);
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;p1 : (0,0)
p2 : (1,abc)
p3 : (1,abc)
p4 : (1,abc)
p5 : (1,abc)
p6 : (1,abc)
p7 : (1,abc)
p8 : (X(1 2 3),Y(4 5))
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11 : ムーブ構築とpiecewise構築&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.6.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3471.html&#34; target=&#34;_blank&#34;&gt;N3471 Constexpr Library Additions: utilities, v3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
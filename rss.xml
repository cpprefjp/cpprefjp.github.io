<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-04-28T11:56:38.708479</updated>
  <id>5e182b35-18ed-427d-86c4-4172f731e8f6</id>

  
    <entry>
      <title>formatter -- 番号付き箇条書きはエスケープできるのかな</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter.html"/>
      <id>43bdcdaab30909a61518b414f4109d0d36f415b7:reference/format/formatter.md</id>
      <updated>2020-04-28T20:52:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter.md b/reference/format/formatter.md
index 9441b3b1a..9049e502e 100644
--- a/reference/format/formatter.md
+++ b/reference/format/formatter.md
@@ -17,7 +17,7 @@ namespace std {
 
 `charT`を`char`または`wchar_t`とすると、標準で以下の特殊化が利用できる。
 
-- 1. 以下のもの。
+- \1. 以下のもの。
     ```cpp
     template&amp;lt;&amp;gt; struct formatter&amp;lt;charT, charT&amp;gt;;
 
@@ -38,7 +38,7 @@ namespace std {
     * basic_string[link /reference/string/basic_string.md]
     * basic_string_view[link /reference/string_view/basic_string_view.md]
 
-- 2. 第1テンプレート引数が`nullptr_t`, `void*`, `const void*`, `bool`, すべてのCV修飾されない標準の整数型, 拡張整数型, 浮動小数点数型であり、第2テンプレート引数が`charT`であるもの。
+- \2. 第1テンプレート引数が`nullptr_t`, `void*`, `const void*`, `bool`, すべてのCV修飾されない標準の整数型, 拡張整数型, 浮動小数点数型であり、第2テンプレート引数が`charT`であるもの。
 
 さらに、ユーザーが`formatter`を特殊化した場合、それも有効である。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- formatter : デフォルトテンプレート引数を追加</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter.html"/>
      <id>b0f0c29ae2b6ee8c017b8b63d525e4e690f47011:reference/format/formatter.md</id>
      <updated>2020-04-28T20:47:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter.md b/reference/format/formatter.md
index 73ffdace4..9441b3b1a 100644
--- a/reference/format/formatter.md
+++ b/reference/format/formatter.md
@@ -7,7 +7,7 @@
 
 ```cpp
 namespace std {
-  template&amp;lt;class T, class U&amp;gt;
+  template&amp;lt;class T, class U = char&amp;gt;
   struct formatter;
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- formatter : 説明を整理。見た目崩れを修正</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter.html"/>
      <id>04d2a5cdfb5c14db17a00b7a7a7e922c0ce563ed:reference/format/formatter.md</id>
      <updated>2020-04-28T20:42:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter.md b/reference/format/formatter.md
index 0a4716c16..73ffdace4 100644
--- a/reference/format/formatter.md
+++ b/reference/format/formatter.md
@@ -15,30 +15,30 @@ namespace std {
 ## 概要
 フォーマット引数の個々の型に対応する書式文字列の解析と値のフォーマットを担うクラス。
 
-`charT`を`char`または`wchar_t`とすると、標準で次の特殊化が有効である。
+`charT`を`char`または`wchar_t`とすると、標準で以下の特殊化が利用できる。
 
-1. 以下のもの。
-```cpp
-template&amp;lt;&amp;gt; struct formatter&amp;lt;charT, charT&amp;gt;;
+- 1. 以下のもの。
+    ```cpp
+    template&amp;lt;&amp;gt; struct formatter&amp;lt;charT, charT&amp;gt;;
 
-template&amp;lt;&amp;gt; struct formatter&amp;lt;char, wchar_t&amp;gt;;
+    template&amp;lt;&amp;gt; struct formatter&amp;lt;char, wchar_t&amp;gt;;
 
-template&amp;lt;&amp;gt; struct formatter&amp;lt;charT*, charT&amp;gt;;
+    template&amp;lt;&amp;gt; struct formatter&amp;lt;charT*, charT&amp;gt;;
 
-template&amp;lt;&amp;gt; struct formatter&amp;lt;const charT*, charT&amp;gt;;
+    template&amp;lt;&amp;gt; struct formatter&amp;lt;const charT*, charT&amp;gt;;
 
-template&amp;lt;size_t N&amp;gt; struct formatter&amp;lt;const charT[N], charT&amp;gt;;
+    template&amp;lt;size_t N&amp;gt; struct formatter&amp;lt;const charT[N], charT&amp;gt;;
 
-template&amp;lt;class traits, class Allocator&amp;gt;
-struct formatter&amp;lt;basic_string&amp;lt;charT, traits, Allocator&amp;gt;, charT&amp;gt;;
+    template&amp;lt;class traits, class Allocator&amp;gt;
+    struct formatter&amp;lt;basic_string&amp;lt;charT, traits, Allocator&amp;gt;, charT&amp;gt;;
 
-template&amp;lt;class traits&amp;gt;
-struct formatter&amp;lt;basic_string_view&amp;lt;charT, traits&amp;gt;, charT&amp;gt;;
-```
-* basic_string[link /reference/string/basic_string.md]
-* basic_string_view[link /reference/string_view/basic_string_view.md]
+    template&amp;lt;class traits&amp;gt;
+    struct formatter&amp;lt;basic_string_view&amp;lt;charT, traits&amp;gt;, charT&amp;gt;;
+    ```
+    * basic_string[link /reference/string/basic_string.md]
+    * basic_string_view[link /reference/string_view/basic_string_view.md]
 
-2. 第1テンプレート引数が`nullptr_t`, `void*`, `const void*`, `bool`, すべてのCV修飾されない標準の整数型, 拡張整数型, 浮動小数点数型であり、第2テンプレート引数が`charT`であるもの。
+- 2. 第1テンプレート引数が`nullptr_t`, `void*`, `const void*`, `bool`, すべてのCV修飾されない標準の整数型, 拡張整数型, 浮動小数点数型であり、第2テンプレート引数が`charT`であるもの。
 
 さらに、ユーザーが`formatter`を特殊化した場合、それも有効である。
 
@@ -54,7 +54,7 @@ struct formatter&amp;lt;basic_string_view&amp;lt;charT, traits&amp;gt;, charT&amp;gt;;
 
 * `F`は`Cpp17DefaultConstructible`、`Cpp17CopyConstructible`、`Cpp17CopyAssignable`、`Cpp17Destructible`であること (注: ここはC++20の策定までにコンセプトで書き換えられるかもしれない)
 
-さらに、
+さらに、以下の条件を満たすこと
 
 1. 式 `f.parse(pc)` が有効であり、
     * 戻り値の型が`PC::iterator`である
@@ -69,7 +69,7 @@ struct formatter&amp;lt;basic_string_view&amp;lt;charT, traits&amp;gt;, charT&amp;gt;;
     * 出力は`t`、グローバルロケール、最後に呼び出された`f.parse(pc)`の`[pc.begin(), pc.end())`の範囲以外に依存しない
     * `u`を変更しない
 
-ただし、
+条件内の各要素を、以下のように定義する
 
 * 文字の型を`charT`
 * 出力イテレーターの型を`Out`
@@ -84,8 +84,6 @@ struct formatter&amp;lt;basic_string_view&amp;lt;charT, traits&amp;gt;, charT&amp;gt;;
 * `pc.begin()`は書式文字列中の対応する置換フィールドのオプションの先頭を指す
 * オプションが空なら、`pc.begin() == pc.end()`または`*pc.begin() == &amp;#39;}&amp;#39;`である
 
-とする。
-
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>jthread -- thread/jthread.md リンクを修正</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread.html"/>
      <id>d54c4fe2af2102af27612203043664ad3a9e4485:reference/thread/jthread.md</id>
      <updated>2020-04-26T21:08:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread.md b/reference/thread/jthread.md
index 8672840b6..92d54a113 100644
--- a/reference/thread/jthread.md
+++ b/reference/thread/jthread.md
@@ -91,7 +91,7 @@ int main()
 * std::jthread[link jthread.md]
 * std::stop_token[link /reference/stop_token/stop_token.md]
 * std::stop_callback[link /reference/stop_token/stop_callback.md]
-* get_stop_token()[link jthread/get_stop_token.md]
+* get_stop_token()[link jthread/get_stop_token.md.nolink]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>hotwatermorning</name>
        <email>hotwatermorning@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>thread -- thread/jthread.md を追加</title>
      <link href="https://cpprefjp.github.io/reference/thread.html"/>
      <id>fb17feb484a485d7de02d808616c7297e9004c89:reference/thread.md</id>
      <updated>2020-04-26T18:45:52+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;thread&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;thread&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;thread&amp;gt;&lt;/code&gt;ヘッダはマルチスレッド制御に関するクラス・関数を定義する。&lt;br /&gt;
スレッドサポートはC++11にて導入された。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/thread/thread.html&#34;&gt;thread&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;スレッド クラス(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/thread/thread/id.html&#34;&gt;thread::id&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;スレッド識別子 クラス(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/thread/this_thread.html&#34;&gt;this_thread&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;現スレッドの制御機能を提供する名前空間 (namespace)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/thread/jthread.html&#34;&gt;jthread&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止要求を扱ったり、自動で&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/thread/jthread/join.md.nolink&#34;&gt;join&lt;/a&gt;&lt;/code&gt;する機能を持つスレッド クラス (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: 4.6.3, 4.7.0
     GCC／pthread環境でスレッドサポートを有効化するには -pthread オプション指定が必要。（GCC 4.7.0で確認）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 2012, 2013, 2015&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.decadent.org.uk/pipermail/cpp-threads/&#34; target=&#34;_blank&#34;&gt;The cpp-threads Archives&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11の策定時に、C++標準の言語とライブラリに並行プログラミングの提案を行うため使用されていたメーリングリストのアーカイブです。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>hotwatermorning</name>
        <email>hotwatermorning@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>jthread -- thread/jthread.md を追加</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread.html"/>
      <id>fb17feb484a485d7de02d808616c7297e9004c89:reference/thread/jthread.md</id>
      <updated>2020-04-26T18:45:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread.md b/reference/thread/jthread.md
new file mode 100644
index 000000000..8672840b6
--- /dev/null
+++ b/reference/thread/jthread.md
@@ -0,0 +1,111 @@
+# jthread
+* thread[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  class jthread;
+}
+```
+
+## 概要
+クラス`jthread`は、[`thread`](thread.md)と同じく、新しい実行のスレッド(thread of execution)（以下、単にスレッドとする）の作成／待機／その他操作を行う機構を提供する。このクラスはさらに、実行しているスレッドに対する停止要求を扱う機能や、自動で[`join`](jthread/join.md.nolink)操作を行う機能を提供する。
+
+## `thread`クラスとの違い
+
+- 停止要求のサポート: `jthread`は自身と関連付けられたスレッドに対する停止要求を扱う仕組みを提供する。このために[`&amp;lt;stop_token&amp;gt;`](/reference/stop_token/stop_token.md)ヘッダに定義されたクラスを利用する。
+- 自動join機能: `jthread`はデストラクタやムーブ代入演算子が呼び出されたとき、もし自身に関連付けられたスレッドが存在する場合は、スレッドの停止要求を作成し、その後[`join()`](jthread/join.md.nolink)を呼び出してスレッドの終了を待機する。そのため`thread`クラスと異なり、[`joinable()`](jthread/joinable.md.nolink) `==` `true` であってもデストラクタやムーブ代入演算子を呼び出し可能であり、[`std::terminate()`](/reference/exception/terminate.md)は呼び出されない。
+
+## メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|----------------------------------------------|--------------------------------------------------------------------|-------|
+| [`(constructor)`](jthread/op_constructor.md.nolink)        | コンストラクタ | C++20 |
+| [`(destructor)`](jthread/op_destructor.md.nolink)        | デストラクタ | C++20 |
+| [`operator=`](jthread/op_assign.md.nolink)         | 代入演算子 | C++20 |
+| [`swap`](jthread/swap.md.nolink)                   | 別の`jthread`と交換する | C++20 |
+| [`joinable`](jthread/joinable.md.nolink)           | スレッドに関連付けられているか否かを取得する | C++20 |
+| [`join`](jthread/join.md.nolink)                   | スレッドが終了するまで待機する | C++20 |
+| [`detach`](jthread/detach.md.nolink)               | スレッドの管理を手放す | C++20 |
+| [`get_id`](jthread/get_id.md.nolink)               | 関連付けられているスレッドのスレッド識別子を取得する | C++20 |
+| [`native_handle`](jthread/native_handle.md.nolink) | スレッドに関連付けられたネイティブハンドルを取得する［処理系定義］ | C++20 |
+| [`get_stop_source`](jthread/get_stop_source.md.nolink) | 停止要求を作成するための[`stop_source`](/reference/stop_token/stop_source.md)オブジェクトを取得する | C++20 |
+| [`get_stop_token`](jthread/get_stop_token.md.nolink) | 停止状態を問い合わせるための[`stop_token`](/reference/stop_token/stop_token.md)オブジェクトを取得する | C++20 |
+| [`request_stop`](jthread/request_stop.md.nolink) | スレッドに対する停止要求を作成する | C++20 |
+
+## 静的メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------------------------------------------------------------|----------------------------------------------------|-------|
+| [`hardware_concurrency`](jthread/hardware_concurrency.md.nolink) | 処理系によりサポートされるスレッド並行数を取得する | C++20 |
+
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------------------------|----------------------------------------------|-------|
+| [`id`](jthread/id.md.nolink) | スレッド識別子 (type-alias) | C++20 |
+| `native_handle_type`   | ネイティブハンドル型 (type-alias)［処理系定義］ | C++20 |
+
+
+## 非メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|---------------------------------|---------------------------------------|-------|
+| [`swap`](jthread/swap_free.md.nolink) | 2つの`jthread`オブジェクトを入れ替える | C++20 |
+
+
+## 備考
+- 型`native_handle_type`およびメンバ関数`native_handle`について、同メンバの存在有無およびその意味は処理系定義となる。
+- 型`id`および型`native_handle_type`は、`thread`クラスで定義しているものと同じものを使用する。
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;thread&amp;gt;
+
+int main()
+{
+  int x = 0, y = 0;
+
+  std::jthread t([&amp;amp;](std::stop_token st) { x++; });
+
+  // スレッドに対する停止要求の作成に合わせて呼び出される
+  // コールバックを定義する。
+  std::stop_callback sc { t.get_stop_token(), [&amp;amp;] { y++; }};
+
+  assert(y == 0);
+
+  // 明示的にjoin()を呼び出さずにtを上書きする。
+  // このとき、ムーブ代入演算子の呼び出しの中で、
+  // 自動で停止要求の作成とjoin()の呼び出しが行われる。
+  t = std::jthread{};
+
+  assert(x == 1 &amp;amp;&amp;amp; y == 1);
+
+  return 0;
+}
+```
+* std::jthread[link jthread.md]
+* std::stop_token[link /reference/stop_token/stop_token.md]
+* std::stop_callback[link /reference/stop_token/stop_callback.md]
+* get_stop_token()[link jthread/get_stop_token.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+
+## 参照
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>hotwatermorning</name>
        <email>hotwatermorning@gmail.com</email>
      </author>
    </entry>
  
</feed>
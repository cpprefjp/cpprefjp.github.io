<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-08-04T15:55:25.168401</updated>
  <id>c162c72d-0abe-4514-89b6-e4f70f512c41</id>

  
    <entry>
      <title>unordered_multiset -- add insert_range to std::unordered_set and std::unordered_multiset (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_multiset.html"/>
      <id>192845fce933cc94a12f315fe27d37badad3a53c:reference/unordered_set/unordered_multiset.md</id>
      <updated>2024-08-05T00:52:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_multiset.md b/reference/unordered_set/unordered_multiset.md
index 8b6ce610f..5efc49c18 100644
--- a/reference/unordered_set/unordered_multiset.md
+++ b/reference/unordered_set/unordered_multiset.md
@@ -99,6 +99,7 @@ namespace std {
 | [`emplace`](unordered_multiset/emplace.md)           | コンテナ内への要素の直接構築                           | C++11 |
 | [`emplace_hint`](unordered_multiset/emplace_hint.md) | 挿入位置のヒントを使用したコンテナ内への要素の直接構築 | C++11 |
 | [`insert`](unordered_multiset/insert.md)             | 要素の追加                                             | C++11 |
+| [`insert_range`](unordered_multiset/insert_range.md) | Rangeの要素を挿入する                                   | C++23 |
 | [`erase`](unordered_multiset/erase.md)               | 要素の削除                                             | C++11 |
 | [`clear`](unordered_multiset/clear.md)               | 全要素の削除                                           | C++11 |
 | [`swap`](unordered_multiset/swap.md)                 | 内容の交換                                             | C++11 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_range -- add insert_range to std::unordered_set and std::unordered_multiset (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/insert_range.html"/>
      <id>192845fce933cc94a12f315fe27d37badad3a53c:reference/unordered_set/unordered_multiset/insert_range.md</id>
      <updated>2024-08-05T00:52:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_multiset/insert_range.md b/reference/unordered_set/unordered_multiset/insert_range.md
new file mode 100644
index 000000000..f44f7a72f
--- /dev/null
+++ b/reference/unordered_set/unordered_multiset/insert_range.md
@@ -0,0 +1,71 @@
+# insert_range
+* unordered_set[meta header]
+* std[meta namespace]
+* unordered_multiset[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+void insert_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+コンテナにRange`rg` の要素を挿入する。
+
+
+## 効果
+Range`rg` のすべての要素 `t` に対して、`insert(t)` を呼び出した場合と等価。
+
+
+## 事前条件
+`*this` の要素の範囲と Range`rg` の要素の範囲が重複していないこと
+
+
+## テンプレートパラメータ制約
+`value_type` は、コンテナに対して `EmplaceConstructible` であること
+
+
+## 戻り値
+なし
+
+
+## 計算量
+`N =` [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)` とすると、平均的なケースでは `O(N)`、最悪のケースでは `O(N size() + 1)`。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;unordered_set&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main ()
+{
+    std::unordered_multiset&amp;lt;int&amp;gt; s = {1, 2, 3};
+
+    std::vector&amp;lt;int&amp;gt; v = {2, 3, 4};
+    s.insert_range(v);
+
+    for (int i : s) {
+        std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+    }
+    std::cout &amp;lt;&amp;lt; std::endl;
+
+    return 0;
+}
+```
+* insert_range[color ff0000]
+
+### 出力
+```
+4 3 3 2 2 1 
+```
+注：[`unordered_multiset`](/reference/unordered_set/unordered_multiset.md) は非順序連想コンテナであるため、出力順序は無意味であることに注意
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`insert`](insert.md)                     | 要素の追加             |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unordered_set -- add insert_range to std::unordered_set and std::unordered_multiset (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set.html"/>
      <id>192845fce933cc94a12f315fe27d37badad3a53c:reference/unordered_set/unordered_set.md</id>
      <updated>2024-08-05T00:52:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set.md b/reference/unordered_set/unordered_set.md
index b5913aff7..f66dc5714 100644
--- a/reference/unordered_set/unordered_set.md
+++ b/reference/unordered_set/unordered_set.md
@@ -97,6 +97,7 @@ namespace std {
 | [`emplace`](unordered_set/emplace.md)           | コンテナ内への要素の直接構築                           | C++11 |
 | [`emplace_hint`](unordered_set/emplace_hint.md) | 挿入位置のヒントを使用したコンテナ内への要素の直接構築 | C++11 |
 | [`insert`](unordered_set/insert.md)             | 要素の追加                                             | C++11 |
+| [`insert_range`](unordered_set/insert_range.md) | Rangeの要素を挿入する                                   | C++23 |
 | [`erase`](unordered_set/erase.md)               | 要素の削除                                             | C++11 |
 | [`clear`](unordered_set/clear.md)               | 全要素の削除                                           | C++11 |
 | [`swap`](unordered_set/swap.md)                 | 内容の交換                                             | C++11 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_range -- add insert_range to std::unordered_set and std::unordered_multiset (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/insert_range.html"/>
      <id>192845fce933cc94a12f315fe27d37badad3a53c:reference/unordered_set/unordered_set/insert_range.md</id>
      <updated>2024-08-05T00:52:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/insert_range.md b/reference/unordered_set/unordered_set/insert_range.md
new file mode 100644
index 000000000..eb1b80ecc
--- /dev/null
+++ b/reference/unordered_set/unordered_set/insert_range.md
@@ -0,0 +1,71 @@
+# insert_range
+* unordered_set[meta header]
+* std[meta namespace]
+* unordered_set[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+void insert_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+コンテナにRange`rg` の要素を挿入する。
+
+
+## 効果
+Range`rg` のすべての要素 `t` に対して、`insert(t)` を呼び出した場合と等価。
+
+
+## 事前条件
+`*this` の要素の範囲と Range`rg` の要素の範囲が重複していないこと
+
+
+## テンプレートパラメータ制約
+`value_type` は、コンテナに対して `EmplaceConstructible` であること
+
+
+## 戻り値
+なし
+
+
+## 計算量
+`N =` [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)` とすると、平均的なケースでは `O(N)`、最悪のケースでは `O(N size() + 1)`。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;unordered_set&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main ()
+{
+    std::unordered_set&amp;lt;int&amp;gt; s = {1, 2, 3};
+
+    std::vector&amp;lt;int&amp;gt; v = {2, 3, 4};
+    s.insert_range(v);
+
+    for (int i : s) {
+        std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+    }
+    std::cout &amp;lt;&amp;lt; std::endl;
+
+    return 0;
+}
+```
+* insert_range[color ff0000]
+
+### 出力
+```
+4 3 2 1 
+```
+注：[`unordered_set`](/reference/unordered_set/unordered_set.md) は非順序連想コンテナであるため、出力順序は無意味であることに注意
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`insert`](insert.md)                     | 要素の追加             |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unordered_map -- add insert_range to std::unordered_map and std::unordered_multimap (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map.html"/>
      <id>9235ec53337e6b39cf81edf1403ece357365ae49:reference/unordered_map/unordered_map.md</id>
      <updated>2024-08-05T00:51:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map.md b/reference/unordered_map/unordered_map.md
index ff3163428..cc119df6b 100644
--- a/reference/unordered_map/unordered_map.md
+++ b/reference/unordered_map/unordered_map.md
@@ -103,6 +103,7 @@ namespace std {
 | [`try_emplace`](unordered_map/try_emplace.md)           | キーが存在しない場合のみコンテナ内への要素の直接構築   | C++17          |
 | [`insert`](unordered_map/insert.md)                     | 要素の追加                                             | C++11          |
 | [`insert_or_assign`](unordered_map/insert_or_assign.md) | 要素の追加、あるいは代入                               | C++17          |
+| [`insert_range`](unordered_map/insert_range.md)         | Rangeの要素を挿入する                                 | C++23          |
 | [`erase`](unordered_map/erase.md)                       | 要素の削除                                             | C++11          |
 | [`clear`](unordered_map/clear.md)                       | 全要素の削除                                           | C++11          |
 | [`swap`](unordered_map/swap.md)                         | 内容の交換                                             | C++11          |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_range -- add insert_range to std::unordered_map and std::unordered_multimap (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/insert_range.html"/>
      <id>9235ec53337e6b39cf81edf1403ece357365ae49:reference/unordered_map/unordered_map/insert_range.md</id>
      <updated>2024-08-05T00:51:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/insert_range.md b/reference/unordered_map/unordered_map/insert_range.md
new file mode 100644
index 000000000..09141d2bc
--- /dev/null
+++ b/reference/unordered_map/unordered_map/insert_range.md
@@ -0,0 +1,74 @@
+# insert_range
+* unordered_map[meta header]
+* std[meta namespace]
+* unordered_map[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+void insert_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+コンテナにRange`rg` の要素を挿入する。
+
+
+## 効果
+Range`rg` のすべての要素 `t` に対して、`insert(t)` を呼び出した場合と等価。
+
+
+## 事前条件
+`*this` の要素の範囲と Range`rg` の要素の範囲が重複していないこと
+
+
+## テンプレートパラメータ制約
+`value_type` は、コンテナに対して `EmplaceConstructible` であること
+
+
+## 戻り値
+なし
+
+
+## 計算量
+`N =` [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)` とすると、平均的なケースでは `O(N)`、最悪のケースでは `O(N size() + 1)`。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;unordered_map&amp;gt;
+#include &amp;lt;utility&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main ()
+{
+    std::unordered_map&amp;lt;char, int&amp;gt; m = {{&amp;#39;A&amp;#39;, 10}, {&amp;#39;B&amp;#39;, 11}};
+
+    std::vector&amp;lt;std::pair&amp;lt;char,int&amp;gt;&amp;gt; v = {{&amp;#39;B&amp;#39;, 11}, {&amp;#39;C&amp;#39;, 12}};
+    m.insert_range(v);
+
+    for (const auto&amp;amp; kv : m) {
+        std::cout &amp;lt;&amp;lt; kv.first &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; kv.second &amp;lt;&amp;lt; std::endl;
+    }
+
+    return 0;
+}
+```
+* insert_range[color ff0000]
+
+### 出力
+```
+C 12
+B 11
+A 10
+```
+注：[`unordered_map`](/reference/unordered_map/unordered_map.md) は非順序連想コンテナであるため、出力順序は無意味であることに注意
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`insert`](insert.md)                     | 要素の追加             |
+| [`insert_or_assign`](insert_or_assign.md) | 要素の追加、あるいは代入 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unordered_multimap -- add insert_range to std::unordered_map and std::unordered_multimap (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_multimap.html"/>
      <id>9235ec53337e6b39cf81edf1403ece357365ae49:reference/unordered_map/unordered_multimap.md</id>
      <updated>2024-08-05T00:51:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_multimap.md b/reference/unordered_map/unordered_multimap.md
index 2ea59a1ff..3bcbf5adb 100644
--- a/reference/unordered_map/unordered_multimap.md
+++ b/reference/unordered_map/unordered_multimap.md
@@ -101,6 +101,7 @@ namespace std {
 | [`emplace`](unordered_multimap/emplace.md)           | コンテナ内への要素の直接構築                           | C++11 |
 | [`emplace_hint`](unordered_multimap/emplace_hint.md) | 挿入位置のヒントを使用したコンテナ内への要素の直接構築 | C++11 |
 | [`insert`](unordered_multimap/insert.md)             | 要素の追加                                             | C++11 |
+| [`insert_range`](unordered_multimap/insert_range.md) | Rangeの要素を挿入する                                   | C++23 |
 | [`erase`](unordered_multimap/erase.md)               | 要素の削除                                             | C++11 |
 | [`clear`](unordered_multimap/clear.md)               | 全要素の削除                                           | C++11 |
 | [`swap`](unordered_multimap/swap.md)                 | 内容の交換                                             | C++11 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_range -- add insert_range to std::unordered_map and std::unordered_multimap (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/insert_range.html"/>
      <id>9235ec53337e6b39cf81edf1403ece357365ae49:reference/unordered_map/unordered_multimap/insert_range.md</id>
      <updated>2024-08-05T00:51:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_multimap/insert_range.md b/reference/unordered_map/unordered_multimap/insert_range.md
new file mode 100644
index 000000000..922c6050e
--- /dev/null
+++ b/reference/unordered_map/unordered_multimap/insert_range.md
@@ -0,0 +1,74 @@
+# insert_range
+* unordered_map[meta header]
+* std[meta namespace]
+* unordered_multimap[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+void insert_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+コンテナにRange`rg` の要素を挿入する。
+
+
+## 効果
+Range`rg` のすべての要素 `t` に対して、`insert(t)` を呼び出した場合と等価。
+
+
+## 事前条件
+`*this` の要素の範囲と Range`rg` の要素の範囲が重複していないこと
+
+
+## テンプレートパラメータ制約
+`value_type` は、コンテナに対して `EmplaceConstructible` であること
+
+
+## 戻り値
+なし
+
+
+## 計算量
+`N =` [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)` とすると、平均的なケースでは `O(N)`、最悪のケースでは `O(N size() + 1)`。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;unordered_map&amp;gt;
+#include &amp;lt;utility&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main ()
+{
+    std::unordered_multimap&amp;lt;char, int&amp;gt; m = {{&amp;#39;A&amp;#39;, 10}, {&amp;#39;B&amp;#39;, 11}};
+
+    std::vector&amp;lt;std::pair&amp;lt;char,int&amp;gt;&amp;gt; v = {{&amp;#39;B&amp;#39;, 11}, {&amp;#39;C&amp;#39;, 12}};
+    m.insert_range(v);
+
+    for (const auto&amp;amp; kv : m) {
+        std::cout &amp;lt;&amp;lt; kv.first &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; kv.second &amp;lt;&amp;lt; std::endl;
+    }
+
+    return 0;
+}
+```
+* insert_range[color ff0000]
+
+### 出力
+```
+C 12
+B 11
+B 11
+A 10
+```
+注：[`unordered_multimap`](/reference/unordered_map/unordered_multimap.md) は非順序連想コンテナであるため、出力順序は無意味であることに注意
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`insert`](insert.md)                     | 要素の追加             |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>multiset -- add insert_range to std::set and std::multiset (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset.html"/>
      <id>2a0028887e04d4c234e19a32f15387df9e8459a7:reference/set/multiset.md</id>
      <updated>2024-08-05T00:49:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset.md b/reference/set/multiset.md
index b00dee107..595668e35 100644
--- a/reference/set/multiset.md
+++ b/reference/set/multiset.md
@@ -80,6 +80,7 @@ namespace std {
 |---------------------------------|------------------------------------------|-------|
 | [`clear`](multiset/clear.md)               | 全ての要素を削除する             | |
 | [`insert`](multiset/insert.md)             | 要素を挿入する                   | |
+| [`insert_range`](multiset/insert_range.md) | Rangeの要素を挿入する            | C++23 |
 | [`emplace`](multiset/emplace.md)           | 要素を直接構築する               | C++11 |
 | [`emplace_hint`](multiset/emplace_hint.md) | ヒントを使って要素を直接構築する | C++11 |
 | [`erase`](multiset/erase.md)               | 要素を削除する                   |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_range -- add insert_range to std::set and std::multiset (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/insert_range.html"/>
      <id>2a0028887e04d4c234e19a32f15387df9e8459a7:reference/set/multiset/insert_range.md</id>
      <updated>2024-08-05T00:49:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/insert_range.md b/reference/set/multiset/insert_range.md
new file mode 100644
index 000000000..cb78279fc
--- /dev/null
+++ b/reference/set/multiset/insert_range.md
@@ -0,0 +1,65 @@
+# insert_range
+* set[meta header]
+* std[meta namespace]
+* multiset[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+void insert_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+Range`rg` の要素を挿入することにより、`multiset` コンテナを拡張する。
+
+ `set` コンテナは重複した値を許さないため、挿入操作はそれぞれの要素が他のコンテナ内の既存要素と同じ値かどうかをチェックし、同じ要素がすでにあれば挿入されない。`multiset`の場合には、同じ値の要素でも挿入される。
+
+
+## 戻り値
+なし
+
+
+## 計算量
+`N =` [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)` とすると、`N log (size() + N)` に比例
+
+
+## 備考
+- 関数が呼ばれた後も、当該コンテナ内の要素を指す参照やイテレータは無効にはならない。  
+	なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;set&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main ()
+{
+    std::multiset&amp;lt;int&amp;gt; s = {1, 2, 3};
+
+    std::vector&amp;lt;int&amp;gt; v = {2, 3, 4};
+    s.insert_range(v);
+
+    for (int i : s) {
+        std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+    }
+    std::cout &amp;lt;&amp;lt; std::endl;
+
+    return 0;
+}
+```
+* insert_range[color ff0000]
+
+### 出力
+```
+1 2 2 3 3 4 
+```
+
+
+## 関連項目
+
+| 名前                       | 説明                   |
+|----------------------------|------------------------|
+| [`insert`](insert.md)      | 要素を挿入する          |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set -- add insert_range to std::set and std::multiset (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/set/set.html"/>
      <id>2a0028887e04d4c234e19a32f15387df9e8459a7:reference/set/set.md</id>
      <updated>2024-08-05T00:49:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set.md b/reference/set/set.md
index eda67be00..e564e5944 100644
--- a/reference/set/set.md
+++ b/reference/set/set.md
@@ -81,6 +81,7 @@ namespace std {
 |---------------------------------|------------------------------------------|-------|
 | [`clear`](set/clear.md)               | 全ての要素を削除する             | |
 | [`insert`](set/insert.md)             | 要素を挿入する                   | |
+| [`insert_range`](set/insert_range.md) | Rangeの要素を挿入する            | C++23 |
 | [`emplace`](set/emplace.md)           | 要素を直接構築する               | C++11 |
 | [`emplace_hint`](set/emplace_hint.md) | ヒントを使って要素を直接構築する | C++11 |
 | [`erase`](set/erase.md)               | 要素を削除する                   |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_range -- add insert_range to std::set and std::multiset (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/set/set/insert_range.html"/>
      <id>2a0028887e04d4c234e19a32f15387df9e8459a7:reference/set/set/insert_range.md</id>
      <updated>2024-08-05T00:49:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/insert_range.md b/reference/set/set/insert_range.md
new file mode 100644
index 000000000..e5e6becf3
--- /dev/null
+++ b/reference/set/set/insert_range.md
@@ -0,0 +1,64 @@
+# insert_range
+* set[meta header]
+* std[meta namespace]
+* set[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+void insert_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+Range`rg` の要素を挿入することにより、`set` コンテナを拡張する。
+
+ `set` コンテナは重複した値を許さないため、挿入操作はそれぞれの要素が他のコンテナ内の既存要素と同じ値かどうかをチェックし、同じ要素がすでにあれば挿入されない。`multiset`の場合には、同じ値の要素でも挿入される。
+
+
+## 戻り値
+なし
+
+
+## 計算量
+`N =` [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)` とすると、`N log (size() + N)` に比例
+
+
+## 備考
+- 関数が呼ばれた後も、当該コンテナ内の要素を指す参照やイテレータは無効にはならない。  
+	なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;set&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main ()
+{
+    std::set&amp;lt;int&amp;gt; s = {1, 2, 3};
+
+    std::vector&amp;lt;int&amp;gt; v = {2, 3, 4};
+    s.insert_range(v);
+
+    for (int i : s) {
+        std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+    }
+    std::cout &amp;lt;&amp;lt; std::endl;
+
+    return 0;
+}
+```
+* insert_range[color ff0000]
+
+### 出力
+```
+1 2 3 4 
+```
+
+## 関連項目
+
+| 名前                       | 説明                   |
+|----------------------------|------------------------|
+| [`insert`](insert.md)      | 要素を挿入する          |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>map -- add insert_range to std::map and std::multimap (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/map/map.html"/>
      <id>ec423b713f62b2ed054409632a5cb78e850c8a1b:reference/map/map.md</id>
      <updated>2024-08-05T00:48:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map.md b/reference/map/map.md
index f87575b98..b0996ee65 100644
--- a/reference/map/map.md
+++ b/reference/map/map.md
@@ -92,6 +92,7 @@ namespace std {
 |-----------------------------------------------|--------------------------------------------|----------------|
 | [`clear`](map/clear.md)                       | 全ての要素を削除する                       |                |
 | [`insert`](map/insert.md)                     | 要素を挿入する                             |                |
+| [`insert_range`](map/insert_range.md)         | Rangeの要素を挿入する                    | C++23          |
 | [`insert_or_assign`](map/insert_or_assign.md) | 要素を挿入、あるいは代入する               | C++17          |
 | [`emplace`](map/emplace.md)                   | 要素を直接構築する                         | C++11          |
 | [`emplace_hint`](map/emplace_hint.md)         | ヒントを使って要素を直接構築する           | C++11          |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_range -- add insert_range to std::map and std::multimap (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/map/map/insert_range.html"/>
      <id>ec423b713f62b2ed054409632a5cb78e850c8a1b:reference/map/map/insert_range.md</id>
      <updated>2024-08-05T00:48:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/insert_range.md b/reference/map/map/insert_range.md
new file mode 100644
index 000000000..8a04f8c6d
--- /dev/null
+++ b/reference/map/map/insert_range.md
@@ -0,0 +1,81 @@
+# insert_range
+* map[meta header]
+* std[meta namespace]
+* map[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+void insert_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+Range`rg` の要素を挿入することにより、`map` コンテナを拡張する。
+
+これは、挿入された要素の数だけコンテナの [`size()`](size.md) を増やす。
+
+`map` コンテナは重複したキーを持つ要素を許さないため、挿入操作はそれぞれの要素が他のコンテナ内の既存要素と同じキーかどうかをチェックする。もし同じであれば要素は挿入されない。
+
+重複した値を許す、類似したコンテナについては `multimap` を参照。
+
+内部的に `map` コンテナは、コンストラクト時に指定された比較オブジェクトによって要素を下位から上位へとソートして保持する。
+
+
+## 事前条件
+`*this` の要素の範囲と Range`rg` の要素の範囲が重複していないこと
+
+
+## テンプレートパラメータ制約
+`value_type` は、コンテナに対して `EmplaceConstructible` であること
+
+
+## 戻り値
+なし
+
+
+## 計算量
+`N =` [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)` とすると、`N log (size() + N)` に比例
+
+
+## 備考
+- 関数が呼ばれた後も、当該コンテナ内の要素を指す参照やイテレータは無効にはならない。  
+	なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;map&amp;gt;
+#include &amp;lt;utility&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main ()
+{
+    std::map&amp;lt;char, int&amp;gt; m = {{&amp;#39;A&amp;#39;, 10}, {&amp;#39;B&amp;#39;, 11}};
+
+    std::vector&amp;lt;std::pair&amp;lt;char,int&amp;gt;&amp;gt; v = {{&amp;#39;B&amp;#39;, 11}, {&amp;#39;C&amp;#39;, 12}};
+    m.insert_range(v);
+
+    for (const auto&amp;amp; kv : m) {
+        std::cout &amp;lt;&amp;lt; kv.first &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; kv.second &amp;lt;&amp;lt; std::endl;
+    }
+
+    return 0;
+}
+```
+* insert_range[color ff0000]
+
+### 出力
+```
+A 10
+B 11
+C 12
+```
+
+## 関連項目
+
+| 名前                                           | 説明                                       |
+|------------------------------------------------|--------------------------------------------|
+| [`map::insert`](insert.md)                     | 要素を挿入する                          |
+| [`map::insert_or_assign`](insert_or_assign.md) | 要素を挿入、あるいは代入する               |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>multimap -- add insert_range to std::map and std::multimap (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap.html"/>
      <id>ec423b713f62b2ed054409632a5cb78e850c8a1b:reference/map/multimap.md</id>
      <updated>2024-08-05T00:48:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap.md b/reference/map/multimap.md
index f5aa9fd9d..aece7355c 100644
--- a/reference/map/multimap.md
+++ b/reference/map/multimap.md
@@ -91,6 +91,7 @@ namespace std {
 |-----------------------------------------|----------------------------------|-------|
 | [`clear`](multimap/clear.md)               | 全ての要素を削除する             | |
 | [`insert`](multimap/insert.md)             | 要素を挿入する                   | |
+| [`insert_range`](multimap/insert_range.md) | Rangeの要素を挿入する           | C++23 |
 | [`emplace`](multimap/emplace.md)           | 要素を直接構築する               | C++11 |
 | [`emplace_hint`](multimap/emplace_hint.md) | ヒントを使って要素を直接構築する | C++11 |
 | [`erase`](multimap/erase.md)               | 要素を削除する |                 | |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_range -- add insert_range to std::map and std::multimap (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/insert_range.html"/>
      <id>ec423b713f62b2ed054409632a5cb78e850c8a1b:reference/map/multimap/insert_range.md</id>
      <updated>2024-08-05T00:48:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/insert_range.md b/reference/map/multimap/insert_range.md
new file mode 100644
index 000000000..6e0baca7c
--- /dev/null
+++ b/reference/map/multimap/insert_range.md
@@ -0,0 +1,78 @@
+# insert_range
+* map[meta header]
+* std[meta namespace]
+* multimap[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+void insert_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+Range`rg` の要素を挿入することにより、`multimap` コンテナを拡張する。
+
+これは、挿入された要素の数だけコンテナの [`size()`](size.md) を増やす。
+
+内部的に `multimap` コンテナは、コンストラクト時に指定された比較オブジェクトによって要素を下位から上位へとソートして保持する。
+
+
+## 事前条件
+`*this` の要素の範囲と Range`rg` の要素の範囲が重複していないこと
+
+
+## テンプレートパラメータ制約
+`value_type` は、コンテナに対して `EmplaceConstructible` であること
+
+
+## 戻り値
+なし
+
+
+## 計算量
+`N =` [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)` とすると、`N log (size() + N)` に比例
+
+
+## 備考
+- 関数が呼ばれた後も、当該コンテナ内の要素を指す参照やイテレータは無効にはならない。  
+	なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;map&amp;gt;
+#include &amp;lt;utility&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main ()
+{
+    std::multimap&amp;lt;char, int&amp;gt; m = {{&amp;#39;A&amp;#39;, 10}, {&amp;#39;B&amp;#39;, 11}};
+
+    std::vector&amp;lt;std::pair&amp;lt;char,int&amp;gt;&amp;gt; v = {{&amp;#39;B&amp;#39;, 11}, {&amp;#39;C&amp;#39;, 12}};
+    m.insert_range(v);
+
+    for (const auto&amp;amp; kv : m) {
+        std::cout &amp;lt;&amp;lt; kv.first &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; kv.second &amp;lt;&amp;lt; std::endl;
+    }
+
+    return 0;
+}
+```
+* insert_range[color ff0000]
+
+### 出力
+```
+A 10
+B 11
+B 11
+C 12
+```
+
+
+## 関連項目
+
+| 名前                                           | 説明                                       |
+|------------------------------------------------|--------------------------------------------|
+| [`multimap::insert`](insert.md)                | 要素を挿入する                          |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>priority_queue -- add push_range to std::queue and std::priority_queue (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/queue/priority_queue.html"/>
      <id>47393272dc15f1d53440632c4f4f68c53d26a356:reference/queue/priority_queue.md</id>
      <updated>2024-08-05T00:46:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/queue/priority_queue.md b/reference/queue/priority_queue.md
index 5e92093c2..49c7d4e66 100644
--- a/reference/queue/priority_queue.md
+++ b/reference/queue/priority_queue.md
@@ -49,6 +49,7 @@ namespace std {
 | [`size`](priority_queue/size.md)       | 要素数を取得する | |
 | [`top`](priority_queue/top.md)         | 次の要素にアクセスする | |
 | [`push`](priority_queue/push.md)       | 要素を追加する | |
+| [`push_range`](priority_queue/push_range.md) | Rangeの要素を追加する | C++23 |
 | [`emplace`](priority_queue/emplace.md) | 直接構築で要素を追加する | C++11 |
 | [`pop`](priority_queue/pop.md)         | 次の要素を削除する | |
 | [`swap`](priority_queue/swap.md)       | 他のpriority_queueオブジェクトと値を入れ替える | C++11 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>push_range -- add push_range to std::queue and std::priority_queue (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/queue/priority_queue/push_range.html"/>
      <id>47393272dc15f1d53440632c4f4f68c53d26a356:reference/queue/priority_queue/push_range.md</id>
      <updated>2024-08-05T00:46:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/queue/priority_queue/push_range.md b/reference/queue/priority_queue/push_range.md
new file mode 100644
index 000000000..82e1291b9
--- /dev/null
+++ b/reference/queue/priority_queue/push_range.md
@@ -0,0 +1,63 @@
+# push_range
+* queue[meta header]
+* std[meta namespace]
+* priority_queue[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+void push_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+Range`rg` の各要素を `priority_queue` に追加し、優先順に並べ替えを行う。
+
+
+## 効果
+まず `c` に `rg` の要素を追加する。`c.append_range(forward&amp;lt;R&amp;gt;(rg))` が有効であれば、これで要素を追加する。そうでなければ、`ranges::copy(rg, back_inserter(c))` で要素を追加する。
+
+次に、`make_heap(c.begin(), c.end(), comp)` で優先順に並べ替えを行う。
+
+
+## 戻り値
+なし
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;queue&amp;gt;
+#include &amp;lt;vector&amp;gt;
+ 
+int main()
+{
+    std::priority_queue&amp;lt;int&amp;gt; que;
+    std::vector&amp;lt;int&amp;gt; vec = {2, 1, 3};
+
+    que.push_range(vec);
+
+    while (!que.empty()) {
+        std::cout &amp;lt;&amp;lt; que.top() &amp;lt;&amp;lt; std::endl;
+        que.pop();
+    }
+}
+```
+* push_range[color ff0000]
+* que.empty()[link empty.md]
+* que.top()[link top.md]
+* que.pop()[link pop.md]
+
+### 出力
+```
+3
+2
+1
+```
+
+
+## 関連項目
+
+| 名前              | 説明           |
+|-------------------|----------------|
+| [`push`](push.md) | 要素を追加する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>queue -- add push_range to std::queue and std::priority_queue (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/queue/queue.html"/>
      <id>47393272dc15f1d53440632c4f4f68c53d26a356:reference/queue/queue.md</id>
      <updated>2024-08-05T00:46:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/queue/queue.md b/reference/queue/queue.md
index 20e6c5f7d..d3ae68156 100644
--- a/reference/queue/queue.md
+++ b/reference/queue/queue.md
@@ -44,6 +44,7 @@ namespace std {
 | [`front`](queue/front.md)         | 次の要素にアクセスする | |
 | [`back`](queue/back.md)           | 最後の要素にアクセスする | |
 | [`push`](queue/push.md)           | 要素を追加する | |
+| [`push_range`](queue/push_range.md) | Rangeの要素を追加する | C++23 |
 | [`emplace`](queue/emplace.md)     | 直接構築で要素を追加する | C++11 |
 | [`pop`](queue/pop.md)             | 次の要素を削除する | |
 | [`swap`](queue/swap.md)           | 他の`queue`オブジェクトと値を入れ替える | C++11 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>push_range -- add push_range to std::queue and std::priority_queue (#1069)</title>
      <link href="https://cpprefjp.github.io/reference/queue/queue/push_range.html"/>
      <id>47393272dc15f1d53440632c4f4f68c53d26a356:reference/queue/queue/push_range.md</id>
      <updated>2024-08-05T00:46:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/queue/queue/push_range.md b/reference/queue/queue/push_range.md
new file mode 100644
index 000000000..af2f2c29b
--- /dev/null
+++ b/reference/queue/queue/push_range.md
@@ -0,0 +1,65 @@
+# push_range
+* queue[meta header]
+* std[meta namespace]
+* queue[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;value_type&amp;gt; R&amp;gt;
+void push_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+Range`rg` の各要素を `queue` の末尾に追加する。
+
+
+## 効果
+`c.append_range(forward&amp;lt;R&amp;gt;(rg))` が有効であれば、これと同等。
+そうでなければ、`ranges::copy(rg, back_inserter(c))`。
+
+
+## 戻り値
+なし
+
+
+## 計算量
+`c.append_range(rg)`（または `ranges::copy(rg, back_inserter(c))`）と同じ。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;queue&amp;gt;
+#include &amp;lt;vector&amp;gt;
+ 
+int main()
+{
+    std::queue&amp;lt;int&amp;gt; que;
+    std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3};
+
+    que.push_range(vec);
+
+    while (!que.empty()) {
+        std::cout &amp;lt;&amp;lt; que.front() &amp;lt;&amp;lt; std::endl;
+        que.pop();
+    }
+}
+```
+* push_range[color ff0000]
+* que.empty()[link empty.md]
+* que.front()[link front.md]
+* que.pop()[link pop.md]
+
+### 出力
+```
+1
+2
+3
+```
+
+## 関連項目
+
+| 名前              | 説明           |
+|-------------------|----------------|
+| [`push`](push.md) | 要素を追加する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
</feed>
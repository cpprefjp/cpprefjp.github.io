<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-10-26T01:43:02.149089</updated>
  <id>2a1464bd-d41a-44bb-9d85-7f23d7949aec</id>

  
    <entry>
      <title>コンストラクタ -- 正しくマークアップされていない所があったので修正</title>
      <link href="https://cpprefjp.github.io/reference/chrono/hh_mm_ss/op_constructor.html"/>
      <id>387905bdb30c2fb998d8e98f93136a5e59feb995:reference/chrono/hh_mm_ss/op_constructor.md</id>
      <updated>2021-10-26T10:37:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/hh_mm_ss/op_constructor.md b/reference/chrono/hh_mm_ss/op_constructor.md
index 807a2ebcc..b99cdfbcd 100644
--- a/reference/chrono/hh_mm_ss/op_constructor.md
+++ b/reference/chrono/hh_mm_ss/op_constructor.md
@@ -30,7 +30,7 @@ hh_mm_ss(hh_mm_ss&amp;amp;&amp;amp;);                    // (4) C++20
     - [`duration_cast`](/reference/chrono/duration_cast.md)`&amp;lt;`[`chrono::hours`](/reference/chrono/duration_aliases.md)`&amp;gt;(`[`abs`](/reference/chrono/duration/abs.md)`(d))`で時を構築する
     - [`duration_cast`](/reference/chrono/duration_cast.md)`&amp;lt;`[`chrono::minutes`](/reference/chrono/duration_aliases.md)`&amp;gt;(`[`abs`](/reference/chrono/duration/abs.md)`(d) -` [`hours()`](hours.md)`)`で分を構築する
     - [`duration_cast`](/reference/chrono/duration_cast.md)`&amp;lt;`[`chrono::seconds`](/reference/chrono/duration_aliases.md)`&amp;gt;(`[`abs`](/reference/chrono/duration/abs.md)`(d) -` [`hours()`](hours.md) `-` [`minutes()`](minutes.md)`)`で秒を構築する
-    - [`treat_as_floating_point_v`](/reference/chrono/treat_as_floating_point.md)`&amp;lt;precision::rep&amp;gt;`が`true`である場合、秒未満は`[`abs`](/reference/chrono/duration/abs.md)`(d) -` [`hours()`](hours.md) `-` [`minutes()`](minutes.md)` `-` [`seconds()`](seconds.md)で構築する。そうでなければ、[`duration_cast`](/reference/chrono/duration_cast.md)`&amp;lt;precision&amp;gt;(`[`abs`](/reference/chrono/duration/abs.md)`(d) -` [`hours()`](hours.md) `-` [`minutes()`](minutes.md) `-` [`seconds()`](seconds.md)`)`で秒未満を構築する
+    - [`treat_as_floating_point_v`](/reference/chrono/treat_as_floating_point.md)`&amp;lt;precision::rep&amp;gt;`が`true`である場合、秒未満は[`abs`](/reference/chrono/duration/abs.md)`(d) -` [`hours()`](hours.md) `-` [`minutes()`](minutes.md) `-` [`seconds()`](seconds.md)で構築する。そうでなければ、[`duration_cast`](/reference/chrono/duration_cast.md)`&amp;lt;precision&amp;gt;(`[`abs`](/reference/chrono/duration/abs.md)`(d) -` [`hours()`](hours.md) `-` [`minutes()`](minutes.md) `-` [`seconds()`](seconds.md)`)`で秒未満を構築する
 
 
 ## 事後条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>OGAWA KenIchi</name>
        <email>kenichi@ice.email.ne.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>C++23 -- サイト内のリンクミスを修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp23.html"/>
      <id>35d66e9136b62f1ee38f70b332f1dad0d73fb316:lang/cpp23.md</id>
      <updated>2021-10-25T18:53:58+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C++23&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++23とは、2023年中に改訂される予定の、C++バージョンの通称である。&lt;/p&gt;
&lt;p&gt;このバージョンは、策定中のためC++2bと呼ばれることがある。「(C++20である2020年の次の) 202b年にリリースされる」という伏せ字として「b」が使われているが、3年周期に次のバージョンが策定されることが決まっているため、伏せ字になっている年数がずれることはない。&lt;/p&gt;
&lt;h2&gt;言語機能&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/literal_suffix_for_signed_size_t.html&#34;&gt;(符号付き)&lt;code&gt;size_t&lt;/code&gt;リテラルのためのサフィックス&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;42z&lt;/code&gt;/&lt;code&gt;42Z&lt;/code&gt;とすることで&lt;code&gt;size_t&lt;/code&gt;に対応する符号付き整数型のリテラルとする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/generalized_wording_for_partial_specializations.md.nolink&#34;&gt;部分特殊化の汎用化仕様&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;変数テンプレートの部分特殊化を許可するために部分特殊化の仕様を汎用化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/numeric_and_universal_character_escapes_in_character_and_string_literals.md.nolink&#34;&gt;文字・文字列リテラル中の数値・ユニバーサルキャラクタのエスケープに関する問題解決&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/declarations_and_where_to_find_them.md.nolink&#34;&gt;スコープと名前ルックアップの仕様整理&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複雑で不完全になっているスコープと名前ルックアップの仕様を整理し、一部の問題を解決する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/down_with_lambda_parens.md.nolink&#34;&gt;ラムダ式で&lt;code&gt;()&lt;/code&gt;を省略できる条件を緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャプチャや修飾をともなってもパラメータリストが空であれば&lt;code&gt;()&lt;/code&gt;を省略できる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/if_consteval.md.nolink&#34;&gt;if consteval&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時の文脈かどうかで分岐させる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/narrowing_contextual_conversions_to_bool.md.nolink&#34;&gt;定数式の文脈での&lt;code&gt;bool&lt;/code&gt;への縮小変換を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if constexpr(flags &amp;amp; Flags::Exec)&lt;/code&gt;や&lt;code&gt;static_assert(N);&lt;/code&gt;を許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/trimming_whitespaces_before_line_splicing.md.nolink&#34;&gt;行末スペースを無視するよう規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;行末が&lt;code&gt;\&lt;/code&gt;でおわっていた場合にMSVCは行の継続をしない実装になっていたため動作を共通化するため仕様を規定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/make_declaration_order_layout_mandated.md.nolink&#34;&gt;アクセス制御の異なるメンバ変数のレイアウトを宣言順に規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;アクセス制御の異なるメンバ変数のレイアウトが実装によって異なっていたため仕様を規定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/mixed_string_literal_concatenation.md.nolink&#34;&gt;異なる文字エンコーディングをもつ文字列リテラルの連結を不適格とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;auto a = u8&#34;&#34; L&#34;&#34;;&lt;/code&gt;のような異なる文字エンコーディング同士での文字列リテラルを連結を禁止する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/contract-based_programming.html&#34;&gt;契約に基づくプログラミング (まだ入っていない)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;事前条件、事後条件、表明を宣言する新たな属性構文を追加&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;小さな変更&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/update_normative_reference_to_posix.html&#34;&gt;参照するPOSIX規格を更新&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;新しいPOSIX規格の機能を標準C++が参照していたため、参照するPOSIX規格のバージョンを更新&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブラリ更新の概要&lt;/h2&gt;
&lt;h3&gt;新ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;スタックトレースを取得するためのライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stacktrace.html&#34;&gt;&amp;lt;stacktrace&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;CとC++の間でのアトミック操作の相互運用のため、C互換ライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stdatomic.h.html&#34;&gt;&amp;lt;stdatomic.h&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;外部から提供されるメモリバッファでストリーム処理を行うライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/spanstream.md.nolink&#34;&gt;&amp;lt;spanstream&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;契約違反のハンドリングをするためのライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/contract.html&#34;&gt;&amp;lt;contract&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加 (まだ入っていない)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;コンテナ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stack/stack.html&#34;&gt;std::stack&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/queue/queue.html&#34;&gt;std::queue&lt;/a&gt;&lt;/code&gt;に、イテレータのペアをとるコンストラクタを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto v = std::vector(v, alloc);&lt;/code&gt;のようなアロケータ引数をともなう場合のクラステンプレートのテンプレート引数推論が動作しなかったため、各コンテナクラスのコンストラクタにおけるアロケータパラメータの型を&lt;code&gt;const Allocator&amp;amp;&lt;/code&gt;から&lt;code&gt;const &lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/type_identity.html&#34;&gt;std::type_identity_t&lt;/a&gt;&amp;lt;Allocator&amp;gt;&amp;amp;&lt;/code&gt;に修正&lt;/li&gt;
&lt;li&gt;N要素のメモリアロケート時にアロケータが実際にどれくらいのメモリを確保したかを得られるインタフェースとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;std::allocator&lt;/a&gt;&lt;/code&gt;クラスに、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/allocate_at_least.md.nolink&#34;&gt;allocate_at_least()&lt;/a&gt;&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;std::pair&lt;/a&gt;&lt;/code&gt;の転送コンストラクタにデフォルトテンプレート引数を追加することで、&lt;code&gt;{}&lt;/code&gt;のような型推論ができない引数を渡した場合でも完全転送が行われるよう修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;アルゴリズム&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;に、範囲の先頭が指定した範囲と合致するかを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/starts_with.md.nolink&#34;&gt;std::starts_with()&lt;/a&gt;&lt;/code&gt;、範囲の末尾が指定した範囲と合致するかを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ends_with.md.nolink&#34;&gt;std::ends_with()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;クラスと&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;クラスに、文字列内に指定した文字・文字列が含まれているかを判定するメンバ関数&lt;code&gt;contains()&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;のコンストラクタに、範囲をとるオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::string s = nullptr;&lt;/code&gt;のような文字列オブジェクトに&lt;code&gt;nullptr&lt;/code&gt;を代入するようなコードはバグの元であるため、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstddef/nullptr_t.html&#34;&gt;nullptr_t&lt;/a&gt;&lt;/code&gt;をとるコンストラクタをdelete定義として追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;関数オブジェクト&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/invoke.html&#34;&gt;std::invoke()&lt;/a&gt;&lt;/code&gt;の戻り値型を指定するバージョンである&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/onvoke_r.md.nolink&#34;&gt;std::invoke_r()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;スマートポインタ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/owner_hash.md.nolink&#34;&gt;std::owner_hash&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/owner_equal.md.nolink&#34;&gt;std::owner_equal&lt;/a&gt;&lt;/code&gt;が追加され、非順序連想コンテナのキーとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/weak_ptr.html&#34;&gt;std::weak_ptr&lt;/a&gt;&lt;/code&gt;を使用できるようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に、出力ポインタと入出力ポインタの抽象である&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/out_ptr.md.nolink&#34;&gt;std::out_ptr&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/inout_ptr.md.nolink&#34;&gt;std::inout_ptr&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ユーティリティ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/variant/visit.html&#34;&gt;std::visit()&lt;/a&gt;に指定できるバリアントオブジェクトを、直接的な「&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/variant/variant.html&#34;&gt;std::variant&lt;/a&gt;&lt;/code&gt;型の特殊化であること」という制約を緩和し、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/variant/variant.html&#34;&gt;std::variant&lt;/a&gt;&lt;/code&gt;から派生した型も許可&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;に、列挙値を基底型に変換する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/to_underlying.html&#34;&gt;std::to_underlying()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;型情報&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/typeinfo/type_info.html&#34;&gt;std::type_info&lt;/a&gt;&lt;/code&gt;クラスの&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/typeinfo/type_info/op_equal.html&#34;&gt;operator==&lt;/a&gt;&lt;/code&gt;を&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;型特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、スコープ付き列挙型かを判定する型特性&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_scoped_enum.html&#34;&gt;std::is_scoped_enum&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、第1テンプレート引数についている型修飾を第2テンプレート引数の型に付加する型特性として、以下を追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_const.md.nolink&#34;&gt;std::copy_const&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_volatile.md.nolink&#34;&gt;std::copy_volatile&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_cv.md.nolink&#34;&gt;std::copy_cv&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_reference.md.nolink&#34;&gt;std::copy_reference&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_extent.md.nolink&#34;&gt;std::copy_extent&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_all_extents.md.nolink&#34;&gt;std::copy_all_extents&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_pointer.md.nolink&#34;&gt;std::copy_pointer&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_all_pointers.md.nolink&#34;&gt;std::copy_all_pointers&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_cvref.md.nolink&#34;&gt;std::copy_cvref&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、第1テンプレート引数についている型修飾を外す型特性として、以下を追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/remove_all_pointers.md.nolink&#34;&gt;std::remove_all_pointers&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機能の非推奨化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_storage.html&#34;&gt;std::algined_storage&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_union.html&#34;&gt;std::aligned_union&lt;/a&gt;&lt;/code&gt;を非推奨化。これらの機能は未定義動作を引き起こし、間違った保証が行われ、よくないAPI設計が行われていたため、非推奨となる。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_storage.html&#34;&gt;std::algined_storage&lt;/a&gt;&lt;/code&gt;の代わりに&lt;code&gt;alignas(T) &lt;a href=&#34;https://cpprefjp.github.io/reference/cstddef/byte.html&#34;&gt;std::byte&lt;/a&gt;[sizeof(T)];&lt;/code&gt;を使用することを推奨する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_union.html&#34;&gt;std::aligned_union&lt;/a&gt;&lt;/code&gt;の代わりに&lt;code&gt;alignas(Ts...) &lt;a href=&#34;https://cpprefjp.github.io/reference/cstddef/byte.html&#34;&gt;std::byte&lt;/a&gt;[&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/max.html&#34;&gt;std::max&lt;/a&gt;({sizeof(Ts)...})];&lt;/code&gt;を使用することを推奨する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機能の削除&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ガベージコレクションの実装にうまく役立てられなかった、ガベージコレクション実装のサポートをする以下の機能を削除する：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/declare_reachable.html&#34;&gt;std::declare_reachable()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/undeclare_reachable.html&#34;&gt;std::undeclare_reachable()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/declare_no_pointers.html&#34;&gt;std::declare_no_pointers()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/undeclare_no_pointers.html&#34;&gt;std::undeclare_no_pointers()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/get_pointer_safety.html&#34;&gt;std::get_pointer_safety()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/pointer_safety.html&#34;&gt;std::pointer_safety&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__STDCPP_STRICT_POINTER_SAFETY__&lt;/code&gt;マクロ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>OGAWA KenIchi</name>
        <email>kenichi@ice.email.ne.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>operator/ -- サイト内のリンクミスを修正</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration/op_divide.html"/>
      <id>35d66e9136b62f1ee38f70b332f1dad0d73fb316:reference/chrono/duration/op_divide.md</id>
      <updated>2021-10-25T18:53:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration/op_divide.md b/reference/chrono/duration/op_divide.md
index f0f7fea44..1e756946b 100644
--- a/reference/chrono/duration/op_divide.md
+++ b/reference/chrono/duration/op_divide.md
@@ -30,7 +30,7 @@ namespace chrono {
 
 
 ## テンプレートパラメータ制約
-- (1) : [`is_convertible_v`](/reference/chrono/d)`&amp;lt;const Rep2&amp;amp;,` [`common_type_t`](/reference/type_traits/common_type.md)`&amp;lt;Rep1, Rep2&amp;gt;&amp;gt;`が`true`であり、かつ`Rep2`が`duration`の特殊化でないこと
+- (1) : [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const Rep2&amp;amp;,` [`common_type_t`](/reference/type_traits/common_type.md)`&amp;lt;Rep1, Rep2&amp;gt;&amp;gt;`が`true`であり、かつ`Rep2`が`duration`の特殊化でないこと
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>OGAWA KenIchi</name>
        <email>kenichi@ice.email.ne.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>operator% -- サイト内のリンクミスを修正</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration/op_modulo.html"/>
      <id>35d66e9136b62f1ee38f70b332f1dad0d73fb316:reference/chrono/duration/op_modulo.md</id>
      <updated>2021-10-25T18:53:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration/op_modulo.md b/reference/chrono/duration/op_modulo.md
index cef6f2ac6..1a74343b0 100644
--- a/reference/chrono/duration/op_modulo.md
+++ b/reference/chrono/duration/op_modulo.md
@@ -26,7 +26,7 @@ durationの剰余演算を行う
 
 
 ## テンプレートパラメータ制約
-- (1) : [`is_convertible_v`](/reference/chrono/d)`&amp;lt;const Rep2&amp;amp;,` [`common_type_t`](/reference/type_traits/common_type.md)`&amp;lt;Rep1, Rep2&amp;gt;&amp;gt;`が`true`であり、かつ`Rep2`が`duration`の特殊化でないこと
+- (1) : [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const Rep2&amp;amp;,` [`common_type_t`](/reference/type_traits/common_type.md)`&amp;lt;Rep1, Rep2&amp;gt;&amp;gt;`が`true`であり、かつ`Rep2`が`duration`の特殊化でないこと
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>OGAWA KenIchi</name>
        <email>kenichi@ice.email.ne.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- サイト内のリンクミスを修正</title>
      <link href="https://cpprefjp.github.io/reference/chrono/hh_mm_ss/op_constructor.html"/>
      <id>35d66e9136b62f1ee38f70b332f1dad0d73fb316:reference/chrono/hh_mm_ss/op_constructor.md</id>
      <updated>2021-10-25T18:53:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/hh_mm_ss/op_constructor.md b/reference/chrono/hh_mm_ss/op_constructor.md
index dcade40df..807a2ebcc 100644
--- a/reference/chrono/hh_mm_ss/op_constructor.md
+++ b/reference/chrono/hh_mm_ss/op_constructor.md
@@ -27,10 +27,10 @@ hh_mm_ss(hh_mm_ss&amp;amp;&amp;amp;);                    // (4) C++20
 - (1) : `Duration`型の値ゼロで時間を構築する
 - (2) : `precision`型の精度で`Duration d`をもつ`hh_mm_ss`オブジェクトを構築する
     - `d &amp;lt; Duration::`[`zero()`](/reference/chrono/duration/zero.md)である場合、負の時間とみなし[`is_negative()`](is_negative.md)が`true`を返すようにする
-    - [`duration_cast`](/reference/chrono/duration_cast.md)`&amp;lt;`[`chrono::hours`](/reference/chrono/duration_aliases.md)`&amp;gt;(`[`abs`](/reference/chrono/duration/abs.ms)`(d))`で時を構築する
-    - [`duration_cast`](/reference/chrono/duration_cast.md)`&amp;lt;`[`chrono::minutes`](/reference/chrono/duration_aliases.md)`&amp;gt;(`[`abs`](/reference/chrono/duration/abs.ms)`(d) -` [`hours()`](hours.md)`)`で分を構築する
-    - [`duration_cast`](/reference/chrono/duration_cast.md)`&amp;lt;`[`chrono::seconds`](/reference/chrono/duration_aliases.md)`&amp;gt;(`[`abs`](/reference/chrono/duration/abs.ms)`(d) -` [`hours()`](hours.md) `-` [`minutes()`](minutes.md)`)`で秒を構築する
-    - [`treat_as_floating_point_v`](/reference/chrono/treat_as_floating_point.md)`&amp;lt;precision::rep&amp;gt;`が`true`である場合、秒未満は`[`abs`](/reference/chrono/duration/abs.ms)`(d) -` [`hours()`](hours.md) `-` [`minutes()`](minutes.md)` `-` [`seconds()`](seconds.md)で構築する。そうでなければ、[`duration_cast`](/reference/chrono/duration_cast.md)`&amp;lt;precision&amp;gt;(`[`abs`](/reference/chrono/duration/abs.ms)`(d) -` [`hours()`](hours.md) `-` [`minutes()`](minutes.md) `-` [`seconds()`](seconds.md)`)`で秒未満を構築する
+    - [`duration_cast`](/reference/chrono/duration_cast.md)`&amp;lt;`[`chrono::hours`](/reference/chrono/duration_aliases.md)`&amp;gt;(`[`abs`](/reference/chrono/duration/abs.md)`(d))`で時を構築する
+    - [`duration_cast`](/reference/chrono/duration_cast.md)`&amp;lt;`[`chrono::minutes`](/reference/chrono/duration_aliases.md)`&amp;gt;(`[`abs`](/reference/chrono/duration/abs.md)`(d) -` [`hours()`](hours.md)`)`で分を構築する
+    - [`duration_cast`](/reference/chrono/duration_cast.md)`&amp;lt;`[`chrono::seconds`](/reference/chrono/duration_aliases.md)`&amp;gt;(`[`abs`](/reference/chrono/duration/abs.md)`(d) -` [`hours()`](hours.md) `-` [`minutes()`](minutes.md)`)`で秒を構築する
+    - [`treat_as_floating_point_v`](/reference/chrono/treat_as_floating_point.md)`&amp;lt;precision::rep&amp;gt;`が`true`である場合、秒未満は`[`abs`](/reference/chrono/duration/abs.md)`(d) -` [`hours()`](hours.md) `-` [`minutes()`](minutes.md)` `-` [`seconds()`](seconds.md)で構築する。そうでなければ、[`duration_cast`](/reference/chrono/duration_cast.md)`&amp;lt;precision&amp;gt;(`[`abs`](/reference/chrono/duration/abs.md)`(d) -` [`hours()`](hours.md) `-` [`minutes()`](minutes.md) `-` [`seconds()`](seconds.md)`)`で秒未満を構築する
 
 
 ## 事後条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>OGAWA KenIchi</name>
        <email>kenichi@ice.email.ne.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- サイト内のリンクミスを修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/common_iterator/op_assign.html"/>
      <id>35d66e9136b62f1ee38f70b332f1dad0d73fb316:reference/iterator/common_iterator/op_assign.md</id>
      <updated>2021-10-25T18:53:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/common_iterator/op_assign.md b/reference/iterator/common_iterator/op_assign.md
index c1c6d36b5..3b4f49d78 100644
--- a/reference/iterator/common_iterator/op_assign.md
+++ b/reference/iterator/common_iterator/op_assign.md
@@ -20,7 +20,7 @@ common_iterator&amp;amp; operator=(const common_iterator&amp;lt;I2, S2&amp;gt;&amp;amp; x);
 
 ## 事前条件
 
-`x.v_.`[`valueless_by_exception`](/reference/variant/variant/valueless_by_exception)`() == false`であること。
+`x.v_.`[`valueless_by_exception`](/reference/variant/variant/valueless_by_exception.md)`() == false`であること。
 
 ## 効果
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>OGAWA KenIchi</name>
        <email>kenichi@ice.email.ne.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- サイト内のリンクミスを修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/common_iterator/op_constructor.html"/>
      <id>35d66e9136b62f1ee38f70b332f1dad0d73fb316:reference/iterator/common_iterator/op_constructor.md</id>
      <updated>2021-10-25T18:53:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/common_iterator/op_constructor.md b/reference/iterator/common_iterator/op_constructor.md
index c6723f272..a557717e3 100644
--- a/reference/iterator/common_iterator/op_constructor.md
+++ b/reference/iterator/common_iterator/op_constructor.md
@@ -25,7 +25,7 @@ constexpr common_iterator(const common_iterator&amp;lt;I2, S2&amp;gt;&amp;amp; x);  // (4)
 
 ## 事前条件
 
-- (4) : `x.v_.`[`valueless_by_exception`](/reference/variant/variant/valueless_by_exception)`() == false`であること。
+- (4) : `x.v_.`[`valueless_by_exception`](/reference/variant/variant/valueless_by_exception.md)`() == false`であること。
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>OGAWA KenIchi</name>
        <email>kenichi@ice.email.ne.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>indirectly_writable -- サイト内のリンクミスを修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/indirectly_writable.html"/>
      <id>35d66e9136b62f1ee38f70b332f1dad0d73fb316:reference/iterator/indirectly_writable.md</id>
      <updated>2021-10-25T18:53:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/indirectly_writable.md b/reference/iterator/indirectly_writable.md
index 1f770f0fe..5db006858 100644
--- a/reference/iterator/indirectly_writable.md
+++ b/reference/iterator/indirectly_writable.md
@@ -40,7 +40,7 @@ namespace std {
 ```cpp
 indirectly_readable&amp;lt;Out&amp;gt; &amp;amp;&amp;amp; same_as&amp;lt;iter_value_t&amp;lt;Out&amp;gt;, decay_t&amp;lt;T&amp;gt;&amp;gt;
 ```
-* indirectly_readable[link indirectly_readablemd]
+* indirectly_readable[link indirectly_readable.md]
 * same_as[link /reference/concepts/same_as.md]
 * iter_value_t[link /reference/iterator/iter_value_t.md]
 * decay_t[link /reference/type_traits/decay.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>OGAWA KenIchi</name>
        <email>kenichi@ice.email.ne.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>operator- -- 戻り値の説明の番号を修正</title>
      <link href="https://cpprefjp.github.io/reference/chrono/time_point/op_minus.html"/>
      <id>4549d14dec58bddd260bccac91fe9e26245dd27a:reference/chrono/time_point/op_minus.md</id>
      <updated>2021-10-25T15:36:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/time_point/op_minus.md b/reference/chrono/time_point/op_minus.md
index 8cc3ef888..5ee318618 100644
--- a/reference/chrono/time_point/op_minus.md
+++ b/reference/chrono/time_point/op_minus.md
@@ -41,13 +41,13 @@ namespace chrono {
 
 
 ## 戻り値
-- (2)
+- (1)
 
 ```cpp
 return lhs + (-rhs);
 ```
 
-- (3)
+- (2)
 
 ```cpp
 return lhs.time_since_epoch() - rhs.time_since_epoch();
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>OGAWA KenIchi</name>
        <email>kenichi@ice.email.ne.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>lazy_split_view -- Fix typo</title>
      <link href="https://cpprefjp.github.io/reference/ranges/lazy_split_view.html"/>
      <id>5963e9fefc55ae02dab2126f46b4308ae821dd9a:reference/ranges/lazy_split_view.md</id>
      <updated>2021-10-25T00:06:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/lazy_split_view.md b/reference/ranges/lazy_split_view.md
index 221672692..136697d65 100644
--- a/reference/ranges/lazy_split_view.md
+++ b/reference/ranges/lazy_split_view.md
@@ -1,4 +1,4 @@
-# lazy_spliy_view
+# lazy_split_view
 * ranges[meta header]
 * std::ranges[meta namespace]
 * class template[meta id-type]
@@ -11,10 +11,10 @@ namespace std::ranges {
     requires view&amp;lt;V&amp;gt; &amp;amp;&amp;amp; view&amp;lt;Pattern&amp;gt; &amp;amp;&amp;amp;
              indirectly_comparable&amp;lt;iterator_t&amp;lt;V&amp;gt;, iterator_t&amp;lt;Pattern&amp;gt;, ranges::equal_to&amp;gt; &amp;amp;&amp;amp;
              (forward_range&amp;lt;V&amp;gt; || tiny-range&amp;lt;Pattern&amp;gt;)
-  class lazy_spliy_view : public view_interface&amp;lt;lazy_spliy_view&amp;lt;V, Pattern&amp;gt;&amp;gt; { …… };   // (1)
+  class lazy_split_view : public view_interface&amp;lt;lazy_split_view&amp;lt;V, Pattern&amp;gt;&amp;gt; { …… };   // (1)
 
   namespace views {
-    inline constexpr /*unspecified*/ lazy_spliy = /*unspecified*/;                     // (2)
+    inline constexpr /*unspecified*/ lazy_split = /*unspecified*/;                     // (2)
   }
 }
 ```
@@ -78,10 +78,10 @@ concept tiny-range = sized_range&amp;lt;R&amp;gt; &amp;amp;&amp;amp;
 
 | 名前                                             | 説明                             | 対応バージョン |
 |--------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](lazy_spliy_view/op_constructor.md.nolink)  | コンストラクタ                   | C++20          |
-| [`base`](lazy_spliy_view/base.md.nolink)                     | `V`の参照を取得する              | C++20          |
-| [`begin`](lazy_spliy_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
-| [`end`](lazy_spliy_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
+| [`(constructor)`](lazy_split_view/op_constructor.md.nolink)  | コンストラクタ                   | C++20          |
+| [`base`](lazy_split_view/base.md.nolink)                     | `V`の参照を取得する              | C++20          |
+| [`begin`](lazy_split_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
+| [`end`](lazy_split_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
 
 ## 継承しているメンバ関数
 
@@ -96,7 +96,7 @@ concept tiny-range = sized_range&amp;lt;R&amp;gt; &amp;amp;&amp;amp;
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](lazy_spliy_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+| [`(deduction_guide)`](lazy_split_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>split_view -- Fix typo</title>
      <link href="https://cpprefjp.github.io/reference/ranges/split_view.html"/>
      <id>5963e9fefc55ae02dab2126f46b4308ae821dd9a:reference/ranges/split_view.md</id>
      <updated>2021-10-25T00:06:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/split_view.md b/reference/ranges/split_view.md
index 711fe7306..0965e6de7 100644
--- a/reference/ranges/split_view.md
+++ b/reference/ranges/split_view.md
@@ -58,10 +58,10 @@ namespace std::ranges {
 
 | 名前                                             | 説明                             | 対応バージョン |
 |--------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](spliy_view/op_constructor.md.nolink)  | コンストラクタ                   | C++20          |
-| [`base`](spliy_view/base.md.nolink)                     | `V`の参照を取得する              | C++20          |
-| [`begin`](spliy_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
-| [`end`](spliy_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
+| [`(constructor)`](split_view/op_constructor.md.nolink)  | コンストラクタ                   | C++20          |
+| [`base`](split_view/base.md.nolink)                     | `V`の参照を取得する              | C++20          |
+| [`begin`](split_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
+| [`end`](split_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
 
 ## 継承しているメンバ関数
 
@@ -76,7 +76,7 @@ namespace std::ranges {
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](spliy_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+| [`(deduction_guide)`](split_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator[] -- unordered_map::operator[] の引数を const&amp;&amp; から &amp;&amp; に修正</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/op_at.html"/>
      <id>bba4e5928ca129eebc7b543e7756278672aedb04:reference/unordered_map/unordered_map/op_at.md</id>
      <updated>2021-10-23T23:18:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/op_at.md b/reference/unordered_map/unordered_map/op_at.md
index 0e1d19257..d4f1bdcd7 100644
--- a/reference/unordered_map/unordered_map/op_at.md
+++ b/reference/unordered_map/unordered_map/op_at.md
@@ -7,7 +7,7 @@
 
 ```cpp
 T&amp;amp; operator[](const key_type&amp;amp; x);
-T&amp;amp; operator[](const key_type&amp;amp;&amp;amp; x);
+T&amp;amp; operator[](key_type&amp;amp;&amp;amp; x);
 ```
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>KodaiYM</name>
        <email>63711002+KodaiYM@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2017-09-14T06:01:28.001093</updated>
  <id>74354019-f358-4d59-b662-009e1e2b3ac0</id>

  
    <entry>
      <title>ranlux24 -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site
</title>
      <link href="https://cpprefjp.github.io/reference/random/ranlux24.html"/>
      <id>c00b31bb8ffbb6b34053aa40cd412a19800d2b3e:reference/random/ranlux24.md</id>
      <updated>2017-09-14T06:00:49+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;type-alias&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;random&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;ranlux24&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ranlux24&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/discard_block_engine.html&#34;&gt;discard_block_engine&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/ranlux24_base.html&#34;&gt;ranlux24_base&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;223&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ranlux24&lt;/code&gt;は、贅沢さレベル3のRANLUX(LUXury RANdom numbers)法エンジンである。&lt;br /&gt;
RANLUX法は、以下の特徴を持つ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;低速だが、高品質な乱数を生成する&lt;/li&gt;
&lt;li&gt;シードを系統的に選ぶ (例えばスレッド ID) と、特に初期において生成した値の間に線型の相関 (nearly affine dependence) がみられる。これを避けるには&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/random_device.html&#34;&gt;random_device&lt;/a&gt;&lt;/code&gt; 等の非決定論的な乱数をシードとして使う&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/discard_block_engine/discard.html&#34;&gt;最初の方の値を捨てる&lt;/a&gt; (少なくとも 2 × 23 = 46 個)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RANLUX法は、0から4までの贅沢さレベル(luxury level)が選択可能である。&lt;br /&gt;
レベルを高くするほど低速になるが、乱数の品質は高くなる。レベル4が最高品質となる。&lt;br /&gt;
標準では、レベル3の&lt;code&gt;ranlux24&lt;/code&gt;および、レベル4の&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/ranlux48.html&#34;&gt;ranlux48&lt;/a&gt;&lt;/code&gt;が定義される。  &lt;/p&gt;
&lt;p&gt;モンテカルロ法によるシミュレーションに、よく使用される。  &lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ranlux24&lt;/code&gt;型オブジェクトをデフォルト構築した場合、10000番目に生成される擬似乱数の値は&lt;code&gt;9901578&lt;/code&gt;であること。&lt;/p&gt;
&lt;h2&gt;乱数列の周期&lt;/h2&gt;
&lt;p&gt;10&lt;sup&gt;171&lt;/sup&gt;&lt;/p&gt;
&lt;h2&gt;サイズ&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdint/uint_fast32_t.html&#34;&gt;uint_fast32_t&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;パフォーマンス&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/minstd_rand.html&#34;&gt;minstd_rand&lt;/a&gt;&lt;/code&gt;や&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/minstd_rand0.html&#34;&gt;minstd_rand0&lt;/a&gt;&lt;/code&gt;に比べて、5倍ほど遅い。&lt;/p&gt;
&lt;h2&gt;シード、および生成される値の型&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdint/uint_fast32_t.html&#34;&gt;uint_fast32_t&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/random_device.html&#34;&gt;std::random_device&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seed_gen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;std::ranlux24&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;engine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/random_device/op_call.html&#34;&gt;seed_gen()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdint/uint32_t.html&#34;&gt;std::uint32_t&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/discard_block_engine/op_call.html&#34;&gt;engine()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;14989051
4145629
9009933
15957878
252315
15191713
10652539
8111899
16296385
3893002
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.7.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 10.0, 11.0, 12.0, 14.0, 14.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1398.html&#34; target=&#34;_blank&#34;&gt;N1398 A Proposal to Add an Extensible Random Number Facility to the Standard Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wwwasdoc.web.cern.ch/wwwasdoc/shortwrupsdir/v115/top.html&#34; target=&#34;_blank&#34;&gt;Uniform Random Numbers of Guaranteed Quality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://doi.org/10.1145/1276927.1276928&#34; target=&#34;_blank&#34;&gt;M. Matsumoto, et al., Common Defects in Initialization of Pseudorandom Number Generators, &lt;em&gt;ACM Trans. Model. Comput. Simul.&lt;/em&gt; &lt;strong&gt;17&lt;/strong&gt;, 15 (2007)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>ranlux48 -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site
</title>
      <link href="https://cpprefjp.github.io/reference/random/ranlux48.html"/>
      <id>c00b31bb8ffbb6b34053aa40cd412a19800d2b3e:reference/random/ranlux48.md</id>
      <updated>2017-09-14T06:00:49+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;type-alias&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;random&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;ranlux48&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ranlux48&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/discard_block_engine.html&#34;&gt;discard_block_engine&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/ranlux48_base.html&#34;&gt;ranlux48_base&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;389&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ranlux48&lt;/code&gt;は、贅沢さレベル4のRANLUX(LUXury RANdom numbers)法エンジンである。&lt;br /&gt;
RANLUX法は、以下の特徴を持つ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;低速だが、高品質な乱数を生成する&lt;/li&gt;
&lt;li&gt;シードを系統的に選ぶ (例えばスレッド ID) と、特に初期において生成した値の間に線型の相関 (nearly affine dependence) がみられる。これを避けるには&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/random_device.html&#34;&gt;random_device&lt;/a&gt;&lt;/code&gt; 等の非決定論的な乱数をシードとして使う&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/discard_block_engine/discard.html&#34;&gt;最初の方の値を捨てる&lt;/a&gt; (少なくとも 11 個)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RANLUX法は、0から4までの贅沢さレベル(luxury level)が選択可能である。&lt;br /&gt;
レベルを高くするほど低速になるが、乱数の品質は高くなる。レベル4が最高品質となる。&lt;br /&gt;
標準では、レベル3の&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/ranlux24.html&#34;&gt;ranlux24&lt;/a&gt;&lt;/code&gt;および、レベル4の&lt;code&gt;ranlux48&lt;/code&gt;が定義される。  &lt;/p&gt;
&lt;p&gt;モンテカルロ法によるシミュレーションに、よく使用される。  &lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ranlux48&lt;/code&gt;型オブジェクトをデフォルト構築した場合、10000番目に生成される擬似乱数の値は&lt;code&gt;249142670248501&lt;/code&gt;であること。&lt;/p&gt;
&lt;h2&gt;乱数列の周期&lt;/h2&gt;
&lt;p&gt;10&lt;sup&gt;171&lt;/sup&gt;&lt;/p&gt;
&lt;h2&gt;サイズ&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdint/uint_fast64_t.html&#34;&gt;uint_fast64_t&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;パフォーマンス&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/ranlux24.html&#34;&gt;ranlux24&lt;/a&gt;&lt;/code&gt;に比べて、40%ほど遅い。&lt;/p&gt;
&lt;h2&gt;シード、および生成される値の型&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdint/uint_fast64_t.html&#34;&gt;uint_fast64_t&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/random_device.html&#34;&gt;std::random_device&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seed_gen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;std::ranlux48&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;engine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/random_device/op_call.html&#34;&gt;seed_gen()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdint/uint64_t.html&#34;&gt;std::uint64_t&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/discard_block_engine/op_call.html&#34;&gt;engine()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;150487143042812
271824176483188
144262504480630
41969914011396
182011784013906
108124382624549
17607643147140
165775445584215
85439168429936
199504771218332
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.7.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 10.0, 11.0, 12.0, 14.0, 14.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1398.html&#34; target=&#34;_blank&#34;&gt;N1398 A Proposal to Add an Extensible Random Number Facility to the Standard Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wwwasdoc.web.cern.ch/wwwasdoc/shortwrupsdir/v115/top.html&#34; target=&#34;_blank&#34;&gt;Uniform Random Numbers of Guaranteed Quality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://doi.org/10.1145/1276927.1276928&#34; target=&#34;_blank&#34;&gt;M. Matsumoto, et al., Common Defects in Initialization of Pseudorandom Number Generators, &lt;em&gt;ACM Trans. Model. Comput. Simul.&lt;/em&gt; &lt;strong&gt;17&lt;/strong&gt;, 15 (2007)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>subtract_with_carry_engine -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site
</title>
      <link href="https://cpprefjp.github.io/reference/random/subtract_with_carry_engine.html"/>
      <id>c00b31bb8ffbb6b34053aa40cd412a19800d2b3e:reference/random/subtract_with_carry_engine.md</id>
      <updated>2017-09-14T06:00:49+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;random&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;subtract_with_carry_engine&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UIntType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;subtract_with_carry_engine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/ranlux24_base.html&#34;&gt;ranlux24_base&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;…&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/ranlux48_base.html&#34;&gt;ranlux48_base&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;…&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/ranlux24.html&#34;&gt;ranlux24&lt;/a&gt;&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;…&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/ranlux48.html&#34;&gt;ranlux48&lt;/a&gt;&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;…&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;subtract_with_carry_engine&lt;/code&gt;クラスは、&lt;a href=&#34;https://en.wikipedia.org/wiki/Subtract_with_carry&#34; target=&#34;_blank&#34;&gt;キャリー付き減算法&lt;/a&gt;による擬似乱数生成エンジンである。&lt;/p&gt;
&lt;p&gt;テンプレートパラメータの意味は以下の通り:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UIntType&lt;/code&gt;: 生成する符号なし整数の型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;w&lt;/code&gt;: ワードサイズ。&lt;code&gt;0 &amp;lt; w &amp;lt;=&lt;a href=&#34;https://cpprefjp.github.io/reference/limits/numeric_limits.html&#34;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;UIntType&amp;gt;::&lt;a href=&#34;https://cpprefjp.github.io/reference/limits/numeric_limits/digits.html&#34;&gt;digits&lt;/a&gt;&lt;/code&gt; でなければならない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt;: 短いラグ。&lt;code&gt;0 &amp;lt; s &amp;lt; r&lt;/code&gt; でなければならない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt;: 長いラグ。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;キャリー付き減算法は、以下の特徴を持つ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/mersenne_twister_engine.html&#34;&gt;メルセンヌ・ツイスター&lt;/a&gt;より周期が短い(10&lt;sup&gt;171&lt;/sup&gt;)が軽量。&lt;/li&gt;
&lt;li&gt;シードを系統的に選ぶ (例えばスレッド ID) と、特に初期において生成した値の間に線型の相関 (nearly affine dependence) がみられる。これを避けるには&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/random_device.html&#34;&gt;random_device&lt;/a&gt;&lt;/code&gt; 等の非決定論的な乱数をシードとして使う&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/discard.html&#34;&gt;最初の方の値を捨てる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この生成法は、RANLUX (LUXury RANdom numbers) 法の実装にも使われる。&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;h3&gt;構築・シード&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/op_constructor.html&#34;&gt;(constructor)&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;~subtract_with_carry_engine() = default;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/seed.html&#34;&gt;seed&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シードを設定する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;生成&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/op_call.html&#34;&gt;operator()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;擬似乱数を生成する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/discard.html&#34;&gt;discard&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定した回数だけ擬似乱数を生成し、内部状態を進める&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;静的メンバ関数&lt;/h2&gt;
&lt;h3&gt;エンジンの特性&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/min.html&#34;&gt;min&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;生成し得る値の最小値を取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/max.html&#34;&gt;max&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;生成し得る値の最大値を取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;result_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;擬似乱数生成結果の符号なし整数型 &lt;code&gt;UIntType&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ定数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;定数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static constexpr size_t word_size&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワードサイズ。状態シーケンス内での各ワードのビット数。テンプレートパラメータ&lt;code&gt;w&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static constexpr size_t short_lag&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;短いラグ。進める要素数。テンプレートパラメータ&lt;code&gt;s&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static constexpr size_t long_lag&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;長いラグ。オペランドの値間の距離。テンプレートパラメータ&lt;code&gt;r&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static constexpr result_type default_seed&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デフォルトのシード値。&lt;code&gt;19780503u&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/op_equal.html&#34;&gt;operator==&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/op_not_equal.html&#34;&gt;operator!=&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/op_ostream.html&#34;&gt;operator&amp;lt;&amp;lt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストリームへの出力&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/op_istream.html&#34;&gt;operator&amp;gt;&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストリームからの入力&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;cstdint&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/random_device.html&#34;&gt;std::random_device&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seed_gen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// subtract_with_carry_engineのパラメータ設定済み別名であるranlux24_baseを使用する。&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ランダムなシードを使用して初期化&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;std::ranlux24_base&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;engine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/random_device/op_call.html&#34;&gt;seed_gen()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 乱数を生成&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdint/uint32_t.html&#34;&gt;std::uint32_t&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/op_call.html&#34;&gt;engine()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;5880757
13095533
1545433
15249896
3512432
2193500
7368389
13589182
9374747
13701319
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.7.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 10.0, 11.0, 12.0, 14.0, 14.1&lt;ul&gt;
&lt;li&gt;9.0には、&lt;code&gt;std::tr1::subtract_with_carry&lt;/code&gt;が存在する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Subtract_with_carry&#34; target=&#34;_blank&#34;&gt;Subtract with carry - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://projecteuclid.org/DPubS?service=UI&amp;amp;version=1.0&amp;amp;verb=Display&amp;amp;handle=euclid.aoap/1177005878&#34; target=&#34;_blank&#34;&gt;A New Class of Random Number Generators&lt;/a&gt;, George Marsaglia and Arif Zaman, The Annals of Applied Probability, Vol. 1, No. 3, 1991&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://doi.org/10.1145/1276927.1276928&#34; target=&#34;_blank&#34;&gt;M. Matsumoto, et al., Common Defects in Initialization of Pseudorandom Number Generators, &lt;em&gt;ACM Trans. Model. Comput. Simul.&lt;/em&gt; &lt;strong&gt;17&lt;/strong&gt;, 15 (2007)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>ranlux24 -- RANLUX に関する記述を修正 (fix #468)</title>
      <link href="https://cpprefjp.github.io/reference/random/ranlux24.html"/>
      <id>43a4b34aaffa5dcbce035b6b620b0575c309ee19:reference/random/ranlux24.md</id>
      <updated>2017-09-14T05:52:16+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;type-alias&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;random&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;ranlux24&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ranlux24&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/discard_block_engine.html&#34;&gt;discard_block_engine&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/ranlux24_base.html&#34;&gt;ranlux24_base&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;223&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ranlux24&lt;/code&gt;は、贅沢さレベル3のRANLUX(LUXury RANdom numbers)法エンジンである。&lt;br /&gt;
RANLUX法は、以下の特徴を持つ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;低速だが、高品質な乱数を生成する&lt;/li&gt;
&lt;li&gt;シードを系統的に選ぶ (例えばスレッド ID) と、特に初期において生成した値の間に線型の相関 (nearly affine dependence) がみられる。これを避けるには&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/random_device.html&#34;&gt;random_device&lt;/a&gt;&lt;/code&gt; 等の非決定論的な乱数をシードとして使う&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/discard_block_engine/discard.html&#34;&gt;最初の方の値を捨てる&lt;/a&gt; (少なくとも 2 × 23 = 46 個)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RANLUX法は、0から4までの贅沢さレベル(luxury level)が選択可能である。&lt;br /&gt;
レベルを高くするほど低速になるが、乱数の品質は高くなる。レベル4が最高品質となる。&lt;br /&gt;
標準では、レベル3の&lt;code&gt;ranlux24&lt;/code&gt;および、レベル4の&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/ranlux48.html&#34;&gt;ranlux48&lt;/a&gt;&lt;/code&gt;が定義される。  &lt;/p&gt;
&lt;p&gt;モンテカルロ法によるシミュレーションに、よく使用される。  &lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ranlux24&lt;/code&gt;型オブジェクトをデフォルト構築した場合、10000番目に生成される擬似乱数の値は&lt;code&gt;9901578&lt;/code&gt;であること。&lt;/p&gt;
&lt;h2&gt;乱数列の周期&lt;/h2&gt;
&lt;p&gt;10&lt;sup&gt;171&lt;/sup&gt;&lt;/p&gt;
&lt;h2&gt;サイズ&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdint/uint_fast32_t.html&#34;&gt;uint_fast32_t&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;パフォーマンス&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/minstd_rand.html&#34;&gt;minstd_rand&lt;/a&gt;&lt;/code&gt;や&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/minstd_rand0.html&#34;&gt;minstd_rand0&lt;/a&gt;&lt;/code&gt;に比べて、5倍ほど遅い。&lt;/p&gt;
&lt;h2&gt;シード、および生成される値の型&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdint/uint_fast32_t.html&#34;&gt;uint_fast32_t&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/random_device.html&#34;&gt;std::random_device&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seed_gen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;std::ranlux24&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;engine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/random_device/op_call.html&#34;&gt;seed_gen()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdint/uint32_t.html&#34;&gt;std::uint32_t&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/discard_block_engine/op_call.html&#34;&gt;engine()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;14989051
4145629
9009933
15957878
252315
15191713
10652539
8111899
16296385
3893002
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.7.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 10.0, 11.0, 12.0, 14.0, 14.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1398.html&#34; target=&#34;_blank&#34;&gt;N1398 A Proposal to Add an Extensible Random Number Facility to the Standard Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wwwasdoc.web.cern.ch/wwwasdoc/shortwrupsdir/v115/top.html&#34; target=&#34;_blank&#34;&gt;Uniform Random Numbers of Guaranteed Quality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://doi.org/10.1145/1276927.1276928&#34; target=&#34;_blank&#34;&gt;M. Matsumoto, et al., Common Defects in Initialization of Pseudorandom Number Generators, &lt;em&gt;ACM Trans. Model. Comput. Simul.&lt;/em&gt; &lt;strong&gt;17&lt;/strong&gt;, 15 (2007)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>E Kawashima</name>
        <email>e-kwsm@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranlux48 -- RANLUX に関する記述を修正 (fix #468)</title>
      <link href="https://cpprefjp.github.io/reference/random/ranlux48.html"/>
      <id>43a4b34aaffa5dcbce035b6b620b0575c309ee19:reference/random/ranlux48.md</id>
      <updated>2017-09-14T05:52:16+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;type-alias&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;random&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;ranlux48&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ranlux48&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/discard_block_engine.html&#34;&gt;discard_block_engine&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/ranlux48_base.html&#34;&gt;ranlux48_base&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;389&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ranlux48&lt;/code&gt;は、贅沢さレベル4のRANLUX(LUXury RANdom numbers)法エンジンである。&lt;br /&gt;
RANLUX法は、以下の特徴を持つ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;低速だが、高品質な乱数を生成する&lt;/li&gt;
&lt;li&gt;シードを系統的に選ぶ (例えばスレッド ID) と、特に初期において生成した値の間に線型の相関 (nearly affine dependence) がみられる。これを避けるには&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/random_device.html&#34;&gt;random_device&lt;/a&gt;&lt;/code&gt; 等の非決定論的な乱数をシードとして使う&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/discard_block_engine/discard.html&#34;&gt;最初の方の値を捨てる&lt;/a&gt; (少なくとも 11 個)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RANLUX法は、0から4までの贅沢さレベル(luxury level)が選択可能である。&lt;br /&gt;
レベルを高くするほど低速になるが、乱数の品質は高くなる。レベル4が最高品質となる。&lt;br /&gt;
標準では、レベル3の&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/ranlux24.html&#34;&gt;ranlux24&lt;/a&gt;&lt;/code&gt;および、レベル4の&lt;code&gt;ranlux48&lt;/code&gt;が定義される。  &lt;/p&gt;
&lt;p&gt;モンテカルロ法によるシミュレーションに、よく使用される。  &lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ranlux48&lt;/code&gt;型オブジェクトをデフォルト構築した場合、10000番目に生成される擬似乱数の値は&lt;code&gt;249142670248501&lt;/code&gt;であること。&lt;/p&gt;
&lt;h2&gt;乱数列の周期&lt;/h2&gt;
&lt;p&gt;10&lt;sup&gt;171&lt;/sup&gt;&lt;/p&gt;
&lt;h2&gt;サイズ&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdint/uint_fast64_t.html&#34;&gt;uint_fast64_t&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;パフォーマンス&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/ranlux24.html&#34;&gt;ranlux24&lt;/a&gt;&lt;/code&gt;に比べて、40%ほど遅い。&lt;/p&gt;
&lt;h2&gt;シード、および生成される値の型&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdint/uint_fast64_t.html&#34;&gt;uint_fast64_t&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/random_device.html&#34;&gt;std::random_device&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seed_gen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;std::ranlux48&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;engine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/random_device/op_call.html&#34;&gt;seed_gen()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdint/uint64_t.html&#34;&gt;std::uint64_t&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/discard_block_engine/op_call.html&#34;&gt;engine()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;150487143042812
271824176483188
144262504480630
41969914011396
182011784013906
108124382624549
17607643147140
165775445584215
85439168429936
199504771218332
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.7.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 10.0, 11.0, 12.0, 14.0, 14.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1398.html&#34; target=&#34;_blank&#34;&gt;N1398 A Proposal to Add an Extensible Random Number Facility to the Standard Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wwwasdoc.web.cern.ch/wwwasdoc/shortwrupsdir/v115/top.html&#34; target=&#34;_blank&#34;&gt;Uniform Random Numbers of Guaranteed Quality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://doi.org/10.1145/1276927.1276928&#34; target=&#34;_blank&#34;&gt;M. Matsumoto, et al., Common Defects in Initialization of Pseudorandom Number Generators, &lt;em&gt;ACM Trans. Model. Comput. Simul.&lt;/em&gt; &lt;strong&gt;17&lt;/strong&gt;, 15 (2007)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>E Kawashima</name>
        <email>e-kwsm@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>subtract_with_carry_engine -- RANLUX に関する記述を修正 (fix #468)</title>
      <link href="https://cpprefjp.github.io/reference/random/subtract_with_carry_engine.html"/>
      <id>43a4b34aaffa5dcbce035b6b620b0575c309ee19:reference/random/subtract_with_carry_engine.md</id>
      <updated>2017-09-14T05:52:16+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;random&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;subtract_with_carry_engine&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UIntType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;subtract_with_carry_engine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/ranlux24_base.html&#34;&gt;ranlux24_base&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;…&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/ranlux48_base.html&#34;&gt;ranlux48_base&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;…&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/ranlux24.html&#34;&gt;ranlux24&lt;/a&gt;&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;…&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/ranlux48.html&#34;&gt;ranlux48&lt;/a&gt;&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;…&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;subtract_with_carry_engine&lt;/code&gt;クラスは、&lt;a href=&#34;https://en.wikipedia.org/wiki/Subtract_with_carry&#34; target=&#34;_blank&#34;&gt;キャリー付き減算法&lt;/a&gt;による擬似乱数生成エンジンである。&lt;/p&gt;
&lt;p&gt;テンプレートパラメータの意味は以下の通り:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UIntType&lt;/code&gt;: 生成する符号なし整数の型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;w&lt;/code&gt;: ワードサイズ。&lt;code&gt;0 &amp;lt; w &amp;lt;=&lt;a href=&#34;https://cpprefjp.github.io/reference/limits/numeric_limits.html&#34;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;UIntType&amp;gt;::&lt;a href=&#34;https://cpprefjp.github.io/reference/limits/numeric_limits/digits.html&#34;&gt;digits&lt;/a&gt;&lt;/code&gt; でなければならない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt;: 短いラグ。&lt;code&gt;0 &amp;lt; s &amp;lt; r&lt;/code&gt; でなければならない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt;: 長いラグ。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;キャリー付き減算法は、以下の特徴を持つ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/mersenne_twister_engine.html&#34;&gt;メルセンヌ・ツイスター&lt;/a&gt;より周期が短い(10&lt;sup&gt;171&lt;/sup&gt;)が軽量。&lt;/li&gt;
&lt;li&gt;シードを系統的に選ぶ (例えばスレッド ID) と、特に初期において生成した値の間に線型の相関 (nearly affine dependence) がみられる。これを避けるには&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/random_device.html&#34;&gt;random_device&lt;/a&gt;&lt;/code&gt; 等の非決定論的な乱数をシードとして使う&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/discard.html&#34;&gt;最初の方の値を捨てる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この生成法は、RANLUX (LUXury RANdom numbers) 法の実装にも使われる。&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;h3&gt;構築・シード&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/op_constructor.html&#34;&gt;(constructor)&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;~subtract_with_carry_engine() = default;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/seed.html&#34;&gt;seed&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シードを設定する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;生成&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/op_call.html&#34;&gt;operator()&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;擬似乱数を生成する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/discard.html&#34;&gt;discard&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定した回数だけ擬似乱数を生成し、内部状態を進める&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;静的メンバ関数&lt;/h2&gt;
&lt;h3&gt;エンジンの特性&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/min.html&#34;&gt;min&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;生成し得る値の最小値を取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/max.html&#34;&gt;max&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;生成し得る値の最大値を取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;result_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;擬似乱数生成結果の符号なし整数型 &lt;code&gt;UIntType&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ定数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;定数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static constexpr size_t word_size&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワードサイズ。状態シーケンス内での各ワードのビット数。テンプレートパラメータ&lt;code&gt;w&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static constexpr size_t short_lag&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;短いラグ。進める要素数。テンプレートパラメータ&lt;code&gt;s&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static constexpr size_t long_lag&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;長いラグ。オペランドの値間の距離。テンプレートパラメータ&lt;code&gt;r&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static constexpr result_type default_seed&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デフォルトのシード値。&lt;code&gt;19780503u&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/op_equal.html&#34;&gt;operator==&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/op_not_equal.html&#34;&gt;operator!=&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/op_ostream.html&#34;&gt;operator&amp;lt;&amp;lt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストリームへの出力&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/op_istream.html&#34;&gt;operator&amp;gt;&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストリームからの入力&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;cstdint&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/random_device.html&#34;&gt;std::random_device&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seed_gen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// subtract_with_carry_engineのパラメータ設定済み別名であるranlux24_baseを使用する。&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ランダムなシードを使用して初期化&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;std::ranlux24_base&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;engine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/random_device/op_call.html&#34;&gt;seed_gen()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 乱数を生成&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdint/uint32_t.html&#34;&gt;std::uint32_t&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/op_call.html&#34;&gt;engine()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;5880757
13095533
1545433
15249896
3512432
2193500
7368389
13589182
9374747
13701319
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.7.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 10.0, 11.0, 12.0, 14.0, 14.1&lt;ul&gt;
&lt;li&gt;9.0には、&lt;code&gt;std::tr1::subtract_with_carry&lt;/code&gt;が存在する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Subtract_with_carry&#34; target=&#34;_blank&#34;&gt;Subtract with carry - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://projecteuclid.org/DPubS?service=UI&amp;amp;version=1.0&amp;amp;verb=Display&amp;amp;handle=euclid.aoap/1177005878&#34; target=&#34;_blank&#34;&gt;A New Class of Random Number Generators&lt;/a&gt;, George Marsaglia and Arif Zaman, The Annals of Applied Probability, Vol. 1, No. 3, 1991&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://doi.org/10.1145/1276927.1276928&#34; target=&#34;_blank&#34;&gt;M. Matsumoto, et al., Common Defects in Initialization of Pseudorandom Number Generators, &lt;em&gt;ACM Trans. Model. Comput. Simul.&lt;/em&gt; &lt;strong&gt;17&lt;/strong&gt;, 15 (2007)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>E Kawashima</name>
        <email>e-kwsm@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cpprefjp特有の拡張構文 -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site
</title>
      <link href="https://cpprefjp.github.io/editors_doc/specialized.html"/>
      <id>760715018418e180cfa55bd3e2ca7f7a856b733c:editors_doc/specialized.md</id>
      <updated>2017-09-07T16:42:07+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;cpprefjp特有の拡張構文&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;Markdownだけだと表現力が足りないため、cpprefjpでは構文を拡張しています。&lt;/p&gt;
&lt;h2&gt;コードブロック&lt;/h2&gt;
&lt;p&gt;``` と ``` で挟むことで、複数行に渡るコードを書けます。&lt;/p&gt;
&lt;p&gt;Markdown:&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;```
#include &amp;lt;iostream&amp;gt;

int x = 10;
int main() {
  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
}
```
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;結果:&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;

int x = 10;
int main() {
  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;シンタックスハイライト&lt;/h2&gt;
&lt;p&gt;コードブロック開始側の ``` の後ろに言語名を書くことで、その言語に対応したハイライトが行われます。&lt;/p&gt;
&lt;p&gt;Markdown:&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;```cpp
#include &amp;lt;iostream&amp;gt;

int x = 10;
int main() {
  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
}
```
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;結果:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;プログラムの修飾&lt;/h2&gt;
&lt;p&gt;コードブロックの直後に特定の構文で記述することで、コードブロックの一部を修飾できます。&lt;/p&gt;
&lt;p&gt;Markdown:&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;```cpp
#include &amp;lt;iostream&amp;gt;

int x = 10;
int main() {
  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
}
```
* &amp;lt;iostream&amp;gt;[link /reference/iostream.md]
* std[color ff0000]
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;結果:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &lt;a href=&#34;https://cpprefjp.github.io/reference/iostream.html&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/a&gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;std&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;std&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;修飾の範囲は、コードブロックの直後から空行が続くまで、です。
空行があるとコードブロックに対する修飾を終わります。
構文は、&lt;code&gt;* ＜対象文字列＞[＜命令＞ ＜引数＞]&lt;/code&gt; です。
現在用意されている命令は３つです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;link&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;＜対象文字列＞&lt;/code&gt;にリンクを張ります。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;＜引数＞&lt;/code&gt;にはリンク先のURLを指定します。&lt;/li&gt;
&lt;li&gt;指定可能なURLの形式は以下の3種類です。&lt;ul&gt;
&lt;li&gt;絶対リンク: &lt;code&gt;http://example.com/foo/bar&lt;/code&gt; のような形式&lt;/li&gt;
&lt;li&gt;サイト内絶対リンク: &lt;code&gt;/reference/iostream.md&lt;/code&gt; のような形式&lt;/li&gt;
&lt;li&gt;サイト内相対リンク: &lt;code&gt;../reference/vector.md&lt;/code&gt; のような形式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;サイト内へのリンクの場合、リンク先の存在チェックも行います。下記セクション参照。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;color&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;＜対象文字列＞&lt;/code&gt;に色を付けます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;＜引数＞&lt;/code&gt;には色を&lt;code&gt;RRGGBB&lt;/code&gt;（16進数）の形式で指定します。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;italic&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;＜対象文字列＞&lt;/code&gt;をイタリック体にします。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;＜引数＞&lt;/code&gt;はありません。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;グローバル修飾&lt;/h3&gt;
&lt;p&gt;全てのコードブロックでは、デフォルトの修飾が実行されます。
これを &lt;strong&gt;グローバル修飾&lt;/strong&gt; と呼びます。&lt;/p&gt;
&lt;p&gt;例えば &lt;code&gt;&amp;lt;vector&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;, &lt;code&gt;std::vector&lt;/code&gt;, &lt;code&gt;v.begin()&lt;/code&gt;, &lt;code&gt;v.end() std::copy&lt;/code&gt;, &lt;code&gt;std::ostream_iterator&lt;/code&gt; 等はグローバル修飾されるため、特に修飾を書かなくてもリンクになります。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;copy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ostream_iterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;, &#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;グローバル修飾の一覧は &lt;a href=&#34;https://github.com/cpprefjp/site/blob/master/GLOBAL_QUALIFY_LIST.txt&#34; target=&#34;_blank&#34;&gt;GLOBAL_QUALIFY_LIST.txt&lt;/a&gt; にあります。&lt;/p&gt;
&lt;h2&gt;リンクの存在チェック&lt;/h2&gt;
&lt;p&gt;CommonMark形式のリンクや独自拡張のプログラムの修飾&lt;code&gt;link&lt;/code&gt;などで生成されるhtmlにリンクが埋め込まれるとき、リンク先がサイト内へのリンクだった場合、リンク先の存在チェックも行います。&lt;/p&gt;
&lt;p&gt;リンク先が存在しなかった場合、変換時に以下の様なメッセージが &lt;strong&gt;標準エラーに&lt;/strong&gt; 出力されます。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Warning: [editors_doc/specialized.md] href &#34;/reference/foobar.md (/reference/foobar.html)&#34; not found.
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;このメッセージが出た場合、リンクが切れているため、編集して修正して下さい。&lt;/p&gt;
&lt;p&gt;ただ「今後そのリンク先を作る予定なので、このリンクは残しておきたい」ということもあります。
そのような場合には &lt;code&gt;.nolink&lt;/code&gt; が使えます。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;```cpp
#include &amp;lt;iostream&amp;gt;
```
* &amp;lt;iostream&amp;gt;[link /reference/iostream.md.nolink]
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;このように&lt;code&gt;link&lt;/code&gt;のURLの最後に &lt;code&gt;.nolink&lt;/code&gt; を指定すると、リンク先が存在しなかった場合には、以下の様なメッセージが &lt;strong&gt;標準出力に&lt;/strong&gt; 出力されます。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Note: You can create /reference/foobar.md for editors_doc/specialized.md.
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;このようにNoteが表示されるため、このページを作る予定があるというのを思い出させてくれます。&lt;/p&gt;
&lt;p&gt;もし &lt;code&gt;/reference/foobar.md&lt;/code&gt; を作り、&lt;code&gt;.nolink&lt;/code&gt; を消し忘れていたとしても大丈夫です。
以下の様なメッセージが &lt;strong&gt;標準エラーに&lt;/strong&gt; 出力されます。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Warning: [nolinked editors_doc/specialized.md] href &#34;/reference/foobar.md.nolink (/reference/foobar.md.nolink)&#34; found.
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;メタ情報&lt;/h2&gt;
&lt;p&gt;ページのどこか（通常はページタイトルの下）に &lt;code&gt;* ＜メタ情報＞[meta ＜メタ情報タイプ＞]&lt;/code&gt; という構文で書くことで、メタ情報を記述できます。
記述可能なメタ情報は以下の通りです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[meta header]&lt;/code&gt;: 所属ヘッダを表すメタ情報&lt;ul&gt;
&lt;li&gt;例: &lt;code&gt;* chrono[meta header]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[meta id-type]&lt;/code&gt;: 識別子の種別を表すメタ情報。class, class template, function, function template, enum, variable, type-alias, macro, namespace&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[meta namespace]&lt;/code&gt;: 所属する名前空間を表すメタ情報。マクロを考慮して省略可。名前空間の区切りは&lt;code&gt;::&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;例: &lt;code&gt;* std[meta namespace]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;例: &lt;code&gt;* std::chrono[meta namespace]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[meta class]&lt;/code&gt;: 所属するクラスを表すメタ情報。クラスページでは省略する。structとは書けない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[meta cpp]&lt;/code&gt;: 機能が追加・非推奨・削除されたバージョンを表すメタ情報。改行して複数指定ができる。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;* cpp11[meta cpp]&lt;/code&gt; : C++11で追加された機能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;* cpp14[meta cpp]&lt;/code&gt; : C++14で追加された機能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;* cpp17[meta cpp]&lt;/code&gt; : C++17で追加された機能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;* cpp20[meta cpp]&lt;/code&gt; : C++20で追加された機能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;* cpp11deprecated[meta cpp]&lt;/code&gt; : C++11で非推奨になった機能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;* cpp14deprecated[meta cpp]&lt;/code&gt; : C++14で非推奨になった機能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;* cpp14removed[meta cpp]&lt;/code&gt; : C++14で削除された機能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;* cpp17deprecated[meta cpp]&lt;/code&gt; : C++17で非推奨になった機能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;* cpp17removed[meta cpp]&lt;/code&gt; : C++17で削除された機能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;* cpp20deprecated[meta cpp]&lt;/code&gt; : C++20で非推奨になった機能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;* cpp20removed[meta cpp]&lt;/code&gt; : C++20で削除された機能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;数式&lt;/h2&gt;
&lt;p&gt;cpprefjpでは、数式をLaTeX形式で記述できます。
内部的には&lt;a href=&#34;https://www.mathjax.org/&#34; target=&#34;_blank&#34;&gt;MathJax&lt;/a&gt;を利用しています。&lt;/p&gt;
&lt;p&gt;MathJaxを使うためにはまず、ページのどこか（通常はページタイトルの下）に、以下のように記述してMathJaxを有効にする必要があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;* [mathjax enable]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;こうすることで、LaTeX形式で数式を記述できるようになります。&lt;/p&gt;
&lt;p&gt;インライン用は以下のように書きます。&lt;/p&gt;
&lt;p&gt;Markdown:&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;$x = \frac{ -b \pm \sqrt{ b^{2} - 4 a c } }{2 a}$
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;結果:&lt;/p&gt;
&lt;p&gt;$x = \frac{ -b \pm \sqrt{ b^{2} - 4 a c } }{2 a}$&lt;/p&gt;
&lt;p&gt;ブロック用は以下のように書きます。&lt;/p&gt;
&lt;p&gt;Markdown:&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;$$
\left\{
\begin{array}{ll}
p \log_{10}b&amp;amp;\text{もし $b$ が $10$ の累乗の場合}\\
\lfloor (p - 1) \log_{10} b\rfloor&amp;amp;\text{上記以外の場合}\\
\end{array}
\right.
$$
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;結果:
$$
\left\{
\begin{array}{ll}
p \log_{10}b&amp;amp;\text{もし $b$ が $10$ の累乗の場合}\\
\lfloor (p - 1) \log_{10} b\rfloor&amp;amp;\text{上記以外の場合}\\
\end{array}
\right.
$$&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>cpprefjp特有の拡張構文 -- cpprefjp特有の拡張構文 : C++20のタグを追加</title>
      <link href="https://cpprefjp.github.io/editors_doc/specialized.html"/>
      <id>ab7c6f37ec1059e6b774943e49edef4b5cd43a47:editors_doc/specialized.md</id>
      <updated>2017-09-07T16:41:56+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;cpprefjp特有の拡張構文&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;Markdownだけだと表現力が足りないため、cpprefjpでは構文を拡張しています。&lt;/p&gt;
&lt;h2&gt;コードブロック&lt;/h2&gt;
&lt;p&gt;``` と ``` で挟むことで、複数行に渡るコードを書けます。&lt;/p&gt;
&lt;p&gt;Markdown:&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;```
#include &amp;lt;iostream&amp;gt;

int x = 10;
int main() {
  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
}
```
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;結果:&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;

int x = 10;
int main() {
  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;シンタックスハイライト&lt;/h2&gt;
&lt;p&gt;コードブロック開始側の ``` の後ろに言語名を書くことで、その言語に対応したハイライトが行われます。&lt;/p&gt;
&lt;p&gt;Markdown:&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;```cpp
#include &amp;lt;iostream&amp;gt;

int x = 10;
int main() {
  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
}
```
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;結果:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;プログラムの修飾&lt;/h2&gt;
&lt;p&gt;コードブロックの直後に特定の構文で記述することで、コードブロックの一部を修飾できます。&lt;/p&gt;
&lt;p&gt;Markdown:&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;```cpp
#include &amp;lt;iostream&amp;gt;

int x = 10;
int main() {
  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
}
```
* &amp;lt;iostream&amp;gt;[link /reference/iostream.md]
* std[color ff0000]
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;結果:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &lt;a href=&#34;https://cpprefjp.github.io/reference/iostream.html&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/a&gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;std&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;std&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;修飾の範囲は、コードブロックの直後から空行が続くまで、です。
空行があるとコードブロックに対する修飾を終わります。
構文は、&lt;code&gt;* ＜対象文字列＞[＜命令＞ ＜引数＞]&lt;/code&gt; です。
現在用意されている命令は３つです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;link&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;＜対象文字列＞&lt;/code&gt;にリンクを張ります。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;＜引数＞&lt;/code&gt;にはリンク先のURLを指定します。&lt;/li&gt;
&lt;li&gt;指定可能なURLの形式は以下の3種類です。&lt;ul&gt;
&lt;li&gt;絶対リンク: &lt;code&gt;http://example.com/foo/bar&lt;/code&gt; のような形式&lt;/li&gt;
&lt;li&gt;サイト内絶対リンク: &lt;code&gt;/reference/iostream.md&lt;/code&gt; のような形式&lt;/li&gt;
&lt;li&gt;サイト内相対リンク: &lt;code&gt;../reference/vector.md&lt;/code&gt; のような形式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;サイト内へのリンクの場合、リンク先の存在チェックも行います。下記セクション参照。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;color&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;＜対象文字列＞&lt;/code&gt;に色を付けます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;＜引数＞&lt;/code&gt;には色を&lt;code&gt;RRGGBB&lt;/code&gt;（16進数）の形式で指定します。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;italic&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;＜対象文字列＞&lt;/code&gt;をイタリック体にします。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;＜引数＞&lt;/code&gt;はありません。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;グローバル修飾&lt;/h3&gt;
&lt;p&gt;全てのコードブロックでは、デフォルトの修飾が実行されます。
これを &lt;strong&gt;グローバル修飾&lt;/strong&gt; と呼びます。&lt;/p&gt;
&lt;p&gt;例えば &lt;code&gt;&amp;lt;vector&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;, &lt;code&gt;std::vector&lt;/code&gt;, &lt;code&gt;v.begin()&lt;/code&gt;, &lt;code&gt;v.end() std::copy&lt;/code&gt;, &lt;code&gt;std::ostream_iterator&lt;/code&gt; 等はグローバル修飾されるため、特に修飾を書かなくてもリンクになります。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;copy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ostream_iterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;, &#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;グローバル修飾の一覧は &lt;a href=&#34;https://github.com/cpprefjp/site/blob/master/GLOBAL_QUALIFY_LIST.txt&#34; target=&#34;_blank&#34;&gt;GLOBAL_QUALIFY_LIST.txt&lt;/a&gt; にあります。&lt;/p&gt;
&lt;h2&gt;リンクの存在チェック&lt;/h2&gt;
&lt;p&gt;CommonMark形式のリンクや独自拡張のプログラムの修飾&lt;code&gt;link&lt;/code&gt;などで生成されるhtmlにリンクが埋め込まれるとき、リンク先がサイト内へのリンクだった場合、リンク先の存在チェックも行います。&lt;/p&gt;
&lt;p&gt;リンク先が存在しなかった場合、変換時に以下の様なメッセージが &lt;strong&gt;標準エラーに&lt;/strong&gt; 出力されます。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Warning: [editors_doc/specialized.md] href &#34;/reference/foobar.md (/reference/foobar.html)&#34; not found.
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;このメッセージが出た場合、リンクが切れているため、編集して修正して下さい。&lt;/p&gt;
&lt;p&gt;ただ「今後そのリンク先を作る予定なので、このリンクは残しておきたい」ということもあります。
そのような場合には &lt;code&gt;.nolink&lt;/code&gt; が使えます。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;```cpp
#include &amp;lt;iostream&amp;gt;
```
* &amp;lt;iostream&amp;gt;[link /reference/iostream.md.nolink]
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;このように&lt;code&gt;link&lt;/code&gt;のURLの最後に &lt;code&gt;.nolink&lt;/code&gt; を指定すると、リンク先が存在しなかった場合には、以下の様なメッセージが &lt;strong&gt;標準出力に&lt;/strong&gt; 出力されます。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Note: You can create /reference/foobar.md for editors_doc/specialized.md.
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;このようにNoteが表示されるため、このページを作る予定があるというのを思い出させてくれます。&lt;/p&gt;
&lt;p&gt;もし &lt;code&gt;/reference/foobar.md&lt;/code&gt; を作り、&lt;code&gt;.nolink&lt;/code&gt; を消し忘れていたとしても大丈夫です。
以下の様なメッセージが &lt;strong&gt;標準エラーに&lt;/strong&gt; 出力されます。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Warning: [nolinked editors_doc/specialized.md] href &#34;/reference/foobar.md.nolink (/reference/foobar.md.nolink)&#34; found.
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;メタ情報&lt;/h2&gt;
&lt;p&gt;ページのどこか（通常はページタイトルの下）に &lt;code&gt;* ＜メタ情報＞[meta ＜メタ情報タイプ＞]&lt;/code&gt; という構文で書くことで、メタ情報を記述できます。
記述可能なメタ情報は以下の通りです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[meta header]&lt;/code&gt;: 所属ヘッダを表すメタ情報&lt;ul&gt;
&lt;li&gt;例: &lt;code&gt;* chrono[meta header]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[meta id-type]&lt;/code&gt;: 識別子の種別を表すメタ情報。class, class template, function, function template, enum, variable, type-alias, macro, namespace&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[meta namespace]&lt;/code&gt;: 所属する名前空間を表すメタ情報。マクロを考慮して省略可。名前空間の区切りは&lt;code&gt;::&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;例: &lt;code&gt;* std[meta namespace]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;例: &lt;code&gt;* std::chrono[meta namespace]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[meta class]&lt;/code&gt;: 所属するクラスを表すメタ情報。クラスページでは省略する。structとは書けない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[meta cpp]&lt;/code&gt;: 機能が追加・非推奨・削除されたバージョンを表すメタ情報。改行して複数指定ができる。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;* cpp11[meta cpp]&lt;/code&gt; : C++11で追加された機能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;* cpp14[meta cpp]&lt;/code&gt; : C++14で追加された機能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;* cpp17[meta cpp]&lt;/code&gt; : C++17で追加された機能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;* cpp20[meta cpp]&lt;/code&gt; : C++20で追加された機能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;* cpp11deprecated[meta cpp]&lt;/code&gt; : C++11で非推奨になった機能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;* cpp14deprecated[meta cpp]&lt;/code&gt; : C++14で非推奨になった機能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;* cpp14removed[meta cpp]&lt;/code&gt; : C++14で削除された機能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;* cpp17deprecated[meta cpp]&lt;/code&gt; : C++17で非推奨になった機能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;* cpp17removed[meta cpp]&lt;/code&gt; : C++17で削除された機能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;* cpp20deprecated[meta cpp]&lt;/code&gt; : C++20で非推奨になった機能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;* cpp20removed[meta cpp]&lt;/code&gt; : C++20で削除された機能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;数式&lt;/h2&gt;
&lt;p&gt;cpprefjpでは、数式をLaTeX形式で記述できます。
内部的には&lt;a href=&#34;https://www.mathjax.org/&#34; target=&#34;_blank&#34;&gt;MathJax&lt;/a&gt;を利用しています。&lt;/p&gt;
&lt;p&gt;MathJaxを使うためにはまず、ページのどこか（通常はページタイトルの下）に、以下のように記述してMathJaxを有効にする必要があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;* [mathjax enable]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;こうすることで、LaTeX形式で数式を記述できるようになります。&lt;/p&gt;
&lt;p&gt;インライン用は以下のように書きます。&lt;/p&gt;
&lt;p&gt;Markdown:&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;$x = \frac{ -b \pm \sqrt{ b^{2} - 4 a c } }{2 a}$
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;結果:&lt;/p&gt;
&lt;p&gt;$x = \frac{ -b \pm \sqrt{ b^{2} - 4 a c } }{2 a}$&lt;/p&gt;
&lt;p&gt;ブロック用は以下のように書きます。&lt;/p&gt;
&lt;p&gt;Markdown:&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;$$
\left\{
\begin{array}{ll}
p \log_{10}b&amp;amp;\text{もし $b$ が $10$ の累乗の場合}\\
\lfloor (p - 1) \log_{10} b\rfloor&amp;amp;\text{上記以外の場合}\\
\end{array}
\right.
$$
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;結果:
$$
\left\{
\begin{array}{ll}
p \log_{10}b&amp;amp;\text{もし $b$ が $10$ の累乗の場合}\\
\lfloor (p - 1) \log_{10} b\rfloor&amp;amp;\text{上記以外の場合}\\
\end{array}
\right.
$$&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_abstract -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site
</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/is_abstract.html"/>
      <id>436152d754a8e32f475146afed85a36e68c29310:reference/type_traits/is_abstract.md</id>
      <updated>2017-09-07T15:32:24+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;is_abstract&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_abstract&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;が抽象クラスか調べる。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;が非共用体のクラスである場合、その型は完全型でなければならない。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;is_abstract&lt;/code&gt;は、型&lt;code&gt;T&lt;/code&gt;が抽象クラス (cv修飾を許容する) であるならば&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/true_type.html&#34;&gt;true_type&lt;/a&gt;&lt;/code&gt;から派生し、そうでなければ&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/false_type.html&#34;&gt;false_type&lt;/a&gt;&lt;/code&gt;から派生する。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;抽象クラスとは、少なくとも一つの純粋仮想関数を持つクラスである。&lt;/p&gt;
&lt;p&gt;抽象クラスそれ自体はインスタンス化できず、そのクラスから派生して純粋仮想関数をオーバーライドし、その派生したクラスをインスタンス化しなければならない。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;type_traits&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;abstract_class&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;member&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 純粋仮想関数を持つ&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;non_abstract_class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{};&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;static_assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;std::is_abstract&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract_class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;value == true, abstract_class is abstract&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;static_assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_same&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;std::is_abstract&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract_class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;value_type == bool&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;static_assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_same&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;std::is_abstract&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract_class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;true_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;type == true_type&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;static_assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;std::is_abstract&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract_class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;is_abstract&amp;lt;abstract_class&amp;gt;() == true&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;static_assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;std::is_abstract&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;non_abstract_class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;value == false, non_abstract_class is not abstract&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;static_assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_same&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;std::is_abstract&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;non_abstract_class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;value_type == bool&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;static_assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_same&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;std::is_abstract&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;non_abstract_class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;false_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;type == false_type&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;static_assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;std::is_abstract&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;non_abstract_class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;is_abstract&amp;lt;non_abstract_class&amp;gt;() == false&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;static_assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;std::is_abstract&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;volatile&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;abstract_class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;value == true, const volatile abstract_class is abstract&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;static_assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;std::is_abstract&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract_class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;value == true, abstract_class&amp;amp; is not abstract&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.3.4, 4.5.3, 4.6.2, 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 9.0 (std::tr1), 10.0, 11.0, 12.0, 14.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;備考&lt;/h4&gt;
&lt;p&gt;上の例でコンパイラによってはエラーになる。GCC 4.3.4, 4.5.3, Visual C++ 10.0 は &lt;code&gt;integral_constant&lt;/code&gt; が &lt;code&gt;operator bool()&lt;/code&gt; を持っていないためエラーになる。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2015&#34; target=&#34;_blank&#34;&gt;LWG Issue 2015. Incorrect pre-conditions for some type traits&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11では要件が「型&lt;code&gt;T&lt;/code&gt;は完全型であるか、&lt;code&gt;const&lt;/code&gt;/&lt;code&gt;volatile&lt;/code&gt;修飾された(あるいはされていない)&lt;code&gt;void&lt;/code&gt;か、要素数不明の配列型でなければならない。」だったが、これは間違いであるため、C++14で「型&lt;code&gt;T&lt;/code&gt;が非共用体のクラスである場合、その型は完全型でなければならない。」に変更された。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
</feed>
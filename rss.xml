<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-05-28T08:47:47.509081</updated>
  <id>5e9159a6-0728-4f8e-80b8-6b489e167530</id>

  
    <entry>
      <title>close -- fstream : サンプルコードのインデントを4 → 2スペースに修正</title>
      <link href="https://cpprefjp.github.io/reference/fstream/basic_filebuf/close.html"/>
      <id>cdaf0f76e3f641b39b06efb9a75352f82b8c97a5:reference/fstream/basic_filebuf/close.md</id>
      <updated>2025-05-28T17:44:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/fstream/basic_filebuf/close.md b/reference/fstream/basic_filebuf/close.md
index fded21519..f97f54475 100644
--- a/reference/fstream/basic_filebuf/close.md
+++ b/reference/fstream/basic_filebuf/close.md
@@ -44,7 +44,7 @@ int main()
   std::filebuf* buf = fs.rdbuf();
 
   if (buf-&amp;gt;open(&amp;#34;foo&amp;#34;, std::ios_base::out)) {
-      buf-&amp;gt;close();
+    buf-&amp;gt;close();
   }
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_open -- fstream : サンプルコードのインデントを4 → 2スペースに修正</title>
      <link href="https://cpprefjp.github.io/reference/fstream/basic_filebuf/is_open.html"/>
      <id>cdaf0f76e3f641b39b06efb9a75352f82b8c97a5:reference/fstream/basic_filebuf/is_open.md</id>
      <updated>2025-05-28T17:44:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/fstream/basic_filebuf/is_open.md b/reference/fstream/basic_filebuf/is_open.md
index ed3cad0bb..8aa2b4613 100644
--- a/reference/fstream/basic_filebuf/is_open.md
+++ b/reference/fstream/basic_filebuf/is_open.md
@@ -27,7 +27,7 @@ int main()
   std::filebuf* buf = fs.rdbuf();
 
   if (buf-&amp;gt;is_open()) {
-      std::cout &amp;lt;&amp;lt; &amp;#34;opened&amp;#34; &amp;lt;&amp;lt; std::endl;
+    std::cout &amp;lt;&amp;lt; &amp;#34;opened&amp;#34; &amp;lt;&amp;lt; std::endl;
   }
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>open -- fstream : サンプルコードのインデントを4 → 2スペースに修正</title>
      <link href="https://cpprefjp.github.io/reference/fstream/basic_filebuf/open.html"/>
      <id>cdaf0f76e3f641b39b06efb9a75352f82b8c97a5:reference/fstream/basic_filebuf/open.md</id>
      <updated>2025-05-28T17:44:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/fstream/basic_filebuf/open.md b/reference/fstream/basic_filebuf/open.md
index b7d1bf237..9149039d9 100644
--- a/reference/fstream/basic_filebuf/open.md
+++ b/reference/fstream/basic_filebuf/open.md
@@ -68,7 +68,7 @@ int main()
   std::filebuf* buf = fs.rdbuf();
 
   if (buf-&amp;gt;open(&amp;#34;foo&amp;#34;, std::ios_base::out)) {
-      std::cout &amp;lt;&amp;lt; &amp;#34;opened&amp;#34; &amp;lt;&amp;lt; std::endl;
+    std::cout &amp;lt;&amp;lt; &amp;#34;opened&amp;#34; &amp;lt;&amp;lt; std::endl;
   }
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_open -- fstream : サンプルコードのインデントを4 → 2スペースに修正</title>
      <link href="https://cpprefjp.github.io/reference/fstream/basic_fstream/is_open.html"/>
      <id>cdaf0f76e3f641b39b06efb9a75352f82b8c97a5:reference/fstream/basic_fstream/is_open.md</id>
      <updated>2025-05-28T17:44:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/fstream/basic_fstream/is_open.md b/reference/fstream/basic_fstream/is_open.md
index 4bd8dc891..6c4692ad4 100644
--- a/reference/fstream/basic_fstream/is_open.md
+++ b/reference/fstream/basic_fstream/is_open.md
@@ -26,7 +26,7 @@ int main()
 {
   std::fstream fs(&amp;#34;foo&amp;#34;, std::ios_base::out);
   if (fs.is_open()) {
-      std::cout &amp;lt;&amp;lt; &amp;#34;opened&amp;#34; &amp;lt;&amp;lt; std::endl;
+    std::cout &amp;lt;&amp;lt; &amp;#34;opened&amp;#34; &amp;lt;&amp;lt; std::endl;
   }
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_open -- fstream : サンプルコードのインデントを4 → 2スペースに修正</title>
      <link href="https://cpprefjp.github.io/reference/fstream/basic_ifstream/is_open.html"/>
      <id>cdaf0f76e3f641b39b06efb9a75352f82b8c97a5:reference/fstream/basic_ifstream/is_open.md</id>
      <updated>2025-05-28T17:44:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/fstream/basic_ifstream/is_open.md b/reference/fstream/basic_ifstream/is_open.md
index 275105dc7..4c0ce85d0 100644
--- a/reference/fstream/basic_ifstream/is_open.md
+++ b/reference/fstream/basic_ifstream/is_open.md
@@ -26,7 +26,7 @@ int main()
 {
   std::ifstream fs(&amp;#34;foo&amp;#34;, std::ios_base::in);
   if (fs.is_open()) {
-      std::cout &amp;lt;&amp;lt; &amp;#34;opened&amp;#34; &amp;lt;&amp;lt; std::endl;
+    std::cout &amp;lt;&amp;lt; &amp;#34;opened&amp;#34; &amp;lt;&amp;lt; std::endl;
   }
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_open -- fstream : サンプルコードのインデントを4 → 2スペースに修正</title>
      <link href="https://cpprefjp.github.io/reference/fstream/basic_ofstream/is_open.html"/>
      <id>cdaf0f76e3f641b39b06efb9a75352f82b8c97a5:reference/fstream/basic_ofstream/is_open.md</id>
      <updated>2025-05-28T17:44:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/fstream/basic_ofstream/is_open.md b/reference/fstream/basic_ofstream/is_open.md
index 70646ce84..d5901c468 100644
--- a/reference/fstream/basic_ofstream/is_open.md
+++ b/reference/fstream/basic_ofstream/is_open.md
@@ -26,7 +26,7 @@ int main()
 {
   std::ofstream fs(&amp;#34;foo&amp;#34;, std::ios_base::out);
   if (fs.is_open()) {
-      std::cout &amp;lt;&amp;lt; &amp;#34;opened&amp;#34; &amp;lt;&amp;lt; std::endl;
+    std::cout &amp;lt;&amp;lt; &amp;#34;opened&amp;#34; &amp;lt;&amp;lt; std::endl;
   }
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_ifstream -- リンクミスを修正</title>
      <link href="https://cpprefjp.github.io/reference/fstream/basic_ifstream.html"/>
      <id>fa3dcb5f9735b4013050ad5b0855e665144f7ef0:reference/fstream/basic_ifstream.md</id>
      <updated>2025-05-28T17:30:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/fstream/basic_ifstream.md b/reference/fstream/basic_ifstream.md
index c15e79c2c..e012d09da 100644
--- a/reference/fstream/basic_ifstream.md
+++ b/reference/fstream/basic_ifstream.md
@@ -75,7 +75,7 @@ int main() {
 }
 ```
 * std::ifstream[color ff0000]
-* ifs.is_open[link ifstream/is_open.md]
-* ifs.close[link ifstream/close.md]
+* ifs.is_open[link basic_ifstream/is_open.md]
+* ifs.close[link basic_ifstream/close.md]
 * std::getline[link /reference/string/basic_string/getline.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_ofstream -- リンクミスを修正</title>
      <link href="https://cpprefjp.github.io/reference/fstream/basic_ofstream.html"/>
      <id>fa3dcb5f9735b4013050ad5b0855e665144f7ef0:reference/fstream/basic_ofstream.md</id>
      <updated>2025-05-28T17:30:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/fstream/basic_ofstream.md b/reference/fstream/basic_ofstream.md
index 34e226e4f..ddccc8f3c 100644
--- a/reference/fstream/basic_ofstream.md
+++ b/reference/fstream/basic_ofstream.md
@@ -72,6 +72,6 @@ int main() {
 }
 ```
 * std::ofstream[color ff0000]
-* ofs.is_open[link ofstream/is_open.md]
-* ofs.close[link ofstream/close.md]
+* ofs.is_open[link basic_ofstream/is_open.md]
+* ofs.close[link basic_ofstream/close.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_ifstream -- basic_ifstream, basic_ofstream : サンプルコードを追加</title>
      <link href="https://cpprefjp.github.io/reference/fstream/basic_ifstream.html"/>
      <id>3a27b55ef5f235a317e5a0e7767db1ad05b77998:reference/fstream/basic_ifstream.md</id>
      <updated>2025-05-28T17:27:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/fstream/basic_ifstream.md b/reference/fstream/basic_ifstream.md
index 5f0a699a6..c15e79c2c 100644
--- a/reference/fstream/basic_ifstream.md
+++ b/reference/fstream/basic_ifstream.md
@@ -50,3 +50,32 @@ namespace std {
 | `off_type`       | `Traits::off_type`            | |
 | `traits_type`    | テンプレート仮引数`Traits`    | |
 
+## 例
+```cpp example
+#include &amp;lt;fstream&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main() {
+  // example.txtファイルを読み取り専用で開く
+  std::ifstream ifs(&amp;#34;example.txt&amp;#34;);
+  if (!ifs.is_open()) {
+    std::cerr &amp;lt;&amp;lt; &amp;#34;ファイルを開けませんでした&amp;#34; &amp;lt;&amp;lt; std::endl;
+    return 1;
+  }
+
+  // ファイルの内容を1行ずつ読み取り、出力する
+  std::string line;
+  while (std::getline(ifs, line)) {
+    std::cout &amp;lt;&amp;lt; line &amp;lt;&amp;lt; std::endl;
+  }
+
+  // ファイルを閉じる (デストラクタでも自動的に閉じられる)
+  ifs.close();
+}
+```
+* std::ifstream[color ff0000]
+* ifs.is_open[link ifstream/is_open.md]
+* ifs.close[link ifstream/close.md]
+* std::getline[link /reference/string/basic_string/getline.md]
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_ofstream -- basic_ifstream, basic_ofstream : サンプルコードを追加</title>
      <link href="https://cpprefjp.github.io/reference/fstream/basic_ofstream.html"/>
      <id>3a27b55ef5f235a317e5a0e7767db1ad05b77998:reference/fstream/basic_ofstream.md</id>
      <updated>2025-05-28T17:27:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/fstream/basic_ofstream.md b/reference/fstream/basic_ofstream.md
index 4f02d74d5..34e226e4f 100644
--- a/reference/fstream/basic_ofstream.md
+++ b/reference/fstream/basic_ofstream.md
@@ -50,3 +50,28 @@ namespace std {
 | `off_type`       | `Traits::off_type`            | |
 | `traits_type`    | テンプレート仮引数`Traits`    | |
 
+## 例
+```cpp example
+#include &amp;lt;fstream&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main() {
+  // example.txtファイルを出力専用で開く
+  std::ofstream ofs(&amp;#34;example.txt&amp;#34;);
+  if (!ofs.is_open()) {
+    std::cerr &amp;lt;&amp;lt; &amp;#34;ファイルを開けませんでした&amp;#34; &amp;lt;&amp;lt; std::endl;
+    return 1;
+  }
+
+  // ファイルに文字列を書き込む
+  ofs &amp;lt;&amp;lt; &amp;#34;Hello, world!&amp;#34; &amp;lt;&amp;lt; std::endl;
+
+  // ファイルを閉じる (デストラクタでも自動的に閉じられる)
+  ofs.close();
+}
+```
+* std::ofstream[color ff0000]
+* ofs.is_open[link ofstream/is_open.md]
+* ofs.close[link ofstream/close.md]
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>allocator -- allocator : C++26対応としてis_always_equalを削除 (close #1242)</title>
      <link href="https://cpprefjp.github.io/reference/memory/allocator.html"/>
      <id>c3e97ea8a80e4a22e82c6b943a35492f2894d99e:reference/memory/allocator.md</id>
      <updated>2025-05-28T17:09:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/allocator.md b/reference/memory/allocator.md
index f38eef148..7d9970fe2 100644
--- a/reference/memory/allocator.md
+++ b/reference/memory/allocator.md
@@ -64,7 +64,7 @@ C++11から：
 | `reference`       | 要素の参照型 `T&amp;amp;`                            | C++17から非推奨&amp;lt;br/&amp;gt; C++20で削除 |
 | `const_reference` | 読み取り専用の要素の参照型 `const T&amp;amp;`        | C++17から非推奨&amp;lt;br/&amp;gt; C++20で削除 |
 | `rebind&amp;lt;U&amp;gt;`       | 型`U`を確保するように再束縛する              | C++17から非推奨&amp;lt;br/&amp;gt; C++20で削除 |
-| `is_always_equal` | 同じ型のアロケータオブジェクトが2つある場合、それらが常に同値であるか。[`true_type`](/reference/type_traits/true_type.md) | C++17 |
+| `is_always_equal` | 同じ型のアロケータオブジェクトが2つある場合、それらが常に同値であるか。[`true_type`](/reference/type_traits/true_type.md) | C++17&amp;lt;br/&amp;gt; C++20で非推奨&amp;lt;br/&amp;gt; C++26で削除 |
 
 
 ## 非メンバ関数
@@ -87,6 +87,9 @@ C++11から：
         - なお、プライマリテンプレートからインスタンス化されるようになっても`allocate`/`deallocate`メンバは内部で`sizeof(void)`を要求するため引き続き使用不可能であり、`std::allocator&amp;lt;void&amp;gt;`の使用用途としては従来と同じく再束縛を目的とすることになる(上述のように[`std::allocator_traits`](allocator_traits.md)の代替機能を用いて`typename` [`std::allocator_traits`](allocator_traits.md)`&amp;lt;std::allocator&amp;lt;void&amp;gt;&amp;gt;::template rebind_alloc&amp;lt;R&amp;gt;`のようにする)。
 
 - メンバ型の`size_type`と`difference_type`は、C++17で非推奨となったがC++20で非推奨が取り消された。
+- メンバ型の`is_always_equal`は、このクラスを継承したメモリアロケータが`is_always_equal`の値を引き継いでしまうという点で問題があったため、C++20で非推奨となり、C++26で削除された。
+    - 代わりに[`std::allocator_traits`](allocator_traits.md)クラスの`is_always_equal`メンバ型を使用すること。
+
 
 ## 例
 ```cpp example
@@ -140,3 +143,7 @@ int main(int argc, char** argv) {
 - [P0174R2 Deprecating Vestigial Library Parts in C++17](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0174r2.html)
 - [P0619R4 Reviewing deprecated facilities of C++17 for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0619r4.html)
 - [N4258 Cleaning-up noexcept in the Library, Rev 3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4258.pdf)
+- [LWG Issue 3170. `is_always_equal` added to `std::allocator` makes the standard library treat derived types as always equal](https://cplusplus.github.io/LWG/issue3170)
+    - C++20で`is_always_equal`メンバ型が非推奨化された
+- [P2868R3 Remove Deprecated `std::allocator` Typedef From C++26](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2868r3.pdf)
+    - C++26で`is_always_equal`メンバ型が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>projected -- projected : C++26での不完全型への対策に対応 (close #1185)</title>
      <link href="https://cpprefjp.github.io/reference/iterator/projected.html"/>
      <id>1fe3de6f2d3c0162a5f2b4b89231c01f20f24380:reference/iterator/projected.md</id>
      <updated>2025-05-28T14:49:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/projected.md b/reference/iterator/projected.md
index cf694bbc7..85023e7ad 100644
--- a/reference/iterator/projected.md
+++ b/reference/iterator/projected.md
@@ -6,20 +6,30 @@
 
 ```cpp
 namespace std {
-
-  template&amp;lt;indirectly_readable I, indirectly_regular_unary_invocable&amp;lt;I&amp;gt; Proj&amp;gt;
+  // (1) C++20の定義
+  template &amp;lt;indirectly_readable I, indirectly_regular_unary_invocable&amp;lt;I&amp;gt; Proj&amp;gt;
   struct projected {
     using value_type = remove_cvref_t&amp;lt;indirect_result_t&amp;lt;Proj&amp;amp;, I&amp;gt;&amp;gt;;
 
     indirect_result_t&amp;lt;Proj&amp;amp;, I&amp;gt; operator*() const;	// 宣言のみ
   };
-
-
   // incrementable_traitsにアダプトする
-  template&amp;lt;weakly_incrementable I, class Proj&amp;gt;
+  template &amp;lt;weakly_incrementable I, class Proj&amp;gt;
   struct incrementable_traits&amp;lt;projected&amp;lt;I, Proj&amp;gt;&amp;gt; {
     using difference_type = iter_difference_t&amp;lt;I&amp;gt;;
   };
+
+  // (1) C++26の定義
+  template &amp;lt;class I, class Proj&amp;gt;
+  struct projected-impl { // 説明用の型
+    struct type { // 説明用の型
+      using value_type = remove_cvref_t&amp;lt;indirect_result_t&amp;lt;Proj&amp;amp;, I&amp;gt;&amp;gt;;
+      using difference_type = iter_difference_t&amp;lt;I&amp;gt;; // weakly_incrementableをモデル化する場合にのみ存在する
+      indirect_result_t&amp;lt;Proj&amp;amp;, I&amp;gt; operator*() const; // 宣言のみで定義なし
+    };
+  };
+  template &amp;lt;indirectly_readable I, indirectly_regular_unary_invocable&amp;lt;I&amp;gt; Proj&amp;gt;
+  using projected = projected-impl&amp;lt;I, Proj&amp;gt;::type;
 }
 ```
 * indirectly_readable[link /reference/iterator/indirectly_readable.md]
@@ -34,6 +44,15 @@ namespace std {
 
 これは射影操作を受け取るコンセプトやアルゴリズムを制約するために使用するものであり、評価される文脈で使用可能ではない。主に、射影操作の結果に対してイテレータ関連のコンセプトを適用する場合に使用する（射影の結果を再び`indirectly_readable`な型に写す事で、一部のイテレータに対するコンセプトを使いまわす事が出来る）。
 
+
+## 備考
+- C++26:
+    - C++20の`projected`の定義では、ADLによって不完全型に完全な定義を要求してしまっており、以下のようなコードがコンパイルエラーになっていたが、C++26での定義変更によって不完全型が許容されるようになった。
+        ```cpp
+        Holder&amp;lt;Incomplete&amp;gt; *a[10] = {};
+        std::ranges::count(a, a + 10, nullptr); // コンパイルエラー
+        ```
+
 ## 例
 ```cpp example
 #include &amp;lt;iterator&amp;gt;
@@ -95,3 +114,4 @@ int main() {
 ## 参照
 
 - [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
+- [P2538R1 ADL-proof `std::projected`](http://open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2538r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
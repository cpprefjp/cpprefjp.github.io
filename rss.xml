<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-01-23T15:53:35.724929</updated>
  <id>19f4d753-e051-4998-b179-9d4af7be1fe4</id>

  
    <entry>
      <title>convertible_to -- 訳語表: &#34;program-defiend type&#34;を追加</title>
      <link href="https://cpprefjp.github.io/reference/concepts/convertible_to.html"/>
      <id>04e52ed81dd8ee331331170a6f67a548fc195e6b:reference/concepts/convertible_to.md</id>
      <updated>2023-01-24T00:47:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/convertible_to.md b/reference/concepts/convertible_to.md
index b6be42623..cd446206b 100644
--- a/reference/concepts/convertible_to.md
+++ b/reference/concepts/convertible_to.md
@@ -86,7 +86,7 @@ int main()
   std::cout &amp;lt;&amp;lt; std::convertible_to&amp;lt;int*, const int*&amp;gt; &amp;lt;&amp;lt; std::endl;
   std::cout &amp;lt;&amp;lt; std::convertible_to&amp;lt;const int*, int*&amp;gt; &amp;lt;&amp;lt; std::endl;
 
-  std::cout &amp;lt;&amp;lt; &amp;#34;\n--- program defined type ---\n&amp;#34;;
+  std::cout &amp;lt;&amp;lt; &amp;#34;\n--- program-defined type ---\n&amp;#34;;
   std::cout &amp;lt;&amp;lt; std::convertible_to&amp;lt;convert_int, int&amp;gt; &amp;lt;&amp;lt; std::endl;
   std::cout &amp;lt;&amp;lt; std::convertible_to&amp;lt;int, convert_int&amp;gt; &amp;lt;&amp;lt; std::endl;
   std::cout &amp;lt;&amp;lt; std::convertible_to&amp;lt;convert_double, double&amp;gt; &amp;lt;&amp;lt; std::endl;
@@ -113,7 +113,7 @@ true
 true
 false
 
---- program defined type ---
+--- program-defined type ---
 true
 true
 false
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スタイル -- 訳語表: &#34;program-defiend type&#34;を追加</title>
      <link href="https://cpprefjp.github.io/working_style.html"/>
      <id>04e52ed81dd8ee331331170a6f67a548fc195e6b:working_style.md</id>
      <updated>2023-01-24T00:47:28+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;スタイル&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本サイトで作業を行う上でのスタイルです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「である」調&lt;/li&gt;
&lt;li&gt;句読点は「、」「。」&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;型修飾のスタイル：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A) const T &amp;amp;v&lt;/li&gt;
&lt;li&gt;B) const T&amp;amp; v&lt;/li&gt;
&lt;li&gt;C) const T &amp;amp; v&lt;/li&gt;
&lt;li&gt;D) T const &amp;amp;v&lt;/li&gt;
&lt;li&gt;E) T const&amp;amp; v&lt;/li&gt;
&lt;li&gt;F) T const &amp;amp; v&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本サイトでは、Bのスタイルで型修飾を行います。&lt;/p&gt;
&lt;h2&gt;バージョンの表記&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;p&gt;C++11以降対応については対応バージョンを明記します。バージョン表記が省略されている場合、C++03、C++98対応であることを表します。&lt;/p&gt;
&lt;h4&gt;例&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;C++17&lt;/li&gt;
&lt;li&gt;C++14&lt;/li&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;li&gt;C++03&lt;/li&gt;
&lt;li&gt;C++98&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;p&gt;開発環境の表記がない場合は、C++98対応のあらゆる環境で使用できるものとします。 
処理系の記載は、作業者が確認できたものを記載します。&lt;/p&gt;
&lt;h4&gt;例&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Clang: 2.1, 2.8&lt;/li&gt;
&lt;li&gt;GCC: 4.3.4, 4.4.3, 4.4.4, 4.5.2&lt;/li&gt;
&lt;li&gt;IBM XL C/C++ Enterprise Edition, V11.1.0.0&lt;/li&gt;
&lt;li&gt;Intel: 10.1, 11.0, 11.1, 12.0&lt;/li&gt;
&lt;li&gt;PathScale: 3.2&lt;/li&gt;
&lt;li&gt;QCC&lt;/li&gt;
&lt;li&gt;Visual C++: 2003, 2008, 2010&lt;/li&gt;
&lt;li&gt;pgCC: 11.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;それと、訳語表を随時更新していってください。&lt;/p&gt;
&lt;h3&gt;訳語表&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;英語&lt;/th&gt;
&lt;th&gt;日本語&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;abstract class&lt;/td&gt;
&lt;td&gt;抽象クラス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;aggregate&lt;/td&gt;
&lt;td&gt;集成体&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;alignment&lt;/td&gt;
&lt;td&gt;アライメント (表示位置ではなくメモリの文脈)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;apply, application&lt;/td&gt;
&lt;td&gt;適用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;arithmetic type&lt;/td&gt;
&lt;td&gt;算術型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;associative container(s)&lt;/td&gt;
&lt;td&gt;連想コンテナ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;base class&lt;/td&gt;
&lt;td&gt;基底クラス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bidirectional iterator&lt;/td&gt;
&lt;td&gt;双方向イテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bucket&lt;/td&gt;
&lt;td&gt;バケット&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;complexity&lt;/td&gt;
&lt;td&gt;計算量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;compound type&lt;/td&gt;
&lt;td&gt;複合型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;const iterator&lt;/td&gt;
&lt;td&gt;読み取り専用イテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;const reverse iterator&lt;/td&gt;
&lt;td&gt;読み取り専用逆イテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;covariant&lt;/td&gt;
&lt;td&gt;共変的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data member&lt;/td&gt;
&lt;td&gt;メンバ変数 (ユーザー視点ではデータメンバより一般的のため)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dereference&lt;/td&gt;
&lt;td&gt;間接参照&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dereferenceable&lt;/td&gt;
&lt;td&gt;間接参照可能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;derived class&lt;/td&gt;
&lt;td&gt;派生クラス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;direct base class&lt;/td&gt;
&lt;td&gt;直接基底クラス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;delegate&lt;/td&gt;
&lt;td&gt;委譲&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;effects&lt;/td&gt;
&lt;td&gt;効果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;emplace&lt;/td&gt;
&lt;td&gt;直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;empty&lt;/td&gt;
&lt;td&gt;空&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;equal&lt;/td&gt;
&lt;td&gt;等値&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;equivalence class&lt;/td&gt;
&lt;td&gt;同値分類 (数学的文脈)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;equivalence relation&lt;/td&gt;
&lt;td&gt;同値関係 (数学的文脈)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;equivalent&lt;/td&gt;
&lt;td&gt;同値 (数学的文脈)、等価 (その他文脈)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;forward iterator&lt;/td&gt;
&lt;td&gt;前方向イテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fundamental type&lt;/td&gt;
&lt;td&gt;単純型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ill-formed&lt;/td&gt;
&lt;td&gt;&lt;a class=&#34;cpprefjp-defined-word&#34;&gt;不適格&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;implementation-defined&lt;/td&gt;
&lt;td&gt;処理系定義&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;indirect base class&lt;/td&gt;
&lt;td&gt;間接基底クラス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;inherited&lt;/td&gt;
&lt;td&gt;継承&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;input iterator&lt;/td&gt;
&lt;td&gt;入力イテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iterator&lt;/td&gt;
&lt;td&gt;イテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;literal type&lt;/td&gt;
&lt;td&gt;リテラル型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;load factor&lt;/td&gt;
&lt;td&gt;負荷率&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lvalue reference&lt;/td&gt;
&lt;td&gt;左辺値参照&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;max load factor&lt;/td&gt;
&lt;td&gt;最大負荷率&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;member&lt;/td&gt;
&lt;td&gt;メンバ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;move&lt;/td&gt;
&lt;td&gt;(std::move 的な意味で)ムーブ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;move assignment&lt;/td&gt;
&lt;td&gt;ムーブ代入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;move constructor&lt;/td&gt;
&lt;td&gt;ムーブコンストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mutable iterator&lt;/td&gt;
&lt;td&gt;可変イテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;non-virtual base class&lt;/td&gt;
&lt;td&gt;非仮想基底クラス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;note&lt;/td&gt;
&lt;td&gt;注&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;output iterator&lt;/td&gt;
&lt;td&gt;出力イテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;overload&lt;/td&gt;
&lt;td&gt;オーバーロード&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(proposal) paper&lt;/td&gt;
&lt;td&gt;提案文書&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;partial ordering&lt;/td&gt;
&lt;td&gt;半順序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;partition&lt;/td&gt;
&lt;td&gt;区分化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pointer&lt;/td&gt;
&lt;td&gt;ポインタ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;polymorphic&lt;/td&gt;
&lt;td&gt;多相的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;power of N&lt;/td&gt;
&lt;td&gt;Nの累乗&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;predicate&lt;/td&gt;
&lt;td&gt;述語&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;propagation, propagate&lt;/td&gt;
&lt;td&gt;伝播&lt;br /&gt; (伝搬は誤用が広まったものなので使わない)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pure virtual function&lt;/td&gt;
&lt;td&gt;純粋仮想関数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;random access iterator&lt;/td&gt;
&lt;td&gt;ランダムアクセスイテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;range&lt;/td&gt;
&lt;td&gt;一般用途の場合：範囲&lt;br /&gt; Rangeアルゴリズム・Rangeアダプタ・Rangeオブジェクトの場合：Range&lt;br /&gt; range-based for：範囲for文&lt;br /&gt; 2つのイテレータによる範囲：イテレータ範囲&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;remarks&lt;/td&gt;
&lt;td&gt;備考&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;requires&lt;/td&gt;
&lt;td&gt;要件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;returns&lt;/td&gt;
&lt;td&gt;戻り値&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reverse iterator&lt;/td&gt;
&lt;td&gt;逆イテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rvalue reference&lt;/td&gt;
&lt;td&gt;右辺値参照&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sequence container(s)&lt;/td&gt;
&lt;td&gt;シーケンスコンテナ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;signed&lt;/td&gt;
&lt;td&gt;符号付き&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stop request&lt;/td&gt;
&lt;td&gt;停止要求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stop state&lt;/td&gt;
&lt;td&gt;停止状態&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spurious Failure&lt;/td&gt;
&lt;td&gt;見かけ上の失敗&lt;br /&gt; &lt;a href=&#34;https://togetter.com/li/430770&#34; target=&#34;_blank&#34;&gt;https://togetter.com/li/430770&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;strict weak ordering&lt;/td&gt;
&lt;td&gt;狭義の弱順序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;strong ordering&lt;/td&gt;
&lt;td&gt;全順序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;structural type&lt;/td&gt;
&lt;td&gt;構造的型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;synchronization&lt;/td&gt;
&lt;td&gt;同期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;total ordering relationalship&lt;/td&gt;
&lt;td&gt;全順序関係&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;trailing return type&lt;/td&gt;
&lt;td&gt;後置戻り値型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;trait&lt;/td&gt;
&lt;td&gt;トレイト&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;trivial&lt;/td&gt;
&lt;td&gt;トリビアル (逆は非トリビアル)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;underlying type&lt;/td&gt;
&lt;td&gt;基底型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unordered associative container(s)&lt;/td&gt;
&lt;td&gt;非順序連想コンテナ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unspecified&lt;/td&gt;
&lt;td&gt;未規定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;program-defined type&lt;/td&gt;
&lt;td&gt;プログラム定義型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;virtual base class&lt;/td&gt;
&lt;td&gt;仮想基底クラス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;weak ordering&lt;/td&gt;
&lt;td&gt;弱順序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;well-formed&lt;/td&gt;
&lt;td&gt;適格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;eligible&lt;/td&gt;
&lt;td&gt;資格のある&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>inout_ptr_t -- memory/(in)out_ptr_t: 特殊化可能なことを追記(#1050)</title>
      <link href="https://cpprefjp.github.io/reference/memory/inout_ptr_t.html"/>
      <id>731e1ea31aaf0eb0022d342263e3d4b8c359e55a:reference/memory/inout_ptr_t.md</id>
      <updated>2023-01-24T00:32:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/inout_ptr_t.md b/reference/memory/inout_ptr_t.md
index 4dffa9e67..1dc0927b3 100644
--- a/reference/memory/inout_ptr_t.md
+++ b/reference/memory/inout_ptr_t.md
@@ -15,7 +15,10 @@ namespace std {
 2重ポインタ`T**`(=`Pointer*`)引数経由で既存リソースを解放してから新規確保リソースへのポインタを返すレガシーC関数に対して、取得されたポインタ値をスマートポインタに格納するアダプタクラス。
 アダプタオブジェクトの生成には、[`std::inout_ptr()`](inout_ptr.md)ヘルパ関数を利用する。
 
-C++標準スマートポインタ[`std::unique_ptr`](unique_ptr.md)を始め、互換インタフェースをもつ任意のスマートポインタ型`Smart`を取り扱える。
+リソース占有管理セマンティクスを提供するC++標準スマートポインタ[`std::unique_ptr`](unique_ptr.md)を始め、互換インタフェースをもつ任意のスマートポインタ型`Smart`を取り扱える。
+
+プログラマは`inout_ptr_t`クラステンプレートの特殊化を定義してもよい。
+このとき1つ以上のプログラム定義型に依存していれば、プライマリテンプレートにおける要件を満たす必要はない。
 
 
 ## テンプレートパラメータ制約
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>out_ptr_t -- memory/(in)out_ptr_t: 特殊化可能なことを追記(#1050)</title>
      <link href="https://cpprefjp.github.io/reference/memory/out_ptr_t.html"/>
      <id>731e1ea31aaf0eb0022d342263e3d4b8c359e55a:reference/memory/out_ptr_t.md</id>
      <updated>2023-01-24T00:32:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/out_ptr_t.md b/reference/memory/out_ptr_t.md
index 5a2dee0b0..6e0994a0c 100644
--- a/reference/memory/out_ptr_t.md
+++ b/reference/memory/out_ptr_t.md
@@ -17,6 +17,9 @@ namespace std {
 
 C++標準スマートポインタ[`std::shared_ptr`](shared_ptr.md)や[`std::unique_ptr`](unique_ptr.md)を始め、互換インタフェースをもつ任意のスマートポインタ型`Smart`を取り扱える。
 
+プログラマは`out_ptr_t`クラステンプレートの特殊化を定義してもよい。
+このとき1つ以上のプログラム定義型に依存していれば、プライマリテンプレートにおける要件を満たす必要はない。
+
 
 ## テンプレートパラメータ制約
 `Pointer`はCpp17NullablePointer要件を満たすこと
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- formatter : コード修飾を追加</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter.html"/>
      <id>93bd53edf4fda360fdc78d36d80cbbe94036c3b5:reference/format/formatter.md</id>
      <updated>2023-01-24T00:16:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter.md b/reference/format/formatter.md
index b93271146..7c882484a 100644
--- a/reference/format/formatter.md
+++ b/reference/format/formatter.md
@@ -153,6 +153,7 @@ int main()
 }
 ```
 * std::format_context[link basic_format_context.md]
+* std::format[link format.md]
 
 #### 出力
 ```
@@ -212,6 +213,7 @@ int main()
 * std::format_context[link basic_format_context.md]
 * ctx.out()[link basic_format_context/out.md]
 * std::format_to[link format_to.md]
+* std::format[link format.md]
 
 
 #### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- formatter : format, set_brackets, set_separator, set_debug_formatを追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>3269f7f3c99ee899ad037629c023ff4edb7577a0:reference/format/format.md</id>
      <updated>2023-01-23T23:06:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index 9f8b0498e..83a6ce5a0 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -177,7 +177,7 @@ Range・シーケンスコンテナに対して使用できる標準のオプシ
 Range・シーケンスコンテナと同じだが、デフォルトで`m`書式を適用する。
 
 
-#### &amp;lt;a id=&amp;#34;tuple-format-options&amp;#34; name=&amp;#34;tuple-format-options&amp;#34;&amp;gt;pair、tupleの書式 (C++23)&amp;lt;/a&amp;gt;
+#### &amp;lt;a id=&amp;#34;tuple-format-options&amp;#34; name=&amp;#34;#tuple-format-options&amp;#34;&amp;gt;pair、tupleの書式 (C++23)&amp;lt;/a&amp;gt;
 
 [`std::pair`](/reference/utility/pair.md)と[`std::tuple`](/reference/tuple/tuple.md)に対して使用できる標準のオプション書式は次の通り(`[]`は省略可の意味)。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- formatter : format, set_brackets, set_separator, set_debug_formatを追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter.html"/>
      <id>3269f7f3c99ee899ad037629c023ff4edb7577a0:reference/format/formatter.md</id>
      <updated>2023-01-23T23:06:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter.md b/reference/format/formatter.md
index 4f87612a8..b93271146 100644
--- a/reference/format/formatter.md
+++ b/reference/format/formatter.md
@@ -112,22 +112,22 @@ namespace std {
 | メンバ関数 | 説明 | 対応バージョン |
 |------------|------|----------------|
 | [`parse`](formatter/parse.md)   | 書式の解析を行う | C++20 |
-| [`format`](formatter/format.md.nolink) | 書式化を行う | C++20 |
+| [`format`](formatter/format.md) | 書式化を行う | C++20 |
 
 
 ### 文字・文字列に対する特殊化
 
 | メンバ関数 | 説明 | 対応バージョン |
 |------------|------|----------------|
-| [`set_debug_format`](formatter/set_debug_format.md.nolink) | デバッグ書式を有効にする | C++23 |
+| [`set_debug_format`](formatter/set_debug_format.md) | デバッグ出力を有効にする | C++23 |
 
 
 ### pair / tuple向けの特殊化
 
 | メンバ関数 | 説明 | 対応バージョン |
 |------------|------|----------------|
-| [`set_separator`](formatter/set_separator.md.nolink) | 要素の区切り文字を設定する | C++23 |
-| [`set_brackets`](formatter/set_brackets.md.nolink)   | 全体の囲み文字を設定する | C++23 |
+| [`set_separator`](formatter/set_separator.md) | 要素の区切り文字を設定する | C++23 |
+| [`set_brackets`](formatter/set_brackets.md)   | 全体の囲み文字を設定する | C++23 |
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- formatter : format, set_brackets, set_separator, set_debug_formatを追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter/format.html"/>
      <id>3269f7f3c99ee899ad037629c023ff4edb7577a0:reference/format/formatter/format.md</id>
      <updated>2023-01-23T23:06:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter/format.md b/reference/format/formatter/format.md
new file mode 100644
index 000000000..fb4995889
--- /dev/null
+++ b/reference/format/formatter/format.md
@@ -0,0 +1,41 @@
+# format
+* format[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* formatter[meta class]
+* cpp20[meta cpp]
+
+```cpp
+template &amp;lt;class FormatContext&amp;gt;
+typename FormatContext::iterator
+  format(T&amp;amp; x, FormatContext&amp;amp; ctx) const;
+```
+* FormatContext[link /reference/format/basic_format_context.md]
+
+## 概要
+受け取った型`T`のオブジェクトを書式化する。
+
+
+## 効果
+- [`parse()`](parse.md)メンバ関数で解析した書式文字列の指定に基づいて、`x`の値を文字列に変換する
+- [`std::pair`](/reference/utility/pair.md)と[`std::tuple`](/reference/tuple/tuple.md)に対する`formatter`の特殊化の場合、以下を[`ctx.out()`](/reference/format/basic_format_context/out.md)に出力する：
+    - 開きカッコを出力する
+    - 範囲`[0, タプルの要素数)`の各要素`I`について、
+        - `I != 0`であれば区切り文字を出力する
+        - タプルの`I`番目の要素を、その型の`formatter`で出力する
+    - 閉じカッコを出力する
+
+
+## 戻り値
+出力がおわった位置の出力イテレータを返す。
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13
+- [Visual C++](/implementation.md#visual_cpp): ??
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>parse -- formatter : format, set_brackets, set_separator, set_debug_formatを追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter/parse.html"/>
      <id>3269f7f3c99ee899ad037629c023ff4edb7577a0:reference/format/formatter/parse.md</id>
      <updated>2023-01-23T23:06:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter/parse.md b/reference/format/formatter/parse.md
index 789c2f672..2d4f6ab23 100644
--- a/reference/format/formatter/parse.md
+++ b/reference/format/formatter/parse.md
@@ -20,9 +20,9 @@ constexpr typename ParseContext::iterator
 - デフォルトの`formatter`の場合、[`std::format()`](/reference/format/format.md)関数ページに記載されている「[標準のオプション書式](/reference/format/format.md#std-format-options)」を解析する
 - [`std::pair`](/reference/utility/pair.md)と[`std::tuple`](/reference/tuple/tuple.md)に対する`formatter`の特殊化の場合、[`std::format()`](/reference/format/format.md)関数ページに記載されている「[pair、tupleの書式](/reference/format/format.md#tuple-format-options)」を解析する
     - このとき、書式によって以下を設定する
-        - 全体の囲み文字を、[`set_brackets()`](set_brackets.md.nolink)メンバ関数で設定する
-        - 要素の区切り文字を、[`set_separator()`](set_separator.md.nolink)メンバ関数で設定する
-        - 各要素の`formatter`を`e`として、[`e.set_debug_format()`](set_debug_format.md.nolink)が有効な式であれば、それを呼び出してデバッグ書式を有効にする
+        - 全体の囲み文字を、[`set_brackets()`](set_brackets.md)メンバ関数で設定する
+        - 要素の区切り文字を、[`set_separator()`](set_separator.md)メンバ関数で設定する
+        - 各要素の`formatter`を`e`として、[`e.set_debug_format()`](set_debug_format.md)が有効な式であれば、それを呼び出してデバッグ書式を有効にする
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_brackets -- formatter : format, set_brackets, set_separator, set_debug_formatを追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter/set_brackets.html"/>
      <id>3269f7f3c99ee899ad037629c023ff4edb7577a0:reference/format/formatter/set_brackets.md</id>
      <updated>2023-01-23T23:06:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter/set_brackets.md b/reference/format/formatter/set_brackets.md
new file mode 100644
index 000000000..972fd8cff
--- /dev/null
+++ b/reference/format/formatter/set_brackets.md
@@ -0,0 +1,41 @@
+# set_brackets
+* format[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* formatter[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;class charT, formattable&amp;lt;charT&amp;gt;... Ts&amp;gt;
+constexpr void
+  formatter&amp;lt;pair-or-tuple&amp;lt;Ts...&amp;gt;&amp;gt;::set_brackets(
+    basic_string_view&amp;lt;charT&amp;gt; opening,
+    basic_string_view&amp;lt;charT&amp;gt; closing); // (1)
+```
+
+## 概要
+全体の囲み文字を設定する。
+
+このメンバ関数は、[`std::format()`](/reference/format/format.md)関数の「[pair、tupleの書式](/reference/format/format.md#tuple-format-options)」において囲み文字を変更するオプションを指定することで自動的に呼び出される。
+
+デフォルトの開きカッコは`&amp;#34;(&amp;#34;`、閉じカッコは`&amp;#34;)&amp;#34;`である。
+
+
+## 効果
+`opening`を開きカッコ、`closing`を閉じカッコとして設定する。
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2286R8 Formatting Ranges](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2286r8.html)
+- [P2585R1 Improve default container formatting](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2585r1.html)
+    - C++23から、Range・コンテナ、`pair`、`tuple`のフォーマット出力、および文字・文字列のデバッグ指定 (`&amp;#34;?&amp;#34;`) が追加された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_debug_format -- formatter : format, set_brackets, set_separator, set_debug_formatを追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter/set_debug_format.html"/>
      <id>3269f7f3c99ee899ad037629c023ff4edb7577a0:reference/format/formatter/set_debug_format.md</id>
      <updated>2023-01-23T23:06:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter/set_debug_format.md b/reference/format/formatter/set_debug_format.md
new file mode 100644
index 000000000..94d7141c7
--- /dev/null
+++ b/reference/format/formatter/set_debug_format.md
@@ -0,0 +1,40 @@
+# set_debug_format
+* format[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* formatter[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr void
+  formatter&amp;lt;char-or-string&amp;gt;::set_debug_format(); // (1)
+```
+
+## 概要
+デバッグ出力を有効にする。
+
+このメンバ関数は、[`std::format()`](/reference/format/format.md)関数の文字・文字列に対する書式として「? (デバッグ出力)」の指定をすることで自動的に呼び出される。デフォルトは無効である。
+
+この機能が有効になることで、文字・文字列が引用符で囲まれ、エスケープシーケンスがエスケープされて出力される (例:`&amp;#34;\n&amp;#34;`は`&amp;#34;\&amp;#34;\n\&amp;#34;&amp;#34;`となる)。
+
+タプルおよびRangeの要素としての文字・文字列に対しては、デフォルトで有効であることに注意。
+
+
+## 効果
+デバッグ出力を有効にする。
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2286R8 Formatting Ranges](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2286r8.html)
+- [P2585R1 Improve default container formatting](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2585r1.html)
+    - C++23から、Range・コンテナ、`pair`、`tuple`のフォーマット出力、および文字・文字列のデバッグ指定 (`&amp;#34;?&amp;#34;`) が追加された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_separator -- formatter : format, set_brackets, set_separator, set_debug_formatを追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter/set_separator.html"/>
      <id>3269f7f3c99ee899ad037629c023ff4edb7577a0:reference/format/formatter/set_separator.md</id>
      <updated>2023-01-23T23:06:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter/set_separator.md b/reference/format/formatter/set_separator.md
new file mode 100644
index 000000000..d54d732a9
--- /dev/null
+++ b/reference/format/formatter/set_separator.md
@@ -0,0 +1,39 @@
+# set_separator
+* format[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* formatter[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;class charT, formattable&amp;lt;charT&amp;gt;... Ts&amp;gt;
+constexpr void
+  formatter&amp;lt;pair-or-tuple&amp;lt;Ts...&amp;gt;&amp;gt;::set_separator(basic_string_view&amp;lt;charT&amp;gt; sep); // (1)
+```
+
+## 概要
+要素の区切り文字を設定する。
+
+このメンバ関数は、[`std::format()`](/reference/format/format.md)関数の「[pair、tupleの書式](/reference/format/format.md#tuple-format-options)」において区切り文字を変更するオプションを指定することで自動的に呼び出される。
+
+デフォルトの開きカッコは`&amp;#34;, &amp;#34;`である。
+
+
+## 効果
+`sep`を区切り文字として設定する。
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2286R8 Formatting Ranges](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2286r8.html)
+- [P2585R1 Improve default container formatting](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2585r1.html)
+    - C++23から、Range・コンテナ、`pair`、`tuple`のフォーマット出力、および文字・文字列のデバッグ指定 (`&amp;#34;?&amp;#34;`) が追加された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>advance_to -- basic_format_parse_context::advance_to : 説明見直し</title>
      <link href="https://cpprefjp.github.io/reference/format/basic_format_parse_context/advance_to.html"/>
      <id>d1ac632cff8ca15c520099a205d3039e6b7111c1:reference/format/basic_format_parse_context/advance_to.md</id>
      <updated>2023-01-23T22:37:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/basic_format_parse_context/advance_to.md b/reference/format/basic_format_parse_context/advance_to.md
index 5f490afd7..8d2967bf9 100644
--- a/reference/format/basic_format_parse_context/advance_to.md
+++ b/reference/format/basic_format_parse_context/advance_to.md
@@ -12,11 +12,15 @@ constexpr void advance_to(const_iterator it);
 ## 概要
 指定したイテレータを先頭イテレータとして設定する。
 
-この関数は、書式文字列の全体を解析する処理において、[`formatter`](/reference/format/formatter.md)`::`[`parse()`](/reference/format/formatter/parse.md)の戻り値を、次の解析の初期位置として設定するために使用する。
+この関数は、書式文字列の全体を解析する処理において、[`formatter`](/reference/format/formatter.md)`::`[`parse()`](/reference/format/formatter/parse.md)の戻り値から、次の解析を始めるために使用する。
 
 ```cpp
 while (…) {
-  next_parse_ctx.advance_to(f.parse(parse_ctx));
+  auto it = f.parse(parse_ctx);
+
+  /* 次の書式指定までitを進める… */
+
+  next_parse_ctx.advance_to(it);
 }
 ```
 * parse[link /reference/format/formatter/parse.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
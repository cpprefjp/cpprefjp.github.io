<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-11-10T04:59:13.638026</updated>
  <id>ad98d9c9-e313-4907-9aeb-93ed1629d31a</id>

  
    <entry>
      <title>operator++ -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/op_increment.html"/>
      <id>cddc689f167b69f7ec876d5d01d36fe3f8860829:reference/iterator/move_iterator/op_increment.md</id>
      <updated>2020-11-10T13:54:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/op_increment.md b/reference/iterator/move_iterator/op_increment.md
index 0e0f19caa..6932c26e8 100644
--- a/reference/iterator/move_iterator/op_increment.md
+++ b/reference/iterator/move_iterator/op_increment.md
@@ -35,6 +35,7 @@ return *this;
         return tmp;
         ```
         * base[link base.md]
+
     - それ以外の場合 : `++base()`と等価
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- 表示調整</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/op_equal.html"/>
      <id>4893ad2bfebd429fe5ed5930a35636ffa909eacc:reference/iterator/move_iterator/op_equal.md</id>
      <updated>2020-11-10T13:54:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/op_equal.md b/reference/iterator/move_iterator/op_equal.md
index bc20ffd86..0b3a80656 100644
--- a/reference/iterator/move_iterator/op_equal.md
+++ b/reference/iterator/move_iterator/op_equal.md
@@ -39,12 +39,13 @@ namespace std {
 `return x.base() == y.base();`
 
 `x.base()`と`y.base()`はオーバーロードによって次のどちらか
+
 - [`move_iterator::base()`](base.md)
 - [`move_sentinel::base()`](/reference/iterator/move_sentinel/base.md.nolink)
 
 ## 備考
 
-C++20以降、この演算子により以下のオーバーロードが使用可能になる。
+C++20以降、この演算子により以下の演算子が使用可能になる。
 
 - [`operator!=(const move_iterator&amp;lt;Iterator1&amp;gt;&amp;amp; x, const move_iterator&amp;lt;Iterator2&amp;gt;&amp;amp; y)`](/reference/iterator/move_iterator/op_not_equal.md) 
 - `operator!=(const move_iterator&amp;amp; x, const move_sentinel&amp;lt;S&amp;gt;&amp;amp; y)`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator- (非メンバ関数) -- 表示調整</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/op_minus.html"/>
      <id>4893ad2bfebd429fe5ed5930a35636ffa909eacc:reference/iterator/move_iterator/op_minus.md</id>
      <updated>2020-11-10T13:54:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/op_minus.md b/reference/iterator/move_iterator/op_minus.md
index 21c4cfa00..60b9377ce 100644
--- a/reference/iterator/move_iterator/op_minus.md
+++ b/reference/iterator/move_iterator/op_minus.md
@@ -39,6 +39,7 @@ namespace std {
 `return x.base() - y.base();`
 
 `x.base()`と`y.base()`はオーバーロードによって次のどちらか
+
 - [`move_iterator::base()`](base.md)
 - [`move_sentinel::base()`](/reference/iterator/move_sentinel/base.md.nolink)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator++ -- muvo_iterator::operator++ : 表示調整</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/op_increment.html"/>
      <id>c8707287dd27de9ee3912de19457bf3f68edf384:reference/iterator/move_iterator/op_increment.md</id>
      <updated>2020-11-10T13:38:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/op_increment.md b/reference/iterator/move_iterator/op_increment.md
index 0e0f19caa..6932c26e8 100644
--- a/reference/iterator/move_iterator/op_increment.md
+++ b/reference/iterator/move_iterator/op_increment.md
@@ -35,6 +35,7 @@ return *this;
         return tmp;
         ```
         * base[link base.md]
+
     - それ以外の場合 : `++base()`と等価
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>inserter -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/inserter.html"/>
      <id>d5589965e35b7456e32042d236bc28cf2da9f5c7:reference/iterator/inserter.md</id>
      <updated>2020-11-10T12:29:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/inserter.md b/reference/iterator/inserter.md
index 598ba78b9..e6ec38d9f 100644
--- a/reference/iterator/inserter.md
+++ b/reference/iterator/inserter.md
@@ -15,7 +15,7 @@ namespace std {
 }
 ```
 * insert_iterator[link insert_iterator.md]
-* ranges::iterator_t[link /reference/iterator/iterator_t.md]
+* ranges::iterator_t[link /reference/iterator/iterator_t.md.nolink]
 
 ## 概要
 `insert_iterator`のヘルパ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>move_iterator -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator.html"/>
      <id>d5589965e35b7456e32042d236bc28cf2da9f5c7:reference/iterator/move_iterator.md</id>
      <updated>2020-11-10T12:29:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator.md b/reference/iterator/move_iterator.md
index 2c64f7f34..53b595753 100644
--- a/reference/iterator/move_iterator.md
+++ b/reference/iterator/move_iterator.md
@@ -59,7 +59,7 @@ namespace std {
 | `difference_type` | [`iter_difference_t`](/reference/iterator/iter_difference_t.md)`&amp;lt;Iterator&amp;gt;` | C++20 |
 | `pointer` | `Iterator` | C++11 |
 | `value_type` | [`iter_value_t`](/reference/iterator/iter_value_t.md)`&amp;lt;Iterator&amp;gt;` | C++20 |
-| `iterator_category` | [`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;Iterator&amp;gt;::iterator_category` &amp;lt;br/&amp;gt; ただし、[`contiguous_iterator_tag`](reference/iterator/iterator_tag.md)となるときは`random_access_iterator_tag` | C++20 |
+| `iterator_category` | [`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;Iterator&amp;gt;::iterator_category` &amp;lt;br/&amp;gt; ただし、[`contiguous_iterator_tag`](/reference/iterator/iterator_tag.md)となるときは`random_access_iterator_tag` | C++20 |
 | `iterator_concept` | [`input_iterator_tag`](/reference/iterator/iterator_tag.md) | C++20 |
 | `reference` | [`iter_rvalue_reference_t`](/reference/iterator/iter_rvalue_reference_t.md)`&amp;lt;Iterator&amp;gt;`  | C++20 |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/op_equal.html"/>
      <id>d5589965e35b7456e32042d236bc28cf2da9f5c7:reference/iterator/move_iterator/op_equal.md</id>
      <updated>2020-11-10T12:29:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/op_equal.md b/reference/iterator/move_iterator/op_equal.md
index 64958cf0f..bc20ffd86 100644
--- a/reference/iterator/move_iterator/op_equal.md
+++ b/reference/iterator/move_iterator/op_equal.md
@@ -25,7 +25,7 @@ namespace std {
 }
 ```
 * sentinel_for[link /reference/iterator/sentinel_for.md)
-* move_sentinel[link /reference/iterator/move_sentinel.md]
+* move_sentinel[link /reference/iterator/move_sentinel.md.nolink]
 
 ## 概要
 2つの`move_iterator`オブジェクトが同じ要素を指しているかを判定する。
@@ -40,7 +40,7 @@ namespace std {
 
 `x.base()`と`y.base()`はオーバーロードによって次のどちらか
 - [`move_iterator::base()`](base.md)
-- [`move_sentinel::base()`](/reference/iterator/move_sentinel/base.md)
+- [`move_sentinel::base()`](/reference/iterator/move_sentinel/base.md.nolink)
 
 ## 備考
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator- (非メンバ関数) -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/op_minus.html"/>
      <id>d5589965e35b7456e32042d236bc28cf2da9f5c7:reference/iterator/move_iterator/op_minus.md</id>
      <updated>2020-11-10T12:29:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/op_minus.md b/reference/iterator/move_iterator/op_minus.md
index 533a26999..21c4cfa00 100644
--- a/reference/iterator/move_iterator/op_minus.md
+++ b/reference/iterator/move_iterator/op_minus.md
@@ -28,7 +28,7 @@ namespace std {
 * base[link /reference/iterator/move_iterator/base.md]
 * sized_sentinel_for[link /reference/iterator/sized_sentinel_for.md)
 * iter_difference_t[link /reference/iterator/iter_difference_t.md]
-* move_sentinel[link /reference/iterator/move_sentinel.md]
+* move_sentinel[link /reference/iterator/move_sentinel.md.nolink]
 
 ## 概要
 2つのイテレータの差を求める。
@@ -40,7 +40,7 @@ namespace std {
 
 `x.base()`と`y.base()`はオーバーロードによって次のどちらか
 - [`move_iterator::base()`](base.md)
-- [`move_sentinel::base()`](/reference/iterator/move_sentinel/base.md)
+- [`move_sentinel::base()`](/reference/iterator/move_sentinel/base.md.nolink)
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>inserter -- move_iterator : C++20対応 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/inserter.html"/>
      <id>3ed32e8cf0b4c70cb7246838248555dbb9341e63:reference/iterator/inserter.md</id>
      <updated>2020-11-10T12:26:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/inserter.md b/reference/iterator/inserter.md
index b8d4ebfd8..598ba78b9 100644
--- a/reference/iterator/inserter.md
+++ b/reference/iterator/inserter.md
@@ -63,4 +63,3 @@ int main()
 ## 参照
 - [P1032R1 Misc `constexpr` bits](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1032r1.html)
 - [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>move_iterator -- move_iterator : C++20対応 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator.html"/>
      <id>3ed32e8cf0b4c70cb7246838248555dbb9341e63:reference/iterator/move_iterator.md</id>
      <updated>2020-11-10T12:26:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator.md b/reference/iterator/move_iterator.md
index 093c9c302..2c64f7f34 100644
--- a/reference/iterator/move_iterator.md
+++ b/reference/iterator/move_iterator.md
@@ -40,6 +40,8 @@ namespace std {
 
 ## メンバ型
 
+### C++17まで
+
 | 名前 | 説明 | 対応バージョン |
 |------------------------------------------------------|-------------|-------|
 | `iterator_type` | `Iterator` | C++11 |
@@ -49,6 +51,18 @@ namespace std {
 | `iterator_category` | [`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;Iterator&amp;gt;::iterator_category` | C++11 |
 | `reference` | `value_type&amp;amp;&amp;amp;` | C++11 |
 
+### C++20
+
+| 名前 | 説明 | 対応バージョン |
+|------------------------------------------------------|-------------|-------|
+| `iterator_type` | `Iterator` | C++11 |
+| `difference_type` | [`iter_difference_t`](/reference/iterator/iter_difference_t.md)`&amp;lt;Iterator&amp;gt;` | C++20 |
+| `pointer` | `Iterator` | C++11 |
+| `value_type` | [`iter_value_t`](/reference/iterator/iter_value_t.md)`&amp;lt;Iterator&amp;gt;` | C++20 |
+| `iterator_category` | [`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;Iterator&amp;gt;::iterator_category` &amp;lt;br/&amp;gt; ただし、[`contiguous_iterator_tag`](reference/iterator/iterator_tag.md)となるときは`random_access_iterator_tag` | C++20 |
+| `iterator_concept` | [`input_iterator_tag`](/reference/iterator/iterator_tag.md) | C++20 |
+| `reference` | [`iter_rvalue_reference_t`](/reference/iterator/iter_rvalue_reference_t.md)`&amp;lt;Iterator&amp;gt;`  | C++20 |
+
 
 ## 非メンバ関数
 
@@ -63,6 +77,16 @@ namespace std {
 | [`operator-`](move_iterator/op_minus.md)          | 2つの`move_iterator`の差を求める | C++11 |
 | [`operator+`](move_iterator/op_plus.md)           | イテレータを進める | C++11 |
 | [`make_move_iterator`](make_move_iterator.md)     | `move_iterator`のヘルパ関数 | C++11 |
+| [`iter_move`](move_iterator/iter_move.md.nolink)     | イテレータの要素の移動 | C++20 |
+| [`iter_swap`](move_iterator/iter_swap.md.nolink)     | イテレータの要素の交換 | C++20 |
+
+### `move_sentinel`に関する操作
+
+| 名前 | 説明 | 対応バージョン |
+|------------------------------------------------------|-------------|-------|
+| [`operator==`](move_iterator/op_equal.md)         | 等値比較 | C++20 |
+| [`operator!=`](move_iterator/op_not_equal.md)     | 非等値比較 | C++20 |
+| [`operator-`](move_iterator/op_minus.md)          | `move_iterator`と終端との差を求める | C++20 |
 
 
 ## 例
@@ -112,4 +136,4 @@ int main()
 
 ## 参照
 - [C++11 右辺値参照・ムーブセマンティクス](/lang/cpp11/rvalue_ref_and_move_semantics.md)
-
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- move_iterator : C++20対応 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/base.html"/>
      <id>3ed32e8cf0b4c70cb7246838248555dbb9341e63:reference/iterator/move_iterator/base.md</id>
      <updated>2020-11-10T12:26:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/base.md b/reference/iterator/move_iterator/base.md
index e7ba199e1..f50d81e0c 100644
--- a/reference/iterator/move_iterator/base.md
+++ b/reference/iterator/move_iterator/base.md
@@ -58,3 +58,4 @@ int main()
 
 ## 参照
 - [P0031R0 A Proposal to Add Constexpr Modifiers to `reverse_iterator`, `move_iterator`, `array` and Range Access](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0031r0.html)
+- [P1207R4 Movability of Single-pass Iterators](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1207r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator[] -- move_iterator : C++20対応 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/op_at.html"/>
      <id>3ed32e8cf0b4c70cb7246838248555dbb9341e63:reference/iterator/move_iterator/op_at.md</id>
      <updated>2020-11-10T12:26:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/op_at.md b/reference/iterator/move_iterator/op_at.md
index eecd41e36..b7ba4369a 100644
--- a/reference/iterator/move_iterator/op_at.md
+++ b/reference/iterator/move_iterator/op_at.md
@@ -8,6 +8,7 @@
 ```cpp
 unspecified operator[](difference_type n) const;           // C++11
 constexpr unspecified operator[](difference_type n) const; // C++17
+constexpr reference operator[](difference_type n) const;   // C++20
 ```
 * unspecified[italic]
 
@@ -16,7 +17,11 @@ constexpr unspecified operator[](difference_type n) const; // C++17
 
 
 ## 戻り値
-`return std::`[`move`](/reference/utility/move.md)`(`[`base`](base.md)`()[n]);`
+
+- C++17まで
+    - `return std::`[`move`](/reference/utility/move.md)`(`[`base`](base.md)`()[n]);`
+- C++20
+    - `return ranges::`[`iter_move`](/reference/iterator/iter_move.md.nolink)`(`[`base`](base.md)`() + n);`
 
 
 ## 例
@@ -60,3 +65,4 @@ int main()
 
 ## 参照
 - [P0031R0 A Proposal to Add Constexpr Modifiers to `reverse_iterator`, `move_iterator`, `array` and Range Access](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0031r0.html)
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator* -- move_iterator : C++20対応 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/op_deref.html"/>
      <id>3ed32e8cf0b4c70cb7246838248555dbb9341e63:reference/iterator/move_iterator/op_deref.md</id>
      <updated>2020-11-10T12:26:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/op_deref.md b/reference/iterator/move_iterator/op_deref.md
index cdaf4fad2..dee2359da 100644
--- a/reference/iterator/move_iterator/op_deref.md
+++ b/reference/iterator/move_iterator/op_deref.md
@@ -15,7 +15,12 @@ constexpr reference operator*() const; // C++17
 
 
 ## 戻り値
-`std::move(*base())`
+
+- C++17まで
+    - `std::move(*base())`
+- C++20
+    - `return ranges::`[`iter_move`](/reference/iterator/iter_move.md.nolink)`(`[`base`](base.md)`());`
+
 
 
 ## 例
@@ -58,3 +63,4 @@ int main()
 
 ## 参照
 - [P0031R0 A Proposal to Add Constexpr Modifiers to `reverse_iterator`, `move_iterator`, `array` and Range Access](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0031r0.html)
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- move_iterator : C++20対応 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/op_equal.html"/>
      <id>3ed32e8cf0b4c70cb7246838248555dbb9341e63:reference/iterator/move_iterator/op_equal.md</id>
      <updated>2020-11-10T12:26:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/op_equal.md b/reference/iterator/move_iterator/op_equal.md
index 8ace477ce..64958cf0f 100644
--- a/reference/iterator/move_iterator/op_equal.md
+++ b/reference/iterator/move_iterator/op_equal.md
@@ -8,20 +8,47 @@
 namespace std {
   template &amp;lt;class Iterator1, class Iterator2&amp;gt;
   bool operator==(const move_iterator&amp;lt;Iterator1&amp;gt;&amp;amp; x,
-                  const move_iterator&amp;lt;Iterator2&amp;gt;&amp;amp; y);           // C++11
+                  const move_iterator&amp;lt;Iterator2&amp;gt;&amp;amp; y);           // (1) C++11
 
   template &amp;lt;class Iterator1, class Iterator2&amp;gt;
   constexpr bool operator==(const move_iterator&amp;lt;Iterator1&amp;gt;&amp;amp; x,
-                            const move_iterator&amp;lt;Iterator2&amp;gt;&amp;amp; y); // C++17
+                            const move_iterator&amp;lt;Iterator2&amp;gt;&amp;amp; y); // (1) C++17
+
+  template&amp;lt;sentinel_for&amp;lt;Iterator&amp;gt; S&amp;gt;
+  friend constexpr bool operator==(const move_iterator&amp;amp; x,
+                                   const move_sentinel&amp;lt;S&amp;gt;&amp;amp; y);  // (2) C++20
+  
+  // (2)のoperator==により、以下のオーバーロードが使用可能になる
+  template&amp;lt;sentinel_for&amp;lt;Iterator&amp;gt; S&amp;gt;
+  friend constexpr bool operator==(const move_sentinel&amp;lt;S&amp;gt;&amp;amp; x,
+                                   const move_iterator&amp;amp; y);     // (3) C++20
 }
 ```
+* sentinel_for[link /reference/iterator/sentinel_for.md)
+* move_sentinel[link /reference/iterator/move_sentinel.md]
 
 ## 概要
 2つの`move_iterator`オブジェクトが同じ要素を指しているかを判定する。
 
+## テンプレートパラメータ制約
+
+`x.base() == y.base()`が有効であり、戻り値が`bool`に変換可能であること。
 
 ## 戻り値
-`return x.`[`base`](base.md)`() == y.`[`base`](base.md)`();`
+
+`return x.base() == y.base();`
+
+`x.base()`と`y.base()`はオーバーロードによって次のどちらか
+- [`move_iterator::base()`](base.md)
+- [`move_sentinel::base()`](/reference/iterator/move_sentinel/base.md)
+
+## 備考
+
+C++20以降、この演算子により以下のオーバーロードが使用可能になる。
+
+- [`operator!=(const move_iterator&amp;lt;Iterator1&amp;gt;&amp;amp; x, const move_iterator&amp;lt;Iterator2&amp;gt;&amp;amp; y)`](/reference/iterator/move_iterator/op_not_equal.md) 
+- `operator!=(const move_iterator&amp;amp; x, const move_sentinel&amp;lt;S&amp;gt;&amp;amp; y)`
+- `operator!=(const move_sentinel&amp;lt;S&amp;gt;&amp;amp; x, const move_iterator&amp;amp; y)`
 
 ## 例
 ```cpp example
@@ -69,3 +96,4 @@ equal
 
 ## 参照
 - [P0031R0 A Proposal to Add Constexpr Modifiers to `reverse_iterator`, `move_iterator`, `array` and Range Access](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0031r0.html)
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt; -- move_iterator : C++20対応 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/op_greater.html"/>
      <id>3ed32e8cf0b4c70cb7246838248555dbb9341e63:reference/iterator/move_iterator/op_greater.md</id>
      <updated>2020-11-10T12:26:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/op_greater.md b/reference/iterator/move_iterator/op_greater.md
index f6963f6a8..3ed2238c6 100644
--- a/reference/iterator/move_iterator/op_greater.md
+++ b/reference/iterator/move_iterator/op_greater.md
@@ -19,6 +19,9 @@ namespace std {
 ## 概要
 2つの`move_iterator`オブジェクトにおいて、左辺が右辺より大きいかを判定する。
 
+## テンプレートパラメータ制約
+
+`y.base() &amp;lt; x.base()`が有効であり、戻り値が`bool`に変換可能であること。
 
 ## 戻り値
 `return y &amp;lt; x;`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= -- move_iterator : C++20対応 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/op_greater_equal.html"/>
      <id>3ed32e8cf0b4c70cb7246838248555dbb9341e63:reference/iterator/move_iterator/op_greater_equal.md</id>
      <updated>2020-11-10T12:26:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/op_greater_equal.md b/reference/iterator/move_iterator/op_greater_equal.md
index 5832156c4..e21a2ad0b 100644
--- a/reference/iterator/move_iterator/op_greater_equal.md
+++ b/reference/iterator/move_iterator/op_greater_equal.md
@@ -19,6 +19,9 @@ namespace std {
 ## 概要
 2つの`move_iterator`オブジェクトにおいて、左辺が右辺以上かを判定する。
 
+## テンプレートパラメータ制約
+
+`x.base() &amp;lt; y.base()`が有効であり、戻り値が`bool`に変換可能であること。
 
 ## 戻り値
 `return !(x &amp;lt; y);`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator++ -- move_iterator : C++20対応 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/op_increment.html"/>
      <id>3ed32e8cf0b4c70cb7246838248555dbb9341e63:reference/iterator/move_iterator/op_increment.md</id>
      <updated>2020-11-10T12:26:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/op_increment.md b/reference/iterator/move_iterator/op_increment.md
index 52ae867d8..0e0f19caa 100644
--- a/reference/iterator/move_iterator/op_increment.md
+++ b/reference/iterator/move_iterator/op_increment.md
@@ -11,6 +11,7 @@ constexpr move_iterator&amp;amp; operator++();   // (1) C++17
 
 move_iterator operator++(int);           // (2) C++11
 constexpr move_iterator operator++(int); // (2) C++17
+constexpr auto operator++(int);          // (2) C++20
 ```
 
 ## 概要
@@ -27,14 +28,14 @@ return *this;
 * base[link base.md]
 
 - 後置インクリメント `operator++(int)`：
-
-```cpp
-move_iterator tmp = *this;
-++base();
-return tmp;
-```
-* base[link base.md]
-
+    - `Iterator`が[`forward_iterator`](/reference/iterator/iterator_tag.md)のモデルとなる場合、以下と等価
+        ```cpp
+        move_iterator tmp = *this;
+        ++base();
+        return tmp;
+        ```
+        * base[link base.md]
+    - それ以外の場合 : `++base()`と等価
 
 ## 例
 ```cpp example
@@ -77,3 +78,4 @@ int main()
 
 ## 参照
 - [P0031R0 A Proposal to Add Constexpr Modifiers to `reverse_iterator`, `move_iterator`, `array` and Range Access](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0031r0.html)
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- move_iterator : C++20対応 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/op_less.html"/>
      <id>3ed32e8cf0b4c70cb7246838248555dbb9341e63:reference/iterator/move_iterator/op_less.md</id>
      <updated>2020-11-10T12:26:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/op_less.md b/reference/iterator/move_iterator/op_less.md
index 503b811eb..418cc24be 100644
--- a/reference/iterator/move_iterator/op_less.md
+++ b/reference/iterator/move_iterator/op_less.md
@@ -19,6 +19,9 @@ namespace std {
 ## 概要
 2つの`move_iterator`オブジェクトにおいて、左辺が右辺より小さいかを判定する。
 
+## テンプレートパラメータ制約
+
+`x.base() &amp;lt; y.base()`が有効であり、戻り値が`bool`に変換可能であること。
 
 ## 戻り値
 `return x.`[`base`](base.md)`() &amp;lt; y.`[`base`](base.md)`();`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;= -- move_iterator : C++20対応 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/op_less_equal.html"/>
      <id>3ed32e8cf0b4c70cb7246838248555dbb9341e63:reference/iterator/move_iterator/op_less_equal.md</id>
      <updated>2020-11-10T12:26:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/op_less_equal.md b/reference/iterator/move_iterator/op_less_equal.md
index 0067a7e8e..b9e5c36b7 100644
--- a/reference/iterator/move_iterator/op_less_equal.md
+++ b/reference/iterator/move_iterator/op_less_equal.md
@@ -19,6 +19,9 @@ namespace std {
 ## 概要
 2つの`move_iterator`オブジェクトにおいて、左辺が右辺以下かを判定する。
 
+## テンプレートパラメータ制約
+
+`y.base() &amp;lt; x.base()`が有効であり、戻り値が`bool`に変換可能であること。
 
 ## 戻り値
 `return !(y &amp;lt; x);`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator- (非メンバ関数) -- move_iterator : C++20対応 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/op_minus.html"/>
      <id>3ed32e8cf0b4c70cb7246838248555dbb9341e63:reference/iterator/move_iterator/op_minus.md</id>
      <updated>2020-11-10T12:26:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/op_minus.md b/reference/iterator/move_iterator/op_minus.md
index 27eacde26..533a26999 100644
--- a/reference/iterator/move_iterator/op_minus.md
+++ b/reference/iterator/move_iterator/op_minus.md
@@ -9,23 +9,38 @@ namespace std {
   template &amp;lt;class Iterator1, class Iterator2&amp;gt;
   auto operator-(const move_iterator&amp;lt;Iterator1&amp;gt;&amp;amp; x,
                  const move_iterator&amp;lt;Iterator2&amp;gt;&amp;amp; y)
-    -&amp;gt; decltype(x.base() - y.base());                         // C++11
+    -&amp;gt; decltype(x.base() - y.base());                             // (1) C++11
 
   template &amp;lt;class Iterator1, class Iterator2&amp;gt;
   constexpr auto operator-(const move_iterator&amp;lt;Iterator1&amp;gt;&amp;amp; x,
                            const move_iterator&amp;lt;Iterator2&amp;gt;&amp;amp; y)
-    -&amp;gt; decltype(x.base() - y.base());                         // C++17
+    -&amp;gt; decltype(x.base() - y.base());                             // (1) C++17
+
+  template&amp;lt;sized_sentinel_for&amp;lt;Iterator&amp;gt; S&amp;gt;
+  friend constexpr iter_difference_t&amp;lt;Iterator&amp;gt;
+    operator-(const move_sentinel&amp;lt;S&amp;gt;&amp;amp; x, const move_iterator&amp;amp; y); // (2) C++20
+
+  template&amp;lt;sized_sentinel_for&amp;lt;Iterator&amp;gt; S&amp;gt;
+  friend constexpr iter_difference_t&amp;lt;Iterator&amp;gt;
+    operator-(const move_iterator&amp;amp; x, const move_sentinel&amp;lt;S&amp;gt;&amp;amp; y); // (3) C++20
 }
 ```
 * base[link /reference/iterator/move_iterator/base.md]
+* sized_sentinel_for[link /reference/iterator/sized_sentinel_for.md)
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
+* move_sentinel[link /reference/iterator/move_sentinel.md]
 
 ## 概要
 2つのイテレータの差を求める。
 
 
 ## 戻り値
-`return x.`[`base`](base.md)`() - y.`[`base`](base.md)`();`
 
+`return x.base() - y.base();`
+
+`x.base()`と`y.base()`はオーバーロードによって次のどちらか
+- [`move_iterator::base()`](base.md)
+- [`move_sentinel::base()`](/reference/iterator/move_sentinel/base.md)
 
 ## 例
 ```cpp example
@@ -71,3 +86,4 @@ int main()
 ## 参照
 - [LWG Issue 685. `reverse_iterator`/`move_iterator` difference has invalid signatures](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#685)
 - [P0031R0 A Proposal to Add Constexpr Modifiers to `reverse_iterator`, `move_iterator`, `array` and Range Access](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0031r0.html)
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- move_iterator : C++20対応 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/op_not_equal.html"/>
      <id>3ed32e8cf0b4c70cb7246838248555dbb9341e63:reference/iterator/move_iterator/op_not_equal.md</id>
      <updated>2020-11-10T12:26:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/op_not_equal.md b/reference/iterator/move_iterator/op_not_equal.md
index d538b42f6..c1adc18e2 100644
--- a/reference/iterator/move_iterator/op_not_equal.md
+++ b/reference/iterator/move_iterator/op_not_equal.md
@@ -19,10 +19,16 @@ namespace std {
 ## 概要
 2つの`move_iterator`オブジェクトが同じ要素を指していないかを判定する。
 
+## テンプレートパラメータ制約
+
+`x.base() == y.base()`が有効であり、戻り値が`bool`に変換可能であること。
 
 ## 戻り値
 `return !(x == y);`
 
+## 備考
+
+C++20以降、この演算子は[`operator==`](op_equal.md)によって使用可能となる。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator+ (非メンバ関数) -- move_iterator : C++20対応 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/op_plus.html"/>
      <id>3ed32e8cf0b4c70cb7246838248555dbb9341e63:reference/iterator/move_iterator/op_plus.md</id>
      <updated>2020-11-10T12:26:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/op_plus.md b/reference/iterator/move_iterator/op_plus.md
index 9f3e63bee..d60ae4330 100644
--- a/reference/iterator/move_iterator/op_plus.md
+++ b/reference/iterator/move_iterator/op_plus.md
@@ -15,12 +15,21 @@ namespace std {
   constexpr move_iterator&amp;lt;Iterator&amp;gt; operator+(
     typename move_iterator&amp;lt;Iterator&amp;gt;::difference_type n,
     const move_iterator&amp;lt;Iterator&amp;gt;&amp;amp; x);                   // C++17
+
+  template &amp;lt;class Iterator&amp;gt;
+  constexpr move_iterator&amp;lt;Iterator&amp;gt; operator+(
+    iter_difference_t&amp;lt;Iterator&amp;gt; n,
+    const move_iterator&amp;lt;Iterator&amp;gt;&amp;amp; x);                   // C++20
 }
 ```
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
 
 ## 概要
 イテレータを`n`回進める。
 
+## テンプレートパラメータ制約
+
+`x + n`が有効であり、戻り値型が`Iterator`であること。
 
 ## 戻り値
 `return x + n;`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
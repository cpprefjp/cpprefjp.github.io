<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-01-28T14:04:22.205972</updated>
  <id>80599a89-abeb-4640-8fa9-5b26bd6bd55b</id>

  
    <entry>
      <title>expected -- expected/expected: コンストラクタ,デストラクタ(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.html"/>
      <id>7e9e00dcdfb90c4507302201a4b8a69b8dbab683:reference/expected/expected.md</id>
      <updated>2023-01-28T22:58:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.md b/reference/expected/expected.md
index 3984d89de..be2612602 100644
--- a/reference/expected/expected.md
+++ b/reference/expected/expected.md
@@ -31,8 +31,8 @@ namespace std {
 
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|-------|
-| [`(constructor)`](expected/op_constructor.md.nolink) | コンストラクタ | C++23 |
-| [`(destructor)`](expected/op_destructor.md.nolink)   | デストラクタ | C++23 |
+| [`(constructor)`](expected/op_constructor.md) | コンストラクタ | C++23 |
+| [`(destructor)`](expected/op_destructor.md)   | デストラクタ | C++23 |
 
 ### 代入
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- expected/expected: コンストラクタ,デストラクタ(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/op_constructor.html"/>
      <id>7e9e00dcdfb90c4507302201a4b8a69b8dbab683:reference/expected/expected/op_constructor.md</id>
      <updated>2023-01-28T22:58:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/op_constructor.md b/reference/expected/expected/op_constructor.md
new file mode 100644
index 000000000..98779f478
--- /dev/null
+++ b/reference/expected/expected/op_constructor.md
@@ -0,0 +1,318 @@
+# コンストラクタ
+* expected[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* expected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr expected();                               // (1)
+constexpr expected(const expected&amp;amp;);                // (2)
+constexpr expected(expected&amp;amp;&amp;amp;) noexcept(see below); // (3)
+
+template&amp;lt;class U, class G&amp;gt;
+constexpr explicit(see below) expected(const expected&amp;lt;U, G&amp;gt;&amp;amp;); // (4)
+template&amp;lt;class U, class G&amp;gt;
+constexpr explicit(see below) expected(expected&amp;lt;U, G&amp;gt;&amp;amp;&amp;amp;);      // (5)
+
+template&amp;lt;class U = T&amp;gt;
+constexpr explicit(see below) expected(U&amp;amp;&amp;amp; v);      // (6)
+
+template&amp;lt;class G&amp;gt;
+constexpr explicit(see below) expected(const unexpected&amp;lt;G&amp;gt;&amp;amp;); // (7)
+template&amp;lt;class G&amp;gt;
+constexpr explicit(see below) expected(unexpected&amp;lt;G&amp;gt;&amp;amp;&amp;amp;);      // (8)
+
+template&amp;lt;class... Args&amp;gt;
+constexpr explicit expected(in_place_t, Args&amp;amp;&amp;amp;...); // (9)
+template&amp;lt;class U, class... Args&amp;gt;
+constexpr explicit expected(in_place_t, initializer_list&amp;lt;U&amp;gt;, Args&amp;amp;&amp;amp;...); // (10)
+
+template&amp;lt;class... Args&amp;gt;
+constexpr explicit expected(unexpect_t, Args&amp;amp;&amp;amp;...); // (11)
+template&amp;lt;class U, class... Args&amp;gt;
+constexpr explicit expected(unexpect_t, initializer_list&amp;lt;U&amp;gt;, Args&amp;amp;&amp;amp;...); // (12)
+```
+* see below[italic]
+* unexpected[link ../unexpected.md]
+* unexpect_t[link ../unexpect_t.md]
+* in_place_t[link /reference/utility/in_place_t.md]
+
+## 概要
+- (1) : 正常値型`T`を値初期化して保持する。
+- (2) : コピーコンストラクタ。
+- (3) : ムーブコンストラクタ。
+- (4) : 変換可能な`expected`オブジェクトからコピー構築する。
+- (5) : 変換可能な`expected`オブジェクトからムーブ構築する。
+- (6) : 正常値型`T`に変換可能な型`U`の値を正常値として受け取り、コピーまたはムーブして保持する。
+- (7) : 変換可能な[`unexpected`](../unexpected.md)オブジェクトかエラー値をコピー構築する。
+- (8) : 変換可能な[`unexpected`](../unexpected.md)オブジェクトからエラー値をムーブ構築する。
+- (9) : 正常値型`T`のコンストラクタ引数として任意個の引数を受け取って、コンストラクタ内で型`T`のオブジェクトを有効値として生成し、保持する。
+- (10) : 正常値型`T`のコンストラクタ引数として初期化子リストと任意個の引数を受け取って、コンストラクタ内で型`T`のオブジェクトを有効値として生成し、保持する。
+- (11) : エラー値型`E`のコンストラクタ引数として任意個の引数を受け取って、コンストラクタ内で型`E`のオブジェクトを有効値として生成し、保持する。
+- (12) : エラー値型`E`のコンストラクタ引数として初期化子リストと任意個の引数を受け取って、コンストラクタ内で型`E`のオブジェクトを有効値として生成し、保持する。
+
+
+説明用のテンプレート変数`converts-from-any-cvref`を次の通り定義する。
+
+```cpp
+template&amp;lt;class T, class W&amp;gt;
+constexpr bool converts-from-any-cvref =
+  disjunction_v&amp;lt;is_constructible&amp;lt;T, W&amp;amp;&amp;gt;, is_convertible&amp;lt;W&amp;amp;, T&amp;gt;,
+                is_constructible&amp;lt;T, W&amp;gt;, is_convertible&amp;lt;W, T&amp;gt;,
+                is_constructible&amp;lt;T, const W&amp;amp;&amp;gt;, is_convertible&amp;lt;const W&amp;amp;, T&amp;gt;,
+                is_constructible&amp;lt;T, const W&amp;gt;, is_convertible&amp;lt;const W, T&amp;gt;&amp;gt;;
+```
+* disjunction_v[link /reference/type_traits/disjunction.md]
+* is_constructible[link /reference/type_traits/is_constructible.md]
+* is_convertible[link /reference/type_traits/is_convertible.md]
+
+
+## テンプレートパラメータ制約
+- (1) : [`is_default_constructible_v`](/reference/type_traits/is_default_constructible.md)`&amp;lt;T&amp;gt; == true`
+- (3) : [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;T&amp;gt; == true`[`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;E&amp;gt; == true`
+- (4) : 次の制約を全て満たすこと
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;T, const U&amp;amp;&amp;gt; == true`
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;E, const G&amp;amp;&amp;gt; == true`
+    - `converts-from-any-cvref&amp;lt;T, expected&amp;lt;U, G&amp;gt;&amp;gt; == false`
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;`[`unexpected`](../unexpected.md)`&amp;lt;E&amp;gt;, expected&amp;lt;U, G&amp;gt;&amp;amp;&amp;gt; == false`
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;`[`unexpected`](../unexpected.md)`&amp;lt;E&amp;gt;, expected&amp;lt;U, G&amp;gt;&amp;gt; == false`
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;`[`unexpected`](../unexpected.md)`&amp;lt;E&amp;gt;, const expected&amp;lt;U, G&amp;gt;&amp;amp;&amp;gt; == false`
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;`[`unexpected`](../unexpected.md)`&amp;lt;E&amp;gt;, const expected&amp;lt;U, G&amp;gt;&amp;gt; == false`
+- (5) : 次の制約を全て満たすこと
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;T, U&amp;gt; == true`
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;E, G&amp;gt; == true`
+    - `converts-from-any-cvref&amp;lt;T, expected&amp;lt;U, G&amp;gt;&amp;gt; == false`
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;`[`unexpected`](../unexpected.md)`&amp;lt;E&amp;gt;, expected&amp;lt;U, G&amp;gt;&amp;amp;&amp;gt; == false`
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;`[`unexpected`](../unexpected.md)`&amp;lt;E&amp;gt;, expected&amp;lt;U, G&amp;gt;&amp;gt; == false`
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;`[`unexpected`](../unexpected.md)`&amp;lt;E&amp;gt;, const expected&amp;lt;U, G&amp;gt;&amp;amp;&amp;gt; == false`
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;`[`unexpected`](../unexpected.md)`&amp;lt;E&amp;gt;, const expected&amp;lt;U, G&amp;gt;&amp;gt; == false`
+- (6) : 次の制約を全て満たすこと
+    - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;U&amp;gt;,` [`in_place_t`](/reference/utility/in_place_t.md)`&amp;gt; == false`
+    - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;expected,` [`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;U&amp;gt;&amp;gt; == false`
+    - [`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;U&amp;gt;`は[`unexpected`](../unexpected.md)の特殊化でない
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;T, U&amp;gt; == true`
+- (7) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;E, const G&amp;amp;&amp;gt; == true`
+- (8) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;E, G&amp;gt; == true`
+- (9) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;T, Args...&amp;gt; == true`
+- (10) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;T, initializer_list&amp;lt;U&amp;gt;&amp;amp;, Args...&amp;gt; == true`
+- (11) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;E, Args...&amp;gt; == true`
+- (12) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;E, initializer_list&amp;lt;U&amp;gt;&amp;amp;, Args...&amp;gt; == true`
+
+
+## 効果
+- (1) : 正常値を値初期化して保持する。
+- (2) : `rhs`が正常値を保持していれば、[`*rhs`](op_deref.md.nolink)で正常値を直接非リスト初期化する。そうでなければ、`rhs.`[`error()`](error.md.nolink)でエラー値を直接非リスト初期化する。
+- (3) : `rhs`が正常値を保持していれば、[`std::move`](/reference/utility/move.md)`(`[`*rhs`](op_deref.md.nolink)`)`で正常値を直接非リスト初期化する。そうでなければ、[`std::move`](/reference/utility/move.md)`(rhs.`[`error()`](error.md.nolink)`)`でエラー値を直接非リスト初期化する。
+- (4) : `rhs`が正常値を保持していれば、[`std::forward`](/reference/utility/forward.md)`&amp;lt;const U&amp;amp;&amp;gt;(`[`*rhs`](op_deref.md.nolink)`)`で正常値を直接非リスト初期化する。そうでなければ、[`std::forward`](/reference/utility/forward.md)`&amp;lt;const G&amp;amp;&amp;gt;(rhs.`[`error()`](error.md.nolink)`)`でエラー値を直接非リスト初期化する。
+- (5) : `rhs`が正常値を保持していれば、[`std::forward`](/reference/utility/forward.md)`&amp;lt;U&amp;gt;(`[`*rhs`](op_deref.md.nolink)`)`で正常値を直接非リスト初期化する。そうでなければ、[`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(rhs.`[`error()`](error.md.nolink)`)`でエラー値を直接非リスト初期化する。
+- (6) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;U&amp;gt;(v)`で正常値を直接非リスト初期化する。
+- (7) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;const G&amp;amp;&amp;gt;(rhs.`[`error()`](error.md.nolink)`)`でエラー値を直接非リスト初期化する。
+- (8) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(rhs.`[`error()`](error.md.nolink)`)`でエラー値を直接非リスト初期化する。
+- (9) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...`で正常値を直接非リスト初期化する。
+- (10) : `il,` [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...`で正常値を直接非リスト初期化する。
+- (11) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...`でエラー値を直接非リスト初期化する。
+- (12) : `il,` [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...`でエラー値を直接非リスト初期化する。
+
+
+## 事後条件
+- (1) : 有効値を保持している。
+- (2) : `rhs`が有効値を保持する場合は`*this`も有効値を保持し、`rhs`がエラー値を保持する場合は`*this`もエラー値を保持する。
+- (3) : `rhs`が有効値を保持する場合は`*this`も有効値を保持し、`rhs`がエラー値を保持する場合は`*this`もエラー値を保持する。`rhs.`[`has_value()`](has_value.md.nolink)は変化しない。
+- (4), (5) : `rhs`が有効値を保持する場合は`*this`も有効値を保持し、`rhs`がエラー値を保持する場合は`*this`もエラー値を保持する。`rhs.`[`has_value()`](has_value.md.nolink)は変化しない。
+- (6) : 有効値を保持している。
+- (7), (8) : エラー値を保持している。
+- (9), (10) : 有効値を保持している。
+- (11), (12) : エラー値を保持している。
+
+
+## 例外
+- (1) : 正常値型の初期化から送出される例外。
+- (2) : 正常値型またはエラー値型の初期化から送出される例外。
+- (3) : 正常値型またはエラー値型の初期化から送出される例外。
+    - [`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;T&amp;gt;`かつ[`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;E&amp;gt;`であれば、ムーブコンストラクタはnoexpcet指定される。
+- (4), (5) : 正常値型またはエラー値型の初期化から送出される例外。
+- (6) : 正常値型の初期化から送出される例外。
+- (7), (8) : エラー値型の初期化から送出される例外。
+- (9), (10) : 正常値型の初期化から送出される例外。
+- (11), (12) : エラー値型の初期化から送出される例外。
+
+
+## delete定義される条件
+- (2) : `!`[`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;T&amp;gt; || !`[`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;E&amp;gt;`
+
+
+## トリビアルに定義される条件
+- (2) : [`is_trivially_copy_constructible_v`](/reference/type_traits/is_trivially_copy_constructible.md)`&amp;lt;T&amp;gt; &amp;amp;&amp;amp;` [`is_trivially_copy_constructible_v`](/reference/type_traits/is_trivially_copy_constructible.md)`&amp;lt;E&amp;gt;`
+- (3) : [`is_trivially_move_constructible_v`](/reference/type_traits/is_trivially_move_constructible.md)`&amp;lt;T&amp;gt; &amp;amp;&amp;amp;` [`is_trivially_move_constructible_v`](/reference/type_traits/is_trivially_move_constructible.md)`&amp;lt;E&amp;gt;`
+
+
+## explicitになる条件
+- (4) : `!`[`is_convertible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;const U&amp;amp;, T&amp;gt; || !`[`is_convertible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;const G&amp;amp;, E&amp;gt;`
+- (5) : `!`[`is_convertible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;U, T&amp;gt; || !`[`is_convertible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;G, E&amp;gt;`
+- (6) : `!`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;U, T&amp;gt;`
+- (7) : `!`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const G&amp;amp;, E&amp;gt;`
+- (8) : `!`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;G, E&amp;gt;`
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;memory&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;tuple&amp;gt;
+#include &amp;lt;utility&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+// std::pair型から2要素std::tuple型へはコピー変換可能
+using IntPair  = std::pair&amp;lt;int, int&amp;gt;;
+using IntTuple = std::tuple&amp;lt;int, int&amp;gt;;
+
+// std::unique_ptr型からstd::shared_ptr型へはムーブ変換可能
+using UniquePtr = std::unique_ptr&amp;lt;int&amp;gt;;
+using SharedPtr = std::shared_ptr&amp;lt;int&amp;gt;;
+
+// 引数リスト または initializer_list＋引数リスト から構築可能な型
+struct ComplexType {
+  std::string data;
+  std::vector&amp;lt;int&amp;gt; seq;
+
+  ComplexType(const char* ptr, size_t len)
+    : data(ptr, len) {}
+  ComplexType(std::initializer_list&amp;lt;int&amp;gt; il, std::string_view sv)
+    : data(sv), seq(il) {} 
+};
+
+int main()
+{
+  // (1) デフォルトコンストラクタ
+  {
+    std::expected&amp;lt;int, std::string&amp;gt; x;
+    assert(x.has_value());
+    assert(x.value() == 0);
+    // int型の値初期化{}は値0
+  }
+
+  // (2) コピーコンストラクタ
+  {
+    std::expected&amp;lt;int, std::string&amp;gt; srcV = 42;
+    std::expected&amp;lt;int, std::string&amp;gt; dstV = srcV;
+    assert(srcV.has_value() &amp;amp;&amp;amp; dstV.has_value());
+    assert(srcV.value() == 42 &amp;amp;&amp;amp; dstV.value() == 42);
+
+    std::expected&amp;lt;int, std::string&amp;gt; srcE = std::unexpected{&amp;#34;Oops&amp;#34;};
+    std::expected&amp;lt;int, std::string&amp;gt; dstE = srcE;
+    assert(!srcE.has_value() &amp;amp;&amp;amp; !dstE.has_value());
+    assert(srcE.error() == &amp;#34;Oops&amp;#34; &amp;amp;&amp;amp; dstE.error() == &amp;#34;Oops&amp;#34;);
+  }
+
+  // (3) ムーブコンストラクタ
+  {
+    std::expected&amp;lt;std::string, int&amp;gt; srcV = &amp;#34;ok&amp;#34;;
+    std::expected&amp;lt;std::string, int&amp;gt; dstV = std::move(srcV);
+    assert(srcV.has_value() &amp;amp;&amp;amp; dstV.has_value());
+    assert(dstV.value() == &amp;#34;ok&amp;#34;);
+    // srcV.value()はstd::stringムーブ後の未規定の値
+
+    std::expected&amp;lt;int, std::string&amp;gt; srcE = std::unexpected{&amp;#34;ng&amp;#34;};
+    std::expected&amp;lt;int, std::string&amp;gt; dstE = std::move(srcE);
+    assert(!srcE.has_value() &amp;amp;&amp;amp; !dstE.has_value());
+    assert(dstE.error() == &amp;#34;ng&amp;#34;);
+    // srcE.error()はstd::stringムーブ後の未規定の値
+  }
+
+  // (4) 変換コピー構築
+  {
+    std::expected&amp;lt;IntPair,  int&amp;gt; src = IntPair{1, 2};
+    std::expected&amp;lt;IntTuple, int&amp;gt; dst = src;
+    assert(src.has_value() &amp;amp;&amp;amp; dst.has_value());
+    assert((dst.value() == IntTuple{1, 2}));
+  }
+
+  // (5) 変換ムーブ構築
+  {
+    std::expected&amp;lt;UniquePtr, int&amp;gt; src = std::make_unique&amp;lt;int&amp;gt;(42);
+    std::expected&amp;lt;SharedPtr, int&amp;gt; dst = std::move(src);
+    assert(src.has_value() &amp;amp;&amp;amp; dst.has_value());
+    assert(*dst.value() == 42);
+    assert(src.value() == nullptr);
+    // ムーブ後のstd::unique_ptr型はnullptrが保証される
+  }
+
+  // (6) 正常値の変換コピー／ムーブ構築
+  {
+    IntPair src1{1, 2};
+    std::expected&amp;lt;IntTuple, int&amp;gt; dst1 = src1;
+    assert(dst1.has_value());
+    assert((dst1.value() == IntTuple{1, 2}));
+
+    UniquePtr src2 = std::make_unique&amp;lt;int&amp;gt;(42);
+    std::expected&amp;lt;SharedPtr, int&amp;gt; dst2 = std::move(src2);
+    assert(dst2.has_value());
+    assert(*dst2.value() == 42);
+  }
+
+  // (7),(8) エラー値の変換コピー／ムーブ構築
+  {
+    std::unexpected&amp;lt;IntPair&amp;gt; src1{std::in_place, 1, 2};
+    std::expected&amp;lt;int, IntTuple&amp;gt; dst1 = src1;
+    assert(not dst1.has_value());
+    assert((dst1.error() == IntTuple{1, 2}));
+
+    UniquePtr src2 = std::make_unique&amp;lt;int&amp;gt;(42);
+    std::expected&amp;lt;int, SharedPtr&amp;gt; dst2 = std::unexpected{std::move(src2)};
+    assert(not dst2.has_value());
+    assert(*dst2.error() == 42);
+  }
+
+  // (9),(10) 引数リストから正常値を直接構築
+  {
+    std::expected&amp;lt;ComplexType, int&amp;gt; x1{std::in_place, &amp;#34;C++&amp;#34;, 1};
+    assert(x1.has_value());
+    assert(x1.value().data == &amp;#34;C&amp;#34;);
+    // &amp;#34;C++&amp;#34;より長さ1の文字列が構築されている
+
+    std::expected&amp;lt;ComplexType, int&amp;gt; x2{std::in_place, {5, 6, 7, 8}, &amp;#34;Steps&amp;#34;};
+    assert(x2.has_value());
+    assert(x2.value().data == &amp;#34;Steps&amp;#34;);
+    assert((x2.value().seq == std::vector&amp;lt;int&amp;gt;{5, 6, 7, 8}));
+  }
+
+  // (11),(12) 引数リストからエラー値を直接構築
+  {
+    std::expected&amp;lt;int, ComplexType&amp;gt; x1{std::unexpect, &amp;#34;Hello!&amp;#34;, 4};
+    assert(not x1.has_value());
+    assert(x1.error().data == &amp;#34;Hell&amp;#34;);
+    // &amp;#34;Hello!&amp;#34;より長さ4の文字列が構築されている
+
+    std::expected&amp;lt;int, ComplexType&amp;gt; x2{std::unexpect, {1, 2, 3}, &amp;#34;Lotus&amp;#34;};
+    assert(not x2.has_value());
+    assert(x2.error().data == &amp;#34;Lotus&amp;#34;);
+    assert((x2.error().seq == std::vector&amp;lt;int&amp;gt;{1, 2, 3}));
+  }
+}
+```
+* has_value[link has_value.md.nolink]
+* value[link value.md.nolink]
+* error[link error.md.nolink]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- expected/expected: コンストラクタ,デストラクタ(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/op_destructor.html"/>
      <id>7e9e00dcdfb90c4507302201a4b8a69b8dbab683:reference/expected/expected/op_destructor.md</id>
      <updated>2023-01-28T22:58:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/op_destructor.md b/reference/expected/expected/op_destructor.md
new file mode 100644
index 000000000..23add4ea4
--- /dev/null
+++ b/reference/expected/expected/op_destructor.md
@@ -0,0 +1,37 @@
+# デストラクタ
+* expected[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* expected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr ~expected();
+```
+
+## 概要
+`expected`オブジェクトを破棄する。
+
+
+## 効果
+正常値を保持している場合は、正常値オブジェクトのデストラクタを呼び出す。
+エラー値を保持している場合は、エラー値オブジェクトのデストラクタを呼び出す。
+
+
+## トリビアルに定義される条件
+[`is_trivially_destructible_v`](/reference/type_traits/is_trivially_destructible.md)`&amp;lt;T&amp;gt; &amp;amp;&amp;amp;` [`is_trivially_destructible_v`](/reference/type_traits/is_trivially_destructible.md)`&amp;lt;E&amp;gt;`
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unexpect_t -- expected/expected: コンストラクタ,デストラクタ(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/unexpect_t.html"/>
      <id>7e9e00dcdfb90c4507302201a4b8a69b8dbab683:reference/expected/unexpect_t.md</id>
      <updated>2023-01-28T22:58:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/unexpect_t.md b/reference/expected/unexpect_t.md
index 03ee4f5c6..5ef532035 100644
--- a/reference/expected/unexpect_t.md
+++ b/reference/expected/unexpect_t.md
@@ -15,7 +15,7 @@ namespace std {
 ```
 
 ## 概要
-`unexpected_t`は、[`expected`コンストラクタ](expected/op_constructor.md.nolink)において、エラー値型のコンストラクタ引数を受け取って構築するためのタグ型である。
+`unexpected_t`は、[`expected`コンストラクタ](expected/op_constructor.md)において、エラー値型のコンストラクタ引数を受け取って構築するためのタグ型である。
 
 `unexpected_t`型の定数`unexpect`が提供される。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ディレクトリ構造 -- Fix typo</title>
      <link href="https://cpprefjp.github.io/start_editing/directory_structure.html"/>
      <id>c77af98f9553e4515f55edd53f96e65f1c58dc22:start_editing/directory_structure.md</id>
      <updated>2023-01-28T12:53:01+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;ディレクトリ構造&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;lang&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;cpp{version}.mdの形式で、各C++バージョンの言語機能ページを作る&lt;/li&gt;
&lt;li&gt;future.mdは、将来のC++で検討されている言語機能を記載するところである。導入予定だった機能が再検討になった場合などに使用する&lt;/li&gt;
&lt;li&gt;archive.mdは、廃案になったC++機能だが解説として残す価値のあるものがある場合に、記載するところである&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;reference / module&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;reference階層は、ヘッダベースのライブラリリファレンスで、その階層直下にはヘッダページを置く&lt;/li&gt;
&lt;li&gt;module階層は、モジュールベースのライブラリリファレンスで、その階層直下にはモジュールページを置く&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;reference階層とmodule階層は上記以外は同じであるため、以下、共通のルールを書きます。&lt;/p&gt;
&lt;h3&gt;ヘッダ・モジュール階層&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ヘッダ・モジュール階層以下に、それに所属している機能のページを置く&lt;/li&gt;
&lt;li&gt;どのヘッダ・モジュールにも属さない機能の場合は、以下のように対応する&lt;ul&gt;
&lt;li&gt;全体で使用する説明専用の機能は、仮のヘッダ&lt;code&gt;&amp;lt;exposition-only&amp;gt;&lt;/code&gt;に属するものとして記載する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;クラス階層&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;クラスに属するメンバ関数と型は、クラス階層の下に置く&lt;/li&gt;
&lt;li&gt;オーバーロードを意図している関数、そのクラス向けに特殊化した機能も、クラス階層の下に置き、機能の列挙としてもクラスページで行う&lt;ul&gt;
&lt;li&gt;オーバーロードを意図している関数の例は以下：&lt;ul&gt;
&lt;li&gt;非メンバ関数の演算子&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::get()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::begin()&lt;/code&gt;/&lt;code&gt;std::end()&lt;/code&gt;およびそれに類するもの&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;演算子オーバーロードは、&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; (出力ストリームへの出力) と &lt;code&gt;std::operator&amp;gt;&amp;gt;&lt;/code&gt; (入力ストリームからの入力) を除き、左辺のクラスに属するものとする&lt;ul&gt;
&lt;li&gt;特殊な例として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/system_error/error_code.html&#34;&gt;std::error_code&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/system_error/error_condition.html&#34;&gt;std::error_condition&lt;/a&gt;&lt;/code&gt;の比較演算子は、クラス階層ではなくヘッダ階層としている。これは所属関係がむずかしいためである&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;コンセプト階層&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;コンセプトによってオーバーロード・特殊化されている場合は、コンセプトの階層を作って、その下に置く。機能の列挙としてはヘッダページで行う&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;名前空間階層&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;名前空間の階層は基本的に導入しない。例外は以下：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/thread/this_thread.html&#34;&gt;std::this_thread&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;名前空間に特殊な意味をもたせている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>tshino</name>
        <email>tshino@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- HTMLへの変換エラーを修正</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>b2de7cae247187b6cacc107f68aa0afec3c7ef0c:reference/format/format.md</id>
      <updated>2023-01-27T16:45:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index b372bf8f7..cac2cb3e8 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -504,7 +504,7 @@ int main()
 {1, 2, 3}
 ```
 
-### vector&amp;lt;bool&amp;gt;を出力する (C++23)
+### `vector&amp;lt;bool&amp;gt;`を出力する (C++23)
 ```cpp example
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- vector&lt;bool&gt;::referenceに対するformatterの特殊化を追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>f216f9febdb4ded06f2ad999933927d694b52765:reference/format/format.md</id>
      <updated>2023-01-27T16:39:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index 09bbcb1fd..b372bf8f7 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -504,6 +504,28 @@ int main()
 {1, 2, 3}
 ```
 
+### vector&amp;lt;bool&amp;gt;を出力する (C++23)
+```cpp example
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;format&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main()
+{
+  // vector&amp;lt;bool&amp;gt;は1要素あたり1bitのみ領域を使用するよう特殊化されている。
+  // しかし、出力としては通常のbool配列と同様になるようformatterが特殊化されている
+  std::vector&amp;lt;bool&amp;gt; v = {true, false, true};
+
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{}&amp;#34;, v) &amp;lt;&amp;lt; std::endl;
+}
+```
+
+#### 出力
+```
+[true, false, true]
+```
+
 ## 実装例
 ```cpp
 template&amp;lt;class... Args&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- vector&lt;bool&gt;::referenceに対するformatterの特殊化を追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter.html"/>
      <id>f216f9febdb4ded06f2ad999933927d694b52765:reference/format/formatter.md</id>
      <updated>2023-01-27T16:39:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter.md b/reference/format/formatter.md
index 0106bb135..4de6df6b0 100644
--- a/reference/format/formatter.md
+++ b/reference/format/formatter.md
@@ -41,6 +41,7 @@ namespace std {
 - (3) : [`std::pair`](/reference/utility/pair.md)と[`std::tuple`](/reference/tuple/tuple.md)に対する特殊化
 - (4) : コンテナアダプタである[`std::queue`](/reference/queue/queue.md)、[`std::priority_queue`](/reference/queue/priority_queue.md)、[`std::stack`](/reference/stack/stack.md)に対する特殊化
 
+
 (1)は、`charT`を`char`または`wchar_t`とすると、標準で以下の特殊化が利用できる。
 
 - 1 以下のもの。
@@ -238,6 +239,10 @@ int main()
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
 
+## 関連項目
+- [`vector&amp;lt;bool&amp;gt;`](/reference/vector/vector.md)
+
+
 ## 参照
 - [P0645R10 Text Formatting](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html)
 - [{fmt}](https://github.com/fmtlib/fmt)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vector -- vector&lt;bool&gt;::referenceに対するformatterの特殊化を追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector.html"/>
      <id>f216f9febdb4ded06f2ad999933927d694b52765:reference/vector/vector.md</id>
      <updated>2023-01-27T16:39:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector.md b/reference/vector/vector.md
index 97f124410..d29357f07 100644
--- a/reference/vector/vector.md
+++ b/reference/vector/vector.md
@@ -189,7 +189,7 @@ public:
 }
 ```
 
-## ハッシュサポート
+### ハッシュサポート
 
 | 名前 | 説明 | 対応バージョン |
 |--------------------------------------------------------------------|------------------------------------------|-------|
@@ -197,6 +197,13 @@ public:
 | `template &amp;lt;class Allocator&amp;gt; struct hash&amp;lt;vector&amp;lt;bool, Allocator&amp;gt;&amp;gt;;` | `hash`クラスの`vector&amp;lt;bool&amp;gt;`に対する特殊化 | C++11 |
 
 
+### 文字列フォーマットサポート
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `template &amp;lt;class T, class charT&amp;gt; requires is-vector-bool-reference&amp;lt;T&amp;gt;`&amp;lt;br/&amp;gt; `struct formatter&amp;lt;T, charT&amp;gt;;` | `vector&amp;lt;bool&amp;gt;::reference`を`bool`として出力するための[`formatter`](/reference/format/formatter.md)の特殊化 | C++23 |
+
+
 ## 例
 ### 基本的な使い方 (C++11)
 ```cpp example
@@ -430,4 +437,5 @@ int main()
 - 可変長のビット配列の実装としては、Boost C++ Librariesの[`dynamic_bitset`](http://www.boost.org/doc/libs/release/libs/dynamic_bitset/dynamic_bitset.html)がある。
 - [N2669 Thread-Safety in the Standard Library (Rev 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2669.htm)
 - [N4510 Minimal incomplete type support for standard containers, revision 4](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4510.html)
-
+- [P2286R8 Formatting Ranges](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2286r8.html)
+    - C++23から、Range・コンテナ、`pair`、`tuple`のフォーマット出力、および文字・文字列のデバッグ指定 (`&amp;#34;?&amp;#34;`) が追加された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- &lt;format&gt; : range-default-formatterを追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format.html"/>
      <id>2513346aaefb6f93d4740367084d9f30d30a05aa:reference/format.md</id>
      <updated>2023-01-27T16:28:04+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;format&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt;ヘッダでは、書式文字列を使って引数をフォーマットする、いわゆる&lt;code&gt;printf&lt;/code&gt;スタイルのフォーマット関数を提供する。
このフォーマット関数は型安全であり、ユーザー定義型への拡張も可能である。&lt;/p&gt;
&lt;p&gt;書式文字列については&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;format&lt;/a&gt;&lt;/code&gt;を参照。&lt;/p&gt;
&lt;h2&gt;フォーマット関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;format&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列を使って引数をフォーマットした文字列を返す (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_to.html&#34;&gt;format_to&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列を使って引数をフォーマットし、出力イテレータに出力する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_to_n.html&#34;&gt;format_to_n&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列を使って引数をフォーマットし、指定した文字数を超えないように出力イテレータに出力する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_to_n_result.html&#34;&gt;format_to_n_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;format_to_n&lt;/code&gt;の結果を表す (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/formatted_size.html&#34;&gt;formatted_size&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列を使って引数をフォーマットした文字列を保存するのに必要な文字数を返す (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/vformat.html&#34;&gt;vformat&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;format&lt;/a&gt;&lt;/code&gt;の非テンプレート版 (function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/vformat_to.html&#34;&gt;vformat_to&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_to.html&#34;&gt;format_to&lt;/a&gt;&lt;/code&gt;の非テンプレート版 (function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;フォーマッター&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/formattable.html&#34;&gt;formattable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列フォーマット可能 (concept)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/formatter.html&#34;&gt;formatter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数の型に対応する書式文字列の解析、値のフォーマットを担う (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_parse_context.html&#34;&gt;basic_format_parse_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列の解析のコンテキスト (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_parse_context.html&#34;&gt;format_parse_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_parse_context&lt;/code&gt;のマルチバイト文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_parse_context.html&#34;&gt;wformat_parse_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_parse_context&lt;/code&gt;のワイド文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_context.html&#34;&gt;basic_format_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数のフォーマットのコンテキスト (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_context.html&#34;&gt;format_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_context&lt;/code&gt;のマルチバイト文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_context.html&#34;&gt;wformat_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_context&lt;/code&gt;のワイド文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/range_format.html&#34;&gt;range_format&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Rangeの書式種別 (enum)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_kind.html&#34;&gt;format_kind&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定したRangeの書式種別を取得する (variable)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/const-formattable-range.html&#34;&gt;const-formattable-range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const Range&lt;/code&gt;の要素型が文字列フォーマット可能 (concept)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/fmt-maybe-const.html&#34;&gt;fmt-maybe-const&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;formatter::format()&lt;/code&gt;関数のパラメータ型として使用するための(const) Range型を取得 (type-alias)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/range_formatter.html&#34;&gt;range_formatter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Rangeに対する書式文字列の解析、値のフォーマットを行う (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/range-default-formatter.html&#34;&gt;range-default-formatter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Rangeに対する共通の書式文字列の解析、値のフォーマットを行う説明専用クラス (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;引数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_arg.html&#34;&gt;basic_format_arg&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数1つへのアクセスを提供する (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/visit_format_arg.html&#34;&gt;visit_format_arg&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_arg&lt;/code&gt;オブジェクトが現在保持している型に対応する関数を呼び出す (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/make_format_args.html&#34;&gt;make_format_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可変長引数から&lt;code&gt;basic_format_arg&lt;/code&gt;の列を構築する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/make_format_args.html&#34;&gt;make_wformat_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;make_wformat_args&lt;/code&gt;のワイド文字列版 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_args.html&#34;&gt;basic_format_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数列へのアクセスを提供する (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_args.html&#34;&gt;format_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_args&lt;/code&gt;のマルチバイト文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_args.html&#34;&gt;wformat_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_args&lt;/code&gt;のワイド文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_error.html&#34;&gt;format_error&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;フォーマットの失敗を表す例外クラス (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++20&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/format&#34; target=&#34;_blank&#34;&gt;Working Draft, Standard for Programming Language C++ [format]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html&#34; target=&#34;_blank&#34;&gt;P0645R10 Text Formatting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- &lt;format&gt; : range-default-formatterを追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter.html"/>
      <id>2513346aaefb6f93d4740367084d9f30d30a05aa:reference/format/formatter.md</id>
      <updated>2023-01-27T16:28:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter.md b/reference/format/formatter.md
index 053e1069f..0106bb135 100644
--- a/reference/format/formatter.md
+++ b/reference/format/formatter.md
@@ -31,13 +31,13 @@ namespace std {
 * range_format[link range_format.md]
 * formattable[link formattable.md]
 * ranges::range_reference_t[link /reference/ranges/range_reference_t.md]
-* range-default-formatter[link range-default-formatter.md.nolink]
+* range-default-formatter[link range-default-formatter.md]
 
 ## 概要
 フォーマット引数の個々の型に対応する書式文字列の解析と値のフォーマットを担うクラス。
 
 - (1) : デフォルトのフォーマット
-- (2) : Range用のフォーマット。実装は[`range-default-formatter`](range-default-formatter.md.nolink)クラスが行う
+- (2) : Range用のフォーマット。実装は[`range-default-formatter`](range-default-formatter.md)クラスが行う
 - (3) : [`std::pair`](/reference/utility/pair.md)と[`std::tuple`](/reference/tuple/tuple.md)に対する特殊化
 - (4) : コンテナアダプタである[`std::queue`](/reference/queue/queue.md)、[`std::priority_queue`](/reference/queue/priority_queue.md)、[`std::stack`](/reference/stack/stack.md)に対する特殊化
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>range-default-formatter -- &lt;format&gt; : range-default-formatterを追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/range-default-formatter.html"/>
      <id>2513346aaefb6f93d4740367084d9f30d30a05aa:reference/format/range-default-formatter.md</id>
      <updated>2023-01-27T16:28:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/range-default-formatter.md b/reference/format/range-default-formatter.md
new file mode 100644
index 000000000..3d5c97b1e
--- /dev/null
+++ b/reference/format/range-default-formatter.md
@@ -0,0 +1,97 @@
+# range-default-formatter
+* format[meta header]
+* class template[meta id-type]
+* std[meta namespace]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;range_format K, ranges::input_range R, class charT&amp;gt;
+  struct range-default-formatter;      // (1) C++23
+
+  template &amp;lt;ranges::input_range R, class charT&amp;gt;
+  struct range-default-formatter&amp;lt;
+    range_format::sequence, R, charT&amp;gt;; // (2) C++23
+
+  template &amp;lt;ranges::input_range R, class charT&amp;gt;
+  struct range-default-formatter&amp;lt;
+    range_format::map, R, charT&amp;gt;;      // (3) C++23
+
+  template &amp;lt;ranges::input_range R, class charT&amp;gt;
+  struct range-default-formatter&amp;lt;
+    range_format::set, R, charT&amp;gt;;      // (4) C++23
+
+  template &amp;lt;range_format K, ranges::input_range R, class charT&amp;gt;
+    requires (K == range_format::string || K == range_format::debug_string)
+  struct range-default-formatter&amp;lt;
+    K, R, charT&amp;gt;;                      // (5) C++23
+}
+```
+* range_format[link range_format.md]
+* ranges::input_range[link /reference/ranges/input_range.md]
+
+## 概要
+`range-default-formatter`は、Range・コンテナに対するデフォルトの書式解析と書式文字列化を行う説明専用クラスである。
+
+このクラスは、[`formatter`](formatter.md)クラスのRange・コンテナに対する特殊化実装として標準ライブラリの内部で使用される。
+
+このクラスの内部実装として[`range_formatter`](range_formatter.md)が使用される。
+
+
+- (1) : プライマリテンプレート。宣言のみ
+- (2) : Range・シーケンスコンテナに対する特殊化。デバッグ出力の有効化と、`[a, b, c]`形式の出力を行う
+- (3) : [`std::map`](/reference/map/map.md)や[`std::flat_map`](/reference/flat_map/flat_map.md.nolink)などの連想コンテナに対する特殊化。デバッグ出力の有効化と、`{1: a, 2: b}`形式での出力を行う
+- (4) : [`std::set`](/reference/set/set.md)や[`std::flat_set`](/reference/flat_set/flat_set.md.nolink)などの集合コンテナに対する特殊化。デバッグ出力の有効化と、`{a, b, c}`形式の出力を行う
+- (5) : 文字列形式の出力を行うRangeに対する特殊化。Rangeを文字列として出力し、[`range_format::debug_string`](range_format.md)指定であればデバッグ文字列として出力する
+
+
+## 備考
+- (5) : この特殊化は規格上、標準ライブラリ内では使用されないが ([`formatter`](formatter.md)`&amp;lt;`[`string`](/reference/string/basic_string.md)`, charT&amp;gt;`がすでにある)、以下のような用途が考えられる
+    - ユーザー定義の文字列クラスを定義する場合に、[`format_kind`](format_kind.md)で値として[`range_format::string`](range_format.md)もしくは[`range_format::debug_string`](range_format.md)をもつよう特殊化するか ([`formatter`](formatter.md)`&amp;lt;`[`string`](/reference/string/basic_string.md)`, charT&amp;gt;`をラップする方がかんたんではある)
+    - [`std::vector&amp;lt;char&amp;gt;`](/reference/vector/vector.md)のような文字を要素とするシーケンスコンテナで、文字列形式で出力する書式オプション ([`s`や`?s`](format.md#range-format-options)) を指定した際に`range-default-formatter&amp;lt;range_format::sequence, R, charT&amp;gt;`の内部で使用される
+
+
+## メンバ関数
+
+| メンバ関数 | 説明 | 対応バージョン |
+|------------|------|----------------|
+| `parse`    | 書式の解析を行う | C++23 |
+| `format`   | 書式化を行う | C++23 |
+
+
+### sequenceに対する特殊化
+
+| メンバ関数 | 説明 | 対応バージョン |
+|------------|------|----------------|
+| `constexpr void set_separator(basic_string_view&amp;lt;charT&amp;gt; sep);` | 要素の区切り文字を設定する | C++23 |
+| `constexpr void set_brackets(basic_string_view&amp;lt;charT&amp;gt; opening, basic_string_view&amp;lt;charT&amp;gt; closing);` | 全体の囲み文字を設定する | C++23 |
+
+
+### mapに対する特殊化
+
+| メンバ関数 | 説明 | 対応バージョン |
+|------------|------|----------------|
+| `constexpr range-default-formatter();` | 全体の囲み文字を`{}`、要素の囲み文字を空、要素同士の区切り文字を`&amp;#34;: &amp;#34;`に設定する | C++23 |
+
+### setに対する特殊化
+
+| メンバ関数 | 説明 | 対応バージョン |
+|------------|------|----------------|
+| `constexpr range-default-formatter();` | 全体の囲み文字を`{}`に設定する | C++23 |
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2286R8 Formatting Ranges](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2286r8.html)
+- [P2585R1 Improve default container formatting](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2585r1.html)
+    - C++23から、Range・コンテナ、`pair`、`tuple`のフォーマット出力、および文字・文字列のデバッグ指定 (`&amp;#34;?&amp;#34;`) が追加された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>range_formatter -- &lt;format&gt; : range-default-formatterを追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/range_formatter.html"/>
      <id>2513346aaefb6f93d4740367084d9f30d30a05aa:reference/format/range_formatter.md</id>
      <updated>2023-01-27T16:28:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/range_formatter.md b/reference/format/range_formatter.md
index c2d5c38f5..71ff8a66f 100644
--- a/reference/format/range_formatter.md
+++ b/reference/format/range_formatter.md
@@ -16,6 +16,8 @@ namespace std {
 ## 概要
 `range_formatter`は、Range・コンテナに対する[`formatter`](formatter.md)クラスの特殊化を実装するためのユーティリティクラスである。
 
+このクラスは、説明専用クラス[`range-default-formatter`](range-default-formatter.md)の内部実装として使用される。
+
 ユーザー定義のコンテナ・RangeをRange書式に対応する場合は、以下のようにする：
 
 - オリジナル書式を定義しないのであれば、このクラスではなく、[`format_kind`](format_kind.md)を特殊化する
@@ -148,7 +150,7 @@ aa:bb:cc:dd:ee:ff
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 ## 関連項目
-- [`range-default-formatter`](range-default-formatter.md.nolink)
+- [`range-default-formatter`](range-default-formatter.md)
 - [`formatter`](formatter.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
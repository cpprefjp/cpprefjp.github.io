<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-03-22T14:34:04.709435</updated>
  <id>5db1aa8c-0629-4297-8486-8934d97873ee</id>

  
    <entry>
      <title>splice_after -- forward_list::splice_after : 文言修正</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/splice_after.html"/>
      <id>4e07c21ed10fb09ba488dc86fac9c789ed748b92:reference/forward_list/forward_list/splice_after.md</id>
      <updated>2020-03-22T00:11:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/splice_after.md b/reference/forward_list/forward_list/splice_after.md
index 657c52202..1f03b056e 100644
--- a/reference/forward_list/forward_list/splice_after.md
+++ b/reference/forward_list/forward_list/splice_after.md
@@ -28,18 +28,15 @@ void splice_after(const_iterator position, forward_list&amp;amp;&amp;amp; x,
 
 
 ## 要件
-- 第1パラメータ`position`が、[`before_begin()`](before_begin.md)もしくは`[`[`begin()`](begin.md)`,` [`end()`](end.md)]の範囲の間接参照可能なイテレータであること。
+- 第1パラメータ`position`が、[`before_begin()`](before_begin.md)もしくは`[`[`begin()`](begin.md)`,` [`end()`](end.md))の範囲の間接参照可能なイテレータであること。
 - `i`, `first`, `last`が、`x`のイテレータであること。
 - [`get_allocator()`](get_allocator.md) `== x.`[`get_allocator()`](get_allocator.md)であること。(C++14)
 
 
 ## 効果
-- (1) : `position`の次の要素の後ろに`x`の全ての要素をコピーする
-- (2) : `position`の次の要素の後ろに`x`の全ての要素を移動する
-- (3) : `position`の次の要素の後ろに、`x`の要素のうち`i`の次の要素をコピーする
-- (4) : `position`の次の要素の後ろに、`x`の要素のうち`i`の次の要素を移動する
-- (5) : `position`の次の要素の後ろに、`x`の要素のうち`(first, last)`の範囲をコピーする
-- (6) : `position`の次の要素の後ろに、`x`の要素のうち`(first, last)`の範囲を移動する
+- (1),(2) : `position`の指す要素の後ろに、`x`の全ての要素を移動する
+- (3),(4) : `position`の指す要素の後ろに、`x`の要素のうち`i`の次の要素を移動する
+- (5),(6) : `position`の指す要素の後ろに、`x`の要素のうち`(first, last)`の範囲を移動する
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator+= -- string::operator+= : string_viewを取るオーバーロードの追記</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_plus_assign.html"/>
      <id>ea23fac004f3c5b17335d6a2fd10c78fad2b394b:reference/string/basic_string/op_plus_assign.md</id>
      <updated>2020-03-21T21:57:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_plus_assign.md b/reference/string/basic_string/op_plus_assign.md
index 7caf43f0a..8c15b3498 100644
--- a/reference/string/basic_string/op_plus_assign.md
+++ b/reference/string/basic_string/op_plus_assign.md
@@ -12,15 +12,25 @@ basic_string&amp;amp; operator+=(const charT* s);             // (2)
 basic_string&amp;amp; operator+=(charT c);                    // (3)
 
 basic_string&amp;amp; operator+=(initializer_list&amp;lt;charT&amp;gt; il); // (4) C++11 から
+
+// string_viewを引数に取るオーバーロード
+template&amp;lt;class T&amp;gt;
+basic_string&amp;amp; operator+=(const T&amp;amp; t);                 // (5) C++17 から
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 
 ## 概要
 指定された文字列、文字、あるいは初期化リストを追加する。
 
+## テンプレートパラメータ制約
+
+- (5) : 以下の両方を満たしていること
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
 
 ## 要件
-`s` は少なくとも `traits_type::length(s) + 1` の長さを持つ `charT` 型の配列を指していること。
+
+- (3) : `s` は少なくとも `traits_type::length(s) + 1` の長さを持つ `charT` 型の配列を指していること。
 
 
 ## 効果
@@ -37,6 +47,15 @@ basic_string&amp;amp; operator+=(initializer_list&amp;lt;charT&amp;gt; il); // (4) C++11 から
 - (4) 対象オブジェクトの末尾に初期化リスト `il` で表された文字列が追加される。  
 	[`append`](append.md)`(il)` と等価。
 
+- (5) 対象オブジェクトの末尾に[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;`に変換可能な`t`の参照する文字列が追加される。  
+以下と等価。
+  ```cpp
+  basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;
+  return append(sv);
+  ```
+  * basic_string_view[link /reference/string_view/basic_string_view.md]
+  * append[link append.md]
+
 
 ## 戻り値
 `*this`
@@ -51,6 +70,8 @@ basic_string&amp;amp; operator+=(initializer_list&amp;lt;charT&amp;gt; il); // (4) C++11 から
 
 - (4) [`size`](size.md)`() + il.size() &amp;gt;` [`max_size`](max_size.md)`()` の場合、`length_error` が送出される。
 
+- (5) [`size`](size.md)`() + sv.size() &amp;gt;` [`max_size`](max_size.md)`()` の場合、`length_error` が送出される。
+
 
 ## 備考
 本メンバ関数の呼び出しによって、対象オブジェクトの要素への参照、ポインタ、および、イテレータは無効になる可能性がある。
@@ -60,6 +81,7 @@ basic_string&amp;amp; operator+=(initializer_list&amp;lt;charT&amp;gt; il); // (4) C++11 から
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;string&amp;gt;
+#include &amp;lt;string_view&amp;gt;
 
 int main()
 {
@@ -78,6 +100,11 @@ int main()
 
   s1 += { &amp;#39; &amp;#39;, &amp;#39;:&amp;#39;, &amp;#39;)&amp;#39; };
   std::cout &amp;lt;&amp;lt; s1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  using namespace std::string_view_literals;
+
+  s1 += &amp;#34; :)&amp;#34;sv;
+  std::cout &amp;lt;&amp;lt; s1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
 }
 ```
 * +=[color ff0000]
@@ -89,6 +116,7 @@ Hello,
 Hello, world
 Hello, world!
 Hello, world! :)
+Hello, world! :) :)
 ```
 
 ## 関連項目
@@ -104,4 +132,7 @@ Hello, world! :)
 ## 参照
 - [N2679 Initializer Lists for Standard Containers(Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf)
     - (4)の経緯となる提案文書
-
+- [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
+- [LWG Issue 2758. `std::string{}.assign(&amp;#34;ABCDE&amp;#34;, 0, 1)` is ambiguous](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2268)
+- [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
+    - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(5)の引数型を`const T&amp;amp;`に変更
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>mona-@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>splice -- list::splice : 文言修正とサンプル追加</title>
      <link href="https://cpprefjp.github.io/reference/list/list/splice.html"/>
      <id>79cbb0a52b09e28bed9973a0555cb56fa6d315de:reference/list/list/splice.md</id>
      <updated>2020-03-20T23:52:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/splice.md b/reference/list/list/splice.md
index ee6ba9d8c..24eb8eb62 100644
--- a/reference/list/list/splice.md
+++ b/reference/list/list/splice.md
@@ -30,9 +30,9 @@ void splice(const_iterator position, list&amp;amp;&amp;amp; x,
 ## 概要
 他の`list`オブジェクトから、要素を移動する。
 
-- (1), (2) : `position`の次の要素の前に、`x`の全ての要素を移動する。  
-- (3), (4) : `position`の次の要素の前に、`x`の要素のうち`i`の指す要素を移動する。  
-- (5), (6) : `position`の次の要素の前に、`x`の要素のうち`[first, last)`の範囲を移動する。  
+- (1), (2) : `position`の指す要素の前に、`x`の全ての要素を移動する。  
+- (3), (4) : `position`の指す要素の前に、`x`の要素のうち`i`の指す要素を移動する。  
+- (5), (6) : `position`の指す要素の前に、`x`の要素のうち`[first, last)`の範囲を移動する。  
 
 
 ## 要件
@@ -109,6 +109,15 @@ int main()
 
     xs.splice(xs.begin(), std::move(ys), ys.begin(), std::next(ys.begin(), 2));
 
+    print(xs);
+  }
+  // ysの全ての要素をxsの末尾に移動する
+  {
+    std::list&amp;lt;int&amp;gt; xs = {1, 2, 3};
+    std::list&amp;lt;int&amp;gt; ys = {4, 5, 6};
+
+    xs.splice(xs.end(), std::move(ys));
+
     print(xs);
   }
 }
@@ -122,6 +131,7 @@ int main()
 1 2 3 4 5 6 
 1 4 5 6 
 1 2 4 5 6 
+1 2 3 4 5 6 
 ```
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>identity -- identity : 文言修正</title>
      <link href="https://cpprefjp.github.io/reference/functional/identity.html"/>
      <id>90b675429b27ed2be319c2064a9599b1b7a1180d:reference/functional/identity.md</id>
      <updated>2020-03-19T21:55:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/identity.md b/reference/functional/identity.md
index 57ef8fad5..6433181f6 100644
--- a/reference/functional/identity.md
+++ b/reference/functional/identity.md
@@ -19,7 +19,7 @@ namespace std {
 
 ## 概要
 
-`identity`クラスは、引数に対して恒等変換を行う関数オブジェクトである。この恒等変換はC++意味論においてのものであり、値そのもの及びCV修飾や値カテゴリも含めて引数をそのまま返す。
+`identity`クラスは、受け取った引数をそのまま返す（恒等変換を行う）関数オブジェクトである。この恒等変換はC++の意味論においてのものであり、値そのもの及びCV修飾や値カテゴリも含めて引数をそのまま返す。
 
 この関数オブジェクトは一切のメンバ変数を持たず、状態を保持しない。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>identity -- identity : MSVC対応バージョンの修正</title>
      <link href="https://cpprefjp.github.io/reference/functional/identity.html"/>
      <id>c362a0867226640dbcefbf1503cb508b70f45ad4:reference/functional/identity.md</id>
      <updated>2020-03-19T17:21:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/identity.md b/reference/functional/identity.md
index ad8b8975a..57ef8fad5 100644
--- a/reference/functional/identity.md
+++ b/reference/functional/identity.md
@@ -80,7 +80,7 @@ int main()
 ### 処理系
 - [Clang](/implementation.md#clang): ??
 - [GCC](/implementation.md#gcc): 10.1
-- [Visual C++](/implementation.md#visual_cpp): 2019 Update 3
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 1
 
 ## 参照
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
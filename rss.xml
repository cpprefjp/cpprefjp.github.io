<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-03-20T17:39:19.783726</updated>
  <id>521a3745-10b0-4f0c-b8cf-78c775a99955</id>

  
    <entry>
      <title>merge -- リンク修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_merge.html"/>
      <id>04c97bbdab986678ffd15cf53cb0337400a3febe:reference/algorithm/ranges_merge.md</id>
      <updated>2022-03-21T02:35:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_merge.md b/reference/algorithm/ranges_merge.md
index 83ecc4a2b..16bcabc78 100644
--- a/reference/algorithm/ranges_merge.md
+++ b/reference/algorithm/ranges_merge.md
@@ -20,7 +20,7 @@ namespace std::ranges {
   constexpr merge_result&amp;lt;borrowed_iterator_t&amp;lt;R1&amp;gt;, borrowed_iterator_t&amp;lt;R2&amp;gt;, O&amp;gt; merge(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2, O result, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});  // (2)
 }
 ```
-* in_in_out_result[link in_in_out_result.md]
+* in_in_out_result[link in_in_out_result.md.nolink]
 * input_iterator[link /reference/iterator/input_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>inplace_merge -- 名前空間を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_inplace_merge.html"/>
      <id>01c4a10761bfc4585b3d0125afebcb3f273b986c:reference/algorithm/ranges_inplace_merge.md</id>
      <updated>2022-03-21T02:34:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_inplace_merge.md b/reference/algorithm/ranges_inplace_merge.md
index 4b0fad40d..3ea223411 100644
--- a/reference/algorithm/ranges_inplace_merge.md
+++ b/reference/algorithm/ranges_inplace_merge.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::ranges {
   template&amp;lt;bidirectional_iterator I, sentinel_for&amp;lt;I&amp;gt; S, class Comp = ranges::less, class Proj = identity&amp;gt;
     requires sortable&amp;lt;I, Comp, Proj&amp;gt;
   I inplace_merge(I first, I middle, S last, Comp comp = {}, Proj proj = {});
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_sorted_until -- 名前空間を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_is_sorted_until.html"/>
      <id>01c4a10761bfc4585b3d0125afebcb3f273b986c:reference/algorithm/ranges_is_sorted_until.md</id>
      <updated>2022-03-21T02:34:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_is_sorted_until.md b/reference/algorithm/ranges_is_sorted_until.md
index 56950e369..7df2acc3f 100644
--- a/reference/algorithm/ranges_is_sorted_until.md
+++ b/reference/algorithm/ranges_is_sorted_until.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::ranges {
   template&amp;lt;forward_iterator I, sentinel_for&amp;lt;I&amp;gt; S, class Proj = identity,
            indirect_strict_weak_order&amp;lt;projected&amp;lt;I, Proj&amp;gt;&amp;gt; Comp = ranges::less&amp;gt;
   constexpr I is_sorted_until(I first, S last, Comp comp = {}, Proj proj = {});
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>algorithm -- ソート済み構造に対する集合演算の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm.html"/>
      <id>da057c719dbd6e3002a0463f5e50b601b114d868:reference/algorithm.md</id>
      <updated>2022-03-21T02:34:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm.md b/reference/algorithm.md
index 3917d36fe..f8e74ad2d 100644
--- a/reference/algorithm.md
+++ b/reference/algorithm.md
@@ -329,11 +329,11 @@ ranges::sort(pv, {}, &amp;amp;Parson::name);
 | [`set_difference`](algorithm/set_difference.md)     | 2つのソート済み範囲の差集合を得る | |
 | [`set_symmetric_difference`](algorithm/set_symmetric_difference.md) | 2つのソート済み範囲の対称差集合を得る | |
 | [`includes`](algorithm/includes.md) | 2つのソート済み範囲において、一方の範囲の要素がもう一方の範囲に全て含まれているかを判定する | |
-| [`ranges::set_union`](algorithm/ranges_set_union.md.nolink)                               | 2つのソート済み範囲の和集合を得る                                                           | C++20 |
-| [`ranges::set_intersection`](algorithm/ranges_set_intersection.md.nolink)                 | 2つのソート済み範囲の積集合を得る                                                           | C++20 |
-| [`ranges::set_difference`](algorithm/ranges_set_difference.md.nolink)                     | 2つのソート済み範囲の差集合を得る                                                           | C++20 |
-| [`ranges::set_symmetric_difference`](algorithm/ranges_set_symmetric_difference.md.nolink) | 2つのソート済み範囲の対称差集合を得る                                                       | C++20 |
-| [`ranges::includes`](algorithm/ranges_includes.md.nolink)                                 | 2つのソート済み範囲において、一方の範囲の要素がもう一方の範囲に全て含まれているかを判定する | C++20 |
+| [`ranges::set_union`](algorithm/ranges_set_union.md)                               | 2つのソート済み範囲の和集合を得る                                                           | C++20 |
+| [`ranges::set_intersection`](algorithm/ranges_set_intersection.md)                 | 2つのソート済み範囲の積集合を得る                                                           | C++20 |
+| [`ranges::set_difference`](algorithm/ranges_set_difference.md)                     | 2つのソート済み範囲の差集合を得る                                                           | C++20 |
+| [`ranges::set_symmetric_difference`](algorithm/ranges_set_symmetric_difference.md) | 2つのソート済み範囲の対称差集合を得る                                                       | C++20 |
+| [`ranges::includes`](algorithm/ranges_includes.md)                                 | 2つのソート済み範囲において、一方の範囲の要素がもう一方の範囲に全て含まれているかを判定する | C++20 |
 
 ### ヒープ
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>includes -- ソート済み構造に対する集合演算の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_includes.html"/>
      <id>da057c719dbd6e3002a0463f5e50b601b114d868:reference/algorithm/ranges_includes.md</id>
      <updated>2022-03-21T02:34:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_includes.md b/reference/algorithm/ranges_includes.md
new file mode 100644
index 000000000..47f4fdbcb
--- /dev/null
+++ b/reference/algorithm/ranges_includes.md
@@ -0,0 +1,78 @@
+# includes
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;input_iterator I1, sentinel_for&amp;lt;I1&amp;gt; S1, input_iterator I2, sentinel_for&amp;lt;I2&amp;gt; S2, class Proj1 = identity, class Proj2 = identity,
+           indirect_strict_weak_order&amp;lt;projected&amp;lt;I1, Proj1&amp;gt;, projected&amp;lt;I2, Proj2&amp;gt;&amp;gt; Comp = ranges::less&amp;gt;
+  constexpr bool includes(I1 first1, S1 last1, I2 first2, S2 last2, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {}); // (1)
+
+  template&amp;lt;input_range R1, input_range R2, class Proj1 = identity, class Proj2 = identity,
+           indirect_strict_weak_order&amp;lt;projected&amp;lt;iterator_t&amp;lt;R1&amp;gt;, Proj1&amp;gt;, projected&amp;lt;iterator_t&amp;lt;R2&amp;gt;, Proj2&amp;gt;&amp;gt; Comp = ranges::less&amp;gt;
+  constexpr bool ranges::includes(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});                 // (2)
+}
+```
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* indirect_strict_weak_order[link /reference/iterator/indirect_strict_weak_order.md]
+* projected[link /reference/iterator/projected.md]
+* ranges::less[link /reference/functional/ranges_less.md]
+* identity[link /reference/functional/identity.md]
+* input_range[link /reference/ranges/input_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+
+## 概要
+2つのソート済み範囲において、一方の範囲の要素がもう一方の範囲に全て含まれているかを判定する。
+
+* (1): イテレーターペアで範囲を指定する
+* (2): 範囲を直接指定する
+
+## 戻り値
+`[first2,last2)` が `empty` であるか、`[first2,last2)` の全ての要素が `[first1,last1)` に含まれている場合は `true`、そうでない場合は `false` を返す。
+
+
+## 計算量
+最大で `2 * ((last1 - first1) + (last2 - first2)) - 1` 回比較する
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;set&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+
+int main()
+{
+  std::set&amp;lt;int&amp;gt; a = {1, 2, 3, 4, 5, 6};
+  std::set&amp;lt;int&amp;gt; b = {2, 4, 6};
+  std::set&amp;lt;int&amp;gt; c = {2, 4, 7};
+
+  std::cout &amp;lt;&amp;lt; std::boolalpha;
+
+  std::cout &amp;lt;&amp;lt; std::ranges::includes(a, b) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::ranges::includes(a, c) &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::ranges::includes[color ff0000]
+
+### 出力
+```
+true
+false
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_difference -- ソート済み構造に対する集合演算の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_set_difference.html"/>
      <id>da057c719dbd6e3002a0463f5e50b601b114d868:reference/algorithm/ranges_set_difference.md</id>
      <updated>2022-03-21T02:34:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_set_difference.md b/reference/algorithm/ranges_set_difference.md
new file mode 100644
index 000000000..7f78332e5
--- /dev/null
+++ b/reference/algorithm/ranges_set_difference.md
@@ -0,0 +1,117 @@
+# set_difference
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class I, class O&amp;gt;
+  using set_union_result = in_out_result&amp;lt;I, O&amp;gt;;
+
+  template&amp;lt;input_iterator I1, sentinel_for&amp;lt;I1&amp;gt; S1, input_iterator I2, sentinel_for&amp;lt;I2&amp;gt; S2, weakly_incrementable O,
+           class Comp = ranges::less, class Proj1 = identity, class Proj2 = identity&amp;gt;
+    requires mergeable&amp;lt;I1, I2, O, Comp, Proj1, Proj2&amp;gt;
+  constexpr set_difference_result&amp;lt;I1, O&amp;gt;
+    set_difference(I1 first1, S1 last1, I2 first2, S2 last2, O result, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {}); // (1)
+
+  template&amp;lt;input_range R1, input_range R2, weakly_incrementable O,
+           class Comp = ranges::less, class Proj1 = identity, class Proj2 = identity&amp;gt;
+    requires mergeable&amp;lt;iterator_t&amp;lt;R1&amp;gt;, iterator_t&amp;lt;R2&amp;gt;, O, Comp, Proj1, Proj2&amp;gt;
+  constexpr set_difference_result&amp;lt;borrowed_iterator_t&amp;lt;R1&amp;gt;, O&amp;gt;
+    set_difference(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2, O result, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});                         // (2)
+}
+```
+* in_out_result[link in_out_result.md.nolink]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
+* ranges::less[link /reference/functional/ranges_less.md]
+* identity[link /reference/functional/identity.md]
+* mergeable[link /reference/iterator/mergeable.md]
+* input_range[link /reference/ranges/input_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+
+
+## 概要
+2つのソート済み範囲の差集合を得る
+
+* (1): イテレーターペアで範囲を指定する
+* (2): 範囲を直接指定する
+
+## 事前条件
+結果の範囲は両方の入力の範囲と重なっていてはならない。
+
+
+## 効果
+`[first1,last1)` から、`[first2,last2)` に存在していない要素を `result` へコピーする。構築された範囲はソートされている。
+
+
+## 戻り値
+次のメンバをもつtuple-likeオブジェクト。
+
+```cpp
+set_union_result {
+  .in  = last1,
+  .out = result_last,
+}
+```
+
+ただし、`result_last` は構築された範囲の終端。 
+
+
+## 計算量
+最大で `2 * ((last1 - first1) + (last2 - first2)) - 1` 回の比較を行う
+
+
+## 備考
+`[first1,last1)` が `m` 個、`[first2,last2)` が `n` 個の等価な要素を含んでいる場合、`[first1,last1)` から最後の [`max`](max.md)`(m-n, 0)` 要素が出力の範囲へコピーされる。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;set&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+
+int main()
+{
+  std::multiset&amp;lt;int&amp;gt; a = {1, 2, 3, 4, 5, 6};
+  std::multiset&amp;lt;int&amp;gt; b = {2, 3, 4};
+  std::multiset&amp;lt;int&amp;gt; result;
+
+  // a - bの差集合を作る
+  std::ranges::set_difference(a, b, std::inserter(result, result.end()));
+
+  for (int x : result) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::ranges::set_difference[color ff0000]
+* std::multiset[link /reference/set/multiset.md]
+* begin()[link /reference/set/set/begin.md]
+* end()[link /reference/set/set/end.md]
+* std::inserter[link /reference/iterator/inserter.md]
+
+### 出力
+```
+1
+5
+6
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_intersection -- ソート済み構造に対する集合演算の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_set_intersection.html"/>
      <id>da057c719dbd6e3002a0463f5e50b601b114d868:reference/algorithm/ranges_set_intersection.md</id>
      <updated>2022-03-21T02:34:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_set_intersection.md b/reference/algorithm/ranges_set_intersection.md
new file mode 100644
index 000000000..f62d384e3
--- /dev/null
+++ b/reference/algorithm/ranges_set_intersection.md
@@ -0,0 +1,115 @@
+# set_intersection
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class I1, class I2, class O&amp;gt;
+  using set_intersection_result = in_in_out_result&amp;lt;I1, I2, O&amp;gt;;
+
+  template&amp;lt;input_iterator I1, sentinel_for&amp;lt;I1&amp;gt; S1, input_iterator I2, sentinel_for&amp;lt;I2&amp;gt; S2, weakly_incrementable O,
+           class Comp = ranges::less, class Proj1 = identity, class Proj2 = identity&amp;gt;
+    requires mergeable&amp;lt;I1, I2, O, Comp, Proj1, Proj2&amp;gt;
+  constexpr set_intersection_result&amp;lt;I1, I2, O&amp;gt;
+    set_intersection(I1 first1, S1 last1, I2 first2, S2 last2, O result, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});  // (1)
+
+  template&amp;lt;input_range R1, input_range R2, weakly_incrementable O,
+           class Comp = ranges::less, class Proj1 = identity, class Proj2 = identity&amp;gt;
+    requires mergeable&amp;lt;iterator_t&amp;lt;R1&amp;gt;, iterator_t&amp;lt;R2&amp;gt;, O, Comp, Proj1, Proj2&amp;gt;
+  constexpr set_intersection_result&amp;lt;borrowed_iterator_t&amp;lt;R1&amp;gt;, borrowed_iterator_t&amp;lt;R2&amp;gt;, O&amp;gt;
+    set_intersection(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2, O result, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});                          // (2)
+}
+```
+* in_in_out_result[link in_in_out_result.md.nolink]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
+* ranges::less[link /reference/functional/ranges_less.md]
+* identity[link /reference/functional/identity.md]
+* mergeable[link /reference/iterator/mergeable.md]
+* input_range[link /reference/ranges/input_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+
+## 概要
+2つのソート済み範囲の積集合を得る
+
+* (1): イテレーターペアで範囲を指定する
+* (2): 範囲を直接指定する
+
+
+## 事前条件
+結果の範囲は両方の入力の範囲と重なっていてはならない。
+
+
+## 効果
+２つの範囲からソート済みの intersection を構築する。つまり、両方の範囲のみにある要素の集合を構築する。
+
+
+## 戻り値
+次のメンバをもつtuple-likeオブジェクト。
+
+```cpp
+set_union_result {
+  .in1 = last1,
+  .in2 = last2,
+  .out = result_last,
+}
+```
+
+ただし、`result_last` は構築された範囲の終端。 
+
+## 計算量
+最大で `2 * ((last1 - first1) + (last2 - first2)) - 1` 回の比較を行う
+
+
+## 備考
+`[first1,last1)` が `m` 個、`[first2,last2)` が `n` 個の等価な要素を含んでいる場合、`[first1,last1)` から最初の [`min`](min.md)`(m, n)` 要素が出力の範囲へ順番にコピーされる。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;set&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+
+int main()
+{
+  std::multiset&amp;lt;int&amp;gt; a = {1, 2, 3, 4};
+  std::multiset&amp;lt;int&amp;gt; b = {4, 5, 6, 2};
+  std::multiset&amp;lt;int&amp;gt; result;
+
+  // aとbの積集合を作る
+  std::set_intersection(a, b, std::inserter(result, result.end()));
+
+  for (int x : result) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::ranges::set_intersection[color ff0000]
+* std::multiset[link /reference/set/multiset.md]
+* end()[link /reference/set/set/end.md]
+* std::inserter[link /reference/iterator/inserter.md]
+
+### 出力
+```
+2
+4
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_symmetric_difference -- ソート済み構造に対する集合演算の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_set_symmetric_difference.html"/>
      <id>da057c719dbd6e3002a0463f5e50b601b114d868:reference/algorithm/ranges_set_symmetric_difference.md</id>
      <updated>2022-03-21T02:34:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_set_symmetric_difference.md b/reference/algorithm/ranges_set_symmetric_difference.md
new file mode 100644
index 000000000..dfe6bc611
--- /dev/null
+++ b/reference/algorithm/ranges_set_symmetric_difference.md
@@ -0,0 +1,123 @@
+# set_symmetric_difference
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class I1, class I2, class O&amp;gt;
+  using set_symmetric_difference_result = in_in_out_result&amp;lt;I1, I2, O&amp;gt;;
+
+  template&amp;lt;input_iterator I1, sentinel_for&amp;lt;I1&amp;gt; S1, input_iterator I2, sentinel_for&amp;lt;I2&amp;gt; S2, weakly_incrementable O,
+           class Comp = ranges::less, class Proj1 = identity, class Proj2 = identity&amp;gt;
+    requires mergeable&amp;lt;I1, I2, O, Comp, Proj1, Proj2&amp;gt;
+  constexpr set_symmetric_difference_result&amp;lt;I1, I2, O&amp;gt;
+    set_symmetric_difference(I1 first1, S1 last1, I2 first2, S2 last2, O result, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});
+
+  template&amp;lt;input_range R1, input_range R2, weakly_incrementable O,
+           class Comp = ranges::less, class Proj1 = identity, class Proj2 = identity&amp;gt;
+    requires mergeable&amp;lt;iterator_t&amp;lt;R1&amp;gt;, iterator_t&amp;lt;R2&amp;gt;, O, Comp, Proj1, Proj2&amp;gt;
+  constexpr set_symmetric_difference_result&amp;lt;borrowed_iterator_t&amp;lt;R1&amp;gt;, borrowed_iterator_t&amp;lt;R2&amp;gt;, O&amp;gt;
+    set_symmetric_difference(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2, O result, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});
+}
+```
+* in_in_out_result[link in_in_out_result.md.nolink]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
+* ranges::less[link /reference/functional/ranges_less.md]
+* identity[link /reference/functional/identity.md]
+* mergeable[link /reference/iterator/mergeable.md]
+* input_range[link /reference/ranges/input_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+
+## 概要
+2つのソート済み範囲の対称差集合、すなわち2つの範囲の共通しない要素からなる集合を得る。
+
+* (1): イテレーターペアで範囲を指定する
+* (2): 範囲を直接指定する
+
+
+## 事前条件
+結果の範囲は両方の入力の範囲と重なっていてはならない。
+
+
+## 効果
+`[first1,last1)` から `[first2,last2)` に存在していない要素と、`[first2,last2)` から `[first2,last2)` に存在していない要素を `result` へコピーする。構築された要素はソートされている。
+
+
+## 戻り値
+次のメンバをもつtuple-likeオブジェクト。
+
+```cpp
+set_union_result {
+  .in1 = last1,
+  .in2 = last2,
+  .out = result_last,
+}
+```
+
+ただし、`result_last` は構築された範囲の終端。 
+
+
+## 計算量
+最大で `2 * ((last1 - first1) + (last2 - first2)) - 1` 回の比較を行う
+
+
+## 備考
+`[first1,last1)` が `m` 個、`[first2,last2)` が `n` 個の等価な要素を含んでいる場合、
+
+- `m &amp;gt; n` なら `[first1,last1)` から最後の `m-n` 個の要素を出力の範囲にコピーする。
+- `n &amp;gt; m` なら `[first2,last2)` から最後の `n-m` 個の要素を出力の範囲にコピーする。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;set&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+
+int main()
+{
+  std::multiset&amp;lt;int&amp;gt; a = {1, 2, 3, 4, 5, 6};
+  std::multiset&amp;lt;int&amp;gt; b = {2, 3, 4, 7, 8};
+  std::multiset&amp;lt;int&amp;gt; result;
+
+  // 重ならない要素からなる集合を作る
+  std::set_symmetric_difference(a, b, std::inserter(result, result.end()));
+
+  for (int x : result) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::set_symmetric_difference[color ff0000]
+* std::multiset[link /reference/set/multiset.md]
+* begin()[link /reference/set/set/begin.md]
+* end()[link /reference/set/set/end.md]
+* std::inserter[link /reference/iterator/inserter.md]
+
+### 出力
+```
+1
+5
+6
+7
+8
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_union -- ソート済み構造に対する集合演算の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_set_union.html"/>
      <id>da057c719dbd6e3002a0463f5e50b601b114d868:reference/algorithm/ranges_set_union.md</id>
      <updated>2022-03-21T02:34:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_set_union.md b/reference/algorithm/ranges_set_union.md
new file mode 100644
index 000000000..84673cc4e
--- /dev/null
+++ b/reference/algorithm/ranges_set_union.md
@@ -0,0 +1,116 @@
+# set_union
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class I1, class I2, class O&amp;gt;
+  using set_union_result = in_in_out_result&amp;lt;I1, I2, O&amp;gt;;
+
+  template&amp;lt;input_iterator I1, sentinel_for&amp;lt;I1&amp;gt; S1, input_iterator I2, sentinel_for&amp;lt;I2&amp;gt; S2, weakly_incrementable O,
+           class Comp = ranges::less, class Proj1 = identity, class Proj2 = identity&amp;gt;
+    requires mergeable&amp;lt;I1, I2, O, Comp, Proj1, Proj2&amp;gt;
+  constexpr set_union_result&amp;lt;I1, I2, O&amp;gt;
+    set_union(I1 first1, S1 last1, I2 first2, S2 last2, O result, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});   // (1)
+
+  template&amp;lt;input_range R1, input_range R2, weakly_incrementable O,
+           class Comp = ranges::less, class Proj1 = identity, class Proj2 = identity&amp;gt;
+    requires mergeable&amp;lt;iterator_t&amp;lt;R1&amp;gt;, iterator_t&amp;lt;R2&amp;gt;, O, Comp, Proj1, Proj2&amp;gt;
+  constexpr set_union_result&amp;lt;borrowed_iterator_t&amp;lt;R1&amp;gt;, borrowed_iterator_t&amp;lt;R2&amp;gt;, O&amp;gt;
+    set_union(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2, O result, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});                           // (2)
+}
+```
+* in_in_out_result[link in_in_out_result.md.nolink]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
+* ranges::less[link /reference/functional/ranges_less.md]
+* identity[link /reference/functional/identity.md]
+* mergeable[link /reference/iterator/mergeable.md]
+* input_range[link /reference/ranges/input_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+
+## 概要
+2つのソート済み範囲の和集合を得る
+
+* (1): イテレーターペアで範囲を指定する
+* (2): 範囲を直接指定する
+
+## 事前条件
+結果の範囲は両方の入力の範囲と重なっていてはならない。
+
+
+## 効果
+２つの範囲からソート済みの union を構築する。つまり、片方または両方の範囲にある要素の集合を構築する。
+
+
+## 戻り値
+次のメンバをもつtuple-likeオブジェクト。
+
+```cpp
+set_union_result {
+  .in1 = last1,
+  .in2 = last2,
+  .out = result_last,
+}
+```
+
+ただし、`result_last` は構築された範囲の終端。 
+
+## 計算量
+最大で `2 * ((last1 - first1) + (last2 - first2)) - 1` 回の比較を行う
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;set&amp;gt;
+#include &amp;lt;list&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+
+int main()
+{
+  std::list&amp;lt;int&amp;gt; a = {1, 2, 3, 4};
+  std::multiset&amp;lt;int&amp;gt; b = {4, 5, 6, 2};
+  std::vector&amp;lt;int&amp;gt; result;
+
+  // aとbの和集合を作る
+  std::ranges::set_union(a, b, std::inserter(result, std::ranges::end(result)));
+
+  for (int x : result) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::ranges::set_union[color ff0000]
+* std::multiset[link /reference/set/multiset.md]
+* std::inserter[link /reference/iterator/inserter.md]
+* std::ranges::end[link /reference/ranges/end.md]
+
+### 出力
+```
+1
+2
+3
+4
+5
+6
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>merge -- 戻り値を修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_merge.html"/>
      <id>9b6fbaec959412301bba06d107c6168220573c14:reference/algorithm/ranges_merge.md</id>
      <updated>2022-03-21T02:05:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_merge.md b/reference/algorithm/ranges_merge.md
index 25c63d85a..83ecc4a2b 100644
--- a/reference/algorithm/ranges_merge.md
+++ b/reference/algorithm/ranges_merge.md
@@ -52,7 +52,7 @@ namespace std::ranges {
 
 ```cpp
 merge_result {
-  .in  = last1,
+  .in1 = last1,
   .in2 = last2,
   .out = result + (last1 - first1) + (last2 - first2),
 }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>perms -- Merge pull request #957 from cpprefjp/fix_typo</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/perms.html"/>
      <id>d85e7606fed036200a64a202e00646eb2d01baeb:reference/filesystem/perms.md</id>
      <updated>2022-03-21T01:11:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/perms.md b/reference/filesystem/perms.md
index aea7d0436..82a69422c 100644
--- a/reference/filesystem/perms.md
+++ b/reference/filesystem/perms.md
@@ -25,7 +25,7 @@ namespace std::filesystem {
     set_gid      = 02000,
     sticky_bit   = 01000,
     mask         = 07777, // all | set_uid | set_gid | sticky_bit
-    unknown      = 0xFFF
+    unknown      = 0xFFFF
   };
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- Merge pull request #957 from cpprefjp/fix_typo</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/end.html"/>
      <id>d85e7606fed036200a64a202e00646eb2d01baeb:reference/set/multiset/end.md</id>
      <updated>2022-03-21T01:11:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/end.md b/reference/set/multiset/end.md
index 4992db631..d11e9f9c5 100644
--- a/reference/set/multiset/end.md
+++ b/reference/set/multiset/end.md
@@ -1,4 +1,4 @@
-# end, cend
+# end
 * set[meta header]
 * std[meta namespace]
 * multiset[meta class]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- Merge pull request #957 from cpprefjp/fix_typo</title>
      <link href="https://cpprefjp.github.io/reference/set/set/end.html"/>
      <id>d85e7606fed036200a64a202e00646eb2d01baeb:reference/set/set/end.md</id>
      <updated>2022-03-21T01:11:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/end.md b/reference/set/set/end.md
index d650f48d6..91d728408 100644
--- a/reference/set/set/end.md
+++ b/reference/set/set/end.md
@@ -1,4 +1,4 @@
-# end, cend
+# end
 * set[meta header]
 * std[meta namespace]
 * set[meta class]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
</feed>
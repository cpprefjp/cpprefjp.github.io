<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-08-22T14:40:19.035841</updated>
  <id>69eacb7d-511f-4bae-aa6a-f80e8d7a6c29</id>

  
    <entry>
      <title>common_type -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/common_type.html"/>
      <id>21a2be5d6f6cb36c66283404efb5cd27bd370573:reference/iterator/basic_const_iterator/common_type.md</id>
      <updated>2023-08-22T15:25:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/common_type.md b/reference/iterator/basic_const_iterator/common_type.md
index 5d81e461a..cc4aa27de 100644
--- a/reference/iterator/basic_const_iterator/common_type.md
+++ b/reference/iterator/basic_const_iterator/common_type.md
@@ -29,7 +29,7 @@ namespace std {
 }
 ```
 * common_with[link /reference/concepts/common_with.md]
-* input_iterator[link ./input_iterator.md]
+* input_iterator[link /reference/iterator/input_iterator.md]
 * common_type[link /reference/type_traits/common_type.md]
 * common_type_t[link /reference/type_traits/common_type.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_const_iterator -- basic_const_iteratorのcommon_type特殊化を追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator.html"/>
      <id>d66df9c2b327ff15e7692c432cdd3f61fb02bed8:reference/iterator/basic_const_iterator.md</id>
      <updated>2023-08-22T15:22:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator.md b/reference/iterator/basic_const_iterator.md
index 8dba4ef6b..e3784acf1 100644
--- a/reference/iterator/basic_const_iterator.md
+++ b/reference/iterator/basic_const_iterator.md
@@ -81,6 +81,13 @@ namespace std {
 | [`make_const_iterator`](make_const_iterator.md)     | `basic_const_iterator`のヘルパ関数 | C++23 |
 | [`make_const_sentinel`](make_const_sentinel.md)     | `basic_const_iterator`のヘルパ関数 | C++23 |
 
+## 特殊化
+
+| 名前 | 説明 | 対応バージョン |
+|------------------------------------------------------|-------------|-------|
+| [`common_type`](basic_const_iterator/common_type.md)     | `basic_const_iterator`とイテレータ型の間の共通の型を求める | C++23 |
+
+
 ## 例
 
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_type -- basic_const_iteratorのcommon_type特殊化を追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/common_type.html"/>
      <id>d66df9c2b327ff15e7692c432cdd3f61fb02bed8:reference/iterator/basic_const_iterator/common_type.md</id>
      <updated>2023-08-22T15:22:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/common_type.md b/reference/iterator/basic_const_iterator/common_type.md
new file mode 100644
index 000000000..5d81e461a
--- /dev/null
+++ b/reference/iterator/basic_const_iterator/common_type.md
@@ -0,0 +1,85 @@
+# common_type
+* iterator[meta header]
+* std[meta namespace]
+* class template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  // (1)
+  template&amp;lt;class T, common_with&amp;lt;T&amp;gt; U&amp;gt;
+    requires input_iterator&amp;lt;common_type_t&amp;lt;T, U&amp;gt;&amp;gt;
+  struct common_type&amp;lt;basic_const_iterator&amp;lt;T&amp;gt;, U&amp;gt; {
+    using type = basic_const_iterator&amp;lt;common_type_t&amp;lt;T, U&amp;gt;&amp;gt;;
+  };
+
+  // (2)
+  template&amp;lt;class T, common_with&amp;lt;T&amp;gt; U&amp;gt;
+    requires input_iterator&amp;lt;common_type_t&amp;lt;T, U&amp;gt;&amp;gt;
+  struct common_type&amp;lt;U, basic_const_iterator&amp;lt;T&amp;gt;&amp;gt; {
+    using type = basic_const_iterator&amp;lt;common_type_t&amp;lt;T, U&amp;gt;&amp;gt;;
+  };
+
+  // (3)
+  template&amp;lt;class T, common_with&amp;lt;T&amp;gt; U&amp;gt;
+    requires input_iterator&amp;lt;common_type_t&amp;lt;T, U&amp;gt;&amp;gt;
+  struct common_type&amp;lt;basic_const_iterator&amp;lt;T&amp;gt;, basic_const_iterator&amp;lt;U&amp;gt;&amp;gt; {
+    using type = basic_const_iterator&amp;lt;common_type_t&amp;lt;T, U&amp;gt;&amp;gt;;
+  };
+}
+```
+* common_with[link /reference/concepts/common_with.md]
+* input_iterator[link ./input_iterator.md]
+* common_type[link /reference/type_traits/common_type.md]
+* common_type_t[link /reference/type_traits/common_type.md]
+
+## 概要
+
+`basic_const_iterator`のための[`common_type`](/reference/type_traits/common_type.md)特殊化。
+
+- (1)(2) : `basic_const_iterator`とその他のイテレータ型の間の共通の型を取得する
+- (3) : 異なるイテレータ型による`basic_const_iterator`特殊化の間の共通の型を取得する
+
+## 例
+```cpp example
+#include &amp;lt;iterator&amp;gt;
+
+int main() {
+  using ct1 = std::common_type_t&amp;lt;int*, std::const_iterator&amp;lt;int*&amp;gt;&amp;gt;;
+
+  static_assert(std::same_as&amp;lt;ct1, std::basic_const_iterator&amp;lt;int*&amp;gt;&amp;gt;);
+
+  using ct2 = std::common_type_t&amp;lt;std::const_iterator&amp;lt;int*&amp;gt;, int*&amp;gt;;
+
+  static_assert(std::same_as&amp;lt;ct1, ct2&amp;gt;);
+  
+  using ct3 = std::common_type_t&amp;lt;const int*, std::const_iterator&amp;lt;int*&amp;gt;&amp;gt;;
+
+  static_assert(std::same_as&amp;lt;ct3, std::basic_const_iterator&amp;lt;const int*&amp;gt;&amp;gt;);
+
+  using ct4 = std::common_type_t&amp;lt;std::basic_const_iterator&amp;lt;int*&amp;gt;, std::basic_const_iterator&amp;lt;const int*&amp;gt;&amp;gt;;
+
+  static_assert(std::same_as&amp;lt;ct4, std::basic_const_iterator&amp;lt;const int*&amp;gt;&amp;gt;);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 関連項目
+
+- [`common_type`](/reference/type_traits/common_type.md)
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cpprefjp - C++日本語リファレンス -- スポンサー更新 #1165</title>
      <link href="https://cpprefjp.github.io/index.html"/>
      <id>209d36b8491f92ecfde0a8ef69fbed90c840e937:index.md</id>
      <updated>2023-08-21T17:25:06+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;cpprefjp - C++日本語リファレンス&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本サイトcpprefjpは、プログラミング言語C++のリファレンスを提供するWebサイトです。&lt;/p&gt;
&lt;p&gt;最新C++バージョンのリファレンスを提供していきます。&lt;/p&gt;
&lt;h2&gt;運営方針&lt;/h2&gt;
&lt;p&gt;本リファレンスサイトは、C++言語の最新のリファレンスを常に提供し続けることを目標にしています。&lt;/p&gt;
&lt;p&gt;各クラス、関数にはそれぞれ1つ以上のサンプルコードを付けていく方針です。&lt;/p&gt;
&lt;p&gt;本サイトでは、他サイトおよび規格書の直接的な翻訳ではなく、編集者の調査と考えに基づいた解説を提供していきます。&lt;/p&gt;
&lt;h2&gt;スポンサーシップ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/cpprefjp&#34; target=&#34;_blank&#34;&gt;cpprefjp - Open Collective&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このプロジェクトは、持続的な活動のため、ユーザーの方々からのご支援をお待ちしております。上記Open Collectiveのプロジェクトでスポンサーシップの募集をしております。&lt;/p&gt;
&lt;p&gt;ご支援いただくユーザーの方々は、本ページ (cpprefjpサイトのトップページ) に、金額順でロゴを表示させていただきます (金額が同じ場合は登録順)。ご支援いただいた資金は、貢献度に応じてコントリビューターに分配させていただきます。&lt;/p&gt;
&lt;h2&gt;参加方法&lt;/h2&gt;
&lt;p&gt;本サイトは、多くのユーザの手によって書かれています。&lt;/p&gt;
&lt;p&gt;あなたがこの cpprefjp プロジェクトに参加したいのであれば、私達はそれをとても歓迎します。&lt;/p&gt;
&lt;p&gt;cpprefjp プロジェクトに参加する方法は簡単です。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site/issues?state=open&#34; target=&#34;_blank&#34;&gt;cpprefjp の Issues&lt;/a&gt; にアクセスし、&lt;/li&gt;
&lt;li&gt;あなたが手伝えそうな、まだ誰にもアサインされていないタスクを見つけ、&lt;/li&gt;
&lt;li&gt;その Issue のコメントに「このタスクやります」と書く&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これだけです。&lt;/p&gt;
&lt;p&gt;あとは、そのタスクを完了させて pull request を送れば、あなたも cpprefjp のコミッタになれます。&lt;/p&gt;
&lt;h2&gt;編集者向けのさらなる情報&lt;/h2&gt;
&lt;p&gt;本サイトは、GitHubのリポジトリ上で、Markdown形式でリファレンスを記載し、GitHub Pagesに自動反映するという形をとっています。本サイトのMarkdownソースは、以下のリポジトリにあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site&#34; target=&#34;_blank&#34;&gt;https://github.com/cpprefjp/site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記リポジトリのREADMEに、コアメンバの一覧を記載してありますので、何かありましたらそのうちの誰か、もしくはリポジトリへのIssueという形でご相談ください。&lt;/p&gt;
&lt;p&gt;本サイトの編集方法については、以下のドキュメントを参照してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/start_editing.html&#34;&gt;cpprefjpを編集するには&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本サイトのコンテンツを作成、編集するにあたり、仕様を熟知し、一人で完璧に正しい内容を書くことは要求しません。&lt;/p&gt;
&lt;p&gt;たとえ間違ったことを記載した場合や、不安の残る内容を記載した場合でも、それに気づいた誰かが修正してくれます。&lt;/p&gt;
&lt;h2&gt;その他参考情報&lt;/h2&gt;
&lt;p&gt;以下のWebサイトから転載許可をいただいています。&lt;/p&gt;
&lt;p&gt;翻訳や解説などで活用してください：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20190112041213/http://episteme.wankuma.com/stlprog/index.html&#34; target=&#34;_blank&#34;&gt;Standard Template Library プログラミング on the Web&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;スポンサー&lt;/h2&gt;
&lt;p&gt;cpprefjpプロジェクトは、以下の方々にスポンサーになっていただいております。&lt;/p&gt;
&lt;h3&gt;シルバースポンサー&lt;/h3&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.fixstars.com/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;Fixstars&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/sponsors/Fixstars/fixstars-logo.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://acerola-software.jp/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;Acerola Software&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/sponsors/Acerola/as_logo.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://vaporoid.com/sys/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;vaporoid&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/sponsors/vaporoid/cpprefjp-400x150.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.cube-soft.jp/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;CubeSoft&#34; src=&#34;https://raw.githubusercontent.com/cube-soft/cube.assets/master/home/banner/large.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://mkohana.github.io/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;M.Kohana&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/sponsors/m_kohana/m_kohana.jpg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;ブロンズスポンサー&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;イシハラユウヤ様&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/meg_nakagami&#34; target=&#34;_blank&#34;&gt;Megumi Nakagami様&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://github.com/minachun/minachun&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;minachun / J.Minami&#34; src=&#34;https://raw.githubusercontent.com/minachun/minachun/main/banner.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;一時スポンサー&lt;/h3&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://opencollective.com/odan&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;odan&#34; src=&#34;https://odan.dev/icon.jpeg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.unagiworks.net/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;unagi&#34; src=&#34;https://www.unagiworks.net/blog/wp-content/uploads/2019/01/logo.gif&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/hashitaku&#34; target=&#34;_blank&#34;&gt;Hashitaku様&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;img alt=&#34;yukika2e&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/sponsors/yukika2e/yukika2e.png&#34; /&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;スポンサーシップについては、以下のページを参照ください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/cpprefjp&#34; target=&#34;_blank&#34;&gt;cpprefjp - Open Collective&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;連絡先が不明なスポンサー様は、ロゴの表示が現在できておりません。Open Collectiveの問い合わせフォームから、表示するロゴ画像とリンク先URLについてご連絡いただきたいです。&lt;/p&gt;
&lt;h2&gt;プライバシーポリシー&lt;/h2&gt;
&lt;p&gt;本サイトは、サイトの改善のためにGoogleアナリティクスを使用しています。本サイトをご利用中のブラウザは、Googleに特定の情報を自動的に送信します。本サイトは、この分析のためにCookieを使用します。利用者は、本サイトを利用することで、この目的においてCookieを使用することを許可したものとみなします。&lt;/p&gt;
&lt;p&gt;Googleによるデータ使用の詳細は、以下のURLで確認することができます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.google.com/intl/ja/policies/privacy/partners/&#34; target=&#34;_blank&#34;&gt;https://www.google.com/intl/ja/policies/privacy/partners/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ライセンスについて&lt;/h2&gt;
&lt;p&gt;本サイトの情報は、&lt;a href=&#34;https://creativecommons.org/licenses/by/3.0/&#34; target=&#34;_blank&#34;&gt;クリエイティブ・コモンズ 表示 3.0 非移植 ライセンス(CC BY)&lt;/a&gt;の下に提供しています。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://i.creativecommons.org/l/by/3.0/88x31.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;cpprefjpサイトのアイコン・ロゴ画像は、&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/deed.ja&#34; target=&#34;_blank&#34;&gt;クリエイティブ・コモンズ 表示 - 非営利 - 改変禁止 4.0 国際 (CC BY-NC-ND 4.0)&lt;/a&gt;の下に提供しています。&lt;/p&gt;
&lt;p&gt;高解像度画像データ： &lt;a href=&#34;https://github.com/cpprefjp/image/tree/master/cpprefjp/icon&#34; target=&#34;_blank&#34;&gt;cpprefjp/image&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://licensebuttons.net/l/by-nc-nd/4.0/88x31.png&#34; /&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>make_const_sentinel -- make_const_sentinel : 表現とサンプルコードの修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/make_const_sentinel.html"/>
      <id>7fc8707529d50ce7434a3e2c012fb8835619360c:reference/iterator/make_const_sentinel.md</id>
      <updated>2023-08-21T12:40:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/make_const_sentinel.md b/reference/iterator/make_const_sentinel.md
index 8b8718daf..3301702e8 100644
--- a/reference/iterator/make_const_sentinel.md
+++ b/reference/iterator/make_const_sentinel.md
@@ -15,7 +15,7 @@ namespace std {
 
 ## 概要
 
-`basic_const_iterator`のヘルパ関数。特に、イテレータではないような番兵を`basic_const_iterator`の番兵型へと変換するのに使用する。
+`basic_const_iterator`のヘルパ関数。特に、イテレータではないような番兵を`basic_const_iterator`の番兵へと変換するのに使用する。
 
 ## 戻り値
 
@@ -35,7 +35,7 @@ return s;
 int main() {
   std::vector vec = {1, 2, 3, 4, 11, 5, 6, 22};
 
-  auto cit = std::make_const_iterator(rng.begin());
+  auto cit = std::make_const_iterator(vec.begin());
   auto cse = std::make_const_sentinel(std::unreachable_sentinel); // unreachable_sentinelはイテレータではない汎用の番兵
 
   auto pos = std::ranges::find_if(cit, cse, [](auto&amp;amp; n) {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>make_const_sentinel -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/make_const_sentinel.html"/>
      <id>cd417442096e21404c93b495684928e7c723f387:reference/iterator/make_const_sentinel.md</id>
      <updated>2023-08-21T12:33:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/make_const_sentinel.md b/reference/iterator/make_const_sentinel.md
index c7f4bddb6..8b8718daf 100644
--- a/reference/iterator/make_const_sentinel.md
+++ b/reference/iterator/make_const_sentinel.md
@@ -11,7 +11,7 @@ namespace std {
 }
 ```
 * semiregular[link /reference/concepts/semiregular.md]
-* const_sentinel[link const_sentinel.md.nolink]
+* const_sentinel[link const_sentinel.md]
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
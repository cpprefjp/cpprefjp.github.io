<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-01-23T09:11:38.658066</updated>
  <id>92ad0d4c-658b-4c58-a622-67b765378bd9</id>

  
    <entry>
      <title>cdata -- LWG Issue 3948対応（P3040R0）</title>
      <link href="https://cpprefjp.github.io/reference/ranges/cdata.html"/>
      <id>06c0c0060793e5d72690a5cc69ceaa7340439743:reference/ranges/cdata.md</id>
      <updated>2024-01-23T18:08:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/cdata.md b/reference/ranges/cdata.md
index 4bf0e27bf..139920917 100644
--- a/reference/ranges/cdata.md
+++ b/reference/ranges/cdata.md
@@ -27,7 +27,7 @@ Rangeの要素が格納されたメモリ領域へのポインタを取得する
         - `as-const-pointer`は次のような説明専用関数テンプレートである
           ```cpp
           template&amp;lt;class T&amp;gt;
-          constexpr auto as-const-pointer(const T* p) { return p; }
+          constexpr auto as-const-pointer(const T* p) noexcept { return p; }
           ```
 
 ## 戻り値
@@ -81,3 +81,4 @@ array size:1 at 0x556ec23ba2b0
 - [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
 - [C++20 ranges](https://techbookfest.org/product/5134506308665344)
 - [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
+- [LWG Issue 3948. `possibly-const-range` and `as-const-pointer` should be `noexcept`](https://cplusplus.github.io/LWG/issue3948)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>possibly-const-range -- LWG Issue 3948対応（P3040R0）</title>
      <link href="https://cpprefjp.github.io/reference/ranges/possibly-const-range.html"/>
      <id>06c0c0060793e5d72690a5cc69ceaa7340439743:reference/ranges/possibly-const-range.md</id>
      <updated>2024-01-23T18:08:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/possibly-const-range.md b/reference/ranges/possibly-const-range.md
index 8a921c7fd..5911d11bf 100644
--- a/reference/ranges/possibly-const-range.md
+++ b/reference/ranges/possibly-const-range.md
@@ -7,7 +7,7 @@
 ```cpp
 namespace std::ranges {
   template&amp;lt;input_range R&amp;gt;
-  constexpr auto&amp;amp; possibly-const-range(R&amp;amp; r) {
+  constexpr auto&amp;amp; possibly-const-range(R&amp;amp; r) noexcept {
     if constexpr (constant_range&amp;lt;const R&amp;gt; &amp;amp;&amp;amp; !constant_range&amp;lt;R&amp;gt;) {
       return const_cast&amp;lt;const R&amp;amp;&amp;gt;(r);
     } else {
@@ -33,3 +33,4 @@ namespace std::ranges {
 ## 参照
 
 - [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
+- [LWG Issue 3948. `possibly-const-range` and `as-const-pointer` should be `noexcept`](https://cplusplus.github.io/LWG/issue3948)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>subtract_with_carry_engine -- LWG Issue 3809対応（P3040R0）</title>
      <link href="https://cpprefjp.github.io/reference/random/subtract_with_carry_engine.html"/>
      <id>fdb5ec5326df252b737be4aa9f6c276943949470:reference/random/subtract_with_carry_engine.md</id>
      <updated>2024-01-23T18:05:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/subtract_with_carry_engine.md b/reference/random/subtract_with_carry_engine.md
index d3b8d04a8..241dbef1c 100644
--- a/reference/random/subtract_with_carry_engine.md
+++ b/reference/random/subtract_with_carry_engine.md
@@ -83,6 +83,7 @@ namespace std {
 | `static constexpr size_t short_lag` | 短いラグ。進める要素数。テンプレートパラメータ`s`。 | C++11 |
 | `static constexpr size_t long_lag`  | 長いラグ。オペランドの値間の距離。テンプレートパラメータ`r`。 | C++11 |
 | `static constexpr result_type default_seed` | デフォルトのシード値。`19780503u` | C++11 |
+| `static constexpr uint_least32_t default_seed` | デフォルトのシード値。`19780503u` | C++26 |
 
 
 ## 非メンバ関数
@@ -150,3 +151,4 @@ int main()
 - [Subtract with carry - Wikipedia](https://en.wikipedia.org/wiki/Subtract_with_carry)
 - [A New Class of Random Number Generators](http://projecteuclid.org/DPubS?service=UI&amp;amp;version=1.0&amp;amp;verb=Display&amp;amp;handle=euclid.aoap/1177005878), George Marsaglia and Arif Zaman, The Annals of Applied Probability, Vol. 1, No. 3, 1991
 - [M. Matsumoto, et al., Common Defects in Initialization of Pseudorandom Number Generators, *ACM Trans. Model. Comput. Simul.* **17**, 15 (2007)](https://doi.org/10.1145/1276927.1276928)
+- [LWG Issue 3809. Is `std::subtract_with_carry_engine&amp;lt;uint16_t&amp;gt;` supposed to work?](https://cplusplus.github.io/LWG/issue3809)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- LWG Issue 3809対応（P3040R0）</title>
      <link href="https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/op_constructor.html"/>
      <id>fdb5ec5326df252b737be4aa9f6c276943949470:reference/random/subtract_with_carry_engine/op_constructor.md</id>
      <updated>2024-01-23T18:05:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/subtract_with_carry_engine/op_constructor.md b/reference/random/subtract_with_carry_engine/op_constructor.md
index 647aa85bf..355dce826 100644
--- a/reference/random/subtract_with_carry_engine/op_constructor.md
+++ b/reference/random/subtract_with_carry_engine/op_constructor.md
@@ -9,6 +9,7 @@
 ```cpp
 explicit subtract_with_carry_engine(result_type value = default_seed);     // (1)
 subtract_with_carry_engine() : subtract_with_carry_engine(default_seed) {} // (1) C++20
+subtract_with_carry_engine() : subtract_with_carry_engine(0u) {}           // (1) C++26
 
 explicit subtract_with_carry_engine(result_type value);                    // (2) C++20
 
@@ -23,8 +24,10 @@ subtract_with_carry_engine(subtract_with_carry_engine&amp;amp;&amp;amp; e) = default;      // (5
 - (1) : デフォルトコンストラクタ
     - C++17まで：シード値が指定されない場合はデフォルトのシード値 (`subtract_with_carry_engine::default_seed`) で構築される
       - [`linear_congruential_engine`](../linear_congruential_engine.md) を $n = \lceil 32 / \mathtt{w} \rceil$ 回 (`w` は `subtract_with_carry_engine::word_size`) 呼び出して内部状態を初期化する
-    - C++20 : デフォルトのシード値 (`mersenne_twister_engine::default_seed`) で(2)に委譲
+    - C++20から : デフォルトのシード値 (`subtract_with_carry_engine::default_seed`) で(2)に委譲
+    - C++26から : シード値を`0u`として(2)に委譲
 - (2) : シード値を受け取って状態シーケンスを構築する
+    - `value == 0`なら、デフォルトのシード値 (`subtract_with_carry_engine::default_seed`) が使用される
     - [`linear_congruential_engine`](../linear_congruential_engine.md) を $n = \lceil 32 / \mathtt{w} \rceil$ 回 (`w` は `subtract_with_carry_engine::word_size`) 呼び出して内部状態を初期化する
 - (3) : シードのシーケンスを受け取って状態シーケンスを構築する
 - (4) : コピーコンストラクタ。状態シーケンスをコピーする
@@ -108,4 +111,5 @@ int main()
 
 ## 参照
 
-- [P0935R0 Eradicating unnecessarily explicit default constructors from the standard library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0935r0.html)
\ No newline at end of file
+- [P0935R0 Eradicating unnecessarily explicit default constructors from the standard library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0935r0.html)
+- [LWG Issue 3809. Is `std::subtract_with_carry_engine&amp;lt;uint16_t&amp;gt;` supposed to work?](https://cplusplus.github.io/LWG/issue3809)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>seed -- LWG Issue 3809対応（P3040R0）</title>
      <link href="https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/seed.html"/>
      <id>fdb5ec5326df252b737be4aa9f6c276943949470:reference/random/subtract_with_carry_engine/seed.md</id>
      <updated>2024-01-23T18:05:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/subtract_with_carry_engine/seed.md b/reference/random/subtract_with_carry_engine/seed.md
index a3ed4efcb..07a5699e5 100644
--- a/reference/random/subtract_with_carry_engine/seed.md
+++ b/reference/random/subtract_with_carry_engine/seed.md
@@ -7,7 +7,10 @@
 
 ```cpp
 void seed(result_type value = default_seed); // (1)
-template&amp;lt;class Sseq&amp;gt; void seed(Sseq&amp;amp; q);     // (2)
+void seed(result_type value = 0u);           // (1) C++26
+
+template&amp;lt;class Sseq&amp;gt;
+void seed(Sseq&amp;amp; q);     // (2)
 ```
 
 ## 概要
@@ -109,4 +112,4 @@ int main()
 
 ## 参照
 
-
+- [LWG Issue 3809. Is `std::subtract_with_carry_engine&amp;lt;uint16_t&amp;gt;` supposed to work?](https://cplusplus.github.io/LWG/issue3809)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>const_iterator_t -- LWG Issue 3946対応（P3040R0）</title>
      <link href="https://cpprefjp.github.io/reference/ranges/const_iterator_t.html"/>
      <id>cfedf6d21d4ee52c2aa645e7fb9f75b3e8c75ba7:reference/ranges/const_iterator_t.md</id>
      <updated>2024-01-23T17:42:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/const_iterator_t.md b/reference/ranges/const_iterator_t.md
index d2ecc3fd7..183bca235 100644
--- a/reference/ranges/const_iterator_t.md
+++ b/reference/ranges/const_iterator_t.md
@@ -7,12 +7,12 @@
 ```cpp
 namespace std::ranges {
   template&amp;lt;range R&amp;gt;
-  using const_iterator_t = const_iterator&amp;lt;iterator_t&amp;lt;R&amp;gt;&amp;gt;;
+  using const_iterator_t = decltype(ranges::cbegin(declval&amp;lt;R&amp;amp;&amp;gt;()));
 }
 ```
 * range[link range.md]
-* const_iterator[link /reference/iterator/const_iterator.md]
-* iterator_t[link iterator_t.md]
+* cbegin[link cbegin.md]
+* declval[link /reference/utility/declval.md]
 
 ## 概要
 
@@ -47,3 +47,4 @@ int main() {
 ## 参照
 
 - [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
+- [LWG Issue 3946. The definition of `const_iterator_t` should be reworked](https://cplusplus.github.io/LWG/issue3946)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>const_sentinel_t -- LWG Issue 3946対応（P3040R0）</title>
      <link href="https://cpprefjp.github.io/reference/ranges/const_sentinel_t.html"/>
      <id>cfedf6d21d4ee52c2aa645e7fb9f75b3e8c75ba7:reference/ranges/const_sentinel_t.md</id>
      <updated>2024-01-23T17:42:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/const_sentinel_t.md b/reference/ranges/const_sentinel_t.md
index 086fe5e1b..e0ef6c9c8 100644
--- a/reference/ranges/const_sentinel_t.md
+++ b/reference/ranges/const_sentinel_t.md
@@ -7,12 +7,12 @@
 ```cpp
 namespace std::ranges {
   template&amp;lt;range R&amp;gt;
-  using const_sentinel_t = const_sentinel&amp;lt;sentinel_t&amp;lt;R&amp;gt;&amp;gt;;
+  using const_sentinel_t = decltype(ranges::cend(declval&amp;lt;R&amp;amp;&amp;gt;()));
 }
 ```
 * range[link range.md]
-* const_sentinel[link /reference/iterator/const_sentinel.md]
-* sentinel_t[link sentinel_t.md]
+* cend[link cend.md]
+* declval[link /reference/utility/declval.md]
 
 ## 概要
 
@@ -51,3 +51,4 @@ int main() {
 ## 参照
 
 - [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
+- [LWG Issue 3946. The definition of `const_iterator_t` should be reworked](https://cplusplus.github.io/LWG/issue3946)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- LWG Issue 3897対応（P3040R0）</title>
      <link href="https://cpprefjp.github.io/reference/memory/inout_ptr_t/op_destructor.html"/>
      <id>ce48adc1e50a85ee72cf65a5846f4717e575c4d2:reference/memory/inout_ptr_t/op_destructor.md</id>
      <updated>2024-01-23T17:29:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/inout_ptr_t/op_destructor.md b/reference/memory/inout_ptr_t/op_destructor.md
index 80c1d2c3d..e7428512a 100644
--- a/reference/memory/inout_ptr_t/op_destructor.md
+++ b/reference/memory/inout_ptr_t/op_destructor.md
@@ -34,10 +34,8 @@
 - [`is_pointer_v`](/reference/type_traits/is_pointer.md)`&amp;lt;Smart&amp;gt;`が`true`ならば、
 
     ```cpp
-    if (p) {
-      apply([&amp;amp;](auto&amp;amp;&amp;amp;... args) {
-        s = Smart(static_cast&amp;lt;SP&amp;gt;(p), std::forward&amp;lt;Args&amp;gt;(args)...); }, std::move(a));
-    }
+    apply([&amp;amp;](auto&amp;amp;&amp;amp;... args) {
+      s = Smart(static_cast&amp;lt;SP&amp;gt;(p), std::forward&amp;lt;Args&amp;gt;(args)...); }, std::move(a));
     ```
 
 - 式 `s.reset(static_cast&amp;lt;SP&amp;gt;(p),` [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` が適格ならば、
@@ -85,3 +83,4 @@
 
 ## 参照
 - [P1132R8 out_ptr - a scalable output pointer abstraction](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1132r8.html)
+- [LWG Issue 3897. `inout_ptr` will not update raw pointer to 0](https://cplusplus.github.io/LWG/issue3897)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_iterator -- LWG Issue 3749対応（P3040R0）</title>
      <link href="https://cpprefjp.github.io/reference/iterator/common_iterator.html"/>
      <id>2ed0e77dd4664cc1371fbb07d3ac4bd8bc4d8599:reference/iterator/common_iterator.md</id>
      <updated>2024-01-23T17:15:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/common_iterator.md b/reference/iterator/common_iterator.md
index 22eefeb3f..9b94324ea 100644
--- a/reference/iterator/common_iterator.md
+++ b/reference/iterator/common_iterator.md
@@ -25,7 +25,7 @@ namespace std {
   template&amp;lt;input_iterator I, class S&amp;gt;
   struct iterator_traits&amp;lt;common_iterator&amp;lt;I, S&amp;gt;&amp;gt; {
     using iterator_concept = /*see below*/;
-    using iterator_category = /*see below*/;
+    using iterator_category = /*see below*/;  // 定義されない場合がある
     using value_type = iter_value_t&amp;lt;I&amp;gt;;
     using difference_type = iter_difference_t&amp;lt;I&amp;gt;;
     using pointer = /*see below*/;
@@ -80,6 +80,7 @@ namespace std {
 | `pointer` | `void` &amp;lt;br/&amp;gt; ただし、[`operator-&amp;gt;`](common_iterator/op_arrow.md)が利用可能である場合はその戻り値型 | C++20 |
 | `reference` | [`iter_reference_t`](/reference/iterator/iter_reference_t.md)`&amp;lt;I&amp;gt;`  | C++20 |
 
+- `iterator_category`は`iter_difference_t&amp;lt;I&amp;gt;`が組み込みの整数型の場合にのみ定義される（[*integer-class*](/reference/iterator/is_integer_like.md)型の場合には定義されない）
 
 ## 例
 
@@ -147,3 +148,4 @@ int main() {
 ## 参照
 - [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
 - [Hidden Friends - yohhoyの日記](https://yohhoy.hatenadiary.jp/entry/20190531/p1)
+- [LWG Issue 3749. `common_iterator` should handle integer-class difference types](https://cplusplus.github.io/LWG/issue3749)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-04-07T09:22:13.244155</updated>
  <id>8f055c63-e3f3-4f8d-a9ff-46673ca7aa90</id>

  
    <entry>
      <title>size -- fix some typo</title>
      <link href="https://cpprefjp.github.io/reference/list/list/size.html"/>
      <id>44ce3c2790c0716902bc77f34948ddea553d4e27:reference/list/list/size.md</id>
      <updated>2024-04-07T18:16:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/size.md b/reference/list/list/size.md
index 0f0b71883..e77b56c23 100644
--- a/reference/list/list/size.md
+++ b/reference/list/list/size.md
@@ -22,7 +22,7 @@ size_type size() const noexcept; // C++11
 
 
 ## 計算量
-- C++03 : 実装依存（多くの実装で定数時間 or　線形時間）
+- C++03 : 実装依存（多くの実装で定数時間 or 線形時間）
 - C++11 : 定数時間
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>splice -- fix some typo</title>
      <link href="https://cpprefjp.github.io/reference/list/list/splice.html"/>
      <id>44ce3c2790c0716902bc77f34948ddea553d4e27:reference/list/list/splice.md</id>
      <updated>2024-04-07T18:16:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/splice.md b/reference/list/list/splice.md
index e58ddeaf2..137fffa8c 100644
--- a/reference/list/list/splice.md
+++ b/reference/list/list/splice.md
@@ -137,7 +137,7 @@ int main()
 
 ## 参照
 - [LWG Issue 250. splicing invalidates iterators](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#250)
-- [LWG Issue 1133. Does N2844 break current specification of `list::splice`?](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#250)
+- [LWG Issue 1133. Does N2844 break current specification of `list::splice`?](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#1133)
 - [N2350 Container insert/erase and iterator constness (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2350.pdf)
 - [LWG Issue 3017. `list` `splice` functions should use `addressof`](https://wg21.cmeerw.net/lwg/issue3017)
 - [LWG Issue 3087. One final `&amp;amp;x` in §[list.ops]](https://wg21.cmeerw.net/lwg/issue3087)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- fix some typo</title>
      <link href="https://cpprefjp.github.io/reference/locale/wstring_convert/op_constructor.html"/>
      <id>44ce3c2790c0716902bc77f34948ddea553d4e27:reference/locale/wstring_convert/op_constructor.md</id>
      <updated>2024-04-07T18:16:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/locale/wstring_convert/op_constructor.md b/reference/locale/wstring_convert/op_constructor.md
index 71a93bbf6..be6c8487d 100644
--- a/reference/locale/wstring_convert/op_constructor.md
+++ b/reference/locale/wstring_convert/op_constructor.md
@@ -99,6 +99,6 @@ int main()
 
 
 ## 参照
-- [LWG Issue 2175. `wstring_convert` and `wbuffer_convert` validity](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2176)
+- [LWG Issue 2175. `wstring_convert` and `wbuffer_convert` validity](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2175)
 - [LWG Issue 2176. Special members for `wstring_convert` and `wbuffer_convert`](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2176)
 - [P0935R0 Eradicating unnecessarily explicit default constructors from the standard library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0935r0.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unique_ptr -- fix some typo</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr.html"/>
      <id>44ce3c2790c0716902bc77f34948ddea553d4e27:reference/memory/unique_ptr.md</id>
      <updated>2024-04-07T18:16:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr.md b/reference/memory/unique_ptr.md
index cde23f7d4..237576b9c 100644
--- a/reference/memory/unique_ptr.md
+++ b/reference/memory/unique_ptr.md
@@ -85,9 +85,9 @@ namespace std {
 ## ハッシュサポート
 
 | 名前 | 説明 | 対応バージョン |
-|-----------------------------------------------------------|------------------------------------------|-------|
-| `template &amp;lt;class T&amp;gt; struct hash;`                         | `hash`クラスの先行宣言                   | C++11 |
-| `template &amp;lt;class T, class D&amp;gt; struct hash&amp;lt;unique_ptr&amp;lt;N&amp;gt;&amp;gt;;` | `hash`クラスの`unique_ptr`に対する特殊化 | C++11 |
+|--------------------------------------------------------------|------------------------------------------|-------|
+| `template &amp;lt;class T&amp;gt; struct hash;`                            | `hash`クラスの先行宣言                   | C++11 |
+| `template &amp;lt;class T, class D&amp;gt; struct hash&amp;lt;unique_ptr&amp;lt;T, D&amp;gt;&amp;gt;;` | `hash`クラスの`unique_ptr`に対する特殊化 | C++11 |
 
 
 ## 例
@@ -144,7 +144,7 @@ hoge::~hoge()
 - [C++11 右辺値参照・ムーブセマンティクス](/lang/cpp11/rvalue_ref_and_move_semantics.md)
 - [Rvalue Reference Recommendations for Chapter 20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1856.html)
     - `unique_ptr`の追加と`auto_ptr`の非推奨の提案文書。
-- [LWG Issue 673. `unique_ptr` update](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#672)
+- [LWG Issue 673. `unique_ptr` update](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#673)
     - `unique_ptr&amp;lt;void, Deleter&amp;gt;`を許可するために、インタフェースを改良した経緯
 - [LWG Issue 762. `std::unique_ptr` requires complete type?](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#762)
 - [N4089 Safe conversions in `unique_ptr&amp;lt;T[]&amp;gt;`, revision 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4089.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>subspan -- fix some typo</title>
      <link href="https://cpprefjp.github.io/reference/span/span/subspan.html"/>
      <id>44ce3c2790c0716902bc77f34948ddea553d4e27:reference/span/span/subspan.md</id>
      <updated>2024-04-07T18:16:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/span/span/subspan.md b/reference/span/span/subspan.md
index e452b4c31..dc501537f 100644
--- a/reference/span/span/subspan.md
+++ b/reference/span/span/subspan.md
@@ -73,7 +73,7 @@ constexpr span&amp;lt;element_type, dynamic_extent&amp;gt;
 int main()
 {
   std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
-  std::span&amp;lt;int, 5&amp;gt; s = std::span{v};
+  std::span&amp;lt;int&amp;gt; s = std::span{v};
 
   // (1) : テンプレート引数として開始位置と要素数を指定して、要素を取得する。
   // テンプレート内でこのオーバーロードを使用する場合、s.template subspan&amp;lt;2, 3&amp;gt;(); のように、
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>char_traits -- fix some typo</title>
      <link href="https://cpprefjp.github.io/reference/string/char_traits.html"/>
      <id>44ce3c2790c0716902bc77f34948ddea553d4e27:reference/string/char_traits.md</id>
      <updated>2024-04-07T18:16:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/char_traits.md b/reference/string/char_traits.md
index 0771ee496..15f37ddf6 100644
--- a/reference/string/char_traits.md
+++ b/reference/string/char_traits.md
@@ -36,7 +36,7 @@ namespace std {
 | [`find`](char_traits/find.md)                 | 文字列中から特定の値を検索する | |
 | [`move`](char_traits/move.md)                 | 文字列を他のシーケンスにコピーする | |
 | [`copy`](char_traits/copy.md)                 | 文字列を他のシーケンスにコピーする | |
-| [`not_eof`](char_traits/not_eof.md)           | 文字がファイル終端文字(EOF)じゃないかを判定する | |
+| [`not_eof`](char_traits/not_eof.md)           | 文字がファイル終端文字(EOF)ではないかを判定する | |
 | [`to_char_type`](char_traits/to_char_type.md) | 数値を文字に変換する | |
 | [`to_int_type`](char_traits/to_int_type.md)   | 文字を数値に変換する | |
 | [`eq_int_type`](char_traits/eq_int_type.md)   | 数値の等値比較 | |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>not_eof -- fix some typo</title>
      <link href="https://cpprefjp.github.io/reference/string/char_traits/not_eof.html"/>
      <id>44ce3c2790c0716902bc77f34948ddea553d4e27:reference/string/char_traits/not_eof.md</id>
      <updated>2024-04-07T18:16:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/char_traits/not_eof.md b/reference/string/char_traits/not_eof.md
index 380092141..b53c2f1d6 100644
--- a/reference/string/char_traits/not_eof.md
+++ b/reference/string/char_traits/not_eof.md
@@ -10,7 +10,7 @@ static constexpr int_type not_eof(int_type c) noexcept; // C++11
 ```
 
 ## 概要
-文字がファイル終端文字(EOF)じゃないかを判定する。
+文字がファイル終端文字(EOF)ではないかを判定する。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bucket -- fix some typo</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/bucket.html"/>
      <id>44ce3c2790c0716902bc77f34948ddea553d4e27:reference/unordered_map/unordered_map/bucket.md</id>
      <updated>2024-04-07T18:16:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/bucket.md b/reference/unordered_map/unordered_map/bucket.md
index 2458b42b5..d3a1535ae 100644
--- a/reference/unordered_map/unordered_map/bucket.md
+++ b/reference/unordered_map/unordered_map/bucket.md
@@ -68,7 +68,7 @@ int main()
 * um.bucket_count()[link bucket_count.md]
 * um.bucket_size[link bucket_size.md]
 
-### 出力
+### 出力例
 ```
 bucket_count() = 11
 key = E, bucket = 3, bucket_size = 1
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bucket_size -- fix some typo</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/bucket_size.html"/>
      <id>44ce3c2790c0716902bc77f34948ddea553d4e27:reference/unordered_map/unordered_map/bucket_size.md</id>
      <updated>2024-04-07T18:16:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/bucket_size.md b/reference/unordered_map/unordered_map/bucket_size.md
index 39542f16f..c99cef234 100644
--- a/reference/unordered_map/unordered_map/bucket_size.md
+++ b/reference/unordered_map/unordered_map/bucket_size.md
@@ -62,7 +62,7 @@ int main()
 * um.cbegin[link cbegin-size_type.md]
 * um.cend[link cend-size_type.md]
 
-### 出力
+### 出力例
 ```
 bucket_count() = 11
 bucket = 0, bucket_size = 1, keys = { B, }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_or_assign -- fix some typo</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/insert_or_assign.html"/>
      <id>44ce3c2790c0716902bc77f34948ddea553d4e27:reference/unordered_map/unordered_map/insert_or_assign.md</id>
      <updated>2024-04-07T18:16:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/insert_or_assign.md b/reference/unordered_map/unordered_map/insert_or_assign.md
index c5b85144b..e407b3ffb 100644
--- a/reference/unordered_map/unordered_map/insert_or_assign.md
+++ b/reference/unordered_map/unordered_map/insert_or_assign.md
@@ -32,8 +32,8 @@ iterator insert_or_assign(const_iterator hint, key_type&amp;amp;&amp;amp; k, M&amp;amp;&amp;amp; obj);
 
 
 ## 効果
-- (1)、(3) : `Unordered_map` が `k` と同値のキーを持つ要素 `e` を持っている場合、`e.second` に [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` を代入する。そうでなければ、`k`, [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` から構築した `value_type` 型のオブジェクトを挿入する。
-- (2)、(4) : `Unordered_map` が `k` と同値のキーを持つ要素 `e` を持っている場合、`e.second` に [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` を代入する。そうでなければ、[`move`](/reference/utility/move.md)`(k)`, [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` から構築した `value_type` 型のオブジェクトを挿入する。
+- (1)、(3) : `unordered_map` が `k` と同値のキーを持つ要素 `e` を持っている場合、`e.second` に [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` を代入する。そうでなければ、`k`, [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` から構築した `value_type` 型のオブジェクトを挿入する。
+- (2)、(4) : `unordered_map` が `k` と同値のキーを持つ要素 `e` を持っている場合、`e.second` に [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` を代入する。そうでなければ、[`move`](/reference/utility/move.md)`(k)`, [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` から構築した `value_type` 型のオブジェクトを挿入する。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_emplace -- fix some typo</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/try_emplace.html"/>
      <id>44ce3c2790c0716902bc77f34948ddea553d4e27:reference/unordered_map/unordered_map/try_emplace.md</id>
      <updated>2024-04-07T18:16:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/try_emplace.md b/reference/unordered_map/unordered_map/try_emplace.md
index b4308056a..45e7c5254 100644
--- a/reference/unordered_map/unordered_map/try_emplace.md
+++ b/reference/unordered_map/unordered_map/try_emplace.md
@@ -40,8 +40,6 @@ iterator try_emplace(const_iterator hint, key_type&amp;amp;&amp;amp; k, Args&amp;amp;&amp;amp;... args);
 
 
 ## 戻り値
-挿入されたかどうかを示す `bool` と、挿入された要素へのイテレータからなる `pair` を返す。挿入されなかったときは、既存要素へのイテレータを返す。
-
 - (1)、(2) : イテレータと `bool` 値の [`pair`](/reference/utility/pair.md) を返す。
     - 挿入された場合には、`first` に挿入された要素へのイテレータ、`second` に `true` が設定される。
     - 挿入されなかった場合には、`first` に `k` と等価のキーを持つ既存の要素へのイテレータ、`second` に `false` が設定される。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format_to_n -- 実装例を追加</title>
      <link href="https://cpprefjp.github.io/reference/format/format_to_n.html"/>
      <id>8e148d172551919f6053af466778fe544ce9fe97:reference/format/format_to_n.md</id>
      <updated>2024-04-07T13:58:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format_to_n.md b/reference/format/format_to_n.md
index 59b29c5eb..3647d188f 100644
--- a/reference/format/format_to_n.md
+++ b/reference/format/format_to_n.md
@@ -111,6 +111,74 @@ int main()
 The answer is 42.
 ```
 
+
+## 実装例
+
+```cpp
+template&amp;lt;class CharT, class Out&amp;gt;
+class Wrapper {
+  std::iter_difference_t&amp;lt;Out&amp;gt; count_ = 0;
+  std::iter_difference_t&amp;lt;Out&amp;gt; max_count_;
+  Out out_;
+  
+public:
+  using value_type = CharT;
+
+  Wrapper(Out out, std::iter_difference_t&amp;lt;Out&amp;gt; max_count)
+    : max_count_(max_count)
+    , out_(std::move(out))
+  {}
+
+  constexpr void push_back(const value_type&amp;amp; value) {
+    if (count_ &amp;lt; max_count_) {
+      *out_ = value;
+      ++out_;
+    }
+    ++count_;
+  }
+
+  constexpr std::format_to_n_result&amp;lt;Out&amp;gt; result() const {
+    return {out_, count_};
+  }
+};
+
+template&amp;lt;class Out, class... Args&amp;gt;
+format_to_n_result&amp;lt;Out&amp;gt; format_to_n(Out out, iter_difference_t&amp;lt;Out&amp;gt; n, format_string&amp;lt;Args...&amp;gt; fmt, Args&amp;amp;&amp;amp;... args) {
+  Wrapper&amp;lt;char, Out&amp;gt; wrapper(out, n);
+  format_to(back_inserter(wrapper), fmt, forward&amp;lt;Args&amp;gt;(args)...);
+  return wrapper.result();
+}
+
+template&amp;lt;class Out, class... Args&amp;gt;
+format_to_n_result&amp;lt;Out&amp;gt; format_to_n(Out out, iter_difference_t&amp;lt;Out&amp;gt; n, wformat_string&amp;lt;Args...&amp;gt; fmt, Args&amp;amp;&amp;amp;... args) {
+  Wrapper&amp;lt;wchar_t, Out&amp;gt; wrapper(out, n);
+  format_to(back_inserter(wrapper), fmt, forward&amp;lt;Args&amp;gt;(args)...);
+  return wrapper.result();
+}
+
+template&amp;lt;class Out, class... Args&amp;gt;
+format_to_n_result&amp;lt;Out&amp;gt; format_to_n(Out out, iter_difference_t&amp;lt;Out&amp;gt; n, const locale&amp;amp; loc, format_string&amp;lt;Args...&amp;gt; fmt, Args&amp;amp;&amp;amp;... args) {
+  Wrapper&amp;lt;char, Out&amp;gt; wrapper(out, n);
+  format_to(back_inserter(wrapper), loc, fmt, forward&amp;lt;Args&amp;gt;(args)...);
+  return wrapper.result();
+}
+
+template&amp;lt;class Out, class... Args&amp;gt;
+format_to_n_result&amp;lt;Out&amp;gt; format_to_n(Out out, iter_difference_t&amp;lt;Out&amp;gt; n, const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, Args&amp;amp;&amp;amp;... args) {
+  Wrapper&amp;lt;wchar_t, Out&amp;gt; wrapper(out, n);
+  format_to(back_inserter(wrapper), loc, fmt, forward&amp;lt;Args&amp;gt;(args)...);
+  return wrapper.result();
+}
+```
+* format_string[link basic_format_string.md]
+* wformat_string[link basic_format_string.md]
+* format_to[link format_to.md]
+* locale[link /reference/locale/locale.md]
+* forward[link /reference/utility/forward.md]
+* back_inserter[link /reference/iterator/back_inserter.md]
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
+
+
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatted_size -- 実装例を追加</title>
      <link href="https://cpprefjp.github.io/reference/format/formatted_size.html"/>
      <id>8e148d172551919f6053af466778fe544ce9fe97:reference/format/formatted_size.md</id>
      <updated>2024-04-07T13:58:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatted_size.md b/reference/format/formatted_size.md
index 0229779fa..5680ed13e 100644
--- a/reference/format/formatted_size.md
+++ b/reference/format/formatted_size.md
@@ -78,6 +78,59 @@ int main()
 17
 ```
 
+## 実装例
+
+```cpp
+template&amp;lt;class CharT&amp;gt;
+class Counter {
+  size_t count_ = 0;
+public:
+  using value_type = CharT;
+
+  constexpr void push_back(const value_type&amp;amp;) {
+    count_++;
+  }
+
+  constexpr size_t size() const {
+    return count_;
+  }
+};
+
+template&amp;lt;class Out, class... Args&amp;gt;
+size_t formatted_size(format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args) {
+  Counter&amp;lt;char&amp;gt; counter;
+  format_to(back_inserter(counter), fmt, forward&amp;lt;Args&amp;gt;(args)...);
+  return counter.size();
+}
+
+template&amp;lt;class Out, class... Args&amp;gt;
+size_t formatted_size(wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args) {
+  Counter&amp;lt;wchar_t&amp;gt; counter;
+  format_to(back_inserter(counter), fmt, forward&amp;lt;Args&amp;gt;(args)...);
+  return counter.size();
+}
+
+template&amp;lt;class Out, class... Args&amp;gt;
+size_t formatted_size(const locale&amp;amp; loc, format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args) {
+  Counter&amp;lt;char&amp;gt; counter;
+  format_to(loc, back_inserter(counter), fmt, forward&amp;lt;Args&amp;gt;(args)...);
+  return counter.size();
+}
+
+template&amp;lt;class Out, class... Args&amp;gt;
+size_t formatted_size(const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args) {
+  Counter&amp;lt;wchar_t&amp;gt; counter;
+  format_to(loc, back_inserter(counter), fmt, forward&amp;lt;Args&amp;gt;(args)...);
+  return counter.size();
+}
+```
+* format_string[link basic_format_string.md]
+* wformat_string[link basic_format_string.md]
+* format_to[link format_to.md]
+* locale[link /reference/locale/locale.md]
+* forward[link /reference/utility/forward.md]
+* back_inserter[link /reference/iterator/back_inserter.md]
+
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vformat -- 実装例を追加</title>
      <link href="https://cpprefjp.github.io/reference/format/vformat.html"/>
      <id>8e148d172551919f6053af466778fe544ce9fe97:reference/format/vformat.md</id>
      <updated>2024-04-07T13:58:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/vformat.md b/reference/format/vformat.md
index 0d2f9fc87..54a2f69bc 100644
--- a/reference/format/vformat.md
+++ b/reference/format/vformat.md
@@ -44,6 +44,43 @@ namespace std {
 
 フォーマット実行時に失敗した場合、[`format_error`](format_error.md)を投げる。
 
+## 実装例
+
+```cpp
+string vformat(string_view fmt, format_args args) {
+  string str;
+  vformat_to(back_inserter(str), fmt.str, args);
+  return str;
+}
+
+string vformat(wstring_view fmt, wformat_args args) {
+  wstring str;
+  vformat_to(back_inserter(str), fmt.str, args);
+  return str;
+}
+
+string vformat(const locale&amp;amp; loc, string_view fmt, format_args args) {
+  string str;
+  vformat_to(loc, back_inserter(str), fmt.str, args);
+  return str;
+}
+
+string vformat(const locale&amp;amp; loc, wstring_view fmt, wformat_args args) {
+  wstring str;
+  vformat_to(loc, back_inserter(str), fmt.str, args);
+  return str;
+}
+```
+* string[link /reference/string/basic_string.md]
+* wstring[link /reference/string/basic_string.md]
+* string_view[link /reference/string_view/basic_string_view.md]
+* wstring_view[link /reference/string_view/basic_string_view.md]
+* format_args[link /reference/format/basic_format_args.md]
+* wformat_args[link /reference/format/basic_format_args.md]
+* locale[link /reference/locale/locale.md]
+* vformat_to[link vformat.md]
+* back_inserter[link /reference/iterator/back_inserter.md]
+
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vformat_to -- リンク追加</title>
      <link href="https://cpprefjp.github.io/reference/format/vformat_to.html"/>
      <id>8ca314b28b9137c18bb99d7f1b9c372243606cd4:reference/format/vformat_to.md</id>
      <updated>2024-04-02T07:47:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/vformat_to.md b/reference/format/vformat_to.md
index e6a3e14a7..dd565dd0d 100644
--- a/reference/format/vformat_to.md
+++ b/reference/format/vformat_to.md
@@ -154,6 +154,8 @@ Out vformat_to(Out out, std::string_view fmt, std::basic_format_args&amp;lt;Context&amp;gt; ar
 * std::basic_format_parse_context[link /reference/format/basic_format_parse_context.md]
 * std::basic_format_context[link /reference/format/basic_format_context.md]
 * std::basic_format_args[link /reference/format/basic_format_args.md]
+* std::basic_format_arg[link /reference/format/basic_format_arg.md]
+* handle[link /reference/format/basic_format_arg/handle.md]
 * std::visit_format_arg[link /reference/format/visit_format_arg.md]
 * std::from_chars[link /reference/charconv/from_chars.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vformat_to -- Fix error</title>
      <link href="https://cpprefjp.github.io/reference/format/vformat_to.html"/>
      <id>963ad2b66de478007b52277909109a1f1c770f2b:reference/format/vformat_to.md</id>
      <updated>2024-04-02T07:45:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/vformat_to.md b/reference/format/vformat_to.md
index 78737ce05..e6a3e14a7 100644
--- a/reference/format/vformat_to.md
+++ b/reference/format/vformat_to.md
@@ -90,7 +90,7 @@ struct ArgVisitor {
   }
 };
 
-template&amp;lt;std::output_iterator&amp;lt;char&amp;gt; Out, class Context = basic_format_context&amp;lt;Out, char&amp;gt;&amp;gt;
+template&amp;lt;std::output_iterator&amp;lt;char&amp;gt; Out, class Context = std::basic_format_context&amp;lt;Out, char&amp;gt;&amp;gt;
 Out vformat_to(Out out, std::string_view fmt, std::basic_format_args&amp;lt;Context&amp;gt; args) {
   using ParseContext = std::basic_format_parse_context&amp;lt;decltype(fmt)::value_type&amp;gt;;
   ParseContext pctx{fmt};
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
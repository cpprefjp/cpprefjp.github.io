<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2015-04-02T16:02:07.322369</updated>
  <id>4ac7dcde-ebd9-424b-94c3-d6c9231a77f1</id>

  
    <entry>
      <title>bind (C++11) -- bind : 改行調整</title>
      <link href="http://cpprefjp.github.io/reference/functional/bind.html"/>
      <id>fe805c90e850a6a871ad5636b2071b5745c6cc37:reference/functional/bind.md</id>
      <updated>2015-04-02 16:01:47 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;functional&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;bind (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, class... BoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;i&gt;unspecified&lt;/i&gt; bind(F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f, BoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... bound_args);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;R&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, class... BoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;i&gt;unspecified&lt;/i&gt; bind(F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f, BoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... bound_args);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;概要&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/callable.html&#34;&gt;&lt;i&gt;Callable&lt;/i&gt;&lt;/a&gt; オブジェクトに対し、引数を部分的に束縛(bind)する。&lt;/p&gt;
&lt;h3&gt;引数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; -- 束縛先となる &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/callable.html&#34;&gt;&lt;i&gt;Callable&lt;/i&gt;&lt;/a&gt; オブジェクト&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bound_args&lt;/code&gt; -- 束縛対象の値やプレースホルダ(&lt;code&gt;_1&lt;/code&gt;, &lt;code&gt;_2&lt;/code&gt;, ...)、別の &lt;code&gt;bind()&lt;/code&gt; 呼び出し&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;戻り値&lt;/h3&gt;
&lt;p&gt;引数を部分束縛された &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/callable.html&#34;&gt;&lt;i&gt;Callable&lt;/i&gt;&lt;/a&gt; オブジェクト。このオブジェクトは、次のような関数オブジェクトとして扱うことができる：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;i&gt;bound_function_type &lt;/i&gt;{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt; result_type;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... UnBoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;i&gt;unspecified&lt;/i&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(UnBoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... unbound_args) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;型名 &lt;code&gt;result_type&lt;/code&gt; は、&lt;code&gt;bind()&lt;/code&gt; 呼び出し時のテンプレートパラメータ &lt;code&gt;R&lt;/code&gt; そのもの(明示的に指定した場合)か、&lt;code&gt;F&lt;/code&gt; の戻り値型(&lt;code&gt;F&lt;/code&gt; が関数へのポインタまたはメンバ関数へのポインタである場合)か、&lt;code&gt;F::result_type&lt;/code&gt; (&lt;code&gt;F&lt;/code&gt; が型名 &lt;code&gt;result_type&lt;/code&gt; の定義を持つ場合)である。いずれの条件も満たさない場合、&lt;code&gt;result_type&lt;/code&gt; は定義されない。&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;code&gt;bound_function_type&lt;/code&gt;&lt;/i&gt;&lt;code&gt;::operator ()()&lt;/code&gt;を呼び出すと、&lt;code&gt;bound_args&lt;/code&gt; と &lt;code&gt;unbound_args&lt;/code&gt; が次のように使われ、最終的に &lt;code&gt;f&lt;/code&gt; の呼出しに到達する。(説明用に、 &lt;code&gt;BoundArgs&lt;/code&gt; のそれぞれの &lt;code&gt;decay&lt;/code&gt; された型を &lt;code&gt;TiD&lt;/code&gt; 、値を &lt;code&gt;ti&lt;/code&gt; 、&lt;code&gt;UnBoundArgs&lt;/code&gt; のそれぞれの値を &lt;code&gt;uj&lt;/code&gt; とおく)。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;型&lt;code&gt;Ti&lt;/code&gt; が &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/reference_wrapper.html&#34;&gt;&lt;code&gt;reference_wrapper&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;X&amp;gt;&lt;/code&gt; である場合、&lt;code&gt;ti.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/reference_wrapper/get.html&#34;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; が &lt;code&gt;ti&lt;/code&gt; の代わりに使用される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/is_bind_expression.html&#34;&gt;&lt;code&gt;is_bind_expression&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;TiD&amp;gt;::value&lt;/code&gt;が &lt;code&gt;true&lt;/code&gt; に評価される場合、&lt;code&gt;ti(unbound_args...)&lt;/code&gt; の結果が &lt;code&gt;ti&lt;/code&gt; の代わりに使用される(これは、ネストされた &lt;code&gt;bind()&lt;/code&gt; が一度の呼び出しで再帰的に全て評価されることを示す)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/is_placeholder.html&#34;&gt;&lt;code&gt;is_placeholder&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;TiD&amp;gt;::value&lt;/code&gt;が非ゼロに評価される場合、&lt;code&gt;uj&lt;/code&gt; (ただし &lt;code&gt;j = std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/is_placeholder.html&#34;&gt;&lt;code&gt;is_placeholder&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Ti&amp;gt;::value+1&lt;/code&gt;) が &lt;code&gt;ti&lt;/code&gt; の代わりに使用される。&lt;/li&gt;
&lt;li&gt;その他の場合、&lt;code&gt;ti&lt;/code&gt; がそのまま使用される。
上記の置換を行った後、 &lt;code&gt;f(ti...)&lt;/code&gt; を呼び出した結果が &lt;i&gt;&lt;code&gt;bound_function_type&lt;/code&gt;&lt;/i&gt;&lt;code&gt;::operator ()()&lt;/code&gt; の呼出し結果として返される。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意： &lt;code&gt;bound_args&lt;/code&gt; は明示的に &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/ref.html&#34;&gt;&lt;code&gt;std::ref()&lt;/code&gt;&lt;/a&gt; または &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/cref.html&#34;&gt;&lt;code&gt;std::cref()&lt;/code&gt;&lt;/a&gt; で包まない限り、内部でコピーして保持される。他方、&lt;code&gt;unbound_args&lt;/code&gt; は通常の &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;perfect forwarding&lt;/a&gt; が行われるため、&lt;code&gt;move&lt;/code&gt; で渡したあるいは一時オブジェクトを直接渡した &lt;code&gt;unbound_args&lt;/code&gt; を複数回プレースホルダ経由で使用すると予期しない結果になることがある。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional.html&#34;&gt;functional&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; b, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; c)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; c;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 第1引数のみを先に渡す&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/placeholders.html&#34;&gt;placeholders&lt;/a&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/function.html&#34;&gt;function&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;bind&lt;/span&gt;(add, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, _1, _2);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 残りの引数を渡して関数を呼び出す&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; f(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;9
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ceil -- cmath: 言語バージョン追加、id-type修正、宣言の;抜け修正</title>
      <link href="http://cpprefjp.github.io/reference/cmath/ceil.html"/>
      <id>801a60fa5d9c3a69a70d04fd22e5706533c01df0:reference/cmath/ceil.md</id>
      <updated>2015-04-02 15:53:24 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;ceil&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; ceil(&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; x);

  &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;ceil&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; x);

  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;ceil&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; x);

  &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;ceil&lt;/span&gt;(&lt;i&gt;Integral&lt;/i&gt; x);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11 から&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;引数 &lt;code&gt;x&lt;/code&gt; 以上で最小の整数値を得る。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;引数 &lt;code&gt;x&lt;/code&gt; 以上で最小の整数値&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;本関数は、C99 の規格にある &lt;code&gt;ceil&lt;/code&gt;（より正確には &lt;code&gt;math.h&lt;/code&gt; ヘッダの &lt;code&gt;ceil&lt;/code&gt;、&lt;code&gt;ceilf&lt;/code&gt;、&lt;code&gt;ceill&lt;/code&gt; の 3 つ。それぞれ C++ の &lt;code&gt;double&lt;/code&gt;、&lt;code&gt;float&lt;/code&gt;、&lt;code&gt;long double&lt;/code&gt; バージョンに相当）と同等である。&lt;br /&gt;
    C99 では、処理系が ISO IEC 60559（IEEE 754 と同一)に準拠している場合、以下のように規定されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x = ±0&lt;/code&gt; の場合、&lt;code&gt;±0&lt;/code&gt; を返す。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x = ±∞&lt;/code&gt; の場合、&lt;code&gt;±∞&lt;/code&gt; を返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、本関数は、丸めモードが &lt;code&gt;FE_UPWARD&lt;/code&gt; に設定されている時の &lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/rint.html&#34;&gt;&lt;code&gt;rint&lt;/code&gt;&lt;/a&gt;、あるいは &lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/nearbyint.html&#34;&gt;&lt;code&gt;nearbyint&lt;/code&gt;&lt;/a&gt; のいずれかと同等である旨の記載がある。
したがって、本関数において戻り値が引数 &lt;code&gt;x&lt;/code&gt; と異なる場合に例外 &lt;code&gt;FE_INEXACT&lt;/code&gt; が発生するか否かは実装依存であるものと思われる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;処理系が ISO IEC 60599 に準拠しているかどうかは、C99 の場合はマクロ &lt;code&gt;__STDC_IEC_599__&lt;/code&gt; が &lt;code&gt;1&lt;/code&gt; に定義されている事で判別可能であるが、C++ 規格書には該当する記載を見つけることができなかった。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cfenv.md.nolink&#34;&gt;cfenv&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath.html&#34;&gt;cmath&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;test&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; x)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cfenv/feclearexcept.md.nolink&#34;&gt;feclearexcept&lt;/a&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/cfenv/FE_ALL_EXCEPT.md.nolink&#34;&gt;FE_ALL_EXCEPT&lt;/a&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;ceil&lt;/span&gt;(&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;) = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;ceil&lt;/span&gt;(x) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;a href=&#34;http://cpprefjp.github.io/reference/cfenv/FE_INEXACT.md.nolink&#34;&gt;FE_INEXACT&lt;/a&gt; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/boolalpha.html&#34;&gt;boolalpha&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cfenv/fetestexcept.md.nolink&#34;&gt;fetestexcept&lt;/a&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/cfenv/FE_INEXACT.md.nolink&#34;&gt;FE_INEXACT&lt;/a&gt;) &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  test(&lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;);
  test(&lt;span style=&#34;color: #666666&#34;&gt;2.1&lt;/span&gt;);
  test(&lt;span style=&#34;color: #666666&#34;&gt;2.5&lt;/span&gt;);
  test(&lt;span style=&#34;color: #666666&#34;&gt;2.9&lt;/span&gt;);
  test(&lt;span style=&#34;color: #666666&#34;&gt;-2.0&lt;/span&gt;);
  test(&lt;span style=&#34;color: #666666&#34;&gt;-2.1&lt;/span&gt;);
  test(&lt;span style=&#34;color: #666666&#34;&gt;-2.5&lt;/span&gt;);
  test(&lt;span style=&#34;color: #666666&#34;&gt;-2.9&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;ceil(2) = 2
FE_INEXACT = false

ceil(2.1) = 3
FE_INEXACT = true

ceil(2.5) = 3
FE_INEXACT = true

ceil(2.9) = 3
FE_INEXACT = true

ceil(-2) = -2
FE_INEXACT = false

ceil(-2.1) = -2
FE_INEXACT = true

ceil(-2.5) = -2
FE_INEXACT = true

ceil(-2.9) = -2
FE_INEXACT = true
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;引数と結果が異なる場合に例外 &lt;code&gt;FE_INEXACT&lt;/code&gt; が発生するか否かは実装によって異なる可能性がある。&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>double_t (C++11) -- cmath: 言語バージョン追加、id-type修正、宣言の;抜け修正</title>
      <link href="http://cpprefjp.github.io/reference/cmath/double_t.html"/>
      <id>801a60fa5d9c3a69a70d04fd22e5706533c01df0:reference/cmath/double_t.md</id>
      <updated>2015-04-02 15:53:24 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;typedef&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;double_t (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;implementation&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;defined&lt;/i&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double_t&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;double&lt;/code&gt; と同じかそれより広い範囲の値を持つ浮動小数点数型を表す。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cfloat/flt_eval_method.html&#34;&gt;&lt;code&gt;FLT_EVAL_METHOD&lt;/code&gt;&lt;/a&gt; が 0 または 1 のとき &lt;code&gt;double&lt;/code&gt;, 2 のとき &lt;code&gt;long double&lt;/code&gt;, それ以外の場合は実装依存。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>float_t (C++11) -- cmath: 言語バージョン追加、id-type修正、宣言の;抜け修正</title>
      <link href="http://cpprefjp.github.io/reference/cmath/float_t.html"/>
      <id>801a60fa5d9c3a69a70d04fd22e5706533c01df0:reference/cmath/float_t.md</id>
      <updated>2015-04-02 15:53:24 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;typedef&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;float_t (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;implementation&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;defined&lt;/i&gt; &lt;span style=&#34;color: #B00040&#34;&gt;float_t&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;float&lt;/code&gt; と同じかそれより広い範囲の値を持つ浮動小数点数型を表す。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cfloat/flt_eval_method.html&#34;&gt;&lt;code&gt;FLT_EVAL_METHOD&lt;/code&gt;&lt;/a&gt; が 0 のとき &lt;code&gt;float&lt;/code&gt;, 1 のとき &lt;code&gt;double&lt;/code&gt;, 2 のとき &lt;code&gt;long double&lt;/code&gt;, それ以外の場合は実装依存。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>FP_FAST_FMA (C++11) -- cmath: 言語バージョン追加、id-type修正、宣言の;抜け修正</title>
      <link href="http://cpprefjp.github.io/reference/cmath/fp_fast_fma.html"/>
      <id>801a60fa5d9c3a69a70d04fd22e5706533c01df0:reference/cmath/fp_fast_fma.md</id>
      <updated>2015-04-02 15:53:24 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;macro&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;FP_FAST_FMA (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#define FP_FAST_FMA &lt;i&gt;implementation_defined&lt;/i&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;FP_FAST_FMA&lt;/code&gt; は &lt;code&gt;double&lt;/code&gt; 型の変数 &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt; に対し、関数呼び出し &lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/fma.html&#34;&gt;&lt;code&gt;fma(x, y, z)&lt;/code&gt;&lt;/a&gt; が式 &lt;code&gt;x * y + z&lt;/code&gt; より高速であるとき、またそのときに限り &lt;code&gt;#define&lt;/code&gt; される。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>FP_FAST_FMAF (C++11) -- cmath: 言語バージョン追加、id-type修正、宣言の;抜け修正</title>
      <link href="http://cpprefjp.github.io/reference/cmath/fp_fast_fmaf.html"/>
      <id>801a60fa5d9c3a69a70d04fd22e5706533c01df0:reference/cmath/fp_fast_fmaf.md</id>
      <updated>2015-04-02 15:53:24 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;macro&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;FP_FAST_FMAF (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#define FP_FAST_FMAF &lt;i&gt;implementation_defined&lt;/i&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;FP_FAST_FMAF&lt;/code&gt; は &lt;code&gt;float&lt;/code&gt; 型の変数 &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt; に対し、関数呼び出し &lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/fma.html&#34;&gt;&lt;code&gt;fma(x, y, z)&lt;/code&gt;&lt;/a&gt; が式 &lt;code&gt;x * y + z&lt;/code&gt; より高速であるとき、またそのときに限り &lt;code&gt;#define&lt;/code&gt; される。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>FP_FAST_FMAL (C++11) -- cmath: 言語バージョン追加、id-type修正、宣言の;抜け修正</title>
      <link href="http://cpprefjp.github.io/reference/cmath/fp_fast_fmal.html"/>
      <id>801a60fa5d9c3a69a70d04fd22e5706533c01df0:reference/cmath/fp_fast_fmal.md</id>
      <updated>2015-04-02 15:53:24 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;macro&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;FP_FAST_FMAL (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#define FP_FAST_FMAL &lt;i&gt;implementation_defined&lt;/i&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;FP_FAST_FMAL&lt;/code&gt; は &lt;code&gt;long double&lt;/code&gt; 型の変数 &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt; に対し、関数呼び出し &lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/fma.html&#34;&gt;&lt;code&gt;fma(x, y, z)&lt;/code&gt;&lt;/a&gt; が式 &lt;code&gt;x * y + z&lt;/code&gt; より高速であるとき、またそのときに限り &lt;code&gt;#define&lt;/code&gt; される。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>FP_ILOGB0 (C++11) -- cmath: 言語バージョン追加、id-type修正、宣言の;抜け修正</title>
      <link href="http://cpprefjp.github.io/reference/cmath/fp_ilogb0.html"/>
      <id>801a60fa5d9c3a69a70d04fd22e5706533c01df0:reference/cmath/fp_ilogb0.md</id>
      <updated>2015-04-02 15:53:24 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;macro&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;FP_ILOGB0 (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#define FP_ILOGB0 &lt;i&gt;implementation_defined&lt;/i&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;FP_ILOGB0&lt;/code&gt; は、&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/ilogb.html&#34;&gt;&lt;code&gt;ilogb&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(0)&lt;/code&gt; の返り値を表す整数定数式である。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/climits/int_min.html&#34;&gt;&lt;code&gt;INT_MIN&lt;/code&gt;&lt;/a&gt; と &lt;code&gt;-&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/climits/int_max.html&#34;&gt;&lt;code&gt;INT_MAX&lt;/code&gt;&lt;/a&gt; のうち少なくとも片方と等しい値でなければならない。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>FP_ILOGBNAN (C++11) -- cmath: 言語バージョン追加、id-type修正、宣言の;抜け修正</title>
      <link href="http://cpprefjp.github.io/reference/cmath/fp_ilogbnan.html"/>
      <id>801a60fa5d9c3a69a70d04fd22e5706533c01df0:reference/cmath/fp_ilogbnan.md</id>
      <updated>2015-04-02 15:53:24 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;macro&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;FP_ILOGBNAN (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#define FP_ILOGBNAN &lt;i&gt;implementation_defined&lt;/i&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;FP_ILOGBNAN&lt;/code&gt; は、&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/ilogb.html&#34;&gt;&lt;code&gt;ilogb&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; に &lt;code&gt;NaN&lt;/code&gt; を渡したときの返り値を表す整数定数式である。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/climits/int_min.html&#34;&gt;&lt;code&gt;INT_MIN&lt;/code&gt;&lt;/a&gt; と &lt;a href=&#34;http://cpprefjp.github.io/reference/climits/int_max.html&#34;&gt;&lt;code&gt;INT_MAX&lt;/code&gt;&lt;/a&gt; いずれかと等しい値でなければならない。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>FP_INFINITE (C++11) -- cmath: 言語バージョン追加、id-type修正、宣言の;抜け修正</title>
      <link href="http://cpprefjp.github.io/reference/cmath/fp_infinite.html"/>
      <id>801a60fa5d9c3a69a70d04fd22e5706533c01df0:reference/cmath/fp_infinite.md</id>
      <updated>2015-04-02 15:53:24 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;macro&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;FP_INFINITE (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#define FP_INFINITE &lt;i&gt;integer_constant_expression&lt;/i&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;浮動小数点数が（正または負の）無限大であることを表す整数定数式。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;このマクロの値は、&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/fpclassify.html&#34;&gt;&lt;code&gt;fpclassify&lt;/code&gt;&lt;/a&gt; において、引数が正、あるいは、負の無限大である場合に、戻り値として使用される。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits.html&#34;&gt;limits&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath.html&#34;&gt;cmath&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/boolalpha.html&#34;&gt;boolalpha&lt;/a&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/fpclassify.html&#34;&gt;fpclassify&lt;/a&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits.html&#34;&gt;numeric_limits&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/infinity.html&#34;&gt;infinity&lt;/a&gt;()) &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;FP_INFINITE&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;true
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>FP_NAN (C++11) -- cmath: 言語バージョン追加、id-type修正、宣言の;抜け修正</title>
      <link href="http://cpprefjp.github.io/reference/cmath/fp_nan.html"/>
      <id>801a60fa5d9c3a69a70d04fd22e5706533c01df0:reference/cmath/fp_nan.md</id>
      <updated>2015-04-02 15:53:24 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;macro&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;FP_NAN (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#define FP_NAN &lt;i&gt;integer_constant_expression&lt;/i&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;浮動小数点数が &lt;code&gt;NaN&lt;/code&gt; であることを表すを表す整数定数式。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;このマクロの値は、&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/fpclassify.html&#34;&gt;&lt;code&gt;fpclassify&lt;/code&gt;&lt;/a&gt; において、引数が &lt;code&gt;NaN&lt;/code&gt;（Not a Number、非数）である場合に、戻り値として使用される。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits.html&#34;&gt;limits&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath.html&#34;&gt;cmath&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/boolalpha.html&#34;&gt;boolalpha&lt;/a&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/fpclassify.html&#34;&gt;fpclassify&lt;/a&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits.html&#34;&gt;numeric_limits&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/quiet_nan.html&#34;&gt;quiet_NaN&lt;/a&gt;()) &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;FP_NAN&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;true
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>FP_NORMAL (C++11) -- cmath: 言語バージョン追加、id-type修正、宣言の;抜け修正</title>
      <link href="http://cpprefjp.github.io/reference/cmath/fp_normal.html"/>
      <id>801a60fa5d9c3a69a70d04fd22e5706533c01df0:reference/cmath/fp_normal.md</id>
      <updated>2015-04-02 15:53:24 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;macro&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;FP_NORMAL (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#define FP_NORMAL &lt;i&gt;integer_constant_expression&lt;/i&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;浮動小数点数が正規化数であることを表す整数定数式。&lt;/p&gt;
&lt;p&gt;正規化数とは、無限大、非正規化数、&lt;code&gt;NaN&lt;/code&gt;（Not a Number、非数）、または 0 のいずれでもない数をいう。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;このマクロの値は、&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/fpclassify.html&#34;&gt;&lt;code&gt;fpclassify&lt;/code&gt;&lt;/a&gt; において、引数が正規化数である場合に、戻り値として使用される。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath.html&#34;&gt;cmath&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/boolalpha.html&#34;&gt;boolalpha&lt;/a&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/fpclassify.html&#34;&gt;fpclassify&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1.0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;FP_NORMAL&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;true
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>FP_SUBNORMAL (C++11) -- cmath: 言語バージョン追加、id-type修正、宣言の;抜け修正</title>
      <link href="http://cpprefjp.github.io/reference/cmath/fp_subnormal.html"/>
      <id>801a60fa5d9c3a69a70d04fd22e5706533c01df0:reference/cmath/fp_subnormal.md</id>
      <updated>2015-04-02 15:53:24 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;macro&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;FP_SUBNORMAL (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#define FP_SUBNORMAL &lt;i&gt;integer_constant_expression&lt;/i&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;浮動小数点数が非正規化数であることを表す整数定数式。&lt;/p&gt;
&lt;p&gt;非正規化数とは、正規化数として表現するには小さすぎる値をいう。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;このマクロの値は、&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/fpclassify.html&#34;&gt;&lt;code&gt;fpclassify&lt;/code&gt;&lt;/a&gt; において、引数が非正規化数である場合に、戻り値として使用される。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits.html&#34;&gt;limits&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath.html&#34;&gt;cmath&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/boolalpha.html&#34;&gt;boolalpha&lt;/a&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/fpclassify.html&#34;&gt;fpclassify&lt;/a&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits.html&#34;&gt;numeric_limits&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/denorm_min.html&#34;&gt;denorm_min&lt;/a&gt;()) &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;FP_SUBNORMAL&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;true
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>FP_ZERO (C++11) -- cmath: 言語バージョン追加、id-type修正、宣言の;抜け修正</title>
      <link href="http://cpprefjp.github.io/reference/cmath/fp_zero.html"/>
      <id>801a60fa5d9c3a69a70d04fd22e5706533c01df0:reference/cmath/fp_zero.md</id>
      <updated>2015-04-02 15:53:24 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;macro&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;FP_ZERO (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#define FP_ZERO &lt;i&gt;integer_constant_expression&lt;/i&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;浮動小数点数が（正または負の） 0 であることを表す整数定数式。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;このマクロの値は、&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/fpclassify.html&#34;&gt;&lt;code&gt;fpclassify&lt;/code&gt;&lt;/a&gt; において、引数が正、あるいは、負のゼロである場合に、戻り値として使用される。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath.html&#34;&gt;cmath&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/boolalpha.html&#34;&gt;boolalpha&lt;/a&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/fpclassify.html&#34;&gt;fpclassify&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;0.0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;FP_ZERO&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;true
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>HUGE_VALF (C++11) -- cmath: 言語バージョン追加、id-type修正、宣言の;抜け修正</title>
      <link href="http://cpprefjp.github.io/reference/cmath/huge_valf.html"/>
      <id>801a60fa5d9c3a69a70d04fd22e5706533c01df0:reference/cmath/huge_valf.md</id>
      <updated>2015-04-02 15:53:24 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;macro&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;HUGE_VALF (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#define HUGE_VALF &lt;i&gt;implementation-defined&lt;/i&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;float&lt;/code&gt; 型の正の値の定数式。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;float&lt;/code&gt; が無限大をサポートする場合、処理系によっては正の無限大となる。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>HUGE_VALL (C++11) -- cmath: 言語バージョン追加、id-type修正、宣言の;抜け修正</title>
      <link href="http://cpprefjp.github.io/reference/cmath/huge_vall.html"/>
      <id>801a60fa5d9c3a69a70d04fd22e5706533c01df0:reference/cmath/huge_vall.md</id>
      <updated>2015-04-02 15:53:24 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;macro&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;HUGE_VALL (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#define HUGE_VALL &lt;i&gt;implementation-defined&lt;/i&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;long double&lt;/code&gt; 型の正の値の定数式。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;long double&lt;/code&gt; が無限大をサポートする場合、処理系によっては正の無限大となる。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ilogb (C++11) -- cmath: 言語バージョン追加、id-type修正、宣言の;抜け修正</title>
      <link href="http://cpprefjp.github.io/reference/cmath/ilogb.html"/>
      <id>801a60fa5d9c3a69a70d04fd22e5706533c01df0:reference/cmath/ilogb.md</id>
      <updated>2015-04-02 15:53:24 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;ilogb (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; ilogb(&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt;);

  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;ilogb&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;);

  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;ilogb&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;);

  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;ilogb&lt;/span&gt;(&lt;i&gt;Integral&lt;/i&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ilogb(x)&lt;/code&gt; は浮動小数点数 &lt;code&gt;x&lt;/code&gt; の指数部を &lt;code&gt;int&lt;/code&gt; として返す。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; が 0 のときは &lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/fp_ilogb0.html&#34;&gt;&lt;code&gt;FP_ILOGB0&lt;/code&gt;&lt;/a&gt; を、無限大のときは &lt;a href=&#34;http://cpprefjp.github.io/reference/climits/int_max.html&#34;&gt;&lt;code&gt;INT_MAX&lt;/code&gt;&lt;/a&gt; を、&lt;code&gt;NaN&lt;/code&gt;のときは &lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/fp_ilogbnan.html&#34;&gt;&lt;code&gt;FP_ILOGBNAN&lt;/code&gt;&lt;/a&gt; を返す。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>INFINITY (C++11) -- cmath: 言語バージョン追加、id-type修正、宣言の;抜け修正</title>
      <link href="http://cpprefjp.github.io/reference/cmath/infinity.html"/>
      <id>801a60fa5d9c3a69a70d04fd22e5706533c01df0:reference/cmath/infinity.md</id>
      <updated>2015-04-02 15:53:24 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;macro&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;INFINITY (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#define INFINITY some_expression&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;float&lt;/code&gt; の無限大がサポートされる場合、&lt;code&gt;float&lt;/code&gt; 型の正の無限大である。&lt;/p&gt;
&lt;p&gt;無限大がサポートされない場合、オーバーフローする &lt;code&gt;float&lt;/code&gt; 型の式である。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>NAN (C++11) -- cmath: 言語バージョン追加、id-type修正、宣言の;抜け修正</title>
      <link href="http://cpprefjp.github.io/reference/cmath/nan.html"/>
      <id>801a60fa5d9c3a69a70d04fd22e5706533c01df0:reference/cmath/nan.md</id>
      <updated>2015-04-02 15:53:24 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;macro&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;NAN (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#define NAN &lt;i&gt;constant_expression&lt;/i&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;NaN&lt;/code&gt;(Not a Number, 非数) がサポートされる場合、&lt;code&gt;float&lt;/code&gt; の &lt;code&gt;quiet NaN&lt;/code&gt; の定数式に展開される。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>nearbyint (C++11) -- cmath: 言語バージョン追加、id-type修正、宣言の;抜け修正</title>
      <link href="http://cpprefjp.github.io/reference/cmath/nearbyint.html"/>
      <id>801a60fa5d9c3a69a70d04fd22e5706533c01df0:reference/cmath/nearbyint.md</id>
      <updated>2015-04-02 15:53:24 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;nearbyint (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; nearbyint(&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; x);

  &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;nearbyint&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; x);

  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;nearbyint&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; x);

  &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;nearbyint&lt;/span&gt;(&lt;i&gt;Integral&lt;/i&gt; x);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;引数 &lt;code&gt;x&lt;/code&gt; を現在の丸めモードで整数値に丸めた値を得る。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;引数 &lt;code&gt;x&lt;/code&gt; を現在の丸めモードで整数値に丸めた値&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;本関数と &lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/rint.html&#34;&gt;&lt;code&gt;rint&lt;/code&gt;&lt;/a&gt; は戻り値は同一であるが、本関数は引数 &lt;code&gt;x&lt;/code&gt; が戻り値と異なっていても &lt;a href=&#34;http://cpprefjp.github.io/reference/cfenv/FE_INEXACT.md.nolink&#34;&gt;&lt;code&gt;FE_INEXACT&lt;/code&gt;&lt;/a&gt; は発生しないが、&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/rint.html&#34;&gt;&lt;code&gt;rint&lt;/code&gt;&lt;/a&gt; は発生する可能性がある点のみ動作が異なる。&lt;/li&gt;
&lt;li&gt;本関数は、C99 の規格にある &lt;code&gt;nearbyint&lt;/code&gt;（より正確には &lt;code&gt;math.h&lt;/code&gt; ヘッダの &lt;code&gt;nearbyint&lt;/code&gt;、&lt;code&gt;nearbyintf&lt;/code&gt;、&lt;code&gt;nearbyintl&lt;/code&gt; の 3 つ。それぞれ C++ の &lt;code&gt;double&lt;/code&gt;、&lt;code&gt;float&lt;/code&gt;、&lt;code&gt;long double&lt;/code&gt; バージョンに相当）と同等である。
    C99 では、処理系が ISO IEC 60559（IEEE 754 と同一)に準拠している場合、以下のように規定されている。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x = ±0&lt;/code&gt; の場合、&lt;code&gt;±0&lt;/code&gt; を返す。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x = ±∞&lt;/code&gt; の場合、&lt;code&gt;±∞&lt;/code&gt; を返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;処理系が ISO IEC 60599 に準拠しているかどうかは、C99 の場合はマクロ &lt;code&gt;__STDC_IEC_599__&lt;/code&gt; が &lt;code&gt;1&lt;/code&gt; に定義されている事で判別可能であるが、C++ 規格書には該当する記載を見つけることができなかった。&lt;/li&gt;
&lt;li&gt;C99 では、丸めモードの設定時には &lt;code&gt;#pragma STDC FENV_ACCESS ON&lt;/code&gt; でなければなければならないと記載されているが、C++ には該当する記載を見つけることができなかった。&lt;br /&gt;
    なお、C99 でも &lt;code&gt;FENV_ACCESS&lt;/code&gt; のデフォルトは処理系定義である。&lt;/li&gt;
&lt;li&gt;丸めモード &lt;a href=&#34;http://cpprefjp.github.io/reference/cfenv/FE_TONEAREST.md.nolink&#34;&gt;&lt;code&gt;FE_TONEAREST&lt;/code&gt;&lt;/a&gt; は単なる四捨五入ではないことに注意。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cfenv.md.nolink&#34;&gt;cfenv&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath.html&#34;&gt;cmath&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;test&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; title, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; round_mode)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cfenv/feclearexcept.md.nolink&#34;&gt;feclearexcept&lt;/a&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/cfenv/FE_ALL_EXCEPT.md.nolink&#34;&gt;FE_ALL_EXCEPT&lt;/a&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cfenv/fesetround.md.nolink&#34;&gt;fesetround&lt;/a&gt;(round_mode);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; title &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;nearbyint&lt;/span&gt;(2.5) = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;nearbyint&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2.5&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;nearbyint&lt;/span&gt;(-2.5) = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;nearbyint&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;-2.5&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;a href=&#34;http://cpprefjp.github.io/reference/cfenv/FE_INEXACT.md.nolink&#34;&gt;FE_INEXACT&lt;/a&gt; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/boolalpha.html&#34;&gt;boolalpha&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cfenv/fetestexcept.md.nolink&#34;&gt;fetestexcept&lt;/a&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/cfenv/FE_INEXACT.md.nolink&#34;&gt;FE_INEXACT&lt;/a&gt;) &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}

&lt;span style=&#34;color: #BC7A00&#34;&gt;#define test(mode) test(#mode, mode)&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
&lt;span style=&#34;color: #BC7A00&#34;&gt;#ifdef FE_DOWNWARD&lt;/span&gt;
  test(FE_DOWNWARD);
&lt;span style=&#34;color: #BC7A00&#34;&gt;#endif&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#ifdef FE_TONEAREST&lt;/span&gt;
  test(FE_TONEAREST);
&lt;span style=&#34;color: #BC7A00&#34;&gt;#endif&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#ifdef FE_TOWARDZERO&lt;/span&gt;
  test(FE_TOWARDZERO);
&lt;span style=&#34;color: #BC7A00&#34;&gt;#endif&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#ifdef FE_UPWARD&lt;/span&gt;
  test(FE_UPWARD);
&lt;span style=&#34;color: #BC7A00&#34;&gt;#endif&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;FE_DOWNWARD
nearbyint(2.5) = 2
nearbyint(-2.5) = -3
FE_INEXACT = false

FE_TONEAREST
nearbyint(2.5) = 2
nearbyint(-2.5) = -2
FE_INEXACT = false

FE_TOWARDZERO
nearbyint(2.5) = 2
nearbyint(-2.5) = -2
FE_INEXACT = false

FE_UPWARD
nearbyint(2.5) = 3
nearbyint(-2.5) = -2
FE_INEXACT = false
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;処理系が ISO IEC 60599 に準拠していない場合、全ての丸めモードが利用可能とは限らない。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.3.6, 4.4.7, 4.5.4, 4.6.4, 4.7.3, 4.8.1, 4.8.2, 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;備考&lt;/h3&gt;
&lt;p&gt;本関数は C++11 で追加されたが、Clang(libc++) では C++11 モードでなくても使用可能である。&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rint (C++11) -- cmath: 言語バージョン追加、id-type修正、宣言の;抜け修正</title>
      <link href="http://cpprefjp.github.io/reference/cmath/rint.html"/>
      <id>801a60fa5d9c3a69a70d04fd22e5706533c01df0:reference/cmath/rint.md</id>
      <updated>2015-04-02 15:53:24 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;rint (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; rint(&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; x);

  &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;rint&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; x);

  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;rint&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; x);

  &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;rint&lt;/span&gt;(&lt;i&gt;Integral&lt;/i&gt; x);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;引数 &lt;code&gt;x&lt;/code&gt; を現在の丸めモードで整数値に丸めた値を得る。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;引数 &lt;code&gt;x&lt;/code&gt; を現在の丸めモードで整数値に丸めた値&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;本関数と &lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/nearbyint.html&#34;&gt;&lt;code&gt;nearbyint&lt;/code&gt;&lt;/a&gt; は戻り値は同一であるが、本関数は引数 &lt;code&gt;x&lt;/code&gt; が戻り値と異なってる場合 &lt;a href=&#34;http://cpprefjp.github.io/reference/cfenv/FE_INEXACT.md.nolink&#34;&gt;&lt;code&gt;FE_INEXACT&lt;/code&gt;&lt;/a&gt; が発生する可能性があるが、&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/nearbyint.html&#34;&gt;&lt;code&gt;nearbyint&lt;/code&gt;&lt;/a&gt; は発生しない点のみ動作が異なる。&lt;/li&gt;
&lt;li&gt;本関数は、C99 の規格にある &lt;code&gt;rint&lt;/code&gt;（より正確には &lt;code&gt;math.h&lt;/code&gt; ヘッダの &lt;code&gt;rint&lt;/code&gt;、&lt;code&gt;rintf&lt;/code&gt;、&lt;code&gt;rintl&lt;/code&gt; の 3 つ。それぞれ C++ の &lt;code&gt;double&lt;/code&gt;、&lt;code&gt;float&lt;/code&gt;、&lt;code&gt;long double&lt;/code&gt; バージョンに相当）と同等である。
    C99 では、処理系が ISO IEC 60559（IEEE 754 と同一)に準拠している場合、以下のように規定されている。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x = ±0&lt;/code&gt; の場合、&lt;code&gt;±0&lt;/code&gt; を返す。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x = ±∞&lt;/code&gt; の場合、&lt;code&gt;±∞&lt;/code&gt; を返す。&lt;/li&gt;
&lt;li&gt;引数 &lt;code&gt;x&lt;/code&gt; が戻り値と異なってる場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/cfenv/FE_INEXACT.md.nolink&#34;&gt;&lt;code&gt;FE_INEXACT&lt;/code&gt;&lt;/a&gt; が発生する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;処理系が ISO IEC 60599 に準拠しているかどうかは、C99 の場合はマクロ &lt;code&gt;__STDC_IEC_599__&lt;/code&gt; が &lt;code&gt;1&lt;/code&gt; に定義されている事で判別可能であるが、C++ 規格書には該当する記載を見つけることができなかった。&lt;/li&gt;
&lt;li&gt;C99 では、丸めモードの設定時には &lt;code&gt;#pragma STDC FENV_ACCESS ON&lt;/code&gt; でなければなければならないと記載されているが、C++ には該当する記載を見つけることができなかった。&lt;br /&gt;
    なお、C99 でも &lt;code&gt;FENV_ACCESS&lt;/code&gt; のデフォルトは処理系定義である。&lt;/li&gt;
&lt;li&gt;丸めモード &lt;a href=&#34;http://cpprefjp.github.io/reference/cfenv/FE_TONEAREST.md.nolink&#34;&gt;&lt;code&gt;FE_TONEAREST&lt;/code&gt;&lt;/a&gt; は単なる四捨五入ではないことに注意。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cfenv.md.nolink&#34;&gt;cfenv&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath.html&#34;&gt;cmath&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;test&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; title, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; round_mode)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cfenv/feclearexcept.md.nolink&#34;&gt;feclearexcept&lt;/a&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/cfenv/FE_ALL_EXCEPT.md.nolink&#34;&gt;FE_ALL_EXCEPT&lt;/a&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cfenv/fesetround.md.nolink&#34;&gt;fesetround&lt;/a&gt;(round_mode);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; title &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;rint&lt;/span&gt;(2.5) = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;rint&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2.5&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;rint&lt;/span&gt;(-2.5) = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;rint&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;-2.5&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;a href=&#34;http://cpprefjp.github.io/reference/cfenv/FE_INEXACT.md.nolink&#34;&gt;FE_INEXACT&lt;/a&gt; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/boolalpha.html&#34;&gt;boolalpha&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cfenv/fetestexcept.md.nolink&#34;&gt;fetestexcept&lt;/a&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/cfenv/FE_INEXACT.md.nolink&#34;&gt;FE_INEXACT&lt;/a&gt;) &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}

&lt;span style=&#34;color: #BC7A00&#34;&gt;#define test(mode) test(#mode, mode)&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
&lt;span style=&#34;color: #BC7A00&#34;&gt;#ifdef FE_DOWNWARD&lt;/span&gt;
  test(FE_DOWNWARD);
&lt;span style=&#34;color: #BC7A00&#34;&gt;#endif&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#ifdef FE_TONEAREST&lt;/span&gt;
  test(FE_TONEAREST);
&lt;span style=&#34;color: #BC7A00&#34;&gt;#endif&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#ifdef FE_TOWARDZERO&lt;/span&gt;
  test(FE_TOWARDZERO);
&lt;span style=&#34;color: #BC7A00&#34;&gt;#endif&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#ifdef FE_UPWARD&lt;/span&gt;
  test(FE_UPWARD);
&lt;span style=&#34;color: #BC7A00&#34;&gt;#endif&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;FE_DOWNWARD
rint(2.5) = 2
rint(-2.5) = -3
FE_INEXACT = true

FE_TONEAREST
rint(2.5) = 2
rint(-2.5) = -2
FE_INEXACT = true

FE_TOWARDZERO
rint(2.5) = 2
rint(-2.5) = -2
FE_INEXACT = true

FE_UPWARD
rint(2.5) = 3
rint(-2.5) = -2
FE_INEXACT = true
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;処理系が ISO IEC 60599 に準拠していない場合、全ての丸めモードが利用可能とは限らない。&lt;br /&gt;
また、処理系が IEC60559 に準拠していない場合、&lt;code&gt;FE_INEXACT&lt;/code&gt; は &lt;code&gt;false&lt;/code&gt; の可能性がある。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.3.6, 4.4.7, 4.5.4, 4.6.4, 4.7.3, 4.8.1, 4.8.2, 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;備考&lt;/h3&gt;
&lt;p&gt;本関数は C++11 で追加されたが、Clang(libc++) では C++11 モードでなくても使用可能である。&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>result_of (C++11) -- result_of : C++14に対応し、SFINAEフレンドリーにした。</title>
      <link href="http://cpprefjp.github.io/reference/type_traits/result_of.html"/>
      <id>62d386900aac2f2305a0bc5c45d50f18ae1decb6:reference/type_traits/result_of.md</id>
      <updated>2015-04-02 15:18:13 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;result_of (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;result_of&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 宣言のみ&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, class... ArgTypes&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;result_of&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;F(ArgTypes...)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;…&lt;/span&gt; type;
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;result_of_t&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; result_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;関数の戻り値の型を取得する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11まで : 型&lt;code&gt;F&lt;/code&gt;は、関数または関数オブジェクトであること。もしくは、型&lt;code&gt;F&lt;/code&gt;は、関数または関数オブジェクトへの参照であること。&lt;code&gt;INVOKE(declval&amp;lt;Fn&amp;gt;(), declval&amp;lt;ArgTypes&amp;gt;()...)&lt;/code&gt;が有効な式であること。&lt;/li&gt;
&lt;li&gt;C++14から : 型&lt;code&gt;F&lt;/code&gt;および&lt;code&gt;ArgsTypes...&lt;/code&gt;パラメータパックの全ての型が、完全型であること。もしくは&lt;code&gt;const&lt;/code&gt;/&lt;code&gt;volatile&lt;/code&gt;修飾された(あるいはされていない)&lt;code&gt;void&lt;/code&gt;か、要素数不明の配列型であること。&lt;ul&gt;
&lt;li&gt;このバージョンでは要件が緩和され、関数呼び出しが可能であることが要件から外れた。これにより、有効でない関数オブジェクト、引数を指定した場合に、&lt;code&gt;static_assert&lt;/code&gt;でコンパイルエラーにならず、テンプレートの置き換え失敗によりSFINAEが働くようになった。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;result_of&lt;/code&gt;は、関数または関数オブジェクトの型&lt;code&gt;F&lt;/code&gt;に対して、&lt;code&gt;ArgTypes...&lt;/code&gt;を引数として渡した場合の戻り値の型を、メンバ型&lt;code&gt;type&lt;/code&gt;として定義する。&lt;/p&gt;
&lt;p&gt;メンバ型&lt;code&gt;type&lt;/code&gt;は、以下と同じ型になる：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;decltype(&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/invoke.html&#34;&gt;INVOKE&lt;/a&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/declval.html&#34;&gt;declval&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Fn&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(), &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/declval.html&#34;&gt;declval&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ArgTypes&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;()...))
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;C++14以降では、上記メンバ型&lt;code&gt;type&lt;/code&gt;の型定義が有効な式でない場合、メンバ型&lt;code&gt;type&lt;/code&gt;は定義されない。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;type_traits&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;functional&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 関数&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; b)
{ &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; b; }

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 関数オブジェクト&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; functor {
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; b) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
  {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; b;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// オーバーロードしている&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string a, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string b) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
  {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; b;
  }
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; X {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メンバ関数&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; foo(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; b) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
  {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; b;
  }
};

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 受け取った関数を呼び出し、その関数の戻り値を返す&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;result_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;F(Args...)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type
  invoke(F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f, Args... args)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; f(args...);
}

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Fがメンバ関数ポインタの場合&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;result_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;F(Args...)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type
  invoke_memfun(F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f, Args... args)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(f), args...)();
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 関数&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; invoke(func, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 関数オブジェクト&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; invoke(functor(), &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// オーバーロード&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string result3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; invoke(functor(), &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hello &#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;World&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メンバ関数&lt;/span&gt;
  X x;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result4 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; invoke_memfun(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;X&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;foo, x, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result3 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result4 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
3
Hello World
3
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 3.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.6.4&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1437.html&#34; target=&#34;_blank&#34;&gt;N1437 A uniform method for computing function object return types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1454.html&#34; target=&#34;_blank&#34;&gt;N1454 A uniform method for computing function object return types (revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3123.html&#34; target=&#34;_blank&#34;&gt;Bringing result_of near to INVOKE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3462.html&#34; target=&#34;_blank&#34;&gt;N3462 &lt;code&gt;std::result_of&lt;/code&gt; and SFINAE&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11では、テンプレートパラメータが有効な関数の式にならない場合に&lt;code&gt;static_assert&lt;/code&gt;でコンパイルエラーにしていたが、C++14ではその時点でコンパイルエラーにせず、SFINAEを働かせるようにした。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3546.pdf&#34; target=&#34;_blank&#34;&gt;N3546 TransformationTraits Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3655.pdf&#34; target=&#34;_blank&#34;&gt;N3655 TransformationTraits Redux, v2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>match_flag_type (C++11) -- match_flag_type : 変更対象のバージョンを明確化</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_constants/match_flag_type.html"/>
      <id>ed96491a9fa741c29744d2c52f31d24c60566a40:reference/regex/regex_constants/match_flag_type.md</id>
      <updated>2015-04-01 22:01:26 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;typedef&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;regex&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std::regex_constants&#34;&gt;std::regex_constants::&lt;/span&gt;match_flag_type (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; regex_constants{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;implementation&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;defined&lt;/i&gt; match_flag_type;
  constexpr match_flag_type match_default &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {};
  constexpr match_flag_type match_not_bol &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type match_not_eol &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type match_not_bow &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type match_not_eow &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type match_any &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type match_not_null &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type match_continuous &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type match_prev_avail &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type format_default &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {};
  constexpr match_flag_type format_sed &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type format_no_copy &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type format_first_only &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
}}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;マッチ条件と書式を表す実装定義のビットマスク型&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_default&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;空のマッチ条件を表す値。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_not_bol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスの最初の文字を、行頭として扱わないようにする。&lt;code&gt;^&lt;/code&gt;が&lt;code&gt;[first, first]&lt;/code&gt;にマッチしなくなる。このオブジェクトのビットマスク値は未規定。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_not_eol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスの最後の文字を、行末として扱わないようにする。&lt;code&gt;$&lt;/code&gt;が&lt;code&gt;[last, last)&lt;/code&gt;にマッチしなくなる。このオブジェクトのビットマスク値は未規定。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_not_bow&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスの最初の文字を、単語の開始として扱わないようにする。&lt;code&gt;\\b&lt;/code&gt;が、先頭の文字から始まる単語にマッチしなくなる。このオブジェクトのビットマスク値は未規定。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_not_eow&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスの最後の文字を、単語の終端として扱わないようにする。&lt;code&gt;\\b&lt;/code&gt;が、最後の文字で終わる単語にマッチしなくなる。このオブジェクトのビットマスク値は未規定。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_any&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;複数のマッチ候補がある場合、その全てをマッチ結果として受け入れる。このオブジェクトのビットマスク値は未規定。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_not_null&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;空のシーケンスにはマッチしないようにする。このオブジェクトのビットマスク値は未規定。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_continuous&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスの先頭にマッチするかどうかだけを調べる。このオブジェクトのビットマスク値は未規定。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_prev_avail&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスの先頭の一文字前(&lt;code&gt;--first&lt;/code&gt;)が有効な位置であることを示す。このフラグが設定されると、&lt;code&gt;match_not_bol&lt;/code&gt;と&lt;code&gt;match_not_bow&lt;/code&gt;は無視される。このオブジェクトのビットマスク値は未規定。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;format_default&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ECMAScript形式のルールで置換を行う。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;format_sed&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;POSIXユーティリティのsed形式のルールで置換を行う。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;format_no_copy&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;検索と置換の操作において、正規表現にマッチしない文字列を出力にコピーしない。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;format_first_only&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;検索と置換の操作において、最初にマッチしたもののみを扱う。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 4.9.2, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#1450&#34; target=&#34;_blank&#34;&gt;LWG Issue 1450. Contradiction in &lt;code&gt;regex_constants&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match_default&lt;/code&gt;と&lt;code&gt;format_default&lt;/code&gt;の2つがデフォルト値&lt;code&gt;0&lt;/code&gt;を持っているが、同じ値を持つビットマスク値が複数含まれていることはビットマスク型の要件と矛盾しているため、C++14でビットマスク型の要件を見なおした。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2053&#34; target=&#34;_blank&#34;&gt;LWG Issue 2053. Errors in regex bitmask types&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;定数定義に不要な&lt;code&gt;static&lt;/code&gt;が付いていたため、C++14で削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>error_type (C++11) -- regex_constants : C++14対応として、定数定義のための不要なstaticの削除についてのIssueに、リンクを貼った</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_constants/error_type.html"/>
      <id>46c55d2da68a16b67cadc4277a3b2f20beb3c65b:reference/regex/regex_constants/error_type.md</id>
      <updated>2015-04-01 21:57:26 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;enum&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;regex&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std::regex_constants&#34;&gt;std::regex_constants::&lt;/span&gt;error_type (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; regex_constants {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;implementation&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;defined&lt;/i&gt; error_type;
  constexpr error_type error_collate &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr error_type error_ctype &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr error_type error_escape &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr error_type error_backref &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr error_type error_brack &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr error_type error_paren &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr error_type error_brace &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr error_type error_badbrace &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr error_type error_range &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr error_type error_space &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr error_type error_badrepeat &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr error_type error_complexity &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr error_type error_stack &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
}}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;正規表現のエラーを表す実装定義の列挙型。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;error_collate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式に、不正な照合要素名が含まれている&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;error_ctype&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式に、不正な文字クラス名が含まれている&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;error_escape&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式に、不正なエスケープ文字もしくは不正な後方エスケープ(trailing escape)が含まれている&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;error_backref&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式に、不正な後方参照が含まれている&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;error_brack&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式に、対応していないカギカッコ&lt;code&gt;[ ]&lt;/code&gt;が含まれている&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;error_paren&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式に、対応していない丸カッコ&lt;code&gt;( )&lt;/code&gt;が含まれている&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;error_brace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式に、対応していない波カッコ&lt;code&gt;{ }&lt;/code&gt;が含まれている&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;error_badbrace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式に、不正な範囲が設定された波カッコ&lt;code&gt;{ }&lt;/code&gt;が含まれている&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;error_range&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式に、不正な文字範囲が含まれている。多くのエンコーディングでは、&lt;code&gt;[b-a]&lt;/code&gt;のようなものが不正な文字範囲となる。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;error_space&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリ不足のため、式を有限状態マシンに変換できない&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;error_badrepeat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;有効な正規表現において、繰り返し&lt;code&gt;*?+{&lt;/code&gt;が処理されなかった&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;error_complexity&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式の複雑さが、事前に設定したレベルを超えている&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;error_stack&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリ不足のため、正規表現が指定されたシーケンスにマッチするかどうかを判断できない&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 4.9.2, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2053&#34; target=&#34;_blank&#34;&gt;LWG Issue 2053. Errors in regex bitmask types&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;定数定義に不要な&lt;code&gt;static&lt;/code&gt;が付いていたため、C++14で削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>match_flag_type (C++11) -- regex_constants : C++14対応として、定数定義のための不要なstaticの削除についてのIssueに、リンクを貼った</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_constants/match_flag_type.html"/>
      <id>46c55d2da68a16b67cadc4277a3b2f20beb3c65b:reference/regex/regex_constants/match_flag_type.md</id>
      <updated>2015-04-01 21:57:26 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;typedef&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;regex&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std::regex_constants&#34;&gt;std::regex_constants::&lt;/span&gt;match_flag_type (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; regex_constants{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;implementation&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;defined&lt;/i&gt; match_flag_type;
  constexpr match_flag_type match_default &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {};
  constexpr match_flag_type match_not_bol &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type match_not_eol &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type match_not_bow &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type match_not_eow &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type match_any &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type match_not_null &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type match_continuous &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type match_prev_avail &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type format_default &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {};
  constexpr match_flag_type format_sed &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type format_no_copy &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type format_first_only &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
}}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;マッチ条件と書式を表す実装定義のビットマスク型&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_default&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;空のマッチ条件を表す値。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_not_bol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスの最初の文字を、行頭として扱わないようにする。&lt;code&gt;^&lt;/code&gt;が&lt;code&gt;[first, first]&lt;/code&gt;にマッチしなくなる。このオブジェクトのビットマスク値は未規定。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_not_eol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスの最後の文字を、行末として扱わないようにする。&lt;code&gt;$&lt;/code&gt;が&lt;code&gt;[last, last)&lt;/code&gt;にマッチしなくなる。このオブジェクトのビットマスク値は未規定。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_not_bow&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスの最初の文字を、単語の開始として扱わないようにする。&lt;code&gt;\\b&lt;/code&gt;が、先頭の文字から始まる単語にマッチしなくなる。このオブジェクトのビットマスク値は未規定。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_not_eow&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスの最後の文字を、単語の終端として扱わないようにする。&lt;code&gt;\\b&lt;/code&gt;が、最後の文字で終わる単語にマッチしなくなる。このオブジェクトのビットマスク値は未規定。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_any&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;複数のマッチ候補がある場合、その全てをマッチ結果として受け入れる。このオブジェクトのビットマスク値は未規定。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_not_null&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;空のシーケンスにはマッチしないようにする。このオブジェクトのビットマスク値は未規定。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_continuous&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスの先頭にマッチするかどうかだけを調べる。このオブジェクトのビットマスク値は未規定。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_prev_avail&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスの先頭の一文字前(&lt;code&gt;--first&lt;/code&gt;)が有効な位置であることを示す。このフラグが設定されると、&lt;code&gt;match_not_bol&lt;/code&gt;と&lt;code&gt;match_not_bow&lt;/code&gt;は無視される。このオブジェクトのビットマスク値は未規定。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;format_default&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ECMAScript形式のルールで置換を行う。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;format_sed&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;POSIXユーティリティのsed形式のルールで置換を行う。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;format_no_copy&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;検索と置換の操作において、正規表現にマッチしない文字列を出力にコピーしない。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;format_first_only&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;検索と置換の操作において、最初にマッチしたもののみを扱う。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 4.9.2, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#1450&#34; target=&#34;_blank&#34;&gt;LWG Issue 1450. Contradiction in &lt;code&gt;regex_constants&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match_default&lt;/code&gt;と&lt;code&gt;format_default&lt;/code&gt;の2つがデフォルト値&lt;code&gt;0&lt;/code&gt;を持っているが、同じ値を持つビットマスク値が複数含まれていることはビットマスク型の要件と矛盾しているため、ビットマスク型の要件を見なおした。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2053&#34; target=&#34;_blank&#34;&gt;LWG Issue 2053. Errors in regex bitmask types&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;定数定義に不要な&lt;code&gt;static&lt;/code&gt;が付いていたため、C++14で削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>syntax_option_type (C++11) -- regex_constants : C++14対応として、定数定義のための不要なstaticの削除についてのIssueに、リンクを貼った</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_constants/syntax_option_type.html"/>
      <id>46c55d2da68a16b67cadc4277a3b2f20beb3c65b:reference/regex/regex_constants/syntax_option_type.md</id>
      <updated>2015-04-01 21:57:26 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;typedef&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;regex&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std::regex_constants&#34;&gt;std::regex_constants::&lt;/span&gt;syntax_option_type (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; regex_constants {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;implementation&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;defined&lt;/i&gt; syntax_option_type;
  constexpr syntax_option_type icase &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr syntax_option_type nosubs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr syntax_option_type optimize &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr syntax_option_type collate &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr syntax_option_type ECMAScript &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr syntax_option_type basic &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr syntax_option_type extended &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr syntax_option_type awk &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr syntax_option_type grep &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr syntax_option_type egrep &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
}}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;構文オプションを表す実装定義のビットマスク型。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;icase&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正規表現のマッチで大文字小文字を区別しないことを指定する。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;nosubs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正規表現のマッチ成功時に、渡された&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;オブジェクトへの参照に、部分式のマッチ情報を格納しないことを指定する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;optimize&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正規表現エンジンに、正規表現オブジェクトの構築速度よりもマッチ速度に注意を払うべきであることを指定する。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;collate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;[a-b]形式の文字範囲がロケールを考慮することを指定する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ECMAScript&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ECMA-262仕様のECMAScript言語と同じ構文を使用する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;basic&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;POSIX基本正規表現と同じ構文を使用する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;extended&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;POSIX拡張正規表現と同じ構文を使用する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;awk&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;POSIXユーティリティのawkと同じ構文を使用する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;grep&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;POSIXユーティリティのgrepと同じ構文を使用する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;egrep&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;POSIXユーティリティのgrepに&lt;code&gt;-E&lt;/code&gt;オプションを指定した場合と同じ構文を使用する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 4.9.2, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2053&#34; target=&#34;_blank&#34;&gt;LWG Issue 2053. Errors in regex bitmask types&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;定数定義に不要な&lt;code&gt;static&lt;/code&gt;が付いていたため、C++14で削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2015-07-29T15:53:39.944079</updated>
  <id>d0fa7cfd-8c3b-4f64-8ec0-ead3a920fb2c</id>

  
    <entry>
      <title>cshift -- valarray::cshift : 空の配列に対する挙動が明確になった経緯を記載</title>
      <link href="http://cpprefjp.github.io/reference/valarray/valarray/cshift.html"/>
      <id>cac9a56901c87ca51194f3807d12ebdb84c66eed:reference/valarray/valarray/cshift.md</id>
      <updated>2015-07-29 15:53:10 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;valarray&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class valarray&#34;&gt;valarray::&lt;/span&gt;cshift&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; cshift(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; n) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;要素の位置を循環シフトする。&lt;/p&gt;
&lt;p&gt;「cshift」は「circular shift(循環シフト)」の略。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;が正の値である場合、&lt;code&gt;n&lt;/code&gt;個分だけ要素を前(&lt;code&gt;0&lt;/code&gt;番目に向かう方向)に移動する。&lt;ul&gt;
&lt;li&gt;移動したことによって範囲外となった要素は、配列の後ろに移動する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;が負の値である場合、&lt;code&gt;n&lt;/code&gt;個分だけ要素を後ろ(&lt;code&gt;size()&lt;/code&gt;に向かう方向)に移動する。&lt;ul&gt;
&lt;li&gt;移動したことによって範囲外となった要素は、配列の先頭に移動する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;valarray&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; name, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; v)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : {&#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; v) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (first) {
      first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt;;
    }
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x;
  }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;}&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;};

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; left_shift_result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v.cshift(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;left_shift_result&#34;&lt;/span&gt;, left_shift_result);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; right_shift_result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v.cshift(&lt;span style=&#34;color: #666666&#34;&gt;-3&lt;/span&gt;);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;right_shift_result&#34;&lt;/span&gt;, right_shift_result);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;left_shift_result : {4,5,1,2,3}
right_shift_result : {3,4,5,1,2}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#618&#34; target=&#34;_blank&#34;&gt;LWG Issue 618. &lt;code&gt;valarray::cshift()&lt;/code&gt; effects on empty array&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;空の配列に対するこの関数の挙動が、C++11で明確になった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_modulo -- numeric_limits::is_modulo : C++11で定義がより明確になった経緯のレポートへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/limits/numeric_limits/is_modulo.html"/>
      <id>ca67358bb89608f1bc8f3ae4c360f090df5e689e:reference/limits/numeric_limits/is_modulo.md</id>
      <updated>2015-07-29 15:51:49 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;variable&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;limits&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class numeric_limits&#34;&gt;numeric_limits::&lt;/span&gt;is_modulo&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++03&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; is_modulo;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static&lt;/span&gt; constexpr &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; is_modulo;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;加算 (&lt;code&gt;+&lt;/code&gt;) ・減算 (&lt;code&gt;-&lt;/code&gt;) ・乗算 (&lt;code&gt;*&lt;/code&gt;) における数学的な値と、その型での値との間に (&lt;code&gt;max() - min() + 1&lt;/code&gt;) を法として常に合同関係があるかを判定する。&lt;br /&gt;
符号なし整数型の場合は常に&lt;code&gt;true&lt;/code&gt;となる。&lt;br /&gt;
多くの場合浮動小数点数型の場合は&lt;code&gt;false&lt;/code&gt;に、符号あり整数型の場合は&lt;code&gt;true&lt;/code&gt;になる。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;符号あり整数型において&lt;code&gt;is_modulo&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;であるとしても、符号あり整数型のオーバーフローは未定義の動作を起こす。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;limits&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  constexpr &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;is_modulo&lt;/span&gt;;
  constexpr &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;is_modulo&lt;/span&gt;;
  constexpr &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;is_modulo&lt;/span&gt;;
  constexpr &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; d &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;is_modulo&lt;/span&gt;;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;float : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;double : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;char : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; d &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;int : true
float : false
double : false
char : true
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[LWG Issue 612. &lt;code&gt;numeric_limits::is_modulo&lt;/code&gt; insufficiently defined]&lt;ul&gt;
&lt;li&gt;C++11で、定義がより明確になった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase (C++11) -- 重複を許可する非順序連想コンテナ：insertとeraseの、安定性について保証が規定されたレポートへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/erase.html"/>
      <id>ca024a3fc89ddff15e8a683f2b6f2f9c358d3606:reference/unordered_map/unordered_multimap/erase.md</id>
      <updated>2015-07-29 15:46:54 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class unordered_multimap&#34;&gt;unordered_multimap::&lt;/span&gt;erase (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;iterator &lt;span style=&#34;color: #0000FF&#34;&gt;erase&lt;/span&gt;(const_iterator position);                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

size_type &lt;span style=&#34;color: #0000FF&#34;&gt;erase&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; k);                        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

iterator &lt;span style=&#34;color: #0000FF&#34;&gt;erase&lt;/span&gt;(const_iterator first, const_iterator last); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;指定された要素を削除する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;position&lt;/code&gt; は、有効で、かつ、間接参照可能な（dereferenceable、つまり &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cend.html&#34;&gt;&lt;code&gt;cend&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; ではない）当該コンテナを指す読み取り専用イテレータでなければならない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;first&lt;/code&gt; と &lt;code&gt;last&lt;/code&gt; は &lt;code&gt;[first, last)&lt;/code&gt; が当該コンテナの有効な範囲である読み取り専用イテレータでなければならない。&lt;br /&gt;
    なお、規格書では &lt;code&gt;first&lt;/code&gt; は間接参照可能である必要があることになっているが、他の種類のコンテナの要件と照らし合わせると、間接参照可能である必要はない（つまり、&lt;code&gt;first&lt;/code&gt; と &lt;code&gt;last&lt;/code&gt; が共に &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cend.html&#34;&gt;&lt;code&gt;cend&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; でも良い）ものと思われる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   &lt;code&gt;position&lt;/code&gt; で指定された要素を削除する。&lt;/li&gt;
&lt;li&gt;(2)   &lt;code&gt;k&lt;/code&gt; と等価なキーの要素を削除する。&lt;/li&gt;
&lt;li&gt;(3)   &lt;code&gt;[first, last)&lt;/code&gt; の範囲にある要素を全て削除する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   「削除前に、削除された要素の次だった位置」を指すイテレータ。&lt;code&gt;erase()&lt;/code&gt; を呼び出しても削除された要素以外を指す全てのイテレータは無効にならないため、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(position)&lt;/code&gt; と同じ位置を指す &lt;code&gt;iterator&lt;/code&gt; である。&lt;br /&gt;
    なお、&lt;code&gt;position&lt;/code&gt; は &lt;code&gt;const_iterator&lt;/code&gt; なのに対して、戻り値は &lt;code&gt;iterator&lt;/code&gt; であるため注意が必要だが、非順序連想コンテナの場合いずれにせよどちらも読み取り専用イテレータである。&lt;/li&gt;
&lt;li&gt;(2)   削除した要素数。&lt;/li&gt;
&lt;li&gt;(3)    「削除前に、削除された要素の範囲の次だった位置」を指すイテレータ。&lt;code&gt;erase()&lt;/code&gt; を呼び出しても削除された要素以外を指す全てのイテレータは無効にならないため、&lt;code&gt;last&lt;/code&gt; と同じ位置を指す &lt;code&gt;iterator&lt;/code&gt; である。&lt;br /&gt;
    なお、&lt;code&gt;first&lt;/code&gt; 及び &lt;code&gt;last&lt;/code&gt; は &lt;code&gt;const_iterator&lt;/code&gt; なのに対して、戻り値は &lt;code&gt;iterator&lt;/code&gt; であるため注意が必要だが、非順序連想コンテナの場合いずれにせよどちらも読み取り専用イテレータである。&lt;br /&gt;
    また、要件に示したように &lt;code&gt;first&lt;/code&gt; が間接参照可能である必要がなかった場合にも、他の種類のコンテナの戻り値と照らし合わせると、&lt;code&gt;last&lt;/code&gt; と同じ位置を指す &lt;code&gt;iterator&lt;/code&gt; を返すのが適切であるものと思われる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   投げない。&lt;/li&gt;
&lt;li&gt;(2)   コンテナの &lt;code&gt;key_equal&lt;/code&gt; と &lt;code&gt;hasher&lt;/code&gt; のオブジェクト（それぞれ &lt;code&gt;key_eq()&lt;/code&gt; と &lt;code&gt;hash_function()&lt;/code&gt; が返すオブジェクト）が例外を投げなければ、例外を投げない。&lt;/li&gt;
&lt;li&gt;(3)   投げない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   平均的なケースでは定数（O(&lt;code&gt;1&lt;/code&gt;)）だが、最悪のケースではコンテナの要素数に比例（O(&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)）&lt;/li&gt;
&lt;li&gt;(2)   平均的なケースでは削除された要素数に比例（O(&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/count.html&#34;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(k)&lt;/code&gt;)）だが、最悪のケースではコンテナの要素数に比例（O(&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)）&lt;/li&gt;
&lt;li&gt;(3)   平均的なケースでは指定された範囲の要素数に比例（O(&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last)&lt;/code&gt;)）だが、最悪のケースではコンテナの要素数に比例（O(&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;削除された要素を指すイテレータ、および、参照のみ無効になる。なお、規格書に明確な記載は無いが、削除された要素を指すポインタも無効になる。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;unordered_map&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator.html&#34;&gt;iterator&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;algorithm&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; si;

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;ostream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;ostream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; si&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;(&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt;;
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; label, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; C&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;ostream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout)
{
  os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; label &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : &#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/for_each.html&#34;&gt;for_each&lt;/a&gt;(c.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), c.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cend.html&#34;&gt;cend&lt;/a&gt;(), [&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;os](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; si&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p) { os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt;; });
  os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 指定した位置にある要素を削除（(1)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;5th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;7th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;9th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;33&lt;/span&gt;}, };
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(1) &lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(const_iterator) before&#34;&lt;/span&gt;, um);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.find(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;argument: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(it1);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;return value: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;after&#34;&lt;/span&gt;, um);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 指定したキーと等価な要素を削除（(2)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;5th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;7th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;9th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;33&lt;/span&gt;}, };
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(2) &lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(const value_type&amp;amp;) before&#34;&lt;/span&gt;, um);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; count1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;5th&#34;&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; count2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;8th&#34;&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; count3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;argument: 5th, 8th, 3rd&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;return value: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; count1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; count2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; count3 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;after&#34;&lt;/span&gt;, um);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 指定した位置にある要素を削除（(3)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;5th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;7th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;9th&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;}, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;33&lt;/span&gt;}, };
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(3) &lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(const_iterator, const_iterator) before&#34;&lt;/span&gt;, um);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;next&lt;/a&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cbegin.html&#34;&gt;cbegin&lt;/a&gt;());
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;next&lt;/a&gt;(it1, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;arguments: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(it1, it2);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;return value: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it3 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;after&#34;&lt;/span&gt;, um);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(1) erase(const_iterator) before : (9th, 9), (7th, 7), (5th, 5), (3rd, 33), (3rd, 3), (1st, 1), 
argument: (3rd, 33)
return value: (3rd, 3)
after : (9th, 9), (7th, 7), (5th, 5), (3rd, 3), (1st, 1), 

(2) erase(const value_type&amp;amp;) before : (9th, 9), (7th, 7), (5th, 5), (3rd, 33), (3rd, 3), (1st, 1), 
argument: 5th, 8th, 3rd
return value: 1, 0, 2
after : (9th, 9), (7th, 7), (1st, 1), 

(3) erase(const_iterator, const_iterator) before : (9th, 9), (7th, 7), (5th, 5), (3rd, 33), (3rd, 3), (1st, 1), 
arguments: (7th, 7), (3rd, 33)
return value: (3rd, 33)
after : (9th, 9), (3rd, 33), (3rd, 3), (1st, 1), 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;注：&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map.html&#34;&gt;&lt;code&gt;unordered_map&lt;/code&gt;&lt;/a&gt; は非順序連想コンテナであるため、出力順序は無意味であることに注意&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/emplace_hint.html&#34;&gt;&lt;code&gt;emplace_hint&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;挿入位置のヒントを使用したコンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の追加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;内容の交換&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#518&#34; target=&#34;_blank&#34;&gt;LWG Issue 518. Are &lt;code&gt;insert&lt;/code&gt; and &lt;code&gt;erase&lt;/code&gt; stable for &lt;code&gt;unordered_multiset&lt;/code&gt; and &lt;code&gt;unordered_multimap&lt;/code&gt;?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;安定性の保証が規定された経緯のレポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert (C++11) -- 重複を許可する非順序連想コンテナ：insertとeraseの、安定性について保証が規定されたレポートへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/insert.html"/>
      <id>ca024a3fc89ddff15e8a683f2b6f2f9c358d3606:reference/unordered_map/unordered_multimap/insert.md</id>
      <updated>2015-07-29 15:46:54 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class unordered_multimap&#34;&gt;unordered_multimap::&lt;/span&gt;insert (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v);                          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;P&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator insert(P&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; obj);                                      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(const_iterator position, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;P&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator insert(const_iterator position, P&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; obj);             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; insert(InputIterator first, InputIterator last);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il);                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;コンテナに要素を追加する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v&lt;/code&gt; を引数にとる形式（(1)、(3)）では、&lt;code&gt;value_type&lt;/code&gt; はコンテナに対してコピー挿入可能（CopyInsertable）でなければならない。&lt;br /&gt;
    コンテナに対してコピー挿入可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の左辺値、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタとすると、以下の式が適格（well-formed）であるということである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, v);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;obj&lt;/code&gt; を引数にとる形式（(2)、(4)）では、&lt;code&gt;value_type&lt;/code&gt; は引数 &lt;code&gt;obj&lt;/code&gt; からコンテナに対して直接構築可能（EmplaceConstructible）でなければならない。&lt;br /&gt;
    コンテナに対して直接構築可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の左辺値、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタとすると、以下の式が適格（well-formed）であるということである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;P&amp;gt;(obj));&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引数 &lt;code&gt;position&lt;/code&gt; は、コンテナの有効な読み取り専用イテレータでなければならない。&lt;br /&gt;
    なお、規格書では間接参照可能（dereferenceable）である必要があることになっているが、その必要はない（つまり、最終要素の次を指すイテレータでも良い）ものと思われる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引数 &lt;code&gt;first&lt;/code&gt;、および、&lt;code&gt;last&lt;/code&gt;は、入力イテレータの要件を満たし、かつ、範囲 &lt;code&gt;[first, last)&lt;/code&gt; が当該コンテナ&lt;strong&gt;以外を指す&lt;/strong&gt;有効な範囲でなければならない。&lt;br /&gt;
    また、引数 &lt;code&gt;first&lt;/code&gt;、および、&lt;code&gt;last&lt;/code&gt; を引数にとる形式（(5)）では、このコンテナの要素型 &lt;code&gt;value_type&lt;/code&gt; は、コンテナに対して &lt;code&gt;*first&lt;/code&gt; から直接構築可能（EmplaceConstructible）でなければならない。&lt;br /&gt;
    ここで、コンテナに対して &lt;code&gt;*first&lt;/code&gt; から直接構築可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の左辺値、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタとすると、以下の式が適格（well-formed）であるということである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, *first);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;なお、&lt;code&gt;first&lt;/code&gt;、および、&lt;code&gt;last&lt;/code&gt;は、規格書では &lt;code&gt;value_type&lt;/code&gt; を参照しなければならない（つまり、コンテナの &lt;code&gt;value_type&lt;/code&gt; と &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;&lt;code&gt;iterator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;decltype(first)&amp;gt;::value_type&lt;/code&gt; が同一の型でなければならない）ことになっているが、実際にはその必要はなく、上記の直接構築可能の要件を満たすだけで良いものと思われる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(6)の形式では、&lt;code&gt;value_type&lt;/code&gt; はコンテナに対してコピー挿入可能でなければならない。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   引数 &lt;code&gt;v&lt;/code&gt; で指定した値の要素を追加する。&lt;/li&gt;
&lt;li&gt;(2)   引数 &lt;code&gt;obj&lt;/code&gt; から構築されたオブジェクト &lt;code&gt;v&lt;/code&gt; を追加する。&lt;/li&gt;
&lt;li&gt;(3)   引数 &lt;code&gt;v&lt;/code&gt; で指定した値の要素を追加する。&lt;br /&gt;
    引数 &lt;code&gt;position&lt;/code&gt; は、要素の挿入位置を探し始める場所のヒントとして使用されるが、実装によって無視されるかもしれない。&lt;/li&gt;
&lt;li&gt;(4)   引数 &lt;code&gt;obj&lt;/code&gt; から構築されたオブジェクト &lt;code&gt;v&lt;/code&gt; を追加する。&lt;br /&gt;
    引数 &lt;code&gt;position&lt;/code&gt; は、要素の挿入位置を探し始める場所のヒントとして使用されるが、実装によって無視されるかもしれない。&lt;/li&gt;
&lt;li&gt;(5)   範囲 &lt;code&gt;[first, last)&lt;/code&gt; のすべての要素 &lt;code&gt;t&lt;/code&gt; に対して、&lt;code&gt;insert(t)&lt;/code&gt; を呼び出した場合と同等である（&lt;code&gt;*first&lt;/code&gt; の型によって (1)、あるいは(2)の形式が呼び出される）。&lt;/li&gt;
&lt;li&gt;(6)   (5)の形式を &lt;code&gt;insert(il.begin(), il.end())&lt;/code&gt; として呼び出した場合と同等である。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)から(4)  追加された要素を指すイテレータ。&lt;/li&gt;
&lt;li&gt;(5)、(6)   なし&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;単一要素の形式（(1)から(4)）では、ハッシュ関数以外から例外が投げられた場合には、挿入はされない。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)から(4)  平均的なケースでは定数（O(1)）だが、最悪のケースではコンテナの要素数 &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; に比例（O(N)）。&lt;/li&gt;
&lt;li&gt;(5)   平均的なケースでは引数の範囲の要素数 &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last)&lt;/code&gt; に比例（O(N)）するが、最悪のケースでは引数の範囲の要素数 &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last)&lt;/code&gt; とコンテナの要素数 &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; に 1 加えたものの積に比例（O(&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last) * (&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() + 1)&lt;/code&gt;)）。&lt;/li&gt;
&lt;li&gt;(6)   (5)の形式を &lt;code&gt;insert(il.begin(), il.end())&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;これらの関数が呼ばれた後も、当該コンテナ内の要素を指す参照は無効にはならない。
    なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;これらの関数が呼ばれた後も、呼び出しの前後でこのコンテナのバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）が変わらなかった場合には当該コンテナを指すイテレータは無効にはならない。&lt;br /&gt;
    それ以外の場合は、当該コンテナを指すイテレータは無効になる可能性がある。&lt;br /&gt;
    コンテナのバケット数が変わらない場合とは、要素追加後の要素数が、要素追加前のバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）×最大負荷率（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）よりも小さかった場合である。&lt;br /&gt;
    なお、条件が「よりも小さい」となっているが、最大負荷率の定義からすると「以下」の方が適切と思われる。&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt; も参照。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2)、および、(4) の形式は、&lt;code&gt;P&lt;/code&gt; が &lt;code&gt;value_type&lt;/code&gt; に暗黙変換可能でなければオーバーロード解決の対象にはならない。&lt;br /&gt;
    但し、この条件は規格書が当初意図した条件よりも厳しい（※）ため、C++14 では「&lt;code&gt;std::is_constructible&amp;lt;value_type, P&amp;amp;&amp;amp;&amp;gt;::value&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; であること」に修正される予定である。&lt;br /&gt;
    ※ &lt;code&gt;key_type&lt;/code&gt; がムーブのみ可能（コピー不可能）の場合、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;key_type, mapped_type&amp;gt;&lt;/code&gt; から &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const key_type, mapped_type&amp;gt;&lt;/code&gt; へ暗黙変換可能ではない&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;position&lt;/code&gt; を引数にとる形式（(3)、(4)）の場合、本関数呼び出しで構築されるオブジェクトを &lt;code&gt;t&lt;/code&gt; とすると、&lt;code&gt;t.first&lt;/code&gt; と等価なキーの要素が既に存在する場合、&lt;code&gt;position&lt;/code&gt; に応じて既存の要素と新規の要素が順序付けられると期待されるが、規格書にそのような規定は存在しない。
    従って、そのような期待はすべきではない。&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/emplace_hint.html&#34;&gt;&lt;code&gt;emplace_hint&lt;/code&gt;&lt;/a&gt;も参照。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;unordered_map&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;algorithm&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;initializer_list&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; cis;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; is;

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; cis&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;(&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt;;
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; label, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; C&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout)
{
  os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; label &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : &#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/for_each.html&#34;&gt;for_each&lt;/a&gt;(c.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), c.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cend.html&#34;&gt;cend&lt;/a&gt;(), [&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;os](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; cis&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p) { os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt;; });
  os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 一つの要素を挿入（(1)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap.html&#34;&gt;unordered_multimap&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;zero&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;one&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;two&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;three&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;four&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;five&#34;&lt;/span&gt;}, };

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(cis{&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;6th&#34;&lt;/span&gt;}); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重複のないケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(cis{&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd&#34;&lt;/span&gt;}); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重複のあるケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; one element&#34;&lt;/span&gt;, um);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 一つの要素を挿入（(2)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap.html&#34;&gt;unordered_multimap&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;zero&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;one&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;two&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;three&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;four&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;five&#34;&lt;/span&gt;}, };

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(is{&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;6th&#34;&lt;/span&gt;}); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重複のないケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(is{&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd&#34;&lt;/span&gt;}); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重複のあるケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; one element&#34;&lt;/span&gt;, um);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 一つの要素を挿入（(3)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap.html&#34;&gt;unordered_multimap&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;zero&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;one&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;two&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;three&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;four&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;five&#34;&lt;/span&gt;}, };

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), cis{&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;6th&#34;&lt;/span&gt;}); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重複のないケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), cis{&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd&#34;&lt;/span&gt;}); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重複のあるケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; one element with hint&#34;&lt;/span&gt;, um);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 一つの要素を挿入（(4)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap.html&#34;&gt;unordered_multimap&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;zero&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;one&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;two&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;three&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;four&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;five&#34;&lt;/span&gt;}, };

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), is{&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;6th&#34;&lt;/span&gt;}); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重複のないケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), is{&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd&#34;&lt;/span&gt;}); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重複のあるケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; one element with hint&#34;&lt;/span&gt;, um);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 複数の要素を挿入（(5)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap.html&#34;&gt;unordered_multimap&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;zero&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;one&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;two&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;three&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;four&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;five&#34;&lt;/span&gt;}, };

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;short&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&amp;gt;&lt;/span&gt; fl{ {&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;5th&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;6th&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0th&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;8th&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;7th&#34;&lt;/span&gt;}, };
    um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(fl.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), fl.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cend.html&#34;&gt;cend&lt;/a&gt;()); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt; の要素を全部&lt;/span&gt;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; range&#34;&lt;/span&gt;, um);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 複数の要素を挿入（(6)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap.html&#34;&gt;unordered_multimap&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;zero&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;one&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;two&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;three&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;four&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;five&#34;&lt;/span&gt;}, };

    um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;({ {&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;5th&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;6th&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0th&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;8th&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;7th&#34;&lt;/span&gt;}, });
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; initializer_list&#34;&lt;/span&gt;, um);
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(6,6th) (2,2nd)
insert one element : (6,6th), (5,five), (4,four), (3,three), (2,2nd), (2,two), (1,one), (0,zero), 
(6,6th) (2,2nd)
insert one element : (6,6th), (5,five), (4,four), (3,three), (2,2nd), (2,two), (1,one), (0,zero), 
(6,6th) (2,2nd)
insert one element with hint : (6,6th), (5,five), (4,four), (3,three), (2,2nd), (2,two), (1,one), (0,zero), 
(6,6th) (2,2nd)
insert one element with hint : (6,6th), (5,five), (4,four), (3,three), (2,2nd), (2,two), (1,one), (0,zero), 
insert range : (7,7th), (8,8th), (6,6th), (5,5th), (5,five), (4,four), (3,three), (2,two), (1,one), (0,0th), (0,zero), 
insert initializer_list : (7,7th), (8,8th), (6,6th), (5,5th), (5,five), (4,four), (3,three), (2,two), (1,one), (0,0th), (0,zero), 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;注：&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap.html&#34;&gt;&lt;code&gt;unordered_multimap&lt;/code&gt;&lt;/a&gt; は非順序連想コンテナであるため、出力順序は無意味であることに注意&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;(3)以降の形式は、(1)、および、(2)の形式を使って実装することができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; iterator unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key, Hash, Pred, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(const_iterator, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(v);
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;P&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; iterator unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key, Hash, Pred, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(const_iterator, P&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; obj)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;forward&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;P&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(obj));
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key, Hash, Pred, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(InputIterator first, InputIterator last);
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (; first &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;first)
    &lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;first);
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key, Hash, Pred, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il);
{
  &lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(il.begin(), il.end());
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/emplace_hint.html&#34;&gt;&lt;code&gt;emplace_hint&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;挿入位置のヒントを使用したコンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;内容の交換&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;バケット数の取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/load_factor.html&#34;&gt;&lt;code&gt;load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;現在の負荷率（バケットあたりの要素数の平均）を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;負荷率の最大値を取得、設定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/rehash.html&#34;&gt;&lt;code&gt;rehash&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小バケット数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小要素数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(6)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#518&#34; target=&#34;_blank&#34;&gt;LWG Issue 518. Are &lt;code&gt;insert&lt;/code&gt; and &lt;code&gt;erase&lt;/code&gt; stable for &lt;code&gt;unordered_multiset&lt;/code&gt; and &lt;code&gt;unordered_multimap&lt;/code&gt;?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;安定性の保証が規定された経緯のレポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase (C++11) -- 重複を許可する非順序連想コンテナ：insertとeraseの、安定性について保証が規定されたレポートへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/erase.html"/>
      <id>ca024a3fc89ddff15e8a683f2b6f2f9c358d3606:reference/unordered_set/unordered_multiset/erase.md</id>
      <updated>2015-07-29 15:46:54 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class unordered_multiset&#34;&gt;unordered_multiset::&lt;/span&gt;erase (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;iterator &lt;span style=&#34;color: #0000FF&#34;&gt;erase&lt;/span&gt;(const_iterator position);                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

size_type &lt;span style=&#34;color: #0000FF&#34;&gt;erase&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; k);                        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

iterator &lt;span style=&#34;color: #0000FF&#34;&gt;erase&lt;/span&gt;(const_iterator first, const_iterator last); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;指定された要素を削除する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;position&lt;/code&gt; は、有効で、かつ、間接参照可能な（dereferenceable、つまり &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/cend.html&#34;&gt;&lt;code&gt;cend&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; ではない）当該コンテナを指す読み取り専用イテレータでなければならない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;first&lt;/code&gt; と &lt;code&gt;last&lt;/code&gt; は &lt;code&gt;[first, last)&lt;/code&gt; が当該コンテナの有効な範囲である読み取り専用イテレータでなければならない。&lt;br /&gt;
    なお、規格書では &lt;code&gt;first&lt;/code&gt; は間接参照可能である必要があることになっているが、他の種類のコンテナの要件と照らし合わせると、間接参照可能である必要はない（つまり、&lt;code&gt;first&lt;/code&gt; と &lt;code&gt;last&lt;/code&gt; が共に &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/cend.html&#34;&gt;&lt;code&gt;cend&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; でも良い）ものと思われる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   &lt;code&gt;position&lt;/code&gt; で指定された要素を削除する。&lt;/li&gt;
&lt;li&gt;(2)   &lt;code&gt;k&lt;/code&gt; と等価なキーの要素を削除する。&lt;/li&gt;
&lt;li&gt;(3)   &lt;code&gt;[first, last)&lt;/code&gt; の範囲にある要素を全て削除する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   「削除前に、削除された要素の次だった位置」を指すイテレータ。&lt;code&gt;erase()&lt;/code&gt; を呼び出しても削除された要素以外を指す全てのイテレータは無効にならないため、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(position)&lt;/code&gt; と同じ位置を指す &lt;code&gt;iterator&lt;/code&gt; である。&lt;br /&gt;
    なお、&lt;code&gt;position&lt;/code&gt; は &lt;code&gt;const_iterator&lt;/code&gt; なのに対して、戻り値は &lt;code&gt;iterator&lt;/code&gt; であるため注意が必要だが、非順序連想コンテナの場合いずれにせよどちらも読み取り専用イテレータである。&lt;/li&gt;
&lt;li&gt;(2)   削除した要素数。&lt;/li&gt;
&lt;li&gt;(3)    「削除前に、削除された要素の範囲の次だった位置」を指すイテレータ。&lt;code&gt;erase()&lt;/code&gt; を呼び出しても削除された要素以外を指す全てのイテレータは無効にならないため、&lt;code&gt;last&lt;/code&gt; と同じ位置を指す &lt;code&gt;iterator&lt;/code&gt; である。&lt;br /&gt;
    なお、&lt;code&gt;first&lt;/code&gt; 及び &lt;code&gt;last&lt;/code&gt; は &lt;code&gt;const_iterator&lt;/code&gt; なのに対して、戻り値は &lt;code&gt;iterator&lt;/code&gt; であるため注意が必要だが、非順序連想コンテナの場合いずれにせよどちらも読み取り専用イテレータである。&lt;br /&gt;
    また、要件に示したように &lt;code&gt;first&lt;/code&gt; が間接参照可能である必要がなかった場合にも、他の種類のコンテナの戻り値と照らし合わせると、&lt;code&gt;last&lt;/code&gt; と同じ位置を指す &lt;code&gt;iterator&lt;/code&gt; を返すのが適切であるものと思われる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   投げない。&lt;/li&gt;
&lt;li&gt;(2)   コンテナの &lt;code&gt;key_equal&lt;/code&gt; と &lt;code&gt;hasher&lt;/code&gt; のオブジェクト（それぞれ &lt;code&gt;key_eq()&lt;/code&gt; と &lt;code&gt;hash_function()&lt;/code&gt; が返すオブジェクト）が例外を投げなければ、例外を投げない。&lt;/li&gt;
&lt;li&gt;(3)   投げない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   平均的なケースでは定数（O(&lt;code&gt;1&lt;/code&gt;)）だが、最悪のケースではコンテナの要素数に比例（O(&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)）&lt;/li&gt;
&lt;li&gt;(2)   平均的なケースでは削除された要素数に比例（O(&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/count.html&#34;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(k)&lt;/code&gt;)）だが、最悪のケースではコンテナの要素数に比例（O(&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)）&lt;/li&gt;
&lt;li&gt;(3)   平均的なケースでは指定された範囲の要素数に比例（O(&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last)&lt;/code&gt;)）だが、最悪のケースではコンテナの要素数に比例（O(&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;削除された要素を指すイテレータ、および、参照のみ無効になる。なお、規格書に明確な記載は無いが、削除された要素を指すポインタも無効になる。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set.html&#34;&gt;unordered_set&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator.html&#34;&gt;iterator&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;algorithm&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; label, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; C&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;ostream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout)
{
  os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; label &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : &#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/copy.html&#34;&gt;copy&lt;/a&gt;(c.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), c.cend(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/ostream_iterator.html&#34;&gt;ostream_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; C&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(os, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;));
  os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 指定した位置にある要素を削除（(1)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset.html&#34;&gt;unordered_multiset&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, };
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(1) erase(const_iterator) before&#34;&lt;/span&gt;, um);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;next&lt;/a&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;argument: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.erase(it1);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;return value: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;after&#34;&lt;/span&gt;, um);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 指定したキーと等価な要素を削除（(2)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset.html&#34;&gt;unordered_multiset&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, };
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(2) erase(const value_type&amp;amp;) before&#34;&lt;/span&gt;, um);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; count1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.erase(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; count2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.erase(&lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; count3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.erase(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;argument: 5, 8, 3&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;return value: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; count1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; count2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; count3 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;after&#34;&lt;/span&gt;, um);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 指定した位置にある要素を削除（(3)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset.html&#34;&gt;unordered_multiset&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, };
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(3) erase(const_iterator, const_iterator) before&#34;&lt;/span&gt;, um);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;next&lt;/a&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/cbegin.html&#34;&gt;cbegin&lt;/a&gt;());
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;next&lt;/a&gt;(it1, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;arguments: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.erase(it1, it2);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;return value: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it3 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;after&#34;&lt;/span&gt;, um);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(1) erase(const_iterator) before : 9 7 5 1 3 3
argument: 1
return value: 3
after : 9 7 5 3 3

(2) erase(const value_type&amp;amp;) before : 9 7 5 1 3 3
argument: 5, 8, 3
return value: 1, 0, 2
after : 9 7 1

(3) erase(const_iterator, const_iterator) before : 9 7 5 1 3 3
arguments: 7, 1
return value: 1
after : 9 1 3 3
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;注：&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset.html&#34;&gt;&lt;code&gt;unordered_multiset&lt;/code&gt;&lt;/a&gt; は非順序連想コンテナであるため、出力順序は無意味であることに注意&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/emplace_hint.html&#34;&gt;&lt;code&gt;emplace_hint&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;挿入位置のヒントを使用したコンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の追加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;内容の交換&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#518&#34; target=&#34;_blank&#34;&gt;LWG Issue 518. Are &lt;code&gt;insert&lt;/code&gt; and &lt;code&gt;erase&lt;/code&gt; stable for &lt;code&gt;unordered_multiset&lt;/code&gt; and &lt;code&gt;unordered_multimap&lt;/code&gt;?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;安定性の保証が規定された経緯のレポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert (C++11) -- 重複を許可する非順序連想コンテナ：insertとeraseの、安定性について保証が規定されたレポートへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/insert.html"/>
      <id>ca024a3fc89ddff15e8a683f2b6f2f9c358d3606:reference/unordered_set/unordered_multiset/insert.md</id>
      <updated>2015-07-29 15:46:54 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class unordered_multiset&#34;&gt;unordered_multiset::&lt;/span&gt;insert (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v);
iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rv);                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(const_iterator position, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v);
iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(const_iterator position, value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rv);     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; insert(InputIterator first, InputIterator last);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il);                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;コンテナに要素を追加する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v&lt;/code&gt; を引数にとる形式（(1)、(2)の上側）では、&lt;code&gt;value_type&lt;/code&gt; はコンテナに対してコピー挿入可能（CopyInsertable）でなければならない。&lt;br /&gt;
    コンテナに対してコピー挿入可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の左辺値、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタとすると、以下の式が適格（well-formed）であるということである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, v);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;rv&lt;/code&gt; を引数にとる形式（(1)、(2)の下側）では、&lt;code&gt;value_type&lt;/code&gt; はコンテナに対してムーブ挿入可能（MoveInsertable）でなければならない。&lt;br /&gt;
    コンテナに対してムーブ挿入可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の左辺値、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタとすると、以下の式が適格（well-formed）であるということである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/move.html&#34;&gt;&lt;code&gt;move&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(rv));&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引数 &lt;code&gt;position&lt;/code&gt; は、コンテナの有効な読み取り専用イテレータでなければならない。&lt;br /&gt;
    なお、標準では間接参照可能（dereferenceable）である必要があることになっているが、その必要はない（つまり、最終要素の次を指すイテレータでも良い）ものと思われる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引数 &lt;code&gt;first&lt;/code&gt;、および、&lt;code&gt;last&lt;/code&gt;は、入力イテレータの要件を満たし、かつ、範囲 &lt;code&gt;[first, last)&lt;/code&gt; が当該コンテナ&lt;strong&gt;以外を指す&lt;/strong&gt;有効な範囲でなければならない。&lt;br /&gt;
    また、引数 &lt;code&gt;first&lt;/code&gt;、および、&lt;code&gt;last&lt;/code&gt; を引数にとる形式（(3)）では、このコンテナの要素型 &lt;code&gt;value_type&lt;/code&gt; は、コンテナに対して &lt;code&gt;*first&lt;/code&gt; から直接構築可能（EmplaceConstructible）でなければならない。&lt;br /&gt;
    ここで、コンテナに対して &lt;code&gt;*first&lt;/code&gt; から直接構築可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の左辺値、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタとすると、以下の式が適格（well-formed）であるということである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, *first);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;なお、&lt;code&gt;first&lt;/code&gt;、および、&lt;code&gt;last&lt;/code&gt;は、標準では &lt;code&gt;value_type&lt;/code&gt; を参照しなければならない（つまり、コンテナの &lt;code&gt;value_type&lt;/code&gt; と &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;&lt;code&gt;iterator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;decltype(first)&amp;gt;::value_type&lt;/code&gt; が同一の型でなければならない）ことになっているが、実際にはその必要はなく、上記の直接構築可能の要件を満たすだけで良いものと思われる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(4)の形式では、&lt;code&gt;value_type&lt;/code&gt; はコンテナに対してコピー挿入可能でなければならない。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   引数 &lt;code&gt;v&lt;/code&gt;、あるいは &lt;code&gt;rv&lt;/code&gt; で指定した値の要素を追加する。&lt;/li&gt;
&lt;li&gt;(2)   引数 &lt;code&gt;v&lt;/code&gt;、あるいは &lt;code&gt;rv&lt;/code&gt; で指定した値の要素を追加する。&lt;br /&gt;
    引数 &lt;code&gt;position&lt;/code&gt; は、要素の挿入位置を探し始める場所のヒントとして使用されるが、実装によって無視されるかもしれない。&lt;/li&gt;
&lt;li&gt;(3)   範囲 &lt;code&gt;[first, last)&lt;/code&gt; のすべての要素 &lt;code&gt;t&lt;/code&gt; に対して、(1)の形式の &lt;code&gt;insert(t)&lt;/code&gt; を呼び出した場合と同等である。&lt;/li&gt;
&lt;li&gt;(4)   (3)の形式を &lt;code&gt;insert(il.begin(), il.end())&lt;/code&gt; として呼び出した場合と同等である。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   追加された要素を指すイテレータ。&lt;/li&gt;
&lt;li&gt;(2)   追加された要素を指すイテレータ。&lt;/li&gt;
&lt;li&gt;(3)   なし&lt;/li&gt;
&lt;li&gt;(4)   なし&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;単一要素の形式（(1)と(2)）では、ハッシュ関数以外から例外が投げられた場合には、挿入はされない。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   平均的なケースでは定数（O(1)）だが、最悪のケースではコンテナの要素数 &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; に比例（O(N)）。&lt;/li&gt;
&lt;li&gt;(2)   平均的なケースでは定数（O(1)）だが、最悪のケースではコンテナの要素数 &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; に比例（O(N)）。&lt;/li&gt;
&lt;li&gt;(3)   平均的なケースでは引数の範囲の要素数 &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last)&lt;/code&gt; に比例（O(N)）するが、最悪のケースでは引数の範囲の要素数 &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last)&lt;/code&gt; とコンテナの要素数 &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; に 1 加えたものの積に比例（O(&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last) * (&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() + 1)&lt;/code&gt;)）。&lt;/li&gt;
&lt;li&gt;(4)   (3)の形式を &lt;code&gt;insert(il.begin(), il.end())&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;これらの関数が呼ばれた後も、当該コンテナ内の要素を指す参照は無効にはならない。
    なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;これらの関数が呼ばれた後も、呼び出しの前後でこのコンテナのバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）が変わらなかった場合には当該コンテナを指すイテレータは無効にはならない。&lt;br /&gt;
    それ以外の場合は、当該コンテナを指すイテレータは無効になる可能性がある。&lt;br /&gt;
    コンテナのバケット数が変わらない場合とは、要素追加後の要素数が、要素追加前のバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）×最大負荷率（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）よりも小さかった場合である。
    なお、条件が「よりも小さい」となっているが、最大負荷率の定義からすると「以下」の方が適切と思われる。&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt; も参照。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;position&lt;/code&gt; を引数にとる形式（(2)）の場合、本関数呼び出しで構築されるオブジェクト &lt;code&gt;t&lt;/code&gt; と等価なキーの要素が既に存在する場合、&lt;code&gt;position&lt;/code&gt; に応じて既存の要素と新規の要素が順序付けられると期待されるが、規格書にそのような規定は存在しない。
    従って、そのような期待はすべきではない。&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/emplace_hint.html&#34;&gt;&lt;code&gt;emplace_hint&lt;/code&gt;&lt;/a&gt;も参照。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set.html&#34;&gt;unordered_set&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator.html&#34;&gt;iterator&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;algorithm&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; label, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; C&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; label &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : &#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/copy.html&#34;&gt;copy&lt;/a&gt;(c.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), c.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/cend.html&#34;&gt;cend&lt;/a&gt;(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/ostream_iterator.html&#34;&gt;ostream_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; C&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;));
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 一つの要素を挿入（(1)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset.html&#34;&gt;unordered_multiset&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, };

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重複のないケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重複のあるケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; one element&#34;&lt;/span&gt;, um);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 一つの要素を挿入（(2)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset.html&#34;&gt;unordered_multiset&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, };

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重複のないケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重複のあるケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; one element with hint&#34;&lt;/span&gt;, um);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 複数の要素を挿入（(3)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset.html&#34;&gt;unordered_multiset&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, };

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; fl{ &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, };
    um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(fl.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), fl.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/cend.html&#34;&gt;cend&lt;/a&gt;()); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt; の要素を全部&lt;/span&gt;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; range&#34;&lt;/span&gt;, um);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 複数の要素を挿入（(4)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset.html&#34;&gt;unordered_multiset&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, };

    um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;({ &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, });
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; initializer_list&#34;&lt;/span&gt;, um);
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;6 2
insert one element : 6 5 5 4 4 3 3 2 2 2 1 1 0 0 
6 2
insert one element with hint : 6 5 5 4 4 3 3 2 2 2 1 1 0 0 
insert range : 7 8 6 5 5 5 4 4 3 3 2 2 1 1 0 0 0 
insert initializer_list : 7 8 6 5 5 5 4 4 3 3 2 2 1 1 0 0 0 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;注：&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset.html&#34;&gt;&lt;code&gt;unordered_multiset&lt;/code&gt;&lt;/a&gt; は非順序連想コンテナであるため、出力順序は無意味であることに注意&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;(2)以降の形式は、(1)の形式を使って実装することができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; iterator unordered_multiset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key, Hash, Pred, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(const_iterator, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(v);
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; iterator unordered_multiset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key, Hash, Pred, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(const_iterator, value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rv)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/move.html&#34;&gt;move&lt;/a&gt;(rv));
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; unordered_multiset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key, Hash, Pred, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(InputIterator first, InputIterator last);
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (; first &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;first)
    &lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;first);
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; unordered_multiset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key, Hash, Pred, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il);
{
  &lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(il.begin(), il.end());
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/emplace_hint.html&#34;&gt;&lt;code&gt;emplace_hint&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;挿入位置のヒントを使用したコンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;内容の交換&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;バケット数の取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/load_factor.html&#34;&gt;&lt;code&gt;load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;現在の負荷率（バケットあたりの要素数の平均）を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;負荷率の最大値を取得、設定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/rehash.html&#34;&gt;&lt;code&gt;rehash&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小バケット数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小要素数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(4)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#518&#34; target=&#34;_blank&#34;&gt;LWG Issue 518. Are &lt;code&gt;insert&lt;/code&gt; and &lt;code&gt;erase&lt;/code&gt; stable for &lt;code&gt;unordered_multiset&lt;/code&gt; and &lt;code&gt;unordered_multimap&lt;/code&gt;?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;安定性の保証が規定された経緯のレポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>complex -- complexのメモリレイアウトが規定された経緯のレポートへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/complex.html"/>
      <id>119137e829cd05ebc920b88da92ed55617a01daf:reference/complex.md</id>
      <updated>2015-07-29 15:43:33 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;complex&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;complex&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;complex&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;complex&amp;gt;&lt;/code&gt;ヘッダでは、複素数を扱うクラスおよび関数を定義する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;complex&lt;/code&gt;クラステンプレートは、複素数を表すクラスである。このクラスは、実部(real part)と虚部(imaginary part)を、それぞれ型&lt;code&gt;T&lt;/code&gt;の値として保持し、演算に使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;complex&lt;/code&gt;クラステンプレートは以下の型で特殊化され、特化した実装が行われる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;double&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;long double&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これ以外の型がテンプレート引数として与えられた場合、その動作は未規定である。&lt;/p&gt;
&lt;h3&gt;配列へのキャスト(C++11)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;complex&lt;/code&gt;クラスの左辺値オブジェクト&lt;code&gt;c&lt;/code&gt;は、&lt;code&gt;reinterpret_cast&amp;lt;cv修飾 T(&amp;amp;)[2]&amp;gt;(c)&lt;/code&gt;もしくは&lt;code&gt;reinterpret_cast&amp;lt;cv修飾 T*&amp;gt;(&amp;amp;c)&lt;/code&gt;で浮動小数点数型の配列にキャスト可能である。その場合、配列の&lt;code&gt;0&lt;/code&gt;番目は実部を表し、&lt;code&gt;1&lt;/code&gt;番目は虚部を表す。&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/complex/op_constructor.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;~complex() = default;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/complex/real.html&#34;&gt;&lt;code&gt;real&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数値の実部を取得／設定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/complex/imag.html&#34;&gt;&lt;code&gt;imag&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数値の虚部を取得／設定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/complex/op_assign.html&#34;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数値のコピー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/complex/op_plus_assign.html&#34;&gt;&lt;code&gt;operator+=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数値の加算&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/complex/op_minus_assign.html&#34;&gt;&lt;code&gt;operator-=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数値の減算&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/complex/op_multiply_assign.html&#34;&gt;&lt;code&gt;operator*=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数値の乗算&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/complex/op_divide_assign.html&#34;&gt;&lt;code&gt;operator/=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数値の除算&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実部と虚部およびそれらの演算に使用する浮動小数点数型。テンプレートパラメータの型&lt;code&gt;T&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ関数&lt;/h2&gt;
&lt;h3&gt;複素数の値&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/real.html&#34;&gt;&lt;code&gt;real&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;実部を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/imag.html&#34;&gt;&lt;code&gt;imag&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;虚部を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/abs.html&#34;&gt;&lt;code&gt;abs&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数の絶対値を得る&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/arg.html&#34;&gt;&lt;code&gt;arg&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数の偏角を得る&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/norm.html&#34;&gt;&lt;code&gt;norm&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数体のノルムを得る&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/conj.html&#34;&gt;&lt;code&gt;conj&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;共役複素数を得る&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/proj.html&#34;&gt;&lt;code&gt;proj&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;リーマン球面への射影を得る&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/polar.html&#34;&gt;&lt;code&gt;polar&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数を極形式で指定して作る&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;演算子&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/op_unary_plus.html&#34;&gt;&lt;code&gt;operator+&lt;/code&gt; (単項)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;単項 &lt;code&gt;+&lt;/code&gt; 演算（引数をそのまま返す）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/op_unary_minus.html&#34;&gt;&lt;code&gt;operator-&lt;/code&gt; (単項)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;単項 &lt;code&gt;-&lt;/code&gt; 演算（符号を反転した複素数値を得る）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/op_plus.html&#34;&gt;&lt;code&gt;operator+&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;complex&lt;/code&gt; オブジェクトを加算する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/op_minus.html&#34;&gt;&lt;code&gt;operator-&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;complex&lt;/code&gt; オブジェクトを減算する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/op_multiply.html&#34;&gt;&lt;code&gt;operator*&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;complex&lt;/code&gt; オブジェクトを乗算する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/op_divide.html&#34;&gt;&lt;code&gt;operator/&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;complex&lt;/code&gt; オブジェクトを除算する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;complex&lt;/code&gt; オブジェクトを等値比較する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/op_not_equal.html&#34;&gt;&lt;code&gt;operator!=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;complex&lt;/code&gt; オブジェクトを非等値比較する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/op_ostream.html&#34;&gt;&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ストリームへの出力&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/op_istream.html&#34;&gt;&lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ストリームからの入力&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;リテラル&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/op_i.html&#34;&gt;&lt;code&gt;i&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;complex&amp;lt;double&amp;gt;&lt;/code&gt;のリテラル&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/op_if.html&#34;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;complex&amp;lt;float&amp;gt;&lt;/code&gt;のリテラル&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/op_il.html&#34;&gt;&lt;code&gt;il&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;complex&amp;lt;long double&amp;gt;&lt;/code&gt;のリテラル&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;数学関数の&lt;code&gt;complex&lt;/code&gt;に対するオーバーロード&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/acos.html&#34;&gt;&lt;code&gt;acos&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数の逆余弦を求める&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/asin.html&#34;&gt;&lt;code&gt;asin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数の逆正弦を求める&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/atan.html&#34;&gt;&lt;code&gt;atan&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数の逆正接を求める&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/acosh.html&#34;&gt;&lt;code&gt;acosh&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数の双曲線逆余弦を求める&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/asinh.html&#34;&gt;&lt;code&gt;asinh&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数の双曲線逆正弦を求める&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/atanh.html&#34;&gt;&lt;code&gt;atanh&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数の双曲線逆正接を求める&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/cos.html&#34;&gt;&lt;code&gt;cos&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数の余弦を求める&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/cosh.html&#34;&gt;&lt;code&gt;cosh&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数の双曲線余弦を求める&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/exp.html&#34;&gt;&lt;code&gt;exp&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;自然対数の底 e の累乗（複素数）を求める。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/log.html&#34;&gt;&lt;code&gt;log&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数の自然対数を求める&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/log10.html&#34;&gt;&lt;code&gt;log10&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数の常用対数を求める&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/pow.html&#34;&gt;&lt;code&gt;pow&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数の累乗を求める&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/sin.html&#34;&gt;&lt;code&gt;sin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数の正弦を求める&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/sinh.html&#34;&gt;&lt;code&gt;sinh&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数の双曲線正弦を求める&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/sqrt.html&#34;&gt;&lt;code&gt;sqrt&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数の平方根を求める&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/tan.html&#34;&gt;&lt;code&gt;tan&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数の正接を求める&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/tanh.html&#34;&gt;&lt;code&gt;tanh&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数の双曲線正接を求める&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;complex&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;pi&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3.141593f&lt;/span&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 実部1.0f、虚部2.0fの複素数オブジェクトを作る&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;complex&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c(&lt;span style=&#34;color: #666666&#34;&gt;1.0f&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2.0f&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ストリーム出力&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;output : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 各要素の取得&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; real &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; c.real(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 実部&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; imag &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; c.imag(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 虚部&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;real : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; real &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;imag : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; imag &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 演算&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;complex&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; a(&lt;span style=&#34;color: #666666&#34;&gt;1.0f&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2.0f&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;complex&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; b(&lt;span style=&#34;color: #666666&#34;&gt;2.0f&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3.0f&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;a + b : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;a - b : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;a * b : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;a / b : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 各複素数の値を取得する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;abs : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;abs(c) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 絶対値&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;arg : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;arg(c) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 偏角&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;norm : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;norm(c) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ノルム&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;conj : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;conj(c) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 共役複素数&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;proj : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;proj(c) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// リーマン球面への射影&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;polar : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polar(&lt;span style=&#34;color: #666666&#34;&gt;1.0f&lt;/span&gt;, pi() &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2.0f&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 極座標(絶対値：1.0、偏角：円周率÷2.0)から複素数を作る&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;output : (1,2)
real : 1
imag : 2
a + b : (3,5)
a - b : (-1,-1)
a * b : (-4,7)
a / b : (0.615385,0.0769231)
abs : 2.23607
arg : 1.10715
norm : 5
conj : (1,-2)
proj : (1,2)
polar : (-1.62921e-07,1)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ja.wikipedia.org/wiki/複素数&#34; target=&#34;_blank&#34;&gt;複素数 - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jeea.or.jp/course/contents/01109/&#34; target=&#34;_blank&#34;&gt;複素数の手ほどき - 日本電気技術者協会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://homepage2.nifty.com/eman/math/imaginary01.html&#34; target=&#34;_blank&#34;&gt;複素数とは何か - EMANの物理学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#387&#34; target=&#34;_blank&#34;&gt;LWG Issue 387. &lt;code&gt;std::complex&lt;/code&gt; over-encapsulated&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11で、&lt;code&gt;std::complex&lt;/code&gt;型のメモリレイアウトが規定された経緯のレポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>all_of (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/algorithm/all_of.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/algorithm/all_of.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;all_of (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Predicate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; all_of(InputIterator first, InputIterator last, Predicate pred);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;範囲の全ての要素が条件を満たすかを判定する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;[first,last)&lt;/code&gt; が空であったり、&lt;code&gt;[first,last)&lt;/code&gt; 内の全てのイテレータ &lt;code&gt;i&lt;/code&gt; について &lt;code&gt;pred(*i)&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; である場合は &lt;code&gt;true&lt;/code&gt; を返し、そうでない場合は &lt;code&gt;false&lt;/code&gt; を返す。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;最大で &lt;code&gt;last - first&lt;/code&gt; 回 &lt;code&gt;pred&lt;/code&gt; を実行する。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt; };

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 全ての要素が 5 より小さいか&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;all_of&lt;/span&gt;(v.begin(), v.end(), [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;; });
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 全ての要素が 1 であるか&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;all_of&lt;/span&gt;(v.begin(), v.end(), [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;; });
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;true
false
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Predicate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; all_of(InputIterator first, InputIterator last, Predicate pred) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; ( ; first &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;first)
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;(pred(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;first))) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 3.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.4.7&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/any_of.html&#34;&gt;&lt;code&gt;any_of&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/none_of.html&#34;&gt;&lt;code&gt;none_of&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2569.pdf&#34; target=&#34;_blank&#34;&gt;N2569 More STL algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2666.pdf&#34; target=&#34;_blank&#34;&gt;N2666 More STL algorithms (revision 2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>any_of (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/algorithm/any_of.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/algorithm/any_of.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;any_of (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Predicate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; any_of(InputIterator first, InputIterator last, Predicate pred);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;範囲のいずれかの要素が条件を満たすかを判定する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;[first,last)&lt;/code&gt; 内のイテレータ &lt;code&gt;i&lt;/code&gt; について &lt;code&gt;pred(*i)&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; になるような要素があれば&lt;code&gt;true&lt;/code&gt;を返し、そうでなければ&lt;code&gt;false&lt;/code&gt;を返す。
&lt;code&gt;[first,last)&lt;/code&gt;の範囲が空の場合は&lt;code&gt;false&lt;/code&gt;を返す。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;最大で &lt;code&gt;last - first&lt;/code&gt; 回 &lt;code&gt;pred&lt;/code&gt; を実行する。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt; };

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 5 以上の要素が存在するかどうか&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;any_of&lt;/span&gt;(v.begin(), v.end(), [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;; });
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 1 の要素が存在するかどうか&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;any_of&lt;/span&gt;(v.begin(), v.end(), [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;; });
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;false
true
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Predicate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; any_of(InputIterator first, InputIterator last, Predicate pred) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; ( ; first &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;first)
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (pred(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;first)) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 3.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.4.7&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/all_of.html&#34;&gt;&lt;code&gt;all_of&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/none_of.html&#34;&gt;&lt;code&gt;none_of&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2569.pdf&#34; target=&#34;_blank&#34;&gt;N2569 More STL algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2666.pdf&#34; target=&#34;_blank&#34;&gt;N2666 More STL algorithms (revision 2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copy_if (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/algorithm/copy_if.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/algorithm/copy_if.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;copy_if (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;OutputIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Predicate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  OutputIterator copy_if(InputIterator first, InputIterator last,
                         OutputIterator result, Predicate pred);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;条件を満たす要素のみをコピーする。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;[first,last)&lt;/code&gt; の範囲と、&lt;code&gt;[result,result + (last - first))&lt;/code&gt; の範囲は重なっていてはならない。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;[first,last)&lt;/code&gt; 内のイテレータ &lt;code&gt;i&lt;/code&gt; について &lt;code&gt;pred(*i)&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; である要素を &lt;code&gt;result&lt;/code&gt; へ順番にコピーする。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;コピー先の範囲の終端を返す。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;正確に &lt;code&gt;last - first&lt;/code&gt; 回述語を適用する。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;このコピーは安定なコピーである。つまり、コピーによって要素の前後が入れ替わることは無い。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;isOdd&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt; };
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt; };
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt; };
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; result(v1.size() &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; v2.size() &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; v3.size());

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// copy_if の戻り値を使って、複数のコンテナにある奇数を全て繋げる&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; out &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; result.begin();
  out &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;copy_if(v1.begin(), v1.end(), out, isOdd);
  out &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;copy_if(v2.begin(), v2.end(), out, isOdd);
  out &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;copy_if(v3.begin(), v3.end(), out, isOdd);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;copy(result.begin(), out, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;,&#34;&lt;/span&gt;));
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3,1,1,5,9,5,
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;OutputIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Predicate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
OutputIterator copy_if(InputIterator first, InputIterator last,
                       OutputIterator result, Predicate pred) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; ( ; first &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;first)
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (pred(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;first))
      &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;result&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;first;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; result;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 3.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.4.7&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2569.pdf&#34; target=&#34;_blank&#34;&gt;N2569 More STL algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2666.pdf&#34; target=&#34;_blank&#34;&gt;N2666 More STL algorithms (revision 2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2039&#34; target=&#34;_blank&#34;&gt;LWG Issue 2039. Issues with &lt;code&gt;std::reverse&lt;/code&gt; and &lt;code&gt;std::copy_if&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11まで、戻り値の仕様がなかった。C++14で追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copy_n (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/algorithm/copy_n.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/algorithm/copy_n.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;copy_n (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Size&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;OutputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  OutputIterator copy_n(InputIterator first, Size n, OutputIterator result);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;指定された数の要素をコピーする。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;0 以上 &lt;code&gt;n&lt;/code&gt; 未満であるそれぞれの &lt;code&gt;i&lt;/code&gt; について、&lt;code&gt;*(result + i) = *(first + i)&lt;/code&gt; を行う。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;result + n&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;正確に &lt;code&gt;n&lt;/code&gt; 回代入が行われる。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt; };
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;copy_n&lt;/span&gt;(v.begin(), &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;));
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
1
5
2
4
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Size&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;OutputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
OutputIterator copy_n(InputIterator first, Size n, OutputIterator result) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (Size i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;)
    &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;result&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;first&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; result;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 3.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.4.7&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2569.pdf&#34; target=&#34;_blank&#34;&gt;N2569 More STL algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2666.pdf&#34; target=&#34;_blank&#34;&gt;N2666 More STL algorithms (revision 2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_if_not (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/algorithm/find_if_not.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/algorithm/find_if_not.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;find_if_not (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Predicate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  InputIterator find_if_not(InputIterator first,
                            InputIterator last,
                            Predicate pred);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;範囲の中から、指定された条件を満たさない最初の要素を検索する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;[first,last)&lt;/code&gt; 内のイテレータ &lt;code&gt;i&lt;/code&gt; について、&lt;code&gt;pred(*i) == false&lt;/code&gt; である最初のイテレータを返す。そのようなイテレータが見つからなかった場合は &lt;code&gt;last&lt;/code&gt; を返す。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;最大で &lt;code&gt;last - first&lt;/code&gt; 回述語による比較を行う&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt; };
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3ではない最初の要素を検索する&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;find_if_not&lt;/span&gt;(v.begin(), v.end(), [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;; });
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (result &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; v.end()) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;not found&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  } &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;found: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;found: 1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Predicate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
InputIterator find_if_not(InputIterator first, InputIterator last, Predicate pred) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; ( ; first &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;first)
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;(pred(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;first))) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; first;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; last;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2569.pdf&#34; target=&#34;_blank&#34;&gt;N2569 More STL algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2666.pdf&#34; target=&#34;_blank&#34;&gt;N2666 More STL algorithms (revision 2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_partitioned (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/algorithm/is_partitioned.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/algorithm/is_partitioned.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;is_partitioned (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Predicate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; is_partitioned(InputIterator first, InputIterator last, Predicate pred);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;与えられた範囲が条件によって&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html#sequence-is-partitioned&#34;&gt;区分化&lt;/a&gt;されているか判定する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;InputIterator&lt;/code&gt;のvalue typeは &lt;code&gt;Predicate&lt;/code&gt; の引数型へ変換可能でなければならない。&lt;/p&gt;
&lt;p&gt;つまり &lt;code&gt;pred(*first)&lt;/code&gt; という式が有効でなければならない。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;[first,last)&lt;/code&gt; が空、 または &lt;code&gt;[first,last)&lt;/code&gt; が &lt;code&gt;pred&lt;/code&gt; によって&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html#sequence-is-partitioned&#34;&gt;区分化&lt;/a&gt;されているなら &lt;code&gt;true&lt;/code&gt; 、そうでなければ &lt;code&gt;false&lt;/code&gt; を返す。&lt;/p&gt;
&lt;p&gt;つまり、&lt;code&gt;pred&lt;/code&gt; を満たす全ての要素が、&lt;code&gt;pred&lt;/code&gt; を満たさない全ての要素より前に出現するなら &lt;code&gt;true&lt;/code&gt; を返す。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;線形時間。最大で &lt;code&gt;last - first&lt;/code&gt; 回 &lt;code&gt;pred&lt;/code&gt; が適用される。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;algorithm&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;};

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; pred &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; };

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 偶数グループと奇数グループに分ける&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/partition.html&#34;&gt;partition&lt;/a&gt;(v.&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/begin.html&#34;&gt;begin&lt;/a&gt;(), v.&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/end.html&#34;&gt;end&lt;/a&gt;(), pred);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/for_each.html&#34;&gt;for_each&lt;/a&gt;(v.&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/begin.html&#34;&gt;begin&lt;/a&gt;(), v.&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/end.html&#34;&gt;end&lt;/a&gt;(), [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) {
   std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  });

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 偶数グループと奇数グループに分かれているか&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;is_partitioned&lt;/span&gt;(v.&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/begin.html&#34;&gt;begin&lt;/a&gt;(), v.&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/end.html&#34;&gt;end&lt;/a&gt;(), pred)) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;partitioned&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;not partitioned&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;4
2
3
1
5
partitioned
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Predicate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; is_partitioned(InputIterator first, InputIterator last, Predicate pred)
{
  first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/find_if_not.html&#34;&gt;find_if_not&lt;/a&gt;(first, last, pred);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; (first &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; last) &lt;span style=&#34;color: #666666&#34;&gt;||&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/none_of.html&#34;&gt;none_of&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;first, last, pred);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2569.pdf&#34; target=&#34;_blank&#34;&gt;N2569 More STL algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2666.pdf&#34; target=&#34;_blank&#34;&gt;N2666 More STL algorithms (revision 2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>none_of (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/algorithm/none_of.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/algorithm/none_of.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;none_of (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Predicate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; none_of(InputIterator first, InputIterator last, Predicate pred);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;範囲の全ての要素が条件を満たさないかを判定する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;[first,last)&lt;/code&gt; が空であったり、&lt;code&gt;[first,last)&lt;/code&gt; 内の全てのイテレータ &lt;code&gt;i&lt;/code&gt; について &lt;code&gt;pred(*i)&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; である場合は &lt;code&gt;true&lt;/code&gt; を返し、そうでない場合は &lt;code&gt;false&lt;/code&gt; を返す。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;最大で &lt;code&gt;last - first&lt;/code&gt; 回 &lt;code&gt;pred&lt;/code&gt; を実行する。&lt;/p&gt;
&lt;h3&gt;備考&lt;/h3&gt;
&lt;p&gt;この関数は&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/all_of.html&#34;&gt;all_of&lt;/a&gt;(first, last, not1(pred));
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;とほぼ同じであるが、全ての要素が条件を満たしていないということを明示したい場合は &lt;code&gt;none_of()&lt;/code&gt; を使う方が意図が伝わりやすい。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt; };

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 全ての要素が 3 以上であるか&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;none_of&lt;/span&gt;(v.begin(), v.end(), [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;; });
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 全ての要素が 0 以外であるか&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;none_of&lt;/span&gt;(v.begin(), v.end(), [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; });
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;false
true
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Predicate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; none_of(InputIterator first, InputIterator last, Predicate pred) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; ( ; first &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;first)
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (pred(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;first)) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 3.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.4.7&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/all_of.html&#34;&gt;&lt;code&gt;all_of&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/any_of.html&#34;&gt;&lt;code&gt;any_of&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2569.pdf&#34; target=&#34;_blank&#34;&gt;N2569 More STL algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2666.pdf&#34; target=&#34;_blank&#34;&gt;N2666 More STL algorithms (revision 2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>partition_copy (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/algorithm/partition_copy.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/algorithm/partition_copy.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;partition_copy (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;OutputIterator1&lt;/span&gt;,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;OutputIterator2&lt;/span&gt;,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Predicate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;OutputIterator1, OutputIterator2&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    partition_copy(InputIterator first,
                   InputIterator last,
                   OutputIterator1 out_true,
                   OutputIterator2 out_false,
                   Predicate pred);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;与えられた範囲を条件によって 2 つの出力の範囲へ分けてコピーする。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;InputIterator&lt;/code&gt; の value type は &lt;code&gt;Assignable&lt;/code&gt; で、&lt;code&gt;out_true&lt;/code&gt; と &lt;code&gt;out_false&lt;/code&gt; の &lt;code&gt;OutputIterator&lt;/code&gt; へ書き込み可能で、&lt;code&gt;Predicate&lt;/code&gt; の argument type へ変換可能でなければならない。&lt;/li&gt;
&lt;li&gt;入力範囲は出力範囲のどちらとも重なっていてはならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;[first,last)&lt;/code&gt; 内にあるそれぞれのイテレータ &lt;code&gt;i&lt;/code&gt; について、&lt;code&gt;pred(*i)&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; なら &lt;code&gt;*i&lt;/code&gt; を &lt;code&gt;out_true&lt;/code&gt; へコピーし、そうでない場合は &lt;code&gt;out_false&lt;/code&gt; へコピーする。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;first&lt;/code&gt; には &lt;code&gt;out_true&lt;/code&gt; の終端が、&lt;code&gt;second&lt;/code&gt; には &lt;code&gt;out_false&lt;/code&gt; の終端が格納された&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;オブジェクトを返す。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;正確に &lt;code&gt;last - first&lt;/code&gt; 回述語が適用される。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; name, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; v)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : &#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v.begin(), v.end(), [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;,&#34;&lt;/span&gt;;
  });
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;is_even&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;};

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 偶数グループと奇数グループに分ける&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; evens;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; odds;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;partition_copy&lt;/span&gt;(v.begin(), v.end(),
                      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;back_inserter(evens),
                      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;back_inserter(odds),
                      is_even);

  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;v&#34;&lt;/span&gt;, v);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;evens&#34;&lt;/span&gt;, evens);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;odds&#34;&lt;/span&gt;, odds);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;v : 1,2,3,4,5,
evens : 2,4,
odds : 1,3,5,
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2569.pdf&#34; target=&#34;_blank&#34;&gt;N2569 More STL algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2666.pdf&#34; target=&#34;_blank&#34;&gt;N2666 More STL algorithms (revision 2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>partition_point (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/algorithm/partition_point.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/algorithm/partition_point.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;partition_point (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ForwardIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Predicate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  ForwardIterator partition_point(ForwardIterator first,
                                  ForwardIterator last,
                                  Predicate pred);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;与えられた範囲から条件によって&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html#sequence-is-partitioned&#34;&gt;区分化&lt;/a&gt;されている位置を得る。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ForwardIterator&lt;/code&gt; の value type は &lt;code&gt;Predicate&lt;/code&gt; の argument type へ変換可能でなければならない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[first,last)&lt;/code&gt; は &lt;code&gt;pred&lt;/code&gt; によって&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html#sequence-is-partitioned&#34;&gt;区分化&lt;/a&gt;されていなければならない。つまり、&lt;code&gt;pred&lt;/code&gt; を満たす全ての要素が、&lt;code&gt;pred&lt;/code&gt; を満たさない全ての要素より前に出現してなければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/all_of.html&#34;&gt;&lt;code&gt;all_of&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, mid, pred)&lt;/code&gt; と &lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/none_of.html&#34;&gt;&lt;code&gt;none_of&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(mid, last, pred)&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; であるようなイテレータ &lt;code&gt;mid&lt;/code&gt; を返す。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;O(log(&lt;code&gt;last - first&lt;/code&gt;)) のオーダーで &lt;code&gt;pred&lt;/code&gt; が適用される。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;algorithm&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; name, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; v)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : &#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/for_each.html&#34;&gt;for_each&lt;/a&gt;(v.&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/begin.html&#34;&gt;begin&lt;/a&gt;(), v.&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/end.html&#34;&gt;end&lt;/a&gt;(), [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;,&#34;&lt;/span&gt;;
  });
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;is_even&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;};

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/partition.html&#34;&gt;partition&lt;/a&gt;(v.&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/begin.html&#34;&gt;begin&lt;/a&gt;(), v.&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/end.html&#34;&gt;end&lt;/a&gt;(), is_even);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 偶数グループと奇数グループに分かれた位置を得る&lt;/span&gt;
  decltype(v)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;partition_point&lt;/span&gt;(v.&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/begin.html&#34;&gt;begin&lt;/a&gt;(), v.&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/end.html&#34;&gt;end&lt;/a&gt;(), is_even);

  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;v&#34;&lt;/span&gt;, v);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;v : 4,2,3,1,5,
3
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ForwardIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Predicate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
ForwardIterator
partition_point(ForwardIterator first, ForwardIterator last, Predicate pred)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; len &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;distance&lt;/a&gt;(first, last); len &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; ) {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; half &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; len &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; mid &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;next&lt;/a&gt;(first, half);
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (pred(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;mid)) {
            len &lt;span style=&#34;color: #666666&#34;&gt;-=&lt;/span&gt; half &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
            first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;next&lt;/a&gt;(mid);
        } &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            len &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; half;
        }
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; first;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2569.pdf&#34; target=&#34;_blank&#34;&gt;N2569 More STL algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2666.pdf&#34; target=&#34;_blank&#34;&gt;N2666 More STL algorithms (revision 2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/atomic/atomic.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/atomic/atomic.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;atomic (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; atomic;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; atomic&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;i&gt;integral&lt;/i&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; atomic&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;atomic&lt;/code&gt;クラステンプレートは、型&lt;code&gt;T&lt;/code&gt;をアトミック操作するためのクラステンプレートである。整数型およびポインタに対する特殊化が提供されており、それぞれに特化した演算が用意されている。その他の型に&lt;code&gt;atomic&lt;/code&gt;クラステンプレートを使用する場合、型&lt;code&gt;T&lt;/code&gt;はtrivially copyable (TODO)である必要がある。特殊化された整数型および&lt;code&gt;bool&lt;/code&gt;型には、それぞれ&lt;code&gt;atomic_T&lt;/code&gt;という名前の&lt;code&gt;typedef&lt;/code&gt;が提供される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前付きアトミック型&lt;/th&gt;
&lt;th&gt;テンプレート引数となる整数型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_char&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;char&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_schar&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;signed char&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_uchar&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;unsigned char&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_short&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;short&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_ushort&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;unsigned short&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_long&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_ulong&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;unsigned long&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_llong&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long long&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_ullong&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;unsigned long long&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_char16_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;char16_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_char32_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;char32_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_wchar_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;wchar_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_bool&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;また、&lt;code&gt;&amp;lt;cstdint&amp;gt;&lt;/code&gt;で定義される整数型に対する以下の&lt;code&gt;typedef&lt;/code&gt;も提供される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前付きアトミック型&lt;/th&gt;
&lt;th&gt;テンプレート引数となる整数型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_int_least8_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_least8_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_uint_least8_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uint_least8_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_int_least16_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_least16_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_uint_least16_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uint_least16_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_int_least32_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_least32_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_uint_least32_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uint_least32_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_int_least64_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_least64_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_uint_least64_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uint_least64_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_int_fast8_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_fast8_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_uint_fast8_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uint_fast8_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_int_fast16_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_fast16_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_uint_fast16_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uint_fast16_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_int_fast32_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_fast32_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_uint_fast32_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uint_fast32_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_int_fast64_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_fast64_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_uint_fast64_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uint_fast64_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_intptr_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;intptr_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_uintptr_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uintptr_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_size_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;size_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_ptrdiff_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ptrdiff_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_intmax_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;intmax_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_uintmax_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uintmax_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;void*&lt;/code&gt;に対する特殊化の&lt;code&gt;typedef&lt;/code&gt;として、&lt;code&gt;atomic_address&lt;/code&gt;型が提供される。&lt;/p&gt;
&lt;h3&gt;共通メンバ関数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic/op_constructor.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;~atomic() = default&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic/op_assign.html&#34;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic/is_lock_free.html&#34;&gt;&lt;code&gt;is_lock_free&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;オブジェクトがロックフリーに振る舞えるかを判定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic/store.html&#34;&gt;&lt;code&gt;store&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;値を書き込む&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic/load.html&#34;&gt;&lt;code&gt;load&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;値を読み込む&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic/op_t.html&#34;&gt;&lt;code&gt;operator T&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型Tへの変換演算子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic/exchange.html&#34;&gt;&lt;code&gt;exchange&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;値を入れ替える&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic/compare_exchange_weak.html&#34;&gt;&lt;code&gt;compare_exchange_weak&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;弱い比較で値を入れ替える&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic/compare_exchange_strong.html&#34;&gt;&lt;code&gt;compare_exchange_strong&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;強い比較で値を入れ替える&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;atomic&amp;lt;integral&amp;gt;専用メンバ関数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic/fetch_add.html&#34;&gt;&lt;code&gt;fetch_add&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;加算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic/fetch_sub.html&#34;&gt;&lt;code&gt;fetch_sub&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;減算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic/fetch_and.html&#34;&gt;&lt;code&gt;fetch_and&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;AND演算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic/fetch_or.html&#34;&gt;&lt;code&gt;fetch_or&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;OR演算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic/fetch_xor.html&#34;&gt;&lt;code&gt;fetch_xor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;XOR演算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic/op_increment.html&#34;&gt;&lt;code&gt;operator++&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;インクリメント&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic/op_decrement.html&#34;&gt;&lt;code&gt;operator--&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デクリメント&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic/op_plus_assign.html&#34;&gt;&lt;code&gt;operator+=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;加算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic/op_minus_assign.html&#34;&gt;&lt;code&gt;operator-=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;減算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic/op_and_assign.html&#34;&gt;&lt;code&gt;operator&amp;amp;=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;AND演算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic/op_or_assign.html&#34;&gt;operator|=&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;OR演算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic/op_xor_assign.html&#34;&gt;&lt;code&gt;operator^=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;XOR演算&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;atomic&amp;lt;T*&amp;gt;専用メンバ関数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic/fetch_add.html&#34;&gt;&lt;code&gt;fetch_add&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;加算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic/fetch_sub.html&#34;&gt;&lt;code&gt;fetch_sub&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;減算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic/op_increment.html&#34;&gt;&lt;code&gt;operator++&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;インクリメント&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic/op_decrement.html&#34;&gt;&lt;code&gt;operator--&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デクリメント&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic/op_plus_assign.html&#34;&gt;&lt;code&gt;operator+=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;加算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic/op_minus_assign.html&#34;&gt;&lt;code&gt;operator-=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;減算&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;例&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// スピンロックの実装&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Boost Atomic Library - Usage Example&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://www.boost.org/doc/libs/1_53_0/doc/html/atomic/usage_examples.html#boost_atomic.usage_examples.example_spinlock&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/1_53_0/doc/html/atomic/usage_examples.html#boost_atomic.usage_examples.example_spinlock&lt;/a&gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;atomic&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;thread&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;mutex&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;spinlock&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; LockState {Locked, Unlocked};
  &lt;span style=&#34;color:#ff0000&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;atomic&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;LockState&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; state_;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
  spinlock() &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; state_(Unlocked) {}

  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; lock()
  {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 現在の状態をLockedと入れ替える&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (state_.&lt;span style=&#34;color:#ff0000&#34;&gt;exchange&lt;/span&gt;(Locked, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;memory_order_acquire) &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; Locked) {
      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// busy-wait...アンロックされるまで待機&lt;/span&gt;
    }
  }

  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; unlock()
  {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 値をUnlockedに更新&lt;/span&gt;
    state_.&lt;span style=&#34;color:#ff0000&#34;&gt;store&lt;/span&gt;(Unlocked, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;memory_order_release);
  }
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; {
  spinlock lock;
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lock_guard&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;spinlock&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lk(lock);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; f()
{
  print(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
}

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; g()
{
  print(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; t1(f);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; t2(g);

  t1.join();
  t2.join();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;2
1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0(atomic_addressは未実装)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 11.0, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;備考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GCC 4.9.2まで、アラインメントがおかしくなってセグメンテーションフォルトになるバグがあった。GCC 5.1で修正された。(&lt;a href=&#34;https://gcc.gnu.org/bugzilla/show_bug.cgi?id=65147&#34; target=&#34;_blank&#34;&gt;Bug 65147&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参照&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2145.html&#34; target=&#34;_blank&#34;&gt;N2145 C++ Atomic Types and Operations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2547.htm&#34; target=&#34;_blank&#34;&gt;N2547 Allow atomics use in signal handlers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/faith_and_brave/20130110/1357808183&#34; target=&#34;_blank&#34;&gt;アトミックオブジェクトを含むクラスのコピーとムーブ - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator T (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/atomic/atomic/op_t.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/atomic/atomic/op_t.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class atomic&#34;&gt;atomic::&lt;/span&gt;operator T (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; T() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt; noexcept;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; T() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; noexcept;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;への暗黙の型変換&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic/load.html&#34;&gt;&lt;code&gt;load()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;atomic&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;atomic&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;x&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);

  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;x&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 11.0, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2514.html&#34; target=&#34;_blank&#34;&gt;N2514 Implicit Conversion Operators for Atomics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>deque -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/deque.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/deque.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;deque&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;deque&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;allocator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;deque&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;deque&lt;/code&gt;（通常、&#34;デック&#34;のように発音する）は&lt;b&gt;d&lt;/b&gt;ouble-&lt;b&gt;e&lt;/b&gt;nded &lt;b&gt;q&lt;/b&gt;ueue （二重終端キュー）の頭文字をとったものである。double-ended queue はシーケンスコンテナの一種である。要素は厳密な線形シーケンスに従って並べられる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;deque&lt;/code&gt; はライブラリによってさまざまな方法で実装されるかもしれないが、全ての場合においてランダムアクセスイテレータを介して個々の要素へアクセス可能であり、ストレージは（必要に応じて拡大または縮小して）自動的に処理される。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;deque&lt;/code&gt; シーケンスは以下の特性を持つ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;個々の要素はその位置インデックスによってアクセスすることができる。&lt;/li&gt;
&lt;li&gt;要素のイテレーションは任意の順序で実行することができる。&lt;/li&gt;
&lt;li&gt;要素はいずれの端（シーケンスの先頭または最後）からも効率よく追加・削除される。
従ってこれは &lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;&lt;code&gt;vector&lt;/code&gt;&lt;/a&gt; と同様の機能を提供するが、シーケンスの終端だけでなく先頭への効率的な挿入・削除を共に提供する。&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;&lt;code&gt;vector&lt;/code&gt;&lt;/a&gt; とは異なる欠点として &lt;code&gt;deque&lt;/code&gt; は連続した位置のストレージに全ての要素を持つことを保証していないため、ポインタ演算を介しての安全なアクセスの可能性を排除する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;&lt;code&gt;vector&lt;/code&gt;&lt;/a&gt; と &lt;code&gt;deque&lt;/code&gt; は共に類似したインターフェイスを提供するため、類似した目的に利用することができるが、内部的にはかなり異なった方法で動作する。&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;&lt;code&gt;vector&lt;/code&gt;&lt;/a&gt; は通常の配列と非常によく似ており、容量が使い果たされるときにはブロック内の全ての要素を再配置することによって拡張する。&lt;code&gt;deque&lt;/code&gt; は全ての情報を保持しつつ要素への均一なアクセスを提供することで、要素をストレージのいくつかのチャンクに分割することができる。従って &lt;code&gt;deque&lt;/code&gt; の内部は少し複雑であるが、これは特に大規模なシーケンスにおいて大規模な再配置が回避されることを許すため、一般に容量増加の自動管理を &lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;&lt;code&gt;vector&lt;/code&gt;&lt;/a&gt; より効率的に行うことを可能にする。&lt;/p&gt;
&lt;p&gt;C++ 標準テンプレートライブラリの実装では、&lt;code&gt;deque&lt;/code&gt; は 2 つのテンプレートパラメータを持つ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt; : 要素の型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Allocator&lt;/code&gt; : ストレージの割り当てモデルを定義するために使用されるアロケータオブジェクトの型。デフォルトでは、値に依存しない単純なメモリ割り当てモデルを定義する、型 &lt;code&gt;T&lt;/code&gt; の &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;&lt;code&gt;allocator&lt;/code&gt;&lt;/a&gt; クラステンプレートが使われる。 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;メンバ関数&lt;/h3&gt;
&lt;h3&gt;構築／コピー／破棄&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/op_constructor.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/op_destructor.html&#34;&gt;&lt;code&gt;(destructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/op_assign.html&#34;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/assign.html&#34;&gt;&lt;code&gt;assign&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナに値を代入する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;アロケータオブジェクトを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;要素アクセス&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/at.html&#34;&gt;&lt;code&gt;at&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;任意位置の要素への参照を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/op_at.html&#34;&gt;&lt;code&gt;operator[]&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;任意位置の要素への参照を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/front.html&#34;&gt;&lt;code&gt;front&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭要素への参照を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/back.html&#34;&gt;&lt;code&gt;back&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾要素への参照を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;イテレータ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭要素を指すイテレータの取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾要素の次を指すイテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/cbegin.html&#34;&gt;&lt;code&gt;cbegin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭要素を指す読み取り専用イテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/cend.html&#34;&gt;&lt;code&gt;cend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾要素の次を指す読み取り専用イテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/rbegin.html&#34;&gt;&lt;code&gt;rbegin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾要素を指す逆イテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/rend.html&#34;&gt;&lt;code&gt;rend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭要素の前を指す逆イテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/crbegin.html&#34;&gt;&lt;code&gt;crbegin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾要素を指す読み取り専用逆イテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/crend.html&#34;&gt;&lt;code&gt;crend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭要素の前を指す読み取り専用逆イテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;領域&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/empty.html&#34;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナが空であるかどうかを調べる&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;格納可能な最大の要素数を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/shrink_to_fit.html&#34;&gt;&lt;code&gt;shrink_to_fit&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;利用していないメモリを解放してメモリ使用量を減らす&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;コンテナの変更&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全ての要素を削除する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;任意の位置に要素を挿入する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;任意の位置に要素を直接構築で挿入する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/push_back.html&#34;&gt;&lt;code&gt;push_back&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾に要素を追加する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/emplace_back.html&#34;&gt;&lt;code&gt;emplace_back&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾に要素を直接構築で追加する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/pop_back.html&#34;&gt;&lt;code&gt;pop_back&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾要素を削除する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/push_front.html&#34;&gt;&lt;code&gt;push_front&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭に要素を追加する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/emplace_front.html&#34;&gt;&lt;code&gt;emplace_front&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭に要素を直接構築で追加する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/pop_front.html&#34;&gt;&lt;code&gt;pop_front&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭要素を削除する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/resize.html&#34;&gt;&lt;code&gt;resize&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数を変更する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定した要素を削除する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;他の&lt;code&gt;deque&lt;/code&gt;オブジェクトとデータを入れ替える&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;メンバ型&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const T&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータ型。ランダムアクセスイテレータ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取り専用イテレータ型ランダムアクセスイテレータ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;size_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号なし整数型(通常は &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;&lt;code&gt;size_t&lt;/code&gt;&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;difference_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号付き整数型(通常は &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/ptrdiff_t.html&#34;&gt;&lt;code&gt;ptrdiff_t&lt;/code&gt;&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;allocator_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Allocator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;allocator_traits&amp;lt;Allocator&amp;gt;::pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;allocator_traits&amp;lt;Allocator&amp;gt;::const_pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;逆イテレータ型 &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_reverse_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取り専用逆イテレータ型 &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const_iterator&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;非メンバ関数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/op_not_equal.html&#34;&gt;&lt;code&gt;operator!=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非等値比較&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/op_less.html&#34;&gt;&lt;code&gt;operator&amp;lt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より小さいかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/op_less_equal.html&#34;&gt;&lt;code&gt;operator&amp;lt;=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺以下かの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/op_greater.html&#34;&gt;&lt;code&gt;operator&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より大きいかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/op_greater_equal.html&#34;&gt;&lt;code&gt;operator&amp;gt;=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺以上かの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/swap_free.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2つの&lt;code&gt;deque&lt;/code&gt;オブジェクトを入れ替える&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;deque&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; deq;

  deq.push_front(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 先頭に要素を追加&lt;/span&gt;
  deq.push_back(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 末尾に要素を追加&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// イテレータを介して全要素に対して操作を行う&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(deq.begin(), deq.end(), [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  });
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;参照&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2669.htm&#34; target=&#34;_blank&#34;&gt;N2669 Thread-Safety in the Standard Library (Rev 2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/deque/assign.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/deque/assign.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;deque&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class deque&#34;&gt;deque::&lt;/span&gt;assign&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; assign(InputIterator first, InputIterator last);

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;assign&lt;/span&gt;(size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; t);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11から&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;assign&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;コンテナに値を代入する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;template &amp;lt;class InputIterator&amp;gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;void assign(InputIterator first, InputIterator last);&lt;/code&gt;&lt;br /&gt;&lt;code&gt;*this&lt;/code&gt;の全ての要素を解放し、&lt;code&gt;[first, last)&lt;/code&gt;の範囲の要素のコピーを&lt;code&gt;*this&lt;/code&gt;にコピーする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void assign(size_type n, const T&amp;amp; t);&lt;/code&gt;&lt;br /&gt;&lt;code&gt;*this&lt;/code&gt;の全ての要素が解放され、&lt;code&gt;t&lt;/code&gt;オブジェクトの&lt;code&gt;n&lt;/code&gt;個のコピーから&lt;code&gt;*this&lt;/code&gt;を再構築する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void assign(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;&lt;code&gt;initializer_list&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T&amp;gt; init);&lt;/code&gt;&lt;br /&gt;&lt;code&gt;*this&lt;/code&gt;の全ての要素を解放し、&lt;code&gt;x&lt;/code&gt;の全ての要素を&lt;code&gt;*this&lt;/code&gt;にコピーする。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;deque&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; name, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; c)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : {&#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; c) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;;
  }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;}&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main ()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 範囲の代入&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c1;
  c1.&lt;span style=&#34;color:#ff0000&#34;&gt;assign&lt;/span&gt;(c.begin(), c.end());

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 値1を持つオブジェクト3個から再構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c2;
  c2.&lt;span style=&#34;color:#ff0000&#34;&gt;assign&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 初期化子リストの代入&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c3;
  c3.&lt;span style=&#34;color:#ff0000&#34;&gt;assign&lt;/span&gt;({&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;});

  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c1&#34;&lt;/span&gt;, c1);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c2&#34;&lt;/span&gt;, c2);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c3&#34;&lt;/span&gt;, c3);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;c1 : {1 2 3 }
c2 : {1 1 1 }
c3 : {1 2 3 }
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace_back (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/deque/emplace_back.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/deque/emplace_back.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;deque&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class deque&#34;&gt;deque::&lt;/span&gt;emplace_back (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; emplace_back(Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;直接構築で新たな要素を末尾に追加する。
この関数の引数&lt;code&gt;args...&lt;/code&gt;は、要素型Tのコンストラクタ引数である。当関数の内部で要素型&lt;code&gt;T&lt;/code&gt;のコンストラクタを呼び出し、追加する要素を構築する。&lt;/p&gt;
&lt;p&gt;この関数の呼び出し後は全てのイテレータは無効化されるが、参照は無効化されない。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;定数時間&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;操作中に例外が発生した場合、副作用は発生しない。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;deque&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; c;

  c.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace_back&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;));
  c.push_back(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;world&#34;&lt;/span&gt;)));

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; c) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3,hello
1,world
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 11.0, 12.0&lt;ul&gt;
&lt;li&gt;10.0にも&lt;code&gt;emplace_back&lt;/code&gt;は存在するが、&lt;code&gt;push_back&lt;/code&gt;相当の機能しかない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/push_back.html&#34;&gt;&lt;code&gt;push_back&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾に要素を追加する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2680.pdf&#34; target=&#34;_blank&#34;&gt;N2680 Proposed Wording for Placement Insert (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2252&#34; target=&#34;_blank&#34;&gt;LWG Issue 2252. Strong guarantee on &lt;code&gt;vector::push_back()&lt;/code&gt; still broken with C++11?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;経緯の説明は、&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/push_back.html&#34;&gt;&lt;code&gt;vector::push_back()&lt;/code&gt;&lt;/a&gt;ページを参照。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace_front (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/deque/emplace_front.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/deque/emplace_front.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;deque&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class deque&#34;&gt;deque::&lt;/span&gt;emplace_front (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; emplace_front(Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;先頭に要素を直接構築で追加する&lt;/p&gt;
&lt;p&gt;この関数の引数&lt;code&gt;args...&lt;/code&gt;は、要素型Tのコンストラクタ引数である。当関数の内部で要素型&lt;code&gt;T&lt;/code&gt;のコンストラクタを呼び出し、追加する要素を構築する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;定数時間&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;操作中に例外が発生した場合、副作用は発生しない。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;deque&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; c;

  c.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace_front&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;world&#34;&lt;/span&gt;));
  c.push_front(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;)));

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; c) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1,hello
3,world
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 11.0, 12.0&lt;ul&gt;
&lt;li&gt;10.0にも&lt;code&gt;emplace_front&lt;/code&gt;は存在するが、&lt;code&gt;push_front&lt;/code&gt;相当の機能しかない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2680.pdf&#34; target=&#34;_blank&#34;&gt;N2680 Proposed Wording for Placement Insert (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2252&#34; target=&#34;_blank&#34;&gt;LWG Issue 2252. Strong guarantee on &lt;code&gt;vector::push_back()&lt;/code&gt; still broken with C++11?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;経緯の説明は、&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/push_back.html&#34;&gt;&lt;code&gt;vector::push_back()&lt;/code&gt;&lt;/a&gt;ページを参照。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/deque/insert.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/deque/insert.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;deque&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class deque&#34;&gt;deque::&lt;/span&gt;insert&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(iterator position, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++03&lt;/span&gt;
iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(const_iterator position, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++11&lt;/span&gt;

iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(const_iterator position, T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y);                    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++11&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(iterator position,
            size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++03&lt;/span&gt;
iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(const_iterator position,
                size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++11&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; insert(iterator position,
            InputIterator first, InputIterator last);               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++11&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator insert(const_iterator position,
                InputIterator first, InputIterator last);           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++11&lt;/span&gt;

iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(const_iterator position, &lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5) C++11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;任意の位置に要素を挿入する。&lt;/p&gt;
&lt;p&gt;この関数は、&lt;code&gt;position&lt;/code&gt;で指定した場所の前に新しい要素を挿入することにより、&lt;code&gt;deque&lt;/code&gt;コンテナを拡張する。&lt;/p&gt;
&lt;p&gt;これは挿入される要素の分だけコンテナのサイズを増加させ、それ以前に取得された全てのイテレータを無効化する。しかし、先頭または終端への挿入の場合は、参照は有効なままとなる。&lt;/p&gt;
&lt;p&gt;二重終端キューは、シーケンスの終端または先頭への挿入（もしくは削除）が効率的なパフォーマンスとなるよう、設計されている。他の場所への挿入は通常、&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt;コンテナよりも効率の面で劣る。&lt;/p&gt;
&lt;p&gt;追加される要素の数、及びそれぞれの初期値は引数によって決定づけられる。&lt;/p&gt;
&lt;h2&gt;引数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;position&lt;/code&gt;新しい要素を挿入するコンテナ内の場所。&lt;code&gt;iterator&lt;/code&gt;はメンバ型であり、ランダムアクセスイテレータとして定義される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt;挿入される要素の初期化に使われる値。&lt;code&gt;T&lt;/code&gt;はひとつめのテンプレートパラメータ（コンテナに格納される要素の型）である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt;直接挿入される値。&lt;code&gt;T&lt;/code&gt;はひとつめのテンプレートパラメータ（コンテナに格納される要素の型）である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;挿入する要素の数。それぞれの要素は x の値によって初期化される。メンバ型&lt;code&gt;size_type&lt;/code&gt;は符号なし整数型である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;first, last&lt;/code&gt;要素の範囲を指定する。範囲 &lt;code&gt;[first, last)&lt;/code&gt; の中にある要素のコピーが位置&lt;code&gt;position&lt;/code&gt;に挿入される。&lt;code&gt;first&lt;/code&gt;と&lt;code&gt;last&lt;/code&gt;の間の範囲は、&lt;code&gt;first&lt;/code&gt;で指定された要素を含むが、&lt;code&gt;last&lt;/code&gt;で指定された要素を含まない点に注意。テンプレート型はどんな入力イテレータでも構わない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++03まで一番上のバージョンがのみ、新しい要素が挿入された場所を指すイテレータを返す。&lt;/li&gt;
&lt;li&gt;C++11以降新しい要素が挿入された場所を示すイテレータ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;挿入する要素の数に対して線形時間（コピー・ムーブコンストラクタの呼び出し）。加えて、&lt;code&gt;position&lt;/code&gt;と&lt;code&gt;deque&lt;/code&gt;終端との間の要素の数に対して、ライブラリの実装依存で線形時間で増加する。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;条件付きで、例外が発生した場合に副作用が発生しない保証がある。&lt;ul&gt;
&lt;li&gt;C++03: 要素型&lt;code&gt;T&lt;/code&gt;のコピーコンストラクタ、代入演算子以外で例外が発生した場合、副作用は発生しない。&lt;/li&gt;
&lt;li&gt;C++11: 要素型&lt;code&gt;T&lt;/code&gt;のコピーコンストラクタ、ムーブコンストラクタ、代入演算子、ムーブ代入演算子以外で例外が発生した場合、副作用は発生しない。（ムーブについて規定が追加された。）&lt;/li&gt;
&lt;li&gt;C++14: 単一要素を終端あるいは先頭に追加する際に例外が発生した場合、副作用は発生しない。それ以外はC++11と同様。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;deque&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 先頭に1を挿入&lt;/span&gt;
  c.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(c.begin(), &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; c) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
2
3
4
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;任意の位置に要素を直接構築で挿入する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2350.pdf&#34; target=&#34;_blank&#34;&gt;N2350 Container insert/erase and iterator constness (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(5)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2252&#34; target=&#34;_blank&#34;&gt;LWG Issue 2252. Strong guarantee on &lt;code&gt;vector::push_back()&lt;/code&gt; still broken with C++11?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;経緯の説明は、&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/push_back.html&#34;&gt;&lt;code&gt;vector::push_back()&lt;/code&gt;&lt;/a&gt;ページを参照。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/deque/op_assign.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/deque/op_assign.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;deque&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class deque&#34;&gt;deque::&lt;/span&gt;operator=&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++03&lt;/span&gt;
deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y);                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++11&lt;/span&gt;
deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : コピー代入&lt;/li&gt;
&lt;li&gt;(2) : ムーブ代入&lt;/li&gt;
&lt;li&gt;(3) : 初期化子リストの代入&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 同じテンプレートパラメータを持つ&lt;code&gt;deque&lt;/code&gt;クラスのオブジェクトをコピー代入する。&lt;code&gt;*this&lt;/code&gt;の全ての要素が解放され、&lt;code&gt;x&lt;/code&gt;の全ての要素が&lt;code&gt;*this&lt;/code&gt;にコピーされる。&lt;/li&gt;
&lt;li&gt;(2) : 同じテンプレートパラメータを持つ&lt;code&gt;deque&lt;/code&gt;クラスのオブジェクトをムーブ代入する。&lt;code&gt;*this&lt;/code&gt;の全ての要素が解放され、&lt;code&gt;x&lt;/code&gt;の全ての要素が&lt;code&gt;*this&lt;/code&gt;にムーブされる。&lt;/li&gt;
&lt;li&gt;(3) : 同じ要素型を持つ&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;&lt;code&gt;initializer_list&lt;/code&gt;&lt;/a&gt;クラスのオブジェクトをコピー代入する。&lt;code&gt;*this&lt;/code&gt;の全ての要素が解放され、&lt;code&gt;x&lt;/code&gt;の全ての要素が&lt;code&gt;*this&lt;/code&gt;にコピーされる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 全要素のデストラクタ呼び出しとコピーを行うために、線形時間&lt;/li&gt;
&lt;li&gt;(2) : 全要素のデストラクタ呼び出しをするために、線形時間&lt;/li&gt;
&lt;li&gt;(3) : 全要素のデストラクタ呼び出しとコピーを行うために、線形時間&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;deque&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; name, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; c)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : {&#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; c) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;;
  }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;}&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main ()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コピー代入&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c1;
  c1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; c;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ムーブ代入&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c2;
  c2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(c);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 初期化子リストの代入&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c3;
  c3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c1&#34;&lt;/span&gt;, c1);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c2&#34;&lt;/span&gt;, c2);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c3&#34;&lt;/span&gt;, c3);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;c1 : {1 2 3 }
c2 : {1 2 3 }
c3 : {1 2 3 }
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(3)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/deque/op_constructor.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/deque/op_constructor.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;deque&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class deque&#34;&gt;deque::&lt;/span&gt;コンストラクタ&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;deque();                                          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++14 から&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;deque&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14 から&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;deque&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator()); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1), (2) : C++11 まで。C++14 で削除&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;deque&lt;/span&gt;(size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; T(),
               &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator()); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++03 まで。C++11 で削除&lt;/span&gt;

deque(size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value,
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++11 から&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;deque&lt;/span&gt;(size_type n);                      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++11。C++14 で削除&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;deque&lt;/span&gt;(size_type n,
               &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator()); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++14 から&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
deque(InputIterator first, InputIterator last,
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;

deque(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;
deque(deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y);                                 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7) C++11 から&lt;/span&gt;
deque(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8) C++11 から&lt;/span&gt;
deque(deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (9) C++11 から&lt;/span&gt;

deque(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il,
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (10) C++11 から&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;deque&lt;/code&gt; オブジェクトの構築&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;deque&lt;/code&gt; コンテナオブジェクトを構築し、コンストラクタの種類に応じて要素を初期化する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) : デフォルトコンストラクタ。サイズがゼロで要素を持たない空の &lt;code&gt;deque&lt;/code&gt; を構築する。&lt;/li&gt;
&lt;li&gt;(2) : アロケータに &lt;code&gt;a&lt;/code&gt; を使用して、サイズがゼロで要素を持たない空の &lt;code&gt;deque&lt;/code&gt; を構築する。&lt;/li&gt;
&lt;li&gt;(1) + (2) : デフォルトコンストラクタ。アロケータに &lt;code&gt;a&lt;/code&gt; を使用して、サイズがゼロで要素を持たない空の &lt;code&gt;deque&lt;/code&gt; を構築する。&lt;/li&gt;
&lt;li&gt;(3) : 繰り返しシーケンスコンストラクタ。アロケータに &lt;code&gt;a&lt;/code&gt; を使用して、&lt;code&gt;value&lt;/code&gt; のコピーを &lt;code&gt;n&lt;/code&gt; 個要素として保持した &lt;code&gt;deque&lt;/code&gt; を構築する。&lt;/li&gt;
&lt;li&gt;(4)&lt;ul&gt;
&lt;li&gt;C++11 : 繰り返しシーケンスコンストラクタ。値初期化されたオブジェクトを &lt;code&gt;n&lt;/code&gt; 個要素として保持した &lt;code&gt;deque&lt;/code&gt; を構築する。&lt;/li&gt;
&lt;li&gt;C++14 : 繰り返しシーケンスコンストラクタ。アロケータに &lt;code&gt;a&lt;/code&gt; を使用して、値初期化されたオブジェクトを &lt;code&gt;n&lt;/code&gt; 個要素として保持した &lt;code&gt;deque&lt;/code&gt; を構築する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(5) : イテレータ範囲コンストラクタ。アロケータに &lt;code&gt;a&lt;/code&gt; を使用して、&lt;code&gt;[first, last)&lt;/code&gt; の範囲を要素としてコピーした &lt;code&gt;deque&lt;/code&gt; を構築する。&lt;/li&gt;
&lt;li&gt;(6) : コピーコンストラクタ。&lt;code&gt;x&lt;/code&gt; と同じ要素を保持した &lt;code&gt;deque&lt;/code&gt; を構築する。&lt;/li&gt;
&lt;li&gt;(7) : ムーブコンストラクタ。ムーブセマンティクスを使って &lt;code&gt;y&lt;/code&gt; の要素でコンテナを構築する。&lt;/li&gt;
&lt;li&gt;(8) : コピーコンストラクタ。アロケータに &lt;code&gt;a&lt;/code&gt; を使用して、&lt;code&gt;x&lt;/code&gt; と同じ要素を保持した &lt;code&gt;deque&lt;/code&gt; を構築する。&lt;/li&gt;
&lt;li&gt;(9) : ムーブコンストラクタ。アロケータに &lt;code&gt;a&lt;/code&gt; を使用して、ムーブセマンティクスを使って &lt;code&gt;y&lt;/code&gt; の要素でコンテナを構築する。&lt;/li&gt;
&lt;li&gt;(10) : 初期化子リストで要素を構築するコンストラクタ。&lt;code&gt;deque(il.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), il.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), a)&lt;/code&gt; と同等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 定数時間&lt;/li&gt;
&lt;li&gt;(2) : 定数時間&lt;/li&gt;
&lt;li&gt;(1) + (2) : 定数時間&lt;/li&gt;
&lt;li&gt;(3) : &lt;code&gt;n&lt;/code&gt; に対して線形時間&lt;/li&gt;
&lt;li&gt;(4) : &lt;code&gt;n&lt;/code&gt; に対して線形時間&lt;/li&gt;
&lt;li&gt;(5) : &lt;code&gt;first&lt;/code&gt; から &lt;code&gt;last&lt;/code&gt; への距離に対して線形時間&lt;/li&gt;
&lt;li&gt;(6) : &lt;code&gt;x&lt;/code&gt; の要素数に対して線形時間&lt;/li&gt;
&lt;li&gt;(7) : 定数時間&lt;/li&gt;
&lt;li&gt;(8) : &lt;code&gt;x&lt;/code&gt; の要素数に対して線形時間&lt;/li&gt;
&lt;li&gt;(9) : &lt;code&gt;a == y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、定数時間、そうでなければ &lt;code&gt;y&lt;/code&gt; の要素数に対して線形時間&lt;/li&gt;
&lt;li&gt;(10) : &lt;code&gt;il&lt;/code&gt;の要素数に対して線形時間&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;イテレータ範囲コンストラクタ &lt;code&gt;template &amp;lt;class InputIterator&amp;gt; deque(InputIterator first, InputIterator last, const Allocator&amp;amp; a = Allocator())&lt;/code&gt; は、C++03 までは &lt;code&gt;InputIterator&lt;/code&gt; が整数型の場合には &lt;code&gt;deque(static_cast&amp;lt;typename deque::size_type&amp;gt;(first), static_cast&amp;lt;typename deque::value_type&amp;gt;(last), a)&lt;/code&gt; と同等とされていたが、C++11 では &lt;code&gt;InputIterator&lt;/code&gt; が入力イテレータの要件を満たさなければオーバーロード解決に参加しないように変更された。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++11 では、&lt;code&gt;explicit deque(size_type n, const T&amp;amp; value = T(), const Allocator&amp;amp; a = Allocator())&lt;/code&gt; の引数 &lt;code&gt;value&lt;/code&gt; に関するデフォルト引数が削除され、新たなコンストラクタ &lt;code&gt;explicit deque(size_type n)&lt;/code&gt; が追加された。&lt;br /&gt;
    これは、デフォルト引数を使用すると、引数 &lt;code&gt;value&lt;/code&gt; のデフォルト初期化 1 回＋&lt;code&gt;deque&lt;/code&gt; の要素へのコピー初期化 &lt;code&gt;n&lt;/code&gt; 回のコンストラクタ呼び出しが必要となるが、デフォルト引数でなければ &lt;code&gt;deque&lt;/code&gt; の要素へのデフォルト初期化 &lt;code&gt;n&lt;/code&gt; 回のコンストラクタ呼び出しで済むためである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++14 では、&lt;code&gt;explicit deque(const Allocator&amp;amp; a = Allocator())&lt;/code&gt; がデフォルト引数を使用しない 2 つのオーバーロードに分割された。&lt;br /&gt;
    これは、デフォルトコンストラクタに &lt;code&gt;explicit&lt;/code&gt; が付いていると、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; d &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;のようなコード（C++11 から導入された、コピーリスト初期化によるデフォルトコンストラクタ呼び出し）がエラーになってしまうためである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++14 では、&lt;code&gt;explicit deque(size_type n)&lt;/code&gt; に引数が追加され、&lt;code&gt;explicit deque(size_type n, const Allocator&amp;amp; a = Allocator())&lt;/code&gt; に変更された。&lt;br /&gt;
    これは、変更されないと &lt;code&gt;n&lt;/code&gt; のみを引数にとるアロケータ使用構築（uses-allocator construction）に失敗してしまうためである。
    具体的には、C++11 では以下のようなコードがエラーになってしまう。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator.html&#34;&gt;scoped_allocator&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; di &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;di, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator/scoped_allocator_adaptor.html&#34;&gt;scoped_allocator_adaptor&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;allocator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;di&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; l;
  l.&lt;a href=&#34;http://cpprefjp.github.io/reference/list/emplace_back.html&#34;&gt;emplace_back&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;10u&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility.html&#34;&gt;utility&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; name, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; c)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : {&#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; c) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;;
  }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;}&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main ()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) : デフォルトコンストラクタ&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c1;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) : 値1の要素を3個持つコンテナを構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c2(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) : 3個の要素を持つコンテナを構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c3(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5) : イテレータの範囲による構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c40 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;}; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 構築用の一時オブジェクト(説明用)&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c4(c40.&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/begin.html&#34;&gt;begin&lt;/a&gt;(), c40.&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/end.html&#34;&gt;end&lt;/a&gt;());

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6) : コピー構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c5(c4);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7) : ムーブ構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c60 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;}; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 構築用の一時オブジェクト(説明用)&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c6(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/move.html&#34;&gt;move&lt;/a&gt;(c60));

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (10) : 初期化子リストによる構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c7 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c1&#34;&lt;/span&gt;, c1);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c2&#34;&lt;/span&gt;, c2);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c3&#34;&lt;/span&gt;, c3);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c4&#34;&lt;/span&gt;, c4);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c5&#34;&lt;/span&gt;, c5);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c6&#34;&lt;/span&gt;, c6);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c7&#34;&lt;/span&gt;, c7);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;c1 : {}
c2 : {1 1 1 }
c3 : {0 0 0 }
c4 : {1 2 3 }
c5 : {1 2 3 }
c6 : {1 2 3 }
c7 : {1 2 3 }
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(10)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2193&#34; target=&#34;_blank&#34;&gt;LWG 2193. Default constructors for standard library containers are explicit&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;explicit deque(const Allocator&amp;amp; a = Allocator())&lt;/code&gt; を 2 つのオーバーロードに分割するきっかけとなったレポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2210&#34; target=&#34;_blank&#34;&gt;LWG 2210. Missing allocator-extended constructor for allocator-aware containers&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;explicit deque(size_type n)&lt;/code&gt; にアロケータ引数を追加するきっかけとなったレポート&lt;br /&gt;
    なお、Discussion の例はアロケータの型が誤っているので注意&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>nested_exception (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/exception/nested_exception.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/exception/nested_exception.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;exception&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;nested_exception (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;nested_exception&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;nested_exception&lt;/code&gt;クラスは、例外を階層構造として処理する場合に、元の例外を一時的に保持した状態で、別の例外として送出するための使用する。入れ子になった例外を補足した場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/nested_exception/rethrow_nested.html&#34;&gt;&lt;code&gt;rethrow_nested()&lt;/code&gt;&lt;/a&gt;メンバ関数を呼び出すことで、元の例外を送出できる。&lt;/p&gt;
&lt;h3&gt;メンバ関数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/nested_exception/op_constructor.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;~virtual nested_exception() = default;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;nested_exception&amp;amp; operator=(const nested_exception&amp;amp;) = default;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/nested_exception/rethrow_nested.html&#34;&gt;&lt;code&gt;rethrow_nested&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;入れ子になった例外を送出する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/nested_exception/nested_ptr.html&#34;&gt;&lt;code&gt;nested_ptr&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;入れ子になった例外へのポインタを取得する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;例&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;exception&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;my_exception&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;nested_exception {};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  try {
    try {
      try {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// int値を送出&lt;/span&gt;
      }
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st caught: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; my_exception(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 現在の例外(int)を入れ子にしてmy_exceptionを送出&lt;/span&gt;
      }
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; (my_exception&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; e) {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd caught: my_exception(nested_exception).&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 入れ子になっている例外(int)を送出&lt;/span&gt;
      e.rethrow_nested();
    }
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd caught: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1st caught: 1
2nd caught: my_exception(nested_exception).
3rd caught: 1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参照&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2559.htm&#34; target=&#34;_blank&#34;&gt;N2559 Nesting Exception Objects (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/forward_list/assign.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/forward_list/assign.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class forward_list&#34;&gt;forward_list::&lt;/span&gt;assign (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; assign(InputIterator first, InputIterator last); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;assign&lt;/span&gt;(size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; t);                 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;assign&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init);                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;コンテナの再代入&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 範囲を代入。&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;n&lt;/code&gt;個の値&lt;code&gt;t&lt;/code&gt;を代入。&lt;/li&gt;
&lt;li&gt;(3) : 初期化子リストを代入。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) :&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/clear.html&#34;&gt;clear&lt;/a&gt;();
&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/insert_after.html&#34;&gt;insert_after&lt;/a&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/before_begin.html&#34;&gt;before_begin&lt;/a&gt;(), first, last);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(2) :&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/clear.html&#34;&gt;clear&lt;/a&gt;();
&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/insert_after.html&#34;&gt;insert_after&lt;/a&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/before_begin.html&#34;&gt;before_begin&lt;/a&gt;(), n, t);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(3) : 以下と同等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;assign(init.&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/begin.html&#34;&gt;begin&lt;/a&gt;(), init.&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/end.html&#34;&gt;end&lt;/a&gt;());
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; name, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; ls)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : &#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; ls) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;;
  }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 範囲を代入&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls1;
    ls1.&lt;span style=&#34;color:#ff0000&#34;&gt;assign&lt;/span&gt;(ls.&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/begin.html&#34;&gt;begin&lt;/a&gt;(), ls.&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/end.html&#34;&gt;end&lt;/a&gt;());

    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ls1&#34;&lt;/span&gt;, ls1);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// n個の指定された値で埋める&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls2;
    ls2.&lt;span style=&#34;color:#ff0000&#34;&gt;assign&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);

    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ls2&#34;&lt;/span&gt;, ls2);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 初期化子リストを代入&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls3;
    ls3.&lt;span style=&#34;color:#ff0000&#34;&gt;assign&lt;/span&gt;({&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;});

    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ls3&#34;&lt;/span&gt;, ls3);
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;ls1 : 1 2 3 
ls2 : 1 1 1 
ls3 : 1 2 3 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(3)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace_front (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/forward_list/emplace_front.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/forward_list/emplace_front.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class forward_list&#34;&gt;forward_list::&lt;/span&gt;emplace_front (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; emplace_front(Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;直接構築で新たな要素を先頭に追加する。&lt;br /&gt;
この関数の引数&lt;code&gt;args...&lt;/code&gt;は、要素型&lt;code&gt;T&lt;/code&gt;のコンストラクタ引数である。当関数の内部で要素型&lt;code&gt;T&lt;/code&gt;のコンストラクタを呼び出し、追加する要素を構築する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;定数時間&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;forward_list&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ls;

  ls.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace_front&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;world&#34;&lt;/span&gt;));
  ls.push_front(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;)));

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(ls.begin(), ls.end(), [](decltype(ls)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;const_reference x) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  });
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3,hello
1,world
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2680.pdf&#34; target=&#34;_blank&#34;&gt;N2680 Proposed Wording for Placement Insert (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_after (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/forward_list/insert_after.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/forward_list/insert_after.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class forward_list&#34;&gt;forward_list::&lt;/span&gt;insert_after (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert_after&lt;/span&gt;(const_iterator position, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert_after&lt;/span&gt;(const_iterator position, T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x);      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert_after&lt;/span&gt;(const_iterator position, size_type n,
                      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator insert_after(const_iterator position,
                      InputIterator first,
                      InputIterator last);                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;

iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert_after&lt;/span&gt;(const_iterator position,
                      &lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il);              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;任意の位置に新たな要素を挿入する。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt;の&lt;code&gt;insert()&lt;/code&gt;は指定された要素の前に挿入するが、&lt;code&gt;forward_list&lt;/code&gt;は指定された要素の後に挿入する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1), (2) : 新たな要素をひとつ挿入する&lt;/li&gt;
&lt;li&gt;(3) : 新たな要素&lt;code&gt;x&lt;/code&gt;のコピーを&lt;code&gt;n&lt;/code&gt;個挿入する&lt;/li&gt;
&lt;li&gt;(4) : &lt;code&gt;[first, last)&lt;/code&gt;の範囲の要素を挿入する&lt;/li&gt;
&lt;li&gt;(5) : &lt;code&gt;initializer_list&lt;/code&gt;の全て要素を挿入する&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;第1パラメータ&lt;code&gt;position&lt;/code&gt;が、&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/before_begin.html&#34;&gt;&lt;code&gt;before_begin()&lt;/code&gt;&lt;/a&gt;もしくは&lt;code&gt;[&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/begin.html&#34;&gt;&lt;code&gt;begin()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;,&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/end.html&#34;&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;]&lt;/code&gt;の範囲の間接参照可能なイテレータであること。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;first&lt;/code&gt;、&lt;code&gt;last&lt;/code&gt;は&lt;code&gt;*this&lt;/code&gt;のイテレータではないこと。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;挿入された要素を指すイテレータ&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;定数時間&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;forward_list&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; name, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; ls)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : &#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(ls.begin(), ls.end(), [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;;
  });
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ひとつの要素を挿入する&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 先頭に0を挿入&lt;/span&gt;
    ls.&lt;span style=&#34;color:#ff0000&#34;&gt;insert_after&lt;/span&gt;(ls.before_begin(), &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 2の後ろに3を挿入&lt;/span&gt;
    decltype(ls)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;next(ls.begin(), &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    ls.&lt;span style=&#34;color:#ff0000&#34;&gt;insert_after&lt;/span&gt;(it, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;insert one element&#34;&lt;/span&gt;, ls);
  }
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// n個の要素を挿入する&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;};

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 2の後ろに3を2個挿入する&lt;/span&gt;
    ls.&lt;span style=&#34;color:#ff0000&#34;&gt;insert_after&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;next(ls.begin(), &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;insert n elements&#34;&lt;/span&gt;, ls);
  }
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 指定範囲の要素を挿入する&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;};

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// vの全ての要素をlsに挿入する&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;};
    ls.&lt;span style=&#34;color:#ff0000&#34;&gt;insert_after&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;next(ls.begin(), &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;), v.begin(), v.end());

    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;insert range&#34;&lt;/span&gt;, ls);
  }
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 初期化子リストで要素を挿入する&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;};

    ls.&lt;span style=&#34;color:#ff0000&#34;&gt;insert_after&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;next(ls.begin(), &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;), {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;});

    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;insert initializer_list&#34;&lt;/span&gt;, ls);
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;insert one element : 0 1 2 3 4 
insert n elements : 1 2 3 3 5 
insert range : 1 2 3 4 5 6 
insert initializer_list : 1 2 3 4 5 6 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(5)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/forward_list/op_assign.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/forward_list/op_assign.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class forward_list&#34;&gt;forward_list::&lt;/span&gt;operator= (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x);      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;);   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : コピー代入&lt;/li&gt;
&lt;li&gt;(2) : ムーブ代入&lt;/li&gt;
&lt;li&gt;(3) : 初期化子リストの代入&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 同じテンプレートパラメータを持つ&lt;code&gt;forward_list&lt;/code&gt;クラスのオブジェクトをコピー代入する。&lt;code&gt;*this&lt;/code&gt;の全ての要素が解放され、&lt;code&gt;x&lt;/code&gt;の全ての要素が&lt;code&gt;*this&lt;/code&gt;にコピーされる。&lt;/li&gt;
&lt;li&gt;(2) : 同じテンプレートパラメータを持つ&lt;code&gt;forward_list&lt;/code&gt;クラスのオブジェクトをムーブ代入する。&lt;code&gt;*this&lt;/code&gt;の全ての要素が解放され、&lt;code&gt;x&lt;/code&gt;の全ての要素が&lt;code&gt;*this&lt;/code&gt;にムーブされる。&lt;/li&gt;
&lt;li&gt;(3) : 同じテンプレートパラメータを持つ&lt;code&gt;initializer_list&lt;/code&gt;クラスのオブジェクトをコピー代入する。&lt;code&gt;*this&lt;/code&gt;の全ての要素が解放され、&lt;code&gt;x&lt;/code&gt;の全ての要素が&lt;code&gt;*this&lt;/code&gt;にコピーされる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;code&gt;*this == x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;*this&lt;/code&gt;は元々の&lt;code&gt;x&lt;/code&gt;と等値となる&lt;/li&gt;
&lt;li&gt;(3) : &lt;code&gt;*this == x&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 全要素のデストラクタ呼び出しとコピーを行うために、線形時間&lt;/li&gt;
&lt;li&gt;(2) : 全要素のデストラクタ呼び出しをするために、線形時間&lt;/li&gt;
&lt;li&gt;(3) : 全要素のデストラクタ呼び出しとコピーを行うために、線形時間&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;forward_list&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::equal&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コピー代入&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls2;

    ls2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; ls1;

    assert(ls1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; ls2);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ムーブ代入&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls2;

    ls2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(ls1);

    assert(ls1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; ls2);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 初期化子リストからのコピー代入&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls1;
    ls1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 事後条件の検証:&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls2;
    ls2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; init;

    assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;equal(ls2.begin(), ls2.end(), init.begin()));
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(3)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/forward_list/op_constructor.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/forward_list/op_constructor.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class forward_list&#34;&gt;forward_list::&lt;/span&gt;コンストラクタ (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;forward_list();                                          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++14&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;forward_list&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;forward_list&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator()); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) + (2) C++11&lt;/span&gt;

forward_list(size_type n,
             &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value,
             &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++11&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;forward_list&lt;/span&gt;(size_type n);                      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++11&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;forward_list&lt;/span&gt;(size_type n,
                      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator()); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++14&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
forward_list(InputIterator first,
             InputIterator last,
             &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5) C++11&lt;/span&gt;

forward_list(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6) C++11&lt;/span&gt;
forward_list(forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x);                          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7) C++11&lt;/span&gt;

forward_list(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8) C++11&lt;/span&gt;
forward_list(forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (9) C++11&lt;/span&gt;

forward_list(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il,
             &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (10) C++11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;forward_list&lt;/code&gt;オブジェクトを、以下に示す通りの要素で初期化する。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : デフォルトコンストラクタ。空のコンテナを作る。&lt;/li&gt;
&lt;li&gt;(2) : アロケータを指定して空のコンテナを作る。&lt;/li&gt;
&lt;li&gt;(1) + (2) : デフォルトコンストラクタ。アロケータを指定して空のコンテナを作る。&lt;/li&gt;
&lt;li&gt;(3) : &lt;code&gt;value&lt;/code&gt; のコピーを &lt;code&gt;n&lt;/code&gt; 個要素として保持した &lt;code&gt;forward_list&lt;/code&gt; オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(4)&lt;ul&gt;
&lt;li&gt;C++11 : &lt;code&gt;n&lt;/code&gt; 個の &lt;code&gt;T()&lt;/code&gt; で初期化された要素を保持した &lt;code&gt;forward_list&lt;/code&gt; オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;C++14 : アロケータを指定して &lt;code&gt;n&lt;/code&gt; 個の &lt;code&gt;T()&lt;/code&gt; で初期化された要素を保持した &lt;code&gt;forward_list&lt;/code&gt; オブジェクトを構築する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(5) : &lt;code&gt;[first, last)&lt;/code&gt; の範囲を要素としてコピーした &lt;code&gt;forward_list&lt;/code&gt; オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(6) : コピーコンストラクタ。&lt;code&gt;x&lt;/code&gt; と同じ要素を保持した &lt;code&gt;forward_list&lt;/code&gt; オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(7) : ムーブコンストラクタ。&lt;code&gt;x&lt;/code&gt; の指す先を自分の領域として &lt;code&gt;forward_list&lt;/code&gt; オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(8) : アロケータを指定したコピーコンストラクタ  &lt;/li&gt;
&lt;li&gt;(9) : アロケータを指定したムーブコンストラクタ  &lt;/li&gt;
&lt;li&gt;(10) : 初期化子リストを受け取るコンストラクタ。&lt;code&gt;forward_list(il.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), il.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), a)&lt;/code&gt; と同等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1), (2) : 定数時間&lt;/li&gt;
&lt;li&gt;(3) : &lt;code&gt;n&lt;/code&gt; に対して線形時間&lt;/li&gt;
&lt;li&gt;(4) : &lt;code&gt;n&lt;/code&gt; に対して線形時間&lt;/li&gt;
&lt;li&gt;(5) : &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last)&lt;/code&gt;に対して線形時間&lt;/li&gt;
&lt;li&gt;(6) : &lt;code&gt;x&lt;/code&gt; の要素数に対して線形時間&lt;/li&gt;
&lt;li&gt;(7) : 定数時間&lt;/li&gt;
&lt;li&gt;(8) : &lt;code&gt;x&lt;/code&gt; の要素数に対して線形時間&lt;/li&gt;
&lt;li&gt;(9) : &lt;code&gt;x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == a&lt;/code&gt; であれば、定数時間。そうでなければ &lt;code&gt;x&lt;/code&gt; の要素数に対して線形時間&lt;/li&gt;
&lt;li&gt;(10) : &lt;code&gt;il&lt;/code&gt; の要素数に対して線形時間&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;イテレータ範囲コンストラクタ &lt;code&gt;template &amp;lt;class InputIterator&amp;gt; forward_list(InputIterator first, InputIterator last, const Allocator&amp;amp; a = Allocator())&lt;/code&gt; は、&lt;code&gt;InputIterator&lt;/code&gt; が入力イテレータの要件を満たさなければオーバーロード解決に参加しない。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++14 では、&lt;code&gt;explicit forward_list(const Allocator&amp;amp; a = Allocator())&lt;/code&gt; がデフォルト引数を使用しない 2 つのオーバーロードに分割された。&lt;br /&gt;
    これは、デフォルトコンストラクタに &lt;code&gt;explicit&lt;/code&gt; が付いていると、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; fl &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;のようなコード（C++11 から導入された、コピーリスト初期化によるデフォルトコンストラクタ呼び出し）がエラーになってしまうためである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++14 では、&lt;code&gt;explicit forward_list(size_type n)&lt;/code&gt; に引数が追加され、&lt;code&gt;explicit forward_list(size_type n, const Allocator&amp;amp; a = Allocator())&lt;/code&gt; に変更された。&lt;br /&gt;
    これは、変更されないと &lt;code&gt;n&lt;/code&gt; のみを引数にとるアロケータ使用構築（uses-allocator construction）に失敗してしまうためである。
    具体的には、C++11 では以下のようなコードがエラーになってしまう。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator.html&#34;&gt;scoped_allocator&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; fli &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;fli, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator/scoped_allocator_adaptor.html&#34;&gt;scoped_allocator_adaptor&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;allocator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;fli&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; l;
  l.&lt;a href=&#34;http://cpprefjp.github.io/reference/list/emplace_back.html&#34;&gt;emplace_back&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;10u&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility.html&#34;&gt;utility&lt;/a&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/move.html&#34;&gt;move&lt;/a&gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; name, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; ls)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : &#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; ls) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;;
  }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) デフォルト構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls1;
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ls1&#34;&lt;/span&gt;, ls1);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) n個の要素を持つリストを作成&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls2(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ls2&#34;&lt;/span&gt;, ls2);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) n個の指定された値を要素を持つリストを作成&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls3(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ls3&#34;&lt;/span&gt;, ls3);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5) 範囲から構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls4(ls3.&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/begin.html&#34;&gt;begin&lt;/a&gt;(), ls3.&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/end.html&#34;&gt;end&lt;/a&gt;());
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ls4&#34;&lt;/span&gt;, ls4);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6) コピー構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls5 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; ls4;
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ls5&#34;&lt;/span&gt;, ls5);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7) ムーブ構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls6 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/move.html&#34;&gt;move&lt;/a&gt;(ls5);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ls6&#34;&lt;/span&gt;, ls6);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (10) 初期化子リストで構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls7 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ls7&#34;&lt;/span&gt;, ls7);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;ls1 : 
ls2 : 0 0 0 
ls3 : 1 1 1 
ls4 : 1 1 1 
ls5 : 1 1 1 
ls6 : 1 1 1 
ls7 : 1 2 3 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(10)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2193&#34; target=&#34;_blank&#34;&gt;LWG 2193. Default constructors for standard library containers are explicit&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;explicit forward_list(const Allocator&amp;amp; a = Allocator())&lt;/code&gt; を 2 つのオーバーロードに分割するきっかけとなったレポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2210&#34; target=&#34;_blank&#34;&gt;LWG 2210. Missing allocator-extended constructor for allocator-aware containers&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;explicit forward_list(size_type n)&lt;/code&gt; にアロケータ引数を追加するきっかけとなったレポート&lt;br /&gt;
    なお、Discussion の例はアロケータの型が誤っているので注意&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>list -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/list.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/list.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;list&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;list&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;list&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt;ヘッダでは、双方向リンクリストの実装である &lt;code&gt;list&lt;/code&gt; コンテナを提供する。&lt;br /&gt;
任意の位置への挿入や削除を定数時間で行う事が出来るが、高速なランダムアクセスは出来ず、常にシーケンシャルアクセスを行う必要がある。&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;h3&gt;構築／コピー／破棄&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/op_constructor.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/op_destructor.html&#34;&gt;&lt;code&gt;(destructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/op_assign.html&#34;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/assign.html&#34;&gt;&lt;code&gt;assign&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナの再代入&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;イテレータ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭要素を指すイテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾の次を指すイテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/cbegin.html&#34;&gt;&lt;code&gt;cbegin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭要素を指す読み取り専用イテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/cend.html&#34;&gt;&lt;code&gt;cend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾の次を指す読み取り専用イテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/rbegin.html&#34;&gt;&lt;code&gt;rbegin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾を指す逆イテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/rend.html&#34;&gt;&lt;code&gt;rend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭の前を指す逆イテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/crbegin.html&#34;&gt;&lt;code&gt;crbegin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾を指す読み取り専用逆イテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/crend.html&#34;&gt;&lt;code&gt;crend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭の前を指す読み取り専用逆イテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;領域&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/empty.html&#34;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナが空かどうかを判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;格納可能な最大の要素数を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/resize.html&#34;&gt;&lt;code&gt;resize&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数を変更する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;要素アクセス&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/front.html&#34;&gt;&lt;code&gt;front&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭要素への参照を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/back.html&#34;&gt;&lt;code&gt;back&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾要素への参照を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;コンテナの変更&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/emplace_front.html&#34;&gt;&lt;code&gt;emplace_front&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭への直接構築による要素追加&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/pop_front.html&#34;&gt;&lt;code&gt;pop_front&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭から要素を削除&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/emplace_back.html&#34;&gt;&lt;code&gt;emplace_back&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾への直接構築による要素追加&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/push_front.html&#34;&gt;&lt;code&gt;push_front&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭に要素を追加する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/push_back.html&#34;&gt;&lt;code&gt;push_back&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾に要素を追加する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/pop_back.html&#34;&gt;&lt;code&gt;pop_back&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾から要素を削除&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の直接構築による挿入&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の挿入&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の削除&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナの交換&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全要素削除&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;リスト操作&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/splice.html&#34;&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;他のコンテナから要素を移動する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/remove.html&#34;&gt;&lt;code&gt;remove&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナから指定された値の要素を削除する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/remove_if.html&#34;&gt;&lt;code&gt;remove_if&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナの条件に合った要素を削除する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/unique.html&#34;&gt;&lt;code&gt;unique&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;重複した要素をコンテナから削除する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/merge.html&#34;&gt;&lt;code&gt;merge&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2つのコンテナを併合する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/sort.html&#34;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナを並べ替える&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/reverse.html&#34;&gt;&lt;code&gt;reverse&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナを反転する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;アロケータ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;アロケータオブジェクトの取得&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;value_type&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const value_type&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;双方向イテレータ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取り専用双方向イテレータ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;size_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号なし整数型(通常は&lt;code&gt;size_t&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;difference_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号あり整数型(通常は&lt;code&gt;ptrdiff_t&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;allocator_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Allocator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;allocator_traits&amp;lt;Allocator&amp;gt;::pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;allocator_traits&amp;lt;Allocator&amp;gt;::const_pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::reverse_iterator&amp;lt;iterator&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_reverse_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::reverse_iterator&amp;lt;const_iterator&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/op_not_equal.html&#34;&gt;&lt;code&gt;operator!=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非等値比較&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/op_less.html&#34;&gt;&lt;code&gt;operator&amp;lt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より小さいかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/op_less_equal.html&#34;&gt;&lt;code&gt;operator&amp;lt;=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺以下かの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/op_greater.html&#34;&gt;&lt;code&gt;operator&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より大きいかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/op_greater_equal.html&#34;&gt;&lt;code&gt;operator&amp;gt;=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺以上かの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/swap_free.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2つの&lt;code&gt;list&lt;/code&gt;オブジェクトを入れ替える&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;list&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;  &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// for_each&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt; ()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  ls;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 先頭から要素を追加&lt;/span&gt;
  ls.push_front(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
  ls.push_front(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 末尾から要素を追加&lt;/span&gt;
  ls.push_back(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
  ls.push_back(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 要素を先頭から順番に表示&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(ls.cbegin(), ls.cend(), [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x){
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;;
  });
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;2 1 3 4 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;参照&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2669.htm&#34; target=&#34;_blank&#34;&gt;N2669 Thread-Safety in the Standard Library (Rev 2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/list/assign.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/list/assign.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;list&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class list&#34;&gt;list::&lt;/span&gt;assign&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; assign(InputIterator first, InputIterator last); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;assign&lt;/span&gt;(size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; t);  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;assign&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;コンテナの再代入&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 範囲を代入。&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;n&lt;/code&gt; 個の値 &lt;code&gt;t&lt;/code&gt; を代入。&lt;/li&gt;
&lt;li&gt;(3) : 初期化子リストを代入。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) :&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/clear.html&#34;&gt;clear&lt;/a&gt;();
&lt;a href=&#34;http://cpprefjp.github.io/reference/list/insert.html&#34;&gt;insert&lt;/a&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/list/begin.html&#34;&gt;begin&lt;/a&gt;(), first, last);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(2) :&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/clear.html&#34;&gt;clear&lt;/a&gt;();
&lt;a href=&#34;http://cpprefjp.github.io/reference/list/insert.html&#34;&gt;insert&lt;/a&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/list/begin.html&#34;&gt;begin&lt;/a&gt;(), n, t);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(3) :&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/clear.html&#34;&gt;clear&lt;/a&gt;();
&lt;a href=&#34;http://cpprefjp.github.io/reference/list/insert.html&#34;&gt;insert&lt;/a&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/list/begin.html&#34;&gt;begin&lt;/a&gt;(), &lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/begin.html&#34;&gt;init.begin&lt;/a&gt;(), &lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/end.html&#34;&gt;init.end&lt;/a&gt;());
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;list&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; name, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; ls)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : &#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; ls) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;;
  }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 範囲を代入&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  ls  &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;  { &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt; };
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  ls1;
    ls1.&lt;span style=&#34;color:#ff0000&#34;&gt;assign&lt;/span&gt;(ls.begin(), ls.end());

    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ls1&#34;&lt;/span&gt;, ls1);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// n 個の指定された値で埋める&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  ls2;
    ls2.&lt;span style=&#34;color:#ff0000&#34;&gt;assign&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);

    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ls2&#34;&lt;/span&gt;, ls2);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 初期化子リストを代入&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  ls3;
    ls3.&lt;span style=&#34;color:#ff0000&#34;&gt;assign&lt;/span&gt;({ &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt; });

    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ls3&#34;&lt;/span&gt;, ls3);
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;ls1 : 1 2 3 
ls2 : 1 1 1 
ls3 : 1 2 3 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(3)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace_back (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/list/emplace_back.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/list/emplace_back.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;list&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class list&#34;&gt;list::&lt;/span&gt;emplace_back (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; emplace_back(Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;直接構築で新たな要素を末尾に追加する。&lt;br /&gt;
この関数の引数&lt;code&gt;args...&lt;/code&gt;は、要素型&lt;code&gt;T&lt;/code&gt;のコンストラクタ引数である。当関数の内部で要素型&lt;code&gt;T&lt;/code&gt;のコンストラクタを呼び出し、追加する要素を構築する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;定数時間&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;list&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ls;

  ls.push_back(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;)));
  ls.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace_back&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;world&#34;&lt;/span&gt;));

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; ls) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  };
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3,hello
1,world
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 3.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.6.4&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2680.pdf&#34; target=&#34;_blank&#34;&gt;N2680 Proposed Wording for Placement Insert (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace_front (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/list/emplace_front.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/list/emplace_front.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;list&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class list&#34;&gt;list::&lt;/span&gt;emplace_front (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; emplace_front(Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;直接構築で新たな要素を先頭に追加する。&lt;br /&gt;
この関数の引数&lt;code&gt;args...&lt;/code&gt;は、要素型&lt;code&gt;T&lt;/code&gt;のコンストラクタ引数である。当関数の内部で要素型&lt;code&gt;T&lt;/code&gt;のコンストラクタを呼び出し、追加する要素を構築する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;定数時間&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;list&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ls;

  ls.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace_front&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;world&#34;&lt;/span&gt;));
  ls.push_front(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;)));

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; ls) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  };
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3,hello
1,world
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 3.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.6.4&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2680.pdf&#34; target=&#34;_blank&#34;&gt;N2680 Proposed Wording for Placement Insert (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/list/insert.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/list/insert.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;list&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class list&#34;&gt;list::&lt;/span&gt;insert&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++03&lt;/span&gt;
iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(iterator position, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++03&lt;/span&gt;
iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(const_iterator position, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++11&lt;/span&gt;
iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(const_iterator position, T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x);      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++11&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;     &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(iterator position,
                size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++03&lt;/span&gt;
iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(const_iterator position,
                size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++11&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;     insert(iterator position,
                InputIterator first,
                InputIterator last);                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++03&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator insert(const_iterator position,
                InputIterator first,
                InputIterator last);                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++11&lt;/span&gt;

iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(const_iterator position,
                &lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il);              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5) C++11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;任意の位置に新たな要素を挿入する。&lt;/p&gt;
&lt;p&gt;この関数は、指定されたイテレータが指す要素の前に、新たな要素を挿入する。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1), (2) : 新たな要素をひとつ挿入する&lt;/li&gt;
&lt;li&gt;(3) : 新たな要素&lt;code&gt;x&lt;/code&gt;のコピーを&lt;code&gt;n&lt;/code&gt;個挿入する&lt;/li&gt;
&lt;li&gt;(4) : &lt;code&gt;[first, last)&lt;/code&gt;の範囲の要素を挿入する&lt;/li&gt;
&lt;li&gt;(5) : &lt;code&gt;initializer_list&lt;/code&gt;の全て要素を挿入する&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;第1パラメータ&lt;code&gt;position&lt;/code&gt;が、&lt;code&gt;[&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/begin.html&#34;&gt;&lt;code&gt;begin()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;,&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/end.html&#34;&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;]&lt;/code&gt;の範囲の間接参照可能なイテレータであること。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1), (2) : 挿入された要素を指すイテレータ&lt;/li&gt;
&lt;li&gt;(3), (4) :&lt;ul&gt;
&lt;li&gt;C++03 : なし&lt;/li&gt;
&lt;li&gt;C++11 : 挿入された要素の先頭を指すイテレータ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(5) : 挿入された要素の先頭を指すイテレータ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1), (2) : 定数時間&lt;/li&gt;
&lt;li&gt;(3), (4), (5) : 追加する要素数に比例して線形時間&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;list&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; name, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; ls)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : &#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; ls) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;;
  };
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ひとつの要素を挿入する&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 先頭に0を挿入&lt;/span&gt;
    ls.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(ls.begin(), &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 4の前に3を挿入&lt;/span&gt;
    decltype(ls)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;next(ls.begin(), &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    ls.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(it, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; one element&#34;&lt;/span&gt;, ls);
  }
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// n個の要素を挿入する&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;};

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 5の前に3を2個挿入する&lt;/span&gt;
    ls.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;next(ls.begin(), &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;), &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; n elements&#34;&lt;/span&gt;, ls);
  }
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 指定範囲の要素を挿入する&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;};

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// vの全ての要素をlsに挿入する&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;};
    ls.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;next(ls.begin(), &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;), v.begin(), v.end());

    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; range&#34;&lt;/span&gt;, ls);
  }
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 初期化子リストで要素を挿入する&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;};

    ls.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;next(ls.begin(), &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;), {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;});

    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; initializer_list&#34;&lt;/span&gt;, ls);
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;insert one element : 0 1 2 3 4 
insert n elements : 1 2 3 3 5 
insert range : 1 2 3 4 5 6 
insert initializer_list : 1 2 3 4 5 6 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2350.pdf&#34; target=&#34;_blank&#34;&gt;N2350 Container insert/erase and iterator constness (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(5)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/list/op_assign.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/list/op_assign.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;list&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class list&#34;&gt;list::&lt;/span&gt;operator=&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x);              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++11&lt;/span&gt;
list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; x); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : コピー代入。&lt;/li&gt;
&lt;li&gt;(2) : ムーブ代入。&lt;/li&gt;
&lt;li&gt;(3) : 初期化子リストを代入。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 同じテンプレートパラメータを持つ &lt;code&gt;list&lt;/code&gt; クラスのオブジェクトをコピー代入する。&lt;code&gt;*this&lt;/code&gt; の全ての要素が解放され、&lt;code&gt;x&lt;/code&gt; の全ての要素が &lt;code&gt;*this&lt;/code&gt; にコピーされる。&lt;/li&gt;
&lt;li&gt;(2) : 同じテンプレートパラメータを持つ &lt;code&gt;list&lt;/code&gt; クラスのオブジェクトをムーブ代入する。&lt;code&gt;*this&lt;/code&gt; の全ての要素が解放され、&lt;code&gt;x&lt;/code&gt; の全ての要素が &lt;code&gt;*this&lt;/code&gt; にムーブされる。&lt;/li&gt;
&lt;li&gt;(3) : 同じテンプレートパラメータを持つ &lt;code&gt;initializer_list&lt;/code&gt; クラスのオブジェクトをコピー代入する。&lt;code&gt;*this&lt;/code&gt; の全ての要素が解放され、&lt;code&gt;x&lt;/code&gt; の全ての要素が &lt;code&gt;*this&lt;/code&gt; にコピーされる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 全要素のデストラクタ呼び出しとコピーを行うために、線形時間&lt;/li&gt;
&lt;li&gt;(2) : 全要素のデストラクタ呼び出しをするために、線形時間&lt;/li&gt;
&lt;li&gt;(3) : 全要素のデストラクタ呼び出しとコピーを行うために、線形時間&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;list&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;  &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::equal&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt; ()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コピー代入&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  ls1  &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;  { &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt; };
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  ls2;

    ls2  &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;  ls1;

    assert(ls1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; ls2);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ムーブ代入&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  ls1  &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;  { &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt; };
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  ls2;

    ls2  &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(ls1);

    assert(ls1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; ls2);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 初期化子リストからのコピー代入&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  ls1;
    ls1  &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;  { &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt; };

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 事後条件の検証&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  init  &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;  { &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt; };
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  ls2;
    ls2  &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;  init;

    assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;equal(ls2.begin(), ls2.end(), init.begin()));
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(3)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/list/op_constructor.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/list/op_constructor.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;list&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class list&#34;&gt;list::&lt;/span&gt;コンストラクタ&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;list();                                          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++14 から&lt;/span&gt;
list(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14 から&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator()); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1), (2) C++11 まで。C++14 で削除&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;list&lt;/span&gt;(size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; T(),
     &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++03 まで。C++11 で削除&lt;/span&gt;
list(size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value,
     &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++11 から&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;list&lt;/span&gt;(size_type n);                      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++11。C++14 で削除&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;list&lt;/span&gt;(size_type n,
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator()); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++14 から&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
list(InputIterator first, InputIterator last,
     &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;

list(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;
list(list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x);                                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7) C++11 から&lt;/span&gt;
list(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8) C++11 から&lt;/span&gt;
list(list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (9) C++11 から&lt;/span&gt;

list(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il,
     &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (10) C++11 から&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;list オブジェクトの構築&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : デフォルトコンストラクタ。アロケータをデフォルト構築して、空のコンテナを作る。&lt;/li&gt;
&lt;li&gt;(2) : アロケータを指定して空のコンテナを作る。&lt;/li&gt;
&lt;li&gt;(3) : &lt;code&gt;value&lt;/code&gt; のコピーを &lt;code&gt;n&lt;/code&gt; 個要素として保持した &lt;code&gt;list&lt;/code&gt; を構築する。&lt;/li&gt;
&lt;li&gt;(4) : &lt;code&gt;n&lt;/code&gt; 個の &lt;code&gt;T()&lt;/code&gt; 初期化された要素を保持した &lt;code&gt;list&lt;/code&gt; を構築する。&lt;/li&gt;
&lt;li&gt;(5) : &lt;code&gt;[first, last)&lt;/code&gt; の範囲を要素としてコピーした &lt;code&gt;list&lt;/code&gt; を構築する。&lt;/li&gt;
&lt;li&gt;(6) : コピーコンストラクタ。&lt;code&gt;x&lt;/code&gt; と同じ要素を保持した &lt;code&gt;list&lt;/code&gt; を構築する。&lt;/li&gt;
&lt;li&gt;(7) : ムーブコンストラクタ。&lt;code&gt;x&lt;/code&gt; の指す先を自分の領域として &lt;code&gt;list&lt;/code&gt; を構築する。&lt;/li&gt;
&lt;li&gt;(8) : アロケータを指定したコピーコンストラクタ。&lt;/li&gt;
&lt;li&gt;(9) : アロケータを指定したムーブコンストラクタ。&lt;/li&gt;
&lt;li&gt;(10) : 初期化子リストを受け取るコンストラクタ。&lt;code&gt;list(il.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), il.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), a)&lt;/code&gt; と同等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1), (2) : 定数時間&lt;/li&gt;
&lt;li&gt;(3), (4) : &lt;code&gt;n&lt;/code&gt; に対して線形時間&lt;/li&gt;
&lt;li&gt;(5) : &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last)&lt;/code&gt; に対して線形時間&lt;/li&gt;
&lt;li&gt;(6), (8) : &lt;code&gt;x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; に対して線形時間&lt;/li&gt;
&lt;li&gt;(7) : 定数時間&lt;/li&gt;
&lt;li&gt;(9) : &lt;code&gt;a == x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; であれば定数時間。そうでなければ &lt;code&gt;x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; に対して線形時間&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(5) の形式は、C++03 までは &lt;code&gt;InputIterator&lt;/code&gt; が整数型の場合には &lt;code&gt;list(static_cast&amp;lt;typename list::size_type&amp;gt;(first), static_cast&amp;lt;typename list::value_type&amp;gt;(last), a)&lt;/code&gt; と同等とされていたが、C++11 では &lt;code&gt;InputIterator&lt;/code&gt; が入力イテレータの要件を満たさなければオーバーロード解決に参加しないように変更された。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++11 では、(3) の形式の引数 &lt;code&gt;value&lt;/code&gt; に関するデフォルト引数が削除され、新たに (4) の形式が追加された。&lt;br /&gt;
    これは、デフォルト引数を使用すると、引数 &lt;code&gt;value&lt;/code&gt; のデフォルト初期化 1 回＋&lt;code&gt;list&lt;/code&gt; の要素へのコピー初期化 &lt;code&gt;n&lt;/code&gt; 回のコンストラクタ呼び出しが必要となるが、デフォルト引数でなければ &lt;code&gt;list&lt;/code&gt; の要素へのデフォルト初期化 &lt;code&gt;n&lt;/code&gt; 回のコンストラクタ呼び出しで済むためである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++14 では、(1) の形式と (2) の形式がデフォルト引数を使用しない 2 つのオーバーロードに分割された。&lt;br /&gt;
    これは、デフォルトコンストラクタに &lt;code&gt;explicit&lt;/code&gt; が付いていると、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; l &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;のようなコード（C++11 から導入された、コピーリスト初期化によるデフォルトコンストラクタ呼び出し）がエラーになってしまうためである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++14 では、(4) の形式に引数が追加された。&lt;br /&gt;
    これは、変更されないと &lt;code&gt;n&lt;/code&gt; のみを引数にとるアロケータ使用構築（uses-allocator construction）に失敗してしまうためである。
    具体的には、C++11 では以下のようなコードがエラーになってしまう。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator.html&#34;&gt;scoped_allocator&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; li &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;li, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator/scoped_allocator_adaptor.html&#34;&gt;scoped_allocator_adaptor&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;allocator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; v;
  v.&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/emplace_back.html&#34;&gt;emplace_back&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;10u&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility.html&#34;&gt;utility&lt;/a&gt;&amp;gt;  &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/move.html&#34;&gt;move&lt;/a&gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;  print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; name, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; ls)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : &#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; ls) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;;
  }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main ()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// デフォルト構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  ls1;
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ls1&#34;&lt;/span&gt;, ls1);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// n 個の要素を持つリストを作成&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  ls2(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ls2&#34;&lt;/span&gt;, ls2);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// n 個の指定された値を要素に持つリストを作成&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  ls3(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ls3&#34;&lt;/span&gt;, ls3);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 範囲から構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  ls4(ls3.&lt;a href=&#34;http://cpprefjp.github.io/reference/list/begin.html&#34;&gt;begin&lt;/a&gt;(), ls3.&lt;a href=&#34;http://cpprefjp.github.io/reference/list/end.html&#34;&gt;end&lt;/a&gt;());
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ls4&#34;&lt;/span&gt;, ls4);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コピー構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  ls5  &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;  ls4;
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ls5&#34;&lt;/span&gt;, ls5);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ムーブ構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  ls6  &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/move.html&#34;&gt;move&lt;/a&gt;(ls5);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ls6&#34;&lt;/span&gt;, ls6);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 初期化子リストで構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  ls7  &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;  { &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt; };
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ls7&#34;&lt;/span&gt;, ls7);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;ls1 : 
ls2 : 0 0 0 
ls3 : 1 1 1 
ls4 : 1 1 1 
ls5 : 1 1 1 
ls6 : 1 1 1 
ls7 : 1 2 3 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(10)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2193&#34; target=&#34;_blank&#34;&gt;LWG 2193. Default constructors for standard library containers are explicit&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;explicit list(const Allocator&amp;amp; a = Allocator())&lt;/code&gt; を 2 つのオーバーロードに分割するきっかけとなったレポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2210&#34; target=&#34;_blank&#34;&gt;LWG 2210. Missing allocator-extended constructor for allocator-aware containers&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;explicit list(size_type n)&lt;/code&gt; にアロケータ引数を追加するきっかけとなったレポート&lt;br /&gt;
    なお、Discussion の例はアロケータの型が誤っているので注意&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>map -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/map/map.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/map/map.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;map&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, 
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, 
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Compare&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/less.html&#34;&gt;less&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;, 
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;allocator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Key, T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; 
  &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;map&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt; コンテナは 4 つのテンプレートパラメータを取る。&lt;/p&gt;
&lt;p&gt;各テンプレートパラメータは以下のような意味である。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Key&lt;/code&gt;: キーの型。キーの値の大小に従って自動的に並び替えられる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt;: 値の型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pair&amp;lt;const Key, T&amp;gt;&lt;/code&gt;: 要素の型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Compare&lt;/code&gt;: 比較クラス。このクラスは 2 つの引数（同じ型）をとり &lt;code&gt;bool&lt;/code&gt; 値を返す。&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html#strict-weak-ordering&#34;&gt;狭義の弱順序&lt;/a&gt;において &lt;code&gt;a&lt;/code&gt; が &lt;code&gt;b&lt;/code&gt; よりも前の場所に位置づけられる場合に &lt;code&gt;true&lt;/code&gt; である。これはクラスが関数呼び出しオブジェクトを実装したクラスであっても良いし関数ポインタであっても良い（例は コンストラクタ を参照）。これは、&lt;code&gt;operator&amp;lt;()&lt;/code&gt; を適用( &lt;code&gt;a &amp;lt; b&lt;/code&gt; )したときと同じ値を返す &lt;code&gt;less&amp;lt;Key&amp;gt;&lt;/code&gt; がデフォルトである。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Allocator&lt;/code&gt;: ストレージアロケーションモデルを決定づける、アロケータオブジェクトの型である。デフォルトでは、&lt;code&gt;pair&amp;lt;const Key, T&amp;gt;&lt;/code&gt; への &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;&lt;code&gt;allocator&lt;/code&gt;&lt;/a&gt; クラステンプレート（これは値に依存しないシンプルなメモリ確保モデルを定義する）が使われる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt; はユニークな要素を格納する連想コンテナの一種であり、キーとそれに対応する値を格納する。 
連想コンテナは特にそれらキーによる要素アクセスが効率的になるようよう設計されたコンテナである（要素への相対位置または絶対位置によるアクセスが効率的であるシーケンシャルコンテナとは異なる）。 
内部的には、&lt;code&gt;map&lt;/code&gt; 内の要素は、コンテナの構築時に設定された&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html#strict-weak-ordering&#34;&gt;狭義の弱順序&lt;/a&gt;基準に従って小さいものから大きいものへとソートされる。 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt; は一般的に、二分木として実装される。従って、連想コンテナである &lt;code&gt;map&lt;/code&gt; の主な特性は以下の通りである。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ユニークな要素のキー：互いに等しい二つのキーを持つ要素が &lt;code&gt;map&lt;/code&gt; に格納されることは無い。複数の等しいキーを許す同様の連想コンテナは &lt;code&gt;multimap&lt;/code&gt; を参照のこと。&lt;/li&gt;
&lt;li&gt;要素の値はキーと値のpair型である。&lt;/li&gt;
&lt;li&gt;要素は常に&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html#strict-weak-ordering&#34;&gt;狭義の弱順序&lt;/a&gt;に従う。&lt;/li&gt;
&lt;li&gt;挿入操作はイテレータや要素の参照に影響を与えない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このコンテナクラスは、双方向イテレータをサポートする。&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;h3&gt;構築・破棄&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/op_constructor.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/op_destructor.html&#34;&gt;&lt;code&gt;(destructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/op_assign.html&#34;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;アロケータオブジェクトを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;イテレータ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭を指すイテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/cbegin.html&#34;&gt;&lt;code&gt;cbegin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭を指す読み取り専用イテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾を指すイテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/cend.html&#34;&gt;&lt;code&gt;cend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾を指す読み取り専用イテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/rbegin.html&#34;&gt;&lt;code&gt;rbegin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾を指す逆イテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/rbegin.html&#34;&gt;&lt;code&gt;crbegin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾を指す読み取り専用逆イテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/rend.html&#34;&gt;&lt;code&gt;rend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭を指す逆イテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/rend.html&#34;&gt;&lt;code&gt;crend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭を指す読み取り専用逆イテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;領域&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/empty.html&#34;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナが空であるかどうかを調べる&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;格納可能な最大の要素数を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;コンテナの変更&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全ての要素を削除する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を挿入する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を直接構築する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/emplace_hint.html&#34;&gt;&lt;code&gt;emplace_hint&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ヒントを使って要素を直接構築する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を削除する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテンツを交換する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;要素アクセス&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/op_at.html&#34;&gt;&lt;code&gt;operator[]&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーを持つ要素を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/at.html&#34;&gt;&lt;code&gt;at&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーを持つ要素を取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/count.html&#34;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーにマッチする要素の数を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/find.html&#34;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーで要素を探す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/equal_range.html&#34;&gt;&lt;code&gt;equal_range&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーにマッチする要素範囲を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/lower_bound.html&#34;&gt;&lt;code&gt;lower_bound&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;与えられた値より小さくない最初の要素へのイテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/upper_bound.html&#34;&gt;&lt;code&gt;upper_bound&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;特定の値よりも大きい最初の要素へのイテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;オブザーバー&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/key_comp.html&#34;&gt;&lt;code&gt;key_comp&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キー比較用の関数オブジェクトを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/value_comp.html&#34;&gt;&lt;code&gt;value_comp&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素比較用の関数オブジェクトを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;key_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キーの型。テンプレートパラメータ &lt;code&gt;Key&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素の型。&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const Key, T&amp;gt;&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mapped_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;値の型。テンプレートパラメータ &lt;code&gt;T&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;key_compare&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キー値の大小関係を判定する二項述語の型。テンプレートパラメータ &lt;code&gt;Compare&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/value_compare.html&#34;&gt;&lt;code&gt;value_compare&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素値のキー部分で大小関係を判定する二項述語の型。入れ子クラス&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;allocator_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アロケータの型。テンプレートパラメータ &lt;code&gt;Allocator&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素&lt;code&gt;value_type&lt;/code&gt;への参照型。&lt;code&gt;value_type&amp;amp;&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素&lt;code&gt;value_type&lt;/code&gt;への&lt;code&gt;const&lt;/code&gt;参照型。&lt;code&gt;const value_type&amp;amp;&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;双方向イテレータ。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取り専用双方向イテレータ。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;size_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素数を表す符号なし整数型。&lt;code&gt;difference_type&lt;/code&gt; で表現可能な非負整数（0以上の整数）を表すことが可能。(通常は &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;&lt;code&gt;size_t&lt;/code&gt;&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;difference_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同一のコンテナを指す &lt;code&gt;iterator&lt;/code&gt; の差を表す符号付き整数型(通常は &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/ptrdiff_t.html&#34;&gt;&lt;code&gt;ptrdiff_t&lt;/code&gt;&lt;/a&gt;) &lt;br /&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;&lt;code&gt;iterator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;::difference_type&lt;/code&gt;、および、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;&lt;code&gt;iterator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const_iterator&amp;gt;::difference_type&lt;/code&gt; と同じ。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素 &lt;code&gt;value_type&lt;/code&gt;へのポインタ。&lt;br /&gt; C++03 : &lt;code&gt;typename Allocator::pointer&lt;/code&gt;。&lt;br /&gt; C++11以降 : &lt;code&gt;typename&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Allocator&amp;gt;::pointer&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素 &lt;code&gt;value_type&lt;/code&gt;への&lt;code&gt;const&lt;/code&gt;ポインタ。&lt;br /&gt; C++03 : &lt;code&gt;typename Allocator::const_pointer&lt;/code&gt;。&lt;br /&gt; C++11以降 : &lt;code&gt;typename&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Allocator&amp;gt;::const_pointer&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;逆順双方向イテレータ。&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_reverse_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取り専用逆順双方向イテレータ。&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const_iterator&amp;gt;&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺と右辺が等しいかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/op_not_equal.html&#34;&gt;&lt;code&gt;operator!=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺と右辺が等しくないかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/op_less.html&#34;&gt;&lt;code&gt;operator&amp;lt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より小さいかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/op_greater_equal.html&#34;&gt;&lt;code&gt;operator&amp;lt;=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より小さいか等しいかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/op_greater.html&#34;&gt;&lt;code&gt;operator&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より大きいかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/op_greater_equal.html&#34;&gt;&lt;code&gt;operator&amp;gt;=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より大きいか等しいかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/swap_free.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2つの&lt;code&gt;map&lt;/code&gt;オブジェクトを入れ替える&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;map&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// charをキー、intを値として扱う連想配列&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; m;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 挿入&lt;/span&gt;
  m.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;c&#39;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;30&lt;/span&gt;));
  m.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;));
  m.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;));

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 検索 : キー(char)を指定し、値(int)を得る&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.at(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;10
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2669.htm&#34; target=&#34;_blank&#34;&gt;N2669 Thread-Safety in the Standard Library (Rev 2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/map/map/emplace.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/map/map/emplace.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class map&#34;&gt;map::&lt;/span&gt;emplace (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;iterator, &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; emplace(Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;コンテナに新しい要素を挿入する。要素は直接構築される（コピーもムーブもされない）。要素のコンストラクタはこの関数に渡された引数を与えることによって呼ばれる。&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;args...&lt;/code&gt; : 要素のコンストラクタへ転送される引数パック。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;挿入されたかどうかを示す &lt;code&gt;bool&lt;/code&gt; と、挿入された要素へのイテレータからなる &lt;code&gt;pair&lt;/code&gt; を返す。挿入されなかったときは、既存要素へのイテレータを返す。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;コンテナサイズについて対数時間。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;map&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;tuple&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c;

  c.emplace( std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;piecewise_construct, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_tuple(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_tuple(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;A&#39;&lt;/span&gt;) );

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;get&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;0&amp;gt;&lt;/span&gt;( &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;c.begin() ) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;get&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;1&amp;gt;&lt;/span&gt;( &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;c.begin() ) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1 A
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 3.2 3.3&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??, 11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/emplace_hint.html&#34;&gt;&lt;code&gt;map::emplace_hint&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ヒントを使って要素を直接構築する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/insert.html&#34;&gt;&lt;code&gt;map::insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を挿入する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2680.pdf&#34; target=&#34;_blank&#34;&gt;N2680 Proposed Wording for Placement Insert (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace_hint (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/map/map/emplace_hint.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/map/map/emplace_hint.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class map&#34;&gt;map::&lt;/span&gt;emplace_hint (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator emplace_hint(const_iterator hint, Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;要素が配置されるべき場所を示唆するパラメータ &lt;code&gt;hint&lt;/code&gt; を使って、コンテナに新しい要素を挿入する。要素は直接構築される（コピーもムーブもされない）。要素のコンストラクタはこの関数に渡された引数と同じ引数で呼ばれる。&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hint&lt;/code&gt; : 新しい要素をどこへ挿入するかを示唆するために使われるイテレータ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;args...&lt;/code&gt; : 要素のコンストラクタへ転送される引数パック&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;挿入が行われたかどうかを示す &lt;code&gt;bool&lt;/code&gt; と、挿入された要素へのイテレータからなる &lt;code&gt;pair&lt;/code&gt; を返す。挿入されなかったときは、既存要素へのイテレータを返す。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;一般にコンテナのサイズについて対数時間だが、新しい要素が &lt;code&gt;hint&lt;/code&gt; の前に挿入された場合は償却定数時間。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;map&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;tuple&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c;

  c.emplace( std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;piecewise_construct, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_tuple(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_tuple(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;A&#39;&lt;/span&gt;) );
  c.emplace_hint( c.end(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;piecewise_construct, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_tuple(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_tuple(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;B&#39;&lt;/span&gt;) );
  c.emplace_hint( c.end(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;piecewise_construct, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_tuple(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_tuple(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;C&#39;&lt;/span&gt;) );
  c.emplace_hint( c.end(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;piecewise_construct, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_tuple(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_tuple(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;D&#39;&lt;/span&gt;) );

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt;( &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; pr &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; c ) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;get&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;0&amp;gt;&lt;/span&gt;( pr) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;get&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;1&amp;gt;&lt;/span&gt;( pr ) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1 A
2 B
3 C
4 D
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??, 11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/emplace.html&#34;&gt;&lt;code&gt;map::emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を直接構築する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/insert.html&#34;&gt;&lt;code&gt;map::insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を挿入する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2680.pdf&#34; target=&#34;_blank&#34;&gt;N2680 Proposed Wording for Placement Insert (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/map/map/insert.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/map/map/insert.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class map&#34;&gt;map::&lt;/span&gt;insert&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;iterator, &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; insert(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;P&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;iterator, &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; insert(P&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x);                            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++11から&lt;/span&gt;

iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(iterator position, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++11まで&lt;/span&gt;
iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(const_iterator position, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++11から&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;P&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator insert(const_iterator position, P&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x);               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++11から&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; insert(InputIterator first, InputIterator last);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init);                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6) C++11から&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;新しく一つの要素(引数 &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;を使う)または要素のシーケンス(入力イテレータまたは &lt;code&gt;initializer_list&lt;/code&gt; を使う)を挿入することにより、 &lt;code&gt;map&lt;/code&gt; コンテナを拡張する。&lt;/p&gt;
&lt;p&gt;これは、挿入された要素の数だけコンテナの &lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; を増やす。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt; コンテナは重複したキーを持つ要素を許さないため、挿入操作はそれぞれの要素が他のコンテナ内の既存要素と同じキーかどうかをチェックする。もし同じであれば要素は挿入されず、戻り値を持つ関数の場合はそれへのイテレータを返す。&lt;/p&gt;
&lt;p&gt;重複した値を許す、類似したコンテナについては &lt;code&gt;multimap&lt;/code&gt; を参照。&lt;/p&gt;
&lt;p&gt;内部的に &lt;code&gt;map&lt;/code&gt; コンテナは、コンストラクト時に指定された比較オブジェクトによって要素を下位から上位へとソートして保持する。&lt;/p&gt;
&lt;p&gt;この操作は、適切な引数 &lt;code&gt;position&lt;/code&gt; を提供することで効率を飛躍的に改善することができる。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;code&gt;value_type&lt;/code&gt; は、コンテナに対してコピー挿入可能でなければならない。&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;value_type&lt;/code&gt; は、コンテナに対してムーブ挿入可能でなければならない。&lt;/li&gt;
&lt;li&gt;(3) : &lt;code&gt;value_type&lt;/code&gt; は、コンテナに対してコピー挿入可能でなければならない。&lt;/li&gt;
&lt;li&gt;(4) : &lt;code&gt;value_type&lt;/code&gt; は、コンテナに対してムーブ挿入可能でなければならない。&lt;/li&gt;
&lt;li&gt;(5) : 範囲&lt;code&gt;[first, last)&lt;/code&gt;の各イテレータが、&lt;code&gt;*this&lt;/code&gt;の要素を指さないこと。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;code&gt;x&lt;/code&gt;を&lt;code&gt;*this&lt;/code&gt;の要素としてコピー挿入する。ただし、&lt;code&gt;x&lt;/code&gt;のキーと同等のキーを持つ要素が&lt;code&gt;*this&lt;/code&gt;に存在する場合には、挿入されない。&lt;/li&gt;
&lt;li&gt;(2) : &lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;P&amp;gt;(x))&lt;/code&gt;と同等。&lt;/li&gt;
&lt;li&gt;(3) : &lt;code&gt;x&lt;/code&gt;を&lt;code&gt;*this&lt;/code&gt;の要素としてコピー挿入する。ただし、&lt;code&gt;x&lt;/code&gt;のキーと同等のキーを持つ要素が&lt;code&gt;*this&lt;/code&gt;に存在する場合には、挿入されない。可能であれば、挿入位置のヒントを表すイテレータ&lt;code&gt;position&lt;/code&gt;のすぐ前に挿入する。&lt;/li&gt;
&lt;li&gt;(4) : &lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/emplace_hint.html&#34;&gt;&lt;code&gt;emplace_hint&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(position,&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;P&amp;gt;(x))&lt;/code&gt;と同等。&lt;/li&gt;
&lt;li&gt;(5) : 範囲&lt;code&gt;[first, last)&lt;/code&gt;の各要素を&lt;code&gt;*this&lt;/code&gt;の要素として挿入する。ただし、&lt;code&gt;*this&lt;/code&gt;にすでに存在するキーと同等なキーを持つ要素については、挿入されない。&lt;/li&gt;
&lt;li&gt;(6) : &lt;code&gt;insert(init.begin(), init.end())&lt;/code&gt;と同等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1), (2) : 戻り値としては、イテレータと&lt;code&gt;bool&lt;/code&gt;値の組を返す。&lt;ul&gt;
&lt;li&gt;挿入された場合には、&lt;code&gt;first&lt;/code&gt; に挿入された要素へのイテレータ、 &lt;code&gt;second&lt;/code&gt; に &lt;code&gt;true&lt;/code&gt; が設定される。&lt;/li&gt;
&lt;li&gt;挿入されなかった場合には、 &lt;code&gt;first&lt;/code&gt; に &lt;code&gt;x&lt;/code&gt; と同等のキーを持つ要素へのイテレータ、 &lt;code&gt;second&lt;/code&gt; に &lt;code&gt;false&lt;/code&gt; が設定される。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(3), (4) :&lt;ul&gt;
&lt;li&gt;挿入された場合には、新しく挿入された要素を指すイテレータを返す。&lt;/li&gt;
&lt;li&gt;挿入されなかった場合には、&lt;code&gt;x&lt;/code&gt;のキーと同等のキーを持つ要素へのイテレータを返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1), (2) : 対数時間&lt;/li&gt;
&lt;li&gt;(3), (4) : 一般に対数時間だが、指定された新たな要素が &lt;code&gt;position&lt;/code&gt; が指す要素の前に挿入された場合は償却定数時間。（ただし、備考も参照）&lt;/li&gt;
&lt;li&gt;(5), (6) : 般に N log(size + N)。（ただし、備考も参照）&lt;ul&gt;
&lt;li&gt;ここで、 &lt;code&gt;N&lt;/code&gt; は &lt;code&gt;first&lt;/code&gt; と &lt;code&gt;last&lt;/code&gt; の間の距離であり &lt;code&gt;size&lt;/code&gt; は挿入前のコンテナの &lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; を表す。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(3), (4) : C++03 までの仕様では、計算量が償却定数時間となる条件は、「&lt;code&gt;position&lt;/code&gt; が指す要素の&lt;strong&gt;後ろ&lt;/strong&gt;に挿入された場合」となっているが、主要な実装は以前から &lt;code&gt;position&lt;/code&gt; が指す&lt;strong&gt;前&lt;/strong&gt;に挿入する場合に償却定数時間となっていた。これは、&lt;code&gt;position&lt;/code&gt; の後ろでは、適切な位置が先頭の場合に指定する方法がないこと、&lt;code&gt;vector::insert&lt;/code&gt; の場合、&lt;code&gt;position&lt;/code&gt; の前に挿入されること、STL のオリジナルである HP 社の実装が &lt;code&gt;position&lt;/code&gt; の前に挿入する場合に償却定数時間であったことなどによる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(5) : C++03 までの仕様では、&lt;code&gt;first&lt;/code&gt; と &lt;code&gt;last&lt;/code&gt; の間が昇順にソートされていた場合、計算量が線形時間となっていたが、この仕様は実現性がないため C++11 では削除された。（例えば、コンテナの既存の要素が 2 から 100 の偶数のみの場合に、1 から 99 のソートされた奇数の範囲を挿入する場合を考えてみよ）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2), (4) : &lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_constructible.html&#34;&gt;&lt;code&gt;std::is_constructible&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;value_type, P&amp;amp;&amp;amp;&amp;gt;::value == true&lt;/code&gt;である場合のみ、これらの関数はオーバーロード解決に参加する。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;map&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt; ()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c1;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c2;

  c1.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;));
  c1.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;));
  c1.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;c&#39;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;30&lt;/span&gt;));

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c1.size() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  c2.insert(c1.begin(), c1.end());
  c2.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;d&#39;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;40&lt;/span&gt;));

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c2.size() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
4
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??, 11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/erase.html&#34;&gt;&lt;code&gt;map::erase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を削除する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/find.html&#34;&gt;&lt;code&gt;map::find&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーで要素を探す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2350.pdf&#34; target=&#34;_blank&#34;&gt;N2350 Container insert/erase and iterator constness (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(6)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2005&#34; target=&#34;_blank&#34;&gt;LWG Issue 2005. &lt;code&gt;unordered_map::insert(T&amp;amp;&amp;amp;)&lt;/code&gt; protection should apply to &lt;code&gt;map&lt;/code&gt; too&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++14から、(2)と(4)の仕様の書き方が、&lt;code&gt;unordered_map::insert()&lt;/code&gt;のものと統一された。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/map/map/op_assign.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/map/map/op_assign.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class map&#34;&gt;map::&lt;/span&gt;operator=&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;map&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; map&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++03&lt;/span&gt;
map&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(map&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y);                           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++11&lt;/span&gt;
map&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : コピー代入&lt;/li&gt;
&lt;li&gt;(2) : ムーブ代入&lt;/li&gt;
&lt;li&gt;(3) : 初期化子リストの代入&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 同じテンプレートパラメータを持つ&lt;code&gt;map&lt;/code&gt;クラスのオブジェクトをコピー代入する。&lt;code&gt;*this&lt;/code&gt;の全ての要素が解放され、&lt;code&gt;x&lt;/code&gt;の全ての要素が&lt;code&gt;*this&lt;/code&gt;にコピーされる。&lt;/li&gt;
&lt;li&gt;(2) : 同じテンプレートパラメータを持つ&lt;code&gt;map&lt;/code&gt;クラスのオブジェクトをムーブ代入する。&lt;code&gt;*this&lt;/code&gt;の全ての要素が解放され、&lt;code&gt;x&lt;/code&gt;の全ての要素が&lt;code&gt;*this&lt;/code&gt;にムーブされる。&lt;/li&gt;
&lt;li&gt;(3) : 同じテンプレートパラメータを持つ&lt;code&gt;initializer_list&lt;/code&gt;クラスのオブジェクトをコピー代入する。&lt;code&gt;*this&lt;/code&gt;の全ての要素が解放され、&lt;code&gt;x&lt;/code&gt;の全ての要素が&lt;code&gt;*this&lt;/code&gt;にコピーされる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;code&gt;*this == x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;*this&lt;/code&gt;は元々の&lt;code&gt;x&lt;/code&gt;と等値となる&lt;/li&gt;
&lt;li&gt;(3) : &lt;code&gt;*this == x&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 全要素のデストラクタ呼び出しとコピーを行うために、線形時間&lt;/li&gt;
&lt;li&gt;(2) : 全要素のデストラクタ呼び出しをするために、線形時間&lt;/li&gt;
&lt;li&gt;(3) : 全要素のデストラクタ呼び出しとコピーを行うために、線形時間&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;map&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; values[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { 
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;e&#39;&lt;/span&gt;), 
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;), 
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;d&#39;&lt;/span&gt;), 
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;),
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;),
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;c&#39;&lt;/span&gt;)
  };
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c1(values, values &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c2;

  c2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; c1;
  c1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;();

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Size of c1: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c1.size() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Size of c2: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c2.size() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Size of c1: 0
Size of c2: 5
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??, 11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を挿入する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/op_constructor.html&#34;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(3)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/map/map/op_constructor.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/map/map/op_constructor.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class map&#34;&gt;map::&lt;/span&gt;コンストラクタ&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;map();                                                 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++14 から&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;map&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Compare&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; comp,
             &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; alloc &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14 から&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;map&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Compare&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; comp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Compare(),
             &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; alloc &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) + (2) C++11 まで&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;map&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; alloc);                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++11 から&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
map(InputIterator first,
    InputIterator last,
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Compare&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; comp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Compare(),
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; alloc &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
map(InputIterator first,
    InputIterator last,
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; alloc);                           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5) C++14 から&lt;/span&gt;

map(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; map&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                                     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;

map(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; map&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; alloc);             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7) C++11 から&lt;/span&gt;

map(map&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y);                                          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8) C++11 から&lt;/span&gt;

map(map&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; alloc);                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (9) C++11 から&lt;/span&gt;

map(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init,
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Compare&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; comp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Compare(),
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; alloc &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (10) C++11 から&lt;/span&gt;

map(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init,
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; alloc);                           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (11) C++14 から&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt; オブジェクトの構築&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) デフォルトコンストラクタ。空の &lt;code&gt;map&lt;/code&gt; オブジェクトを構築する。&lt;code&gt;map(Compare())&lt;/code&gt; と同等。（C++14 から）&lt;/li&gt;
&lt;li&gt;(2) 比較オブジェクト &lt;code&gt;comp&lt;/code&gt;、およびアロケータ &lt;code&gt;alloc&lt;/code&gt; で空の &lt;code&gt;map&lt;/code&gt; オブジェクトを構築する。（C++14 から）&lt;/li&gt;
&lt;li&gt;(1) + (2) デフォルトコンストラクタ。比較オブジェクト &lt;code&gt;comp&lt;/code&gt;、およびアロケータ &lt;code&gt;alloc&lt;/code&gt; で空の &lt;code&gt;map&lt;/code&gt; オブジェクトを構築する。（C++11 まで）&lt;/li&gt;
&lt;li&gt;(3) アロケータ &lt;code&gt;alloc&lt;/code&gt; で空の &lt;code&gt;map&lt;/code&gt; オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(4) イテレータ範囲コンストラクタ。比較オブジェクト &lt;code&gt;comp&lt;/code&gt;、アロケータ &lt;code&gt;alloc&lt;/code&gt; 、および範囲 &lt;code&gt;[first, last)&lt;/code&gt; の要素で &lt;code&gt;map&lt;/code&gt; オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(5) イテレータ範囲コンストラクタ。アロケータ &lt;code&gt;alloc&lt;/code&gt; 、および範囲 &lt;code&gt;[first, last)&lt;/code&gt; の要素で &lt;code&gt;map&lt;/code&gt; オブジェクトを構築する。（C++14 から）&lt;/li&gt;
&lt;li&gt;(6) コピーコンストラクタ。&lt;code&gt;x&lt;/code&gt; の要素のコピーで &lt;code&gt;map&lt;/code&gt; オブジェクトを構築する。アロケータは &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/select_on_container_copy_construction.html&#34;&gt;&lt;code&gt;select_on_container_copy_construction&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;())&lt;/code&gt; の呼び出しによって取得する。&lt;/li&gt;
&lt;li&gt;(7) アロケータ &lt;code&gt;alloc&lt;/code&gt; を指定したコピーコンストラクタ。&lt;code&gt;x&lt;/code&gt; の要素のコピーで &lt;code&gt;map&lt;/code&gt; オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(8) ムーブコンストラクタ。&lt;code&gt;y&lt;/code&gt; の要素をムーブすることで &lt;code&gt;map&lt;/code&gt; オブジェクトを構築する。アロケータは &lt;code&gt;y&lt;/code&gt; に属しているアロケータをムーブして取得する。（C++11 から）&lt;/li&gt;
&lt;li&gt;(9) アロケータ &lt;code&gt;alloc&lt;/code&gt; を指定したムーブコンストラクタ。&lt;code&gt;y&lt;/code&gt; の要素をムーブすることで &lt;code&gt;map&lt;/code&gt; オブジェクトを構築する。（C++11 から）&lt;/li&gt;
&lt;li&gt;(10) 比較オブジェクト &lt;code&gt;comp&lt;/code&gt;、アロケータ &lt;code&gt;alloc&lt;/code&gt; 、および初期化リスト &lt;code&gt;init&lt;/code&gt; の要素で &lt;code&gt;map&lt;/code&gt; オブジェクトを構築する。&lt;code&gt;map(init.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), init.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), comp, alloc)&lt;/code&gt; と同等。（C++11 から）&lt;/li&gt;
&lt;li&gt;(11) アロケータ &lt;code&gt;alloc&lt;/code&gt; 、および初期化リスト &lt;code&gt;init&lt;/code&gt; の要素で &lt;code&gt;map&lt;/code&gt; オブジェクトを構築する。&lt;code&gt;map(init, Compare(), alloc)&lt;/code&gt; と同等。（C++14 から）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)、(2)、(3) 定数時間&lt;/li&gt;
&lt;li&gt;(4)、(5) &lt;code&gt;N =&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last)&lt;/code&gt; とすると、範囲 &lt;code&gt;[first, last)&lt;/code&gt; が比較オブジェクト &lt;code&gt;comp&lt;/code&gt; によって既にソート済みである場合は &lt;code&gt;N&lt;/code&gt; に比例、そうでなければ &lt;code&gt;N log N&lt;/code&gt; に比例&lt;/li&gt;
&lt;li&gt;(6)、(7) &lt;code&gt;x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;  に対して線形時間&lt;/li&gt;
&lt;li&gt;(8) 定数時間&lt;/li&gt;
&lt;li&gt;(9) 定数時間。但し、&lt;code&gt;alloc == y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; でなければ &lt;code&gt;y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; に対して線形時間。&lt;/li&gt;
&lt;li&gt;(10)、(11) &lt;code&gt;init.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; に対して線形時間。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;C++14 では、デフォルトコンストラクタを (1) + (2) の形式から (1) の形式に分離して残りを (2) の形式（&lt;code&gt;comp&lt;/code&gt; のデフォルト引数を削除）にした。
    これは、デフォルトコンストラクタに &lt;code&gt;explicit&lt;/code&gt; が付いていると、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;のようなコード（C++11 から導入された、コピーリスト初期化によるデフォルトコンストラクタ呼び出し）がエラーになってしまうためである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++14 では、(5) に形式が新たに追加された。
    これは、イテレータ範囲 &lt;code&gt;[first, last)&lt;/code&gt; のみを引数にとるアロケータ使用構築（uses-allocator construction）に失敗してしまうためである。
    具体的には、C++11 では以下のようなコードがエラーになってしまう。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map.html&#34;&gt;map&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator.html&#34;&gt;scoped_allocator&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator.html&#34;&gt;iterator&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility.html&#34;&gt;utility&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory.html&#34;&gt;memory&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; mii &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map.html&#34;&gt;map&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;mii, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator/scoped_allocator_adaptor.html&#34;&gt;scoped_allocator_adaptor&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;allocator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;mii&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; l;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; a[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { { &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt; }, { &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt; }, { &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt; } };
  l.&lt;a href=&#34;http://cpprefjp.github.io/reference/list/emplace_back.html&#34;&gt;emplace_back&lt;/a&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(a), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(a));
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;なお、C++14 では同様の理由で (11) の形式も新たに追加されているが、こちらは存在しなくてもエラーとはならない。&lt;br /&gt;
（&lt;code&gt;map(init, alloc)&lt;/code&gt; の形式の構築では、(11) の形式が無い場合でも (10) の形式を用いて &lt;code&gt;init&lt;/code&gt; から一時 &lt;code&gt;map&lt;/code&gt; が構築され、&lt;code&gt;alloc&lt;/code&gt; と共に (9) の形式に引き渡される）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map.html&#34;&gt;map&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility.html&#34;&gt;utility&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; values[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/make_pair.html&#34;&gt;make_pair&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/make_pair.html&#34;&gt;make_pair&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/make_pair.html&#34;&gt;make_pair&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;) };
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map.html&#34;&gt;map&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c1(values, values &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map.html&#34;&gt;map&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c2(c1);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Size of c1: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c1.&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/size.html&#34;&gt;size&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Size of c2: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c2.&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/size.html&#34;&gt;size&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Size of c1: 2
Size of c2: 2
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??, 11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/op_assign.html&#34;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を挿入する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(10)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2193&#34; target=&#34;_blank&#34;&gt;LWG 2193. Default constructors for standard library containers are explicit&lt;/a&gt;&lt;br /&gt;
    (1) + (2) を 2 つのオーバーロードに分割するきっかけとなったレポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2210&#34; target=&#34;_blank&#34;&gt;LWG 2210. Missing allocator-extended constructor for allocator-aware containers&lt;/a&gt;&lt;br /&gt;
    (5)、(11) を追加するきっかけとなったレポート&lt;br /&gt;
    なお、Discussion の例はアロケータの型が誤っているので注意&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>multimap -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/map/multimap.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/map/multimap.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;multimap&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, 
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, 
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Compare&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/less.html&#34;&gt;less&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;, 
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;allocator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Key, T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; 
  &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;multimap&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;multimap&lt;/code&gt; コンテナは 4 つのテンプレートパラメータを取る。&lt;/p&gt;
&lt;p&gt;各テンプレートパラメータは以下のような意味である。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Key&lt;/code&gt;: キーの型。キーの値の大小に従って自動的に並び替えられる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt;: 値の型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pair&amp;lt;const Key, T&amp;gt;&lt;/code&gt;: 要素の型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Compare&lt;/code&gt;: 比較クラス。このクラスは 2 つの引数（同じ型）をとり &lt;code&gt;bool&lt;/code&gt; 値を返す。&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html#strict-weak-ordering&#34;&gt;狭義の弱順序&lt;/a&gt;において &lt;code&gt;a&lt;/code&gt; が &lt;code&gt;b&lt;/code&gt; よりも前の場所に位置づけられる場合に &lt;code&gt;true&lt;/code&gt; である。これはクラスが関数呼び出しオブジェクトを実装したクラスであっても良いし関数ポインタであっても良い（例は コンストラクタ を参照）。これは、&lt;code&gt;operator&amp;lt;()&lt;/code&gt; を適用( &lt;code&gt;a &amp;lt; b&lt;/code&gt; )したときと同じ値を返す &lt;code&gt;less&amp;lt;Key&amp;gt;&lt;/code&gt; がデフォルトである。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Allocator&lt;/code&gt;: ストレージアロケーションモデルを決定づける、アロケータオブジェクトの型である。デフォルトでは、&lt;code&gt;pair&amp;lt;const Key, T&amp;gt;&lt;/code&gt; への &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;&lt;code&gt;allocator&lt;/code&gt;&lt;/a&gt; クラステンプレート（これは値に依存しないシンプルなメモリ確保モデルを定義する）が使われる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;multimap&lt;/code&gt; はユニークな要素を格納する連想コンテナの一種であり、キーとそれに対応する値を格納する。 
連想コンテナは特にそれらキーによる要素アクセスが効率的になるようよう設計されたコンテナである（要素への相対位置または絶対位置によるアクセスが効率的であるシーケンシャルコンテナとは異なる）。 
内部的には、&lt;code&gt;multimap&lt;/code&gt; 内の要素は、コンテナの構築時に設定された&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html#strict-weak-ordering&#34;&gt;狭義の弱順序&lt;/a&gt;基準に従って小さいものから大きいものへとソートされる。 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;multimap&lt;/code&gt; は一般的に、二分木として実装される。従って、連想コンテナである &lt;code&gt;multimap&lt;/code&gt; の主な特性は以下の通りである。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要素の値はキーと値のpair型である。&lt;/li&gt;
&lt;li&gt;要素は常に&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html#strict-weak-ordering&#34;&gt;狭義の弱順序&lt;/a&gt;に従う。&lt;/li&gt;
&lt;li&gt;挿入操作はイテレータや要素の参照に影響を与えない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このコンテナクラスは、双方向イテレータをサポートする。&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;h3&gt;構築・破棄&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/op_constructor.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/op_destructor.html&#34;&gt;&lt;code&gt;(destructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/op_assign.html&#34;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;アロケータオブジェクトを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;イテレータ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭を指すイテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/cbegin.html&#34;&gt;&lt;code&gt;cbegin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭を指す読み取り専用イテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾を指すイテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/cend.html&#34;&gt;&lt;code&gt;cend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾を指す読み取り専用イテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/rbegin.html&#34;&gt;&lt;code&gt;rbegin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾を指す逆イテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/rbegin.html&#34;&gt;&lt;code&gt;crbegin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾を指す読み取り専用逆イテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/rend.html&#34;&gt;&lt;code&gt;rend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭を指す逆イテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/rend.html&#34;&gt;&lt;code&gt;crend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭を指す読み取り専用逆イテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;領域&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/empty.html&#34;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナが空であるかどうかを調べる&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;格納可能な最大の要素数を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;コンテナの変更&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全ての要素を削除する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を挿入する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を直接構築する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/emplace_hint.html&#34;&gt;&lt;code&gt;emplace_hint&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ヒントを使って要素を直接構築する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を削除する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテンツを交換する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;要素アクセス&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/count.html&#34;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーにマッチする要素の数を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/find.html&#34;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーで要素を探す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/equal_range.html&#34;&gt;&lt;code&gt;equal_range&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーにマッチする要素範囲を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/lower_bound.html&#34;&gt;&lt;code&gt;lower_bound&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;与えられた値より小さくない最初の要素へのイテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/upper_bound.html&#34;&gt;&lt;code&gt;upper_bound&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;特定の値よりも大きい最初の要素へのイテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;オブザーバー&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/key_comp.html&#34;&gt;&lt;code&gt;key_comp&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キーを比較した結果を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/value_comp.html&#34;&gt;&lt;code&gt;value_comp&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;値を比較した結果を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;key_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キーの型。テンプレートパラメータ &lt;code&gt;Key&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素の型。&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const Key, T&amp;gt;&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mapped_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;値の型。テンプレートパラメータ &lt;code&gt;T&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;key_compare&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キー値の大小関係を判定する二項述語の型。テンプレートパラメータ &lt;code&gt;Compare&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;allocator_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アロケータの型。テンプレートパラメータ &lt;code&gt;Allocator&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素&lt;code&gt;value_type&lt;/code&gt;への参照型。&lt;code&gt;value_type&amp;amp;&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素&lt;code&gt;value_type&lt;/code&gt;への&lt;code&gt;const&lt;/code&gt;参照型。&lt;code&gt;const value_type&amp;amp;&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;双方向イテレータ。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取り専用双方向イテレータ。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;size_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素数を表す符号なし整数型。&lt;code&gt;difference_type&lt;/code&gt; で表現可能な非負整数（0以上の整数）を表すことが可能。(通常は &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;&lt;code&gt;size_t&lt;/code&gt;&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;difference_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同一のコンテナを指す &lt;code&gt;iterator&lt;/code&gt; の差を表す符号付き整数型(通常は &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/ptrdiff_t.html&#34;&gt;&lt;code&gt;ptrdiff_t&lt;/code&gt;&lt;/a&gt;) &lt;br /&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;&lt;code&gt;iterator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;::difference_type&lt;/code&gt;、および、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;&lt;code&gt;iterator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const_iterator&amp;gt;::difference_type&lt;/code&gt; と同じ。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素 &lt;code&gt;value_type&lt;/code&gt;へのポインタ。&lt;br /&gt; C++03 : &lt;code&gt;typename Allocator::pointer&lt;/code&gt;。&lt;br /&gt; C++11以降 : &lt;code&gt;typename&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Allocator&amp;gt;::pointer&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素 &lt;code&gt;value_type&lt;/code&gt;への&lt;code&gt;const&lt;/code&gt;ポインタ。&lt;br /&gt; C++03 : &lt;code&gt;typename Allocator::const_pointer&lt;/code&gt;。&lt;br /&gt; C++11以降 : &lt;code&gt;typename&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Allocator&amp;gt;::const_pointer&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;逆順双方向イテレータ。&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_reverse_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取り専用逆順双方向イテレータ。&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const_iterator&amp;gt;&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺と右辺が等しいかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/op_not_equal.html&#34;&gt;&lt;code&gt;operator!=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺と右辺が等しくないかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/op_less.html&#34;&gt;&lt;code&gt;operator&amp;lt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より小さいかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/op_greater_equal.html&#34;&gt;&lt;code&gt;operator&amp;lt;=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より小さいか等しいかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/op_greater.html&#34;&gt;&lt;code&gt;operator&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より大きいかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/op_greater_equal.html&#34;&gt;&lt;code&gt;operator&amp;gt;=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より大きいか等しいかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/swap_free.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2つの&lt;code&gt;map&lt;/code&gt;オブジェクトを入れ替える&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;h3&gt;C++03版&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;map&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// charをキー、intを値として扱う連想配列&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; MCI; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++03 では型名を何度も書く必要があるので typedef しておく&lt;/span&gt;
  MCI m;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 挿入&lt;/span&gt;
  m.insert(MCI&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;value_type(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;c&#39;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;30&lt;/span&gt;));
  m.insert(MCI&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;value_type(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;));
  m.insert(MCI&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;value_type(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;));
  m.insert(MCI&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;value_type(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;40&lt;/span&gt;)); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// キー&#39;a&#39;に対応する値が2つ&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 同じキーを持つ値の数を取得する&lt;/span&gt;
  MCI&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;size_type count &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.count(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// count == 2&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;count = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; count &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// キー`a`を持つ値を列挙する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MCI&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator, MCI&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.equal_range(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (MCI&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; p.first; it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; p.second; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;C++11版&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;map&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// charをキー、intを値として扱う連想配列&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; m;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 挿入&lt;/span&gt;
  m.emplace(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;c&#39;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;30&lt;/span&gt;);
  m.emplace(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);
  m.emplace(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;);
  m.emplace(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;40&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// キー&#39;a&#39;に対応する値が2つ&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 同じキーを持つ値の数を取得する&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; count &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.count(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// count == 2&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;count = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; count &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// キー`a`を持つ値を列挙する&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.equal_range(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; p.first; it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; p.second; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力(C++03版、C++11版共通)&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;count = 2
10
40
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2669.htm&#34; target=&#34;_blank&#34;&gt;N2669 Thread-Safety in the Standard Library (Rev 2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/map/multimap/emplace.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/map/multimap/emplace.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class multimap&#34;&gt;multimap::&lt;/span&gt;emplace (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// since C++11&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; iterator 
emplace(Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;コンテナに新しい要素を挿入する。要素は直接構築される（コピーもムーブもされない）。要素のコンストラクタはこの関数に渡された引数を与えることによって呼ばれる。&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;args...&lt;/code&gt; : 要素のコンストラクタへ転送される引数パック。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;挿入された要素へのイテレータを返す。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;コンテナサイズについて対数時間。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;map&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;tuple&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c;

  c.emplace( std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;piecewise_construct, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_tuple(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_tuple(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;A&#39;&lt;/span&gt;) );

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;get&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;0&amp;gt;&lt;/span&gt;( &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;c.begin() ) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;get&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;1&amp;gt;&lt;/span&gt;( &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;c.begin() ) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1 A
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 3.2 3.3&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??, 11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/emplace_hint.html&#34;&gt;&lt;code&gt;multimap::emplace_hint&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ヒントを使って要素を直接構築する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/insert.html&#34;&gt;&lt;code&gt;multimap::insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を挿入する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2680.pdf&#34; target=&#34;_blank&#34;&gt;N2680 Proposed Wording for Placement Insert (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace_hint (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/map/multimap/emplace_hint.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/map/multimap/emplace_hint.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class multimap&#34;&gt;multimap::&lt;/span&gt;emplace_hint (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// since C++11&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator emplace_hint(const_iterator hint, Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;要素が配置されるべき場所を示唆するパラメータ &lt;code&gt;hint&lt;/code&gt; を使って、コンテナに新しい要素を挿入する。要素は直接構築される（コピーもムーブもされない）。要素のコンストラクタはこの関数に渡された引数と同じ引数で呼ばれる。&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hint&lt;/code&gt; : 新しい要素をどこへ挿入するかを示唆するために使われるイテレータ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;args...&lt;/code&gt; : 要素のコンストラクタへ転送される引数パック&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;挿入された要素へのイテレータを返す。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;一般にコンテナのサイズについて対数時間だが、新しい要素が &lt;code&gt;hint&lt;/code&gt; の前に挿入された場合は償却定数時間。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;map&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;tuple&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c;

  c.emplace( std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;piecewise_construct, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_tuple(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_tuple(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;A&#39;&lt;/span&gt;) );
  c.emplace_hint( c.end(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;piecewise_construct, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_tuple(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_tuple(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;B&#39;&lt;/span&gt;) );
  c.emplace_hint( c.end(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;piecewise_construct, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_tuple(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_tuple(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;C&#39;&lt;/span&gt;) );
  c.emplace_hint( c.end(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;piecewise_construct, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_tuple(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_tuple(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;D&#39;&lt;/span&gt;) );

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt;( &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; pr &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; c ) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;get&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;0&amp;gt;&lt;/span&gt;( pr) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;get&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;1&amp;gt;&lt;/span&gt;( pr ) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1 A
2 B
3 C
4 D
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??, 11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/emplace.html&#34;&gt;&lt;code&gt;multimap::emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を直接構築する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/insert.html&#34;&gt;&lt;code&gt;multimap::insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を挿入する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2680.pdf&#34; target=&#34;_blank&#34;&gt;N2680 Proposed Wording for Placement Insert (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/map/multimap/insert.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/map/multimap/insert.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class multimap&#34;&gt;multimap::&lt;/span&gt;insert&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// since C++11&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;P&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator insert(P&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// until C++11&lt;/span&gt;
iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(iterator position, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// since C++11&lt;/span&gt;
iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(const_iterator position, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// since C++11&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;P&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator insert(const_iterator position, P&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y);

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; insert(InputIterator first, InputIterator last);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// since C++11&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;新しく一つの要素(引数 &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;を使う)または要素のシーケンス(入力イテレータまたは &lt;code&gt;initializer_list&lt;/code&gt; を使う)を挿入することにより、 &lt;code&gt;multimap&lt;/code&gt; コンテナを拡張する。 
これは、挿入された要素の数だけコンテナの &lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; を増やす。 
内部的に &lt;code&gt;multimap&lt;/code&gt; コンテナは、コンストラクト時に指定された比較オブジェクトによって要素を下位から上位へとソートして保持する。 
この操作は、適切な位置パラメータを提供することで効率を飛躍的に改善することができる。&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; : 挿入される要素の初期値に使われる値。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt; : ムーブして挿入される値。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;first, last&lt;/code&gt; : 要素の範囲を指定するイテレータ。範囲 &lt;code&gt;[first, last)&lt;/code&gt; にある要素のコピーが &lt;code&gt;multimap&lt;/code&gt; に挿入される。この範囲は、&lt;code&gt;first&lt;/code&gt; と &lt;code&gt;last&lt;/code&gt; の間の全ての要素を含み、&lt;code&gt;first&lt;/code&gt; が指す要素を含む一方で &lt;code&gt;last&lt;/code&gt; が指す要素は含まないことに注意。テンプレートタイプは任意の入力イテレータである。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;init&lt;/code&gt; : 挿入される値のリスト。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;iterator&lt;/code&gt; を返すバージョンは、新しく挿入された要素である。
&lt;code&gt;iterator&lt;/code&gt; はメンバ型であり、双方向イテレータとして定義される。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; または &lt;code&gt;y&lt;/code&gt; のみを引数にとるバージョンは対数時間。 
&lt;code&gt;x&lt;/code&gt; または &lt;code&gt;y&lt;/code&gt; と &lt;code&gt;position&lt;/code&gt; を引数にとるバージョンは一般に対数時間だが、&lt;code&gt;x&lt;/code&gt; または &lt;code&gt;y&lt;/code&gt; が &lt;code&gt;position&lt;/code&gt; が指す要素の後に挿入された場合は償却定数時間。 
入力イテレータを引数にとるバージョンは一般に N log(size + N)※ だが、&lt;code&gt;first&lt;/code&gt; と &lt;code&gt;last&lt;/code&gt; の間がコンテナで使われているものと同じ順序基準に従ってソート済みである場合は線形時間。 &lt;/p&gt;
&lt;p&gt;※ ここで &lt;code&gt;N&lt;/code&gt; は &lt;code&gt;first&lt;/code&gt; と &lt;code&gt;last&lt;/code&gt; の間の距離であり &lt;code&gt;size&lt;/code&gt; は挿入前のコンテナの &lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;map&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt; ()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c1;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c2;

  c1.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;));
  c1.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;));
  c1.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;c&#39;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;30&lt;/span&gt;));

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c1.size() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  c2.insert(c1.begin(), c1.end());
  c2.insert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;d&#39;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;40&lt;/span&gt;));

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c2.size() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
4
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??, 11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2350.pdf&#34; target=&#34;_blank&#34;&gt;N2350 Container insert/erase and iterator constness (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/erase.html&#34;&gt;&lt;code&gt;multimap::erase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を削除する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/find.html&#34;&gt;&lt;code&gt;multimap::find&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーで要素を探す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/map/multimap/op_assign.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/map/multimap/op_assign.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class multimap&#34;&gt;multimap::&lt;/span&gt;operator=&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++03&lt;/span&gt;
multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y);                      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++11&lt;/span&gt;
multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : コピー代入&lt;/li&gt;
&lt;li&gt;(2) : ムーブ代入&lt;/li&gt;
&lt;li&gt;(3) : 初期化子リストの代入&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 同じテンプレートパラメータを持つ&lt;code&gt;multimap&lt;/code&gt;クラスのオブジェクトをコピー代入する。&lt;code&gt;*this&lt;/code&gt;の全ての要素が解放され、&lt;code&gt;x&lt;/code&gt;の全ての要素が&lt;code&gt;*this&lt;/code&gt;にコピーされる。&lt;/li&gt;
&lt;li&gt;(2) : 同じテンプレートパラメータを持つ&lt;code&gt;multimap&lt;/code&gt;クラスのオブジェクトをムーブ代入する。&lt;code&gt;*this&lt;/code&gt;の全ての要素が解放され、&lt;code&gt;x&lt;/code&gt;の全ての要素が&lt;code&gt;*this&lt;/code&gt;にムーブされる。&lt;/li&gt;
&lt;li&gt;(3) : 同じテンプレートパラメータを持つ&lt;code&gt;initializer_list&lt;/code&gt;クラスのオブジェクトをコピー代入する。&lt;code&gt;*this&lt;/code&gt;の全ての要素が解放され、&lt;code&gt;x&lt;/code&gt;の全ての要素が&lt;code&gt;*this&lt;/code&gt;にコピーされる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;code&gt;*this == x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;*this&lt;/code&gt;は元々の&lt;code&gt;x&lt;/code&gt;と等値となる&lt;/li&gt;
&lt;li&gt;(3) : &lt;code&gt;*this == x&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 全要素のデストラクタ呼び出しとコピーを行うために、線形時間&lt;/li&gt;
&lt;li&gt;(2) : 全要素のデストラクタ呼び出しをするために、線形時間&lt;/li&gt;
&lt;li&gt;(3) : 全要素のデストラクタ呼び出しとコピーを行うために、線形時間&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;map&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; values[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;e&#39;&lt;/span&gt;),
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;),
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;d&#39;&lt;/span&gt;),
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;),
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;),
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;c&#39;&lt;/span&gt;)
  };
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c1(values, values &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c2;

  c2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; c1;
  c1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;();

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Size of c1: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c1.size() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Size of c2: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c2.size() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Size of c1: 0
Size of c2: 6
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??, 11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を挿入する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/op_constructor.html&#34;&gt;&lt;code&gt;multimap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(3)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/map/multimap/op_constructor.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/map/multimap/op_constructor.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class multimap&#34;&gt;multimap::&lt;/span&gt;コンストラクタ&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;multimap();                                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++14 から&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;multimap&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Compare&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; comp,
                  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; alloc &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator()); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14 まで&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;multimap&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Compare&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; comp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Compare(),
                  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; alloc &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator()); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) + (2) C++11 まで&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;multimap&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; alloc);               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++11 から&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
multimap(InputIterator first,
         InputIterator last,
         &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Compare&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; comp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Compare(),
         &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; alloc &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
multimap(InputIterator first,
         InputIterator last,
         &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; alloc);                        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5) C++14 から&lt;/span&gt;

multimap(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;

multimap(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x,
         &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; alloc);                        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7) C++11 から&lt;/span&gt;

multimap(multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y);                                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8) C++11 から&lt;/span&gt;

multimap(multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y,
         &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; alloc);                        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (9) C++11 から&lt;/span&gt;

multimap(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init,
         &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Compare&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; comp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Compare(),
         &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; alloc &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (10) C++11 から&lt;/span&gt;

multimap(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init,
         &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; alloc);                        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (11) C++14 から&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;multimap&lt;/code&gt; オブジェクトを構築する&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) デフォルトコンストラクタ。空の &lt;code&gt;multimap&lt;/code&gt; オブジェクトを構築する。&lt;code&gt;multimap(Compare())&lt;/code&gt; と同等。（C++14 から）&lt;/li&gt;
&lt;li&gt;(2) 比較オブジェクト &lt;code&gt;comp&lt;/code&gt; とアロケータ &lt;code&gt;alloc&lt;/code&gt; で空の &lt;code&gt;multimap&lt;/code&gt; オブジェクトを構築する。（C++14 から）&lt;/li&gt;
&lt;li&gt;(1) + (2) デフォルトコンストラクタ。比較オブジェクト &lt;code&gt;comp&lt;/code&gt; とアロケータ &lt;code&gt;alloc&lt;/code&gt; で空の &lt;code&gt;multimap&lt;/code&gt; オブジェクトを構築する。（C++11 まで）&lt;/li&gt;
&lt;li&gt;(3) アロケータ &lt;code&gt;alloc&lt;/code&gt; で空の &lt;code&gt;multimap&lt;/code&gt; オブジェクトを構築する。（C++11 から）&lt;/li&gt;
&lt;li&gt;(4) イテレータ範囲コンストラクタ。比較オブジェクト &lt;code&gt;comp&lt;/code&gt;、アロケータ &lt;code&gt;alloc&lt;/code&gt;、および範囲 &lt;code&gt;[first, last)&lt;/code&gt; の要素で &lt;code&gt;multimap&lt;/code&gt; オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(5) イテレータ範囲コンストラクタ。アロケータ &lt;code&gt;alloc&lt;/code&gt;、および範囲 &lt;code&gt;[first, last)&lt;/code&gt; の要素で &lt;code&gt;multimap&lt;/code&gt; オブジェクトを構築する。（C++14 から）&lt;/li&gt;
&lt;li&gt;(6) コピーコンストラクタ。&lt;code&gt;x&lt;/code&gt; の要素のコピーで &lt;code&gt;multimap&lt;/code&gt; オブジェクトを構築する。アロケータは &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/select_on_container_copy_construction.html&#34;&gt;&lt;code&gt;select_on_container_copy_construction&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x)&lt;/code&gt; の呼び出しによって取得する。&lt;/li&gt;
&lt;li&gt;(7) アロケータ &lt;code&gt;alloc&lt;/code&gt; を指定したコピーコンストラクタ。&lt;code&gt;x&lt;/code&gt; の要素のコピーで &lt;code&gt;multimap&lt;/code&gt; オブジェクトを構築する。（C++11 から）&lt;/li&gt;
&lt;li&gt;(8) ムーブコンストラクタ。&lt;code&gt;y&lt;/code&gt; の要素をムーブすることで &lt;code&gt;multimap&lt;/code&gt; オブジェクトを構築する。アロケータは &lt;code&gt;y&lt;/code&gt; に属しているアロケータをムーブして取得する。（C++11 から）&lt;/li&gt;
&lt;li&gt;(9) アロケータ &lt;code&gt;alloc&lt;/code&gt; を指定したムーブコンストラクタ。&lt;code&gt;y&lt;/code&gt; の要素をムーブすることでコンテナを構築する。（C++11 から）&lt;/li&gt;
&lt;li&gt;(10) 比較オブジェクト &lt;code&gt;comp&lt;/code&gt;、アロケータ &lt;code&gt;alloc&lt;/code&gt;、および初期化リスト &lt;code&gt;init&lt;/code&gt; の要素で &lt;code&gt;multimap&lt;/code&gt; オブジェクトを構築する。&lt;code&gt;multimap(init.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;, init.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;, comp, alloc)&lt;/code&gt; と同等。（C++11 から）&lt;/li&gt;
&lt;li&gt;(11) アロケータ &lt;code&gt;alloc&lt;/code&gt;、および初期化リスト &lt;code&gt;init&lt;/code&gt; の要素で &lt;code&gt;multimap&lt;/code&gt; オブジェクトを構築する。&lt;code&gt;multimap(init, Compare(), alloc)&lt;/code&gt; と同等。（C++14 から）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)、(2)、(3) 定数時間&lt;/li&gt;
&lt;li&gt;(4)、(5) &lt;code&gt;N =&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last)&lt;/code&gt; とすると、範囲 &lt;code&gt;[first, last)&lt;/code&gt; が比較オブジェクト &lt;code&gt;comp&lt;/code&gt; によって既にソート済みである場合は &lt;code&gt;N&lt;/code&gt; に比例、そうでなければ &lt;code&gt;N log N&lt;/code&gt; に比例&lt;/li&gt;
&lt;li&gt;(6)、(7) &lt;code&gt;x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; に対して線形時間&lt;/li&gt;
&lt;li&gt;(8) 定数時間&lt;/li&gt;
&lt;li&gt;(9) 定数時間。ただし、&lt;code&gt;alloc == y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; でなければ &lt;code&gt;y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; に対して線形時間&lt;/li&gt;
&lt;li&gt;(10)、(11) &lt;code&gt;init.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; に対して線形時間&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;C++14 では、デフォルトコンストラクタを (1) + (2) の形式から (1) の形式に分離して残りを (2) の形式（&lt;code&gt;comp&lt;/code&gt; のデフォルト引数を削除）にした。
    これは、デフォルトコンストラクタに &lt;code&gt;explicit&lt;/code&gt; が付いていると、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;のようなコード（C++11 から導入された、コピーリスト初期化によるデフォルトコンストラクタ呼び出し）がエラーになってしまうためである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++14 では、(5) の形式が新たに追加された。
    これは、イテレータ範囲 &lt;code&gt;[first, last)&lt;/code&gt; のみを引数にとるアロケータ使用構築（uses-allocator construction）に失敗してしまうためである。
    具体的には、C++11 では以下のようなコードがエラーになってしまう。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map.html&#34;&gt;map&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator.html&#34;&gt;scoped_allocator&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator.html&#34;&gt;iterator&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility.html&#34;&gt;utility&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory.html&#34;&gt;memory&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; mii &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap.html&#34;&gt;multimap&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;mii, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator/scoped_allocator_adaptor.html&#34;&gt;scoped_allocator_adaptor&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;allocator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;mii&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; l;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; a[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { { &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt; }, { &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt; }, { &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt; } };
  l.&lt;a href=&#34;http://cpprefjp.github.io/reference/list/emplace_back.html&#34;&gt;emplace_back&lt;/a&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(a), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(a));
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;なお、C++14 では同様の理由で (11) の形式も新たに追加されているが、こちらは存在しなくてもエラーとはならない。&lt;br /&gt;
（&lt;code&gt;map(init, alloc)&lt;/code&gt; の形式の構築では、(11) の形式が無い場合でも (10) の形式を用いて &lt;code&gt;init&lt;/code&gt; から一時 &lt;code&gt;map&lt;/code&gt; が構築され、&lt;code&gt;alloc&lt;/code&gt; と共に (9) の形式に引き渡される）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map.html&#34;&gt;map&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; values[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/make_pair.html&#34;&gt;make_pair&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/make_pair.html&#34;&gt;make_pair&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/make_pair.html&#34;&gt;make_pair&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;) };
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap.html&#34;&gt;multimap&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c1(values, values &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap.html&#34;&gt;multimap&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c2(c1);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Size of c1: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c1.&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/size.html&#34;&gt;size&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Size of c2: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c2.&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/size.html&#34;&gt;size&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Size of c1: 3
Size of c2: 3
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??, 11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/op_assign.html&#34;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を挿入する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(10)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2193&#34; target=&#34;_blank&#34;&gt;LWG 2193. Default constructors for standard library containers are explicit&lt;/a&gt;&lt;br /&gt;
    (1) + (2) の形式を 2 つのオーバーロードに分割するきっかけとなったレポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2210&#34; target=&#34;_blank&#34;&gt;LWG 2210. Missing allocator-extended constructor for allocator-aware containers&lt;/a&gt;&lt;br /&gt;
    (5)、(11) の形式を追加するきっかけとなったレポート&lt;br /&gt;
    なお、Discussion の例はアロケータの型が誤っているので注意&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>allocator -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/memory/allocator.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/memory/allocator.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;memory&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;allocator&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;allocator&lt;/span&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; pointer;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; const_pointer;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; value_type;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; rebind { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;U&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; other; };
  };
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;allocator&lt;/code&gt;は、標準ライブラリ内でデフォルト使用されるメモリアロケータクラスである。&lt;/p&gt;
&lt;p&gt;標準ライブラリ内では、主にコンテナがメモリの確保と解放を行っているが、コンテナ内で使用するメモリアロケータは、ユーザーが独自に実装したものを&lt;code&gt;allocator&lt;/code&gt;クラスの代わりに使用することもできる。例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v1;                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::allocatorクラスでメモリアロケートされる。&lt;/span&gt;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, MyAllocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; v2; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 自分が用意したアロケータを使用する。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;備考&lt;/h3&gt;
&lt;p&gt;C++11から：&lt;/p&gt;
&lt;p&gt;デストラクタを除く、&lt;code&gt;allocator&lt;/code&gt;クラスのメンバ関数は、データ競合を引き起こさない。そのため、複数スレッドから同時に&lt;code&gt;allocator&lt;/code&gt;クラスのメンバ関数が呼ばれたとしても、正しくメモリ確保・解放される。&lt;/p&gt;
&lt;h3&gt;メンバ関数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator/op_constructor.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator/op_destructor.html&#34;&gt;&lt;code&gt;(destructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator=(const allocator&amp;amp;) = default&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator/address.html&#34;&gt;&lt;code&gt;address&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;変数のアドレスを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator/allocate.html&#34;&gt;&lt;code&gt;allocate&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メモリを確保する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator/deallocate.html&#34;&gt;&lt;code&gt;deallocate&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メモリを解放する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一度に確保可能なメモリの最大サイズを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;引数を元にインスタンスを構築する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator/destroy.html&#34;&gt;&lt;code&gt;destroy&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;インスタンスを破棄する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;メンバ型&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;size_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素数を表す符号なし整数型 &lt;code&gt;size_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;difference_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ポインタの差を表す符号あり整数型 &lt;code&gt;ptrdiff_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素のポインタ型 &lt;code&gt;T*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取り専用の要素のポインタ型 &lt;code&gt;const T*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素の参照型 &lt;code&gt;T&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取り専用の要素の参照型 &lt;code&gt;const T&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素の型 &lt;code&gt;T&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rebind&amp;lt;U&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型&lt;code&gt;U&lt;/code&gt;を確保するように再束縛する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;propagate_on_container_move_assignment&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンテナのムーブ代入時に、アロケータの状態を伝搬するか。 &lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;true_type&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;非メンバ関数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較。常に&lt;code&gt;true&lt;/code&gt;を返す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator/op_not_equal.html&#34;&gt;&lt;code&gt;operator!=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非等値比較。常に&lt;code&gt;false&lt;/code&gt;を返す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;memory&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;numeric&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;**&lt;/span&gt; argv) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; alc &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;();

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 10要素のint型が入る領域を確保&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; arr &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; alc.allocate(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 確保した領域の各要素を構築する(コンストラクタを呼び出す)&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) alc.construct(arr &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; i);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iota(arr, arr &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(arr, arr &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;, [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;; });
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 配列の各要素を破棄する(デストラクタを呼び出す)&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) alc.destroy(arr &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; i);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 領域を解放する&lt;/span&gt;
  alc.deallocate(arr, &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;0 1 2 3 4 5 6 7 8 9 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;propagate_on_container_move_assignment&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++1y mode&lt;/a&gt;: 3.4&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++1y mode&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 11.0, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参照&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rawgit.com/google/cxx-std-draft/allocator-paper/allocator_user_guide.html&#34; target=&#34;_blank&#34;&gt;A visitor’s guide to C++ allocators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2103&#34; target=&#34;_blank&#34;&gt;LWG #2103 - std::allocator_traits&amp;lt;std::allocator&amp;lt;T&amp;gt;&amp;gt;::propagate_on_container_move_assignment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2669.htm&#34; target=&#34;_blank&#34;&gt;N2669 Thread-Safety in the Standard Library (Rev 2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator bool (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/memory/shared_ptr/op_bool.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/memory/shared_ptr/op_bool.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;memory&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class shared_ptr&#34;&gt;shared_ptr::&lt;/span&gt;operator bool (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; noexcept;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;有効なリソースを所有しているかを判定する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr/get.html&#34;&gt;get()&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; nullptr
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;memory&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (p) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;p has resource&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;p doesn&#39;t have resource&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;p has resource
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: 4.4.7&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang libc++, C++11 mode&lt;/a&gt;: 3.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 9.0 (TR1), 10.0, 11.0, 12.0&lt;ul&gt;
&lt;li&gt;Visual C++ 11.0までは、コンパイラが&lt;code&gt;explicit operator bool&lt;/code&gt;に対応していないため、不透明な型へのポインタ型への変換演算子関数として実装されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2435.htm&#34; target=&#34;_blank&#34;&gt;N2435 Explicit bool for Smart Pointers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/memory/shared_ptr/op_constructor.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/memory/shared_ptr/op_constructor.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;memory&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class shared_ptr&#34;&gt;shared_ptr::&lt;/span&gt;コンストラクタ (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;constexpr shared_ptr() noexcept;                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Y&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; shared_ptr(Y&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p);                         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Y&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Deleter&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
shared_ptr(Y&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p, Deleter d);                       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Y&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Deleter&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Alloc&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
shared_ptr(Y&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p, Deleter d, Alloc a);              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Deleter&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
shared_ptr(&lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/nullptr_t.html&#34;&gt;nullptr_t&lt;/a&gt; p, Deleter d);                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Deleter&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Alloc&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
shared_ptr(&lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/nullptr_t.html&#34;&gt;nullptr_t&lt;/a&gt; p, Deleter d, Alloc a);       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Y&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
shared_ptr(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Y&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; r, T&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p) noexcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7)&lt;/span&gt;

shared_ptr(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; r) noexcept;          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Y&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
shared_ptr(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Y&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; r) noexcept;       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (9)&lt;/span&gt;

shared_ptr(shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; r) noexcept;               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (10)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Y&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
shared_ptr(shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Y&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&amp;amp;&lt;/span&gt; r) noexcept;            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (11)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Y&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; shared_ptr(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/weak_ptr.html&#34;&gt;weak_ptr&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Y&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; r);         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (12)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Y&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
shared_ptr(auto_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Y&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&amp;amp;&lt;/span&gt; r);                       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (13)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Y&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Deleter&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
shared_ptr(&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr.html&#34;&gt;unique_ptr&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Y, Deleter&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&amp;amp;&lt;/span&gt; r);            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (14)&lt;/span&gt;

constexpr &lt;span style=&#34;color: #0000FF&#34;&gt;shared_ptr&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/nullptr_t.html&#34;&gt;nullptr_t&lt;/a&gt;);                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (15)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトの構築&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 所有権を持たない、空の&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(2) : 生ポインタの所有権を受け取る。&lt;/li&gt;
&lt;li&gt;(3) : 生ポインタの所有権と、リソースを破棄する際に使用する関数オブジェクトを受け取る。&lt;/li&gt;
&lt;li&gt;(4) : 生ポインタの所有権、リソースを破棄する際に使用する関数オブジェクト、アロケータを受け取る。&lt;/li&gt;
&lt;li&gt;(5) : リソースを破棄する際に使用する関数オブジェクトを受け取り、ヌルポインタを所有する&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(6) : リソースを破棄する際に使用する関数オブジェクトと、アロケータを受け取り、ヌルポインタを所有する&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(7) : &lt;code&gt;Y&lt;/code&gt;のメンバへのポインタを共有する。&lt;/li&gt;
&lt;li&gt;(8), (9) : 他の&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトと、リソースを共有する。&lt;/li&gt;
&lt;li&gt;(10), (11) : 他の&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトから、リソースの所有権を移動する。&lt;/li&gt;
&lt;li&gt;(12) : &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/weak_ptr.html&#34;&gt;&lt;code&gt;weak_ptr&lt;/code&gt;&lt;/a&gt;オブジェクトが参照するリソースから、所有権を共有する&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(13) : &lt;code&gt;auto_ptr&lt;/code&gt;オブジェクトから、リソースの所有権を移動する。&lt;/li&gt;
&lt;li&gt;(14) : &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr.html&#34;&gt;&lt;code&gt;unique_ptr&lt;/code&gt;&lt;/a&gt;オブジェクトから、リソースの所有権を移動する。&lt;/li&gt;
&lt;li&gt;(15) : (1)と同じく、所有権を持たない、空の&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(2) : &lt;code&gt;p&lt;/code&gt;が&lt;code&gt;T*&lt;/code&gt;に変換可能であること。&lt;code&gt;Y&lt;/code&gt;が完全型であり、式&lt;code&gt;delete p&lt;/code&gt;が妥当であること。&lt;/li&gt;
&lt;li&gt;(3), (4), (5), (6) : &lt;code&gt;p&lt;/code&gt;が&lt;code&gt;T*&lt;/code&gt;に変換可能であること。&lt;code&gt;Deleter&lt;/code&gt;がコピー構築可能な型であり、そのコピーコンストラクタとデストラクタが例外を投げないこと。&lt;code&gt;d(p)&lt;/code&gt;という式が妥当であること。&lt;/li&gt;
&lt;li&gt;(9) : &lt;code&gt;Y*&lt;/code&gt;が&lt;code&gt;T*&lt;/code&gt;に暗黙変換可能でない場合、この関数はオーバーロード解決から除外される。&lt;/li&gt;
&lt;li&gt;(11) : &lt;code&gt;Y*&lt;/code&gt;が&lt;code&gt;T*&lt;/code&gt;に暗黙変換可能でない場合、この関数はオーバーロード解決から除外される。&lt;/li&gt;
&lt;li&gt;(12) : &lt;code&gt;Y*&lt;/code&gt;が&lt;code&gt;T*&lt;/code&gt;に変換可能であること。&lt;/li&gt;
&lt;li&gt;(13) : &lt;code&gt;r.release()&lt;/code&gt;によって返されるポインタ値が、&lt;code&gt;T*&lt;/code&gt;に変換可能であること。&lt;code&gt;Y&lt;/code&gt;が完全型であり、式&lt;code&gt;delete r.release()&lt;/code&gt;が妥当であること。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 空の&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(2) : ポインタ&lt;code&gt;p&lt;/code&gt;を所有する&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(3) : リソースを破棄する際に使用する関数オブジェクト&lt;code&gt;d&lt;/code&gt;を受け取り、ポインタ&lt;code&gt;p&lt;/code&gt;を所有する&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(4) : リソースを破棄する際に使用する関数オブジェクト&lt;code&gt;d&lt;/code&gt;を受け取り、ポインタ&lt;code&gt;p&lt;/code&gt;を所有する&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトを構築する。アロケータオブジェクト&lt;code&gt;a&lt;/code&gt;のコピーを、内部のメモリ確保に使用する。&lt;/li&gt;
&lt;li&gt;(5) : リソースを破棄する際に使用する関数オブジェクト&lt;code&gt;d&lt;/code&gt;を受け取り、ヌルポインタを所有する&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(6) : リソースを破棄する際に使用する関数オブジェクト&lt;code&gt;d&lt;/code&gt;を受け取り、ヌルポインタを所有する&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトを構築する。アロケータオブジェクト&lt;code&gt;a&lt;/code&gt;のコピーを、内部のメモリ確保に使用する。&lt;/li&gt;
&lt;li&gt;(7) : &lt;code&gt;r&lt;/code&gt;の所有権を持ち、ポインタとしては&lt;code&gt;p&lt;/code&gt;を保持する&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(8), (9) : &lt;code&gt;r&lt;/code&gt;が空の場合、空の&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトを構築する。そうでなければ、&lt;code&gt;r&lt;/code&gt;とリソースを共有する&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(10), (11) : &lt;code&gt;r&lt;/code&gt;が持つ所有権を、&lt;code&gt;*this&lt;/code&gt;に移動する。&lt;/li&gt;
&lt;li&gt;(12) : &lt;code&gt;r&lt;/code&gt;が持つポインタのコピーを共有する&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(13) : &lt;code&gt;r&lt;/code&gt;が持つ所有権を、&lt;code&gt;*this&lt;/code&gt;に移動する。&lt;/li&gt;
&lt;li&gt;(14) : 以下のように、(3)のコンストラクタに移譲する。&lt;code&gt;Deleter&lt;/code&gt;が参照型でなければ&lt;code&gt;shared_ptr(r.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr/release.html&#34;&gt;&lt;code&gt;release()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;, r.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr/get_deleter.html&#34;&gt;&lt;code&gt;get_deleter()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;)&lt;/code&gt;を呼び出し、そうでなければ&lt;code&gt;shared_ptr(r.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr/release.html&#34;&gt;&lt;code&gt;release()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;,&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/ref.html&#34;&gt;&lt;code&gt;ref&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(r.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr/get_deleter.html&#34;&gt;&lt;code&gt;get_deleter()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(15) : 空の&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr/use_count.html&#34;&gt;&lt;code&gt;use_count()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;== 0 &amp;amp;&amp;amp;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr/get.html&#34;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;== nullptr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(2), (3), (4) : &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr/use_count.html&#34;&gt;&lt;code&gt;use_count()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;== 1 &amp;amp;&amp;amp;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr/get.html&#34;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;== p&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(5), (6) : &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr/use_count.html&#34;&gt;&lt;code&gt;use_count()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;== 1 &amp;amp;&amp;amp;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr/get.html&#34;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;== nullptr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(7) : &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr/get.html&#34;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;== p &amp;amp;&amp;amp;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr/use_count.html&#34;&gt;&lt;code&gt;use_count()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;== r.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr/use_count.html&#34;&gt;&lt;code&gt;use_count()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(8), (9) : &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr/get.html&#34;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;==&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr/get.html&#34;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr/use_count.html&#34;&gt;&lt;code&gt;use_count()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;== r.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr/use_count.html&#34;&gt;&lt;code&gt;use_count()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(10) : &lt;code&gt;*this&lt;/code&gt;は&lt;code&gt;r&lt;/code&gt;がこれまで持っていた値を持ち、&lt;code&gt;r&lt;/code&gt;は空の状態になる。&lt;/li&gt;
&lt;li&gt;(12) : &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr/use_count.html&#34;&gt;&lt;code&gt;use_count()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;== r.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr/use_count.html&#34;&gt;&lt;code&gt;use_count()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(13) : &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr/use_count.html&#34;&gt;&lt;code&gt;use_count()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;== 1 &amp;amp;&amp;amp;&lt;/code&gt; &lt;code&gt;r.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr/get.html&#34;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;== nullptr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(3), (4), (5), (6) : メモリ確保に失敗した場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/new/bad_alloc.html&#34;&gt;&lt;code&gt;bad_alloc&lt;/code&gt;&lt;/a&gt;例外を送出する。例外送出時には&lt;code&gt;d(p)&lt;/code&gt;を呼び出すことが保証される。&lt;/li&gt;
&lt;li&gt;(12) : &lt;code&gt;r.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/weak_ptr/expired.html&#34;&gt;&lt;code&gt;expired()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;== true&lt;/code&gt;の場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/bad_weak_ptr.html&#34;&gt;&lt;code&gt;bad_weak_ptr&lt;/code&gt;&lt;/a&gt;例外を送出する。&lt;/li&gt;
&lt;li&gt;(13) : メモリ確保に失敗した場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/new/bad_alloc.html&#34;&gt;&lt;code&gt;bad_alloc&lt;/code&gt;&lt;/a&gt;もしくはその他実装定義の例外を送出する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;アロケータは、参照カウンタのメモリ確保に使用される。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;memory&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; X {
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i;

  X(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; i(i) {}
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// デフォルト構築。&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 空のshared_ptrオブジェクトを構築する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p1;
  assert(p1.get() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; nullptr);
  assert(p1.use_count() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ポインタの所有権を受け取る。&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p2(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
  assert(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p2.get() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
  assert(p2.use_count() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ポインタの所有権と、デリータを受け取る。&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// リソース解放時に、delete pの代わりにデリータが呼ばれる。&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p3(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;default_delete&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;());
  assert(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p3.get() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
  assert(p3.use_count() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ポインタの所有権、デリータ、アロケータを受け取る。&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// アロケータは内部的にrebindされるので、要素型はなんでもいい。&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p4(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;),
                          std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;default_delete&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(),
                          std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;());
  assert(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p4.get() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
  assert(p4.use_count() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// デリータを受け取り、&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ヌルポインタを所有するshared_ptrオブジェクトを構築する。&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p5(nullptr, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;default_delete&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;());
  assert(p5.get() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; nullptr);
  assert(p5.use_count() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// デリータとアロケータを受け取り、&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ヌルポインタを所有するshared_ptrオブジェクトを構築する。&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p6(nullptr,
                          std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;default_delete&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(),
                          std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;());
  assert(p6.get() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; nullptr);
  assert(p6.use_count() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 要素型のメンバへのポインタを共有する。&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;X&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p7_org(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; X(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p7(p7_org, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;(p7_org&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;i));
  assert(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p7.get() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// p7はiへのポインタを所有する&lt;/span&gt;
  assert(p7.use_count() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; p7_org.use_count()); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 所有権はコピー元のshared_ptrと共有する&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 他のshared_ptrとリソースを共有する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p8_org(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p8 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; p8_org;
  assert(p8.get() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; p8_org.get()); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// p8_orgとo8はリソースを共有する&lt;/span&gt;
  assert(p8.use_count() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 所有者は2人&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (10)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 他のshared_ptrからリソースを移動する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p10_org(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p10 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(p10_org);
  assert(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p10.get() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
  assert(p10.use_count() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
  assert(p10_org.use_count() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (12)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// weak_ptrから構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p12_org(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;weak_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; w12(p12_org);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p12 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; w12.lock()) {
    assert(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p12.get() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    assert(p12.use_count() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    assert(&lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (14)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// unique_ptrからリソースを移動する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p14_org(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p14 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(p14_org);
  assert(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p14.get() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
  assert(p14.use_count() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
  assert(p14_org.get() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; nullptr);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (15)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 空のshared_ptrを構築する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p15 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr;
  assert(p15.get() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; nullptr);
  assert(p15.use_count() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.3.6 (unique_ptr, nullptr以外), 4.4.7 (nullptr以外), 4.6.4&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 9.0 (TR1), 10.0, 11.0, 12.0&lt;ul&gt;
&lt;li&gt;Visual C++ 9.0は(1), (2), (3), (4), (8), (9), (12), (13)のみ&lt;/li&gt;
&lt;li&gt;Visual C++ 9.0, 1.0の(13)は、仮引数の型が&lt;code&gt;auto_ptr&amp;lt;Y&amp;gt;&amp;amp;&amp;amp;&lt;/code&gt;ではなく&lt;code&gt;auto_ptr&amp;lt;Y&amp;gt;&amp;amp;&lt;/code&gt;になっている。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(4), (5) : &lt;a href=&#34;http://d.hatena.ne.jp/yohhoy/20120623/p1&#34; target=&#34;_blank&#34;&gt;nullptrを所有するshared_ptr - yohhoyの日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(7) : &lt;a href=&#34;http://d.hatena.ne.jp/gintenlabo/20091214/1260804379&#34; target=&#34;_blank&#34;&gt;今更ながらに Boost.SmartPointers を考える - 野良C++erの雑記帳&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2351.htm&#34; target=&#34;_blank&#34;&gt;N2351 Improving shared_ptr for C++0x, Revision 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2435.htm&#34; target=&#34;_blank&#34;&gt;N2435 Explicit bool for Smart Pointers&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(15)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_copy_n (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/memory/uninitialized_copy_n.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/memory/uninitialized_copy_n.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;memory&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;uninitialized_copy_n (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Size&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ForwardIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  ForwardIterator uninitialized_copy_n(InputIterator first, Size n,
                                       ForwardIterator result);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;未初期化領域の範囲のうち、先頭&lt;code&gt;N&lt;/code&gt;個の要素を配置&lt;code&gt;new&lt;/code&gt;で初期化して出力する。&lt;/p&gt;
&lt;p&gt;入力範囲&lt;code&gt;[first, first + n)&lt;/code&gt;のコピーを未初期化出力範囲&lt;code&gt;[result, result + n)&lt;/code&gt;に書き込む。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; ( ; n &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;result, &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;first, &lt;span style=&#34;color: #666666&#34;&gt;--&lt;/span&gt;n) {
  &lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;*&lt;/span&gt;result))
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;iterator_traits&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ForwardIterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value_type(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;first);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;result&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;例&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;memory&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; alloc;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メモリ確保。&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// この段階では、[p, p + size)の領域は未初期化&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; alloc.allocate(size);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 未初期化領域pを初期化しつつ範囲vから要素をコピー&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;uninitialized_copy_n&lt;/span&gt;(v.begin(), size, p);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// pの領域が初期化され、かつvからpに要素がコピーされているか確認&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(p, p &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; size, [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  });

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 要素を破棄&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; size; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
    alloc.destroy(p &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; i);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メモリ解放&lt;/span&gt;
  alloc.deallocate(p, size);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
2
3
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.4.7&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang libc++, C++11 mode&lt;/a&gt;: 3.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2569.pdf&#34; target=&#34;_blank&#34;&gt;N2569 More STL algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2666.pdf&#34; target=&#34;_blank&#34;&gt;N2666 More STL algorithms (revision 2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator bool (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/memory/unique_ptr/op_bool.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/memory/unique_ptr/op_bool.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;memory&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class unique_ptr&#34;&gt;unique_ptr::&lt;/span&gt;operator bool (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; noexcept;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;有効なリソースを所有しているかを判定する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr/get.html&#34;&gt;get()&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; nullptr
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;memory&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (p) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;p has resource&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;p doesn&#39;t have resource&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;p has resource
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: 4.4.7&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang libc++, C++11 mode&lt;/a&gt;: 3.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 10.0, 11.0, 12.0&lt;ul&gt;
&lt;li&gt;Visual C++ 11.0までは、コンパイラが&lt;code&gt;explicit operator bool&lt;/code&gt;に対応していないため、不透明な型へのポインタ型への変換演算子関数として実装されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2435.htm&#34; target=&#34;_blank&#34;&gt;N2435 Explicit bool for Smart Pointers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/memory/unique_ptr/op_constructor.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/memory/unique_ptr/op_constructor.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;memory&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class unique_ptr&#34;&gt;unique_ptr::&lt;/span&gt;コンストラクタ (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;constexpr unique_ptr() noexcept;             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) 単一オブジェクト、配列&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; unique_ptr(pointer p) noexcept;     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) 単一オブジェクト、配列&lt;/span&gt;
unique_ptr(pointer p, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; D&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; d1) noexcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) 単一オブジェクト、配列&lt;/span&gt;
unique_ptr(pointer p, D&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; d2) noexcept;      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) 単一オブジェクト、配列&lt;/span&gt;
unique_ptr(unique_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; u) noexcept;         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5) 単一オブジェクト、配列&lt;/span&gt;
constexpr unique_ptr(&lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/nullptr_t.html&#34;&gt;nullptr_t&lt;/a&gt;) noexcept;    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6) 単一オブジェクト、配列&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;E&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
unique_ptr(unique_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;U, E&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&amp;amp;&lt;/span&gt; u) noexcept;   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7) 単一オブジェクト&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
unique_ptr(auto_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;U&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&amp;amp;&lt;/span&gt; u) noexcept;        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8) 単一オブジェクト&lt;/span&gt;

unique_ptr(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; unique_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;;      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (9) 単一オブジェクト、配列&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;unique_ptrオブジェクトの構築&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : デフォルトコンストラクタ。所有権を持たない、空の&lt;code&gt;unique_ptr&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(2) : 生ポインタの所有権を受け取る。&lt;/li&gt;
&lt;li&gt;(3), (4) : 生ポインタの所有権、およびデリータオブジェクトを受け取る。&lt;/li&gt;
&lt;li&gt;(5) : ムーブコンストラクタ。&lt;code&gt;u&lt;/code&gt;から&lt;code&gt;*this&lt;/code&gt;に、所有権を譲渡する。&lt;/li&gt;
&lt;li&gt;(6) : デフォルトコンストラクタと同じく、所有権を持たない、空の&lt;code&gt;unique_ptr&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(7) : 変換可能なポインタ型を持つ&lt;code&gt;unique_ptr&lt;/code&gt;オブジェクトからの変換。&lt;/li&gt;
&lt;li&gt;(8) : 変換可能なポインタ型を持つ&lt;code&gt;auto_ptr&lt;/code&gt;オブジェクトからの変換。&lt;/li&gt;
&lt;li&gt;(9) : コピー構築禁止。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1), (2) : デリータの型&lt;code&gt;D&lt;/code&gt;が、例外を投げずにデフォルト構築可能であること。&lt;/li&gt;
&lt;li&gt;(3) : デリータの型&lt;code&gt;D&lt;/code&gt;が、例外を投げずにコピー構築可能であること。&lt;/li&gt;
&lt;li&gt;(4), (5) : デリータの型&lt;code&gt;D&lt;/code&gt;が、例外を投げずにムーブ構築可能であること。&lt;/li&gt;
&lt;li&gt;(6) : デリータの型&lt;code&gt;D&lt;/code&gt;が、例外を投げずにデフォルト構築可能であること。&lt;/li&gt;
&lt;li&gt;(7) : 以下の条件を満たさない場合、この関数はオーバーロード解決の候補から外れる：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unique_ptr&amp;lt;U, E&amp;gt;::pointer&lt;/code&gt;が、&lt;code&gt;pointer&lt;/code&gt;に暗黙変換可能な型であること。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;U&lt;/code&gt;が配列型ではないこと。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;D&lt;/code&gt;と&lt;code&gt;E&lt;/code&gt;が同じ型であること。もしくは参照型ではない&lt;code&gt;D&lt;/code&gt;において、&lt;code&gt;E&lt;/code&gt;が&lt;code&gt;D&lt;/code&gt;に暗黙的に変換可能な型であること。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 値初期化したポインタとデリータオブジェクトを、メンバ変数に保持する。&lt;/li&gt;
&lt;li&gt;(2) : ポインタ&lt;code&gt;p&lt;/code&gt;と値初期化したデリータオブジェクトを、メンバ変数に保持する。&lt;/li&gt;
&lt;li&gt;(3) : ポインタ&lt;code&gt;p&lt;/code&gt;とデリータオブジェクト&lt;code&gt;d1&lt;/code&gt;を、メンバ変数に保持する。&lt;/li&gt;
&lt;li&gt;(4) : ポインタ&lt;code&gt;p&lt;/code&gt;と、&lt;code&gt;d2&lt;/code&gt;からムーブしたデリータオブジェクト&lt;code&gt;d2&lt;/code&gt;を、メンバ変数に保持する。&lt;/li&gt;
&lt;li&gt;(5) : &lt;code&gt;u&lt;/code&gt;が持つポインタの所有権を、&lt;code&gt;*this&lt;/code&gt;に譲渡する。デリータオブジェクトは、可能であればムーブし、そうでなければコピーする。&lt;/li&gt;
&lt;li&gt;(6) : (1)と同じく、値初期化したポインタとデリータオブジェクトを、メンバ変数に保持する。&lt;/li&gt;
&lt;li&gt;(7) : (5)と同じく、&lt;code&gt;u&lt;/code&gt;が持つポインタの所有権を、&lt;code&gt;*this&lt;/code&gt;に譲渡する。デリータオブジェクトは、可能であればムーブし、そうでなければコピーする。&lt;/li&gt;
&lt;li&gt;(8) : &lt;code&gt;u.release()&lt;/code&gt;の戻り値である所有権が放棄されたポインタと、値初期化したデリータオブジェクトを、メンバ変数に保持する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(3) : デリータの型&lt;code&gt;D&lt;/code&gt;が&lt;code&gt;D&amp;amp;&lt;/code&gt;のように左辺値参照の形式の場合、このコンストラクタのデリータパラメータは&lt;code&gt;D&amp;amp;&lt;/code&gt;型となる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;D deleter;
unique_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T, D&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;&lt;/span&gt; p(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; T(), deleter); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// pはdeleterへの参照を保持する&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;memory&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) デフォルト構築&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 所有権を持たない、空のunique_ptrオブジェクトを構築する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p1;
  assert(&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;p1);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) 生ポインタから所有権を譲渡して構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p2(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
  assert(p2);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3), (4) 生ポインタから所有権を譲渡し、デリータオブジェクトとともに構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p3(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;default_delete&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;());
  assert(p3);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5) 他のunique_ptrから所有権を譲渡する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p5 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(p3);
  assert(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p5 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6) nullptrで構築&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// デフォルトコンストラクタ(1)と同じ&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p6 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr;
  assert(&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;p6);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7) 変換可能な他のunique_ptrから所有権を譲渡する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p7 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(p5);
  assert(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt;(p7.get()) &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: 4.4.7 (nullptr_tのオーバーロード以外), 4.6.4&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang libc++, C++11 mode&lt;/a&gt;: 3.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 10.0, 11.0, 12.0&lt;ul&gt;
&lt;li&gt;Visual C++ 11.0までは、delete宣言に対応していないため、代わりにprivateで宣言のみ行う手法で代用されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2435.htm&#34; target=&#34;_blank&#34;&gt;N2435 Explicit bool for Smart Pointers&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(6)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iota (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/numeric/iota.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/numeric/iota.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;iota (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ForwardIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; iota(ForwardIterator first, ForwardIterator last, T value);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;指定された値から始まる整数列を生成する。&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;first&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスの先頭&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;last&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスの終端&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;初期値&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;全ての要素に対して、&lt;code&gt;first&lt;/code&gt; から順番に &lt;code&gt;*it = value; ++value;&lt;/code&gt; を行う&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;n 回のインクリメントと代入が行われる。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;numeric&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;(){
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello, iota!&#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  &lt;span style=&#34;color:#ff0000&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iota&lt;/span&gt;(s.begin(), s.end(), &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;A&#39;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;hello, iota!
ABCDEFGHIJKL
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GCC: 4.5.0以降&lt;/li&gt;
&lt;li&gt;Visual C++ 9.0以降&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;この関数は、APL言語の「原始関数ι（イオタ）」に由来する。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2569.pdf&#34; target=&#34;_blank&#34;&gt;N2569 More STL algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2666.pdf&#34; target=&#34;_blank&#34;&gt;N2666 More STL algorithms (revision 2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/queue/priority_queue/emplace.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/queue/priority_queue/emplace.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;queue&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class priority_queue&#34;&gt;priority_queue::&lt;/span&gt;emplace (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; emplace(Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;要素型&lt;code&gt;T&lt;/code&gt;のコンストラクタ引数をとり、直接構築で&lt;code&gt;priority_queue&lt;/code&gt;に要素を追加する。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;c.emplace_back(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args)...);&lt;/code&gt; 
&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/push_heap.html&#34;&gt;&lt;code&gt;push_heap&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(c.begin(), c.end(), comp);&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;queue&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::pair&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt; ()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;priority_queue&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; que;

  que.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;aaa&#34;&lt;/span&gt;);
  que.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;bbb&#34;&lt;/span&gt;);
  que.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ccc&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;que.empty()) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; que.top().first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; que.top().second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    que.pop();
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;4, ccc
3, aaa
1, bbb
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2680.pdf&#34; target=&#34;_blank&#34;&gt;N2680 Proposed Wording for Placement Insert (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/queue/queue/emplace.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/queue/queue/emplace.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;queue&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class queue&#34;&gt;queue::&lt;/span&gt;emplace (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; emplace(Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args)
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;要素型&lt;code&gt;T&lt;/code&gt;のコンストラクタ引数をとり、直接構築でキューに要素を追加する。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;c.emplace_back(std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args)...);&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;queue&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::pair&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt; ()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;queue&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; que;

  que.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;aaa&#34;&lt;/span&gt;);
  que.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;bbb&#34;&lt;/span&gt;);
  que.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ccc&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;que.empty()) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; que.front().first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; que.front().second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    que.pop();
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3, aaa
1, bbb
4, ccc
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2680.pdf&#34; target=&#34;_blank&#34;&gt;N2680 Proposed Wording for Placement Insert (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ratio (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/ratio.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/ratio.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;ratio&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;ratio (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;ratio&amp;gt;&lt;/code&gt;ヘッダでは、コンパイル時有理数演算のための、いくつかのクラスを定義する。&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;ratio&lt;/code&gt;クラステンプレート&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/ratio.html&#34;&gt;&lt;code&gt;ratio&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時有理数(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;四則演算&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/ratio_add.html&#34;&gt;&lt;code&gt;ratio_add&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;加算(alias template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/ratio_subtract.html&#34;&gt;&lt;code&gt;ratio_substract&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;減算(alias template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/ratio_multiply.html&#34;&gt;&lt;code&gt;ratio_multiply&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;乗算(alias template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/ratio_divide.html&#34;&gt;&lt;code&gt;ratio_divide&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;除算(alias template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;比較演算&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/ratio_equal.html&#34;&gt;&lt;code&gt;ratio_equal&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/ratio_not_equal.html&#34;&gt;&lt;code&gt;ratio_not_equal&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非等値比較(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/ratio_less.html&#34;&gt;&lt;code&gt;ratio_less&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より小さいかの比較(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/ratio_less_equal.html&#34;&gt;&lt;code&gt;ratio_less_equal&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺以下かの比較(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/ratio_greater.html&#34;&gt;&lt;code&gt;ratio_greater&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より大きいかの比較(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/ratio_greater_equal.html&#34;&gt;&lt;code&gt;ratio_greater_equal&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺以上かの比較(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;SI単位の&lt;code&gt;typedef&lt;/code&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/si_unit.html&#34;&gt;&lt;code&gt;yocto&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ヨクト(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/si_unit.html&#34;&gt;&lt;code&gt;zepto&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ゼプト(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/si_unit.html&#34;&gt;&lt;code&gt;atto&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;アト(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/si_unit.html&#34;&gt;&lt;code&gt;femto&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;フェムト(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/si_unit.html&#34;&gt;&lt;code&gt;pico&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ピコ(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/si_unit.html&#34;&gt;&lt;code&gt;nano&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ナノ(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/si_unit.html&#34;&gt;&lt;code&gt;micro&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;マイクロ(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/si_unit.html&#34;&gt;&lt;code&gt;milli&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ミリ(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/si_unit.html&#34;&gt;&lt;code&gt;centi&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;センチ(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/si_unit.html&#34;&gt;&lt;code&gt;deci&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デシ(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/si_unit.html&#34;&gt;&lt;code&gt;deca&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デカ(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/si_unit.html&#34;&gt;&lt;code&gt;hecto&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ヘクト(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/si_unit.html&#34;&gt;&lt;code&gt;kilo&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キロ(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/si_unit.html&#34;&gt;&lt;code&gt;mega&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メガ(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/si_unit.html&#34;&gt;&lt;code&gt;giga&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ギガ(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/si_unit.html&#34;&gt;&lt;code&gt;tera&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;テラ(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/si_unit.html&#34;&gt;&lt;code&gt;peta&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ペタ(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/si_unit.html&#34;&gt;&lt;code&gt;exa&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;エクサ(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/si_unit.html&#34;&gt;&lt;code&gt;zetta&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ゼタ(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/si_unit.html&#34;&gt;&lt;code&gt;yotta&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ヨタ(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2661.htm&#34; target=&#34;_blank&#34;&gt;N2661 A Foundation to Sleep On&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/regex/basic_regex/assign.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/regex/basic_regex/assign.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;regex&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class basic_regex&#34;&gt;basic_regex::&lt;/span&gt;assign (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex.html&#34;&gt;basic_regex&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; assign(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex.html&#34;&gt;basic_regex&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; that);                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex.html&#34;&gt;basic_regex&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; assign(&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex.html&#34;&gt;basic_regex&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; that) noexcept;               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex.html&#34;&gt;basic_regex&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; assign(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; charT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; ptr,
                    flag_type f &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_constants/syntax_option_type.html&#34;&gt;regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ECMAScript&lt;/a&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex.html&#34;&gt;basic_regex&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; assign(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; charT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; ptr, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; len,
                    flag_type f &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_constants/syntax_option_type.html&#34;&gt;regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ECMAScript&lt;/a&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ST&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;SA&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex.html&#34;&gt;basic_regex&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; assign(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;basic_string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, ST, SA&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; p,
                    flag_type f &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_constants/syntax_option_type.html&#34;&gt;regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ECMAScript&lt;/a&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex.html&#34;&gt;basic_regex&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; assign(InputIterator first, InputIterator last,
                    flag_type f &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_constants/syntax_option_type.html&#34;&gt;regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ECMAScript&lt;/a&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;

&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex.html&#34;&gt;basic_regex&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; assign(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il,
                    flag_type f &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_constants/syntax_option_type.html&#34;&gt;regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ECMAScript&lt;/a&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;正規表現オブジェクトを代入する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;InputIterator&lt;/code&gt; は入力イテレータの要件を満たすこと。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) &lt;code&gt;that&lt;/code&gt; を &lt;code&gt;*this&lt;/code&gt; にコピーする。&lt;/li&gt;
&lt;li&gt;(2) &lt;code&gt;that&lt;/code&gt; を &lt;code&gt;*this&lt;/code&gt; にムーブ代入する。&lt;/li&gt;
&lt;li&gt;(3) &lt;code&gt;assign(string_type(ptr), f)&lt;/code&gt; と同等。&lt;/li&gt;
&lt;li&gt;(4) &lt;code&gt;assign(string_type(ptr, len), f)&lt;/code&gt; と同等。&lt;/li&gt;
&lt;li&gt;(5) 引数 &lt;code&gt;f&lt;/code&gt; で指定されたフラグに従って、文字列 &lt;code&gt;p&lt;/code&gt; で指定された正規表現を &lt;code&gt;*this&lt;/code&gt; に代入する。文字列 &lt;code&gt;p&lt;/code&gt; が有効な正規表現で無い場合には、例外 &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_error.md.nolink&#34;&gt;&lt;code&gt;regex_error&lt;/code&gt;&lt;/a&gt; を投げる。&lt;br /&gt;
    例外が投げられた場合、&lt;code&gt;*this&lt;/code&gt; は変更されない。&lt;/li&gt;
&lt;li&gt;(6) &lt;code&gt;assign(string_type(first, last), f)&lt;/code&gt; と同等。&lt;/li&gt;
&lt;li&gt;(7) &lt;code&gt;assign(il.begin(), il.end(), f)&lt;/code&gt; と同等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/flags.html&#34;&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; と &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/mark_count.html&#34;&gt;&lt;code&gt;mark_count&lt;/code&gt;&lt;/a&gt; は、それぞれ &lt;code&gt;that.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/flags.html&#34;&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; と &lt;code&gt;that.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/mark_count.html&#34;&gt;&lt;code&gt;mark_count&lt;/code&gt;&lt;/a&gt; を返す。&lt;/li&gt;
&lt;li&gt;(2) &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/flags.html&#34;&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; と &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/mark_count.html&#34;&gt;&lt;code&gt;mark_count&lt;/code&gt;&lt;/a&gt; は、それぞれ &lt;code&gt;that.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/flags.html&#34;&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; と &lt;code&gt;that.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/mark_count.html&#34;&gt;&lt;code&gt;mark_count&lt;/code&gt;&lt;/a&gt; の元の値を返す。&lt;br /&gt;
&lt;code&gt;that&lt;/code&gt; は未規定の有効な状態である。&lt;/li&gt;
&lt;li&gt;(3) -&lt;/li&gt;
&lt;li&gt;(4) -&lt;/li&gt;
&lt;li&gt;(5) 例外が投げられなければ、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/flags.html&#34;&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; は引数 &lt;code&gt;f&lt;/code&gt; を、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/mark_count.html&#34;&gt;&lt;code&gt;mark_count&lt;/code&gt;&lt;/a&gt; は指定された正規表現内のキャプチャグループの数を返す。&lt;/li&gt;
&lt;li&gt;(6) -&lt;/li&gt;
&lt;li&gt;(7) -&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;charT&lt;/code&gt; は &lt;code&gt;basic_regex&lt;/code&gt; の 1 番目のテンプレートパラメータで、文字型である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string_type&lt;/code&gt; は &lt;code&gt;traits_type::string_type&lt;/code&gt; の typedef で、デフォルトは &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;&lt;code&gt;basic_string&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;charT&amp;gt;&lt;/code&gt; である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;traits_type&lt;/code&gt; は &lt;code&gt;basic_regex&lt;/code&gt; の 2 番目のテンプレートパラメータで、デフォルトは &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_traits.md.nolink&#34;&gt;&lt;code&gt;regex_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;charT&amp;gt;&lt;/code&gt; である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flag_type&lt;/code&gt; は &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_constants/syntax_option_type.html&#34;&gt;&lt;code&gt;regex_constants::syntax_option_type&lt;/code&gt;&lt;/a&gt; の typedef である。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex.html&#34;&gt;regex&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; s[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; abc &#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex.html&#34;&gt;regex&lt;/a&gt; re;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/boolalpha.html&#34;&gt;boolalpha&lt;/a&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex.html&#34;&gt;regex&lt;/a&gt; re1(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;w+&#34;&lt;/span&gt;);
  re &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; re1;                                             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) の形式&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;regex_search&lt;/a&gt;(s, re) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;

  re &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex.html&#34;&gt;regex&lt;/a&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;);                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) の形式&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;regex_search&lt;/a&gt;(s, re) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;

  re &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;w+&#34;&lt;/span&gt;;                                          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) の形式&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;regex_search&lt;/a&gt;(s, re) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;

  re &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\\&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;d&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;+&#39;&lt;/span&gt; };                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) の形式&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;regex_search&lt;/a&gt;(s, re) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;w+&#34;&lt;/span&gt;;
  re &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; p;                                               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5) の形式&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;regex_search&lt;/a&gt;(s, re) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;true
false
true
false
true
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 4.9.2, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;備考&lt;/h3&gt;
&lt;p&gt;Clang バージョン 3.0 は &lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;&lt;code&gt;initializer_list&lt;/code&gt;&lt;/a&gt; に対応していないため、(7) の形式は提供されていない。&lt;br /&gt;
また、Clang(libc++) では例外が発生した場合に &lt;code&gt;*this&lt;/code&gt; が元の状態を保持せずに中途半端に更新されてしまう。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(7)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/regex/basic_regex/op_constructor.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/regex/basic_regex/op_constructor.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;regex&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class basic_regex&#34;&gt;basic_regex::&lt;/span&gt;コンストラクタ (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;basic_regex();                                                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

basic_regex(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; basic_regex&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; that);                                       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

basic_regex(basic_regex&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; that) noexcept;                                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;basic_regex&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; charT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; ptr,
                     flag_type f &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_constants/syntax_option_type.html&#34;&gt;regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ECMAScript&lt;/a&gt;);            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;

basic_regex(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; charT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; ptr, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; len, flag_type f);                     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ST&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;SA&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
basic_regex(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;basic_string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, ST, SA&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; p,
            flag_type f &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_constants/syntax_option_type.html&#34;&gt;regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ECMAScript&lt;/a&gt;);                     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ForwardIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
basic_regex(ForwardIterator first, ForwardIterator last,
            flag_type f &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_constants/syntax_option_type.html&#34;&gt;regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ECMAScript&lt;/a&gt;);                     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7)&lt;/span&gt;

basic_regex(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il,
            flag_type f &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_constants/syntax_option_type.html&#34;&gt;regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ECMAScript&lt;/a&gt;);                     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;正規表現オブジェクトを構築する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ptr&lt;/code&gt; はヌルポインタではないこと。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;InputIterator&lt;/code&gt; は入力イテレータの要件を満たすこと。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) デフォルトコンストラクタ。いかなる文字列にもマッチしない &lt;code&gt;basic_regex&lt;/code&gt; オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(2) コピーコンストラクタ。&lt;code&gt;that&lt;/code&gt; をコピーして &lt;code&gt;basic_regex&lt;/code&gt; オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(3) ムーブコンストラクタ。&lt;code&gt;that&lt;/code&gt; をムーブして &lt;code&gt;basic_regex&lt;/code&gt; オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(4) 引数 &lt;code&gt;f&lt;/code&gt; で指定されたフラグに従って、先頭が &lt;code&gt;ptr&lt;/code&gt; で長さ &lt;a href=&#34;http://cpprefjp.github.io/reference/string/char_traits.html&#34;&gt;&lt;code&gt;char_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/char_traits/length.html&#34;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(ptr)&lt;/code&gt; の文字列から &lt;code&gt;basic_regex&lt;/code&gt; オブジェクトを構築する。&lt;br /&gt;
    指定された文字列が有効な正規表現で無い場合には、例外 &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_error.md.nolink&#34;&gt;&lt;code&gt;regex_error&lt;/code&gt;&lt;/a&gt; を投げる。&lt;/li&gt;
&lt;li&gt;(5) 引数 &lt;code&gt;f&lt;/code&gt; で指定されたフラグに従って、先頭が &lt;code&gt;ptr&lt;/code&gt; で長さ &lt;code&gt;len&lt;/code&gt; の文字列から &lt;code&gt;basic_regex&lt;/code&gt; オブジェクトを構築する。&lt;br /&gt;
    指定された文字列が有効な正規表現で無い場合には、例外 &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_error.md.nolink&#34;&gt;&lt;code&gt;regex_error&lt;/code&gt;&lt;/a&gt; を投げる。&lt;/li&gt;
&lt;li&gt;(6) 引数 &lt;code&gt;f&lt;/code&gt; で指定されたフラグに従って、&lt;code&gt;p&lt;/code&gt; で指定された文字列から &lt;code&gt;basic_regex&lt;/code&gt; オブジェクトを構築する。&lt;br /&gt;
    文字列 &lt;code&gt;p&lt;/code&gt; が有効な正規表現で無い場合には、例外 &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_error.md.nolink&#34;&gt;&lt;code&gt;regex_error&lt;/code&gt;&lt;/a&gt; を投げる。&lt;/li&gt;
&lt;li&gt;(7) 引数 &lt;code&gt;f&lt;/code&gt; で指定されたフラグに従って、範囲 &lt;code&gt;[first, last)&lt;/code&gt; で指定された文字列から &lt;code&gt;basic_regex&lt;/code&gt; オブジェクトを構築する。&lt;br /&gt;
    文字列 &lt;code&gt;[first, last)&lt;/code&gt; が有効な正規表現で無い場合には、例外 &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_error.md.nolink&#34;&gt;&lt;code&gt;regex_error&lt;/code&gt;&lt;/a&gt; を投げる。&lt;/li&gt;
&lt;li&gt;(8) &lt;code&gt;basic_regex(il.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), il.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), f)&lt;/code&gt; と同等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) -&lt;/li&gt;
&lt;li&gt;(2) &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/flags.html&#34;&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; と &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/mark_count.html&#34;&gt;&lt;code&gt;mark_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; は、それぞれ &lt;code&gt;that.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/flags.html&#34;&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; と &lt;code&gt;that.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/mark_count.html&#34;&gt;&lt;code&gt;mark_count&lt;/code&gt;&lt;/a&gt; を返す。&lt;/li&gt;
&lt;li&gt;(3) &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/flags.html&#34;&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; と &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/mark_count.html&#34;&gt;&lt;code&gt;mark_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; は、それぞれ &lt;code&gt;that.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/flags.html&#34;&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; と &lt;code&gt;that.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/mark_count.html&#34;&gt;&lt;code&gt;mark_count&lt;/code&gt;&lt;/a&gt; の元の値を返す。&lt;br /&gt;
&lt;code&gt;that&lt;/code&gt; は未規定の有効な状態である。&lt;/li&gt;
&lt;li&gt;(4) &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/flags.html&#34;&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; は引数 &lt;code&gt;f&lt;/code&gt; を、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/mark_count.html&#34;&gt;&lt;code&gt;mark_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; は指定された正規表現内のキャプチャグループの数を返す。&lt;/li&gt;
&lt;li&gt;(5) &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/flags.html&#34;&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; は引数 &lt;code&gt;f&lt;/code&gt; を、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/mark_count.html&#34;&gt;&lt;code&gt;mark_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; は指定された正規表現内のキャプチャグループの数を返す。&lt;/li&gt;
&lt;li&gt;(6) &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/flags.html&#34;&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; は引数 &lt;code&gt;f&lt;/code&gt; を、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/mark_count.html&#34;&gt;&lt;code&gt;mark_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; は指定された正規表現内のキャプチャグループの数を返す。&lt;/li&gt;
&lt;li&gt;(7) &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/flags.html&#34;&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; は引数 &lt;code&gt;f&lt;/code&gt; を、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex/mark_count.html&#34;&gt;&lt;code&gt;mark_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; は指定された正規表現内のキャプチャグループの数を返す。&lt;/li&gt;
&lt;li&gt;(8) -&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;charT&lt;/code&gt; は &lt;code&gt;basic_regex&lt;/code&gt; の 1 番目のテンプレートパラメータで、文字型である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flag_type&lt;/code&gt; は &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_constants/syntax_option_type.html&#34;&gt;&lt;code&gt;regex_constants::syntax_option_type&lt;/code&gt;&lt;/a&gt; の typedef である。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex.html&#34;&gt;regex&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; s[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; abc &#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/boolalpha.html&#34;&gt;boolalpha&lt;/a&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex.html&#34;&gt;regex&lt;/a&gt; re1;                                                 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) の形式&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;regex_search&lt;/a&gt;(s, re1) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex.html&#34;&gt;regex&lt;/a&gt; re4(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;w+&#34;&lt;/span&gt;);                                               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) の形式&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;regex_search&lt;/a&gt;(s, re4) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex.html&#34;&gt;regex&lt;/a&gt; re2(re4);                                            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) の形式&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;regex_search&lt;/a&gt;(s, re2) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex.html&#34;&gt;regex&lt;/a&gt; re3(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/move.html&#34;&gt;move&lt;/a&gt;(re4));                                 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) の形式&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;regex_search&lt;/a&gt;(s, re3) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex.html&#34;&gt;regex&lt;/a&gt; re5(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ABC&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_constants/syntax_option_type.html&#34;&gt;regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;icase&lt;/a&gt;);      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5) の形式&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;regex_search&lt;/a&gt;(s, re5) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt; restr(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ABC&#34;&lt;/span&gt;);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex.html&#34;&gt;regex&lt;/a&gt; re6(restr, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_constants/syntax_option_type.html&#34;&gt;regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;icase&lt;/a&gt;);             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6) の形式&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;regex_search&lt;/a&gt;(s, re6) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt; p(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;[[:alpha:]]+&#34;&lt;/span&gt;);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex.html&#34;&gt;regex&lt;/a&gt; re7(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(p), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(p));                     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7) の形式&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;regex_search&lt;/a&gt;(s, re7) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex.html&#34;&gt;regex&lt;/a&gt; re8{ &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\\&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;d&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;+&#39;&lt;/span&gt; };                               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8) の形式&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;regex_search&lt;/a&gt;(s, re8) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;false
true
true
true
true
true
true
false
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 4.9.2, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;備考&lt;/h3&gt;
&lt;p&gt;Clang バージョン 3.0 は &lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;&lt;code&gt;initializer_list&lt;/code&gt;&lt;/a&gt; に対応していないため、(8) の形式は提供されていない。  &lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(8)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/set/set/emplace.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/set/set/emplace.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;set&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class set&#34;&gt;set::&lt;/span&gt;emplace (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// since C++11&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;iterator, &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
emplace(Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;コンテナに新しい要素を挿入する。要素は直接構築される（コピーもムーブもされない）。要素のコンストラクタはこの関数に渡された引数を与えることによって呼ばれる。&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;args...&lt;/code&gt; : 要素のコンストラクタへ転送される引数パック。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;要素へのイテレータと挿入されたかどうかを示す &lt;code&gt;bool&lt;/code&gt; からなる &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt; を返す。&lt;br /&gt;
&lt;code&gt;first&lt;/code&gt; に新しく挿入された要素またはすでに &lt;code&gt;set&lt;/code&gt; に格納されていた同じキー値の要素を指すイテレータが、&lt;code&gt;second&lt;/code&gt; には、要素が挿入されたときに &lt;code&gt;true&lt;/code&gt; が、同じキー値の要素が存在したときに &lt;code&gt;false&lt;/code&gt; がセットされる。&lt;br /&gt;
&lt;code&gt;iterator&lt;/code&gt; はメンバ型であり、双方向イテレータとして定義される。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;コンテナサイズについて対数時間。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set.html&#34;&gt;set&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; s
{
  s(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a)&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; a_(a) {}
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a_;
};
&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; s&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; lhs, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; s&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; rhs)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; lhs.a_ &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; rhs.a_;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set.html&#34;&gt;set&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;s&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c;

  c.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;42&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;c.begin()).a_ &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;42
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/emplace_hint.html&#34;&gt;&lt;code&gt;emplace_hint&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ヒントを使って要素を直接構築する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を挿入する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2680.pdf&#34; target=&#34;_blank&#34;&gt;N2680 Proposed Wording for Placement Insert (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace_hint (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/set/set/emplace_hint.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/set/set/emplace_hint.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;set&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class set&#34;&gt;set::&lt;/span&gt;emplace_hint (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// since C++11&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator emplace_hint(const_iterator hint, Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;要素が配置されるべき場所を示唆するパラメータ &lt;code&gt;hint&lt;/code&gt; を使って、コンテナに新しい要素を挿入する。要素は直接構築される（コピーもムーブもされない）。要素のコンストラクタはこの関数に渡された引数と同じ引数で呼ばれる。&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hint&lt;/code&gt; : 新しい要素をどこへ挿入するかを示唆するために使われるイテレータ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;args...&lt;/code&gt; : 要素のコンストラクタへ転送される引数パック&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;新しく挿入された要素またはすでに &lt;code&gt;set&lt;/code&gt; に格納されていた同じキー値の要素を指すイテレータを返す。
&lt;code&gt;iterator&lt;/code&gt; はメンバ型であり、双方向イテレータとして定義される。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;一般にコンテナのサイズについて対数時間だが、新しい要素が &lt;code&gt;hint&lt;/code&gt; の前に挿入された場合は償却定数時間。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set.html&#34;&gt;set&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; s
{
  s(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a)&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; a_(a) {}
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a_;
};

&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; s&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; lhs, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; s&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; rhs)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; lhs.a_ &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; rhs.a_;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set.html&#34;&gt;set&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;s&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c;

  c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;insert&lt;/a&gt;(s(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;));
  c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;insert&lt;/a&gt;(s(&lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;));
  c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;insert&lt;/a&gt;(s(&lt;span style=&#34;color: #666666&#34;&gt;30&lt;/span&gt;));

  c.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace_hint&lt;/span&gt;(c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/find.html&#34;&gt;find&lt;/a&gt;(s(&lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;)), &lt;span style=&#34;color: #666666&#34;&gt;15&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;size&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;4
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を直接構築する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を挿入する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2680.pdf&#34; target=&#34;_blank&#34;&gt;N2680 Proposed Wording for Placement Insert (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/set/set/insert.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/set/set/insert.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;set&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class set&#34;&gt;set::&lt;/span&gt;insert&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;iterator,&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; insert(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// since C++11&lt;/span&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;iterator,&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; insert(value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// until C++11&lt;/span&gt;
iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(iterator position, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// since C++11&lt;/span&gt;
iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(const_iterator position, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// since C++11&lt;/span&gt;
iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(const_iterator position, value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y);

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; insert(InputIterator first, InputIterator last);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// since C++11&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;新しく一つの要素(引数 &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;を使う)または要素のシーケンス(入力イテレータまたは &lt;code&gt;initializer_list&lt;/code&gt; を使う)を挿入することにより、 &lt;code&gt;set&lt;/code&gt; コンテナを拡張する。 
これは、挿入された要素の数だけコンテナの &lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; を増やす。 
 &lt;code&gt;set&lt;/code&gt; コンテナは重複した値を許さないため、挿入操作はそれぞれの要素が他のコンテナ内の既存要素と同じ値かどうかをチェックする。もし同じであれば要素は挿入されず、戻り値を持つ関数の場合はそれへのイテレータを返す。 
重複した値を許す、類似したコンテナについては &lt;code&gt;multiset&lt;/code&gt; を参照。 
内部的に &lt;code&gt;set&lt;/code&gt; コンテナは、コンストラクト時に指定された比較オブジェクトによって要素を下位から上位へとソートして保持する。 
この操作は、適切な位置パラメータを提供することで効率を飛躍的に改善することができる。&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; : 挿入される要素の初期値に使われる値。メンバ型 &lt;code&gt;value_type&lt;/code&gt; は &lt;code&gt;set&lt;/code&gt; コンテナ内で &lt;code&gt;Key&lt;/code&gt; （一つ目のテンプレートパラメータであり、コンテナ内に格納される要素の型）の別名として定義される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt; : ムーブして挿入される値。メンバ型 &lt;code&gt;value_type&lt;/code&gt; は &lt;code&gt;set&lt;/code&gt; コンテナ内で &lt;code&gt;Key&lt;/code&gt; （一つ目のテンプレートパラメータであり、コンテナ内に格納される要素の型）の別名して定義される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;first, last&lt;/code&gt; : 要素の範囲を指定するイテレータ。範囲 &lt;code&gt;[first, last)&lt;/code&gt; にある要素のコピーが &lt;code&gt;set&lt;/code&gt; に挿入される。この範囲は、&lt;code&gt;first&lt;/code&gt; と &lt;code&gt;last&lt;/code&gt; の間の全ての要素を含み、&lt;code&gt;first&lt;/code&gt; が指す要素を含む一方で &lt;code&gt;last&lt;/code&gt; が指す要素は含まないことに注意。テンプレートタイプは任意の入力イテレータである。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;init&lt;/code&gt; : 挿入される値のリスト。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt; を返すバージョンは、&lt;code&gt;first&lt;/code&gt; に新しく挿入された要素またはすでに &lt;code&gt;set&lt;/code&gt; に格納されていた同じ値の要素を指すイテレータをセットする。&lt;code&gt;second&lt;/code&gt; には、要素が挿入されたときに &lt;code&gt;true&lt;/code&gt; が、同じ値の要素が存在したときに &lt;code&gt;false&lt;/code&gt; がセットされる。
&lt;code&gt;iterator&lt;/code&gt; を返すバージョンは、新しく挿入された要素またはすでに &lt;code&gt;set&lt;/code&gt; に格納されていた同じ値の要素を指すイテレータである。
&lt;code&gt;iterator&lt;/code&gt; はメンバ型であり、双方向イテレータとして定義される。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; または &lt;code&gt;y&lt;/code&gt; のみを引数にとるバージョンは対数時間。 
&lt;code&gt;x&lt;/code&gt; または &lt;code&gt;y&lt;/code&gt; と &lt;code&gt;position&lt;/code&gt; を引数にとるバージョンは一般に対数時間だが、&lt;code&gt;x&lt;/code&gt; または &lt;code&gt;y&lt;/code&gt; が &lt;code&gt;position&lt;/code&gt; が指す要素の後に挿入された場合は償却定数時間。 
入力イテレータを引数にとるバージョンは一般に N log(size + N)※ だが、&lt;code&gt;first&lt;/code&gt; と &lt;code&gt;last&lt;/code&gt; の間がコンテナで使われているものと同じ順序基準に従ってソート済みである場合は線形時間。 &lt;/p&gt;
&lt;p&gt;※ ここで &lt;code&gt;N&lt;/code&gt; は &lt;code&gt;first&lt;/code&gt; と &lt;code&gt;last&lt;/code&gt; の間の距離であり &lt;code&gt;size&lt;/code&gt; は挿入前のコンテナの &lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set.html&#34;&gt;set&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt; ()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set.html&#34;&gt;set&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c1;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set.html&#34;&gt;set&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c2;

  c1.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);
  c1.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;);
  c1.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;30&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c1.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;size&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;

  c2.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(c1.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/begin.html&#34;&gt;begin&lt;/a&gt;(), c1.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/end.html&#34;&gt;end&lt;/a&gt;());
  c2.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;40&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c2.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;size&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
4
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を削除する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/find.html&#34;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーで要素を探す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2350.pdf&#34; target=&#34;_blank&#34;&gt;N2350 Container insert/erase and iterator constness (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/set/set/op_assign.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/set/set/op_assign.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;set&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class set&#34;&gt;set::&lt;/span&gt;operator=&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;set&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; set&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++03&lt;/span&gt;
set&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(set&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x);                           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++11&lt;/span&gt;
set&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : コピー代入&lt;/li&gt;
&lt;li&gt;(2) : ムーブ代入&lt;/li&gt;
&lt;li&gt;(3) : 初期化子リストの代入&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 同じテンプレートパラメータを持つ &lt;code&gt;set&lt;/code&gt; クラスのオブジェクトをコピー代入する。&lt;code&gt;*this&lt;/code&gt; の全ての要素が解放され、&lt;code&gt;x&lt;/code&gt; の全ての要素が &lt;code&gt;*this&lt;/code&gt; にコピーされる。&lt;/li&gt;
&lt;li&gt;(2) : 同じテンプレートパラメータを持つ &lt;code&gt;set&lt;/code&gt; クラスのオブジェクトをムーブ代入する。&lt;code&gt;*this&lt;/code&gt; の全ての要素が解放され、&lt;code&gt;x&lt;/code&gt; の全ての要素が &lt;code&gt;*this&lt;/code&gt; にムーブされる。&lt;/li&gt;
&lt;li&gt;(3) : 同じテンプレートパラメータを持つ &lt;code&gt;initializer_list&lt;/code&gt; クラスのオブジェクトをコピー代入する。&lt;code&gt;*this&lt;/code&gt; の全ての要素が解放され、&lt;code&gt;x&lt;/code&gt; の全ての要素が &lt;code&gt;*this&lt;/code&gt; にコピーされる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;code&gt;*this == x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;*this&lt;/code&gt;は元々の&lt;code&gt;x&lt;/code&gt;と等値となる&lt;/li&gt;
&lt;li&gt;(3) : &lt;code&gt;*this == x&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 全要素のデストラクタ呼び出しとコピーを行うために、線形時間&lt;/li&gt;
&lt;li&gt;(2) : 全要素のデストラクタ呼び出しをするために、線形時間&lt;/li&gt;
&lt;li&gt;(3) : 全要素のデストラクタ呼び出しとコピーを行うために、線形時間&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set.html&#34;&gt;set&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; values[] &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;/span&gt; { &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt; };
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set.html&#34;&gt;set&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c1(values, values &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set.html&#34;&gt;set&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c2;

  c2 &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;/span&gt; c1;
  c1 &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set.html&#34;&gt;set&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;();

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Size of c1: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c1.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;size&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Size of c2: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c2.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;size&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Size of c1: 0
Size of c2: 6
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を挿入する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/op_constructor.html&#34;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/set/set/op_constructor.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/set/set/op_constructor.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;set&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class set&#34;&gt;set::&lt;/span&gt;コンストラクタ&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;set();                                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++14&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Compare&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; comp,
             &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Compare&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; comp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Compare(),
             &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; alloc &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator()); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) + (2) C++03&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; alloc);               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++11&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
set(InputIterator first, InputIterator last,
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Compare&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; comp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Compare(),
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; alloc &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++03&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterato&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
set(InputIterator first, InputIterator last,
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5) C++14&lt;/span&gt;

set(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; set&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6) C++03&lt;/span&gt;
set(set&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y);                                       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7) C++11&lt;/span&gt;

set(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; set&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; alloc);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8) C++11&lt;/span&gt;
set(set&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; alloc);               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (9) C++11&lt;/span&gt;

set(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init,
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Compare&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; comp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Compare(),
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; alloc &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (10) C++11&lt;/span&gt;

set(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init,
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (11) C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;set&lt;/code&gt;オブジェクトを、以下に示す通りの要素で初期化する。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : デフォルトコンストラクタ。要素数が空の&lt;code&gt;set&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(2) : 比較関数オブジェクトを受け取るコンストラクタ。受け取った比較関数オブジェクトを、このコンテナでの要素比較に使用する。要素数が空の&lt;code&gt;set&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(1) + (2) : デフォルトコンストラクタ。空のコンテナを構築する。&lt;/li&gt;
&lt;li&gt;(3) : アロケータを別で受け取り、要素数が空の&lt;code&gt;set&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(4) : 範囲 &lt;code&gt;[first, last)&lt;/code&gt; のコンテンツで構築する。&lt;/li&gt;
&lt;li&gt;(5) : (4)のコンストラクタを &lt;code&gt;set(first, last, Compare(), a)&lt;/code&gt; のように呼び出して、&lt;code&gt;set&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(6), (8) : コピーコンストラクタ。&lt;code&gt;x&lt;/code&gt;のコンテンツのコピーでコンテナを構築する。もし &lt;code&gt;alloc&lt;/code&gt; が与えられなかった場合、アロケータを &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/select_on_container_copy_construction.html&#34;&gt;&lt;code&gt;select_on_container_copy_construction&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;())&lt;/code&gt; の呼び出しによって取得する。&lt;/li&gt;
&lt;li&gt;(7), (9) : ムーブコンストラクタ。&lt;code&gt;y&lt;/code&gt; のコンテンツをムーブすることでコンテナを構築する。もし &lt;code&gt;alloc&lt;/code&gt; が与えられなかった場合、アロケータを &lt;code&gt;y&lt;/code&gt; に属しているアロケータをムーブして取得する。&lt;/li&gt;
&lt;li&gt;(10) : 初期化リスト &lt;code&gt;init&lt;/code&gt; のコンテンツでコンテナを構築する。&lt;/li&gt;
&lt;li&gt;(11) : (10)のコンストラクタを &lt;code&gt;set(init, Compare(), a)&lt;/code&gt; のように呼び出して、&lt;code&gt;set&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1), (2), (3) : 定数時間。&lt;/li&gt;
&lt;li&gt;(4), (5) : &lt;code&gt;comp&lt;/code&gt; によって既にソート済みである場合は、イテレータ間の距離（コピーコンストラクト）。未ソートのシーケンスの場合は、それらの距離について N * logN （ソート、コピーコンストラクト）。&lt;/li&gt;
&lt;li&gt;(6), (8) : &lt;code&gt;x&lt;/code&gt; の &lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt; に対して線形時間（全要素をコピー構築する）。&lt;/li&gt;
&lt;li&gt;(7), (9) : 定数時間。ただし、&lt;code&gt;alloc&lt;/code&gt; が与えられてかつ &lt;code&gt;alloc != y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合は線形時間。&lt;/li&gt;
&lt;li&gt;(10), (11) : &lt;code&gt;init&lt;/code&gt; の要素数に対して線形時間。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;C++14 では、デフォルトコンストラクタを (1) + (2) の形式から (1) の形式に分離して残りを (2) の形式（&lt;code&gt;comp&lt;/code&gt; のデフォルト引数を削除）にした。
    これは、デフォルトコンストラクタに &lt;code&gt;explicit&lt;/code&gt; が付いていると、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;のようなコード（C++11 から導入された、コピーリスト初期化によるデフォルトコンストラクタ呼び出し）がエラーになってしまうためである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++14 では、(5) に形式が新たに追加された。
    これは、イテレータ範囲 &lt;code&gt;[first, last)&lt;/code&gt; のみを引数にとるアロケータ使用構築（uses-allocator construction）に失敗してしまうためである。
    具体的には、C++11 では以下のようなコードがエラーになってしまう。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set.html&#34;&gt;set&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator.html&#34;&gt;scoped_allocator&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator.html&#34;&gt;iterator&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory.html&#34;&gt;memory&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; sii &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set.html&#34;&gt;set&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;sii, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator/scoped_allocator_adaptor.html&#34;&gt;scoped_allocator_adaptor&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;allocator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;sii&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; l;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};
  l.&lt;a href=&#34;http://cpprefjp.github.io/reference/list/emplace_back.html&#34;&gt;emplace_back&lt;/a&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(a), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(a));
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;なお、C++14 では同様の理由で (11) の形式も新たに追加されているが、こちらは存在しなくてもエラーとはならない。&lt;br /&gt;
（&lt;code&gt;set(init, alloc)&lt;/code&gt; の形式の構築では、(11) の形式が無い場合でも (10) の形式を用いて &lt;code&gt;init&lt;/code&gt; から一時 &lt;code&gt;set&lt;/code&gt; が構築され、&lt;code&gt;alloc&lt;/code&gt; と共に (9) の形式に引き渡される）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set.html&#34;&gt;set&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; values[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt; };
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set.html&#34;&gt;set&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c1(values, values &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set.html&#34;&gt;set&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c2(c1);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Size of c1: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c1.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;size&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Size of c2: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c2.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;size&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Size of c1: 6
Size of c2: 6
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/op_assign.html&#34;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を挿入する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(10)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2193&#34; target=&#34;_blank&#34;&gt;LWG 2193. Default constructors for standard library containers are explicit&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;explicit set(const Compare&amp;amp; comp = Compare(), const Allocator&amp;amp; alloc = Allocator());&lt;/code&gt; を 2 つのオーバーロードに分割するきっかけとなったレポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2210&#34; target=&#34;_blank&#34;&gt;LWG 2210. Missing allocator-extended constructor for allocator-aware containers&lt;/a&gt;&lt;br /&gt;
    (5)、(11) を追加するきっかけとなったレポート&lt;br /&gt;
    なお、Discussion の例はアロケータの型が誤っているので注意&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/stack/emplace.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/stack/emplace.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;stack&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class stack&#34;&gt;stack::&lt;/span&gt;emplace&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; emplace(Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;要素型&lt;code&gt;T&lt;/code&gt;のコンストラクタ引数をとり、直接構築でスタックに要素を追加する。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;c.emplace_back(std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args)...);&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;stack&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; MyObj
{
  MyObj(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;; }
  MyObj(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyObj&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;copy &#34;&lt;/span&gt;; }
  MyObj(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyObj&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;move &#34;&lt;/span&gt;; }
  MyObj&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyObj&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;assign &#34;&lt;/span&gt;; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;; }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt; ()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stack&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyObj&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; mystack;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stack::push &#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i)
  {
    mystack.push(i);
  }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stack::&lt;span style=&#34;color:#ff0000&#34;&gt;emplace&lt;/span&gt; &#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i)
  {
    mystack.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace&lt;/span&gt;(i);
  }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;stack::push 0 move 1 move 2 move 3 move 4 move 
stack::emplace 0 1 2 3 4 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2680.pdf&#34; target=&#34;_blank&#34;&gt;N2680 Proposed Wording for Placement Insert (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>append -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/string/basic_string/append.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/string/basic_string/append.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;string&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class basic_string&#34;&gt;basic_string::&lt;/span&gt;append&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; append(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str);                 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; append(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str,
                     size_type pos,
                     size_type n);                             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++03&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; append(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str,
                     size_type pos,
                     size_type n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; npos);                      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; append(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; charT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s, size_type n);             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; append(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; charT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s);                          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; append(size_type n, charT c);                    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; append(InputIterator first, InputIterator last); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; append(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il);              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7) C++11 から&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;指定された文字列、文字、あるいは初期化リストを追加する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(2) では、&lt;code&gt;pos &amp;lt;=&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; であること。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3) では、&lt;code&gt;s&lt;/code&gt; は少なくとも &lt;code&gt;n&lt;/code&gt; の長さを持つ &lt;code&gt;charT&lt;/code&gt; 型の配列を指していること。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(4) では、&lt;code&gt;s&lt;/code&gt; は少なくとも &lt;code&gt;traits_type::length(s) + 1&lt;/code&gt; の長さを持つ &lt;code&gt;charT&lt;/code&gt; 型の配列を指していること。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(6) では、&lt;code&gt;[first, last)&lt;/code&gt; が有効な範囲であること。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1) 対象オブジェクトの末尾に &lt;code&gt;str&lt;/code&gt; の値が追加（コピー）される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++03 まで：&lt;code&gt;append(str, 0, npos)&lt;/code&gt; と同一。&lt;/li&gt;
&lt;li&gt;C++11 から：&lt;code&gt;append(str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/data.html&#34;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;())&lt;/code&gt; と同一。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) 対象オブジェクトの末尾に &lt;code&gt;str&lt;/code&gt; の &lt;code&gt;pos&lt;/code&gt; 以降の文字が追加される。
    追加される文字列の長さ &lt;code&gt;rlen&lt;/code&gt; は、&lt;code&gt;n&lt;/code&gt; と &lt;code&gt;str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() - pos&lt;/code&gt; の小さい方である。 &lt;code&gt;n == npos&lt;/code&gt; の場合は、 &lt;code&gt;str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() - pos&lt;/code&gt; が使用される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++03 まで：対象オブジェクトの末尾に &lt;code&gt;str&lt;/code&gt; の &lt;code&gt;pos&lt;/code&gt; 番目からの &lt;code&gt;rlen&lt;/code&gt; 文字を追加（コピー）する。&lt;/li&gt;
&lt;li&gt;C++11 から：&lt;code&gt;append(str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/data.html&#34;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() + pos, rlen)&lt;/code&gt; と同一。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3) 対象オブジェクトの末尾に &lt;code&gt;s&lt;/code&gt; が指す長さ &lt;code&gt;n&lt;/code&gt; の文字列が追加（コピー）される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++03 まで：&lt;code&gt;append(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/op_constructor.html&#34;&gt;&lt;code&gt;basic_string&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;value_type, traits_type, allocator_type&amp;gt;(s, n))&lt;/code&gt; と同一。&lt;/li&gt;
&lt;li&gt;C++11 から：対象オブジェクトの末尾に &lt;code&gt;s&lt;/code&gt; からの &lt;code&gt;n&lt;/code&gt; 文字を追加（コピー）する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(4) 対象オブジェクトの末尾に &lt;code&gt;s&lt;/code&gt; が指す NULL 終端された文字列が追加（コピー）される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++03 まで：&lt;code&gt;append(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/op_constructor.html&#34;&gt;&lt;code&gt;basic_string&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;value_type, traits_type, allocator_type&amp;gt;(s))&lt;/code&gt; と同一。&lt;/li&gt;
&lt;li&gt;C++11 から：&lt;code&gt;append(s, traits_type::length(s))&lt;/code&gt; と同一。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(5) 対象オブジェクトの末尾に、文字 &lt;code&gt;c&lt;/code&gt; が &lt;code&gt;n&lt;/code&gt; 文字が追加（コピー）される。&lt;br /&gt;
&lt;code&gt;append(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/op_constructor.html&#34;&gt;&lt;code&gt;basic_string&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;value_type, traits_type, allocator_type&amp;gt;(n, c))&lt;/code&gt; と同一。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(6) 対象オブジェクトの末尾に、範囲 &lt;code&gt;[first, last)&lt;/code&gt; の文字列が追加（コピー）される。&lt;br /&gt;
&lt;code&gt;append(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/op_constructor.html&#34;&gt;&lt;code&gt;basic_string&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;value_type, traits_type, allocator_type&amp;gt;(first, last))&lt;/code&gt; と同一。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(7) 対象オブジェクトの末尾に初期化リスト &lt;code&gt;il&lt;/code&gt; で表された文字列が追加される。&lt;br /&gt;
&lt;code&gt;append(il.begin(), il.end())&lt;/code&gt; と同一。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1) C++03 まで：&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;= npos - str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;br /&gt;
    C++11 から：&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() + str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) &lt;code&gt;pos &amp;gt; str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、&lt;code&gt;out_of_range&lt;/code&gt; が送出される。&lt;br /&gt;
    C++03 まで：&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;= npos - rlen&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;br /&gt;
    C++11 から：&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() + rlen &amp;gt;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3) C++03 まで：&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;= npos - n&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;br /&gt;
    C++11 から：&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() + n &amp;gt;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(4) C++03 まで：&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;= npos - traits::length(s)&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;br /&gt;
    C++11 から：&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() + traits::length(s) &amp;gt;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(5) C++03 まで：&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;= npos - n&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;br /&gt;
    C++11 から：&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() + n &amp;gt;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(6) C++03 まで：&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;= npos -&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last)&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;br /&gt;
    C++11 から：&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() +&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last) &amp;gt;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(7) &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() + il.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;本メンバ関数の呼び出しによって、対象オブジェクトの要素への参照、ポインタ、および、イテレータは無効になる可能性がある。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt; s1(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hello&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt; s2(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hell, world!&#34;&lt;/span&gt;);
  s1.&lt;span style=&#34;color:#ff0000&#34;&gt;append&lt;/span&gt;(s2, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  s1.&lt;span style=&#34;color:#ff0000&#34;&gt;append&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;worldworldworld&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  s1.&lt;span style=&#34;color:#ff0000&#34;&gt;append&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;!&#39;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  s1.&lt;span style=&#34;color:#ff0000&#34;&gt;append&lt;/span&gt;({ &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;:&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt; });
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Hello
Hello, 
Hello, world
Hello, world!!
Hello, world!! :)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/op_plus_assign.html&#34;&gt;&lt;code&gt;operator+=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字／文字列を追加する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/push_back.html&#34;&gt;&lt;code&gt;push_back&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字を追加する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字／文字列を挿入する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/op_plus.html&#34;&gt;&lt;code&gt;operator+&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字列を連結する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(7)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2268&#34; target=&#34;_blank&#34;&gt;LWG ISsue 2268. Setting a default argument in the declaration of a member function &lt;code&gt;assign&lt;/code&gt; of &lt;code&gt;std::basic_string&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++14から(2)のオーバーロードに、&lt;code&gt;n = npos&lt;/code&gt;のデフォルト引数を追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/string/basic_string/assign.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/string/basic_string/assign.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;string&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class basic_string&#34;&gt;basic_string::&lt;/span&gt;assign&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; assign(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str);     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; assign(basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; str) noexcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++11&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; assign(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str,
                     size_type pos,
                     size_type n);                 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++03&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; assign(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str,
                     size_type pos,
                     size_type n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; npos);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++14&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; assign(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; charT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s, size_type n); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; assign(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; charT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s);              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; assign(size_type n, charT c);        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; assign(InputIterator first,
                     InputIterator last);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7)&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; assign(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;);     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8) C++11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;文字列の再代入を行う。&lt;/p&gt;
&lt;p&gt;この関数は、アロケータを除き、&lt;code&gt;basic_string&lt;/code&gt;クラスのコンストラクタと同様のパラメータを受け取り、再代入を行う。代入演算子が一つのパラメータしか扱えないため、複数パラメータによる代入として使用する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(3) : &lt;code&gt;pos &amp;lt;= str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;であること。&lt;/li&gt;
&lt;li&gt;(4) : &lt;code&gt;s&lt;/code&gt; は少なくとも &lt;code&gt;n&lt;/code&gt; の長さを持つ &lt;code&gt;charT&lt;/code&gt; 型の配列を指していること。&lt;/li&gt;
&lt;li&gt;(5) : &lt;code&gt;s&lt;/code&gt; は少なくとも &lt;code&gt;traits_type::length(s) + 1&lt;/code&gt; の長さを持つ &lt;code&gt;charT&lt;/code&gt; 型の配列を指していること。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : コピー代入。&lt;code&gt;str&lt;/code&gt;オブジェクトと同じ文字列を構築する。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;assign(str, 0, npos)&lt;/code&gt;と同等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(2) : ムーブ代入。&lt;code&gt;str&lt;/code&gt;オブジェクトが指すデータの所有権を自身に移動する。&lt;code&gt;str&lt;/code&gt;は未規定の値になる。&lt;/li&gt;
&lt;li&gt;(3) : &lt;code&gt;str&lt;/code&gt;オブジェクトの部分文字列のコピーから構築する。&lt;code&gt;str&lt;/code&gt;オブジェクトの&lt;code&gt;pos&lt;/code&gt;番目から&lt;code&gt;n&lt;/code&gt;文字の部分文字列がコピーされる。&lt;ul&gt;
&lt;li&gt;追加される文字列の長さ &lt;code&gt;rlen&lt;/code&gt; は、&lt;code&gt;n&lt;/code&gt; と &lt;code&gt;str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() - pos&lt;/code&gt; の小さい方である。 &lt;code&gt;n == npos&lt;/code&gt; の場合は、 &lt;code&gt;str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() - pos&lt;/code&gt; が使用される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assign(str.data() + pos, rlen)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(4) : 文字配列&lt;code&gt;s&lt;/code&gt;の先頭&lt;code&gt;n&lt;/code&gt;文字からなる部分文字列のコピーから構築する。&lt;/li&gt;
&lt;li&gt;(5) : 文字配列&lt;code&gt;s&lt;/code&gt;のコピーから構築する。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;assign(s,&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/char_traits/length.html&#34;&gt;&lt;code&gt;traits::length&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(s))&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(6) : 文字&lt;code&gt;c&lt;/code&gt;の&lt;code&gt;n&lt;/code&gt;回繰り返した文字列からなる&lt;code&gt;basic_string&lt;/code&gt;オブジェクトを構築する。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;assign(basic_string(n, c))&lt;/code&gt;と同等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(7) : 文字列の範囲&lt;code&gt;[begin, end)&lt;/code&gt;から&lt;code&gt;basic_string&lt;/code&gt;オブジェクトを構築する。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;assign(basic_string(first, last))&lt;/code&gt;と同等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(8) : 文字の初期化子リストから&lt;code&gt;basic_string&lt;/code&gt;オブジェクトを構築する。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;assign(il.begin(), il.end())&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(3) : &lt;code&gt;pos &amp;gt; str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;である場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;&lt;code&gt;out_of_range&lt;/code&gt;&lt;/a&gt;例外を送出する&lt;/li&gt;
&lt;li&gt;(4) : &lt;code&gt;n &amp;gt;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/max_size.html&#34;&gt;&lt;code&gt;max_size()&lt;/code&gt;&lt;/a&gt;である場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;&lt;code&gt;length_error&lt;/code&gt;&lt;/a&gt;例外を送出する&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) コピー代入&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s1;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s1_tmp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;;
  s1.assign(s1_tmp);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;s1 : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) ムーブ代入&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s2;
  s2.assign(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;));
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;s2 : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) 部分文字列のコピーを代入&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// s2文字列オブジェクトの1番目の文字から3文字&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s3;
  s3.assign(s2, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;s3 : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s3 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) 文字配列の先頭N文字を代入&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s4;
  s4.assign(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;s4 : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s4 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5) 文字配列を代入&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s5;
  s5.assign(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;s5 : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s5 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6) 文字をN回繰り返して代入&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s6;
  s6.assign(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;s6 : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s6 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7) 文字列の範囲を代入&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s7;
  s7.assign(s1.begin(), s1.end());
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;s7 : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s7 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8) 文字の初期化子リストを代入&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s8;
  s8.assign({&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;h&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;e&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;l&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;l&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;o&#39;&lt;/span&gt;});
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;s8 : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s8 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;s1 : hello
s2 : hello
s3 : ell
s4 : hel
s5 : hello
s6 : aaa
s7 : hello
s8 : hello
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(7)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2268&#34; target=&#34;_blank&#34;&gt;LWG ISsue 2268. Setting a default argument in the declaration of a member function &lt;code&gt;assign&lt;/code&gt; of &lt;code&gt;std::basic_string&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++14から(3)のオーバーロードに、&lt;code&gt;n = npos&lt;/code&gt;のデフォルト引数を追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/string/basic_string/op_assign.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/string/basic_string/op_assign.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;string&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class basic_string&#34;&gt;basic_string::&lt;/span&gt;operator=&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str);
basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; str) noexcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11から&lt;/span&gt;
basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; charT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s);
basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(charT c);
basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11から&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;basic_string&amp;amp; operator=(const basic_string&amp;amp; str);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;str&lt;/code&gt; を &lt;code&gt;*this&lt;/code&gt; へコピーする。&lt;code&gt;*this&lt;/code&gt; と &lt;code&gt;str&lt;/code&gt; が同一オブジェクトである場合は何も行わない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;basic_string&amp;amp; operator=(basic_string&amp;amp;&amp;amp; str) noexcept;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;str&lt;/code&gt; から &lt;code&gt;*this&lt;/code&gt; へデータの所有権を移動する。&lt;code&gt;*this&lt;/code&gt; と &lt;code&gt;str&lt;/code&gt; が同一オブジェクトである場合は何も行わない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;basic_string&amp;amp; operator=(const charT* s);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;*this = basic_string(s);&lt;/code&gt; と等価。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;basic_string&amp;amp; operator=(charT c);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;*this = basic_string(1, c);&lt;/code&gt; と等価。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;basic_string&amp;amp; operator=(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;&lt;code&gt;initializer_list&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;charT&amp;gt; il);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;*this = basic_string(il);&lt;/code&gt; と等価。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;コピーを行った場合と、ムーブ代入を行った場合で効果が異なる&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;メンバ関数&lt;/th&gt;
&lt;th&gt;コピーの場合&lt;/th&gt;
&lt;th&gt;ムーブ代入の場合&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;data()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;str.data()&lt;/code&gt; をコピーした領域の先頭ポインタ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;str.data()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; と同じ値&lt;/td&gt;
&lt;td&gt;&lt;code&gt;str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;と同じ値&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/capacity.html&#34;&gt;&lt;code&gt;capacity()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; 以上の値&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; 以上の値&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;ムーブ代入の場合は例外を投げない。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// basic_string左辺値の代入&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string r &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;;
    s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; r;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// basic_string右辺値の代入&lt;/span&gt;
  {
    s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字配列の代入&lt;/span&gt;
  {
    s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字の代入&lt;/span&gt;
  {
    s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字の初期化子リストを代入&lt;/span&gt;
  {
    s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;h&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;e&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;l&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;l&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;o&#39;&lt;/span&gt;};
  }

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;hello
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/string/basic_string/op_constructor.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/string/basic_string/op_constructor.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;string&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class basic_string&#34;&gt;basic_string::&lt;/span&gt;コンストラクタ&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;basic_string();                                          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++14&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;basic_string&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;);                 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;basic_string&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator()); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) + (2) C++03&lt;/span&gt;

basic_string(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str);                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
basic_string(basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; str) noexcept;               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++11&lt;/span&gt;

basic_string(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str,
             size_type pos,
             size_type n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; npos,
             &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;

basic_string(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; charT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s,
             size_type n,
             &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;

basic_string(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; charT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s,
             &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7)&lt;/span&gt;

basic_string(size_type n,
             charT c,
             &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
basic_string(InputIterator begin, InputIterator end,
             &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (9)&lt;/span&gt;

basic_string(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init,
             &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (10) C++11&lt;/span&gt;

basic_string(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (11) C++11&lt;/span&gt;
basic_string(basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; str, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;);      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (12) C++11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : デフォルトコンストラクタ。空の&lt;code&gt;basic_string&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(2) : アロケータを受け取るデフォルトコンストラクタ。空の&lt;code&gt;basic_string&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(3) : コピーコンストラクタ。&lt;code&gt;str&lt;/code&gt;オブジェクトと同じ文字列を構築する。&lt;/li&gt;
&lt;li&gt;(4) : ムーブコンストラクタ。&lt;code&gt;str&lt;/code&gt;オブジェクトが指すデータの所有権を自身に移動する。&lt;code&gt;str&lt;/code&gt;は未規定の値になる。&lt;/li&gt;
&lt;li&gt;(5) : &lt;code&gt;str&lt;/code&gt;オブジェクトの部分文字列のコピーから&lt;code&gt;basic_string&lt;/code&gt;オブジェクトを構築する。&lt;code&gt;str&lt;/code&gt;オブジェクトの&lt;code&gt;pos&lt;/code&gt;番目から&lt;code&gt;n&lt;/code&gt;文字の部分文字列がコピーされる。&lt;/li&gt;
&lt;li&gt;(6) : 文字配列&lt;code&gt;s&lt;/code&gt;の先頭&lt;code&gt;n&lt;/code&gt;文字からなる部分文字列のコピーから&lt;code&gt;basic_string&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(7) : 文字配列&lt;code&gt;s&lt;/code&gt;のコピーから&lt;code&gt;basic_string&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(8) : 文字&lt;code&gt;c&lt;/code&gt;の&lt;code&gt;n&lt;/code&gt;回繰り返した文字列からなる&lt;code&gt;basic_string&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(9) : 文字列の範囲&lt;code&gt;[begin, end)&lt;/code&gt;から&lt;code&gt;basic_string&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(10) : 文字の初期化子リストから&lt;code&gt;basic_string&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(11) : アロケータを受け取るコピーコンストラクタ。&lt;/li&gt;
&lt;li&gt;(12) : アロケータを受け取るムーブコンストラクタ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(6)&lt;ul&gt;
&lt;li&gt;C++11 : &lt;code&gt;s&lt;/code&gt;がヌルポインタではないこと。&lt;code&gt;n &amp;lt; npos&lt;/code&gt;であること。&lt;/li&gt;
&lt;li&gt;C++14 : &lt;code&gt;s&lt;/code&gt;は、&lt;code&gt;charT&lt;/code&gt;型の要素を少なくても&lt;code&gt;n&lt;/code&gt;個を持つ配列を指していること。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(7)&lt;ul&gt;
&lt;li&gt;C++11 : &lt;code&gt;s&lt;/code&gt;がヌルポインタではないこと。&lt;/li&gt;
&lt;li&gt;C++14 : &lt;code&gt;s&lt;/code&gt;は、&lt;code&gt;charT&lt;/code&gt;型の要素を少なくても&lt;a href=&#34;http://cpprefjp.github.io/reference/string/char_traits/length.html&#34;&gt;&lt;code&gt;traits::length&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(s) + 1&lt;/code&gt;個持つ配列を指していること。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(12) : &lt;code&gt;alloc == str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator()&lt;/code&gt;&lt;/a&gt;の場合、例外を投げない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;C++14 では、&lt;code&gt;explicit basic_string(const Allocator&amp;amp; a = Allocator())&lt;/code&gt; がデフォルト引数を使用しない 2 つのオーバーロードに分割された。&lt;br /&gt;
    これは、デフォルトコンストラクタに &lt;code&gt;explicit&lt;/code&gt; が付いていると、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;のようなコード（C++11 から導入された、コピーリスト初期化によるデフォルトコンストラクタ呼び出し）がエラーになってしまうためである。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// デフォルト構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s1;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;s1 : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字配列からの構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;s2 : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コピー構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s2;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;s3 : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s3 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ムーブ構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s4 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(s3);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;s4 : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s4 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 部分文字列のコピーから構築&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// s4文字列オブジェクトの1番目の文字から3文字&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s5(s4, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;s5 : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s5 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字配列の先頭N文字から構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s6(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;s6 : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s6 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字をN回繰り返して構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s7(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;s7 : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s7 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字列の範囲から構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s8(s4.begin(), s4.end());
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;s8 : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s8 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字の初期化子リストから構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s9 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;h&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;e&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;l&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;l&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;o&#39;&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;s9 : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s9 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;s1 : 
s2 : hello
s3 : hello
s4 : hello
s5 : ell
s6 : hel
s7 : aaa
s8 : hello
s9 : hello
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(10)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2069&#34; target=&#34;_blank&#34;&gt;LWG Issue 2069. Inconsistent exception spec for &lt;code&gt;basic_string&lt;/code&gt; move constructor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2193&#34; target=&#34;_blank&#34;&gt;LWG Issue 2193. Default constructors for standard library containers are explicit&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;explicit basic_string(const Allocator&amp;amp; a = Allocator())&lt;/code&gt; を 2 つのオーバーロードに分割するきっかけとなったレポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2235&#34; target=&#34;_blank&#34;&gt;LWG Issue 2235. Undefined behavior without proper requirements on &lt;code&gt;basic_string&lt;/code&gt; constructors&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++14で、(6)と(7)の要件を見直した。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator+= -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/string/basic_string/op_plus_assign.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/string/basic_string/op_plus_assign.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;string&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class basic_string&#34;&gt;basic_string::&lt;/span&gt;operator+=&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str);      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; charT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s);               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt;(charT c);                      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il);   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++11 から&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;指定された文字列、文字、あるいは初期化リストを追加する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;s&lt;/code&gt; は少なくとも &lt;code&gt;traits_type::length(s) + 1&lt;/code&gt; の長さを持つ &lt;code&gt;charT&lt;/code&gt; 型の配列を指していること。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1) 対象オブジェクトの末尾に &lt;code&gt;str&lt;/code&gt; の値が追加（コピー）される。&lt;br /&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/append.html&#34;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(str)&lt;/code&gt; と同一。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) 対象オブジェクトの末尾に &lt;code&gt;s&lt;/code&gt; から始まる NULL で終端された文字列が追加される。&lt;br /&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/append.html&#34;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;&lt;code&gt;basic_string&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;value_type, traits_type, allocator_type&amp;gt;(s))&lt;/code&gt;（C++03 まで）、あるいは、&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/append.html&#34;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(s)&lt;/code&gt;（C++11 から）と同一。&lt;br /&gt;
    なお、&lt;code&gt;s&lt;/code&gt; から始まる NULL 終端された文字列の長さは、&lt;code&gt;traits_type::length(s)&lt;/code&gt; で求められる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3) 対象オブジェクトの末尾に文字 &lt;code&gt;c&lt;/code&gt; が追加される。&lt;br /&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/append.html&#34;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;&lt;code&gt;basic_string&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;value_type, traits_type, allocator_type&amp;gt;(1, c))&lt;/code&gt; と同一。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(4) 対象オブジェクトの末尾に初期化リスト &lt;code&gt;il&lt;/code&gt; で表された文字列が追加される。&lt;br /&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/append.html&#34;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(il)&lt;/code&gt; と同一。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1) &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() + str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() + traits_type::length(s) &amp;gt;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3) &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() + 1 &amp;gt;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(4) &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() + il.size() &amp;gt;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、&lt;code&gt;length_error&lt;/code&gt; が送出される。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;本メンバ関数の呼び出しによって、対象オブジェクトの要素への参照、ポインタ、および、イテレータは無効になる可能性がある。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt; s1(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hello&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt; s2(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt;);
  s1 &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt;&lt;/span&gt; s2;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  s1 &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;world&#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  s1 &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;!&#39;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  s1 &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt;&lt;/span&gt; { &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;:&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt; };
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Hello
Hello, 
Hello, world
Hello, world!
Hello, world! :)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/append.html&#34;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字／文字列を追加する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/push_back.html&#34;&gt;&lt;code&gt;push_back&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字を追加する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字／文字列を挿入する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/op_plus.html&#34;&gt;&lt;code&gt;operator+&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字列を連結する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(4)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>replace -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/string/basic_string/replace.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/string/basic_string/replace.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;string&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class basic_string&#34;&gt;basic_string::&lt;/span&gt;replace&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; replace(size_type pos1, size_type n1,
                      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str);                     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; replace(size_type pos1, size_type n1,
                      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str,
                      size_type pos2, size_type n2);                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++11まで&lt;/span&gt;
basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; replace(size_type pos1, size_type n1,
                      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str,
                      size_type pos2, size_type n2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; npos);         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14から&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; replace(size_type pos, size_type n1, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; charT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s,
                      size_type n2);                                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; replace(size_type pos, size_type n1, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; charT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; replace(size_type pos, size_type n1, size_type n2,
                      charT c);                                     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; replace(iterator i1, iterator i2,
                      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str);                     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6) C++03まで&lt;/span&gt;
basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; replace(const_iterator i1, const_iterator i2,
                      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str);                     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6) C++11から&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; replace(iterator i1, iterator i2,
                      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; charT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s, size_type n);                 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7) C++03まで&lt;/span&gt;
basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; replace(const_iterator i1, const_iterator i2,
                      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; charT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s, size_type n);                 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7) C++11から&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; replace(iterator i1, iterator i2,
                      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; charT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s);                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8) C++03まで&lt;/span&gt;
basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; replace(const_iterator i1, const_iterator i2,
                      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; charT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s);                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8) C++11から&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; replace(iterator i1, iterator i2,
                      size_type n, charT c);                        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (9) C++03まで&lt;/span&gt;
basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; replace(const_iterator i1, const_iterator i2,
                      size_type n, charT c);                        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (9) C++11から&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; replace(iterator i1, iterator i2,
                      InputIterator j1, InputIterator j2);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (10) C++03まで&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; replace(const_iterator i1, const_iterator i2,
                      InputIterator j1, InputIterator j2);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (10) C++11から&lt;/span&gt;

basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; replace(const_iterator i1, const_iterator i2,
                      initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il);                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (11) C++11から&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;文字列の一部を置換する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;code&gt;pos1 &amp;lt;=&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;pos1 &amp;lt;=&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;、および&lt;code&gt;pos2 &amp;lt;= str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;であること。&lt;/li&gt;
&lt;li&gt;(3) : &lt;code&gt;pos1 &amp;lt;=&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;、および文字配列へのポインタ&lt;code&gt;s&lt;/code&gt;が、少なくても&lt;code&gt;n2&lt;/code&gt;個の要素を持つ配列を指していること。&lt;/li&gt;
&lt;li&gt;(4) : &lt;code&gt;pos &amp;lt;=&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;、および文字配列へのポインタ&lt;code&gt;s&lt;/code&gt;が、少なくても&lt;a href=&#34;http://cpprefjp.github.io/reference/string/char_traits/length.html&#34;&gt;&lt;code&gt;traits::length&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(s) + 1&lt;/code&gt;個の要素を指す配列を指していること。&lt;/li&gt;
&lt;li&gt;(6) : &lt;code&gt;[&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/begin.html&#34;&gt;&lt;code&gt;begin()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;, i1)&lt;/code&gt;および&lt;code&gt;[i1, i2)&lt;/code&gt;が有効は範囲であること。&lt;/li&gt;
&lt;li&gt;(7) : &lt;code&gt;[&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/begin.html&#34;&gt;&lt;code&gt;begin()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;, i1)&lt;/code&gt;および&lt;code&gt;[i1, i2)&lt;/code&gt;が有効は範囲であること。また、文字配列へのポインタ&lt;code&gt;s&lt;/code&gt;が、少なくても&lt;code&gt;n&lt;/code&gt;個の要素を持つ配列を指していること。&lt;/li&gt;
&lt;li&gt;(8) : &lt;code&gt;[&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/begin.html&#34;&gt;&lt;code&gt;begin()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;, i1)&lt;/code&gt;および&lt;code&gt;[i1, i2)&lt;/code&gt;が有効は範囲であること。および文字配列へのポインタ&lt;code&gt;s&lt;/code&gt;が、少なくても&lt;a href=&#34;http://cpprefjp.github.io/reference/string/char_traits/length.html&#34;&gt;&lt;code&gt;traits::length&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(s) + 1&lt;/code&gt;個の要素を指す配列を指していること。&lt;/li&gt;
&lt;li&gt;(9) : &lt;code&gt;[&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/begin.html&#34;&gt;&lt;code&gt;begin()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;, i1)&lt;/code&gt;および&lt;code&gt;[i1, i2)&lt;/code&gt;が有効は範囲であること。&lt;/li&gt;
&lt;li&gt;(10) : &lt;code&gt;[&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/begin.html&#34;&gt;&lt;code&gt;begin()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;, i1)&lt;/code&gt;、&lt;code&gt;[i1, i2)&lt;/code&gt;、および&lt;code&gt;[j1, j2)&lt;/code&gt;が有効は範囲であること。&lt;/li&gt;
&lt;li&gt;(11) : &lt;code&gt;[&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/begin.html&#34;&gt;&lt;code&gt;begin()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;, i1)&lt;/code&gt;および&lt;code&gt;[i1, i2)&lt;/code&gt;が有効は範囲であること。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;code&gt;replace(pos1, n1, str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/data.html&#34;&gt;&lt;code&gt;data()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;, str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;li&gt;(2) :&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n2&lt;/code&gt;と&lt;code&gt;str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;- pos2&lt;/code&gt;のうち小さい方を&lt;code&gt;rlen&lt;/code&gt;とする。&lt;code&gt;n == npos&lt;/code&gt; の場合は、 &lt;code&gt;str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() - pos2&lt;/code&gt; が使用される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;replace(pos1, n1, str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/data.html&#34;&gt;&lt;code&gt;data()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;+ pos2, rlen)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(3) : &lt;code&gt;n1&lt;/code&gt;と&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;- pos1&lt;/code&gt;のうち小さい方を&lt;code&gt;xlen&lt;/code&gt;とし、自身の&lt;code&gt;pos1&lt;/code&gt;番目から&lt;code&gt;xlen&lt;/code&gt;個の要素を、文字配列&lt;code&gt;s&lt;/code&gt;の先頭&lt;code&gt;n2&lt;/code&gt;文字で置き換える。&lt;/li&gt;
&lt;li&gt;(4) : &lt;code&gt;replace(pos, n, s,&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/char_traits/length.html&#34;&gt;&lt;code&gt;traits::length&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(s))&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;li&gt;(5) : &lt;code&gt;replace(pos1, n1, basic_string(n2, c))&lt;/code&gt;と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;(6) : &lt;code&gt;replace(i1 -&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/begin.html&#34;&gt;&lt;code&gt;begin()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;, i2 - i1, str)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;li&gt;(7) : &lt;code&gt;replace(i1 -&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/begin.html&#34;&gt;&lt;code&gt;begin()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;, i2 - i1, s, n)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;li&gt;(8) : &lt;code&gt;replace(i1 -&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/begin.html&#34;&gt;&lt;code&gt;begin()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;, i2 - i1, s,&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/char_traits.html&#34;&gt;&lt;code&gt;traits::length&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(s))&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;li&gt;(9) : &lt;code&gt;replace(i1 -&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/begin.html&#34;&gt;&lt;code&gt;begin()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;, i2 - i1, basic_string(n, c))&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;li&gt;(10) : &lt;code&gt;replace(i1 -&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/begin.html&#34;&gt;&lt;code&gt;begin()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;, i2 - i1, basic_string(j1, j2))&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;li&gt;(11) : &lt;code&gt;replace(i1 -&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/begin.html&#34;&gt;&lt;code&gt;begin()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;, i2 - i1, il.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/begin.html&#34;&gt;&lt;code&gt;begin()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;, il.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;code&gt;pos1 &amp;gt;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;の場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;&lt;code&gt;out_of_range&lt;/code&gt;&lt;/a&gt;例外を送出する。&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;pos1 &amp;gt;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;もしくは&lt;code&gt;pos1 &amp;gt; str.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;である場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;&lt;code&gt;out_of_range&lt;/code&gt;&lt;/a&gt;例外を送出する。&lt;/li&gt;
&lt;li&gt;(3) : &lt;code&gt;pos1 &amp;gt;&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;の場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;&lt;code&gt;out_of_range&lt;/code&gt;&lt;/a&gt;例外を送出する。また、置き換え結果の文字列が&lt;code&gt;max_size()&lt;/code&gt;を超えた場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;&lt;code&gt;length_error&lt;/code&gt;&lt;/a&gt;例外を送出する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) 指定した位置からN文字を、文字列で置き換える&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;12345&#34;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;abcde&#34;&lt;/span&gt;;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 1番目から2文字を、s2文字列で置き換える&lt;/span&gt;
    s1.replace(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, s2);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(1) : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) 指定した一からN文字を、文字列の一部で置き換える&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;12345&#34;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;abcde&#34;&lt;/span&gt;;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 1番目から2文字を、s2.substr(2, 3)で置き換える&lt;/span&gt;
    s1.replace(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, s2, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(2) : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) 指定した位置からN文字を、文字配列の先頭M文字で置き換える&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;12345&#34;&lt;/span&gt;;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 1番目から2文字を、&#34;abcde&#34;の先頭3文字で置き換える&lt;/span&gt;
    s1.replace(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;abcde&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(3) : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) 指定した位置からN文字を、文字配列で置き換える&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;12345&#34;&lt;/span&gt;;

    s.replace(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;abcde&#34;&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(4) : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5) 指定した位置からN文字を、M個の文字で置き換える&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;12345&#34;&lt;/span&gt;;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 1番目から2文字を、3個の&#39;x&#39;で置き換える&lt;/span&gt;
    s.replace(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;x&#39;&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(5) : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6) 指定したイテレータ範囲を、文字列で置き換える&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;12345&#34;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;abcde&#34;&lt;/span&gt;;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &#39;2&#39;から&#39;3&#39;をs2で置き換える&lt;/span&gt;
    s1.replace(s1.begin() &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, s1.begin() &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, s2);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(6) : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7) 指定したイテレータ範囲を、文字配列の先頭N文字で置き換える&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;12345&#34;&lt;/span&gt;;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &#39;2&#39;から&#39;3&#39;を、&#34;abcde&#34;の先頭3文字で置き換える&lt;/span&gt;
    s.replace(s.begin() &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, s.begin() &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;abcde&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(7) : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8) 指定したイテレータ範囲を、文字配列で置き換える&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;12345&#34;&lt;/span&gt;;

    s.replace(s.begin() &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, s.begin() &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;abcde&#34;&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(8) : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (9) 指定したイテレータ範囲を、N個の文字で置き換える&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;12345&#34;&lt;/span&gt;;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &#39;2&#39;から&#39;3&#39;を、3個の&#39;x&#39;で置き換える&lt;/span&gt;
    s.replace(s.begin() &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, s.begin() &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;x&#39;&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(9) : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (10) 指定したイテレータ範囲を、他のイテレータ文字範囲で置き換える&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;12345&#34;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;abcde&#34;&lt;/span&gt;;

    s1.replace(s1.begin() &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, s1.begin() &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, s2.begin(), s2.end());

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(10) : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (11) 指定したイテレータ範囲を、文字の初期化子リストで置き換える&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;12345&#34;&lt;/span&gt;;

    s.replace(s.begin() &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, s.begin() &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;c&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;d&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;e&#39;&lt;/span&gt;});

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(11) : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(1) : 1abcde45
(2) : 1cde45
(3) : 1abc45
(4) : 1abcde45
(5) : 1xxx45
(6) : 1abcde45
(7) : 1abc45
(8) : 1abcde45
(9) : 1xxx45
(10) : 1abcde45
(11) : 1abcde45
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(11)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2268&#34; target=&#34;_blank&#34;&gt;LWG ISsue 2268. Setting a default argument in the declaration of a member function &lt;code&gt;assign&lt;/code&gt; of &lt;code&gt;std::basic_string&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++14から(2)のオーバーロードに、&lt;code&gt;n = npos&lt;/code&gt;のデフォルト引数を追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sleep_for (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/thread/this_thread/sleep_for.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/thread/this_thread/sleep_for.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;thread&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std::this_thread&#34;&gt;std::this_thread::&lt;/span&gt;sleep_for (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; this_thread {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Rep&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Period&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; sleep_for(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; chrono&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/duration.html&#34;&gt;duration&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Rep, Period&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; rel_time);
}}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;指定した相対時間だけ現スレッドをブロックする。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;引数 &lt;code&gt;rel_time&lt;/code&gt;で指定した相対時間だけ現在のスレッド、すなわちこの関数を呼び出したスレッド自身をブロックする。指定した相対時間&lt;i&gt;以上&lt;/i&gt;の時間が経過すると、現スレッドのブロックが解除されて後続処理の実行が開始される。なお、タイマーの精度は処理系依存。&lt;/p&gt;
&lt;h2&gt;同期&lt;/h2&gt;
&lt;p&gt;特に他操作と同期しない。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11 : &lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/duration.html&#34;&gt;&lt;code&gt;chrono::duration&amp;lt;Rep, Period&amp;gt;&lt;/code&gt;&lt;/a&gt;オブジェクトから例外送出しない限りは、この関数は例外送出しない。&lt;/li&gt;
&lt;li&gt;C++14 : 時計クラス、&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/time_point.html&#34;&gt;&lt;code&gt;time_point&lt;/code&gt;&lt;/a&gt;クラス、&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/duration.html&#34;&gt;&lt;code&gt;duration&lt;/code&gt;&lt;/a&gt;クラスの構築が例外を送出する場合、この関数はそれらの例外を送出する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;thread&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3分間 現スレッドをブロック(Sleep)&lt;/span&gt;
  &lt;span style=&#34;color:#ff0000&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;this_thread&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sleep_for&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;minutes(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.6.3, 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2661.htm&#34; target=&#34;_blank&#34;&gt;N2661 A Foundation to Sleep On&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2093&#34; target=&#34;_blank&#34;&gt;LWG Issue 2093. Throws clause of &lt;code&gt;condition_variable::wait&lt;/code&gt; with predicate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sleep_until (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/thread/this_thread/sleep_until.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/thread/this_thread/sleep_until.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;thread&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std::this_thread&#34;&gt;std::this_thread::&lt;/span&gt;sleep_until (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; this_thread {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Clock&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Duration&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; sleep_until(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; chrono&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/time_point.html&#34;&gt;time_point&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Clock, Duration&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; abs_time);
}}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;指定した絶対時刻を過ぎるまで現スレッドをブロックする。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;引数 &lt;code&gt;abs_time&lt;/code&gt;で指定した絶対時間を経過するまで現在のスレッド、すなわちこの関数を呼び出したスレッド自身をブロックする。指定した絶対時間&lt;i&gt;以上&lt;/i&gt;の時刻になると、現スレッドのブロックが解除されて後続処理の実行が開始される。なお、タイマーの精度は処理系依存。&lt;/p&gt;
&lt;h2&gt;同期&lt;/h2&gt;
&lt;p&gt;特に他操作と同期しない。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11 : &lt;code&gt;Clock&lt;/code&gt;がTrivialClock要件を満たしかつ&lt;code&gt;Duration&lt;/code&gt;上の操作が例外送出しない限りは、この関数は例外送出しない。&lt;/li&gt;
&lt;li&gt;C++14 : 時計クラス、&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/time_point.html&#34;&gt;&lt;code&gt;time_point&lt;/code&gt;&lt;/a&gt;クラス、&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/duration.html&#34;&gt;&lt;code&gt;duration&lt;/code&gt;&lt;/a&gt;クラスの構築が例外を送出する場合、この関数はそれらの例外を送出する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;thread&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; abs_time &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/system_clock/now.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system_clock&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;now&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;seconds(&lt;span style=&#34;color: #666666&#34;&gt;15&lt;/span&gt;);
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;
  &lt;span style=&#34;color:#ff0000&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;this_thread&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sleep_until&lt;/span&gt;(abs_time);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.6.3, 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2661.htm&#34; target=&#34;_blank&#34;&gt;N2661 A Foundation to Sleep On&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2093&#34; target=&#34;_blank&#34;&gt;LWG Issue 2093. Throws clause of &lt;code&gt;condition_variable::wait&lt;/code&gt; with predicate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_type (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/type_traits/common_type.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/type_traits/common_type.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;common_type (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Types&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; common_type {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;…&lt;/span&gt; type;
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;common_type_t&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; common_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;変換可能な共通の型を取得する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Types...&lt;/code&gt;の全ての型は完全型であるか、&lt;code&gt;const/volatile&lt;/code&gt;修飾された(あるいはされていない)&lt;code&gt;void&lt;/code&gt;でなければならない。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;common_type&lt;/code&gt;は、&lt;code&gt;Types...&lt;/code&gt;に含まれる全ての型が暗黙変換可能な型を、メンバ型&lt;code&gt;type&lt;/code&gt;として定義する。  &lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;type_traits&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 2つの値どちらが小さいかを返すアルゴリズム&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 型Tと型Uの共通の型を戻り値型にする&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;common_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T, U&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type
  generic_min(T t, U u)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; t &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; u &lt;span style=&#34;color: #666666&#34;&gt;?&lt;/span&gt; t &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; u;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; generic_min(&lt;span style=&#34;color: #666666&#34;&gt;3L&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);

  static_assert(
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_same&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;decltype(x), &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;,
    &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;type of x is long&#34;&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;定義(C++11)&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; common_type;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; common_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; T type;
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; common_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T, U&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; decltype(&lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;?&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/declval.html&#34;&gt;declval&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/declval.html&#34;&gt;declval&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;U&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;()) type;
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U&lt;/span&gt;, class... V&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; common_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T, U, V...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; common_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; common_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T, U&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type, V...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type type;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;定義(C++14)&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; common_type;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;common_type_t&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; common_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; common_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/decay.html&#34;&gt;decay_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; type;
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; common_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T, U&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/decay.html&#34;&gt;decay_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;decltype(&lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;?&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/declval.html&#34;&gt;declval&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/declval.html&#34;&gt;declval&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;U&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;())&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; type;
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U&lt;/span&gt;, class... V&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; common_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T, U, V...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;common_type_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;common_type_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T, U&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;, V...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; type;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 3.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.4.7&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2661.htm&#34; target=&#34;_blank&#34;&gt;N2661 A Foundation to Sleep On&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3546.pdf&#34; target=&#34;_blank&#34;&gt;N3546 TransformationTraits Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3655.pdf&#34; target=&#34;_blank&#34;&gt;N3655 TransformationTraits Redux, v2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2141&#34; target=&#34;_blank&#34;&gt;LWG Issue 2141. &lt;code&gt;common_type&lt;/code&gt; trait produces reference types&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11では、&lt;code&gt;common_type&lt;/code&gt;の結果が参照型になる場合があった。C++14で&lt;code&gt;decay_t&lt;/code&gt;を通すことにしたことにより、参照型が返されることがなくなった。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_map/emplace.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/unordered_map/unordered_map/emplace.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class unordered_map&#34;&gt;unordered_map::&lt;/span&gt;emplace (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;iterator, &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; emplace(Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;コンテナ内へ要素を直接構築する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;このコンテナの要素型 &lt;code&gt;value_type&lt;/code&gt; は、コンテナに対して引数 &lt;code&gt;args&lt;/code&gt; から直接構築可能（EmplaceConstructible）でなければならない。&lt;/p&gt;
&lt;p&gt;ここで、コンテナに対して引数 &lt;code&gt;args&lt;/code&gt; から直接構築可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の左辺値、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタとすると、以下の式が適格（well-formed）であるということである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args)...);&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt; から構築された &lt;code&gt;value_type&lt;/code&gt; のオブジェクトを &lt;code&gt;t&lt;/code&gt; とすると、&lt;code&gt;t.first&lt;/code&gt; と等価なキーがコンテナに既に存在していなければ、&lt;code&gt;t&lt;/code&gt; をコンテナに挿入する。&lt;/p&gt;
&lt;p&gt;なお、オブジェクト &lt;code&gt;t&lt;/code&gt; は、構築後にコンテナにコピー、あるいはムーブされるわけではなく、コンテナ内に直接構築される。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt; の &lt;code&gt;bool&lt;/code&gt; 部分（&lt;code&gt;second&lt;/code&gt; 部）は、要素が追加されたら &lt;code&gt;true&lt;/code&gt;、追加されなかったら（既にあったら）&lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt; の &lt;code&gt;iterator&lt;/code&gt; 部分（&lt;code&gt;first&lt;/code&gt; 部）は、追加された要素（&lt;code&gt;bool&lt;/code&gt; 部分が &lt;code&gt;true&lt;/code&gt; の場合）、あるいは、既にあった要素（&lt;code&gt;bool&lt;/code&gt; 部分が &lt;code&gt;false&lt;/code&gt; の場合）を指すイテレータ。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;ハッシュ関数以外から例外が投げられた場合には、挿入はされない。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;平均的なケースでは定数（O(&lt;code&gt;1&lt;/code&gt;)）だが、最悪のケースではコンテナの要素数に比例（O(&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)）。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;この関数が呼ばれた後も、当該コンテナ内の要素を指す参照は無効にはならない。&lt;br /&gt;
    なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;この関数が呼ばれた後も、呼び出しの前後でこのコンテナのバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）が変わらなかった場合には当該コンテナを指すイテレータは無効にはならない。
    それ以外の場合は、当該コンテナを指すイテレータは無効になる可能性がある。&lt;br /&gt;
    コンテナのバケット数が変わらない場合とは、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;追加しようとした要素と等価なキーの要素が既にコンテナに存在したため、要素が追加されなかった（つまり、戻り値の &lt;code&gt;pair&lt;/code&gt; の &lt;code&gt;bool&lt;/code&gt; 部分が、&lt;code&gt;false&lt;/code&gt; だった）。&lt;/li&gt;
&lt;li&gt;要素追加後の要素数が、要素追加前のバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）×最大負荷率（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）よりも小さかった。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;のいずれかである。&lt;br /&gt;
なお、後者の条件は「よりも小さい」となっているが、最大負荷率の定義からすると「以下」の方が適切と思われる。&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt; も参照。
- このメンバ関数は、コンテナの種類によってシグネチャが異なるため、注意が必要である。&lt;br /&gt;
&lt;code&gt;emplace_hint&lt;/code&gt; も含めた一覧を以下に示す。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;シーケンスコンテナ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace(const_iterator, Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;br /&gt;（同一キーの重複を許さない場合）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;pair&amp;lt;iterator, bool&amp;gt; emplace(Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;br /&gt;（同一キーの重複を許す場合）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace(Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace_hint(const_iterator, Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;unordered_map&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex.html&#34;&gt;complex&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple.html&#34;&gt;tuple&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility.html&#34;&gt;utility&lt;/a&gt;&amp;gt;    &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// for std::&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;algorithm&lt;/a&gt;&amp;gt;  &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// for std::&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/for_each.html&#34;&gt;for_each&lt;/a&gt;&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サンプル用typedef&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex.html&#34;&gt;complex&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; sc;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サンプル用typedefのための挿入演算子&lt;/span&gt;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; sc&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;{&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;}&#39;&lt;/span&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;unordered_map&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex.html&#34;&gt;complex&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; um;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; p1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;e&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2.718281828&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p1.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p1.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; p2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;pi&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3.14159265&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p2.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p2.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; p3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;pi&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p3.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p3.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; p4 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/piecewise_construct.html&#34;&gt;piecewise_construct&lt;/a&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/forward_as_tuple.html&#34;&gt;forward_as_tuple&lt;/a&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;i&#34;&lt;/span&gt;), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/forward_as_tuple.html&#34;&gt;forward_as_tuple&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;));
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p4.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p4.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/for_each.html&#34;&gt;for_each&lt;/a&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cend.html&#34;&gt;cend&lt;/a&gt;(), [](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; decltype(um)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt;;
  });
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;{e,(2.71828,0)} true
{pi,(3.14159,0)} true
{pi,(3.14159,0)} false
{i,(0,1)} true
{pi,(3.14159,0)}, {i,(0,1)}, {e,(2.71828,0)},
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;注：&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map.html&#34;&gt;&lt;code&gt;unordered_map&lt;/code&gt;&lt;/a&gt; は非順序連想コンテナであるため、出力順序は無意味であることに注意&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/emplace_hint.html&#34;&gt;&lt;code&gt;emplace_hint&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;挿入位置のヒントを使用したコンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の追加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;内容の交換&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;バケット数の取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/load_factor.html&#34;&gt;&lt;code&gt;load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;現在の負荷率（バケットあたりの要素数の平均）を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;負荷率の最大値を取得、設定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/rehash.html&#34;&gt;&lt;code&gt;rehash&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小バケット数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小要素数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2680.pdf&#34; target=&#34;_blank&#34;&gt;N2680 Proposed Wording for Placement Insert (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace_hint (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_map/emplace_hint.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/unordered_map/unordered_map/emplace_hint.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class unordered_map&#34;&gt;unordered_map::&lt;/span&gt;emplace_hint (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator emplace_hint(const_iterator position, Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;挿入位置のヒントを使用してコンテナ内へ要素を直接構築する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;このコンテナの要素型 &lt;code&gt;value_type&lt;/code&gt; は、コンテナに対して引数 &lt;code&gt;args&lt;/code&gt; から直接構築可能（EmplaceConstructible）でなければならない。&lt;br /&gt;
    ここで、コンテナに対して引数 &lt;code&gt;args&lt;/code&gt; から直接構築可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の左辺値、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタとすると、以下の式が適格（well-formed）であるということである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args)...);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引数 &lt;code&gt;position&lt;/code&gt; は、コンテナの有効な読み取り専用イテレータでなければならないが、間接参照可能（dereferenceable）である必要はない。（つまり、最終要素の次を指すイテレータでも良い）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt; から構築された &lt;code&gt;value_type&lt;/code&gt; のオブジェクトを &lt;code&gt;t&lt;/code&gt; とすると、&lt;code&gt;t.first&lt;/code&gt; と等価なキーがコンテナに既に存在していなければ、&lt;code&gt;t&lt;/code&gt; をコンテナに挿入する。&lt;/p&gt;
&lt;p&gt;なお、オブジェクト &lt;code&gt;t&lt;/code&gt; は、構築後にコンテナにコピー、あるいはムーブされるわけではなく、コンテナ内に直接構築される。&lt;/p&gt;
&lt;p&gt;引数 &lt;code&gt;position&lt;/code&gt; は、要素の挿入位置を探し始める場所のヒントとして使用されるが、実装によって無視されるかもしれない。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;新たな要素が追加された場合、その追加された要素を指すイテレータ。新たな要素が追加されなかった場合、既にあった要素を指すイテレータ。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;ハッシュ関数以外から例外が投げられた場合には、挿入はされない。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;平均的なケースでは定数（O(&lt;code&gt;1&lt;/code&gt;)）だが、最悪のケースではコンテナの要素数に比例（O(&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)）。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;この関数が呼ばれた後も、当該コンテナ内の要素を指す参照は無効にはならない。&lt;br /&gt;
    なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;この関数が呼ばれた後も、呼び出しの前後でこのコンテナのバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）が変わらなかった場合には当該コンテナを指すイテレータは無効にはならない。
    それ以外の場合は、当該コンテナを指すイテレータは無効になる可能性がある。&lt;br /&gt;
    コンテナのバケット数が変わらない場合とは、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;追加しようとした要素と等価なキーの要素が既にコンテナに存在したため、要素が追加されなかった。&lt;/li&gt;
&lt;li&gt;要素追加後の要素数が、要素追加前のバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）×最大負荷率（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）よりも小さかった。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;のいずれかである。&lt;br /&gt;
なお、後者の条件は「よりも小さい」となっているが、最大負荷率の定義からすると「以下」の方が適切と思われる。&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt; も参照。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;このメンバ関数は、コンテナの種類によってシグネチャが異なるため、注意が必要である。&lt;br /&gt;
&lt;code&gt;emplace&lt;/code&gt; も含めた一覧を以下に示す。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;シーケンスコンテナ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace(const_iterator, Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;br /&gt;（同一キーの重複を許さない場合）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;pair&amp;lt;iterator, bool&amp;gt; emplace(Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;br /&gt;（同一キーの重複を許す場合）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace(Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace_hint(const_iterator, Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;unordered_map&lt;/code&gt; では、キーのハッシュ値に基づいて要素を格納するバケットを決定するため、&lt;code&gt;position&lt;/code&gt; を有効に使用することはできないものと思われる。
    実際、libstdc++、および、libc++ では &lt;code&gt;position&lt;/code&gt; は単に無視される。&lt;br /&gt;
    通常は、&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt; を使用した方が良いだろう。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;unordered_map&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex.html&#34;&gt;complex&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple.html&#34;&gt;tuple&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility.html&#34;&gt;utility&lt;/a&gt;&amp;gt;    &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// for std::&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;algorithm&lt;/a&gt;&amp;gt;  &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// for std::&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/for_each.html&#34;&gt;for_each&lt;/a&gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator.html&#34;&gt;iterator&lt;/a&gt;&amp;gt;   &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// for std::&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;next&lt;/a&gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;unordered_map&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex.html&#34;&gt;complex&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; um;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace_hint&lt;/span&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cend.html&#34;&gt;cend&lt;/a&gt;(), &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;e&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2.718281828&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;{&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it1&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it1&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;} at &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;distance&lt;/a&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), it1) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace_hint&lt;/span&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;pi&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3.14159265&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;{&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it2&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it2&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;} at &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;distance&lt;/a&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), it2) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace_hint&lt;/span&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;pi&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;{&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it3&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it3&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;} at &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;distance&lt;/a&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), it3) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it4 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace_hint&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;next&lt;/a&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/piecewise_construct.html&#34;&gt;piecewise_construct&lt;/a&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/forward_as_tuple.html&#34;&gt;forward_as_tuple&lt;/a&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;i&#34;&lt;/span&gt;), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple/forward_as_tuple.html&#34;&gt;forward_as_tuple&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;));
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;{&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it4&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it4&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;} at &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;distance&lt;/a&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), it4) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/for_each.html&#34;&gt;for_each&lt;/a&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cend.html&#34;&gt;cend&lt;/a&gt;(), [](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; decltype(um)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;{&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; v.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; v.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;}, &#34;&lt;/span&gt;;
  });
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;{e,(2.71828,0)} at 0
{pi,(3.14159,0)} at 0
{pi,(3.14159,0)} at 0
{i,(0,1)} at 1
{pi,(3.14159,0)}, {i,(0,1)}, {e,(2.71828,0)},
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;注：&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map.html&#34;&gt;&lt;code&gt;unordered_map&lt;/code&gt;&lt;/a&gt; は非順序連想コンテナであるため、出力順序は無意味であることに注意&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の追加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;内容の交換&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;バケット数の取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/load_factor.html&#34;&gt;&lt;code&gt;load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;現在の負荷率（バケットあたりの要素数の平均）を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最大負荷率を取得、設定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/rehash.html&#34;&gt;&lt;code&gt;rehash&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小バケット数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小要素数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2680.pdf&#34; target=&#34;_blank&#34;&gt;N2680 Proposed Wording for Placement Insert (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_map/insert.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/unordered_map/unordered_map/insert.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class unordered_map&#34;&gt;unordered_map::&lt;/span&gt;insert (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;iterator, &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; insert(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v);              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;P&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;iterator, &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; insert(P&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; obj);                          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(const_iterator position, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;P&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator insert(const_iterator position, P&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; obj);             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; insert(InputIterator first, InputIterator last);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il);                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;コンテナに要素を追加する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v&lt;/code&gt; を引数にとる形式（(1)、(3)）では、&lt;code&gt;value_type&lt;/code&gt; はコンテナに対してコピー挿入可能（CopyInsertable）でなければならない。&lt;br /&gt;
    コンテナに対してコピー挿入可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の左辺値、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタとすると、以下の式が適格（well-formed）であるということである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, v);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;obj&lt;/code&gt; を引数にとる形式（(2)、(4)）では、&lt;code&gt;value_type&lt;/code&gt; は引数 &lt;code&gt;obj&lt;/code&gt; からコンテナに対して直接構築可能（EmplaceConstructible）でなければならない。&lt;br /&gt;
    コンテナに対して直接構築可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の左辺値、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタとすると、以下の式が適格（well-formed）であるということである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;P&amp;gt;(obj));&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引数 &lt;code&gt;position&lt;/code&gt; は、コンテナの有効な読み取り専用イテレータでなければならない。&lt;br /&gt;
    なお、規格書では間接参照可能（dereferenceable）である必要があることになっているが、その必要はない（つまり、最終要素の次を指すイテレータでも良い）ものと思われる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引数 &lt;code&gt;first&lt;/code&gt;、および、&lt;code&gt;last&lt;/code&gt;は、入力イテレータの要件を満たし、かつ、範囲 &lt;code&gt;[first, last)&lt;/code&gt; が当該コンテナ&lt;strong&gt;以外を指す&lt;/strong&gt;有効な範囲でなければならない。&lt;br /&gt;
    また、引数 &lt;code&gt;first&lt;/code&gt;、および、&lt;code&gt;last&lt;/code&gt; を引数にとる形式（(5)）では、このコンテナの要素型 &lt;code&gt;value_type&lt;/code&gt; は、コンテナに対して &lt;code&gt;*first&lt;/code&gt; から直接構築可能（EmplaceConstructible）でなければならない。&lt;br /&gt;
    ここで、コンテナに対して &lt;code&gt;*first&lt;/code&gt; から直接構築可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の左辺値、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタとすると、以下の式が適格（well-formed）であるということである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, *first);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;なお、&lt;code&gt;first&lt;/code&gt;、および、&lt;code&gt;last&lt;/code&gt;は、規格書では &lt;code&gt;value_type&lt;/code&gt; を参照しなければならない（つまり、コンテナの &lt;code&gt;value_type&lt;/code&gt; と &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;&lt;code&gt;iterator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;decltype(first)&amp;gt;::value_type&lt;/code&gt; が同一の型でなければならない）ことになっているが、実際にはその必要はなく、上記の直接構築可能の要件を満たすだけで良いものと思われる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(6)の形式では、&lt;code&gt;value_type&lt;/code&gt; はコンテナに対してコピー挿入可能でなければならない。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   &lt;code&gt;v.first&lt;/code&gt; と等価なキーがコンテナに存在していなければ、当該要素を追加する。&lt;/li&gt;
&lt;li&gt;(2)   引数 &lt;code&gt;obj&lt;/code&gt; から構築されたオブジェクトを &lt;code&gt;v&lt;/code&gt; とすると、&lt;code&gt;v.first&lt;/code&gt; と等価なキーがコンテナに存在していなければ、当該要素を追加する。&lt;/li&gt;
&lt;li&gt;(3)   &lt;code&gt;v.first&lt;/code&gt; と等価なキーがコンテナに存在していなければ、当該要素を追加する。&lt;br /&gt;
    引数 &lt;code&gt;position&lt;/code&gt; は、要素の挿入位置を探し始める場所のヒントとして使用されるが、実装によって無視されるかもしれない。&lt;/li&gt;
&lt;li&gt;(4)   引数 &lt;code&gt;obj&lt;/code&gt; から構築されたオブジェクトを &lt;code&gt;v&lt;/code&gt; とすると、&lt;code&gt;v.first&lt;/code&gt; と等価なキーがコンテナに存在していなければ、当該要素を追加する。&lt;br /&gt;
    引数 &lt;code&gt;position&lt;/code&gt; は、要素の挿入位置を探し始める場所のヒントとして使用されるが、実装によって無視されるかもしれない。&lt;/li&gt;
&lt;li&gt;(5)   範囲 &lt;code&gt;[first, last)&lt;/code&gt; のすべての要素 &lt;code&gt;t&lt;/code&gt; に対して、&lt;code&gt;insert(t)&lt;/code&gt; を呼び出した場合と同等である（&lt;code&gt;*first&lt;/code&gt; の型によって (1)、あるいは(2)の形式が呼び出される）。&lt;/li&gt;
&lt;li&gt;(6)   (5)の形式を &lt;code&gt;insert(il.begin(), il.end())&lt;/code&gt; として呼び出した場合と同等である。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)、(2)   &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt; の &lt;code&gt;bool&lt;/code&gt; 部分（&lt;code&gt;second&lt;/code&gt; 部）は、要素が追加されたら &lt;code&gt;true&lt;/code&gt;、追加されなかったら（既にあったら）&lt;code&gt;false&lt;/code&gt;。&lt;br /&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt; の &lt;code&gt;iterator&lt;/code&gt; 部分（&lt;code&gt;first&lt;/code&gt; 部）は、追加された要素（&lt;code&gt;bool&lt;/code&gt; 部分が &lt;code&gt;true&lt;/code&gt; の場合）、あるいは、既にあった要素（&lt;code&gt;bool&lt;/code&gt; 部分が &lt;code&gt;false&lt;/code&gt; の場合）を指すイテレータ。&lt;/li&gt;
&lt;li&gt;(3)、(4)   新たな要素が追加された場合、その追加された要素を指すイテレータ。&lt;br /&gt;
    新たな要素が追加されなかった場合、既にあった要素を指すイテレータ。&lt;/li&gt;
&lt;li&gt;(5)、(6)   なし&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;単一要素の形式（(1)から(4)）では、ハッシュ関数以外から例外が投げられた場合には、挿入はされない。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)から(4)  平均的なケースでは定数（O(1)）だが、最悪のケースではコンテナの要素数 &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; に比例（O(N)）。&lt;/li&gt;
&lt;li&gt;(5)   平均的なケースでは引数の範囲の要素数 &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last)&lt;/code&gt; に比例（O(N)）するが、最悪のケースでは引数の範囲の要素数 &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last)&lt;/code&gt; とコンテナの要素数 &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; に 1 加えたものの積に比例（O(&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last) * (&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() + 1)&lt;/code&gt;)）。&lt;/li&gt;
&lt;li&gt;(6)   (5)の形式を &lt;code&gt;insert(il.begin(), il.end())&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;これらの関数が呼ばれた後も、当該コンテナ内の要素を指す参照は無効にはならない。
    なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;これらの関数が呼ばれた後も、呼び出しの前後でこのコンテナのバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）が変わらなかった場合には当該コンテナを指すイテレータは無効にはならない。&lt;br /&gt;
    それ以外の場合は、当該コンテナを指すイテレータは無効になる可能性がある。&lt;br /&gt;
    コンテナのバケット数が変わらない場合とは、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;追加しようとした要素と等価なキーの要素が全て既にコンテナに存在したため、要素が追加されなかった。&lt;/li&gt;
&lt;li&gt;要素追加後の要素数が、要素追加前のバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）×最大負荷率（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）よりも小さかった。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;のいずれかである。&lt;br /&gt;
なお、後者の条件は「よりも小さい」となっているが、最大負荷率の定義からすると「以下」の方が適切と思われる。&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt; も参照。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2)、および、(4) の形式は、&lt;code&gt;P&lt;/code&gt; が &lt;code&gt;value_type&lt;/code&gt; に暗黙変換可能でなければオーバーロード解決の対象にはならない。&lt;br /&gt;
    但し、この条件は規格書が当初意図した条件よりも厳しい（※）ため、C++14 では「&lt;code&gt;std::is_constructible&amp;lt;value_type, P&amp;amp;&amp;amp;&amp;gt;::value&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; であること」に修正される予定である。&lt;br /&gt;
    ※ &lt;code&gt;key_type&lt;/code&gt; がムーブのみ可能（コピー不可能）の場合、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;key_type, mapped_type&amp;gt;&lt;/code&gt; から &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const key_type, mapped_type&amp;gt;&lt;/code&gt; へ暗黙変換可能ではない&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;unordered_map&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;algorithm&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;initializer_list&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; cis;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; is;

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; cis&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;(&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;first&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;second&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt;;
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; label, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; C&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout)
{
  os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; label &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : &#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/for_each.html&#34;&gt;for_each&lt;/a&gt;(c.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), c.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cend.html&#34;&gt;cend&lt;/a&gt;(), [&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;os](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; cis&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p) { os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt;; });
  os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 一つの要素を挿入（(1)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;unordered_map&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;zero&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;one&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;two&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;three&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;four&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;five&#34;&lt;/span&gt;}, };

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; p1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(cis{&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;6th&#34;&lt;/span&gt;}); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 追加されるケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p1.&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;second&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p1.&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;first&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; p2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(cis{&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd&#34;&lt;/span&gt;}); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 追加されないケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p2.&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;second&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p2.&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;first&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; one element&#34;&lt;/span&gt;, um);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 一つの要素を挿入（(2)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;unordered_map&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;zero&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;one&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;two&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;three&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;four&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;five&#34;&lt;/span&gt;}, };

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; p1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(is{&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;6th&#34;&lt;/span&gt;}); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 追加されるケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p1.&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;second&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p1.&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;first&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; p2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(is{&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd&#34;&lt;/span&gt;}); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 追加されないケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p2.&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;second&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p2.&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;first&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; one element&#34;&lt;/span&gt;, um);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 一つの要素を挿入（(3)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;unordered_map&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;zero&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;one&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;two&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;three&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;four&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;five&#34;&lt;/span&gt;}, };

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), cis{&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;6th&#34;&lt;/span&gt;}); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 追加されるケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), cis{&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd&#34;&lt;/span&gt;}); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 追加されないケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; one element with hint&#34;&lt;/span&gt;, um);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 一つの要素を挿入（(4)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;unordered_map&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;zero&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;one&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;two&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;three&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;four&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;five&#34;&lt;/span&gt;}, };

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), is{&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;6th&#34;&lt;/span&gt;}); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 追加されるケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), is{&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd&#34;&lt;/span&gt;}); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 追加されないケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; one element with hint&#34;&lt;/span&gt;, um);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 複数の要素を挿入（(5)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;unordered_map&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;zero&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;one&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;two&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;three&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;four&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;five&#34;&lt;/span&gt;}, };

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;short&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&amp;gt;&lt;/span&gt; fl{ {&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;5th&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;6th&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0th&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;8th&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;7th&#34;&lt;/span&gt;}, };
    um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(fl.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), fl.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/cend.html&#34;&gt;cend&lt;/a&gt;()); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt; の要素を全部&lt;/span&gt;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; range&#34;&lt;/span&gt;, um);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 複数の要素を挿入（(6)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;unordered_map&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;zero&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;one&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;two&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;three&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;four&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;five&#34;&lt;/span&gt;}, };

    um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;({ {&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;5th&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;6th&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0th&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;8th&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;7th&#34;&lt;/span&gt;}, });
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; initializer_list&#34;&lt;/span&gt;, um);
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;true (6,6th) false (2,two)
insert one element : (6,6th), (5,five), (4,four), (3,three), (2,two), (1,one), (0,zero), 
true (6,6th) false (2,two)
insert one element : (6,6th), (5,five), (4,four), (3,three), (2,two), (1,one), (0,zero), 
(6,6th) (2,two)
insert one element with hint : (6,6th), (5,five), (4,four), (3,three), (2,two), (1,one), (0,zero), 
(6,6th) (2,two)
insert one element with hint : (6,6th), (5,five), (4,four), (3,three), (2,two), (1,one), (0,zero), 
insert range : (7,7th), (8,8th), (6,6th), (5,five), (4,four), (3,three), (2,two), (1,one), (0,zero), 
insert initializer_list : (7,7th), (8,8th), (6,6th), (5,five), (4,four), (3,three), (2,two), (1,one), (0,zero), 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;注：&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map.html&#34;&gt;&lt;code&gt;unordered_map&lt;/code&gt;&lt;/a&gt; は非順序連想コンテナであるため、出力順序は無意味であることに注意&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;(3)以降の形式は、(1)、および、(2)の形式を使って実装することができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; iterator unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key, Hash, Pred, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(const_iterator, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(v).first;
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;P&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; iterator unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key, Hash, Pred, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(const_iterator, P&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; obj)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;forward&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;P&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(obj)).first;
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key, Hash, Pred, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(InputIterator first, InputIterator last);
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (; first &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;first)
    &lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;first);
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key, Hash, Pred, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il);
{
  &lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(il.begin(), il.end());
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/emplace_hint.html&#34;&gt;&lt;code&gt;emplace_hint&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;挿入位置のヒントを使用したコンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;内容の交換&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;バケット数の取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/load_factor.html&#34;&gt;&lt;code&gt;load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;現在の負荷率（バケットあたりの要素数の平均）を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;負荷率の最大値を取得、設定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/rehash.html&#34;&gt;&lt;code&gt;rehash&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小バケット数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小要素数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2350.pdf&#34; target=&#34;_blank&#34;&gt;N2350 Container insert/erase and iterator constness (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(6)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_map/op_assign.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/unordered_map/unordered_map/op_assign.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class unordered_map&#34;&gt;unordered_map::&lt;/span&gt;operator= (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rv);              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;unordered_map&lt;/code&gt; オブジェクトを代入する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1)、および、(3) の形式の場合、以下の条件を満たすこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value_type&lt;/code&gt; はこのコンテナに対してコピー挿入可能（CopyInsertable）であること。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;key_type&lt;/code&gt;、および、&lt;code&gt;mapped_type&lt;/code&gt; はコピー代入可能（CopyAssignable）であること。（&lt;code&gt;value_type&lt;/code&gt; は &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const key_type, mapped_type&amp;gt;&lt;/code&gt; であるため、コピー代入可能ではない）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) の形式の場合、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::propagate_on_container_move_assignment::value&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; であれば、以下の条件を満たすこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value_type&lt;/code&gt; はこのコンテナに対してムーブ挿入可能（MoveInsertable）であること。（但し、備考参照）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;key_type&lt;/code&gt;、および、&lt;code&gt;mapped_type&lt;/code&gt; はムーブ代入可能（MoveAssignable）であること。（&lt;code&gt;value_type&lt;/code&gt; は &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const key_type, mapped_type&amp;gt;&lt;/code&gt; であるため、ムーブ代入可能ではない）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1)   &lt;code&gt;v&lt;/code&gt; の全ての要素がコピー代入される。ハッシュ関数オブジェクト、キー比較用関数オブジェクト、&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の値もコピーされる。
    アロケータオブジェクトは、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::propagate_on_container_copy_assignment::value&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合に限りコピーされる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2)   ハッシュ関数オブジェクト、キー比較用関数オブジェクトの値はムーブされる。
    &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の値はコピーされる。
    アロケータオブジェクトは、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::propagate_on_container_move_assignment::value&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合に限りムーブされる。コンテナ内に元々存在していた要素は、代入されるか、破棄される（デストラクタが呼び出される）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3)   範囲 &lt;code&gt;[il.begin(), il.end())&lt;/code&gt; がコピー代入される。
    コンテナ内に元々存在していた要素は、代入されるか、破棄される（デストラクタが呼び出される）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;p&gt;以下では構築されたオブジェクトを &lt;code&gt;u&lt;/code&gt; とする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) &lt;code&gt;u == v&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;(2) &lt;code&gt;u == 代入前の rv&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;(3) －&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   平均的には O(n)、ここで、&lt;code&gt;n = v.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;。最悪のケースでは O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;(2)   線形時間。&lt;/li&gt;
&lt;li&gt;(3)   代入対象を &lt;code&gt;a&lt;/code&gt;、&lt;code&gt;a&lt;/code&gt; の型を &lt;code&gt;X&lt;/code&gt; とすると、&lt;code&gt;a = X(il)&lt;/code&gt; と同様。（備考参照）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(3) の形式の場合、計算量は &lt;code&gt;a = X(il)&lt;/code&gt; と同様となっているが、効果が &lt;code&gt;a = X(il)&lt;/code&gt; と同様なわけではない。（ハッシュ関数オブジェクト、キー比較用関数オブジェクト、アロケータオブジェクト、&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; 等が異なる）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) の形式の要件に、「&lt;code&gt;value_type&lt;/code&gt; はこのコンテナに対してムーブ挿入可能であること」というものがあるが、&lt;code&gt;value_type&lt;/code&gt; は &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const key_type, mapped_type&amp;gt;&lt;/code&gt; であるため、通常のムーブ挿入可能の条件に合わせると &lt;code&gt;key_type&lt;/code&gt; にコピーコンストラクタが必要となってしまう。
    従って、規格書に明確な記載はないものの、この場合のムーブ挿入可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の左辺値、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタ、&lt;code&gt;krv&lt;/code&gt; をキーの型 &lt;code&gt;key_type&lt;/code&gt; の右辺値、&lt;code&gt;mrv&lt;/code&gt; を値の型 &lt;code&gt;mapped_type&lt;/code&gt; の右辺値とすると、以下の式が適格（well-formed）であるということであるものと思われる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, krv, mrv)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.0, 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.4.7, 4.5.3, 4.6.3, 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/op_constructor.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/op_destructor.html&#34;&gt;&lt;code&gt;(destructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(3)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_map/op_constructor.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/unordered_map/unordered_map/op_constructor.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class unordered_map&#34;&gt;unordered_map::&lt;/span&gt;コンストラクタ (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;unordered_map();                                                    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++14&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;unordered_map&lt;/span&gt;(size_type n,
                       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; hasher&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; hf &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; hasher(),
                       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_equal&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; eql &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; key_equal(),
                       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; allocator_type()); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;unordered_map&lt;/span&gt;(size_type n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;実装依存の既定値&lt;/span&gt;,
                       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; hasher&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; hf &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; hasher(),
                       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_equal&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; eql &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; key_equal(),
                       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; allocator_type()); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) + (2) C++11&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
unordered_map(InputIterator first, InputIterator last,
              size_type n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;実装依存の既定値&lt;/span&gt;,
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; hasher&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; hf &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; hasher(),
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_equal&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; eql &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; key_equal(),
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; allocator_type());          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

unordered_map(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v);                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;

unordered_map(unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rv);                                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;unordered_map&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;

unordered_map(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7)&lt;/span&gt;

unordered_map(unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rv, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8)&lt;/span&gt;

unordered_map(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il,
              size_type n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;実装依存の既定値&lt;/span&gt;,
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; hasher&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; hf &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; hasher(),
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_equal&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; eql &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; key_equal(),
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; allocator_type());          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (9)&lt;/span&gt;

unordered_map(size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (10) C++14&lt;/span&gt;
unordered_map(size_type n,
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; hasher&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; hf,
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (11) C++14&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
unordered_map(InputIterator f,
              InputIterator l,
              size_type n,
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (12) C++14&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
unordered_map(InputIterator f,
              InputIterator l,
              size_type n,
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; hasher&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; hf, 
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (13) C++14&lt;/span&gt;

unordered_map(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il,
              size_type n,
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (14) C++14&lt;/span&gt;

unordered_map(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il,
              size_type n,
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; hasher&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; hf, 
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (15) C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;unordered_map&lt;/code&gt; オブジェクトを構築する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ハッシュ関数オブジェクト &lt;code&gt;hasher&lt;/code&gt; が引数として与えられなかった場合、&lt;code&gt;hasher&lt;/code&gt; は DefaultConstructible であること。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;キー比較用関数オブジェクト &lt;code&gt;key_equal&lt;/code&gt; が引数として与えられなかった場合、&lt;code&gt;key_equal&lt;/code&gt; は DefaultConstructible であること。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;アロケータオブジェクト &lt;code&gt;allocator_type&lt;/code&gt; が引数として与えられなかった場合、&lt;code&gt;allocator_type&lt;/code&gt; は DefaultConstructible であること。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3) の形式の場合、&lt;code&gt;value_type&lt;/code&gt; は &lt;code&gt;*first&lt;/code&gt; からこの &lt;code&gt;unordered_map&lt;/code&gt; に EmplaceConstructible であること。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(4)、(7)、および (9) の形式の場合、&lt;code&gt;value_type&lt;/code&gt; はこの &lt;code&gt;unordered_map&lt;/code&gt; に CopyInsertable であること。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(5) の形式の場合、&lt;code&gt;allocator_type&lt;/code&gt; のムーブ構築は例外終了しないこと。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(8) の形式の場合、&lt;code&gt;value_type&lt;/code&gt; はこの &lt;code&gt;unordered_map&lt;/code&gt; に MoveInsertable であること。（但し、備考参照）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   バケット数の最低が実装依存の、要素を持たない空の &lt;code&gt;unordered_map&lt;/code&gt; を構築する。&lt;/li&gt;
&lt;li&gt;(2)   バケット数最低 &lt;code&gt;n&lt;/code&gt;、ハッシュ関数オブジェクト &lt;code&gt;hf&lt;/code&gt;、キー比較用関数オブジェクト &lt;code&gt;eql&lt;/code&gt;、アロケータオブジェクト &lt;code&gt;a&lt;/code&gt; で、要素を持たない空の &lt;code&gt;unordered_map&lt;/code&gt; を構築する。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(1) + (2) バケット数最低 &lt;code&gt;n&lt;/code&gt;、ハッシュ関数オブジェクト &lt;code&gt;hf&lt;/code&gt;、キー比較用関数オブジェクト &lt;code&gt;eql&lt;/code&gt;、アロケータオブジェクト &lt;code&gt;a&lt;/code&gt; で、要素を持たない空の &lt;code&gt;unordered_map&lt;/code&gt; を構築する。
    引数 &lt;code&gt;n&lt;/code&gt; のデフォルト値は実装依存である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3)   バケット数最低 &lt;code&gt;n&lt;/code&gt;、ハッシュ関数オブジェクト &lt;code&gt;hf&lt;/code&gt;、キー比較用関数オブジェクト &lt;code&gt;eql&lt;/code&gt;、アロケータオブジェクト &lt;code&gt;a&lt;/code&gt; で &lt;code&gt;unordered_map&lt;/code&gt; が構築された後、&lt;code&gt;[first, last)&lt;/code&gt; の範囲の要素が挿入される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(4)   コピーコンストラクタ。&lt;code&gt;v&lt;/code&gt; の全ての要素をコピーした、&lt;code&gt;unordered_map&lt;/code&gt; を構築する。
    ハッシュ関数オブジェクトとキー比較関数オブジェクト、および、&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の値も &lt;code&gt;v&lt;/code&gt; からコピーされる。
    アロケータオブジェクトは、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/select_on_container_copy_construction.html&#34;&gt;&lt;code&gt;select_on_container_copy_construction&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;())&lt;/code&gt; の戻り値が使用される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(5)   ムーブコンストラクタ。&lt;code&gt;rv&lt;/code&gt; の全ての要素をムーブした、&lt;code&gt;unordered_map&lt;/code&gt; を構築する。
    ハッシュ関数オブジェクトとキー比較関数オブジェクト、および、アロケータオブジェクトも &lt;code&gt;v&lt;/code&gt; からムーブされる。
    &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の値は &lt;code&gt;rv&lt;/code&gt; からコピーされる。
    なお、要素のムーブは個々に行われるのではなく、&lt;code&gt;unordered_map&lt;/code&gt; 内部の構造ごと一括でムーブされる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(6)   ハッシュ関数オブジェクト &lt;code&gt;hasher()&lt;/code&gt;、キー比較用関数オブジェクト &lt;code&gt;key_equal()&lt;/code&gt;、アロケータオブジェクト &lt;code&gt;a&lt;/code&gt; で、要素を持たない空の &lt;code&gt;unordered_map&lt;/code&gt; を構築する。
    構築された &lt;code&gt;unordered_map&lt;/code&gt; のバケット数、および、&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; は実装依存である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(7)   &lt;code&gt;v&lt;/code&gt; の全ての要素をコピーした、&lt;code&gt;unordered_map&lt;/code&gt; を構築する。
    ハッシュ関数オブジェクトとキー比較関数オブジェクト、および、&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の値も &lt;code&gt;v&lt;/code&gt; からコピーされるが、アロケータオブジェクトは引数 &lt;code&gt;a&lt;/code&gt; が使用される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(8)   &lt;code&gt;rv&lt;/code&gt; のすべての要素をムーブした、&lt;code&gt;unordered_map&lt;/code&gt; を構築する。
    ハッシュ関数オブジェクトとキー比較関数オブジェクトの値も &lt;code&gt;rv&lt;/code&gt; からムーブされるが、アロケータオブジェクトは引数 &lt;code&gt;a&lt;/code&gt; が使用される。
    &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の値は &lt;code&gt;rv&lt;/code&gt; からコピーされる。
    なお、&lt;code&gt;a == rv.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、要素のムーブは個々に行われるのではなく、&lt;code&gt;unordered_map&lt;/code&gt; 内部の構造ごと一括でムーブされるが、そうでない場合は要素ごとにムーブされる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(9)   (3) の形式を &lt;code&gt;unordered_map(il.begin(), il.end(), n, hf, eql, a)&lt;/code&gt; として呼び出した場合と同等である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(10)  (2) の形式を &lt;code&gt;unordered_map(n, hasher(), key_equal(), a)&lt;/code&gt; として呼び出した場合と同等である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(11)  (2) の形式を &lt;code&gt;unordered_map(n, hf, key_equal(), a)&lt;/code&gt; として呼び出した場合と同等である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(12)  (3) の形式を &lt;code&gt;unordered_map(f, l, n, hasher(), key_equal(), a)&lt;/code&gt; として呼び出した場合と同等である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(13)  (3) の形式を &lt;code&gt;unordered_map(f, l, n, hf, key_equal(), a)&lt;/code&gt; として呼び出した場合と同等である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(14)  (5) の形式を &lt;code&gt;unordered_map(il, n, hasher(), key_equal(), a)&lt;/code&gt; として呼び出した場合と同等である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(15)  (5) の形式を &lt;code&gt;unordered_map(il, n, hf, key_equal(), a)&lt;/code&gt; として呼び出した場合と同等である。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;p&gt;以下では構築されたオブジェクトを &lt;code&gt;u&lt;/code&gt; とする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/empty.html&#34;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == true&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == 1.0&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/empty.html&#34;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == true&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == a&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == 1.0&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;= n&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == a&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == 1.0&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;= n&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(4) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == v.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;。
    &lt;code&gt;u == v&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(5) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() ==&lt;/code&gt;構築前の &lt;code&gt;rv.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() ==&lt;/code&gt;構築前の &lt;code&gt;rv.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;。
    &lt;code&gt;u ==&lt;/code&gt;構築前の &lt;code&gt;rv&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(6) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/empty.html&#34;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == true&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == a&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(7) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == v.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;。
    &lt;code&gt;u == v&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == a&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(8) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() ==&lt;/code&gt;構築前の &lt;code&gt;rv.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;。
    &lt;code&gt;u ==&lt;/code&gt;構築前の &lt;code&gt;rv&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == a&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(9) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == a&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == 1.0&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;= n&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   定数&lt;/li&gt;
&lt;li&gt;(2)   定数&lt;/li&gt;
&lt;li&gt;(3)   平均的には O(n)、ここで、n は &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last)&lt;/code&gt;。
    最悪のケースでは O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;(4)   平均的には O(n)、ここで、n は &lt;code&gt;v.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;。
    最悪のケースでは O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;(5)   定数&lt;/li&gt;
&lt;li&gt;(6)   定数&lt;/li&gt;
&lt;li&gt;(7)   O(&lt;code&gt;v.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;(8)   &lt;code&gt;a == rv.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、定数。
    そうでない場合、O(&lt;code&gt;rv.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;(9)   (3)の形式を &lt;code&gt;unordered_map(il.begin(), il.end(), n, hf, eql, a)&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;li&gt;(10)  (2)の形式を  &lt;code&gt;unordered_map(n, hasher(), key_equal(), a)&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;li&gt;(11)  (2) の形式を &lt;code&gt;unordered_map(n, hf, key_equal(), a)&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;li&gt;(12)  (3) の形式を &lt;code&gt;unordered_map(f, l, n, hasher(), key_equal(), a)&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;li&gt;(13)  (3) の形式を &lt;code&gt;unordered_map(f, l, n, hf, key_equal(), a)&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;li&gt;(14)  (5) の形式を &lt;code&gt;unordered_map(il, n, hasher(), key_equal(), a)&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;li&gt;(15)  (5) の形式を &lt;code&gt;unordered_map(il, n, hf, key_equal(), a)&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(8) の形式の場合、MoveInsertable が要件となっているが、&lt;code&gt;rv.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == a&lt;/code&gt; の場合にはムーブコンストラクタと同様の挙動となるため、MoveInsertable ではなくても良いと思われる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++14 では、デフォルトコンストラクタを (1) + (2) の形式から (1) の形式に分離して残りを (2) の形式（&lt;code&gt;n&lt;/code&gt; のデフォルト引数を削除）にした。
    これは、デフォルトコンストラクタに &lt;code&gt;explicit&lt;/code&gt; が付いていると、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;のようなコード（C++11 から導入された、コピーリスト初期化によるデフォルトコンストラクタ呼び出し）がエラーになってしまうためである。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.0, 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.4.7, 4.5.3, 4.6.3, 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;備考&lt;/h4&gt;
&lt;p&gt;libstdc++ には 4.8.2 現在、(6)、(7)、(8)の形式はない。&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/op_destructor.html&#34;&gt;&lt;code&gt;(destructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_map/op_assign.html&#34;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(9)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2193&#34; target=&#34;_blank&#34;&gt;LWG 2193. Default constructors for standard library containers are explicit&lt;/a&gt;&lt;br /&gt;
    (1) + (2) を 2 つのオーバーロードに分割するきっかけとなったレポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2210&#34; target=&#34;_blank&#34;&gt;LWG 2210. Missing allocator-extended constructor for allocator-aware containers&lt;/a&gt;&lt;br /&gt;
    (10)、(11)、(12)、(13)、(14)、(15) を追加するきっかけとなったレポート&lt;br /&gt;
    なお、Discussion の例はアロケータの型が誤っているので注意&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/emplace.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/unordered_map/unordered_multimap/emplace.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class unordered_multimap&#34;&gt;unordered_multimap::&lt;/span&gt;emplace (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator emplace(Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;コンテナ内へ要素を直接構築する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;このコンテナの要素型 &lt;code&gt;value_type&lt;/code&gt; は、コンテナに対して引数 &lt;code&gt;args&lt;/code&gt; から直接構築可能（EmplaceConstructible）でなければならない。&lt;/p&gt;
&lt;p&gt;ここで、コンテナに対して引数 &lt;code&gt;args&lt;/code&gt; から直接構築可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の lvalue、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタとすると、以下の式が適格（well-formed）であるということである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args)...);&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt; から構築された &lt;code&gt;value_type&lt;/code&gt; のオブジェクト &lt;code&gt;t&lt;/code&gt; をコンテナに挿入する。&lt;/p&gt;
&lt;p&gt;なお、オブジェクト &lt;code&gt;t&lt;/code&gt; は、構築後にコンテナにコピー、あるいはムーブされるわけではなく、コンテナ内に直接構築される。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;追加された要素を指すイテレータ。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;ハッシュ関数以外から例外が投げられた場合には、挿入はされない。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;平均的なケースでは定数（O(&lt;code&gt;1&lt;/code&gt;)）だが、最悪のケースではコンテナの要素数に比例（O(&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)）。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;この関数が呼ばれた後も、当該コンテナ内の要素を指す参照は無効にはならない。&lt;br /&gt;
    なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。&lt;/li&gt;
&lt;li&gt;この関数が呼ばれた後も、呼び出しの前後でこのコンテナのバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）が変わらなかった場合には当該コンテナを指すイテレータは無効にはならない。
    それ以外の場合は、当該コンテナを指すイテレータは無効になる可能性がある。&lt;br /&gt;
    コンテナのバケット数が変わらない場合とは、要素追加後の要素数が、要素追加前のバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）×最大負荷率（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）よりも小さかった場合である。
    なお、条件が「よりも小さい」となっているが、最大負荷率の定義からすると「以下」の方が適切と思われる。&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; も参照。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;このメンバ関数は、コンテナの種類によってシグネチャが異なるため、注意が必要である。&lt;br /&gt;
&lt;code&gt;emplace_hint&lt;/code&gt; も含めた一覧を以下に示す。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;シーケンスコンテナ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace(const_iterator, Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;br /&gt;（同一キーの重複を許さない場合）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;pair&amp;lt;iterator, bool&amp;gt; emplace(Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;br /&gt;（同一キーの重複を許す場合）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace(Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace_hint(const_iterator, Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;unordered_map&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility.html&#34;&gt;utility&lt;/a&gt;&amp;gt;    &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// for std::&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;algorithm&lt;/a&gt;&amp;gt;  &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// for std::for_each&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サンプル用typedef&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; is;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サンプル用typedefのための挿入演算子&lt;/span&gt;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; is&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;(&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap.html&#34;&gt;unordered_multimap&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it3 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cend.html&#34;&gt;cend&lt;/a&gt;(), [](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; is&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt;;
  });
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(1,1st)
(2,2nd)
(1,3rd)
(2,2nd), (1,1st), (1,3rd), 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;注：&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap.html&#34;&gt;&lt;code&gt;unordered_multimap&lt;/code&gt;&lt;/a&gt; は非順序連想コンテナであるため、出力順序は無意味であることに注意&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/emplace_hint.html&#34;&gt;&lt;code&gt;emplace_hint&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;挿入位置のヒントを使用したコンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の追加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;内容の交換&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;バケット数の取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/load_factor.html&#34;&gt;&lt;code&gt;load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;現在の負荷率（バケットあたりの要素数の平均）を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;負荷率の最大値を取得、設定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/rehash.html&#34;&gt;&lt;code&gt;rehash&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小バケット数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小要素数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2680.pdf&#34; target=&#34;_blank&#34;&gt;N2680 Proposed Wording for Placement Insert (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace_hint (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/emplace_hint.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/unordered_map/unordered_multimap/emplace_hint.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class unordered_multimap&#34;&gt;unordered_multimap::&lt;/span&gt;emplace_hint (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator emplace_hint(const_iterator position, Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;挿入位置のヒントを使用してコンテナ内へ要素を直接構築する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;このコンテナの要素型 &lt;code&gt;value_type&lt;/code&gt; は、コンテナに対して引数 &lt;code&gt;args&lt;/code&gt; から直接構築可能（EmplaceConstructible）でなければならない。&lt;br /&gt;
    ここで、コンテナに対して引数 &lt;code&gt;args&lt;/code&gt; から直接構築可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の左辺値、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタとすると、以下の式が適格（well-formed）であるということである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args)...);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引数 &lt;code&gt;position&lt;/code&gt; は、コンテナの有効な読み取り専用イテレータでなければならないが、間接参照可能（dereferenceable）である必要はない。（つまり、最終要素の次を指すイテレータでも良い）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt; から構築された &lt;code&gt;value_type&lt;/code&gt; のオブジェクト &lt;code&gt;t&lt;/code&gt; をコンテナに挿入する。&lt;/p&gt;
&lt;p&gt;なお、オブジェクト &lt;code&gt;t&lt;/code&gt; は、構築後にコンテナにコピー、あるいはムーブされるわけではなく、コンテナ内に直接構築される。&lt;/p&gt;
&lt;p&gt;引数 &lt;code&gt;position&lt;/code&gt; は、要素の挿入位置を探し始める場所のヒントとして使用されるが、実装によって無視されるかもしれない。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;追加された要素を指すイテレータ。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;ハッシュ関数以外から例外が投げられた場合には、挿入はされない。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;平均的なケースでは定数（O(&lt;code&gt;1&lt;/code&gt;)）だが、最悪のケースではコンテナの要素数に比例（O(&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)）。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;この関数が呼ばれた後も、当該コンテナ内の要素を指す参照は無効にはならない。&lt;br /&gt;
    なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;この関数が呼ばれた後も、呼び出しの前後でこのコンテナのバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）が変わらなかった場合には当該コンテナを指すイテレータは無効にはならない。
    それ以外の場合は、当該コンテナを指すイテレータは無効になる可能性がある。&lt;br /&gt;
    コンテナのバケット数が変わらない場合とは、要素追加後の要素数が、要素追加前のバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）×最大負荷率（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）よりも小さかった場合である。&lt;br /&gt;
    なお、条件が「よりも小さい」となっているが、最大負荷率の定義からすると「以下」の方が適切と思われる。&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt; も参照。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;このメンバ関数は、コンテナの種類によってシグネチャが異なるため、注意が必要である。&lt;br /&gt;
&lt;code&gt;emplace&lt;/code&gt; も含めた一覧を以下に示す。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;シーケンスコンテナ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace(const_iterator, Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;br /&gt;（同一キーの重複を許さない場合）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;pair&amp;lt;iterator, bool&amp;gt; emplace(Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;br /&gt;（同一キーの重複を許す場合）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace(Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace_hint(const_iterator, Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本関数呼び出しで構築されるオブジェクトを &lt;code&gt;t&lt;/code&gt; とすると、&lt;code&gt;t.first&lt;/code&gt; と等価なキーの要素が既に存在する場合、&lt;code&gt;position&lt;/code&gt; に応じて既存の要素と新規の要素が順序付けられると期待されるが、規格書にそのような規定は存在しない。
    従って、そのような期待はすべきではない。（下記の出力例も参照）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;unordered_map&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility.html&#34;&gt;utility&lt;/a&gt;&amp;gt;    &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// for std::&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;algorithm&lt;/a&gt;&amp;gt;  &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// for std::for_each&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator.html&#34;&gt;iterator&lt;/a&gt;&amp;gt;   &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// for std::&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;next&lt;/a&gt;&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サンプル用typedef&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; is;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サンプル用typedefのための挿入演算子&lt;/span&gt;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;ostream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;ostream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; is&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;(&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt;;
}

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 出力関数&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Iterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; label, Iterator begin, Iterator end, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;ostream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout)
{
  os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; label &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : &#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(begin, end, [&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;os](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; is&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p) { os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt;; });
  os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap.html&#34;&gt;unordered_multimap&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;}, };

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 初期状態の出力&lt;/span&gt;
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;before&#34;&lt;/span&gt;, um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cend.html&#34;&gt;cend&lt;/a&gt;());

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 追加するデータと等価な範囲を取得&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/equal_range.html&#34;&gt;equal_range&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/equal_range.html&#34;&gt;equal_range&lt;/a&gt;&#34;&lt;/span&gt;, p.first, p.second);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 等価な要素の間に &lt;span style=&#34;color:#ff0000&#34;&gt;emplace_hint&lt;/span&gt; でデータを追加&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace_hint&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;next&lt;/a&gt;(p.first), &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;4th&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;emplace_hint&lt;/span&gt; : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 追加結果の出力&lt;/span&gt;
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;after&#34;&lt;/span&gt;, um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cend.html&#34;&gt;cend&lt;/a&gt;());
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;libstdc++ の出力例（4.7.3 現在）&lt;br /&gt;
    追加した要素 (1,4th) はヒントを無視して (1,2nd) と (1,1st) よりも前に追加されている。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;    before : (2,3rd), (1,2nd), (1,1st), 
    equal_range : (1,2nd), (1,1st), 
    emplace_hint : (1,4th)
    after : (2,3rd), (1,4th), (1,2nd), (1,1st), 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;libc++ の出力例（2013/11/22 現在）&lt;br /&gt;
    追加した要素 (1,4th) がヒントで指定した通り (1,1st) と (1,2nd) の間に追加されている。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;    before : (2,3rd), (1,1st), (1,2nd), 
    equal_range : (1,1st), (1,2nd), 
    emplace_hint : (1,4th)
    after : (2,3rd), (1,1st), (1,4th), (1,2nd), 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注：&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap.html&#34;&gt;&lt;code&gt;unordered_multimap&lt;/code&gt;&lt;/a&gt; は非順序連想コンテナであるため、出力順序は無意味であることに注意&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の追加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;内容の交換&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;バケット数の取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/load_factor.html&#34;&gt;&lt;code&gt;load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;現在の負荷率（バケットあたりの要素数の平均）を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最大負荷率を取得、設定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/rehash.html&#34;&gt;&lt;code&gt;rehash&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小バケット数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小要素数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2680.pdf&#34; target=&#34;_blank&#34;&gt;N2680 Proposed Wording for Placement Insert (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/insert.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/unordered_map/unordered_multimap/insert.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class unordered_multimap&#34;&gt;unordered_multimap::&lt;/span&gt;insert (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v);                          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;P&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator insert(P&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; obj);                                      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(const_iterator position, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;P&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator insert(const_iterator position, P&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; obj);             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; insert(InputIterator first, InputIterator last);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il);                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;コンテナに要素を追加する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v&lt;/code&gt; を引数にとる形式（(1)、(3)）では、&lt;code&gt;value_type&lt;/code&gt; はコンテナに対してコピー挿入可能（CopyInsertable）でなければならない。&lt;br /&gt;
    コンテナに対してコピー挿入可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の左辺値、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタとすると、以下の式が適格（well-formed）であるということである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, v);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;obj&lt;/code&gt; を引数にとる形式（(2)、(4)）では、&lt;code&gt;value_type&lt;/code&gt; は引数 &lt;code&gt;obj&lt;/code&gt; からコンテナに対して直接構築可能（EmplaceConstructible）でなければならない。&lt;br /&gt;
    コンテナに対して直接構築可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の左辺値、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタとすると、以下の式が適格（well-formed）であるということである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;P&amp;gt;(obj));&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引数 &lt;code&gt;position&lt;/code&gt; は、コンテナの有効な読み取り専用イテレータでなければならない。&lt;br /&gt;
    なお、規格書では間接参照可能（dereferenceable）である必要があることになっているが、その必要はない（つまり、最終要素の次を指すイテレータでも良い）ものと思われる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引数 &lt;code&gt;first&lt;/code&gt;、および、&lt;code&gt;last&lt;/code&gt;は、入力イテレータの要件を満たし、かつ、範囲 &lt;code&gt;[first, last)&lt;/code&gt; が当該コンテナ&lt;strong&gt;以外を指す&lt;/strong&gt;有効な範囲でなければならない。&lt;br /&gt;
    また、引数 &lt;code&gt;first&lt;/code&gt;、および、&lt;code&gt;last&lt;/code&gt; を引数にとる形式（(5)）では、このコンテナの要素型 &lt;code&gt;value_type&lt;/code&gt; は、コンテナに対して &lt;code&gt;*first&lt;/code&gt; から直接構築可能（EmplaceConstructible）でなければならない。&lt;br /&gt;
    ここで、コンテナに対して &lt;code&gt;*first&lt;/code&gt; から直接構築可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の左辺値、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタとすると、以下の式が適格（well-formed）であるということである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, *first);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;なお、&lt;code&gt;first&lt;/code&gt;、および、&lt;code&gt;last&lt;/code&gt;は、規格書では &lt;code&gt;value_type&lt;/code&gt; を参照しなければならない（つまり、コンテナの &lt;code&gt;value_type&lt;/code&gt; と &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;&lt;code&gt;iterator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;decltype(first)&amp;gt;::value_type&lt;/code&gt; が同一の型でなければならない）ことになっているが、実際にはその必要はなく、上記の直接構築可能の要件を満たすだけで良いものと思われる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(6)の形式では、&lt;code&gt;value_type&lt;/code&gt; はコンテナに対してコピー挿入可能でなければならない。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   引数 &lt;code&gt;v&lt;/code&gt; で指定した値の要素を追加する。&lt;/li&gt;
&lt;li&gt;(2)   引数 &lt;code&gt;obj&lt;/code&gt; から構築されたオブジェクト &lt;code&gt;v&lt;/code&gt; を追加する。&lt;/li&gt;
&lt;li&gt;(3)   引数 &lt;code&gt;v&lt;/code&gt; で指定した値の要素を追加する。&lt;br /&gt;
    引数 &lt;code&gt;position&lt;/code&gt; は、要素の挿入位置を探し始める場所のヒントとして使用されるが、実装によって無視されるかもしれない。&lt;/li&gt;
&lt;li&gt;(4)   引数 &lt;code&gt;obj&lt;/code&gt; から構築されたオブジェクト &lt;code&gt;v&lt;/code&gt; を追加する。&lt;br /&gt;
    引数 &lt;code&gt;position&lt;/code&gt; は、要素の挿入位置を探し始める場所のヒントとして使用されるが、実装によって無視されるかもしれない。&lt;/li&gt;
&lt;li&gt;(5)   範囲 &lt;code&gt;[first, last)&lt;/code&gt; のすべての要素 &lt;code&gt;t&lt;/code&gt; に対して、&lt;code&gt;insert(t)&lt;/code&gt; を呼び出した場合と同等である（&lt;code&gt;*first&lt;/code&gt; の型によって (1)、あるいは(2)の形式が呼び出される）。&lt;/li&gt;
&lt;li&gt;(6)   (5)の形式を &lt;code&gt;insert(il.begin(), il.end())&lt;/code&gt; として呼び出した場合と同等である。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)から(4)  追加された要素を指すイテレータ。&lt;/li&gt;
&lt;li&gt;(5)、(6)   なし&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;単一要素の形式（(1)から(4)）では、ハッシュ関数以外から例外が投げられた場合には、挿入はされない。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)から(4)  平均的なケースでは定数（O(1)）だが、最悪のケースではコンテナの要素数 &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; に比例（O(N)）。&lt;/li&gt;
&lt;li&gt;(5)   平均的なケースでは引数の範囲の要素数 &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last)&lt;/code&gt; に比例（O(N)）するが、最悪のケースでは引数の範囲の要素数 &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last)&lt;/code&gt; とコンテナの要素数 &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; に 1 加えたものの積に比例（O(&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last) * (&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() + 1)&lt;/code&gt;)）。&lt;/li&gt;
&lt;li&gt;(6)   (5)の形式を &lt;code&gt;insert(il.begin(), il.end())&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;これらの関数が呼ばれた後も、当該コンテナ内の要素を指す参照は無効にはならない。
    なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;これらの関数が呼ばれた後も、呼び出しの前後でこのコンテナのバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）が変わらなかった場合には当該コンテナを指すイテレータは無効にはならない。&lt;br /&gt;
    それ以外の場合は、当該コンテナを指すイテレータは無効になる可能性がある。&lt;br /&gt;
    コンテナのバケット数が変わらない場合とは、要素追加後の要素数が、要素追加前のバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）×最大負荷率（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）よりも小さかった場合である。&lt;br /&gt;
    なお、条件が「よりも小さい」となっているが、最大負荷率の定義からすると「以下」の方が適切と思われる。&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt; も参照。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2)、および、(4) の形式は、&lt;code&gt;P&lt;/code&gt; が &lt;code&gt;value_type&lt;/code&gt; に暗黙変換可能でなければオーバーロード解決の対象にはならない。&lt;br /&gt;
    但し、この条件は規格書が当初意図した条件よりも厳しい（※）ため、C++14 では「&lt;code&gt;std::is_constructible&amp;lt;value_type, P&amp;amp;&amp;amp;&amp;gt;::value&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; であること」に修正される予定である。&lt;br /&gt;
    ※ &lt;code&gt;key_type&lt;/code&gt; がムーブのみ可能（コピー不可能）の場合、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;key_type, mapped_type&amp;gt;&lt;/code&gt; から &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const key_type, mapped_type&amp;gt;&lt;/code&gt; へ暗黙変換可能ではない&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;position&lt;/code&gt; を引数にとる形式（(3)、(4)）の場合、本関数呼び出しで構築されるオブジェクトを &lt;code&gt;t&lt;/code&gt; とすると、&lt;code&gt;t.first&lt;/code&gt; と等価なキーの要素が既に存在する場合、&lt;code&gt;position&lt;/code&gt; に応じて既存の要素と新規の要素が順序付けられると期待されるが、規格書にそのような規定は存在しない。
    従って、そのような期待はすべきではない。&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/emplace_hint.html&#34;&gt;&lt;code&gt;emplace_hint&lt;/code&gt;&lt;/a&gt;も参照。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;unordered_map&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;algorithm&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;initializer_list&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; cis;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; is;

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; cis&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;(&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt;;
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; label, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; C&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout)
{
  os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; label &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : &#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/for_each.html&#34;&gt;for_each&lt;/a&gt;(c.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), c.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cend.html&#34;&gt;cend&lt;/a&gt;(), [&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;os](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; cis&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p) { os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt;; });
  os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 一つの要素を挿入（(1)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap.html&#34;&gt;unordered_multimap&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;zero&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;one&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;two&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;three&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;four&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;five&#34;&lt;/span&gt;}, };

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(cis{&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;6th&#34;&lt;/span&gt;}); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重複のないケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(cis{&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd&#34;&lt;/span&gt;}); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重複のあるケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; one element&#34;&lt;/span&gt;, um);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 一つの要素を挿入（(2)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap.html&#34;&gt;unordered_multimap&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;zero&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;one&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;two&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;three&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;four&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;five&#34;&lt;/span&gt;}, };

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(is{&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;6th&#34;&lt;/span&gt;}); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重複のないケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(is{&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd&#34;&lt;/span&gt;}); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重複のあるケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; one element&#34;&lt;/span&gt;, um);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 一つの要素を挿入（(3)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap.html&#34;&gt;unordered_multimap&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;zero&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;one&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;two&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;three&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;four&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;five&#34;&lt;/span&gt;}, };

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), cis{&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;6th&#34;&lt;/span&gt;}); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重複のないケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), cis{&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd&#34;&lt;/span&gt;}); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重複のあるケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; one element with hint&#34;&lt;/span&gt;, um);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 一つの要素を挿入（(4)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap.html&#34;&gt;unordered_multimap&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;zero&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;one&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;two&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;three&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;four&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;five&#34;&lt;/span&gt;}, };

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), is{&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;6th&#34;&lt;/span&gt;}); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重複のないケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), is{&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd&#34;&lt;/span&gt;}); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重複のあるケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; one element with hint&#34;&lt;/span&gt;, um);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 複数の要素を挿入（(5)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap.html&#34;&gt;unordered_multimap&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;zero&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;one&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;two&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;three&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;four&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;five&#34;&lt;/span&gt;}, };

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;short&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&amp;gt;&lt;/span&gt; fl{ {&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;5th&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;6th&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0th&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;8th&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;7th&#34;&lt;/span&gt;}, };
    um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(fl.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), fl.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cend.html&#34;&gt;cend&lt;/a&gt;()); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt; の要素を全部&lt;/span&gt;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; range&#34;&lt;/span&gt;, um);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 複数の要素を挿入（(6)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap.html&#34;&gt;unordered_multimap&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;zero&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;one&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;two&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;three&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;four&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;five&#34;&lt;/span&gt;}, };

    um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;({ {&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;5th&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;6th&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0th&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;8th&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;7th&#34;&lt;/span&gt;}, });
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; initializer_list&#34;&lt;/span&gt;, um);
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(6,6th) (2,2nd)
insert one element : (6,6th), (5,five), (4,four), (3,three), (2,2nd), (2,two), (1,one), (0,zero), 
(6,6th) (2,2nd)
insert one element : (6,6th), (5,five), (4,four), (3,three), (2,2nd), (2,two), (1,one), (0,zero), 
(6,6th) (2,2nd)
insert one element with hint : (6,6th), (5,five), (4,four), (3,three), (2,2nd), (2,two), (1,one), (0,zero), 
(6,6th) (2,2nd)
insert one element with hint : (6,6th), (5,five), (4,four), (3,three), (2,2nd), (2,two), (1,one), (0,zero), 
insert range : (7,7th), (8,8th), (6,6th), (5,5th), (5,five), (4,four), (3,three), (2,two), (1,one), (0,0th), (0,zero), 
insert initializer_list : (7,7th), (8,8th), (6,6th), (5,5th), (5,five), (4,four), (3,three), (2,two), (1,one), (0,0th), (0,zero), 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;注：&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap.html&#34;&gt;&lt;code&gt;unordered_multimap&lt;/code&gt;&lt;/a&gt; は非順序連想コンテナであるため、出力順序は無意味であることに注意&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;(3)以降の形式は、(1)、および、(2)の形式を使って実装することができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; iterator unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key, Hash, Pred, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(const_iterator, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(v);
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;P&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; iterator unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key, Hash, Pred, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(const_iterator, P&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; obj)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;forward&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;P&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(obj));
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key, Hash, Pred, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(InputIterator first, InputIterator last);
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (; first &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;first)
    &lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;first);
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key, Hash, Pred, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il);
{
  &lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(il.begin(), il.end());
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/emplace_hint.html&#34;&gt;&lt;code&gt;emplace_hint&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;挿入位置のヒントを使用したコンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;内容の交換&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;バケット数の取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/load_factor.html&#34;&gt;&lt;code&gt;load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;現在の負荷率（バケットあたりの要素数の平均）を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;負荷率の最大値を取得、設定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/rehash.html&#34;&gt;&lt;code&gt;rehash&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小バケット数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小要素数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(6)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/op_assign.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/unordered_map/unordered_multimap/op_assign.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class unordered_multimap&#34;&gt;unordered_multimap::&lt;/span&gt;operator= (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v);     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rv);         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;unordered_multimap&lt;/code&gt; オブジェクトを代入する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1)、および、(3) の形式の場合、以下の条件を満たすこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value_type&lt;/code&gt; はこのコンテナに対してコピー挿入可能（CopyInsertable）であること。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;key_type&lt;/code&gt;、および、&lt;code&gt;mapped_type&lt;/code&gt; はコピー代入可能（CopyAssignable）であること。（&lt;code&gt;value_type&lt;/code&gt; は &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const key_type, mapped_type&amp;gt;&lt;/code&gt; であるため、コピー代入可能ではない）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) の形式の場合、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::propagate_on_container_move_assignment::value&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; であれば、以下の条件を満たすこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value_type&lt;/code&gt; はこのコンテナに対してムーブ挿入可能（MoveInsertable）であること。（但し、備考参照）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;key_type&lt;/code&gt;、および、&lt;code&gt;mapped_type&lt;/code&gt; はムーブ代入可能（MoveAssignable）であること。（&lt;code&gt;value_type&lt;/code&gt; は &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const key_type, mapped_type&amp;gt;&lt;/code&gt; であるため、ムーブ代入可能ではない）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1)   &lt;code&gt;v&lt;/code&gt; の全ての要素がコピー代入される。ハッシュ関数オブジェクト、キー比較用関数オブジェクト、&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の値もコピーされる。
    アロケータオブジェクトは、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::propagate_on_container_copy_assignment::value&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合に限りコピーされる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2)   ハッシュ関数オブジェクト、キー比較用関数オブジェクトの値はムーブされる。
    &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の値はコピーされる。
    アロケータオブジェクトは、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::propagate_on_container_move_assignment::value&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合に限りムーブされる。コンテナ内に元々存在していた要素は、代入されるか、破棄される（デストラクタが呼び出される）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3)   範囲 &lt;code&gt;[il.begin(), il.end())&lt;/code&gt; がコピー代入される。
    コンテナ内に元々存在していた要素は、代入されるか、破棄される（デストラクタが呼び出される）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;p&gt;以下では構築されたオブジェクトを &lt;code&gt;u&lt;/code&gt; とする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) &lt;code&gt;u == v&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;(2) &lt;code&gt;u == 代入前の rv&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;(3) －&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   平均的には O(n)、ここで、&lt;code&gt;n = v.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;。最悪のケースでは O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;(2)   線形時間。&lt;/li&gt;
&lt;li&gt;(3)   代入対象を &lt;code&gt;a&lt;/code&gt;、&lt;code&gt;a&lt;/code&gt; の型を &lt;code&gt;X&lt;/code&gt; とすると、&lt;code&gt;a = X(il)&lt;/code&gt; と同様。（備考参照）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(3) の形式の場合、計算量は &lt;code&gt;a = X(il)&lt;/code&gt; と同様となっているが、効果が &lt;code&gt;a = X(il)&lt;/code&gt; と同様なわけではない。（ハッシュ関数オブジェクト、キー比較用関数オブジェクト、アロケータオブジェクト、&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; 等が異なる）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) の形式の要件に、「&lt;code&gt;value_type&lt;/code&gt; はこのコンテナに対してムーブ挿入可能であること」というものがあるが、&lt;code&gt;value_type&lt;/code&gt; は &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;const key_type, mapped_type&amp;gt;&lt;/code&gt; であるため、通常のムーブ挿入可能の条件に合わせると &lt;code&gt;key_type&lt;/code&gt; にコピーコンストラクタが必要となってしまう。
    従って、規格書に明確な記載はないものの、この場合のムーブ挿入可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の左辺値、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタ、&lt;code&gt;krv&lt;/code&gt; をキーの型 &lt;code&gt;key_type&lt;/code&gt; の右辺値、&lt;code&gt;mrv&lt;/code&gt; を値の型 &lt;code&gt;mapped_type&lt;/code&gt; の右辺値とすると、以下の式が適格（well-formed）であるということであるものと思われる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, krv, mrv)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.0, 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.4.7, 4.5.3, 4.6.3, 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/op_constructor.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/op_destructor.html&#34;&gt;&lt;code&gt;(destructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(3)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/op_constructor.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/unordered_map/unordered_multimap/op_constructor.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class unordered_multimap&#34;&gt;unordered_multimap::&lt;/span&gt;コンストラクタ (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;unordered_multimap();                                                    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++14&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;unordered_multimap&lt;/span&gt;(size_type n,
                            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; hasher&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; hf &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; hasher(),
                            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_equal&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; eql &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; key_equal(),
                            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; allocator_type()); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;unordered_multimap&lt;/span&gt;(size_type n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;実装依存の既定値&lt;/span&gt;,
                            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; hasher&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; hf &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; hasher(),
                            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_equal&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; eql &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; key_equal(),
                            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; allocator_type());  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) + (2) C++11&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
unordered_multimap(InputIterator first, InputIterator last,
                   size_type n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;実装依存の既定値&lt;/span&gt;,
                   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; hasher&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; hf &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; hasher(),
                   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_equal&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; eql &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; key_equal(),
                   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; allocator_type());           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

unordered_multimap(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v);                          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;

unordered_multimap(unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rv);                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;unordered_multimap&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;

unordered_multimap(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7)&lt;/span&gt;

unordered_multimap(unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rv, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8)&lt;/span&gt;

unordered_multimap(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il,
                   size_type n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;実装依存の既定値&lt;/span&gt;,
                   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; hasher&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; hf &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; hasher(),
                   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_equal&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; eql &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; key_equal(),
                   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; allocator_type());           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (9)&lt;/span&gt;

unordered_multimap(size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (10) C++14&lt;/span&gt;

unordered_multimap(size_type n,
                   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; hasher&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; hf,
                   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (11) C++14&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
unordered_multimap(InputIterator f,
                   InputIterator l,
                   size_type n,
                   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (12) C++14&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
unordered_multimap(InputIterator f,
                   InputIterator l,
                   size_type n,
                   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; hasher&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; hf, 
                   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (13) C++14&lt;/span&gt;

unordered_multimap(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il,
                   size_type n,
                   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (14) C++14&lt;/span&gt;

unordered_multimap(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il,
                   size_type n,
                   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; hasher&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; hf, 
                   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (15) C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;unordered_multimap&lt;/code&gt; オブジェクトを構築する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ハッシュ関数オブジェクト &lt;code&gt;hasher&lt;/code&gt; が引数として与えられなかった場合、&lt;code&gt;hasher&lt;/code&gt; は DefaultConstructible であること。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;キー比較用関数オブジェクト &lt;code&gt;key_equal&lt;/code&gt; が引数として与えられなかった場合、&lt;code&gt;key_equal&lt;/code&gt; は DefaultConstructible であること。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;アロケータオブジェクト &lt;code&gt;allocator_type&lt;/code&gt; が引数として与えられなかった場合、&lt;code&gt;allocator_type&lt;/code&gt; は DefaultConstructible であること。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3) の形式の場合、&lt;code&gt;value_type&lt;/code&gt; は &lt;code&gt;*first&lt;/code&gt; からこの &lt;code&gt;unordered_multimap&lt;/code&gt; に EmplaceConstructible であること。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(4)、(7)、および (9) の形式の場合、&lt;code&gt;value_type&lt;/code&gt; はこの &lt;code&gt;unordered_multimap&lt;/code&gt; に CopyInsertable であること。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(5) の形式の場合、&lt;code&gt;allocator_type&lt;/code&gt; のムーブ構築は例外終了しないこと。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(8) の形式の場合、&lt;code&gt;value_type&lt;/code&gt; はこの &lt;code&gt;unordered_multimap&lt;/code&gt; に MoveInsertable であること。（但し、備考参照）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1)   バケット数の最低が実装依存の、要素を持たない空の &lt;code&gt;unordered_multimap&lt;/code&gt; を構築する。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2)   バケット数最低 &lt;code&gt;n&lt;/code&gt;、ハッシュ関数オブジェクト &lt;code&gt;hf&lt;/code&gt;、キー比較用関数オブジェクト &lt;code&gt;eql&lt;/code&gt;、アロケータオブジェクト &lt;code&gt;a&lt;/code&gt; で、要素を持たない空の &lt;code&gt;unordered_multimap&lt;/code&gt; を構築する。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(1) + (2) バケット数最低 &lt;code&gt;n&lt;/code&gt;、ハッシュ関数オブジェクト &lt;code&gt;hf&lt;/code&gt;、キー比較用関数オブジェクト &lt;code&gt;eql&lt;/code&gt;、アロケータオブジェクト &lt;code&gt;a&lt;/code&gt; で、要素を持たない空の &lt;code&gt;unordered_multimap&lt;/code&gt; を構築する。
    引数 &lt;code&gt;n&lt;/code&gt; のデフォルト値は実装依存である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3)   (1)と同様に &lt;code&gt;unordered_multimap&lt;/code&gt; が構築された後、&lt;code&gt;[first, last)&lt;/code&gt; の範囲の要素が挿入される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(4)   コピーコンストラクタ。&lt;code&gt;v&lt;/code&gt; の全ての要素をコピーした、&lt;code&gt;unordered_multimap&lt;/code&gt; を構築する。
    ハッシュ関数オブジェクトとキー比較関数オブジェクト、および、&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の値も &lt;code&gt;v&lt;/code&gt; からコピーされる。
    アロケータオブジェクトは、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/select_on_container_copy_construction.html&#34;&gt;&lt;code&gt;select_on_container_copy_construction&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;())&lt;/code&gt; の戻り値が使用される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(5)   ムーブコンストラクタ。&lt;code&gt;rv&lt;/code&gt; の全ての要素をムーブした、&lt;code&gt;unordered_multimap&lt;/code&gt; を構築する。
    ハッシュ関数オブジェクトとキー比較関数オブジェクト、および、アロケータオブジェクトも &lt;code&gt;v&lt;/code&gt; からムーブされる。
    &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の値は &lt;code&gt;rv&lt;/code&gt; からコピーされる。
    なお、要素のムーブは個々に行われるのではなく、&lt;code&gt;unordered_multimap&lt;/code&gt; 内部の構造ごと一括でムーブされる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(6)   ハッシュ関数オブジェクト &lt;code&gt;hasher()&lt;/code&gt;、キー比較用関数オブジェクト &lt;code&gt;key_equal()&lt;/code&gt;、アロケータオブジェクト &lt;code&gt;a&lt;/code&gt; で、要素を持たない空の &lt;code&gt;unordered_multimap&lt;/code&gt; を構築する。
    構築された &lt;code&gt;unordered_multimap&lt;/code&gt; のバケット数、および、&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; は実装依存である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(7)   &lt;code&gt;v&lt;/code&gt; の全ての要素をコピーした、&lt;code&gt;unordered_multimap&lt;/code&gt; を構築する。
    ハッシュ関数オブジェクトとキー比較関数オブジェクト、および、&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の値も &lt;code&gt;v&lt;/code&gt; からコピーされるが、アロケータオブジェクトは引数 &lt;code&gt;a&lt;/code&gt; が使用される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(8)   &lt;code&gt;rv&lt;/code&gt; のすべての要素をムーブした、&lt;code&gt;unordered_multimap&lt;/code&gt; を構築する。
    ハッシュ関数オブジェクトとキー比較関数オブジェクトの値も &lt;code&gt;rv&lt;/code&gt; からムーブされるが、アロケータオブジェクトは引数 &lt;code&gt;a&lt;/code&gt; が使用される。
    &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の値は &lt;code&gt;rv&lt;/code&gt; からコピーされる。
    なお、&lt;code&gt;a == rv.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、要素のムーブは個々に行われるのではなく、&lt;code&gt;unordered_multimap&lt;/code&gt; 内部の構造ごと一括でムーブされるが、そうでない場合は要素ごとにムーブされる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(9)   (3) の形式を &lt;code&gt;unordered_multimap(il.begin(), il.end(), n, hf, eql, a)&lt;/code&gt; として呼び出した場合と同等である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(10)  (2) の形式を &lt;code&gt;unordered_multimap(n, hasher(), key_equal(), a)&lt;/code&gt; として呼び出した場合と同等である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(11)  (2) の形式を &lt;code&gt;unordered_multimap(n, hf, key_equal(), a)&lt;/code&gt; として呼び出した場合と同等である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(12)  (3) の形式を &lt;code&gt;unordered_multimap(f, l, n, hasher(), key_equal(), a)&lt;/code&gt; として呼び出した場合と同等である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(13)  (3) の形式を &lt;code&gt;unordered_multimap(f, l, n, hf, key_equal(), a)&lt;/code&gt; として呼び出した場合と同等である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(14)  (5) の形式を &lt;code&gt;unordered_multimap(il, n, hasher(), key_equal(), a)&lt;/code&gt; として呼び出した場合と同等である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(15)  (5) の形式を &lt;code&gt;unordered_multimap(il, n, hf, key_equal(), a)&lt;/code&gt; として呼び出した場合と同等である。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;p&gt;以下では構築されたオブジェクトを &lt;code&gt;u&lt;/code&gt; とする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/empty.html&#34;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == true&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == 1.0&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/empty.html&#34;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == true&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == a&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == 1.0&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;= n&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == a&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == 1.0&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;= n&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(4) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == v.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;。
    &lt;code&gt;u == v&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(5) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() ==&lt;/code&gt;構築前の &lt;code&gt;rv.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() ==&lt;/code&gt;構築前の &lt;code&gt;rv.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;。
    &lt;code&gt;u ==&lt;/code&gt;構築前の &lt;code&gt;rv&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(6) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/empty.html&#34;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == true&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == a&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(7) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == v.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;。
    &lt;code&gt;u == v&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == a&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(8) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() ==&lt;/code&gt;構築前の &lt;code&gt;rv.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;。
    &lt;code&gt;u ==&lt;/code&gt;構築前の &lt;code&gt;rv&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == a&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(9) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == a&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == 1.0&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;= n&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   定数&lt;/li&gt;
&lt;li&gt;(2)   定数&lt;/li&gt;
&lt;li&gt;(3)   平均的には O(n)、ここで、n は &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last)&lt;/code&gt;。
    最悪のケースでは O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;(4)   平均的には O(n)、ここで、n は &lt;code&gt;v.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;。
    最悪のケースでは O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;(5)   定数&lt;/li&gt;
&lt;li&gt;(6)   定数&lt;/li&gt;
&lt;li&gt;(7)   O(&lt;code&gt;v.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;(8)   &lt;code&gt;a == rv.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、定数。
    そうでない場合、O(&lt;code&gt;rv.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;(9)   (3)の形式を &lt;code&gt;unordered_multimap(il.begin(), il.end(), n, hf, eql, a)&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;li&gt;(10)  (2) の形式を &lt;code&gt;unordered_multimap(n, hasher(), key_equal(), a)&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;li&gt;(11)  (2) の形式を &lt;code&gt;unordered_multimap(n, hf, key_equal(), a)&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;li&gt;(12)  (3) の形式を &lt;code&gt;unordered_multimap(f, l, n, hasher(), key_equal(), a)&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;li&gt;(13)  (3) の形式を &lt;code&gt;unordered_multimap(f, l, n, hf, key_equal(), a)&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;li&gt;(14)  (5) の形式を &lt;code&gt;unordered_multimap(il, n, hasher(), key_equal(), a)&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;li&gt;(15)  (5) の形式を &lt;code&gt;unordered_multimap(il, n, hf, key_equal(), a)&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(8) の形式の場合、MoveInsertable が要件となっているが、&lt;code&gt;rv.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == a&lt;/code&gt; の場合にはムーブコンストラクタと同様の挙動となるため、MoveInsertable ではなくても良いと思われる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++14 では、デフォルトコンストラクタを (1) + (2) の形式から (1) の形式に分離して残りを (2) の形式（&lt;code&gt;n&lt;/code&gt; のデフォルト引数を削除）にした。
    これは、デフォルトコンストラクタに &lt;code&gt;explicit&lt;/code&gt; が付いていると、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unordered_multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;のようなコード（C++11 から導入された、コピーリスト初期化によるデフォルトコンストラクタ呼び出し）がエラーになってしまうためである。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.0, 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.4.7, 4.5.3, 4.6.3, 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;備考&lt;/h4&gt;
&lt;p&gt;libstdc++ には 4.8.2 現在、(6)、(7)、(8)の形式はない。&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/op_destructor.html&#34;&gt;&lt;code&gt;(destructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map/unordered_multimap/op_assign.html&#34;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(9)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2193&#34; target=&#34;_blank&#34;&gt;LWG 2193. Default constructors for standard library containers are explicit&lt;/a&gt;&lt;br /&gt;
    (1) + (2) を 2 つのオーバーロードに分割するきっかけとなったレポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2210&#34; target=&#34;_blank&#34;&gt;LWG 2210. Missing allocator-extended constructor for allocator-aware containers&lt;/a&gt;&lt;br /&gt;
    (10)、(11)、(12)、(13)、(14)、(15) を追加するきっかけとなったレポート&lt;br /&gt;
    なお、Discussion の例はアロケータの型が誤っているので注意&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/emplace.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/unordered_set/unordered_multiset/emplace.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class unordered_multiset&#34;&gt;unordered_multiset::&lt;/span&gt;emplace (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator emplace(Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;コンテナ内へ要素を直接構築する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;このコンテナの要素型 &lt;code&gt;value_type&lt;/code&gt; は、コンテナに対して引数 &lt;code&gt;args&lt;/code&gt; から直接構築可能（EmplaceConstructible）でなければならない。&lt;/p&gt;
&lt;p&gt;ここで、コンテナに対して引数 &lt;code&gt;args&lt;/code&gt; から直接構築可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の左辺値、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタとすると、以下の式が適格（well-formed）であるということである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args)...);&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt; から構築された &lt;code&gt;value_type&lt;/code&gt; のオブジェクト &lt;code&gt;t&lt;/code&gt; をコンテナに挿入する。&lt;/p&gt;
&lt;p&gt;なお、オブジェクト &lt;code&gt;t&lt;/code&gt; は、構築後にコンテナにコピー、あるいはムーブされるわけではなく、コンテナ内に直接構築される。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;追加された要素を指すイテレータ。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;ハッシュ関数以外から例外が投げられた場合には、挿入はされない。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;平均的なケースでは定数（O(&lt;code&gt;1&lt;/code&gt;)）だが、最悪のケースではコンテナの要素数に比例（O(&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)）。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;この関数が呼ばれた後も、当該コンテナ内の要素を指す参照は無効にはならない。&lt;br /&gt;
    なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;この関数が呼ばれた後も、呼び出しの前後でこのコンテナのバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）が変わらなかった場合には当該コンテナを指すイテレータは無効にはならない。
    それ以外の場合は、当該コンテナを指すイテレータは無効になる可能性がある。&lt;br /&gt;
    コンテナのバケット数が変わらない場合とは、要素追加後の要素数が、要素追加前のバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）×最大負荷率（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）よりも小さかった場合である。&lt;br /&gt;
    なお、条件が「よりも小さい」となっているが、最大負荷率の定義からすると「以下」の方が適切と思われる。&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt; も参照。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;このメンバ関数は、コンテナの種類によってシグネチャが異なるため、注意が必要である。&lt;br /&gt;
&lt;code&gt;emplace_hint&lt;/code&gt; も含めた一覧を以下に示す。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;シーケンスコンテナ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace(const_iterator, Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;br /&gt;（同一キーの重複を許さない場合）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;pair&amp;lt;iterator, bool&amp;gt; emplace(Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;br /&gt;（同一キーの重複を許す場合）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace(Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace_hint(const_iterator, Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set.html&#34;&gt;unordered_set&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility.html&#34;&gt;utility&lt;/a&gt;&amp;gt;    &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// for std::&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;algorithm&lt;/a&gt;&amp;gt;  &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// for std::&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/copy.html&#34;&gt;copy&lt;/a&gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator.html&#34;&gt;iterator&lt;/a&gt;&amp;gt;   &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// for std::&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/ostream_iterator.html&#34;&gt;ostream_iterator&lt;/a&gt;&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サンプル用クラス&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; is &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
  is(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(i, s) {}
  is(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; is&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;span style=&#34;color:#ff0000&#34;&gt;emplace&lt;/span&gt; はコピーコンストラクタが無くても大丈夫&lt;/span&gt;
  is(is&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;;      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// もちろんムーブコンストラクタが無くても大丈夫&lt;/span&gt;
};

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サンプル用クラスのために std::&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;hash&lt;/a&gt; を特殊化&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;hash&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;is&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;hash&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;hash&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; is&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;hash&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(v.first) &lt;span style=&#34;color: #666666&#34;&gt;^&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;hash&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(v.second); }
  };
}

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サンプル用クラスのための挿入演算子&lt;/span&gt;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;ostream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;ostream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; is&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;(&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset.html&#34;&gt;unordered_multiset&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;is&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it3 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//以下はコピー&amp;amp;ムーブコンストラクタが無いのでエラーになる&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//auto it4 = um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/insert.html&#34;&gt;insert&lt;/a&gt;(is(3, &#34;3rd&#34;));&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//std::cout &amp;lt;&amp;lt; *it4 &amp;lt;&amp;lt; &#39;\n&#39;;&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 追加結果の出力&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/copy.html&#34;&gt;copy&lt;/a&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/cend.html&#34;&gt;cend&lt;/a&gt;(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/ostream_iterator.html&#34;&gt;ostream_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;is&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt;));
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(1,1st)
(2,2nd)
(1,1st)
(2,2nd), (1,1st), (1,1st),
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;注：&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset.html&#34;&gt;&lt;code&gt;unordered_multiset&lt;/code&gt;&lt;/a&gt; は非順序連想コンテナであるため、出力順序は無意味であることに注意&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/emplace_hint.html&#34;&gt;&lt;code&gt;emplace_hint&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;挿入位置のヒントを使用したコンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の追加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;内容の交換&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;バケット数の取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/load_factor.html&#34;&gt;&lt;code&gt;load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;現在の負荷率（バケットあたりの要素数の平均）を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最大負荷率を取得、設定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/rehash.html&#34;&gt;&lt;code&gt;rehash&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小バケット数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小要素数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2680.pdf&#34; target=&#34;_blank&#34;&gt;N2680 Proposed Wording for Placement Insert (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace_hint (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/emplace_hint.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/unordered_set/unordered_multiset/emplace_hint.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class unordered_multiset&#34;&gt;unordered_multiset::&lt;/span&gt;emplace_hint (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator emplace_hint(const_iterator position, Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;挿入位置のヒントを使用してコンテナ内へ要素を直接構築する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;このコンテナの要素型 &lt;code&gt;value_type&lt;/code&gt; は、コンテナに対して引数 &lt;code&gt;args&lt;/code&gt; から直接構築可能（EmplaceConstructible）でなければならない。&lt;br /&gt;
    ここで、コンテナに対して引数 &lt;code&gt;args&lt;/code&gt; から直接構築可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の左辺値、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタとすると、以下の式が適格（well-formed）であるということである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args)...);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引数 &lt;code&gt;position&lt;/code&gt; は、コンテナの有効な読み取り専用イテレータでなければならないが、間接参照可能（dereferenceable）である必要はない。（つまり、最終要素の次を指すイテレータでも良い）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt; から構築された &lt;code&gt;value_type&lt;/code&gt; のオブジェクト &lt;code&gt;t&lt;/code&gt; をコンテナに挿入する。&lt;/p&gt;
&lt;p&gt;なお、オブジェクト &lt;code&gt;t&lt;/code&gt; は、構築後にコンテナにコピー、あるいはムーブされるわけではなく、コンテナ内に直接構築される。&lt;/p&gt;
&lt;p&gt;引数 &lt;code&gt;position&lt;/code&gt; は、要素の挿入位置を探し始める場所のヒントとして使用されるが、実装によって無視されるかもしれない。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;追加された要素を指すイテレータ。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;ハッシュ関数以外から例外が投げられた場合には、挿入はされない。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;平均的なケースでは定数（O(&lt;code&gt;1&lt;/code&gt;)）だが、最悪のケースではコンテナの要素数に比例（O(&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)）。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;この関数が呼ばれた後も、当該コンテナ内の要素を指す参照は無効にはならない。&lt;br /&gt;
    なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;この関数が呼ばれた後も、呼び出しの前後でこのコンテナのバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）が変わらなかった場合には当該コンテナを指すイテレータは無効にはならない。
    それ以外の場合は、当該コンテナを指すイテレータは無効になる可能性がある。&lt;br /&gt;
    コンテナのバケット数が変わらない場合とは、要素追加後の要素数が、要素追加前のバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）×最大負荷率（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）よりも小さかった場合である。&lt;br /&gt;
    なお、条件が「よりも小さい」となっているが、最大負荷率の定義からすると「以下」の方が適切と思われる。&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt; も参照。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;このメンバ関数は、コンテナの種類によってシグネチャが異なるため、注意が必要である。&lt;br /&gt;
&lt;code&gt;emplace&lt;/code&gt; も含めた一覧を以下に示す。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;シーケンスコンテナ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace(const_iterator, Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;br /&gt;（同一キーの重複を許さない場合）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;pair&amp;lt;iterator, bool&amp;gt; emplace(Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;br /&gt;（同一キーの重複を許す場合）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace(Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace_hint(const_iterator, Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本関数呼び出しで構築されるオブジェクト &lt;code&gt;t&lt;/code&gt; と等価なキーの要素が既に存在する場合、&lt;code&gt;position&lt;/code&gt; に応じて既存の要素と新規の要素が順序付けられると期待されるが、規格書にそのような規定は存在しない。
    従って、そのような期待はすべきではない。（下記の出力例も参照）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set.html&#34;&gt;unordered_set&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility.html&#34;&gt;utility&lt;/a&gt;&amp;gt;    &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// for std::&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;algorithm&lt;/a&gt;&amp;gt;  &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// for std::&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/copy.html&#34;&gt;copy&lt;/a&gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator.html&#34;&gt;iterator&lt;/a&gt;&amp;gt;   &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// for std::&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/ostream_iterator.html&#34;&gt;ostream_iterator&lt;/a&gt;&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サンプル用クラス&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; is &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
  is(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(i, s) {}
};

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サンプル用クラスの比較演算子（first のみを比較）&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; is&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; t, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; is&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; u)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; t.first &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; u.first;
}

&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; is&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; t, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; is&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; u)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; t.first &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; u.first;
}

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サンプル用クラスのために std::&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;hash&lt;/a&gt; を特殊化（first のみに依存）&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;hash&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;is&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;hash&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; is&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;hash&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(v.first); }
  };
}

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サンプル用クラスのための挿入演算子&lt;/span&gt;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;ostream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;ostream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; is&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;(&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt;;
}

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 出力関数&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Iterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; label, Iterator begin, Iterator end, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;ostream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout)
{
  os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; label &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : &#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/copy.html&#34;&gt;copy&lt;/a&gt;(begin, end, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/ostream_iterator.html&#34;&gt;ostream_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;is&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(os, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt;));
  os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset.html&#34;&gt;unordered_multiset&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;is&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;}, };

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 初期状態の出力&lt;/span&gt;
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;before&#34;&lt;/span&gt;, um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/cend.html&#34;&gt;cend&lt;/a&gt;());

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 追加するデータと等価な範囲を取得&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/equal_range.html&#34;&gt;equal_range&lt;/a&gt;(is(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;4th&#34;&lt;/span&gt;));
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/equal_range.html&#34;&gt;equal_range&lt;/a&gt;&#34;&lt;/span&gt;, p.first, p.second);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 等価な要素の間に &lt;span style=&#34;color:#ff0000&#34;&gt;emplace_hint&lt;/span&gt; でデータを追加&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace_hint&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;next&lt;/a&gt;(p.first), &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;4th&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;emplace_hint&lt;/span&gt; : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 追加結果の出力&lt;/span&gt;
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;after&#34;&lt;/span&gt;, um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/cend.html&#34;&gt;cend&lt;/a&gt;());
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;libstdc++ の出力例（4.7.3 現在）&lt;br /&gt;
    追加した要素 (1,4th) はヒントを無視して (1,2nd) と (1,1st) よりも前に追加されている。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;    before : (2,3rd), (1,2nd), (1,1st), 
    equal_range : (1,2nd), (1,1st), 
    emplace_hint : (1,4th)
    after : (2,3rd), (1,4th), (1,2nd), (1,1st), 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;libc++ の出力例（2013/11/22 現在）&lt;br /&gt;
    追加した要素 (1,4th) がヒントで指定した通り (1,1st) と (1,2nd) の間に追加されている。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;    before : (2,3rd), (1,1st), (1,2nd), 
    equal_range : (1,1st), (1,2nd), 
    emplace_hint : (1,4th)
    after : (2,3rd), (1,1st), (1,4th), (1,2nd), 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注：&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset.html&#34;&gt;&lt;code&gt;unordered_multiset&lt;/code&gt;&lt;/a&gt; は非順序連想コンテナであるため、出力順序は無意味であることに注意&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の追加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;内容の交換&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;バケット数の取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/load_factor.html&#34;&gt;&lt;code&gt;load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;現在の負荷率（バケットあたりの要素数の平均）を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最大負荷率を取得、設定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/rehash.html&#34;&gt;&lt;code&gt;rehash&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小バケット数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小要素数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2680.pdf&#34; target=&#34;_blank&#34;&gt;N2680 Proposed Wording for Placement Insert (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/insert.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/unordered_set/unordered_multiset/insert.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class unordered_multiset&#34;&gt;unordered_multiset::&lt;/span&gt;insert (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v);
iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rv);                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(const_iterator position, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v);
iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(const_iterator position, value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rv);     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; insert(InputIterator first, InputIterator last);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il);                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;コンテナに要素を追加する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v&lt;/code&gt; を引数にとる形式（(1)、(2)の上側）では、&lt;code&gt;value_type&lt;/code&gt; はコンテナに対してコピー挿入可能（CopyInsertable）でなければならない。&lt;br /&gt;
    コンテナに対してコピー挿入可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の左辺値、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタとすると、以下の式が適格（well-formed）であるということである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, v);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;rv&lt;/code&gt; を引数にとる形式（(1)、(2)の下側）では、&lt;code&gt;value_type&lt;/code&gt; はコンテナに対してムーブ挿入可能（MoveInsertable）でなければならない。&lt;br /&gt;
    コンテナに対してムーブ挿入可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の左辺値、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタとすると、以下の式が適格（well-formed）であるということである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/move.html&#34;&gt;&lt;code&gt;move&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(rv));&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引数 &lt;code&gt;position&lt;/code&gt; は、コンテナの有効な読み取り専用イテレータでなければならない。&lt;br /&gt;
    なお、標準では間接参照可能（dereferenceable）である必要があることになっているが、その必要はない（つまり、最終要素の次を指すイテレータでも良い）ものと思われる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引数 &lt;code&gt;first&lt;/code&gt;、および、&lt;code&gt;last&lt;/code&gt;は、入力イテレータの要件を満たし、かつ、範囲 &lt;code&gt;[first, last)&lt;/code&gt; が当該コンテナ&lt;strong&gt;以外を指す&lt;/strong&gt;有効な範囲でなければならない。&lt;br /&gt;
    また、引数 &lt;code&gt;first&lt;/code&gt;、および、&lt;code&gt;last&lt;/code&gt; を引数にとる形式（(3)）では、このコンテナの要素型 &lt;code&gt;value_type&lt;/code&gt; は、コンテナに対して &lt;code&gt;*first&lt;/code&gt; から直接構築可能（EmplaceConstructible）でなければならない。&lt;br /&gt;
    ここで、コンテナに対して &lt;code&gt;*first&lt;/code&gt; から直接構築可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の左辺値、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタとすると、以下の式が適格（well-formed）であるということである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, *first);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;なお、&lt;code&gt;first&lt;/code&gt;、および、&lt;code&gt;last&lt;/code&gt;は、標準では &lt;code&gt;value_type&lt;/code&gt; を参照しなければならない（つまり、コンテナの &lt;code&gt;value_type&lt;/code&gt; と &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;&lt;code&gt;iterator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;decltype(first)&amp;gt;::value_type&lt;/code&gt; が同一の型でなければならない）ことになっているが、実際にはその必要はなく、上記の直接構築可能の要件を満たすだけで良いものと思われる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(4)の形式では、&lt;code&gt;value_type&lt;/code&gt; はコンテナに対してコピー挿入可能でなければならない。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   引数 &lt;code&gt;v&lt;/code&gt;、あるいは &lt;code&gt;rv&lt;/code&gt; で指定した値の要素を追加する。&lt;/li&gt;
&lt;li&gt;(2)   引数 &lt;code&gt;v&lt;/code&gt;、あるいは &lt;code&gt;rv&lt;/code&gt; で指定した値の要素を追加する。&lt;br /&gt;
    引数 &lt;code&gt;position&lt;/code&gt; は、要素の挿入位置を探し始める場所のヒントとして使用されるが、実装によって無視されるかもしれない。&lt;/li&gt;
&lt;li&gt;(3)   範囲 &lt;code&gt;[first, last)&lt;/code&gt; のすべての要素 &lt;code&gt;t&lt;/code&gt; に対して、(1)の形式の &lt;code&gt;insert(t)&lt;/code&gt; を呼び出した場合と同等である。&lt;/li&gt;
&lt;li&gt;(4)   (3)の形式を &lt;code&gt;insert(il.begin(), il.end())&lt;/code&gt; として呼び出した場合と同等である。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   追加された要素を指すイテレータ。&lt;/li&gt;
&lt;li&gt;(2)   追加された要素を指すイテレータ。&lt;/li&gt;
&lt;li&gt;(3)   なし&lt;/li&gt;
&lt;li&gt;(4)   なし&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;単一要素の形式（(1)と(2)）では、ハッシュ関数以外から例外が投げられた場合には、挿入はされない。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   平均的なケースでは定数（O(1)）だが、最悪のケースではコンテナの要素数 &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; に比例（O(N)）。&lt;/li&gt;
&lt;li&gt;(2)   平均的なケースでは定数（O(1)）だが、最悪のケースではコンテナの要素数 &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; に比例（O(N)）。&lt;/li&gt;
&lt;li&gt;(3)   平均的なケースでは引数の範囲の要素数 &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last)&lt;/code&gt; に比例（O(N)）するが、最悪のケースでは引数の範囲の要素数 &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last)&lt;/code&gt; とコンテナの要素数 &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; に 1 加えたものの積に比例（O(&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last) * (&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() + 1)&lt;/code&gt;)）。&lt;/li&gt;
&lt;li&gt;(4)   (3)の形式を &lt;code&gt;insert(il.begin(), il.end())&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;これらの関数が呼ばれた後も、当該コンテナ内の要素を指す参照は無効にはならない。
    なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;これらの関数が呼ばれた後も、呼び出しの前後でこのコンテナのバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）が変わらなかった場合には当該コンテナを指すイテレータは無効にはならない。&lt;br /&gt;
    それ以外の場合は、当該コンテナを指すイテレータは無効になる可能性がある。&lt;br /&gt;
    コンテナのバケット数が変わらない場合とは、要素追加後の要素数が、要素追加前のバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）×最大負荷率（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）よりも小さかった場合である。
    なお、条件が「よりも小さい」となっているが、最大負荷率の定義からすると「以下」の方が適切と思われる。&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt; も参照。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;position&lt;/code&gt; を引数にとる形式（(2)）の場合、本関数呼び出しで構築されるオブジェクト &lt;code&gt;t&lt;/code&gt; と等価なキーの要素が既に存在する場合、&lt;code&gt;position&lt;/code&gt; に応じて既存の要素と新規の要素が順序付けられると期待されるが、規格書にそのような規定は存在しない。
    従って、そのような期待はすべきではない。&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/emplace_hint.html&#34;&gt;&lt;code&gt;emplace_hint&lt;/code&gt;&lt;/a&gt;も参照。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set.html&#34;&gt;unordered_set&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator.html&#34;&gt;iterator&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;algorithm&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; label, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; C&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; label &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : &#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/copy.html&#34;&gt;copy&lt;/a&gt;(c.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), c.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/cend.html&#34;&gt;cend&lt;/a&gt;(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/ostream_iterator.html&#34;&gt;ostream_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; C&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;));
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 一つの要素を挿入（(1)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset.html&#34;&gt;unordered_multiset&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, };

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重複のないケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重複のあるケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; one element&#34;&lt;/span&gt;, um);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 一つの要素を挿入（(2)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset.html&#34;&gt;unordered_multiset&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, };

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重複のないケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(um.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重複のあるケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; one element with hint&#34;&lt;/span&gt;, um);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 複数の要素を挿入（(3)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset.html&#34;&gt;unordered_multiset&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, };

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; fl{ &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, };
    um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(fl.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), fl.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/cend.html&#34;&gt;cend&lt;/a&gt;()); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt; の要素を全部&lt;/span&gt;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; range&#34;&lt;/span&gt;, um);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 複数の要素を挿入（(4)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset.html&#34;&gt;unordered_multiset&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; um{ &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, };

    um.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;({ &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, });
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; initializer_list&#34;&lt;/span&gt;, um);
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;6 2
insert one element : 6 5 5 4 4 3 3 2 2 2 1 1 0 0 
6 2
insert one element with hint : 6 5 5 4 4 3 3 2 2 2 1 1 0 0 
insert range : 7 8 6 5 5 5 4 4 3 3 2 2 1 1 0 0 0 
insert initializer_list : 7 8 6 5 5 5 4 4 3 3 2 2 1 1 0 0 0 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;注：&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset.html&#34;&gt;&lt;code&gt;unordered_multiset&lt;/code&gt;&lt;/a&gt; は非順序連想コンテナであるため、出力順序は無意味であることに注意&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;(2)以降の形式は、(1)の形式を使って実装することができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; iterator unordered_multiset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key, Hash, Pred, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(const_iterator, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(v);
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; iterator unordered_multiset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key, Hash, Pred, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(const_iterator, value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rv)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/move.html&#34;&gt;move&lt;/a&gt;(rv));
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; unordered_multiset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key, Hash, Pred, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(InputIterator first, InputIterator last);
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (; first &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;first)
    &lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;first);
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; unordered_multiset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key, Hash, Pred, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il);
{
  &lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(il.begin(), il.end());
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/emplace_hint.html&#34;&gt;&lt;code&gt;emplace_hint&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;挿入位置のヒントを使用したコンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;内容の交換&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;バケット数の取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/load_factor.html&#34;&gt;&lt;code&gt;load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;現在の負荷率（バケットあたりの要素数の平均）を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;負荷率の最大値を取得、設定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/rehash.html&#34;&gt;&lt;code&gt;rehash&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小バケット数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小要素数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(4)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/op_assign.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/unordered_set/unordered_multiset/op_assign.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class unordered_multiset&#34;&gt;unordered_multiset::&lt;/span&gt;operator= (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;unordered_multiset&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; unordered_multiset&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v);     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
unordered_multiset&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(unordered_multiset&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rv);         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
unordered_multiset&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;unordered_multiset&lt;/code&gt; オブジェクトを代入する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1)、および、(3) の形式の場合、以下の条件を満たすこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value_type&lt;/code&gt; はこのコンテナに対してコピー挿入可能（CopyInsertable）であること。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value_type&lt;/code&gt; はコピー代入可能（CopyAssignable）であること。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) の形式の場合、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::propagate_on_container_move_assignment::value&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; であれば、以下の条件を満たすこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value_type&lt;/code&gt; はこのコンテナに対してムーブ挿入可能（MoveInsertable）であること。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value_type&lt;/code&gt; はムーブ代入可能（MoveAssignable）であること。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1)   &lt;code&gt;v&lt;/code&gt; の全ての要素がコピー代入される。ハッシュ関数オブジェクト、キー比較用関数オブジェクト、&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の値もコピーされる。
    アロケータオブジェクトは、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::propagate_on_container_copy_assignment::value&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合に限りコピーされる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2)   ハッシュ関数オブジェクト、キー比較用関数オブジェクトの値はムーブされる。
    &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の値はコピーされる。
    アロケータオブジェクトは、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::propagate_on_container_move_assignment::value&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合に限りムーブされる。コンテナ内に元々存在していた要素は、代入されるか、破棄される（デストラクタが呼び出される）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3)   範囲 &lt;code&gt;[il.begin(), il.end())&lt;/code&gt; がコピー代入される。
    コンテナ内に元々存在していた要素は、代入されるか、破棄される（デストラクタが呼び出される）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;p&gt;以下では構築されたオブジェクトを &lt;code&gt;u&lt;/code&gt; とする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) &lt;code&gt;u == v&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;(2) &lt;code&gt;u == 代入前の rv&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;(3) －&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   平均的には O(n)、ここで、&lt;code&gt;n = v.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;。最悪のケースでは O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;(2)   線形時間。&lt;/li&gt;
&lt;li&gt;(3)   代入対象を &lt;code&gt;a&lt;/code&gt;、&lt;code&gt;a&lt;/code&gt; の型を &lt;code&gt;X&lt;/code&gt; とすると、&lt;code&gt;a = X(il)&lt;/code&gt; と同様。（備考参照）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(3) の形式の場合、計算量は &lt;code&gt;a = X(il)&lt;/code&gt; と同様となっているが、効果が &lt;code&gt;a = X(il)&lt;/code&gt; と同様なわけではない。（ハッシュ関数オブジェクト、キー比較用関数オブジェクト、アロケータオブジェクト、&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; 等が異なる）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.0, 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.4.7, 4.5.3, 4.6.3, 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/op_constructor.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/op_destructor.html&#34;&gt;&lt;code&gt;(destructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(3)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/op_constructor.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/unordered_set/unordered_multiset/op_constructor.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class unordered_multiset&#34;&gt;unordered_multiset::&lt;/span&gt;コンストラクタ (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;unordered_multiset();                                                     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++14&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;unordered_multiset&lt;/span&gt;(size_type n,
                            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; hasher&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; hf &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; hasher(),
                            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_equal&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; eql &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; key_equal(),
                            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; allocator_type());  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14&lt;/span&gt;


&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;unordered_multiset&lt;/span&gt;(size_type n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;実装依存の既定値&lt;/span&gt;,
                            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; hasher&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; hf &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; hasher(),
                            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_equal&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; eql &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; key_equal(),
                            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; allocator_type());  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) + (2) C++11&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
unordered_multiset(InputIterator first, InputIterator last,
                   size_type n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;実装依存の既定値&lt;/span&gt;,
                   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; hasher&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; hf &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; hasher(),
                   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_equal&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; eql &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; key_equal(),
                   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; allocator_type());           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

unordered_multiset(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; unordered_multiset&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v);                          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;

unordered_multiset(unordered_multiset&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rv);                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;unordered_multiset&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;

unordered_multiset(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; unordered_multiset&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7)&lt;/span&gt;

unordered_multiset(unordered_multiset&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rv, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8)&lt;/span&gt;

unordered_multiset(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il,
                   size_type n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;実装依存の既定値&lt;/span&gt;,
                   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; hasher&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; hf &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; hasher(),
                   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_equal&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; eql &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; key_equal(),
                   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; allocator_type());           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (9)&lt;/span&gt;

unordered_multiset(size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (10) C++14&lt;/span&gt;

unordered_multiset(size_type n,
                   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; hasher&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; hf,
                   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (11) C++14&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
unordered_multiset(InputIterator f,
                   InputIterator l,
                   size_type n,
                   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (12) C++14&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
unordered_multiset(InputIterator f,
                   InputIterator l,
                   size_type n,
                   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; hasher&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; hf, 
                   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (13) C++14&lt;/span&gt;

unordered_multiset(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il,
                   size_type n,
                   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (14) C++14&lt;/span&gt;

unordered_multiset(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il,
                   size_type n,
                   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; hasher&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; hf, 
                   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (15) C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;unordered_multiset&lt;/code&gt; オブジェクトを構築する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ハッシュ関数オブジェクト &lt;code&gt;hasher&lt;/code&gt; が引数として与えられなかった場合、&lt;code&gt;hasher&lt;/code&gt; は DefaultConstructible であること。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;キー比較用関数オブジェクト &lt;code&gt;key_equal&lt;/code&gt; が引数として与えられなかった場合、&lt;code&gt;key_equal&lt;/code&gt; は DefaultConstructible であること。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;アロケータオブジェクト &lt;code&gt;allocator_type&lt;/code&gt; が引数として与えられなかった場合、&lt;code&gt;allocator_type&lt;/code&gt; は DefaultConstructible であること。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3) の形式の場合、&lt;code&gt;value_type&lt;/code&gt; は &lt;code&gt;*first&lt;/code&gt; からこの &lt;code&gt;unordered_multiset&lt;/code&gt; に EmplaceConstructible であること。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(4)、(7)、および (9) の形式の場合、&lt;code&gt;value_type&lt;/code&gt; はこの &lt;code&gt;unordered_multiset&lt;/code&gt; に CopyInsertable であること。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(5) の形式の場合、&lt;code&gt;allocator_type&lt;/code&gt; のムーブ構築は例外終了しないこと。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(8) の形式の場合、&lt;code&gt;value_type&lt;/code&gt; はこの &lt;code&gt;unordered_multiset&lt;/code&gt; に MoveInsertable であること。（但し、備考参照）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1)   バケット数の最低が実装依存の、要素を持たない空の &lt;code&gt;unordered_multiset&lt;/code&gt; を構築する。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2)   バケット数最低 &lt;code&gt;n&lt;/code&gt;、ハッシュ関数オブジェクト &lt;code&gt;hf&lt;/code&gt;、キー比較用関数オブジェクト &lt;code&gt;eql&lt;/code&gt;、アロケータオブジェクト &lt;code&gt;a&lt;/code&gt; で、要素を持たない空の &lt;code&gt;unordered_multiset&lt;/code&gt; を構築する。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(1) + (2) バケット数最低 &lt;code&gt;n&lt;/code&gt;、ハッシュ関数オブジェクト &lt;code&gt;hf&lt;/code&gt;、キー比較用関数オブジェクト &lt;code&gt;eql&lt;/code&gt;、アロケータオブジェクト &lt;code&gt;a&lt;/code&gt; で、要素を持たない空の &lt;code&gt;unordered_multiset&lt;/code&gt; を構築する。
    引数 &lt;code&gt;n&lt;/code&gt; のデフォルト値は実装依存である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3)   (2)と同様に &lt;code&gt;unordered_multiset&lt;/code&gt; が構築された後、&lt;code&gt;[first, last)&lt;/code&gt; の範囲の要素が挿入される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(4)   コピーコンストラクタ。&lt;code&gt;v&lt;/code&gt; の全ての要素をコピーした、&lt;code&gt;unordered_multiset&lt;/code&gt; を構築する。
    ハッシュ関数オブジェクトとキー比較関数オブジェクト、および、&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の値も &lt;code&gt;v&lt;/code&gt; からコピーされる。
    アロケータオブジェクトは、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/select_on_container_copy_construction.html&#34;&gt;&lt;code&gt;select_on_container_copy_construction&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;())&lt;/code&gt; の戻り値が使用される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(5)   ムーブコンストラクタ。&lt;code&gt;rv&lt;/code&gt; の全ての要素をムーブした、&lt;code&gt;unordered_multiset&lt;/code&gt; を構築する。
    ハッシュ関数オブジェクトとキー比較関数オブジェクト、および、アロケータオブジェクトも &lt;code&gt;v&lt;/code&gt; からムーブされる。
    &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の値は &lt;code&gt;rv&lt;/code&gt; からコピーされる。
    なお、要素のムーブは個々に行われるのではなく、&lt;code&gt;unordered_multiset&lt;/code&gt; 内部の構造ごと一括でムーブされる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(6)   ハッシュ関数オブジェクト &lt;code&gt;hasher()&lt;/code&gt;、キー比較用関数オブジェクト &lt;code&gt;key_equal()&lt;/code&gt;、アロケータオブジェクト &lt;code&gt;a&lt;/code&gt; で、要素を持たない空の &lt;code&gt;unordered_multiset&lt;/code&gt; を構築する。
    構築された &lt;code&gt;unordered_multiset&lt;/code&gt; のバケット数、および、&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; は実装依存である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(7)   &lt;code&gt;v&lt;/code&gt; の全ての要素をコピーした、&lt;code&gt;unordered_multiset&lt;/code&gt; を構築する。
    ハッシュ関数オブジェクトとキー比較関数オブジェクト、および、&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の値も &lt;code&gt;v&lt;/code&gt; からコピーされるが、アロケータオブジェクトは引数 &lt;code&gt;a&lt;/code&gt; が使用される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(8)   &lt;code&gt;rv&lt;/code&gt; のすべての要素をムーブした、&lt;code&gt;unordered_multiset&lt;/code&gt; を構築する。
    ハッシュ関数オブジェクトとキー比較関数オブジェクトの値も &lt;code&gt;rv&lt;/code&gt; からムーブされるが、アロケータオブジェクトは引数 &lt;code&gt;a&lt;/code&gt; が使用される。
    &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の値は &lt;code&gt;rv&lt;/code&gt; からコピーされる。
    なお、&lt;code&gt;a == rv.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、要素のムーブは個々に行われるのではなく、&lt;code&gt;unordered_multiset&lt;/code&gt; 内部の構造ごと一括でムーブされるが、そうでない場合は要素ごとにムーブされる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(9)   (3) の形式を &lt;code&gt;unordered_multiset(il.begin(), il.end(), n, hf, eql, a)&lt;/code&gt; として呼び出した場合と同等である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(10)  (2) の形式を &lt;code&gt;unordered_multiset(n, hasher(), key_equal(), a)&lt;/code&gt; として呼び出した場合と同等である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(11)  (2) の形式を &lt;code&gt;unordered_multiset(n, hf, key_equal(), a)&lt;/code&gt; として呼び出した場合と同等である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(12)  (3) の形式を &lt;code&gt;unordered_multiset(f, l, n, hasher(), key_equal(), a)&lt;/code&gt; として呼び出した場合と同等である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(13)  (3) の形式を &lt;code&gt;unordered_multiset(f, l, n, hf, key_equal(), a)&lt;/code&gt; として呼び出した場合と同等である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(14)  (5) の形式を &lt;code&gt;unordered_multiset(il, n, hasher(), key_equal(), a)&lt;/code&gt; として呼び出した場合と同等である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(15)  (5) の形式を &lt;code&gt;unordered_multiset(il, n, hf, key_equal(), a)&lt;/code&gt; として呼び出した場合と同等である。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;p&gt;以下では構築されたオブジェクトを &lt;code&gt;u&lt;/code&gt; とする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/empty.html&#34;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == true&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == 1.0&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/empty.html&#34;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == true&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == a&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == 1.0&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;= n&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == a&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == 1.0&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;= n&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(4) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == v.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;。
    &lt;code&gt;u == v&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(5) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() ==&lt;/code&gt;構築前の &lt;code&gt;rv.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() ==&lt;/code&gt;構築前の &lt;code&gt;rv.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;。
    &lt;code&gt;u ==&lt;/code&gt;構築前の &lt;code&gt;rv&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(6) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/empty.html&#34;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == true&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == a&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(7) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == v.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;。
    &lt;code&gt;u == v&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == a&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(8) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() ==&lt;/code&gt;構築前の &lt;code&gt;rv.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;。
    &lt;code&gt;u ==&lt;/code&gt;構築前の &lt;code&gt;rv&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == a&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(9) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == a&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == 1.0&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;= n&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   定数&lt;/li&gt;
&lt;li&gt;(2)   定数&lt;/li&gt;
&lt;li&gt;(3)   平均的には O(n)、ここで、n は &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last)&lt;/code&gt;。
    最悪のケースでは O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;(4)   平均的には O(n)、ここで、n は &lt;code&gt;v.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;。
    最悪のケースでは O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;(5)   定数&lt;/li&gt;
&lt;li&gt;(6)   定数&lt;/li&gt;
&lt;li&gt;(7)   O(&lt;code&gt;v.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;(8)   &lt;code&gt;a == rv.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、定数。
    そうでない場合、O(&lt;code&gt;rv.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;(9)   (3) の形式を &lt;code&gt;unordered_multiset(il.begin(), il.end(), n, hf, eql, a)&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;li&gt;(10)  (2) の形式を &lt;code&gt;unordered_multiset(n, hasher(), key_equal(), a)&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;li&gt;(11)  (2) の形式を &lt;code&gt;unordered_multiset(n, hf, key_equal(), a)&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;li&gt;(12)  (3) の形式を &lt;code&gt;unordered_multiset(f, l, n, hasher(), key_equal(), a)&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;li&gt;(13)  (3) の形式を &lt;code&gt;unordered_multiset(f, l, n, hf, key_equal(), a)&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;li&gt;(14)  (5) の形式を &lt;code&gt;unordered_multiset(il, n, hasher(), key_equal(), a)&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;li&gt;(15)  (5) の形式を &lt;code&gt;unordered_multiset(il, n, hf, key_equal(), a)&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(8) の形式の場合、MoveInsertable が要件となっているが、&lt;code&gt;rv.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == a&lt;/code&gt; の場合にはムーブコンストラクタと同様の挙動となるため、MoveInsertable ではなくても良いと思われる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++14 では、デフォルトコンストラクタを (1) + (2) の形式から (1) の形式に分離して残りを (2) の形式（&lt;code&gt;n&lt;/code&gt; のデフォルト引数を削除）にした。
    これは、デフォルトコンストラクタに &lt;code&gt;explicit&lt;/code&gt; が付いていると、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unordered_multiset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;のようなコード（C++11 から導入された、コピーリスト初期化によるデフォルトコンストラクタ呼び出し）がエラーになってしまうためである。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.0, 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.4.7, 4.5.3, 4.6.3, 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;備考&lt;/h4&gt;
&lt;p&gt;libstdc++ には 4.8.2 現在、(6)、(7)、(8)の形式はない。&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/op_destructor.html&#34;&gt;&lt;code&gt;(destructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_multiset/op_assign.html&#34;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(9)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2193&#34; target=&#34;_blank&#34;&gt;LWG 2193. Default constructors for standard library containers are explicit&lt;/a&gt;&lt;br /&gt;
    (1) + (2) を 2 つのオーバーロードに分割するきっかけとなったレポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2210&#34; target=&#34;_blank&#34;&gt;LWG 2210. Missing allocator-extended constructor for allocator-aware containers&lt;/a&gt;&lt;br /&gt;
    (10)、(11)、(12)、(13)、(14)、(15) を追加するきっかけとなったレポート&lt;br /&gt;
    なお、Discussion の例はアロケータの型が誤っているので注意&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/unordered_set/unordered_set/emplace.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/unordered_set/unordered_set/emplace.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class unordered_set&#34;&gt;unordered_set::&lt;/span&gt;emplace (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;iterator, &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; emplace(Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;コンテナ内へ要素を直接構築する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;このコンテナの要素型 &lt;code&gt;value_type&lt;/code&gt; は、コンテナに対して引数 &lt;code&gt;args&lt;/code&gt; から直接構築可能（EmplaceConstructible）でなければならない。&lt;/p&gt;
&lt;p&gt;ここで、コンテナに対して引数 &lt;code&gt;args&lt;/code&gt; から直接構築可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の左辺値、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタとすると、以下の式が適格（well-formed）であるということである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args)...);&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt; から構築された &lt;code&gt;value_type&lt;/code&gt; のオブジェクトを &lt;code&gt;t&lt;/code&gt; とすると、&lt;code&gt;t&lt;/code&gt; と等価なキーがコンテナに既に存在していなければ、&lt;code&gt;t&lt;/code&gt; をコンテナに挿入する。&lt;/p&gt;
&lt;p&gt;なお、オブジェクト &lt;code&gt;t&lt;/code&gt; は、構築後にコンテナにコピー、あるいはムーブされるわけではなく、コンテナ内に直接構築される。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt; の &lt;code&gt;bool&lt;/code&gt; 部分（&lt;code&gt;second&lt;/code&gt; 部）は、要素が追加されたら &lt;code&gt;true&lt;/code&gt;、追加されなかったら（既にあったら）&lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt; の &lt;code&gt;iterator&lt;/code&gt; 部分（&lt;code&gt;first&lt;/code&gt; 部）は、追加された要素（&lt;code&gt;bool&lt;/code&gt; 部分が &lt;code&gt;true&lt;/code&gt; の場合）、あるいは、既にあった要素（&lt;code&gt;bool&lt;/code&gt; 部分が &lt;code&gt;false&lt;/code&gt; の場合）を指すイテレータ。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;ハッシュ関数以外から例外が投げられた場合には、挿入はされない。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;平均的なケースでは定数（O(&lt;code&gt;1&lt;/code&gt;)）だが、最悪のケースではコンテナの要素数に比例（O(&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)）。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;この関数が呼ばれた後も、当該コンテナ内の要素を指す参照は無効にはならない。&lt;br /&gt;
    なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;この関数が呼ばれた後も、呼び出しの前後でこのコンテナのバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）が変わらなかった場合には当該コンテナを指すイテレータは無効にはならない。
    それ以外の場合は、当該コンテナを指すイテレータは無効になる可能性がある。&lt;br /&gt;
    コンテナのバケット数が変わらない場合とは、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;追加しようとした要素と等価なキーの要素が既にコンテナに存在したため、要素が追加されなかった（つまり、戻り値の &lt;code&gt;pair&lt;/code&gt; の &lt;code&gt;bool&lt;/code&gt; 部分が、&lt;code&gt;false&lt;/code&gt; だった）。&lt;/li&gt;
&lt;li&gt;要素追加後の要素数が、要素追加前のバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）×最大負荷率（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）よりも小さかった。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;のいずれかである。&lt;br /&gt;
なお、後者の条件は「よりも小さい」となっているが、最大負荷率の定義からすると「以下」の方が適切と思われる。&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt; も参照。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;このメンバ関数は、コンテナの種類によってシグネチャが異なるため、注意が必要である。&lt;br /&gt;
&lt;code&gt;emplace_hint&lt;/code&gt; も含めた一覧を以下に示す。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;シーケンスコンテナ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace(const_iterator, Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;br /&gt;（同一キーの重複を許さない場合）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;pair&amp;lt;iterator, bool&amp;gt; emplace(Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;br /&gt;（同一キーの重複を許す場合）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace(Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace_hint(const_iterator, Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set.html&#34;&gt;unordered_set&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility.html&#34;&gt;utility&lt;/a&gt;&amp;gt;    &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// for std::&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;algorithm&lt;/a&gt;&amp;gt;  &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// for std::&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/copy.html&#34;&gt;copy&lt;/a&gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator.html&#34;&gt;iterator&lt;/a&gt;&amp;gt;   &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// for std::&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/ostream_iterator.html&#34;&gt;ostream_iterator&lt;/a&gt;&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サンプル用クラス&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; is &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
  is(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(i, s) {}
  is(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; is&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;span style=&#34;color:#ff0000&#34;&gt;emplace&lt;/span&gt; はコピーコンストラクタが無くても大丈夫&lt;/span&gt;
  is(is&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;;      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// もちろんムーブコンストラクタが無くても大丈夫&lt;/span&gt;
};

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サンプル用クラスのために std::&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;hash&lt;/a&gt; を特殊化&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;hash&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;is&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;hash&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;hash&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; is&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;hash&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(v.first) &lt;span style=&#34;color: #666666&#34;&gt;^&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;hash&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(v.second); }
  };
}

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サンプル用クラスのための挿入演算子&lt;/span&gt;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;ostream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;ostream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; is&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;(&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set.html&#34;&gt;unordered_set&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;is&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; us;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; p1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; us.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p1.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p1.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; p2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; us.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p2.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p2.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; p3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; us.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p3.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p3.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//以下はコピー&amp;amp;ムーブコンストラクタが無いのでエラーになる&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//auto p4 = us.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/insert.html&#34;&gt;insert&lt;/a&gt;(is(3, &#34;3rd&#34;));&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//std::cout &amp;lt;&amp;lt; *p4.first &amp;lt;&amp;lt; &#39; &#39; &amp;lt;&amp;lt; p4.second &amp;lt;&amp;lt; &#39;\n&#39;;&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 追加結果の出力&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/copy.html&#34;&gt;copy&lt;/a&gt;(us.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), us.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/cend.html&#34;&gt;cend&lt;/a&gt;(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/ostream_iterator.html&#34;&gt;ostream_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;is&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt;));
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(1,1st) true
(2,2nd) true
(1,1st) false
(2,2nd), (1,1st), 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;注：&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set.html&#34;&gt;&lt;code&gt;unordered_set&lt;/code&gt;&lt;/a&gt; は非順序連想コンテナであるため、出力の最終行の出力順序は無意味であることに注意&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/emplace_hint.html&#34;&gt;&lt;code&gt;emplace_hint&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;挿入位置のヒントを使用したコンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の追加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;内容の交換&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;バケット数の取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/load_factor.html&#34;&gt;&lt;code&gt;load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;現在の負荷率（バケットあたりの要素数の平均）を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最大負荷率を取得、設定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/rehash.html&#34;&gt;&lt;code&gt;rehash&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小バケット数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小要素数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2680.pdf&#34; target=&#34;_blank&#34;&gt;N2680 Proposed Wording for Placement Insert (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace_hint (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/unordered_set/unordered_set/emplace_hint.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/unordered_set/unordered_set/emplace_hint.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class unordered_set&#34;&gt;unordered_set::&lt;/span&gt;emplace_hint (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator emplace_hint(const_iterator position, Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;挿入位置のヒントを使用してコンテナ内へ要素を直接構築する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;このコンテナの要素型 &lt;code&gt;value_type&lt;/code&gt; は、コンテナに対して引数 &lt;code&gt;args&lt;/code&gt; から直接構築可能（EmplaceConstructible）でなければならない。&lt;br /&gt;
    ここで、コンテナに対して引数 &lt;code&gt;args&lt;/code&gt; から直接構築可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の左辺値、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタとすると、以下の式が適格（well-formed）であるということである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args)...);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引数 &lt;code&gt;position&lt;/code&gt; は、コンテナの有効な読み取り専用イテレータでなければならないが、間接参照可能（dereferenceable）である必要はない。（つまり、最終要素の次を指すイテレータでも良い）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt; から構築された &lt;code&gt;value_type&lt;/code&gt; のオブジェクトを &lt;code&gt;t&lt;/code&gt; とすると、&lt;code&gt;t&lt;/code&gt; と等価なキーがコンテナに既に存在していなければ、&lt;code&gt;t&lt;/code&gt; をコンテナに挿入する。&lt;/p&gt;
&lt;p&gt;なお、オブジェクト &lt;code&gt;t&lt;/code&gt; は、構築後にコンテナにコピー、あるいはムーブされるわけではなく、コンテナ内に直接構築される。&lt;/p&gt;
&lt;p&gt;引数 &lt;code&gt;position&lt;/code&gt; は、要素の挿入位置を探し始める場所のヒントとして使用されるが、実装によって無視されるかもしれない。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;新たな要素が追加された場合、その追加された要素を指すイテレータ。新たな要素が追加されなかった場合、既にあった要素を指すイテレータ。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;ハッシュ関数以外から例外が投げられた場合には、挿入はされない。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;平均的なケースでは定数（O(&lt;code&gt;1&lt;/code&gt;)）だが、最悪のケースではコンテナの要素数に比例（O(&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)）。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;この関数が呼ばれた後も、当該コンテナ内の要素を指す参照は無効にはならない。&lt;br /&gt;
    なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;この関数が呼ばれた後も、呼び出しの前後でこのコンテナのバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）が変わらなかった場合には当該コンテナを指すイテレータは無効にはならない。
    それ以外の場合は、当該コンテナを指すイテレータは無効になる可能性がある。&lt;br /&gt;
    コンテナのバケット数が変わらない場合とは、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;追加しようとした要素と等価なキーの要素が既にコンテナに存在したため、要素が追加されなかった。&lt;/li&gt;
&lt;li&gt;要素追加後の要素数が、要素追加前のバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）×最大負荷率（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）よりも小さかった。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;のいずれかである。&lt;br /&gt;
なお、後者の条件は「よりも小さい」となっているが、最大負荷率の定義からすると「以下」の方が適切と思われる。&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt; も参照。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;このメンバ関数は、コンテナの種類によってシグネチャが異なるため、注意が必要である。&lt;br /&gt;
&lt;code&gt;emplace&lt;/code&gt; も含めた一覧を以下に示す。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;シーケンスコンテナ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace(const_iterator, Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;br /&gt;（同一キーの重複を許さない場合）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;pair&amp;lt;iterator, bool&amp;gt; emplace(Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;br /&gt;（同一キーの重複を許す場合）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace(Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;連想コンテナ、非順序連想コンテナ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class... Args&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;iterator emplace_hint(const_iterator, Args&amp;amp;&amp;amp;...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;unordered_set&lt;/code&gt; では、キーのハッシュ値に基づいて要素を格納するバケットを決定するため、&lt;code&gt;position&lt;/code&gt; を有効に使用することはできないものと思われる。
    実際、libstdc++、および、libc++ では &lt;code&gt;position&lt;/code&gt; は単に無視される。&lt;br /&gt;
    通常は、&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt; を使用した方が良いだろう。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set.html&#34;&gt;unordered_set&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility.html&#34;&gt;utility&lt;/a&gt;&amp;gt;    &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// for std::&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;algorithm&lt;/a&gt;&amp;gt;  &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// for std::&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/copy.html&#34;&gt;copy&lt;/a&gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator.html&#34;&gt;iterator&lt;/a&gt;&amp;gt;   &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// for std::&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/ostream_iterator.html&#34;&gt;ostream_iterator&lt;/a&gt;&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サンプル用クラス&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; is &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
  is(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(i, s) {}
};

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サンプル用クラスのために std::&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;hash&lt;/a&gt; を特殊化&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;hash&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;is&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;hash&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;hash&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; is&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;hash&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(v.first) &lt;span style=&#34;color: #666666&#34;&gt;^&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;hash&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(v.second); }
  };
}

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サンプル用クラスのための挿入演算子&lt;/span&gt;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;ostream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;ostream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; is&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;(&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set.html&#34;&gt;unordered_set&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;is&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; us{ {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;2nd&#34;&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3rd&#34;&lt;/span&gt;}, };

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 初期状態の出力&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/copy.html&#34;&gt;copy&lt;/a&gt;(us.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), us.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/cend.html&#34;&gt;cend&lt;/a&gt;(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/ostream_iterator.html&#34;&gt;ostream_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;is&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt;));
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; us.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace_hint&lt;/span&gt;(us.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/cend.html&#34;&gt;cend&lt;/a&gt;(), &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;4th&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; us.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace_hint&lt;/span&gt;(us.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;5th&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; us.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace_hint&lt;/span&gt;(us.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1st&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it3 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 追加結果の出力&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/copy.html&#34;&gt;copy&lt;/a&gt;(us.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), us.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/cend.html&#34;&gt;cend&lt;/a&gt;(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/ostream_iterator.html&#34;&gt;ostream_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;is&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt;));
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(3,3rd), (2,2nd), (1,1st), 
(4,4th)
(5,5th)
(1,1st)
(4,4th), (3,3rd), (2,2nd), (5,5th), (1,1st), 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;注：&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set.html&#34;&gt;&lt;code&gt;unordered_set&lt;/code&gt;&lt;/a&gt; は非順序連想コンテナであるため、出力順序は無意味であることに注意&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の追加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;内容の交換&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;バケット数の取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/load_factor.html&#34;&gt;&lt;code&gt;load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;現在の負荷率（バケットあたりの要素数の平均）を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最大負荷率を取得、設定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/rehash.html&#34;&gt;&lt;code&gt;rehash&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小バケット数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小要素数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2680.pdf&#34; target=&#34;_blank&#34;&gt;N2680 Proposed Wording for Placement Insert (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/unordered_set/unordered_set/insert.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/unordered_set/unordered_set/insert.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class unordered_set&#34;&gt;unordered_set::&lt;/span&gt;insert (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;iterator, &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; insert(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v);
&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;iterator, &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; insert(value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rv);                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(const_iterator position, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v);
iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(const_iterator position, value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rv);     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; insert(InputIterator first, InputIterator last);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il);                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;コンテナに要素を追加する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v&lt;/code&gt; を引数にとる形式（(1)、(2)の上側）では、&lt;code&gt;value_type&lt;/code&gt; はコンテナに対してコピー挿入可能（CopyInsertable）でなければならない。&lt;br /&gt;
    コンテナに対してコピー挿入可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の左辺値、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタとすると、以下の式が適格（well-formed）であるということである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, v);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;rv&lt;/code&gt; を引数にとる形式（(1)、(2)の下側）では、&lt;code&gt;value_type&lt;/code&gt; はコンテナに対してムーブ挿入可能（MoveInsertable）でなければならない。&lt;br /&gt;
    コンテナに対してムーブ挿入可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の左辺値、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタとすると、以下の式が適格（well-formed）であるということである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/move.html&#34;&gt;&lt;code&gt;move&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(rv));&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引数 &lt;code&gt;position&lt;/code&gt; は、コンテナの有効な読み取り専用イテレータでなければならない。&lt;br /&gt;
    なお、標準では間接参照可能（dereferenceable）である必要があることになっているが、その必要はない（つまり、最終要素の次を指すイテレータでも良い）ものと思われる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引数 &lt;code&gt;first&lt;/code&gt;、および、&lt;code&gt;last&lt;/code&gt;は、入力イテレータの要件を満たし、かつ、範囲 &lt;code&gt;[first, last)&lt;/code&gt; が当該コンテナ&lt;strong&gt;以外を指す&lt;/strong&gt;有効な範囲でなければならない。&lt;br /&gt;
    また、引数 &lt;code&gt;first&lt;/code&gt;、および、&lt;code&gt;last&lt;/code&gt; を引数にとる形式（(3)）では、このコンテナの要素型 &lt;code&gt;value_type&lt;/code&gt; は、コンテナに対して &lt;code&gt;*first&lt;/code&gt; から直接構築可能（EmplaceConstructible）でなければならない。&lt;br /&gt;
    ここで、コンテナに対して &lt;code&gt;*first&lt;/code&gt; から直接構築可能とは、&lt;code&gt;m&lt;/code&gt; をアロケータ型 &lt;code&gt;allocator_type&lt;/code&gt; の左辺値、&lt;code&gt;p&lt;/code&gt; を要素型 &lt;code&gt;value_type&lt;/code&gt; へのポインタとすると、以下の式が適格（well-formed）であるということである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(m, p, *first);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;なお、&lt;code&gt;first&lt;/code&gt;、および、&lt;code&gt;last&lt;/code&gt;は、標準では &lt;code&gt;value_type&lt;/code&gt; を参照しなければならない（つまり、コンテナの &lt;code&gt;value_type&lt;/code&gt; と &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;&lt;code&gt;iterator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;decltype(first)&amp;gt;::value_type&lt;/code&gt; が同一の型でなければならない）ことになっているが、実際にはその必要はなく、上記の直接構築可能の要件を満たすだけで良いものと思われる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(4)の形式では、&lt;code&gt;value_type&lt;/code&gt; はコンテナに対してコピー挿入可能でなければならない。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   引数 &lt;code&gt;v&lt;/code&gt;、あるいは &lt;code&gt;rv&lt;/code&gt; で指定した値と等価なキーがコンテナに存在していなければ、当該要素を追加する。&lt;/li&gt;
&lt;li&gt;(2)   引数 &lt;code&gt;v&lt;/code&gt;、あるいは &lt;code&gt;rv&lt;/code&gt; で指定した値と等価なキーがコンテナに存在していなければ、当該要素を追加する。&lt;br /&gt;
    引数 &lt;code&gt;position&lt;/code&gt; は、要素の挿入位置を探し始める場所のヒントとして使用されるが、実装によって無視されるかもしれない。&lt;/li&gt;
&lt;li&gt;(3)   範囲 &lt;code&gt;[first, last)&lt;/code&gt; のすべての要素 &lt;code&gt;t&lt;/code&gt; に対して、(1)の形式の &lt;code&gt;insert(t)&lt;/code&gt; を呼び出した場合と同等である。&lt;/li&gt;
&lt;li&gt;(4)   (3)の形式を &lt;code&gt;insert(il.begin(), il.end())&lt;/code&gt; として呼び出した場合と同等である。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt; の &lt;code&gt;bool&lt;/code&gt; 部分（&lt;code&gt;second&lt;/code&gt; 部）は、要素が追加されたら &lt;code&gt;true&lt;/code&gt;、追加されなかったら（既にあったら）&lt;code&gt;false&lt;/code&gt;。&lt;br /&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;&lt;code&gt;pair&lt;/code&gt;&lt;/a&gt; の &lt;code&gt;iterator&lt;/code&gt; 部分（&lt;code&gt;first&lt;/code&gt; 部）は、追加された要素（&lt;code&gt;bool&lt;/code&gt; 部分が &lt;code&gt;true&lt;/code&gt; の場合）、あるいは、既にあった要素（&lt;code&gt;bool&lt;/code&gt; 部分が &lt;code&gt;false&lt;/code&gt; の場合）を指すイテレータ。&lt;/li&gt;
&lt;li&gt;(2)   新たな要素が追加された場合、その追加された要素を指すイテレータ。&lt;br /&gt;
    新たな要素が追加されなかった場合、既にあった要素を指すイテレータ。&lt;/li&gt;
&lt;li&gt;(3)   なし&lt;/li&gt;
&lt;li&gt;(4)   なし&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;単一要素の形式（(1)と(2)）では、ハッシュ関数以外から例外が投げられた場合には、挿入はされない。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   平均的なケースでは定数（O(1)）だが、最悪のケースではコンテナの要素数 &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; に比例（O(N)）。&lt;/li&gt;
&lt;li&gt;(2)   平均的なケースでは定数（O(1)）だが、最悪のケースではコンテナの要素数 &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; に比例（O(N)）。&lt;/li&gt;
&lt;li&gt;(3)   平均的なケースでは引数の範囲の要素数 &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last)&lt;/code&gt; に比例（O(N)）するが、最悪のケースでは引数の範囲の要素数 &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last)&lt;/code&gt; とコンテナの要素数 &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; に 1 加えたものの積に比例（O(&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last) * (&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() + 1)&lt;/code&gt;)）。&lt;/li&gt;
&lt;li&gt;(4)   (3)の形式を &lt;code&gt;insert(il.begin(), il.end())&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;これらの関数が呼ばれた後も、当該コンテナ内の要素を指す参照は無効にはならない。
    なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;これらの関数が呼ばれた後も、呼び出しの前後でこのコンテナのバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）が変わらなかった場合には当該コンテナを指すイテレータは無効にはならない。&lt;br /&gt;
    それ以外の場合は、当該コンテナを指すイテレータは無効になる可能性がある。&lt;br /&gt;
    コンテナのバケット数が変わらない場合とは、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;追加しようとした要素と等価なキーの要素が全て既にコンテナに存在したため、要素が追加されなかった。&lt;/li&gt;
&lt;li&gt;要素追加後の要素数が、要素追加前のバケット数（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）×最大負荷率（&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の戻り値）よりも小さかった。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;のいずれかである。&lt;br /&gt;
なお、後者の条件は「よりも小さい」となっているが、最大負荷率の定義からすると「以下」の方が適切と思われる。&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt; も参照。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set.html&#34;&gt;unordered_set&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator.html&#34;&gt;iterator&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;algorithm&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; label, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; C&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; label &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : &#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/copy.html&#34;&gt;copy&lt;/a&gt;(c.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/begin.html&#34;&gt;begin&lt;/a&gt;(), c.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/end.html&#34;&gt;end&lt;/a&gt;(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/ostream_iterator.html&#34;&gt;ostream_iterator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; C&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;));
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 一つの要素を挿入（(1)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set.html&#34;&gt;unordered_set&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; us{ &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, };

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; p1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; us.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 追加されるケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p1.&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;second&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p1.&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;first&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; p2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; us.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 追加されないケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p2.&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;second&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p2.&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;first&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; one element&#34;&lt;/span&gt;, us);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 一つの要素を挿入（(2)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set.html&#34;&gt;unordered_set&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; us{ &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, };

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; us.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(us.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/begin.html&#34;&gt;begin&lt;/a&gt;(), &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 追加されるケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; us.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(us.&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/begin.html&#34;&gt;begin&lt;/a&gt;(), &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 追加されないケース&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; one element with hint&#34;&lt;/span&gt;, us);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 複数の要素を挿入（(3)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set.html&#34;&gt;unordered_set&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; us{ &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, };

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; fl{ &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, };
    us.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(fl.&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/cbegin.html&#34;&gt;cbegin&lt;/a&gt;(), fl.&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/cend.html&#34;&gt;cend&lt;/a&gt;()); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34;&gt;forward_list&lt;/a&gt; の要素を全部&lt;/span&gt;
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; range&#34;&lt;/span&gt;, us);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 複数の要素を挿入（(4)の形式）&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set.html&#34;&gt;unordered_set&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; us{ &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, };

    us.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;({ &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, });
    print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt; initializer_list&#34;&lt;/span&gt;, us);
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;true 6 false 2
insert one element : 6 5 4 3 2 1 0
6 2
insert one element with hint : 6 5 4 3 2 1 0
insert range : 7 8 6 5 4 3 2 1 0
insert initializer_list : 7 8 6 5 4 3 2 1 0
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;注：&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set.html&#34;&gt;&lt;code&gt;unordered_set&lt;/code&gt;&lt;/a&gt; は非順序連想コンテナであるため、出力順序は無意味であることに注意&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;(2)以降の形式は、(1)の形式を使って実装することができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; iterator unordered_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key, Hash, Pred, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(const_iterator, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(v).first;
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; iterator unordered_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key, Hash, Pred, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(const_iterator, value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rv)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/move.html&#34;&gt;move&lt;/a&gt;(rv)).first;
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; unordered_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key, Hash, Pred, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(InputIterator first, InputIterator last);
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (; first &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;first)
    &lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;first);
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Hash&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pred&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; unordered_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key, Hash, Pred, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il);
{
  &lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(il.begin(), il.end());
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/emplace_hint.html&#34;&gt;&lt;code&gt;emplace_hint&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;挿入位置のヒントを使用したコンテナ内への要素の直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全要素の削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;内容の交換&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;バケット数の取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/load_factor.html&#34;&gt;&lt;code&gt;load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;現在の負荷率（バケットあたりの要素数の平均）を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;負荷率の最大値を取得、設定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/rehash.html&#34;&gt;&lt;code&gt;rehash&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小バケット数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小要素数指定によるバケット数の調整&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2350.pdf&#34; target=&#34;_blank&#34;&gt;N2350 Container insert/erase and iterator constness (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(4)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/unordered_set/unordered_set/op_assign.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/unordered_set/unordered_set/op_assign.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class unordered_set&#34;&gt;unordered_set::&lt;/span&gt;operator= (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;unordered_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; unordered_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
unordered_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(unordered_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rv);              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
unordered_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;unordered_set&lt;/code&gt; オブジェクトを代入する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1)、および、(3) の形式の場合、以下の条件を満たすこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value_type&lt;/code&gt; はこのコンテナに対してコピー挿入可能（CopyInsertable）であること。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value_type&lt;/code&gt; はコピー代入可能（CopyAssignable）であること。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) の形式の場合、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::propagate_on_container_move_assignment::value&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; であれば、以下の条件を満たすこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value_type&lt;/code&gt; はこのコンテナに対してムーブ挿入可能（MoveInsertable）であること。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value_type&lt;/code&gt; はムーブ代入可能（MoveAssignable）であること。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1)   &lt;code&gt;v&lt;/code&gt; の全ての要素がコピー代入される。ハッシュ関数オブジェクト、キー比較用関数オブジェクト、&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の値もコピーされる。
    アロケータオブジェクトは、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::propagate_on_container_copy_assignment::value&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合に限りコピーされる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2)   ハッシュ関数オブジェクト、キー比較用関数オブジェクトの値はムーブされる。
    &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の値はコピーされる。
    アロケータオブジェクトは、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::propagate_on_container_move_assignment::value&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合に限りムーブされる。コンテナ内に元々存在していた要素は、代入されるか、破棄される（デストラクタが呼び出される）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3)   範囲 &lt;code&gt;[il.begin(), il.end())&lt;/code&gt; がコピー代入される。
    コンテナ内に元々存在していた要素は、代入されるか、破棄される（デストラクタが呼び出される）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;p&gt;以下では構築されたオブジェクトを &lt;code&gt;u&lt;/code&gt; とする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) &lt;code&gt;u == v&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;(2) &lt;code&gt;u == 代入前の rv&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;(3) －&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   平均的には O(n)、ここで、&lt;code&gt;n = v.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;。最悪のケースでは O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;(2)   線形時間。&lt;/li&gt;
&lt;li&gt;(3)   代入対象を &lt;code&gt;a&lt;/code&gt;、&lt;code&gt;a&lt;/code&gt; の型を &lt;code&gt;X&lt;/code&gt; とすると、&lt;code&gt;a = X(il)&lt;/code&gt; と同様。（備考参照）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(3) の形式の場合、計算量は &lt;code&gt;a = X(il)&lt;/code&gt; と同様となっているが、効果が &lt;code&gt;a = X(il)&lt;/code&gt; と同様なわけではない。（ハッシュ関数オブジェクト、キー比較用関数オブジェクト、アロケータオブジェクト、&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; 等が異なる）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.0, 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.4.7, 4.5.3, 4.6.3, 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/op_constructor.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/op_destructor.html&#34;&gt;&lt;code&gt;(destructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(3)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/unordered_set/unordered_set/op_constructor.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/unordered_set/unordered_set/op_constructor.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class unordered_set&#34;&gt;unordered_set::&lt;/span&gt;コンストラクタ (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;unordered_set();                                                    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++14&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;unordered_set&lt;/span&gt;(size_type n,
                       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; hasher&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; hf &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; hasher(),
                       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_equal&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; eql &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; key_equal(),
                       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; allocator_type()); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14&lt;/span&gt;


&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;unordered_set&lt;/span&gt;(size_type n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;実装依存の既定値&lt;/span&gt;,
                       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; hasher&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; hf &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; hasher(),
                       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_equal&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; eql &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; key_equal(),
                       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; allocator_type()); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) + (2) C++11&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
unordered_set(InputIterator first, InputIterator last,
              size_type n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;実装依存の既定値&lt;/span&gt;,
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; hasher&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; hf &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; hasher(),
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_equal&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; eql &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; key_equal(),
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; allocator_type());          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

unordered_set(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; unordered_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v);                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;

unordered_set(unordered_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rv);                                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;unordered_set&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;

unordered_set(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; unordered_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7)&lt;/span&gt;

unordered_set(unordered_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rv, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8)&lt;/span&gt;

unordered_set(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il,
              size_type n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;実装依存の既定値&lt;/span&gt;,
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; hasher&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; hf &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; hasher(),
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_equal&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; eql &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; key_equal(),
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; allocator_type());          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (9)&lt;/span&gt;

unordered_set(size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (10) C++14&lt;/span&gt;

unordered_set(size_type n,
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; hasher&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; hf,
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (11) C++14&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
unordered_set(InputIterator f,
              InputIterator l,
              size_type n,
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (12) C++14&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
unordered_set(InputIterator f,
              InputIterator l,
              size_type n,
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; hasher&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; hf, 
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (13) C++14&lt;/span&gt;

unordered_set(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il,
              size_type n,
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (14) C++14&lt;/span&gt;

unordered_set(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il,
              size_type n,
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; hasher&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; hf, 
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; allocator_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (15) C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;unordered_set&lt;/code&gt; オブジェクトを構築する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ハッシュ関数オブジェクト &lt;code&gt;hasher&lt;/code&gt; が引数として与えられなかった場合、&lt;code&gt;hasher&lt;/code&gt; は DefaultConstructible であること。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;キー比較用関数オブジェクト &lt;code&gt;key_equal&lt;/code&gt; が引数として与えられなかった場合、&lt;code&gt;key_equal&lt;/code&gt; は DefaultConstructible であること。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;アロケータオブジェクト &lt;code&gt;allocator_type&lt;/code&gt; が引数として与えられなかった場合、&lt;code&gt;allocator_type&lt;/code&gt; は DefaultConstructible であること。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3) の形式の場合、&lt;code&gt;value_type&lt;/code&gt; は &lt;code&gt;*first&lt;/code&gt; からこの &lt;code&gt;unordered_set&lt;/code&gt; に EmplaceConstructible であること。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(4)、(7)、および (9) の形式の場合、&lt;code&gt;value_type&lt;/code&gt; はこの &lt;code&gt;unordered_set&lt;/code&gt; に CopyInsertable であること。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(5) の形式の場合、&lt;code&gt;allocator_type&lt;/code&gt; のムーブ構築は例外終了しないこと。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(8) の形式の場合、&lt;code&gt;value_type&lt;/code&gt; はこの &lt;code&gt;unordered_set&lt;/code&gt; に MoveInsertable であること。（但し、備考参照）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1)   バケット数の最低が実装依存の、要素を持たない空の &lt;code&gt;unordered_set&lt;/code&gt; を構築する。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2)   バケット数最低 &lt;code&gt;n&lt;/code&gt;、ハッシュ関数オブジェクト &lt;code&gt;hf&lt;/code&gt;、キー比較用関数オブジェクト &lt;code&gt;eql&lt;/code&gt;、アロケータオブジェクト &lt;code&gt;a&lt;/code&gt; で、要素を持たない空の &lt;code&gt;unordered_set&lt;/code&gt; を構築する。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(1) + (2) バケット数最低 &lt;code&gt;n&lt;/code&gt;、ハッシュ関数オブジェクト &lt;code&gt;hf&lt;/code&gt;、キー比較用関数オブジェクト &lt;code&gt;eql&lt;/code&gt;、アロケータオブジェクト &lt;code&gt;a&lt;/code&gt; で、要素を持たない空の &lt;code&gt;unordered_set&lt;/code&gt; を構築する。
    引数 &lt;code&gt;n&lt;/code&gt; のデフォルト値は実装依存である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3)   (1)と同様に &lt;code&gt;unordered_set&lt;/code&gt; が構築された後、&lt;code&gt;[first, last)&lt;/code&gt; の範囲の要素が挿入される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(4)   コピーコンストラクタ。&lt;code&gt;v&lt;/code&gt; の全ての要素をコピーした、&lt;code&gt;unordered_set&lt;/code&gt; を構築する。
    ハッシュ関数オブジェクトとキー比較関数オブジェクト、および、&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の値も &lt;code&gt;v&lt;/code&gt; からコピーされる。
    アロケータオブジェクトは、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;&lt;code&gt;allocator_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;allocator_type&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_traits/select_on_container_copy_construction.html&#34;&gt;&lt;code&gt;select_on_container_copy_construction&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;())&lt;/code&gt; の戻り値が使用される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(5)   ムーブコンストラクタ。&lt;code&gt;rv&lt;/code&gt; の全ての要素をムーブした、&lt;code&gt;unordered_set&lt;/code&gt; を構築する。
    ハッシュ関数オブジェクトとキー比較関数オブジェクト、および、アロケータオブジェクトも &lt;code&gt;v&lt;/code&gt; からムーブされる。
    &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の値は &lt;code&gt;rv&lt;/code&gt; からコピーされる。
    なお、要素のムーブは個々に行われるのではなく、&lt;code&gt;unordered_set&lt;/code&gt; 内部の構造ごと一括でムーブされる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(6)   ハッシュ関数オブジェクト &lt;code&gt;hasher()&lt;/code&gt;、キー比較用関数オブジェクト &lt;code&gt;key_equal()&lt;/code&gt;、アロケータオブジェクト &lt;code&gt;a&lt;/code&gt; で、要素を持たない空の &lt;code&gt;unordered_set&lt;/code&gt; を構築する。
    構築された &lt;code&gt;unordered_set&lt;/code&gt; のバケット数、および、&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; は実装依存である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(7)   &lt;code&gt;v&lt;/code&gt; の全ての要素をコピーした、&lt;code&gt;unordered_set&lt;/code&gt; を構築する。
    ハッシュ関数オブジェクトとキー比較関数オブジェクト、および、&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の値も &lt;code&gt;v&lt;/code&gt; からコピーされるが、アロケータオブジェクトは引数 &lt;code&gt;a&lt;/code&gt; が使用される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(8)   &lt;code&gt;rv&lt;/code&gt; のすべての要素をムーブした、&lt;code&gt;unordered_set&lt;/code&gt; を構築する。
    ハッシュ関数オブジェクトとキー比較関数オブジェクトの値も &lt;code&gt;rv&lt;/code&gt; からムーブされるが、アロケータオブジェクトは引数 &lt;code&gt;a&lt;/code&gt; が使用される。
    &lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の値は &lt;code&gt;rv&lt;/code&gt; からコピーされる。
    なお、&lt;code&gt;a == rv.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、要素のムーブは個々に行われるのではなく、&lt;code&gt;unordered_set&lt;/code&gt; 内部の構造ごと一括でムーブされるが、そうでない場合は要素ごとにムーブされる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(9)   (3) の形式を &lt;code&gt;unordered_set(il.begin(), il.end(), n, hf, eql, a)&lt;/code&gt; として呼び出した場合と同等である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(10)  (2) の形式を &lt;code&gt;unordered_set(n, hasher(), key_equal(), a)&lt;/code&gt; として呼び出した場合と同等である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(11)  (2) の形式を &lt;code&gt;unordered_set(n, hf, key_equal(), a)&lt;/code&gt; として呼び出した場合と同等である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(12)  (3) の形式を &lt;code&gt;unordered_set(f, l, n, hasher(), key_equal(), a)&lt;/code&gt; として呼び出した場合と同等である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(13)  (3) の形式を &lt;code&gt;unordered_set(f, l, n, hf, key_equal(), a)&lt;/code&gt; として呼び出した場合と同等である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(14)  (5) の形式を &lt;code&gt;unordered_set(il, n, hasher(), key_equal(), a)&lt;/code&gt; として呼び出した場合と同等である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(15)  (5) の形式を &lt;code&gt;unordered_set(il, n, hf, key_equal(), a)&lt;/code&gt; として呼び出した場合と同等である。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;p&gt;以下では構築されたオブジェクトを &lt;code&gt;u&lt;/code&gt; とする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/empty.html&#34;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == true&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == 1.0&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/empty.html&#34;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == true&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == a&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == 1.0&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;= n&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == a&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == 1.0&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;= n&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(4) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == v.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;。
    &lt;code&gt;u == v&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(5) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() ==&lt;/code&gt;構築前の &lt;code&gt;rv.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() ==&lt;/code&gt;構築前の &lt;code&gt;rv.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;。
    &lt;code&gt;u ==&lt;/code&gt;構築前の &lt;code&gt;rv&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(6) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/empty.html&#34;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == true&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == a&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(7) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == v.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;。
    &lt;code&gt;u == v&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == a&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(8) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() ==&lt;/code&gt;構築前の &lt;code&gt;rv.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;。
    &lt;code&gt;u ==&lt;/code&gt;構築前の &lt;code&gt;rv&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == a&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(9) &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == a&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/max_load_factor.html&#34;&gt;&lt;code&gt;max_load_factor&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == 1.0&lt;/code&gt;。
    &lt;code&gt;u.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/bucket_count.html&#34;&gt;&lt;code&gt;bucket_count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;gt;= n&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1)   定数&lt;/li&gt;
&lt;li&gt;(2)   定数&lt;/li&gt;
&lt;li&gt;(3)   平均的には O(n)、ここで、n は &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last)&lt;/code&gt;。
    最悪のケースでは O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;(4)   平均的には O(n)、ここで、n は &lt;code&gt;v.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;。
    最悪のケースでは O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;(5)   定数&lt;/li&gt;
&lt;li&gt;(6)   定数&lt;/li&gt;
&lt;li&gt;(7)   O(&lt;code&gt;v.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;(8)   &lt;code&gt;a == rv.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、定数。
    そうでない場合、O(&lt;code&gt;rv.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;(9)   (2) の形式を &lt;code&gt;unordered_set(il.begin(), il.end(), n, hf, eql, a)&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;li&gt;(10)  (2) の形式を &lt;code&gt;unordered_set(n, hasher(), key_equal(), a)&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;li&gt;(11)  (2) の形式を &lt;code&gt;unordered_set(n, hf, key_equal(), a)&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;li&gt;(12)  (3) の形式を &lt;code&gt;unordered_set(f, l, n, hasher(), key_equal(), a)&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;li&gt;(13)  (3) の形式を &lt;code&gt;unordered_set(f, l, n, hf, key_equal(), a)&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;li&gt;(14)  (5) の形式を &lt;code&gt;unordered_set(il, n, hasher(), key_equal(), a)&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;li&gt;(15)  (5) の形式を &lt;code&gt;unordered_set(il, n, hf, key_equal(), a)&lt;/code&gt; として呼び出した場合と同等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(8) の形式の場合、MoveInsertable が要件となっているが、&lt;code&gt;rv.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == a&lt;/code&gt; の場合にはムーブコンストラクタと同様の挙動となるため、MoveInsertable ではなくても良いと思われる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++14 では、デフォルトコンストラクタを (1) + (2) の形式から (1) の形式に分離して残りを (2) の形式（&lt;code&gt;n&lt;/code&gt; のデフォルト引数を削除）にした。
    これは、デフォルトコンストラクタに &lt;code&gt;explicit&lt;/code&gt; が付いていると、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unordered_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;のようなコード（C++11 から導入された、コピーリスト初期化によるデフォルトコンストラクタ呼び出し）がエラーになってしまうためである。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++0x mode&lt;/a&gt;: 3.0, 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.4.7, 4.5.3, 4.6.3, 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;備考&lt;/h4&gt;
&lt;p&gt;libstdc++ には 4.8.2 現在、(6)、(7)、(8)の形式はない。&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/op_destructor.html&#34;&gt;&lt;code&gt;(destructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set/unordered_set/op_assign.html&#34;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(9)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2193&#34; target=&#34;_blank&#34;&gt;LWG 2193. Default constructors for standard library containers are explicit&lt;/a&gt;&lt;br /&gt;
    (1) + (2) を 2 つのオーバーロードに分割するきっかけとなったレポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2210&#34; target=&#34;_blank&#34;&gt;LWG 2210. Missing allocator-extended constructor for allocator-aware containers&lt;/a&gt;&lt;br /&gt;
    (10)、(11)、(12)、(13)、(14)、(15) を追加するきっかけとなったレポート&lt;br /&gt;
    なお、Discussion の例はアロケータの型が誤っているので注意&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/valarray/valarray/op_assign.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/valarray/valarray/op_assign.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;valarray&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class valarray&#34;&gt;valarray::&lt;/span&gt;operator=&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; x);       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&amp;amp;&lt;/span&gt; x) noexcept;   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++11&lt;/span&gt;
valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init);   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++11&lt;/span&gt;
valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value);             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/slice_array.html&#34;&gt;slice_array&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; x);    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;
valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/gslice_array.html&#34;&gt;gslice_array&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; x);   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;
valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/mask_array.html&#34;&gt;mask_array&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; x);     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7)&lt;/span&gt;
valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/indirect_array.html&#34;&gt;indirect_array&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; x); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : コピー代入&lt;/li&gt;
&lt;li&gt;(2) : ムーブ代入&lt;/li&gt;
&lt;li&gt;(3) : 初期化子リストの代入&lt;/li&gt;
&lt;li&gt;(4) : 全ての要素に&lt;code&gt;value&lt;/code&gt;を代入する&lt;/li&gt;
&lt;li&gt;(5) : &lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/slice_array.html&#34;&gt;&lt;code&gt;slice_array&lt;/code&gt;&lt;/a&gt;オブジェクトから&lt;code&gt;valarray&lt;/code&gt;への変換を行う。&lt;/li&gt;
&lt;li&gt;(6) : &lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/gslice_array.html&#34;&gt;&lt;code&gt;gslice_array&lt;/code&gt;&lt;/a&gt;オブジェクトから&lt;code&gt;valarray&lt;/code&gt;への変換を行う。&lt;/li&gt;
&lt;li&gt;(7) : &lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/mask_array.html&#34;&gt;&lt;code&gt;mask_array&lt;/code&gt;&lt;/a&gt;オブジェクトから&lt;code&gt;valarray&lt;/code&gt;への変換を行う。&lt;/li&gt;
&lt;li&gt;(8) : &lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/indirect_array.html&#34;&gt;&lt;code&gt;indirect_array&lt;/code&gt;&lt;/a&gt;オブジェクトから&lt;code&gt;valarray&lt;/code&gt;への変換を行う。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;code&gt;*this&lt;/code&gt;と&lt;code&gt;x&lt;/code&gt;が異なる要素数の場合、&lt;code&gt;resize(x.size())&lt;/code&gt;を呼び出す。&lt;code&gt;*this&lt;/code&gt;の各要素に、&lt;code&gt;x&lt;/code&gt;の各要素を代入する。&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;*this&lt;/code&gt;に&lt;code&gt;x&lt;/code&gt;の所有権を譲渡する。ムーブ後の&lt;code&gt;x&lt;/code&gt;の状態は未規定。&lt;/li&gt;
&lt;li&gt;(3) : &lt;code&gt;*this = valarray(init)&lt;/code&gt;と等価。&lt;/li&gt;
&lt;li&gt;(4) : &lt;code&gt;*this&lt;/code&gt;の全ての要素に値&lt;code&gt;value&lt;/code&gt;を代入する。&lt;/li&gt;
&lt;li&gt;(5), (6), (7), (8) : &lt;code&gt;x&lt;/code&gt;が参照している要素を、&lt;code&gt;*this&lt;/code&gt;に代入する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(2) : 全要素のデストラクタを呼び出すために、線形時間&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;valarray&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; name, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; v)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : {&#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; v) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (first) {
      first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt;;
    }
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x;
  }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;}&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コピー代入&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v1_org &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v1_org;
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;v1&#34;&lt;/span&gt;, v1);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ムーブ代入&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(v1);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;v2&#34;&lt;/span&gt;, v2);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 初期化子リストを代入&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v3;
  v3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;v3&#34;&lt;/span&gt;, v3);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 値を全要素に代入&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v4(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
  v4 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;v4&#34;&lt;/span&gt;, v4);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// スライスされたvalarrayオブジェクトを代入&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v5_org &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v5 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v5_org[std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;slice(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)]; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 先頭3要素&lt;/span&gt;
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;v5&#34;&lt;/span&gt;, v5);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 行列スライスされたvalarrayオブジェクトを代入&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v6_org &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v6_len &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v6_stride &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v6 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v6_org[std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;gslice(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, v6_len, v6_stride)];
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;v6&#34;&lt;/span&gt;, v6);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// マスクされたvalarrayオブジェクトを代入&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v7_org &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v7_mask &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v7 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v7_org[v7_mask];
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;v7&#34;&lt;/span&gt;, v7);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// インデックス列の指定によってマスクされたvalarrayオブジェクトを代入&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v8_org &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v8_indices &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v8 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v8_org[v8_indices];
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;v8&#34;&lt;/span&gt;, v8);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;v1 : {1,2,3}
v2 : {1,2,3}
v3 : {1,2,3}
v4 : {1,1,1}
v5 : {1,2,3}
v6 : {1,2,4,5}
v7 : {1,3,5}
v8 : {1,3,5}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(3)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2071&#34; target=&#34;_blank&#34;&gt;LWG Issue 2071. &lt;code&gt;std::valarray&lt;/code&gt; move-assignment&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11でムーブ代入の計算量を「定数時間」であると記載していたが、実際には全要素のデストラクタを呼び出すために「線形時間」が正しかった。C++14で文面を修正。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/valarray/valarray/op_constructor.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/valarray/valarray/op_constructor.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;valarray&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class valarray&#34;&gt;valarray::&lt;/span&gt;コンストラクタ&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;valarray();                           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;valarray&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; n);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
valarray(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; n);   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
valarray(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; first, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; n);   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
valarray(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;
valarray(valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x) noexcept;      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6) C++11&lt;/span&gt;
valarray(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/slice_array.html&#34;&gt;slice_array&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; x);    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7)&lt;/span&gt;
valarray(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/gslice_array.html&#34;&gt;gslice_array&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; x);   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8)&lt;/span&gt;
valarray(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/mask_array.html&#34;&gt;mask_array&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; x);     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (9)&lt;/span&gt;
valarray(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/indirect_array.html&#34;&gt;indirect_array&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; x); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (10)&lt;/span&gt;
valarray(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init);   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (11) C++11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;valarray&lt;/code&gt;オブジェクトの構築&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : デフォルトコンストラクタ&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;n&lt;/code&gt;個の&lt;code&gt;T()&lt;/code&gt;初期化された要素を保持した&lt;code&gt;valarray&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(3) : &lt;code&gt;value&lt;/code&gt;のコピーを&lt;code&gt;n&lt;/code&gt;個要素として保持した&lt;code&gt;valarray&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(4) : &lt;code&gt;[first, first + n)&lt;/code&gt;の範囲を要素としてコピーした&lt;code&gt;valarray&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(5) : コピーコンストラクタ&lt;/li&gt;
&lt;li&gt;(6) : ムーブコンストラクタ&lt;/li&gt;
&lt;li&gt;(7) : &lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/slice_array.html&#34;&gt;&lt;code&gt;slice_array&lt;/code&gt;&lt;/a&gt;オブジェクトから&lt;code&gt;valarray&lt;/code&gt;への変換を行う。&lt;/li&gt;
&lt;li&gt;(8) : &lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/gslice_array.html&#34;&gt;&lt;code&gt;gslice_array&lt;/code&gt;&lt;/a&gt;オブジェクトから&lt;code&gt;valarray&lt;/code&gt;への変換を行う。&lt;/li&gt;
&lt;li&gt;(9) : &lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/mask_array.html&#34;&gt;&lt;code&gt;mask_array&lt;/code&gt;&lt;/a&gt;オブジェクトから&lt;code&gt;valarray&lt;/code&gt;への変換を行う。&lt;/li&gt;
&lt;li&gt;(10) : &lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/indirect_array.html&#34;&gt;&lt;code&gt;indirect_array&lt;/code&gt;&lt;/a&gt;オブジェクトから&lt;code&gt;valarray&lt;/code&gt;への変換を行う。&lt;/li&gt;
&lt;li&gt;(11) : 初期化子リストを受け取るコンストラクタ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;code&gt;size() == 0&lt;/code&gt;の要素を持たない空の&lt;code&gt;valarray&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;n&lt;/code&gt;個の&lt;code&gt;T()&lt;/code&gt;初期化された要素を保持した&lt;code&gt;valarray&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(3) : &lt;code&gt;value&lt;/code&gt;のコピーを&lt;code&gt;n&lt;/code&gt;個要素として保持した&lt;code&gt;valarray&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(4) : ポインタ&lt;code&gt;first&lt;/code&gt;が指す要素から&lt;code&gt;n&lt;/code&gt;個先までをコピーして、&lt;code&gt;valarray&lt;/code&gt;オブジェクトを構築する。&lt;code&gt;n&lt;/code&gt;が&lt;code&gt;first&lt;/code&gt;の要素数より大きい場合、その挙動は未定義。&lt;/li&gt;
&lt;li&gt;(5) : &lt;code&gt;x&lt;/code&gt;と同じ要素を保持した&lt;code&gt;valarray&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(6) : &lt;code&gt;x&lt;/code&gt;と同じ要素を保持した&lt;code&gt;valarray&lt;/code&gt;オブジェクトを構築する。ムーブ後の&lt;code&gt;x&lt;/code&gt;の状態は未規定。&lt;/li&gt;
&lt;li&gt;(7), (8), (9), (10) : &lt;code&gt;x&lt;/code&gt;が参照している要素から、&lt;code&gt;valarray&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(11) : &lt;code&gt;valarray(init.begin(), init.size())&lt;/code&gt;と等価。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(6) : 定数時間&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;valarray&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; name, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; v)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : {&#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; v) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (first) {
      first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt;;
    }
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x;
  }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;}&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// デフォルト構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v1;
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;v1&#34;&lt;/span&gt;, v1);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3個の要素を保持するvalarrayオブジェクトを構築。&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 要素は0(T())で埋められる。&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v2(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;v2&#34;&lt;/span&gt;, v2);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 値1を持つ要素3個からなるvalarrayオブジェクトを構築。&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v3(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;v3&#34;&lt;/span&gt;, v3);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 配列の先頭3要素のコピーからvalarrayオブジェクトを構築。&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; ar4[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v4(ar4, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;v4&#34;&lt;/span&gt;, v4);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コピー構築。&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v5 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v4;
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;v5&#34;&lt;/span&gt;, v5);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ムーブ構築。&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v6 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(v5);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;v6&#34;&lt;/span&gt;, v6);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// スライスされたvalarrayオブジェクトから構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v7_org &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v7(v7_org[std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;slice(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)]); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 先頭3要素&lt;/span&gt;
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;v7&#34;&lt;/span&gt;, v7);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 行列スライスされたvalarrayオブジェクトから構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v8_org &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v8_len &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v8_stride &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v8 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v8_org[std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;gslice(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, v8_len, v8_stride)];
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;v8&#34;&lt;/span&gt;, v8);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (9)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// マスクされたvalarrayオブジェクトから構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v9_org &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v9_mask &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v9 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v9_org[v9_mask];
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;v9&#34;&lt;/span&gt;, v9);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (10)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// インデックス列の指定によってマスクされたvalarrayオブジェクトから構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v10_org &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v10_indices &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v10 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v10_org[v10_indices];
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;v10&#34;&lt;/span&gt;, v10);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (11)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 初期化子リストから構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;valarray&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v11 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;v11&#34;&lt;/span&gt;, v11);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;v1 : {}
v2 : {0,0,0}
v3 : {1,1,1}
v4 : {1,2,3}
v5 : {1,2,3}
v6 : {1,2,3}
v7 : {1,2,3}
v8 : {1,2,4,5}
v9 : {1,3,5}
v10 : {1,3,5}
v11 : {1,2,3}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(11)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vector -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/vector.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/vector.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;vector&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;vector&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;allocator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;vector&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vector&lt;/code&gt;はシーケンスコンテナの一種で、各要素は線形に、順序を保ったまま格納される。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vector&lt;/code&gt;コンテナは可変長配列として実装される。通常の(&lt;code&gt;new []&lt;/code&gt;で確保した)配列と同じように、&lt;code&gt;vector&lt;/code&gt;の各要素は連続して配置されるため、イテレータだけでなく添字による要素のランダムアクセスも高速である。&lt;/p&gt;
&lt;p&gt;配列と違い、ストレージは&lt;code&gt;vector&lt;/code&gt;自体が管理するため、自動的に領域の拡張が行われる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vector&lt;/code&gt;は次の点で優れている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;各要素への添字アクセス(定数時間)&lt;/li&gt;
&lt;li&gt;全要素の両方向の走査(線形時間)&lt;/li&gt;
&lt;li&gt;末尾への要素の追加・削除(償却定数時間)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの挙動は配列と同じパフォーマンス特性を示し、加えてストレージサイズの変更が非常に簡単である。ただし、&lt;code&gt;vector&lt;/code&gt;は実際の要素数より少し余分にメモリを確保する(これは拡張に備え、パフォーマンス特性を満足するための仕様である)。&lt;/p&gt;
&lt;p&gt;他の標準シーケンスコンテナと比べ、&lt;code&gt;vector&lt;/code&gt;は要素アクセスと(末尾に対する)追加・削除において一般的に最高の性能を誇る。末尾以外に対する挿入・削除は&lt;code&gt;deque&lt;/code&gt;や&lt;code&gt;list&lt;/code&gt;に劣り、イテレータや要素への参照の安定性(無効になる操作の数)では&lt;code&gt;list&lt;/code&gt;に劣る。&lt;/p&gt;
&lt;p&gt;内部的には、&lt;code&gt;vector&lt;/code&gt;は(他のすべてのコンテナと同じように)サイズ用のメンバ変数を持ち、格納されている要素数を管理している。しかし&lt;code&gt;vector&lt;/code&gt;の場合は、さらに確保済みのメモリサイズを管理するキャパシティ用のメンバ変数を持ち、これは常に&lt;code&gt;size&lt;/code&gt;と同じか大きい値となる。確保済みの領域の余計な部分は、要素数の増加に備えて確保しているものである。この動作のおかげで、要素を追加するたびにメモリを再確保する必要が無くなり、単に確保済みの領域を初期化するだけでよくなる(再確保は要素数の対数の頻度で発生する)。&lt;/p&gt;
&lt;p&gt;領域の再確保が発生すると、全ての要素が新しい領域にコピーされるため非常にコストがかかる。このため、最終的な要素数が大きくなると解っている場合はあらかじめ&lt;code&gt;reserve()&lt;/code&gt;メンバ関数で&lt;code&gt;capacity&lt;/code&gt;を増加させておくことが望ましい。&lt;/p&gt;
&lt;p&gt;各テンプレートパラメータの意味は次の通りである。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt;: 格納される要素の型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Allocator&lt;/code&gt;: メモリ確保に使用されるアロケータの型。無指定の場合は標準の&lt;code&gt;allocator&lt;/code&gt;クラスが使用される。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リファレンス中では、これらの名前をテンプレートパラメータとして扱う。&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;h3&gt;構築・破棄&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/op_constructor.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/op_destructor.html&#34;&gt;&lt;code&gt;(destructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/op_assign.html&#34;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;イテレータ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭の要素を指すイテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾の次を指すイテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/cbegin.html&#34;&gt;&lt;code&gt;cbegin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭の要素を指す読み取り専用イテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/cend.html&#34;&gt;&lt;code&gt;cend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾の次を指す読み取り専用イテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/rbegin.html&#34;&gt;&lt;code&gt;rbegin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾を指す逆イテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/rend.html&#34;&gt;&lt;code&gt;rend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭の前を指す逆イテレータを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/crbegin.html&#34;&gt;&lt;code&gt;crbegin&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾を指す読み取り専用逆イテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/crend.html&#34;&gt;&lt;code&gt;crend&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭の前を指す読み取り専用逆イテレータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;領域&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/max_size.html&#34;&gt;&lt;code&gt;max_size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;格納可能な最大の要素数を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/resize.html&#34;&gt;&lt;code&gt;resize&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数を変更する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/capacity.html&#34;&gt;&lt;code&gt;capacity&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メモリを再確保せずに格納できる最大の要素数を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/empty.html&#34;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナが空かどうかを判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/reserve.html&#34;&gt;&lt;code&gt;reserve&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;capacityを変更する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/shrink_to_fit.html&#34;&gt;&lt;code&gt;shrink_to_fit&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;capacityをsizeまで縮小する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;要素アクセス&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/op_at.html&#34;&gt;&lt;code&gt;operator[]&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素アクセス&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/at.html&#34;&gt;&lt;code&gt;at&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素アクセス&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/data.html&#34;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;配列の先頭へのポインタを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/front.html&#34;&gt;&lt;code&gt;front&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;先頭要素への参照を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/back.html&#34;&gt;&lt;code&gt;back&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾要素への参照を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;コンテナの変更&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/assign.html&#34;&gt;&lt;code&gt;assign&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナの再代入&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/push_back.html&#34;&gt;&lt;code&gt;push_back&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾へ要素追加&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/emplace_back.html&#34;&gt;&lt;code&gt;emplace_back&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾へ直接構築&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/pop_back.html&#34;&gt;&lt;code&gt;pop_back&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾から要素削除&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の挿入&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の直接構築による挿入&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素の削除&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンテナの交換&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全要素削除&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;アロケータ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;アロケータオブジェクトの取得&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const T&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ランダムアクセスイテレータ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取り専用ランダムアクセスイテレータ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;size_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号なし整数型 (通常は&lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;&lt;code&gt;size_t&lt;/code&gt;&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;difference_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号付き整数型 (通常は&lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/ptrdiff_t.html&#34;&gt;&lt;code&gt;ptrdiff_t&lt;/code&gt;&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素型 &lt;code&gt;T&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;allocator_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アロケータの型 &lt;code&gt;Allocator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Allocator::pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Allocator::const_pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;reverse_iterator&amp;lt;iterator&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_reverse_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;reverse_iterator&amp;lt;const_iterator&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/op_not_equal.html&#34;&gt;&lt;code&gt;operator!=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非等値比較&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/op_less.html&#34;&gt;&lt;code&gt;operator&amp;lt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より小さいかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/op_less_equal.html&#34;&gt;&lt;code&gt;operator&amp;lt;=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺以下かの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/op_greater.html&#34;&gt;&lt;code&gt;operator&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より大きいかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/op_greater_equal.html&#34;&gt;&lt;code&gt;operator&amp;gt;=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺以上かの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/swap_free.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2つの&lt;code&gt;vector&lt;/code&gt;オブジェクトを入れ替える&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;vector&lt;/code&gt;のメモリ効率について&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kmonos.net/wlog/111.html#_2334100705&#34; target=&#34;_blank&#34;&gt;２倍だけじゃない - Derive Your Dreams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kmonos.net/wlog/111.html#_1001100720&#34; target=&#34;_blank&#34;&gt;それでも２倍だ - Derive Your Dreams&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;code&gt;vector&amp;lt;bool&amp;gt;&lt;/code&gt;特殊化&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;vector&lt;/code&gt;は&lt;code&gt;bool&lt;/code&gt;型に対して特殊化されている。&lt;/p&gt;
&lt;p&gt;この特殊化はメモリ領域を最小化するために提供されていて、各要素は1bitの領域のみを必要とする。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vector&amp;lt;bool&amp;gt;::reference&lt;/code&gt;は&lt;code&gt;bool&lt;/code&gt;への参照ではなく、領域内の1bitを指す型であり、以下のようなインタフェースである。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;vector&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;reference {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;friend&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;vector&lt;/span&gt;;
  reference();                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンストラクタは非公開&lt;/span&gt;
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;~&lt;/span&gt;reference();
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;                    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// boolへの暗黙変換&lt;/span&gt;
  reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; x);       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// boolからの代入&lt;/span&gt;
  reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// vector&amp;lt;bool&amp;gt;のビットからの代入&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;flip&lt;/span&gt;();                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ビットの反転&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;ハッシュサポート&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class T&amp;gt; struct hash;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;hash&lt;/code&gt;クラスの先行宣言&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class Allocator&amp;gt; struct hash&amp;lt;vector&amp;lt;bool, Allocator&amp;gt;&amp;gt;;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;hash&lt;/code&gt;クラスの&lt;code&gt;vector&amp;lt;bool&amp;gt;&lt;/code&gt;に対する特殊化&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;&lt;code&gt;vector&amp;lt;bool&amp;gt;&lt;/code&gt;の基本操作：&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v(&lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;);
  v[&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ビットを立てる&lt;/span&gt;
  v[&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;].flip(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ビット反転(1だったら0、0だったら1にする)&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//bool&amp;amp; x = v[3]; // エラー！プロキシオブジェクトのため、bool&amp;amp;には変換できない&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v[&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;]; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OK : コピーはできる&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;v[3] : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// イテレータ操作は可能&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v.begin(), v.end(), [](&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; x) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  });
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;v[3] : 0
0
0
0
0
0
1
0
1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vector&amp;lt;bool&amp;gt;&lt;/code&gt;の要素は参照するとプロキシオブジェクトのコピーが返ってくるため、RandomAccessIteratorの要件を満たさない。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gotw.ca/publications/N1211.pdf&#34; target=&#34;_blank&#34;&gt;N1211 - &lt;code&gt;vector&amp;lt;bool&amp;gt;&lt;/code&gt;: More Problems, Better Solutions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ビット配列に関しては、&lt;a href=&#34;http://cpprefjp.github.io/reference/bitset.html&#34;&gt;&lt;code&gt;bitset&lt;/code&gt;&lt;/a&gt;(ビットを格納する固定長コンテナ)も参照。&lt;/li&gt;
&lt;li&gt;可変長のビット配列の実装としては、Boost C++ Librariesの&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/dynamic_bitset/dynamic_bitset.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;dynamic_bitset&lt;/code&gt;&lt;/a&gt;がある。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2669.htm&#34; target=&#34;_blank&#34;&gt;N2669 Thread-Safety in the Standard Library (Rev 2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/vector/assign.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/vector/assign.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;vector&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class vector&#34;&gt;vector::&lt;/span&gt;assign&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; assign(InputIterator first, InputIterator last);

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;assign&lt;/span&gt;(size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; u);

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;assign&lt;/span&gt;(initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;a.assign(first, last)&lt;/code&gt;形式の場合、型&lt;code&gt;T&lt;/code&gt;は&lt;code&gt;*first&lt;/code&gt;から&lt;code&gt;X&lt;/code&gt;に対してEmplaceConstructibleでなければならない。イテレーターがForward iterators の要件を満たさない場合、型&lt;code&gt;T&lt;/code&gt;は&lt;code&gt;X&lt;/code&gt;に対してMoveInsertableでなければならない。&lt;code&gt;[first, last)&lt;/code&gt;の範囲のそれぞれのイテレーターは１回だけ間接参照される。&lt;code&gt;first&lt;/code&gt;, &lt;code&gt;last&lt;/code&gt;は自身のイテレーターであってはならない。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a.assign(n, u)&lt;/code&gt; 形式の場合、&lt;code&gt;u&lt;/code&gt;は&lt;code&gt;a&lt;/code&gt;の要素への参照であってはならない。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;a.assign(first, last)&lt;/code&gt;形式の場合、&lt;code&gt;[first, last)&lt;/code&gt;の範囲の要素のコピーでaの要素を置き換える。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a.assign(n, u)&lt;/code&gt; 形式の場合、&lt;code&gt;a&lt;/code&gt;の要素をすべて&lt;code&gt;n&lt;/code&gt;個の&lt;code&gt;u&lt;/code&gt;のコピーに置き換える。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a.assign(il)&lt;/code&gt; 形式の場合の効果は、&lt;code&gt;a.assign(il.begin(), il.end())&lt;/code&gt;と同じである。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;array&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Constructor with initializer-list example:&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; a)
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;a.&lt;span style=&#34;color:#ff0000&#34;&gt;assign&lt;/span&gt;(first, last) example:&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&amp;gt;&lt;/span&gt; data &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;};
  a.&lt;span style=&#34;color:#ff0000&#34;&gt;assign&lt;/span&gt;(data.begin(), data.end());
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; a)
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;a.&lt;span style=&#34;color:#ff0000&#34;&gt;assign&lt;/span&gt;(il) example:&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  a.&lt;span style=&#34;color:#ff0000&#34;&gt;assign&lt;/span&gt;({&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;});
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; a)
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Constructor with initializer-list example:
1
2
3
4

a.assign(first, last) example:
4
3
2
1

a.assign(il) example:
2
4
6
8
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace_back (C++11) -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/vector/emplace_back.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/vector/emplace_back.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;vector&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class vector&#34;&gt;vector::&lt;/span&gt;emplace_back (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; emplace_back(Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;emplace_back(Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;直接構築で新たな要素を末尾に追加する。&lt;/p&gt;
&lt;p&gt;この関数の引数&lt;code&gt;args...&lt;/code&gt;は、要素型Tのコンストラクタ引数である。当関数の内部で要素型&lt;code&gt;T&lt;/code&gt;のコンストラクタを呼び出し、追加する要素を構築する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;定数時間&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;再確保の可能性、イテレータの有効性への影響、例外発生時に副作用が発生しない保証はいずれも&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/push_back.html&#34;&gt;&lt;code&gt;push_back()&lt;/code&gt;&lt;/a&gt;と同様。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; v;

  v.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace_back&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;));
  v.push_back(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;world&#34;&lt;/span&gt;)));

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v.begin(), v.end(), [](decltype(v)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;const_reference x) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  });
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3,hello
1,world
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2680.pdf&#34; target=&#34;_blank&#34;&gt;N2680 Proposed Wording for Placement Insert (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2187&#34; target=&#34;_blank&#34;&gt;LWG Issue 2187. &lt;code&gt;vector&amp;lt;bool&amp;gt;&lt;/code&gt; is missing emplace and &lt;code&gt;emplace_back&lt;/code&gt; member functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2252&#34; target=&#34;_blank&#34;&gt;LWG Issue 2252. Strong guarantee on &lt;code&gt;vector::push_back()&lt;/code&gt; still broken with C++11?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;経緯の説明は、&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/push_back.html&#34;&gt;&lt;code&gt;vector::push_back()&lt;/code&gt;&lt;/a&gt;ページを参照。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/vector/insert.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/vector/insert.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;vector&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class vector&#34;&gt;vector::&lt;/span&gt;insert&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(iterator position, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++03&lt;/span&gt;
iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(const_iterator position, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++11&lt;/span&gt;

iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(const_iterator position, T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x);                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++11&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(iterator position,
            size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++03&lt;/span&gt;
iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(const_iterator position,
                size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++11&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; insert(iterator position,
            InputIterator first, InputIterator last);             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++03&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator insert(const_iterator position,
                InputIterator first, InputIterator last);         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++11&lt;/span&gt;

iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(const_iterator position, initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5) C++11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;任意の位置に新たな要素を挿入する&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;挿入された要素を指すイテレータ&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;挿入される要素の数と挿入される要素の位置と&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/end.html&#34;&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/a&gt;の間の要素数に対して線形時間の計算量が必要である。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;要素を追加した後の&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;が要素を追加する前の&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/capacity.html&#34;&gt;&lt;code&gt;capacity()&lt;/code&gt;&lt;/a&gt;よりも大きい場合は領域の再確保が生じる。領域の再確保が生じなかった場合には挿入位置より前のイテレーターや参照は有効である。&lt;/li&gt;
&lt;li&gt;条件付きで、例外が発生した場合に副作用が発生しない保証がある。&lt;ul&gt;
&lt;li&gt;C++03: 要素型&lt;code&gt;T&lt;/code&gt;のコピーコンストラクタ、代入演算子以外で例外が発生した場合、副作用は発生しない。&lt;/li&gt;
&lt;li&gt;C++11: 要素型&lt;code&gt;T&lt;/code&gt;のコピーコンストラクタ、ムーブコンストラクタ、代入演算子、ムーブ代入演算子、またはInputIteratorの操作以外で例外が発生した場合、副作用は発生しない。（ムーブとInputIteratorの操作について規定が追加された。）&lt;/li&gt;
&lt;li&gt;C++14: 単一要素を終端に追加する場合は&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/push_back.html&#34;&gt;&lt;code&gt;push_back()&lt;/code&gt;&lt;/a&gt;と同様。それ以外はC++11と同様。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;aaa&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;bbb&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ccc&#34;&lt;/span&gt;};

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 挿入位置と、追加するconst&amp;amp;の要素を指定するバージョン&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ddd&#34;&lt;/span&gt;;
    v.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(v.begin() &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, s);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 挿入位置と、追加する&amp;amp;&amp;amp;の要素を指定するバージョン&lt;/span&gt;
  {
    v.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(v.begin() &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;eee&#34;&lt;/span&gt;));
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 挿入位置とイテレータの範囲を指定するバージョン&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;fff&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ggg&#34;&lt;/span&gt;};
    v.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(v.begin() &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, x.begin(), x.end());
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 挿入位置と初期化子リストを指定するバージョン&lt;/span&gt;
  {
    v.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(v.begin() &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hhh&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;iii&#34;&lt;/span&gt;});
  }

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v.begin(), v.end(), [](decltype(v)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;const_reference x) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  });
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;aaa
hhh
iii
fff
ggg
eee
ddd
bbb
ccc
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;C++11 :右辺参照バージョン&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; 10.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++11 : 初期化子リストバージョン&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2350.pdf&#34; target=&#34;_blank&#34;&gt;N2350 Container insert/erase and iterator constness (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(5)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2252&#34; target=&#34;_blank&#34;&gt;LWG Issue 2252. Strong guarantee on &lt;code&gt;vector::push_back()&lt;/code&gt; still broken with C++11?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;経緯の説明は、&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/push_back.html&#34;&gt;&lt;code&gt;vector::push_back()&lt;/code&gt;&lt;/a&gt;ページを参照。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/vector/op_assign.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/vector/op_assign.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;vector&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class vector&#34;&gt;vector::&lt;/span&gt;operator=&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++03&lt;/span&gt;
vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++11&lt;/span&gt;
vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : コピー代入&lt;/li&gt;
&lt;li&gt;(2) : ムーブ代入&lt;/li&gt;
&lt;li&gt;(3) : 初期化子リストの代入&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 要件：型&lt;code&gt;T&lt;/code&gt;が&lt;code&gt;vector&lt;/code&gt;に対して&lt;a href=&#34;http://cpprefjp.github.io/reference/container_concepts/copyinsertable.html&#34;&gt;&lt;code&gt;CopyInsertable&lt;/code&gt;&lt;/a&gt;であること。&lt;/li&gt;
&lt;li&gt;(3) : 型&lt;code&gt;T&lt;/code&gt;が&lt;code&gt;vector&lt;/code&gt;に対して&lt;a href=&#34;http://cpprefjp.github.io/reference/container_concepts/copyinsertable.html&#34;&gt;&lt;code&gt;CopyInsertable&lt;/code&gt;&lt;/a&gt;であること。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 同じテンプレートパラメータを持つ&lt;code&gt;vector&lt;/code&gt;クラスのオブジェクトをコピー代入する。&lt;code&gt;*this&lt;/code&gt;の全ての要素が解放され、&lt;code&gt;x&lt;/code&gt;の全ての要素が&lt;code&gt;*this&lt;/code&gt;にコピーされる。&lt;/li&gt;
&lt;li&gt;(2) : 同じテンプレートパラメータを持つ&lt;code&gt;vector&lt;/code&gt;クラスのオブジェクトをムーブ代入する。&lt;code&gt;*this&lt;/code&gt;の全ての要素が解放され、&lt;code&gt;x&lt;/code&gt;の全ての要素が&lt;code&gt;*this&lt;/code&gt;にムーブされる。&lt;/li&gt;
&lt;li&gt;(3) : 同じテンプレートパラメータを持つ&lt;code&gt;initializer_list&lt;/code&gt;クラスのオブジェクトをコピー代入する。&lt;code&gt;*this&lt;/code&gt;の全ての要素が解放され、&lt;code&gt;x&lt;/code&gt;の全ての要素が&lt;code&gt;*this&lt;/code&gt;にコピーされる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;code&gt;*this == x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;*this&lt;/code&gt;は元々の&lt;code&gt;x&lt;/code&gt;と等値となる&lt;/li&gt;
&lt;li&gt;(3) : &lt;code&gt;*this == x&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 全要素のデストラクタ呼び出しとコピーを行うために、線形時間&lt;/li&gt;
&lt;li&gt;(2) : 全要素のデストラクタ呼び出しをするために、線形時間&lt;/li&gt;
&lt;li&gt;(3) : 全要素のデストラクタ呼び出しとコピーを行うために、線形時間&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::equal&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コピー代入&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v2;

    v2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v1;

    assert(v1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; v2);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ムーブ代入&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v2;

    v2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(v1);

    assert(v1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; v2);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 初期化子リストからのコピー代入&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v1;
    v1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 事後条件の検証:&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v2;
    v2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; init;

    assert(v2.size() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; init.size());
    assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;equal(v2.begin(), v2.end(), init.begin()));
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(3)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 経緯となるドキュメントへのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/vector/op_constructor.html"/>
      <id>e5375008832b9faac14997e877a26f915488dd61:reference/vector/op_constructor.md</id>
      <updated>2015-07-29 15:38:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;vector&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class vector&#34;&gt;vector::&lt;/span&gt;コンストラクタ&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;vector();                                            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++14&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;vector&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;vector&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) + (2) C++03&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;vector&lt;/span&gt;(size_type n);                        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++11&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;vector&lt;/span&gt;(size_type n,
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++14&lt;/span&gt;

vector(size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value,
       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++11&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;vector&lt;/span&gt;(size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; T(),
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) + (4) C++03&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIter&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
vector(InputIter first, InputIter last,
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5) C++03&lt;/span&gt;

vector(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6) C++03&lt;/span&gt;
vector(vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x);                                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7) C++11&lt;/span&gt;
vector(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8) C++11&lt;/span&gt;
vector(vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (9) C++11&lt;/span&gt;
vector(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il,
       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (10) C++11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;vector&lt;/code&gt;オブジェクトを次に示す通りの要素で初期化する。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : デフォルトコンストラクタ。&lt;code&gt;size() == 0&lt;/code&gt; の要素を持たない空の &lt;code&gt;vector&lt;/code&gt; オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(2) : アロケータを別で受け取り、&lt;code&gt;size() == 0&lt;/code&gt; の要素を持たない空の &lt;code&gt;vector&lt;/code&gt; オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(1) + (2) : デフォルトコンストラクタ。&lt;code&gt;size() == 0&lt;/code&gt; の要素を持たない空の &lt;code&gt;vector&lt;/code&gt; オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(3) :&lt;ul&gt;
&lt;li&gt;C++11 : &lt;code&gt;n&lt;/code&gt; 個の &lt;code&gt;T()&lt;/code&gt; で初期化された要素を保持した &lt;code&gt;vector&lt;/code&gt; オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;C++14 : アロケータ &lt;code&gt;a&lt;/code&gt; を使用して、&lt;code&gt;n&lt;/code&gt; 個の &lt;code&gt;T()&lt;/code&gt; で初期化された要素を保持した &lt;code&gt;vector&lt;/code&gt; オブジェクトを構築する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(4) : 繰り返しシーケンスコンストラクタ。アロケータ &lt;code&gt;a&lt;/code&gt; を使用して、&lt;code&gt;value&lt;/code&gt; のコピーを &lt;code&gt;n&lt;/code&gt; 個要素として保持した &lt;code&gt;vector&lt;/code&gt; オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(3) + (4) : 繰り返しシーケンスコンストラクタ。アロケータ &lt;code&gt;a&lt;/code&gt; を使用して、&lt;code&gt;value&lt;/code&gt; のコピーを &lt;code&gt;n&lt;/code&gt; 個要素として保持した &lt;code&gt;vector&lt;/code&gt; オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(5) : イテレータ範囲コンストラクタ。アロケータ &lt;code&gt;a&lt;/code&gt; を使用して、&lt;code&gt;[first, last)&lt;/code&gt; の範囲を要素としてコピーした &lt;code&gt;vector&lt;/code&gt; オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(6) : コピーコンストラクタ。&lt;code&gt;x&lt;/code&gt; と同じ要素を保持した &lt;code&gt;vector&lt;/code&gt; オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(7) : ムーブコンストラクタ。&lt;code&gt;x&lt;/code&gt; の指す先を自分の領域として &lt;code&gt;vector&lt;/code&gt; オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(8) : アロケータを別で受け取り、&lt;code&gt;vector&lt;/code&gt; オブジェクトをコピー構築する。&lt;/li&gt;
&lt;li&gt;(9) : アロケータを別で受け取り、&lt;code&gt;vector&lt;/code&gt; オブジェクトをムーブ構築する。&lt;/li&gt;
&lt;li&gt;(10) : 初期化子リストを受け取るコンストラクタ。&lt;code&gt;vector(il.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), li.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), a)&lt;/code&gt; と等価。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1), (2) : 定数時間&lt;/li&gt;
&lt;li&gt;(3), (4) : &lt;code&gt;n&lt;/code&gt; に対して線形時間&lt;/li&gt;
&lt;li&gt;(5) : &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last)&lt;/code&gt; に対して線形時間。&lt;code&gt;InputIter&lt;/code&gt; が前方向イテレータの要件を満たさない場合はあらかじめ要素数が分からないため、再確保のコストが(対数オーダで)別途発生する。&lt;/li&gt;
&lt;li&gt;(6) : &lt;code&gt;x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; に対して線形時間&lt;/li&gt;
&lt;li&gt;(7) : 定数時間&lt;/li&gt;
&lt;li&gt;(8) : &lt;code&gt;x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; に対して線形時間&lt;/li&gt;
&lt;li&gt;(9) : 定数時間。ただし、&lt;code&gt;a == x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; でなければ &lt;code&gt;x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; に対して線形時間。&lt;/li&gt;
&lt;li&gt;(10) : &lt;code&gt;il.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; に対して線形時間&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;イテレータ範囲コンストラクタ(5) &lt;code&gt;template &amp;lt;class InputIter&amp;gt; vector(InputIter first, InputIter last, const Allocator&amp;amp; a = Allocator())&lt;/code&gt; は、C++03 までは &lt;code&gt;InputIter&lt;/code&gt; が整数型の場合には &lt;code&gt;vector(static_cast&amp;lt;typename vector::size_type&amp;gt;(first), static_cast&amp;lt;typename vector::value_type&amp;gt;(last), a)&lt;/code&gt; と同等とされていたが、C++11 では &lt;code&gt;InputIter&lt;/code&gt; が入力イテレータの要件を満たさなければオーバーロード解決に参加しないように変更された。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++11 では、&lt;code&gt;explicit vector(size_type n, const T&amp;amp; value = T(), const Allocator&amp;amp; a = Allocator())&lt;/code&gt; の引数 &lt;code&gt;value&lt;/code&gt; に関するデフォルト引数が削除され、新たなコンストラクタ &lt;code&gt;explicit vector(size_type n)&lt;/code&gt; が追加された。&lt;br /&gt;
    これは、デフォルト引数を使用すると、引数 &lt;code&gt;value&lt;/code&gt; のデフォルト初期化 1 回＋&lt;code&gt;vector&lt;/code&gt; の要素へのコピー初期化 &lt;code&gt;n&lt;/code&gt; 回のコンストラクタ呼び出しが必要となるが、デフォルト引数でなければ &lt;code&gt;vector&lt;/code&gt; の要素へのデフォルト初期化 &lt;code&gt;n&lt;/code&gt; 回のコンストラクタ呼び出しで済むためである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++14 では、&lt;code&gt;explicit vector(const Allocator&amp;amp; a = Allocator())&lt;/code&gt; がデフォルト引数を使用しない 2 つのオーバーロードに分割された。&lt;br /&gt;
    これは、デフォルトコンストラクタに &lt;code&gt;explicit&lt;/code&gt; が付いていると、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;のようなコード（C++11 から導入された、コピーリスト初期化によるデフォルトコンストラクタ呼び出し）がエラーになってしまうためである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++14 では、&lt;code&gt;explicit vector(size_type n)&lt;/code&gt; に引数が追加され、&lt;code&gt;explicit vector(size_type n, const Allocator&amp;amp; a = Allocator())&lt;/code&gt; に変更された。&lt;br /&gt;
    これは、変更されないと &lt;code&gt;n&lt;/code&gt; のみを引数にとるアロケータ使用構築（uses-allocator construction）に失敗してしまうためである。
    具体的には、C++11 では以下のようなコードがエラーになってしまう。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator.html&#34;&gt;scoped_allocator&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; vi &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;vi, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator/scoped_allocator_adaptor.html&#34;&gt;scoped_allocator_adaptor&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;allocator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;vi&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; l;
  l.&lt;a href=&#34;http://cpprefjp.github.io/reference/list/emplace_back.html&#34;&gt;emplace_back&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;10u&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html&#34;&gt;algorithm&lt;/a&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/for_each.html&#34;&gt;for_each&lt;/a&gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; name, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; v)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : {&#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/for_each.html&#34;&gt;for_each&lt;/a&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/begin.html&#34;&gt;begin&lt;/a&gt;(v), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/end.html&#34;&gt;end&lt;/a&gt;(v), [](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;; });
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;}&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main ()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; first;                                           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// int型の空の&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;を構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; second(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;100&lt;/span&gt;);                                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 4個のint値からなる&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;を構築し、全ての値を100で初期化&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; third(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/begin.html&#34;&gt;begin&lt;/a&gt;(second), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/end.html&#34;&gt;end&lt;/a&gt;(second));     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// secondのイテレータ範囲から&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;を構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; fourth(third);                                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// thirdをコピー&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 組み込み配列から&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;を構築&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; myints[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;16&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;77&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;29&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; fifth(myints, myints &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;sizeof&lt;/span&gt;(myints) &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;));
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// fifth(std::&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/begin.html&#34;&gt;begin&lt;/a&gt;(myints), std::&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/end.html&#34;&gt;end&lt;/a&gt;(myints)); でもOK&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 初期化子リストから&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;を構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; sixth &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;first&#34;&lt;/span&gt;, first);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;second&#34;&lt;/span&gt;, second);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;third&#34;&lt;/span&gt;, third);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;fourth&#34;&lt;/span&gt;, fourth);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;fifth&#34;&lt;/span&gt;, fifth);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;sixth&#34;&lt;/span&gt;, sixth);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;first : {}
second : {100 100 100 100 }
third : {100 100 100 100 }
fourth : {100 100 100 100 }
fifth : {16 2 77 29 }
sixth : {1 2 3 }
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf&#34; target=&#34;_blank&#34;&gt;N2679 Initializer Lists for Standard Containers(Revision 1)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(10)の経緯となる提案文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2193&#34; target=&#34;_blank&#34;&gt;LWG 2193. Default constructors for standard library containers are explicit&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;explicit vector(const Allocator&amp;amp; a = Allocator())&lt;/code&gt; を 2 つのオーバーロードに分割するきっかけとなったレポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2210&#34; target=&#34;_blank&#34;&gt;LWG 2210. Missing allocator-extended constructor for allocator-aware containers&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;explicit vector(size_type n)&lt;/code&gt; にアロケータ引数を追加するきっかけとなったレポート&lt;br /&gt;
    なお、Discussion の例はアロケータの型が誤っているので注意&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-02-05T04:39:44.164402</updated>
  <id>1b727494-fe82-44f6-ae2e-52b5b3c2911c</id>

  
    <entry>
      <title>expected -- expected/expected: operator==,!=(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.html"/>
      <id>4d920448512f40a8a9d1363b91491ab6b7dca3df:reference/expected/expected.md</id>
      <updated>2023-02-05T13:34:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.md b/reference/expected/expected.md
index 018ba2380..21b53d030 100644
--- a/reference/expected/expected.md
+++ b/reference/expected/expected.md
@@ -69,8 +69,8 @@ namespace std {
 
 | 名前         | 説明       | 対応バージョン |
 |--------------|------------|-------|
-| [`operator==`](unexpected/op_equal.md.nolink) | 等値比較 | C++23 |
-| [`operator!=`](unexpected/op_not_equal.md.nolink) | 非等値比較 | C++23 |
+| [`operator==`](expected/op_equal.md) | 等値比較 | C++23 |
+| [`operator!=`](expected/op_not_equal.md) | 非等値比較 | C++23 |
 
 
 ## メンバ型
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- expected/expected: operator==,!=(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/op_equal.html"/>
      <id>4d920448512f40a8a9d1363b91491ab6b7dca3df:reference/expected/expected/op_equal.md</id>
      <updated>2023-02-05T13:34:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/op_equal.md b/reference/expected/expected/op_equal.md
new file mode 100644
index 000000000..efbb18770
--- /dev/null
+++ b/reference/expected/expected/op_equal.md
@@ -0,0 +1,95 @@
+# operator==
+* expected[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* expected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class T2, class E2&amp;gt; requires (!is_void_v&amp;lt;T2&amp;gt;)
+friend constexpr bool operator==(const expected&amp;amp; x, const expected&amp;lt;T2, E2&amp;gt;&amp;amp; y); // (1)
+
+template&amp;lt;class T2&amp;gt;
+friend constexpr bool operator==(const expected&amp;amp; x, const T2&amp;amp; v); // (2)
+// (2)により、下記オーバーロードが使用可能になる
+template&amp;lt;class T2&amp;gt;
+friend constexpr bool operator==(const T2&amp;amp; v, const expected&amp;amp; x); // (3)
+
+template&amp;lt;class E2&amp;gt;
+friend constexpr bool operator==(const expected&amp;amp; x, const unexpected&amp;lt;E2&amp;gt;&amp;amp; e); // (4)
+// (4)により、下記オーバーロードが使用可能になる
+template&amp;lt;class E2&amp;gt;
+friend constexpr bool operator==(const unexpected&amp;lt;E2&amp;gt;&amp;amp; e, const expected&amp;amp; x); // (5)
+```
+* is_void_v[link /reference/type_traits/is_void.md]
+* unexpected[link ../unexpected.md]
+
+## 概要
+- (1) : `unexpected`オブジェクト同士の等値比較を行う。
+- (2), (3) : `unexpected`オブジェクトと正常値の等値比較を行う。
+- (4), (5) : `unexpected`オブジェクトとエラー値の等値比較を行う。
+
+
+## 適格要件
+- (1) : 式[`*x`](op_deref.md) `==` [`*y`](op_deref.md)および式`x.`[`error()`](error.md) `== y.`[`error()`](error.md)が適格であり、各式の結果を`bool`へ変換可能であること。
+- (2), (3) : 式[`*x`](op_deref.md) `== v`が適格であり、その結果を`bool`へ変換可能であること。
+- (4), (5) : 式`x.`[`error()`](error.md) `== e.`[`error()`](../unexpected/error.md.nolink)が適格であり、その結果を`bool`へ変換可能であること。
+
+
+## 戻り値
+- (1) : 次の値を返す
+    - `x.`[`has_value()`](has_value.md)と`y.`[`has_value()`](has_value.md)が異なるとき、`false`
+    - `x.`[`has_value()`](has_value.md) `== true`のとき、[`*x`](op_deref.md) `==` [`*y`](op_deref.md)
+    - `x.`[`error()`](error.md) `== y.`[`error()`](error.md)
+- (2), (3) : `x.`[`has_value()`](has_value.md) `&amp;amp;&amp;amp; static_cast&amp;lt;bool&amp;gt;(`[`*x`](op_deref.md) `== v)`
+- (4), (5) : `!x.`[`has_value()`](has_value.md) `&amp;amp;&amp;amp; static_cast&amp;lt;bool&amp;gt;(x.`[`error()`](error.md) `== e.`[`error()`](../unexpected/error.md.nolink)`)`
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+
+int main()
+{
+  std::expected&amp;lt;long, long&amp;gt;   x1 = 1;
+  std::expected&amp;lt;short, short&amp;gt; y1 = 1;
+  std::expected&amp;lt;long, long&amp;gt;   x2 = std::unexpected{1};
+  std::expected&amp;lt;short, short&amp;gt; y2 = std::unexpected{1};
+
+  // (1)
+  assert(x1 == y1);
+  assert(x2 == y2);
+  assert(not (x1 == y2));
+  assert(not (x2 == y1));
+
+  // (2), (3)
+  assert(x1 == 1);
+  assert(1 == x1);
+
+  // (4), (5)
+  assert(x2 == std::unexpected{1});
+  assert(std::unexpected{1} == x2);
+}
+```
+* ==[color ff0000]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- expected/expected: operator==,!=(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/op_not_equal.html"/>
      <id>4d920448512f40a8a9d1363b91491ab6b7dca3df:reference/expected/expected/op_not_equal.md</id>
      <updated>2023-02-05T13:34:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/op_not_equal.md b/reference/expected/expected/op_not_equal.md
new file mode 100644
index 000000000..dc9fb7370
--- /dev/null
+++ b/reference/expected/expected/op_not_equal.md
@@ -0,0 +1,92 @@
+# operator!=
+* expected[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* expected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+// operator==により、下記オーバーロードが使用可能になる
+template&amp;lt;class T2, class E2&amp;gt; requires (!is_void_v&amp;lt;T2&amp;gt;)
+friend constexpr bool operator!=(const expected&amp;amp; x, const expected&amp;lt;T2, E2&amp;gt;&amp;amp; y); // (1)
+
+template&amp;lt;class T2&amp;gt;
+friend constexpr bool operator!=(const expected&amp;amp; x, const T2&amp;amp; v); // (2)
+template&amp;lt;class T2&amp;gt;
+friend constexpr bool operator!=(const T2&amp;amp; v, const expected&amp;amp; x); // (3)
+
+template&amp;lt;class E2&amp;gt;
+friend constexpr bool operator!=(const expected&amp;amp; x, const unexpected&amp;lt;E2&amp;gt;&amp;amp; e); // (4)
+template&amp;lt;class E2&amp;gt;
+friend constexpr bool operator!=(const unexpected&amp;lt;E2&amp;gt;&amp;amp; e, const expected&amp;amp; x); // (5)
+```
+* operator==[link op_equal.md]
+* is_void_v[link /reference/type_traits/is_void.md]
+* unexpected[link ../unexpected.md]
+
+## 概要
+- (1) : `unexpected`オブジェクト同士の非等値比較を行う。
+- (2), (3) : `unexpected`オブジェクトと正常値の非等値比較を行う。
+- (4), (5) : `unexpected`オブジェクトとエラー値の非等値比較を行う。
+
+
+## 適格要件
+- (1) : 式[`*x`](op_deref.md) `==` [`*y`](op_deref.md)および式`x.`[`error()`](error.md) `== y.`[`error()`](error.md)が適格であり、各式の結果を`bool`へ変換可能であること。
+- (2), (3) : 式[`*x`](op_deref.md) `== v`が適格であり、その結果を`bool`へ変換可能であること。
+- (4), (5) : 式`x.`[`error()`](error.md) `== e.`[`error()`](../unexpected/error.md.nolink)が適格であり、その結果を`bool`へ変換可能であること。
+
+
+## 戻り値
+- (1) : `!`[`(x == y)`](op_equal.md)
+- (2), (3) : `!`[`(x == v)`](op_equal.md)
+- (4), (5) : `!`[`(x == e)`](op_equal.md)
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+
+int main()
+{
+  std::expected&amp;lt;long, long&amp;gt;   x1 = 1;
+  std::expected&amp;lt;short, short&amp;gt; y1 = 100;
+  std::expected&amp;lt;long, long&amp;gt;   x2 = std::unexpected{1};
+  std::expected&amp;lt;short, short&amp;gt; y2 = std::unexpected{100};
+
+  // (1)
+  assert(x1 != y1);
+  assert(x2 != y2);
+  assert(x1 != y2);
+  assert(x2 != y1);
+
+  // (2), (3)
+  assert(x1 != 2);
+  assert(2 != x1);
+
+  // (4), (5)
+  assert(x2 != std::unexpected{2});
+  assert(std::unexpected{2} != x2);
+}
+```
+* !=[color ff0000]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>and_then -- expected/expected: MonadicOperators調整(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/and_then.html"/>
      <id>c7fe7e269cffd85cbe741ba50482628f0840c716:reference/expected/expected/and_then.md</id>
      <updated>2023-02-05T11:16:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/and_then.md b/reference/expected/expected/and_then.md
index 4f0062460..358fdfb1b 100644
--- a/reference/expected/expected/and_then.md
+++ b/reference/expected/expected/and_then.md
@@ -16,6 +16,18 @@ template&amp;lt;class F&amp;gt; constexpr auto and_then(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
 正常値を保持していれば、正常値に対して`f`を適用した結果を`expected`として返す。
 エラー値を保持していれば、そのまま返す。
 
+実際には複数オーバーロードが提供されるが、大まかには下記シグニチャのようにみなせる。
+`and_then`へは、引数リストに1個の`T`型をとり`std::expected&amp;lt;Return, E&amp;gt;`型を返す関数や関数オブジェクトを与える。
+
+```cpp
+template &amp;lt;class T, class E&amp;gt;
+class expected {
+  template &amp;lt;class Return&amp;gt;
+  std::expected&amp;lt;Return, E&amp;gt; and_then(function&amp;lt;std::expected&amp;lt;Return, E&amp;gt;(T)&amp;gt; func);
+};
+```
+* function[link /reference/functional/function.md]
+
 
 ## テンプレートパラメータ制約
 - (1), (2) : [`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;E&amp;gt; == true`
@@ -62,6 +74,10 @@ template&amp;lt;class F&amp;gt; constexpr auto and_then(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
     * std::move[link /reference/utility/move.md]
 
 
+## 備考
+`and_then`は、メソッドチェーンをサポートするモナド風(monadic)操作として導入された。
+
+
 ## 例
 ```cpp example
 #include &amp;lt;cassert&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>or_else -- expected/expected: MonadicOperators調整(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/or_else.html"/>
      <id>c7fe7e269cffd85cbe741ba50482628f0840c716:reference/expected/expected/or_else.md</id>
      <updated>2023-02-05T11:16:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/or_else.md b/reference/expected/expected/or_else.md
index 9cac72496..8c7b08d78 100644
--- a/reference/expected/expected/or_else.md
+++ b/reference/expected/expected/or_else.md
@@ -16,6 +16,18 @@ template&amp;lt;class F&amp;gt; constexpr auto or_else(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
 エラー値を保持していれば、エラー値に対して`f`を適用した結果を`expected`として返す。
 正常値を保持していれば、そのまま返す。
 
+実際には複数オーバーロードが提供されるが、大まかには下記シグニチャのようにみなせる。
+`or_else`へは、引数リストに1個の`E`型をとり`std::expected&amp;lt;T, Return&amp;gt;`型を返す関数や関数オブジェクトを与える。
+
+```cpp
+template &amp;lt;class T, class E&amp;gt;
+class expected {
+  template &amp;lt;class Return&amp;gt;
+  std::expected&amp;lt;T, Return&amp;gt; or_else(function&amp;lt;std::expected&amp;lt;T, Return&amp;gt;(E)&amp;gt; func);
+};
+```
+* function[link /reference/functional/function.md]
+
 
 ## テンプレートパラメータ制約
 - (1), (2) : [`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;T&amp;gt; == true`
@@ -62,6 +74,10 @@ template&amp;lt;class F&amp;gt; constexpr auto or_else(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
     * std::move[link /reference/utility/move.md]
 
 
+## 備考
+`or_else`は、メソッドチェーンをサポートするモナド風(monadic)操作として導入された。
+
+
 ## 例
 ```cpp example
 #include &amp;lt;cassert&amp;gt;
@@ -98,6 +114,8 @@ int main()
 * value()[link value.md]
 * error()[link error.md]
 * std::unexpected[link ../unexpected.md]
+* std::from_chars[link /reference/charconv/from_chars.md]
+* std::errc[link /reference/system_error/errc.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transform -- expected/expected: MonadicOperators調整(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/transform.html"/>
      <id>c7fe7e269cffd85cbe741ba50482628f0840c716:reference/expected/expected/transform.md</id>
      <updated>2023-02-05T11:16:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/transform.md b/reference/expected/expected/transform.md
index 13f65dfbd..74439250d 100644
--- a/reference/expected/expected/transform.md
+++ b/reference/expected/expected/transform.md
@@ -16,6 +16,18 @@ template&amp;lt;class F&amp;gt; constexpr auto transform(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
 正常値を保持していれば、正常値に対して`f`を適用した結果を`expected`の正常値として格納して返す。
 エラー値を保持していれば、そのまま返す。
 
+実際には複数オーバーロードが提供されるが、大まかには下記シグニチャのようにみなせる。
+`transform`へは、引数リストに1個の`T`型をとり`Return`型を返す関数や関数オブジェクトを与える。
+
+```cpp
+template &amp;lt;class T, class E&amp;gt;
+class expected {
+  template &amp;lt;class Return&amp;gt;
+  std::expected&amp;lt;Return, E&amp;gt; transform(function&amp;lt;Return(T)&amp;gt; func);
+};
+```
+* function[link /reference/functional/function.md]
+
 
 ## テンプレートパラメータ制約
 - (1), (2) : [`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;E&amp;gt; == true`
@@ -25,10 +37,10 @@ template&amp;lt;class F&amp;gt; constexpr auto transform(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
 ## 適格要件
 - (1), (2) : 型`U`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`value()`](value.md)`)&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
     - `U`が`expected`の有効な正常値型である
-    - [`is_void_t`](/reference/type_traits/is_void.md)`&amp;lt;U&amp;gt; == false`のとき、宣言`U u(`[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`value()`](value.md)`));`が妥当である
+    - `U`が（CV修飾された）`void`ではないとき、宣言`U u(`[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`value()`](value.md)`));`が妥当である
 - (3), (4) : 型`U`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`))&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
     - `U`が`expected`の有効な正常値型である
-    - [`is_void_t`](/reference/type_traits/is_void.md)`&amp;lt;U&amp;gt; == false`のとき、宣言`U u(`[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`)));`が妥当である
+    - `U`が（CV修飾された）`void`ではないとき、宣言`U u(`[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`)));`が妥当である
 
 
 ## 効果
@@ -36,13 +48,16 @@ template&amp;lt;class F&amp;gt; constexpr auto transform(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
     - エラー値を保持していたら、`expected&amp;lt;U, E&amp;gt;(`[`unexpect`](../unexpect_t.md)`,` [`error()`](error.md)`)`を返す。
     - 型`U`が（CV修飾された）`void`でなければ、正常値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`value()`](value.md)`)`で非直接リスト初期化した`expected&amp;lt;U, E&amp;gt;`オブジェクトを返す。
     - そうでなければ、[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`value()`](value.md)`)`を評価し、`expected&amp;lt;U, E&amp;gt;()`を返す。
-
 - (3), (4) : 次の効果をもつ
     - エラー値を保持していたら、`expected&amp;lt;U, E&amp;gt;(`[`unexpect`](../unexpect_t.md)`,` [`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))`を返す。
     - 型`U`が（CV修飾された）`void`でなければ、正常値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`))`で非直接リスト初期化した`expected&amp;lt;U, E&amp;gt;`オブジェクトを返す。
     - そうでなければ、[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`))`を評価し、`expected&amp;lt;U, E&amp;gt;()`を返す。
 
 
+## 備考
+`transform`は、メソッドチェーンをサポートするモナド風(monadic)操作として導入された。
+
+
 ## 例
 ```cpp example
 #include &amp;lt;cassert&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transform_error -- expected/expected: MonadicOperators調整(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/transform_error.html"/>
      <id>c7fe7e269cffd85cbe741ba50482628f0840c716:reference/expected/expected/transform_error.md</id>
      <updated>2023-02-05T11:16:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/transform_error.md b/reference/expected/expected/transform_error.md
index 160c97d4b..100e135d1 100644
--- a/reference/expected/expected/transform_error.md
+++ b/reference/expected/expected/transform_error.md
@@ -16,6 +16,18 @@ template&amp;lt;class F&amp;gt; constexpr auto transform_error(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
 エラー値を保持していれば、エラー値に対して`f`を適用した結果を`expected`のエラー値として格納して返す。
 正常値を保持していれば、そのまま返す。
 
+実際には複数オーバーロードが提供されるが、大まかには下記シグニチャのようにみなせる。
+`transform_error`へは、引数リストに1個の`E`型をとり`Return`型を返す関数や関数オブジェクトを与える。
+
+```cpp
+template &amp;lt;class T, class E&amp;gt;
+class expected {
+  template &amp;lt;class Return&amp;gt;
+  std::expected&amp;lt;T, Return&amp;gt; transform_error(function&amp;lt;Return(E)&amp;gt; func);
+};
+```
+* function[link /reference/functional/function.md]
+
 
 ## テンプレートパラメータ制約
 - (1), (2) : [`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;T&amp;gt; == true`
@@ -24,10 +36,10 @@ template&amp;lt;class F&amp;gt; constexpr auto transform_error(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
 
 ## 適格要件
 - (1), (2) : 型`G`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`error()`](error.md)`)&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
-    - `G`が`expected`の有効な値型である
+    - `G`が`expected`の有効なエラー値型である
     - 宣言`G g(`[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`error()`](error.md)`));`が妥当である
 - (3), (4) : 型`G`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
-    - `G`が`expected`の有効な値型である
+    - `G`が`expected`の有効なエラー値型である
     - 宣言`G g(`[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`)));`が妥当である
 
 
@@ -36,8 +48,12 @@ template&amp;lt;class F&amp;gt; constexpr auto transform_error(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
     - 正常値を保持していたら、`expected&amp;lt;T, G&amp;gt;(`[`in_place`](/reference/utility/in_place_t.md)`,` [`value()`](value.md)`)`を返す。
     - エラー値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`error()`](error.md)`)`で非直接リスト初期化した`expected&amp;lt;T, G&amp;gt;`オブジェクトを返す。
 - (3), (4) : 次の効果をもつ
-    - エラー値を保持していたら、`expected&amp;lt;U, E&amp;gt;(`[`unexpect`](../unexpect_t.md)`,` [`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))`を返す。
-    - 正常値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))`で非直接リスト初期化した`expected&amp;lt;T, G&amp;gt;`オブジェクトを返す。
+    - 正常値を保持していたら、`expected&amp;lt;T, G&amp;gt;(`[`in_place`](/reference/utility/in_place_t.md)`,` [`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`))`を返す。
+    - エラー値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))`で非直接リスト初期化した`expected&amp;lt;T, G&amp;gt;`オブジェクトを返す。
+
+
+## 備考
+`transform_error`は、メソッドチェーンをサポートするモナド風(monadic)操作として導入された。
 
 
 ## 例
@@ -67,6 +83,7 @@ int main()
 * value()[link value.md]
 * error()[link error.md]
 * std::unexpected[link ../unexpected.md]
+* std::reverse[link /reference/algorithm/reverse.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>expected -- expected/expected: and_then,or_else,transform,transform_error(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.html"/>
      <id>7a5214d449873dbd48f51bb2a022775430b6aa89:reference/expected/expected.md</id>
      <updated>2023-02-04T23:35:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.md b/reference/expected/expected.md
index ecb45517a..018ba2380 100644
--- a/reference/expected/expected.md
+++ b/reference/expected/expected.md
@@ -60,10 +60,10 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`and_then`](expected/and_then.md.nolink)   | 正常値に対して関数を適用する | C++23 |
-| [`or_else`](expected/or_else.md.nolink)     | エラー値に対して関数を適用する | C++23 |
-| [`transform`](expected/transform.md.nolink) | 正常値を変換する | C++23 |
-| [`transform_error`](expected/transform_error.md.nolink) | エラー値を変換する | C++23 |
+| [`and_then`](expected/and_then.md) | 正常値に対して関数を適用する | C++23 |
+| [`or_else`](expected/or_else.md) | エラー値に対して関数を適用する | C++23 |
+| [`transform`](expected/transform.md) | 正常値を変換する | C++23 |
+| [`transform_error`](expected/transform_error.md) | エラー値を変換する | C++23 |
 
 ### 比較
 
@@ -120,6 +120,8 @@ int main()
 ```
 * std::expected[color ff0000]
 * std::unexpected[link unexpected.md]
+* *v[link expected/op_deref.md]
+* v.error()[link expected/error.md]
 * std::quoted[link ../iomanip/quoted.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>and_then -- expected/expected: and_then,or_else,transform,transform_error(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/and_then.html"/>
      <id>7a5214d449873dbd48f51bb2a022775430b6aa89:reference/expected/expected/and_then.md</id>
      <updated>2023-02-04T23:35:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/and_then.md b/reference/expected/expected/and_then.md
new file mode 100644
index 000000000..4f0062460
--- /dev/null
+++ b/reference/expected/expected/and_then.md
@@ -0,0 +1,121 @@
+# and_then
+* expected[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* expected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class F&amp;gt; constexpr auto and_then(F&amp;amp;&amp;amp; f) &amp;amp;;        // (1)
+template&amp;lt;class F&amp;gt; constexpr auto and_then(F&amp;amp;&amp;amp; f) const &amp;amp;;  // (2)
+template&amp;lt;class F&amp;gt; constexpr auto and_then(F&amp;amp;&amp;amp; f) &amp;amp;&amp;amp;;       // (3)
+template&amp;lt;class F&amp;gt; constexpr auto and_then(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
+```
+
+## 概要
+正常値を保持していれば、正常値に対して`f`を適用した結果を`expected`として返す。
+エラー値を保持していれば、そのまま返す。
+
+
+## テンプレートパラメータ制約
+- (1), (2) : [`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;E&amp;gt; == true`
+- (3), (4) : [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;E&amp;gt; == true`
+
+
+## 適格要件
+- (1), (2) : 型`U`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`value()`](value.md)`)&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `U`が`expected`の特殊化である
+    - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;U::error_type, E&amp;gt; == true`
+- (3), (4) : 型`U`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`))&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `U`が`expected`の特殊化である
+    - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;U::error_type, E&amp;gt; == true`
+
+
+## 効果
+- (1), (2) : 次の処理と等価
+    ```cpp
+    if (has_value())
+      return invoke(std::forward&amp;lt;F&amp;gt;(f), value());
+    else
+      return U(unexpect, error());
+    ```
+    * has_value[link has_value.md]
+    * value()[link value.md]
+    * error()[link error.md]
+    * unexpect[link ../unexpect_t.md]
+    * invoke[link /reference/functional/invoke.md]
+    * std::forward[link /reference/utility/forward.md]
+
+- (3), (4) : 次の処理と等価
+    ```cpp
+    if (has_value())
+      return invoke(std::forward&amp;lt;F&amp;gt;(f), std::move(value()));
+    else
+      return U(unexpect, std::move(error()));
+    ```
+    * has_value[link has_value.md]
+    * value()[link value.md]
+    * error()[link error.md]
+    * unexpect[link ../unexpect_t.md]
+    * invoke[link /reference/functional/invoke.md]
+    * std::forward[link /reference/utility/forward.md]
+    * std::move[link /reference/utility/move.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+// 正数なら2倍／それ以外はエラー値を返す関数
+std::expected&amp;lt;int, std::string&amp;gt; twice(int n)
+{
+  if (0 &amp;lt; n) {
+    return n * 2;
+  } else {
+    return std::unexpected{&amp;#34;out of domain&amp;#34;};
+  }
+}
+
+int main()
+{
+  std::expected&amp;lt;int, std::string&amp;gt; v1 = 1;
+  assert(v1.and_then(twice).value() == 2);
+
+  std::expected&amp;lt;int, std::string&amp;gt; v2 = 0;
+  assert(v2.and_then(twice).error() == &amp;#34;out of domain&amp;#34;);
+
+  std::expected&amp;lt;int, std::string&amp;gt; e1 = std::unexpected{&amp;#34;NaN&amp;#34;};
+  assert(e1.and_then(twice).error() == &amp;#34;NaN&amp;#34;);
+}
+```
+* and_then[color ff0000]
+* value()[link value.md]
+* error()[link error.md]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`or_else()`](or_else.md)
+- [`transform()`](transform.md)
+- [`transform_error()`](transform_error.md)
+
+
+## 参照
+- [P2505R5 Monadic Functions for `std::expected`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2505r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>or_else -- expected/expected: and_then,or_else,transform,transform_error(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/or_else.html"/>
      <id>7a5214d449873dbd48f51bb2a022775430b6aa89:reference/expected/expected/or_else.md</id>
      <updated>2023-02-04T23:35:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/or_else.md b/reference/expected/expected/or_else.md
new file mode 100644
index 000000000..9cac72496
--- /dev/null
+++ b/reference/expected/expected/or_else.md
@@ -0,0 +1,125 @@
+# or_else
+* expected[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* expected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class F&amp;gt; constexpr auto or_else(F&amp;amp;&amp;amp; f) &amp;amp;;        // (1)
+template&amp;lt;class F&amp;gt; constexpr auto or_else(F&amp;amp;&amp;amp; f) const &amp;amp;;  // (2)
+template&amp;lt;class F&amp;gt; constexpr auto or_else(F&amp;amp;&amp;amp; f) &amp;amp;&amp;amp;;       // (3)
+template&amp;lt;class F&amp;gt; constexpr auto or_else(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
+```
+
+## 概要
+エラー値を保持していれば、エラー値に対して`f`を適用した結果を`expected`として返す。
+正常値を保持していれば、そのまま返す。
+
+
+## テンプレートパラメータ制約
+- (1), (2) : [`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;T&amp;gt; == true`
+- (3), (4) : [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;T&amp;gt; == true`
+
+
+## 適格要件
+- (1), (2) : 型`G`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`value()`](value.md)`)&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `G`が`expected`の特殊化である
+    - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;G::value_type, T&amp;gt; == true`
+- (3), (4) : 型`G`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`))&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `G`が`expected`の特殊化である
+    - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;G::value_type, T&amp;gt; == true`
+
+
+## 効果
+- (1), (2) : 次の処理と等価
+    ```cpp
+    if (has_value())
+      return G(in_place, value());
+    else
+      return invoke(std::forward&amp;lt;F&amp;gt;(f), error());
+    ```
+    * has_value()[link has_value.md]
+    * value()[link value.md]
+    * error()[link error.md]
+    * invoke[link /reference/functional/invoke.md]
+    * in_place[link /reference/utility/in_place_t.md]
+    * std::forward[link /reference/utility/forward.md]
+
+- (3), (4) : 次の処理と等価
+    ```cpp
+    if (has_value())
+      return G(in_place, std::move(value()));
+    else
+      return invoke(std::forward&amp;lt;F&amp;gt;(f), std::move(error()));
+    ```
+    * has_value()[link has_value.md]
+    * value()[link value.md]
+    * error()[link error.md]
+    * invoke[link /reference/functional/invoke.md]
+    * in_place[link /reference/utility/in_place_t.md]
+    * std::forward[link /reference/utility/forward.md]
+    * std::move[link /reference/utility/move.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;charconv&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+
+// 文字列を正常値(数値)として再解釈する関数
+std::expected&amp;lt;int, std::string&amp;gt; parse(std::string_view s)
+{
+  int val{};
+  auto [ptr, ec] = std::from_chars(s.begin(), s.end(), val);
+  if (ec == std::errc{} &amp;amp;&amp;amp; ptr == s.end()) {
+    return val;
+  } else {
+    return std::unexpected&amp;lt;std::string&amp;gt;{s};
+  }
+}
+
+int main()
+{
+  std::expected&amp;lt;int, std::string&amp;gt; v1 = 1;
+  assert(v1.or_else(parse).value() == 1);
+
+  std::expected&amp;lt;int, std::string&amp;gt; e1 = std::unexpected{&amp;#34;123&amp;#34;};
+  assert(e1.or_else(parse) == 123);
+
+  std::expected&amp;lt;int, std::string&amp;gt; e2 = std::unexpected{&amp;#34;bad&amp;#34;};
+  assert(e2.or_else(parse).error() == &amp;#34;bad&amp;#34;);
+}
+```
+* or_else[color ff0000]
+* value()[link value.md]
+* error()[link error.md]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`and_then()`](and_then.md)
+- [`transform()`](transform.md)
+- [`transform_error()`](transform_error.md)
+
+
+## 参照
+- [P2505R5 Monadic Functions for `std::expected`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2505r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transform -- expected/expected: and_then,or_else,transform,transform_error(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/transform.html"/>
      <id>7a5214d449873dbd48f51bb2a022775430b6aa89:reference/expected/expected/transform.md</id>
      <updated>2023-02-04T23:35:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/transform.md b/reference/expected/expected/transform.md
new file mode 100644
index 000000000..13f65dfbd
--- /dev/null
+++ b/reference/expected/expected/transform.md
@@ -0,0 +1,99 @@
+# transform
+* expected[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* expected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class F&amp;gt; constexpr auto transform(F&amp;amp;&amp;amp; f) &amp;amp;;        // (1)
+template&amp;lt;class F&amp;gt; constexpr auto transform(F&amp;amp;&amp;amp; f) const &amp;amp;;  // (2)
+template&amp;lt;class F&amp;gt; constexpr auto transform(F&amp;amp;&amp;amp; f) &amp;amp;&amp;amp;;       // (3)
+template&amp;lt;class F&amp;gt; constexpr auto transform(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
+```
+
+## 概要
+正常値を保持していれば、正常値に対して`f`を適用した結果を`expected`の正常値として格納して返す。
+エラー値を保持していれば、そのまま返す。
+
+
+## テンプレートパラメータ制約
+- (1), (2) : [`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;E&amp;gt; == true`
+- (3), (4) : [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;E&amp;gt; == true`
+
+
+## 適格要件
+- (1), (2) : 型`U`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`value()`](value.md)`)&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `U`が`expected`の有効な正常値型である
+    - [`is_void_t`](/reference/type_traits/is_void.md)`&amp;lt;U&amp;gt; == false`のとき、宣言`U u(`[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`value()`](value.md)`));`が妥当である
+- (3), (4) : 型`U`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`))&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `U`が`expected`の有効な正常値型である
+    - [`is_void_t`](/reference/type_traits/is_void.md)`&amp;lt;U&amp;gt; == false`のとき、宣言`U u(`[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`)));`が妥当である
+
+
+## 効果
+- (1), (2) : 次の効果をもつ
+    - エラー値を保持していたら、`expected&amp;lt;U, E&amp;gt;(`[`unexpect`](../unexpect_t.md)`,` [`error()`](error.md)`)`を返す。
+    - 型`U`が（CV修飾された）`void`でなければ、正常値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`value()`](value.md)`)`で非直接リスト初期化した`expected&amp;lt;U, E&amp;gt;`オブジェクトを返す。
+    - そうでなければ、[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`value()`](value.md)`)`を評価し、`expected&amp;lt;U, E&amp;gt;()`を返す。
+
+- (3), (4) : 次の効果をもつ
+    - エラー値を保持していたら、`expected&amp;lt;U, E&amp;gt;(`[`unexpect`](../unexpect_t.md)`,` [`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))`を返す。
+    - 型`U`が（CV修飾された）`void`でなければ、正常値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`))`で非直接リスト初期化した`expected&amp;lt;U, E&amp;gt;`オブジェクトを返す。
+    - そうでなければ、[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`))`を評価し、`expected&amp;lt;U, E&amp;gt;()`を返す。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;numeric&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+// 1..N数列を生成する関数
+std::vector&amp;lt;int&amp;gt; make_seq(int n)
+{
+  std::vector&amp;lt;int&amp;gt; seq(n, 0);
+  std::iota(seq.begin(), seq.end(), 1);
+  return seq;
+}
+
+int main()
+{
+  std::expected&amp;lt;int, std::string&amp;gt; v1 = 3;
+  assert((v1.transform(make_seq).value() == std::vector&amp;lt;int&amp;gt;{1,2,3}));
+
+  std::expected&amp;lt;int, std::string&amp;gt; e1 = std::unexpected{&amp;#34;NaN&amp;#34;};
+  assert(e1.transform(make_seq).error() == &amp;#34;NaN&amp;#34;);
+}
+```
+* transform[color ff0000]
+* value()[link value.md]
+* error()[link error.md]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`and_then()`](and_then.md)
+- [`or_else()`](or_else.md)
+- [`transform_error()`](transform_error.md)
+
+
+## 参照
+- [P2505R5 Monadic Functions for `std::expected`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2505r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transform_error -- expected/expected: and_then,or_else,transform,transform_error(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/transform_error.html"/>
      <id>7a5214d449873dbd48f51bb2a022775430b6aa89:reference/expected/expected/transform_error.md</id>
      <updated>2023-02-04T23:35:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/transform_error.md b/reference/expected/expected/transform_error.md
new file mode 100644
index 000000000..160c97d4b
--- /dev/null
+++ b/reference/expected/expected/transform_error.md
@@ -0,0 +1,94 @@
+# transform_error
+* expected[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* expected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class F&amp;gt; constexpr auto transform_error(F&amp;amp;&amp;amp; f) &amp;amp;;        // (1)
+template&amp;lt;class F&amp;gt; constexpr auto transform_error(F&amp;amp;&amp;amp; f) const &amp;amp;;  // (2)
+template&amp;lt;class F&amp;gt; constexpr auto transform_error(F&amp;amp;&amp;amp; f) &amp;amp;&amp;amp;;       // (3)
+template&amp;lt;class F&amp;gt; constexpr auto transform_error(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
+```
+
+## 概要
+エラー値を保持していれば、エラー値に対して`f`を適用した結果を`expected`のエラー値として格納して返す。
+正常値を保持していれば、そのまま返す。
+
+
+## テンプレートパラメータ制約
+- (1), (2) : [`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;T&amp;gt; == true`
+- (3), (4) : [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;T&amp;gt; == true`
+
+
+## 適格要件
+- (1), (2) : 型`G`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`error()`](error.md)`)&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `G`が`expected`の有効な値型である
+    - 宣言`G g(`[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`error()`](error.md)`));`が妥当である
+- (3), (4) : 型`G`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `G`が`expected`の有効な値型である
+    - 宣言`G g(`[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`)));`が妥当である
+
+
+## 効果
+- (1), (2) : 次の効果をもつ
+    - 正常値を保持していたら、`expected&amp;lt;T, G&amp;gt;(`[`in_place`](/reference/utility/in_place_t.md)`,` [`value()`](value.md)`)`を返す。
+    - エラー値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`error()`](error.md)`)`で非直接リスト初期化した`expected&amp;lt;T, G&amp;gt;`オブジェクトを返す。
+- (3), (4) : 次の効果をもつ
+    - エラー値を保持していたら、`expected&amp;lt;U, E&amp;gt;(`[`unexpect`](../unexpect_t.md)`,` [`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))`を返す。
+    - 正常値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))`で非直接リスト初期化した`expected&amp;lt;T, G&amp;gt;`オブジェクトを返す。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+// 文字列を逆順に並べ替える関数
+std::string revstr(std::string str)
+{
+  std::reverse(str.begin(), str.end());
+  return str;
+}
+
+int main()
+{
+  std::expected&amp;lt;int, std::string&amp;gt; v1 = 42;
+  assert(v1.transform_error(revstr).value() == 42);
+
+  std::expected&amp;lt;int, std::string&amp;gt; e1 = std::unexpected{&amp;#34;Oops&amp;#34;};
+  assert(e1.transform_error(revstr).error() == &amp;#34;spoO&amp;#34;);
+}
+```
+* transform_error[color ff0000]
+* value()[link value.md]
+* error()[link error.md]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`and_then()`](and_then.md)
+- [`or_else()`](or_else.md)
+- [`transform()`](transform.md)
+
+
+## 参照
+- [P2505R5 Monadic Functions for `std::expected`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2505r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- expected/expected: swap修正(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/swap.html"/>
      <id>74c922fff6904c42e88adb04f497dff5fa3088dc:reference/expected/expected/swap.md</id>
      <updated>2023-02-03T23:09:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/swap.md b/reference/expected/expected/swap.md
index 7a270c1f4..8df15366e 100644
--- a/reference/expected/expected/swap.md
+++ b/reference/expected/expected/swap.md
@@ -25,15 +25,15 @@ constexpr void swap(expected&amp;amp; rhs) noexcept(see below);
 
 - [`is_swappable_v`](/reference/type_traits/is_swappable.md)`&amp;lt;T&amp;gt; == true`
 - [`is_swappable_v`](/reference/type_traits/is_swappable.md)`&amp;lt;E&amp;gt; == true`
-- `(`[`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;E&amp;gt; &amp;amp;&amp;amp;` [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;E&amp;gt;) == true`
-- `(`[`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;E&amp;gt; &amp;amp;&amp;amp;` [`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;E&amp;gt;) == true`
+- `(`[`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;T&amp;gt; &amp;amp;&amp;amp;` [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;E&amp;gt;) == true`
+- `(`[`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;T&amp;gt; ||` [`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;E&amp;gt;) == true`
 
 
 ## 効果
 `*this`と`rhs`それぞれが正常値／エラー値いずれを保持しているかに応じて、以下の効果を持つ。
 
-- `*this`と`rhs`ともに正常値を保持していれば、次と等価 : `using std::swap;` [`swap`](/reference/utility/swap.md)`(val, rhs.val);`
-- `*this`と`rhs`ともにエラー値を保持していれば、次と等価 : `using std::swap;` [`swap`](/reference/utility/swap.md)`(unex, rhs.unex);`
+- `*this`と`rhs`ともに正常値を保持していれば、次と等価 : `using` [`std::swap`](/reference/utility/swap.md)`; swap(val, rhs.val);`
+- `*this`と`rhs`ともにエラー値を保持していれば、次と等価 : `using` [`std::swap`](/reference/utility/swap.md)`; swap(unex, rhs.unex);`
 - `*this`がエラー値を`rhs`が正常値を保持していれば、次と等価 : `rhs.swap(*this);`
 - `*this`が正常値を`rhs`がエラー値を保持していれば、次と等価 :
     ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>expected -- expected/expected: swap(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.html"/>
      <id>b79bb56d63ecdfa3568ca85fa5568d1ecb355d53:reference/expected/expected.md</id>
      <updated>2023-02-03T22:55:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.md b/reference/expected/expected.md
index bcb33b6ab..ecb45517a 100644
--- a/reference/expected/expected.md
+++ b/reference/expected/expected.md
@@ -41,7 +41,7 @@ namespace std {
 |-----------------|----------------|-------|
 | [`operator=`](expected/op_assign.md) | 代入演算子 | C++23 |
 | [`emplace`](expected/emplace.md) | 正常値型のコンストラクタ引数から直接構築する | C++23 |
-| [`swap`](expected/swap.md.nolink) | 他の`expected`オブジェクトとデータを入れ替える | C++23 |
+| [`swap`](expected/swap.md) | 他の`expected`オブジェクトとデータを入れ替える | C++23 |
 
 ### 値の観測
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- expected/expected: swap(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/swap.html"/>
      <id>b79bb56d63ecdfa3568ca85fa5568d1ecb355d53:reference/expected/expected/swap.md</id>
      <updated>2023-02-03T22:55:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/swap.md b/reference/expected/expected/swap.md
new file mode 100644
index 000000000..7a270c1f4
--- /dev/null
+++ b/reference/expected/expected/swap.md
@@ -0,0 +1,131 @@
+# swap
+* expected[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* expected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr void swap(expected&amp;amp; rhs) noexcept(see below);
+```
+* see below[italic]
+
+## 概要
+他の`expected`オブジェクトとデータを入れ替える。
+
+動作説明用の`expected`クラスメンバ変数として、下記を導入する。
+
+- `val` : `T`型の正常値。
+- `unex` : `E`型のエラー値。
+- `has_val` : `bool`型のフラグ変数。正常値を保持する場合は`true`に、エラー値を保持する場合は`false`となる。
+
+
+## テンプレートパラメータ制約
+次の制約を全て満たすこと
+
+- [`is_swappable_v`](/reference/type_traits/is_swappable.md)`&amp;lt;T&amp;gt; == true`
+- [`is_swappable_v`](/reference/type_traits/is_swappable.md)`&amp;lt;E&amp;gt; == true`
+- `(`[`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;E&amp;gt; &amp;amp;&amp;amp;` [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;E&amp;gt;) == true`
+- `(`[`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;E&amp;gt; &amp;amp;&amp;amp;` [`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;E&amp;gt;) == true`
+
+
+## 効果
+`*this`と`rhs`それぞれが正常値／エラー値いずれを保持しているかに応じて、以下の効果を持つ。
+
+- `*this`と`rhs`ともに正常値を保持していれば、次と等価 : `using std::swap;` [`swap`](/reference/utility/swap.md)`(val, rhs.val);`
+- `*this`と`rhs`ともにエラー値を保持していれば、次と等価 : `using std::swap;` [`swap`](/reference/utility/swap.md)`(unex, rhs.unex);`
+- `*this`がエラー値を`rhs`が正常値を保持していれば、次と等価 : `rhs.swap(*this);`
+- `*this`が正常値を`rhs`がエラー値を保持していれば、次と等価 :
+    ```cpp
+    if constexpr (is_nothrow_move_constructible_v&amp;lt;E&amp;gt;) {
+      E tmp(std::move(rhs.unex));
+      destroy_at(addressof(rhs.unex));
+      try {
+        construct_at(addressof(rhs.val), std::move(val));
+        destroy_at(addressof(val));
+        construct_at(addressof(unex), std::move(tmp));
+      } catch(...) {
+        construct_at(addressof(rhs.unex), std::move(tmp));
+        throw;
+      }
+    } else {
+      T tmp(std::move(val));
+      destroy_at(addressof(val));
+      try {
+        construct_at(addressof(unex), std::move(rhs.unex));
+        destroy_at(addressof(rhs.unex));
+        construct_at(addressof(rhs.val), std::move(tmp));
+      } catch (...) {
+        construct_at(addressof(val), std::move(tmp));
+        throw;
+      }
+    }
+    has_val = false;
+    rhs.has_val = true;
+    ```
+    * addressof[link /reference/memory/addressof.md]
+    * construct_at[link /reference/memory/construct_at.md]
+    * destroy_at[link /reference/memory/destroy_at.md]
+    * std::move[link /reference/utility/move.md]
+    * is_nothrow_move_constructible_v[link /reference/type_traits/is_nothrow_move_constructible.md]
+
+
+## 戻り値
+なし
+
+
+## 例外
+noexcept例外指定は次の式に従う :
+
+[`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;T&amp;gt; &amp;amp;&amp;amp;` [`is_nothrow_swappable_v`](/reference/type_traits/is_nothrow_swappable.md)`&amp;lt;T&amp;gt; &amp;amp;&amp;amp;` [`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;E&amp;gt; &amp;amp;&amp;amp;` [`is_nothrow_swappable_v`](/reference/type_traits/is_nothrow_swappable.md)`&amp;lt;E&amp;gt;`
+
+noexcept例外指定が`false`の場合、上記の「効果」による処理からの例外がスローされる。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::expected&amp;lt;int, std::string&amp;gt; x = 42;
+  std::expected&amp;lt;int, std::string&amp;gt; y = std::unexpected{&amp;#34;ERR&amp;#34;};
+  assert(x.value() == 42 &amp;amp;&amp;amp; y.error() == &amp;#34;ERR&amp;#34;);
+
+  x.swap(y);
+  assert(x.error() == &amp;#34;ERR&amp;#34; &amp;amp;&amp;amp; y.value() == 42);
+}
+```
+* swap[color ff0000]
+* value()[link value.md]
+* error()[link error.md]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+42
+0
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`operator-&amp;gt;`](op_arrow.md)
+- [`operator*`](op_deref.md)
+- [`value()`](value.md)
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
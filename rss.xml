<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-03-23T14:40:41.615011</updated>
  <id>9b0bab97-44c2-45ac-be8e-85c42774e988</id>

  
    <entry>
      <title>iota_view -- subrangeのエラー修正 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/iota_view.html"/>
      <id>543f96943cbf997cc8182348e558b2cae129b583:reference/ranges/iota_view.md</id>
      <updated>2022-03-23T18:34:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/iota_view.md b/reference/ranges/iota_view.md
index 1a09a5132..9dd7aaff1 100644
--- a/reference/ranges/iota_view.md
+++ b/reference/ranges/iota_view.md
@@ -77,7 +77,7 @@ namespace std::ranges {
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](subrange/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+| [`(deduction_guide)`](iota_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>subrange -- subrangeのエラー修正 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange.html"/>
      <id>543f96943cbf997cc8182348e558b2cae129b583:reference/ranges/subrange.md</id>
      <updated>2022-03-23T18:34:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange.md b/reference/ranges/subrange.md
index 5c99fd654..5867810c1 100644
--- a/reference/ranges/subrange.md
+++ b/reference/ranges/subrange.md
@@ -111,6 +111,7 @@ concept pair-like-convertible-from =
   convertible_to&amp;lt;V, tuple_element_t&amp;lt;1, T&amp;gt;&amp;gt;;
 ```
 * convertible_to[link /reference/concepts/convertible_to.md]
+* constructible_from[link /reference/concepts/derived_from.md]
 * derived_from[link /reference/concepts/derived_from.md]
 * is_pointer_v[link /reference/type_traits/is_pointer.md]
 * decay_t[link /reference/type_traits/decay.md]
@@ -118,6 +119,7 @@ concept pair-like-convertible-from =
 * remove_pointer_t[link /reference/type_traits/remove_pointer.md]
 * remove_const_t[link /reference/type_traits/remove_const.md]
 * range[link /reference/ranges/range.md]
+* tuple_element_t[link /reference/tuple/tuple_element.md]
 * not-same-as[italic][link /reference/concepts/same_as.md]
 * uses-nonqualification-pointer-conversion[italic]
 * convertible-to-non-slicing[italic]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- subrangeのエラー修正 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/begin.html"/>
      <id>543f96943cbf997cc8182348e558b2cae129b583:reference/ranges/subrange/begin.md</id>
      <updated>2022-03-23T18:34:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/begin.md b/reference/ranges/subrange/begin.md
index c075adde7..3f4081cf9 100644
--- a/reference/ranges/subrange/begin.md
+++ b/reference/ranges/subrange/begin.md
@@ -17,8 +17,8 @@ constexpr I begin() const requires copyable&amp;lt;I&amp;gt;;             // (1)
 先頭要素を指すイテレータを取得する。
 
 ## 効果
-- (1): `return begin_­;`
-- (2): `return std​::​move(begin_­);`
+- (1): `return begin_;`
+- (2): `return std::move(begin_);`
 
 ただし、`begin_`は`subrange`が内部で保持するイテレータ。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- subrangeのエラー修正 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/empty.html"/>
      <id>543f96943cbf997cc8182348e558b2cae129b583:reference/ranges/subrange/empty.md</id>
      <updated>2022-03-23T18:34:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/empty.md b/reference/ranges/subrange/empty.md
index f308d0982..e956c41d1 100644
--- a/reference/ranges/subrange/empty.md
+++ b/reference/ranges/subrange/empty.md
@@ -13,7 +13,7 @@ constexpr bool empty() const;
 `subrange`が空かどうかを判定する。
 
 ## 効果
-`return begin_­ == end_­;`
+`return begin_ == end_;`
 
 ただし、`begin_`、`end_`は`subrange`が内部で保持するイテレータと番兵。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>enable_borrowed_range -- subrangeのエラー修正 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/enable_borrowed_range.html"/>
      <id>543f96943cbf997cc8182348e558b2cae129b583:reference/ranges/subrange/enable_borrowed_range.md</id>
      <updated>2022-03-23T18:34:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/enable_borrowed_range.md b/reference/ranges/subrange/enable_borrowed_range.md
index da49a2462..7bbff5362 100644
--- a/reference/ranges/subrange/enable_borrowed_range.md
+++ b/reference/ranges/subrange/enable_borrowed_range.md
@@ -10,12 +10,13 @@ namespace std::ranges {
   inline constexpr bool enable_borrowed_range&amp;lt;subrange&amp;lt;I, S, K&amp;gt;&amp;gt; = true;
 }
 ```
+* subrange[link ../subrange.md]
 
 ## 概要
 
 [`enable_borrowed_range`](../enable_borrowed_range.md)の特殊化。
 
-この特殊化により、`subrange`が[`borrowed_range`](borrowed_range.md)となる。
+この特殊化により、`subrange`が[`borrowed_range`](../borrowed_range.md)となる。
 
 ## 例
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get -- subrangeのエラー修正 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/get.html"/>
      <id>543f96943cbf997cc8182348e558b2cae129b583:reference/ranges/subrange/get.md</id>
      <updated>2022-03-23T18:34:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/get.md b/reference/ranges/subrange/get.md
index 588e78d39..ed5ba4cc7 100644
--- a/reference/ranges/subrange/get.md
+++ b/reference/ranges/subrange/get.md
@@ -25,7 +25,7 @@ namespace std {
 ## 概要
 タプルと見なせる型から指定した位置の要素を取得する。
 
-`&amp;lt;ranges&amp;gt;`ヘッダでは、[`subrange`](/reference/ranges/subrange.md)に関する特殊化を定義する。
+[`&amp;lt;ranges&amp;gt;`](/reference/ranges.md)ヘッダでは、[`subrange`](/reference/ranges/subrange.md)に関する特殊化を定義する。
 
 [`subrange`](/reference/ranges/subrange.md)をタプルとして見たとき、大きさ2で、第0要素はイテレータ、第1要素は番兵である。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- subrangeのエラー修正 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/op_constructor.html"/>
      <id>543f96943cbf997cc8182348e558b2cae129b583:reference/ranges/subrange/op_constructor.md</id>
      <updated>2022-03-23T18:34:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/op_constructor.md b/reference/ranges/subrange/op_constructor.md
index 6bfb80baa..b52536d62 100644
--- a/reference/ranges/subrange/op_constructor.md
+++ b/reference/ranges/subrange/op_constructor.md
@@ -27,6 +27,7 @@ template&amp;lt;borrowed_range R&amp;gt;
 constexpr subrange(R&amp;amp;&amp;amp; r, make-unsigned-like-t&amp;lt;iter_difference_t&amp;lt;I&amp;gt;&amp;gt; n)
   requires (K == subrange_kind::sized) : subrange{ranges::begin(r), ranges::end(r), n} {}
 ```
+* subrange[link ../subrange.md]
 * subrange_kind[link /reference/ranges/subrange_kind.md]
 * borrowed_range[link /reference/ranges/borrowed_range.md]
 * sized_range[link /reference/ranges/sized_range.md]
@@ -51,6 +52,7 @@ constexpr subrange(R&amp;amp;&amp;amp; r, make-unsigned-like-t&amp;lt;iter_difference_t&amp;lt;I&amp;gt;&amp;gt; n)
 ```cpp
 static constexpr bool StoreSize = (K == subrange_kind::sized &amp;amp;&amp;amp; !sized_sentinel_for&amp;lt;S, I&amp;gt;);
 ```
+* subrange_kind[link /reference/ranges/subrange_kind.md]
 * sized_sentinel_for[link /reference/iterator/sized_sentinel_for.md]
 * StoreSize[italic]
 
@@ -64,7 +66,7 @@ static constexpr bool StoreSize = (K == subrange_kind::sized &amp;amp;&amp;amp; !sized_sentinel_
 ## 事前条件
 
 - (2): `[i, s)`は有効な範囲であること
-- (3): `[i, s)`は有効な範囲であり、`n`はその範囲の長さ([`ranges​::​distance](/reference/iterator/ranges_distance.md)`(i, s)`)と等しいこと
+- (3): `[i, s)`は有効な範囲であり、`n`はその範囲の長さ([`ranges::distance](/reference/iterator/ranges_distance.md)`(i, s)`)と等しいこと
 - (4): `r`は有効な範囲であること
 - (5): `r`は有効な範囲であり、`n`はその範囲の長さと等しいこと
 
@@ -74,7 +76,7 @@ static constexpr bool StoreSize = (K == subrange_kind::sized &amp;amp;&amp;amp; !sized_sentinel_
 
 ## 備考
 
-`subrange`はコピー、ムーブ可能である。また、テンプレート引数が異なる`subrange`はからは、(4)によって構築できる。
+`subrange`はコピー、ムーブ可能である。また、テンプレート引数が異なる`subrange`からは、(4)によって構築できる。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- subrangeのエラー修正 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/op_deduction_guide.html"/>
      <id>543f96943cbf997cc8182348e558b2cae129b583:reference/ranges/subrange/op_deduction_guide.md</id>
      <updated>2022-03-23T18:34:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/op_deduction_guide.md b/reference/ranges/subrange/op_deduction_guide.md
index c82291b2c..eaa292245 100644
--- a/reference/ranges/subrange/op_deduction_guide.md
+++ b/reference/ranges/subrange/op_deduction_guide.md
@@ -22,6 +22,7 @@ namespace std::ranges {
     subrange&amp;lt;iterator_t&amp;lt;R&amp;gt;, sentinel_t&amp;lt;R&amp;gt;, subrange_kind::sized&amp;gt;;
 }
 ```
+* subrange[link ../subrange.md]
 * subrange_kind[link /reference/ranges/subrange_kind.md]
 * input_or_output_iterator[link /reference/iterator/input_or_output_iterator.md]
 * borrowed_range[link /reference/ranges/borrowed_range.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- subrangeのエラー修正 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/size.html"/>
      <id>543f96943cbf997cc8182348e558b2cae129b583:reference/ranges/subrange/size.md</id>
      <updated>2022-03-23T18:34:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/size.md b/reference/ranges/subrange/size.md
index ab34c77a0..1f1b13d27 100644
--- a/reference/ranges/subrange/size.md
+++ b/reference/ranges/subrange/size.md
@@ -20,8 +20,8 @@ constexpr make-unsigned-like-t&amp;lt;iter_difference_t&amp;lt;I&amp;gt;&amp;gt; size() const
 
 ## 効果
 
-- [`StoreSize`](op_constructor.md)が真のとき、 `return size_­;`
-- それ以外のとき、`return `[`to-unsigned-like`](/reference/type_traits/make_unsigned.md)`(end_­ - begin_­);`
+- [`StoreSize`](op_constructor.md)が真のとき、 `return size_;`
+- それ以外のとき、`return `[`to-unsigned-like`](/reference/type_traits/make_unsigned.md)`(end_ - begin_);`
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tuple_element -- subrangeのエラー修正 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/tuple_element.html"/>
      <id>543f96943cbf997cc8182348e558b2cae129b583:reference/ranges/subrange/tuple_element.md</id>
      <updated>2022-03-23T18:34:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/tuple_element.md b/reference/ranges/subrange/tuple_element.md
index d0972a9a8..18de89212 100644
--- a/reference/ranges/subrange/tuple_element.md
+++ b/reference/ranges/subrange/tuple_element.md
@@ -34,7 +34,7 @@ namespace std {
 ## 概要
 `tuple_element`は、タプルとして見なせる型から、`I`番目の要素型を取得するためのクラスである。
 
-`&amp;lt;ranges&amp;gt;`ヘッダでは、[`subrange`](/reference/ranges/subrange.md)に関する特殊化を定義する。
+[`&amp;lt;ranges&amp;gt;`](/reference/ranges.md)ヘッダでは、[`subrange`](/reference/ranges/subrange.md)に関する特殊化を定義する。
 
 [`subrange`](/reference/ranges/subrange.md)をタプルとして見たとき、大きさ2で、第0要素はイテレータ、第1要素は番兵である。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tuple_size -- subrangeのエラー修正 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/tuple_size.html"/>
      <id>543f96943cbf997cc8182348e558b2cae129b583:reference/ranges/subrange/tuple_size.md</id>
      <updated>2022-03-23T18:34:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/tuple_size.md b/reference/ranges/subrange/tuple_size.md
index 7c05842a3..320bbef5a 100644
--- a/reference/ranges/subrange/tuple_size.md
+++ b/reference/ranges/subrange/tuple_size.md
@@ -17,7 +17,7 @@ namespace std {
 
 要素数は、[`integral_constant`](/reference/type_traits/integral_constant.md)の機能を利用してコンパイル時の定数値として取得できる。
 
-`&amp;lt;ranges&amp;gt;`ヘッダでは、[`subrange`](/reference/ranges/subrange.md)に関する特殊化を定義する。
+[`&amp;lt;ranges&amp;gt;`](/reference/ranges.md)ヘッダでは、[`subrange`](/reference/ranges/subrange.md)に関する特殊化を定義する。
 
 [`subrange`](/reference/ranges/subrange.md)をタプルとして見たとき、大きさ2で、第0要素はイテレータ、第1要素は番兵である。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>enable_borrowed_range -- subrangeのメンバの説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/enable_borrowed_range.html"/>
      <id>fa338b14ab2b138d26ea3735e0fdf4eefe9b018d:reference/ranges/enable_borrowed_range.md</id>
      <updated>2022-03-23T12:53:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/enable_borrowed_range.md b/reference/ranges/enable_borrowed_range.md
index 1612a3e8e..f6e3d44fd 100644
--- a/reference/ranges/enable_borrowed_range.md
+++ b/reference/ranges/enable_borrowed_range.md
@@ -19,7 +19,20 @@ namespace std::ranges {
 
 ## 例
 
-(執筆中)
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+
+int main()
+{
+  constexpr int a[] = {1, 2};
+  const std::ranges::subrange sub(a);
+  static_assert(std::ranges::borrowed_range&amp;lt;decltype(sub)&amp;gt;);
+}
+```
+
+### 出力
+```
+```
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>subrange -- subrangeのメンバの説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange.html"/>
      <id>fa338b14ab2b138d26ea3735e0fdf4eefe9b018d:reference/ranges/subrange.md</id>
      <updated>2022-03-23T12:53:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange.md b/reference/ranges/subrange.md
index be9454c98..5c99fd654 100644
--- a/reference/ranges/subrange.md
+++ b/reference/ranges/subrange.md
@@ -7,7 +7,7 @@
 ```cpp
 namespace std::ranges {
   template&amp;lt;input_or_output_iterator I, sentinel_for&amp;lt;I&amp;gt; S = I, subrange_kind K = sized_sentinel_for&amp;lt;S, I&amp;gt; ? subrange_kind::sized : subrange_kind::unsized&amp;gt;
-  requires (K == subrange_kind::sized || !sized_sentinel_for&amp;lt;S, I&amp;gt;)
+    requires (K == subrange_kind::sized || !sized_sentinel_for&amp;lt;S, I&amp;gt;)
   class subrange : public view_interface&amp;lt;subrange&amp;lt;I, S, K&amp;gt;&amp;gt; { …… };
 }
 ```
@@ -22,6 +22,9 @@ namespace std::ranges {
 
 `subrange`は[`borrowed_range`](borrowed_range.md)、[`view`](view.md)のモデルであり、また、大きさ2のtuple-likeな型である。第0要素はイテレータ、第1要素は番兵。
 
+`subrange`は[`sized_range`](sized_range.md)である場合(`K == subrange_kind::sized`)とそうでない場合(`K == subrange_kind::unsized`)の両方をサポートする。
+また、元のRangeが[`sized_range`](sized_range.md)でなくても、長さを別に指定することで[`sized_range`](sized_range.md)になれる。
+
 ## テンプレートパラメータ制約
 [`subrange_kind`](subrange_kind.md)` K`が`sized`である。または、イテレータ`I`と番兵`S`が[`sized_sentinel_for`](/reference/iterator/sized_sentinel_for.md)を満たさない。
 
@@ -29,15 +32,15 @@ namespace std::ranges {
 
 | 名前                                           | 説明                             | 対応バージョン |
 |------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](subrange/op_constructor.md.nolink)  | コンストラクタ                   | C++20          |
-| [`operator PairLike`](subrange/op_pairlike.md.nolink) | pair-likeな型に変換する          | C++20          |
-| [`begin`](subrange/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
-| [`end`](subrange/end.md.nolink)                       | 番兵を取得する                   | C++20          |
-| [`empty`](subrange/empty.md.nolink)                   | Rangeが空かどうかを判定する      | C++20          |
-| [`size`](subrange/size.md.nolink)                     | 要素数を取得する                 | C++20          |
-| [`next`](subrange/next.md.nolink)                     | イテレータを前進させる           | C++20          |
-| [`prev`](subrange/prev.md.nolink)                     | イテレータを後退させる           | C++20          |
-| [`advance`](subrange/advance.md.nolink)               | 部分Rangeを前進させる            | C++20          |
+| [`(constructor)`](subrange/op_constructor.md)  | コンストラクタ                   | C++20          |
+| [`operator PairLike`](subrange/op_pairlike.md) | pair-likeな型に変換する          | C++20          |
+| [`begin`](subrange/begin.md)                   | 先頭を指すイテレータを取得する   | C++20          |
+| [`end`](subrange/end.md)                       | 番兵を取得する                   | C++20          |
+| [`empty`](subrange/empty.md)                   | Rangeが空かどうかを判定する      | C++20          |
+| [`size`](subrange/size.md)                     | 要素数を取得する                 | C++20          |
+| [`next`](subrange/next.md)                     | 先頭を前進させた部分Rangeを得る  | C++20          |
+| [`prev`](subrange/prev.md)                     | 先頭を後退させた部分Rangeを得る  | C++20          |
+| [`advance`](subrange/advance.md)               | 部分Rangeの先頭を動かす          | C++20          |
 
 ## 継承しているメンバ関数
 
@@ -49,17 +52,18 @@ namespace std::ranges {
 | [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
 | [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++20          |
 
+
 ## 推論補助
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](subrange/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+| [`(deduction_guide)`](subrange/op_deduction_guide.md) | クラステンプレートの推論補助 | C++20          |
 
 ## カスタマイゼーション
 
-| 名前                                                  | 説明                         | 対応バージョン |
-|-------------------------------------------------------|------------------------------|----------------|
-| [`enable_borrowed_range`](subrange/enable_borrowed_range.md.nolink) | `enable_borrowed_range`の特殊化 (variable template) | C++20          |
+| 名前                                                         | 説明                                                | 対応バージョン |
+|--------------------------------------------------------------|-----------------------------------------------------|----------------|
+| [`enable_borrowed_range`](subrange/enable_borrowed_range.md) | `enable_borrowed_range`の特殊化 (variable template) | C++20          |
 
 ## タプルインターフェース
 
@@ -69,6 +73,59 @@ namespace std::ranges {
 | [`tuple_element`](subrange/tuple_element.md) | 静的な要素の型取得(class template) | C++20          |
 | [`get`](subrange/get.md)                     | 要素を取得する(function template)  | C++20          |
 
+## 説明専用コンセプト
+
+このクラスの説明では以下のコンセプトを用いる。
+
+```cpp
+// uses-nonqualification-pointer-conversion: 直接変換できない型同士のポインタの変換が必要
+template&amp;lt;class From, class To&amp;gt;
+concept uses-nonqualification-pointer-conversion =
+  is_pointer_v&amp;lt;From&amp;gt; &amp;amp;&amp;amp; is_pointer_v&amp;lt;To&amp;gt; &amp;amp;&amp;amp;
+  !convertible_to&amp;lt;remove_pointer_t&amp;lt;From&amp;gt;(*)[], remove_pointer_t&amp;lt;To&amp;gt;(*)[]&amp;gt;;
+
+// convertible-to-non-slicing: スライシングを起こさずに変換できる
+template&amp;lt;class From, class To&amp;gt;
+concept convertible-to-non-slicing =
+  convertible_to&amp;lt;From, To&amp;gt; &amp;amp;&amp;amp;
+  !uses-nonqualification-pointer-conversion&amp;lt;decay_t&amp;lt;From&amp;gt;, decay_t&amp;lt;To&amp;gt;&amp;gt;;
+
+// pair-like: 大きさ2のtuple-likeな型である
+template&amp;lt;class T&amp;gt;
+concept pair-like =
+  !is_reference_v&amp;lt;T&amp;gt; &amp;amp;&amp;amp; requires(T t) {
+    typename tuple_size&amp;lt;T&amp;gt;::type;
+    requires derived_from&amp;lt;tuple_size&amp;lt;T&amp;gt;, integral_constant&amp;lt;size_t, 2&amp;gt;&amp;gt;;
+    typename tuple_element_t&amp;lt;0, remove_const_t&amp;lt;T&amp;gt;&amp;gt;;
+    typename tuple_element_t&amp;lt;1, remove_const_t&amp;lt;T&amp;gt;&amp;gt;;
+    { get&amp;lt;0&amp;gt;(t) } -&amp;gt; convertible_to&amp;lt;const tuple_element_t&amp;lt;0, T&amp;gt;&amp;amp;&amp;gt;;
+    { get&amp;lt;1&amp;gt;(t) } -&amp;gt; convertible_to&amp;lt;const tuple_element_t&amp;lt;1, T&amp;gt;&amp;amp;&amp;gt;;
+  };
+
+// pair-like-convertible-from: U, Vから構築できるpair-likeである (その際、Uはスライシングを起こさない)
+template&amp;lt;class T, class U, class V&amp;gt;
+concept pair-like-convertible-from =
+  !range&amp;lt;T&amp;gt; &amp;amp;&amp;amp; pair-like&amp;lt;T&amp;gt; &amp;amp;&amp;amp;
+  constructible_from&amp;lt;T, U, V&amp;gt; &amp;amp;&amp;amp;
+  convertible-to-non-slicing&amp;lt;U, tuple_element_t&amp;lt;0, T&amp;gt;&amp;gt; &amp;amp;&amp;amp;
+  convertible_to&amp;lt;V, tuple_element_t&amp;lt;1, T&amp;gt;&amp;gt;;
+```
+* convertible_to[link /reference/concepts/convertible_to.md]
+* derived_from[link /reference/concepts/derived_from.md]
+* is_pointer_v[link /reference/type_traits/is_pointer.md]
+* decay_t[link /reference/type_traits/decay.md]
+* integral_constant[link /reference/type_traits/integral_constant.md]
+* remove_pointer_t[link /reference/type_traits/remove_pointer.md]
+* remove_const_t[link /reference/type_traits/remove_const.md]
+* range[link /reference/ranges/range.md]
+* not-same-as[italic][link /reference/concepts/same_as.md]
+* uses-nonqualification-pointer-conversion[italic]
+* convertible-to-non-slicing[italic]
+* pair-like[italic]
+* pair-like-convertible-from[italic]
+* make-unsigned-like-t[italic][link /reference/type_traits/make_unsigned.md]
+
+
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>advance -- subrangeのメンバの説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/advance.html"/>
      <id>fa338b14ab2b138d26ea3735e0fdf4eefe9b018d:reference/ranges/subrange/advance.md</id>
      <updated>2022-03-23T12:53:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/advance.md b/reference/ranges/subrange/advance.md
new file mode 100644
index 000000000..352a9070e
--- /dev/null
+++ b/reference/ranges/subrange/advance.md
@@ -0,0 +1,98 @@
+# advance
+* ranges[meta header]
+* std::ranges[meta namespace]
+* subrange[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr subrange&amp;amp; advance(iter_difference_t&amp;lt;I&amp;gt; n);
+```
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
+* subrange[link ../subrange.md]
+
+## 概要
+部分Rangeの先頭を前進または後退させる。引数が負の時は後退する。
+
+## 効果
+
+[`StoreSize`](op_constructor.md)が真のとき、
+
+```cpp
+auto d = n - ranges::advance(begin_, n, end_);
+if (d &amp;gt;= 0)
+  size_ -= to-unsigned-like(d);
+else
+  size_ += to-unsigned-like(-d);
+return *this;
+```
+* ranges::advance[link /reference/iterator/ranges_advance.md]
+* to-unsigned-like[link /reference/type_traits/make_unsigned.md]
+
+それ以外のとき、
+
+```cpp
+ranges::advance(begin_, n, end_);
+return *this;
+```
+
+## 備考
+- `subrange`の末端を超えて進めようとした場合、`subrange`の長さは0になる。
+- `subrange`の先頭を後退させたとき、元の範囲でその位置に要素があればアクセスできる。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+template&amp;lt;std::ranges::range R&amp;gt;
+void print(const R&amp;amp; r) {
+  for (int x : r) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#39;,&amp;#39;;
+  }
+  std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+
+int main()
+{
+  constexpr int a[] = {1, 2, 3, 4, 5};
+  std::ranges::subrange sub(a + 1, a + 4);
+
+  print(sub);
+
+  sub.advance(1);
+  print(sub);
+
+  sub.advance(1);
+  print(sub);
+
+  sub.advance(-3);
+  print(sub);
+
+  // これ以上後退すると、先頭が配列aの範囲を超えてしまう
+  // sub.advance(-1);
+  // print(sub);
+}
+```
+
+### 出力
+```
+2,3,4,
+3,4,
+4,
+1,2,3,4,
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- subrangeのメンバの説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/begin.html"/>
      <id>fa338b14ab2b138d26ea3735e0fdf4eefe9b018d:reference/ranges/subrange/begin.md</id>
      <updated>2022-03-23T12:53:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/begin.md b/reference/ranges/subrange/begin.md
new file mode 100644
index 000000000..c075adde7
--- /dev/null
+++ b/reference/ranges/subrange/begin.md
@@ -0,0 +1,60 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* subrange[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr I begin() const requires copyable&amp;lt;I&amp;gt;;             // (1)
+
+[[nodiscard]] constexpr I begin() requires (!copyable&amp;lt;I&amp;gt;);  // (2)
+```
+* copyable[link /reference/concepts/copyable.md]
+* nodiscard[link /lang/cpp17/nodiscard.md]
+
+## 概要
+先頭要素を指すイテレータを取得する。
+
+## 効果
+- (1): `return begin_­;`
+- (2): `return std​::​move(begin_­);`
+
+ただし、`begin_`は`subrange`が内部で保持するイテレータ。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  constexpr int a[] = {1, 2, 3};
+  const std::ranges::subrange sub(a);
+  // .begin と .end を暗黙的に使用
+  for (int x : sub) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  }
+}
+```
+
+### 出力
+```
+1
+2
+3
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- subrangeのメンバの説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/empty.html"/>
      <id>fa338b14ab2b138d26ea3735e0fdf4eefe9b018d:reference/ranges/subrange/empty.md</id>
      <updated>2022-03-23T12:53:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/empty.md b/reference/ranges/subrange/empty.md
new file mode 100644
index 000000000..f308d0982
--- /dev/null
+++ b/reference/ranges/subrange/empty.md
@@ -0,0 +1,54 @@
+# empty
+* ranges[meta header]
+* std::ranges[meta namespace]
+* subrange[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr bool empty() const;
+```
+
+## 概要
+`subrange`が空かどうかを判定する。
+
+## 効果
+`return begin_­ == end_­;`
+
+ただし、`begin_`、`end_`は`subrange`が内部で保持するイテレータと番兵。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  constexpr int a[] = {1, 2, 3};
+  const std::ranges::subrange sub1(a);
+  const std::ranges::subrange sub2(a, a);
+
+  std::cout &amp;lt;&amp;lt; sub1.empty() &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; sub2.empty() &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+
+### 出力
+```
+0
+1
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>enable_borrowed_range -- subrangeのメンバの説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/enable_borrowed_range.html"/>
      <id>fa338b14ab2b138d26ea3735e0fdf4eefe9b018d:reference/ranges/subrange/enable_borrowed_range.md</id>
      <updated>2022-03-23T12:53:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/enable_borrowed_range.md b/reference/ranges/subrange/enable_borrowed_range.md
new file mode 100644
index 000000000..da49a2462
--- /dev/null
+++ b/reference/ranges/subrange/enable_borrowed_range.md
@@ -0,0 +1,49 @@
+# enable_borrowed_range
+* ranges[meta header]
+* std::ranges[meta namespace]
+* variable[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class I, class S, subrange_kind K&amp;gt;
+  inline constexpr bool enable_borrowed_range&amp;lt;subrange&amp;lt;I, S, K&amp;gt;&amp;gt; = true;
+}
+```
+
+## 概要
+
+[`enable_borrowed_range`](../enable_borrowed_range.md)の特殊化。
+
+この特殊化により、`subrange`が[`borrowed_range`](borrowed_range.md)となる。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+
+int main()
+{
+  constexpr int a[] = {1, 2};
+  const std::ranges::subrange sub(a);
+  static_assert(std::ranges::borrowed_range&amp;lt;decltype(sub)&amp;gt;);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- subrangeのメンバの説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/end.html"/>
      <id>fa338b14ab2b138d26ea3735e0fdf4eefe9b018d:reference/ranges/subrange/end.md</id>
      <updated>2022-03-23T12:53:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/end.md b/reference/ranges/subrange/end.md
new file mode 100644
index 000000000..db9e31ada
--- /dev/null
+++ b/reference/ranges/subrange/end.md
@@ -0,0 +1,55 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* subrange[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr S end() const;
+```
+
+## 概要
+末尾の次を指すイテレータを取得する。
+
+## 効果
+`return end_;`
+
+ただし、`end_`は`subrange`が内部で保持する番兵。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  constexpr int a[] = {1, 2, 3};
+  const std::ranges::subrange sub(a);
+  // .begin と .end を暗黙的に使用
+  for (int x : sub) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  }
+}
+```
+
+### 出力
+```
+1
+2
+3
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>next -- subrangeのメンバの説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/next.html"/>
      <id>fa338b14ab2b138d26ea3735e0fdf4eefe9b018d:reference/ranges/subrange/next.md</id>
      <updated>2022-03-23T12:53:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/next.md b/reference/ranges/subrange/next.md
new file mode 100644
index 000000000..9091900f5
--- /dev/null
+++ b/reference/ranges/subrange/next.md
@@ -0,0 +1,86 @@
+# next
+* ranges[meta header]
+* std::ranges[meta namespace]
+* subrange[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+// (1)
+[[nodiscard]] constexpr subrange next(iter_difference_t&amp;lt;I&amp;gt; n = 1) const &amp;amp;
+  requires forward_iterator&amp;lt;I&amp;gt;;
+
+// (2)
+[[nodiscard]] constexpr subrange next(iter_difference_t&amp;lt;I&amp;gt; n = 1) &amp;amp;&amp;amp;;
+```
+* nodiscard[link /lang/cpp17/nodiscard.md]
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
+* forward_iterator[link /reference/iterator/forward_iterator.md]
+* subrange[link ../subrange.md]
+
+## 概要
+先頭を前進させた`subrange`を得る。
+
+## 効果
+
+### (1)
+
+```cpp
+auto tmp = *this;
+tmp.advance(n);
+return tmp;
+```
+* advance[link advance.md]
+
+### (2)
+
+```cpp
+advance(n);
+return std::move(*this);
+```
+* advance[link advance.md]
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+template&amp;lt;std::ranges::range R&amp;gt;
+void print(const R&amp;amp; r) {
+  for (int x : r) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#39;,&amp;#39;;
+  }
+  std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+
+int main()
+{
+  constexpr int a[] = {1, 2, 3, 4, 5};
+  std::ranges::subrange sub(a + 1, a + 4);
+
+  print(sub);
+  print(sub.next());
+  print(sub.next().next());
+}
+```
+
+### 出力
+```
+2,3,4,
+3,4,
+4,
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- subrangeのメンバの説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/op_constructor.html"/>
      <id>fa338b14ab2b138d26ea3735e0fdf4eefe9b018d:reference/ranges/subrange/op_constructor.md</id>
      <updated>2022-03-23T12:53:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/op_constructor.md b/reference/ranges/subrange/op_constructor.md
new file mode 100644
index 000000000..6bfb80baa
--- /dev/null
+++ b/reference/ranges/subrange/op_constructor.md
@@ -0,0 +1,127 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* subrange[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+// (1)
+subrange() = default;
+
+// (2)
+constexpr subrange(convertible-to-non-slicing&amp;lt;I&amp;gt; auto i, S s) requires (!StoreSize);
+
+// (3)
+constexpr subrange(convertible-to-non-slicing&amp;lt;I&amp;gt; auto i, S s, make-unsigned-like-t&amp;lt;iter_difference_t&amp;lt;I&amp;gt;&amp;gt; n)
+  requires (K == subrange_kind::sized);
+
+// (4)
+template&amp;lt;not-same-as&amp;lt;subrange&amp;gt; R&amp;gt;
+  requires borrowed_range&amp;lt;R&amp;gt; &amp;amp;&amp;amp; convertible-to-non-slicing&amp;lt;iterator_t&amp;lt;R&amp;gt;, I&amp;gt; &amp;amp;&amp;amp; convertible_to&amp;lt;sentinel_t&amp;lt;R&amp;gt;, S&amp;gt;
+constexpr subrange(R&amp;amp;&amp;amp; r) requires (!StoreSize || sized_range&amp;lt;R&amp;gt;);
+
+// (5)
+template&amp;lt;borrowed_range R&amp;gt;
+  requires convertible-to-non-slicing&amp;lt;iterator_t&amp;lt;R&amp;gt;, I&amp;gt; &amp;amp;&amp;amp; convertible_to&amp;lt;sentinel_t&amp;lt;R&amp;gt;, S&amp;gt;
+constexpr subrange(R&amp;amp;&amp;amp; r, make-unsigned-like-t&amp;lt;iter_difference_t&amp;lt;I&amp;gt;&amp;gt; n)
+  requires (K == subrange_kind::sized) : subrange{ranges::begin(r), ranges::end(r), n} {}
+```
+* subrange_kind[link /reference/ranges/subrange_kind.md]
+* borrowed_range[link /reference/ranges/borrowed_range.md]
+* sized_range[link /reference/ranges/sized_range.md]
+* convertible_to[link /reference/concepts/convertible_to.md]
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
+* StoreSize[italic]
+* not-same-as[italic][link ../subrange.md]
+* convertible-to-non-slicing[italic][link ../subrange.md]
+* make-unsigned-like-t[italic][link /reference/type_traits/make_unsigned.md]
+
+## 概要
+- (1) : 空の`subrange`を構築する(デフォルトコンストラクタ)
+- (2) : イテレータ`i`と番兵`s`が表す範囲`[i, s)`で初期化する
+- (3) : イテレータ`i`と番兵`s`が表す範囲`[i, s)`で初期化し、`subrange`の長さを`n`にする
+- (4) : 範囲 `r` で初期化する
+- (5) : 範囲 `r` で初期化し、`subrange`の長さを`n`にする ((3)へ委譲)
+
+## テンプレートパラメータ制約
+
+`StoreSize`は次のように定義される説明専用メンバである。
+
+```cpp
+static constexpr bool StoreSize = (K == subrange_kind::sized &amp;amp;&amp;amp; !sized_sentinel_for&amp;lt;S, I&amp;gt;);
+```
+* sized_sentinel_for[link /reference/iterator/sized_sentinel_for.md]
+* StoreSize[italic]
+
+`StoreSize`は、元のRangeから長さを求められないが、長さを別に指定することで`subrange`を[`sized_range`](/reference/ranges/sized_range.md)にした場合に真となる。
+
+- (1): `I`はデフォルト構築可能であること
+- (2), (4): `subrange`が`sized`ではない。または、元のRangeから長さを求められる
+- (3), (5): `subrange`が`sized`であり、元のRangeから長さを求められない
+- (4): 範囲は構築する`subrange`と同じ型ではない (つまり、(4)はムーブコンストラクタではない)
+
+## 事前条件
+
+- (2): `[i, s)`は有効な範囲であること
+- (3): `[i, s)`は有効な範囲であり、`n`はその範囲の長さ([`ranges​::​distance](/reference/iterator/ranges_distance.md)`(i, s)`)と等しいこと
+- (4): `r`は有効な範囲であること
+- (5): `r`は有効な範囲であり、`n`はその範囲の長さと等しいこと
+
+## 効果
+`subrange`が内部で保持するイテレータと番兵を与えられた範囲で初期化する。
+さらに、`StoreSize`が真のときは大きさを与えられた値で初期化する。
+
+## 備考
+
+`subrange`はコピー、ムーブ可能である。また、テンプレート引数が異なる`subrange`はからは、(4)によって構築できる。
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;forward_list&amp;gt;
+#include &amp;lt;array&amp;gt;
+
+int main()
+{
+  constexpr std::ranges::subrange&amp;lt;int*, int*, std::ranges::subrange_kind::sized&amp;gt; sub1;
+  static_assert(sub1.empty());
+
+  constexpr std::array arr= {1, 2, 3};
+  const std::ranges::subrange sub2(arr.begin(), arr.begin() + 1);
+  assert(sub2.size() == 1);
+
+  const std::forward_list fwl = {1, 2, 3};
+  const std::ranges::subrange sub3(fwl.begin(), ++fwl.begin(), 1);
+  // forward_listはsized_rangeではないが、長さを指定しているのでsubrangeはsized_rangeとなり、sizeメンバ関数が定義される
+  static_assert(std::ranges::sized_range&amp;lt;decltype(sub3)&amp;gt;);
+  assert(sub3.size() == 1);
+
+  const std::ranges::subrange sub4 = arr;
+  assert(sub4.size() == 3);
+
+  const std::ranges::subrange sub5(fwl, 3);
+  // forward_listはsized_rangeではないが、長さを指定しているのでsubrangeはsized_rangeとなり、sizeメンバ関数が定義される
+  static_assert(std::ranges::sized_range&amp;lt;decltype(sub5)&amp;gt;);
+  assert(sub4.size() == 3);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- subrangeのメンバの説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/op_deduction_guide.html"/>
      <id>fa338b14ab2b138d26ea3735e0fdf4eefe9b018d:reference/ranges/subrange/op_deduction_guide.md</id>
      <updated>2022-03-23T12:53:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/op_deduction_guide.md b/reference/ranges/subrange/op_deduction_guide.md
new file mode 100644
index 000000000..c82291b2c
--- /dev/null
+++ b/reference/ranges/subrange/op_deduction_guide.md
@@ -0,0 +1,78 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;input_or_output_iterator I, sentinel_for&amp;lt;I&amp;gt; S&amp;gt;
+  subrange(I, S) -&amp;gt; subrange&amp;lt;I, S&amp;gt;;
+
+  template&amp;lt;input_or_output_iterator I, sentinel_for&amp;lt;I&amp;gt; S&amp;gt;
+  subrange(I, S, make-unsigned-like-t&amp;lt;iter_difference_t&amp;lt;I&amp;gt;&amp;gt;) -&amp;gt;
+    subrange&amp;lt;I, S, subrange_kind::sized&amp;gt;;
+
+  template&amp;lt;borrowed_range R&amp;gt;
+  subrange(R&amp;amp;&amp;amp;) -&amp;gt;
+    subrange&amp;lt;iterator_t&amp;lt;R&amp;gt;, sentinel_t&amp;lt;R&amp;gt;, (sized_range&amp;lt;R&amp;gt; || sized_sentinel_for&amp;lt;sentinel_t&amp;lt;R&amp;gt;, iterator_t&amp;lt;R&amp;gt;&amp;gt;) ? subrange_kind::sized : subrange_kind::unsized&amp;gt;;
+
+  template&amp;lt;borrowed_range R&amp;gt;
+  subrange(R&amp;amp;&amp;amp;, make-unsigned-like-t&amp;lt;range_difference_t&amp;lt;R&amp;gt;&amp;gt;) -&amp;gt;
+    subrange&amp;lt;iterator_t&amp;lt;R&amp;gt;, sentinel_t&amp;lt;R&amp;gt;, subrange_kind::sized&amp;gt;;
+}
+```
+* subrange_kind[link /reference/ranges/subrange_kind.md]
+* input_or_output_iterator[link /reference/iterator/input_or_output_iterator.md]
+* borrowed_range[link /reference/ranges/borrowed_range.md]
+* sized_range[link /reference/ranges/sized_range.md]
+* convertible_to[link /reference/concepts/convertible_to.md]
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
+* sized_sentinel_for[link /reference/iterator/sized_sentinel_for.md]
+* tuple_element_t[link /reference/tuple/tuple_element.md]
+* StoreSize[italic][link op_constructor.md]
+* iterator-sentinel-pair[italic][link ../subrange.md]
+* not-same-as[italic][link ../subrange.md]
+* convertible-to-non-slicing[italic][link ../subrange.md]
+* make-unsigned-like-t[italic][link /reference/type_traits/make_unsigned.md]
+
+## 概要
+[`subrange`](../subrange.md)クラステンプレートの型推論補助。
+
+
+## 例
+```cpp example
+#include &amp;lt;utility&amp;gt;
+#include &amp;lt;type_traits&amp;gt;
+
+int main()
+{
+  std::pair p {3, &amp;#34;Hello&amp;#34;};
+  static_assert(std::is_same_v&amp;lt;
+    decltype(p),
+    std::pair&amp;lt;int, const char*&amp;gt;
+  &amp;gt;);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 関連項目
+- [C++17 クラステンプレートのテンプレート引数推論](/lang/cpp17/type_deduction_for_class_templates.md)
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator PairLike -- subrangeのメンバの説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/op_pairlike.html"/>
      <id>fa338b14ab2b138d26ea3735e0fdf4eefe9b018d:reference/ranges/subrange/op_pairlike.md</id>
      <updated>2022-03-23T12:53:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/op_pairlike.md b/reference/ranges/subrange/op_pairlike.md
new file mode 100644
index 000000000..1e2d68483
--- /dev/null
+++ b/reference/ranges/subrange/op_pairlike.md
@@ -0,0 +1,57 @@
+# operator PairLike
+* ranges[meta header]
+* std::ranges[meta namespace]
+* subrange[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+template&amp;lt;not-same-as&amp;lt;subrange&amp;gt; PairLike&amp;gt;
+  requires pair-like-convertible-from&amp;lt;PairLike, const I&amp;amp;, const S&amp;amp;&amp;gt;
+constexpr operator PairLike() const;
+```
+* not-same-as[italic][link /reference/concepts/same_as.md]
+* pair-like-convertible-from[italic][link ../subrange.md]
+
+## 概要
+pair-like (大きさ2のtuple-like) な型への変換演算子。
+
+## 効果
+```cpp
+return PairLike(begin_, end_);
+```
+
+ただし、`begin_`、`end_`は`subrange`が内部で保持するイテレータと番兵。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;cassert&amp;gt;
+
+int main()
+{
+  constexpr int a[] = {1, 2};
+  const std::ranges::subrange sub(a);
+  const std::pair&amp;lt;const int*, const int*&amp;gt; p = sub;
+  assert(p.first == a);
+  assert(p.second == a + 2);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>next -- subrangeのメンバの説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/prev.html"/>
      <id>fa338b14ab2b138d26ea3735e0fdf4eefe9b018d:reference/ranges/subrange/prev.md</id>
      <updated>2022-03-23T12:53:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/prev.md b/reference/ranges/subrange/prev.md
new file mode 100644
index 000000000..af6863d2d
--- /dev/null
+++ b/reference/ranges/subrange/prev.md
@@ -0,0 +1,72 @@
+# next
+* ranges[meta header]
+* std::ranges[meta namespace]
+* subrange[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+[[nodiscard]] constexpr subrange prev(iter_difference_t&amp;lt;I&amp;gt; n = 1) const
+  requires bidirectional_iterator&amp;lt;I&amp;gt;;
+```
+* nodiscard[link /lang/cpp17/nodiscard.md]
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
+* bidirectional_iterator[link /reference/iterator/bidirectional_iterator.md]
+* subrange[link ../subrange.md]
+
+## 概要
+先頭を後退させた`subrange`を得る。
+
+## 効果
+
+```cpp
+auto tmp = *this;
+tmp.advance(-n);
+return tmp;
+```
+* advance[link advance.md]
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+template&amp;lt;std::ranges::range R&amp;gt;
+void print(const R&amp;amp; r) {
+  for (int x : r) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#39;,&amp;#39;;
+  }
+  std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+
+int main()
+{
+  constexpr int a[] = {1, 2, 3, 4, 5};
+  std::ranges::subrange sub(a + 3, a + 4);
+
+  print(sub);
+  print(sub.prev());
+  print(sub.prev().prev());
+}
+```
+
+### 出力
+```
+4,
+3,4,
+2,3,4,
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- subrangeのメンバの説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/size.html"/>
      <id>fa338b14ab2b138d26ea3735e0fdf4eefe9b018d:reference/ranges/subrange/size.md</id>
      <updated>2022-03-23T12:53:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/size.md b/reference/ranges/subrange/size.md
new file mode 100644
index 000000000..ab34c77a0
--- /dev/null
+++ b/reference/ranges/subrange/size.md
@@ -0,0 +1,60 @@
+# size
+* ranges[meta header]
+* std::ranges[meta namespace]
+* subrange[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr make-unsigned-like-t&amp;lt;iter_difference_t&amp;lt;I&amp;gt;&amp;gt; size() const
+  requires (K == subrange_kind::sized);
+```
+* make-unsigned-like-t[italic][link /reference/type_traits/make_unsigned.md]
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
+* subrange_kind[link /reference/ranges/subrange_kind.md]
+
+## 概要
+`subrange`の大きさを取得する。
+
+この関数は、`subrange`が`sized`のときのみオーバーロード解決に参加する。
+
+## 効果
+
+- [`StoreSize`](op_constructor.md)が真のとき、 `return size_­;`
+- それ以外のとき、`return `[`to-unsigned-like`](/reference/type_traits/make_unsigned.md)`(end_­ - begin_­);`
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  constexpr int a[] = {1, 2, 3};
+  const std::ranges::subrange sub1(a);
+  const std::ranges::subrange sub2(a, a);
+
+  std::cout &amp;lt;&amp;lt; sub1.size() &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; sub2.size() &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+
+### 出力
+```
+3
+0
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>subrange -- subrangeのタプルインターフェースを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange.html"/>
      <id>7693b0a5d8d56f0bd70c06c929c77640e9cfbd36:reference/ranges/subrange.md</id>
      <updated>2022-03-23T06:14:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange.md b/reference/ranges/subrange.md
index 792465f60..be9454c98 100644
--- a/reference/ranges/subrange.md
+++ b/reference/ranges/subrange.md
@@ -65,9 +65,9 @@ namespace std::ranges {
 
 | 名前                                         | 説明                               | 対応バージョン |
 |----------------------------------------------|------------------------------------|----------------|
-| [`tuple_size`](subrange/tuple_size.md.nolink)       | 静的な要素数取得(class template)   | C++20          |
-| [`tuple_element`](subrange/tuple_element.md.nolink) | 静的な要素の型取得(class template) | C++20          |
-| [`get`](subrange/get.md.nolink)                     | 要素を取得する(function template)  | C++20          |
+| [`tuple_size`](subrange/tuple_size.md)       | 静的な要素数取得(class template)   | C++20          |
+| [`tuple_element`](subrange/tuple_element.md) | 静的な要素の型取得(class template) | C++20          |
+| [`get`](subrange/get.md)                     | 要素を取得する(function template)  | C++20          |
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get -- subrangeのタプルインターフェースを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/get.html"/>
      <id>7693b0a5d8d56f0bd70c06c929c77640e9cfbd36:reference/ranges/subrange/get.md</id>
      <updated>2022-03-23T06:14:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/get.md b/reference/ranges/subrange/get.md
new file mode 100644
index 000000000..588e78d39
--- /dev/null
+++ b/reference/ranges/subrange/get.md
@@ -0,0 +1,76 @@
+# get
+* ranges[meta header]
+* std[meta namespace]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;size_t N, class I, class S, subrange_kind K&amp;gt;
+    requires (N &amp;lt; 2)
+  constexpr auto get(const subrange&amp;lt;I, S, K&amp;gt;&amp;amp; r);
+
+  template&amp;lt;size_t N, class I, class S, subrange_kind K&amp;gt;
+    requires (N &amp;lt; 2)
+  constexpr auto get(subrange&amp;lt;I, S, K&amp;gt;&amp;amp;&amp;amp; r);
+}
+
+namespace std {
+  using ranges::get;
+}
+```
+* subrange[link ../subrange.md]
+* subrange_kind[link ../subrange_kind.md]
+
+## 概要
+タプルと見なせる型から指定した位置の要素を取得する。
+
+`&amp;lt;ranges&amp;gt;`ヘッダでは、[`subrange`](/reference/ranges/subrange.md)に関する特殊化を定義する。
+
+[`subrange`](/reference/ranges/subrange.md)をタプルとして見たとき、大きさ2で、第0要素はイテレータ、第1要素は番兵である。
+
+## 効果
+
+```cpp
+if constexpr (N == 0)
+  return r.begin();
+else
+  return r.end();
+```
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+
+int main()
+{
+  constexpr std::ranges::subrange sub = std::views::empty&amp;lt;int&amp;gt;;
+  static_assert(std::get&amp;lt;0&amp;gt;(sub) == sub.begin());
+  static_assert(std::get&amp;lt;1&amp;gt;(sub) == sub.end());
+}
+```
+* std::ranges::subrange[link /reference/ranges/subrange.md]
+* std::views::empty[link /reference/ranges/empty_view.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tuple_element -- subrangeのタプルインターフェースを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/tuple_element.html"/>
      <id>7693b0a5d8d56f0bd70c06c929c77640e9cfbd36:reference/ranges/subrange/tuple_element.md</id>
      <updated>2022-03-23T06:14:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/tuple_element.md b/reference/ranges/subrange/tuple_element.md
new file mode 100644
index 000000000..d0972a9a8
--- /dev/null
+++ b/reference/ranges/subrange/tuple_element.md
@@ -0,0 +1,76 @@
+# tuple_element
+* ranges[meta header]
+* std[meta namespace]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class I, class S, ranges::subrange_kind K&amp;gt;
+  struct tuple_element&amp;lt;0, ranges::subrange&amp;lt;I, S, K&amp;gt;&amp;gt; {
+    using type = I;
+  };
+
+  template&amp;lt;class I, class S, ranges::subrange_kind K&amp;gt;
+  struct tuple_element&amp;lt;0, const ranges::subrange&amp;lt;I, S, K&amp;gt;&amp;gt; {
+    using type = I;
+  };
+
+  template&amp;lt;class I, class S, ranges::subrange_kind K&amp;gt;
+  struct tuple_element&amp;lt;1, ranges::subrange&amp;lt;I, S, K&amp;gt;&amp;gt; {
+    using type = S;
+  };
+
+  template&amp;lt;class I, class S, ranges::subrange_kind K&amp;gt;
+  struct tuple_element&amp;lt;1, const ranges::subrange&amp;lt;I, S, K&amp;gt;&amp;gt; {
+    using type = S;
+  };
+}
+```
+* ranges::subrange[link ../subrange.md]
+* ranges::subrange_kind[link ../subrange_kind.md]
+
+
+## 概要
+`tuple_element`は、タプルとして見なせる型から、`I`番目の要素型を取得するためのクラスである。
+
+`&amp;lt;ranges&amp;gt;`ヘッダでは、[`subrange`](/reference/ranges/subrange.md)に関する特殊化を定義する。
+
+[`subrange`](/reference/ranges/subrange.md)をタプルとして見たとき、大きさ2で、第0要素はイテレータ、第1要素は番兵である。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+
+int main()
+{
+  constexpr std::ranges::subrange sub = std::views::empty&amp;lt;int&amp;gt;;
+  static_assert(std::same_as&amp;lt;std::tuple_element_t&amp;lt;0, decltype(sub)&amp;gt;, std::ranges::iterator_t&amp;lt;decltype(sub)&amp;gt;&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::tuple_element_t&amp;lt;1, decltype(sub)&amp;gt;, std::ranges::sentinel_t&amp;lt;decltype(sub)&amp;gt;&amp;gt;);
+}
+```
+* std::tuple_element_t[link /reference/tuple/tuple_element.md]
+* std::ranges::subrange[link /reference/ranges/subrange.md]
+* std::same_as[link /reference/ranges/subrange.md]
+* std::ranges::iterator_t[link /reference/ranges/iterator_t.md]
+* std::ranges::sentinel_t[link /reference/ranges/sentinel_t.md]
+* std::views::empty[link /reference/ranges/empty_view.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tuple_size -- subrangeのタプルインターフェースを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/tuple_size.html"/>
      <id>7693b0a5d8d56f0bd70c06c929c77640e9cfbd36:reference/ranges/subrange/tuple_size.md</id>
      <updated>2022-03-23T06:14:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/tuple_size.md b/reference/ranges/subrange/tuple_size.md
new file mode 100644
index 000000000..7c05842a3
--- /dev/null
+++ b/reference/ranges/subrange/tuple_size.md
@@ -0,0 +1,54 @@
+# tuple_size
+* ranges[meta header]
+* std[meta namespace]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class I, class S, ranges::subrange_kind K&amp;gt;
+  struct tuple_size&amp;lt;ranges::subrange&amp;lt;I, S, K&amp;gt;&amp;gt; : integral_constant&amp;lt;size_t, 2&amp;gt; {};
+}
+```
+* integral_constant[link /reference/type_traits/integral_constant.md]
+
+## 概要
+`tuple_size`は、タプルとして見なせる型の要素数を取得するためのクラスである。
+
+要素数は、[`integral_constant`](/reference/type_traits/integral_constant.md)の機能を利用してコンパイル時の定数値として取得できる。
+
+`&amp;lt;ranges&amp;gt;`ヘッダでは、[`subrange`](/reference/ranges/subrange.md)に関する特殊化を定義する。
+
+[`subrange`](/reference/ranges/subrange.md)をタプルとして見たとき、大きさ2で、第0要素はイテレータ、第1要素は番兵である。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+
+int main()
+{
+  constexpr std::ranges::subrange sub = std::views::empty&amp;lt;int&amp;gt;;
+  static_assert(std::tuple_size&amp;lt;decltype(sub)&amp;gt;::value == 2);
+}
+```
+* std::tuple_size[color ff0000]
+* std::ranges::subrange[link /reference/ranges/subrange.md]
+* std::views::empty[link /reference/ranges/empty_view.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iota -- C++バージョンを修正</title>
      <link href="https://cpprefjp.github.io/reference/numeric/ranges_iota.html"/>
      <id>9a3b8540a502b01d7439d2d2aa9d1cc4f3349d73:reference/numeric/ranges_iota.md</id>
      <updated>2022-03-23T05:07:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/ranges_iota.md b/reference/numeric/ranges_iota.md
index f84d1aa58..fb394b4c7 100644
--- a/reference/numeric/ranges_iota.md
+++ b/reference/numeric/ranges_iota.md
@@ -2,7 +2,7 @@
 * numeric[meta header]
 * std::ranges[meta namespace]
 * function template[meta id-type]
-* cpp13[meta cpp]
+* cpp23[meta cpp]
 
 ```cpp
 namespace std::ranges {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iota -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/numeric/ranges_iota.html"/>
      <id>0081fc999ce54fd1740f72b6869cc087def42507:reference/numeric/ranges_iota.md</id>
      <updated>2022-03-23T04:57:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/ranges_iota.md b/reference/numeric/ranges_iota.md
index 56ff2ded5..f84d1aa58 100644
--- a/reference/numeric/ranges_iota.md
+++ b/reference/numeric/ranges_iota.md
@@ -22,7 +22,7 @@ namespace std::ranges {
 * indirectly_writable[link /reference/iterator/indirectly_writable.md]
 * output_range[link /reference/ranges/output_range.md]
 * borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
-* iota_result[link /reference/algorithm/out_value_result.md]
+* iota_result[link /reference/algorithm/ranges_out_value_result.md]
 
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
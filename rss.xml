<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-05-03T14:42:39.675590</updated>
  <id>afb17881-8c21-49d6-b9c9-89bdabde49e7</id>

  
    <entry>
      <title>tolower -- fix: Added proper info for tolower and toupper</title>
      <link href="https://cpprefjp.github.io/reference/cctype/tolower.html"/>
      <id>46a42fed15df3f18863d3cbd30e28792dc48b98e:reference/cctype/tolower.md</id>
      <updated>2025-05-03T12:05:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cctype/tolower.md b/reference/cctype/tolower.md
index 88da612c6..b87aa22a5 100644
--- a/reference/cctype/tolower.md
+++ b/reference/cctype/tolower.md
@@ -43,7 +43,7 @@ tolower(&amp;#39;.&amp;#39;) = .
 tolower(&amp;#39;$&amp;#39;) = $
 ```
 
-## 実装例
+## 実装例(ASCII互換文字コードの場合)
 ```cpp
 int tolower(int ch) {
   if (isupper(ch)) {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>toupper -- fix: Added proper info for tolower and toupper</title>
      <link href="https://cpprefjp.github.io/reference/cctype/toupper.html"/>
      <id>46a42fed15df3f18863d3cbd30e28792dc48b98e:reference/cctype/toupper.md</id>
      <updated>2025-05-03T12:05:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cctype/toupper.md b/reference/cctype/toupper.md
index ca21a5652..c2a7f23a5 100644
--- a/reference/cctype/toupper.md
+++ b/reference/cctype/toupper.md
@@ -43,7 +43,7 @@ toupper(&amp;#39;.&amp;#39;) = .
 toupper(&amp;#39;$&amp;#39;) = $
 ```
 
-## 実装例
+## 実装例(ASCII互換文字コードの場合)
 ```cpp
 int toupper(int ch) {
   if (islower(ch)) {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>isupper -- fix: Added information for isupper</title>
      <link href="https://cpprefjp.github.io/reference/cctype/isupper.html"/>
      <id>a094fcee1a4b4c49184fdd7cf9efcb843d384676:reference/cctype/isupper.md</id>
      <updated>2025-05-03T12:05:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cctype/isupper.md b/reference/cctype/isupper.md
index 340872faf..54f360713 100644
--- a/reference/cctype/isupper.md
+++ b/reference/cctype/isupper.md
@@ -51,7 +51,7 @@ isupper(&amp;#39;\n&amp;#39;) = 0
 isupper(&amp;#39;0x0f&amp;#39;) = 0
 ```
 
-## 実装例
+## 実装例(ASCII互換文字コードの場合)
 ```cpp
 int isupper(int ch) {
   return ch &amp;gt;= &amp;#39;A&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;Z&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>isspace -- Revert &#34;reference/cctype/isspace.md: Created sample implementation&#34;</title>
      <link href="https://cpprefjp.github.io/reference/cctype/isspace.html"/>
      <id>2750049cc5adfcd9b6a3daa17c1860409ea62b8e:reference/cctype/isspace.md</id>
      <updated>2025-05-03T12:01:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cctype/isspace.md b/reference/cctype/isspace.md
index 26a1e8f7f..087dd8fc2 100644
--- a/reference/cctype/isspace.md
+++ b/reference/cctype/isspace.md
@@ -50,12 +50,3 @@ isspace(&amp;#39; &amp;#39;) = 8192
 isspace(&amp;#39;\n&amp;#39;) = 8192
 isspace(&amp;#39;0x0f&amp;#39;) = 0
 ```
-
-## 実装例
-```cpp
-int isspace(int ch) {
-  return ch == &amp;#39; &amp;#39; || ch == &amp;#39;\t&amp;#39; || ch == &amp;#39;\r&amp;#39; || ch == &amp;#39;\n&amp;#39; || ch == &amp;#39;\v&amp;#39; || ch == &amp;#39;\f&amp;#39;;
-}
-```
-
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>islower -- fix: Fixed wrong implementation code for islower()</title>
      <link href="https://cpprefjp.github.io/reference/cctype/islower.html"/>
      <id>4097b491d2a847e31bf7a639021608b4e7566c90:reference/cctype/islower.md</id>
      <updated>2025-05-03T11:56:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cctype/islower.md b/reference/cctype/islower.md
index fc0bc9911..8b59a8831 100644
--- a/reference/cctype/islower.md
+++ b/reference/cctype/islower.md
@@ -51,7 +51,7 @@ islower(&amp;#39;\n&amp;#39;) = 0
 islower(&amp;#39;0x0f&amp;#39;) = 0
 ```
 
-## 実装例
+## 実装例(ASCII互換文字コードの場合)
 ```cpp
 int islower(int ch) {
   return ch &amp;gt;= &amp;#39;a&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;z&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>属性の無視性を見直し [P2552R3] -- C++26 属性の無視性を見直し : オブジェクトサイズの説明を修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp26/on_the_ignorability_of_standard_attributes.html"/>
      <id>e5b2c4ff4326727d93793b102a4d229f96955b35:lang/cpp26/on_the_ignorability_of_standard_attributes.md</id>
      <updated>2025-05-02T22:41:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp26/on_the_ignorability_of_standard_attributes.md b/lang/cpp26/on_the_ignorability_of_standard_attributes.md
index a814c7c26..c522b04b7 100644
--- a/lang/cpp26/on_the_ignorability_of_standard_attributes.md
+++ b/lang/cpp26/on_the_ignorability_of_standard_attributes.md
@@ -42,7 +42,7 @@ int h();
 ### 2. 意味論的な無視性
 適格なプログラムが与えられた際、特定の標準属性のインスタンスをすべて削除し、プログラムの観測可能な振る舞いを変化させることが実装に許可される。ただし、削除後の動作が削除前のプログラムにとって適合動作 (conforming behaviour) である場合に限られる。
 
-例として、空のオブジェクトのサイズを削減する[`[[no_unique_address]]`](/lang/cpp20/language_support_for_empty_objects.md)において、`sizeof(Y)`は[`[[no_unique_address]]`](/lang/cpp20/language_support_for_empty_objects.md)属性が無視されなければ`sizeof(int)`と同値となり、無視されれば`sizeof(X) + sizeof(int)`となる。
+例として、空のオブジェクトのサイズを削減する[`[[no_unique_address]]`](/lang/cpp20/language_support_for_empty_objects.md)において、`sizeof(Y)`は[`[[no_unique_address]]`](/lang/cpp20/language_support_for_empty_objects.md)属性が無視されなければ`sizeof(int)`と同値となり、無視されれば`sizeof(X) + sizeof(int)`以上の値となる。
 
 ```cpp
 struct X {};
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
</feed>
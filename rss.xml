<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-08-17T04:30:34.182608</updated>
  <id>c38175cf-fd93-4384-8df2-14a8ea1a7009</id>

  
    <entry>
      <title>permissions -- filesystem::permissions : fchmodatの参照ページを変更</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/permissions.html"/>
      <id>656fc53b64cad065efef0f085094510e22d1a663:reference/filesystem/permissions.md</id>
      <updated>2021-08-10T11:28:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/permissions.md b/reference/filesystem/permissions.md
index 0a4c58113..e691e841f 100644
--- a/reference/filesystem/permissions.md
+++ b/reference/filesystem/permissions.md
@@ -20,7 +20,7 @@ namespace std::filesystem {
 
 
 ## 効果
-- POSIX環境では、[`fchmodat()`](http://surf.ml.seikei.ac.jp/~nakano/JMwww/html/LDP_man-pages/man2/fchmodat.2.html)関数を使用して、パス`to`のファイルに対する権限を設定する
+- POSIX環境では、[`fchmodat()`](http://ja.manpages.org/fchmodat/2)関数を使用して、パス`to`のファイルに対する権限を設定する
 - (2) は、権限オプションとして[`perm_options::replace`](perm_options.md)が使用される
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>範囲for文がカスタマイゼーションポイントを見つけるルールを緩和 -- Update relaxing_the_range_for_loop_customization_point_finding_rules.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.html"/>
      <id>9a3814da7371a4b88253daddcb671ca85fabc04a:lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md</id>
      <updated>2021-08-05T18:07:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md b/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md
index 7664c767d..a70582faf 100644
--- a/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md
+++ b/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md
@@ -35,9 +35,9 @@ int main()
 {
   X x{&amp;#34;Hello&amp;#34;};
 
-  // C++17まではコンパイルエラー
+  // P0962R1非対応の場合はコンパイルエラー
   // (std::stringstream::endメンバだけが見つかり、対応するbeginがないというエラーになる)。
-  // C++20ではOK
+  // P0962R1に対応していればOK
   for (char c : x) {
     std::cout &amp;lt;&amp;lt; c &amp;lt;&amp;lt; std::endl;
   }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>範囲for文 -- DR P0962R1対応</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/range_based_for.html"/>
      <id>e2e5f5ea50abfb9e2619aec28d39daf24924e7dc:lang/cpp11/range_based_for.md</id>
      <updated>2021-08-05T04:13:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/range_based_for.md b/lang/cpp11/range_based_for.md
index 3b430a119..3ae95f0cc 100644
--- a/lang/cpp11/range_based_for.md
+++ b/lang/cpp11/range_based_for.md
@@ -107,7 +107,7 @@ begin-exprとend-exprの具体的な内容は、範囲として何を渡すか
 
 * ただし、`__bound`は配列の要素数(要素数が不明な場合はill-formed)。
 
-範囲の型がクラスであって、メンバ`begin`**または**`end`が存在するとき、以下のように展開される：
+範囲の型がクラスであって、メンバ`begin`と`end`が両方存在するとき、以下のように展開される：
 
 ```cpp
 {
@@ -124,7 +124,8 @@ begin-exprとend-exprの具体的な内容は、範囲として何を渡すか
 * for-range-declaration[italic]
 * statement[italic]
 
-* メンバ`begin`、`end`が片方しかない場合や、関数ではない場合でもこのように展開されるが、当然エラーとなる。この問題は[C++20で部分的に緩和される](/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md)。
+* メンバ`begin`、`end`が関数ではない場合でもこのように展開されるが、呼び出しができなければエラーとなる。
+* 当初のC++11では、メンバ`begin`、`end`が片方しかなくてもこのように展開されていた。これは規格の不具合であり、[修正P0962R1がC++11に遡って適用された](/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md)。
 
 範囲の型が配列でもメンバ`begin`、`end`のいずれかを持つクラスでもないとき、以下のように展開される：
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>範囲for文がカスタマイゼーションポイントを見つけるルールを緩和 -- DR P0962R1対応</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.html"/>
      <id>e2e5f5ea50abfb9e2619aec28d39daf24924e7dc:lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md</id>
      <updated>2021-08-05T04:13:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md b/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md
index 4760fa6b3..7664c767d 100644
--- a/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md
+++ b/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.md
@@ -8,6 +8,8 @@ C++20ではこのルールを緩和し、`begin`/`end`メンバの両方があ
 
 これは、`begin`もしくは`end`という何らかのメンバ (関数、変数、型) が特殊な意味を持ち、そのメンバが範囲for文で使用することを意図していないような状況に対応するための改訂である。
 
+なお、この修正はC++11へ遡って適用された。そのため、この修正を実装した処理系では、以下のコンパイルエラーを試すことはできない。
+
 ## 例
 ```cpp example
 #include &amp;lt;sstream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2015-03-30T23:46:45.777716</updated>
  <id>1b519a5c-5459-492f-9b2b-9b080b5cc4a1</id>

  
    <entry>
      <title>operator== (C++11) -- コンテナの等値比較： C++14対応として、2つ目の範囲のendイテレータをとるequalアルゴリズムを使用するようにした。</title>
      <link href="http://cpprefjp.github.io/reference/array/op_equal.html"/>
      <id>7849cab279048ee701964059f1ca49b7e1b15af0:reference/array/op_equal.md</id>
      <updated>2015-03-30 19:18:58 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;array&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;operator== (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T, N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T, N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; y);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;array&lt;/code&gt;オブジェクトの等値比較を行う。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;が&lt;code&gt;operator==&lt;/code&gt;で等値比較可能であること。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11 : &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/array/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/array/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()) ==&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/array/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/array/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()) &amp;amp;&amp;amp;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/equal.html&#34;&gt;&lt;code&gt;equal&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/array/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/array/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/array/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;());&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++14 : &lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/equal.html&#34;&gt;&lt;code&gt;equal&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/array/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/array/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/array/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/array/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;());&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt;と&lt;code&gt;y&lt;/code&gt;の要素が全て等値であれば&lt;code&gt;true&lt;/code&gt;、そうでなければ&lt;code&gt;false&lt;/code&gt;を返す。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;線形時間&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;array&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&amp;gt;&lt;/span&gt; y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (x &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;&lt;/span&gt; y) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;equal&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;not equal&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;equal
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 9.0 (std::tr1), 10.0, 11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2257&#34; target=&#34;_blank&#34;&gt;LWG Issue 2257. Simplify container requirements with the new algorithms&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++14から、2つ目の範囲のendイテレータをとる&lt;code&gt;equal()&lt;/code&gt;アルゴリズムを使用するようになった。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- コンテナの等値比較： C++14対応として、2つ目の範囲のendイテレータをとるequalアルゴリズムを使用するようにした。</title>
      <link href="http://cpprefjp.github.io/reference/deque/op_equal.html"/>
      <id>7849cab279048ee701964059f1ca49b7e1b15af0:reference/deque/op_equal.md</id>
      <updated>2015-03-30 19:18:58 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;deque&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;operator==&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; y);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;deque&lt;/code&gt;オブジェクトの等値比較を行う。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;が&lt;code&gt;==&lt;/code&gt;で比較可能であること。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++03 : &lt;code&gt;x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;amp;&amp;amp;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/equal.html&#34;&gt;&lt;code&gt;equal&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;());&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++14 : &lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/equal.html&#34;&gt;&lt;code&gt;equal&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;());&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt;と&lt;code&gt;y&lt;/code&gt;の要素数および要素の値が等しければ&lt;code&gt;true&lt;/code&gt;、そうでなければ&lt;code&gt;false&lt;/code&gt;を返す。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;に対して線形時間&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;deque&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt; ()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 要素数と要素の値が等しい&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (c1 &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;&lt;/span&gt; c2) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 要素の値は(左辺の要素数分まで)等しいが要素数が異なる&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (c1 &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;&lt;/span&gt; c3) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;true
false
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2257&#34; target=&#34;_blank&#34;&gt;LWG Issue 2257. Simplify container requirements with the new algorithms&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++14から、2つ目の範囲のendイテレータをとる&lt;code&gt;equal()&lt;/code&gt;アルゴリズムを使用するようになった。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== (C++11) -- コンテナの等値比較： C++14対応として、2つ目の範囲のendイテレータをとるequalアルゴリズムを使用するようにした。</title>
      <link href="http://cpprefjp.github.io/reference/forward_list/op_equal.html"/>
      <id>7849cab279048ee701964059f1ca49b7e1b15af0:reference/forward_list/op_equal.md</id>
      <updated>2015-03-30 19:18:58 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;operator== (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; y);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;forward_list&lt;/code&gt;オブジェクトの等値比較を行う。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;が&lt;code&gt;==&lt;/code&gt;で比較可能であること。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11 : &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()) ==&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()) &amp;amp;&amp;amp;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/equal.html&#34;&gt;&lt;code&gt;equal&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;());&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++14 : &lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/equal.html&#34;&gt;&lt;code&gt;equal&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;());&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt;と&lt;code&gt;y&lt;/code&gt;の要素数および要素の値が等しければ&lt;code&gt;true&lt;/code&gt;、そうでなければ&lt;code&gt;false&lt;/code&gt;を返す。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;線形時間&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;forward_list&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt; ()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 要素数と要素の値が等しい&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#ff0000&#34;&gt;ls1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; ls2&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 要素の値は(左辺の要素数分まで)等しいが要素数が異なる&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (ls1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; ls3) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;true
false
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2257&#34; target=&#34;_blank&#34;&gt;LWG Issue 2257. Simplify container requirements with the new algorithms&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++14から、2つ目の範囲のendイテレータをとる&lt;code&gt;equal()&lt;/code&gt;アルゴリズムを使用するようになった。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- コンテナの等値比較： C++14対応として、2つ目の範囲のendイテレータをとるequalアルゴリズムを使用するようにした。</title>
      <link href="http://cpprefjp.github.io/reference/list/op_equal.html"/>
      <id>7849cab279048ee701964059f1ca49b7e1b15af0:reference/list/op_equal.md</id>
      <updated>2015-03-30 19:18:58 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;list&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;operator==&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; y);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt;オブジェクトの等値比較を行う。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;が&lt;code&gt;==&lt;/code&gt;で比較可能であること。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++03 : &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()) ==&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()) &amp;amp;&amp;amp;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/equal.html&#34;&gt;&lt;code&gt;equal&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;());&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++14 : &lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/equal.html&#34;&gt;&lt;code&gt;equal&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;());&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt;と&lt;code&gt;y&lt;/code&gt;の要素数および要素の値が等しければ&lt;code&gt;true&lt;/code&gt;、そうでなければ&lt;code&gt;false&lt;/code&gt;を返す。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;線形時間&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;list&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt; ()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 要素数と要素の値が等しい&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#ff0000&#34;&gt;ls1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; ls2&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 要素の値は(左辺の要素数分まで)等しいが要素数が異なる&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (ls1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; ls3) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;true
false
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2257&#34; target=&#34;_blank&#34;&gt;LWG Issue 2257. Simplify container requirements with the new algorithms&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++14から、2つ目の範囲のendイテレータをとる&lt;code&gt;equal()&lt;/code&gt;アルゴリズムを使用するようになった。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- コンテナの等値比較： C++14対応として、2つ目の範囲のendイテレータをとるequalアルゴリズムを使用するようにした。</title>
      <link href="http://cpprefjp.github.io/reference/map/map/op_equal.html"/>
      <id>7849cab279048ee701964059f1ca49b7e1b15af0:reference/map/map/op_equal.md</id>
      <updated>2015-03-30 19:18:58 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;operator==&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Compare&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key,T,Compare,Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key,T,Compare,Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; y);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; が &lt;code&gt;y&lt;/code&gt; と等しいかどうかの判定を行う。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++03 : &lt;code&gt;x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;amp;&amp;amp;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/equal.html&#34;&gt;&lt;code&gt;equal&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;());&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++14 : &lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/equal.html&#34;&gt;&lt;code&gt;equal&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;());&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; に対して線形時間&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;map&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c1;
  c1[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; c2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; c1;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (c1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; c2) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  c2[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (c1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; c2) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
0
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??, 11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2257&#34; target=&#34;_blank&#34;&gt;LWG Issue 2257. Simplify container requirements with the new algorithms&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++14から、2つ目の範囲のendイテレータをとる&lt;code&gt;equal()&lt;/code&gt;アルゴリズムを使用するようになった。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- コンテナの等値比較： C++14対応として、2つ目の範囲のendイテレータをとるequalアルゴリズムを使用するようにした。</title>
      <link href="http://cpprefjp.github.io/reference/map/multimap/op_equal.html"/>
      <id>7849cab279048ee701964059f1ca49b7e1b15af0:reference/map/multimap/op_equal.md</id>
      <updated>2015-03-30 19:18:58 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;operator==&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Compare&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key,T,Compare,Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key,T,Compare,Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; y);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; が &lt;code&gt;y&lt;/code&gt; と等しいかどうかの判定を行う。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++03 : &lt;code&gt;x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;amp;&amp;amp;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/equal.html&#34;&gt;&lt;code&gt;equal&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;());&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++14 : &lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/equal.html&#34;&gt;&lt;code&gt;equal&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;());&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; に対して線形時間&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;map&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c1;
  c1.insert( std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;));

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; c2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; c1;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (c1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; c2) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  c2.insert( std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt;));

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (c1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; c2) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
0
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??, 11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2257&#34; target=&#34;_blank&#34;&gt;LWG Issue 2257. Simplify container requirements with the new algorithms&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++14から、2つ目の範囲のendイテレータをとる&lt;code&gt;equal()&lt;/code&gt;アルゴリズムを使用するようになった。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- コンテナの等値比較： C++14対応として、2つ目の範囲のendイテレータをとるequalアルゴリズムを使用するようにした。</title>
      <link href="http://cpprefjp.github.io/reference/set/set/op_equal.html"/>
      <id>7849cab279048ee701964059f1ca49b7e1b15af0:reference/set/set/op_equal.md</id>
      <updated>2015-03-30 19:18:58 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;set&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;operator==&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Key&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Compare&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key,Compare,Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Key,Compare,Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; y);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; が &lt;code&gt;y&lt;/code&gt; と等しいかどうかの判定を行う。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++03 : &lt;code&gt;x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;amp;&amp;amp;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/equal.html&#34;&gt;&lt;code&gt;equal&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;());&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++14 : &lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/equal.html&#34;&gt;&lt;code&gt;equal&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;());&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; に対して線形時間&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set.html&#34;&gt;set&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set.html&#34;&gt;set&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; s1, s2;
  s1.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;insert&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);
  s1.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;insert&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;);
  s1.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;insert&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;30&lt;/span&gt;);
  s2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s1;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (s1 &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;&lt;/span&gt; s2) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;

  s2.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;insert&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;40&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (s1 &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;&lt;/span&gt; s2) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
0
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2257&#34; target=&#34;_blank&#34;&gt;LWG Issue 2257. Simplify container requirements with the new algorithms&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++14から、2つ目の範囲のendイテレータをとる&lt;code&gt;equal()&lt;/code&gt;アルゴリズムを使用するようになった。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- コンテナの等値比較： C++14対応として、2つ目の範囲のendイテレータをとるequalアルゴリズムを使用するようにした。</title>
      <link href="http://cpprefjp.github.io/reference/vector/op_equal.html"/>
      <id>7849cab279048ee701964059f1ca49b7e1b15af0:reference/vector/op_equal.md</id>
      <updated>2015-03-30 19:18:58 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;vector&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;operator==&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; y);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;vector&lt;/code&gt;オブジェクトの等値比較を行う。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;が&lt;code&gt;==&lt;/code&gt;で比較可能であること。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++03 : &lt;code&gt;x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() == y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;amp;&amp;amp;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/equal.html&#34;&gt;&lt;code&gt;equal&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;());&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++14 : &lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/equal.html&#34;&gt;&lt;code&gt;equal&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;());&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt;と&lt;code&gt;y&lt;/code&gt;の要素数および要素の値が等しければ&lt;code&gt;true&lt;/code&gt;、そうでなければ&lt;code&gt;false&lt;/code&gt;を返す。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;線形時間&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt; ()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 要素数と要素の値が等しい&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (v1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; v2) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 要素の値は(左辺の要素数分まで)等しいが要素数が異なる&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (v1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; v3) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;true
false
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2257&#34; target=&#34;_blank&#34;&gt;LWG Issue 2257. Simplify container requirements with the new algorithms&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++14から、2つ目の範囲のendイテレータをとる&lt;code&gt;equal()&lt;/code&gt;アルゴリズムを使用するようになった。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>resize -- vector, dequeのresize : C++14での要件の簡易化に対応</title>
      <link href="http://cpprefjp.github.io/reference/deque/resize.html"/>
      <id>ec87f3aa661a024d2612053002fb428d5d429af8:reference/deque/resize.md</id>
      <updated>2015-03-27 20:12:27 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;deque&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class deque&#34;&gt;deque::&lt;/span&gt;resize&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;resize&lt;/span&gt;(size_type sz);                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) : C++11&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;resize&lt;/span&gt;(size_type sz, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c);       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) : C++11&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;resize&lt;/span&gt;(size_type sz, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; T()); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) + (2) : C++03&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;要素数を変更する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1) :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;型&lt;code&gt;T&lt;/code&gt;がデフォルト構築可能であること&lt;/li&gt;
&lt;li&gt;型&lt;code&gt;T&lt;/code&gt;が&lt;code&gt;*this&lt;/code&gt;に対してコピー挿入可能であること (C++11まで)&lt;/li&gt;
&lt;li&gt;型&lt;code&gt;T&lt;/code&gt;が&lt;code&gt;*this&lt;/code&gt;に対してムーブ挿入が可能であること (C++14)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;型&lt;code&gt;T&lt;/code&gt;が&lt;code&gt;*this&lt;/code&gt;に対してコピー挿入可能であること&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1) :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;もし&lt;code&gt;sz&lt;/code&gt;が現在のコンテナの&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;より小さい場合、以下の動作をする：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/begin.html&#34;&gt;&lt;code&gt;begin()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;+ sz,&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/deque/end.html&#34;&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;);&lt;/code&gt; (C++11まで)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/pop_back.html&#34;&gt;&lt;code&gt;pop_back()&lt;/code&gt;&lt;/a&gt;関数を&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;- sz&lt;/code&gt;回呼ぶ (C++14以降)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;もし&lt;code&gt;sz&lt;/code&gt;が現在のコンテナの&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;より大きい場合、&lt;code&gt;sz -&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;個だけ値初期化された&lt;code&gt;T&lt;/code&gt;型オブジェクトのコピーを追加する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++11まで&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (sz &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;size()&lt;/a&gt;)
  &lt;a href=&#34;http://cpprefjp.github.io/reference/deque/insert.html&#34;&gt;insert&lt;/a&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/end.html&#34;&gt;end()&lt;/a&gt;, sz &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;size()&lt;/a&gt;, c);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;if&lt;/span&gt; (sz &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;size()&lt;/a&gt;)
  &lt;a href=&#34;http://cpprefjp.github.io/reference/deque/erase.html&#34;&gt;erase&lt;/a&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/begin.html&#34;&gt;begin()&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; sz, &lt;a href=&#34;http://cpprefjp.github.io/reference/deque/end.html&#34;&gt;end()&lt;/a&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++14以降&lt;ul&gt;
&lt;li&gt;もし&lt;code&gt;sz&lt;/code&gt;が現在のコンテナの&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;より小さい場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/pop_back.html&#34;&gt;&lt;code&gt;pop_back()&lt;/code&gt;&lt;/a&gt;関数を&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;- sz&lt;/code&gt;回呼ぶ&lt;/li&gt;
&lt;li&gt;もし&lt;code&gt;sz&lt;/code&gt;が現在のコンテナの&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;より大きい場合、&lt;code&gt;sz -&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;個だけオブジェクト&lt;code&gt;c&lt;/code&gt;のコピーを追加する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;deque&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 増加&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};
    c.&lt;span style=&#34;color:#ff0000&#34;&gt;resize&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; c) {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
  }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 減少&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};
    c.&lt;span style=&#34;color:#ff0000&#34;&gt;resize&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; c) {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
1
4
0
0

3
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2033&#34; target=&#34;_blank&#34;&gt;LWG Issue 2033. Preconditions of &lt;code&gt;reserve&lt;/code&gt;, &lt;code&gt;shrink_to_fit&lt;/code&gt;, and &lt;code&gt;resize&lt;/code&gt; functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2323&#34; target=&#34;_blank&#34;&gt;LWG Issue 2323. &lt;code&gt;vector::resize(n, t)&lt;/code&gt;&#39;s specification should be simplified&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数を取得する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>resize -- vector, dequeのresize : C++14での要件の簡易化に対応</title>
      <link href="http://cpprefjp.github.io/reference/vector/resize.html"/>
      <id>ec87f3aa661a024d2612053002fb428d5d429af8:reference/vector/resize.md</id>
      <updated>2015-03-27 20:12:27 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;vector&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class vector&#34;&gt;vector::&lt;/span&gt;resize&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;resize&lt;/span&gt;(size_type sz);             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++11&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;resize&lt;/span&gt;(size_type sz, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++11&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;resize&lt;/span&gt;(size_type sz, T c &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; T());  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) + (2) C++03&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;要素数を変更する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1) :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;型&lt;code&gt;T&lt;/code&gt;がデフォルト構築可能であること (C++14)&lt;/li&gt;
&lt;li&gt;型&lt;code&gt;T&lt;/code&gt;が&lt;code&gt;*this&lt;/code&gt;に対してコピー挿入可能であること (C++11まで)&lt;/li&gt;
&lt;li&gt;型&lt;code&gt;T&lt;/code&gt;が&lt;code&gt;*this&lt;/code&gt;に対してムーブ挿入可能であること (C++14)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;型&lt;code&gt;T&lt;/code&gt;が&lt;code&gt;*this&lt;/code&gt;に対してコピー挿入可能であること (C++14)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1) :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;もし&lt;code&gt;sz&lt;/code&gt;が現在のコンテナの&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;より小さい場合、以下の動作をする：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/begin.html&#34;&gt;&lt;code&gt;begin()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;+ sz,&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/vector/end.html&#34;&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;);&lt;/code&gt; (C++11まで)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/pop_back.html&#34;&gt;&lt;code&gt;pop_back()&lt;/code&gt;&lt;/a&gt;関数を&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;- sz&lt;/code&gt;回呼ぶ (C++14以降)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;もし&lt;code&gt;sz&lt;/code&gt;が現在のコンテナの&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;より大きい場合、&lt;code&gt;sz -&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;個だけ値初期化された&lt;code&gt;T&lt;/code&gt;型オブジェクトのコピーを追加する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++11まで&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (sz &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/vector/size.html&#34;&gt;size()&lt;/a&gt;)
  &lt;a href=&#34;http://cpprefjp.github.io/reference/vector/insert.html&#34;&gt;insert&lt;/a&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/end.html&#34;&gt;end()&lt;/a&gt;, sz &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/vector/size.html&#34;&gt;size()&lt;/a&gt;, c);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;if&lt;/span&gt; (sz &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/vector/size.html&#34;&gt;size()&lt;/a&gt;)
  &lt;a href=&#34;http://cpprefjp.github.io/reference/vector/erase.html&#34;&gt;erase&lt;/a&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/begin.html&#34;&gt;begin()&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; sz, &lt;a href=&#34;http://cpprefjp.github.io/reference/vector/end.html&#34;&gt;end()&lt;/a&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++14以降&lt;ul&gt;
&lt;li&gt;もし&lt;code&gt;sz&lt;/code&gt;が現在のコンテナの&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;より小さい場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/pop_back.html&#34;&gt;&lt;code&gt;pop_back()&lt;/code&gt;&lt;/a&gt;関数を&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;- sz&lt;/code&gt;回呼ぶ&lt;/li&gt;
&lt;li&gt;もし&lt;code&gt;sz&lt;/code&gt;が現在のコンテナの&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;より大きい場合、&lt;code&gt;sz -&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;個だけオブジェクト&lt;code&gt;c&lt;/code&gt;のコピーを追加する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(2) : 非コピー挿入可能な型&lt;code&gt;T&lt;/code&gt;のムーブコンストラクタが例外を送出した場合、この関数は何もしない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 増加&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};
    v.&lt;span style=&#34;color:#ff0000&#34;&gt;resize&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v.begin(), v.end(), [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; });
  }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 減少&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};
    v.&lt;span style=&#34;color:#ff0000&#34;&gt;resize&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v.begin(), v.end(), [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; });
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
1
4
0
0

3
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2033&#34; target=&#34;_blank&#34;&gt;LWG Issue 2033. Preconditions of &lt;code&gt;reserve&lt;/code&gt;, &lt;code&gt;shrink_to_fit&lt;/code&gt;, and &lt;code&gt;resize&lt;/code&gt; functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2323&#34; target=&#34;_blank&#34;&gt;LWG Issue 2323. &lt;code&gt;vector::resize(n, t)&lt;/code&gt;&#39;s specification should be simplified&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>resize -- deque::resize : C++14での要件の簡易化に対応</title>
      <link href="http://cpprefjp.github.io/reference/deque/resize.html"/>
      <id>96a1dd739989cf282872196845050199956a4407:reference/deque/resize.md</id>
      <updated>2015-03-27 20:09:18 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;deque&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class deque&#34;&gt;deque::&lt;/span&gt;resize&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;resize&lt;/span&gt;(size_type sz);                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) : C++11&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;resize&lt;/span&gt;(size_type sz, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c);       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) : C++11&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;resize&lt;/span&gt;(size_type sz, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; T()); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) + (2) : C++03&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;要素数を変更する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1) :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;型&lt;code&gt;T&lt;/code&gt;がデフォルト構築可能であること&lt;/li&gt;
&lt;li&gt;型&lt;code&gt;T&lt;/code&gt;が&lt;code&gt;*this&lt;/code&gt;に対してムーブ挿入、およびデフォルト構築が可能であること (C++14)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;型&lt;code&gt;T&lt;/code&gt;が&lt;code&gt;*this&lt;/code&gt;に対してコピー挿入可能であること&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1) :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;もし&lt;code&gt;sz&lt;/code&gt;が現在のコンテナの&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;より小さい場合、以下の動作をする：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/begin.html&#34;&gt;&lt;code&gt;begin()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;+ sz,&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/deque/end.html&#34;&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;);&lt;/code&gt; (C++11まで)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/pop_back.html&#34;&gt;&lt;code&gt;pop_back()&lt;/code&gt;&lt;/a&gt;関数を&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;- sz&lt;/code&gt;回呼ぶ (C++14以降)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;もし&lt;code&gt;sz&lt;/code&gt;が現在のコンテナの&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;より大きい場合、&lt;code&gt;sz -&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;個だけ値初期化された&lt;code&gt;T&lt;/code&gt;型オブジェクトのコピーを追加する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++11まで&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (sz &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;size()&lt;/a&gt;)
  &lt;a href=&#34;http://cpprefjp.github.io/reference/deque/insert.html&#34;&gt;insert&lt;/a&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/end.html&#34;&gt;end()&lt;/a&gt;, sz &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;size()&lt;/a&gt;, c);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;if&lt;/span&gt; (sz &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;size()&lt;/a&gt;)
  &lt;a href=&#34;http://cpprefjp.github.io/reference/deque/erase.html&#34;&gt;erase&lt;/a&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/begin.html&#34;&gt;begin()&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; sz, &lt;a href=&#34;http://cpprefjp.github.io/reference/deque/end.html&#34;&gt;end()&lt;/a&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++14以降&lt;ul&gt;
&lt;li&gt;もし&lt;code&gt;sz&lt;/code&gt;が現在のコンテナの&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;より小さい場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/pop_back.html&#34;&gt;&lt;code&gt;pop_back()&lt;/code&gt;&lt;/a&gt;関数を&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;- sz&lt;/code&gt;回呼ぶ&lt;/li&gt;
&lt;li&gt;もし&lt;code&gt;sz&lt;/code&gt;が現在のコンテナの&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;より大きい場合、&lt;code&gt;sz -&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;個だけオブジェクト&lt;code&gt;c&lt;/code&gt;のコピーを追加する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;deque&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 増加&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};
    c.&lt;span style=&#34;color:#ff0000&#34;&gt;resize&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; c) {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
  }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 減少&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};
    c.&lt;span style=&#34;color:#ff0000&#34;&gt;resize&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; c) {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
1
4
0
0

3
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2033&#34; target=&#34;_blank&#34;&gt;LWG Issue 2033. Preconditions of &lt;code&gt;reserve&lt;/code&gt;, &lt;code&gt;shrink_to_fit&lt;/code&gt;, and &lt;code&gt;resize&lt;/code&gt; functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2323&#34; target=&#34;_blank&#34;&gt;LWG Issue 2323. &lt;code&gt;vector::resize(n, t)&lt;/code&gt;&#39;s specification should be simplified&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数を取得する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ (C++11) -- packaged_taskコンストラクタのSFINAEする条件で、比較対象の型が間違っていたので修正</title>
      <link href="http://cpprefjp.github.io/reference/future/packaged_task/op_constructor.html"/>
      <id>41c42278c09d1cb25091712292778bc8540b88b1:reference/future/packaged_task/op_constructor.md</id>
      <updated>2015-03-26 18:10:10 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;future&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class packaged_task&#34;&gt;packaged_task::&lt;/span&gt;コンストラクタ (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;packaged_task() noexcept;                          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; packaged_task(F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f);                     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; packaged_task(&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_arg_t.html&#34;&gt;allocator_arg_t&lt;/a&gt;,
                       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a, F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

packaged_task(packaged_task&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;;            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++11&lt;/span&gt;
packaged_task(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; packaged_task&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;;      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++14&lt;/span&gt;

packaged_task(packaged_task&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rhs) noexcept;       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : デフォルトコンストラクタ。&lt;/li&gt;
&lt;li&gt;(2) : 関数オブジェクトを受け取るコンストラクタ。&lt;/li&gt;
&lt;li&gt;(3) : 関数オブジェクトおよびカスタムアロケータを受け取るコンストラクタ。&lt;/li&gt;
&lt;li&gt;(4) : コピーコンストラクタ。コピー不可。&lt;/li&gt;
&lt;li&gt;(5) : ムーブコンストラクタ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 共有状態なし、タスクの保持なしでオブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(2) : 共有状態を初期化し、&lt;code&gt;f&lt;/code&gt;を非同期実行するタスクとして&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;F&amp;gt;(f)&lt;/code&gt;でメンバ変数に保持する。&lt;/li&gt;
&lt;li&gt;(3) : 共有状態を初期化し、&lt;code&gt;f&lt;/code&gt;を非同期実行するタスクとして&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;F&amp;gt;(f)&lt;/code&gt;でメンバ変数に保持する。アロケータ&lt;code&gt;a&lt;/code&gt;は、共有状態を構築する際に、その内部構造でメモリ確保が必要な場合に使用される。&lt;/li&gt;
&lt;li&gt;(5) : &lt;code&gt;rhs&lt;/code&gt;の共有状態の所有権、および非同期タスクの関数オブジェクトを&lt;code&gt;*this&lt;/code&gt;に移動する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(2) : &lt;code&gt;F&lt;/code&gt;のコピーコンストラクタもしくはムーブコンストラクタによって送出されうる、あらゆる例外が投げられる可能性がある。&lt;/li&gt;
&lt;li&gt;(3) : &lt;code&gt;F&lt;/code&gt;のコピーコンストラクタもしくはムーブコンストラクタによって送出されうる、あらゆる例外が投げられる可能性がある。内部構造のメモリ確保に失敗した場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/new/bad_alloc.html&#34;&gt;&lt;code&gt;std::bad_alloc&lt;/code&gt;&lt;/a&gt;が投げられる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(5) : &lt;code&gt;rhs&lt;/code&gt;は共有状態を持たない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(2), (3) :&lt;ul&gt;
&lt;li&gt;C++14 : &lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/decay.html&#34;&gt;&lt;code&gt;std::decay&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;F&amp;gt;::type&lt;/code&gt;が&lt;code&gt;std::packaged_task&amp;lt;R(ArgTypes...)&amp;gt;&lt;/code&gt;型である場合、この関数はオーバーロード解決に参加しない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;memory&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;future&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;foo&lt;/span&gt;() { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// デフォルト構築&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 共有状態とタスクを持たない&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;packaged_task&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;()&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; task;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 関数オブジェクトを受け取って構築&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 共有状態の初期化、およびタスクを内部に保持する&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;packaged_task&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;()&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; task(foo);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 関数オブジェクトとアロケータを受け取って構築&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 共有状態をアロケータを使用して初期化子、タスクを内部に保持する&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;packaged_task&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;()&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; task {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;allocator_arg,
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;packaged_task&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;()&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(),
        foo
    };
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ムーブ構築&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 共有状態の所有権とタスクを移動する&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;packaged_task&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;()&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; task1(foo);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;packaged_task&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;()&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; task2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(task1);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// task1は共有状態を持たない&lt;/span&gt;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 11.0 （11.0はアロケータを引数に取るものがコンパイルできない？）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2067&#34; target=&#34;_blank&#34;&gt;LWG Issue 2067. &lt;code&gt;packaged_task&lt;/code&gt; should have deleted copy c&#39;tor with const parameter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2097&#34; target=&#34;_blank&#34;&gt;LWG Issue 2097. &lt;code&gt;packaged_task&lt;/code&gt; constructors should be constrained&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace (C++11) -- vector&lt;bool&gt; : emplaceとemplace_backはC++14から追加されたことを明記</title>
      <link href="http://cpprefjp.github.io/reference/vector/emplace.html"/>
      <id>9b2c539eb9a3ff9eee51a68da7c7e7c90e28482f:reference/vector/emplace.md</id>
      <updated>2015-03-26 17:15:53 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;vector&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class vector&#34;&gt;vector::&lt;/span&gt;emplace (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator emplace(const_iterator position, Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;emplace(const_iterator position, Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;任意の位置に要素を直接構築で挿入する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;要素型 &lt;code&gt;value_type&lt;/code&gt; は、引数 &lt;code&gt;args&lt;/code&gt; からコンテナに対して &lt;code&gt;EmplaceConstructible&lt;/code&gt; でなければならない。また、要素型 &lt;code&gt;value_type&lt;/code&gt; はコンテナに対して、&lt;code&gt;MoveInsertable&lt;/code&gt; であり、かつ、&lt;code&gt;MoveAssignable&lt;/code&gt; でなければならない。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt; で構築された &lt;code&gt;value_type&lt;/code&gt; 型のオブジェクトを &lt;code&gt;position&lt;/code&gt; の手前に挿入する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;args&lt;/code&gt; から構築され &lt;code&gt;vector&lt;/code&gt; に新規に追加された要素を指すイテレータを返す。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;挿入される要素の数と挿入される要素の位置と&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/end.html&#34;&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/a&gt;の間の要素数に対して、線形時間の計算量が必要である。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;要素を追加した後の&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;が要素を追加する前の&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/capacity.html&#34;&gt;&lt;code&gt;capacity()&lt;/code&gt;&lt;/a&gt;よりも大きい場合は領域の再確保が生じる。領域の再確保が生じなかった場合には全てのイテレーターや参照は有効である。&lt;/p&gt;
&lt;p&gt;もし、例外が発生した場合には副作用が発生しない。（コピーコンストラクタ、ムーブコンストラクタ、代入演算子、ムーブ代入、および、&lt;code&gt;InputIterator&lt;/code&gt;操作で例外が発生した場合を除く。）&lt;/p&gt;
&lt;p&gt;もし、非&lt;code&gt;CopyInsertable&lt;/code&gt;な型&lt;code&gt;T&lt;/code&gt;のムーブコンストラクタで例外が発生した場合、副作用は未規定。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; v;

  v.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace&lt;/span&gt;(v.begin(), &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;));
  v.insert(v.begin(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;world&#34;&lt;/span&gt;)));

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v.begin(), v.end(), [](decltype(v)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;const_reference x) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  });
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1,world
3,hello
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2187&#34; target=&#34;_blank&#34;&gt;LWG Issue 2187. &lt;code&gt;vector&amp;lt;bool&amp;gt;&lt;/code&gt; is missing emplace and &lt;code&gt;emplace_back&lt;/code&gt; member functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace_back (C++11) -- vector&lt;bool&gt; : emplaceとemplace_backはC++14から追加されたことを明記</title>
      <link href="http://cpprefjp.github.io/reference/vector/emplace_back.html"/>
      <id>9b2c539eb9a3ff9eee51a68da7c7e7c90e28482f:reference/vector/emplace_back.md</id>
      <updated>2015-03-26 17:15:53 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;vector&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class vector&#34;&gt;vector::&lt;/span&gt;emplace_back (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; emplace_back(Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;emplace_back(Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;直接構築で新たな要素を末尾に追加する。&lt;/p&gt;
&lt;p&gt;この関数の引数&lt;code&gt;args...&lt;/code&gt;は、要素型Tのコンストラクタ引数である。当関数の内部で要素型&lt;code&gt;T&lt;/code&gt;のコンストラクタを呼び出し、追加する要素を構築する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;定数時間&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;要素を追加した後の&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;が要素を追加する前の&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/capacity.html&#34;&gt;&lt;code&gt;capacity()&lt;/code&gt;&lt;/a&gt;よりも大きい場合は領域の再確保が生じる。領域の再確保が生じなかった場合には全てのイテレータや参照は有効である。もし、例外が発生した場合には副作用が発生しない。（コピーコンストラクタ、ムーブコンストラクタ、代入演算子、ムーブ代入、および、InputIterator操作で例外が発生した場合を除く。）もし、非CopyInsertableな型&lt;code&gt;T&lt;/code&gt;のムーブコンストラクタで例外が発生した場合、副作用は未規定。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; v;

  v.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace_back&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;));
  v.push_back(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;world&#34;&lt;/span&gt;)));

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v.begin(), v.end(), [](decltype(v)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;const_reference x) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  });
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3,hello
1,world
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2187&#34; target=&#34;_blank&#34;&gt;LWG Issue 2187. &lt;code&gt;vector&amp;lt;bool&amp;gt;&lt;/code&gt; is missing emplace and &lt;code&gt;emplace_back&lt;/code&gt; member functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
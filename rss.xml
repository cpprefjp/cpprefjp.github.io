<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-02-07T04:29:39.584003</updated>
  <id>397282aa-17cf-4677-b1fc-dcc91712b008</id>

  
    <entry>
      <title>cpprefjp - C++日本語リファレンス -- スポンサー更新 #1248</title>
      <link href="https://cpprefjp.github.io/index.html"/>
      <id>256984fd4498514958ec15475b08d549cdc2ac35:index.md</id>
      <updated>2024-02-07T13:26:14+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;cpprefjp - C++日本語リファレンス&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本サイトcpprefjpは、プログラミング言語C++のリファレンスを提供するWebサイトです。&lt;/p&gt;
&lt;p&gt;最新C++バージョンのリファレンスを提供していきます。&lt;/p&gt;
&lt;h2&gt;運営方針&lt;/h2&gt;
&lt;p&gt;本リファレンスサイトは、C++言語の最新のリファレンスを常に提供し続けることを目標にしています。&lt;/p&gt;
&lt;p&gt;各クラス、関数にはそれぞれ1つ以上のサンプルコードを付けていく方針です。&lt;/p&gt;
&lt;p&gt;本サイトでは、他サイトおよび規格書の直接的な翻訳ではなく、編集者の調査と考えに基づいた解説を提供していきます。&lt;/p&gt;
&lt;h2&gt;スポンサーシップ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/cpprefjp&#34; target=&#34;_blank&#34;&gt;cpprefjp - Open Collective&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このプロジェクトは、持続的な活動のため、ユーザーの方々からのご支援をお待ちしております。上記Open Collectiveのプロジェクトでスポンサーシップの募集をしております。&lt;/p&gt;
&lt;p&gt;ご支援いただくユーザーの方々には、以下の特典があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本ページ (cpprefjpサイトのトップページ) に、金額順でロゴを表示させていただきます (金額が同じ場合は登録順)&lt;/li&gt;
&lt;li&gt;シルバースポンサー以上の方は、&lt;a href=&#34;https://github.com/cpprefjp/site&#34; target=&#34;_blank&#34;&gt;cpprefjp/site&lt;/a&gt;リポジトリのissueとして、採用情報を投稿できます (一週間ほどで閉じます)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ご支援いただいた資金は、貢献度に応じてコントリビューターに分配させていただきます。&lt;/p&gt;
&lt;p&gt;また、スポンサーシップの入金方法として、Open Collectiveのほかに銀行振込も対応しております。&lt;/p&gt;
&lt;p&gt;銀行振込に関して、またはそれ以外でスポンサーシップの相談に関しては、以下のメールアドレスにお問い合わせください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;メールアドレス : &lt;a href=&#34;mailto:cpprefjp_org@googlegroups.com&#34;&gt;cpprefjp_org@googlegroups.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;宛名 : cpprefjp管理者&lt;ul&gt;
&lt;li&gt;代表として、主に高橋晶 (Akira Takahashi) がご対応させていただきます&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参加方法&lt;/h2&gt;
&lt;p&gt;本サイトは、多くのユーザの手によって書かれています。&lt;/p&gt;
&lt;p&gt;あなたがこの cpprefjp プロジェクトに参加したいのであれば、私達はそれをとても歓迎します。&lt;/p&gt;
&lt;p&gt;cpprefjp プロジェクトに参加する方法は簡単です。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site/issues?state=open&#34; target=&#34;_blank&#34;&gt;cpprefjp の Issues&lt;/a&gt; にアクセスし、&lt;/li&gt;
&lt;li&gt;あなたが手伝えそうな、まだ誰にもアサインされていないタスクを見つけ、&lt;/li&gt;
&lt;li&gt;その Issue のコメントに「このタスクやります」と書く&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これだけです。&lt;/p&gt;
&lt;p&gt;あとは、そのタスクを完了させて pull request を送れば、あなたも cpprefjp のコミッタになれます。&lt;/p&gt;
&lt;h2&gt;編集者向けのさらなる情報&lt;/h2&gt;
&lt;p&gt;本サイトは、GitHubのリポジトリ上で、Markdown形式でリファレンスを記載し、GitHub Pagesに自動反映するという形をとっています。本サイトのMarkdownソースは、以下のリポジトリにあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site&#34; target=&#34;_blank&#34;&gt;https://github.com/cpprefjp/site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記リポジトリのREADMEに、コアメンバの一覧を記載してありますので、何かありましたらそのうちの誰か、もしくはリポジトリへのIssueという形でご相談ください。&lt;/p&gt;
&lt;p&gt;本サイトの編集方法については、以下のドキュメントを参照してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/start_editing.html&#34;&gt;cpprefjpを編集するには&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本サイトのコンテンツを作成、編集するにあたり、仕様を熟知し、一人で完璧に正しい内容を書くことは要求しません。&lt;/p&gt;
&lt;p&gt;たとえ間違ったことを記載した場合や、不安の残る内容を記載した場合でも、それに気づいた誰かが修正してくれます。&lt;/p&gt;
&lt;h2&gt;その他参考情報&lt;/h2&gt;
&lt;p&gt;以下のWebサイトから転載許可をいただいています。&lt;/p&gt;
&lt;p&gt;翻訳や解説などで活用してください：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20190112041213/http://episteme.wankuma.com/stlprog/index.html&#34; target=&#34;_blank&#34;&gt;Standard Template Library プログラミング on the Web&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;スポンサー&lt;/h2&gt;
&lt;p&gt;cpprefjpプロジェクトは、以下の方々にスポンサーになっていただいております。&lt;/p&gt;
&lt;h3&gt;ゴールドスポンサー&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Hiroshi様&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://shiguredo.jp/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;shiguredo&#34; src=&#34;https://raw.githubusercontent.com/cpprefjp/image/master/sponsors/shiguredo/shiguredo.png&#34; width=&#34;560&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.cocotone.jp&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;cocotone&#34; src=&#34;https://raw.githubusercontent.com/cpprefjp/image/master/sponsors/cocotone/cocotone.png&#34; width=&#34;560&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;シルバースポンサー&lt;/h3&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.fixstars.com/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;Fixstars&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/sponsors/Fixstars/fixstars-logo.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://acerola-software.jp/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;Acerola Software&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/sponsors/Acerola/as_logo.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://vaporoid.com/sys/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;vaporoid&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/sponsors/vaporoid/cpprefjp-400x150.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.cube-soft.jp/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;CubeSoft&#34; src=&#34;https://raw.githubusercontent.com/cube-soft/cube.assets/master/home/banner/large.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://mkohana.github.io/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;M.Kohana&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/sponsors/m_kohana/m_kohana.jpg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.pegasys-inc.com/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;pegasys&#34; src=&#34;https://tmpgenc.pegasys-inc.com/images/pegasys_logo.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;ブロンズスポンサー&lt;/h3&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://opencollective.com/odan&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;odan&#34; src=&#34;https://odan.dev/icon.jpeg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.unagiworks.net/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;unagi&#34; src=&#34;https://www.unagiworks.net/blog/wp-content/uploads/2019/01/logo.gif&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/nodchip&#34; target=&#34;_blank&#34;&gt;nodchip&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;イシハラユウヤ様&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/meg_nakagami&#34; target=&#34;_blank&#34;&gt;Megumi Nakagami様&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://github.com/minachun/minachun&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;minachun / J.Minami&#34; src=&#34;https://raw.githubusercontent.com/minachun/minachun/main/banner.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/hashitaku&#34; target=&#34;_blank&#34;&gt;Hashitaku様&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;img alt=&#34;yukika2e&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/sponsors/yukika2e/yukika2e.png&#34; /&gt;&lt;/div&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/ugai&#34; target=&#34;_blank&#34;&gt;ugai様&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;スポンサーシップについては、以下のページを参照ください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/cpprefjp&#34; target=&#34;_blank&#34;&gt;cpprefjp - Open Collective&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;連絡先が不明なスポンサー様は、ロゴの表示が現在できておりません。Open Collectiveの問い合わせフォームから、表示するロゴ画像とリンク先URLについてご連絡いただきたいです。&lt;/p&gt;
&lt;h2&gt;プライバシーポリシー&lt;/h2&gt;
&lt;p&gt;本サイトは、サイトの改善のためにGoogleアナリティクスを使用しています。本サイトをご利用中のブラウザは、Googleに特定の情報を自動的に送信します。本サイトは、この分析のためにCookieを使用します。利用者は、本サイトを利用することで、この目的においてCookieを使用することを許可したものとみなします。&lt;/p&gt;
&lt;p&gt;Googleによるデータ使用の詳細は、以下のURLで確認することができます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.google.com/intl/ja/policies/privacy/partners/&#34; target=&#34;_blank&#34;&gt;https://www.google.com/intl/ja/policies/privacy/partners/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ライセンスについて&lt;/h2&gt;
&lt;p&gt;本サイトの情報は、&lt;a href=&#34;https://creativecommons.org/licenses/by/3.0/&#34; target=&#34;_blank&#34;&gt;クリエイティブ・コモンズ 表示 3.0 非移植 ライセンス(CC BY)&lt;/a&gt;の下に提供しています。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://i.creativecommons.org/l/by/3.0/88x31.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;cpprefjpサイトのアイコン・ロゴ画像は、&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/deed.ja&#34; target=&#34;_blank&#34;&gt;クリエイティブ・コモンズ 表示 - 非営利 - 改変禁止 4.0 国際 (CC BY-NC-ND 4.0)&lt;/a&gt;の下に提供しています。&lt;/p&gt;
&lt;p&gt;高解像度画像データ： &lt;a href=&#34;https://github.com/cpprefjp/image/tree/master/cpprefjp/icon&#34; target=&#34;_blank&#34;&gt;cpprefjp/image&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://licensebuttons.net/l/by-nc-nd/4.0/88x31.png&#34; /&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fold_left_with_iter -- fold_left_with_iter : 実装例修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_fold_left_with_iter.html"/>
      <id>c7c70e6bc9b62d293679e86936ad8841fb2b802e:reference/algorithm/ranges_fold_left_with_iter.md</id>
      <updated>2024-02-07T10:22:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_fold_left_with_iter.md b/reference/algorithm/ranges_fold_left_with_iter.md
index 8ad351294..c938670c2 100644
--- a/reference/algorithm/ranges_fold_left_with_iter.md
+++ b/reference/algorithm/ranges_fold_left_with_iter.md
@@ -182,10 +182,14 @@ int main() {
 ## 実装例
 
 ```cpp
+template&amp;lt;typename F, typename T, typename I&amp;gt;
+using R = decay_t&amp;lt;invoke_result_t&amp;lt;F&amp;amp;, T, iter_reference_t&amp;lt;I&amp;gt;&amp;gt;&amp;gt;;
+
+
 template&amp;lt;input_iterator I, sentinel_for&amp;lt;I&amp;gt; S, class T,
          indirectly-binary-left-foldable&amp;lt;T, I&amp;gt; F&amp;gt;
-constexpr auto fold_left_with_iter(I first, S last, F f) -&amp;gt; fold_left_with_iter_result&amp;lt;I, U&amp;gt; {
-  using U = decay_t&amp;lt;invoke_result_t&amp;lt;F&amp;amp;, T, iter_reference_t&amp;lt;I&amp;gt;&amp;gt;&amp;gt;;
+constexpr auto fold_left_with_iter(I first, S last, T init, F f) -&amp;gt; fold_left_with_iter_result&amp;lt;I, R&amp;lt;F, T, I&amp;gt;&amp;gt; {
+  using U = R&amp;lt;F, T, I&amp;gt;;
 
   if (first == last) {
     return {std::move(first), U(std::move(init))};
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mdspan -- mdspan: submdspan_extents(#1201)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan.html"/>
      <id>979afd4bdb032f5d70b4660f127510ebdad01e2e:reference/mdspan.md</id>
      <updated>2024-02-07T01:09:31+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;mdspan&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;mdspan&amp;gt;&lt;/code&gt;ヘッダでは、任意のメモリブロックに対して多次元配列のようにアクセスする機能を定義する。&lt;/p&gt;
&lt;h2&gt;多次元配列サイズ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/extents.html&#34;&gt;extents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列のサイズを表す値 (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/extents.html&#34;&gt;dextents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全次元が動的な多次元配列のサイズを表す値 (alias template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;レイアウトマッピング&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/layout_left.html&#34;&gt;layout_left&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;列優先(Fortran/Matlabスタイル)レイアウトマッピングポリシー (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/layout_right.html&#34;&gt;layout_right&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行優先(C/C++スタイル)レイアウトマッピングポリシー (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/layout_stride.html&#34;&gt;layout_stride&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストライド幅指定レイアウトマッピングポリシー (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;要素アクセサ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/default_accessor.html&#34;&gt;default_accessor&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デフォルト要素アクセサ (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;多次元配列ビュー&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/mdspan.html&#34;&gt;mdspan&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列ビュー (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;多次元配列部分ビュー&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/strided_slice.html&#34;&gt;strided_slice&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定次元のストライド指定要素取り出しを指示する集成体クラステンプレート (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/full_extent_t.html&#34;&gt;full_extent_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定次元の全要素取り出しを指示するタグ型 (class)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/full_extent_t.html&#34;&gt;full_extent&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定次元の全要素取り出しを指示するタグ値 (variable)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/submdspan_mapping_result.html&#34;&gt;submdspan_mapping_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列部分ビューのレイアウトマッピング情報 (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/submdspan_extents.html&#34;&gt;submdspan_extents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列部分ビューの多次元配列サイズを計算する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/submdspan.html&#34;&gt;submdspan&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列部分ビューを取得する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++23&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20 &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/span.html&#34;&gt;&amp;lt;span&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html&#34; target=&#34;_blank&#34;&gt;P0009R18 MDSPAN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2630r4.html&#34; target=&#34;_blank&#34;&gt;P2630R4 Submdspan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>first_ -- mdspan: submdspan_extents(#1201)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/first_.html"/>
      <id>979afd4bdb032f5d70b4660f127510ebdad01e2e:reference/mdspan/first_.md</id>
      <updated>2024-02-07T01:09:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/first_.md b/reference/mdspan/first_.md
index 0a5dc8dd1..7bc26f57d 100644
--- a/reference/mdspan/first_.md
+++ b/reference/mdspan/first_.md
@@ -13,8 +13,8 @@ constexpr IndexType first_(SliceSpecifiers... slices);
 
 `S_k`を`SliceSpecifiers`の`k`番目の型、`s_k`を`slices`の`k`番目の値としたとき、説明用の`P_k`の値を次のように定義する。
 
-- 型`S_k`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;index_type&amp;gt;`のモデルのとき`s_k`、そうでなければ
-- 型`S_k`が[`index-pair-like`](index-pair-like.md)`&amp;lt;index_type&amp;gt;`のモデルのとき`get&amp;lt;0&amp;gt;(s_k)`、そうでなければ
+- 型`S_k`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;IndexType&amp;gt;`のモデルのとき`s_k`、そうでなければ
+- 型`S_k`が[`index-pair-like`](index-pair-like.md)`&amp;lt;IndexType&amp;gt;`のモデルのとき`get&amp;lt;0&amp;gt;(s_k)`、そうでなければ
 - 型`S_k`が[`strided_slice`](strided_slice.md)の特殊化のとき[`de-ice`](de-ice.md)`(s_k.offset)`、そうでなければ
 - 値`0`
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>src-indices -- mdspan: submdspan_extents(#1201)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/src-indices.html"/>
      <id>979afd4bdb032f5d70b4660f127510ebdad01e2e:reference/mdspan/src-indices.md</id>
      <updated>2024-02-07T01:09:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/src-indices.md b/reference/mdspan/src-indices.md
index f93730159..55ace153e 100644
--- a/reference/mdspan/src-indices.md
+++ b/reference/mdspan/src-indices.md
@@ -13,22 +13,16 @@ constexpr array&amp;lt;IndexType, sizeof...(SliceSpecifiers)&amp;gt;
 ## 概要
 `src-indices`は[`submdspan`](submdspan.md)動作説明用の関数テンプレートである。
 
-説明のため`rank`を`slices`の要素数、`S_k`を`SliceSpecifiers`の`k`番目の型とする
-[`array`](/reference/array/array.md)`&amp;lt;size_t, rank&amp;gt;`型の配列`map-rank`を導入し、その要素`map-rank[k]`を下記の通り定義する。
-
-- 型`S_k`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;IndexType&amp;gt;`のモデルのとき[`dynamic_extent`](/reference/span/dynamic_extent.md)、そうでなければ
-- `j &amp;lt; k`において型`S_j`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;IndexType&amp;gt;`のモデルではない個数
-
 
 ## 適格要件
 `IndexType`は符号付き整数型または符号無し整数型であること。
 
 
 ## 戻り値
-半開区間`[0, rank)`の`k`に対して、`k`番目の要素が下記の値を持つ配列を返す。
+半開区間`[0, sizeof...(SliceSpecifiers))`の`k`に対して、`k`番目の要素が下記の値を持つ配列を返す。
 
-- `map-rank[k]`が[`dynamic_extent`](/reference/span/dynamic_extent.md)に等しいとき、[`first_`](first_.md)`&amp;lt;IndexType, k&amp;gt;(slices...)`
-- そうでなければ、[`first_`](first_.md)`&amp;lt;IndexType, k&amp;gt;(slices...) + indices[map-rank[k]]`
+- [`map-rank[k]`](submdspan_extents.md)が[`dynamic_extent`](/reference/span/dynamic_extent.md)に等しいとき、[`first_`](first_.md)`&amp;lt;IndexType, k&amp;gt;(slices...)`
+- そうでなければ、[`first_`](first_.md)`&amp;lt;IndexType, k&amp;gt;(slices...) + indices[`[`map-rank[k]`](submdspan_extents.md)`]`
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>submdspan -- mdspan: submdspan_extents(#1201)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/submdspan.html"/>
      <id>979afd4bdb032f5d70b4660f127510ebdad01e2e:reference/mdspan/submdspan.md</id>
      <updated>2024-02-07T01:09:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/submdspan.md b/reference/mdspan/submdspan.md
index 6ca3ad68f..f888eace8 100644
--- a/reference/mdspan/submdspan.md
+++ b/reference/mdspan/submdspan.md
@@ -45,8 +45,8 @@ namespace std {
 説明用の型`index_type`を[`Extents::index_type`](extents.md)、変数`sub_map_offset`を`submdspan_mapping(`[`src.mapping()`](mdspan/mapping.md)`, slices...)`の結果としたとき、
 
 - 型`decltype(submdspan_mapping(`[`src.mapping()`](mdspan/mapping.md)`, slices...))`が[`submdspan_mapping_result`](submdspan_mapping_result.md)の特殊化であり、
-- [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;decltype(`[`sub_map_offset.mapping`](submdspan_mapping_result.md)`.extents())&amp;gt;, decltype(`[`submdspan_extents`](submdspan_extents.md.nolink)`(`[`src.mapping()`](mdspan/mapping.md)`, slices...))&amp;gt;`が`true`、かつ
-- [`src.extents()`](mdspan/extents.md)の各次元インデクス`k`において、`S_k`を`SliceSpecifiers`の`k`番目の型としたき、下記いずれかの1つのみを満たすこと。
+- [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;decltype(`[`sub_map_offset.mapping`](submdspan_mapping_result.md)`.extents())&amp;gt;, decltype(`[`submdspan_extents`](submdspan_extents.md)`(`[`src.mapping()`](mdspan/mapping.md)`, slices...))&amp;gt;`が`true`、かつ
+- [`src.extents()`](mdspan/extents.md)の各次元インデクス`k`において、`S_k`を`SliceSpecifiers`の`k`番目の型としたき、下記いずれかのうち1つだけを満たすこと。
     - 型`S_k`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;index_type&amp;gt;`のモデル
     - 型`S_k`が[`index-pair-like`](index-pair-like.md)`&amp;lt;index_type&amp;gt;`のモデル
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_k,` [`full_extent_t`](full_extent_t.md)`&amp;gt;`が`true`
@@ -58,8 +58,8 @@ namespace std {
     - 型`S_k`が[`strided_slice`](strided_slice.md)の特殊化のとき
         - `s_k.extent == 0`、または
         - `s_k.stride &amp;gt; 0`
-    - `0` ≤ [`first_&amp;lt;index_type, k&amp;gt;`](first_.md)`(slices...)` ≤ [`last_&amp;lt;k&amp;gt;`](last_.md)`(`[`src.extents()`](mdspan/extents.md)`, slices...)` ≤ [`src.extent(k)`](mdspan/extent.md)
-- [`sub_map_offset.mapping`](submdspan_mapping_result.md)`.extents() ==` [`submdspan_extents`](submdspan_extents.md.nolink)`(`[`src.mapping()`](mdspan/mapping.md)`, slices...)`が`true`、かつ
+    - `0` ≤ [`first_`](first_.md)`&amp;lt;index_type, k&amp;gt;(slices...)` ≤ [`last_`](last_.md)`&amp;lt;k&amp;gt;(`[`src.extents()`](mdspan/extents.md)`, slices...)` ≤ [`src.extent(k)`](mdspan/extent.md)
+- [`sub_map_offset.mapping`](submdspan_mapping_result.md)`.extents() ==` [`submdspan_extents`](submdspan_extents.md)`(`[`src.mapping()`](mdspan/mapping.md)`, slices...)`が`true`、かつ
 - [`sub_map_offset.mapping`](submdspan_mapping_result.md)`.extents()`の多次元インデクス値を表す任意の整数パック`I`に対して、`sub_map_offset.mapping(I...) +` [`sub_map_offset.offset`](submdspan_mapping_result.md) `==` [`src.mapping()`](mdspan/mapping.md)`(`[`src-indices`](src-indices.md)`(`[`array`](/reference/array/array.md)`{I...}, slices...))`が`true`であること。
 
 
@@ -68,13 +68,14 @@ namespace std {
 
 ```cpp
 auto sub_map_offset = submdspan_mapping(src.mapping(), slices...);
-return mdspan(src.accessor().offset(src.data(), sub_map_offset.offset),
+return mdspan(src.accessor().offset(src.data_handle(), sub_map_offset.offset),
               sub_map_offset.mapping,
               AccessorPolicy::offset_policy(src.accessor()));
 ```
 * mdspan[link mdspan.md]
 * sub_map_offset[link submdspan_mapping_result.md]
 * src.mapping()[link mdspan/mapping.md]
+* src.data_handle()[link mdspan/mapping.md]
 * src.accessor()[link mdspan/accessor.md]
 * AccessorPolicy::offset_policy[link AccessorPolicy.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>submdspan_extents -- mdspan: submdspan_extents(#1201)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/submdspan_extents.html"/>
      <id>979afd4bdb032f5d70b4660f127510ebdad01e2e:reference/mdspan/submdspan_extents.md</id>
      <updated>2024-02-07T01:09:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/submdspan_extents.md b/reference/mdspan/submdspan_extents.md
new file mode 100644
index 000000000..bcdf8b9db
--- /dev/null
+++ b/reference/mdspan/submdspan_extents.md
@@ -0,0 +1,131 @@
+# submdspan_extents
+* mdspan[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class IndexType, class ... Extents, class ... SliceSpecifiers&amp;gt;
+  constexpr auto submdspan_extents(const extents&amp;lt;IndexType, Extents...&amp;gt;&amp;amp; src, SliceSpecifiers ... slices);
+}
+```
+* extents[link extents.md]
+
+## 概要
+多次元配列サイズ[`extents`](extents.md)と各次元からの要素取り出し（スライス）方式を指定して、新しい多次元配列サイズ[`extents`](extents.md)を取得する。
+
+### 動作説明用
+- 型`S_k` : `SliceSpecifiers`の`k`番目の型
+- 値`s_k` : `slices`の`k`番目の値
+- 値`map-rank` : `k`番目の要素`map-rank[k]`が下記を満たす、[`array`](/reference/array/array.md)`&amp;lt;size_t, sizeof...(SliceSpecifiers)&amp;gt;`型の配列値
+    - 型`S_k`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;IndexType&amp;gt;`のモデルのとき[`dynamic_extent`](/reference/span/dynamic_extent.md)、そうでなければ
+    - `j &amp;lt; k`において型`S_j`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;IndexType&amp;gt;`のモデルではない個数
+
+動作説明用の配列`map-rank[]`は、変換元の次元インデクス`k`から変換先の次元インデクスへの対応関係を表現している。要素値`dynamic_extent`は変換により削減される次元を表す。
+
+
+## テンプレートパラメータ制約
+`sizeof...(slices)`が`Extents::rank()`と等しいこと。
+
+
+## 適格要件
+`src`の各次元インデクス`k`に対して、下記いずれかのうち1つだけを満たすこと。
+ 
+- 型`S_k`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;IndexType&amp;gt;`のモデル
+- 型`S_k`が[`index-pair-like`](index-pair-like.md)`&amp;lt;IndexType&amp;gt;`のモデル
+- [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_k,` [`full_extent_t`](full_extent_t.md)`&amp;gt;`が`true`
+- 型`S_k`が[`strided_slice`](strided_slice.md)の特殊化
+
+
+## 事前条件
+`src`の各次元インデクス`k`に対して、下記を全て満たすこと。
+
+- 型`S_k`が[`strided_slice`](strided_slice.md)の特殊化のとき
+    - `s_k.extent == 0`、または
+    - `s_k.stride &amp;gt; 0`
+- `0` ≤ [`first_`](first_.md)`&amp;lt;IndexType, k&amp;gt;(slices...)` ≤ [`last_`](last_.md)`&amp;lt;k&amp;gt;(src, slices...)` ≤ [`src.extent(k)`](extents/extent.md)
+
+
+## 戻り値
+説明用の型`SubExtents`を、下記を満たす[`extents`](extents.md)の特殊化とする。
+
+- [`SubExtents::rank()`](extents/rank.md)は、型`S_k`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;IndexType&amp;gt;`のモデルではない`k`の個数に等しく、かつ
+- `map-rank[k] !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)を満たす`Extents`の次元インデクス`k`について、[`SubExtents::static_extent`](extents/static_extent.md)`(map-rank[k])`が下記と等しいこと
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;S_k,` [`full_extent_t`](full_extent_t.md)`&amp;gt;`が`true`のとき、[`SubExtents::static_extent`](extents/static_extent.md)`(k)`、そうでなければ、
+    - 型`S_k`が[`index-pair-like`](index-pair-like.md)のモデルかつ`tuple_element_t&amp;lt;0, S_k&amp;gt;`および`tuple_element_t&amp;lt;1, S_k&amp;gt;`がいずれも[`integral-constant-like`](integral-constant-like.md)のモデルであるとき、[`de-ice`](de-ice.md)`(tuple_element_t&amp;lt;1, S_k&amp;gt;) -` [`de-ice`](de-ice.md)`(tuple_element_t&amp;lt;0, S_k&amp;gt;)`、そうでなければ
+    - 型`S_k`が[`strided_slice`](strided_slice.md)の特殊化かつメンバ型`extent_type`が`S_k::extent_type() == 0`かつ[`integral-constant-like`](integral-constant-like.md)のモデルであるとき、値`0`、そうでなければ
+    - 型`S_k`が[`strided_slice`](strided_slice.md)の特殊化かつメンバ型`extent_type`および`stride_type`がいずれも[`integral-constant-like`](integral-constant-like.md)のモデルであるとき、`1 + (`[`de-ice`](de-ice.md)`(S_k::extent_type()) - 1) /` [`de-ice`](de-ice.md)`(S_k::stride_type())`、そうでなければ
+    - [`dynamic_extent`](/reference/span/dynamic_extent.md)
+
+以下を満たす`SubExtents`型の値`ext`を返す。
+
+- `map-rank[k] !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)を満たす次元インデクス`k`について、[`ext.extent`](extents/extent.md)`(map-rank[k])`が下記に等しいこと
+    - 型`S_k`が[`strided_slice`](strided_slice.md)の特殊化であるとき、`s_k.extent == 0 ? 0 : 1 + (`[`de-ice`](de-ice.md)`(s_k.extent) - 1) /` [`de-ice`](de-ice.md)`(s_k.stride)`
+    - そうでなければ、[`last_`](last_.md)`&amp;lt;k&amp;gt;(src, slices...) -` [`first_`](first_.md)`&amp;lt;IndexType, k&amp;gt;(slices...)`
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+#include &amp;lt;type_traits&amp;gt;
+
+template &amp;lt;int N&amp;gt;
+constexpr auto Int = std::integral_constant&amp;lt;int, N&amp;gt;{};
+
+int main()
+{
+  std::extents&amp;lt;size_t, 10&amp;gt; exts{};
+
+  auto ext0 = std::submdspan_extents(exts, 0);
+  static_assert(std::same_as&amp;lt;decltype(ext0), std::extents&amp;lt;size_t&amp;gt;&amp;gt;);
+
+  auto ext1 = std::submdspan_extents(exts, std::full_extent);
+  static_assert(std::same_as&amp;lt;decltype(ext1), std::extents&amp;lt;size_t, 10&amp;gt;&amp;gt;);
+
+  auto ext2 = std::submdspan_extents(exts, std::pair{Int&amp;lt;2&amp;gt;, Int&amp;lt;8&amp;gt;});
+  static_assert(std::same_as&amp;lt;decltype(ext2), std::extents&amp;lt;size_t, 6&amp;gt;&amp;gt;);
+
+  auto ext3 = std::submdspan_extents(exts, std::strided_slice{0, Int&amp;lt;0&amp;gt;, 1});
+  static_assert(std::same_as&amp;lt;decltype(ext3), std::dextents&amp;lt;size_t, 1&amp;gt;&amp;gt;);
+  assert(ext3.extent(0) == 0);
+
+  auto ext4 = std::submdspan_extents(exts, std::strided_slice{0, Int&amp;lt;10&amp;gt;, Int&amp;lt;3&amp;gt;});
+  static_assert(std::same_as&amp;lt;decltype(ext4), std::extents&amp;lt;size_t, 4&amp;gt;&amp;gt;);
+
+  auto ext5 = std::submdspan_extents(exts, std::pair{2, 8});
+  static_assert(std::same_as&amp;lt;decltype(ext5), std::dextents&amp;lt;size_t, 1&amp;gt;&amp;gt;);
+  assert(ext5.extent(0) == 6);
+}
+```
+* std::submdspan_extents[color ff0000]
+* std::full_extent[link full_extent_t.md]
+* std::strided_slice[link strided_slice.md]
+* std::integral_constant[link /reference/type_traits/integral_constant.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`submdspan`](submdspan.md)
+- [`full_extent`](full_extent_t.md)
+- [`strided_slice`](strided_slice.md)
+
+
+## 参照
+- [P2630R4 Submdspan](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2630r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fold_left_with_iter -- タイトル修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_fold_left_with_iter.html"/>
      <id>e49fbcde3004f58406691422d24faca22abad380:reference/algorithm/ranges_fold_left_with_iter.md</id>
      <updated>2024-02-06T16:23:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_fold_left_with_iter.md b/reference/algorithm/ranges_fold_left_with_iter.md
index f12e692ac..8ad351294 100644
--- a/reference/algorithm/ranges_fold_left_with_iter.md
+++ b/reference/algorithm/ranges_fold_left_with_iter.md
@@ -1,4 +1,4 @@
-# fold_left_first
+# fold_left_with_iter
 * algorithm[meta header]
 * function template[meta id-type]
 * std::ranges[meta namespace]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fold_left_first -- コード修飾の修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_fold_left_with_iter.html"/>
      <id>379e1b05ec7f555ea67fc7e36918b526f295f11f:reference/algorithm/ranges_fold_left_with_iter.md</id>
      <updated>2024-02-06T16:18:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_fold_left_with_iter.md b/reference/algorithm/ranges_fold_left_with_iter.md
index f582a3bf1..f12e692ac 100644
--- a/reference/algorithm/ranges_fold_left_with_iter.md
+++ b/reference/algorithm/ranges_fold_left_with_iter.md
@@ -63,10 +63,6 @@ for (++first; first != last; ++first)
   accum = invoke(f, std::move(accum), *first);
 return {std::move(first), std::move(accum)};
 ```
-* decay_t[link /reference/type_traits/decay.md]
-* invoke_result_t[link /reference/type_traits/invoke_result.md]
-* iter_reference_t[link /reference/iterator/iter_reference_t.md]
-* next[link /reference/iterator/ranges_next.md]
 * invoke[link /reference/functional/invoke.md]
 
 空の入力範囲に対しては初期値`init`を返す。入力範囲によらず、戻り値の1つ目の値（イテレータ値）は渡した範囲の終端イテレータ（`last`/`ranges::end(r)`）と同じ位置を指すイテレータとなる（必ずしも同じ型もしくは同じイテレータにならない）。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
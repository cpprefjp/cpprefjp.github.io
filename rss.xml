<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-06-03T04:54:46.991119</updated>
  <id>ad92e7ad-4418-45f7-bb73-3fa3bc3926e6</id>

  
    <entry>
      <title>get-domain-late -- execution: fix spelling query-or-default (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/get-domain-late.html"/>
      <id>4f5dd2acb5473aabe4e3d0b9bdc55c82d6f15649:reference/execution/execution/get-domain-late.md</id>
      <updated>2025-06-03T13:48:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/get-domain-late.md b/reference/execution/execution/get-domain-late.md
index 5d6c3880d..877a17341 100644
--- a/reference/execution/execution/get-domain-late.md
+++ b/reference/execution/execution/get-domain-late.md
@@ -30,10 +30,10 @@ constexpr auto get-domain-late(const Sndr&amp;amp; sndr, const Env&amp;amp; env) noexcept;
     ```cpp
     [] {
       auto [_, sch, _] = sndr;
-      return query-or-default(get_domain, sch, default_domain());
+      return query-with-default(get_domain, sch, default_domain());
     }();
     ```
-    * query-or-default[link query-or-default.md.nolink]
+    * query-with-default[link query-with-default.md]
     * get_domain[link get_domain.md]
     * default_domain()[link default_domain.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>on -- execution: fix spelling query-or-default (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/on.html"/>
      <id>4f5dd2acb5473aabe4e3d0b9bdc55c82d6f15649:reference/execution/execution/on.md</id>
      <updated>2025-06-03T13:48:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/on.md b/reference/execution/execution/on.md
index 80fd0b3da..22906fc8b 100644
--- a/reference/execution/execution/on.md
+++ b/reference/execution/execution/on.md
@@ -33,11 +33,11 @@ namespace std::execution {
 
 ```cpp
 transform_sender(
-  query-or-default(get_domain, sch, default_domain()),
+  query-with-default(get_domain, sch, default_domain()),
   make-sender(on, sch, sndr))
 ```
 * transform_sender[link transform_sender.md]
-* query-or-default[link query-or-default.md.nolink]
+* query-with-default[link query-with-default.md]
 * get_domain[link get_domain.md]
 * default_domain()[link default_domain.md]
 * make-sender[link make-sender.md]
@@ -153,7 +153,7 @@ struct not-a-sender {
 Senderアルゴリズム構築時に、関連付けられた実行ドメインに対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
 [デフォルト実行ドメイン](default_domain.md)では無変換。
 
-- 呼び出し式`on(sch, sndr)` : [Scheduler](scheduler.md)`sch`に[関連付けられた実行ドメイン](query-or-default.md.nolink)
+- 呼び出し式`on(sch, sndr)` : [Scheduler](scheduler.md)`sch`に[関連付けられた実行ドメイン](query-with-default.md)
 - 呼び出し式`on(sndr, sch, closure)` : [Sender](sender.md)`sndr`に[関連付けられた実行ドメイン](get-domain-early.md)
 
 [Receiver](receiver.md)との[接続(connect)](connect.md)時に、[関連付けられた実行ドメイン](get-domain-late.md)に対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>schedule_from -- execution: fix spelling query-or-default (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/schedule_from.html"/>
      <id>4f5dd2acb5473aabe4e3d0b9bdc55c82d6f15649:reference/execution/execution/schedule_from.md</id>
      <updated>2025-06-03T13:48:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/schedule_from.md b/reference/execution/execution/schedule_from.md
index eec40b797..43464855e 100644
--- a/reference/execution/execution/schedule_from.md
+++ b/reference/execution/execution/schedule_from.md
@@ -25,11 +25,11 @@ namespace std::execution {
 
 ```cpp
 transform_sender(
-  query-or-default(get_domain, sch, default_domain()),
+  query-with-default(get_domain, sch, default_domain()),
   make-sender(schedule_from, sch, sndr))
 ```
 * transform_sender[link transform_sender.md]
-* query-or-default[link query-or-default.md.nolink]
+* query-with-default[link query-with-default.md]
 * get_domain[link get_domain.md]
 * default_domain()[link default_domain.md]
 * make-sender[link make-sender.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>starts_on -- execution: fix spelling query-or-default (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/starts_on.html"/>
      <id>4f5dd2acb5473aabe4e3d0b9bdc55c82d6f15649:reference/execution/execution/starts_on.md</id>
      <updated>2025-06-03T13:48:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/starts_on.md b/reference/execution/execution/starts_on.md
index c82f71db8..6673b2808 100644
--- a/reference/execution/execution/starts_on.md
+++ b/reference/execution/execution/starts_on.md
@@ -23,11 +23,11 @@ namespace std::execution {
 
 ```cpp
 transform_sender(
-  query-or-default(get_domain, sch, default_domain()),
+  query-with-default(get_domain, sch, default_domain()),
   make-sender(starts_on, sch, sndr))
 ```
 * transform_sender[link transform_sender.md]
-* query-or-default[link query-or-default.md.nolink]
+* query-with-default[link query-with-default.md]
 * get_domain[link get_domain.md]
 * default_domain()[link default_domain.md]
 * make-sender[link make-sender.md]
@@ -67,7 +67,7 @@ transform_sender(
 
 
 ## カスタマイゼーションポイント
-Senderアルゴリズム構築時に、[Scheduler](scheduler.md)`sch`に[関連付けられた実行ドメイン](query-or-default.md.nolink)に対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
+Senderアルゴリズム構築時に、[Scheduler](scheduler.md)`sch`に[関連付けられた実行ドメイン](query-with-default.md)に対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
 [デフォルト実行ドメイン](default_domain.md)では無変換。
 
 [Receiver](receiver.md)との[接続(connect)](connect.md)時に、[関連付けられた実行ドメイン](get-domain-late.md)に対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- common_view::推論補助 : id typeを修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/common_view/op_deduction_guide.html"/>
      <id>6df87c76800d2e82fc232bafe4b5383d2d074489:reference/ranges/common_view/op_deduction_guide.md</id>
      <updated>2025-06-02T22:26:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/common_view/op_deduction_guide.md b/reference/ranges/common_view/op_deduction_guide.md
index 4d07d482c..79e8b2107 100644
--- a/reference/ranges/common_view/op_deduction_guide.md
+++ b/reference/ranges/common_view/op_deduction_guide.md
@@ -2,7 +2,7 @@
 * ranges[meta header]
 * std::ranges[meta namespace]
 * common_view[meta class]
-* deduction guide[meta id-type]
+* function[meta id-type]
 * cpp20[meta cpp]
 
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- common_view::begin : インデントを修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/common_view/begin.html"/>
      <id>daf97795ae81c9c74e8eccce6e32f6cde4535458:reference/ranges/common_view/begin.md</id>
      <updated>2025-06-02T22:23:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/common_view/begin.md b/reference/ranges/common_view/begin.md
index 82aa8e3ef..0127b7ac4 100644
--- a/reference/ranges/common_view/begin.md
+++ b/reference/ranges/common_view/begin.md
@@ -18,32 +18,21 @@ constexpr auto begin() const requires range&amp;lt;const V&amp;gt;; // (2)
 ## 効果
 
 - (1) :
-  ```cpp
-  if constexpr (random_access_range&amp;lt;V&amp;gt; &amp;amp;&amp;amp; sized_range&amp;lt;V&amp;gt;)
-    return ranges::begin(base_);
-  else
-    return common_iterator&amp;lt;iterator_t&amp;lt;V&amp;gt;, sentinel_t&amp;lt;V&amp;gt;&amp;gt;(ranges::begin(base_));
-  ```
-  * random_access_range[link ../random_access_range.md]
-  * sized_range[link ../sized_range.md]
-  * common_iterator[link /reference/iterator/common_iterator.md]
-  * iterator_t[link ../iterator_t.md]
-  * sentinel_t[link ../sentinel_t.md]
-  * ranges::begin[link ../begin.md]
+    ```cpp
+    if constexpr (random_access_range&amp;lt;V&amp;gt; &amp;amp;&amp;amp; sized_range&amp;lt;V&amp;gt;)
+      return ranges::begin(base_);
+    else
+      return common_iterator&amp;lt;iterator_t&amp;lt;V&amp;gt;, sentinel_t&amp;lt;V&amp;gt;&amp;gt;(ranges::begin(base_));
+    ```
 
 - (2) :
-  ```cpp
-  if constexpr (random_access_range&amp;lt;const V&amp;gt; &amp;amp;&amp;amp; sized_range&amp;lt;const V&amp;gt;)
-    return ranges::begin(base_);
-  else
-    return common_iterator&amp;lt;iterator_t&amp;lt;const V&amp;gt;, sentinel_t&amp;lt;const V&amp;gt;&amp;gt;(ranges::begin(base_));
-  ```
-  * random_access_range[link ../random_access_range.md]
-  * sized_range[link ../sized_range.md]
-  * common_iterator[link /reference/iterator/common_iterator.md]
-  * iterator_t[link ../iterator_t.md]
-  * sentinel_t[link ../sentinel_t.md]
-  * ranges::begin[link ../begin.md]
+    ```cpp
+    if constexpr (random_access_range&amp;lt;const V&amp;gt; &amp;amp;&amp;amp; sized_range&amp;lt;const V&amp;gt;)
+      return ranges::begin(base_);
+    else
+      return common_iterator&amp;lt;iterator_t&amp;lt;const V&amp;gt;, sentinel_t&amp;lt;const V&amp;gt;&amp;gt;(ranges::begin(base_));
+    ```
+
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_view -- common_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/common_view.html"/>
      <id>0c02cf40879fec512bd109452b4f9e8059685fbc:reference/ranges/common_view.md</id>
      <updated>2025-06-02T22:16:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/common_view.md b/reference/ranges/common_view.md
index 38d4784eb..d9051b9bf 100644
--- a/reference/ranges/common_view.md
+++ b/reference/ranges/common_view.md
@@ -52,11 +52,11 @@ namespace std::ranges {
 
 | 名前                                             | 説明                              | 対応バージョン |
 |--------------------------------------------------|-----------------------------------|----------------|
-| [`(constructor)`](common_view/op_constructor.md.nolink)  | コンストラクタ                    | C++20          |
-| [`base`](common_view/base.md.nolink)                     | `R`の参照を取得する               | C++20          |
-| [`begin`](common_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する    | C++20          |
-| [`end`](common_view/end.md.nolink)                       | 番兵を取得する                    | C++20          |
-| [`size`](common_view/size.md.nolink)                     | 要素数を取得する                  | C++20          |
+| [`(constructor)`](common_view/op_constructor.md)  | コンストラクタ                    | C++20          |
+| [`base`](common_view/base.md)                     | `R`の参照を取得する               | C++20          |
+| [`begin`](common_view/begin.md)                   | 先頭を指すイテレータを取得する    | C++20          |
+| [`end`](common_view/end.md)                       | 番兵を取得する                    | C++20          |
+| [`size`](common_view/size.md)                     | 要素数を取得する                  | C++20          |
 
 `r`を参照先のRangeとする。`size`は、[`ranges::size`](size.md)`(r)`が有効な式であるときに定義される。
 
@@ -77,7 +77,7 @@ namespace std::ranges {
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](common_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+| [`(deduction_guide)`](common_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++20          |
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- common_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/common_view/base.html"/>
      <id>0c02cf40879fec512bd109452b4f9e8059685fbc:reference/ranges/common_view/base.md</id>
      <updated>2025-06-02T22:16:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/common_view/base.md b/reference/ranges/common_view/base.md
new file mode 100644
index 000000000..83015d999
--- /dev/null
+++ b/reference/ranges/common_view/base.md
@@ -0,0 +1,75 @@
+# base
+* ranges[meta header]
+* std::ranges[meta namespace]
+* common_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr V base() const &amp;amp;
+  requires copy_constructible&amp;lt;V&amp;gt;;  // (1) C++20
+
+constexpr V base() &amp;amp;&amp;amp;;             // (2) C++20
+```
+* copy_constructible[link /reference/concepts/copy_constructible.md]
+
+## 概要
+
+メンバ変数として保持している、元のviewを取得する。
+
+## 効果
+
+- (1) : `return base_;`
+- (2) : `return std::move(base_);`
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+  
+  auto taken = vec | std::views::take(3);
+  std::ranges::common_view cv(taken);
+  
+  // (1) コピーして取得
+  auto base1 = cv.base();
+  static_assert(std::same_as&amp;lt;decltype(base1), std::ranges::take_view&amp;lt;std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;&amp;gt;);
+  
+  // (2) ムーブして取得
+  auto base2 = std::move(cv).base();
+  static_assert(std::same_as&amp;lt;decltype(base2), std::ranges::take_view&amp;lt;std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;&amp;gt;);
+  
+  // 取得したviewを使用
+  for (int n : base1) {
+    std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* base[color ff0000]
+* std::ranges::common_view[link ../common_view.md]
+* std::views::take[link ../take_view.md]
+* std::ranges::take_view[link ../take_view.md]
+* std::ranges::ref_view[link ../ref_view.md]
+
+### 出力
+```
+1 2 3 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.5.1 Overview](https://timsong-cpp.github.io/cppwp/n4861/range.common.view)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- common_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/common_view/begin.html"/>
      <id>0c02cf40879fec512bd109452b4f9e8059685fbc:reference/ranges/common_view/begin.md</id>
      <updated>2025-06-02T22:16:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/common_view/begin.md b/reference/ranges/common_view/begin.md
new file mode 100644
index 000000000..82aa8e3ef
--- /dev/null
+++ b/reference/ranges/common_view/begin.md
@@ -0,0 +1,99 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* common_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto begin();                              // (1)
+constexpr auto begin() const requires range&amp;lt;const V&amp;gt;; // (2)
+```
+* range[link ../range.md]
+
+## 概要
+
+先頭を指すイテレータを取得する。
+
+## 効果
+
+- (1) :
+  ```cpp
+  if constexpr (random_access_range&amp;lt;V&amp;gt; &amp;amp;&amp;amp; sized_range&amp;lt;V&amp;gt;)
+    return ranges::begin(base_);
+  else
+    return common_iterator&amp;lt;iterator_t&amp;lt;V&amp;gt;, sentinel_t&amp;lt;V&amp;gt;&amp;gt;(ranges::begin(base_));
+  ```
+  * random_access_range[link ../random_access_range.md]
+  * sized_range[link ../sized_range.md]
+  * common_iterator[link /reference/iterator/common_iterator.md]
+  * iterator_t[link ../iterator_t.md]
+  * sentinel_t[link ../sentinel_t.md]
+  * ranges::begin[link ../begin.md]
+
+- (2) :
+  ```cpp
+  if constexpr (random_access_range&amp;lt;const V&amp;gt; &amp;amp;&amp;amp; sized_range&amp;lt;const V&amp;gt;)
+    return ranges::begin(base_);
+  else
+    return common_iterator&amp;lt;iterator_t&amp;lt;const V&amp;gt;, sentinel_t&amp;lt;const V&amp;gt;&amp;gt;(ranges::begin(base_));
+  ```
+  * random_access_range[link ../random_access_range.md]
+  * sized_range[link ../sized_range.md]
+  * common_iterator[link /reference/iterator/common_iterator.md]
+  * iterator_t[link ../iterator_t.md]
+  * sentinel_t[link ../sentinel_t.md]
+  * ranges::begin[link ../begin.md]
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+  
+  // common_rangeではないviewを作成
+  auto taken = vec | std::views::take(3);
+  static_assert(!std::ranges::common_range&amp;lt;decltype(taken)&amp;gt;);
+  
+  // common_viewでラップ
+  std::ranges::common_view cv(taken);
+  static_assert(std::ranges::common_range&amp;lt;decltype(cv)&amp;gt;);
+  
+  // begin()とend()が同じ型を返す
+  auto it = cv.begin();
+  auto end = cv.end();
+  static_assert(std::same_as&amp;lt;decltype(it), decltype(end)&amp;gt;);
+  
+  // イテレータを使用
+  for (; it != end; ++it) {
+    std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* begin[color ff0000]
+* end[link end.md]
+* std::ranges::common_range[link ../common_range.md]
+* std::ranges::common_view[link ../common_view.md]
+* std::views::take[link ../take_view.md]
+
+### 出力
+```
+1 2 3 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.5.1 Overview](https://timsong-cpp.github.io/cppwp/n4861/range.common.view)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- common_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/common_view/end.html"/>
      <id>0c02cf40879fec512bd109452b4f9e8059685fbc:reference/ranges/common_view/end.md</id>
      <updated>2025-06-02T22:16:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/common_view/end.md b/reference/ranges/common_view/end.md
new file mode 100644
index 000000000..0ff35e598
--- /dev/null
+++ b/reference/ranges/common_view/end.md
@@ -0,0 +1,87 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* common_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto end();      // (1) C++20
+constexpr auto end() const
+  requires range&amp;lt;const V&amp;gt;; // (2) C++20
+```
+* range[link ../range.md]
+
+## 概要
+
+番兵を取得する。
+
+## 効果
+
+- (1) :
+    ```cpp
+    if constexpr (random_access_range&amp;lt;V&amp;gt; &amp;amp;&amp;amp; sized_range&amp;lt;V&amp;gt;)
+      return ranges::begin(base_) + ranges::size(base_);
+    else
+      return common_iterator&amp;lt;iterator_t&amp;lt;V&amp;gt;, sentinel_t&amp;lt;V&amp;gt;&amp;gt;(ranges::end(base_));
+    ```
+  
+- (2) :
+    ```cpp
+    if constexpr (random_access_range&amp;lt;const V&amp;gt; &amp;amp;&amp;amp; sized_range&amp;lt;const V&amp;gt;)
+      return ranges::begin(base_) + ranges::size(base_);
+    else
+      return common_iterator&amp;lt;iterator_t&amp;lt;const V&amp;gt;, sentinel_t&amp;lt;const V&amp;gt;&amp;gt;(ranges::end(base_));
+    ```
+
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+  
+  // common_rangeではないviewを作成
+  auto taken = vec | std::views::take(3);
+  
+  // common_viewでラップ
+  std::ranges::common_view cv(taken);
+  
+  // begin()とend()が同じ型を返す
+  auto begin = cv.begin();
+  auto end = cv.end();
+  static_assert(std::same_as&amp;lt;decltype(begin), decltype(end)&amp;gt;);
+  
+  // レガシーアルゴリズムに渡せる
+  std::for_each(begin, end, [](int n) {
+    std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  });
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* end[color ff0000]
+* begin[link begin.md]
+* std::ranges::common_view[link ../common_view.md]
+* std::views::take[link ../take_view.md]
+
+### 出力
+```
+1 2 3 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.5.1 Overview](https://timsong-cpp.github.io/cppwp/n4861/range.common.view)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- common_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/common_view/op_constructor.html"/>
      <id>0c02cf40879fec512bd109452b4f9e8059685fbc:reference/ranges/common_view/op_constructor.md</id>
      <updated>2025-06-02T22:16:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/common_view/op_constructor.md b/reference/ranges/common_view/op_constructor.md
new file mode 100644
index 000000000..ecf659172
--- /dev/null
+++ b/reference/ranges/common_view/op_constructor.md
@@ -0,0 +1,69 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* common_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+common_view()
+  requires default_initializable&amp;lt;V&amp;gt; = default;  // (1) C++20
+
+constexpr explicit
+common_view(V r);                               // (2) C++20
+```
+* default_initializable[link /reference/concepts/default_initializable.md]
+
+## 概要
+
+- (1) : デフォルトコンストラクタ
+- (2) : 元となるRangeを受け取るコンストラクタ
+
+## 効果
+
+- (1) : `base_`をデフォルト構築する
+- (2) : `base_`を`std::move(r)`で初期化する
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+  
+  // (1) デフォルトコンストラクタ
+  std::ranges::common_view&amp;lt;std::ranges::empty_view&amp;lt;int&amp;gt;&amp;gt; cv1;
+  
+  // (2) 元となるRangeを受け取るコンストラクタ
+  auto taken = vec | std::views::take(3);
+  std::ranges::common_view cv2(taken);
+  
+  for (int n : cv2) {
+    std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::ranges::common_view[color ff0000]
+* std::ranges::empty_view[link ../empty_view.md]
+* std::views::take[link ../take_view.md]
+
+### 出力
+```
+1 2 3 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.5.1 Overview](https://timsong-cpp.github.io/cppwp/n4861/range.common.view)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- common_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/common_view/op_deduction_guide.html"/>
      <id>0c02cf40879fec512bd109452b4f9e8059685fbc:reference/ranges/common_view/op_deduction_guide.md</id>
      <updated>2025-06-02T22:16:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/common_view/op_deduction_guide.md b/reference/ranges/common_view/op_deduction_guide.md
new file mode 100644
index 000000000..4d07d482c
--- /dev/null
+++ b/reference/ranges/common_view/op_deduction_guide.md
@@ -0,0 +1,61 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* common_view[meta class]
+* deduction guide[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class R&amp;gt;
+  common_view(R&amp;amp;&amp;amp;) -&amp;gt; common_view&amp;lt;views::all_t&amp;lt;R&amp;gt;&amp;gt;;
+}
+```
+* views::all_t[link ../all.md]
+
+## 概要
+`common_view`クラステンプレートの型推論補助。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;type_traits&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+  
+  // views::takeはcommon_rangeではない
+  auto taken = vec | std::views::take(3);
+  
+  // common_viewの型を明示的に指定する必要がない
+  std::ranges::common_view cv{taken};
+  
+  // 推論された型を確認
+  static_assert(std::same_as&amp;lt;
+    decltype(cv),
+    std::ranges::common_view&amp;lt;std::ranges::take_view&amp;lt;std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;&amp;gt;
+  &amp;gt;);
+}
+```
+* std::ranges::common_view[color ff0000]
+* std::views::take[link ../take_view.md]
+* std::ranges::take_view[link ../take_view.md]
+* std::ranges::ref_view[link ../ref_view.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 関連項目
+- [`views::all`](../all.md)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- common_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/common_view/size.html"/>
      <id>0c02cf40879fec512bd109452b4f9e8059685fbc:reference/ranges/common_view/size.md</id>
      <updated>2025-06-02T22:16:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/common_view/size.md b/reference/ranges/common_view/size.md
new file mode 100644
index 000000000..73eaf1dac
--- /dev/null
+++ b/reference/ranges/common_view/size.md
@@ -0,0 +1,71 @@
+# size
+* ranges[meta header]
+* std::ranges[meta namespace]
+* common_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto size()
+  requires sized_range&amp;lt;V&amp;gt;;       // (1) C++20
+constexpr auto size() const
+  requires sized_range&amp;lt;const V&amp;gt;; // (2) C++20
+```
+* sized_range[link ../sized_range.md]
+
+## 概要
+
+要素数を取得する。
+
+## 効果
+
+- (1) : `return ranges::size(base_);`
+- (2) : `return ranges::size(base_);`
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+  
+  // sized_rangeなviewを作成
+  auto taken = vec | std::views::take(3);
+  static_assert(std::ranges::sized_range&amp;lt;decltype(taken)&amp;gt;);
+  
+  // common_viewでラップ
+  std::ranges::common_view cv(taken);
+  
+  // サイズを取得
+  std::cout &amp;lt;&amp;lt; &amp;#34;size: &amp;#34; &amp;lt;&amp;lt; cv.size() &amp;lt;&amp;lt; std::endl;
+  
+  // const版も動作する
+  const auto&amp;amp; ccv = cv;
+  std::cout &amp;lt;&amp;lt; &amp;#34;const size: &amp;#34; &amp;lt;&amp;lt; ccv.size() &amp;lt;&amp;lt; std::endl;
+}
+```
+* size[color ff0000]
+* std::ranges::sized_range[link ../sized_range.md]
+* std::ranges::common_view[link ../common_view.md]
+* std::views::take[link ../take_view.md]
+
+### 出力
+```
+size: 3
+const size: 3
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.5.1 Overview](https://timsong-cpp.github.io/cppwp/n4861/range.common.view)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_view -- common_view : 概要文章がわかりにくかったので平易にした</title>
      <link href="https://cpprefjp.github.io/reference/ranges/common_view.html"/>
      <id>3380084316ebdc67be4d7541f2ad61f93305cd8f:reference/ranges/common_view.md</id>
      <updated>2025-06-02T19:13:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/common_view.md b/reference/ranges/common_view.md
index 10213afb5..38d4784eb 100644
--- a/reference/ranges/common_view.md
+++ b/reference/ranges/common_view.md
@@ -25,7 +25,8 @@ namespace std::ranges {
 - (1): 任意のRangeを[`common_range`](common_range.md)にする[`view`](view.md)
 - (2): `common_view`または同じ効果を実現する[`view`](view.md)を生成するRangeアダプタオブジェクト
 
-同じ型のイテレータペアを受け取るレガシーなアルゴリズム関数に対して、[`common_range`](common_range.md)ではない範囲を渡したい場合、`common`を使用することで同じ型のイテレータペアを取得できるようになる。
+イテレータと番兵の型が同じである必要があるレガシーなアルゴリズム関数に対して、イテレータと番兵が異なるRangeを渡したい場合 (たとえば[`iota_view`](iota_view.md))、このビューで[`common_range`](common_range.md)に変換することで、同じ型のイテレータペアを取得できるようになる。
+
 
 ### Rangeコンセプト
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
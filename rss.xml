<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-09-29T08:14:54.679918</updated>
  <id>04f0c87c-1d21-48f3-89b0-5521d984092b</id>

  
    <entry>
      <title>contract_violation -- リンクミスを修正</title>
      <link href="https://cpprefjp.github.io/reference/contract/contract_violation.html"/>
      <id>34310a8afeee5e9330b926f1abe2fad50d15716b:reference/contract/contract_violation.md</id>
      <updated>2022-09-29T17:08:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/contract/contract_violation.md b/reference/contract/contract_violation.md
index 31ab9b502..9d0cea8eb 100644
--- a/reference/contract/contract_violation.md
+++ b/reference/contract/contract_violation.md
@@ -19,7 +19,7 @@ namespace std {
 
 ## 概要
 
-`contract_violation`クラスは、発生した[契約違反](/lang/cpp23/contract-based_programming.md)に関する情報を提供する。
+`contract_violation`クラスは、発生した[契約違反](/lang/future/contract-based_programming.md)に関する情報を提供する。
 
 契約違反が発生したとき、このクラスのオブジェクトが処理系定義の方法により構築され、違反ハンドラーに渡される。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++23 -- リンクミスを修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp23.html"/>
      <id>d5aee06e6f2d0dafe6d45e8ba775c05e6aa2d7ec:lang/cpp23.md</id>
      <updated>2022-09-29T17:02:33+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C++23&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++23とは、2023年中に改訂される予定の、C++バージョンの通称である。&lt;/p&gt;
&lt;p&gt;このバージョンは、策定中のためC++2bと呼ばれることがある。「(C++20である2020年の次の) 202b年にリリースされる」という伏せ字として「b」が使われているが、3年周期に次のバージョンが策定されることが決まっているため、伏せ字になっている年数がずれることはない。&lt;/p&gt;
&lt;h2&gt;言語機能&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/literal_suffix_for_signed_size_t.html&#34;&gt;(符号付き)&lt;code&gt;size_t&lt;/code&gt;リテラルのためのサフィックス&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;42z&lt;/code&gt;/&lt;code&gt;42Z&lt;/code&gt;とすることで&lt;code&gt;size_t&lt;/code&gt;に対応する符号付き整数型のリテラルとする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/generalized_wording_for_partial_specializations.md.nolink&#34;&gt;部分特殊化の汎用化仕様&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;変数テンプレートの部分特殊化を許可するために部分特殊化の仕様を汎用化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/numeric_and_universal_character_escapes_in_character_and_string_literals.md.nolink&#34;&gt;文字・文字列リテラル中の数値・ユニバーサルキャラクタのエスケープに関する問題解決&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/declarations_and_where_to_find_them.md.nolink&#34;&gt;スコープと名前ルックアップの仕様整理&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複雑で不完全になっているスコープと名前ルックアップの仕様を整理し、一部の問題を解決する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/down_with_lambda_parens.md.nolink&#34;&gt;ラムダ式で&lt;code&gt;()&lt;/code&gt;を省略できる条件を緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャプチャや修飾をともなってもパラメータリストが空であれば&lt;code&gt;()&lt;/code&gt;を省略できる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/if_consteval.md.nolink&#34;&gt;if consteval&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時の文脈かどうかで分岐させる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/narrowing_contextual_conversions_to_bool.md.nolink&#34;&gt;定数式の文脈での&lt;code&gt;bool&lt;/code&gt;への縮小変換を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if constexpr(flags &amp;amp; Flags::Exec)&lt;/code&gt;や&lt;code&gt;static_assert(N);&lt;/code&gt;を許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/trimming_whitespaces_before_line_splicing.md.nolink&#34;&gt;行末スペースを無視するよう規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;行末が&lt;code&gt;\&lt;/code&gt;でおわっていた場合にMSVCは行の継続をしない実装になっていたため動作を共通化するため仕様を規定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/make_declaration_order_layout_mandated.md.nolink&#34;&gt;アクセス制御の異なるメンバ変数のレイアウトを宣言順に規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;アクセス制御の異なるメンバ変数のレイアウトが実装によって異なっていたため仕様を規定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/mixed_string_literal_concatenation.md.nolink&#34;&gt;異なる文字エンコーディングをもつ文字列リテラルの連結を不適格とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;auto a = u8&#34;&#34; L&#34;&#34;;&lt;/code&gt;のような異なる文字エンコーディング同士での文字列リテラルを連結を禁止する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;小さな変更&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/update_normative_reference_to_posix.html&#34;&gt;参照するPOSIX規格を更新&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;新しいPOSIX規格の機能を標準C++が参照していたため、参照するPOSIX規格のバージョンを更新&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブラリ更新の概要&lt;/h2&gt;
&lt;h3&gt;新ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;スタックトレースを取得するためのライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stacktrace.html&#34;&gt;&amp;lt;stacktrace&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;CとC++の間でのアトミック操作の相互運用のため、C互換ライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stdatomic.h.html&#34;&gt;&amp;lt;stdatomic.h&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;外部から提供されるメモリバッファでストリーム処理を行うライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/spanstream.md.nolink&#34;&gt;&amp;lt;spanstream&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;契約違反のハンドリングをするためのライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/contract.html&#34;&gt;&amp;lt;contract&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加 (まだ入っていない)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;コンテナ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stack/stack.html&#34;&gt;std::stack&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/queue/queue.html&#34;&gt;std::queue&lt;/a&gt;&lt;/code&gt;に、イテレータのペアをとるコンストラクタを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto v = std::vector(v, alloc);&lt;/code&gt;のようなアロケータ引数をともなう場合のクラステンプレートのテンプレート引数推論が動作しなかったため、各コンテナクラスのコンストラクタにおけるアロケータパラメータの型を&lt;code&gt;const Allocator&amp;amp;&lt;/code&gt;から&lt;code&gt;const &lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/type_identity.html&#34;&gt;std::type_identity_t&lt;/a&gt;&amp;lt;Allocator&amp;gt;&amp;amp;&lt;/code&gt;に修正&lt;/li&gt;
&lt;li&gt;N要素のメモリアロケート時にアロケータが実際にどれくらいのメモリを確保したかを得られるインタフェースとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;std::allocator&lt;/a&gt;&lt;/code&gt;クラスに、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/allocate_at_least.md.nolink&#34;&gt;allocate_at_least()&lt;/a&gt;&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;std::pair&lt;/a&gt;&lt;/code&gt;の転送コンストラクタにデフォルトテンプレート引数を追加することで、&lt;code&gt;{}&lt;/code&gt;のような型推論ができない引数を渡した場合でも完全転送が行われるよう修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;アルゴリズム&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;に、範囲の先頭が指定した範囲と合致するかを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/starts_with.md.nolink&#34;&gt;std::starts_with()&lt;/a&gt;&lt;/code&gt;、範囲の末尾が指定した範囲と合致するかを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ends_with.md.nolink&#34;&gt;std::ends_with()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;クラスと&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;クラスに、文字列内に指定した文字・文字列が含まれているかを判定するメンバ関数&lt;code&gt;contains()&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;のコンストラクタに、範囲をとるオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::string s = nullptr;&lt;/code&gt;のような文字列オブジェクトに&lt;code&gt;nullptr&lt;/code&gt;を代入するようなコードはバグの元であるため、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstddef/nullptr_t.html&#34;&gt;nullptr_t&lt;/a&gt;&lt;/code&gt;をとるコンストラクタをdelete定義として追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;関数オブジェクト&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/invoke.html&#34;&gt;std::invoke()&lt;/a&gt;&lt;/code&gt;の戻り値型を指定するバージョンである&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/onvoke_r.md.nolink&#34;&gt;std::invoke_r()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;スマートポインタ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/owner_hash.md.nolink&#34;&gt;std::owner_hash&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/owner_equal.md.nolink&#34;&gt;std::owner_equal&lt;/a&gt;&lt;/code&gt;が追加され、非順序連想コンテナのキーとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/weak_ptr.html&#34;&gt;std::weak_ptr&lt;/a&gt;&lt;/code&gt;を使用できるようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に、出力ポインタと入出力ポインタの抽象である&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/out_ptr.md.nolink&#34;&gt;std::out_ptr&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/inout_ptr.md.nolink&#34;&gt;std::inout_ptr&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ユーティリティ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/variant/visit.html&#34;&gt;std::visit()&lt;/a&gt;&lt;/code&gt;に指定できるバリアントオブジェクトを、直接的な「&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/variant/variant.html&#34;&gt;std::variant&lt;/a&gt;&lt;/code&gt;型の特殊化であること」という制約を緩和し、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/variant/variant.html&#34;&gt;std::variant&lt;/a&gt;&lt;/code&gt;から派生した型も許可&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;に、列挙値を基底型に変換する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/to_underlying.html&#34;&gt;std::to_underlying()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;型情報&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/typeinfo/type_info.html&#34;&gt;std::type_info&lt;/a&gt;&lt;/code&gt;クラスの&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/typeinfo/type_info/op_equal.html&#34;&gt;operator==&lt;/a&gt;&lt;/code&gt;を&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;型特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、スコープ付き列挙型かを判定する型特性&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_scoped_enum.html&#34;&gt;std::is_scoped_enum&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、第1テンプレート引数についている型修飾を第2テンプレート引数の型に付加する型特性として、以下を追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_const.md.nolink&#34;&gt;std::copy_const&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_volatile.md.nolink&#34;&gt;std::copy_volatile&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_cv.md.nolink&#34;&gt;std::copy_cv&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_reference.md.nolink&#34;&gt;std::copy_reference&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_extent.md.nolink&#34;&gt;std::copy_extent&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_all_extents.md.nolink&#34;&gt;std::copy_all_extents&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_pointer.md.nolink&#34;&gt;std::copy_pointer&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_all_pointers.md.nolink&#34;&gt;std::copy_all_pointers&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_cvref.md.nolink&#34;&gt;std::copy_cvref&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、第1テンプレート引数についている型修飾を外す型特性として、以下を追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/remove_all_pointers.md.nolink&#34;&gt;std::remove_all_pointers&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機能の非推奨化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_storage.html&#34;&gt;std::algined_storage&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_union.html&#34;&gt;std::aligned_union&lt;/a&gt;&lt;/code&gt;を非推奨化。これらの機能は未定義動作を引き起こし、間違った保証が行われ、よくないAPI設計が行われていたため、非推奨となる。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_storage.html&#34;&gt;std::algined_storage&lt;/a&gt;&lt;/code&gt;の代わりに&lt;code&gt;alignas(T) &lt;a href=&#34;https://cpprefjp.github.io/reference/cstddef/byte.html&#34;&gt;std::byte&lt;/a&gt;[sizeof(T)];&lt;/code&gt;を使用することを推奨する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_union.html&#34;&gt;std::aligned_union&lt;/a&gt;&lt;/code&gt;の代わりに&lt;code&gt;alignas(Ts...) &lt;a href=&#34;https://cpprefjp.github.io/reference/cstddef/byte.html&#34;&gt;std::byte&lt;/a&gt;[&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/max.html&#34;&gt;std::max&lt;/a&gt;({sizeof(Ts)...})];&lt;/code&gt;を使用することを推奨する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機能の削除&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ガベージコレクションの実装にうまく役立てられなかった、ガベージコレクション実装のサポートをする以下の機能を削除する：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/declare_reachable.html&#34;&gt;std::declare_reachable()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/undeclare_reachable.html&#34;&gt;std::undeclare_reachable()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/declare_no_pointers.html&#34;&gt;std::declare_no_pointers()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/undeclare_no_pointers.html&#34;&gt;std::undeclare_no_pointers()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/get_pointer_safety.html&#34;&gt;std::get_pointer_safety()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/pointer_safety.html&#34;&gt;std::pointer_safety&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__STDCPP_STRICT_POINTER_SAFETY__&lt;/code&gt;マクロ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++ (将来) -- リンクミスを修正</title>
      <link href="https://cpprefjp.github.io/lang/future.html"/>
      <id>d5aee06e6f2d0dafe6d45e8ba775c05e6aa2d7ec:lang/future.md</id>
      <updated>2022-09-29T17:02:33+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C++ (将来)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;ここでは、将来のC++で検討されている機能を紹介する。&lt;/p&gt;
&lt;h2&gt;言語機能&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/future/contract-based_programming.html&#34;&gt;契約に基づくプログラミング&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;事前条件、事後条件、表明を宣言する新たな属性構文を追加&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contract -- リンクミスを修正</title>
      <link href="https://cpprefjp.github.io/reference/contract.html"/>
      <id>d5aee06e6f2d0dafe6d45e8ba775c05e6aa2d7ec:reference/contract.md</id>
      <updated>2022-09-29T17:02:33+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;contract&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;contract&lt;/span&gt;&lt;span class=&#34;cpp future&#34; title=&#34;将来のC++として検討中&#34;&gt;(将来のC++機能)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;contract&amp;gt;&lt;/code&gt;ヘッダでは、&lt;a href=&#34;https://cpprefjp.github.io/lang/future/contract-based_programming.html&#34;&gt;契約違反&lt;/a&gt;のハンドリングのための機能を定義する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/contract/contract_violation.html&#34;&gt;contract_violation&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;契約違反に関する情報 (class)&lt;/td&gt;
&lt;td&gt;C++ (将来)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++ (将来)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 未実装&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: 未実装&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 未実装&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/future/contract-based_programming.html&#34;&gt;契約に基づくプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0542r5.html&#34; target=&#34;_blank&#34;&gt;P0542R5 Support for contract based programming in C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contract_violation -- リンクミスを修正</title>
      <link href="https://cpprefjp.github.io/reference/contract/contract_violation.html"/>
      <id>d5aee06e6f2d0dafe6d45e8ba775c05e6aa2d7ec:reference/contract/contract_violation.md</id>
      <updated>2022-09-29T17:02:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/contract/contract_violation.md b/reference/contract/contract_violation.md
index 0b8d5a584..31ab9b502 100644
--- a/reference/contract/contract_violation.md
+++ b/reference/contract/contract_violation.md
@@ -2,7 +2,7 @@
 * contract[meta header]
 * class[meta id-type]
 * std[meta namespace]
-* cpp23[meta cpp]
+* future[meta cpp]
 
 ```cpp
 namespace std {
@@ -30,11 +30,11 @@ namespace std {
 
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|----------------|
-| [`line_number`](contract_violation/line_number.md.nolink)     | 契約違反が発生したソースコード上の行番号    | C++23 |
-| [`file_name`](contract_violation/file_name.md.nolink)       | 契約違反が発生したソースコードのファイル名  | C++23 |
-| [`function_name`](contract_violation/function_name.md.nolink)   | 契約違反が発生した関数の名前                    | C++23 |
-| [`comment`](contract_violation/comment.md.nolink)         | 契約違反の原因となった述語を説明する処理系定義のテキスト  | C++23 |
-| [`assertion_level`](contract_violation/assertion_level.md.nolink) | 違反した契約のアサーションレベル             | C++23 |
+| [`line_number`](contract_violation/line_number.md.nolink)     | 契約違反が発生したソースコード上の行番号    | C++ (将来) |
+| [`file_name`](contract_violation/file_name.md.nolink)       | 契約違反が発生したソースコードのファイル名  | C++ (将来) |
+| [`function_name`](contract_violation/function_name.md.nolink)   | 契約違反が発生した関数の名前                    | C++ (将来) |
+| [`comment`](contract_violation/comment.md.nolink)         | 契約違反の原因となった述語を説明する処理系定義のテキスト  | C++ (将来) |
+| [`assertion_level`](contract_violation/assertion_level.md.nolink) | 違反した契約のアサーションレベル             | C++ (将来) |
 
 
 ## 例
@@ -45,7 +45,7 @@ namespace std {
 
 ## バージョン
 ### 言語
-- C++23
+- C++ (将来)
 
 ### 処理系
 - [Clang](/implementation.md#clang): 未実装
@@ -54,7 +54,7 @@ namespace std {
 - [Visual C++](/implementation.md#visual_cpp): 未実装
 
 ## 関連項目
-- [契約に基づくプログラミング](/lang/cpp23/contract-based_programming.md)
+- [契約に基づくプログラミング](/lang/future/contract-based_programming.md)
 
 ## 参照
 - [P0542R5 Support for contract based programming in C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0542r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>言語機能 -- C++ (将来) と C++ (廃案) を追加し、契約を将来に移動 #997</title>
      <link href="https://cpprefjp.github.io/lang.html"/>
      <id>74efecd248e658d2bda622c90e6ffbe3ea69d9dd:lang.md</id>
      <updated>2022-09-29T16:54:25+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;言語機能&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;ここでは、C++の言語機能の解説を記載する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11.html&#34;&gt;C++11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14.html&#34;&gt;C++14&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17.html&#34;&gt;C++17&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20.html&#34;&gt;C++20&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23.html&#34;&gt;C++23&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/future.html&#34;&gt;C++ (将来)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/archive.html&#34;&gt;C++ (廃案)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/extension.md.nolink&#34;&gt;言語拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;運営方針&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html&#34;&gt;コンパイラの実装状況ページ&lt;/a&gt;に沿って、言語のバージョンアップによって追加・更新された言語機能を解説する。&lt;/li&gt;
&lt;li&gt;C++全体の言語機能を解説することは、当面の間、目指さない。&lt;ul&gt;
&lt;li&gt;バージョン更新に追従するのが大変であること、量が途方もなくなる、という理由から、できるところからやる。&lt;/li&gt;
&lt;li&gt;C++全体の言語解説を追加する場合には、このページの下に&lt;code&gt;general&lt;/code&gt;階層を作って、そこで作業する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++ (廃案) -- C++ (将来) と C++ (廃案) を追加し、契約を将来に移動 #997</title>
      <link href="https://cpprefjp.github.io/lang/archive.html"/>
      <id>74efecd248e658d2bda622c90e6ffbe3ea69d9dd:lang/archive.md</id>
      <updated>2022-09-29T16:54:25+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C++ (廃案)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;ここでは、廃案になったが記録として残す価値のあるC++機能を紹介する。&lt;/p&gt;
&lt;p&gt;ここで機能を紹介するかどうかは、個別に議論を行う。&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++ (将来) -- C++ (将来) と C++ (廃案) を追加し、契約を将来に移動 #997</title>
      <link href="https://cpprefjp.github.io/lang/future.html"/>
      <id>74efecd248e658d2bda622c90e6ffbe3ea69d9dd:lang/future.md</id>
      <updated>2022-09-29T16:54:25+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C++ (将来)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;ここでは、将来のC++で検討されている機能を紹介する。&lt;/p&gt;
&lt;h2&gt;言語機能&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/contract-based_programming.html&#34;&gt;契約に基づくプログラミング (まだ入っていない)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;事前条件、事後条件、表明を宣言する新たな属性構文を追加&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>契約に基づくプログラミング -- C++ (将来) と C++ (廃案) を追加し、契約を将来に移動 #997</title>
      <link href="https://cpprefjp.github.io/lang/future/contract-based_programming.html"/>
      <id>74efecd248e658d2bda622c90e6ffbe3ea69d9dd:lang/future/contract-based_programming.md</id>
      <updated>2022-09-29T16:54:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/future/contract-based_programming.md b/lang/future/contract-based_programming.md
new file mode 100644
index 000000000..6be82eb06
--- /dev/null
+++ b/lang/future/contract-based_programming.md
@@ -0,0 +1,267 @@
+# 契約に基づくプログラミング
+* future[meta cpp]
+
+## 概要
+将来のC++では、いわゆる[契約プログラミング](https://ja.wikipedia.org/wiki/%E5%A5%91%E7%B4%84%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0)が検討されている。
+
+以下の内容はC++20で予定されていた仕様に基づいており、今後変わる可能性が高い。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;cmath&amp;gt;
+
+double sqrt_checked(double x)
+  [[expects: x &amp;gt; 0]]   // 引数に対する事前条件
+  [[ensures r: r &amp;gt; 0]] // 戻り値に対する事後条件
+{
+  return std::sqrt(x);
+}
+
+int main()
+{
+  double x;
+  std::cin &amp;gt;&amp;gt; x;
+
+  [[assert: x &amp;gt; 0]]; // アサーション
+
+  double y = sqrt_checked(x);
+
+  std::cout &amp;lt;&amp;lt; y &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+
+## 仕様
+
+### 契約属性
+
+契約は[属性](/lang/cpp11/attributes.md)として記述する。C++20では、次の3つの契約属性が導入された：
+
+* `[[expect: 述語]]`：関数に入る際に期待する事前条件を定義する。
+* `[[ensure: 述語]]`：関数から戻る際に期待する事後条件を定義する。
+* `[[assert: 述語]]`：アサーションを定義する。
+
+expectおよびensure属性の述語は、関数の最初の式文と同じセマンティクスで評価される。
+より詳細に言えば、仮引数は見えるがローカル変数は見えない。
+
+述語が例外を送出すると、[`std::terminate()`](/reference/exception/terminate.md)関数を呼び出してプログラムを終了させる。
+
+述語が副作用を持つ場合、動作は未定義である。例えば、グローバル変数の変更、`volatile`変数の参照、変数を変更する可能性のある関数の呼び出しなどが該当する。
+
+```cpp
+// P0542R5より引用
+int x;
+volatile int y;
+
+void f(int n) [[expects: n&amp;gt;x]]; // OK
+void g(int n) [[expects: n&amp;gt;x++]]; // Undefined behavior
+void h(int n) [[expects: n++&amp;gt;0]]; // Undefined behavior
+void j() {
+  int n=3;
+  [[assert: ++n&amp;gt;3]]; // Undefined behavior
+  //...
+}
+void k() [[expects: y&amp;gt;0]]; // Undefined behavior
+```
+* P0542R5[link http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0542r5.html]
+
+```cpp
+// P0542R5より引用
+bool might_increment(int &amp;amp; x);
+
+void f(int n) [[expects: might_increment(n)]]; // Undefined behavior
+
+bool is_valid(int x) {
+  std::cerr &amp;lt;&amp;lt; &amp;#34;checking x\n&amp;#34;;
+  return x&amp;gt;0;
+}
+
+void g(int n) [[expects: is_valid(n)]]; // Undefined behavior
+```
+* P0542R5[link http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0542r5.html]
+
+ただし、関数の中で閉じている局所的な副作用は問題ない。
+
+```cpp
+// P0542R5より引用
+bool is_valid(int x) {
+  int a=1;
+  while (a&amp;lt;x) {
+    if (x % a == 0) return true;
+    a++;
+  }
+  return false;
+}
+
+void f(int n) [[expects: is_valid(x)]]
+```
+* P0542R5[link http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0542r5.html]
+
+### 契約レベルとビルドレベル
+
+契約属性には**契約レベル**を指定できる。
+
+```c++
+[[契約属性名 契約レベル: 述語]]
+```
+
+契約レベルによって契約がチェックされる条件が異なる。
+
+契約レベルには次の3つがある：
+
+* `default`: ビルドレベルが`off`でなければ常にチェックされる。契約レベルを省略した場合は`default`となる。
+* `audit`: ビルドレベルが`audit`の場合のみチェックされる。パフォーマンスへの影響が大きい契約を`audit`にして、普段はチェックしないでおくことができる。
+* `axiom`: チェックされない。主な用途は書式の定まったコメントとして使うことである。
+
+```cpp
+void f(int x)
+  [[expects: x&amp;gt;0]]
+  [[expects audit: is_prime(x)]];
+```
+
+C++20では、プログラムのコンパイルは次の3つのうちどれかの**ビルドレベル**で行われる：
+
+* `off`: 契約はチェックされない。
+* `default`: 契約レベルが`default`の契約がチェックされる。ビルドレベルが明示されない場合は`default`となる。
+* `audit`: 契約レベルが`default`または`audit`の契約がチェックされる。
+
+ビルドレベルを指定する方法は処理系定義である。ただし、ソースコード上で指定する方法は提供されない。
+
+なお、契約がチェックされることと、評価されることは異なる。
+
+* `constexpr`などの定数表現評価では、チェックされた契約のみが評価される。
+* チェックされない契約が評価されるかは未規定である。チェックされない契約が評価され、結果が`false`となった場合の動作は未定義である。
+
+### 違反ハンドラーと違反継続モード
+
+違反ハンドラーは `void(const std::contract_violation&amp;amp;)` という型を持つ関数である(処理系によってはさらに`noexcept`が指定される)。
+
+契約がチェックされ、しかも`false`に評価されたとき、違反ハンドラーが実行される。
+
+プログラムは**違反継続モード**`off`または`on`でコンパイルされる。
+
+* `off` (デフォルト): 違反ハンドラーの実行後、[`std::terminate()`](/reference/exception/terminate.md)関数を呼び出してプログラムを終了させる。
+* `on`: 違反ハンドラーの実行後、プログラムはそのまま続行する。
+
+違反ハンドラーおよび違反継続モードを指定する方法は処理系定義である。
+
+### expect属性
+
+```cpp
+[[expect: 述語]]
+```
+
+この属性は関数宣言の関数型に対して指定する。
+
+述語では、関数の引数を参照できる。
+
+```cpp
+void f(int x)
+  [[expects: x&amp;gt;0]]
+```
+
+expect属性の述語は関数の本体を評価する直前に評価される。関数の本体には、関数tryブロックおよびコンストラクタのメンバ初期化子を含む。
+
+1つの関数に複数のexpect属性がある場合、評価は記述した順になる。
+
+### ensure属性
+
+```cpp
+[[ensure: 述語]]
+[[ensure 識別子: 述語]]
+```
+
+この属性は関数宣言の関数型に対して指定する。
+
+2番目の書式では、指定した識別子で関数の戻り値を参照できる。ただし、C++20の時点では[構造化束縛](/lang/cpp17/structured_bindings.md)はできない。
+
+```cpp
+// P0542R5より引用
+std::tuple f() 
+  [[ensures [x,y]: x&amp;gt;0 &amp;amp;&amp;amp; y.size()&amp;gt;0]]; // エラー
+std::tuple f() 
+  [[ensures r: get&amp;lt;0&amp;gt;(r)&amp;gt;0 &amp;amp;&amp;amp; get&amp;lt;1&amp;gt;(r).size()&amp;gt;0]]; // OK
+```
+* P0542R5[link http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0542r5.html]
+
+ensure属性の述語は関数から戻る直前に評価される。このとき、ローカル変数や一時オブジェクトの寿命はすでに尽きている。
+
+1つの関数に複数のensure属性がある場合、評価は記述した順になる。
+
+### assert属性
+
+```cpp
+[[assert: 述語]]
+```
+
+この属性は空文`;`に対して指定する。結果として、文のように書くことができる。
+
+```cpp
+[[assert: x &amp;gt; 0]];
+```
+
+assert属性の述語は適用先の空文と共に評価される。
+
+### 契約と継承 - Assertion Redeclaration rule
+
+あるクラス内で契約されている関数がそのクラスを継承した別のクラスでオーバーライドされる場合、オーバーライドした関数は少なくとも元の関数になされた契約を遵守しなければならない。より詳細には
+
+- 事前条件：継承元と同じかより弱い（緩い）ものである必要がある
+- 事後条件：継承元と同じかより強い（厳しい）ものである必要がある
+
+これを満たしていない場合、オーバーライドした関数の利用は危険なものになる。  
+この原則はAssertion Redeclaration ruleと呼ばれる。
+
+C++における契約と継承においてもこの原則に従う。  
+契約条件をもつ関数をオーバーライドするとき、オーバーライドした関数にはオーバーライドされた関数と同じ契約条件を指定しなければならない。  
+（この時、その条件が異なっていたとしても対応する契約条件が同じ値（`true or false`）に評価されるならば、診断されない。）
+
+そのような契約条件の指定がされていない場合、オーバーライドされた関数が持つ契約条件が指定されているとみなされる。
+
+すなわち、C++における契約の継承時はAssertion Redeclaration ruleを確実に満たすために常に同じ契約を派生先に要求する。  
+事前条件を緩くしたり、事後条件を厳しくすることは認められない。
+
+```cpp
+struct base {
+  virtual double f(int n)
+    [[expects: n &amp;gt; 0]]
+    [[ensures r: r &amp;gt; 0.0]] = 0;
+
+  virtual int g(int n)
+    [[expects: n &amp;lt; 0]]
+    [[ensures r: r &amp;lt; 0]] = 0;
+};
+
+struct derived : base {
+  //明示的にbase::f()と同じ契約をする
+  double f(int n) override
+    [[expects: n &amp;gt; 0]]
+    [[ensures r: r &amp;gt; 0.0]]
+  {
+    return 1;
+  }
+
+  //暗黙的にbase::g()と同じ契約がされているとみなされる
+  int g(int n) override {
+    return -1;
+  }
+}
+```
+
+## この機能が必要になった背景・経緯
+
+従来は実行時のアサーションとしては[`assert`マクロ](/reference/cassert/assert.md)があるのみだった。
+契約属性はアサーションを含む契約を記述する、マクロを用いない新たな方法として導入された。
+
+特に、戻り値に対する契約は従来の[`assert`マクロ](/reference/cassert/assert.md)では簡潔に書くことができなかった。
+
+なお、[`assert`マクロ](/reference/cassert/assert.md)は関数形式のマクロなので、`[[assert]]`属性を置換してしまうことはない。
+
+## 関連項目
+- [C++11 属性構文](/lang/cpp11/attributes.md)
+- [C++11 コンパイル時アサート](/lang/cpp11/static_assert.md)
+- [`assert`マクロ](/reference/cassert/assert.md)
+
+## 参照
+- [P0542R5 Support for contract based programming in C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0542r5.html)
+- [ET: Inheritance Inheritance and contracts - Eiffel.org](https://www.eiffel.org/doc/eiffel/ET-_Inheritance#Inheritance_and_contracts)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
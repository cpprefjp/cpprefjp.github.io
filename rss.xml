<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-06-07T09:56:16.643522</updated>
  <id>62d76699-f259-4163-8260-66471d7279b8</id>

  
    <entry>
      <title>type_traits -- P1413R2 -&gt; P1413R3</title>
      <link href="https://cpprefjp.github.io/reference/type_traits.html"/>
      <id>05d6b67e43a136c1b3146e1d6560d50870270188:reference/type_traits.md</id>
      <updated>2023-06-07T18:51:07+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;type_traits&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;type_traits&amp;gt;&lt;/code&gt;ヘッダでは、型の特性を判定、操作するためのクラスを定義する。&lt;/p&gt;
&lt;p&gt;このライブラリに含まれるクラステンプレートは、メタ関数(meta function)と呼ばれている。&lt;/p&gt;
&lt;p&gt;本ヘッダはフリースタンディング環境でも提供される。&lt;/p&gt;
&lt;h2&gt;ヘルパークラス&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/integral_constant.html&#34;&gt;integral_constant&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定数を表す型 (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/bool_constant.html&#34;&gt;bool_constant&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;真理値型の定数を表す型 (class template)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/true_type.html&#34;&gt;true_type&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;を表す型 (type-alias)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/false_type.html&#34;&gt;false_type&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;を表す型 (type-alias)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;基本的な型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_void.html&#34;&gt;is_void&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が&lt;code&gt;void&lt;/code&gt;型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_null_pointer.html&#34;&gt;is_null_pointer&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が&lt;code&gt;nullptr_t&lt;/code&gt;型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_integral.html&#34;&gt;is_integral&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が整数型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_floating_point.html&#34;&gt;is_floating_point&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が浮動小数点型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_array.html&#34;&gt;is_array&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が配列型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_pointer.html&#34;&gt;is_pointer&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がポインタ型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_lvalue_reference.html&#34;&gt;is_lvalue_reference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が左辺値参照型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_rvalue_reference.html&#34;&gt;is_rvalue_reference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が右辺値参照型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_member_object_pointer.html&#34;&gt;is_member_object_pointer&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がメンバ変数へのポインタ型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_member_function_pointer.html&#34;&gt;is_member_function_pointer&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がメンバ関数へのポインタ型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_enum.html&#34;&gt;is_enum&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が列挙型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_union.html&#34;&gt;is_union&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が共用型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_class.html&#34;&gt;is_class&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がクラス型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_function.html&#34;&gt;is_function&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が関数型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;組み合わせた型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_reference.html&#34;&gt;is_reference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が参照型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_arithmetic.html&#34;&gt;is_arithmetic&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が算術型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_fundamental.html&#34;&gt;is_fundamental&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が単純型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_object.html&#34;&gt;is_object&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がオブジェクト型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_scalar.html&#34;&gt;is_scalar&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がスカラ型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_compound.html&#34;&gt;is_compound&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が複合型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_member_pointer.html&#34;&gt;is_member_pointer&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がメンバポインタ型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_scoped_enum.html&#34;&gt;is_scoped_enum&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がスコープ付きの列挙型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;型の特性&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_const.html&#34;&gt;is_const&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が&lt;code&gt;const&lt;/code&gt;修飾型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_volatile.html&#34;&gt;is_volatile&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が&lt;code&gt;volatile&lt;/code&gt;修飾型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_trivial.html&#34;&gt;is_trivial&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアル型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_trivially_copyable.html&#34;&gt;is_trivially_copyable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアルコピー可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_standard_layout.html&#34;&gt;is_standard_layout&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がスタンダードレイアウト型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_pod.html&#34;&gt;is_pod&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がPOD型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;br /&gt;C++20から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_literal_type.html&#34;&gt;is_literal_type&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がリテラル型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;br /&gt; C++17から非推奨&lt;br /&gt; C++20で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_empty.html&#34;&gt;is_empty&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が空のクラスか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_polymorphic.html&#34;&gt;is_polymorphic&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が多相的クラスか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_abstract.html&#34;&gt;is_abstract&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が抽象クラスか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_final.html&#34;&gt;is_final&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型に&lt;code&gt;final&lt;/code&gt;が付いているかを調べる (class template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_aggregate.html&#34;&gt;is_aggregate&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が集成体かを調べる (class template)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_signed.html&#34;&gt;is_signed&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が符号付き算術型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_unsigned.html&#34;&gt;is_unsigned&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が符号無し算術型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_bounded_array.html&#34;&gt;is_bounded_array&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が要素数の判明している配列型かを調べる (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_unbounded_array.html&#34;&gt;is_unbounded_array&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が要素数の不明な配列型かを調べる (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_constructible.html&#34;&gt;is_constructible&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型のコンストラクタ呼出しが適格か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_default_constructible.html&#34;&gt;is_default_constructible&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がデフォルト構築可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_copy_constructible.html&#34;&gt;is_copy_constructible&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がコピー構築可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_move_constructible.html&#34;&gt;is_move_constructible&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がムーブ構築可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_assignable.html&#34;&gt;is_assignable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が代入可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_copy_assignable.html&#34;&gt;is_copy_assignable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がコピー代入可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_move_assignable.html&#34;&gt;is_move_assignable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がムーブ代入可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_destructible.html&#34;&gt;is_destructible&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が破棄可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_trivially_constructible.html&#34;&gt;is_trivially_constructible&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアルに構築可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_trivially_default_constructible.html&#34;&gt;is_trivially_default_constructible&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアルにデフォルト構築可能かを調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_trivially_copy_constructible.html&#34;&gt;is_trivially_copy_constructible&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアルにコピー構築可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_trivially_move_constructible.html&#34;&gt;is_trivially_move_constructible&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアルにムーブ構築可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_trivially_assignable.html&#34;&gt;is_trivially_assignable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアルに代入可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_trivially_copy_assignable.html&#34;&gt;is_trivially_copy_assignable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアルにコピー代入可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_trivially_move_assignable.html&#34;&gt;is_trivially_move_assignable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアルにムーブ代入可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_trivially_destructible.html&#34;&gt;is_trivially_destructible&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアルに破棄可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_constructible.html&#34;&gt;is_nothrow_constructible&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型のコンストラクタ呼出しが適格であり、かつそのコンストラクタが例外を投げないか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_default_constructible.html&#34;&gt;is_nothrow_default_constructible&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がデフォルト構築でき、かつそのデフォルトコンストラクタが例外を投げないか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_copy_constructible.html&#34;&gt;is_nothrow_copy_constructible&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がコピー構築でき、かつそのコピーコンストラクタが例外を投げないか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_move_constructible.html&#34;&gt;is_nothrow_move_constructible&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がムーブ構築でき、かつそのムーブコンストラクタが例外を投げないか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_assignable.html&#34;&gt;is_nothrow_assignable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型の代入演算子呼び出しが適格であり、かつその代入演算子が例外を投げないか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_copy_assignable.html&#34;&gt;is_nothrow_copy_assignable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がコピー代入でき、かつそのコピー代入演算子が例外を投げないか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_move_assignable.html&#34;&gt;is_nothrow_move_assignable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型がムーブ代入でき、かつそのムーブ代入演算子が例外を投げないか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_destructible.html&#34;&gt;is_nothrow_destructible&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が破棄でき、かつそのデストラクタが例外を投げないか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/has_virtual_destructor.html&#34;&gt;has_virtual_destructor&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が仮想デストラクタを持っているか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_swappable_with.html&#34;&gt;is_swappable_with&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ある型とほかの型の値とがswap関数で入れ替え可能かを調べる (class template)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_swappable.html&#34;&gt;is_swappable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ある型の値がswap関数で入れ替え可能かを調べる (class template)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_swappable_with.html&#34;&gt;is_nothrow_swappable_with&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ある型とほかの型の値とが例外を投げずにswap関数で入れ替え可能かを調べる (class template)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_swappable.html&#34;&gt;is_nothrow_swappable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ある型の値が例外を投げずにswap関数で入れ替え可能かを調べる (class template)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/has_unique_object_representations.html&#34;&gt;has_unique_object_representations&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ある型のバイト表現をそのままハッシュとして利用できるかを調べる (class template)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;型の特性についての問い合わせ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/alignment_of.html&#34;&gt;alignment_of&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型のアライメントを取得する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/rank.html&#34;&gt;rank&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;配列型の次元数を取得する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/extent.html&#34;&gt;extent&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;配列型の&lt;code&gt;i&lt;/code&gt;番目の次元の要素数を取得する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;型の関係&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_same.html&#34;&gt;is_same&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;二つの型が同じ型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_base_of.html&#34;&gt;is_base_of&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ある型が別の型の基底クラスか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_convertible.html&#34;&gt;is_convertible&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ある型から別の型へ変換可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_convertible.html&#34;&gt;is_nothrow_convertible&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ある型から別の型へ、例外を投げずに変換可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_layout_compatible.html&#34;&gt;is_layout_compatible&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つの型にレイアウト互換があるかを判定する (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_pointer_interconvertible_base_of.html&#34;&gt;is_pointer_interconvertible_base_of&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;基底クラスと派生クラスの間でポインタ相互交換可能かを判定する (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/reference_constructs_from_temporary.html&#34;&gt;reference_constructs_from_temporary&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参照が一時オブジェクトを直接初期化（丸括弧による初期化）で束縛した時、一時オブジェクトの寿命が延長されているかを判定する (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/reference_converts_from_temporary.html&#34;&gt;reference_converts_from_temporary&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参照が一時オブジェクトをコピー初期化（代入形式による初期化）で束縛した時、一時オブジェクトの寿命が延長されているかを判定する (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;const-volatile の変更&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/remove_const.html&#34;&gt;remove_const&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型の&lt;code&gt;const&lt;/code&gt;修飾を除去する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/remove_volatile.html&#34;&gt;remove_volatile&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型の&lt;code&gt;volatile&lt;/code&gt;修飾を除去する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/remove_cv.html&#34;&gt;remove_cv&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型の&lt;code&gt;const-volatile&lt;/code&gt;修飾を除去する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/add_const.html&#34;&gt;add_const&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型を&lt;code&gt;const&lt;/code&gt;修飾する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/add_volatile.html&#34;&gt;add_volatile&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型を&lt;code&gt;volatile&lt;/code&gt;修飾する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/add_cv.html&#34;&gt;add_cv&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型を&lt;code&gt;const-volatile&lt;/code&gt;修飾する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照の変更&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/remove_reference.html&#34;&gt;remove_reference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型から参照を除去する(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/add_lvalue_reference.html&#34;&gt;add_lvalue_reference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型に左辺値参照を追加する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/add_rvalue_reference.html&#34;&gt;add_rvalue_reference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型に右辺値参照を追加する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;符号の変更&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/make_signed.html&#34;&gt;make_signed&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;整数型を符号付きにする (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/make_unsigned.html&#34;&gt;make_unsigned&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;整数型を符号なしにする (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;配列の変更&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/remove_extent.html&#34;&gt;remove_extent&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;配列型から次元を除去する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/remove_all_extents.html&#34;&gt;remove_all_extents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;配列型から全ての次元を除去する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ポインタの変更&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/add_pointer.html&#34;&gt;add_pointer&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型にポインタを追加する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/remove_pointer.html&#34;&gt;remove_pointer&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型からポインタを除去する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;関数呼び出しに関連した特性&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_invocable.html&#34;&gt;is_invocable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数呼び出し可能かを調べる (class template)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_invocable_r.html&#34;&gt;is_invocable_r&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数呼び出し可能でその戻り値型がある型へ変換可能かを調べる (class template)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_invocable.html&#34;&gt;is_nothrow_invocable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;例外を投げずに関数呼び出し可能かを調べる (class template)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_invocable_r.html&#34;&gt;is_nothrow_invocable_r&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;例外を投げずに関数呼び出し可能でその戻り値型がある型へ変換可能かを調べる (class template)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;その他の変換&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/type_identity.html&#34;&gt;type_identity&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;受け取った型を返す (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_storage.html&#34;&gt;aligned_storage&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アライメント調整された領域を作る (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;br /&gt;C++23で非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_union.html&#34;&gt;aligned_union&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アライメント調整された共用体領域を作る (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;br /&gt;C++23で非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/remove_cvref.html&#34;&gt;remove_cvref&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型の&lt;code&gt;const-volatile&lt;/code&gt;修飾と参照を除去する (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/decay.html&#34;&gt;decay&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;配列と関数ポインタに関して、関数テンプレートと同様に推論された型を取得する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/enable_if.html&#34;&gt;enable_if&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時条件式が真の場合のみ有効な型 (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/conditional.html&#34;&gt;conditional&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時条件式 (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/common_type.html&#34;&gt;common_type&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;変換可能な共通の型を取得する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/void_t.html&#34;&gt;void_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意の型をvoidへ変換する (type-alias)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/basic_common_reference.html&#34;&gt;basic_common_reference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;common_reference&lt;/code&gt;へアダプトする (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/common_reference.html&#34;&gt;common_reference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;共通の参照型を取得する (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/underlying_type.html&#34;&gt;underlying_type&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;列挙型の基底型を取得する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/result_of.html&#34;&gt;result_of&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数の戻り値の型を取得する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/invoke_result.html&#34;&gt;invoke_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数の戻り値の型を取得する (class template)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/unwrap_reference.html&#34;&gt;unwrap_reference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/reference_wrapper.html&#34;&gt;reference_wrapper&amp;lt;T&amp;gt;&lt;/a&gt;&lt;/code&gt;型を&lt;code&gt;T&amp;amp;&lt;/code&gt;型に展開する (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/unwrap_ref_decay.html&#34;&gt;unwrap_ref_decay&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/reference_wrapper.html&#34;&gt;reference_wrapper&amp;lt;T&amp;gt;&lt;/a&gt;&lt;/code&gt;型を&lt;code&gt;T&amp;amp;&lt;/code&gt;型に展開し、型推論規則による型変換を行う (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;論理演算&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/conjunction.html&#34;&gt;conjunction&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;特性の論理積を求める (class template)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/disjunction.html&#34;&gt;disjunction&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;特性の論理和を求める (class template)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/negation.html&#34;&gt;negation&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;特性の論理否定を求める (class template)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバの関係性&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_pointer_interconvertible_with_class.html&#34;&gt;is_pointer_interconvertible_with_class&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メンバポインタとクラスの間でポインタ相互交換可能かを判定する&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_corresponding_member.html&#34;&gt;is_corresponding_member&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのメンバポインタが互換な共通位置にあるかを判定する&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;コンパイル時評価&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_constant_evaluated.html&#34;&gt;is_constant_evaluated&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;呼び出された時、その呼び出しがコンパイル時に行われているかを判定する&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このヘッダで定義されるテンプレートは、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/common_type.html&#34;&gt;std::common_type&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/basic_common_reference.html&#34;&gt;std::basic_common_reference&lt;/a&gt;&lt;/code&gt;を除いて、ユーザーが特殊化を追加することを禁止している&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1345.html&#34; target=&#34;_blank&#34;&gt;N1345 A Proposal to add Type Traits to the Standard Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1424.htm&#34; target=&#34;_blank&#34;&gt;N1424 A Proposal to add Type Traits to the Standard Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/type_traits/doc/html/index.html&#34; target=&#34;_blank&#34;&gt;Boost Type Traits Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/tips/type_traits.html&#34; target=&#34;_blank&#34;&gt;型特性 - Boost逆引きリファレンス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wg21.cmeerw.net/lwg/issue2581&#34; target=&#34;_blank&#34;&gt;LWG Issue 2581. Specialization of &lt;code&gt;&amp;lt;type_traits&amp;gt;&lt;/code&gt; variable templates should be prohibited&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++14までは&lt;code&gt;&amp;lt;type_traits&amp;gt;&lt;/code&gt;で定義されるクラステンプレートの特殊化を禁止していたが、C++17で定義される変数テンプレートも特殊化の禁止対象とされた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1413r3.pdf&#34; target=&#34;_blank&#34;&gt;P1413R3 Deprecate &lt;code&gt;std::aligned_storage&lt;/code&gt; and &lt;code&gt;std::aligned_union&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>aligned_storage -- P1413R2 -&gt; P1413R3</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/aligned_storage.html"/>
      <id>05d6b67e43a136c1b3146e1d6560d50870270188:reference/type_traits/aligned_storage.md</id>
      <updated>2023-06-07T18:51:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/aligned_storage.md b/reference/type_traits/aligned_storage.md
index 67fdfa67f..688a1a3e2 100644
--- a/reference/type_traits/aligned_storage.md
+++ b/reference/type_traits/aligned_storage.md
@@ -215,5 +215,5 @@ int main()
     - C++14で`aligned_storage_t`が定義された
 - [P0767R1 Deprecate POD](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0767r1.html)
     - C++20でPOD用語の非推奨化にともない、メンバ型`type`がPOD型ではなくトリビアル型に分類されるよう規定が変更された
-- [P1413R2 Deprecate `std::aligned_storage` and `std::aligned_union`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1413r2.pdf)
+- [P1413R3 Deprecate `std::aligned_storage` and `std::aligned_union`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1413r3.pdf)
     - C++23でこの機能が非推奨となった
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>aligned_union -- P1413R2 -&gt; P1413R3</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/aligned_union.html"/>
      <id>05d6b67e43a136c1b3146e1d6560d50870270188:reference/type_traits/aligned_union.md</id>
      <updated>2023-06-07T18:51:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/aligned_union.md b/reference/type_traits/aligned_union.md
index 5cc614be9..840f4e410 100644
--- a/reference/type_traits/aligned_union.md
+++ b/reference/type_traits/aligned_union.md
@@ -132,5 +132,5 @@ hello
 - [LWG Issue 2979. `aligned_union` should require complete object types](https://wg21.cmeerw.net/lwg/issue2979)
 - [P0767R1 Deprecate POD](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0767r1.html)
     - C++20でPOD用語の非推奨化にともない、メンバ型`type`がPOD型ではなくトリビアル型に分類されるよう規定が変更された
-- [P1413R2 Deprecate `std::aligned_storage` and `std::aligned_union`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1413r2.pdf)
+- [P1413R3 Deprecate `std::aligned_storage` and `std::aligned_union`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1413r3.pdf)
     - C++23でこの機能が非推奨となった
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>generator -- generator: P2787R1対応</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator.html"/>
      <id>f016e5bd22ff018f840da9de5698acce5d6e993e:reference/generator/generator.md</id>
      <updated>2023-06-07T18:41:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator.md b/reference/generator/generator.md
index 70e949cc5..8b8ada27b 100644
--- a/reference/generator/generator.md
+++ b/reference/generator/generator.md
@@ -10,6 +10,11 @@ namespace std {
   class generator : public ranges::view_interface&amp;lt;generator&amp;lt;Ref, V, Allocator&amp;gt;&amp;gt; {
     ...
   }
+
+  namespace pmr {
+    template&amp;lt;class R, class V = void&amp;gt;
+    using generator = std::generator&amp;lt;R, V, polymorphic_allocator&amp;lt;&amp;gt;&amp;gt;;
+  }
 }
 ```
 * ranges::view_interface[link /reference/ranges/view_interface.md]
@@ -294,5 +299,6 @@ int main()
 
 ## 参照
 - [P2502R2 `std::generator`: Synchronous Coroutine Generator for Ranges](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2502r2.pdf)
+- [P2787R1 pmr::generator - Promise Types are not Values](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2787r1.pdf)
 - [P0981R0 Halo: coroutine Heap Allocation eLision Optimization: the joint response](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0981r0.html)
     - ジェネレータコルーチン実装において、動的メモリ確保が省略最適化される条件の議論。`std::generator`の設計に反映されている。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>limits -- P2614R2対応 (#1145)</title>
      <link href="https://cpprefjp.github.io/reference/limits.html"/>
      <id>4476acb905f114be0c9850595fc37a7fa486617a:reference/limits.md</id>
      <updated>2023-06-07T18:26:38+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;limits&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;limits&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;limits&amp;gt;&lt;/code&gt;ヘッダでは、算術型の実装プロパティを取得するための機能を提供する。&lt;/p&gt;
&lt;p&gt;本ヘッダはフリースタンディング環境でも提供される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/limits/numeric_limits.html&#34;&gt;numeric_limits&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;算術型の性質(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/limits/float_round_style.html&#34;&gt;float_round_style&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;浮動小数点数の丸め形式に関する列挙値(enum)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/limits/float_denorm_style.html&#34;&gt;float_denorm_style&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非正規数のサポートに関する列挙値(enum)&lt;/td&gt;
&lt;td&gt;C++23で非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>float_denorm_style -- P2614R2対応 (#1145)</title>
      <link href="https://cpprefjp.github.io/reference/limits/float_denorm_style.html"/>
      <id>4476acb905f114be0c9850595fc37a7fa486617a:reference/limits/float_denorm_style.md</id>
      <updated>2023-06-07T18:26:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/float_denorm_style.md b/reference/limits/float_denorm_style.md
index 2fea59e74..578258c28 100644
--- a/reference/limits/float_denorm_style.md
+++ b/reference/limits/float_denorm_style.md
@@ -2,6 +2,7 @@
 * limits[meta header]
 * std[meta namespace]
 * enum[meta id-type]
+* cpp23deprecated[meta cpp]
 
 ```cpp
 namespace std {
@@ -13,6 +14,8 @@ namespace std {
 }
 ```
 
+この型を返すメンバ変数がC++23にて非推奨化されるため、列挙型も非推奨とされる。
+
 `std::float_denorm_style`列挙型は、非正規化数(Denormal Number)のサポートに関する情報のための列挙値を提供する。
 
 | 列挙値                 | 説明                                       |
@@ -22,3 +25,5 @@ namespace std {
 | `denorm_present`       | 値型が非正規化数を許可する                 |
 
 
+## 参照
+- [P2614R2 Deprecate `numeric_limits::has_denorm`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2614r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>numeric_limits -- P2614R2対応 (#1145)</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits.html"/>
      <id>4476acb905f114be0c9850595fc37a7fa486617a:reference/limits/numeric_limits.md</id>
      <updated>2023-06-07T18:26:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits.md b/reference/limits/numeric_limits.md
index 54760b3cc..e97b2017a 100644
--- a/reference/limits/numeric_limits.md
+++ b/reference/limits/numeric_limits.md
@@ -64,8 +64,8 @@ namespace std {
 | [`has_infinity`](numeric_limits/has_infinity.md)           | 正の無限表現を持っているかを判定する | |
 | [`has_quiet_NaN`](numeric_limits/has_quiet_nan.md)         | シグナルを発生させないNaNを持っているかを判定する | |
 | [`has_signaling_NaN`](numeric_limits/has_signaling_nan.md) | シグナルを発生させるNaNを持っているかを判定する | |
-| [`has_denorm`](numeric_limits/has_denorm.md)               | 非正規化数のサポート状況を判定する | |
-| [`has_denorm_loss`](numeric_limits/has_denorm_loss.md)     | 精度の損失が非正規化数によるものかを判定する | |
+| [`has_denorm`](numeric_limits/has_denorm.md)               | 非正規化数のサポート状況を判定する | C++23で非推奨 |
+| [`has_denorm_loss`](numeric_limits/has_denorm_loss.md)     | 精度の損失が非正規化数によるものかを判定する | C++23で非推奨 |
 | [`infinity()`](numeric_limits/infinity.md)                 | 正の無限表現を取得する | |
 | [`quiet_NaN()`](numeric_limits/quiet_nan.md)               | シグナルを発生させないNaNを取得する | |
 | [`signaling_NaN()`](numeric_limits/signaling_nan.md)       | シグナルを発生させるNaNを取得する | |
@@ -81,4 +81,4 @@ namespace std {
 ## 参照
 - [N2114 `long long` Goes to the Library, Revision 1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2114.html)
 - [LWG Issue 559. `numeric_limits&amp;lt;const T&amp;gt;`](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#559)
-
+- [P2614R2 Deprecate `numeric_limits::has_denorm`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2614r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>denorm_min -- P2614R2対応 (#1145)</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/denorm_min.html"/>
      <id>4476acb905f114be0c9850595fc37a7fa486617a:reference/limits/numeric_limits/denorm_min.md</id>
      <updated>2023-06-07T18:26:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/denorm_min.md b/reference/limits/numeric_limits/denorm_min.md
index f134185d7..9ac1aa966 100644
--- a/reference/limits/numeric_limits/denorm_min.md
+++ b/reference/limits/numeric_limits/denorm_min.md
@@ -22,7 +22,8 @@ static constexpr T denorm_min() noexcept; // (1) C++11
 
 
 ## 戻り値
-最小の正の非正規化数
+非正規化数をサポートするならば、最小の正の非正規化数。
+そうでなければ、最小の正の正規化数。
 
 
 ## 例外
@@ -51,7 +52,11 @@ float : 1.4013e-045
 double : 4.94066e-324
 ```
 
-## 参照
+
+## 関連項目
 * [`numeric_limits::has_denorm`](has_denorm.md)
 * [`numeric_limits::has_denorm_loss`](has_denorm_loss.md)
 
+
+## 参照
+- [P2614R2 Deprecate `numeric_limits::has_denorm`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2614r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>has_denorm -- P2614R2対応 (#1145)</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/has_denorm.html"/>
      <id>4476acb905f114be0c9850595fc37a7fa486617a:reference/limits/numeric_limits/has_denorm.md</id>
      <updated>2023-06-07T18:26:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/has_denorm.md b/reference/limits/numeric_limits/has_denorm.md
index 3ed1db591..f355ceb1f 100644
--- a/reference/limits/numeric_limits/has_denorm.md
+++ b/reference/limits/numeric_limits/has_denorm.md
@@ -3,6 +3,7 @@
 * std[meta namespace]
 * numeric_limits[meta class]
 * variable[meta id-type]
+* cpp23deprecated[meta cpp]
 
 ```cpp
 // C++03
@@ -71,7 +72,6 @@ float : present
 double : present
 ```
 
-## 参照
-* [`float_denorm_style`](../float_denorm_style.md)
-
 
+## 参照
+- [P2614R2 Deprecate `numeric_limits::has_denorm`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2614r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>has_denorm_loss -- P2614R2対応 (#1145)</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/has_denorm_loss.html"/>
      <id>4476acb905f114be0c9850595fc37a7fa486617a:reference/limits/numeric_limits/has_denorm_loss.md</id>
      <updated>2023-06-07T18:26:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/has_denorm_loss.md b/reference/limits/numeric_limits/has_denorm_loss.md
index 947b3eb8b..f16a0b5e3 100644
--- a/reference/limits/numeric_limits/has_denorm_loss.md
+++ b/reference/limits/numeric_limits/has_denorm_loss.md
@@ -3,6 +3,7 @@
 * std[meta namespace]
 * numeric_limits[meta class]
 * variable[meta id-type]
+* cpp23deprecated[meta cpp]
 
 ```cpp
 // C++03
@@ -43,3 +44,5 @@ double : false
 ```
 
 
+## 参照
+- [P2614R2 Deprecate `numeric_limits::has_denorm`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2614r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cpprefjp - C++日本語リファレンス -- タグの書き間違いを修正</title>
      <link href="https://cpprefjp.github.io/index.html"/>
      <id>86be6a9acac38fb842a093948e9ee02679a267eb:index.md</id>
      <updated>2023-06-07T13:09:46+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;cpprefjp - C++日本語リファレンス&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本サイトcpprefjpは、プログラミング言語C++のリファレンスを提供するWebサイトです。&lt;/p&gt;
&lt;p&gt;最新C++バージョンのリファレンスを提供していきます。&lt;/p&gt;
&lt;h2&gt;運営方針&lt;/h2&gt;
&lt;p&gt;本リファレンスサイトは、C++言語の最新のリファレンスを常に提供し続けることを目標にしています。&lt;/p&gt;
&lt;p&gt;各クラス、関数にはそれぞれ1つ以上のサンプルコードを付けていく方針です。&lt;/p&gt;
&lt;p&gt;本サイトでは、他サイトおよび規格書の直接的な翻訳ではなく、編集者の調査と考えに基づいた解説を提供していきます。&lt;/p&gt;
&lt;h2&gt;スポンサーシップ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/cpprefjp&#34; target=&#34;_blank&#34;&gt;cpprefjp - Open Collective&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このプロジェクトは、持続的な活動のため、ユーザーの方々からのご支援をお待ちしております。上記Open Collectiveのプロジェクトでスポンサーシップの募集をしております。&lt;/p&gt;
&lt;p&gt;ご支援いただくユーザーの方々は、本ページ (cpprefjpサイトのトップページ) に、金額順でロゴを表示させていただきます (金額が同じ場合は登録順)。ご支援いただいた資金は、貢献度に応じてコントリビューターに分配させていただきます。&lt;/p&gt;
&lt;h2&gt;参加方法&lt;/h2&gt;
&lt;p&gt;本サイトは、多くのユーザの手によって書かれています。&lt;/p&gt;
&lt;p&gt;あなたがこの cpprefjp プロジェクトに参加したいのであれば、私達はそれをとても歓迎します。&lt;/p&gt;
&lt;p&gt;cpprefjp プロジェクトに参加する方法は簡単です。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site/issues?state=open&#34; target=&#34;_blank&#34;&gt;cpprefjp の Issues&lt;/a&gt; にアクセスし、&lt;/li&gt;
&lt;li&gt;あなたが手伝えそうな、まだ誰にもアサインされていないタスクを見つけ、&lt;/li&gt;
&lt;li&gt;その Issue のコメントに「このタスクやります」と書く&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これだけです。&lt;/p&gt;
&lt;p&gt;あとは、そのタスクを完了させて pull request を送れば、あなたも cpprefjp のコミッタになれます。&lt;/p&gt;
&lt;h2&gt;編集者向けのさらなる情報&lt;/h2&gt;
&lt;p&gt;本サイトは、GitHubのリポジトリ上で、Markdown形式でリファレンスを記載し、GitHub Pagesに自動反映するという形をとっています。本サイトのMarkdownソースは、以下のリポジトリにあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site&#34; target=&#34;_blank&#34;&gt;https://github.com/cpprefjp/site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記リポジトリのREADMEに、コアメンバの一覧を記載してありますので、何かありましたらそのうちの誰か、もしくはリポジトリへのIssueという形でご相談ください。&lt;/p&gt;
&lt;p&gt;本サイトの編集方法については、以下のドキュメントを参照してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/start_editing.html&#34;&gt;cpprefjpを編集するには&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本サイトのコンテンツを作成、編集するにあたり、仕様を熟知し、一人で完璧に正しい内容を書くことは要求しません。&lt;/p&gt;
&lt;p&gt;たとえ間違ったことを記載した場合や、不安の残る内容を記載した場合でも、それに気づいた誰かが修正してくれます。&lt;/p&gt;
&lt;h2&gt;その他参考情報&lt;/h2&gt;
&lt;p&gt;以下のWebサイトから転載許可をいただいています。&lt;/p&gt;
&lt;p&gt;翻訳や解説などで活用してください：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20190112041213/http://episteme.wankuma.com/stlprog/index.html&#34; target=&#34;_blank&#34;&gt;Standard Template Library プログラミング on the Web&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;スポンサー&lt;/h2&gt;
&lt;p&gt;cpprefjpプロジェクトは、以下の方々にスポンサーになっていただいております。&lt;/p&gt;
&lt;h3&gt;シルバースポンサー&lt;/h3&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.fixstars.com/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;Fixstars&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/sponsors/Fixstars/fixstars-logo.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://acerola-software.jp/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;Acerola Software&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/sponsors/Acerola/as_logo.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://vaporoid.com/sys/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;vaporoid&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/sponsors/vaporoid/cpprefjp-400x150.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.cube-soft.jp/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;CubeSoft&#34; src=&#34;https://raw.githubusercontent.com/cube-soft/cube.assets/master/home/banner/large.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://mkohana.github.io/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;M.Kohana&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/sponsors/m_kohana/m_kohana.jpg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;ブロンズスポンサー&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;イシハラユウヤ様&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/meg_nakagami&#34; target=&#34;_blank&#34;&gt;Megumi Nakagami様&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://github.com/minachun/minachun&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;minachun / J.Minami&#34; src=&#34;https://raw.githubusercontent.com/minachun/minachun/main/banner.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;一時スポンサー&lt;/h3&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://opencollective.com/odan&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;odan&#34; src=&#34;https://odan.dev/icon.jpeg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/hashitaku&#34; target=&#34;_blank&#34;&gt;Hashitaku様&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;img alt=&#34;yukika2e&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/sponsors/yukika2e/yukika2e.png&#34; /&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;スポンサーシップについては、以下のページを参照ください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/cpprefjp&#34; target=&#34;_blank&#34;&gt;cpprefjp - Open Collective&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;連絡先が不明なスポンサー様は、ロゴの表示が現在できておりません。Open Collectiveの問い合わせフォームから、表示するロゴ画像とリンク先URLについてご連絡いただきたいです。&lt;/p&gt;
&lt;h2&gt;プライバシーポリシー&lt;/h2&gt;
&lt;p&gt;本サイトは、サイトの改善のためにGoogleアナリティクスを使用しています。本サイトをご利用中のブラウザは、Googleに特定の情報を自動的に送信します。本サイトは、この分析のためにCookieを使用します。利用者は、本サイトを利用することで、この目的においてCookieを使用することを許可したものとみなします。&lt;/p&gt;
&lt;p&gt;Googleによるデータ使用の詳細は、以下のURLで確認することができます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.google.com/intl/ja/policies/privacy/partners/&#34; target=&#34;_blank&#34;&gt;https://www.google.com/intl/ja/policies/privacy/partners/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ライセンスについて&lt;/h2&gt;
&lt;p&gt;本サイトの情報は、&lt;a href=&#34;https://creativecommons.org/licenses/by/3.0/&#34; target=&#34;_blank&#34;&gt;クリエイティブ・コモンズ 表示 3.0 非移植 ライセンス(CC BY)&lt;/a&gt;の下に提供しています。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://i.creativecommons.org/l/by/3.0/88x31.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;cpprefjpサイトのアイコン・ロゴ画像は、&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/deed.ja&#34; target=&#34;_blank&#34;&gt;クリエイティブ・コモンズ 表示 - 非営利 - 改変禁止 4.0 国際 (CC BY-NC-ND 4.0)&lt;/a&gt;の下に提供しています。&lt;/p&gt;
&lt;p&gt;高解像度画像データ： &lt;a href=&#34;https://github.com/cpprefjp/image/tree/master/cpprefjp/icon&#34; target=&#34;_blank&#34;&gt;cpprefjp/image&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://licensebuttons.net/l/by-nc-nd/4.0/88x31.png&#34; /&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cpprefjp - C++日本語リファレンス -- スポンサー更新</title>
      <link href="https://cpprefjp.github.io/index.html"/>
      <id>dc8afeb80e6ddd381b69bc2183821e7147e07465:index.md</id>
      <updated>2023-06-07T13:03:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/index.md b/index.md
index 48ecb58ac..faa249045 100644
--- a/index.md
+++ b/index.md
@@ -91,6 +91,8 @@ cpprefjpプロジェクトは、以下の方々にスポンサーになってい
 
 ### 一時スポンサー
 
+&amp;lt;div style=&amp;#34;text-align: center&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;https://opencollective.com/odan&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;https://odan.dev/icon.jpeg&amp;#34; alt=&amp;#34;odan&amp;#34;/ width=&amp;#34;320&amp;#34;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
+
 - [Hashitaku様](https://opencollective.com/hashitaku)
 
 &amp;lt;div style=&amp;#34;text-align: center&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;https://github.com/cpprefjp/image/raw/master/sponsors/yukika2e/yukika2e.png&amp;#34; alt=&amp;#34;yukika2e&amp;#34;/&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-03-10T08:39:59.182439</updated>
  <id>cc993972-2b56-4027-8256-dbdef40bb5e8</id>

  
    <entry>
      <title>leap_second -- leap_second : 説明とサンプルコードを追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/leap_second.html"/>
      <id>a4589cdbbc1c4bcae05ff205ace4e2b5db7ae18a:reference/chrono/leap_second.md</id>
      <updated>2020-03-10T17:36:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/leap_second.md b/reference/chrono/leap_second.md
index 33730ecc7..42093f283 100644
--- a/reference/chrono/leap_second.md
+++ b/reference/chrono/leap_second.md
@@ -11,10 +11,12 @@ namespace std::chrono {
 ```
 
 ## 概要
-`leap_second`は、うるう秒が挿入された日時を秒単位で表す型である。
+`leap_second`は、うるう秒が挿入された日を、UTCタイムゾーンの秒単位で表す型である。
 
 [`get_tzdb()`](get_tzdb.md)で取得した[`tzdb`](tzdb.md)クラスのオブジェクトに、これまでに挿入されたうるう秒のリスト`leap_seconds`がメンバ変数として含まれている。
 
+このクラスが表すうるう秒が挿入された時間とは、日付を秒単位で表すのであって (2006年1月1日)、厳密にうるう秒が挿入された日時 (2006年1月1日8時59分60秒JSTなど) を表すものではないことに注意すること。なお、IANAのうるう秒データベースには、秒単位で定義されている。
+
 
 ## メンバ関数
 ### 構築／コピー／破棄
@@ -52,14 +54,51 @@ namespace std::chrono {
 #include &amp;lt;chrono&amp;gt;
 
 namespace chrono = std::chrono;
+using namespace std::chrono_literals;
 
 int main()
 {
+  // 2018年3月17日までにうるう秒が挿入された日を列挙する
+  for (const chrono::leap_second&amp;amp; date : chrono::get_tzdb().leap_seconds) {
+    if (date &amp;lt;= 2018y/3/17)
+      std::cout &amp;lt;&amp;lt; date.date() &amp;lt;&amp;lt; std::endl;
+  }
 }
 ```
+* chrono::leap_second[color ff0000]
+* chrono::get_tzdb()[link get_tzdb.md]
+* 2018y[link year/op_y.md]
+* date()[link leap_second/date.md.nolink]
 
 ### 出力
 ```
+1972-07-01 00:00:00
+1973-01-01 00:00:00
+1974-01-01 00:00:00
+1975-01-01 00:00:00
+1976-01-01 00:00:00
+1977-01-01 00:00:00
+1978-01-01 00:00:00
+1979-01-01 00:00:00
+1980-01-01 00:00:00
+1981-07-01 00:00:00
+1982-07-01 00:00:00
+1983-07-01 00:00:00
+1985-07-01 00:00:00
+1988-01-01 00:00:00
+1990-01-01 00:00:00
+1991-01-01 00:00:00
+1992-07-01 00:00:00
+1993-07-01 00:00:00
+1994-07-01 00:00:00
+1996-01-01 00:00:00
+1997-07-01 00:00:00
+1999-01-01 00:00:00
+2006-01-01 00:00:00
+2009-01-01 00:00:00
+2012-07-01 00:00:00
+2015-07-01 00:00:00
+2017-01-01 00:00:00
 ```
 
 ## バージョン
@@ -73,5 +112,9 @@ int main()
 
 
 ## 参照
+- [閏秒 - Wikipedia](https://ja.wikipedia.org/wiki/%E9%96%8F%E7%A7%92)
+- [IANAのうるう秒リスト](https://github.com/eggert/tz/blob/master/leap-seconds.list)
+    - 各うるう秒は、1900年1月1日UTCからの経過秒として定義される (UNIX時間の1970年1月1日からの経過秒ではない)
 - [P1981R0 Rename `leap` to `leap_second`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1981r0.html)
     - C++20の策定中、National Body Commentとして`leap`というクラス名は一般的すぎて説明的ではないと指摘があり、`leap_second`に名称変更された
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>regular -- regular : 追記</title>
      <link href="https://cpprefjp.github.io/reference/concepts/regular.html"/>
      <id>adb407595b41609f7873121e1b738e043bc3e877:reference/concepts/regular.md</id>
      <updated>2020-03-10T12:58:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/regular.md b/reference/concepts/regular.md
index f06f15e65..0681a1323 100644
--- a/reference/concepts/regular.md
+++ b/reference/concepts/regular.md
@@ -25,7 +25,7 @@ namespace std {
 - コピー構築・代入
 - デフォルト構築
 - `swap`
-- `==`による等値比較
+- `== !=`による等値比較
 
 このような正則な型とは、`int`型などの[基本型](/reference/type_traits/is_fundamental.md)の様に扱うことのできる型を表している。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>concepts -- 値志向なコンセプトのページ追加 #711</title>
      <link href="https://cpprefjp.github.io/reference/concepts.html"/>
      <id>6da3c5177ab9152e2cb8a2ed96057d0aa75ce4aa:reference/concepts.md</id>
      <updated>2020-03-10T12:51:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts.md b/reference/concepts.md
index ee28e9ca7..95a94be19 100644
--- a/reference/concepts.md
+++ b/reference/concepts.md
@@ -116,10 +116,10 @@ concept C =
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| `movable` | ムーブ可能 | C++20 |
-| `copyable` | コピー可能 | C++20 |
-| `semiregular` | 半正則 | C++20 |
-| `regular` | 正則 | C++20 |
+| [`movable`](concepts/movable.md) | ムーブ可能 | C++20 |
+| [`copyable`](concepts/copyable.md) | コピー可能 | C++20 |
+| [`semiregular`](concepts/semiregular.md) | 半正則 | C++20 |
+| [`regular`](concepts/regular.md) | 正則 | C++20 |
 
 
 ## 関数呼び出し
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copyable -- 値志向なコンセプトのページ追加 #711</title>
      <link href="https://cpprefjp.github.io/reference/concepts/copyable.html"/>
      <id>6da3c5177ab9152e2cb8a2ed96057d0aa75ce4aa:reference/concepts/copyable.md</id>
      <updated>2020-03-10T12:51:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/copyable.md b/reference/concepts/copyable.md
new file mode 100644
index 000000000..862b7cd61
--- /dev/null
+++ b/reference/concepts/copyable.md
@@ -0,0 +1,103 @@
+# copyable
+* concepts[meta header]
+* std[meta namespace]
+* concept[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class T&amp;gt;
+  concept copyable = copy_constructible&amp;lt;T&amp;gt; &amp;amp;&amp;amp;
+                     movable&amp;lt;T&amp;gt; &amp;amp;&amp;amp;
+                     assignable_from&amp;lt;T&amp;amp;, const T&amp;amp;&amp;gt;;
+}
+```
+* assignable_from[link /reference/concepts/assignable_from.md]
+* copy_constructible[link /reference/concepts/copy_constructible.md]
+* movable[link /reference/concepts/movable.md]
+
+## 概要
+
+`copyable`は、任意の型`T`が[`movable`](./movable.md)であり、コピー構築・代入が可能であることを表すコンセプトである。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+
+template&amp;lt;std::copyable T&amp;gt;
+void f(const char* name) {
+  std::cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;#34; is copyable&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+
+template&amp;lt;typename T&amp;gt;
+void f(const char* name) {
+  std::cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;#34; is not copyable&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+
+
+struct copyable {
+  copyable(const copyable&amp;amp;) = default;
+  copyable&amp;amp; operator=(const copyable&amp;amp;) = default;
+};
+
+struct movable {
+  movable(movable&amp;amp;&amp;amp;) = default;
+  movable&amp;amp; operator=(movable&amp;amp;&amp;amp;) = default;
+};
+
+struct not_copyable1 {
+  not_copyable1(const not_copyable1&amp;amp;) = delete;
+};
+
+struct not_copyable2 {
+  not_copyable2&amp;amp; operator=(const not_copyable2&amp;amp;) = delete;
+};
+
+int main() {
+  f&amp;lt;int&amp;gt;(&amp;#34;int&amp;#34;);
+  f&amp;lt;double&amp;gt;(&amp;#34;double&amp;#34;);
+  f&amp;lt;std::nullptr_t&amp;gt;(&amp;#34;std::nullptr_t&amp;#34;);
+  f&amp;lt;std::size_t&amp;gt;(&amp;#34;std::size_t&amp;#34;);
+  f&amp;lt;copyable&amp;gt;(&amp;#34;copyable&amp;#34;);
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
+  f&amp;lt;void&amp;gt;(&amp;#34;void&amp;#34;);
+  f&amp;lt;movable&amp;gt;(&amp;#34;movable&amp;#34;);
+  f&amp;lt;not_copyable1&amp;gt;(&amp;#34;not_copyable1&amp;#34;);
+  f&amp;lt;not_copyable2&amp;gt;(&amp;#34;not_copyable2&amp;#34;);
+}
+```
+* std::copyable[color ff0000]
+
+### 出力
+```
+int is copyable
+double is copyable
+std::nullptr_t is copyable
+std::size_t is copyable
+copyable is copyable
+
+void is not copyable
+movable is not copyable
+not_copyable1 is not copyable
+not_copyable2 is not copyable
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 3
+
+## 関連項目
+
+- [C++20 コンセプト](/lang/cpp20/concepts.md)
+
+## 参照
+
+- [P0898R3 Standard Library Concepts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0898r3.pdf)
+- [P1754R1 Rename concepts to standard_case for C++20, while we still can](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1754r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>movable -- 値志向なコンセプトのページ追加 #711</title>
      <link href="https://cpprefjp.github.io/reference/concepts/movable.html"/>
      <id>6da3c5177ab9152e2cb8a2ed96057d0aa75ce4aa:reference/concepts/movable.md</id>
      <updated>2020-03-10T12:51:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/movable.md b/reference/concepts/movable.md
new file mode 100644
index 000000000..38a553455
--- /dev/null
+++ b/reference/concepts/movable.md
@@ -0,0 +1,98 @@
+# movable
+* concepts[meta header]
+* std[meta namespace]
+* concept[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class T&amp;gt;
+  concept movable = is_object_v&amp;lt;T&amp;gt; &amp;amp;&amp;amp;
+                    move_constructible&amp;lt;T&amp;gt; &amp;amp;&amp;amp;
+                    assignable_from&amp;lt;T&amp;amp;, T&amp;gt; &amp;amp;&amp;amp;
+                    swappable&amp;lt;T&amp;gt;;
+}
+```
+* assignable_from[link /reference/concepts/assignable_from.md]
+* is_object_v[link /reference/type_traits/is_object.md]
+* move_constructible[link /reference/concepts/move_constructible.md]
+* swappable[link /reference/concepts/swappable.md]
+
+## 概要
+
+`movable`は、任意の型`T`がオブジェクト型かつムーブ構築・代入が可能であり、必然的に`swap`可能であることを表すコンセプトである。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+
+template&amp;lt;std::movable T&amp;gt;
+void f(const char* name) {
+  std::cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;#34; is movable&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+
+template&amp;lt;typename T&amp;gt;
+void f(const char* name) {
+  std::cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;#34; is not movable&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+
+
+struct movable {
+  movable(movable&amp;amp;&amp;amp;) = default;
+  movable&amp;amp; operator=(movable&amp;amp;&amp;amp;) = default;
+};
+
+struct not_movable1 {
+  not_movable1(not_movable1&amp;amp;&amp;amp;) = delete;
+};
+
+struct not_movable2 {
+  not_movable2&amp;amp; operator=(not_movable2&amp;amp;&amp;amp;) = delete;
+};
+
+int main() {
+  f&amp;lt;int&amp;gt;(&amp;#34;int&amp;#34;);
+  f&amp;lt;double&amp;gt;(&amp;#34;double&amp;#34;);
+  f&amp;lt;std::nullptr_t&amp;gt;(&amp;#34;std::nullptr_t&amp;#34;);
+  f&amp;lt;std::size_t&amp;gt;(&amp;#34;std::size_t&amp;#34;);
+  f&amp;lt;movable&amp;gt;(&amp;#34;movable&amp;#34;);
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
+  f&amp;lt;void&amp;gt;(&amp;#34;void&amp;#34;);
+  f&amp;lt;not_movable1&amp;gt;(&amp;#34;not_movable1&amp;#34;);
+  f&amp;lt;not_movable2&amp;gt;(&amp;#34;not_movable2&amp;#34;);
+}
+```
+* std::movable[color ff0000]
+
+### 出力
+```
+int is movable
+double is movable
+std::nullptr_t is movable
+std::size_t is movable
+movable is movable
+
+void is not movable
+not_movable1 is not movable
+not_movable2 is not movable
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 3
+
+## 関連項目
+
+- [C++20 コンセプト](/lang/cpp20/concepts.md)
+
+## 参照
+
+- [P0898R3 Standard Library Concepts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0898r3.pdf)
+- [P1754R1 Rename concepts to standard_case for C++20, while we still can](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1754r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>regular -- 値志向なコンセプトのページ追加 #711</title>
      <link href="https://cpprefjp.github.io/reference/concepts/regular.html"/>
      <id>6da3c5177ab9152e2cb8a2ed96057d0aa75ce4aa:reference/concepts/regular.md</id>
      <updated>2020-03-10T12:51:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/regular.md b/reference/concepts/regular.md
new file mode 100644
index 000000000..f06f15e65
--- /dev/null
+++ b/reference/concepts/regular.md
@@ -0,0 +1,106 @@
+# regular
+* concepts[meta header]
+* std[meta namespace]
+* concept[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class T&amp;gt;
+  concept regular = semiregular&amp;lt;T&amp;gt; &amp;amp;&amp;amp; equality_comparable&amp;lt;T&amp;gt;;
+}
+```
+* equality_comparable[link /reference/concepts/equality_comparable.md]
+* semiregular[link /reference/concepts/semiregular.md]
+
+## 概要
+
+`regular`は、任意の型`T`が[`semiregular`](./semiregular.md)であり、等値比較可能であることを表すコンセプトである。
+
+## 正則性
+
+正則（*regular*）な型とはつまり以下の性質を備えた型である。
+
+- ムーブ構築・代入
+- コピー構築・代入
+- デフォルト構築
+- `swap`
+- `==`による等値比較
+
+このような正則な型とは、`int`型などの[基本型](/reference/type_traits/is_fundamental.md)の様に扱うことのできる型を表している。
+
+ここから等値比較可能という性質を弱めたものは、[半正則](./semiregular.md)な型と呼ばれる。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+
+template&amp;lt;std::regular T&amp;gt;
+void f(const char* name) {
+  std::cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;#34; is regular&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+
+template&amp;lt;typename T&amp;gt;
+void f(const char* name) {
+  std::cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;#34; is not regular&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+
+
+struct regular {
+  regular() = default;
+  regular(const regular&amp;amp;) = default;
+  regular&amp;amp; operator=(const regular&amp;amp;) = default;
+  
+  bool operator==(const regular&amp;amp;) const = default;
+};
+
+struct semiregular {
+  semiregular() = default;
+  semiregular(const semiregular&amp;amp;) = default;
+  semiregular&amp;amp; operator=(const semiregular&amp;amp;) = default;
+};
+
+int main() {
+  f&amp;lt;int&amp;gt;(&amp;#34;int&amp;#34;);
+  f&amp;lt;double&amp;gt;(&amp;#34;double&amp;#34;);
+  f&amp;lt;std::nullptr_t&amp;gt;(&amp;#34;std::nullptr_t&amp;#34;);
+  f&amp;lt;std::size_t&amp;gt;(&amp;#34;std::size_t&amp;#34;);
+  f&amp;lt;regular&amp;gt;(&amp;#34;regular&amp;#34;);
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
+  f&amp;lt;void&amp;gt;(&amp;#34;void&amp;#34;);
+  f&amp;lt;semiregular&amp;gt;(&amp;#34;semiregular&amp;#34;);
+}
+```
+* std::regular[color ff0000]
+
+### 出力
+```
+int is regular
+double is regular
+std::nullptr_t is regular
+std::size_t is regular
+regular is regular
+
+void is not regular
+semiregular is not regular
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 3
+
+## 関連項目
+
+- [C++20 コンセプト](/lang/cpp20/concepts.md)
+
+## 参照
+
+- [P0898R3 Standard Library Concepts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0898r3.pdf)
+- [P1754R1 Rename concepts to standard_case for C++20, while we still can](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1754r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>semiregular -- 値志向なコンセプトのページ追加 #711</title>
      <link href="https://cpprefjp.github.io/reference/concepts/semiregular.html"/>
      <id>6da3c5177ab9152e2cb8a2ed96057d0aa75ce4aa:reference/concepts/semiregular.md</id>
      <updated>2020-03-10T12:51:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/semiregular.md b/reference/concepts/semiregular.md
new file mode 100644
index 000000000..b9ae3b12b
--- /dev/null
+++ b/reference/concepts/semiregular.md
@@ -0,0 +1,92 @@
+# semiregular
+* concepts[meta header]
+* std[meta namespace]
+* concept[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class T&amp;gt;
+  concept semiregular = copyable&amp;lt;T&amp;gt; &amp;amp;&amp;amp; default_constructible&amp;lt;T&amp;gt;;
+}
+```
+* copyable[link /reference/concepts/copyable.md]
+* default_constructible[link /reference/concepts/default_constructible.md]
+
+## 概要
+
+`semiregular`は、任意の型`T`が[`copyable`](./copyable.md)であり、デフォルト構築可能であることを表すコンセプトである。
+
+半正則（*semiregular*）な型とは`int`型などの[基本型](/reference/type_traits/is_fundamental.md)の様に扱うことができる型を表しているが、`==`による等値比較が必ずしも可能ではない。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+
+template&amp;lt;std::semiregular T&amp;gt;
+void f(const char* name) {
+  std::cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;#34; is semiregular&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+
+template&amp;lt;typename T&amp;gt;
+void f(const char* name) {
+  std::cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;#34; is not semiregular&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+
+
+struct semiregular {
+  semiregular() = default;
+  semiregular(const semiregular&amp;amp;) = default;
+  semiregular&amp;amp; operator=(const semiregular&amp;amp;) = default;
+};
+
+struct copyable {
+  copyable(const copyable&amp;amp;) = default;
+  copyable&amp;amp; operator=(const copyable&amp;amp;) = default;
+};
+
+int main() {
+  f&amp;lt;int&amp;gt;(&amp;#34;int&amp;#34;);
+  f&amp;lt;double&amp;gt;(&amp;#34;double&amp;#34;);
+  f&amp;lt;std::nullptr_t&amp;gt;(&amp;#34;std::nullptr_t&amp;#34;);
+  f&amp;lt;std::size_t&amp;gt;(&amp;#34;std::size_t&amp;#34;);
+  f&amp;lt;semiregular&amp;gt;(&amp;#34;semiregular&amp;#34;);
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
+  f&amp;lt;void&amp;gt;(&amp;#34;void&amp;#34;);
+  f&amp;lt;copyable&amp;gt;(&amp;#34;copyable&amp;#34;);
+}
+```
+* std::semiregular[color ff0000]
+
+### 出力
+```
+int is semiregular
+double is semiregular
+std::nullptr_t is semiregular
+std::size_t is semiregular
+semiregular is semiregular
+
+void is not semiregular
+copyable is not semiregular
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 3
+
+## 関連項目
+
+- [C++20 コンセプト](/lang/cpp20/concepts.md)
+- [`regular`](./regular.md)
+
+## 参照
+
+- [P0898R3 Standard Library Concepts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0898r3.pdf)
+- [P1754R1 Rename concepts to standard_case for C++20, while we still can](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1754r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>leap_second -- leap_second : structじゃなくclassだった</title>
      <link href="https://cpprefjp.github.io/reference/chrono/leap_second.html"/>
      <id>dff93f4152e37ff387a54d559abda71348e57286:reference/chrono/leap_second.md</id>
      <updated>2020-03-10T01:06:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/leap_second.md b/reference/chrono/leap_second.md
index 09226dea1..33730ecc7 100644
--- a/reference/chrono/leap_second.md
+++ b/reference/chrono/leap_second.md
@@ -6,7 +6,7 @@
 
 ```cpp
 namespace std::chrono {
-  struct leap_second;
+  class leap_second;
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>time_zone_link -- time_zone_link : 見出し追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/time_zone_link.html"/>
      <id>aec9b03f6021b56c013d7811f52b9bc9acb52322:reference/chrono/time_zone_link.md</id>
      <updated>2020-03-09T23:43:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/time_zone_link.md b/reference/chrono/time_zone_link.md
index a121e3f15..d165ea150 100644
--- a/reference/chrono/time_zone_link.md
+++ b/reference/chrono/time_zone_link.md
@@ -41,6 +41,8 @@ std::cout &amp;lt;&amp;lt; linked_tz-&amp;gt;name() &amp;lt;&amp;lt; std::endl; // Asia/Nicosia
 | `time_zone_link&amp;amp; operator=(time_zone_link&amp;amp;&amp;amp;) = default;` | 代入演算子 | C++20 |
 
 
+### 観測
+
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
 | [`name`](time_zone_link/name.md) | タイムゾーンの代替名を取得する | C++20 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
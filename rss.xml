<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-03-21T13:58:27.026435</updated>
  <id>a180c9b0-c86c-4a88-a019-d43b98e23a86</id>

  
    <entry>
      <title>algorithm -- remove系関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm.html"/>
      <id>1492615d0f83843f96246b4381c01839ea4eceb2:reference/algorithm.md</id>
      <updated>2022-03-21T22:53:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm.md b/reference/algorithm.md
index b793a1fe7..da4946f45 100644
--- a/reference/algorithm.md
+++ b/reference/algorithm.md
@@ -199,10 +199,10 @@ ranges::sort(pv, {}, &amp;amp;Parson::name);
 | [`ranges::fill_n`](algorithm/ranges_fill_n.md)                     | 指定された値で出力の範囲に n 個書き込む                                                                         | C++20 |
 | [`ranges::generate`](algorithm/ranges_generate.md)                 | 出力の範囲へ関数の結果を書き込む                                                                                | C++20 |
 | [`ranges::generate_n`](algorithm/ranges_generate_n.md)             | 出力の範囲へ関数の結果を n 個書き込む                                                                           | C++20 |
-| [`ranges::remove`](algorithm/ranges_remove.md.nolink)                     | 指定された要素を除ける                                                                                          | C++20 |
-| [`ranges::remove_if`](algorithm/ranges_remove_if.md.nolink)               | 条件を満たす要素を除ける                                                                                        | C++20 |
-| [`ranges::remove_copy`](algorithm/ranges_remove_copy.md.nolink)           | 指定された要素を除け、その結果を出力の範囲へコピーする                                                          | C++20 |
-| [`ranges::remove_copy_if`](algorithm/ranges_remove_copy_if.md.nolink)     | 条件を満たす要素を除け、その結果を出力の範囲へコピーする                                                        | C++20 |
+| [`ranges::remove`](algorithm/ranges_remove.md)                     | 指定された要素を除ける                                                                                          | C++20 |
+| [`ranges::remove_if`](algorithm/ranges_remove_if.md)               | 条件を満たす要素を除ける                                                                                        | C++20 |
+| [`ranges::remove_copy`](algorithm/ranges_remove_copy.md)           | 指定された要素を除け、その結果を出力の範囲へコピーする                                                          | C++20 |
+| [`ranges::remove_copy_if`](algorithm/ranges_remove_copy_if.md)     | 条件を満たす要素を除け、その結果を出力の範囲へコピーする                                                        | C++20 |
 | [`ranges::unique`](algorithm/ranges_unique.md.nolink)                     | 重複した要素を除ける                                                                                            | C++20 |
 | [`ranges::unique_copy`](algorithm/ranges_unique_copy.md.nolink)           | 重複した要素を除け、その結果を出力の範囲へコピーする                                                            | C++20 |
 | [`ranges::reverse`](algorithm/ranges_reverse.md.nolink)                   | 要素の並びを逆にする                                                                                            | C++20 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>in_out_result -- remove系関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_in_out_result.html"/>
      <id>1492615d0f83843f96246b4381c01839ea4eceb2:reference/algorithm/ranges_in_out_result.md</id>
      <updated>2022-03-21T22:53:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_in_out_result.md b/reference/algorithm/ranges_in_out_result.md
index 0fa32de3c..14bfe8a81 100644
--- a/reference/algorithm/ranges_in_out_result.md
+++ b/reference/algorithm/ranges_in_out_result.md
@@ -105,8 +105,8 @@ namespace std::ranges {
 * (8): [`ranges::transform`](ranges_transform.md)で使用するエイリアス
 * (9): [`ranges::replace_copy`](ranges_replace_copy.md)で使用するエイリアス
 * (10): [`ranges::replace_copy_if`](ranges_replace_copy_if.md)で使用するエイリアス
-* (11): [`ranges::remove_copy`](ranges_remove_copy.md.nolink)で使用するエイリアス
-* (12): [`ranges::remove_copy_if`](ranges_remove_copy_if.md.nolink)で使用するエイリアス
+* (11): [`ranges::remove_copy`](ranges_remove_copy.md)で使用するエイリアス
+* (12): [`ranges::remove_copy_if`](ranges_remove_copy_if.md)で使用するエイリアス
 * (13): [`ranges::unique_copy`](ranges_unique_copy.md.nolink)で使用するエイリアス
 * (14): [`ranges::reverse_copy`](ranges_reverse_copy.md.nolink)で使用するエイリアス
 * (15): [`ranges::rotate_copy`](ranges_rotate_copy.md.nolink)で使用するエイリアス
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>remove -- remove系関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_remove.html"/>
      <id>1492615d0f83843f96246b4381c01839ea4eceb2:reference/algorithm/ranges_remove.md</id>
      <updated>2022-03-21T22:53:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_remove.md b/reference/algorithm/ranges_remove.md
new file mode 100644
index 000000000..8c1b1f2ea
--- /dev/null
+++ b/reference/algorithm/ranges_remove.md
@@ -0,0 +1,111 @@
+# remove
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  // (1)
+  template&amp;lt;permutable I, sentinel_for&amp;lt;I&amp;gt; S, class T, class Proj = identity&amp;gt;
+    requires indirect_binary_predicate&amp;lt;ranges::equal_to, projected&amp;lt;I, Proj&amp;gt;, const T*&amp;gt;
+  constexpr subrange&amp;lt;I&amp;gt; remove(I first, S last, const T&amp;amp; value, Proj proj = {});
+
+  // (2)
+  template&amp;lt;forward_range R, class T, class Proj = identity&amp;gt;
+    requires permutable&amp;lt;iterator_t&amp;lt;R&amp;gt;&amp;gt; &amp;amp;&amp;amp; indirect_binary_predicate&amp;lt;ranges::equal_to, projected&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;, const T*&amp;gt;
+  constexpr borrowed_subrange_t&amp;lt;R&amp;gt; remove(R&amp;amp;&amp;amp; r, const T&amp;amp; value, Proj proj = {});
+}
+```
+* permutable[link /reference/iterator/permutable.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* ranges::equal_to[link /reference/functional/ranges_equal_to.md]
+* identity[link /reference/functional/identity.md]
+* projected[link /reference/iterator/projected.md]
+* indirect_binary_predicate[link /reference/iterator/indirect_binary_predicate.md]
+* subrange[link /reference/ranges/subrange.md]
+* borrowed_subrange_t[link /reference/ranges/borrowed_subrange_t.md]
+* forward_range[link /reference/ranges/forward_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+
+## 概要
+指定された要素を取り除く。
+
+* (1): イテレーターペアで範囲を指定する
+* (2): 範囲を直接指定する
+
+
+## 効果
+`[first,last)` 内にあるイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(proj, *i) == value` である要素を取り除き、有効な要素を範囲の前に寄せる。
+
+
+## 戻り値
+`j` を有効な要素の末尾の次を指すイテレータとすると、 `{j, last}`
+
+
+## 計算量
+正確に `last - first` 回の比較を行う
+
+
+## 注意
+安定。
+
+
+## 備考
+有効な要素を範囲の前方に集める処理には、ムーブを使用する。
+
+取り除いた要素の先頭を指すイテレータを`ret`とし、範囲`[ret, last)`の各要素には、有効な要素からムーブされた値が設定される。それらの値は、「有効だが未規定な値」となる。
+
+
+## 例
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = { 2,3,1,2,1 };
+
+  auto result = std::ranges::remove(v, 1);
+
+  // [v.begin(), result.begin()) の範囲に 1 を除去した結果が入っている
+  for (int x : std::ranges::subrange {v.begin(), result.begin()}) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34;,&amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  // remove を使ってもコンテナの要素数は変わらないことに注意しよう
+  std::cout &amp;lt;&amp;lt; &amp;#34;size before: &amp;#34; &amp;lt;&amp;lt; v.size() &amp;lt;&amp;lt; std::endl;
+
+  // [v.begin(), result.begin()) の範囲に 1 を除去した結果が入っているので、
+  // [result.begin(),v.end()) を erase することでサイズも変更することができる
+  // （Erase-remove イディオム）
+  v.erase(result.begin(), v.end());
+  std::cout &amp;lt;&amp;lt; &amp;#34;size after: &amp;#34; &amp;lt;&amp;lt; v.size() &amp;lt;&amp;lt; std::endl;
+}
+```
+* result[color ff0000]
+* std::ranges::remove[color ff0000]
+* v.erase[color ff0000][link /reference/vector/vector/erase.md]
+* std::ranges::subrange[link /reference/ranges/subrange.md]
+* Erase-remove イディオム[link https://ja.wikibooks.org/wiki/More_C%2B%2B_Idioms/%E6%B6%88%E5%8E%BB%E3%83%BB%E5%89%8A%E9%99%A4(Erase-Remove)]
+
+### 出力
+```
+2,3,2,
+size before: 5
+size after: 3
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>remove_copy -- remove系関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_remove_copy.html"/>
      <id>1492615d0f83843f96246b4381c01839ea4eceb2:reference/algorithm/ranges_remove_copy.md</id>
      <updated>2022-03-21T22:53:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_remove_copy.md b/reference/algorithm/ranges_remove_copy.md
new file mode 100644
index 000000000..094f1ffa8
--- /dev/null
+++ b/reference/algorithm/ranges_remove_copy.md
@@ -0,0 +1,93 @@
+# remove_copy
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  // (1)
+  template&amp;lt;input_iterator I, sentinel_for&amp;lt;I&amp;gt; S, weakly_incrementable O, class T, class Proj = identity&amp;gt;
+    requires indirectly_copyable&amp;lt;I, O&amp;gt; &amp;amp;&amp;amp; indirect_binary_predicate&amp;lt;ranges::equal_to, projected&amp;lt;I, Proj&amp;gt;, const T*&amp;gt;
+  constexpr remove_copy_result&amp;lt;I, O&amp;gt;
+    remove_copy(I first, S last, O result, const T&amp;amp; value, Proj proj = {});
+
+  // (2)
+  template&amp;lt;input_range R, weakly_incrementable O, class T, class Proj = identity&amp;gt;
+    requires indirectly_copyable&amp;lt;iterator_t&amp;lt;R&amp;gt;, O&amp;gt; &amp;amp;&amp;amp; indirect_binary_predicate&amp;lt;ranges::equal_to, projected&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;, const T*&amp;gt;
+  constexpr remove_copy_result&amp;lt;borrowed_iterator_t&amp;lt;R&amp;gt;, O&amp;gt;
+    remove_copy(R&amp;amp;&amp;amp; r, O result, const T&amp;amp; value, Proj proj = {});
+}
+```
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
+* indirectly_copyable[link /reference/iterator/indirectly_copyable.md]
+* ranges::equal_to[link /reference/functional/ranges_equal_to.md]
+* identity[link /reference/functional/identity.md]
+* projected[link /reference/iterator/projected.md]
+* indirect_binary_predicate[link /reference/iterator/indirect_binary_predicate.md]
+* remove_copy_result[link ranges_in_out_result.md]
+* input_range[link /reference/ranges/input_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+
+## 概要
+指定された要素を除け、その結果を出力の範囲へコピーする。
+
+* (1): イテレーターペアで範囲を指定する
+* (2): 範囲を直接指定する
+
+## 事前条件
+- `[first,last)` と `[result,result + (last - first)` は重なってはならない。
+
+## 効果
+`[first,last)` 内にあるイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(proj, *i) == value` でない要素を `result` へコピーする
+
+
+## 戻り値
+`{ .in = last, .out = result + (last - first) }`
+
+
+## 計算量
+正確に `last - first` 回の比較を行う
+
+
+## 備考
+安定。
+
+
+## 例
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = { 2,3,1,2,1 };
+
+  // 1 を除去した結果を出力する
+  std::ranges::remove_copy(v, std::ostream_iterator&amp;lt;int&amp;gt;(std::cout, &amp;#34;,&amp;#34;), 1);
+}
+```
+* std::ranges::remove_copy[color ff0000]
+
+### 出力
+```
+2,3,2,
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>remove_copy_if -- remove系関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_remove_copy_if.html"/>
      <id>1492615d0f83843f96246b4381c01839ea4eceb2:reference/algorithm/ranges_remove_copy_if.md</id>
      <updated>2022-03-21T22:53:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_remove_copy_if.md b/reference/algorithm/ranges_remove_copy_if.md
new file mode 100644
index 000000000..93e54c58a
--- /dev/null
+++ b/reference/algorithm/ranges_remove_copy_if.md
@@ -0,0 +1,93 @@
+# remove_copy_if
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  // (1)
+  template&amp;lt;input_iterator I, sentinel_for&amp;lt;I&amp;gt; S, weakly_incrementable O, class Proj = identity, indirect_unary_predicate&amp;lt;projected&amp;lt;I, Proj&amp;gt;&amp;gt; Pred&amp;gt;
+    requires indirectly_copyable&amp;lt;I, O&amp;gt;
+  constexpr remove_copy_if_result&amp;lt;I, O&amp;gt;
+    remove_copy_if(I first, S last, O result, Pred pred, Proj proj = {});
+
+  // (2)
+  template&amp;lt;input_range R, weakly_incrementable O, class Proj = identity, indirect_unary_predicate&amp;lt;projected&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;&amp;gt; Pred&amp;gt;
+    requires indirectly_copyable&amp;lt;iterator_t&amp;lt;R&amp;gt;, O&amp;gt;
+  constexpr remove_copy_if_result&amp;lt;borrowed_iterator_t&amp;lt;R&amp;gt;, O&amp;gt;
+    remove_copy_if(R&amp;amp;&amp;amp; r, O result, Pred pred, Proj proj = {});
+}
+```
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
+* identity[link /reference/functional/identity.md]
+* indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
+* projected[link /reference/iterator/projected.md]
+* indirectly_copyable[link /reference/iterator/indirectly_copyable.md]
+* remove_copy_result[link ranges_in_out_result.md]
+* input_range[link /reference/ranges/input_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+
+## 概要
+条件を満たす要素を除け、その結果を出力の範囲へコピーする。
+
+* (1): イテレーターペアで範囲を指定する
+* (2): 範囲を直接指定する
+
+## 事前条件
+- `[first,last)` と `[result,result + (last - first)` は重なってはならない。
+
+
+## 効果
+`[first,last)` 内にあるイテレータ `i` について、`pred(*i) != false` でない要素を `result` へコピーする
+
+
+## 戻り値
+`{ .in = last, .out = result + (last - first) }`
+
+
+## 計算量
+正確に `last - first` 回の述語の適用を行う
+
+
+## 備考
+安定
+
+
+## 例
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = { 2,3,1,2,1 };
+
+  // 奇数を除去した結果を出力する
+  std::ranges::remove_copy_if(v, std::ostream_iterator&amp;lt;int&amp;gt;(std::cout, &amp;#34;,&amp;#34;), [](int x) { return x%2 != 0; });
+}
+```
+* std::remove_copy_if[color ff0000]
+
+### 出力
+```
+2,2,
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>remove_if -- remove系関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_remove_if.html"/>
      <id>1492615d0f83843f96246b4381c01839ea4eceb2:reference/algorithm/ranges_remove_if.md</id>
      <updated>2022-03-21T22:53:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_remove_if.md b/reference/algorithm/ranges_remove_if.md
new file mode 100644
index 000000000..fa699b99c
--- /dev/null
+++ b/reference/algorithm/ranges_remove_if.md
@@ -0,0 +1,110 @@
+# remove_if
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  // (1)
+  template&amp;lt;permutable I, sentinel_for&amp;lt;I&amp;gt; S, class Proj = identity, indirect_unary_predicate&amp;lt;projected&amp;lt;I, Proj&amp;gt;&amp;gt; Pred&amp;gt;
+    constexpr subrange&amp;lt;I&amp;gt; remove_if(I first, S last, Pred pred, Proj proj = {});
+
+  // (2)
+  template&amp;lt;forward_range R, class Proj = identity, indirect_unary_predicate&amp;lt;projected&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;&amp;gt; Pred&amp;gt;
+    requires permutable&amp;lt;iterator_t&amp;lt;R&amp;gt;&amp;gt;
+  constexpr borrowed_subrange_t&amp;lt;R&amp;gt; remove_if(R&amp;amp;&amp;amp; r, Pred pred, Proj proj = {});
+}
+```
+* permutable[link /reference/iterator/permutable.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
+* identity[link /reference/functional/identity.md]
+* projected[link /reference/iterator/projected.md]
+* subrange[link /reference/ranges/subrange.md]
+* borrowed_subrange_t[link /reference/ranges/borrowed_subrange_t.md]
+* forward_range[link /reference/ranges/forward_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+
+
+## 概要
+条件を満たす要素を除ける。
+
+* (1): イテレーターペアで範囲を指定する
+* (2): 範囲を直接指定する
+
+
+## 効果
+`[first,last)` 内にあるイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj, *i))` である要素を取り除き、有効な要素を範囲の前に寄せる。
+
+
+## 戻り値
+`j` を有効な要素の末尾の次を指すイテレータとすると、 `{j, last}`
+
+
+## 計算量
+正確に `last - first` 回の述語の適用を行う
+
+
+## 備考
+安定。
+
+
+## 備考
+有効な要素を範囲の前方に集める処理には、ムーブを使用する。
+
+取り除いた要素の先頭を指すイテレータを`ret`とし、範囲`[ret, last)`の各要素には、有効な要素からムーブされた値が設定される。それらの値は、「有効だが未規定な値」となる。
+
+
+## 例
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = { 2,3,1,2,1 };
+
+  auto result = std::ranges::remove_if(v, [](int x) { return x%2 != 0; });
+
+  // [v.begin(), result.begin()) の範囲に奇数を除去した結果が入っている
+  for (int x : std::ranges::subrange {v.begin(), result.begin()}) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34;,&amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  // remove を使ってもコンテナの要素数は変わらないことに注意しよう
+  std::cout &amp;lt;&amp;lt; &amp;#34;size before: &amp;#34; &amp;lt;&amp;lt; v.size() &amp;lt;&amp;lt; std::endl;
+
+  // [v.begin(), result.begin()) の範囲に奇数を除去した結果が入っているので、
+  // [result.begin(),v.end()) を erase することでサイズも変更することができる
+  // （Erase-remove イディオム）
+  v.erase(result.begin(), v.end());
+  std::cout &amp;lt;&amp;lt; &amp;#34;size after: &amp;#34; &amp;lt;&amp;lt; v.size() &amp;lt;&amp;lt; std::endl;
+}
+```
+* result[color ff0000]
+* std::ranges::remove_if[color ff0000]
+* v.erase[color ff0000][link /reference/vector/vector/erase.md]
+* std::ranges::subrange[link /reference/ranges/subrange.md]
+* Erase-remove イディオム[link https://ja.wikibooks.org/wiki/More_C%2B%2B_Idioms/%E6%B6%88%E5%8E%BB%E3%83%BB%E5%89%8A%E9%99%A4(Erase-Remove)]
+
+### 出力
+```
+2,2,
+size before: 5
+size after: 2
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>algorithm -- generate系関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm.html"/>
      <id>c802acdd420f338156788fd9d309f2c6240c1c89:reference/algorithm.md</id>
      <updated>2022-03-21T22:18:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm.md b/reference/algorithm.md
index 16a4bb07b..b793a1fe7 100644
--- a/reference/algorithm.md
+++ b/reference/algorithm.md
@@ -197,8 +197,8 @@ ranges::sort(pv, {}, &amp;amp;Parson::name);
 | [`ranges::replace_copy_if`](algorithm/ranges_replace_copy_if.md)   | 条件を満たす要素を指定された値に置き換え、その結果を出力の範囲へコピーする                                      | C++20 |
 | [`ranges::fill`](algorithm/ranges_fill.md)                         | 指定された値で出力の範囲に書き込む                                                                              | C++20 |
 | [`ranges::fill_n`](algorithm/ranges_fill_n.md)                     | 指定された値で出力の範囲に n 個書き込む                                                                         | C++20 |
-| [`ranges::generate`](algorithm/ranges_generate.md.nolink)                 | 出力の範囲へ関数の結果を書き込む                                                                                | C++20 |
-| [`ranges::generate_n`](algorithm/ranges_generate_n.md.nolink)             | 出力の範囲へ関数の結果を n 個書き込む                                                                           | C++20 |
+| [`ranges::generate`](algorithm/ranges_generate.md)                 | 出力の範囲へ関数の結果を書き込む                                                                                | C++20 |
+| [`ranges::generate_n`](algorithm/ranges_generate_n.md)             | 出力の範囲へ関数の結果を n 個書き込む                                                                           | C++20 |
 | [`ranges::remove`](algorithm/ranges_remove.md.nolink)                     | 指定された要素を除ける                                                                                          | C++20 |
 | [`ranges::remove_if`](algorithm/ranges_remove_if.md.nolink)               | 条件を満たす要素を除ける                                                                                        | C++20 |
 | [`ranges::remove_copy`](algorithm/ranges_remove_copy.md.nolink)           | 指定された要素を除け、その結果を出力の範囲へコピーする                                                          | C++20 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>generate -- generate系関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_generate.html"/>
      <id>c802acdd420f338156788fd9d309f2c6240c1c89:reference/algorithm/ranges_generate.md</id>
      <updated>2022-03-21T22:18:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_generate.md b/reference/algorithm/ranges_generate.md
new file mode 100644
index 000000000..c0b07ff19
--- /dev/null
+++ b/reference/algorithm/ranges_generate.md
@@ -0,0 +1,88 @@
+# generate
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  // (1)
+  template&amp;lt;input_or_output_iterator O, sentinel_for&amp;lt;O&amp;gt; S, copy_constructible F&amp;gt;
+    requires invocable&amp;lt;F&amp;amp;&amp;gt; &amp;amp;&amp;amp; indirectly_writable&amp;lt;O, invoke_result_t&amp;lt;F&amp;amp;&amp;gt;&amp;gt;
+  constexpr O generate(O first, S last, F gen);
+
+  // (2)
+  template&amp;lt;class R, copy_constructible F&amp;gt;
+    requires invocable&amp;lt;F&amp;amp;&amp;gt; &amp;amp;&amp;amp; output_range&amp;lt;R, invoke_result_t&amp;lt;F&amp;amp;&amp;gt;&amp;gt;
+  constexpr borrowed_iterator_t&amp;lt;R&amp;gt; generate(R&amp;amp;&amp;amp; r, F gen);
+}
+```
+* input_or_output_iterator[link /reference/iterator/input_or_output_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* copy_constructible[link /reference/concepts/copy_constructible.md]
+* invocable[link /reference/concepts/invocable.md]
+* indirectly_writable[link /reference/iterator/indirectly_writable.md]
+* invoke_result_t[link /reference/type_traits/invoke_result.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+
+## 概要
+出力の範囲へ関数の結果を書き込む。
+
+* (1): イテレーターペアで範囲を指定する
+* (2): 範囲を直接指定する
+
+
+## 要件
+`gen` は引数を取らないこと。
+
+
+## 効果
+`[first,last)` のそれぞれのイテレータについて関数オブジェクト `gen` を呼び出し、その戻り値を代入する。
+
+
+## 戻り値
+`last`
+
+
+## 計算量
+正確に `last - first` 回の `gen` の呼び出しと代入が行われる。
+
+
+## 例
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v(10);
+
+  // 2 の累乗の値を生成する
+  int n = 1;
+  std::ranges::generate(v, [&amp;amp;n]() { auto t = n; n *= 2; return t; });
+
+  for (int x : v ) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34;,&amp;#34;;
+  }
+}
+```
+* std::generate[color ff0000]
+
+### 出力
+```
+1,2,4,8,16,32,64,128,256,512,
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>generate_n -- generate系関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_generate_n.html"/>
      <id>c802acdd420f338156788fd9d309f2c6240c1c89:reference/algorithm/ranges_generate_n.md</id>
      <updated>2022-03-21T22:18:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_generate_n.md b/reference/algorithm/ranges_generate_n.md
new file mode 100644
index 000000000..aa64a224c
--- /dev/null
+++ b/reference/algorithm/ranges_generate_n.md
@@ -0,0 +1,77 @@
+# generate_n
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;input_or_output_iterator O, copy_constructible F&amp;gt;
+    requires invocable&amp;lt;F&amp;amp;&amp;gt; &amp;amp;&amp;amp; indirectly_writable&amp;lt;O, invoke_result_t&amp;lt;F&amp;amp;&amp;gt;&amp;gt;
+  constexpr O generate_n(O first, iter_difference_t&amp;lt;O&amp;gt; n, F gen);
+}
+```
+* input_or_output_iterator[link /reference/iterator/input_or_output_iterator.md]
+* copy_constructible[link /reference/concepts/copy_constructible.md]
+* invocable[link /reference/concepts/invocable.md]
+* indirectly_writable[link /reference/iterator/indirectly_writable.md]
+* invoke_result_t[link /reference/type_traits/invoke_result.md]
+
+
+## 概要
+出力の範囲へ関数の結果を `n` 個書き込む。
+
+
+## 要件
+- `gen` は引数をとらないこと。
+- `Size` は integral type に変換可能であること。
+
+
+## 効果
+`n` が 1 以上の場合、`[first,last)` のそれぞれのイテレータについて関数オブジェクト `gen` を呼び出し、その戻り値を代入する。
+
+そうでない場合、何もしない。
+
+
+## 戻り値
+`n` が 1 以上の場合、`first + n` が返される。  
+そうでない場合、`first` が返される。
+
+
+## 計算量
+`n` が 1 以上の場合、`n` 回の `gen` の呼び出しと代入が行われる。
+
+そうでない場合、何もしない。
+
+
+## 例
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+
+int main() {
+  // 2 の累乗の値を生成して出力する
+  int n = 1;
+  std::ranges::generate_n(std::ostream_iterator&amp;lt;int&amp;gt;(std::cout, &amp;#34;,&amp;#34;), 10, [&amp;amp;n]{ auto t = n; n *= 2; return t; });
+}
+```
+* std::generate_n[color ff0000]
+
+### 出力
+```
+1,2,4,8,16,32,64,128,256,512,
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>algorithm -- fill系関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm.html"/>
      <id>e3f59b8e197d98af42950a8bc341ff0d61013f34:reference/algorithm.md</id>
      <updated>2022-03-21T22:13:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm.md b/reference/algorithm.md
index 6b9f49d36..16a4bb07b 100644
--- a/reference/algorithm.md
+++ b/reference/algorithm.md
@@ -195,8 +195,8 @@ ranges::sort(pv, {}, &amp;amp;Parson::name);
 | [`ranges::replace_if`](algorithm/ranges_replace_if.md)             | 条件を満たす要素を指定された値に置き換える                                                                      | C++20 |
 | [`ranges::replace_copy`](algorithm/ranges_replace_copy.md)         | 指定された値を一致する要素を指定された値に置き換え、その結果を出力の範囲へコピーする                            | C++20 |
 | [`ranges::replace_copy_if`](algorithm/ranges_replace_copy_if.md)   | 条件を満たす要素を指定された値に置き換え、その結果を出力の範囲へコピーする                                      | C++20 |
-| [`ranges::fill`](algorithm/ranges_fill.md.nolink)                         | 指定された値で出力の範囲に書き込む                                                                              | C++20 |
-| [`ranges::fill_n`](algorithm/ranges_fill_n.md.nolink)                     | 指定された値で出力の範囲に n 個書き込む                                                                         | C++20 |
+| [`ranges::fill`](algorithm/ranges_fill.md)                         | 指定された値で出力の範囲に書き込む                                                                              | C++20 |
+| [`ranges::fill_n`](algorithm/ranges_fill_n.md)                     | 指定された値で出力の範囲に n 個書き込む                                                                         | C++20 |
 | [`ranges::generate`](algorithm/ranges_generate.md.nolink)                 | 出力の範囲へ関数の結果を書き込む                                                                                | C++20 |
 | [`ranges::generate_n`](algorithm/ranges_generate_n.md.nolink)             | 出力の範囲へ関数の結果を n 個書き込む                                                                           | C++20 |
 | [`ranges::remove`](algorithm/ranges_remove.md.nolink)                     | 指定された要素を除ける                                                                                          | C++20 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fill -- fill系関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_fill.html"/>
      <id>e3f59b8e197d98af42950a8bc341ff0d61013f34:reference/algorithm/ranges_fill.md</id>
      <updated>2022-03-21T22:13:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_fill.md b/reference/algorithm/ranges_fill.md
new file mode 100644
index 000000000..eb53fb1dd
--- /dev/null
+++ b/reference/algorithm/ranges_fill.md
@@ -0,0 +1,78 @@
+# fill
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  // (1)
+  template&amp;lt;class T, output_iterator&amp;lt;const T&amp;amp;&amp;gt; O, sentinel_for&amp;lt;O&amp;gt; S&amp;gt;
+    constexpr O fill(O first, S last, const T&amp;amp; value);
+
+  // (2)
+  template&amp;lt;class T, output_range&amp;lt;const T&amp;amp;&amp;gt; R&amp;gt;
+    constexpr borrowed_iterator_t&amp;lt;R&amp;gt; fill(R&amp;amp;&amp;amp; r, const T&amp;amp; value);
+
+}
+```
+* output_iterator[link /reference/iterator/output_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* output_range[link /reference/ranges/output_range.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+
+## 概要
+指定された値で出力の範囲に書き込む。
+
+* (1): イテレーターペアで範囲を指定する
+* (2): 範囲を直接指定する
+
+
+## 効果
+`[first,last)` 内の全ての要素に `value` を代入する
+
+
+## 戻り値
+`last`
+
+
+## 計算量
+正確に `last - first` 回の代入を行う
+
+
+## 例
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v(5);
+
+  // v を 3 の値で埋める
+  std::ranges::fill(v, 3);
+
+  for (int x : v) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34;,&amp;#34;;
+  }
+}
+```
+* std::ranges::fill[color ff0000]
+
+### 出力
+```
+3,3,3,3,3,
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fill_n -- fill系関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_fill_n.html"/>
      <id>e3f59b8e197d98af42950a8bc341ff0d61013f34:reference/algorithm/ranges_fill_n.md</id>
      <updated>2022-03-21T22:13:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_fill_n.md b/reference/algorithm/ranges_fill_n.md
new file mode 100644
index 000000000..75b9209e0
--- /dev/null
+++ b/reference/algorithm/ranges_fill_n.md
@@ -0,0 +1,62 @@
+# fill_n
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class T, output_iterator&amp;lt;const T&amp;amp;&amp;gt; O&amp;gt;
+    constexpr O fill_n(O first, iter_difference_t&amp;lt;O&amp;gt; n, const T&amp;amp; value);
+}
+```
+* output_iterator[link /reference/iterator/output_iterator.md]
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
+
+## 概要
+指定された値で出力の範囲に `n` 個を書き込む。
+
+
+## 効果
+`n` が 1 以上の場合は `[first,first + n)` 内の全ての要素に `value` を代入し、そうでない場合は何もしない。
+
+
+## 戻り値
+`n` が 1 以上の場合は `first + n`、そうでない場合は `first` を返す。
+
+
+## 計算量
+`n` が 1 以上の場合は `n` 回、そうでない場合は 0 回の代入を行う。
+
+
+## 例
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+
+int main() {
+  // 3 を10回出力する
+  std::ranges::fill_n(std::ostream_iterator&amp;lt;int&amp;gt;(std::cout, &amp;#34;,&amp;#34;), 10, 3);
+}
+```
+* std::fill_n[color ff0000]
+
+### 出力
+```
+3,3,3,3,3,3,3,3,3,3,
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>algorithm -- replace系関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm.html"/>
      <id>b896db177c72f62e0c6564b633f905886c49a0c0:reference/algorithm.md</id>
      <updated>2022-03-21T22:03:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm.md b/reference/algorithm.md
index 396d3d269..6b9f49d36 100644
--- a/reference/algorithm.md
+++ b/reference/algorithm.md
@@ -191,10 +191,10 @@ ranges::sort(pv, {}, &amp;amp;Parson::name);
 | [`ranges::move_backward`](algorithm/ranges_move_backward.md)       | 指定された範囲の要素を後ろからムーブする                                                                        | C++20 |
 | [`ranges::swap_ranges`](algorithm/ranges_swap_ranges.md)           | 指定された2つの範囲同士を swap する                                                                             | C++20 |
 | [`ranges::transform`](algorithm/ranges_transform.md)               | 全ての要素に関数を適用する                                                                                      | C++20 |
-| [`ranges::replace`](algorithm/ranges_replace.md.nolink)                   | 指定された値と一致する要素を指定された値に置き換える                                                            | C++20 |
-| [`ranges::replace_if`](algorithm/ranges_replace_if.md.nolink)             | 条件を満たす要素を指定された値に置き換える                                                                      | C++20 |
-| [`ranges::replace_copy`](algorithm/ranges_replace_copy.md.nolink)         | 指定された値を一致する要素を指定された値に置き換え、その結果を出力の範囲へコピーする                            | C++20 |
-| [`ranges::replace_copy_if`](algorithm/ranges_replace_copy_if.md.nolink)   | 条件を満たす要素を指定された値に置き換え、その結果を出力の範囲へコピーする                                      | C++20 |
+| [`ranges::replace`](algorithm/ranges_replace.md)                   | 指定された値と一致する要素を指定された値に置き換える                                                            | C++20 |
+| [`ranges::replace_if`](algorithm/ranges_replace_if.md)             | 条件を満たす要素を指定された値に置き換える                                                                      | C++20 |
+| [`ranges::replace_copy`](algorithm/ranges_replace_copy.md)         | 指定された値を一致する要素を指定された値に置き換え、その結果を出力の範囲へコピーする                            | C++20 |
+| [`ranges::replace_copy_if`](algorithm/ranges_replace_copy_if.md)   | 条件を満たす要素を指定された値に置き換え、その結果を出力の範囲へコピーする                                      | C++20 |
 | [`ranges::fill`](algorithm/ranges_fill.md.nolink)                         | 指定された値で出力の範囲に書き込む                                                                              | C++20 |
 | [`ranges::fill_n`](algorithm/ranges_fill_n.md.nolink)                     | 指定された値で出力の範囲に n 個書き込む                                                                         | C++20 |
 | [`ranges::generate`](algorithm/ranges_generate.md.nolink)                 | 出力の範囲へ関数の結果を書き込む                                                                                | C++20 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>in_out_result -- replace系関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_in_out_result.html"/>
      <id>b896db177c72f62e0c6564b633f905886c49a0c0:reference/algorithm/ranges_in_out_result.md</id>
      <updated>2022-03-21T22:03:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_in_out_result.md b/reference/algorithm/ranges_in_out_result.md
index 1a29e5244..0fa32de3c 100644
--- a/reference/algorithm/ranges_in_out_result.md
+++ b/reference/algorithm/ranges_in_out_result.md
@@ -103,8 +103,8 @@ namespace std::ranges {
 * (6): [`ranges::move`](ranges_move.md)で使用するエイリアス
 * (7): [`ranges::move_backward`](ranges_move_backward.md)で使用するエイリアス
 * (8): [`ranges::transform`](ranges_transform.md)で使用するエイリアス
-* (9): [`ranges::replace_copy`](ranges_replace_copy.md.nolink)で使用するエイリアス
-* (10): [`ranges::replace_copy_if`](ranges_replace_copy_if.md.nolink)で使用するエイリアス
+* (9): [`ranges::replace_copy`](ranges_replace_copy.md)で使用するエイリアス
+* (10): [`ranges::replace_copy_if`](ranges_replace_copy_if.md)で使用するエイリアス
 * (11): [`ranges::remove_copy`](ranges_remove_copy.md.nolink)で使用するエイリアス
 * (12): [`ranges::remove_copy_if`](ranges_remove_copy_if.md.nolink)で使用するエイリアス
 * (13): [`ranges::unique_copy`](ranges_unique_copy.md.nolink)で使用するエイリアス
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>replace -- replace系関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_replace.html"/>
      <id>b896db177c72f62e0c6564b633f905886c49a0c0:reference/algorithm/ranges_replace.md</id>
      <updated>2022-03-21T22:03:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_replace.md b/reference/algorithm/ranges_replace.md
new file mode 100644
index 000000000..31f670786
--- /dev/null
+++ b/reference/algorithm/ranges_replace.md
@@ -0,0 +1,85 @@
+# replace
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  // (1)
+  template&amp;lt;input_iterator I, sentinel_for&amp;lt;I&amp;gt; S, class T1, class T2, class Proj = identity&amp;gt;
+    requires indirectly_writable&amp;lt;I, const T2&amp;amp;&amp;gt; &amp;amp;&amp;amp; indirect_binary_predicate&amp;lt;ranges::equal_to, projected&amp;lt;I, Proj&amp;gt;, const T1*&amp;gt;
+  constexpr I replace(I first, S last, const T1&amp;amp; old_value, const T2&amp;amp; new_value, Proj proj = {});
+
+  // (2)
+  template&amp;lt;input_range R, class T1, class T2, class Proj = identity&amp;gt;
+    requires indirectly_writable&amp;lt;iterator_t&amp;lt;R&amp;gt;, const T2&amp;amp;&amp;gt; &amp;amp;&amp;amp; indirect_binary_predicate&amp;lt;ranges::equal_to, projected&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;, const T1*&amp;gt;
+  constexpr borrowed_iterator_t&amp;lt;R&amp;gt; replace(R&amp;amp;&amp;amp; r, const T1&amp;amp; old_value, const T2&amp;amp; new_value, Proj proj = {});
+}
+```
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* identity[link /reference/functional/identity.md]
+* indirectly_writable[link /reference/iterator/indirectly_writable.md]
+* indirect_binary_predicate[link /reference/iterator/indirect_binary_predicate.md]
+* ranges::equal_to[link /reference/functional/ranges_equal_to.md]
+* projected[link /reference/iterator/projected.md]
+* input_range[link /reference/ranges/input_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+
+## 概要
+指定された値と一致する要素を指定された値に置き換える。
+
+* (1): イテレーターペアで範囲を指定する
+* (2): 範囲を直接指定する
+
+
+## 効果
+`[first,last)` 内のイテレータ `i` について、`*i == old_value` であるものは `*i = new_value` という式によって置き換えられる。
+
+
+## 戻り値
+`last`
+
+
+## 計算量
+正確に `last - first` 回の比較を行う
+
+
+## 例
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = { 3,1,2,1,2 };
+
+  // 1 の要素を全部 10 に置き換える
+  std::ranges::replace(v, 1, 10);
+
+  for (int x : v) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34;,&amp;#34;;
+  }
+}
+```
+* std::ranges::replace[color ff0000]
+
+### 出力
+```
+3,10,2,10,2,
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>replace_copy -- replace系関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_replace_copy.html"/>
      <id>b896db177c72f62e0c6564b633f905886c49a0c0:reference/algorithm/ranges_replace_copy.md</id>
      <updated>2022-03-21T22:03:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_replace_copy.md b/reference/algorithm/ranges_replace_copy.md
new file mode 100644
index 000000000..104638ab9
--- /dev/null
+++ b/reference/algorithm/ranges_replace_copy.md
@@ -0,0 +1,89 @@
+# replace_copy
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  // (1)
+  template&amp;lt;input_iterator I, sentinel_for&amp;lt;I&amp;gt; S, class T1, class T2, output_iterator&amp;lt;const T2&amp;amp;&amp;gt; O, class Proj = identity&amp;gt;
+    requires indirectly_copyable&amp;lt;I, O&amp;gt; &amp;amp;&amp;amp; indirect_binary_predicate&amp;lt;ranges::equal_to, projected&amp;lt;I, Proj&amp;gt;, const T1*&amp;gt;
+  constexpr replace_copy_result&amp;lt;I, O&amp;gt;
+    replace_copy(I first, S last, O result, const T1&amp;amp; old_value, const T2&amp;amp; new_value, Proj proj = {});
+
+  // (2)
+  template&amp;lt;input_range R, class T1, class T2, output_iterator&amp;lt;const T2&amp;amp;&amp;gt; O, class Proj = identity&amp;gt;
+    requires indirectly_copyable&amp;lt;iterator_t&amp;lt;R&amp;gt;, O&amp;gt; &amp;amp;&amp;amp; indirect_binary_predicate&amp;lt;ranges::equal_to, projected&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;, const T1*&amp;gt;
+  constexpr replace_copy_result&amp;lt;borrowed_iterator_t&amp;lt;R&amp;gt;, O&amp;gt;
+    replace_copy(R&amp;amp;&amp;amp; r, O result, const T1&amp;amp; old_value, const T2&amp;amp; new_value, Proj proj = {});
+}
+```
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* output_iterator[link /reference/iterator/output_iterator.md]
+* identity[link /reference/functional/identity.md]
+* indirectly_copyable[link /reference/iterator/indirectly_copyable.md]
+* indirect_binary_predicate[link /reference/iterator/indirect_binary_predicate.md]
+* ranges::equal_to[link /reference/functional/ranges_equal_to.md]
+* projected[link /reference/iterator/projected.md]
+* replace_copy_result[link ranges_in_out_result.md]
+* input_range[link /reference/ranges/input_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+
+## 概要
+指定された値を一致する要素を指定された値に置き換え、その結果を出力の範囲へコピーする。
+
+* (1): イテレーターペアで範囲を指定する
+* (2): 範囲を直接指定する
+
+## 事前条件
+- `[first,last)` と `[result,result + (last - first))` の範囲が重なっていてはならない。
+
+
+## 効果
+`[result,result + (last - first))` 内のイテレータ `i` について、`*(first + (i - result)) == old_value` である場合は `new_value` が代入され、そうでない場合は `*(first + (i - result))` が 代入される。
+
+
+## 戻り値
+`{ .in = last, .out = result + (last - first)`
+
+
+## 計算量
+正確に `last - first` 回の比較を行う
+
+
+## 例
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = { 3,1,2,1,2 };
+
+  // 1 の要素を全部 10 に置き換えたものを出力する
+  std::ranges::replace_copy(v, std::ostream_iterator&amp;lt;int&amp;gt;(std::cout, &amp;#34;,&amp;#34;), 1, 10);
+}
+```
+* std::ranges::replace_copy[color ff0000]
+
+### 出力
+```
+3,10,2,10,2,
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>replace_copy_if -- replace系関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_replace_copy_if.html"/>
      <id>b896db177c72f62e0c6564b633f905886c49a0c0:reference/algorithm/ranges_replace_copy_if.md</id>
      <updated>2022-03-21T22:03:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_replace_copy_if.md b/reference/algorithm/ranges_replace_copy_if.md
new file mode 100644
index 000000000..b66639f88
--- /dev/null
+++ b/reference/algorithm/ranges_replace_copy_if.md
@@ -0,0 +1,89 @@
+# replace_copy_if
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  // (1)
+  template&amp;lt;input_iterator I, sentinel_for&amp;lt;I&amp;gt; S, class T, output_iterator&amp;lt;const T&amp;amp;&amp;gt; O, class Proj = identity, indirect_unary_predicate&amp;lt;projected&amp;lt;I, Proj&amp;gt;&amp;gt; Pred&amp;gt;
+    requires indirectly_copyable&amp;lt;I, O&amp;gt;
+  constexpr replace_copy_if_result&amp;lt;I, O&amp;gt;
+    replace_copy_if(I first, S last, O result, Pred pred, const T&amp;amp; new_value, Proj proj = {});
+
+  // (2)
+  template&amp;lt;input_range R, class T, output_iterator&amp;lt;const T&amp;amp;&amp;gt; O, class Proj = identity, indirect_unary_predicate&amp;lt;projected&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;&amp;gt; Pred&amp;gt;
+    requires indirectly_copyable&amp;lt;iterator_t&amp;lt;R&amp;gt;, O&amp;gt;
+  constexpr replace_copy_if_result&amp;lt;borrowed_iterator_t&amp;lt;R&amp;gt;, O&amp;gt;
+    replace_copy_if(R&amp;amp;&amp;amp; r, O result, Pred pred, const T&amp;amp; new_value, Proj proj = {});
+}
+```
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* output_iterator[link /reference/iterator/output_iterator.md]
+* identity[link /reference/functional/identity.md]
+* indirectly_copyable[link /reference/iterator/indirectly_copyable.md]
+* indirect_unary_predicate[link /reference/iterator/indirect_binary_predicate.md]
+* projected[link /reference/iterator/projected.md]
+* replace_copy_if_result[link ranges_in_out_result.md]
+* input_range[link /reference/ranges/input_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+
+## 概要
+条件を満たす要素を指定された値に置き換え、その結果を出力の範囲へコピーする。
+
+* (1): イテレーターペアで範囲を指定する
+* (2): 範囲を直接指定する
+
+## 事前条件
+- `[first,last)` と `[result,result + (last - first))` の範囲が重なっていてはならない。
+
+
+## 効果
+`[result,result + (last - first))` 内のイテレータ `i` について、`pred(*(first + (i - result))) != false` である場合は `new_value` が代入され、そうでない場合は `*(first + (i - result))` が 代入される。
+
+
+## 戻り値
+`{ .in = last, .out = result + (last - first) }`
+
+
+## 計算量
+正確に `last - first` 回の述語の適用を行う
+
+
+## 例
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = { 3,1,2,1,2 };
+
+  // 奇数の要素を全部 10 に置き換えたものを出力する
+  std::ranges::replace_copy_if(v, std::ostream_iterator&amp;lt;int&amp;gt;(std::cout, &amp;#34;,&amp;#34;), [](int x) { return x%2 != 0; }, 10);
+}
+```
+* std::ranges::replace_copy_if[color ff0000]
+
+### 出力
+```
+10,10,2,10,2,
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>replace_if -- replace系関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_replace_if.html"/>
      <id>b896db177c72f62e0c6564b633f905886c49a0c0:reference/algorithm/ranges_replace_if.md</id>
      <updated>2022-03-21T22:03:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_replace_if.md b/reference/algorithm/ranges_replace_if.md
new file mode 100644
index 000000000..cd4568bde
--- /dev/null
+++ b/reference/algorithm/ranges_replace_if.md
@@ -0,0 +1,85 @@
+# replace_if
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  // (1)
+  template&amp;lt;input_iterator I, sentinel_for&amp;lt;I&amp;gt; S, class T, class Proj = identity, indirect_unary_predicate&amp;lt;projected&amp;lt;I, Proj&amp;gt;&amp;gt; Pred&amp;gt;
+    requires indirectly_writable&amp;lt;I, const T&amp;amp;&amp;gt;
+  constexpr I replace_if(I first, S last, Pred pred, const T&amp;amp; new_value, Proj proj = {});
+
+  // (2)
+  template&amp;lt;input_range R, class T, class Proj = identity, indirect_unary_predicate&amp;lt;projected&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;&amp;gt; Pred&amp;gt;
+    requires indirectly_writable&amp;lt;iterator_t&amp;lt;R&amp;gt;, const T&amp;amp;&amp;gt;
+  constexpr borrowed_iterator_t&amp;lt;R&amp;gt; replace_if(R&amp;amp;&amp;amp; r, Pred pred, const T&amp;amp; new_value, Proj proj = {});
+}
+```
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* identity[link /reference/functional/identity.md]
+* indirectly_writable[link /reference/iterator/indirectly_writable.md]
+* indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
+* projected[link /reference/iterator/projected.md]
+* input_range[link /reference/ranges/input_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+
+## 概要
+条件を満たす要素を指定された値に置き換える。
+
+* (1): イテレーターペアで範囲を指定する
+* (2): 範囲を直接指定する
+
+
+## 効果
+`[first,last)` 内のイテレータ `i` について、`pred(*i) != false` であるものは `*i = new_value` という式によってに置き換えられる。
+
+
+## 戻り値
+`last`
+
+
+## 計算量
+正確に `last - first` 回の述語の適用を行う。
+
+
+## 例
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = { 3,1,2,1,2 };
+
+  // 奇数の要素を全部 10 に置き換える
+  std::ranges::replace_if(v, [](int x) { return x % 2 != 0; }, 10);
+
+  for (int x : v) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34;,&amp;#34;;
+  }
+}
+```
+* std::ranges::replace_if[color ff0000]
+
+### 出力
+```
+10,10,2,10,2,
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>in_found_result -- ページ名を修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_in_found_result.html"/>
      <id>26044757b824e2f7dd7b2970eddf97ec2d97d7c7:reference/algorithm/ranges_in_found_result.md</id>
      <updated>2022-03-21T21:49:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_in_found_result.md b/reference/algorithm/ranges_in_found_result.md
index c172d324a..282a0a411 100644
--- a/reference/algorithm/ranges_in_found_result.md
+++ b/reference/algorithm/ranges_in_found_result.md
@@ -1,4 +1,4 @@
-# in_fun_result
+# in_found_result
 * algorithm[meta header]
 * std::ranges[meta namespace]
 * function template[meta id-type]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>in_out_out_result -- ページ名を修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_in_out_out_result.html"/>
      <id>26044757b824e2f7dd7b2970eddf97ec2d97d7c7:reference/algorithm/ranges_in_out_out_result.md</id>
      <updated>2022-03-21T21:49:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_in_out_out_result.md b/reference/algorithm/ranges_in_out_out_result.md
index bf52fb647..7d83207a1 100644
--- a/reference/algorithm/ranges_in_out_out_result.md
+++ b/reference/algorithm/ranges_in_out_out_result.md
@@ -1,4 +1,4 @@
-# in_fun_result
+# in_out_out_result
 * algorithm[meta header]
 * std::ranges[meta namespace]
 * function template[meta id-type]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>min_max_result -- ページ名を修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_min_max_result.html"/>
      <id>26044757b824e2f7dd7b2970eddf97ec2d97d7c7:reference/algorithm/ranges_min_max_result.md</id>
      <updated>2022-03-21T21:49:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_min_max_result.md b/reference/algorithm/ranges_min_max_result.md
index 58a3ffd3c..c12537343 100644
--- a/reference/algorithm/ranges_min_max_result.md
+++ b/reference/algorithm/ranges_min_max_result.md
@@ -1,4 +1,4 @@
-# in_fun_result
+# min_max_result
 * algorithm[meta header]
 * std::ranges[meta namespace]
 * function template[meta id-type]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
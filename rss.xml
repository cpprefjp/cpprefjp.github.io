<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2015-07-30T13:06:16.653432</updated>
  <id>e4eacc3e-2175-43db-aa8d-993737a9af10</id>

  
    <entry>
      <title>fill (C++11) -- array::assignがarray::fillに改名された経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/array/fill.html"/>
      <id>6dbb809f0b114bfad7f62d9733811bd3fc2ab9dd:reference/array/fill.md</id>
      <updated>2015-07-30 13:06:01 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;array&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class array&#34;&gt;array::&lt;/span&gt;fill (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;fill&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; u);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;コンテナを指定された値で埋める&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/fill_n.html&#34;&gt;&lt;code&gt;fill_n&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/array/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), N, u)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;array&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::for_each&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&amp;gt;&lt;/span&gt; ar;

  ar.&lt;span style=&#34;color:#ff0000&#34;&gt;fill&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(ar.begin(), ar.end(), [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  });
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
3
3
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 10.0, 11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#776&#34; target=&#34;_blank&#34;&gt;LWG Issue 776. Undescribed &lt;code&gt;assign&lt;/code&gt; function of &lt;code&gt;std::array&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;assign()&lt;/code&gt;という名前だったメンバ関数が&lt;code&gt;fill()&lt;/code&gt;に改名された経緯のレポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unique_ptr (C++11) -- unique_ptrが完全型を要求するようになった経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/memory/unique_ptr.html"/>
      <id>c8cd768234258b0d96810bf287b4382d1a93d696:reference/memory/unique_ptr.md</id>
      <updated>2015-07-30 13:02:59 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;memory&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;unique_ptr (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 単一オブジェクト版&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;D&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/default_delete.html&#34;&gt;default_delete&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;unique_ptr&lt;/span&gt;;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 配列版&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;D&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;unique_ptr&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T[], D&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;unique_ptr&lt;/code&gt;は指定されたリソースへのポインタの所有権(ownership)を唯一(unique)持っているように振舞うスマートポインタである。&lt;code&gt;unique_ptr&lt;/code&gt;はコピー不可能なクラスである。代わりにムーブによって所有権を他の&lt;code&gt;unique_ptr&lt;/code&gt; へ譲渡することができる。また、&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;&lt;code&gt;shared_ptr&lt;/code&gt;&lt;/a&gt;は&lt;code&gt;unique_ptr&lt;/code&gt;を受け取るムーブコンストラクタとムーブ代入演算子を持つ。&lt;code&gt;auto_ptr&lt;/code&gt;では配列を渡すことができなかったが、（正確にはデストラクタで&lt;code&gt;delete[]&lt;/code&gt;ではなく&lt;code&gt;delete&lt;/code&gt;が呼び出されるため上手く動作しない）&lt;code&gt;unique_ptr&lt;/code&gt;では&lt;code&gt;T[]&lt;/code&gt;時に&lt;code&gt;delete[]&lt;/code&gt;を呼び出すように&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/default_delete.html&#34;&gt;&lt;code&gt;default_delete&lt;/code&gt;&lt;/a&gt;を特殊化することで対応した。&lt;code&gt;unique_ptr&lt;/code&gt;自体も&lt;code&gt;T[]&lt;/code&gt;時には特殊化され、&lt;code&gt;operator[]&lt;/code&gt;によるアクセスを提供している。&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr/op_constructor.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr/op_destructor.html&#34;&gt;&lt;code&gt;(destructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr/op_assign.html&#34;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr/release.html&#34;&gt;&lt;code&gt;release&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;リソースの所有権を放棄する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr/reset.html&#34;&gt;&lt;code&gt;reset&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;リソースの所有権を放棄し、新たなリソースの所有権を設定する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr/swap.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;他の&lt;code&gt;unique_ptr&lt;/code&gt;オブジェクトとデータを入れ替える&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr/get.html&#34;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;リソースを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr/get_deleter.html&#34;&gt;&lt;code&gt;get_deleter&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デリータを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr/op_bool.html&#34;&gt;&lt;code&gt;operator bool&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;有効なリソースを所有しているかを判定する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;単一オブジェクト版(unique_ptr&amp;lt;T&amp;gt;)固有のメンバ関数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr/op_deref.html&#34;&gt;&lt;code&gt;operator*&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;間接参照&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr/op_arrow.html&#34;&gt;&lt;code&gt;operator-&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバアクセス&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;配列版(unique_ptr&amp;lt;T[ ]&amp;gt;)固有のメンバ関数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr/op_at.html&#34;&gt;&lt;code&gt;operator[]&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;任意の位置の要素にアクセス&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;所有するリソースのポインタ型&lt;code&gt;T*&lt;/code&gt; 。ただし、&lt;code&gt;deleter_type::pointer&lt;/code&gt; 型が存在する場合はその型になる。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;element_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素型&lt;code&gt;T&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;deleter_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デリータの型&lt;code&gt;D&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr/op_not_equal.html&#34;&gt;&lt;code&gt;operator!=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr/op_less.html&#34;&gt;&lt;code&gt;operator&amp;lt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より小さいかを判定する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr/op_less_equal.html&#34;&gt;&lt;code&gt;operator&amp;lt;=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺以下かを判定する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr/op_greater.html&#34;&gt;&lt;code&gt;operator&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より大きいかを判定する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr/op_greater_equal.html&#34;&gt;&lt;code&gt;operator&amp;gt;=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺以上かを判定する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr/swap_free.html&#34;&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2つの&lt;code&gt;unique_ptr&lt;/code&gt;オブジェクトを入れ替える&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr/make_unique.html&#34;&gt;&lt;code&gt;make_unique&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;unique_ptr&lt;/code&gt;を構築するヘルパ関数&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ハッシュサポート&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class T&amp;gt; struct hash;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;hash&lt;/code&gt;クラスの先行宣言&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class T, class D&amp;gt; struct hash&amp;lt;unique_ptr&amp;lt;N&amp;gt;&amp;gt;;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;hash&lt;/code&gt;クラスの&lt;code&gt;unique_ptr&lt;/code&gt;に対する特殊化&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;memory&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; hoge {
  hoge() { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hoge::hoge()&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; };
  &lt;span style=&#34;color: #666666&#34;&gt;~&lt;/span&gt;hoge() { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hoge::~hoge()&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; };
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;hoge&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p0(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; hoge());

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// hogeオブジェクトの所有権をp0からp1に移動&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// p0は何も所有していない状態になる&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;hoge&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p1(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(p0));

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (p0) {
    abort();
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// p1が所有しているリソースが解放される&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;hoge::hoge()
hoge::~hoge()
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.4, 4.7.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; 10.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参照&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#672&#34; target=&#34;_blank&#34;&gt;LWG Issue 673. &lt;code&gt;unique_ptr&lt;/code&gt; update&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unique_ptr&amp;lt;void, Deleter&amp;gt;&lt;/code&gt;を許可するために、インタフェースを改良した経緯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#762&#34; target=&#34;_blank&#34;&gt;LWG Issue 762. &lt;code&gt;std::unique_ptr&lt;/code&gt; requires complete type?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>random (C++11) -- 乱数ライブラリのもろもろの問題解決へのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/random.html"/>
      <id>386a324e68d47139062f1eaca77bb6ed5b61acc7:reference/random.md</id>
      <updated>2015-07-30 13:00:54 +0900</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;random&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;random (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;random&amp;gt;&lt;/code&gt;ヘッダは、擬似乱数を取り扱うための乱数生成器 (Random Number Generator) や分布生成器 (Distribution) 、非決定的な乱数生成器、及び関連する一連のクラス・関数を定義する乱数ライブラリである。&lt;/p&gt;
&lt;h2&gt;擬似乱数生成器&lt;/h2&gt;
&lt;p&gt;擬似乱数生成器は、ソフトウェアで乱雑な値のシーケンスを生成するクラスである。&lt;br /&gt;
多くのユーザーにとっては、以下に挙げる生の乱数生成器テンプレートクラスそのものよりも、後述するパラメータ定義済みの乱数生成器の型を使用すれば十分である。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/linear_congruential_engine.html&#34;&gt;&lt;code&gt;linear_congruential_engine&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;線形合同法(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/mersenne_twister_engine.html&#34;&gt;&lt;code&gt;mersenne_twister_engine&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メルセンヌツイスター法(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/subtract_with_carry_engine.html&#34;&gt;&lt;code&gt;subtract_with_carry_engine&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャリー付き減算法(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;生成器アダプタ&lt;/h2&gt;
&lt;p&gt;生成器アダプタは、他の乱数生成器の乱数列を調整するクラスである。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/discard_block_engine.html&#34;&gt;&lt;code&gt;discard_block_engine&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;部分的に乱数列を破棄する(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/independent_bits_engine.html&#34;&gt;&lt;code&gt;independent_bits_engine&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;乱数生成器が生成するビットを変更する(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/shuffle_order_engine.html&#34;&gt;&lt;code&gt;shuffle_order_engine&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;乱数の生成順をシャッフルする(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;パラメータ定義済み擬似乱数生成器&lt;/h2&gt;
&lt;p&gt;先に挙げた乱数生成器に対し一般的なパラメータを定義し、使いやすいように用意された乱数生成器の型。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/minstd_rand0.html&#34;&gt;&lt;code&gt;minstd_rand0&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小標準MINSTD(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/minstd_rand.html&#34;&gt;&lt;code&gt;minstd_rand&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小標準MINSTDのパラメータ改良版(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/mt19937.html&#34;&gt;&lt;code&gt;mt19937&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メルセンヌツイスターの32ビット版(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/mt19937_64.html&#34;&gt;&lt;code&gt;mt19937_64&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メルセンヌツイスターの64ビット版(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/ranlux24_base.html&#34;&gt;&lt;code&gt;ranlux24_base&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;RANLUX法の&lt;code&gt;ranlux24&lt;/code&gt;を定義するための型(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/ranlux48_base.html&#34;&gt;&lt;code&gt;ranlux48_base&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;RANLUX法の&lt;code&gt;ranlux48&lt;/code&gt;を定義するための型(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/ranlux24.html&#34;&gt;&lt;code&gt;ranlux24&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;RANLUX法のレベル3(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/ranlux48.html&#34;&gt;&lt;code&gt;ranlux48&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;RANLUX法のレベル4(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/knuth_b.html&#34;&gt;&lt;code&gt;knuth_b&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;KnuthのリオーダーアルゴリズムB(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/default_random_engine.html&#34;&gt;&lt;code&gt;default_random_engine&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非専門用途でデフォルト使用する擬似乱数生成器(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非決定的な乱数生成器&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/random_device.html&#34;&gt;&lt;code&gt;random_device&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;予測不能な乱数生成器(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;シード数列&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/seed_seq.html&#34;&gt;&lt;code&gt;seed_seq&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;疑似乱数エンジンの為のシード数列(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;分布生成器&lt;/h2&gt;
&lt;h3&gt;一様分布&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/uniform_int_distribution.html&#34;&gt;&lt;code&gt;uniform_int_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一様整数分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/uniform_real_distribution.html&#34;&gt;&lt;code&gt;uniform_real_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一様実数分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ベルヌーイ分布(Bernoulli Distribution)&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/bernoulli_distribution.html&#34;&gt;&lt;code&gt;bernoulli_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ベルヌーイ分布(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/binomial_distribution.html&#34;&gt;&lt;code&gt;binomial_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;二項分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/geometric_distribution.html&#34;&gt;&lt;code&gt;geometric_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;幾何分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/negative_binomial_distribution.html&#34;&gt;&lt;code&gt;negative_binomial_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;負の二項分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ポワソン分布(Poisson Distribution)&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/poisson_distribution.html&#34;&gt;&lt;code&gt;poisson_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ポワソン分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/exponential_distribution.html&#34;&gt;&lt;code&gt;exponential_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指数分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/gamma_distribution.html&#34;&gt;&lt;code&gt;gamma_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ガンマ分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/weibull_distribution.html&#34;&gt;&lt;code&gt;weibull_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ワイブル分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/extreme_value_distribution.html&#34;&gt;&lt;code&gt;extreme_value_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;極値分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;正規分布(Normal Distribution)&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/normal_distribution.html&#34;&gt;&lt;code&gt;normal_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;正規分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/lognormal_distribution.html&#34;&gt;&lt;code&gt;lognormal_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;対数正規分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/chi_squared_distribution.html&#34;&gt;&lt;code&gt;chi_squared_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;カイ二乗分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/cauchy_distribution.html&#34;&gt;&lt;code&gt;cauchy_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コーシー分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/fisher_f_distribution.html&#34;&gt;&lt;code&gt;fisher_f_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;フィッシャーのF分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/student_t_distribution.html&#34;&gt;&lt;code&gt;student_t_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ステューデントのt分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;標本分布(Sampling Distribution)&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/discrete_distribution.html&#34;&gt;&lt;code&gt;discrete_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;整数のインデックスごとに離散した確率分布生成器(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/piecewise_constant_distribution.html&#34;&gt;&lt;code&gt;piecewise_constant_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;区間ごとの重み付けを定数値とした分布生成器(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/piecewise_linear_distribution.html&#34;&gt;&lt;code&gt;piecewise_linear_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;区間ごとの重み付けを線形に接続した分布生成器(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ユーティリティ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/generate_canonical.html&#34;&gt;&lt;code&gt;generate_canonical&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;実数区間[0.0,1.0)に展開（事実上正規化）された一様分布乱数を得る(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;以下に示す例では、C++11の標準の乱数ライブラリを用いてランダムデバイスから初期化数列を取得してメルセンヌツイスタエンジンを初期化、単精度浮動少数型で区間[-1.0f, 1.0f)の一様分布、および&lt;code&gt;1.0f&lt;/code&gt;を中心として標準偏差&lt;code&gt;0.5f&lt;/code&gt;の正規分布に基づく擬似乱数を100万個生成し&#34;random.tsv&#34;にタブ区切り形式のファイルとして結果を保存する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;fstream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メルセンヌ・ツイスター法による擬似乱数生成器を、&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ハードウェア乱数をシードにして初期化&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;random_device seed_gen;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mt19937 engine(seed_gen());

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 一様実数分布&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// [-1.0, 1.0)の値の範囲で、等確率に実数を生成する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;uniform_real_distribution&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; dist1(&lt;span style=&#34;color: #666666&#34;&gt;-1.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.0&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 正規分布&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 平均1.0、標準偏差0.5で分布させる&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;normal_distribution&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; dist2(&lt;span style=&#34;color: #666666&#34;&gt;1.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0.5&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ofstream file(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;random.tsv&#34;&lt;/span&gt;);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1000*1000&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 各分布法に基いて乱数を生成&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; r1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; dist1(engine);
    &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; r2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; dist2(engine);

    file &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; r1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; r2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;この例である時得られた &lt;a href=&#34;https://github.com/cpprefjp/image/raw/master/reference/random/random.tsv.xz&#34; target=&#34;_blank&#34;&gt;random.tsv&lt;/a&gt; (ファイルサイズが大きいので添付する上では random.tsv.xz に圧縮) を元に、得られたデータの密度を図示すると、以下のような図が得られた。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/reference/random/random.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;破線は dist1 (一様分布; min=-1.0f, max=1.0f) 、実線は dist2 (正規分布; mean=1.0f, stdev=0.5f) 、横軸は値、縦軸は密度(値の件数を区間ごとに数えたヒストグラムを全体に占める割合で表したもの)である。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.biwako.shiga-u.ac.jp/sensei/mnaka/ut/statdist.html&#34; target=&#34;_blank&#34;&gt;さまざまな確率分布 (probability distributions)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sites.google.com/site/techdmba/distribution&#34; target=&#34;_blank&#34;&gt;確率変数－種々の分布の特徴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/1993/N0352.asc&#34; target=&#34;_blank&#34;&gt;N0352 Proposal for Standardization of Random Number Generators in C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1398.html&#34; target=&#34;_blank&#34;&gt;N1398 A Proposal to Add an Extensible Random Number Facility to the Standard Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1588.pdf&#34; target=&#34;_blank&#34;&gt;N1588 On Random-Number Distributions for C++0x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2424.pdf&#34; target=&#34;_blank&#34;&gt;N2424 Recommendations for Resolving the 2007-09-21 Issues re [rand]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3551.pdf&#34; target=&#34;_blank&#34;&gt;N3551 Random Number Generation in C++11&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;編集者向けの参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/editors_doc/random_figure.html&#34;&gt;乱数分布の図を作る方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>search_n -- search_n : C++11で計算量が見直された経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/algorithm/search_n.html"/>
      <id>151c7b774b7030ed0684a063a3e74ac15f1c0fc8:reference/algorithm/search_n.md</id>
      <updated>2015-07-30 12:55:22 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;search_n&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ForwardIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Size&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  ForwardIterator search_n(ForwardIterator first, ForwardIterator last,
                           Size count, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ForwardIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Size&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;BinaryPredicate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  ForwardIterator search_n(ForwardIterator first, ForwardIterator last,
                           Size count, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value, BinaryPredicate pred);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;あるシーケンスの中から、特定のサブシーケンスを探す。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Size&lt;/code&gt;は整数型に変換できる型である必要がある。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;[first,last-count)&lt;/code&gt; 内のイテレータ &lt;code&gt;i&lt;/code&gt; があるとき、0 以上 &lt;code&gt;count&lt;/code&gt; 未満の整数 &lt;code&gt;n&lt;/code&gt; について、それぞれ &lt;code&gt;*(i + n) == value&lt;/code&gt; もしくは &lt;code&gt;pred(*(i + n),value) != false&lt;/code&gt; であるようなサブシーケンスを探し、見つかった最初のサブシーケンスの先頭のイテレータを返す。&lt;/p&gt;
&lt;p&gt;そのようなイテレータが見つからない場合は &lt;code&gt;last&lt;/code&gt; を返す。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;最大で &lt;code&gt;last - first&lt;/code&gt; 回の対応する比較もしくは述語が適用される。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt; };

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3 が 2 つ連続している最初のシーケンスを探す&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;search_n&lt;/span&gt;(v.cbegin(), v.cend(), &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// v[5] の位置を指すイテレータが見つかる。&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (it1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; v.cend()) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;not found&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  } &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;found: index==&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;distance(v.cbegin(), it1) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3 未満が 2 つ連続している最初のシーケンスを探す&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;search_n&lt;/span&gt;(v.cbegin(), v.cend(), &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; y) { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; y; });
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// v[0] の位置を指すイテレータが見つかる。&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (it2 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; v.cend()) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;not found&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  } &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;found: index==&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;distance(v.cbegin(), it2) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #A0A000&#34;&gt;found:&lt;/span&gt; index&lt;span style=&#34;color: #666666&#34;&gt;==5&lt;/span&gt;
&lt;span style=&#34;color: #A0A000&#34;&gt;found:&lt;/span&gt; index&lt;span style=&#34;color: #666666&#34;&gt;==0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ForwardIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Size&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
ForwardIterator search_n(ForwardIterator first, ForwardIterator last, Size count, T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (first &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; last &lt;span style=&#34;color: #666666&#34;&gt;||&lt;/span&gt; count &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; first;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (first &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;first &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; value) {
      ForwardIterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; first;
      &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it;
      Size i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; count &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; value; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i, &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it)
        ;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; count)
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; first;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; last)
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; last;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt;
        first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; it;
    }
    &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;first;
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; last;
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ForwardIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Size&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;BinaryPredicate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
ForwardIterator search_n(ForwardIterator first, ForwardIterator last,
                         Size count, T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value, BinaryPredicate pred)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (first &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; last &lt;span style=&#34;color: #666666&#34;&gt;||&lt;/span&gt; count &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; first;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (first &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (pred(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;first, value)) {
      ForwardIterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; first;
      &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it;
      Size i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; count &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; pred(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it, value); &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i, &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it)
        ;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; count)
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; first;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; last)
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; last;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt;
        first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; it;
    }
    &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;first;
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; last;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#714&#34; target=&#34;_blank&#34;&gt;LWG Issue 714. &lt;code&gt;search_n&lt;/code&gt; complexity is too lax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2150&#34; target=&#34;_blank&#34;&gt;LWG Issue 2150. Unclear specification of &lt;code&gt;find_end&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sort -- sort : 計算量が見直された経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/algorithm/sort.html"/>
      <id>08121ca50cc28699ae293c511634c272dc0abf27:reference/algorithm/sort.md</id>
      <updated>2015-07-30 12:52:12 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;sort&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;RandomAccessIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; sort(RandomAccessIterator first, RandomAccessIterator last);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;RandomAccessIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Compare&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; sort(RandomAccessIterator first, RandomAccessIterator last,
            Compare comp);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;範囲を並べ替える&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;RandomAccessIterator&lt;/code&gt; は &lt;code&gt;ValueSwappable&lt;/code&gt; の要求を満たしている必要がある。&lt;code&gt;*first&lt;/code&gt; の型は &lt;code&gt;MoveConstructible&lt;/code&gt; と &lt;code&gt;MoveAssignable&lt;/code&gt; の要件を満たしている必要がある。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;[first,last)&lt;/code&gt; の範囲をソートする&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++03: 平均して約N log N (N == &lt;code&gt;last - first&lt;/code&gt;) 回の比較&lt;/li&gt;
&lt;li&gt;C++11以降: N log N (N == &lt;code&gt;last - first&lt;/code&gt;) 回の比較&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;実装のアルゴリズムとしては、クイックソートもしくはその改良版であるイントロソートが使われることが多い。&lt;/p&gt;
&lt;p&gt;(※特定のアルゴリズムで実装すべきという規定はない)&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;};

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 並べ替える&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;sort&lt;/span&gt;(v.begin(), v.end());

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v.begin(), v.end(), [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  });
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
2
3
4
5
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#713&#34; target=&#34;_blank&#34;&gt;LWG Issue 713. &lt;code&gt;sort()&lt;/code&gt; complexity is too lax&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11で、イントロソートアルゴリズムを考慮して、計算量の規定が見直された経緯のレポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
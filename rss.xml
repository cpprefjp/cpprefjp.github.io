<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-11-12T09:06:58.283499</updated>
  <id>ed23fbfb-09b5-421b-8555-014d8bc006c1</id>

  
    <entry>
      <title>span -- span : iteratorのモデルを記載</title>
      <link href="https://cpprefjp.github.io/reference/span/span.html"/>
      <id>86a664b7a326fd87e3f94d0d802fc1caad424742:reference/span/span.md</id>
      <updated>2020-11-12T18:02:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/span/span.md b/reference/span/span.md
index e1768e7ba..d2253a126 100644
--- a/reference/span/span.md
+++ b/reference/span/span.md
@@ -114,7 +114,7 @@ namespace std {
 | `const_pointer` | `const`ポインタ型 `const element_type*` | C++20 |
 | `reference` | 参照型 `element_type&amp;amp;` | C++20 |
 | `const_reference` | `const`参照型 `const element_type&amp;amp;` | C++20 |
-| `iterator` | 実装定義のイテレータ型 | C++20 |
+| `iterator` | 実装定義のイテレータ型。[`contiguous_iterator`](/reference/iterator/contiguous_iterator.md)、[`random_access_iterator`](/reference/iterator/random_access_iterator.md)、constexprイテレータのモデルであり、コンテナのイテレータに対するすべての要件を満たす | C++20 |
 | `reverse_iterator` | 逆順イテレータ [`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;iterator&amp;gt;` | C++20 |
 
 
@@ -256,6 +256,7 @@ int main()
 - [P1085R2 Should `span` be regular?](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1085r2.md)
 - [P1227R2 Signed `ssize()` functions, unsigned `size()` functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1227r2.html)
 - [P1024R3 Usability enhancements for `std::span`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1024r3.pdf)
+- [LWG Issue 3102 Clarify `span` `iterator` and `const_iterator` behavior](https://wg21.cmeerw.net/lwg/issue3102)
 - [LWG Issue 3144. `span` does not have a `const_pointer` typedef](https://wg21.cmeerw.net/lwg/issue3144)
 - [LWG Issue 3203. `span` element access invalidation](https://cplusplus.github.io/LWG/lwg-active.html#3203)
 - [P1872R0 `span` should have `size_type`, not `index_type`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1872r0.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- spanのコンストラクタ : 組み込み配列からは推論ガイド経由でしか推論できないよう修正</title>
      <link href="https://cpprefjp.github.io/reference/span/span/op_constructor.html"/>
      <id>cabfadea78d4a07b4983bae7c15308e434cb1239:reference/span/span/op_constructor.md</id>
      <updated>2020-11-12T17:55:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/span/span/op_constructor.md b/reference/span/span/op_constructor.md
index 12f400bd9..c039b356a 100644
--- a/reference/span/span/op_constructor.md
+++ b/reference/span/span/op_constructor.md
@@ -17,7 +17,8 @@ constexpr explicit(extent != dynamic_extent)
   span(It first, End last);                                    // (3) C++20
 
 template &amp;lt;size_t N&amp;gt;
-constexpr span(element_type (&amp;amp;arr)[N]) noexcept;               // (4) C++20
+constexpr span(
+  type_identity_t&amp;lt;element_type&amp;gt; (&amp;amp;arr)[N]) noexcept;           // (4) C++20
 
 template &amp;lt;class T, size_t N&amp;gt;
 constexpr span(array&amp;lt;T, N&amp;gt;&amp;amp; arr) noexcept;                     // (5) C++20
@@ -38,6 +39,7 @@ constexpr explicit(extent != dynamic_extent &amp;amp;&amp;amp; OtherExtent == dynamic_extent)
 * size_t[link /reference/cstddef/size_t.md]
 * array[link /reference/array/array.md]
 * dynamic_extent[link /reference/span/dynamic_extent.md]
+* type_identity_t[link /reference/type_traits/type_identity.md]
 
 ## 概要
 `span`オブジェクトを構築する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- spanのコンストラクタ : 例外送出の条件を修正</title>
      <link href="https://cpprefjp.github.io/reference/span/span/op_constructor.html"/>
      <id>b334da613bdc3741a683b2fe7d9b20f755024509:reference/span/span/op_constructor.md</id>
      <updated>2020-11-12T17:46:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/span/span/op_constructor.md b/reference/span/span/op_constructor.md
index 52c415fd9..12f400bd9 100644
--- a/reference/span/span/op_constructor.md
+++ b/reference/span/span/op_constructor.md
@@ -122,7 +122,8 @@ constexpr explicit(extent != dynamic_extent &amp;amp;&amp;amp; OtherExtent == dynamic_extent)
 
 
 ## 例外
-- (1), (2), (3), (4), (5), (6) : 投げない
+- (1), (2), (4), (5), (6) : 投げない
+- (3) : `last - first`がなんらかの例外を送出する可能性がある
 - (7) : コンテナ型によっては、`std::ranges::data(r)`と`std::ranges::size(r)`の呼び出しがなんらかの例外を送出する可能性がある
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- spanのコンストラクタ : value_typeをTに変更</title>
      <link href="https://cpprefjp.github.io/reference/span/span/op_constructor.html"/>
      <id>a9b71441308034fa2114e12812079ec4e0504a66:reference/span/span/op_constructor.md</id>
      <updated>2020-11-12T17:43:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/span/span/op_constructor.md b/reference/span/span/op_constructor.md
index 9fbec545f..52c415fd9 100644
--- a/reference/span/span/op_constructor.md
+++ b/reference/span/span/op_constructor.md
@@ -19,11 +19,11 @@ constexpr explicit(extent != dynamic_extent)
 template &amp;lt;size_t N&amp;gt;
 constexpr span(element_type (&amp;amp;arr)[N]) noexcept;               // (4) C++20
 
-template &amp;lt;size_t N&amp;gt;
-constexpr span(array&amp;lt;value_type, N&amp;gt;&amp;amp; arr) noexcept;            // (5) C++20
+template &amp;lt;class T, size_t N&amp;gt;
+constexpr span(array&amp;lt;T, N&amp;gt;&amp;amp; arr) noexcept;                     // (5) C++20
 
-template &amp;lt;size_t N&amp;gt;
-constexpr span(const array&amp;lt;value_type, N&amp;gt;&amp;amp; arr) noexcept;      // (6) C++20
+template &amp;lt;class T, size_t N&amp;gt;
+constexpr span(const array&amp;lt;T, N&amp;gt;&amp;amp; arr) noexcept;               // (6) C++20
 
 template &amp;lt;class R&amp;gt;
 constexpr explicit(extent != dynamic_extent)
@@ -115,10 +115,10 @@ constexpr explicit(extent != dynamic_extent &amp;amp;&amp;amp; OtherExtent == dynamic_extent)
 
 
 ## 事後条件
-- (1) : [`size()`](size.md) `== 0 &amp;amp;&amp;amp;` [`data()`](data.md) `== nullptr`
-- (4), (5), (6) : [`size()`](size.md) `== N &amp;amp;&amp;amp;` [`data()`](data.md) `==` [`data`](/reference/iterator/data.md)`(arr)`
-- (8) : [`size()`](size.md) `==` [`size`](/reference/iterator/size.md)`(cont) &amp;amp;&amp;amp;` [`data()`](data.md) `==` [`data`](/reference/iterator/data.md)`(cont)`
-- (9) : [`size()`](size.md) `== s.`[`size()`](size.md) `&amp;amp;&amp;amp;` [`data()`](data.md) `== s.`[`data()`](data.md)
+- (1) : [`size()`](size.md) `== 0 &amp;amp;&amp;amp;` [`data()`](data.md) `== nullptr`が`true`であること
+- (4), (5), (6) : [`size()`](size.md) `== N &amp;amp;&amp;amp;` [`data()`](data.md) `==` [`data`](/reference/iterator/data.md)`(arr)`が`true`であること
+- (8) : [`size()`](size.md) `==` [`size`](/reference/iterator/size.md)`(cont) &amp;amp;&amp;amp;` [`data()`](data.md) `==` [`data`](/reference/iterator/data.md)`(cont)`が`true`であること
+- (9) : [`size()`](size.md) `== s.`[`size()`](size.md) `&amp;amp;&amp;amp;` [`data()`](data.md) `== s.`[`data()`](data.md)が`true`であること
 
 
 ## 例外
@@ -281,3 +281,4 @@ int main()
 - [P1872R0 `span` should have `size_type`, not `index_type`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1872r0.pdf)
 - [P1394R4 Range constructor for `std::span`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1394r4.pdf)
 - [P1976R2 Fixed-size `span` construction from dynamic range](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1976r2.html)
+- [P2117R0 C++ Standard Library Issues Resolved Directly In Prague](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2117r0.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>span -- span : const_iterator関係を削除</title>
      <link href="https://cpprefjp.github.io/reference/span/span.html"/>
      <id>a2026c9c51d37a08982ff46e7d9070a53745d223:reference/span/span.md</id>
      <updated>2020-11-12T17:33:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/span/span.md b/reference/span/span.md
index 05890245f..e1768e7ba 100644
--- a/reference/span/span.md
+++ b/reference/span/span.md
@@ -91,12 +91,8 @@ namespace std {
 |------|------|----------------|
 | [`begin`](span/begin.md) | 先頭要素を指すイテレータを取得する | C++20 |
 | [`end`](span/end.md) | 末尾要素の次を指すイテレータを取得する | C++20 |
-| [`cbegin`](span/cbegin.md) | 先頭要素を指す読み取り専用イテレータを取得する | C++20 |
-| [`cend`](span/cend.md) | 末尾要素の次を指す読み取り専用イテレータを取得する | C++20 |
 | [`rbegin`](span/rbegin.md) | 末尾要素を指す逆順イテレータを取得する | C++20 |
 | [`rend`](span/rend.md) | 先頭要素の前を指す逆順イテレータを取得する | C++20 |
-| [`crbegin`](span/crbegin.md) | 末尾要素を指す読み取り専用逆順イテレータを取得する | C++20 |
-| [`crend`](span/crend.md) | 先頭要素の前を指す読み取り専用逆順イテレータを取得する | C++20 |
 
 
 ### メンバ定数
@@ -119,9 +115,7 @@ namespace std {
 | `reference` | 参照型 `element_type&amp;amp;` | C++20 |
 | `const_reference` | `const`参照型 `const element_type&amp;amp;` | C++20 |
 | `iterator` | 実装定義のイテレータ型 | C++20 |
-| `const_iterator` | 実装定義の読み取り専用イテレータ | C++20 |
 | `reverse_iterator` | 逆順イテレータ [`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;iterator&amp;gt;` | C++20 |
-| `const_reverse_iterator` | 読み取り専用逆イテレータ [`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;const_iterator&amp;gt;` | C++20 |
 
 
 ## 非メンバ関数
@@ -265,4 +259,6 @@ int main()
 - [LWG Issue 3144. `span` does not have a `const_pointer` typedef](https://wg21.cmeerw.net/lwg/issue3144)
 - [LWG Issue 3203. `span` element access invalidation](https://cplusplus.github.io/LWG/lwg-active.html#3203)
 - [P1872R0 `span` should have `size_type`, not `index_type`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1872r0.pdf)
+- [P2051R0 C++ Standard Library Issues to be moved in Prague](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2051r0.html)
+    - `const_iterator`, `const_reverse_iterator`, `cbegin()`, `cend()`, `crbegin()`, `crend()`を削除
 - [P2116R0 Remove tuple-like protocol support from fixed-extent `span`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2116r0.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cbegin.md -- span : const_iterator関係を削除</title>
      <link href="https://cpprefjp.github.io/reference/span/span/cbegin.html"/>
      <id>a2026c9c51d37a08982ff46e7d9070a53745d223:reference/span/span/cbegin.md</id>
      <updated>2020-11-12T17:33:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/span/span/cbegin.md b/reference/span/span/cbegin.md
deleted file mode 100644
index 5f2a1beac..000000000
--- a/reference/span/span/cbegin.md
+++ /dev/null
@@ -1,66 +0,0 @@
-# cbegin
-* span[meta header]
-* std[meta namespace]
-* span[meta class]
-* function[meta id-type]
-* cpp20[meta cpp]
-
-```cpp
-constexpr const_iterator cbegin() const noexcept;
-```
-
-## 概要
-先頭要素を指す読み取り専用イテレータを取得する。
-
-
-## 戻り値
-`span`オブジェクトが参照している範囲の、最初の要素を参照する読み取り専用イテレータを返す。[`empty()`](empty.md)が`true`である場合、[`cend()`](cend.md)と同じ値が返る。
-
-
-## 例外
-投げない
-
-
-## 計算量
-定数時間
-
-
-## 例
-```cpp example
-#include &amp;lt;iostream&amp;gt;
-#include &amp;lt;span&amp;gt;
-#include &amp;lt;vector&amp;gt;
-#include &amp;lt;algorithm&amp;gt;
-
-int main()
-{
-  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
-
-  // vの先頭3要素を部分シーケンスとして参照する
-  std::span&amp;lt;int, 3&amp;gt; s = std::span(v).first(3);
-
-  // アルゴリズム内で要素の変更操作を行わない
-  std::for_each(s.cbegin(), s.cend(), [](int x) {
-    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
-  });
-}
-```
-* s.cbegin[color ff0000]
-* s.cend()[link cend.md]
-* first[link first.md]
-
-### 出力
-```
-1
-2
-3
-```
-
-## バージョン
-### 言語
-- C++20
-
-### 処理系
-- [Clang](/implementation.md#clang): 9.0
-- [GCC](/implementation.md#gcc): ??
-- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cend.md -- span : const_iterator関係を削除</title>
      <link href="https://cpprefjp.github.io/reference/span/span/cend.html"/>
      <id>a2026c9c51d37a08982ff46e7d9070a53745d223:reference/span/span/cend.md</id>
      <updated>2020-11-12T17:33:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/span/span/cend.md b/reference/span/span/cend.md
deleted file mode 100644
index 04b4ebbef..000000000
--- a/reference/span/span/cend.md
+++ /dev/null
@@ -1,66 +0,0 @@
-# cend
-* span[meta header]
-* std[meta namespace]
-* span[meta class]
-* function[meta id-type]
-* cpp20[meta cpp]
-
-```cpp
-constexpr const_iterator cend() const noexcept;
-```
-
-## 概要
-末尾要素の次を指す読み取り専用イテレータを取得する。
-
-
-## 戻り値
-`span`オブジェクトが参照している範囲の、末尾要素の次を参照する読み取り専用イテレータを返す。
-
-
-## 例外
-投げない
-
-
-## 計算量
-定数時間
-
-
-## 例
-```cpp example
-#include &amp;lt;iostream&amp;gt;
-#include &amp;lt;span&amp;gt;
-#include &amp;lt;vector&amp;gt;
-#include &amp;lt;algorithm&amp;gt;
-
-int main()
-{
-  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
-
-  // vの先頭3要素を部分シーケンスとして参照する
-  std::span&amp;lt;int, 3&amp;gt; s = std::span(v).first(3);
-
-  // アルゴリズム内で要素の変更操作を行わない
-  std::for_each(s.cbegin(), s.cend(), [](int x) {
-    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
-  });
-}
-```
-* s.cend[color ff0000]
-* s.cbegin()[link cend.md]
-* first[link first.md]
-
-### 出力
-```
-1
-2
-3
-```
-
-## バージョン
-### 言語
-- C++20
-
-### 処理系
-- [Clang](/implementation.md#clang): 9.0
-- [GCC](/implementation.md#gcc): ??
-- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crbegin.md -- span : const_iterator関係を削除</title>
      <link href="https://cpprefjp.github.io/reference/span/span/crbegin.html"/>
      <id>a2026c9c51d37a08982ff46e7d9070a53745d223:reference/span/span/crbegin.md</id>
      <updated>2020-11-12T17:33:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/span/span/crbegin.md b/reference/span/span/crbegin.md
deleted file mode 100644
index 19cf03d1b..000000000
--- a/reference/span/span/crbegin.md
+++ /dev/null
@@ -1,72 +0,0 @@
-# crbegin
-* span[meta header]
-* std[meta namespace]
-* span[meta class]
-* function[meta id-type]
-* cpp20[meta cpp]
-
-```cpp
-constexpr const_reverse_iterator crbegin() const noexcept;
-```
-
-## 概要
-先頭要素を指す読み取り専用逆順イテレータを取得する。
-
-
-## 戻り値
-以下と等価：
-
-```cpp
-return const_reverse_iterator(cend());
-```
-* cend()[link cend.md]
-
-
-## 例外
-投げない
-
-
-## 計算量
-定数時間
-
-
-## 例
-```cpp example
-#include &amp;lt;iostream&amp;gt;
-#include &amp;lt;span&amp;gt;
-#include &amp;lt;vector&amp;gt;
-#include &amp;lt;algorithm&amp;gt;
-
-int main()
-{
-  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
-
-  // vの先頭3要素を部分シーケンスとして参照する
-  std::span&amp;lt;int, 3&amp;gt; s = std::span(v).first(3);
-
-  // 逆順に出力。
-  // アルゴリズム内で要素の変更操作を行わない
-  std::for_each(s.crbegin(), s.crend(), [](int x) {
-    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
-  });
-}
-```
-* crbegin[color ff0000]
-* s.crend()[link crend.md]
-* first[link first.md]
-
-### 出力
-```
-3
-2
-1
-```
-
-## バージョン
-### 言語
-- C++20
-
-### 処理系
-- [Clang](/implementation.md#clang): 9.0
-- [GCC](/implementation.md#gcc): ??
-- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crend.md -- span : const_iterator関係を削除</title>
      <link href="https://cpprefjp.github.io/reference/span/span/crend.html"/>
      <id>a2026c9c51d37a08982ff46e7d9070a53745d223:reference/span/span/crend.md</id>
      <updated>2020-11-12T17:33:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/span/span/crend.md b/reference/span/span/crend.md
deleted file mode 100644
index 04fe3dd9e..000000000
--- a/reference/span/span/crend.md
+++ /dev/null
@@ -1,72 +0,0 @@
-# crend
-* span[meta header]
-* std[meta namespace]
-* span[meta class]
-* function[meta id-type]
-* cpp20[meta cpp]
-
-```cpp
-constexpr const_reverse_iterator crend() const noexcept;
-```
-
-## 概要
-末尾要素の次を指す読み取り専用逆順イテレータを取得する。
-
-
-## 戻り値
-以下と等価：
-
-```cpp
-return const_reverse_iterator(cbegin());
-```
-* cbegin()[link cbegin.md]
-
-
-## 例外
-投げない
-
-
-## 計算量
-定数時間
-
-
-## 例
-```cpp example
-#include &amp;lt;iostream&amp;gt;
-#include &amp;lt;span&amp;gt;
-#include &amp;lt;vector&amp;gt;
-#include &amp;lt;algorithm&amp;gt;
-
-int main()
-{
-  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
-
-  // vの先頭3要素を部分シーケンスとして参照する
-  std::span&amp;lt;int, 3&amp;gt; s = std::span(v).first(3);
-
-  // 逆順に出力。
-  // アルゴリズム内で要素の変更操作を行わない
-  std::for_each(s.crbegin(), s.crend(), [](int x) {
-    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
-  });
-}
-```
-* crend[color ff0000]
-* s.crbegin()[link crbegin.md]
-* first[link first.md]
-
-### 出力
-```
-3
-2
-1
-```
-
-## バージョン
-### 言語
-- C++20
-
-### 処理系
-- [Clang](/implementation.md#clang): 9.0
-- [GCC](/implementation.md#gcc): ??
-- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
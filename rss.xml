<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-04-02T14:38:46.678042</updated>
  <id>dd3c57fc-831f-423d-8b81-b43f02406afa</id>

  
    <entry>
      <title>vformat_to -- リンク追加</title>
      <link href="https://cpprefjp.github.io/reference/format/vformat_to.html"/>
      <id>8ca314b28b9137c18bb99d7f1b9c372243606cd4:reference/format/vformat_to.md</id>
      <updated>2024-04-02T07:47:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/vformat_to.md b/reference/format/vformat_to.md
index e6a3e14a7..dd565dd0d 100644
--- a/reference/format/vformat_to.md
+++ b/reference/format/vformat_to.md
@@ -154,6 +154,8 @@ Out vformat_to(Out out, std::string_view fmt, std::basic_format_args&amp;lt;Context&amp;gt; ar
 * std::basic_format_parse_context[link /reference/format/basic_format_parse_context.md]
 * std::basic_format_context[link /reference/format/basic_format_context.md]
 * std::basic_format_args[link /reference/format/basic_format_args.md]
+* std::basic_format_arg[link /reference/format/basic_format_arg.md]
+* handle[link /reference/format/basic_format_arg/handle.md]
 * std::visit_format_arg[link /reference/format/visit_format_arg.md]
 * std::from_chars[link /reference/charconv/from_chars.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vformat_to -- Fix error</title>
      <link href="https://cpprefjp.github.io/reference/format/vformat_to.html"/>
      <id>963ad2b66de478007b52277909109a1f1c770f2b:reference/format/vformat_to.md</id>
      <updated>2024-04-02T07:45:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/vformat_to.md b/reference/format/vformat_to.md
index 78737ce05..e6a3e14a7 100644
--- a/reference/format/vformat_to.md
+++ b/reference/format/vformat_to.md
@@ -90,7 +90,7 @@ struct ArgVisitor {
   }
 };
 
-template&amp;lt;std::output_iterator&amp;lt;char&amp;gt; Out, class Context = basic_format_context&amp;lt;Out, char&amp;gt;&amp;gt;
+template&amp;lt;std::output_iterator&amp;lt;char&amp;gt; Out, class Context = std::basic_format_context&amp;lt;Out, char&amp;gt;&amp;gt;
 Out vformat_to(Out out, std::string_view fmt, std::basic_format_args&amp;lt;Context&amp;gt; args) {
   using ParseContext = std::basic_format_parse_context&amp;lt;decltype(fmt)::value_type&amp;gt;;
   ParseContext pctx{fmt};
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vformat_to -- 実装例を追加</title>
      <link href="https://cpprefjp.github.io/reference/format/vformat_to.html"/>
      <id>5398590e45f46a3ceeebed25fc7e23c6f1c6a893:reference/format/vformat_to.md</id>
      <updated>2024-04-02T07:35:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/vformat_to.md b/reference/format/vformat_to.md
index ce3287278..78737ce05 100644
--- a/reference/format/vformat_to.md
+++ b/reference/format/vformat_to.md
@@ -65,6 +65,98 @@ namespace std {
 
 書式文字列が正しくなかったり、フォーマット実行時に失敗したりした場合、[`format_error`](format_error.md)を投げる。
 
+## 実装例
+
+```cpp
+template&amp;lt;class ParseContext, class FormatContext&amp;gt;
+struct ArgVisitor {
+  ParseContext&amp;amp; pctx;
+  FormatContext&amp;amp; fctx;
+
+  void operator()(std::monostate) {
+  }
+
+  using handle = std::basic_format_arg&amp;lt;FormatContext&amp;gt;::handle;
+  void operator()(const handle&amp;amp; handle) {
+    handle.format(pctx, fctx);
+  }
+
+  template&amp;lt;class T&amp;gt;
+  void operator()(const T&amp;amp; arg) {
+    using Formatter = FormatContext::template formatter_type&amp;lt;T&amp;gt;;
+    Formatter formatter;
+    pctx.advance_to(formatter.parse(pctx));
+    fctx.advance_to(formatter.format(arg, fctx));
+  }
+};
+
+template&amp;lt;std::output_iterator&amp;lt;char&amp;gt; Out, class Context = basic_format_context&amp;lt;Out, char&amp;gt;&amp;gt;
+Out vformat_to(Out out, std::string_view fmt, std::basic_format_args&amp;lt;Context&amp;gt; args) {
+  using ParseContext = std::basic_format_parse_context&amp;lt;decltype(fmt)::value_type&amp;gt;;
+  ParseContext pctx{fmt};
+  Context fctx{out, args}; // このコンストラクタの存在は未規定
+  ArgVisitor&amp;lt;ParseContext, Context&amp;gt; visitor{pctx, fctx};
+
+  size_t next_arg_index = 0;
+  while (!std::ranges::empty(pctx)) {
+    auto it = pctx.begin();
+    if (*it == &amp;#39;{&amp;#39;) {
+      ++it;
+      if (it == pctx.end()) {
+        throw std::format_error(&amp;#34;invalid format&amp;#34;);
+      } else if (*it != &amp;#39;{&amp;#39;) {
+        // インデックスを解析する
+        size_t index;
+        if (auto [ptr, ec] = std::from_chars(it, pctx.end(), index); ec == std::errc{}) {
+          it += (ptr - std::to_address(it));
+          pctx.check_arg_id(index);
+        } else {
+          index = next_arg_index;
+          pctx.next_arg_id();
+          ++next_arg_index;
+        }
+        // オプション開始マークを解析する
+        if (it == pctx.end()) {
+          throw std::format_error(&amp;#34;invalid format&amp;#34;);
+        } else if (*it == &amp;#39;:&amp;#39;) {
+          ++it;
+        } else if (*it != &amp;#39;}&amp;#39;) {
+          throw std::format_error(&amp;#34;invalid format&amp;#34;);
+        }
+        pctx.advance_to(it);
+        // フォーマッターを呼び出す
+        std::visit_format_arg(visitor, args.get(index));
+        // 置換フィールドの終端を解析する
+        if (it == pctx.end() || *it != &amp;#39;}&amp;#39;) {
+          throw std::format_error(&amp;#34;invalid format&amp;#34;);
+        }
+        pctx.advance_to(++it);
+        continue;
+      }
+    } else if (*it == &amp;#39;}&amp;#39;) {
+      ++it;
+      if (it == pctx.end() || *it != &amp;#39;}&amp;#39;) {
+        throw std::format_error(&amp;#34;invalid format&amp;#34;);
+      }
+    }
+    *out = *it;
+    pctx.advance_to(++it);
+    fctx.advance_to(++out);
+  }
+  return out;
+}
+```
+* pctx.advance_to[link /reference/format/basic_format_parse_context/advance_to.md]
+* fctx.advance_to[link /reference/format/basic_format_context/advance_to.md]
+* formatter.parse[link /reference/format/formatter/parse.md]
+* formatter.format[link /reference/format/formatter/format.md]
+* std::format_error[link /reference/format/format_error.md]
+* std::basic_format_parse_context[link /reference/format/basic_format_parse_context.md]
+* std::basic_format_context[link /reference/format/basic_format_context.md]
+* std::basic_format_args[link /reference/format/basic_format_args.md]
+* std::visit_format_arg[link /reference/format/visit_format_arg.md]
+* std::from_chars[link /reference/charconv/from_chars.md]
+
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_format_context -- 補足説明を追加</title>
      <link href="https://cpprefjp.github.io/reference/format/basic_format_context.html"/>
      <id>d548d89055843d52b6c01b4883dd1ac49674d006:reference/format/basic_format_context.md</id>
      <updated>2024-04-02T07:30:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/basic_format_context.md b/reference/format/basic_format_context.md
index 17cf7666a..e3f5d4020 100644
--- a/reference/format/basic_format_context.md
+++ b/reference/format/basic_format_context.md
@@ -26,6 +26,9 @@ namespace std {
 ## テンプレートパラメータ制約
 - `Out`は`OutputIterator&amp;lt;const charT&amp;amp;&amp;gt;`であること
 
+## 備考
+
+出力イテレータの型はフォーマット関数に指定したイテレータである必要はない。内部でバッファリングを行う実装が可能である。
 
 ## メンバ関数
 
@@ -51,26 +54,33 @@ namespace std {
   class basic_format_context {
     basic_format_args&amp;lt;basic_format_context&amp;gt; args_;
     Out out_;
+    std::optional&amp;lt;std::locale&amp;gt; locale;
 
   public:
     using iterator = Out;
     using char_type = charT;
     template&amp;lt;class T&amp;gt; using formatter_type = formatter&amp;lt;T, charT&amp;gt;;
 
-    basic_format_arg&amp;lt;basic_format_context&amp;gt; arg(size_t id) const
+    basic_format_context(iterator out, std::basic_format_args&amp;lt;basic_format_context&amp;gt; args, std::optional&amp;lt;std::locale&amp;gt; locale = std::nullopt)
+      :args_(args)
+      ,out_(out)
+      ,locale_(locale)
     {
+    }
+
+    basic_format_arg&amp;lt;basic_format_context&amp;gt; arg(size_t id) const {
       return args_.get(id);
     }
 
-    std::locale locale();
+    std::locale locale() {
+      return locale_.value_or(std::locale());
+    }
 
-    iterator out();
-    {
+    iterator out() {
       return out_;
     }
 
-    void advance_to(iterator it)
-    {
+    void advance_to(iterator it) {
       out_ = it;
     }
   };
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- 書式文字列の取得のしかたを修正</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>f71ba40b132264533267c4eafb43f5fb4a0d9402:reference/format/format.md</id>
      <updated>2024-04-02T07:25:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index 56ac12599..8745522d7 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -622,25 +622,25 @@ int main()
 template&amp;lt;class... Args&amp;gt;
 string format(format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args)
 {
-  return vformat(fmt.str, make_format_args(args...));
+  return vformat(fmt.get(), make_format_args(args...));
 }
 
 template&amp;lt;class... Args&amp;gt;
 wstring format(wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args)
 {
-  return vformat(fmt.str, make_wformat_args(args...));
+  return vformat(fmt.get(), make_wformat_args(args...));
 }
 
 template&amp;lt;class... Args&amp;gt;
 string format(const locale&amp;amp; loc, format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args)
 {
-  return vformat(loc, fmt.str, make_format_args(args...));
+  return vformat(loc, fmt.get(), make_format_args(args...));
 }
 
 template&amp;lt;class... Args&amp;gt;
 wstring format(const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args)
 {
-  return vformat(loc, fmt.str, make_wformat_args(args...));
+  return vformat(loc, fmt.get(), make_wformat_args(args...));
 }
 ```
 * string[link /reference/string/basic_string.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
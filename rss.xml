<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-09-01T14:36:46.193892</updated>
  <id>1f0ad18a-4395-4e29-9e7a-257a4a4c628f</id>

  
    <entry>
      <title>contiguous_range -- &lt;ranges&gt; 例を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/contiguous_range.html"/>
      <id>9d999421d7877974e3a84d406141dba2c3decbac:reference/ranges/contiguous_range.md</id>
      <updated>2021-09-01T02:52:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/contiguous_range.md b/reference/ranges/contiguous_range.md
index f73067664..0c51cfded 100644
--- a/reference/ranges/contiguous_range.md
+++ b/reference/ranges/contiguous_range.md
@@ -33,22 +33,22 @@ namespace std::ranges {
 ## 例
 ```cpp example
 #include &amp;lt;ranges&amp;gt;
-#include &amp;lt;list&amp;gt;
-#include &amp;lt;set&amp;gt;
 #include &amp;lt;vector&amp;gt;
 
-int main()
-{
+int main() {
+  using namespace std;
   // vectorはcontiguous_range
-  static_assert(std::ranges::contiguous_range&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;);
+  static_assert(ranges::contiguous_range&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;);
 
-  // listはcontiguous_rangeではない
-  static_assert(!std::ranges::contiguous_range&amp;lt;std::list&amp;lt;int&amp;gt;&amp;gt;);
-
-  // setはcontiguous_rangeではない
-  static_assert(!std::ranges::contiguous_range&amp;lt;std::set&amp;lt;int&amp;gt;&amp;gt;);
+  // vectorから作ったelements_viewはcontiguous_rangeではない
+  using view_t = ranges::elements_view&amp;lt;ranges::views::all_t&amp;lt;vector&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt;&amp;amp;&amp;gt;, 0&amp;gt;;
+  static_assert(ranges::random_access_range&amp;lt;view_t&amp;gt;);
+  static_assert(!ranges::contiguous_range&amp;lt;view_t&amp;gt;);
 }
 ```
+* elements_view[link elements_view.md.nolink]
+* all_t[link all_t.md.nolink]
+* ranges::random_access_range[link random_access_range.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>output_range -- &lt;ranges&gt; 例を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/output_range.html"/>
      <id>9d999421d7877974e3a84d406141dba2c3decbac:reference/ranges/output_range.md</id>
      <updated>2021-09-01T02:52:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/output_range.md b/reference/ranges/output_range.md
index 51c21a40c..963146f59 100644
--- a/reference/ranges/output_range.md
+++ b/reference/ranges/output_range.md
@@ -21,10 +21,24 @@ namespace std::ranges {
 型`T`が`output_range`のモデルとなるのは、`T`が[`range`](range.md)のモデルであり、かつそのイテレータが[`output_iterator`](/reference/iterator/output_iterator.md)のモデルである場合である。
 
 ## 例
-(執筆中)
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using namespace std;
+  ostream_iterator&amp;lt;int&amp;gt; osi(cout);
+  static_assert(ranges::output_range&amp;lt;decltype(views::counted(osi, 5)), int&amp;gt;);
+}
+```
+* ranges::output_range[color ff0000]
+* views::counted[link counted.md.nolink]
 
 ### 出力
-(執筆中)
+```
+```
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>random_access_range -- &lt;ranges&gt; 例を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/random_access_range.html"/>
      <id>9d999421d7877974e3a84d406141dba2c3decbac:reference/ranges/random_access_range.md</id>
      <updated>2021-09-01T02:52:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/random_access_range.md b/reference/ranges/random_access_range.md
index 210b72848..eeb1fcf05 100644
--- a/reference/ranges/random_access_range.md
+++ b/reference/ranges/random_access_range.md
@@ -21,10 +21,28 @@ namespace std::ranges {
 型`T`が`random_access_range`のモデルとなるのは、`T`が[`bidirectional_range`](bidirectional_range.md)のモデルであり、かつそのイテレータが[`random_access_iterator`](/reference/iterator/random_access_iterator.md)のモデルである場合である。
 
 ## 例
-(執筆中)
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;list&amp;gt;
+#include &amp;lt;set&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main()
+{
+  // vectorはrandom_access_range
+  static_assert(std::ranges::random_access_range&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;);
+
+  // listはrandom_access_rangeではない
+  static_assert(!std::ranges::random_access_range&amp;lt;std::list&amp;lt;int&amp;gt;&amp;gt;);
+
+  // setはrandom_access_rangeではない
+  static_assert(!std::ranges::random_access_range&amp;lt;std::set&amp;lt;int&amp;gt;&amp;gt;);
+}
+```
 
 ### 出力
-(執筆中)
+```
+```
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式での*thisのコピーキャプチャ -- Merge pull request #895 from norisio/fixtypo_lambda_capture_of_this_by_value</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/lambda_capture_of_this_by_value.html"/>
      <id>0d201ff5aff301b8db39bb613ec1ad68c0aad9f7:lang/cpp17/lambda_capture_of_this_by_value.md</id>
      <updated>2021-08-31T17:32:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/lambda_capture_of_this_by_value.md b/lang/cpp17/lambda_capture_of_this_by_value.md
index 6066bf760..2f6b1b87c 100644
--- a/lang/cpp17/lambda_capture_of_this_by_value.md
+++ b/lang/cpp17/lambda_capture_of_this_by_value.md
@@ -2,7 +2,7 @@
 * cpp17[meta cpp]
 
 ## 概要
-C++14までラムダ式で`[this]`のようにキャプチャをすると、`this`ポインタがコピーされていた。その場合、非同期処理のような状況で、ラムダ式の関数オブジェクトが呼び出されたときに、`this`ポインタが指すオブジェクトの寿命が付きている場合がある。
+C++14までラムダ式で`[this]`のようにキャプチャをすると、`this`ポインタがコピーされていた。その場合、非同期処理のような状況で、ラムダ式の関数オブジェクトが呼び出されたときに、`this`ポインタが指すオブジェクトの寿命が尽きている場合がある。
 
 C++17では`[*this]`のようにキャプチャすることで、キャプチャ時点での`*this`オブジェクトをコピーできるようになった。
 
@@ -11,7 +11,7 @@ C++17では`[*this]`のようにキャプチャすることで、キャプチャ
 
 ## 備考
 - `[*this]`でコピーキャプチャしたオブジェクトは、デフォルトで`const`になるので注意。`[this]`はポインタであるため書き換えができ、非`const`メンバ関数を呼び出せる。しかし、`[*this]`はオブジェクトをコピーして`const`となるため、ラムダ式に`mutable`を付けない限り、非`const`メンバ関数を呼び出せない。
-- ラムダ式の関数オブジェクトが呼び出されたときに、`this`ポインタの寿命が付きる場合があることが正しい状況では、依然として[`std::weak_ptr`](/reference/memory/weak_ptr.md)のような機能を使用して、生死監視をする必要がある。
+- ラムダ式の関数オブジェクトが呼び出されたときに、`this`ポインタの寿命が尽きる場合があることが正しい状況では、依然として[`std::weak_ptr`](/reference/memory/weak_ptr.md)のような機能を使用して、生死監視をする必要がある。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式での*thisのコピーキャプチャ -- Typo修正: 付きる -&gt; 尽きる</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/lambda_capture_of_this_by_value.html"/>
      <id>85b1d945be1fba2f99d788c3112fd5c386f04e06:lang/cpp17/lambda_capture_of_this_by_value.md</id>
      <updated>2021-08-31T17:10:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/lambda_capture_of_this_by_value.md b/lang/cpp17/lambda_capture_of_this_by_value.md
index 6066bf760..2f6b1b87c 100644
--- a/lang/cpp17/lambda_capture_of_this_by_value.md
+++ b/lang/cpp17/lambda_capture_of_this_by_value.md
@@ -2,7 +2,7 @@
 * cpp17[meta cpp]
 
 ## 概要
-C++14までラムダ式で`[this]`のようにキャプチャをすると、`this`ポインタがコピーされていた。その場合、非同期処理のような状況で、ラムダ式の関数オブジェクトが呼び出されたときに、`this`ポインタが指すオブジェクトの寿命が付きている場合がある。
+C++14までラムダ式で`[this]`のようにキャプチャをすると、`this`ポインタがコピーされていた。その場合、非同期処理のような状況で、ラムダ式の関数オブジェクトが呼び出されたときに、`this`ポインタが指すオブジェクトの寿命が尽きている場合がある。
 
 C++17では`[*this]`のようにキャプチャすることで、キャプチャ時点での`*this`オブジェクトをコピーできるようになった。
 
@@ -11,7 +11,7 @@ C++17では`[*this]`のようにキャプチャすることで、キャプチャ
 
 ## 備考
 - `[*this]`でコピーキャプチャしたオブジェクトは、デフォルトで`const`になるので注意。`[this]`はポインタであるため書き換えができ、非`const`メンバ関数を呼び出せる。しかし、`[*this]`はオブジェクトをコピーして`const`となるため、ラムダ式に`mutable`を付けない限り、非`const`メンバ関数を呼び出せない。
-- ラムダ式の関数オブジェクトが呼び出されたときに、`this`ポインタの寿命が付きる場合があることが正しい状況では、依然として[`std::weak_ptr`](/reference/memory/weak_ptr.md)のような機能を使用して、生死監視をする必要がある。
+- ラムダ式の関数オブジェクトが呼び出されたときに、`this`ポインタの寿命が尽きる場合があることが正しい状況では、依然として[`std::weak_ptr`](/reference/memory/weak_ptr.md)のような機能を使用して、生死監視をする必要がある。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Naoya Sakabe</name>
        <email>k.exa.apostrophe@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>borrowed_iterator_t -- &lt;ranges&gt; ダングリングイテレータハンドリングの例を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/borrowed_iterator_t.html"/>
      <id>7c333939c458f6784927b3c33809f8159301176f:reference/ranges/borrowed_iterator_t.md</id>
      <updated>2021-08-31T02:13:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/borrowed_iterator_t.md b/reference/ranges/borrowed_iterator_t.md
index 21552087b..8ff960ba4 100644
--- a/reference/ranges/borrowed_iterator_t.md
+++ b/reference/ranges/borrowed_iterator_t.md
@@ -16,13 +16,54 @@ namespace std::ranges {
 * dangling[link dangling.md]
 
 ## 概要
-
 任意の範囲型`R`のイテレータの型を取得する。ただし、`R`が[`borrowed_range`](borrowed_range.md)ではない場合、[`dangling`](dangling.md)になる。
 
+イテレータを返す関数では、これを戻り値型に使うことでダングリングイテレータになる場合に自動的に[`dangling`](dangling.md)を返すことができる。
+
 ## 例
 ```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+using namespace std;
+
+template&amp;lt;ranges::range R&amp;gt;
+ranges::borrowed_iterator_t&amp;lt;R&amp;gt; my_find(R&amp;amp;&amp;amp; r, const ranges::range_value_t&amp;lt;R&amp;gt;&amp;amp; v) {
+  auto i = ranges::begin(r);
+  auto e = ranges::end(r);
+  while(i != e) {
+    if(*i == v) return i;
+    ++i;
+  }
+  return e;
+}
+
+vector&amp;lt;int&amp;gt; f(){ return {}; }
+
+int main() {
+  // borrowed_rangeではない範囲のrvalueが渡された場合、danglingが返る
+  auto result1 = my_find(f(), 42);
+  static_assert(same_as&amp;lt;decltype(result1), ranges::dangling&amp;gt;);
+
+  // lvalueが渡された場合、danglingにはならない
+  auto vec = f();
+  auto result2 = my_find(vec, 42);
+  static_assert(same_as&amp;lt;decltype(result2), vector&amp;lt;int&amp;gt;::iterator&amp;gt;);
+
+  // borrowed_rangeのrvalueが渡された場合、danglingにはならない
+  auto result3 = my_find(ranges::subrange{vec}, 42);
+  static_assert(same_as&amp;lt;decltype(result3), vector&amp;lt;int&amp;gt;::iterator&amp;gt;);
+}
 ```
-* std::ranges::range_difference_t[color ff0000]
+* ranges::ranges::borrowed_iterator_t[color ff0000]
+* ranges::range[link range.md]
+* ranges::begin[link begin.md]
+* ranges::end[link end.md]
+* ranges::range_value_t[link range_value_t.md]
+* ranges::dangling[link dangling.md]
+* ranges::subrange[link subrange.md.nolink]
+* borrowed_range[link borrowed_range.md]
+* same_as[link /reference/concepts/same_as.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>borrowed_subrange_t -- &lt;ranges&gt; ダングリングイテレータハンドリングの例を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/borrowed_subrange_t.html"/>
      <id>7c333939c458f6784927b3c33809f8159301176f:reference/ranges/borrowed_subrange_t.md</id>
      <updated>2021-08-31T02:13:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/borrowed_subrange_t.md b/reference/ranges/borrowed_subrange_t.md
index 9fc3de068..0cc747537 100644
--- a/reference/ranges/borrowed_subrange_t.md
+++ b/reference/ranges/borrowed_subrange_t.md
@@ -20,10 +20,47 @@ namespace std::ranges {
 
 任意の範囲型`R`の部分範囲の型を取得する。ただし、`R`が[`borrowed_range`](borrowed_range.md)ではない場合、[`dangling`](dangling.md)になる。
 
+
 ## 例
 ```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+using namespace std;
+
+template&amp;lt;ranges::range R&amp;gt;
+ranges::borrowed_subrange_t&amp;lt;R&amp;gt; my_all(R&amp;amp;&amp;amp; r) {
+  auto i = ranges::begin(r);
+  auto e = ranges::end(r);
+  return {i, e};
+}
+
+vector&amp;lt;int&amp;gt; f(){ return {}; }
+
+int main() {
+  // borrowed_rangeではない範囲のrvalueが渡された場合、danglingが返る
+  auto result1 = my_all(f());
+  static_assert(same_as&amp;lt;decltype(result1), ranges::dangling&amp;gt;);
+
+  // lvalueが渡された場合、danglingにはならない
+  auto vec = f();
+  auto result2 = my_all(vec);
+  static_assert(!same_as&amp;lt;decltype(result2), ranges::dangling&amp;gt;);
+
+  // borrowed_rangeのrvalueが渡された場合、danglingにはならない
+  auto result3 = my_all(ranges::subrange{vec});
+  static_assert(!same_as&amp;lt;decltype(result3), ranges::dangling&amp;gt;);
+}
 ```
-* std::ranges::# borrowed_subrange_t[color ff0000]
+* ranges::ranges::borrowed_iborrowed_subrange_tterator_t[color ff0000]
+* ranges::range[link range.md]
+* ranges::begin[link begin.md]
+* ranges::end[link end.md]
+* ranges::range_value_t[link range_value_t.md]
+* ranges::dangling[link dangling.md]
+* ranges::subrange[link subrange.md.nolink]
+* borrowed_range[link borrowed_range.md]
+* same_as[link /reference/concepts/same_as.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>dangling -- &lt;ranges&gt; ダングリングイテレータハンドリングの例を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/dangling.html"/>
      <id>7c333939c458f6784927b3c33809f8159301176f:reference/ranges/dangling.md</id>
      <updated>2021-08-31T02:13:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/dangling.md b/reference/ranges/dangling.md
index da7536e0e..0ac2e2ad0 100644
--- a/reference/ranges/dangling.md
+++ b/reference/ranges/dangling.md
@@ -55,7 +55,10 @@ int main()
 }
 ```
 * ranges::dangling[color ff0000]
-* std::ranges::crend[link crend.md]
+* ranges::find[link /reference/algorithm/find.md]
+* ranges::subrange[link subrange.md.nolink]
+* borrowed_range[link borrowed_range.md]
+* same_as[link /reference/concepts/same_as.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>concepts -- boolean-testable移動</title>
      <link href="https://cpprefjp.github.io/reference/concepts.html"/>
      <id>af4f31495b573a438ae9b3c90b007af7d9cf2b96:reference/concepts.md</id>
      <updated>2021-08-30T12:48:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts.md b/reference/concepts.md
index 9f1477569..2987b41db 100644
--- a/reference/concepts.md
+++ b/reference/concepts.md
@@ -143,13 +143,6 @@ concept C =
 |------|------|----------------|
 | [`ranges::swap`](concepts/swap.md) | 任意の2つのオブジェクトを入れ替える | C++20 |
 
-## 説明専用コンセプト
-
-| 名前 | 説明 | 対応バージョン |
-|------|------|----------------|
-| [`boolean-testable`](concepts/boolean-testable.md) | 真理値型 | C++20 |
-
-
 ## そのうちどこかに移動するページ
 
 以下は、ライブラリとして提供はされていない要件をまとめる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>説明専用ライブラリ -- boolean-testable移動</title>
      <link href="https://cpprefjp.github.io/reference/exposition-only.html"/>
      <id>af4f31495b573a438ae9b3c90b007af7d9cf2b96:reference/exposition-only.md</id>
      <updated>2021-08-30T12:48:36+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;exposition-only&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;説明専用ライブラリ&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;このページでは、説明専用のライブラリをまとめる。
これらはC++規格の文章中に現れる説明のためのものであり、実際に使うことはできない。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/exposition-only/decay-copy.html&#34;&gt;decay-copy&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/decay.html&#34;&gt;decay&lt;/a&gt;&lt;/code&gt;した型にコピーまたはムーブする (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/exposition-only/synth-three-way.md.nolink&#34;&gt;synth-three-way&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;(function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/exposition-only/synth-three-way-result.md.nolink&#34;&gt;synth-three-way-result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;(function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;code&gt;&amp;lt;concepts&amp;gt;&lt;/code&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/concepts/boolean-testable.html&#34;&gt;boolean-testable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;真理値型 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/dereferenceable.html&#34;&gt;with-reference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型&lt;code&gt;T&lt;/code&gt;に参照を付加する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/dereferenceable.html&#34;&gt;can-reference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;with-reference&lt;/code&gt;可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/dereferenceable.html&#34;&gt;dereferenceable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;単純な間接参照が可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/is_integer_like.html&#34;&gt;is-integer-like&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号付整数型と同等の型か否かを表す (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/is_integer_like.html&#34;&gt;is-signed-integer-like&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号なし整数型と同等の型か否かを表す (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/n4861/expos.only.func&#34; target=&#34;_blank&#34;&gt;N4861 16.4.2.1 Exposition-only functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
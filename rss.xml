<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-12-24T13:19:57.431857</updated>
  <id>ec0e3f27-d628-44bd-8904-ae1c7fbba9e7</id>

  
    <entry>
      <title>char_traits -- char_traits : サンプルコードの出力を書いてなかった</title>
      <link href="https://cpprefjp.github.io/reference/string/char_traits.html"/>
      <id>2c1cae62006753d7c7b5ca2526c83ffb770b8a0f:reference/string/char_traits.md</id>
      <updated>2020-12-24T22:14:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/char_traits.md b/reference/string/char_traits.md
index 0aec892a9..e08f35e39 100644
--- a/reference/string/char_traits.md
+++ b/reference/string/char_traits.md
@@ -217,3 +217,10 @@ int main() {
 * std::weak_ordering[link /reference/compare/weak_ordering.md]
 * std::lexicographical_compare_three_way[link /reference/algorithm/lexicographical_compare_three_way.md]
 * std::find_if[link /reference/algorithm/find_if.md]
+
+
+#### 出力
+```
+equal
+```
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>char_traits -- char_traits : 大文字・小文字を区別しない比較の例を追加</title>
      <link href="https://cpprefjp.github.io/reference/string/char_traits.html"/>
      <id>f2fec346b3ea845e628af731c0768521c95951cc:reference/string/char_traits.md</id>
      <updated>2020-12-24T21:02:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/char_traits.md b/reference/string/char_traits.md
index b4e4e2c00..0aec892a9 100644
--- a/reference/string/char_traits.md
+++ b/reference/string/char_traits.md
@@ -107,6 +107,7 @@ namespace std {
 
 
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;string&amp;gt;
@@ -129,10 +130,90 @@ int main()
 * std::char_traits[color ff0000]
 * std::basic_string[link basic_string.md]
 
-### 出力
+#### 出力
 ```
 then
 ```
 
-## 参照
+### 大文字・小文字を区別しない文字列比較をする`basic_string`を定義 (C++20)
+```cpp example
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;compare&amp;gt;
+#include &amp;lt;cctype&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+
+template &amp;lt;class T&amp;gt;
+class case_insensitive_char_traits {
+  using base_traits = std::char_traits&amp;lt;T&amp;gt;;
+public:
+  using char_type = char;
+  using int_type = int;
+  using off_type = std::streamoff;
+  using pos_type = std::streampos;
+  using state_type = std::mbstate_t;
+  using comparison_category = std::weak_ordering;
+
+  static constexpr void assign(char_type&amp;amp; c1, const char_type&amp;amp; c2) noexcept {
+    base_traits::assign(c1, c2);
+  }
+
+  static constexpr bool eq(char_type c1, char_type c2) noexcept {
+    return base_traits::eq(std::tolower(c1), std::tolower(c2));
+  }
+
+  static constexpr bool lt(char_type c1, char_type c2) noexcept {
+    return base_traits::lt(std::tolower(c1), std::tolower(c2));
+  }
+
+  static constexpr int compare(const char_type* s1, const char_type* s2, size_t n) {
+    auto order = std::lexicographical_compare_three_way(s1, s1 + n, s2, s2 + n,
+           [](char_type c1, char_type c2) -&amp;gt; std::weak_ordering {
+             return std::tolower(c1) &amp;lt;=&amp;gt; std::tolower(c2);
+           });
+    return order == std::weak_ordering::equivalent ? 0 :
+           order == std::weak_ordering::greater ? 1 :
+           -1;
+  }
+
+  static constexpr size_t length(const char_type* s) {
+    return base_traits::length(s);
+  }
+
+  static constexpr const char_type* find(const char_type* s, size_t n,
+                                         const char_type&amp;amp; a) {
+    return std::find_if(s, s + n, [a](char_type c) {
+      return std::tolower(c) == a;
+    });
+  }
 
+  static constexpr char_type* move(char_type* s1, const char_type* s2, size_t n) {
+    return base_traits::move(s1, s2, n);
+  }
+
+  static constexpr char_type* copy(char_type* s1, const char_type* s2, size_t n) {
+    return base_traits::copy(s1, s2, n);
+  }
+
+  static constexpr char_type* assign(char_type* s, size_t n, char_type a) {
+    return base_traits::assign(s, n, a);
+  }
+};
+
+#include &amp;lt;iostream&amp;gt;
+int main() {
+  using case_insensitive_string =
+      std::basic_string&amp;lt;char, case_insensitive_char_traits&amp;lt;char&amp;gt;&amp;gt;;
+  case_insensitive_string a = &amp;#34;AbC&amp;#34;;
+  case_insensitive_string b = &amp;#34;aBc&amp;#34;;
+
+  if (a == b) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;equal&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+  else {
+    std::cout &amp;lt;&amp;lt; &amp;#34;not equal&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::weak_ordering[link /reference/compare/weak_ordering.md]
+* std::lexicographical_compare_three_way[link /reference/algorithm/lexicographical_compare_three_way.md]
+* std::find_if[link /reference/algorithm/find_if.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- function/move-ctor: P0771R1対応</title>
      <link href="https://cpprefjp.github.io/reference/functional/function/op_constructor.html"/>
      <id>627a6d26207cd9af0ab65f436081551b9e3f1a12:reference/functional/function/op_constructor.md</id>
      <updated>2020-12-24T18:51:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/function/op_constructor.md b/reference/functional/function/op_constructor.md
index 1a618f1cb..064c9db8d 100644
--- a/reference/functional/function/op_constructor.md
+++ b/reference/functional/function/op_constructor.md
@@ -9,7 +9,9 @@
 function() noexcept;          // (1)
 function(nullptr_t) noexcept; // (2)
 function(const function&amp;amp; f);  // (3)
-function(function&amp;amp;&amp;amp; f);       // (4)
+
+function(function&amp;amp;&amp;amp; f);           // (4) C++17まで
+function(function&amp;amp;&amp;amp; f) noexcept;  // (4) C++20
 
 template &amp;lt;class F&amp;gt;
 function(F f);                // (5)
@@ -239,3 +241,4 @@ int main()
 - [LWG Issue 2132. `std::function` ambiguity](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2132)
     - C++14から、(5)と(10)でシグニチャが合わない関数オブジェクトが渡された場合に、SFINAEされるようになった。
 - [P0302R1 Removing Allocator Support in `std::function` (rev 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0302r1.html)
+- [P0771R1 std::function move constructor should be noexcept](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0771r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bit_cast -- bit_cast: 戻り値説明を調整, GCC11以降で対応</title>
      <link href="https://cpprefjp.github.io/reference/bit/bit_cast.html"/>
      <id>fd45b544f2189727ef613e5acc40f683a17e3d9b:reference/bit/bit_cast.md</id>
      <updated>2020-12-24T15:27:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bit/bit_cast.md b/reference/bit/bit_cast.md
index a96e9d110..010b38ea6 100644
--- a/reference/bit/bit_cast.md
+++ b/reference/bit/bit_cast.md
@@ -24,9 +24,9 @@ namespace std {
 
 
 ## 戻り値
-型`To`の値を返す。その戻り値の各ビットが`from`と等しくなる。ただし、戻り値のパディングビットは未規定。
+型`To`の値を返す。その戻り値のビット表現は値`from`のビット表現と等しくなる。（もしあれば）戻り値のパディングビットは未規定。
 
-型`To`で`from`の値を表現できない場合の動作は未定義となる。そのような値が複数ある場合、生成される値は未規定。
+型`To`においてビット表現に対応する値が存在しない場合、その動作は未定義となる。またビット表現に対応する値が複数存在する場合、どの値が生成されるかは未規定となる。
 
 
 ## 例外
@@ -40,7 +40,7 @@ namespace std {
 - [`std::is_pointer_v`](/reference/type_traits/is_pointer.md)`&amp;lt;T&amp;gt; == false`
 - [`std::is_member_pointer_v`](/reference/type_traits/is_member_pointer.md)`&amp;lt;T&amp;gt; == false`
 - [`std::is_volatile_v`](/reference/type_traits/is_volatile.md)`&amp;lt;T&amp;gt; == false`
-- `T`が参照の非静的メンバ変数を持たないこと
+- `T`が参照型の非静的メンバ変数を持たないこと
 
 
 ## 備考
@@ -58,17 +58,17 @@ namespace std {
 
 ## 例
 ```cpp example
-#include &amp;lt;iostream&amp;gt;
 #include &amp;lt;cassert&amp;gt;
-#include &amp;lt;bit&amp;gt;
 #include &amp;lt;cstdint&amp;gt;
 #include &amp;lt;cstring&amp;gt;
+#include &amp;lt;bit&amp;gt;
+#include &amp;lt;iostream&amp;gt;
 
 int main()
 {
   float f = 3.14f;
 
-  // ビット値を保って、単精度浮動小数点数 (IEEE 754準拠なら32ビット) を、32ビット整数に変換
+  // ビット表現を保って、単精度浮動小数点数 (IEEE 754準拠なら32ビット) を、32ビット整数に変換
   std::uint32_t n = std::bit_cast&amp;lt;std::uint32_t&amp;gt;(f);
 
   // 従来の方法
@@ -96,7 +96,7 @@ int main()
 
 ### 処理系
 - [Clang](/implementation.md#clang):
-- [GCC](/implementation.md#gcc):
+- [GCC](/implementation.md#gcc): 11.0
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>source_location -- source_location: GCC 11.0以降で対応</title>
      <link href="https://cpprefjp.github.io/reference/source_location/source_location.html"/>
      <id>3888aba67b50caf6b538b1c521874cbda68f0244:reference/source_location/source_location.md</id>
      <updated>2020-12-24T15:00:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/source_location/source_location.md b/reference/source_location/source_location.md
index c36138de6..b8743b0c0 100644
--- a/reference/source_location/source_location.md
+++ b/reference/source_location/source_location.md
@@ -64,10 +64,10 @@ int main()
 
 ### 出力例
 ```
-??
-??
-??
-??
+6
+71
+prog.cc
+int main()
 ```
 
 ## この機能が必要になった背景・経緯
@@ -84,14 +84,15 @@ C言語から引き継いだ定義済みマクロ`__LINE__`、`__FILE__`や[事
 
 ### 処理系
 - [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): ??
+- [GCC](/implementation.md#gcc): 11.0
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 
 ## 関連項目
 
-- [事前定義識別子`__func__`](/lang/cpp11/func.md)
+- [C++11 事前定義識別子`__func__`](/lang/cpp11/func.md)
+- [C++20 即時関数](/lang/cpp20/immediate_functions.md)
 
 ## 参照
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>current -- source_location: GCC 11.0以降で対応</title>
      <link href="https://cpprefjp.github.io/reference/source_location/source_location/current.html"/>
      <id>3888aba67b50caf6b538b1c521874cbda68f0244:reference/source_location/source_location/current.md</id>
      <updated>2020-12-24T15:00:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/source_location/source_location/current.md b/reference/source_location/source_location/current.md
index 8d266f624..b55367aa1 100644
--- a/reference/source_location/source_location/current.md
+++ b/reference/source_location/source_location/current.md
@@ -95,10 +95,10 @@ int main()
 
 ### 出力例
 ```
-??
-??
-??
-??
+6
+71
+prog.cc
+int main()
 ```
 
 ## バージョン
@@ -107,10 +107,13 @@ int main()
 
 ### 処理系
 - [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): ??
+- [GCC](/implementation.md#gcc): 11.0
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
 
+## 関連項目
+- [C++20 即時関数](/lang/cpp20/immediate_functions.md)
+
 ## 参照
 
 - [P1208R6 Adopt source_location for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1208r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
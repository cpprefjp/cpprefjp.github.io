<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-10-29T07:13:24.845819</updated>
  <id>53cd23a0-a420-47ed-9119-61fcd796ac7a</id>

  
    <entry>
      <title>lower_bound -- Merge pull request #1002 from rinikeda/master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/lower_bound.html"/>
      <id>4b433900c62d6f12ce461a8de8f44be9c02565e7:reference/algorithm/lower_bound.md</id>
      <updated>2022-10-19T08:32:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/lower_bound.md b/reference/algorithm/lower_bound.md
index 3b343c2ce..5f458df8e 100644
--- a/reference/algorithm/lower_bound.md
+++ b/reference/algorithm/lower_bound.md
@@ -121,17 +121,18 @@ int main()
   {
     // 要素は複数のメンバ変数をもつ
     std::vector&amp;lt;X&amp;gt; v = {
-      {1, &amp;#34;Carol&amp;#34;},
+      {1, &amp;#34;Bob&amp;#34;},
       {3, &amp;#34;Alice&amp;#34;},
-      {4, &amp;#34;Bob&amp;#34;},
+      {4, &amp;#34;Carol&amp;#34;},
+      {2, &amp;#34;Franklin&amp;#34;},
       {5, &amp;#34;Eve&amp;#34;},
       {6, &amp;#34;Dave&amp;#34;}
     };
 
-    const std::string key = &amp;#34;Bob&amp;#34;;
+    const std::string key = &amp;#34;Carol&amp;#34;;
 
     // X::nameメンバ変数をキーにして、
-    // X::name == &amp;#34;Bob&amp;#34;となる要素を二分探索で見つける
+    // X::name == &amp;#34;Carol&amp;#34;となる要素を二分探索で見つける
     decltype(v)::iterator it = std::lower_bound(
       v.begin(),
       v.end(),
@@ -155,7 +156,7 @@ int main()
 ```
 4 pos=2
 4 pos=2
-id=4 name=Bob pos=2
+id=4 name=Carol pos=2
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>lower_bound -- Update lower_bound.md</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/lower_bound.html"/>
      <id>8a4a3445553bf44666525d9383cd9eff40f7af97:reference/algorithm/lower_bound.md</id>
      <updated>2022-10-18T12:21:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/lower_bound.md b/reference/algorithm/lower_bound.md
index 3b343c2ce..5f458df8e 100644
--- a/reference/algorithm/lower_bound.md
+++ b/reference/algorithm/lower_bound.md
@@ -121,17 +121,18 @@ int main()
   {
     // 要素は複数のメンバ変数をもつ
     std::vector&amp;lt;X&amp;gt; v = {
-      {1, &amp;#34;Carol&amp;#34;},
+      {1, &amp;#34;Bob&amp;#34;},
       {3, &amp;#34;Alice&amp;#34;},
-      {4, &amp;#34;Bob&amp;#34;},
+      {4, &amp;#34;Carol&amp;#34;},
+      {2, &amp;#34;Franklin&amp;#34;},
       {5, &amp;#34;Eve&amp;#34;},
       {6, &amp;#34;Dave&amp;#34;}
     };
 
-    const std::string key = &amp;#34;Bob&amp;#34;;
+    const std::string key = &amp;#34;Carol&amp;#34;;
 
     // X::nameメンバ変数をキーにして、
-    // X::name == &amp;#34;Bob&amp;#34;となる要素を二分探索で見つける
+    // X::name == &amp;#34;Carol&amp;#34;となる要素を二分探索で見つける
     decltype(v)::iterator it = std::lower_bound(
       v.begin(),
       v.end(),
@@ -155,7 +156,7 @@ int main()
 ```
 4 pos=2
 4 pos=2
-id=4 name=Bob pos=2
+id=4 name=Carol pos=2
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Rintaro Ikeda</name>
        <email>51394766+rinikeda@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bidirectional_iterator -- bidirectional_iterator : 少し追記</title>
      <link href="https://cpprefjp.github.io/reference/iterator/bidirectional_iterator.html"/>
      <id>87bffc51182bd96b22d24638db3122dbfc407cec:reference/iterator/bidirectional_iterator.md</id>
      <updated>2022-10-15T17:03:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/bidirectional_iterator.md b/reference/iterator/bidirectional_iterator.md
index b20f1ecce..d8259b114 100644
--- a/reference/iterator/bidirectional_iterator.md
+++ b/reference/iterator/bidirectional_iterator.md
@@ -34,7 +34,7 @@ namespace std {
 
 ## モデル
 
-型`I`の等しい2つのオブジェクト`a, b`について次の条件を満たす場合に限って、型`I`は`bidirectional_iterator`のモデルである。
+型`I`の等しい2つのオブジェクト（同じ要素を指すイテレータ）`a, b`について次の条件を満たす場合に限って、型`I`は`bidirectional_iterator`のモデルである。
 
 - `a, b`がデクリメント可能ならば、次の4つの条件を全て満たす
     - [`addressof`](/reference/memory/addressof.md)`(--a) == `[`addressof`](/reference/memory/addressof.md)`(a)`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>NULL -- Update null.md</title>
      <link href="https://cpprefjp.github.io/reference/cstddef/null.html"/>
      <id>a4d88a89f656c3f7137b1cc6eaf2997eaa4409e7:reference/cstddef/null.md</id>
      <updated>2022-10-13T00:43:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstddef/null.md b/reference/cstddef/null.md
index fd331d54b..d84b66cee 100644
--- a/reference/cstddef/null.md
+++ b/reference/cstddef/null.md
@@ -22,8 +22,9 @@
 
 
 ## 備考
-C++における「ヌルポインタ定数」の定義により、マクロ`NULL`の値として`0`や`0L`は規格に適合する定義だが、`(void*)0`は不正である。
+C++03において、「ヌルポインタ定数」は「値が0の整数リテラル」と定義されていた。したがって、マクロ`NULL`の値として`0`や`0L`は規格に適合する定義だが、`(void*)0`はリテラルではなく式であるため不正である。
 
+C++11では、「ヌルポインタ定数」の定義に「[`std::nullptr_t`](/reference/cstddef/nullptr_t.md)型のprvalue」が追加されたため、`nullptr`も規格に適合する。しかし、`NULL`の値の型が変わるとコードの互換性を損なうことから、当面の間 `NULL` の定義は整数リテラルであると思われる。C++11以降は`NULL`ではなく[`nullptr`](/lang/cpp11/nullptr.md)を使用するとよい。
 
 ## 関連項目
 - [C++11 `nullptr`](/lang/cpp11/nullptr.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
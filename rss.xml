<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-10-22T14:36:39.756617</updated>
  <id>f723110d-6da4-4d82-8742-a2868a0dc2cf</id>

  
    <entry>
      <title>gamma_distribution -- ガンマ分布の確率密度関数の式を修正</title>
      <link href="https://cpprefjp.github.io/reference/random/gamma_distribution.html"/>
      <id>ab6bccd5391ea0b4a926e264d1b93f2d3d8729d3:reference/random/gamma_distribution.md</id>
      <updated>2021-10-22T11:57:33+08:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/gamma_distribution.md b/reference/random/gamma_distribution.md
index a12bc000f..b3c748235 100644
--- a/reference/random/gamma_distribution.md
+++ b/reference/random/gamma_distribution.md
@@ -16,7 +16,7 @@ namespace std {
 `gamma_distribution`は、連続確率分布の一種であるガンマ分布を表すクラスである。  
 以下の確率密度関数に基いて、浮動小数点数の値`x`を生成する：
 
-$$ p(x \mid \alpha, \beta) = \frac{x^{-x/\beta}}{\beta^{\alpha} \cdot \Gamma(\alpha) } \cdot x^{\alpha - 1} $$
+$$ p(x \mid \alpha, \beta) = \frac{e^{-x/\beta}}{\beta^{\alpha} \cdot \Gamma(\alpha) } \cdot x^{\alpha - 1} $$
 
 この数式においてα(alpha)は形状母数(shape parameter)、β(beta)は尺度母数(scale parameter)を表す。  
 形状母数に正の整数を与えれば、アーラン分布(Erlang distribution)としても使用できる。  
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges -- &lt;ranges&gt; : split_viewの説明を変更</title>
      <link href="https://cpprefjp.github.io/reference/ranges.html"/>
      <id>567fd9b20f3d1d9b1a180e57693a18d48d1259ee:reference/ranges.md</id>
      <updated>2021-10-20T16:06:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges.md b/reference/ranges.md
index d108a35a9..2d4d5effc 100644
--- a/reference/ranges.md
+++ b/reference/ranges.md
@@ -255,7 +255,7 @@ range | adaptor(args...)
 |------------------------------------------------|--------------------------------------------------------------------------|----------------|
 | [`lazy_split_view`](ranges/lazy_split_view.md) | Rangeを指定したデリミタで分割するビュー (class template)     | C++20          |
 | [`views::lazy_split`](ranges/lazy_split_view.md)      | `lazy_split_view`を生成する (customization point object)     | C++20          |
-| [`split_view`](ranges/split_view.md)           | Rangeを指定したデリミタで分割するビュー (class template)     | C++20          |
+| [`split_view`](ranges/split_view.md)           | 文字列分割に特化した`lazy_split_view` (class template)     | C++20          |
 | [`views::split`](ranges/split_view.md)                | `split_view`を生成する (customization point object)          | C++20          |
 
 ### counted view
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_istream_view -- 宣言の名前空間表示の変更</title>
      <link href="https://cpprefjp.github.io/reference/ranges/basic_istream_view.html"/>
      <id>c7903c36b431b36bf910f40361fcfdd24e943771:reference/ranges/basic_istream_view.md</id>
      <updated>2021-10-20T11:53:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/basic_istream_view.md b/reference/ranges/basic_istream_view.md
index fd33d837f..7b33551b1 100644
--- a/reference/ranges/basic_istream_view.md
+++ b/reference/ranges/basic_istream_view.md
@@ -5,19 +5,15 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
-  namespace ranges {
-    template&amp;lt;movable Val, class CharT, class Traits&amp;gt;
+namespace std::ranges {
+  template&amp;lt;movable Val, class CharT, class Traits&amp;gt;
     requires default_initializable&amp;lt;Val&amp;gt; &amp;amp;&amp;amp; stream-extractable&amp;lt;Val, CharT, Traits&amp;gt;
-    class basic_istream_view : public view_interface&amp;lt;basic_istream_view&amp;lt;Val, CharT, Traits&amp;gt;&amp;gt; { …… }; // (1)
+  class basic_istream_view : public view_interface&amp;lt;basic_istream_view&amp;lt;Val, CharT, Traits&amp;gt;&amp;gt; { …… }; // (1)
 
-    namespace views {
-      template&amp;lt;class Val, class CharT, class Traits&amp;gt;
-      basic_istream_view&amp;lt;Val, CharT, Traits&amp;gt; istream_view(basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; s);  // (2)
-    }
+  namespace views {
+    template&amp;lt;class Val, class CharT, class Traits&amp;gt;
+    basic_istream_view&amp;lt;Val, CharT, Traits&amp;gt; istream_view(basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; s);  // (2)
   }
-
-  namespace views = ranges::views;
 }
 ```
 * movable[link /reference/concepts/movable.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_view -- 宣言の名前空間表示の変更</title>
      <link href="https://cpprefjp.github.io/reference/ranges/common_view.html"/>
      <id>c7903c36b431b36bf910f40361fcfdd24e943771:reference/ranges/common_view.md</id>
      <updated>2021-10-20T11:53:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/common_view.md b/reference/ranges/common_view.md
index 8c97120fe..0d662dfa5 100644
--- a/reference/ranges/common_view.md
+++ b/reference/ranges/common_view.md
@@ -5,18 +5,14 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
-  namespace ranges {
-    template&amp;lt;view V&amp;gt;
+namespace std::ranges {
+  template&amp;lt;view V&amp;gt;
     requires (!common_range&amp;lt;V&amp;gt; &amp;amp;&amp;amp; copyable&amp;lt;iterator_t&amp;lt;V&amp;gt;&amp;gt;)
-    class common_view : public view_interface&amp;lt;common_view&amp;lt;V&amp;gt;&amp;gt; { …… }; // (1)
+  class common_view : public view_interface&amp;lt;common_view&amp;lt;V&amp;gt;&amp;gt; { …… }; // (1)
 
-    namespace views {
-      inline constexpr /*unspecified*/ common = /*unspecified*/;     // (2)
-    }
+  namespace views {
+    inline constexpr /*unspecified*/ common = /*unspecified*/;      // (2)
   }
-
-  namespace views = ranges::views;
 }
 ```
 * view[link view.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>counted -- 宣言の名前空間表示の変更</title>
      <link href="https://cpprefjp.github.io/reference/ranges/counted.html"/>
      <id>c7903c36b431b36bf910f40361fcfdd24e943771:reference/ranges/counted.md</id>
      <updated>2021-10-20T11:53:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/counted.md b/reference/ranges/counted.md
index 337216ba2..0bd332f0d 100644
--- a/reference/ranges/counted.md
+++ b/reference/ranges/counted.md
@@ -1,18 +1,12 @@
 # counted
 * ranges[meta header]
-* std::ranges[meta namespace]
+* std::ranges::views[meta namespace]
 * cpo[meta id-type]
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
-  namespace ranges {
-    namespace views {
-      inline constexpr /*unspecified*/ counted = /*unspecified*/;
-    }
-  }
-
-  namespace views = ranges::views;
+namespace std::ranges::views {
+  inline constexpr /*unspecified*/ counted = /*unspecified*/;
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>drop_view -- 宣言の名前空間表示の変更</title>
      <link href="https://cpprefjp.github.io/reference/ranges/drop_view.html"/>
      <id>c7903c36b431b36bf910f40361fcfdd24e943771:reference/ranges/drop_view.md</id>
      <updated>2021-10-20T11:53:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/drop_view.md b/reference/ranges/drop_view.md
index 99c4dcbb9..0c2ae32e3 100644
--- a/reference/ranges/drop_view.md
+++ b/reference/ranges/drop_view.md
@@ -5,17 +5,13 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
-  namespace ranges {
-    template&amp;lt;view V&amp;gt;
-    class drop_view : public view_interface&amp;lt;drop_view&amp;lt;V&amp;gt;&amp;gt; { …… }; // (1)
-
-    namespace views {
-      inline constexpr /*unspecified*/ drop = /*unspecified*/;     // (2)
-    }
-  }
+namespace std::ranges {
+  template&amp;lt;view V&amp;gt;
+  class drop_view : public view_interface&amp;lt;drop_view&amp;lt;V&amp;gt;&amp;gt; { …… };  // (1)
 
-  namespace views = ranges::views;
+  namespace views {
+    inline constexpr /*unspecified*/ drop = /*unspecified*/;     // (2)
+  }
 }
 ```
 * view[link view.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>drop_while_view -- 宣言の名前空間表示の変更</title>
      <link href="https://cpprefjp.github.io/reference/ranges/drop_while_view.html"/>
      <id>c7903c36b431b36bf910f40361fcfdd24e943771:reference/ranges/drop_while_view.md</id>
      <updated>2021-10-20T11:53:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/drop_while_view.md b/reference/ranges/drop_while_view.md
index fc42aadec..c0f2c91d7 100644
--- a/reference/ranges/drop_while_view.md
+++ b/reference/ranges/drop_while_view.md
@@ -5,18 +5,14 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
-  namespace ranges {
-    template&amp;lt;view V, class Pred&amp;gt;
+namespace std::ranges {
+  template&amp;lt;view V, class Pred&amp;gt;
     requires input_range&amp;lt;V&amp;gt; &amp;amp;&amp;amp; is_object_v&amp;lt;Pred&amp;gt; &amp;amp;&amp;amp; indirect_unary_predicate&amp;lt;const Pred, iterator_t&amp;lt;V&amp;gt;&amp;gt;
-    class drop_while_view : public view_interface&amp;lt;drop_while_view&amp;lt;V, Pred&amp;gt;&amp;gt; { …… }; // (1)
+  class drop_while_view : public view_interface&amp;lt;drop_while_view&amp;lt;V, Pred&amp;gt;&amp;gt; { …… }; // (1)
 
-    namespace views {
-      inline constexpr /*unspecified*/ drop_while = /*unspecified*/;     // (2)
-    }
+  namespace views {
+    inline constexpr /*unspecified*/ drop_while = /*unspecified*/;     // (2)
   }
-
-  namespace views = ranges::views;
 }
 ```
 * view[link view.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>elements_view -- 宣言の名前空間表示の変更</title>
      <link href="https://cpprefjp.github.io/reference/ranges/elements_view.html"/>
      <id>c7903c36b431b36bf910f40361fcfdd24e943771:reference/ranges/elements_view.md</id>
      <updated>2021-10-20T11:53:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/elements_view.md b/reference/ranges/elements_view.md
index ef342cb23..3cf3a481d 100644
--- a/reference/ranges/elements_view.md
+++ b/reference/ranges/elements_view.md
@@ -5,29 +5,26 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
-  namespace ranges {
-    template&amp;lt;input_range V, size_t N&amp;gt;
+namespace std::ranges {
+  template&amp;lt;input_range V, size_t N&amp;gt;
     requires view&amp;lt;V&amp;gt; &amp;amp;&amp;amp; has-tuple-element&amp;lt;range_value_t&amp;lt;V&amp;gt;, N&amp;gt; &amp;amp;&amp;amp;
              has-tuple-element&amp;lt;remove_reference_t&amp;lt;range_reference_t&amp;lt;V&amp;gt;&amp;gt;, N&amp;gt;
-    class elements_view : public view_interface&amp;lt;elements_view&amp;lt;V, N&amp;gt;&amp;gt; { …… }; // (1)
+  class elements_view : public view_interface&amp;lt;elements_view&amp;lt;V, N&amp;gt;&amp;gt; { …… }; // (1)
 
-    template&amp;lt;class R&amp;gt;
-    using keys_view = elements_view&amp;lt;views::all_t&amp;lt;R&amp;gt;, 0&amp;gt;;                     // (2)
+  template&amp;lt;class R&amp;gt;
+  using keys_view = elements_view&amp;lt;views::all_t&amp;lt;R&amp;gt;, 0&amp;gt;;                     // (2)
 
-    template&amp;lt;class R&amp;gt;
-    using values_view = elements_view&amp;lt;views::all_t&amp;lt;R&amp;gt;, 1&amp;gt;;                   // (3)
+  template&amp;lt;class R&amp;gt;
+  using values_view = elements_view&amp;lt;views::all_t&amp;lt;R&amp;gt;, 1&amp;gt;;                   // (3)
 
-    namespace views {
-      inline constexpr /*unspecified*/ elements = /*unspecified*/;           // (4)
+  namespace views {
+    template&amp;lt;size_t N&amp;gt;
+    inline constexpr /*unspecified*/ elements = /*unspecified*/;           // (4)
 
-      inline constexpr auto keys = elements&amp;lt;0&amp;gt;;                              // (5)
+    inline constexpr auto keys = elements&amp;lt;0&amp;gt;;                              // (5)
 
-      inline constexpr auto values = elements&amp;lt;1&amp;gt;;                            // (6)
-    }
+    inline constexpr auto values = elements&amp;lt;1&amp;gt;;                            // (6)
   }
-
-  namespace views = ranges::views;
 }
 ```
 * view[link view.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty_view -- 宣言の名前空間表示の変更</title>
      <link href="https://cpprefjp.github.io/reference/ranges/empty_view.html"/>
      <id>c7903c36b431b36bf910f40361fcfdd24e943771:reference/ranges/empty_view.md</id>
      <updated>2021-10-20T11:53:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/empty_view.md b/reference/ranges/empty_view.md
index 68284a6de..fa588adb7 100644
--- a/reference/ranges/empty_view.md
+++ b/reference/ranges/empty_view.md
@@ -5,26 +5,22 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
-  namespace ranges {
-    template&amp;lt;class T&amp;gt;
+namespace std::ranges {
+  template&amp;lt;class T&amp;gt;
     requires is_object_v&amp;lt;T&amp;gt;
-    class empty_view : public view_interface&amp;lt;empty_view&amp;lt;T&amp;gt;&amp;gt; { // (1)
-    public:
-      static constexpr T* begin() noexcept { return nullptr; }
-      static constexpr T* end() noexcept { return nullptr; }
-      static constexpr T* data() noexcept { return nullptr; }
-      static constexpr size_t size() noexcept { return 0; }
-      static constexpr bool empty() noexcept { return true; }
-    };
-
-    namespace views {
-      template&amp;lt;class T&amp;gt;
-      inline constexpr empty_view&amp;lt;T&amp;gt; empty{}; // (2)
-    }
+  class empty_view : public view_interface&amp;lt;empty_view&amp;lt;T&amp;gt;&amp;gt; { // (1)
+  public:
+    static constexpr T* begin() noexcept { return nullptr; }
+    static constexpr T* end() noexcept { return nullptr; }
+    static constexpr T* data() noexcept { return nullptr; }
+    static constexpr size_t size() noexcept { return 0; }
+    static constexpr bool empty() noexcept { return true; }
+  };
+
+  namespace views {
+    template&amp;lt;class T&amp;gt;
+    inline constexpr empty_view&amp;lt;T&amp;gt; empty{}; // (2)
   }
-
-  namespace views = ranges::views;
 }
 ```
 * is_object_v[link /reference/type_traits/is_object.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>filter_view -- 宣言の名前空間表示の変更</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view.html"/>
      <id>c7903c36b431b36bf910f40361fcfdd24e943771:reference/ranges/filter_view.md</id>
      <updated>2021-10-20T11:53:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view.md b/reference/ranges/filter_view.md
index 2c419dc91..ea6d50012 100644
--- a/reference/ranges/filter_view.md
+++ b/reference/ranges/filter_view.md
@@ -5,18 +5,14 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
-  namespace ranges {
-    template&amp;lt;input_range V, indirect_unary_predicate&amp;lt;iterator_t&amp;lt;V&amp;gt;&amp;gt; Pred&amp;gt;
+namespace std::ranges {
+  template&amp;lt;input_range V, indirect_unary_predicate&amp;lt;iterator_t&amp;lt;V&amp;gt;&amp;gt; Pred&amp;gt;
     requires view&amp;lt;V&amp;gt; &amp;amp;&amp;amp; is_object_v&amp;lt;Pred&amp;gt;
-    class filter_view : public view_interface&amp;lt;filter_view&amp;lt;V, Pred&amp;gt;&amp;gt; { …… }; // (1)
+  class filter_view : public view_interface&amp;lt;filter_view&amp;lt;V, Pred&amp;gt;&amp;gt; { …… }; // (1)
 
-    namespace views {
-      inline constexpr /*unspecified*/ filter = /*unspecified*/;     // (2)
-    }
+  namespace views {
+    inline constexpr /*unspecified*/ filter = /*unspecified*/;     // (2)
   }
-
-  namespace views = ranges::views;
 }
 ```
 * input_range[link input_range.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iota_view -- 宣言の名前空間表示の変更</title>
      <link href="https://cpprefjp.github.io/reference/ranges/iota_view.html"/>
      <id>c7903c36b431b36bf910f40361fcfdd24e943771:reference/ranges/iota_view.md</id>
      <updated>2021-10-20T11:53:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/iota_view.md b/reference/ranges/iota_view.md
index 5c94e30ee..edfdb9684 100644
--- a/reference/ranges/iota_view.md
+++ b/reference/ranges/iota_view.md
@@ -5,18 +5,14 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
-  namespace ranges {
-    template&amp;lt;weakly_incrementable W, semiregular Bound = unreachable_sentinel_t&amp;gt;
+namespace std::ranges {
+  template&amp;lt;weakly_incrementable W, semiregular Bound = unreachable_sentinel_t&amp;gt;
     requires weakly-equality-comparable-with&amp;lt;W, Bound&amp;gt; &amp;amp;&amp;amp; semiregular&amp;lt;W&amp;gt;
-    class iota_view : public view_interface&amp;lt;iota_view&amp;lt;W, Bound&amp;gt;&amp;gt; { …… }; // (1)
+  class iota_view : public view_interface&amp;lt;iota_view&amp;lt;W, Bound&amp;gt;&amp;gt; { …… }; // (1)
 
-    namespace views {
-      inline constexpr unspecified iota = unspecified; // (2)
-    }
+  namespace views {
+    inline constexpr unspecified iota = unspecified; // (2)
   }
-
-  namespace views = ranges::views;
 }
 ```
 * is_object_v[link /reference/type_traits/is_object.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>join_view -- 宣言の名前空間表示の変更</title>
      <link href="https://cpprefjp.github.io/reference/ranges/join_view.html"/>
      <id>c7903c36b431b36bf910f40361fcfdd24e943771:reference/ranges/join_view.md</id>
      <updated>2021-10-20T11:53:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/join_view.md b/reference/ranges/join_view.md
index 28f6e0d27..6e92b54ac 100644
--- a/reference/ranges/join_view.md
+++ b/reference/ranges/join_view.md
@@ -5,20 +5,15 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
-  namespace ranges {
-
-    template&amp;lt;input_range V&amp;gt;
+namespace std::ranges {
+  template&amp;lt;input_range V&amp;gt;
     requires view&amp;lt;V&amp;gt; &amp;amp;&amp;amp; input_range&amp;lt;range_reference_t&amp;lt;V&amp;gt;&amp;gt; &amp;amp;&amp;amp;
              (is_reference_v&amp;lt;range_reference_t&amp;lt;V&amp;gt;&amp;gt; || view&amp;lt;range_value_t&amp;lt;V&amp;gt;&amp;gt;)
-    class join_view : public view_interface&amp;lt;join_view&amp;lt;V&amp;gt;&amp;gt; { …… }; // (1)
+  class join_view : public view_interface&amp;lt;join_view&amp;lt;V&amp;gt;&amp;gt; { …… }; // (1)
 
-    namespace views {
-      inline constexpr /*unspecified*/ join = /*unspecified*/;      // (2)
-    }
+  namespace views {
+    inline constexpr /*unspecified*/ join = /*unspecified*/;      // (2)
   }
-
-  namespace views = ranges::views;
 }
 ```
 * input_range[link input_range.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lazy_spliy_view -- 宣言の名前空間表示の変更</title>
      <link href="https://cpprefjp.github.io/reference/ranges/lazy_split_view.html"/>
      <id>c7903c36b431b36bf910f40361fcfdd24e943771:reference/ranges/lazy_split_view.md</id>
      <updated>2021-10-20T11:53:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/lazy_split_view.md b/reference/ranges/lazy_split_view.md
index b57f30738..84979b019 100644
--- a/reference/ranges/lazy_split_view.md
+++ b/reference/ranges/lazy_split_view.md
@@ -5,21 +5,17 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
-  namespace ranges {
+namespace std::ranges {
 
-    template&amp;lt;input_range V, forward_range Pattern&amp;gt;
+  template&amp;lt;input_range V, forward_range Pattern&amp;gt;
     requires view&amp;lt;V&amp;gt; &amp;amp;&amp;amp; view&amp;lt;Pattern&amp;gt; &amp;amp;&amp;amp;
              indirectly_comparable&amp;lt;iterator_t&amp;lt;V&amp;gt;, iterator_t&amp;lt;Pattern&amp;gt;, ranges::equal_to&amp;gt; &amp;amp;&amp;amp;
              (forward_range&amp;lt;V&amp;gt; || tiny-range&amp;lt;Pattern&amp;gt;)
-    class lazy_spliy_view : public view_interface&amp;lt;lazy_spliy_view&amp;lt;V, Pattern&amp;gt;&amp;gt; { …… }; // (1)
+  class lazy_spliy_view : public view_interface&amp;lt;lazy_spliy_view&amp;lt;V, Pattern&amp;gt;&amp;gt; { …… };   // (1)
 
-    namespace views {
-      inline constexpr /*unspecified*/ lazy_spliy = /*unspecified*/;                     // (2)
-    }
+  namespace views {
+    inline constexpr /*unspecified*/ lazy_spliy = /*unspecified*/;                     // (2)
   }
-
-  namespace views = ranges::views;
 }
 ```
 * input_range[link input_range.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ref_view -- 宣言の名前空間表示の変更</title>
      <link href="https://cpprefjp.github.io/reference/ranges/ref_view.html"/>
      <id>c7903c36b431b36bf910f40361fcfdd24e943771:reference/ranges/ref_view.md</id>
      <updated>2021-10-20T11:53:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/ref_view.md b/reference/ranges/ref_view.md
index 2b5be48ec..4f21528c7 100644
--- a/reference/ranges/ref_view.md
+++ b/reference/ranges/ref_view.md
@@ -5,21 +5,17 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
-  namespace ranges {
-    template&amp;lt;range R&amp;gt;
+namespace std::ranges {
+  template&amp;lt;range R&amp;gt;
     requires is_object_v&amp;lt;R&amp;gt;
-    class ref_view : public view_interface&amp;lt;ref_view&amp;lt;R&amp;gt;&amp;gt; { …… }; // (1)
+  class ref_view : public view_interface&amp;lt;ref_view&amp;lt;R&amp;gt;&amp;gt; { …… };   // (1)
 
-    namespace views {
-      inline constexpr /*unspecified*/ all = /*unspecified*/;     // (2)
+  namespace views {
+    inline constexpr /*unspecified*/ all = /*unspecified*/;     // (2)
 
-      template&amp;lt;viewable_range R&amp;gt;
-      using all_t = decltype(all(declval&amp;lt;R&amp;gt;()));                  // (3)
-    }
+    template&amp;lt;viewable_range R&amp;gt;
+    using all_t = decltype(all(declval&amp;lt;R&amp;gt;()));                  // (3)
   }
-
-  namespace views = ranges::views;
 }
 ```
 * range[link range.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reverse_view -- 宣言の名前空間表示の変更</title>
      <link href="https://cpprefjp.github.io/reference/ranges/reverse_view.html"/>
      <id>c7903c36b431b36bf910f40361fcfdd24e943771:reference/ranges/reverse_view.md</id>
      <updated>2021-10-20T11:53:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/reverse_view.md b/reference/ranges/reverse_view.md
index f05be3513..49a406758 100644
--- a/reference/ranges/reverse_view.md
+++ b/reference/ranges/reverse_view.md
@@ -5,18 +5,14 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
-  namespace ranges {
-    template&amp;lt;view V&amp;gt;
+namespace std::ranges {
+  template&amp;lt;view V&amp;gt;
     requires bidirectional_range&amp;lt;V&amp;gt;
-    class reverse_view : public view_interface&amp;lt;reverse_view&amp;lt;V&amp;gt;&amp;gt; { …… }; // (1)
+  class reverse_view : public view_interface&amp;lt;reverse_view&amp;lt;V&amp;gt;&amp;gt; { …… };   // (1)
 
-    namespace views {
-      inline constexpr /*unspecified*/ reverse = /*unspecified*/;         // (2)
-    }
+  namespace views {
+    inline constexpr /*unspecified*/ reverse = /*unspecified*/;         // (2)
   }
-
-  namespace views = ranges::views;
 }
 ```
 * view[link view.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>single_view -- 宣言の名前空間表示の変更</title>
      <link href="https://cpprefjp.github.io/reference/ranges/single_view.html"/>
      <id>c7903c36b431b36bf910f40361fcfdd24e943771:reference/ranges/single_view.md</id>
      <updated>2021-10-20T11:53:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/single_view.md b/reference/ranges/single_view.md
index e747a1620..b1a36f631 100644
--- a/reference/ranges/single_view.md
+++ b/reference/ranges/single_view.md
@@ -5,18 +5,14 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
-  namespace ranges {
-    template&amp;lt;copy_constructible T&amp;gt;
+namespace std::ranges {
+  template&amp;lt;copy_constructible T&amp;gt;
     requires is_object_v&amp;lt;T&amp;gt;
-    class single_view : public view_interface&amp;lt;single_view&amp;lt;T&amp;gt;&amp;gt; { …… }; // (1)
+  class single_view : public view_interface&amp;lt;single_view&amp;lt;T&amp;gt;&amp;gt; { …… }; // (1)
 
-    namespace views {
-      inline constexpr /*unspecified*/ single = /*unspecified*/; // (2)
-    }
+  namespace views {
+    inline constexpr /*unspecified*/ single = /*unspecified*/; // (2)
   }
-
-  namespace views = ranges::views;
 }
 ```
 * copy_constructible[link /reference/concepts/copy_constructible.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>split_view -- 宣言の名前空間表示の変更</title>
      <link href="https://cpprefjp.github.io/reference/ranges/split_view.html"/>
      <id>c7903c36b431b36bf910f40361fcfdd24e943771:reference/ranges/split_view.md</id>
      <updated>2021-10-20T11:53:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/split_view.md b/reference/ranges/split_view.md
index 8ea694a76..99d7dd38c 100644
--- a/reference/ranges/split_view.md
+++ b/reference/ranges/split_view.md
@@ -5,20 +5,16 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
-  namespace ranges {
+namespace std::ranges {
 
-    template&amp;lt;forward_range V, forward_range Pattern&amp;gt;
+  template&amp;lt;forward_range V, forward_range Pattern&amp;gt;
     requires view&amp;lt;V&amp;gt; &amp;amp;&amp;amp; view&amp;lt;Pattern&amp;gt; &amp;amp;&amp;amp;
              indirectly_comparable&amp;lt;iterator_t&amp;lt;V&amp;gt;, iterator_t&amp;lt;Pattern&amp;gt;, ranges::equal_to&amp;gt;
-    class split_view : public view_interface&amp;lt;split_view&amp;lt;V, Pattern&amp;gt;&amp;gt; { …… }; // (1)
+  class split_view : public view_interface&amp;lt;split_view&amp;lt;V, Pattern&amp;gt;&amp;gt; { …… };   // (1)
 
-    namespace views {
-      inline constexpr /*unspecified*/ split = /*unspecified*/;                // (2)
-    }
+  namespace views {
+    inline constexpr /*unspecified*/ split = /*unspecified*/;                // (2)
   }
-
-  namespace views = ranges::views;
 }
 ```
 * forward_range[link forward_range.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>take_view -- 宣言の名前空間表示の変更</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_view.html"/>
      <id>c7903c36b431b36bf910f40361fcfdd24e943771:reference/ranges/take_view.md</id>
      <updated>2021-10-20T11:53:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_view.md b/reference/ranges/take_view.md
index f82bccb03..e13819564 100644
--- a/reference/ranges/take_view.md
+++ b/reference/ranges/take_view.md
@@ -5,17 +5,13 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
-  namespace ranges {
-    template&amp;lt;view V&amp;gt;
-    class take_view : public view_interface&amp;lt;take_view&amp;lt;V&amp;gt;&amp;gt; { …… }; // (1)
-
-    namespace views {
-      inline constexpr /*unspecified*/ take = /*unspecified*/;     // (2)
-    }
-  }
+namespace std::ranges {
+  template&amp;lt;view V&amp;gt;
+  class take_view : public view_interface&amp;lt;take_view&amp;lt;V&amp;gt;&amp;gt; { …… }; // (1)
 
-  namespace views = ranges::views;
+  namespace views {
+    inline constexpr /*unspecified*/ take = /*unspecified*/;     // (2)
+  }
 }
 ```
 * view[link view.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>take_while_view -- 宣言の名前空間表示の変更</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_while_view.html"/>
      <id>c7903c36b431b36bf910f40361fcfdd24e943771:reference/ranges/take_while_view.md</id>
      <updated>2021-10-20T11:53:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_while_view.md b/reference/ranges/take_while_view.md
index 0b29bd9ce..abf221a5b 100644
--- a/reference/ranges/take_while_view.md
+++ b/reference/ranges/take_while_view.md
@@ -5,18 +5,14 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
-  namespace ranges {
-    template&amp;lt;view V, class Pred&amp;gt;
+namespace std::ranges {
+  template&amp;lt;view V, class Pred&amp;gt;
     requires input_range&amp;lt;V&amp;gt; &amp;amp;&amp;amp; is_object_v&amp;lt;Pred&amp;gt; &amp;amp;&amp;amp; indirect_unary_predicate&amp;lt;const Pred, iterator_t&amp;lt;V&amp;gt;&amp;gt;
-    class take_while_view : public view_interface&amp;lt;take_while_view&amp;lt;V, Pred&amp;gt;&amp;gt; { …… }; // (1)
+  class take_while_view : public view_interface&amp;lt;take_while_view&amp;lt;V, Pred&amp;gt;&amp;gt; { …… }; // (1)
 
-    namespace views {
-      inline constexpr /*unspecified*/ take_while = /*unspecified*/;     // (2)
-    }
+  namespace views {
+    inline constexpr /*unspecified*/ take_while = /*unspecified*/;     // (2)
   }
-
-  namespace views = ranges::views;
 }
 ```
 * view[link view.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transform_view -- 宣言の名前空間表示の変更</title>
      <link href="https://cpprefjp.github.io/reference/ranges/transform_view.html"/>
      <id>c7903c36b431b36bf910f40361fcfdd24e943771:reference/ranges/transform_view.md</id>
      <updated>2021-10-20T11:53:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/transform_view.md b/reference/ranges/transform_view.md
index 10ffebdec..7f1ae66df 100644
--- a/reference/ranges/transform_view.md
+++ b/reference/ranges/transform_view.md
@@ -5,20 +5,16 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
-  namespace ranges {
-    template&amp;lt;input_range V, copy_constructible F&amp;gt;
+namespace std::ranges {
+  template&amp;lt;input_range V, copy_constructible F&amp;gt;
     requires view&amp;lt;V&amp;gt; &amp;amp;&amp;amp; is_object_v&amp;lt;F&amp;gt; &amp;amp;&amp;amp;
              regular_invocable&amp;lt;F&amp;amp;, range_reference_t&amp;lt;V&amp;gt;&amp;gt; &amp;amp;&amp;amp;
              can-reference&amp;lt;invoke_result_t&amp;lt;F&amp;amp;, range_reference_t&amp;lt;V&amp;gt;&amp;gt;&amp;gt;
-    class transform_view : public view_interface&amp;lt;transform_view&amp;lt;R&amp;gt;&amp;gt; { …… }; // (1)
+  class transform_view : public view_interface&amp;lt;transform_view&amp;lt;R&amp;gt;&amp;gt; { …… }; // (1)
 
-    namespace views {
-      inline constexpr /*unspecified*/ transform = /*unspecified*/;     // (2)
-    }
+  namespace views {
+    inline constexpr /*unspecified*/ transform = /*unspecified*/;         // (2)
   }
-
-  namespace views = ranges::views;
 }
 ```
 * input_range[link input_range.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges -- 名前空間の構造について追記</title>
      <link href="https://cpprefjp.github.io/reference/ranges.html"/>
      <id>52422e18f5890dacadd410a65f8cefe39fd2a99b:reference/ranges.md</id>
      <updated>2021-10-20T11:53:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges.md b/reference/ranges.md
index de49957dd..d108a35a9 100644
--- a/reference/ranges.md
+++ b/reference/ranges.md
@@ -13,6 +13,30 @@ C++17までは、標準アルゴリズム関数はイテレータの組を扱い
 
 また、Range対応版のアルゴリズム関数は引き続き[`&amp;lt;algorithm&amp;gt;`](algorithm.md)で提供される。
 
+## 名前空間構造
+
+`&amp;lt;ranges&amp;gt;`で定義されるものは全て`std::ranges`名前空間の下にある。また、各種`view`型を生成するRangeアダプタ/ファクトリオブジェクトは`std::ranges::views`名前空間の下で定義され、`std::views`からもアクセスする事ができる。
+
+名前空間だけを見てみると次のようになっている。
+
+```cpp
+namespace std {
+  // 通常のstd名前空間
+
+  namespace ranges {
+    // &amp;lt;ranges&amp;gt;のものはここに定義される
+
+    namespace views {
+      // Rangeアダプタ/ファクトリオブジェクトが定義される
+
+    }
+  }
+
+  // この名前空間エイリアスによって、std::viewsとしてstd::ranges::viewsにアクセスできる
+  namespace views = ranges::views;
+}
+```
+
 ## Rangeアクセス
 
 これらの機能は従来[`&amp;lt;iterator&amp;gt;`](iterator.md)でフリー関数として提供されていた。
@@ -104,28 +128,28 @@ Rangeファクトリは、Rangeではないオブジェクトから[`view`](rang
 | 名前                                 | 説明                                       | 対応バージョン |
 |--------------------------------------|--------------------------------------------|----------------|
 | [`empty_view`](ranges/empty_view.md) | 空のRange (class template)                 | C++20          |
-| [`empty`](ranges/empty_view.md)      | `empty_view`を生成する (variable template) | C++20          |
+| [`views::empty`](ranges/empty_view.md)      | `empty_view`を生成する (variable template) | C++20          |
 
 ### single view
 
 | 名前                                   | 説明                                                  | 対応バージョン |
 |----------------------------------------|-------------------------------------------------------|----------------|
 | [`single_view`](ranges/single_view.md) | 指定した値1つからなるRange (class template)           | C++20          |
-| [`single`](ranges/single_view.md)      | `single_view`を生成する (customization point object)  | C++20          |
+| [`views::single`](ranges/single_view.md)      | `single_view`を生成する (customization point object)  | C++20          |
 
 ### iota view
 
 | 名前                               | 説明                                                | 対応バージョン |
 |------------------------------------|-----------------------------------------------------|----------------|
 | [`iota_view`](ranges/iota_view.md) | 単調増加列であるRange (class template)              | C++20          |
-| [`iota`](ranges/iota_view.md)      | `iota_view`を生成する (customization point object)  | C++20          |
+| [`views::iota`](ranges/iota_view.md)      | `iota_view`を生成する (customization point object)  | C++20          |
 
 ### istream view
 
 | 名前                                                 | 説明                                                | 対応バージョン |
 |------------------------------------------------------|-----------------------------------------------------|----------------|
 | [`basic_istream_view`](ranges/basic_istream_view.md) | 入力ストリームから値を読むRange (class template)    | C++20          |
-| [`istream_view`](ranges/basic_istream_view.md)       | `basic_istream_view`を生成する (function template)  | C++20          |
+| [`views::istream_view`](ranges/basic_istream_view.md)       | `basic_istream_view`を生成する (function template)  | C++20          |
 
 ## Rangeアダプタ
 
@@ -173,86 +197,86 @@ range | adaptor(args...)
 | 名前                             | 説明                                                                     | 対応バージョン |
 |----------------------------------|--------------------------------------------------------------------------|----------------|
 | [`ref_view`](ranges/ref_view.md) | Rangeへの参照として振る舞うビュー (class template)                       | C++20          |
-| [`all`](ranges/ref_view.md)      | Rangeへの参照として振る舞うビューを生成する (customization point object) | C++20          |
-| [`all_t`](ranges/ref_view.md)    | `all`の戻り値型 (alias template)                                         | C++20          |
+| [`views::all`](ranges/ref_view.md)      | Rangeへの参照として振る舞うビューを生成する (customization point object) | C++20          |
+| [`views::all_t`](ranges/ref_view.md)    | `all`の戻り値型 (alias template)                                         | C++20          |
 
 ### filter view
 
 | 名前                                   | 説明                                                        | 対応バージョン |
 |----------------------------------------|-------------------------------------------------------------|----------------|
 | [`filter_view`](ranges/filter_view.md) | 指定した条件を満たす要素だけを集めるビュー (class template) | C++20          |
-| [`filter`](ranges/filter_view.md)      | `filter_view`を生成する (customization point object)        | C++20          |
+| [`views::filter`](ranges/filter_view.md)      | `filter_view`を生成する (customization point object)        | C++20          |
 
 ### transform view
 
 | 名前                                         | 説明                                                     | 対応バージョン |
 |----------------------------------------------|----------------------------------------------------------|----------------|
 | [`transform_view`](ranges/transform_view.md) | 指定した関数で各要素を変換するビュー (class template)    | C++20          |
-| [`transform`](ranges/transform_view.md)      | `transform_view`を生成する (customization point object)  | C++20          |
+| [`views::transform`](ranges/transform_view.md)      | `transform_view`を生成する (customization point object)  | C++20          |
 
 ### take view
 
 | 名前                               | 説明                                                                          | 対応バージョン |
 |------------------------------------|-------------------------------------------------------------------------------|----------------|
 | [`take_view`](ranges/take_view.md) | 先頭から指定した個数だけ取り出すビュー (class template)                       | C++20          |
-| [`take`](ranges/take_view.md)      | 先頭から指定した個数だけ取り出すビューを生成する (customization point object) | C++20          |
+| [`views::take`](ranges/take_view.md)      | 先頭から指定した個数だけ取り出すビューを生成する (customization point object) | C++20          |
 
 ### take while view
 
 | 名前                                           | 説明                                                              | 対応バージョン |
 |------------------------------------------------|-------------------------------------------------------------------|----------------|
 | [`take_while_view`](ranges/take_while_view.md) | 先頭から指定した条件を満たす範囲を取り出すビュー (class template) | C++20          |
-| [`take_while`](ranges/take_while_view.md)      | `take_while_view`を生成する (customization point object)          | C++20          |
+| [`views::take_while`](ranges/take_while_view.md)      | `take_while_view`を生成する (customization point object)          | C++20          |
 
 ### drop view
 
 | 名前                               | 説明                                                                          | 対応バージョン |
 |------------------------------------|-------------------------------------------------------------------------------|----------------|
 | [`drop_view`](ranges/drop_view.md) | 先頭から指定した個数だけ除外するビュー (class template)                       | C++20          |
-| [`drop`](ranges/drop_view.md)      | 先頭から指定した個数だけ除外するビューを生成する (customization point object) | C++20          |
+| [`views::drop`](ranges/drop_view.md)      | 先頭から指定した個数だけ除外するビューを生成する (customization point object) | C++20          |
 
 ### drop while view
 
 | 名前                                           | 説明                                                              | 対応バージョン |
 |------------------------------------------------|-------------------------------------------------------------------|----------------|
 | [`drop_while_view`](ranges/drop_while_view.md) | 先頭から指定した条件を満たす範囲を除外するビュー (class template) | C++20          |
-| [`drop_while`](ranges/drop_while_view.md)      | `drop_while_view`を生成する (customization point object)          | C++20          |
+| [`views::drop_while`](ranges/drop_while_view.md)      | `drop_while_view`を生成する (customization point object)          | C++20          |
 
 ### join view
 
 | 名前                               | 説明                                                                        | 対応バージョン |
 |------------------------------------|-----------------------------------------------------------------------------|----------------|
 | [`join_view`](ranges/join_view.md) | ネストされたRangeを平坦にするビュー (class template)                        | C++20          |
-| [`join`](ranges/join_view.md)      | ネストされたRangeを平坦にするビューを生成する (customization point object)  | C++20          |
+| [`views::join`](ranges/join_view.md)      | ネストされたRangeを平坦にするビューを生成する (customization point object)  | C++20          |
 
 ### split view
 
 | 名前                                           | 説明                                                                     | 対応バージョン |
 |------------------------------------------------|--------------------------------------------------------------------------|----------------|
 | [`lazy_split_view`](ranges/lazy_split_view.md) | Rangeを指定したデリミタで分割するビュー (class template)     | C++20          |
-| [`lazy_split`](ranges/lazy_split_view.md)      | `lazy_split_view`を生成する (customization point object)     | C++20          |
+| [`views::lazy_split`](ranges/lazy_split_view.md)      | `lazy_split_view`を生成する (customization point object)     | C++20          |
 | [`split_view`](ranges/split_view.md)           | Rangeを指定したデリミタで分割するビュー (class template)     | C++20          |
-| [`split`](ranges/split_view.md)                | `split_view`を生成する (customization point object)          | C++20          |
+| [`views::split`](ranges/split_view.md)                | `split_view`を生成する (customization point object)          | C++20          |
 
 ### counted view
 
 | 名前                           | 説明                                                                                          | 対応バージョン |
 |--------------------------------|-----------------------------------------------------------------------------------------------|----------------|
-| [`counted`](ranges/counted.md) | イテレータから指定した数の範囲をRangeとして扱うビューを生成する (customization point object)  | C++20          |
+| [`views::counted`](ranges/counted.md) | イテレータから指定した数の範囲をRangeとして扱うビューを生成する (customization point object)  | C++20          |
 
 ### common view
 
 | 名前                                   | 説明                                                          | 対応バージョン |
 |----------------------------------------|---------------------------------------------------------------|----------------|
 | [`common_view`](ranges/common_view.md) | `common_range`にしたビュー (class template)                   | C++20          |
-| [`common`](ranges/common_view.md)      | `common_range`なビューを生成する (customization point object) | C++20          |
+| [`views::common`](ranges/common_view.md)      | `common_range`なビューを生成する (customization point object) | C++20          |
 
 ### reverse view
 
 | 名前                                     | 説明                                                 | 対応バージョン |
 |------------------------------------------|------------------------------------------------------|----------------|
 | [`reverse_view`](ranges/reverse_view.md) | 逆順のビュー (class template)                        | C++20          |
-| [`reverse`](ranges/reverse_view.md)      | 逆順のビューを生成する (customization point object)  | C++20          |
+| [`views::reverse`](ranges/reverse_view.md)      | 逆順のビューを生成する (customization point object)  | C++20          |
 
 ### elements view
 
@@ -261,9 +285,9 @@ range | adaptor(args...)
 | [`elements_view`](ranges/elements_view.md) | 第n要素を集めたビュー (class template)                 | C++20          |
 | [`keys_view`](ranges/elements_view.md)     | 第0要素を集めたビュー (alias template)                 | C++20          |
 | [`values_view`](ranges/elements_view.md)   | 第1要素を集めたビュー (alias template)                 | C++20          |
-| [`elements`](ranges/elements_view.md)      | `elements_view`を生成する (customization point object) | C++20          |
-| [`keys`](ranges/elements_view.md)          | `keys_view`を生成する (customization point object)     | C++20          |
-| [`values`](ranges/elements_view.md)        | `values_view`を生成する (customization point object)   | C++20          |
+| [`views::elements`](ranges/elements_view.md)      | `elements_view`を生成する (customization point object) | C++20          |
+| [`views::keys`](ranges/elements_view.md)          | `keys_view`を生成する (customization point object)     | C++20          |
+| [`views::values`](ranges/elements_view.md)        | `values_view`を生成する (customization point object)   | C++20          |
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式の初期化キャプチャでのパック展開を許可 -- ラムダ式の初期化キャプチャでのパック展開を許可 : 経緯を修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.html"/>
      <id>08ed7dc8f0ed77b5ba11fb59be4e36cf6b0dc1cb:lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md</id>
      <updated>2021-10-20T01:59:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md b/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md
index 1efc4a164..4fb0076d6 100644
--- a/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md
+++ b/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.md
@@ -19,7 +19,7 @@ auto f(Args... args) {
 
 ## 仕様
 
-- 省略記号が前に付いた初期化キャプチャは、宣言領域がラムダ式内である初期化キャプチャ(init-capture)パックを導入するパック展開である。
+- 省略記号（`...`）が前に付いた初期化キャプチャは、宣言領域がラムダ式内である初期化キャプチャ(init-capture)パックを導入するパック展開である。
 - init-capture パックは、初期化子のパック展開の各要素に init-capture を導入する。
 
 例：
@@ -87,7 +87,7 @@ int main()
 
 ## この機能が必要になった背景・経緯
 
-パラメーターパックをラムダ式にキャプチャする際、コピーもしくは参照（あるいは `std::tuple`）を用いることでしかキャプチャをすることができなかった。
+パラメーターパックをラムダ式でキャプチャする際、コピーもしくは参照キャプチャ（あるいは `std::tuple`）を用いることでしかキャプチャをすることができず、初期化キャプチャにおいてパラメータパックの展開は禁止されていた。
 
 例えば、上記の例にある関数 `f` は、C++17 以前では次のように書く必要がある。
 
@@ -104,7 +104,7 @@ auto f(Args... args) {
 
 このようなコードは理解し難いため、この機能が提案された。
 
-また、C++17 までの初期化キャプチャの制限は、ラムダ式の初期化キャプチャがクロージャー型の「名前付き」メンバーを導入することによるものだった。
+また、C++17 までの初期化キャプチャにおけるパック展開の制限は、ラムダ式の初期化キャプチャがクロージャー型に「名前付き」メンバを導入することによるものだった。
 
 ```cpp
 template &amp;lt;typename T&amp;gt; void call_f(T t) {
@@ -112,7 +112,7 @@ template &amp;lt;typename T&amp;gt; void call_f(T t) {
 }
 ```
 
-上のようなコードは診断不要のエラーとなるが、将来クラスメンバをパック展開にすることが許可されると、このコードは有効になる可能性がある。その際、式に展開されていないパックが含まれているかどうかを判断する構文メカニズムが失われてしまうという問題があった。
+C++17時点（そして現在でも）、パラメータパックは可変長テンプレートの文脈でしか現れないため、このようなコードは診断不要のエラーとなる。しかし、初期化キャプチャでのパック展開を許可してしまうとクラスメンバとしてパラメータパックが導入されるため、このコードが有効となる可能性がある。その結果、式に展開されていないパラメータパックが含まれているかどうかを構文によって（可変長テンプレートの文脈であるか否かによって）判断するメカニズムが失われてしまい、非テンプレートの文脈ですらパラメータパックが出現することを考慮しなければならなくなるなど、実装に多大な影響を与える。そしてそれは当時の実装では不可能であった。
 
 しかし、この問題は[CWG 1760](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1760) の採用によって、初期化キャプチャはクロージャ型に名前付きメンバではなく無名メンバを導入するように文言が変更されたため、問題ではなくなっていた。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
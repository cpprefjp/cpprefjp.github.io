<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-03-28T14:38:35.982780</updated>
  <id>0e235c5a-446f-45ff-bf7c-2ccaaca13c70</id>

  
    <entry>
      <title>コンストラクタ -- Fix typo</title>
      <link href="https://cpprefjp.github.io/reference/format/basic_format_arg/op_constructor.html"/>
      <id>018f507010ff8d0516db6b24f959d21cccdf3fa9:reference/format/basic_format_arg/op_constructor.md</id>
      <updated>2024-03-28T02:43:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/basic_format_arg/op_constructor.md b/reference/format/basic_format_arg/op_constructor.md
index 079eb9ef8..f847702f1 100644
--- a/reference/format/basic_format_arg/op_constructor.md
+++ b/reference/format/basic_format_arg/op_constructor.md
@@ -26,8 +26,8 @@ namespace std {
   };
 }
 ```
-* varialt[link /reference/varialt/varialt.md]
-* monostate[link /reference/varialt/monostate.md]
+* variant[link /reference/variant/variant.md]
+* monostate[link /reference/variant/monostate.md]
 * basic_string_view[link /reference/string_view/basic_string_view.md]
 * handle[link handle.md]
 * basic_format_arg[italic]
@@ -56,7 +56,7 @@ namespace std {
 
 ## 効果
 
-- (1): `value`を[`monostate`](/reference/varialt/monostate.md)で初期化する。
+- (1): `value`を[`monostate`](/reference/variant/monostate.md)で初期化する。
 
 - (2): `TD`を`remove_const&amp;lt;T&amp;gt;`として、以下の順に`value`を初期化する。
     - `TD`が`bool`なら、`v`で初期化
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_format_arg -- basic_format_arg/op_constructorの説明を追加</title>
      <link href="https://cpprefjp.github.io/reference/format/basic_format_arg.html"/>
      <id>49f50b7ff4af76fbe40ccaea574d5bc0d55d233d:reference/format/basic_format_arg.md</id>
      <updated>2024-03-28T02:35:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/basic_format_arg.md b/reference/format/basic_format_arg.md
index 209c54703..011923ec5 100644
--- a/reference/format/basic_format_arg.md
+++ b/reference/format/basic_format_arg.md
@@ -7,7 +7,31 @@
 ```cpp
 namespace std {
   template&amp;lt;class Context&amp;gt;
-  class basic_format_arg;
+  class basic_format_arg {
+  public:
+    class handle;
+
+  private:
+    using char_type = typename Context::char_type;                              // exposition only
+
+    variant&amp;lt;monostate, bool, char_type,
+            int, unsigned int, long long int, unsigned long long int,
+            float, double, long double,
+            const char_type*, basic_string_view&amp;lt;char_type&amp;gt;,
+            const void*, handle&amp;gt; value;                                         // exposition only
+
+    template&amp;lt;class T&amp;gt; explicit basic_format_arg(T&amp;amp; v) noexcept;                 // exposition only
+
+  public:
+    basic_format_arg() noexcept;
+
+    explicit operator bool() const noexcept;
+
+    template&amp;lt;class Visitor&amp;gt;
+      decltype(auto) visit(this basic_format_arg arg, Visitor&amp;amp;&amp;amp; vis);
+    template&amp;lt;class R, class Visitor&amp;gt;
+      R visit(this basic_format_arg arg, Visitor&amp;amp;&amp;amp; vis);
+  };
 }
 ```
 
@@ -26,7 +50,7 @@ namespace std {
 
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|----------------|
-| `(constructor)` | コンストラクタ | C++20          |
+| [`(constructor)`](basic_format_arg/op_constructor.md) | コンストラクタ | C++20          |
 
 ### 変換演算子
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- basic_format_arg/op_constructorの説明を追加</title>
      <link href="https://cpprefjp.github.io/reference/format/basic_format_arg/op_constructor.html"/>
      <id>49f50b7ff4af76fbe40ccaea574d5bc0d55d233d:reference/format/basic_format_arg/op_constructor.md</id>
      <updated>2024-03-28T02:35:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/basic_format_arg/op_constructor.md b/reference/format/basic_format_arg/op_constructor.md
new file mode 100644
index 000000000..079eb9ef8
--- /dev/null
+++ b/reference/format/basic_format_arg/op_constructor.md
@@ -0,0 +1,87 @@
+# コンストラクタ
+
+* format[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* basic_format_arg[meta class]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class Context&amp;gt;
+  class basic_format_arg {
+  private:
+    using char_type = typename Context::char_type;                              // exposition only
+
+    variant&amp;lt;monostate, bool, char_type,
+            int, unsigned int, long long int, unsigned long long int,
+            float, double, long double,
+            const char_type*, basic_string_view&amp;lt;char_type&amp;gt;,
+            const void*, handle&amp;gt; value;                                         // exposition only
+
+    template&amp;lt;class T&amp;gt; explicit basic_format_arg(T&amp;amp; v) noexcept;                 // (2) exposition only
+
+  public:
+    basic_format_arg() noexcept; // (1)
+  };
+}
+```
+* varialt[link /reference/varialt/varialt.md]
+* monostate[link /reference/varialt/monostate.md]
+* basic_string_view[link /reference/string_view/basic_string_view.md]
+* handle[link handle.md]
+* basic_format_arg[italic]
+
+## 概要
+
+* (1): 空の`basic_format_arg`を構築する
+* (2): (説明専用)[`make_format_args`](../make_format_args.md)の内部で使用され、引数から`basic_format_args`を構築する。
+
+## テンプレートパラメーター制約
+
+- (2):
+    - `T`はフォーマットできる型であること
+
+## 事前条件
+
+- (2): もし `decay_t&amp;lt;T&amp;gt;` が `char_type*` または `const char_type*` である場合、 `static_cast&amp;lt;const char_type*&amp;gt;(v)` はヌル終端された `char_type` の配列を指すこと。
+
+## 事後条件
+
+- (1): `!(*this)`
+
+## 例外
+
+投げない。
+
+## 効果
+
+- (1): `value`を[`monostate`](/reference/varialt/monostate.md)で初期化する。
+
+- (2): `TD`を`remove_const&amp;lt;T&amp;gt;`として、以下の順に`value`を初期化する。
+    - `TD`が`bool`なら、`v`で初期化
+    - `TD`が`char`かつ`char_type`が`wchar_t`なら、`value`を`static_cast&amp;lt;wchar_t&amp;gt;(v)`で初期化
+    - `TD`が`char`かつ`char_type`が`wchar_t`なら、`value`を`static_cast&amp;lt;wchar_t&amp;gt;(static_cast&amp;lt;unsigned char&amp;gt;(v))`で初期化
+    - `TD`が符号つき整数型かつ`sizeof(TD) &amp;lt;= sizeof(int)`なら、`value`を`static_cast&amp;lt;int&amp;gt;(v)`で初期化
+    - `TD`が符号なし整数型かつ`sizeof(TD) &amp;lt;= sizeof(unsigned int)`なら、`value`を`static_cast&amp;lt;unsigned int&amp;gt;(v)`で初期化
+    - `TD`が符号つき整数型かつ`sizeof(TD) &amp;lt;= sizeof(long long int)`なら、`value`を`static_cast&amp;lt;long long int&amp;gt;(v)`で初期化
+    - `TD`が符号なし整数型かつ`sizeof(TD) &amp;lt;= sizeof(unsigned long long int)`なら、`value`を`static_cast&amp;lt;unsigned long long int&amp;gt;(v)`で初期化
+    - `TD`が浮動小数点数なら、`v`で初期化
+    - `TD`が`basic_string_view`または`basic_string`の特殊化で、`TD::value_type`が`char_type`と等しければ、`value`を`basic_string_view&amp;lt;char_type&amp;gt;(v.data(), v.size())`で初期化
+    - `decay_t&amp;lt;T&amp;gt;`が`char_type*`または `const char_type*` なら、`value`を`static_cast&amp;lt;const char_type*&amp;gt;(v)`で初期化
+    - `is_void_v&amp;lt;remove_pointer_t&amp;lt;TD&amp;gt;&amp;gt;`が`true`、または`is_null_pointer_v&amp;lt;TD&amp;gt;`が`true`なら、`value`を`static_cast&amp;lt;const void*&amp;gt;(v)`で初期化
+    - それ以外なら、`value`を`handle(v)`で初期化
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+
+* [P0645R10 Text Formatting](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>make_format_args -- basic_format_arg/op_constructorの説明を追加</title>
      <link href="https://cpprefjp.github.io/reference/format/make_format_args.html"/>
      <id>49f50b7ff4af76fbe40ccaea574d5bc0d55d233d:reference/format/make_format_args.md</id>
      <updated>2024-03-28T02:35:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/make_format_args.md b/reference/format/make_format_args.md
index b8b852c5c..3e4ffefad 100644
--- a/reference/format/make_format_args.md
+++ b/reference/format/make_format_args.md
@@ -47,92 +47,21 @@ string format(string_view fmt, const Args&amp;amp;... args)
 ## 事前条件
 すべての引数の型`Ti`について`Context::formatter_type&amp;lt;Ti&amp;gt;`が`Formatter`要件を満たすこと。
 
-## 効果
-
-(2)は次と等しい。
-
-```cpp
-return make_format_args&amp;lt;wformat_context&amp;gt;(args...);
-```
-* wformat_context[link /reference/format/basic_format_context.md]
+## 戻り値
 
-(1)は次と等しい。
+### (1)
 
 ```cpp
 return {basic_format_arg&amp;lt;Context&amp;gt;(args)...}
 ```
-* basic_format_arg[link /reference/format/basic_format_arg.md]
+* basic_format_arg[link /reference/format/basic_format_arg/op_constructor.md]
 
-ただし、便宜上、[`basic_format_arg`](/reference/format/basic_format_arg.md)は次のprivateメンバを持つとする。
-(これらのprivateメンバは規格に含まれない)
+### (2)
 
 ```cpp
-namespace std {
-  template&amp;lt;class Context&amp;gt;
-  class basic_format_arg {
-  public:
-    class handle;
-
-  private:
-    using charT = typename Context::char_type;
-
-    variant&amp;lt;monostate, bool, charT,
-            int, unsigned int, long long int, unsigned long long int,
-            float, double, long double,
-            const charT*, basic_string_view&amp;lt;charT&amp;gt;,
-            const void*, handle&amp;gt; value;
-
-    template&amp;lt;typename T&amp;gt; explicit basic_format_arg(const T&amp;amp; v) noexcept; // (a)
-    explicit basic_format_arg(float n) noexcept;                         // (b)
-    explicit basic_format_arg(double n) noexcept;                        // (c)
-    explicit basic_format_arg(long double n) noexcept;                   // (d)
-    explicit basic_format_arg(const charT* s);                           // (e)
-
-    template&amp;lt;class traits&amp;gt;
-      explicit basic_format_arg(
-        basic_string_view&amp;lt;charT, traits&amp;gt; s) noexcept;                    // (f)
-
-    template&amp;lt;class traits, class Allocator&amp;gt;
-      explicit basic_format_arg(
-        const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; s) noexcept;       // (g)
-
-    explicit basic_format_arg(nullptr_t) noexcept;                       // (h)
-
-    template&amp;lt;class T&amp;gt;
-      explicit basic_format_arg(const T* p) noexcept;                    // (i)
-
-    template&amp;lt;class Ctx, class... Args&amp;gt;
-      friend format_arg_store&amp;lt;Ctx, Args...&amp;gt;
-        make_format_args(const Args&amp;amp;... args);
-  };
-}
+return make_format_args&amp;lt;wformat_context&amp;gt;(args...);
 ```
-* variant[link /reference/variant/variant.md]
-* monostate[link /reference/variant/monostate.md]
-* handle[link /reference/format/basic_format_arg/handle.md]
-* basic_string[link /reference/string/basic_string.md]
-* basic_string_view[link /reference/string_view/basic_string_view.md]
-* basic_format_arg[link /reference/format/basic_format_arg.md]
-
-ここで、それぞれの効果は次と等しい。
-
-* (a):
-    * `T`が`bool`または`charT`なら、`value`を`v`で初期化
-    * または、`T`が`char`かつ`charT`が`wchar_t`なら、`value`を`static_cast&amp;lt;wchar_t&amp;gt;(v)`で初期化
-    * または、`T`が符号つき整数型かつ`sizeof(T) &amp;lt;= sizeof(int)`なら、`value`を`static_cast&amp;lt;int&amp;gt;(v)`で初期化
-    * または、`T`が符号なし整数型かつ`sizeof(T) &amp;lt;= sizeof(unsigned int)`なら、`value`を`static_cast&amp;lt;unsigned int&amp;gt;(v)`で初期化
-    * または、`T`が符号つき整数型かつ`sizeof(T) &amp;lt;= sizeof(long long int)`なら、`value`を`static_cast&amp;lt;long long int&amp;gt;(v)`で初期化
-    * または、`T`が符号なし整数型かつ`sizeof(T) &amp;lt;= sizeof(unsigned long long int)`なら、`value`を`static_cast&amp;lt;unsigned long long int&amp;gt;(v)`で初期化
-    * または、`value`を`handle(v)`で初期化
-* (b),(c),(d): `value`を`n`で初期化
-* (e): `value`を`s`で初期化 (`s`は有効なC文字列であること)
-* (f): `value`を`s`で初期化
-* (g): `value`を`basic_string_view&amp;lt;charT&amp;gt;(s.data(), s.size())`で初期化
-* (h): `value`を`static_cast&amp;lt;const void*&amp;gt;(nullptr)`で初期化
-* (i): `value`を`p`で初期化 (`is_void_v&amp;lt;T&amp;gt;`が`true`であること)
-
-## 戻り値
-`{basic_format_arg&amp;lt;Context&amp;gt;(args)...}`
+* wformat_context[link /reference/format/basic_format_context.md]
 
 ## 実装例
 ```cpp
@@ -150,7 +79,7 @@ namespace std {
   }
 }
 ```
-* basic_format_arg[link /reference/format/basic_format_arg.md]
+* basic_format_arg[link /reference/format/basic_format_arg/op_constructor.md]
 * wformat_context[link /reference/format/basic_format_context.md]
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- アライメントの詳細を記載</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>98c71c609bfbd6232d132f9066711cd26df334fd:reference/format/format.md</id>
      <updated>2024-03-26T03:52:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index 6adcc35dc..60a4f19d6 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -126,8 +126,7 @@ string s3 = format(&amp;#34;{} {1}&amp;#34;,  &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // コンパイルエラー
 
 イテレータ範囲`[first, last)`を[`to_chars`](/reference/charconv/to_chars.md)の結果を格納するのに十分な範囲、`value`をフォーマットする値、`charT`を`char`または`wchar_t`とする。
 
-* 以下の表の通りに[`to_chars`](/reference/charconv/to_chars.md)を呼び出したあと、その結果を出力へコピーするかのような振る舞いをする。ただし、実際に[`to_chars`](/reference/charconv/to_chars.md)を呼び出すかどうかは規定されていない。
-* 実際には、出力へコピーする際にパディングなども行われる。
+* ロケールを考慮しない場合、数値を文字列化する部分は以下の表の通りに[`to_chars`](/reference/charconv/to_chars.md)を呼び出した結果と等しくなる。
 
 | type   | 意味                       | 効果                                                                      | 対応バージョン |
 |:-------|:---------------------------|:--------------------------------------------------------------------------|----------------|
@@ -164,6 +163,51 @@ string s3 = format(&amp;#34;{} {1}&amp;#34;,  &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // コンパイルエラー
 
 ポインタは`void*`のみサポートする。それ以外のポインタは、`void*`にキャストしなければ出力できない。
 
+#### アライメントの詳細
+
+指定した幅が必要な幅より小さい場合や、幅を省略している場合はアライメントは無効となる。
+
+アライメントにおいて、一部の文字は大きな幅を持っているとみなされる。
+
+UTF-8・UTF-16・UTF-32の文字のシーケンスの場合、その幅はUnicode標準 UAX #29 で定める拡張書記素クラスタの幅の合計となる。
+
+以下の文字は2文字分の幅を持つ。
+
+- UAX #44 の規定に従って、`East_Asian_Width` が `W` (Wide)または `F` (Fullwidth)であるコードポイント
+- `U+4DC0` - `U+4DFF` (Yijing Hexagram Symbols)
+- `U+1F300` - `U+1F5FF` (Miscellaneous Symbols and Pictographs)
+- `U+1F900` - `U+1F9FF` (Supplemental Symbols and Pictographs)
+
+それ以外のコードポイントの幅は1である。
+
+UTF-8・UTF-16・UTF-32以外の文字のシーケンスの幅は未規定。
+
+アライメントに使用する文字は、常に幅1として扱われる。
+
+```cpp
+std::format(&amp;#34;{:*&amp;gt;6}&amp;#34;, &amp;#34;あ&amp;#34;); // &amp;#34;****あ&amp;#34;
+std::format(&amp;#34;{:あ&amp;gt;6}&amp;#34;, &amp;#39;x&amp;#39;); // &amp;#34;あああああx&amp;#34;
+```
+
+##### 0埋めとの関係
+
+アライメント方向が指定されていると、0埋めは無効となる。
+
+```cpp
+// 0埋めは符号を考慮する
+std::format(&amp;#34;{:05}&amp;#34;, 42);    // &amp;#34;00042&amp;#34;
+std::format(&amp;#34;{:+05}&amp;#34;, 42);   // &amp;#34;+0042&amp;#34;
+std::format(&amp;#34;{: 05}&amp;#34;, 42);   // &amp;#34; 0042&amp;#34;
+
+// アライメントは符号を考慮しない
+std::format(&amp;#34;{:0&amp;gt;5}&amp;#34;, 42);   // &amp;#34;00042&amp;#34;
+std::format(&amp;#34;{:0&amp;gt;+5}&amp;#34;, 42);  // &amp;#34;00+42&amp;#34;
+std::format(&amp;#34;{:0&amp;gt; 5}&amp;#34;, 42);  // &amp;#34;00 42&amp;#34;
+
+// 0埋めも指定しているが、アライメント方向が指定されているのでアライメントが優先される
+std::format(&amp;#34;{:0&amp;gt;05}&amp;#34;, -42);  // &amp;#34;00-42&amp;#34;
+```
+
 #### &amp;lt;a id=&amp;#34;range-format-options&amp;#34; href=&amp;#34;#range-format-options&amp;#34;&amp;gt;Range・シーケンスコンテナの書式 (C++23)&amp;lt;/a&amp;gt;
 
 Range・シーケンスコンテナに対して使用できる標準のオプション書式は次の通り(`[]`は省略可の意味)。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- フォーマット書式の表を整理</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>89d821a70e451523f47cab945528463bf5fc14cb:reference/format/format.md</id>
      <updated>2024-03-26T03:13:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index e173ca258..6adcc35dc 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -86,7 +86,7 @@ string s3 = format(&amp;#34;{} {1}&amp;#34;,  &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // コンパイルエラー
     * スペース : 正の数にはスペースを表示する
 * `#` : 代替表現(`0x`など形式がわかる表記)を使う
 * `0` : 符号を考慮して0で埋める
-* `width` : 幅 (省略時は値に応じて幅が決まり、アライメントは機能しない)
+* `width` : 幅 (アライメントもしくは0埋めの幅)
     * 置換フィールドを使って変数で指定できる
 * `precision` : 精度(浮動小数点数の場合)、使う文字数(文字列の場合)
     * 置換フィールドを使って変数で指定できる
@@ -100,10 +100,29 @@ string s3 = format(&amp;#34;{} {1}&amp;#34;,  &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // コンパイルエラー
 
 | type       | 意味         |効果                                                                             | 対応バージョン |
 |:-----------|:-------------|--------------------------------------------------------------------------------------|-------|
-| s (省略可) | 文字列       | 文字列をそのまま出力                                                                      | C++20 |
+| s          | 文字列       | 文字列をそのまま出力                                                                      | C++20 |
 | ?          | デバッグ出力 | 文字・文字列を引用符で囲み、エスケープシーケンスをエスケープして出力 (例:`&amp;#34;\n&amp;#34;`は`&amp;#34;\&amp;#34;\n\&amp;#34;&amp;#34;`となる) | C++23 |
 
-#### 文字型 / `bool`型 / 整数型の場合
+デフォルトは `s`。
+
+#### 文字型の場合
+
+| type   | 意味                       | 効果                                                                      | 対応バージョン |
+|:-------|:---------------------------|:--------------------------------------------------------------------------|----------------|
+| c      | 文字として出力             | `static_cast&amp;lt;charT&amp;gt;(value)` (収まらないときは`format_error`)              | C++20 |
+| ?      | デバッグ出力               | 文字・文字列を引用符で囲み、エスケープシーケンスをエスケープして出力 (例:`&amp;#34;\n&amp;#34;`は`&amp;#34;\&amp;#34;\\n\&amp;#34;&amp;#34;`となる) | C++23 |
+
+デフォルトは `c`。
+
+整数型のオプションも指定できる。その場合は、十分な大きさの符号なし整数型として扱われる。
+
+#### `bool`型の場合
+
+デフォルトでは `true` / `false` という文字列を出力する。
+
+整数型のオプションも指定できる。その場合は、`unsigned char` に `static_cast` される。
+
+#### 整数型の場合
 
 イテレータ範囲`[first, last)`を[`to_chars`](/reference/charconv/to_chars.md)の結果を格納するのに十分な範囲、`value`をフォーマットする値、`charT`を`char`または`wchar_t`とする。
 
@@ -112,34 +131,36 @@ string s3 = format(&amp;#34;{} {1}&amp;#34;,  &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // コンパイルエラー
 
 | type   | 意味                       | 効果                                                                      | 対応バージョン |
 |:-------|:---------------------------|:--------------------------------------------------------------------------|----------------|
-| b      | 2進数(小文字)              | `to_chars(first, last, value, 2)` (代替表現の接頭辞 `0b`)                 | C++20 |
-| B      | 2進数(大文字)              | `b`の大文字版 (代替表現の接頭辞 `0B`)                                     | C++20 |
-| c      | 文字として出力             | `static_cast&amp;lt;charT&amp;gt;(value)` (収まらないときは`format_error`)              | C++20 |
+| b, B   | 2進数                      | `to_chars(first, last, value, 2)` (代替表現の接頭辞 `0b`)                 | C++20 |
 | d      | 10進数                     | `to_chars(first, last, value)`                                            | C++20 |
 | o      | 8進数                      | `to_chars(first, last, value, 8)` (代替表現の接頭辞 `0`、ただし値が0のときは接頭辞なし) | C++20 |
-| x      | 16進数(小文字)             | `to_chars(first, last, value, 16)` (代替表現の接頭辞 `0x`)                | C++20 |
-| X      | 16進数(大文字)             | `x`の大文字版 (代替表現の接頭辞 `0X`)                                     | C++20 |
-| ?      | デバッグ出力               | 文字・文字列を引用符で囲み、エスケープシーケンスをエスケープして出力 (例:`&amp;#34;\n&amp;#34;`は`&amp;#34;\&amp;#34;\\n\&amp;#34;&amp;#34;`となる) | C++23 |
-| (なし) | デフォルト                 | `d` (整数型の場合)&amp;lt;br/&amp;gt;`c` (文字型の場合)&amp;lt;br/&amp;gt;`&amp;#34;true&amp;#34;`/`&amp;#34;false&amp;#34;`を出力(`bool`型の場合) | C++20 |
+| x, X   | 16進数                     | `to_chars(first, last, value, 16)` (代替表現の接頭辞 `0x`)                | C++20 |
+| c      | 文字として出力             | `static_cast&amp;lt;charT&amp;gt;(value)` した値を文字として出力 (収まらないときは`format_error`)  | C++20 |
+
+デフォルトは `d`。
+
+2進数・16進数については、大文字のオプションを指定すると代替表現および数値中のアルファベットが大文字になる。
 
 #### 浮動小数点数型の場合
 
-| type       | 意味                             | 効果                                                                                                                                                                  |
-|:-----------|:---------------------------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
-| f,F        | 指数表記しない                   | `to_chars(first, last, value, chars_format::fixed, precision)` (精度が指定されたとき)&amp;lt;br/&amp;gt;`to_chars(first, last, value, chars_format::fixed, 6)` (それ以外)            |
-| e          | 指数表記(小文字)                 | `to_chars(first, last, value, chars_format::scientific, precision)` (精度が指定されたとき)&amp;lt;br/&amp;gt;`to_chars(first, last, value, chars_format::scientific, 6)` (それ以外)  |
-| E          | 指数表記(大文字)                 | `e`の大文字版                                                                                                                                                         |
-| a          | 16進指数表記(小文字)             | `to_chars(first, last, value, chars_format::hex, precision)` (精度が指定されたとき)&amp;lt;br/&amp;gt;`to_chars(first, last, value, chars_format::hex)` (それ以外)                   |
-| A          | 16進指数表記(大文字)             | `a`の大文字版                                                                                                                                                         |
-| g          | 値に応じた表記(小文字)           | `to_chars(first, last, value, chars_format::general, precision)` (精度が指定されたとき)&amp;lt;br/&amp;gt;`to_chars(first, last, value, chars_format::general, 6)` (それ以外) |
-| G          | 値に応じた表記(大文字)           | `g`の大文字版                                                                                                                                                         |
-| (なし)     | デフォルト                       | `to_chars(first, last, value, chars_format::fixed, general, precision)` (精度が指定されたとき)&amp;lt;br/&amp;gt;`to_chars(first, last, value)` (それ以外)                           |
+| type       | 意味                      | 効果                                                                                                                                                                  |
+|:-----------|:--------------------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
+| f, F       | 指数表記しない            | `to_chars(first, last, value, chars_format::fixed, precision)` (精度が指定されたとき)&amp;lt;br/&amp;gt;`to_chars(first, last, value, chars_format::fixed, 6)` (それ以外)           |
+| e, E       | 指数表記する              | `to_chars(first, last, value, chars_format::scientific, precision)` (精度が指定されたとき)&amp;lt;br/&amp;gt;`to_chars(first, last, value, chars_format::scientific, 6)` (それ以外) |
+| a, A       | 16進数で指数表記する      | `to_chars(first, last, value, chars_format::hex, precision)` (精度が指定されたとき)&amp;lt;br/&amp;gt;`to_chars(first, last, value, chars_format::hex)` (それ以外)                  |
+| g, G       | 値に応じて指数表記を使う  | `to_chars(first, last, value, chars_format::general, precision)` (精度が指定されたとき)&amp;lt;br/&amp;gt;`to_chars(first, last, value, chars_format::general, 6)` (それ以外)       |
+
+デフォルトは `g`。
+
+大文字のオプションを指定すると数値中のアルファベットが大文字になる。
 
 #### ポインタの場合
 
 | type       | 意味               | 効果                                                                                                            |
 |:-----------|:-------------------|:----------------------------------------------------------------------------------------------------------------|
-| p (省略可) | アドレスを出力する | `&amp;#34;0x&amp;#34; + to_chars(first, last, reinterpret_cast&amp;lt;uintptr_t&amp;gt;(value), 16)`  |
+| p          | アドレスを出力する | `0x` につづいて、`to_chars(first, last, reinterpret_cast&amp;lt;uintptr_t&amp;gt;(value), 16)` の結果を出力する               |
+
+デフォルトは `p`。
 
 ポインタは`void*`のみサポートする。それ以外のポインタは、`void*`にキャストしなければ出力できない。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- オプション書式におけるロケールのオプションを修正</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>c48319e12b5865fe6e8453cf0b77c7635e0c0900:reference/format/format.md</id>
      <updated>2024-03-26T02:54:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index 9ed95e7e4..e173ca258 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -72,7 +72,7 @@ string s3 = format(&amp;#34;{} {1}&amp;#34;,  &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // コンパイルエラー
 基本的に`printf`の書式を踏襲しているが、あくまでもオプションであり、省略しても`&amp;lt;iostream&amp;gt;`と同じようにデフォルトの書式が使われる。
 
 ```
-[[fill] align] [sign] [&amp;#39;#&amp;#39;] [&amp;#39;0&amp;#39;] [width] [&amp;#39;.&amp;#39; precision] [type]
+[[fill] align] [sign] [&amp;#39;#&amp;#39;] [&amp;#39;0&amp;#39;] [width] [&amp;#39;.&amp;#39; precision] [&amp;#39;L&amp;#39;] [type]
 ```
 
 * `fill` : アライメントに使う文字 (デフォルト: スペース)
@@ -90,9 +90,10 @@ string s3 = format(&amp;#34;{} {1}&amp;#34;,  &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // コンパイルエラー
     * 置換フィールドを使って変数で指定できる
 * `precision` : 精度(浮動小数点数の場合)、使う文字数(文字列の場合)
     * 置換フィールドを使って変数で指定できる
+* `L` : ロケールを考慮する
 * `type` : 値の表現方法(表を参照)
 
-`printf`との違いとして、デフォルトではロケール非依存(Cロケール固定)である。ロケール依存のフォーマットをするには`n`オプションを使う。
+`printf`との違いとして、デフォルトではロケール非依存(Cロケール固定)である。ロケール依存のフォーマットをするには`L`オプションを使う。
 ロケール非依存の場合、算術型の出力は[`to_chars`](/reference/charconv/to_chars.md)と同じになる。
 
 #### 文字列型の場合
@@ -115,7 +116,6 @@ string s3 = format(&amp;#34;{} {1}&amp;#34;,  &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // コンパイルエラー
 | B      | 2進数(大文字)              | `b`の大文字版 (代替表現の接頭辞 `0B`)                                     | C++20 |
 | c      | 文字として出力             | `static_cast&amp;lt;charT&amp;gt;(value)` (収まらないときは`format_error`)              | C++20 |
 | d      | 10進数                     | `to_chars(first, last, value)`                                            | C++20 |
-| n      | 10進数(ロケールを考慮する) | ロケール依存の桁区切りを使った`d`                                         | C++20 |
 | o      | 8進数                      | `to_chars(first, last, value, 8)` (代替表現の接頭辞 `0`、ただし値が0のときは接頭辞なし) | C++20 |
 | x      | 16進数(小文字)             | `to_chars(first, last, value, 16)` (代替表現の接頭辞 `0x`)                | C++20 |
 | X      | 16進数(大文字)             | `x`の大文字版 (代替表現の接頭辞 `0X`)                                     | C++20 |
@@ -133,7 +133,6 @@ string s3 = format(&amp;#34;{} {1}&amp;#34;,  &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // コンパイルエラー
 | A          | 16進指数表記(大文字)             | `a`の大文字版                                                                                                                                                         |
 | g          | 値に応じた表記(小文字)           | `to_chars(first, last, value, chars_format::general, precision)` (精度が指定されたとき)&amp;lt;br/&amp;gt;`to_chars(first, last, value, chars_format::general, 6)` (それ以外) |
 | G          | 値に応じた表記(大文字)           | `g`の大文字版                                                                                                                                                         |
-| n          | ロケールを考慮した値に応じた表記 | ロケールを考慮した`g`                                                                                                                                                 |
 | (なし)     | デフォルト                       | `to_chars(first, last, value, chars_format::fixed, general, precision)` (精度が指定されたとき)&amp;lt;br/&amp;gt;`to_chars(first, last, value)` (それ以外)                           |
 
 #### ポインタの場合
@@ -245,7 +244,7 @@ format(&amp;#34;{:&amp;lt;06}&amp;#34;, -42);  // &amp;#34;-42   &amp;#34;
 format(&amp;#34;{}&amp;#34;, 42);                      // &amp;#34;42&amp;#34;
 format(&amp;#34;{0:b} {0:d} {0:o} {0:x}&amp;#34;, 42); // &amp;#34;101010 42 52 2a&amp;#34;
 format(&amp;#34;{0:#x} {0:#X}&amp;#34;, 42);           // &amp;#34;0x2a 0X2A&amp;#34;
-format(&amp;#34;{:n}&amp;#34;, 1234);                  // &amp;#34;1,234&amp;#34; (ロケールによる)
+format(&amp;#34;{:L}&amp;#34;, 1234.5678);             // &amp;#34;1,234.5678&amp;#34; (ロケールによる)
 ```
 
 ### コンパイル時の書式文字列チェック
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-12-09T01:58:53.733553</updated>
  <id>7ac46580-4d73-4c3b-9a56-ba2681492b20</id>

  
    <entry>
      <title>operator-- -- サンプルコード修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator/op_decrement.html"/>
      <id>1469539eecebc0c5f85ca22cfd3535e92188408a:reference/iterator/counted_iterator/op_decrement.md</id>
      <updated>2020-12-09T10:49:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator/op_decrement.md b/reference/iterator/counted_iterator/op_decrement.md
index c907f1220..19c84036a 100644
--- a/reference/iterator/counted_iterator/op_decrement.md
+++ b/reference/iterator/counted_iterator/op_decrement.md
@@ -42,29 +42,38 @@ constexpr counted_iterator operator--(int)
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
-#include &amp;lt;vector&amp;gt;
-#include &amp;lt;memory&amp;gt;
 #include &amp;lt;iterator&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
 
-int main()
-{
-  std::vector&amp;lt;std::unique_ptr&amp;lt;int&amp;gt;&amp;gt; v;
-  for (int i = 0; i &amp;lt; 5; ++i)
-    v.emplace_back(new int(i));
+  std::counted_iterator ci{std::ranges::begin(vec), 5};
 
-  auto it = std::make_move_iterator(v.end());
-  --it; // ひとつ逆に進める
-  std::unique_ptr&amp;lt;int&amp;gt; p = *it;
+  ++ci;
+  ++ci;
+  
+  std::cout &amp;lt;&amp;lt; *ci &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  
+  --ci;
+  
+  std::cout &amp;lt;&amp;lt; *ci &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  
+  ci--;
 
-  std::cout &amp;lt;&amp;lt; *p &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; *ci &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
 }
 ```
-* v.emplace_back[link /reference/vector/vector/emplace_back.md]
-* std::make_move_iterator[link /reference/iterator/make_move_iterator.md]
+* --ci[color ff0000]
+* ci--[color ff0000]
+* ranges::begin[link /reference/ranges/begin.md.nolink]
 
 ### 出力
 ```
-4
+3
+2
+1
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator++ -- サンプルコード修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator/op_increment.html"/>
      <id>1469539eecebc0c5f85ca22cfd3535e92188408a:reference/iterator/counted_iterator/op_increment.md</id>
      <updated>2020-12-09T10:49:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator/op_increment.md b/reference/iterator/counted_iterator/op_increment.md
index a873f54cd..60439195f 100644
--- a/reference/iterator/counted_iterator/op_increment.md
+++ b/reference/iterator/counted_iterator/op_increment.md
@@ -66,29 +66,26 @@ int main() {
 
   std::counted_iterator ci{std::ranges::begin(vec), 5};
 
+  std::cout &amp;lt;&amp;lt; *ci &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  
   ++ci;
-  ++ci;
-
+  
   std::cout &amp;lt;&amp;lt; *ci &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
-
-  --ci;
-
-  std::cout &amp;lt;&amp;lt; *ci &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
-
-  ci--;
+  
+  ci++;
 
   std::cout &amp;lt;&amp;lt; *ci &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
 }
 ```
-* --ci[color ff0000]
-* ci--[color ff0000]
+* ++ci[color ff0000]
+* ci++[color ff0000]
 * ranges::begin[link /reference/ranges/begin.md.nolink]
 
 ### 出力
 ```
-3
-2
 1
+2
+3
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator-- -- 表示調整</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator/op_decrement.html"/>
      <id>476fbcd6dd55cc6b1031503560ae5ad22b7c759b:reference/iterator/counted_iterator/op_decrement.md</id>
      <updated>2020-12-09T10:47:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator/op_decrement.md b/reference/iterator/counted_iterator/op_decrement.md
index 5f0027093..c907f1220 100644
--- a/reference/iterator/counted_iterator/op_decrement.md
+++ b/reference/iterator/counted_iterator/op_decrement.md
@@ -31,6 +31,7 @@ constexpr counted_iterator operator--(int)
     ++length;
     return *this;
     ```
+
 - (2) : 以下と等価  
     ```cpp
     counted_iterator tmp = *this;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator++ -- 表示調整</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator/op_increment.html"/>
      <id>476fbcd6dd55cc6b1031503560ae5ad22b7c759b:reference/iterator/counted_iterator/op_increment.md</id>
      <updated>2020-12-09T10:47:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator/op_increment.md b/reference/iterator/counted_iterator/op_increment.md
index 57a1eea22..a873f54cd 100644
--- a/reference/iterator/counted_iterator/op_increment.md
+++ b/reference/iterator/counted_iterator/op_increment.md
@@ -35,6 +35,7 @@ constexpr counted_iterator operator++(int)
     --length;
     return *this;
     ```
+
 - (2) : 以下と等価  
     ```cpp
     --length;
@@ -45,6 +46,7 @@ constexpr counted_iterator operator++(int)
       throw;
     }
     ```
+
 - (3) : 以下と等価  
     ```cpp
     counted_iterator tmp = *this;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>counted_iterator -- counted_iterator ++/--追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator.html"/>
      <id>76f475e982d770da6788216e53c09222b4d9f961:reference/iterator/counted_iterator.md</id>
      <updated>2020-12-09T10:23:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator.md b/reference/iterator/counted_iterator.md
index 92c73d0fb..27e1d02ec 100644
--- a/reference/iterator/counted_iterator.md
+++ b/reference/iterator/counted_iterator.md
@@ -51,9 +51,8 @@ namespace std {
 | [`base`](counted_iterator/base.md)          | 元のイテレータを取得する | C++20 |
 | [`count`](counted_iterator/count.md)          | 代入演算子 | C++20 |
 | [`operator*`](counted_iterator/op_deref.md)           | 間接参照演算子 | C++20 |
-| [`operator-&amp;gt;`](counted_iterator/op_arrow.md.nolink)          | メンバアクセス演算子 | C++20 |
-| [`operator++`](counted_iterator/op_increment.md.nolink)      | イテレータをインクリメントする | C++20 |
-| [`operator--`](counted_iterator/op_decrement.md.nolink)      | イテレータをインクリメントする | C++20 |
+| [`operator++`](counted_iterator/op_increment.md)      | イテレータをインクリメントする | C++20 |
+| [`operator--`](counted_iterator/op_decrement.md)      | イテレータをインクリメントする | C++20 |
 | [`operator+`](counted_iterator/op_unary_plus.md.nolink)      | イテレータを進める | C++20 |
 | [`operator+=`](counted_iterator/op_plus_assign.md.nolink)    | イテレータ自身を進める | C++20 |
 | [`operator-`](counted_iterator/op_unary_minus.md.nolink)     | イテレータを逆に進める | C++20 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- counted_iterator ++/--追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator/op_constructor.html"/>
      <id>76f475e982d770da6788216e53c09222b4d9f961:reference/iterator/counted_iterator/op_constructor.md</id>
      <updated>2020-12-09T10:23:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator/op_constructor.md b/reference/iterator/counted_iterator/op_constructor.md
index 3d70b8575..c5f09a406 100644
--- a/reference/iterator/counted_iterator/op_constructor.md
+++ b/reference/iterator/counted_iterator/op_constructor.md
@@ -27,7 +27,7 @@ constexpr counted_iterator(const counted_iterator&amp;lt;I2&amp;gt;&amp;amp; x);  // (3)
 
 ## 効果
 
-`I`の値`current`メンバ変数、カウントの値を`length`メンバ変数に保持するとする。
+`I`の値を`current`メンバ変数、カウントの値を`length`メンバ変数に保持するとする。
 
 - (1) : `current, n`をデフォルト構築する。
 - (2) : `current`を`x`からムーブ構築し、`length`を`n`で初期化する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator-- -- counted_iterator ++/--追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator/op_decrement.html"/>
      <id>76f475e982d770da6788216e53c09222b4d9f961:reference/iterator/counted_iterator/op_decrement.md</id>
      <updated>2020-12-09T10:23:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator/op_decrement.md b/reference/iterator/counted_iterator/op_decrement.md
new file mode 100644
index 000000000..5f0027093
--- /dev/null
+++ b/reference/iterator/counted_iterator/op_decrement.md
@@ -0,0 +1,81 @@
+# operator--
+* iterator[meta header]
+* std[meta namespace]
+* counted_iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr counted_iterator&amp;amp; operator--()
+  requires bidirectional_iterator&amp;lt;I&amp;gt;;       // (1)
+
+constexpr counted_iterator operator--(int)
+  requires bidirectional_iterator&amp;lt;I&amp;gt;;       // (2)
+```
+* bidirectional_iterator[link /reference/iterator/bidirectional_iterator.md]
+
+
+## 概要
+イテレータをデクリメントする。
+
+- (1) : 前置デクリメント
+- (2) : 後置デクリメント
+
+## 効果
+
+現在のイテレータとカウントの値をそれぞれ、`current`、`length`メンバ変数に保持するとする。
+
+- (1) : 以下と等価  
+    ```cpp
+    --current;
+    ++length;
+    return *this;
+    ```
+- (2) : 以下と等価  
+    ```cpp
+    counted_iterator tmp = *this;
+    --*this;  // (1)に委譲
+    return tmp;
+    ```
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;memory&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+
+int main()
+{
+  std::vector&amp;lt;std::unique_ptr&amp;lt;int&amp;gt;&amp;gt; v;
+  for (int i = 0; i &amp;lt; 5; ++i)
+    v.emplace_back(new int(i));
+
+  auto it = std::make_move_iterator(v.end());
+  --it; // ひとつ逆に進める
+  std::unique_ptr&amp;lt;int&amp;gt; p = *it;
+
+  std::cout &amp;lt;&amp;lt; *p &amp;lt;&amp;lt; std::endl;
+}
+```
+* v.emplace_back[link /reference/vector/vector/emplace_back.md]
+* std::make_move_iterator[link /reference/iterator/make_move_iterator.md]
+
+### 出力
+```
+4
+```
+
+## バージョン
+### 言語
+- C++11
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 4.6.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0031R0 A Proposal to Add Constexpr Modifiers to `reverse_iterator`, `move_iterator`, `array` and Range Access](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0031r0.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator++ -- counted_iterator ++/--追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator/op_increment.html"/>
      <id>76f475e982d770da6788216e53c09222b4d9f961:reference/iterator/counted_iterator/op_increment.md</id>
      <updated>2020-12-09T10:23:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator/op_increment.md b/reference/iterator/counted_iterator/op_increment.md
new file mode 100644
index 000000000..57a1eea22
--- /dev/null
+++ b/reference/iterator/counted_iterator/op_increment.md
@@ -0,0 +1,102 @@
+# operator++
+* iterator[meta header]
+* std[meta namespace]
+* counted_iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr counted_iterator&amp;amp; operator++();   // (1)
+
+decltype(auto) operator++(int);             // (2)
+
+constexpr counted_iterator operator++(int)
+  requires forward_iterator&amp;lt;I&amp;gt;;             // (3)
+```
+* forward_iterator[link /reference/iterator/forward_iterator.md]
+
+## 概要
+イテレータをインクリメントする。
+
+- (1) : 前置インクリメント
+- (2)(3) : 後置インクリメント
+
+## 事前条件
+
+- (1)(2) : [`count()`](count.md)` &amp;gt; 0`
+
+## 効果
+
+現在のイテレータとカウントの値をそれぞれ、`current`、`length`メンバ変数に保持するとする。
+
+- (1) : 以下と等価  
+    ```cpp
+    ++current;
+    --length;
+    return *this;
+    ```
+- (2) : 以下と等価  
+    ```cpp
+    --length;
+    try { 
+      return current++;
+    } catch (...) {
+      ++length;
+      throw;
+    }
+    ```
+- (3) : 以下と等価  
+    ```cpp
+    counted_iterator tmp = *this;
+    ++*this;  // (1)に委譲
+    return tmp;
+    ```
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::counted_iterator ci{std::ranges::begin(vec), 5};
+
+  ++ci;
+  ++ci;
+
+  std::cout &amp;lt;&amp;lt; *ci &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  --ci;
+
+  std::cout &amp;lt;&amp;lt; *ci &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  ci--;
+
+  std::cout &amp;lt;&amp;lt; *ci &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* --ci[color ff0000]
+* ci--[color ff0000]
+* ranges::begin[link /reference/ranges/begin.md.nolink]
+
+### 出力
+```
+3
+2
+1
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 9
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[nodiscard]]をコンストラクタのオーバーロードごとに付加できるようにする -- C++20 [[nodiscard]]をコンストラクタのオーバーロードごとに付加できるようにする : 関連項目を追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/nodiscard_for_constructors.html"/>
      <id>07c7756784556e507792afcc9649a357a2cf4da7:lang/cpp20/nodiscard_for_constructors.md</id>
      <updated>2020-12-08T18:08:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/nodiscard_for_constructors.md b/lang/cpp20/nodiscard_for_constructors.md
index 9618e69a7..e370b09fe 100644
--- a/lang/cpp20/nodiscard_for_constructors.md
+++ b/lang/cpp20/nodiscard_for_constructors.md
@@ -50,5 +50,9 @@ prog.cc:11:12: note: declared here
 ```
 
 
+## 関連項目
+- [C++17 `[[nodiscard]]`属性](/lang/cpp17/nodiscard.md)
+
+
 ## 参照
 - [P1771R1 `[[nodiscard]]` for constructors](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1771r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[nodiscard]]属性 -- C++17 nodiscard : コンストラクタのオーバーロードに対するnodiscardはC++17でも使用できる可能性があることを記載</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/nodiscard.html"/>
      <id>813ecfdc091db1c8848c01430678f49e970cc80f:lang/cpp17/nodiscard.md</id>
      <updated>2020-12-08T18:05:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/nodiscard.md b/lang/cpp17/nodiscard.md
index 2c1bf9de1..7f9e2cc62 100644
--- a/lang/cpp17/nodiscard.md
+++ b/lang/cpp17/nodiscard.md
@@ -51,6 +51,7 @@ nodiscard.cpp:11:3: warning: ignoring return value of function declared with &amp;#39;no
 ## 関連項目
 - [C++11 属性構文](/lang/cpp11/attributes.md)
 - [C++20 `[[nodiscard]]`をコンストラクタのオーバーロードごとに付加できるようにする](/lang/cpp20/nodiscard_for_constructors.md)
+    - C++17対応のコンパイラでも使用できる可能性がある
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-07-25T12:44:41.398400</updated>
  <id>c4f30ea4-af45-44f3-8272-8f2e47dfa55c</id>

  
    <entry>
      <title>1ワイド文字に収まらないワイド文字リテラルを禁止する [P2362R3] -- Update remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.html"/>
      <id>8dcfab5371fd8414dbf3bd0e6fe7a1cf316df4b9:lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md</id>
      <updated>2024-07-25T21:41:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md b/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md
index 07100b6ad..dddacb944 100644
--- a/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md
+++ b/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md
@@ -18,7 +18,7 @@ C++23では、ワイド文字リテラルとして、以下を禁止する：
 ```cpp
 wchar_t a = L&amp;#39;🤦&amp;#39;; // C++20:OK, C++23:OK \U0001f926
 wchar_t b = L&amp;#39;ab&amp;#39;; // C++20:OK, C++23:NG マルチキャラクタリテラル
-wchar_t c = L&amp;#39;é́&amp;#39;;  // C++20:OK, C++23:NG \u0065\u0301
+wchar_t c = L&amp;#39;é&amp;#39;;  // C++20:OK, C++23:NG \u0065\u0301
 ```
 
 `wchar_t`はプラットフォームによって16ビットか32ビットのどちらかとなる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Kiterai</name>
        <email>7496490+Kiterai@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>1ワイド文字に収まらないワイド文字リテラルを禁止する [P2362R3] -- Update remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.html"/>
      <id>bf71e354c80718e23c67361e31b83a23d91eb184:lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md</id>
      <updated>2024-07-25T21:37:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md b/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md
index d983554ab..07100b6ad 100644
--- a/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md
+++ b/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md
@@ -16,9 +16,9 @@ C++23では、ワイド文字リテラルとして、以下を禁止する：
 - エンコード可能ではない、または複数文字を含む文字
 
 ```cpp
-wchar_t a = &amp;#39;🤦&amp;#39;; // C++20:OK, C++23:OK \U0001f926
-wchar_t b = &amp;#39;ab&amp;#39;; // C++20:OK, C++23:NG マルチキャラクタリテラル
-wchar_t c = &amp;#39;é́&amp;#39;;  // C++20:OK, C++23:NG \u0065\u0301
+wchar_t a = L&amp;#39;🤦&amp;#39;; // C++20:OK, C++23:OK \U0001f926
+wchar_t b = L&amp;#39;ab&amp;#39;; // C++20:OK, C++23:NG マルチキャラクタリテラル
+wchar_t c = L&amp;#39;é́&amp;#39;;  // C++20:OK, C++23:NG \u0065\u0301
 ```
 
 `wchar_t`はプラットフォームによって16ビットか32ビットのどちらかとなる。
@@ -31,4 +31,4 @@ wchar_t c = &amp;#39;é́&amp;#39;;  // C++20:OK, C++23:NG \u0065\u0301
 
 
 ## 参照
-- [P2362R3 Remove non-encodable wide character literals and multicharacter wide character literals](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2362r3.pdf)
\ No newline at end of file
+- [P2362R3 Remove non-encodable wide character literals and multicharacter wide character literals](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2362r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Kiterai</name>
        <email>7496490+Kiterai@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>apply_givens_rotation -- linalg : apply_givens_rotationに例を追加 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/apply_givens_rotation.html"/>
      <id>271535ed9d6e4e0041c66866fa0a3290122ac8f6:reference/linalg/apply_givens_rotation.md</id>
      <updated>2024-07-25T21:07:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/apply_givens_rotation.md b/reference/linalg/apply_givens_rotation.md
index 1e8d4ed20..409f6a594 100644
--- a/reference/linalg/apply_givens_rotation.md
+++ b/reference/linalg/apply_givens_rotation.md
@@ -98,9 +98,107 @@ $$
 
 
 ## 例
+**[注意] 処理系にあるコンパイラで確認していないため、間違っているかもしれません。**
+
+```cpp example
+#include &amp;lt;cmath&amp;gt;
+#include &amp;lt;complex&amp;gt;
+#include &amp;lt;initializer_list&amp;gt;
+#include &amp;lt;execution&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;linalg&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+template &amp;lt;class Vector&amp;gt;
+void print(Vector v) {
+  for (int i = 0; i &amp;lt; v.extent(0) - 1; ++i) {
+    std::cout &amp;lt;&amp;lt; v[i] &amp;lt;&amp;lt; &amp;#34;, &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; v[v.extent(0) - 1] &amp;lt;&amp;lt; std::endl;
+}
+
+int main()
+{
+  constexpr size_t N = 2;
+
+  using Complex = std::complex&amp;lt;double&amp;gt;;
+
+  {
+    std::initializer_list&amp;lt;double&amp;gt; a_coeff = {1, std::sqrt(3.0)};
+    std::initializer_list&amp;lt;double&amp;gt; b_coeff = {std::sqrt(3.0), -0.5};
+
+    std::vector&amp;lt;double&amp;gt; a_vec(a_coeff);
+    std::mdspan a(a_vec.data(), N);
+
+    std::vector&amp;lt;double&amp;gt; b_vec(b_coeff);
+    std::mdspan b(b_vec.data(), N);
+
+    double c = 0.5;
+    double s = -std::sqrt(3.0) / 2;
+
+    // (1)
+    std::linalg::apply_givens_rotation(a, b, c, s);
+    print(a);
+    print(b);
+
+    // (2)
+    // aとbを初期化
+    a_vec = a_coeff;
+    b_vec = b_coeff;
+    std::linalg::apply_givens_rotation(std::execution::par, a, b, c, s);
+    print(a);
+    print(b);
+  }
+
+  {
+    std::initializer_list&amp;lt;Complex&amp;gt; a_coeff = {Complex{1, 0}, Complex{std::sqrt(3.0), 0}};
+    std::initializer_list&amp;lt;Complex&amp;gt; b_coeff = {Complex{0, std::sqrt(3.0)}, Complex{0, -0.5}};
+
+    std::vector&amp;lt;Complex&amp;gt; a_vec(a_coeff);
+    std::mdspan a(a_vec.data(), N);
+
+    std::vector&amp;lt;Complex&amp;gt; b_vec(b_coeff);
+    std::mdspan b(b_vec.data(), N);
+
+    double  c = 0.5;
+    Complex s = Complex{0, -std::sqrt(3.0) / 2};
+
+    // (3)
+    std::linalg::apply_givens_rotation(a, b, c, s);
+    print(a);
+    print(b);
+
+    // (4)
+    // aとbを初期化
+    a_vec = a_coeff;
+    b_vec = b_coeff;
+    std::linalg::apply_givens_rotation(std::execution::par, a, b, c, s);
+    print(a);
+    print(b);
+  }
+
+  return 0;
+}
+```
+* std::linalg::apply_givens_rotation[color ff0000]
 
 
 ### 出力
+```
+(1)
+1, 0
+0, -1
+(2)
+1, 0
+0, -1
+(3)
+(1,0), (0,0)
+(0,0), (0,-1)
+(4)
+(1,0), (0,0)
+(0,0), (0,-1)
+```
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>setup_givens_rotation -- linalg : setup_givens_rotationの例を追加 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/setup_givens_rotation.html"/>
      <id>e5940e41345204a0f24b8a9663ae1e3ef2ef281a:reference/linalg/setup_givens_rotation.md</id>
      <updated>2024-07-24T11:56:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/setup_givens_rotation.md b/reference/linalg/setup_givens_rotation.md
index f91e11574..5bf834416 100644
--- a/reference/linalg/setup_givens_rotation.md
+++ b/reference/linalg/setup_givens_rotation.md
@@ -64,9 +64,51 @@ $$
 
 
 ## 例
+**[注意] 処理系にあるコンパイラで確認していないため、間違っているかもしれません。**
+
+```cpp example
+#include &amp;lt;cmath&amp;gt;
+#include &amp;lt;complex&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;linalg&amp;gt;
+
+template &amp;lt;class T&amp;gt;
+void print(const std::linalg::setup_givens_rotation_result&amp;lt;T&amp;gt;&amp;amp; result) {
+  std::cout &amp;lt;&amp;lt; &amp;#34;c: &amp;#34; &amp;lt;&amp;lt; result.c &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;
+            &amp;lt;&amp;lt; &amp;#34;s: &amp;#34; &amp;lt;&amp;lt; result.s &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;
+            &amp;lt;&amp;lt; &amp;#34;r: &amp;#34; &amp;lt;&amp;lt; result.r &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+
+int main()
+{
+  // (1)
+  std::cout &amp;lt;&amp;lt; &amp;#34;(1)\n&amp;#34;;
+  auto result1 = std::linalg::setup_givens_rotation(1.0, std::sqrt(3.0));
+  print(result1);
+
+  // (2)
+  std::cout &amp;lt;&amp;lt; &amp;#34;(2)\n&amp;#34;;
+  auto result2 = std::linalg::setup_givens_rotation(std::complex&amp;lt;double&amp;gt;(1.0, 0), std::complex&amp;lt;double&amp;gt;(0, std::sqrt(3.0)));
+  print(result2);
+
+  return 0;
+}
+```
+* std::linalg::setup_givens_rotation[link /reference/linalg/setup_givens_rotation.md]
+* std::linalg::setup_givens_rotation_result[link /reference/linalg/setup_givens_rotation_result.md]
 
 
 ### 出力
+```
+(1)
+c: 0.5
+s: -0.866025
+r: 2.0
+(2)
+c: 0.5
+s: (0,-0.866025)
+r: (2,0)
+```
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>setup_givens_rotation_result -- linalg : setup_givens_rotationの例を追加 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/setup_givens_rotation_result.html"/>
      <id>e5940e41345204a0f24b8a9663ae1e3ef2ef281a:reference/linalg/setup_givens_rotation_result.md</id>
      <updated>2024-07-24T11:56:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/setup_givens_rotation_result.md b/reference/linalg/setup_givens_rotation_result.md
index 5cd720420..9ed2ff37a 100644
--- a/reference/linalg/setup_givens_rotation_result.md
+++ b/reference/linalg/setup_givens_rotation_result.md
@@ -33,9 +33,7 @@ namespace std::linalg {
 
 
 ## 例
-
-
-### 出力
+[`setup_givens_rotation`](setup_givens_rotation.md)に記載。
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>utility -- Merge pull request #1303 from cpprefjp/fix-headline</title>
      <link href="https://cpprefjp.github.io/reference/utility.html"/>
      <id>ee9d0fd5477a983ff81a46f635c2ad97b41d87c1:reference/utility.md</id>
      <updated>2024-07-23T21:27:48+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;utility&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;utility&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;utility&amp;gt;&lt;/code&gt;ヘッダでは、その他のライブラリの至る所で使用される、幾つかの基本的な関数やクラステンプレートを定義する。&lt;/p&gt;
&lt;p&gt;このヘッダでは、以下の標準ヘッダをインクルードする：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;initializer_list.html&#34;&gt;&amp;lt;initializer_list&amp;gt;&lt;/a&gt;&lt;/code&gt; (C++11)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt; (C++20)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;演算子定義&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/rel_ops.html&#34;&gt;rel_ops&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関係演算子(namespace)&lt;/td&gt;
&lt;td&gt;C++20から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;値の入れ替え&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/swap.html&#34;&gt;swap&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;二つのオブジェクトの値を交換する(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/exchange.html&#34;&gt;exchange&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;値を書き換え、書き換え前の値を返す(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;転送と移動&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/forward.html&#34;&gt;forward&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数テンプレートの引数を転送する(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/forward_like.html&#34;&gt;forward_like&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;第一テンプレート引数の&lt;code&gt;const&lt;/code&gt;性と参照修飾で引数を転送する(function template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/move.html&#34;&gt;move&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左辺値を右辺値にキャストする(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/move_if_noexcept.html&#34;&gt;move_if_noexcept&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;例外を投げないオブジェクトをムーブする(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;型の修飾&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/as_const.html&#34;&gt;as_const&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左辺値参照を&lt;code&gt;const&lt;/code&gt;左辺値参照にする (function template)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;型の値&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/declval.html&#34;&gt;declval&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された型の値を得る(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;整数比較&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/cmp_equal.html&#34;&gt;cmp_equal&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等値比較 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/cmp_not_equal.html&#34;&gt;cmp_not_equal&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非等値比較 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/cmp_less.html&#34;&gt;cmp_less&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より小さいかを比較 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/cmp_less_equal.html&#34;&gt;cmp_less_equal&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺以下かを比較 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/cmp_greater.html&#34;&gt;cmp_greater&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より大きいかを比較 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/cmp_greater_equal.html&#34;&gt;cmp_greater_equal&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺以上かを比較 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/in_range.html&#34;&gt;in_range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;値が型のとりうる範囲内か判定する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;列挙型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/to_underlying.html&#34;&gt;to_underlying&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;列挙値を基底型に変換する (function template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;到達しない表明&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/unreachable.html&#34;&gt;unreachable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コードパス不到達を表明する (function)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;組&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;異なる型の二つの値の組(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/make_pair.html&#34;&gt;make_pair&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pair&lt;/code&gt;を構築するヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/piecewise_construct_t.html&#34;&gt;piecewise_construct_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pair&lt;/code&gt;や&lt;code&gt;tuple&lt;/code&gt;の要素型のコンストラクタ引数を直接受け取って構築するためのタグ型(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/piecewise_construct_t.html&#34;&gt;piecewise_construct&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pair&lt;/code&gt;や&lt;code&gt;tuple&lt;/code&gt;の要素型のコンストラクタ引数を直接受け取って構築するためのタグ値(constant variable)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;tuple&lt;/code&gt;型の先行宣言(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;直接構築&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/in_place_t.html&#34;&gt;in_place_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素型のコンストラクタ引数を直接受け取って構築するためのタグ型 (class)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/in_place_t.html&#34;&gt;in_place&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素型のコンストラクタ引数を直接受け取って構築するためのタグ値 (constant variable)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/in_place_type_t.html&#34;&gt;in_place_type_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定した要素型のコンストラクタ引数を直接受け取って構築するためのタグ型 (class)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/in_place_type_t.html&#34;&gt;in_place_type&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定した要素型のコンストラクタ引数を直接受け取って構築するためのタグ値 (constant variable)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/in_place_index_t.html&#34;&gt;in_place_index_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定位置にある要素型のコンストラクタ引数を直接受け取って構築するためのタグ型 (class)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/in_place_index_t.html&#34;&gt;in_place_index&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定位置にある要素型のコンストラクタ引数を直接受け取って構築するためのタグ値 (constant variable)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非型引数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/nontype_t.html&#34;&gt;nontype_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非型引数を表現するためのタグ型 (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/nontype_t.html&#34;&gt;nontype&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非型引数を表現するためのタグ値 (variable template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;コンパイル時の整数シーケンス&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/integer_sequence.html&#34;&gt;integer_sequence&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意の整数型のシーケンス(class template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/make_integer_sequence.html&#34;&gt;make_integer_sequence&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素数を指定して、0から始まる整数シーケンスを生成する(type-alias)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/index_sequence.html&#34;&gt;index_sequence&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;size_t&lt;/code&gt;型の整数シーケンス(class template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/make_index_sequence.html&#34;&gt;make_index_sequence&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素数を指定して、0から始まる&lt;code&gt;size_t&lt;/code&gt;型整数シーケンスを生成する(type-alias)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/index_sequence_for.html&#34;&gt;index_sequence_for&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型のシーケンスを、0から始まる&lt;code&gt;size_t&lt;/code&gt;型整数シーケンスに変換する(type-alias)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2051r0.html&#34; target=&#34;_blank&#34;&gt;P2051R0 C++ Standard Library Issues to be moved in Prague&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>KASUYA Rei</name>
        <email>reikasuya727@gmail.com</email>
      </author>
    </entry>
  
</feed>
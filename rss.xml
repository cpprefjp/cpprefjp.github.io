<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-01-20T09:43:45.917782</updated>
  <id>bb69b02b-41a0-4cc5-b1e5-5b86ec87a68c</id>

  
    <entry>
      <title>format -- formatter : parseを追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>c7b073edbaacae8d096596221e3f4b25f6c98362:reference/format/format.md</id>
      <updated>2023-01-20T18:39:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index 50e023e2f..e0b6d8095 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -63,7 +63,7 @@ string s2 = format(&amp;#34;{0} {}&amp;#34;,  &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // コンパイルエラー
 string s3 = format(&amp;#34;{} {1}&amp;#34;,  &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // コンパイルエラー
 ```
 
-### 標準のオプション書式
+### &amp;lt;a id=&amp;#34;std-format-options&amp;#34; href=&amp;#34;#std-format-options&amp;#34;&amp;gt;標準のオプション書式&amp;lt;/a&amp;gt;
 
 組み込みの型に対して使える標準のオプション書式は次の通り(`[]`は省略可の意味)。
 基本的に`printf`の書式を踏襲しているが、あくまでもオプションであり、省略しても`&amp;lt;iostream&amp;gt;`と同じようにデフォルトの書式が使われる。
@@ -141,7 +141,7 @@ string s3 = format(&amp;#34;{} {1}&amp;#34;,  &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // コンパイルエラー
 
 ポインタは`void*`のみサポートする。それ以外のポインタは、`void*`にキャストしなければ出力できない。
 
-#### Range・シーケンスコンテナの場合 (C++23)
+#### &amp;lt;a id=&amp;#34;range-format-options&amp;#34; href=&amp;#34;#range-format-options&amp;#34;&amp;gt;Range・シーケンスコンテナの書式 (C++23)&amp;lt;/a&amp;gt;
 
 Range・シーケンスコンテナに対して使用できる標準のオプション書式は次の通り(`[]`は省略可の意味)。
 
@@ -172,12 +172,12 @@ Range・シーケンスコンテナに対して使用できる標準のオプシ
     - 要素型の書式を指定して、デバッグ出力指定をしなければ、デフォルトで有効になっているデバッグ出力を解除できる
 
 
-#### 連想コンテナの場合 (C++23)
+#### 連想コンテナの書式 (C++23)
 
 Range・シーケンスコンテナと同じだが、デフォルトで`m`書式を適用する。
 
 
-#### pair、tuple (C++23)
+#### &amp;lt;a id=&amp;#34;tuple-format-options&amp;#34; name=&amp;#34;tuple-format-options&amp;#34;&amp;gt;pair、tupleの書式 (C++23)&amp;lt;/a&amp;gt;
 
 [`std::pair`](/reference/utility/pair.md)と[`std::tuple`](/reference/tuple/tuple.md)に対して使用できる標準のオプション書式は次の通り(`[]`は省略可の意味)。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- formatter : parseを追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter.html"/>
      <id>c7b073edbaacae8d096596221e3f4b25f6c98362:reference/format/formatter.md</id>
      <updated>2023-01-20T18:39:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter.md b/reference/format/formatter.md
index 5d167a515..2616e0148 100644
--- a/reference/format/formatter.md
+++ b/reference/format/formatter.md
@@ -108,7 +108,7 @@ namespace std {
 
 | メンバ関数 | 説明 | 対応バージョン |
 |------------|------|----------------|
-| [`parse`](formatter/parse.md.nolink)   | 書式の解析を行う | C++20 |
+| [`parse`](formatter/parse.md)   | 書式の解析を行う | C++20 |
 | [`format`](formatter/format.md.nolink) | 書式化を行う | C++20 |
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>parse -- formatter : parseを追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter/parse.html"/>
      <id>c7b073edbaacae8d096596221e3f4b25f6c98362:reference/format/formatter/parse.md</id>
      <updated>2023-01-20T18:39:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter/parse.md b/reference/format/formatter/parse.md
new file mode 100644
index 000000000..65441609e
--- /dev/null
+++ b/reference/format/formatter/parse.md
@@ -0,0 +1,44 @@
+# parse
+* format[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* formatter[meta class]
+* cpp20[meta cpp]
+
+```cpp
+template &amp;lt;class ParseContext&amp;gt;
+constexpr typename ParseContext::iterator
+  parse(ParseContext&amp;amp; ctx);
+```
+* ParseContext[link /reference/format/basic_format_parse_context.md]
+
+## 概要
+書式文字列の範囲`[ctx.begin(), ctx.end())`を解析する。
+
+
+## 効果
+- デフォルトの`formatter`の場合、[`std::format()`](/reference/format/format.md)関数ページに記載されている「[標準のオプション書式](/reference/format/format.md#std-format-options)」を解析する
+- [`std::pair`](/reference/utility/pair.md)と[`std::tuple`](/reference/tuple/tuple.md)に対する`formatter`の特殊化の場合、[`std::format()`](/reference/format/format.md)関数ページに記載されている「[pair、tupleの書式](/reference/format/format.md#tuple-format-options)」を解析する
+    - このとき、書式によって以下を設定する
+        - 全体の囲み文字を、[`set_brackets()`](set_brackets.md.nolink)メンバ関数で設定する
+        - 要素の区切り文字を、[`set_separator()`](set_separator.md.nolink)メンバ関数で設定する
+        - 各要素の`formatter`を`e`として、[`e.set_debug_format()`](set_debug_format.md.nolink)が有効な式であれば、それを呼び出してデバッグ書式を有効にする
+
+
+## 戻り値
+解析がおわった書式文字列の終端を指すイテレータを返す。
+
+
+## 備考
+- pair / tupleが文字・文字列を要素とする場合、デバッグ書式は常に有効となり、無効にする方法はない
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13
+- [Visual C++](/implementation.md#visual_cpp): ??
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>はじめてのコントリビュート -- 編集タスクを、start_editing.mdの下の方に記載した (#1104)</title>
      <link href="https://cpprefjp.github.io/start_editing.html"/>
      <id>c5c2b70b56b6b6f805049ca80c7772d432bfc408:start_editing.md</id>
      <updated>2023-01-20T17:03:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing.md b/start_editing.md
index c9451680d..ca3154441 100644
--- a/start_editing.md
+++ b/start_editing.md
@@ -1,4 +1,4 @@
-# cpprefjpを編集するには
+# はじめてのコントリビュート
 
 本cpprefjpサイトは、GitHub Pagesのサービス上に構築されていますが、編集自体はGitHubリポジトリにあるMarkdown形式のプレーンテキストで行います。
 
@@ -54,64 +54,56 @@ Markdownは、GitHubサービス上でドキュメントを記述するフォー
 
 Markdownの記述方法をわかりやすく解説してくれているWebサイトは、すでに数多く存在しますので、詳細はそちらを参照してください。
 
-* [Markdown記法 チートシート](http://qiita.com/Qiita/items/c686397e4a0f4f11683d)
-* [文章作成やメモ書きにも便利、Markdown記法](http://kojika17.com/2013/01/starting-markdown.html)
+- [Markdown記法 チートシート](http://qiita.com/Qiita/items/c686397e4a0f4f11683d)
+- [文章作成やメモ書きにも便利、Markdown記法](http://kojika17.com/2013/01/starting-markdown.html)
 
 ただし、cpprefjp特有の拡張構文もあります。
 以下のページにまとめてあるので、そちらを参照して下さい。
 
-* [cpprefjp特有の拡張構文](/start_editing/specialized.md)
+- [cpprefjp特有の拡張構文](/start_editing/specialized.md)
 
 Markdown形式では、HTMLのタグも併用できますが、cpprefjpサイトでは積極的にはHTMLタグを使用しない方針です。できるだけ、Markdown形式でできる範囲内で解決するようにしてください。
 
 ただし、注釈・出典を貼るためにHTMLタグを利用します。
 
-* [cpprefjpにおける注釈・出典の貼り方](/start_editing/cite_note_ref.md)
+- [cpprefjpにおける注釈・出典の貼り方](/start_editing/cite_note_ref.md)
 
 それ以外に本サイト内で使用しているHTMLタグは以下です：
 
-* アンカーを貼るために、`&amp;lt;a id=&amp;#34;アンカー名&amp;#34;&amp;gt;対象文字列&amp;lt;/a&amp;gt;`のようなHTML5に基づく記法を利用している
-* 表内での改行のために、`&amp;lt;br/&amp;gt;`タグを利用している
-* 値の大きさを表現するために、上付き文字を表す`&amp;lt;sup&amp;gt;`タグを利用している
-* 添字を表現するために、下付き文字を表す`&amp;lt;sub&amp;gt;`タグを利用している
+- アンカーを貼るために、`&amp;lt;a id=&amp;#34;アンカー名&amp;#34;&amp;gt;対象文字列&amp;lt;/a&amp;gt;`のようなHTML5に基づく記法を利用している
+- 表内での改行のために、`&amp;lt;br/&amp;gt;`タグを利用している
+- 値の大きさを表現するために、上付き文字を表す`&amp;lt;sup&amp;gt;`タグを利用している
+- 添字を表現するために、下付き文字を表す`&amp;lt;sub&amp;gt;`タグを利用している
 
 また、Markdownパーサーの制限を回避し、表内で `|` (縦線、vertical line) を使用するために、文字参照 `&amp;amp;#x7C;` を使用してます。
 
 新規リファレンスを書くにあたって、雛形ページを用意していますので、そちらをベースにして編集作業を行ってください。
 
-* [ヘッダファイルトップページの雛形](/start_editing/header_template_page.md)
-* [関数の雛形](/start_editing/function_template_page.md)
-* [クラスの雛形](/start_editing/class_template_page.md)
-* [型の別名の雛形](/start_editing/type-type_template_page.md)
+- [言語機能の雛形](/start_editing/lang_template_page.md)
+- [ヘッダファイルページの雛形](/start_editing/header_template_page.md)
+- [モジュールページの雛形](/start_editing/module_template_page.md)
+- [関数の雛形](/start_editing/function_template_page.md)
+- [クラスの雛形](/start_editing/class_template_page.md)
+- [型の別名の雛形](/start_editing/type-type_template_page.md)
+- [コンセプトの雛形](/start_editing/concept_template_page.md)
+- [名前付き要件の雛形](/start_editing/named_requirement_template_page.md)
+- [比較演算子の雛形](/start_editing/comparison_operator_template_page.md)
+- [CPOの雛形](/start_editing/cpo_template_page.md)
 
 また、リポジトリのトップディレクトリに`GLOBAL_QUALIFY_LIST.txt`というファイルがあります。サイト全体のコードブロックに対して適用したい識別子の修飾があれば、ここに列挙していきます。書き方は各雛形ページに書いてあるコードブロックの修飾と同じです。
 
 
 ## 初めての人は見ておいたほうがよいページ
 
-* [処理系](/implementation.md) 処理系の正式な定義があります
-* [進行状況](https://github.com/cpprefjp/site/wiki/progress) リファレンス作成の進行状況が確認できます
-* [スタイル](/working_style.md) 作業を行う上でのスタイルの定義と、訳語があります
+- [処理系](/implementation.md) 処理系の正式な定義があります
+- [進行状況](https://github.com/cpprefjp/site/wiki/progress) リファレンス作成の進行状況が確認できます
+- [スタイル](/working_style.md) 作業を行う上でのスタイルの定義と、訳語があります
 
 
 ## その他、cpprefjpを編集するにあたってのドキュメント
 
-* [ページファイル名の付け方](/start_editing/page_names.md)
-* [乱数分布の図を作る方法](/start_editing/random_figure.md)
-
-
-## 次期C++バージョンへの対応方針と作業方法
-C++の次のバージョンで入ることが決まった機能については、以下の方針で対応を行います。
-
-- 次のバージョンの言語機能・ライブラリ機能の解説は、随時許可する
-- ただし、Working Draftに採択された機能のみを対象とする。まだ提案中の機能は、本サイトでの解説の対象外とする
-    - 例外は、機能テストマクロのようなコンパイラへの推奨機能
-- 採択された機能は、[C++ Standards Committee Papers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/)のEditor&amp;#39;s Reportで確認できる
-- 次のC++バージョンに採択された機能は、本リポジトリのWikiページに随時記載しているので、対応状況を含めてそちらを確認すること
-
-
-## 本サイトのタスクを確認するには
-本サイトで書くことが決まっているタスクを確認するには、issueを参照してください。「TASK」ラベルが付いているもので、担当者がついていないものがあれば、ぜひとも引き取ってください。
+- [ページファイル名の付け方](/start_editing/page_names.md)
+- [乱数分布の図を作る方法](/start_editing/random_figure.md)
 
 
 ## Pull Requestのレビューとマージ
@@ -138,3 +130,110 @@ Pull Requestのレビューが滞っていた場合、Pull Requestの提出者
     - `git push -f`や`git push --force`といったコマンドは、リポジトリの設定で、masterブランチに対してはできないようにしてあります。これは、masterブランチは壊してはならないという理由によるものです
     - masterブランチ以外には強制プッシュできますので、Pull Request用のトピックブランチのコミットを整理する、といった目的などで使用していただいて大丈夫です
 
+
+## 求められる編集作業
+### 誤字・脱字を修正する (難易度★)
+本サイトは編集者が手入力で解説を書いているため、誤字・脱字はどうしても発生してしまいます。
+
+誤字・脱字があったら、積極的に修正してください。
+
+
+### 動作確認できたコンパイラバージョンを記載する (難易度★★)
+本サイトのライブラリリファレンスでは、機能ごとに動作確認ができたコンパイラバージョンを記載しています。
+
+各ページを書いた時点での動作確認できたコンパイラバージョンは記載していますが、その後の更新は十分に行えていません。
+
+サンプルコードの下に以下のように動作確認できたコンパイラバージョンを記載する項目がありますので、「??」になっている項目がありましたら、動作確認して埋めていっていただきたいです。
+
+```
+## 処理系
+### バージョン
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 1
+```
+
+バージョンの表記としては、とくにVisual C++は本サイト独自の表記法がありますので、以下のページを確認してください。
+
+- [処理系](implementation.md)
+
+対応バージョンは、動作確認できたコンパイラのうち、最小のバージョンを知りたいので、記載されているものより古いコンパイラバージョンで動作確認ができた場合は、記載されているバージョンを修正してください。
+
+動作確認の方法としては、対象ページのサンプルコードを、お手元のコンパイラでコンパイル・実行し、出力が記載されているものと一致しているかを確認してください。
+
+ただし、「出力例」のように記載されている場合、プラットフォームごとに出力が異なる可能性があります。その場合は仕様と実装を確認していただく必要があるかもしれません。
+
+動作確認は、Webブラウザ上で行える場合があります。オンラインコンパイラとして、以下のサービスの使用も検討してください。
+
+- [Wandbox](https://wandbox.org/)
+- [Compiler Explorer](https://godbolt.org/)
+
+
+### 関連項目を追加する  (難易度★★★)
+各ページには、「`## 関連項目`」という見出し以下に本サイト内の関連ページを記載できます。
+
+読者が関連する情報を追いやすいように、関連ページへのリンク追加をお願いしたいです。
+
+関連項目としては、以下のようなものを記載します：
+
+- 言語機能であれば、その機能への仕様変更・拡張など
+- ライブラリであれば、
+    - 組み合わせて使うことが多いもの
+    - 特定のデータ構造に特化した関数と、汎用の関数
+    - その機能の代わりに使用を検討したほうがよいもの
+
+関連項目を書く場所については、各雛形ページを参照してください。
+
+- [言語機能の雛形](/start_editing/lang_template_page.md)
+- [ヘッダファイルページの雛形](/start_editing/header_template_page.md)
+- [モジュールページの雛形](/start_editing/module_template_page.md)
+- [関数の雛形](/start_editing/function_template_page.md)
+- [クラスの雛形](/start_editing/class_template_page.md)
+- [型の別名の雛形](/start_editing/type-type_template_page.md)
+- [コンセプトの雛形](/start_editing/concept_template_page.md)
+- [名前付き要件の雛形](/start_editing/named_requirement_template_page.md)
+- [比較演算子の雛形](/start_editing/comparison_operator_template_page.md)
+- [CPOの雛形](/start_editing/cpo_template_page.md)
+
+
+### サンプルコードを追加する (難易度★★★★)
+本サイトは、すべての機能にひとつ以上のサンプルコードを付けることを大きな価値としています。
+
+サンプルコードをひとつは (ほぼ) 必ず付けるようにしていますが、ユースケースをカバーできていない場合があります。
+
+良質なサンプルコードを作ることはむずかしいですが、機能の有用性を説明する最小サンプルコードを書くことに慣れている方や挑戦したい方にお願いしたいです。
+
+サンプルコードを追加する場合、以下の要件を満たすようお願いします：
+
+1. 既存サンプルコードとは異なるユースケースや、異なる観点を与えるものであること
+2. 標準の範囲内でその機能の有用性を説明しにくい場合を除き、プラットフォーム非依存であること
+3. 十分に小さいこと
+
+
+### 新仕様に対応する (難易度★★★★★★)
+C++の規格書を読み慣れている方向けになります。
+
+C++の新仕様やCWG/LWGのissueへの対応作業が多く求められます。対応がまだ行われていない作業は、以下で確認できます。
+
+- [cpprefjp/siteリポジトリのタスクissue](https://github.com/cpprefjp/site/issues)
+    - 担当をとりやすいようタスクissueにしているものがある
+- [cpprefjp/siteリポジトリのWiki](https://github.com/cpprefjp/site/wiki)
+    - CWG (Core Working Group) や LWG (Library Working Group) へのissue (Defect Report) など、タスクissueにしていない未対応タスクがすべて記載されている
+
+C++の次のバージョンで入ることが決まった機能については、以下の方針で対応を行います。
+
+- 次のバージョンの言語機能・ライブラリ機能の解説は、随時許可する
+- ただし、Working Draftに採択された機能のみを対象とする。まだ提案中の機能は、本サイトでの解説の対象外とする
+    - 例外は、機能テストマクロのようなコンパイラへの推奨機能
+- 採択された機能は、Wikiの各言語バージョンのページに記載されているが、されていなかったら[C++ Standards Committee Papers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/)のEditor&amp;#39;s Reportで確認できる
+
+
+### 優先度が低くなっている古くからある機能を記載する (難易度★★★★★★)
+本サイトはなるべくすべての機能の解説を書くことを目標にしてはいますが、記載が追いついていないものがいくつかあります。
+
+- iostream系
+- C互換ライブラリ
+- ロケール
+
+これらはタスクissueにもできていませんが、手が足りず作業できていません。
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- formatter : C++23仕様に対応し、サンプルコードのコンパイルエラーを修正 (constが抜けてた) #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter.html"/>
      <id>53880060961c5a4400ef61ee610bd6077224c070:reference/format/formatter.md</id>
      <updated>2023-01-20T16:51:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter.md b/reference/format/formatter.md
index e40791996..5d167a515 100644
--- a/reference/format/formatter.md
+++ b/reference/format/formatter.md
@@ -7,15 +7,34 @@
 
 ```cpp
 namespace std {
-  template&amp;lt;class T, class U = char&amp;gt;
-  struct formatter;
+  template &amp;lt;class T, class U = char&amp;gt;
+  struct formatter;                                          // (1) C++20
+
+  template &amp;lt;ranges::input_range R, class charT&amp;gt;
+    requires (format_kind&amp;lt;R&amp;gt; != range_format::disabled) &amp;amp;&amp;amp;
+             formattable&amp;lt;ranges::range_reference_t&amp;lt;R&amp;gt;, charT&amp;gt;
+  struct formatter&amp;lt;R, charT&amp;gt;
+    : range-default-formatter&amp;lt;format_kind&amp;lt;R&amp;gt;, R, charT&amp;gt; { }; // (2) C++23
+
+  template &amp;lt;class charT, formattable&amp;lt;charT&amp;gt;... Ts&amp;gt;
+  struct formatter&amp;lt;pair-or-tuple&amp;lt;Ts...&amp;gt;, charT&amp;gt;;             // (3) C++23
 }
 ```
+* ranges::input_range[link /reference/ranges/input_range.md]
+* format_kind[link format_kind.md]
+* range_format[link range_format.md]
+* formattable[link formattable.md]
+* ranges::range_reference_t[link /reference/ranges/range_reference_t.md]
+* range-default-formatter[link range-default-formatter.md.nolink]
 
 ## 概要
 フォーマット引数の個々の型に対応する書式文字列の解析と値のフォーマットを担うクラス。
 
-`charT`を`char`または`wchar_t`とすると、標準で以下の特殊化が利用できる。
+- (1) : デフォルトのフォーマット
+- (2) : Range用のフォーマット。実装は[`range-default-formatter`](range-default-formatter.md.nolink)クラスが行う
+- (3) : [`std::pair`](/reference/utility/pair.md)と[`std::tuple`](/reference/tuple/tuple.md)に対する特殊化
+
+(1)は、`charT`を`char`または`wchar_t`とすると、標準で以下の特殊化が利用できる。
 
 - 1 以下のもの。
     ```cpp
@@ -46,43 +65,67 @@ namespace std {
 
 ワイド文字列とマルチバイト文字列を相互に変換するような特殊化は意図的に用意されていないが、ユーザーが用意することは禁止していない。
 
-## Formatter要件
+## ユーザーの型で`formatter`を特殊化する場合の要件
 
 `formatter`の有効な特殊化はFormatter要件を満たす必要がある。
 
 型`F`がFormatter要件を満たすとは、次のことをいう。
 
-* `F`は`Cpp17DefaultConstructible`、`Cpp17CopyConstructible`、`Cpp17CopyAssignable`、`Cpp17Destructible`であること
+- `F`は`Cpp17DefaultConstructible`、`Cpp17CopyConstructible`、`Cpp17CopyAssignable`、`Cpp17Destructible`であること
 
 さらに、以下の条件を満たすこと
 
 1. 式 `f.parse(pc)` が有効であり、
-    * 戻り値の型が`PC::iterator`である
-    * イテレータ範囲`[pc.begin(), pc.end())`を解析して`format_error`を投げるか、解析が終わった位置を指すイテレータを返す
+    - 戻り値の型が`PC::iterator`である
+    - イテレータ範囲`[pc.begin(), pc.end())`を解析して`format_error`を投げるか、解析が終わった位置を指すイテレータを返す
 2. 式 `f.format(t, fc)` が有効であり、
-    * 戻り値の型が`FC::iterator`である
-    * フォーマット結果を`fc.out()`へ出力し、出力後のイテレータを返す
-    * 出力は`t`、`fc.locale()`、最後に呼び出された`f.parse(pc)`のイテレータ範囲`[pc.begin(), pc.end())`以外に依存しない
+    - 戻り値の型が`FC::iterator`である
+    - フォーマット結果を`fc.out()`へ出力し、出力後のイテレータを返す
+    - 出力は`t`、`fc.locale()`、最後に呼び出された`f.parse(pc)`のイテレータ範囲`[pc.begin(), pc.end())`以外に依存しない
 3. 式 `f.format(u, fc)` が有効であり、
-    * 戻り値が`FC::iterator`である
-    * フォーマット結果を`fc.out()`へ出力し、出力後のイテレータを返す
-    * 出力は`u`、`fc.locale()`、最後に呼び出された`f.parse(pc)`のイテレータ範囲`[pc.begin(), pc.end())`以外に依存しない
-    * `u`を変更しない
+    - 戻り値が`FC::iterator`である
+    - フォーマット結果を`fc.out()`へ出力し、出力後のイテレータを返す
+    - 出力は`u`、`fc.locale()`、最後に呼び出された`f.parse(pc)`のイテレータ範囲`[pc.begin(), pc.end())`以外に依存しない
+    - `u`を変更しない
 
 条件内の各要素を、以下のように定義する
 
-* 文字の型を`charT`
-* 出力イテレータの型を`Out`
-* フォーマット引数の型を`T`
-* `f`を`F`のオブジェクト
-* `u`を`T`のlvalue
-* `t`を`T`または`const T`へ変換できる型のオブジェクト
-* `PC`を`basic_format_parse_context&amp;lt;charT&amp;gt;`
-* `FC`を`basic_format_context&amp;lt;Out, charT&amp;gt;`
-* `pc`を`PC`のlvalue
-* `fc`を`FC`のlvalue
-* `pc.begin()`は書式文字列中の対応する置換フィールドのオプションの先頭を指す
-* オプションが空なら、`pc.begin() == pc.end()`または`*pc.begin() == &amp;#39;}&amp;#39;`である
+- 文字の型を`charT`
+- 出力イテレータの型を`Out`
+- フォーマット引数の型を`T`
+- `f`を`F`のオブジェクト
+- `u`を`T`のlvalue
+- `t`を`T`または`const T`へ変換できる型のオブジェクト
+- `PC`を[`basic_format_parse_context`](basic_format_parse_context.md)`&amp;lt;charT&amp;gt;`
+- `FC`を[`basic_format_context`](basic_format_context.md)`&amp;lt;Out, charT&amp;gt;`
+- `pc`を`PC`のlvalue
+- `fc`を`FC`のlvalue
+- `pc.begin()`は書式文字列中の対応する置換フィールドのオプションの先頭を指す
+- オプションが空なら、`pc.begin() == pc.end()`または`*pc.begin() == &amp;#39;}&amp;#39;`である
+
+
+## メンバ関数
+
+| メンバ関数 | 説明 | 対応バージョン |
+|------------|------|----------------|
+| [`parse`](formatter/parse.md.nolink)   | 書式の解析を行う | C++20 |
+| [`format`](formatter/format.md.nolink) | 書式化を行う | C++20 |
+
+
+### 文字・文字列に対する特殊化
+
+| メンバ関数 | 説明 | 対応バージョン |
+|------------|------|----------------|
+| [`set_debug_format`](formatter/set_debug_format.md.nolink) | デバッグ書式を有効にする | C++23 |
+
+
+### pair / tuple向けの特殊化
+
+| メンバ関数 | 説明 | 対応バージョン |
+|------------|------|----------------|
+| [`set_separator`](formatter/set_separator.md.nolink) | 要素の区切り文字を設定する | C++23 |
+| [`set_brackets`](formatter/set_brackets.md.nolink)   | 全体の囲み文字を設定する | C++23 |
+
 
 ## 例
 ```cpp example
@@ -93,15 +136,15 @@ enum color { red, green, blue };
 
 const char* color_names[] = { &amp;#34;red&amp;#34;, &amp;#34;green&amp;#34;, &amp;#34;blue&amp;#34; };
 
-template&amp;lt;&amp;gt; struct std::formatter&amp;lt;color&amp;gt; : std::formatter&amp;lt;const char*&amp;gt; {
-  auto format(color c, format_context&amp;amp; ctx) {
-    return formatter&amp;lt;const char*&amp;gt;::format(color_names[c], ctx);
+template&amp;lt;&amp;gt;
+struct std::formatter&amp;lt;color&amp;gt; : std::formatter&amp;lt;const char*&amp;gt; {
+  auto format(color c, std::format_context&amp;amp; ctx) const {
+    return std::formatter&amp;lt;const char*&amp;gt;::format(color_names[c], ctx);
   }
 };
 
 int main()
 {
-  int variable = 0;
   std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{}&amp;#34;, red) &amp;lt;&amp;lt; std::endl;
 }
 ```
@@ -117,11 +160,13 @@ red
 
 ### 処理系
 - [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): ??
+- [GCC](/implementation.md#gcc): 13
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 ## 参照
-
-* [P0645R10 Text Formatting](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html)
-* [{fmt}](https://github.com/fmtlib/fmt)
+- [P0645R10 Text Formatting](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html)
+- [{fmt}](https://github.com/fmtlib/fmt)
+- [P2286R8 Formatting Ranges](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2286r8.html)
+- [P2585R1 Improve default container formatting](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2585r1.html)
+    - C++23から、Range・コンテナ、`pair`、`tuple`のフォーマット出力、および文字・文字列のデバッグ指定 (`&amp;#34;?&amp;#34;`) が追加された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iterator -- Fix typo</title>
      <link href="https://cpprefjp.github.io/reference/ranges/repeat_view/iterator.html"/>
      <id>8d68f98f82d54011721eac4667dd508b81c457ac:reference/ranges/repeat_view/iterator.md</id>
      <updated>2023-01-20T00:26:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/repeat_view/iterator.md b/reference/ranges/repeat_view/iterator.md
index 45f671b71..8116fd500 100644
--- a/reference/ranges/repeat_view/iterator.md
+++ b/reference/ranges/repeat_view/iterator.md
@@ -24,7 +24,7 @@ namespace std::ranges {
   class repeat_view&amp;lt;T, Bound&amp;gt;::iterator {
   private:
     using index_type = conditional_t&amp;lt;same_as&amp;lt;Bound, unreachable_sentinel_t&amp;gt;, ptrdiff_t, Bound&amp;gt;;
-    const T* value_ = nullptr;P
+    const T* value_ = nullptr;
     index_type current_ = index_type();
 
     constexpr explicit iterator(const T* value, index_type b = index_type())
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iterator -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/repeat_view/iterator.html"/>
      <id>8b51996ff3b9a4b68106d943313e89569da65069:reference/ranges/repeat_view/iterator.md</id>
      <updated>2023-01-19T23:48:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/repeat_view/iterator.md b/reference/ranges/repeat_view/iterator.md
index 69b53a5a0..45f671b71 100644
--- a/reference/ranges/repeat_view/iterator.md
+++ b/reference/ranges/repeat_view/iterator.md
@@ -114,7 +114,7 @@ namespace std::ranges {
 * is-integer-like[link /reference/iterator/is_integer_like.md]
 * repeat_view[link ../repeat_view.md]
 * conditional_t[link /reference/type_traits/conditional.md]
-* ptrdiff_t[link /reference/stddef/ptrdiff_t.md]
+* ptrdiff_t[link /reference/cstddef/ptrdiff_t.md]
 * random_access_iterator_tag[link /reference/iterator/iterator_tag.md]
 * is-signed-integer-like[link /reference/iterator/is_integer_like.md]
 * iota_diff_t[link /reference/ranges/iota_view/iota_diff_t.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
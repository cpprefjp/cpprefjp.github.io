<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-10-11T08:09:00.284495</updated>
  <id>027978a7-c228-4961-ad00-12994aad5d45</id>

  
    <entry>
      <title>iter_move -- Update iter_move.md</title>
      <link href="https://cpprefjp.github.io/reference/iterator/iter_move.html"/>
      <id>9f38e7048f0427a090448602b5ebf3edea72f12a:reference/iterator/iter_move.md</id>
      <updated>2022-10-11T17:04:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/iter_move.md b/reference/iterator/iter_move.md
index 8556f47f1..f77ff7ec7 100644
--- a/reference/iterator/iter_move.md
+++ b/reference/iterator/iter_move.md
@@ -61,7 +61,15 @@ namespace std {
 2. --
 3. --
 
+
+## 備考
+
+一見するとこのCPOは冗長であるように見えるが、イテレータ`i`についての`*i`の結果が*prvalue*を返す（イテレータの要素型`T`のオブジェクトをそのまま返す）場合に不要なキャストを回避することでより効率的なムーブ（[コピー省略](/lang/cpp17/guaranteed_copy_elision.md)による直接構築）を行うことができる。
+
+イテレータを利用したジェネリックなアルゴリズムの実装においてイテレータの要素をムーブする必要がある場合には、`std::move(*i)`のようなコードを直接書くよりもこのCPOを使用したほうがより効率的になりうる。
+
 ## 例
+
 ```cpp example
 #include &amp;lt;iterator&amp;gt;
 #include &amp;lt;vector&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- fix variable name v -&gt; d in order to avoid autolink to vector&#39;s begin page</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/begin.html"/>
      <id>76f166004831bae7d3a2c7958bdc623eb16bf1bc:reference/deque/deque/begin.md</id>
      <updated>2022-10-10T15:58:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/begin.md b/reference/deque/deque/begin.md
index 1cad2593a..cbabb51d8 100644
--- a/reference/deque/deque/begin.md
+++ b/reference/deque/deque/begin.md
@@ -33,11 +33,11 @@ const_iterator begin() const noexcept;
 
 int main()
 {
-  std::deque&amp;lt;int&amp;gt; v = {1, 2, 3};
-  const std::deque&amp;lt;int&amp;gt;&amp;amp; cv = v;
+  std::deque&amp;lt;int&amp;gt; d = {1, 2, 3};
+  const std::deque&amp;lt;int&amp;gt;&amp;amp; cd = d;
 
-  decltype(v)::iterator i = v.begin();
-  decltype(v)::const_iterator ci = cv.begin();
+  decltype(d)::iterator i = d.begin();
+  decltype(d)::const_iterator ci = cd.begin();
 
   std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; std::endl;
   std::cout &amp;lt;&amp;lt; *ci &amp;lt;&amp;lt; std::endl;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>enable_view -- bit_or (|) を or (||) に修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/enable_view.html"/>
      <id>34c194d100887fac38d259b97623aa4150e49ea5:reference/ranges/enable_view.md</id>
      <updated>2022-10-08T13:02:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/enable_view.md b/reference/ranges/enable_view.md
index 88acefd57..db48f1175 100644
--- a/reference/ranges/enable_view.md
+++ b/reference/ranges/enable_view.md
@@ -7,7 +7,7 @@
 ```cpp
 namespace std::ranges {
   template&amp;lt;class T&amp;gt;
-  inline constexpr bool enable_view = derived_from&amp;lt;T, view_base&amp;gt; | is-derived-from-view-interface&amp;lt;T&amp;gt;;
+  inline constexpr bool enable_view = derived_from&amp;lt;T, view_base&amp;gt; || is-derived-from-view-interface&amp;lt;T&amp;gt;;
 }
 ```
 * derived_from[link /reference/concepts/derived_from.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>acd1034</name>
        <email>48613285+acd1034@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非型テンプレートパラメータとしてクラス型を許可する -- C++20 非型テンプレートパラメータとしてクラス型を許可する : vectorとstringのオブジェクトをテンプレート引数に指定できないことを記載</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/class_types_in_non-type_template_parameters.html"/>
      <id>ba6eb366127f45ba115aced7a5478abb1d144794:lang/cpp20/class_types_in_non-type_template_parameters.md</id>
      <updated>2022-10-06T18:32:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/class_types_in_non-type_template_parameters.md b/lang/cpp20/class_types_in_non-type_template_parameters.md
index 3b1c75178..c44d566f7 100644
--- a/lang/cpp20/class_types_in_non-type_template_parameters.md
+++ b/lang/cpp20/class_types_in_non-type_template_parameters.md
@@ -30,6 +30,11 @@ C++11以降での[汎用的な定数式`constexpr`](/lang/cpp11/constexpr.md)の
     - すべての基本クラスと非静的メンバ変数が構造的型もしくはその (多次元) 配列である
 
 
+## 備考
+- C++20では[`std::vector`](/reference/vector/vector.md)および[`std::basic_string`](/reference/string/basic_string.md)を定数式内で使用できるようになるが、これらの型はC++20時点では構造的型に分類されないため、そのオブジェクトをテンプレート引数として渡すことはできない
+    - [C++20 可変サイズをもつコンテナのconstexpr化](more_constexpr_containers.md)
+
+
 ## 例
 ```cpp example
 #include &amp;lt;utility&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_string -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string.md b/reference/string/basic_string.md
index b4f4b66ab..f6b3e6b66 100644
--- a/reference/string/basic_string.md
+++ b/reference/string/basic_string.md
@@ -231,6 +231,7 @@ namespace std {
 
 
 ## 例
+### 基本的な使い方 (C++03)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;cstdio&amp;gt;
@@ -258,12 +259,34 @@ int main()
 * s.substr[link basic_string/substr.md]
 * s.c_str()[link basic_string/c_str.md]
 
-### 出力
+#### 出力
 ```
 hello
 hello world
 ```
 
+### 定数式内でbasic_stringを使用する (C++20)
+```cpp
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+constexpr bool f()
+{
+  std::string s = &amp;#34;Hello&amp;#34;;
+  s += &amp;#34; World&amp;#34;;
+
+  auto* p = s.data();
+  assert(p);
+
+  return true;
+}
+
+int main()
+{
+  static_assert(f());
+}
+```
+
 ## 参照
 - [N2668 Concurrency Modifications to Basic String](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2668.htm)
     - C++11で、`basic_string`の仕様が、並行実行のパフォーマンスを考慮したものに変更された経緯の提案文書
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>append -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/append.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/append.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/append.md b/reference/string/basic_string/append.md
index 749f03b51..593e99a65 100644
--- a/reference/string/basic_string/append.md
+++ b/reference/string/basic_string/append.md
@@ -5,34 +5,61 @@
 * function[meta id-type]
 
 ```cpp
-basic_string&amp;amp; append(const basic_string&amp;amp; str);                  // (1)
-
-basic_string&amp;amp; append(const basic_string&amp;amp; str,
-                     size_type pos,
-                     size_type n);                              // (2) C++03
-
-basic_string&amp;amp; append(const basic_string&amp;amp; str,
-                     size_type pos,
-                     size_type n = npos);                       // (2) C++14
-
-basic_string&amp;amp; append(const charT* s, size_type n);              // (3)
-
-basic_string&amp;amp; append(const charT* s);                           // (4)
-
-basic_string&amp;amp; append(size_type n, charT c);                     // (5)
+basic_string&amp;amp; append(const basic_string&amp;amp; str);           // (1) C++03
+constexpr basic_string&amp;amp; append(const basic_string&amp;amp; str); // (1) C++20
+
+basic_string&amp;amp;
+  append(const basic_string&amp;amp; str,
+         size_type pos,
+         size_type n);             // (2) C++03
+basic_string&amp;amp;
+  append(const basic_string&amp;amp; str,
+         size_type pos,
+         size_type n = npos);      // (2) C++14
+constexpr basic_string&amp;amp;
+  append(const basic_string&amp;amp; str,
+         size_type pos,
+         size_type n = npos);      // (2) C++20
+
+basic_string&amp;amp; append(const charT* s, size_type n);           // (3) C++03
+constexpr basic_string&amp;amp; append(const charT* s, size_type n); // (3) C++20
+
+basic_string&amp;amp; append(const charT* s);           // (4) C++03
+constexpr basic_string&amp;amp; append(const charT* s); // (4) C++20
+
+basic_string&amp;amp; append(size_type n, charT c);           // (5) C++03
+constexpr basic_string&amp;amp; append(size_type n, charT c); // (5) C++20
 
 template &amp;lt;class InputIterator&amp;gt;
-basic_string&amp;amp; append(InputIterator first, InputIterator last);  // (6)
+basic_string&amp;amp;
+  append(InputIterator first,
+         InputIterator last);  // (6) C++03
+template &amp;lt;class InputIterator&amp;gt;
+constexpr basic_string&amp;amp;
+  append(InputIterator first,
+         InputIterator last);  // (6) C++20
 
-basic_string&amp;amp; append(initializer_list&amp;lt;charT&amp;gt; il);               // (7) C++11
+basic_string&amp;amp; append(initializer_list&amp;lt;charT&amp;gt; il);           // (7) C++11
+constexpr basic_string&amp;amp; append(initializer_list&amp;lt;charT&amp;gt; il); // (7) C++20
 
 // string_viewを引数に取るオーバーロード
 template&amp;lt;class T&amp;gt;
-basic_string&amp;amp; append(const T&amp;amp; t);                               // (8) C++17
+basic_string&amp;amp;
+  append(const T&amp;amp; t);        // (8) C++17
+template&amp;lt;class T&amp;gt;
+constexpr basic_string&amp;amp;
+  append(const T&amp;amp; t);        // (8) C++20
+
+template&amp;lt;class T&amp;gt;
+basic_string&amp;amp;
+  append(const T&amp;amp; t,
+        size_type pos,
+        size_type n = npos); / (9) C++17
 template&amp;lt;class T&amp;gt;
-basic_string&amp;amp; append(const T&amp;amp; t,
-                     size_type pos,
-                     size_type n = npos);                       // (9) C++17
+constexpr basic_string&amp;amp;
+  append(const T&amp;amp; t,
+        size_type pos,
+        size_type n = npos); / (9) C++20
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 
@@ -192,3 +219,4 @@ Hello, world
 - [LWG Issue 2758. `std::string{}.assign(&amp;#34;ABCDE&amp;#34;, 0, 1)` is ambiguous](https://wg21.cmeerw.net/lwg/issue2758)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(8)(9)の引数型を`const T&amp;amp;`に変更
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/assign.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/assign.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/assign.md b/reference/string/basic_string/assign.md
index 6db2861d7..0e5cb3015 100644
--- a/reference/string/basic_string/assign.md
+++ b/reference/string/basic_string/assign.md
@@ -5,37 +5,62 @@
 * function[meta id-type]
 
 ```cpp
-basic_string&amp;amp; assign(const basic_string&amp;amp; str);                  // (1)
+basic_string&amp;amp; assign(const basic_string&amp;amp; str);                  // (1) C++03
+constexpr basic_string&amp;amp; assign(const basic_string&amp;amp; str);        // (1) C++20
 
 basic_string&amp;amp; assign(basic_string&amp;amp;&amp;amp; str) noexcept;              // (2) C++11
-
-basic_string&amp;amp; assign(const basic_string&amp;amp; str,
-                     size_type pos,
-                     size_type n);                              // (3) C++03
-
-basic_string&amp;amp; assign(const basic_string&amp;amp; str,
-                     size_type pos,
-                     size_type n = npos);                       // (3) C++14
-
-basic_string&amp;amp; assign(const charT* s, size_type n);              // (4)
-
-basic_string&amp;amp; assign(const charT* s);                           // (5)
-
-basic_string&amp;amp; assign(size_type n, charT c);                     // (6)
+constexpr basic_string&amp;amp; assign(basic_string&amp;amp;&amp;amp; str) noexcept;    // (2) C++20
+
+basic_string&amp;amp;
+  assign(const basic_string&amp;amp; str,
+         size_type pos,
+         size_type n);             // (3) C++03
+basic_string&amp;amp;
+  assign(const basic_string&amp;amp; str,
+         size_type pos,
+         size_type n = npos);      // (3) C++14
+constexpr basic_string&amp;amp;
+  assign(const basic_string&amp;amp; str,
+         size_type pos,
+         size_type n = npos);      // (3) C++20
+
+basic_string&amp;amp; assign(const charT* s, size_type n);              // (4) C++03
+constexpr basic_string&amp;amp; assign(const charT* s, size_type n);    // (4) C++20
+
+basic_string&amp;amp; assign(const charT* s);                           // (5) C++03
+constexpr basic_string&amp;amp; assign(const charT* s);                 // (5) C++20
+
+basic_string&amp;amp; assign(size_type n, charT c);                     // (6) C++03
+constexpr basic_string&amp;amp; assign(size_type n, charT c);           // (6) C++20
 
 template &amp;lt;class InputIterator&amp;gt;
-basic_string&amp;amp; assign(InputIterator first,
-                     InputIterator last);                       // (7)
+basic_string&amp;amp;
+  assign(InputIterator first,
+         InputIterator last);  // (7) C++03
+template &amp;lt;class InputIterator&amp;gt;
+constexpr basic_string&amp;amp;
+  assign(InputIterator first,
+         InputIterator last);  // (7) C++20
 
-basic_string&amp;amp; assign(initializer_list&amp;lt;charT&amp;gt;);                  // (8) C++11
+basic_string&amp;amp; assign(initializer_list&amp;lt;charT&amp;gt;);           // (8) C++11
+constexpr basic_string&amp;amp; assign(initializer_list&amp;lt;charT&amp;gt;); // (8) C++20
 
 // string_viewを引数に取るオーバーロード
 template&amp;lt;class T&amp;gt;
-basic_string&amp;amp; assign(const T&amp;amp; t);                               // (9) C++17
+basic_string&amp;amp; assign(const T&amp;amp; t);           // (9) C++17
+template&amp;lt;class T&amp;gt;
+constexpr basic_string&amp;amp; assign(const T&amp;amp; t); // (9) C++20
+
+template&amp;lt;class T&amp;gt;
+basic_string&amp;amp;
+  assign(const T&amp;amp; t,
+         size_type pos,
+         size_type n = npos);   // (10) C++17
 template&amp;lt;class T&amp;gt;
-basic_string&amp;amp; assign(const T&amp;amp; t,
-                     size_type pos,
-                     size_type n = npos);                       // (10) C++17
+constexpr basic_string&amp;amp;
+  assign(const T&amp;amp; t,
+         size_type pos,
+         size_type n = npos);   // (10) C++20
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 
@@ -186,3 +211,4 @@ s10 : Hello
 - [LWG Issue 2758. `std::string{}.assign(&amp;#34;ABCDE&amp;#34;, 0, 1)` is ambiguous](https://wg21.cmeerw.net/lwg/issue2758)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(9)(10)の引数型を`const T&amp;amp;`に変更
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>at -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/at.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/at.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/at.md b/reference/string/basic_string/at.md
index b6a9f618b..0bac62647 100644
--- a/reference/string/basic_string/at.md
+++ b/reference/string/basic_string/at.md
@@ -5,8 +5,11 @@
 * function[meta id-type]
 
 ```cpp
-const_reference at(size_type pos) const;
-reference at(size_type pos);
+const_reference at(size_type pos) const;           // (1) C++03
+constexpr const_reference at(size_type pos) const; // (1) C++20
+
+reference at(size_type pos);                       // (2) C++03
+constexpr reference at(size_type pos);             // (2) C++20
 ```
 
 ## 概要
@@ -54,4 +57,4 @@ access error
 ## 参照
 - [LWG Issue 2207. `basic_string::at` should not have a Requires clause](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2207)
     - C++11まで、この関数を呼び出す要件として「`pos &amp;lt; size()`」があったが、例外節があるため要件節は不要。C++14で要件節が削除された。
-
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>back -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/back.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/back.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/back.md b/reference/string/basic_string/back.md
index 9b598734e..0c565acf6 100644
--- a/reference/string/basic_string/back.md
+++ b/reference/string/basic_string/back.md
@@ -6,8 +6,11 @@
 * cpp11[meta cpp]
 
 ```cpp
-const charT&amp;amp; back() const;
-charT&amp;amp; back();
+const charT&amp;amp; back() const;           // (1) C++11
+constexpr const charT&amp;amp; back() const; // (1) C++20
+
+charT&amp;amp; back();                       // (2) C++11
+constexpr charT&amp;amp; back();             // (2) C++20
 ```
 
 ## 概要
@@ -44,4 +47,4 @@ o
 
 ## 参照
 - [LWG Issue 534. Missing `basic_string` members](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#534)
-
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/begin.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/begin.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/begin.md b/reference/string/basic_string/begin.md
index f9ee9f8f7..1cfb94876 100644
--- a/reference/string/basic_string/begin.md
+++ b/reference/string/basic_string/begin.md
@@ -7,9 +7,11 @@
 ```cpp
 iterator begin();                      // (1) C++03
 iterator begin() noexcept;             // (1) C++11
+constexpr iterator begin() noexcept;   // (1) C++20
 
-const_iterator begin() const;          // (2) C++03
-const_iterator begin() const noexcept; // (2) C++11
+const_iterator begin() const;                    // (2) C++03
+const_iterator begin() const noexcept;           // (2) C++11
+constexpr const_iterator begin() const noexcept; // (2) C++20
 ```
 
 ## 概要
@@ -49,3 +51,4 @@ h
 ```
 
 ## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>c_str -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/c_str.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/c_str.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/c_str.md b/reference/string/basic_string/c_str.md
index af19d486c..18bcb2b19 100644
--- a/reference/string/basic_string/c_str.md
+++ b/reference/string/basic_string/c_str.md
@@ -5,9 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-const charT* c_str() const;          // C++03 まで
-
-const charT* c_str() const noexcept; // C++11 から
+const charT* c_str() const;                    // (1) C++03
+const charT* c_str() const noexcept;           // (1) C++11
+constexpr const charT* c_str() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -81,3 +81,4 @@ Hello
 
 ## 参照
 - [LWG Issue 3131. `addressof` all the things](https://wg21.cmeerw.net/lwg/issue3131)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>capacity -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/capacity.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/capacity.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/capacity.md b/reference/string/basic_string/capacity.md
index a1d5c66aa..02722e650 100644
--- a/reference/string/basic_string/capacity.md
+++ b/reference/string/basic_string/capacity.md
@@ -5,8 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-size_type capacity() const;          // C++03
-size_type capacity() const noexcept; // C++11
+size_type capacity() const;                    // (1) C++03
+size_type capacity() const noexcept;           // (1) C++11
+constexpr size_type capacity() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -50,3 +51,4 @@ int main()
 
 ## 参照
 - [LWG Issue 3004. §[string.capacity] and §[vector.capacity] should specify time complexity for `capacity()`](https://wg21.cmeerw.net/lwg/issue3004)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cbegin -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/cbegin.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/cbegin.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/cbegin.md b/reference/string/basic_string/cbegin.md
index d9457de62..3847abd90 100644
--- a/reference/string/basic_string/cbegin.md
+++ b/reference/string/basic_string/cbegin.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-const_iterator cbegin() const noexcept;
+const_iterator cbegin() const noexcept;           // (1) C++11
+constexpr const_iterator cbegin() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -46,3 +47,4 @@ h
 ```
 
 ## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cend -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/cend.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/cend.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/cend.md b/reference/string/basic_string/cend.md
index 57d029a23..0649edf6a 100644
--- a/reference/string/basic_string/cend.md
+++ b/reference/string/basic_string/cend.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-const_iterator cend() const noexcept;
+const_iterator cend() const noexcept;           // (1) C++11
+constexpr const_iterator cend() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -59,3 +60,4 @@ o
 ```
 
 ## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/clear.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/clear.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/clear.md b/reference/string/basic_string/clear.md
index 2649908ed..0aa0eebcc 100644
--- a/reference/string/basic_string/clear.md
+++ b/reference/string/basic_string/clear.md
@@ -5,7 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-void clear() noexcept;
+void clear();                    // (1) C++03
+void clear() noexcept;           // (1) C++11
+constexpe void clear() noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -47,3 +49,4 @@ int main()
 ```
 
 ## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>compare -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/compare.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/compare.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/compare.md b/reference/string/basic_string/compare.md
index 9e38cd5a4..0b0edf7b6 100644
--- a/reference/string/basic_string/compare.md
+++ b/reference/string/basic_string/compare.md
@@ -5,36 +5,94 @@
 * function[meta id-type]
 
 ```cpp
-int compare(const basic_string&amp;amp; str) const noexcept;                  // (1)
-int compare(size_type pos1, size_type n1,
-            const basic_string&amp;amp; str) const;                           // (2)
-
-int compare(size_type pos1, size_type n1,
-            const basic_string&amp;amp; str,
-            size_type pos2, size_type n2) const;                      // (3) C++11まで
-int compare(size_type pos1, size_type n1,
-            const basic_string&amp;amp; str,
-            size_type pos2, size_type n2 = npos) const;               // (3) C++14から
-
-int compare(const charT* s) const;                                    // (4)
-int compare(size_type pos1, size_type n1,
-            const charT* s) const;                                    // (5)
-int compare(size_type pos1, size_type n1,
-            const charT* s, size_type n2) const;                      // (6)
+int compare(const basic_string&amp;amp; str) const noexcept; // (1) C++03
+constexpr int
+  compare(const basic_string&amp;amp; str) const noexcept;   // (1) C++20
+
+int
+  compare(size_type pos1,
+          size_type n1,
+          const basic_string&amp;amp; str) const; // (2) C++03
+constexpr int
+  compare(size_type pos1,
+          size_type n1,
+          const basic_string&amp;amp; str) const; // (2) C++20
+
+int
+  compare(size_type pos1,
+          size_type n1,
+          const basic_string&amp;amp; str,
+          size_type pos2,
+          size_type n2) const;        // (3) C++03
+int
+  compare(size_type pos1,
+          size_type n1,
+          const basic_string&amp;amp; str,
+          size_type pos2,
+          size_type n2 = npos) const; // (3) C++14
+constexpr int
+  compare(size_type pos1,
+          size_type n1,
+          const basic_string&amp;amp; str,
+          size_type pos2,
+          size_type n2 = npos) const; // (3) C++20
+
+int compare(const charT* s) const;           // (4) C++03
+constexpr int compare(const charT* s) const; // (4) C++03
+
+int
+  compare(size_type pos1,
+          size_type n1,
+          const charT* s) const; // (5) C++03
+constexpr int
+  compare(size_type pos1,
+          size_type n1,
+          const charT* s) const; // (5) C++20
+
+int
+  compare(size_type pos1,
+          size_type n1,
+          const charT* s,
+          size_type n2) const; // (6) C++03
+constexpr int
+  compare(size_type pos1,
+          size_type n1,
+          const charT* s,
+          size_type n2) const; // (6) C++20
 
 // string_viewを引数に取るオーバーロード
 template&amp;lt;class T&amp;gt;
-int compare(const T&amp;amp; t) const noexcept(/*see below*/);                // (7) C++17
+int
+  compare(const T&amp;amp; t) const noexcept(下記参照); // (7) C++17
 template&amp;lt;class T&amp;gt;
-int compare(size_type pos1,
-            size_type n1,
-            const T&amp;amp; t) const;                                        // (8) C++17
+constexpr int
+  compare(const T&amp;amp; t) const noexcept(下記参照); // (7) C++20
+
+template&amp;lt;class T&amp;gt;
+int
+  compare(size_type pos1,
+          size_type n1,
+          const T&amp;amp; t) const; // (8) C++17
+template&amp;lt;class T&amp;gt;
+constexpr int
+  compare(size_type pos1,
+          size_type n1,
+          const T&amp;amp; t) const; // (8) C++20
+
+template&amp;lt;class T&amp;gt;
+int
+  compare(size_type pos1,
+          size_type n1,
+          const T&amp;amp; t,
+          size_type pos2,
+          size_type n2 = npos) const; // (9) C++17
 template&amp;lt;class T&amp;gt;
-int compare(size_type pos1,
-            size_type n1,
-            const T&amp;amp; t,
-            size_type pos2,
-            size_type n2 = npos) const;                               // (9) C++17
+constexpr int
+  compare(size_type pos1,
+          size_type n1,
+          const T&amp;amp; t,
+          size_type pos2,
+          size_type n2 = npos) const; // (9) C++20
 ```
 
 ## 概要
@@ -110,3 +168,4 @@ int main()
 - [LWG Issue 2758. `std::string{}.assign(&amp;#34;ABCDE&amp;#34;, 0, 1)` is ambiguous](https://wg21.cmeerw.net/lwg/issue2758)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(7)(8)(9)の引数型を`const T&amp;amp;`に変更
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copy -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/copy.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/copy.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/copy.md b/reference/string/basic_string/copy.md
index 7865bec3d..8290b724b 100644
--- a/reference/string/basic_string/copy.md
+++ b/reference/string/basic_string/copy.md
@@ -5,7 +5,10 @@
 * function[meta id-type]
 
 ```cpp
-size_type copy(charT* s, size_type n, size_type pos = 0) const;
+size_type
+  copy(charT* s, size_type n, size_type pos = 0) const; // (1) C++03
+constexpr size_type
+  copy(charT* s, size_type n, size_type pos = 0) const; // (1) C++20
 ```
 
 ## 概要
@@ -75,4 +78,4 @@ llo
 ```
 
 ## 参照
-
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crbegin -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/crbegin.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/crbegin.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/crbegin.md b/reference/string/basic_string/crbegin.md
index e9d7a2022..4337da5d9 100644
--- a/reference/string/basic_string/crbegin.md
+++ b/reference/string/basic_string/crbegin.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-const_reverse_iterator crbegin() const noexcept;
+const_reverse_iterator crbegin() const noexcept;           // (1) C++11
+constexpr const_reverse_iterator crbegin() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -46,3 +47,4 @@ o
 ```
 
 ## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crend -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/crend.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/crend.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/crend.md b/reference/string/basic_string/crend.md
index bd415c8ed..868e97a5a 100644
--- a/reference/string/basic_string/crend.md
+++ b/reference/string/basic_string/crend.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-const_reverse_iterator crend() const noexcept;
+const_reverse_iterator crend() const noexcept;           // (1) C++11
+constexpr const_reverse_iterator crend() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -50,3 +51,4 @@ h
 ```
 
 ## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>data -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/data.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/data.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/data.md b/reference/string/basic_string/data.md
index fa3858190..bca8e3b51 100644
--- a/reference/string/basic_string/data.md
+++ b/reference/string/basic_string/data.md
@@ -5,10 +5,12 @@
 * function[meta id-type]
 
 ```cpp
-const charT* data() const;          // (1) C++03
-const charT* data() const noexcept; // (1) C++11
+const charT* data() const;                    // (1) C++03
+const charT* data() const noexcept;           // (1) C++11
+constexpr const charT* data() const noexcept; // (1) C++20
 
-charT* data() noexcept;             // (2) C++17
+charT* data() noexcept;                       // (2) C++17
+constexpr charT* data() noexcept;             // (2) C++20
 ```
 
 ## 概要
@@ -82,3 +84,4 @@ Hello, world!
 ## 参照
 - [P0272R1 Give `std::string` a non-const `.data()` member function.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0272r1.html)
 - [LWG Issue 3131. `addressof` all the things](https://wg21.cmeerw.net/lwg/issue3131)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/empty.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/empty.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/empty.md b/reference/string/basic_string/empty.md
index 1ab046c19..5432d7592 100644
--- a/reference/string/basic_string/empty.md
+++ b/reference/string/basic_string/empty.md
@@ -5,8 +5,8 @@
 * function[meta id-type]
 
 ```cpp
-bool empty() const noexcept;               // C++03
-[[nodiscard]] bool empty() const noexcept; // C++20
+bool empty() const noexcept;                         // C++03
+[[nodiscard]] constexpr bool empty() const noexcept; // C++20
 ```
 
 ## 概要
@@ -47,3 +47,4 @@ int main()
 
 ## 参照
 - [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/end.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/end.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/end.md b/reference/string/basic_string/end.md
index 1f461debe..8438e0c7b 100644
--- a/reference/string/basic_string/end.md
+++ b/reference/string/basic_string/end.md
@@ -7,9 +7,11 @@
 ```cpp
 iterator end();                      // (1) C++03
 iterator end() noexcept;             // (1) C++11
+constexpr iterator end() noexcept;   // (1) C++20
 
-const_iterator end() const;          // (2) C++03
-const_iterator end() const noexcept; // (2) C++11
+const_iterator end() const;                    // (2) C++03
+const_iterator end() const noexcept;           // (2) C++11
+constexpr const_iterator end() const noexcept; // (2) C++20
 ```
 
 ## 概要
@@ -61,3 +63,4 @@ o
 ```
 
 ## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ends_with -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/ends_with.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/ends_with.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/ends_with.md b/reference/string/basic_string/ends_with.md
index 056f2dc67..f2119430e 100644
--- a/reference/string/basic_string/ends_with.md
+++ b/reference/string/basic_string/ends_with.md
@@ -6,9 +6,12 @@
 * cpp20[meta cpp]
 
 ```cpp
-bool ends_with(std::basic_string_view&amp;lt;charT, traits&amp;gt; x) const noexcept; // (1)
-bool ends_with(charT x) const noexcept;                                 // (2)
-bool ends_with(const charT* x) const;                                   // (3)
+constexpr bool
+  ends_with(std::basic_string_view&amp;lt;charT, traits&amp;gt; x) const noexcept; // (1) C++20
+constexpr bool
+  ends_with(charT x) const noexcept;                                 // (2) C++20
+constexpr bool
+  ends_with(const charT* x) const;                                   // (3) C++20
 ```
 
 ## 概要
@@ -77,3 +80,4 @@ int main()
 
 ## 参照
 - [P0457R2 String Prefix and Suffix Checking](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0457r2.html)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/erase.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/erase.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/erase.md b/reference/string/basic_string/erase.md
index 7e87fc94a..ae00ecada 100644
--- a/reference/string/basic_string/erase.md
+++ b/reference/string/basic_string/erase.md
@@ -5,13 +5,24 @@
 * function[meta id-type]
 
 ```cpp
-basic_string&amp;amp; erase(size_type pos = 0, size_type n = npos); // (1)
-
-iterator erase(iterator p);       // (2) C++03まで
-iterator erase(const_iterator p); // (2) C++11から
-
-iterator erase(iterator first, iterator last);             // (3) C++03まで
-iterator erase(const_iterator first, const_iterator last); // (3) C++11から
+basic_string&amp;amp;
+  erase(size_type pos = 0, size_type n = npos); // (1) C++03
+constexpr basic_string&amp;amp;
+  erase(size_type pos = 0, size_type n = npos); // (1) C++20
+
+iterator erase(iterator p);                 // (2) C++03
+iterator erase(const_iterator p);           // (2) C++11
+constexpr iterator erase(const_iterator p); // (2) C++20
+
+iterator
+  erase(iterator first,
+        iterator last);       // (3) C++03
+iterator
+  erase(const_iterator first,
+        const_iterator last); // (3) C++11
+constexpr iterator
+  erase(const_iterator first,
+        const_iterator last); // (3) C++20
 ```
 
 ## 概要
@@ -99,4 +110,4 @@ int main()
 - [LWG Issue 180. Container member iterator arguments constness has unintended consequences](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#180)
 - [LWG Issue 2003. String exception inconsistency in erase.](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2003)
     - C++14から(2)と(3)に、「例外を投げない」という保証が追加された経緯のレポート
-
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase (非メンバ関数) -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/erase_free.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/erase_free.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/erase_free.md b/reference/string/basic_string/erase_free.md
index 23ad3cf09..efd307220 100644
--- a/reference/string/basic_string/erase_free.md
+++ b/reference/string/basic_string/erase_free.md
@@ -7,7 +7,7 @@
 ```cpp
 namespace std {
   template &amp;lt;class CharT, class Traits, class Allocator, class U&amp;gt;
-  typename basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;::size_type
+  constexpr typename basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;::size_type
     erase(basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; c, const U&amp;amp; value);
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase_if -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/erase_if_free.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/erase_if_free.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/erase_if_free.md b/reference/string/basic_string/erase_if_free.md
index 5d3133670..2c9ab35ff 100644
--- a/reference/string/basic_string/erase_if_free.md
+++ b/reference/string/basic_string/erase_if_free.md
@@ -7,7 +7,7 @@
 ```cpp
 namespace std {
   template &amp;lt;class CharT, class Traits, class Allocator, class Predicate&amp;gt;
-  typename basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;::size_type
+  constexpr typename basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;::size_type
     erase_if(basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; c, Predicate pred);
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/find.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/find.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/find.md b/reference/string/basic_string/find.md
index 6dcffc9b2..8f6ffd1c1 100644
--- a/reference/string/basic_string/find.md
+++ b/reference/string/basic_string/find.md
@@ -5,17 +5,48 @@
 * function[meta id-type]
 
 ```cpp
-size_type find(const basic_string&amp;amp; str, size_type pos = 0) const;          // (1) C++03
-size_type find(const basic_string&amp;amp; str, size_type pos = 0) const noexcept; // (1) C++11
-
-size_type find(const charT* s, size_type pos, size_type n) const;          // (2)
-size_type find(const charT* s, size_type pos = 0) const;                   // (3)
-
-size_type find(charT c, size_type pos = 0) const;                          // (4)
+size_type
+  find(const basic_string&amp;amp; str,
+       size_type pos = 0) const;          // (1) C++03
+size_type
+  find(const basic_string&amp;amp; str,
+       size_type pos = 0) const noexcept; // (1) C++11
+constexpr size_type
+  find(const basic_string&amp;amp; str,
+       size_type pos = 0) const noexcept; // (1) C++20
+
+size_type
+  find(const charT* s,
+       size_type pos,
+       size_type n) const; // (2) C++03
+constexpr size_type
+  find(const charT* s,
+       size_type pos,
+       size_type n) const; // (2) C++20
+
+size_type
+  find(const charT* s,
+       size_type pos = 0) const; // (3) C++03
+constexpr size_type
+  find(const charT* s,
+       size_type pos = 0) const; // (3) C++20
+
+size_type
+  find(charT c,
+       size_type pos = 0) const; // (4) C++03
+constexpr size_type
+  find(charT c,
+       size_type pos = 0) const; // (4) C++20
 
 // string_viewを引数に取るオーバーロード
 template &amp;lt;class T&amp;gt;
-size_type find(const T&amp;amp; t, size_type pos = 0) const noexcept(see below);   // (5) C++17
+size_type
+  find(const T&amp;amp; t,
+       size_type pos = 0) const noexcept(下記参照);   // (5) C++17
+template &amp;lt;class T&amp;gt;
+constexpr size_type
+  find(const T&amp;amp; t,
+       size_type pos = 0) const noexcept(下記参照);   // (5) C++20
 ```
 
 ## 概要
@@ -129,3 +160,4 @@ size_type basic_string&amp;lt;charT, traits, Allocator&amp;gt;::find(charT c, size_type pos =
 - [P0758R1 Implicit conversion traits and utility functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0758r1.html)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(5)の引数型を`const T&amp;amp;`に変更
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_first_not_of -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/find_first_not_of.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/find_first_not_of.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/find_first_not_of.md b/reference/string/basic_string/find_first_not_of.md
index 0776a19fe..f3a1df692 100644
--- a/reference/string/basic_string/find_first_not_of.md
+++ b/reference/string/basic_string/find_first_not_of.md
@@ -5,17 +5,48 @@
 * function[meta id-type]
 
 ```cpp
-size_type find_first_not_of(const basic_string&amp;amp; str, size_type pos = 0) const;          // (1) C++03
-size_type find_first_not_of(const basic_string&amp;amp; str, size_type pos = 0) const noexcept; // (1) C++11
-
-size_type find_first_not_of(const charT* s, size_type pos, size_type n) const;          // (2)
-size_type find_first_not_of(const charT* s, size_type pos = 0) const;                   // (3)
-
-size_type find_first_not_of(charT c, size_type pos = 0) const;                          // (4)
+size_type
+  find_first_not_of(const basic_string&amp;amp; str,
+                    size_type pos = 0) const;          // (1) C++03
+size_type
+  find_first_not_of(const basic_string&amp;amp; str,
+                    size_type pos = 0) const noexcept; // (1) C++11
+constexpr size_type
+  find_first_not_of(const basic_string&amp;amp; str,
+                    size_type pos = 0) const noexcept; // (1) C++20
+
+size_type
+  find_first_not_of(const charT* s,
+                    size_type pos,
+                    size_type n) const; // (2) C++03
+constexpr size_type
+  find_first_not_of(const charT* s,
+                    size_type pos,
+                    size_type n) const; // (2) C++20
+
+size_type
+  find_first_not_of(const charT* s,
+                    size_type pos = 0) const; // (3) C++03
+constexpr size_type
+  find_first_not_of(const charT* s,
+                    size_type pos = 0) const; // (3) C++20
+
+size_type
+  find_first_not_of(charT c,
+                    size_type pos = 0) const; // (4) C++03
+constexpr size_type
+  find_first_not_of(charT c,
+                    size_type pos = 0) const; // (4) C++20
 
 // string_viewを引数に取るオーバーロード
 template &amp;lt;class T&amp;gt;
-size_type find_first_not_of(const T&amp;amp; t, size_type pos = 0) const noexcept(see below);  // (5) C++17
+size_type
+  find_first_not_of(const T&amp;amp; t,
+                    size_type pos = 0) const noexcept(下記参照); // (5) C++17
+template &amp;lt;class T&amp;gt;
+constexpr size_type
+  find_first_not_of(const T&amp;amp; t,
+                    size_type pos = 0) const noexcept(下記参照); // (5) C++20
 ```
 
 ## 概要
@@ -120,3 +151,4 @@ size_type basic_string&amp;lt;charT, traits, Allocator&amp;gt;::find_first_not_of(charT c, siz
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(5)の引数型を`const T&amp;amp;`に変更
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_first_of -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/find_first_of.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/find_first_of.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/find_first_of.md b/reference/string/basic_string/find_first_of.md
index 4fb35f1c4..2e1bed619 100644
--- a/reference/string/basic_string/find_first_of.md
+++ b/reference/string/basic_string/find_first_of.md
@@ -5,17 +5,46 @@
 * function[meta id-type]
 
 ```cpp
-size_type find_first_of(const basic_string&amp;amp; str, size_type pos = 0) const;          // (1) C++03
-size_type find_first_of(const basic_string&amp;amp; str, size_type pos = 0) const noexcept; // (1) C++11
-
-size_type find_first_of(const charT* s, size_type pos, size_type n) const;          // (2)
-size_type find_first_of(const charT* s, size_type pos = 0) const;                   // (3)
-
-size_type find_first_of(charT c, size_type pos = 0) const;                          // (4)
+size_type
+  find_first_of(const basic_string&amp;amp; str,
+                size_type pos = 0) const;          // (1) C++03
+size_type
+  find_first_of(const basic_string&amp;amp; str,
+                size_type pos = 0) const noexcept; // (1) C++11
+constexpr size_type
+  find_first_of(const basic_string&amp;amp; str,
+                size_type pos = 0) const noexcept; // (1) C++20
+
+size_type
+  find_first_of(const charT* s,
+               size_type pos, size_type n) const; // (2) C++03
+constexpr size_type
+  find_first_of(const charT* s,
+               size_type pos, size_type n) const; // (2) C++20
+
+size_type
+  find_first_of(const charT* s,
+                size_type pos = 0) const; // (3) C++03
+constexpr size_type
+  find_first_of(const charT* s,
+                size_type pos = 0) const; // (3) C++20
+
+size_type
+  find_first_of(charT c,
+                size_type pos = 0) const; // (4) C++03
+constexpr size_type
+  find_first_of(charT c,
+                size_type pos = 0) const; // (4) C++20
 
 // string_viewを引数に取るオーバーロード
 template &amp;lt;class T&amp;gt;
-size_type find_first_of(const T&amp;amp; t, size_type pos = 0) const noexcept(see below);   // (5) C++17
+size_type
+  find_first_of(const T&amp;amp; t,
+                size_type pos = 0) const noexcept(下記参照); // (5) C++17
+template &amp;lt;class T&amp;gt;
+constexpr size_type
+  find_first_of(const T&amp;amp; t,
+                size_type pos = 0) const noexcept(下記参照); // (5) C++20
 ```
 
 ## 概要
@@ -129,3 +158,4 @@ size_type basic_string&amp;lt;charT, traits, Allocator&amp;gt;::find_first_of(charT c, size_ty
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(5)の引数型を`const T&amp;amp;`に変更
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_last_not_of -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/find_last_not_of.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/find_last_not_of.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/find_last_not_of.md b/reference/string/basic_string/find_last_not_of.md
index 58bf19fbc..4496453a2 100644
--- a/reference/string/basic_string/find_last_not_of.md
+++ b/reference/string/basic_string/find_last_not_of.md
@@ -5,17 +5,48 @@
 * function[meta id-type]
 
 ```cpp
-size_type find_last_not_of(const basic_string&amp;amp; str, size_type pos = npos) const;          // (1) C++03
-size_type find_last_not_of(const basic_string&amp;amp; str, size_type pos = npos) const noexcept; // (1) C++11
-
-size_type find_last_not_of(const charT* s, size_type pos, size_type n) const;             // (2)
-size_type find_last_not_of(const charT* s, size_type pos = npos) const;                   // (3)
-
-size_type find_last_not_of(charT c, size_type pos = npos) const;                          // (4)
+size_type
+  find_last_not_of(const basic_string&amp;amp; str,
+                  size_type pos = npos) const;           // (1) C++03
+size_type
+  find_last_not_of(const basic_string&amp;amp; str,
+                   size_type pos = npos) const noexcept; // (1) C++11
+constexpr size_type
+  find_last_not_of(const basic_string&amp;amp; str,
+                   size_type pos = npos) const noexcept; // (1) C++20
+
+size_type
+  find_last_not_of(const charT* s,
+                   size_type pos,
+                   size_type n) const; // (2) C++03
+constexpr size_type
+  find_last_not_of(const charT* s,
+                   size_type pos,
+                   size_type n) const; // (2) C++20
+
+size_type
+  find_last_not_of(const charT* s,
+                   size_type pos = npos) const; // (3) C++03
+constexpr size_type
+  find_last_not_of(const charT* s,
+                   size_type pos = npos) const; // (3) C++20
+
+size_type
+  find_last_not_of(charT c,
+                   size_type pos = npos) const; // (4) C++03
+constexpr size_type
+  find_last_not_of(charT c,
+                   size_type pos = npos) const; // (4) C++20
 
 // string_viewを引数に取るオーバーロード
 template &amp;lt;class T&amp;gt;
-size_type find_last_not_of(const T&amp;amp; t, size_type pos = npos) const noexcept(see below);   // (5) C++17
+size_type
+  find_last_not_of(const T&amp;amp; t,
+                   size_type pos = npos) const noexcept(下記参照); // (5) C++17
+template &amp;lt;class T&amp;gt;
+constexpr size_type
+  find_last_not_of(const T&amp;amp; t,
+                   size_type pos = npos) const noexcept(下記参照); // (5) C++20
 ```
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_last_of -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/find_last_of.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/find_last_of.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/find_last_of.md b/reference/string/basic_string/find_last_of.md
index 7c520f9f1..3300f5867 100644
--- a/reference/string/basic_string/find_last_of.md
+++ b/reference/string/basic_string/find_last_of.md
@@ -5,17 +5,46 @@
 * function[meta id-type]
 
 ```cpp
-size_type find_last_of(const basic_string&amp;amp; str, size_type pos = npos) const;          // (1) C++03
-size_type find_last_of(const basic_string&amp;amp; str, size_type pos = npos) const noexcept; // (1) C++11
-
-size_type find_last_of(const charT* s, size_type pos, size_type n) const;             // (2)
-size_type find_last_of(const charT* s, size_type pos = npos) const;                   // (3)
-
-size_type find_last_of(charT c, size_type pos = npos) const;                          // (4)
+size_type
+  find_last_of(const basic_string&amp;amp; str,
+               size_type pos = npos) const;          // (1) C++03
+size_type
+  find_last_of(const basic_string&amp;amp; str,
+               size_type pos = npos) const noexcept; // (1) C++11
+constexpr size_type
+  find_last_of(const basic_string&amp;amp; str,
+               size_type pos = npos) const noexcept; // (1) C++20
+
+size_type
+  find_last_of(const charT* s,
+               size_type pos, size_type n) const; // (2) C++03
+constexpr size_type
+  find_last_of(const charT* s,
+               size_type pos, size_type n) const; // (2) C++20
+
+size_type
+  find_last_of(const charT* s,
+               size_type pos = npos) const; // (3) C++03
+constexpr size_type
+  find_last_of(const charT* s,
+               size_type pos = npos) const; // (3) C++20
+
+size_type
+  find_last_of(charT c,
+               size_type pos = npos) const; // (4) C++03
+constexpr size_type
+  find_last_of(charT c,
+               size_type pos = npos) const; // (4) C++20
 
 // string_viewを引数に取るオーバーロード
 template &amp;lt;class T&amp;gt;
-size_type find_last_of(const T&amp;amp; t, size_type pos = npos) const noexcept(see below);   // (5) C++17
+size_type
+  find_last_of(const T&amp;amp; t,
+               size_type pos = npos) const noexcept(下記参照); // (5) C++17
+template &amp;lt;class T&amp;gt;
+constexpr size_type
+  find_last_of(const T&amp;amp; t,
+               size_type pos = npos) const noexcept(下記参照); // (5) C++20
 ```
 
 ## 概要
@@ -121,3 +150,4 @@ size_type basic_string&amp;lt;charT, traits, Allocator&amp;gt;::find_last_of(charT c, size_typ
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(5)の引数型を`const T&amp;amp;`に変更
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>front -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/front.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/front.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/front.md b/reference/string/basic_string/front.md
index 865916098..6428241f5 100644
--- a/reference/string/basic_string/front.md
+++ b/reference/string/basic_string/front.md
@@ -6,8 +6,11 @@
 * cpp11[meta cpp]
 
 ```cpp
-const charT&amp;amp; front() const;
-charT&amp;amp; front();
+const charT&amp;amp; front() const;           // (1) C++11
+constexpr const charT&amp;amp; front() const; // (1) C++20
+
+charT&amp;amp; front();                       // (2) C++11
+constexpr charT&amp;amp; front();             // (2) C++20
 ```
 
 ## 概要
@@ -44,3 +47,4 @@ h
 
 ## 参照
 - [LWG Issue 534. Missing `basic_string` members](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#534)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_allocator -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/get_allocator.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/get_allocator.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/get_allocator.md b/reference/string/basic_string/get_allocator.md
index 9641b9a16..1c9085a02 100644
--- a/reference/string/basic_string/get_allocator.md
+++ b/reference/string/basic_string/get_allocator.md
@@ -5,8 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-allocator_type get_allocator() const;          // C++03
-allocator_type get_allocator() const noexcept; // C++11
+allocator_type get_allocator() const;                    // (1) C++03
+allocator_type get_allocator() const noexcept;           // (1) C++11
+constexpr allocator_type get_allocator() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -61,3 +62,5 @@ int main()
 	- 2015からは、`noexcept`が修飾されている。
 
 
+## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/insert.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/insert.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/insert.md b/reference/string/basic_string/insert.md
index a6cd2da63..7d8c6927d 100644
--- a/reference/string/basic_string/insert.md
+++ b/reference/string/basic_string/insert.md
@@ -5,41 +5,84 @@
 * function[meta id-type]
 
 ```cpp
-basic_string&amp;amp; insert(size_type pos1, const basic_string&amp;amp; str);    // (1)
-
-basic_string&amp;amp; insert(size_type pos1, const basic_string&amp;amp; str,
-                     size_type pos2, size_type n);                // (2) C++03
-basic_string&amp;amp; insert(size_type pos1, const basic_string&amp;amp; str,
-                     size_type pos2, size_type n = npos);         // (2) C++14
-
-basic_string&amp;amp; insert(size_type pos, const charT* s, size_type n); // (3)
-basic_string&amp;amp; insert(size_type pos, const charT* s);              // (4)
-basic_string&amp;amp; insert(size_type pos, size_type n, charT c);        // (5)
-
-iterator insert(iterator p, charT c);                             // (6) C++03
-iterator insert(const_iterator p, charT c);                       // (6) C++11
-
-void insert(iterator p, size_type n, charT c);                    // (7) C++03
-iterator insert(const_iterator p, size_type n, charT c);          // (7) C++11
+basic_string&amp;amp;
+  insert(size_type pos1, const basic_string&amp;amp; str);    // (1) C++03
+constexpr basic_string&amp;amp;
+  insert(size_type pos1, const basic_string&amp;amp; str);    // (1) C++20
+
+basic_string&amp;amp;
+  insert(size_type pos1, const basic_string&amp;amp; str,
+         size_type pos2, size_type n);                // (2) C++03
+basic_string&amp;amp;
+  insert(size_type pos1, const basic_string&amp;amp; str,
+         size_type pos2, size_type n = npos);         // (2) C++14
+constexpr basic_string&amp;amp;
+  insert(size_type pos1, const basic_string&amp;amp; str,
+         size_type pos2, size_type n = npos);         // (2) C++20
+
+basic_string&amp;amp;
+  insert(size_type pos, const charT* s, size_type n); // (3) C++03
+constexpr basic_string&amp;amp;
+  insert(size_type pos, const charT* s, size_type n); // (3) C++20
+
+basic_string&amp;amp;
+  insert(size_type pos, const charT* s);              // (4) C++03
+constexpr basic_string&amp;amp;
+  insert(size_type pos, const charT* s);              // (4) C++20
+
+basic_string&amp;amp;
+  insert(size_type pos, size_type n, charT c);        // (5) C++03
+constexpr basic_string&amp;amp;
+  insert(size_type pos, size_type n, charT c);        // (5) C++20
+
+iterator insert(iterator p, charT c);                 // (6) C++03
+iterator insert(const_iterator p, charT c);           // (6) C++11
+constexpr iterator insert(const_iterator p, charT c); // (6) C++20
+
+void insert(iterator p, size_type n, charT c);                     // (7) C++03
+iterator insert(const_iterator p, size_type n, charT c);           // (7) C++11
+constexpr iterator insert(const_iterator p, size_type n, charT c); // (7) C++20
 
 template&amp;lt;class InputIterator&amp;gt;
-void insert(iterator p,
-            InputIterator first, InputIterator last);             // (8) C++03
+void
+  insert(iterator p,
+         InputIterator first, InputIterator last); // (8) C++03
 template&amp;lt;class InputIterator&amp;gt;
-iterator insert(const_iterator p,
-                InputIterator first, InputIterator last);         // (8) C++11
+iterator
+  insert(const_iterator p,
+         InputIterator first, InputIterator last); // (8) C++11
+template&amp;lt;class InputIterator&amp;gt;
+constexpr iterator
+  insert(const_iterator p,
+         InputIterator first, InputIterator last); // (8) C++20
 
-iterator insert(const_iterator p, initializer_list&amp;lt;charT&amp;gt;);       // (9) C++11
+iterator
+  insert(const_iterator p, initializer_list&amp;lt;charT&amp;gt;); // (9) C++11
+constexpr iterator
+  insert(const_iterator p, initializer_list&amp;lt;charT&amp;gt;); // (9) C++20
 
 // string_viewを引数に取るオーバーロード
 template&amp;lt;class T&amp;gt;
-basic_string&amp;amp; insert(size_type pos1,
-                     const T&amp;amp; t);                                 // (10) C++17
+basic_string&amp;amp;
+  insert(size_type pos1,
+         const T&amp;amp; t);    // (10) C++17
+template&amp;lt;class T&amp;gt;
+constexpr basic_string&amp;amp;
+  insert(size_type pos1,
+         const T&amp;amp; t);    // (10) C++20
+
+template&amp;lt;class T&amp;gt;
+basic_string&amp;amp;
+  insert(size_type pos1,
+         const T&amp;amp; t,
+         size_type pos2,
+         size_type n = npos); // (11) C++17
 template&amp;lt;class T&amp;gt;
-basic_string&amp;amp; insert(size_type pos1,
-                     const T&amp;amp; t,
-                     size_type pos2,
-                     size_type n = npos);                         // (11) C++17
+constexpr basic_string&amp;amp;
+  insert(size_type pos1,
+         const T&amp;amp; t,
+         size_type pos2,
+         size_type n = npos); // (11) C++20
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 
@@ -250,3 +293,4 @@ int main()
 - [LWG Issue 2758. `std::string{}.assign(&amp;#34;ABCDE&amp;#34;, 0, 1)` is ambiguous](https://wg21.cmeerw.net/lwg/issue2758)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(10)(11)の引数型を`const T&amp;amp;`に変更
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>length -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/length.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/length.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/length.md b/reference/string/basic_string/length.md
index 8984f5279..830178384 100644
--- a/reference/string/basic_string/length.md
+++ b/reference/string/basic_string/length.md
@@ -5,8 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-size_type length() const;          // C++03
-size_type length() const noexcept; // C++11
+size_type length() const;                    // (1) C++03
+size_type length() const noexcept;           // (1) C++11
+constexpr size_type length() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -48,3 +49,4 @@ int main()
 ```
 
 ## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max_size -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/max_size.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/max_size.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/max_size.md b/reference/string/basic_string/max_size.md
index 94a4ac0ec..ea5764edd 100644
--- a/reference/string/basic_string/max_size.md
+++ b/reference/string/basic_string/max_size.md
@@ -5,8 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-size_type max_size() const;          // C++03
-size_type max_size() const noexcept; // C++11
+size_type max_size() const;                    // (1) C++03
+size_type max_size() const noexcept;           // (1) C++11
+constexpr size_type max_size() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -46,3 +47,4 @@ int main()
 ```
 
 ## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_assign.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/op_assign.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_assign.md b/reference/string/basic_string/op_assign.md
index d720c2ca1..bae7dba46 100644
--- a/reference/string/basic_string/op_assign.md
+++ b/reference/string/basic_string/op_assign.md
@@ -5,18 +5,31 @@
 * function[meta id-type]
 
 ```cpp
-basic_string&amp;amp; operator=(const basic_string&amp;amp; str);                  // (1)
+basic_string&amp;amp; operator=(const basic_string&amp;amp; str);                  // (1) C++03
+constexpr basic_string&amp;amp; operator=(const basic_string&amp;amp; str);        // (1) C++20
+
 basic_string&amp;amp; operator=(basic_string&amp;amp;&amp;amp; str) noexcept;              // (2) C++11
 basic_string&amp;amp; operator=(basic_string&amp;amp;&amp;amp; str) noexcept
   (allocator_traits&amp;lt;Allocator&amp;gt;::propagate_on_container_move_assignment::value
     || allocator_traits&amp;lt;Allocator&amp;gt;::is_always_equal::value);       // (2) C++17
-basic_string&amp;amp; operator=(const charT* s);                           // (3)
-basic_string&amp;amp; operator=(charT c);                                  // (4)
+constexpr basic_string&amp;amp; operator=(basic_string&amp;amp;&amp;amp; str) noexcept
+  (allocator_traits&amp;lt;Allocator&amp;gt;::propagate_on_container_move_assignment::value
+    || allocator_traits&amp;lt;Allocator&amp;gt;::is_always_equal::value);       // (2) C++20
+
+basic_string&amp;amp; operator=(const charT* s);                           // (3) C++03
+constexpr basic_string&amp;amp; operator=(const charT* s);                 // (3) C++20
+
+basic_string&amp;amp; operator=(charT c);                                  // (4) C++03
+constexpr basic_string&amp;amp; operator=(charT c);                        // (4) C++20
+
 basic_string&amp;amp; operator=(initializer_list&amp;lt;charT&amp;gt; il);               // (5) C++11
+constexpr basic_string&amp;amp; operator=(initializer_list&amp;lt;charT&amp;gt; il);     // (5) C++20
 
 // string_viewを引数に取るオーバーロード
 template&amp;lt;class T&amp;gt;
 basic_string&amp;amp; operator=(const T&amp;amp; t);                               // (6) C++17
+template&amp;lt;class T&amp;gt;
+constexpr basic_string&amp;amp; operator=(const T&amp;amp; t);                     // (6) C++20
 
 basic_string&amp;amp; operator=(nullptr_t) = delete;                       // (7) C++23
 ```
@@ -118,3 +131,4 @@ Hello
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(6)の引数型を`const T&amp;amp;`に変更
 - [P2166R1 A Proposal to Prohibit std::basic_string and std::basic_string_view construction from nullptr.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2166r1.html)
     - C++23での、`nullptr_t`をとる代入演算子のdelete宣言追加
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator[] -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_at.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/op_at.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_at.md b/reference/string/basic_string/op_at.md
index f8372ada2..b62dfa34b 100644
--- a/reference/string/basic_string/op_at.md
+++ b/reference/string/basic_string/op_at.md
@@ -5,8 +5,11 @@
 * function[meta id-type]
 
 ```cpp
-const_reference operator[](size_type pos) const;
-reference operator[](size_type pos);
+const_reference operator[](size_type pos) const;           // (1) C++03
+constexpr const_reference operator[](size_type pos) const; // (1) C++20
+
+reference operator[](size_type pos);                       // (2) C++03
+constexpr reference operator[](size_type pos);             // (2) C++20
 ```
 
 ## 概要
@@ -59,3 +62,4 @@ e
 ```
 
 ## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator basic_string_view -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_basic_string_view.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/op_basic_string_view.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_basic_string_view.md b/reference/string/basic_string/op_basic_string_view.md
index d88d1f5c7..4f91cd9bb 100644
--- a/reference/string/basic_string/op_basic_string_view.md
+++ b/reference/string/basic_string/op_basic_string_view.md
@@ -3,9 +3,11 @@
 * std[meta namespace]
 * basic_string[meta class]
 * function[meta id-type]
+* cpp17[meta cpp]
 
 ```cpp
-operator basic_string_view&amp;lt;charT, traits&amp;gt;() const noexcept;
+operator basic_string_view&amp;lt;charT, traits&amp;gt;() const noexcept;           // (1) C++17
+constexpr operator basic_string_view&amp;lt;charT, traits&amp;gt;() const noexcept; // (1) C++20
 ```
 * basic_string_view[link /reference/string_view/basic_string_view.md]
 
@@ -51,3 +53,4 @@ Hello World
 
 ## 参照
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_constructor.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/op_constructor.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_constructor.md b/reference/string/basic_string/op_constructor.md
index 5924f6f2a..cae297a95 100644
--- a/reference/string/basic_string/op_constructor.md
+++ b/reference/string/basic_string/op_constructor.md
@@ -8,61 +8,98 @@
 basic_string();                                                 // (1) C++14
 basic_string() noexcept(noexcept(Allocator()))                  // (1) C++17
   : basic_string(Allocator()) {}
+constexpr basic_string() noexcept(noexcept(Allocator()))        // (1) C++20
+  : basic_string(Allocator()) {}
 
 explicit basic_string(const Allocator&amp;amp; a);                      // (2) C++14
 explicit basic_string(const Allocator&amp;amp; a) noexcept;             // (2) C++17
+constexpr explicit basic_string(const Allocator&amp;amp; a) noexcept;   // (2) C++20
 
 explicit basic_string(const Allocator&amp;amp; a = Allocator());        // (1) + (2) C++03
 
-basic_string(const basic_string&amp;amp; str);                          // (3)
+basic_string(const basic_string&amp;amp; str);                          // (3) C++03
+constexpr basic_string(const basic_string&amp;amp; str);                // (3) C++20
+
 basic_string(basic_string&amp;amp;&amp;amp; str) noexcept;                      // (4) C++11
+constexpr basic_string(basic_string&amp;amp;&amp;amp; str) noexcept;            // (4) C++20
 
 basic_string(const basic_string&amp;amp; str,
              size_type pos,
              size_type n = npos,
-             const Allocator&amp;amp; a = Allocator());                 // (5) C++14まで
-
+             const Allocator&amp;amp; a = Allocator());                 // (5) C++03
 basic_string(const basic_string&amp;amp; str,
              size_type pos,
              size_type n,
              const Allocator&amp;amp; a = Allocator());                 // (5) C++17
+constexpr basic_string(const basic_string&amp;amp; str,
+                       size_type pos,
+                       size_type n,
+                       const Allocator&amp;amp; a = Allocator());       // (5) C++20
 
 basic_string(const basic_string&amp;amp; str,
              size_type pos,
              const Allocator&amp;amp; a = Allocator());                 // (6) C++17
+constexpr basic_string(const basic_string&amp;amp; str,
+                       size_type pos,
+                       const Allocator&amp;amp; a = Allocator());       // (6) C++20
 
 basic_string(const charT* s,
              size_type n,
-             const Allocator&amp;amp; a = Allocator());                 // (7)
+             const Allocator&amp;amp; a = Allocator());                 // (7) C++03
+constexpr basic_string(const charT* s,
+                       size_type n,
+                       const Allocator&amp;amp; a = Allocator());       // (7) C++20
 
 basic_string(const charT* s,
-             const Allocator&amp;amp; a = Allocator());                 // (8)
+             const Allocator&amp;amp; a = Allocator());                 // (8) C++03
+constexpr basic_string(const charT* s,
+                       const Allocator&amp;amp; a = Allocator());       // (8) C++20
 
 basic_string(size_type n,
              charT c,
-             const Allocator&amp;amp; a = Allocator());                 // (9)
+             const Allocator&amp;amp; a = Allocator());                 // (9) C++03
+constexpr basic_string(size_type n,
+                       charT c,
+                       const Allocator&amp;amp; a = Allocator());       // (9) C++20
 
 template &amp;lt;class InputIterator&amp;gt;
 basic_string(InputIterator begin, InputIterator end,
-             const Allocator&amp;amp; a = Allocator());                 // (10)
+             const Allocator&amp;amp; a = Allocator());                 // (10) C++03
+template &amp;lt;class InputIterator&amp;gt;
+constexpr basic_string(InputIterator begin, InputIterator end,
+                       const Allocator&amp;amp; a = Allocator());       // (10) C++20
 
 basic_string(initializer_list&amp;lt;charT&amp;gt; init,
              const Allocator&amp;amp; = Allocator());                   // (11) C++11
+constexpr basic_string(initializer_list&amp;lt;charT&amp;gt; init,
+                       const Allocator&amp;amp; = Allocator());         // (11) C++20
+
+basic_string(const basic_string&amp;amp; str, const Allocator&amp;amp;);           // (12) C++11
+constexpr basic_string(const basic_string&amp;amp; str, const Allocator&amp;amp;); // (12) C++20
 
-basic_string(const basic_string&amp;amp; str, const Allocator&amp;amp;);        // (12) C++11
 basic_string(basic_string&amp;amp;&amp;amp; str, const Allocator&amp;amp;);             // (13) C++11
+constexpr basic_string(basic_string&amp;amp;&amp;amp; str, const Allocator&amp;amp;);   // (13) C++20
 
 // string_viewから構築するコンストラクタ
 template&amp;lt;class T&amp;gt;
 explicit basic_string(const T&amp;amp; t,
-                      const Allocator&amp;amp; a = Allocator());        // (14) C++17
+                      const Allocator&amp;amp; a = Allocator());           // (14) C++17
+template&amp;lt;class T&amp;gt;
+constexpr explicit basic_string(const T&amp;amp; t,
+                                const Allocator&amp;amp; a = Allocator()); // (14) C++20
+
+template&amp;lt;class T&amp;gt;
+basic_string(const T&amp;amp; t,
+             size_type pos,
+             size_type n,
+             const Allocator&amp;amp; a = Allocator());                  // (15) C++17
 template&amp;lt;class T&amp;gt;
-         basic_string(const T&amp;amp; t,
-                      size_type pos,
-                      size_type n,
-                      const Allocator&amp;amp; a = Allocator());        // (15) C++17
+constexpr basic_string(const T&amp;amp; t,
+                       size_type pos,
+                       size_type n,
+                       const Allocator&amp;amp; a = Allocator());        // (15) C++20
 
-basic_string(nullptr_t) = delete;                               // (16) C++23
+basic_string(nullptr_t) = delete; // (16) C++23
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 
@@ -202,3 +239,4 @@ s14 : Hello
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(14)の引数型を`const T&amp;amp;`に変更
 - [P2166R1 A Proposal to Prohibit std::basic_string and std::basic_string_view construction from nullptr.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2166r1.html)
     - C++23での、`nullptr_t`をとるコンストラクタのdelete宣言追加
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_destructor.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/op_destructor.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_destructor.md b/reference/string/basic_string/op_destructor.md
index 08cb6084c..12f4a1ea0 100644
--- a/reference/string/basic_string/op_destructor.md
+++ b/reference/string/basic_string/op_destructor.md
@@ -5,7 +5,8 @@
 * function[meta id-type]
 
 ```cpp
-~basic_string()
+~basic_string();           // (1) C++03
+constexpr ~basic_string(); // (1) C++20
 ```
 
 ## 概要
@@ -19,3 +20,6 @@
 ## 計算量
 線形時間
 
+
+## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_equal.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/op_equal.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_equal.md b/reference/string/basic_string/op_equal.md
index 32d4e7b65..6ec1f6a40 100644
--- a/reference/string/basic_string/op_equal.md
+++ b/reference/string/basic_string/op_equal.md
@@ -6,20 +6,35 @@
 ```cpp
 namespace std {
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator==(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (1) C++03
-
+  bool
+    operator==(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b);          // (1) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  bool
+    operator==(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++14
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator==(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++14
+  constexpr bool
+    operator==(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++20
 
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator==(const CharT* a,
-                  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (2)
+  bool
+    operator==(const CharT* a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (2) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  constexpr bool
+    operator==(const CharT* a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (2) C++20
 
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator==(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                  const CharT* b);                                  // (3)
+  bool
+    operator==(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const CharT* b);                                  // (3) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  constexpr bool
+    operator==(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const CharT* b);                                  // (3) C++20
 }
 ```
 
@@ -66,3 +81,4 @@ equal
 
 ## 参照
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt; -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_greater.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/op_greater.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_greater.md b/reference/string/basic_string/op_greater.md
index a5e30a39e..9f0081048 100644
--- a/reference/string/basic_string/op_greater.md
+++ b/reference/string/basic_string/op_greater.md
@@ -6,20 +6,35 @@
 ```cpp
 namespace std {
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;gt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                 const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (1) C++03
-
+  bool
+    operator&amp;gt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+              const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b);          // (1) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  bool
+    operator&amp;gt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+              const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++14
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;gt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                 const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++14
+  constexpr bool
+    operator&amp;gt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+              const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++14
 
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;gt;(const CharT* a,
-                 const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b);          // (2)
+  bool
+    operator&amp;gt;(const CharT* a,
+              const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (2) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  constexpr bool
+    operator&amp;gt;(const CharT* a,
+              const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (2) C++20
 
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;gt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                 const CharT* rhs) noexcept;                                // (3)
+  bool
+    operator&amp;gt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+              const CharT* rhs) noexcept;                       // (3) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  constexpr bool
+    operator&amp;gt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+              const CharT* rhs) noexcept;                       // (3) C++20
 }
 ```
 
@@ -55,3 +70,4 @@ true
 
 ## 参照
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_greater_equal.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/op_greater_equal.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_greater_equal.md b/reference/string/basic_string/op_greater_equal.md
index 82e86fd25..e3e1b3c20 100644
--- a/reference/string/basic_string/op_greater_equal.md
+++ b/reference/string/basic_string/op_greater_equal.md
@@ -6,20 +6,35 @@
 ```cpp
 namespace std {
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;gt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (1) C++03
-
+  bool
+    operator&amp;gt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b);          // (1) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  bool
+    operator&amp;gt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++14
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;gt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++14
+  constexpr bool
+    operator&amp;gt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++20
 
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;gt;=(const CharT* a,
-                  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b);          // (2)
+  bool
+    operator&amp;gt;=(const CharT* a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (2) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  constexpr bool
+    operator&amp;gt;=(const CharT* a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (2) C++20
 
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;gt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                  const CharT* rhs) noexcept;                                // (3)
+  bool
+    operator&amp;gt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const CharT* rhs) noexcept;                       // (3) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  constexpr bool
+    operator&amp;gt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const CharT* rhs) noexcept;                       // (3) C++20
 }
 ```
 
@@ -55,3 +70,4 @@ true
 
 ## 参照
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_less.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/op_less.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_less.md b/reference/string/basic_string/op_less.md
index 2e9336ec7..ce83e281b 100644
--- a/reference/string/basic_string/op_less.md
+++ b/reference/string/basic_string/op_less.md
@@ -6,20 +6,35 @@
 ```cpp
 namespace std {
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;lt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                 const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (1) C++03
-
+  bool
+    operator&amp;lt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+              const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b);          // (1) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  bool
+    operator&amp;lt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+              const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++14
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;lt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                 const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++14
+  constexpr bool
+    operator&amp;lt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+              const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++20
 
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;lt;(const CharT* a,
-                 const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b);          // (2)
+  bool
+    operator&amp;lt;(const CharT* a,
+              const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b);          // (2) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  constexpr bool
+    operator&amp;lt;(const CharT* a,
+              const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b);          // (2) C++20
 
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;lt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                 const CharT* rhs) noexcept;                                // (3)
+  bool
+    operator&amp;lt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+              const CharT* rhs) noexcept;                                // (3) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  constexpr bool
+    operator&amp;lt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+              const CharT* rhs) noexcept;                                // (3) C++20
 }
 ```
 
@@ -54,3 +69,4 @@ true
 
 ## 参照
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;= -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_less_equal.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/op_less_equal.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_less_equal.md b/reference/string/basic_string/op_less_equal.md
index a4a885e95..4f080dff4 100644
--- a/reference/string/basic_string/op_less_equal.md
+++ b/reference/string/basic_string/op_less_equal.md
@@ -6,20 +6,35 @@
 ```cpp
 namespace std {
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;lt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (1) C++03
-
+  bool
+    operator&amp;lt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b);          // (1) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  bool
+    operator&amp;lt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++14
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;lt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++14
+  constexpr bool
+    operator&amp;lt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++20
 
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;lt;=(const CharT* a,
-                  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b);          // (2)
+  bool
+    operator&amp;lt;=(const CharT* a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (2) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  constexpr bool
+    operator&amp;lt;=(const CharT* a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (2) C++20
 
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;lt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                  const CharT* rhs) noexcept;                                // (3)
+  bool
+    operator&amp;lt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const CharT* rhs) noexcept;                       // (3) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  constexpr bool
+    operator&amp;lt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const CharT* rhs) noexcept;                       // (3) C++20
 }
 ```
 
@@ -55,3 +70,4 @@ true
 
 ## 参照
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_not_equal.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/op_not_equal.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_not_equal.md b/reference/string/basic_string/op_not_equal.md
index cd36f963e..a5b55f9ca 100644
--- a/reference/string/basic_string/op_not_equal.md
+++ b/reference/string/basic_string/op_not_equal.md
@@ -6,20 +6,36 @@
 ```cpp
 namespace std {
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator!=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (1) C++03
-
+  bool
+    operator!=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b);          // (1) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  bool
+    operator!=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++14
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator!=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++14
+  constexpr bool
+    operator!=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++20
+
 
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator!=(const CharT* a,
-                  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (2)
+  bool
+    operator!=(const CharT* a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (2) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  constexpr bool
+    operator!=(const CharT* a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (2) C++20
 
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator!=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                  const CharT* b);                                  // (3)
+  bool
+    operator!=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const CharT* b);                                  // (3) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  constexpr bool
+    operator!=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const CharT* b);                                  // (3) C++20
 }
 ```
 
@@ -63,3 +79,4 @@ not equal
 
 ## 参照
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator+ -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_plus.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/op_plus.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_plus.md b/reference/string/basic_string/op_plus.md
index da716ec55..7e45e540f 100644
--- a/reference/string/basic_string/op_plus.md
+++ b/reference/string/basic_string/op_plus.md
@@ -8,62 +8,111 @@ namespace std {
   template &amp;lt;class charT, class traits, class Allocator&amp;gt;
   basic_string&amp;lt;charT, traits, Allocator&amp;gt;
     operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
-              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (1)
+              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (1) C++03
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  constexpr basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
+              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (1) C++20
+
 
   template &amp;lt;class charT, class traits, class Allocator&amp;gt;
   basic_string&amp;lt;charT, traits, Allocator&amp;gt;
     operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
-              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (2) C++11 から
+              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (2) C++11
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  constexpr basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
+              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (2) C++20
 
   template &amp;lt;class charT, class traits, class Allocator&amp;gt;
   basic_string&amp;lt;charT, traits, Allocator&amp;gt;
     operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
-              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (3) C++11 から
+              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (3) C++11
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  constexpr basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
+              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (3) C++20
 
   template &amp;lt;class charT, class traits, class Allocator&amp;gt;
   basic_string&amp;lt;charT, traits, Allocator&amp;gt;
     operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
-              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (4) C++11 から
+              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (4) C++11
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  constexpr basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
+              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (4) C++20
 
   template &amp;lt;class charT, class traits, class Allocator&amp;gt;
   basic_string&amp;lt;charT, traits, Allocator&amp;gt;
     operator+(const charT* lhs,
-              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (5)
+              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (5) C++03
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  constexpr basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(const charT* lhs,
+              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (5) C++20
 
   template &amp;lt;class charT, class traits, class Allocator&amp;gt;
   basic_string&amp;lt;charT, traits, Allocator&amp;gt;
     operator+(const charT* lhs,
-              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (6) C++11 から
+              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (6) C++11
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  constexpr basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(const charT* lhs,
+              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (6) C++20
 
   template &amp;lt;class charT, class traits, class Allocator&amp;gt;
   basic_string&amp;lt;charT, traits, Allocator&amp;gt;
     operator+(charT lhs,
-              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (7)
+              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (7) C++03
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  constexpr basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(charT lhs,
+              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (7) C++20
 
   template &amp;lt;class charT, class traits, class Allocator&amp;gt;
   basic_string&amp;lt;charT, traits, Allocator&amp;gt;
     operator+(charT lhs,
-              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (8) C++11 から
+              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (8) C++11
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  constexpr basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(charT lhs,
+              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (8) C++20
 
   template &amp;lt;class charT, class traits, class Allocator&amp;gt;
   basic_string&amp;lt;charT, traits, Allocator&amp;gt;
     operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
-              const charT* rhs);                                  // (9)
+              const charT* rhs);                                  // (9) C++03
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  constexpr basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
+              const charT* rhs);                                  // (9) C++20
 
   template &amp;lt;class charT, class traits, class Allocator&amp;gt;
   basic_string&amp;lt;charT, traits, Allocator&amp;gt;
     operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
-              const charT* rhs);                                  // (10) C++11 から
+              const charT* rhs);                                  // (10) C++11
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  constexpr basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
+              const charT* rhs);                                  // (10) C++20
 
   template &amp;lt;class charT, class traits, class Allocator&amp;gt;
   basic_string&amp;lt;charT, traits, Allocator&amp;gt;
     operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
-              charT rhs);                                         // (11)
+              charT rhs);                                         // (11) C++03
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  constexpr basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
+              charT rhs);                                         // (11) C++20
 
   template &amp;lt;class charT, class traits, class Allocator&amp;gt;
   basic_string&amp;lt;charT, traits, Allocator&amp;gt;
     operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
-              charT rhs);                                         // (12) C++11 から
+              charT rhs);                                         // (12) C++11
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  constexpr basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
+              charT rhs);                                         // (12) C++20
 }
 ```
 
@@ -229,3 +278,4 @@ Hello, world!
 
 ## 参照
 - [P1165R1 Make stateful allocator propagation more consistent for operator+(basic_string)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1165r1.html)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator+= -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_plus_assign.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/op_plus_assign.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_plus_assign.md b/reference/string/basic_string/op_plus_assign.md
index 35b1b4da9..898c79782 100644
--- a/reference/string/basic_string/op_plus_assign.md
+++ b/reference/string/basic_string/op_plus_assign.md
@@ -5,17 +5,23 @@
 * function[meta id-type]
 
 ```cpp
-basic_string&amp;amp; operator+=(const basic_string&amp;amp; str);    // (1)
+basic_string&amp;amp; operator+=(const basic_string&amp;amp; str);           // (1) C++03
+constexpr basic_string&amp;amp; operator+=(const basic_string&amp;amp; str); // (1) C++20
 
-basic_string&amp;amp; operator+=(const charT* s);             // (2)
+basic_string&amp;amp; operator+=(const charT* s);           // (2) C++03
+constexpr basic_string&amp;amp; operator+=(const charT* s); // (2) C++20
 
-basic_string&amp;amp; operator+=(charT c);                    // (3)
+basic_string&amp;amp; operator+=(charT c);           // (3) C++03
+constexpr basic_string&amp;amp; operator+=(charT c); // (3) C++03
 
-basic_string&amp;amp; operator+=(initializer_list&amp;lt;charT&amp;gt; il); // (4) C++11 から
+basic_string&amp;amp; operator+=(initializer_list&amp;lt;charT&amp;gt; il);           // (4) C++11
+constexpr basic_string&amp;amp; operator+=(initializer_list&amp;lt;charT&amp;gt; il); // (4) C++20
 
 // string_viewを引数に取るオーバーロード
 template&amp;lt;class T&amp;gt;
-basic_string&amp;amp; operator+=(const T&amp;amp; t);                 // (5) C++17 から
+basic_string&amp;amp; operator+=(const T&amp;amp; t);           // (5) C++17
+template&amp;lt;class T&amp;gt;
+constexpr basic_string&amp;amp; operator+=(const T&amp;amp; t); // (5) C++20
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 
@@ -136,3 +142,4 @@ Hello, world! :) :)
 - [LWG Issue 2758. `std::string{}.assign(&amp;#34;ABCDE&amp;#34;, 0, 1)` is ambiguous](https://wg21.cmeerw.net/lwg/issue2758)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(5)の引数型を`const T&amp;amp;`に変更
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sリテラル -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_s.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/op_s.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_s.md b/reference/string/basic_string/op_s.md
index 8bbced568..add5b32b3 100644
--- a/reference/string/basic_string/op_s.md
+++ b/reference/string/basic_string/op_s.md
@@ -8,11 +8,19 @@
 namespace std {
 inline namespace literals {
 inline namespace string_literals {
-  string    operator&amp;#34;&amp;#34;s(const char* str, size_t len);     // (1)
-  u8string  operator&amp;#34;&amp;#34;s(const char8_t* str, size_t len);  // (2) C++20
-  u16string operator&amp;#34;&amp;#34;s(const char16_t* str, size_t len); // (3)
-  u32string operator&amp;#34;&amp;#34;s(const char32_t* str, size_t len); // (4)
-  wstring   operator&amp;#34;&amp;#34;s(const wchar_t* str, size_t len);  // (5)
+  string operator&amp;#34;&amp;#34;s(const char* str, size_t len);                  // (1) C++14
+  constexpr string operator&amp;#34;&amp;#34;s(const char* str, size_t len);        // (1) C++20
+
+  constexpr u8string operator&amp;#34;&amp;#34;s(const char8_t* str, size_t len);   // (2) C++20
+
+  u16string operator&amp;#34;&amp;#34;s(const char16_t* str, size_t len);           // (3) C++14
+  constexpr u16string operator&amp;#34;&amp;#34;s(const char16_t* str, size_t len); // (3) C++20
+
+  u32string operator&amp;#34;&amp;#34;s(const char32_t* str, size_t len);           // (4) C++14
+  constexpr u32string operator&amp;#34;&amp;#34;s(const char32_t* str, size_t len); // (4) C++20
+
+  wstring operator&amp;#34;&amp;#34;s(const wchar_t* str, size_t len);              // (5) C++14
+  constexpr wstring operator&amp;#34;&amp;#34;s(const wchar_t* str, size_t len);    // (5) C++20
 }}}
 ```
 
@@ -75,4 +83,4 @@ int main()
 
 ## 参照
 - [N3642 User-defined Literals for Standard Library Types (part 1 - version 4)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3642.pdf)
-
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>pop_back -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/pop_back.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/pop_back.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/pop_back.md b/reference/string/basic_string/pop_back.md
index ccd9b54e4..fdfc98c9a 100644
--- a/reference/string/basic_string/pop_back.md
+++ b/reference/string/basic_string/pop_back.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-void pop_back();
+void pop_back();           // (1) C++11
+constexpr void pop_back(); // (1) C++20
 ```
 
 ## 概要
@@ -60,4 +61,4 @@ hello
 
 ## 参照
 - [LWG Issue 534. Missing `basic_string` members](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#534)
-
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>push_back -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/push_back.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/push_back.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/push_back.md b/reference/string/basic_string/push_back.md
index 04fc21a2b..bd129857e 100644
--- a/reference/string/basic_string/push_back.md
+++ b/reference/string/basic_string/push_back.md
@@ -5,7 +5,8 @@
 * function[meta id-type]
 
 ```cpp
-void push_back(charT c);
+void push_back(charT c);           // (1) C++03
+constexpr void push_back(charT c); // (1) C++20
 ```
 
 ## 概要
@@ -39,4 +40,4 @@ hello
 ```
 
 ## 参照
-
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rbegin -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/rbegin.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/rbegin.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/rbegin.md b/reference/string/basic_string/rbegin.md
index a4787fdd3..fa3731363 100644
--- a/reference/string/basic_string/rbegin.md
+++ b/reference/string/basic_string/rbegin.md
@@ -7,9 +7,11 @@
 ```cpp
 reverse_iterator rbegin();                      // (1) C++03
 reverse_iterator rbegin() noexcept;             // (1) C++11
+constexpr reverse_iterator rbegin() noexcept;   // (1) C++20
 
-const_reverse_iterator rbegin() const;          // (2) C++03
-const_reverse_iterator rbegin() const noexcept; // (2) C++11
+const_reverse_iterator rbegin() const;                    // (2) C++03
+const_reverse_iterator rbegin() const noexcept;           // (2) C++11
+constexpr const_reverse_iterator rbegin() const noexcept; // (2) C++20
 ```
 
 ## 概要
@@ -49,3 +51,4 @@ o
 ```
 
 ## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rend -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/rend.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/rend.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/rend.md b/reference/string/basic_string/rend.md
index 905e39207..bf109d5a1 100644
--- a/reference/string/basic_string/rend.md
+++ b/reference/string/basic_string/rend.md
@@ -7,9 +7,11 @@
 ```cpp
 reverse_iterator rend();                      // (1) C++03
 reverse_iterator rend() noexcept;             // (1) C++11
+constexpr reverse_iterator rend() noexcept;   // (1) C++20
 
-const_reverse_iterator rend() const;          // (2) C++03
-const_reverse_iterator rend() const noexcept; // (2) C++11
+const_reverse_iterator rend() const;                    // (2) C++03
+const_reverse_iterator rend() const noexcept;           // (2) C++11
+constexpr const_reverse_iterator rend() const noexcept; // (2) C++20
 ```
 
 ## 概要
@@ -51,3 +53,4 @@ h
 ```
 
 ## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>replace -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/replace.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/replace.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/replace.md b/reference/string/basic_string/replace.md
index 5d5d89d8b..a69c48c47 100644
--- a/reference/string/basic_string/replace.md
+++ b/reference/string/basic_string/replace.md
@@ -5,67 +5,186 @@
 * function[meta id-type]
 
 ```cpp
-basic_string&amp;amp; replace(size_type pos1, size_type n1,
-                      const basic_string&amp;amp; str);                     // (1)
-
-basic_string&amp;amp; replace(size_type pos1, size_type n1,
-                      const basic_string&amp;amp; str,
-                      size_type pos2, size_type n2);                // (2) C++11
-basic_string&amp;amp; replace(size_type pos1, size_type n1,
-                      const basic_string&amp;amp; str,
-                      size_type pos2, size_type n2 = npos);         // (2) C++14
-
-basic_string&amp;amp; replace(size_type pos, size_type n1, const charT* s,
-                      size_type n2);                                // (3)
-basic_string&amp;amp; replace(size_type pos, size_type n1, const charT* s); // (4)
-basic_string&amp;amp; replace(size_type pos, size_type n1, size_type n2,
-                      charT c);                                     // (5)
-
-basic_string&amp;amp; replace(iterator i1, iterator i2,
-                      const basic_string&amp;amp; str);                     // (6) C++03
-basic_string&amp;amp; replace(const_iterator i1, const_iterator i2,
-                      const basic_string&amp;amp; str);                     // (6) C++11
-
-basic_string&amp;amp; replace(iterator i1, iterator i2,
-                      const charT* s, size_type n);                 // (7) C++03
-basic_string&amp;amp; replace(const_iterator i1, const_iterator i2,
-                      const charT* s, size_type n);                 // (7) C++11
-
-basic_string&amp;amp; replace(iterator i1, iterator i2,
-                      const charT* s);                              // (8) C++03
-basic_string&amp;amp; replace(const_iterator i1, const_iterator i2,
-                      const charT* s);                              // (8) C++11
-
-basic_string&amp;amp; replace(iterator i1, iterator i2,
-                      size_type n, charT c);                        // (9) C++03
-basic_string&amp;amp; replace(const_iterator i1, const_iterator i2,
-                      size_type n, charT c);                        // (9) C++11
+basic_string&amp;amp;
+  replace(size_type pos1,
+          size_type n1,
+          const basic_string&amp;amp; str); // (1) C++03
+constexpr basic_string&amp;amp;
+  replace(size_type pos1,
+          size_type n1,
+          const basic_string&amp;amp; str); // (1) C++20
+
+basic_string&amp;amp;
+  replace(size_type pos1,
+          size_type n1,
+          const basic_string&amp;amp; str,
+          size_type pos2,
+          size_type n2);           // (2) C++11
+basic_string&amp;amp;
+  replace(size_type pos1,
+          size_type n1,
+          const basic_string&amp;amp; str,
+          size_type pos2,
+          size_type n2 = npos);    // (2) C++14
+constexpr basic_string&amp;amp;
+  replace(size_type pos1,
+          size_type n1,
+          const basic_string&amp;amp; str,
+          size_type pos2,
+          size_type n2 = npos);    // (2) C++20
+
+basic_string&amp;amp;
+  replace(size_type pos,
+          size_type n1,
+          const charT* s,
+          size_type n2);  // (3) C++03
+constexpr basic_string&amp;amp;
+  replace(size_type pos,
+          size_type n1,
+          const charT* s,
+          size_type n2);  // (3) C++20
+
+basic_string&amp;amp;
+  replace(size_type pos,
+          size_type n1,
+          const charT* s); // (4) C++03
+constexpr basic_string&amp;amp;
+  replace(size_type pos,
+          size_type n1,
+          const charT* s); // (4) C++20
+
+basic_string&amp;amp;
+  replace(size_type pos,
+          size_type n1,
+          size_type n2,
+          charT c);      // (5) C++03
+constexpr basic_string&amp;amp;
+  replace(size_type pos,
+          size_type n1,
+          size_type n2,
+          charT c);      // (5) C++20
+
+basic_string&amp;amp;
+  replace(iterator i1,
+          iterator i2,
+          const basic_string&amp;amp; str); // (6) C++03
+basic_string&amp;amp;
+  replace(const_iterator i1,
+          const_iterator i2,
+          const basic_string&amp;amp; str); // (6) C++11
+constexpr basic_string&amp;amp;
+  replace(const_iterator i1,
+          const_iterator i2,
+          const basic_string&amp;amp; str); // (6) C++20
+
+basic_string&amp;amp;
+  replace(iterator i1,
+          iterator i2,
+          const charT* s,
+          size_type n);      // (7) C++03
+basic_string&amp;amp;
+  replace(const_iterator i1,
+          const_iterator i2,
+          const charT* s,
+          size_type n);      // (7) C++11
+constexpr basic_string&amp;amp;
+  replace(const_iterator i1,
+          const_iterator i2,
+          const charT* s,
+          size_type n);      // (7) C++20
+
+basic_string&amp;amp;
+  replace(iterator i1,
+          iterator i2,
+          const charT* s);   // (8) C++03
+basic_string&amp;amp;
+  replace(const_iterator i1,
+          const_iterator i2,
+          const charT* s);   // (8) C++11
+constexpr basic_string&amp;amp;
+  replace(const_iterator i1,
+          const_iterator i2,
+          const charT* s);   // (8) C++20
+
+basic_string&amp;amp;
+  replace(iterator i1,
+          iterator i2,
+          size_type n,
+          charT c);              // (9) C++03
+basic_string&amp;amp;
+  replace(const_iterator i1,
+          const_iterator i2,
+          size_type n, charT c); // (9) C++11
+constexpr basic_string&amp;amp;
+  replace(const_iterator i1,
+          const_iterator i2,
+          size_type n, charT c); // (9) C++20
 
 template &amp;lt;class InputIterator&amp;gt;
-basic_string&amp;amp; replace(iterator i1, iterator i2,
-                      InputIterator j1, InputIterator j2);          // (10) C++03
+basic_string&amp;amp;
+  replace(iterator i1,
+          iterator i2,
+          InputIterator j1,
+          InputIterator j2);     // (10) C++03
 template &amp;lt;class InputIterator&amp;gt;
-basic_string&amp;amp; replace(const_iterator i1, const_iterator i2,
-                      InputIterator j1, InputIterator j2);          // (10) C++11
-
-basic_string&amp;amp; replace(const_iterator i1, const_iterator i2,
-                      initializer_list&amp;lt;charT&amp;gt; il);                  // (11) C++11
+basic_string&amp;amp;
+  replace(const_iterator i1,
+          const_iterator i2,
+          InputIterator j1,
+          InputIterator j2);     // (10) C++11
+template &amp;lt;class InputIterator&amp;gt;
+constexpr basic_string&amp;amp;
+  replace(const_iterator i1,
+          const_iterator i2,
+          InputIterator j1,
+          InputIterator j2);     // (10) C++20
+
+basic_string&amp;amp;
+  replace(const_iterator i1,
+          const_iterator i2,
+          initializer_list&amp;lt;charT&amp;gt; il); // (11) C++11
+constexpr basic_string&amp;amp;
+  replace(const_iterator i1,
+          const_iterator i2,
+          initializer_list&amp;lt;charT&amp;gt; il); // (11) C++20
 
 // string_viewを引数に取るオーバーロード
 template&amp;lt;class T&amp;gt;
-basic_string&amp;amp; replace(size_type pos1,
-                      size_type n1,
-                      const T&amp;amp; t);                                  // (12) C++17
+basic_string&amp;amp;
+  replace(size_type pos1,
+          size_type n1,
+          const T&amp;amp; t);    // (12) C++17
+template&amp;lt;class T&amp;gt;
+constexpr basic_string&amp;amp;
+  replace(size_type pos1,
+          size_type n1,
+          const T&amp;amp; t);    // (12) C++17
+
+template&amp;lt;class T&amp;gt;
+basic_string&amp;amp;
+  replace(size_type pos1,
+          size_type n1,
+          const T&amp;amp; t,
+          size_type pos2,
+          size_type n2 = npos); // (13) C++17
+template&amp;lt;class T&amp;gt;
+constexpr basic_string&amp;amp;
+  replace(size_type pos1,
+          size_type n1,
+          const T&amp;amp; t,
+          size_type pos2,
+          size_type n2 = npos); // (13) C++20
+
 template&amp;lt;class T&amp;gt;
-basic_string&amp;amp; replace(size_type pos1, 
-                      size_type n1,
-                      const T&amp;amp; t,
-                      size_type pos2,
-                      size_type n2 = npos);                         // (13) C++17
+basic_string&amp;amp;
+  replace(const_iterator i1,
+          const_iterator i2,
+          const T&amp;amp; t);       // (14) C++17
 template&amp;lt;class T&amp;gt;
-basic_string&amp;amp; replace(const_iterator i1,
-                      const_iterator i2,
-                      const T&amp;amp; t);                                  // (14) C++17
+constexpr basic_string&amp;amp;
+  replace(const_iterator i1,
+          const_iterator i2,
+          const T&amp;amp; t);       // (14) C++20
 ```
 
 ## 概要
@@ -322,3 +441,4 @@ int main()
 - [LWG Issue 2758. `std::string{}.assign(&amp;#34;ABCDE&amp;#34;, 0, 1)` is ambiguous](https://wg21.cmeerw.net/lwg/issue2758)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(12)(13)(14)の引数型を`const T&amp;amp;`に変更
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reserve -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/reserve.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/reserve.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/reserve.md b/reference/string/basic_string/reserve.md
index d64c3f407..3c2533c2f 100644
--- a/reference/string/basic_string/reserve.md
+++ b/reference/string/basic_string/reserve.md
@@ -5,8 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-void reserve(size_type res_arg = 0); // (1) C++03 (C++20で非推奨化)
-void reserve(size_type res_arg);     // (1) C++20
+void reserve(size_type res_arg = 0);       // (1) C++03 (C++20で非推奨化)
+
+constexpr void reserve(size_type res_arg); // (2) C++20
 ```
 
 ## 概要
@@ -68,3 +69,4 @@ int main()
 
 ## 参照
 - [P0966R1 `string::reserve` Should Not Shrink](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0966r1.html)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>resize -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/resize.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/resize.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/resize.md b/reference/string/basic_string/resize.md
index d6dd1fedb..811d6aedb 100644
--- a/reference/string/basic_string/resize.md
+++ b/reference/string/basic_string/resize.md
@@ -5,8 +5,11 @@
 * function[meta id-type]
 
 ```cpp
-void resize(size_type n, charT c);
-void resize(size_type n);
+void resize(size_type n, charT c);           // (1) C++03
+constexpr void resize(size_type n, charT c); // (1) C++20
+
+void resize(size_type n);                    // (2) C++03
+constexpr void resize(size_type n);          // (2) C++20
 ```
 
 ## 概要
@@ -58,3 +61,4 @@ helloxxxxx
 
 - [LWG Issue 2318 `basic_string`&amp;#39;s wording has confusing relics from the copy-on-write era](https://wg21.cmeerw.net/lwg/issue2318)
 - [P1148R0 Cleaning up Clause 20](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1148r0.pdf)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rfind -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/rfind.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/rfind.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/rfind.md b/reference/string/basic_string/rfind.md
index 20632d4c6..1b35fd6f5 100644
--- a/reference/string/basic_string/rfind.md
+++ b/reference/string/basic_string/rfind.md
@@ -5,17 +5,46 @@
 * function[meta id-type]
 
 ```cpp
-size_type rfind(const basic_string&amp;amp; str, size_type pos = npos) const;          // (1) C++03
-size_type rfind(const basic_string&amp;amp; str, size_type pos = npos) const noexcept; // (1) C++11
-
-size_type rfind(const charT* s, size_type pos, size_type n) const;             // (2)
-size_type rfind(const charT* s, size_type pos = npos) const;                   // (3)
-
-size_type rfind(charT c, size_type pos = npos) const;                          // (4)
+size_type
+  rfind(const basic_string&amp;amp; str,
+        size_type pos = npos) const;          // (1) C++03
+size_type
+  rfind(const basic_string&amp;amp; str,
+        size_type pos = npos) const noexcept; // (1) C++11
+constexpr size_type
+  rfind(const basic_string&amp;amp; str,
+        size_type pos = npos) const noexcept; // (1) C++20
+
+size_type
+  rfind(const charT* s,
+        size_type pos, size_type n) const; // (2) C++03
+constexpr size_type
+  rfind(const charT* s,
+        size_type pos, size_type n) const; // (2) C++20
+
+size_type
+  rfind(const charT* s,
+        size_type pos = npos) const; // (3) C++03
+constexpr size_type
+  rfind(const charT* s,
+        size_type pos = npos) const; // (3) C++20
+
+size_type
+  rfind(charT c,
+        size_type pos = npos) const; // (4) C++03
+constexpr size_type
+  rfind(charT c,
+        size_type pos = npos) const; // (4) C++20
 
 // string_viewを引数に取るオーバーロード
 template &amp;lt;class T&amp;gt;
-size_type rfind(const T&amp;amp; t, size_type pos = npos) const noexcept(see below);   // (5) C++17
+size_type
+  rfind(const T&amp;amp; t,
+        size_type pos = npos) const noexcept(下記参照); // (5) C++17
+template &amp;lt;class T&amp;gt;
+constexpr size_type
+  rfind(const T&amp;amp; t,
+        size_type pos = npos) const noexcept(下記参照); // (5) C++20
 ```
 
 ## 概要
@@ -129,4 +158,4 @@ size_type basic_string&amp;lt;charT, traits, Allocator&amp;gt;::rfind(charT c, size_type pos =
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(5)の引数型を`const T&amp;amp;`に変更
-
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>shrink_to_fit -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/shrink_to_fit.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/shrink_to_fit.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/shrink_to_fit.md b/reference/string/basic_string/shrink_to_fit.md
index 78ebd2d71..eee5ba701 100644
--- a/reference/string/basic_string/shrink_to_fit.md
+++ b/reference/string/basic_string/shrink_to_fit.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-void shrink_to_fit();
+void shrink_to_fit();           // (1) C++11
+constexpr void shrink_to_fit(); // (1) C++20
 ```
 
 ## 概要
@@ -88,3 +89,4 @@ void basic_string::shrink_to_fit() {
 - 『[Effective STL - STLを効果的に使いこなす50の鉄則](https://www.amazon.co.jp/dp/4894714108)』 第17項 余分な容量を取り除くには「swap技法」を使おう
 - [LWG Issue 755. `std::vector` and `std:string` lack explicit shrink-to-fit operations]
 - [LWG Issue 2223. `shrink_to_fit` effect on iterator validity](https://wg21.cmeerw.net/lwg/issue2223)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/size.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/size.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/size.md b/reference/string/basic_string/size.md
index a8683c951..c6588a655 100644
--- a/reference/string/basic_string/size.md
+++ b/reference/string/basic_string/size.md
@@ -5,7 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-size_type size() const noexcept;
+size_type size() const;                    // (1) C++03
+size_type size() const noexcept;           // (1) C++11
+constexpr size_type size() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -51,3 +53,4 @@ int main()
 ```
 
 ## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>starts_with -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/starts_with.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/starts_with.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/starts_with.md b/reference/string/basic_string/starts_with.md
index 87580cf3e..6e2f1c96f 100644
--- a/reference/string/basic_string/starts_with.md
+++ b/reference/string/basic_string/starts_with.md
@@ -6,9 +6,12 @@
 * cpp20[meta cpp]
 
 ```cpp
-bool starts_with(std::basic_string_view&amp;lt;charT, traits&amp;gt; x) const noexcept; // (1)
-bool starts_with(charT x) const noexcept;                                 // (2)
-bool starts_with(const charT* x) const;                                   // (3)
+constexpr bool
+  starts_with(std::basic_string_view&amp;lt;charT, traits&amp;gt; x) const noexcept; // (1) C++20
+constexpr bool
+  starts_with(charT x) const noexcept;                                 // (2) C++20
+constexpr
+  bool starts_with(const charT* x) const;                              // (3) C++20
 ```
 
 ## 概要
@@ -77,3 +80,4 @@ int main()
 
 ## 参照
 - [P0457R2 String Prefix and Suffix Checking](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0457r2.html)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>substr -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/substr.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/substr.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/substr.md b/reference/string/basic_string/substr.md
index 304678e87..0e0d9c152 100644
--- a/reference/string/basic_string/substr.md
+++ b/reference/string/basic_string/substr.md
@@ -5,7 +5,12 @@
 * function[meta id-type]
 
 ```cpp
-basic_string substr(size_type pos = 0, size_type n = npos) const;
+basic_string
+  substr(size_type pos = 0,
+         size_type n = npos) const; // (1) C++03
+constexpr basic_string
+  substr(size_type pos = 0,
+         size_type n = npos) const; // (1) C++20
 ```
 
 ## 概要
@@ -60,4 +65,4 @@ llo
 ```
 
 ## 参照
-
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/swap.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/swap.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/swap.md b/reference/string/basic_string/swap.md
index 24e013114..23aa4d251 100644
--- a/reference/string/basic_string/swap.md
+++ b/reference/string/basic_string/swap.md
@@ -5,10 +5,13 @@
 * function[meta id-type]
 
 ```cpp
-void swap(basic_string&amp;amp; str);
+void swap(basic_string&amp;amp; str);                                // (1) C++03
 void swap(basic_string&amp;amp; str) noexcept
-  (allocator_traits&amp;lt;Allocator&amp;gt;::propagate_on_container_swap::value 
-   || allocator_traits&amp;lt;Allocator&amp;gt;::is_always_equal::value);        // C++17
+  (allocator_traits&amp;lt;Allocator&amp;gt;::propagate_on_container_swap::value
+   || allocator_traits&amp;lt;Allocator&amp;gt;::is_always_equal::value);  // (1) C++17
+constexpr void swap(basic_string&amp;amp; str) noexcept
+  (allocator_traits&amp;lt;Allocator&amp;gt;::propagate_on_container_swap::value
+   || allocator_traits&amp;lt;Allocator&amp;gt;::is_always_equal::value);  // (1) C++20
 ```
 
 ## 概要
@@ -54,3 +57,4 @@ hello
 ## 参照
 - [N4258 Cleaning-up noexcept in the Library, Rev 3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4258.pdf)
     - `noexcept` 追加の経緯となる提案文書
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/swap_free.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/swap_free.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/swap_free.md b/reference/string/basic_string/swap_free.md
index 0e338c67a..772dd369b 100644
--- a/reference/string/basic_string/swap_free.md
+++ b/reference/string/basic_string/swap_free.md
@@ -5,14 +5,18 @@
 
 ```cpp
 namespace std {
-    template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
   void swap(basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; x,
-            basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; y);
-
+            basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; y); // (1) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  void swap(basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; x,
+            basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; y)
+    noexcept(noexcept(lhs.swap(rhs)));                 // (1) C++17
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  constexpr
   void swap(basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; x,
             basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; y)
-    noexcept(noexcept(lhs.swap(rhs)));                 // C++17
+    noexcept(noexcept(lhs.swap(rhs)));                 // (1) C++20
 }
 ```
 
@@ -55,4 +59,4 @@ hello
 ## 参照
 - [N4258 Cleaning-up noexcept in the Library, Rev 3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4258.pdf)
     - `noexcept` 追加の経緯となる提案文書
-
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
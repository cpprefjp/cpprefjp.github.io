<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-04-14T16:23:22.761668</updated>
  <id>27e240a6-0188-46ed-b7e4-24649985af69</id>

  
    <entry>
      <title>env -- execution/env: fix ngword</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/env.html"/>
      <id>92a7237ce2698f7bc6fcaed781f171f579040706:reference/execution/execution/env.md</id>
      <updated>2025-04-15T01:19:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/env.md b/reference/execution/execution/env.md
index df547da64..4ebb6362c 100644
--- a/reference/execution/execution/env.md
+++ b/reference/execution/execution/env.md
@@ -30,7 +30,7 @@ namespace std::execution {
 
 `env`の特殊化は代入可能ではない。
 
-式リストが単一要素で構成される場合を除いて、`env`が括弧を用いた式リストによる初期化をサポートするか否かは未規定。
+式リストが単一要素で構成される場合を除いて、`env`が丸カッコを用いた式リストによる初期化をサポートするか否かは未規定。
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>execution -- execution: env,prop,queryable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>2d92c9fd2901685e95c87206c2754827357594fb:reference/execution/execution.md</id>
      <updated>2025-04-15T01:16:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index 920223549..15206c657 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -35,22 +35,22 @@ namespace std::execution {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`forwarding_query`](forwarding_query.md.nolink) | 進行保証の問い合わせオブジェクト (customization point object) | C++26 |
-| [`get_allocator`](get_allocator.md.nolink) | アロケータ取得の問い合わせオブジェクト (customization point object) | C++26 |
-| [`get_stop_token`](get_stop_token.md.nolink) | 停止トークン取得の問い合わせオブジェクト (customization point object) | C++26 |
+| [`forwarding_query`](forwarding_query.md.nolink) | クエリオブジェクトに転送問い合わせ可能か否かを返す (customization point object) | C++26 |
+| [`get_allocator`](get_allocator.md.nolink) | アロケータ取得のクエリオブジェクト (customization point object) | C++26 |
+| [`get_stop_token`](get_stop_token.md.nolink) | 停止トークン取得のクエリオブジェクト (customization point object) | C++26 |
 | [`stop_token_of_t`](get_stop_token.md.nolink) | 指定型から停止トークン型を取得 (alias template) | C++26 |
-| [`execution::get_domain`](execution/get_domain.md.nolink) | 実行ドメイン取得の問い合わせオブジェクト (customization point object) | C++26 |
-| [`execution::get_scheduler`](execution/get_scheduler.md.nolink) | Scheduler取得の問い合わせオブジェクト (customization point object) | C++26 |
-| [`execution::get_delegation_scheduler`](execution/get_delegation_scheduler.md.nolink) | 委譲Scheduler取得の問い合わせオブジェクト (customization point object) | C++26 |
+| [`execution::get_domain`](execution/get_domain.md.nolink) | 実行ドメイン取得のクエリオブジェクト (customization point object) | C++26 |
+| [`execution::get_scheduler`](execution/get_scheduler.md.nolink) | Scheduler取得のクエリオブジェクト (customization point object) | C++26 |
+| [`execution::get_delegation_scheduler`](execution/get_delegation_scheduler.md.nolink) | 委譲Scheduler取得のクエリオブジェクト (customization point object) | C++26 |
 | [`execution::forward_progress_guarantee`](execution/forward_progress_guarantee.md.nolink) | 前進保証 (enum) | C++26 |
-| [`execution::get_forward_progress_guarantee`](execution/get_forward_progress_guarantee.md.nolink) | 前進保証取得の問い合わせオブジェクト (customization point object) | C++26 |
-| [`execution::get_completion_scheduler`](execution/get_completion_scheduler.md.nolink) | 完了Scheduler取得の問い合わせオブジェクト (customization point object) | C++26 |
-| [`execution::get_env`](execution/get_env.md.nolink) | 環境取得の問い合わせオブジェクト (customization point object) | C++26 |
+| [`execution::get_forward_progress_guarantee`](execution/get_forward_progress_guarantee.md.nolink) | 前進保証取得のクエリオブジェクト (customization point object) | C++26 |
+| [`execution::get_completion_scheduler`](execution/get_completion_scheduler.md.nolink) | 完了Scheduler取得のクエリオブジェクト (customization point object) | C++26 |
+| [`execution::get_env`](execution/get_env.md.nolink) | 環境取得のクエリオブジェクト (customization point object) | C++26 |
 | [`execution::env_of_t`](execution/env_of_t.md.nolink) | 指定型から環境型を取得 (alias template) | C++26 |
-| [`execution::prop`](execution/prop.md.nolink) | プロパティ(class template) | C++26 |
-| [`execution::env`](execution/env.md.nolink) | 環境 (class template) | C++26 |
+| [`execution::prop`](execution/prop.md) | 環境構築用のヘルパクラス (class template) | C++26 |
+| [`execution::env`](execution/env.md) | 環境 (class template) | C++26 |
 
-問い合わせオブジェクトは名前空間 `std` および名前空間 `std::execution` で定義される。
+クエリオブジェクトは名前空間 `std` および名前空間 `std::execution` で定義される。
 
 ### Scheduler
 
@@ -83,14 +83,14 @@ namespace std::execution {
 | [`execution::sender`](execution/sender.md) | Sender型 (concept) | C++26 |
 | [`execution::sender_in`](execution/sender_in.md) | 指定環境で有効なSender (concept) | C++26 |
 | [`execution::sender_to`](execution/sender_to.md) | 指定Receiverに接続可能なSender (concept) | C++26 |
-| [`execution::get_completion_signatures`](execution/get_completion_signatures.md.nolink) | 完了シグネチャ集合取得の問い合わせオブジェクト (customization point object) | C++26 |
+| [`execution::get_completion_signatures`](execution/get_completion_signatures.md.nolink) | 完了シグネチャ集合取得のクエリオブジェクト (customization point object) | C++26 |
 | [`execution::completion_signatures_of_t`](execution/completion_signatures_of_t.md) | Senderから完了シグネチャ集合を取得 (alias template) | C++26 |
 | [`execution::value_types_of_t`](execution/value_types_of_t.md.nolink) | Senderの値完了型を取得 (alias template) | C++26 |
 | [`execution::error_types_of_t`](execution/error_types_of_t.md.nolink) | Senderのエラー完了型を取得 (alias template) | C++26 |
 | [`execution::sends_stopped`](execution/value_types_of_t.md.nolink) | Senderが停止完了に対応するか否か (variable template) | C++26 |
 | [`execution::tag_of_t`](execution/tag_of_t.md.nolink) | Senderのタグ型を取得 (alias template) | C++26 |
 | [`execution::transform_sender`](execution/transform_sender.md.nolink) | Senderを変換 (function template) | C++26 |
-| [`execution::transform_env`](execution/transform_env.md.nolink) | 問い合わせオブジェクトを変換 (function template) | C++26 |
+| [`execution::transform_env`](execution/transform_env.md.nolink) | クエリオブジェクトを変換 (function template) | C++26 |
 | [`execution::apply_sender`](execution/apply_sender.md.nolink) | Senderにタグ型と引数を適用 (function template) | C++26 |
 | [`execution::connect`](execution/connect.md.nolink) | SenderとReceiverを接続 (customization point object) | C++26 |
 | [`execution::connect_result_t`](execution/connect_result_t.md.nolink) | `connect`結果型を取得 (alias template) | C++26 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>completion_signatures_of_t -- execution: env,prop,queryable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/completion_signatures_of_t.html"/>
      <id>2d92c9fd2901685e95c87206c2754827357594fb:reference/execution/execution/completion_signatures_of_t.md</id>
      <updated>2025-04-15T01:16:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/completion_signatures_of_t.md b/reference/execution/execution/completion_signatures_of_t.md
index 6a4fc2009..6429a2714 100644
--- a/reference/execution/execution/completion_signatures_of_t.md
+++ b/reference/execution/execution/completion_signatures_of_t.md
@@ -11,14 +11,14 @@ namespace std::execution {
   using completion_signatures_of_t = call-result-t&amp;lt;get_completion_signatures_t, Sndr, Env&amp;gt;;
 }
 ```
-* env&amp;lt;&amp;gt;[link env.md.nolink]
+* env&amp;lt;&amp;gt;[link env.md]
 * sender_in[link sender_in.md]
 * call-result-t[link call-result-t.md.nolink]
 * sender_in[link sender_in.md]
 
 ## 概要
 
-[Sender型](sender.md)`Sndr`から[環境](env.md.nolink)`Env`における[完了シグネチャ集合](completion_signatures.md)を取得する。
+[Sender型](sender.md)`Sndr`から[環境](env.md)`Env`における[完了シグネチャ集合](completion_signatures.md)を取得する。
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>env -- execution: env,prop,queryable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/env.html"/>
      <id>2d92c9fd2901685e95c87206c2754827357594fb:reference/execution/execution/env.md</id>
      <updated>2025-04-15T01:16:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/env.md b/reference/execution/execution/env.md
new file mode 100644
index 000000000..df547da64
--- /dev/null
+++ b/reference/execution/execution/env.md
@@ -0,0 +1,83 @@
+# env
+* execution[meta header]
+* class template[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  template&amp;lt;queryable... Envs&amp;gt;
+  struct env {
+    Envs0 envs0_;  // exposition only
+    Envs1 envs1_;  // exposition only
+    // ...
+    EnvsN envsN_;  // exposition only
+
+    template&amp;lt;class QueryTag&amp;gt;
+    constexpr decltype(auto) query(QueryTag q) const noexcept;
+  };
+
+  template&amp;lt;class... Envs&amp;gt;
+  env(Envs...) -&amp;gt; env&amp;lt;unwrap_reference_t&amp;lt;Envs&amp;gt;...&amp;gt;;
+}
+```
+* queryable[link ../queryable.md]
+* unwrap_reference_t[link /reference/type_traits/unwrap_reference.md]
+
+## 概要
+クラステンプレート`env`は、複数の[クエリ可能オブジェクト](../queryable.md)からクエリ可能オブジェクトを作成する。
+結果オブジェクト上に対する問い合わせは、各サブオブジェクトに対して宣言順に問い合わせを行うことで解決される。
+
+`env`の特殊化は代入可能ではない。
+
+式リストが単一要素で構成される場合を除いて、`env`が括弧を用いた式リストによる初期化をサポートするか否かは未規定。
+
+
+## メンバ関数
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|-------|
+| `(constructor)` | コンストラクタ | C++26 |
+| `(destructor)`  | デストラクタ   | C++26 |
+| [`query`](env/query.md) | 問い合わせ | C++26 |
+
+
+## 例
+```cpp example
+#include &amp;lt;stop_token&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  auto env = ex::env{
+    ex::prop(std::get_stop_token, std::never_stop_token{})
+  };
+}
+```
+* ex::env[color ff0000]
+* ex::prop[link prop.md]
+* std::never_stop_token[link /reference/stop_token/never_stop_token.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::prop`](prop.md)
+
+
+## 参照
+- [P3325R5 A Utility for Creating Execution Environments](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3325r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>query -- execution: env,prop,queryable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/env/query.html"/>
      <id>2d92c9fd2901685e95c87206c2754827357594fb:reference/execution/execution/env/query.md</id>
      <updated>2025-04-15T01:16:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/env/query.md b/reference/execution/execution/env/query.md
new file mode 100644
index 000000000..171fa25da
--- /dev/null
+++ b/reference/execution/execution/env/query.md
@@ -0,0 +1,80 @@
+# query
+* execution[meta header]
+* std::execution[meta namespace]
+* env[meta class]
+* function template[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class QueryTag&amp;gt;
+constexpr decltype(auto) query(QueryTag q) const noexcept(see below);
+```
+* see below[italic]
+
+## 概要
+クエリオブジェクト`q`に対して問い合わせを行う。
+
+
+## テンプレートパラメータ制約
+説明専用のコンセプト`has-query`を次のように定義したとき、`(has-query&amp;lt;Envs, QueryTag&amp;gt; || ...)`が`true`であること。
+
+```cpp
+template&amp;lt;class Env, class QueryTag&amp;gt;
+concept has-query =
+  requires (const Env&amp;amp; env) {
+    env.query(QueryTag());
+  };
+```
+
+## 効果
+説明用の`fe`を、`env`クラステンプレートの説明専用メンバ変数`envs0_`, ..., `envsN_`のうち最初に式`fe.query(q)`が適格となる要素としたとき、下記と等価。
+
+```cpp
+return fe.query(q);
+```
+
+## 例外
+式`fe.query(q)`が`true`のとき、例外送出しない。
+
+
+## 例
+```cpp example
+#include &amp;lt;concepts&amp;gt;
+#include &amp;lt;stop_token&amp;gt;
+#include &amp;lt;execution&amp;gt;
+using ex = std::execution;
+
+int main()
+{
+  auto env = ex::env{
+    ex::prop(std::get_stop_token, std::stop_token{}),
+    ex::prop(std::get_allocator, std::allocator&amp;lt;std::byte&amp;gt;{}),
+    ex::prop(std::get_stop_token, std::never_stop_token{}),
+  };
+
+  auto token = env.query(std::get_stop_token);
+  static_assert(std::same_as&amp;lt;decltype(token), std::stop_token&amp;gt;);
+}
+```
+* query[color ff0000]
+* ex::env[link ../env.md]
+* ex::prop[link ../prop.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P3325R5 A Utility for Creating Execution Environments](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3325r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>prop -- execution: env,prop,queryable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/prop.html"/>
      <id>2d92c9fd2901685e95c87206c2754827357594fb:reference/execution/execution/prop.md</id>
      <updated>2025-04-15T01:16:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/prop.md b/reference/execution/execution/prop.md
new file mode 100644
index 000000000..064085cf1
--- /dev/null
+++ b/reference/execution/execution/prop.md
@@ -0,0 +1,75 @@
+# prop
+* execution[meta header]
+* class template[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  template&amp;lt;class QueryTag, class ValueType&amp;gt;
+  struct prop {
+    QueryTag query_;   // exposition only
+    ValueType value_;  // exposition only
+
+    constexpr const ValueType&amp;amp; query(QueryTag) const noexcept {
+      return value_;
+    }
+  };
+
+  template&amp;lt;class QueryTag, class ValueType&amp;gt;
+  prop(QueryTag, ValueType) -&amp;gt; prop&amp;lt;QueryTag, unwrap_reference_t&amp;lt;ValueType&amp;gt;&amp;gt;;
+}
+```
+* unwrap_reference_t[link /reference/type_traits/unwrap_reference.md]
+
+## 概要
+`QueryTag`型クエリオブジェクトのキーと`ValueType`型の値から、読み取り専用の[クエリ可能オブジェクト](../queryable.md)を構築する。
+
+
+## 適格要件
+説明用の`prop-like`テンプレートクラスを用いて、`QueryTag`と`ValueType`が`callable&amp;lt;QueryTag, prop-like&amp;lt;ValueType&amp;gt;&amp;gt;`のモデルであること。
+
+```cpp
+template&amp;lt;class ValueType&amp;gt;
+struct prop-like {
+  const ValueType&amp;amp; query(auto) const noexcept;
+};
+```
+
+
+## 例
+```cpp example
+#include &amp;lt;stop_token&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  auto env0 = ex::prop(std::get_stop_token, std::never_stop_token{});
+}
+```
+* ex::prop[color ff0000]
+* std::never_stop_token[link /reference/stop_token/never_stop_token.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::env`](env.md)
+
+
+## 参照
+- [P3325R5 A Utility for Creating Execution Environments](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3325r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>receiver -- execution: env,prop,queryable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/receiver.html"/>
      <id>2d92c9fd2901685e95c87206c2754827357594fb:reference/execution/execution/receiver.md</id>
      <updated>2025-04-15T01:16:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/receiver.md b/reference/execution/execution/receiver.md
index b611d9882..bb7c46198 100644
--- a/reference/execution/execution/receiver.md
+++ b/reference/execution/execution/receiver.md
@@ -19,7 +19,7 @@ namespace std::execution {
 }
 ```
 * get_env[link get_env.md.nolink]
-* queryable[link queryable.md.nolink]
+* queryable[link ../queryable.md]
 * derived_from[link /reference/concepts/derived_from.md]
 * move_constructible[link /reference/concepts/move_constructible.md]
 * constructible_from[link /reference/concepts/constructible_from.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>scheduler -- execution: env,prop,queryable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/scheduler.html"/>
      <id>2d92c9fd2901685e95c87206c2754827357594fb:reference/execution/execution/scheduler.md</id>
      <updated>2025-04-15T01:16:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/scheduler.md b/reference/execution/execution/scheduler.md
index 7c1ea0931..a89bb8d47 100644
--- a/reference/execution/execution/scheduler.md
+++ b/reference/execution/execution/scheduler.md
@@ -24,7 +24,7 @@ namespace std::execution {
 ```
 * derived_from[link /reference/concepts/derived_from.md]
 * sender[link sender.md]
-* queryable[link queryable.md.nolink]
+* queryable[link ../queryable.md]
 * get_completion_scheduler[link get_completion_scheduler.md.nolink]
 * set_value_t[link set_value.md]
 * get_env[link get_env.md.nolink]
@@ -36,8 +36,8 @@ namespace std::execution {
 
 下記をみたすクラス型はSchedulerとみなせる。
 
-- `scheduler_t`をメンバ型`Sch::scheduler_concept`として定義するクラス型
-- [問い合わせ可能](queryable.md.nolink)であること
+- `scheduler_t`をメンバ型`Sch::scheduler_concept`として定義するクラス
+- [クエリ可能オブジェクト](../queryable.md)であること
 - `Sch`型の値`sch`に対して下記が有効な式であること
     - [`execution::schedule`](schedule.md.nolink)`(sch)`が[Sender](sender.md)を返すこと
     - [`execution::get_completion_scheduler`](get_completion_scheduler.md.nolink)`&amp;lt;`[`set_value_t`](set_value.md)`&amp;gt;(`[`execution::get_env`](get_env.md.nolink)`(`[`execution::schedule`](schedule.md.nolink)`(sch)))`の結果が`Sch`型に等しいこと
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sender -- execution: env,prop,queryable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/sender.html"/>
      <id>2d92c9fd2901685e95c87206c2754827357594fb:reference/execution/execution/sender.md</id>
      <updated>2025-04-15T01:16:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/sender.md b/reference/execution/execution/sender.md
index 19c77f609..7d065640c 100644
--- a/reference/execution/execution/sender.md
+++ b/reference/execution/execution/sender.md
@@ -48,7 +48,7 @@ struct env-promise : with-await-transform&amp;lt;env-promise&amp;lt;Env&amp;gt;&amp;gt; {
 };
 ```
 * is-awaitable[link ../is-awaitable.md]
-* env&amp;lt;&amp;gt;[link env.md.nolink]
+* env&amp;lt;&amp;gt;[link env.md]
 * derived_from[link /reference/concepts/derived_from.md]
 * coroutine_handle&amp;lt;&amp;gt;[link /reference/coroutine/coroutine_handle.md]
 * unspecified[italic]
@@ -66,7 +66,7 @@ concept sender =
   constructible_from&amp;lt;remove_cvref_t&amp;lt;Sndr&amp;gt;, Sndr&amp;gt;;
 ```
 * get_env[link get_env.md.nolink]
-* queryable[link queryable.md.nolink]
+* queryable[link ../queryable.md]
 * move_constructible[link /reference/concepts/move_constructible.md]
 * constructible_from[link /reference/concepts/constructible_from.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sender_in -- execution: env,prop,queryable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/sender_in.html"/>
      <id>2d92c9fd2901685e95c87206c2754827357594fb:reference/execution/execution/sender_in.md</id>
      <updated>2025-04-15T01:16:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/sender_in.md b/reference/execution/execution/sender_in.md
index f068b6882..1ef582f4d 100644
--- a/reference/execution/execution/sender_in.md
+++ b/reference/execution/execution/sender_in.md
@@ -16,13 +16,13 @@ namespace std::execution {
     };
 }
 ```
-* env&amp;lt;&amp;gt;[link env.md.nolink]
+* env&amp;lt;&amp;gt;[link env.md]
 * sender[link sender.md]
-* queryable[link queryable.md.nolink]
+* queryable[link ../queryable.md]
 * get_completion_signatures[link get_completion_signatures.md.nolink]
 
 ## 概要
-`sender_in`は、[Sender型](sender.md)`Sndr`が[環境](env.md.nolink)`Env`において非同期操作を作成できることを表すコンセプトである。
+`sender_in`は、[Sender型](sender.md)`Sndr`が[環境](env.md)`Env`において非同期操作を作成できることを表すコンセプトである。
 
 
 ## モデル
@@ -55,7 +55,7 @@ int main()
 * ex::sender_in[color ff0000]
 * ex::sender[link sender.md]
 * ex::just[link just.md.nolink]
-* ex::env&amp;lt;&amp;gt;[link env.md.nolink]
+* ex::env&amp;lt;&amp;gt;[link env.md]
 
 ### 出力
 ```
@@ -75,7 +75,7 @@ int main()
 
 ## 関連項目
 - [`execution::sender`](sender.md)
-- [`execution::env`](env.md.nolink)
+- [`execution::env`](env.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>queryable -- execution: env,prop,queryable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/queryable.html"/>
      <id>2d92c9fd2901685e95c87206c2754827357594fb:reference/execution/queryable.md</id>
      <updated>2025-04-15T01:16:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/queryable.md b/reference/execution/queryable.md
new file mode 100644
index 000000000..346b7d038
--- /dev/null
+++ b/reference/execution/queryable.md
@@ -0,0 +1,33 @@
+# queryable
+* execution[meta header]
+* concept[meta id-type]
+* std[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class T&amp;gt;
+concept queryable = destructible&amp;lt;T&amp;gt;;
+```
+* destructible[link /reference/concepts/destructible.md]
+
+## 概要
+`queryable`は、型`T`がクエリ可能オブジェクトの制約を満たすことを表す説明専用のコンセプトである。
+
+
+## モデル
+説明用の`env`を`Env`型のオブジェクトとする。
+呼び出し可能オブジェクト`q`と部分式パック`args`に対して、`requires { q(env, args...) }`が`true`であれば、`q(env, args...)`が`q`に課されるセマンティック要件を満たす場合に、`Env`は`queryable`のモデルである。
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 関連項目
+- [`execution::prop`](execution/prop.md)
+- [`execution::env`](execution/env.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スタイル -- execution: env,prop,queryable (#1384)</title>
      <link href="https://cpprefjp.github.io/working_style.html"/>
      <id>2d92c9fd2901685e95c87206c2754827357594fb:working_style.md</id>
      <updated>2025-04-15T01:16:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/working_style.md b/working_style.md
index ed10d259b..86ed8088d 100644
--- a/working_style.md
+++ b/working_style.md
@@ -126,7 +126,8 @@ C++11以降対応については対応バージョンを明記します。バー
 | predicate                          | 述語                         |
 | propagation, propagate             | 伝播&amp;lt;br/&amp;gt; (伝搬は誤用が広まったものなので使わない) |
 | pure virtual function              | 純粋仮想関数                 |
-| query object                       | 問い合わせオブジェクト       | 
+| query object                       | クエリオブジェクト           |
+| queryable object                   | クエリ可能オブジェクト       |
 | random access iterator             | ランダムアクセスイテレータ   |
 | range                              | 一般用途の場合：範囲&amp;lt;br/&amp;gt; Rangeアルゴリズム・Rangeアダプタ・Rangeオブジェクトの場合：Range&amp;lt;br/&amp;gt; range-based for：範囲for文&amp;lt;br/&amp;gt; 2つのイテレータによる範囲：イテレータ範囲 |
 | region of RCU protection           | RCU保護区間                  |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sender -- execution: is-awaitable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/sender.html"/>
      <id>c22f5566bef585080db7bde797aa85e25ba1e413:reference/execution/execution/sender.md</id>
      <updated>2025-04-14T22:11:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/sender.md b/reference/execution/execution/sender.md
index 671e7c6cc..19c77f609 100644
--- a/reference/execution/execution/sender.md
+++ b/reference/execution/execution/sender.md
@@ -47,7 +47,7 @@ struct env-promise : with-await-transform&amp;lt;env-promise&amp;lt;Env&amp;gt;&amp;gt; {
   const Env&amp;amp; get_env() const noexcept;
 };
 ```
-* is-awaitable[link is-awaitable.md.nolink]
+* is-awaitable[link ../is-awaitable.md]
 * env&amp;lt;&amp;gt;[link env.md.nolink]
 * derived_from[link /reference/concepts/derived_from.md]
 * coroutine_handle&amp;lt;&amp;gt;[link /reference/coroutine/coroutine_handle.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is-awaitable -- execution: is-awaitable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/is-awaitable.html"/>
      <id>c22f5566bef585080db7bde797aa85e25ba1e413:reference/execution/is-awaitable.md</id>
      <updated>2025-04-14T22:11:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/is-awaitable.md b/reference/execution/is-awaitable.md
new file mode 100644
index 000000000..c5cd3bec2
--- /dev/null
+++ b/reference/execution/is-awaitable.md
@@ -0,0 +1,66 @@
+# is-awaitable
+* execution[meta header]
+* concept[meta id-type]
+* std[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class C, class Promise&amp;gt;
+concept is-awaitable;
+```
+
+## 概要
+`is-awaitable`は、Promise型をもつ[コルーチンのco_await演算子](/lang/cpp20/coroutines.md)オペランドにおいて`C`型オブジェクトが妥当であることを表す説明専用コンセプトである。
+
+
+## 要件
+説明用の式`GET-AWAITER(c, p)`を、Promise型`p`をもつコルーチン内の`co_await`演算子オペランドに適用される一連変換後の左辺値とする。
+
+- （有効ならば）Promise型の`await_transform`メンバ関数を適用
+- （有効ならば）`co_await`演算子オーバーロードを適用
+
+また、説明用のコンセプト`await-suspend-result`, `is-awaiter`を以下のように定義する。
+
+```cpp
+template&amp;lt;class T&amp;gt;
+concept await-suspend-result = /*see below*/;
+
+template&amp;lt;class A, class Promise&amp;gt;
+concept is-awaiter =
+  requires (A&amp;amp; a, coroutine_handle&amp;lt;Promise&amp;gt; h) {
+    a.await_ready() ? 1 : 0;
+    { a.await_suspend(h) } -&amp;gt; await-suspend-result;
+    a.await_resume();
+  };
+```
+* coroutine_handle[link /reference/coroutine/coroutine_handle.md]
+
+下記いずれかのうち1つが`true`のとき、`await-suspend-result&amp;lt;T&amp;gt;`は`true`となる。
+
+- `T`が`void`、もしくは
+- `T`が`bool`、もしくは
+- `T`が[`coroutine_handle`](/reference/coroutine/coroutine_handle.md)の特殊化
+
+`is-awaitable`コンセプトは、以下のように定義される。
+
+```cpp
+template&amp;lt;class C, class Promise&amp;gt;
+concept is-awaitable =
+  requires (C (*fc)() noexcept, Promise&amp;amp; p) {
+    { GET-AWAITER(fc(), p) } -&amp;gt; is-awaiter&amp;lt;Promise&amp;gt;;
+  };
+```
+* GET-AWAITER[italic]
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 関連項目
+- [コルーチン](/lang/cpp20/coroutines.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>execution -- execution: set_value,set_error,set_stopped (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>4220eb12586f2a76d36d7fa6533bb4f78944eaa7:reference/execution/execution.md</id>
      <updated>2025-04-14T16:37:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index 1814d74cd..920223549 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -64,9 +64,9 @@ namespace std::execution {
 |------|------|----------------|
 | [`execution::receiver`](execution/receiver.md) | Receiver型 (concept) | C++26 |
 | [`execution::receiver_of`](execution/receiver_of.md) | 指定完了シグネチャ集合に適合するReceiver (concept) | C++26 |
-| [`execution::set_value`](execution/set_value.md.nolink) | 値による完了関数 (customization point object) | C++26 |
-| [`execution::set_error`](execution/set_error.md.nolink) | エラーによる完了関数 (customization point object) | C++26 |
-| [`execution::set_stopped`](execution/set_stopped.md.nolink) | 停止による完了関数 (customization point object) | C++26 |
+| [`execution::set_value`](execution/set_value.md) | 値完了関数 (customization point object) | C++26 |
+| [`execution::set_error`](execution/set_error.md) | エラー完了関数 (customization point object) | C++26 |
+| [`execution::set_stopped`](execution/set_stopped.md) | 停止完了関数 (customization point object) | C++26 |
 
 ### Operation State
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>completion_signatures -- execution: set_value,set_error,set_stopped (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/completion_signatures.html"/>
      <id>4220eb12586f2a76d36d7fa6533bb4f78944eaa7:reference/execution/execution/completion_signatures.md</id>
      <updated>2025-04-14T16:37:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/completion_signatures.md b/reference/execution/execution/completion_signatures.md
index 1db91919a..b45088cbb 100644
--- a/reference/execution/execution/completion_signatures.md
+++ b/reference/execution/execution/completion_signatures.md
@@ -25,9 +25,9 @@ concept completion-signature = see below;
 * see below[italic]
 
 型`Fn`が下記いずれかを満たす関数型であるとき、`Fn`はコンセプト`completion-signature`を満たす。
-- `set_value_t(Vs...)`（`Vs`はオブジェクト型または参照型のパック）
-- `set_error_t(Err)`（`Err`はオブジェクト型または参照型）
-- `set_stopped_t()`
+- [`set_value_t`](set_value.md)`(Vs...)`（`Vs`はオブジェクト型または参照型のパック）
+- [`set_error_t`](set_error.md)`(Err)`（`Err`はオブジェクト型または参照型）
+- [`set_stopped_t`](set_stopped.md)`()`
 
 
 ## 例
@@ -50,6 +50,9 @@ int main()
 }
 ```
 * ex::completion_signatures[color ff0000]
+* ex::set_value_t[link set_value.md]
+* ex::set_error_t[link set_error.md]
+* ex::set_stopped_t[link set_stopped.md]
 * std::exception_ptr[link /reference/exception/exception_ptr.md]
 
 ### 出力
@@ -70,6 +73,9 @@ int main()
 
 ## 関連項目
 - [`execution::receiver`](receiver.md)
+- [`execution::set_value_t`](set_value.md)
+- [`execution::set_error_t`](set_error.md)
+- [`execution::set_stopped_t`](set_stopped.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operation_state -- execution: set_value,set_error,set_stopped (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/operation_state.html"/>
      <id>4220eb12586f2a76d36d7fa6533bb4f78944eaa7:reference/execution/execution/operation_state.md</id>
      <updated>2025-04-14T16:37:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/operation_state.md b/reference/execution/execution/operation_state.md
index 09d93bb90..d221a8332 100644
--- a/reference/execution/execution/operation_state.md
+++ b/reference/execution/execution/operation_state.md
@@ -61,6 +61,7 @@ int main()
 }
 ```
 * ex::operation_state[color ff0000]
+* ex::receiver_t[link receiver.md]
 * ex::sender[link sender.md]
 * ex::just[link just.md.nolink]
 * ex::connect[link connect.md.nolink]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>receiver_of -- execution: set_value,set_error,set_stopped (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/receiver_of.html"/>
      <id>4220eb12586f2a76d36d7fa6533bb4f78944eaa7:reference/execution/execution/receiver_of.md</id>
      <updated>2025-04-14T16:37:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/receiver_of.md b/reference/execution/execution/receiver_of.md
index e030a93fb..5c16cab79 100644
--- a/reference/execution/execution/receiver_of.md
+++ b/reference/execution/execution/receiver_of.md
@@ -52,25 +52,38 @@ concept receiver_of =
 #include &amp;lt;execution&amp;gt;
 namespace ex = std::execution;
 
-struct ValueReceiver {
+struct MyReceiver {
   using receiver_concept = ex::receiver_t;
 
-  void set_value(int) noexcept;
+  void set_value(int, int) &amp;amp;&amp;amp; noexcept;
+  void set_error(int) &amp;amp;&amp;amp; noexcept;
 };
 
 int main()
 {
-  // 完了操作ex::set_value(int)に対応
-  static_assert(ex::receiver_of&amp;lt;ValueReceiver,
+  // 完了操作ex::set_value(int, int)に対応
+  static_assert(ex::receiver_of&amp;lt;MyReceiver,
+    ex::completion_signatures&amp;lt;ex::set_value_t(int, int)&amp;gt;&amp;gt;);
+
+  // 完了操作ex::set_value(int)には非対応
+  static_assert(not ex::receiver_of&amp;lt;MyReceiver,
     ex::completion_signatures&amp;lt;ex::set_value_t(int)&amp;gt;&amp;gt;);
 
-  // 完了操作ex::set_value(int, int)には非対応
-  static_assert(not ex::receiver_of&amp;lt;ValueReceiver,
-    ex::completion_signatures&amp;lt;ex::set_value_t(int, int)&amp;gt;&amp;gt;);
+  // 完了操作ex::set_error(int)に対応
+  static_assert(ex::receiver_of&amp;lt;MyReceiver,
+    ex::completion_signatures&amp;lt;ex::set_error_t(int)&amp;gt;&amp;gt;);
+
+  // 完了操作ex::set_stopped()には非対応
+  static_assert(not ex::receiver_of&amp;lt;MyReceiver,
+    ex::completion_signatures&amp;lt;ex::set_stopped_t()&amp;gt;&amp;gt;);
 }
 ```
 * ex::receiver_of[color ff0000]
+* ex::receiver_t[link receiver.md]
 * ex::completion_signatures[link completion_signatures.md]
+* ex::set_value_t[link set_value.md]
+* ex::set_error_t[link set_error.md]
+* ex::set_stopped_t[link set_stopped.md]
 
 ### 出力
 ```
@@ -90,6 +103,9 @@ int main()
 
 ## 関連項目
 - [`execution::receiver`](receiver.md)
+- [`execution::set_value_t`](set_value.md)
+- [`execution::set_error_t`](set_error.md)
+- [`execution::set_stopped_t`](set_stopped.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>scheduler -- execution: set_value,set_error,set_stopped (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/scheduler.html"/>
      <id>4220eb12586f2a76d36d7fa6533bb4f78944eaa7:reference/execution/execution/scheduler.md</id>
      <updated>2025-04-14T16:37:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/scheduler.md b/reference/execution/execution/scheduler.md
index 364157770..7c1ea0931 100644
--- a/reference/execution/execution/scheduler.md
+++ b/reference/execution/execution/scheduler.md
@@ -23,8 +23,10 @@ namespace std::execution {
 }
 ```
 * derived_from[link /reference/concepts/derived_from.md]
+* sender[link sender.md]
 * queryable[link queryable.md.nolink]
 * get_completion_scheduler[link get_completion_scheduler.md.nolink]
+* set_value_t[link set_value.md]
 * get_env[link get_env.md.nolink]
 * equality_comparable[link /reference/concepts/equality_comparable.md]
 * copyable[link /reference/concepts/copyable.md]
@@ -38,7 +40,7 @@ namespace std::execution {
 - [問い合わせ可能](queryable.md.nolink)であること
 - `Sch`型の値`sch`に対して下記が有効な式であること
     - [`execution::schedule`](schedule.md.nolink)`(sch)`が[Sender](sender.md)を返すこと
-    - [`execution::get_completion_scheduler`](get_completion_scheduler.md.nolink)`&amp;lt;set_value_t&amp;gt;(`[`execution::get_env`](get_env.md.nolink)`(`[`execution::schedule`](schedule.md.nolink)`(sch)))`の結果が`Sch`型に等しいこと
+    - [`execution::get_completion_scheduler`](get_completion_scheduler.md.nolink)`&amp;lt;`[`set_value_t`](set_value.md)`&amp;gt;(`[`execution::get_env`](get_env.md.nolink)`(`[`execution::schedule`](schedule.md.nolink)`(sch)))`の結果が`Sch`型に等しいこと
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sender_in -- execution: set_value,set_error,set_stopped (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/sender_in.html"/>
      <id>4220eb12586f2a76d36d7fa6533bb4f78944eaa7:reference/execution/execution/sender_in.md</id>
      <updated>2025-04-14T16:37:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/sender_in.md b/reference/execution/execution/sender_in.md
index c5d35fd1b..f068b6882 100644
--- a/reference/execution/execution/sender_in.md
+++ b/reference/execution/execution/sender_in.md
@@ -20,7 +20,6 @@ namespace std::execution {
 * sender[link sender.md]
 * queryable[link queryable.md.nolink]
 * get_completion_signatures[link get_completion_signatures.md.nolink]
-* valid-completion-signatures[link valid-completion-signatures.md.nolink]
 
 ## 概要
 `sender_in`は、[Sender型](sender.md)`Sndr`が[環境](env.md.nolink)`Env`において非同期操作を作成できることを表すコンセプトである。
@@ -29,6 +28,14 @@ namespace std::execution {
 ## モデル
 説明用に`sndr`を`decltype((sndr))`が`Sndr`型となる式、`rcvr`を環境`Env`に関連付けられた[Receiver](receiver.md)とする。
 
+```cpp
+template&amp;lt;class Sigs&amp;gt;
+concept valid-completion-signatures = see below;
+```
+* see below[italic]
+
+[`completion_signatures`](completion_signatures.md)クラステンプレートの特殊化であるとき、`Sigs`は説明専用コンセプト`valid-completion-signatures`のモデルである。
+
 また、ある完了操作の完了シグネチャが[`completion_signatures_of_t`](completion_signatures_of_t.md)`&amp;lt;Sndr, Env&amp;gt;`で取得される[`completion_signatures`](completion_signatures.md)リストに含まれるとき、`Sndr`と`Env`における許容可能完了(permissible completion)となる。
 
 `sndr`と`rcvr`の接続後に[Operation State](operation_state.md)を開始することで評価されうる完了操作が、全て許容可能完了(permissible completion)である場合、`Sndr`と`Env`は`sender_in&amp;lt;Sndr, Env&amp;gt;`のモデルとなる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sender_to -- execution: set_value,set_error,set_stopped (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/sender_to.html"/>
      <id>4220eb12586f2a76d36d7fa6533bb4f78944eaa7:reference/execution/execution/sender_to.md</id>
      <updated>2025-04-14T16:37:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/sender_to.md b/reference/execution/execution/sender_to.md
index 84fc45ba8..45082ae5e 100644
--- a/reference/execution/execution/sender_to.md
+++ b/reference/execution/execution/sender_to.md
@@ -34,7 +34,7 @@ namespace ex = std::execution;
 struct ValueReceiver {
   using receiver_concept = ex::receiver_t;
 
-  void set_value(int v) noexcept
+  void set_value(int v) &amp;amp;&amp;amp; noexcept
   {
     std::println(&amp;#34;{}&amp;#34;, v);
   }
@@ -56,6 +56,7 @@ int main()
 }
 ```
 * ex::sender_to[color ff0000]
+* ex::receiver_t[link receiver.md]
 * ex::sender[link sender.md]
 * ex::just[link just.md.nolink]
 * ex::operation_state[link operation_state.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_error -- execution: set_value,set_error,set_stopped (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/set_error.html"/>
      <id>4220eb12586f2a76d36d7fa6533bb4f78944eaa7:reference/execution/execution/set_error.md</id>
      <updated>2025-04-14T16:37:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/set_error.md b/reference/execution/execution/set_error.md
new file mode 100644
index 000000000..f98c2cb99
--- /dev/null
+++ b/reference/execution/execution/set_error.md
@@ -0,0 +1,84 @@
+# set_error
+* execution[meta header]
+* cpo[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  struct set_error_t { unspecified };  // タグ型
+
+  inline constexpr set_error_t set_error{};
+}
+```
+* unspecified[italic]
+
+## 概要
+`set_error`は、非同期操作の失敗完了を表現するエラー(error)完了関数である。完了関数の呼び出しは完了操作と呼ばれる。
+
+エラー完了関数には完了タグ`set_error_t`が関連付けられ、完了操作のエラー完了シグネチャは戻り値型`set_error_t`と1個の引数を持つ関数型として表現される。
+
+
+## 効果
+- 引数`rcvr`が左辺値またはconst右辺値の場合、式`set_error(rcvr, err)`は不適格となる。
+- そうでなければ、`rcvr.set_error(err)`と等価である。
+
+
+## 例外
+投げない
+
+
+## カスタマイゼーションポイント
+[Receiver型](receiver.md)の非const右辺値`rcvr`に対して式`rcvr.set_error(err)`が呼び出される。
+このとき、`noexcept(rcvr.set_error(err)) == true`であること。
+
+
+## 備考
+完了関数`set_error`は[Sender](sender.md)内部実装から呼び出される想定であり、実行制御ライブラリ利用者が直接利用する必要はない。
+
+
+## 例
+```cpp example
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+struct ErrorReceiver {
+  using receiver_concept = ex::receiver_t;
+
+  // エラー完了シグネチャ set_error_t(int)
+  void set_error(int) &amp;amp;&amp;amp; noexcept {}
+};
+
+int main()
+{
+  ErrorReceiver rcvr;
+  ex::set_error(std::move(rcvr), 42);
+}
+```
+* ex::set_error[color ff0000]
+* ex::receiver_t[link receiver.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::receiver`](receiver.md)
+- [`execution::set_value_t`](set_value.md)
+- [`execution::set_stopped_t`](set_stopped.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_stopped -- execution: set_value,set_error,set_stopped (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/set_stopped.html"/>
      <id>4220eb12586f2a76d36d7fa6533bb4f78944eaa7:reference/execution/execution/set_stopped.md</id>
      <updated>2025-04-14T16:37:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/set_stopped.md b/reference/execution/execution/set_stopped.md
new file mode 100644
index 000000000..d3963f57b
--- /dev/null
+++ b/reference/execution/execution/set_stopped.md
@@ -0,0 +1,84 @@
+# set_stopped
+* execution[meta header]
+* cpo[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  struct set_stopped_t { unspecified };  // タグ型
+
+  inline constexpr set_stopped_t set_stopped{};
+}
+```
+* unspecified[italic]
+
+## 概要
+`set_stopped`は、非同期操作のキャンセル完了を表現する停止(stopped)完了関数である。完了関数の呼び出しは完了操作と呼ばれる。
+
+停止完了関数には完了タグ`set_stopped_t`が関連付けられ、完了操作の停止完了シグネチャは戻り値型`set_stopped_t`と0個の引数を持つ関数型として表現される。
+
+
+## 効果
+- 引数`rcvr`が左辺値またはconst右辺値の場合、式`set_stopped(rcvr)`は不適格となる。
+- そうでなければ、`rcvr.set_stopped()`と等価である。
+
+
+## 例外
+投げない
+
+
+## カスタマイゼーションポイント
+[Receiver型](receiver.md)の非const右辺値`rcvr`に対して式`rcvr.set_stopped()`が呼び出される。
+このとき、`noexcept(rcvr.set_stopped()) == true`であること。
+
+
+## 備考
+完了関数`set_stopped`は[Sender](sender.md)内部実装から呼び出される想定であり、実行制御ライブラリ利用者が直接利用する必要はない。
+
+
+## 例
+```cpp example
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+struct StoppedReceiver {
+  using receiver_concept = ex::receiver_t;
+
+  // 停止完了シグネチャ set_stopped_t()
+  void set_stopped() &amp;amp;&amp;amp; noexcept {}
+};
+
+int main()
+{
+  StoppedReceiver rcvr;
+  ex::set_stopped(std::move(rcvr));
+}
+```
+* ex::set_stopped[color ff0000]
+* ex::receiver_t[link receiver.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::receiver`](receiver.md)
+- [`execution::set_value_t`](set_value.md)
+- [`execution::set_error_t`](set_error.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_value -- execution: set_value,set_error,set_stopped (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/set_value.html"/>
      <id>4220eb12586f2a76d36d7fa6533bb4f78944eaa7:reference/execution/execution/set_value.md</id>
      <updated>2025-04-14T16:37:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/set_value.md b/reference/execution/execution/set_value.md
new file mode 100644
index 000000000..65984ab5b
--- /dev/null
+++ b/reference/execution/execution/set_value.md
@@ -0,0 +1,84 @@
+# set_value
+* execution[meta header]
+* cpo[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  struct set_value_t { unspecified };  // タグ型
+
+  inline constexpr set_value_t set_value{};
+}
+```
+* unspecified[italic]
+
+## 概要
+`set_value`は、非同期操作の正常完了を表現する値(value)完了関数である。完了関数の呼び出しは完了操作と呼ばれる。
+
+値完了関数には完了タグ`set_value_t`が関連付けられ、完了操作の値完了シグネチャは戻り値型`set_value_t`と任意個の引数を持つ関数型として表現される。
+
+
+## 効果
+- 引数`rcvr`が左辺値またはconst右辺値の場合、式`set_value(rcvr, vs...)`は不適格となる。
+- そうでなければ、`rcvr.set_value(vs...)`と等価である。
+
+
+## 例外
+投げない
+
+
+## カスタマイゼーションポイント
+[Receiver型](receiver.md)の非const右辺値`rcvr`に対して式`rcvr.set_value(vs...)`が呼び出される。
+このとき、`noexcept(rcvr.set_value(vs...)) == true`であること。
+
+
+## 備考
+完了関数`set_value`は[Sender](sender.md)内部実装から呼び出される想定であり、実行制御ライブラリ利用者が直接利用する必要はない。
+
+
+## 例
+```cpp example
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+struct ValueReceiver {
+  using receiver_concept = ex::receiver_t;
+
+  // 値完了シグネチャ set_value_t(int, int)
+  void set_value(int, int) &amp;amp;&amp;amp; noexcept {}
+};
+
+int main()
+{
+  ValueReceiver rcvr;
+  ex::set_value(std::move(rcvr), 1, 2);
+}
+```
+* ex::set_value[color ff0000]
+* ex::receiver_t[link receiver.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::receiver`](receiver.md)
+- [`execution::set_error_t`](set_error.md)
+- [`execution::set_stopped_t`](set_stopped.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スタイル -- execution: set_value,set_error,set_stopped (#1384)</title>
      <link href="https://cpprefjp.github.io/working_style.html"/>
      <id>4220eb12586f2a76d36d7fa6533bb4f78944eaa7:working_style.md</id>
      <updated>2025-04-14T16:37:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/working_style.md b/working_style.md
index 88d0da3a7..ed10d259b 100644
--- a/working_style.md
+++ b/working_style.md
@@ -71,8 +71,10 @@ C++11以降対応については対応バージョンを明記します。バー
 | base class                         | 基底クラス                   |
 | bidirectional iterator             | 双方向イテレータ             |
 | bucket                             | バケット                     |
+| completion function                | 完了関数                     |
 | completion operation               | 完了操作                     |
 | completion signature               | 完了シグネチャ               |
+| completion tag                     | 完了タグ                     |
 | complexity                         | 計算量                       |
 | compound type                      | 複合型                       |
 | const iterator                     | 読み取り専用イテレータ       |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>execution -- execution: scheduler (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>a7e53aef7e9ce247a1032acc329f68bce4f14ba0:reference/execution/execution.md</id>
      <updated>2025-04-13T17:47:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index 2e8c81770..1814d74cd 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -56,7 +56,7 @@ namespace std::execution {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`execution::scheduler`](execution/scheduler.md.nolink) | Scheduler (concept) | C++26 |
+| [`execution::scheduler`](execution/scheduler.md) | Scheduler型 (concept) | C++26 |
 
 ### Receiver
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operation_state -- execution: scheduler (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/operation_state.html"/>
      <id>a7e53aef7e9ce247a1032acc329f68bce4f14ba0:reference/execution/execution/operation_state.md</id>
      <updated>2025-04-13T17:47:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/operation_state.md b/reference/execution/execution/operation_state.md
index c5c20037b..09d93bb90 100644
--- a/reference/execution/execution/operation_state.md
+++ b/reference/execution/execution/operation_state.md
@@ -27,7 +27,7 @@ namespace std::execution {
 下記をみたすクラス型はOperation Stateとみなせる。
 
 - `operation_state_t`をメンバ型`O::operation_state_concept`として定義するクラス型
-- `O`型の左辺値`o`に対して`execution::start(o)`が有効な式かつ例外送出されないこと
+- `O`型の左辺値`o`に対して[`execution::start`](start.md.nolink)`(o)`が有効な式かつ例外送出されないこと
 
 非同期操作の生存期間中に`operation_state`オブジェクトが破棄されると、未定義の動作を引き起こす。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>scheduler -- execution: scheduler (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/scheduler.html"/>
      <id>a7e53aef7e9ce247a1032acc329f68bce4f14ba0:reference/execution/execution/scheduler.md</id>
      <updated>2025-04-13T17:47:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/scheduler.md b/reference/execution/execution/scheduler.md
new file mode 100644
index 000000000..364157770
--- /dev/null
+++ b/reference/execution/execution/scheduler.md
@@ -0,0 +1,80 @@
+# scheduler
+* execution[meta header]
+* concept[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  template&amp;lt;class Sch&amp;gt;
+  concept scheduler =
+    derived_from&amp;lt;typename remove_cvref_t&amp;lt;Sch&amp;gt;::scheduler_concept, scheduler_t&amp;gt; &amp;amp;&amp;amp;
+    queryable&amp;lt;Sch&amp;gt; &amp;amp;&amp;amp;
+    requires(Sch&amp;amp;&amp;amp; sch) {
+      { schedule(std::forward&amp;lt;Sch&amp;gt;(sch)) } -&amp;gt; sender;
+      { auto(get_completion_scheduler&amp;lt;set_value_t&amp;gt;(
+          get_env(schedule(std::forward&amp;lt;Sch&amp;gt;(sch))))) }
+            -&amp;gt; same_as&amp;lt;remove_cvref_t&amp;lt;Sch&amp;gt;&amp;gt;;
+    } &amp;amp;&amp;amp;
+    equality_comparable&amp;lt;remove_cvref_t&amp;lt;Sch&amp;gt;&amp;gt; &amp;amp;&amp;amp;
+    copyable&amp;lt;remove_cvref_t&amp;lt;Sch&amp;gt;&amp;gt;;
+
+  struct scheduler_t {};  // タグ型
+}
+```
+* derived_from[link /reference/concepts/derived_from.md]
+* queryable[link queryable.md.nolink]
+* get_completion_scheduler[link get_completion_scheduler.md.nolink]
+* get_env[link get_env.md.nolink]
+* equality_comparable[link /reference/concepts/equality_comparable.md]
+* copyable[link /reference/concepts/copyable.md]
+
+## 概要
+`scheduler`は、型`Sch`がScheduler型の要件を満たすことを表すコンセプトである。
+
+下記をみたすクラス型はSchedulerとみなせる。
+
+- `scheduler_t`をメンバ型`Sch::scheduler_concept`として定義するクラス型
+- [問い合わせ可能](queryable.md.nolink)であること
+- `Sch`型の値`sch`に対して下記が有効な式であること
+    - [`execution::schedule`](schedule.md.nolink)`(sch)`が[Sender](sender.md)を返すこと
+    - [`execution::get_completion_scheduler`](get_completion_scheduler.md.nolink)`&amp;lt;set_value_t&amp;gt;(`[`execution::get_env`](get_env.md.nolink)`(`[`execution::schedule`](schedule.md.nolink)`(sch)))`の結果が`Sch`型に等しいこと
+
+
+## 例
+```cpp example
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  ex::run_loop loop;
+  ex::scheduler auto sch = loop.get_scheduler();
+}
+```
+* ex::scheduler[color ff0000]
+* ex::run_loop[link run_loop.md.nolink]
+* get_scheduler()[link run_loop/get_scheduler.md.nolink]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::schedule`](schedule.md.nolink)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
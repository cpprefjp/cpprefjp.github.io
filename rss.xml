<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-06-15T04:32:40.959653</updated>
  <id>1115fe2b-4b43-4333-b2e1-188c4866161d</id>

  
    <entry>
      <title>iter_difference_t -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/iter_difference_t.html"/>
      <id>869920574349134310571edb409bd07b5c421723:reference/iterator/iter_difference_t.md</id>
      <updated>2020-06-15T12:59:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/iter_difference_t.md b/reference/iterator/iter_difference_t.md
index 59d225825..520f1e012 100644
--- a/reference/iterator/iter_difference_t.md
+++ b/reference/iterator/iter_difference_t.md
@@ -20,14 +20,14 @@ namespace std {
 
 `RI = remove_cvref_t&amp;lt;I&amp;gt;`とすると、次のどちらか
 
-- [`incrementable_traits`](iterator/incrementable_traits.md)`&amp;lt;RI&amp;gt;::difference_type`
+- [`incrementable_traits`](incrementable_traits.md)`&amp;lt;RI&amp;gt;::difference_type`
     - [`iterator_traits`](iterator_traits.md)`&amp;lt;RI&amp;gt;`がプライマリテンプレートの特殊化となる場合
 - [`iterator_traits`](iterator_traits.md)`&amp;lt;RI&amp;gt;::difference_type`
     - その他の場合
 
 ## 備考
 
-プログラム定義型（ユーザー定義の任意のイテレータ型）でこの結果をカスタマイズするには、[`incrementable_traits`](iterator/incrementable_traits.md)を特殊化する。
+プログラム定義型（ユーザー定義の任意のイテレータ型）でこの結果をカスタマイズするには、[`incrementable_traits`](incrementable_traits.md)を特殊化する。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iter_value_t -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/iter_value_t.html"/>
      <id>869920574349134310571edb409bd07b5c421723:reference/iterator/iter_value_t.md</id>
      <updated>2020-06-15T12:59:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/iter_value_t.md b/reference/iterator/iter_value_t.md
index a55bd50f8..3e077d691 100644
--- a/reference/iterator/iter_value_t.md
+++ b/reference/iterator/iter_value_t.md
@@ -19,14 +19,14 @@ namespace std {
 
 `RI = remove_cvref_t&amp;lt;I&amp;gt;`とすると、次のどちらか
 
-- [`indirectly_readable_traits`](iterator/indirectly_readable_traits.md)`&amp;lt;RI&amp;gt;::value_type`
+- [`indirectly_readable_traits`](indirectly_readable_traits.md)`&amp;lt;RI&amp;gt;::value_type`
     - [`iterator_traits`](iterator_traits.md)`&amp;lt;RI&amp;gt;`がプライマリテンプレートの特殊化となる場合
 - [`iterator_traits`](iterator_traits.md)`&amp;lt;RI&amp;gt;::value_type`
     - その他の場合
 
 ## 備考
 
-プログラム定義型（ユーザー定義の任意のイテレータ型）でこの結果をカスタマイズするには、[`indirectly_readable_traits`](iterator/indirectly_readable_traits.md)を特殊化する。
+プログラム定義型（ユーザー定義の任意のイテレータ型）でこの結果をカスタマイズするには、[`indirectly_readable_traits`](indirectly_readable_traits.md)を特殊化する。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>counting_semaphore -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore.html"/>
      <id>c9fad6ae63786398416745c4bd98591d26feefb1:reference/semaphore/counting_semaphore.md</id>
      <updated>2020-06-15T12:57:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore.md b/reference/semaphore/counting_semaphore.md
index ed495076b..bf671cc63 100644
--- a/reference/semaphore/counting_semaphore.md
+++ b/reference/semaphore/counting_semaphore.md
@@ -16,12 +16,12 @@ namespace std {
 
 カウンティングセマフォ（または単にセマフォ）は他の同期プリミティブを実装するための部品として広く用いられ、セマフォと条件変数のいずれも適用可能なケースでは[`condition_variable`](/reference/condition_variable/condition_variable.md)よりも効率的である。
 
-セマフォは1つのカウンタで状態管理される同期プリミティブとみなせる。カウンタは`0`から最大値[`max()`](counting_semaphore/max.md)までの値をとり、このカウンタ値がセマフォで管理する共有リソースの個数と解釈される。
+セマフォは1つのカウンタで状態管理される同期プリミティブとみなせる。カウンタは`0`から[`max()`](counting_semaphore/max.md)までの値をとり、このカウンタ値がセマフォで管理する共有リソースの個数と解釈される。
 
 - カウンタの最大値はテンプレートパラメータ`least_max_value`にて設定する。省略時は処理系がサポートする最大値が設定される。
 - カウンタの初期値は[コンストラクタ](counting_semaphore/op_constructor.md)でセマフォ構築時に指定する。
-- [`release()`](counting_semaphore/release.md.nolink)メンバ関数呼び出しによりカウンタ値の加算と通知処理、つまり利用可能な共有リソースの増加を表現する。（歴史的にはオランダ語由来の&amp;#34;V操作&amp;#34;と呼ばれる。英語では&amp;#34;up&amp;#34;／&amp;#34;signal&amp;#34;／&amp;#34;post&amp;#34;とも呼ばれる。）
-- [`acquire()`](counting_semaphore/acquire.md.nolink)メンバ関数呼び出しにより待機処理とカウンタ値の減算、つまり利用可能な共有リソースの減少を表現する。（同様に&amp;#34;P操作&amp;#34;や&amp;#34;down&amp;#34;／&amp;#34;wait&amp;#34;／&amp;#34;pend&amp;#34;とも呼ばれる。）
+- [`release()`](counting_semaphore/release.md)メンバ関数呼び出しによりカウンタ値の加算と通知処理、つまり利用可能な共有リソースの増加を表現する。（歴史的にはオランダ語由来の&amp;#34;V操作&amp;#34;と呼ばれる。英語では&amp;#34;up&amp;#34;／&amp;#34;signal&amp;#34;／&amp;#34;post&amp;#34;とも呼ばれる。）
+- [`acquire()`](counting_semaphore/acquire.md)メンバ関数呼び出しにより待機処理とカウンタ値の減算、つまり利用可能な共有リソースの減少を表現する。（同様に&amp;#34;P操作&amp;#34;や&amp;#34;down&amp;#34;／&amp;#34;wait&amp;#34;／&amp;#34;pend&amp;#34;とも呼ばれる。）
 
 カウンティングセマフォの最大値を`1`としたものはバイナリセマフォと呼ばれ、ヘッダ[`&amp;lt;semaphore&amp;gt;`](/reference/semaphore.md)ではエイリアス型`binary_semaphore`として定義される。
 バイナリセマフォはミューテックス（[`mutex`](/reference/mutex/mutex.md)など）と同様に共有リソースの排他制御を実現する同期プリミティブだが、ミューテックスとは異なりスレッドがロックを所有(own)するという概念が存在しない。
@@ -36,14 +36,14 @@ namespace std {
 ## メンバ関数
 ### 構築・破棄
 
-| 名前            | 説明           | 対応バージョン |
-|-----------------|----------------|----------------|
+| 名前             | 説明            | 対応バージョン |
+|-----------------|----------------|------------|
 | [`(constructor)`](counting_semaphore/op_constructor.md) | コンストラクタ | C++20 |
 | `(destructor)` | デストラクタ | C++20 |
 | `operator=(const counting_semaphore&amp;amp;) = delete;` | 代入演算子 | C++20 |
-| [`release`](counting_semaphore/release.md.nolink) | カウンタ値を加算し、待機中スレッドをブロック解除する | C++20 |
-| [`acquire`](counting_semaphore/acquire.md.nolink) | カウンタ値が正数になるまで待機し、カウンタ値を1つ減算する | C++20 |
-| [`try_acquire`](counting_semaphore/try_acquire.md.nolink) | カウンタ値の1減算を試みる | C++20 |
+| [`release`](counting_semaphore/release.md) | カウンタ値を加算し、待機中スレッドをブロック解除する | C++20 |
+| [`acquire`](counting_semaphore/acquire.md) | カウンタ値が`0`より大きくなるまで待機し、カウンタ値を1つ減算する | C++20 |
+| [`try_acquire`](counting_semaphore/try_acquire.md) | カウンタ値の1減算を試みる | C++20 |
 | [`try_acquire_for`](counting_semaphore/try_acquire_for.md.nolink) | 相対時間のタイムアウトを指定して、カウンタ値の1減算を試みる | C++20 |
 | [`try_acquire_until`](counting_semaphore/try_acquire_until.md.nolink) | 絶対時間のタイムアウトを指定して、カウンタ値の1減算を試みる | C++20 |
 
@@ -109,7 +109,6 @@ int main()
 ```
 * std::counting_semaphore[color ff0000]
 
-
 ### 出力
 ```
 100
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>acquire -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/acquire.html"/>
      <id>c9fad6ae63786398416745c4bd98591d26feefb1:reference/semaphore/counting_semaphore/acquire.md</id>
      <updated>2020-06-15T12:57:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/acquire.md b/reference/semaphore/counting_semaphore/acquire.md
new file mode 100644
index 000000000..e48d55d23
--- /dev/null
+++ b/reference/semaphore/counting_semaphore/acquire.md
@@ -0,0 +1,83 @@
+# acquire
+* semaphore[meta header]
+* std[meta namespace]
+* counting_semaphore[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+void acquire();
+```
+
+## 概要
+カウンティングセマフォのカウンタ値が`0`より大きくなるまで待機し、カウンタ値を`1`つ減算してから制御を戻す。
+
+説明のため、ここではカウンタ値を`counter`と表記する。
+
+
+## 効果
+次のステップを繰り返す。
+- [`try_acquire`](try_acquire.md)を評価し、結果が`true`ならば関数呼び出し元へ制御を戻す。
+- `counter`が`0`より大きくなるまで、`*this`上で関数呼び出しスレッドをブロッキングする。
+
+
+## 戻り値
+なし
+
+
+## 例外
+この関数は、以下のerror conditionを持つ[`system_error`](/reference/system_error/system_error.md)例外オブジェクトを送出する可能性がある：
+
+- [`resource_unavailable_try_again`](/reference/system_error/errc.md) : 操作対象のネイティブハンドル型が無効
+- [`operation_not_permitted`](/reference/system_error/errc.md) : スレッドにこの操作を行う権限がない
+
+
+## 備考
+「効果」欄では`acquire`メンバ関数の振る舞いを手続き的に説明しているが、実際の処理系においてはオペレーティングシステムが提供する効率的なセマフォ操作関数が利用されると期待される。
+
+- POSIXセマフォでは[`sem_wait`関数](https://linuxjm.osdn.jp/html/LDP_man-pages/man3/sem_wait.3.html)が提供される。
+- Windowsセマフォでは[`WaitForSingleObject`関数](https://docs.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-waitforsingleobject)ファミリが提供される。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;semaphore&amp;gt;
+#include &amp;lt;thread&amp;gt;
+
+int main()
+{
+  int shared_data = 0;
+  std::counting_semaphore sem{0};
+
+  std::thread t([&amp;amp;]{
+    // 通知を待機し、共有データから読取り
+    sem.acquire();
+    std::cout &amp;lt;&amp;lt; shared_data &amp;lt;&amp;lt; std::endl;
+  });
+
+  // 共有データへ書込み、通知を行う
+  shared_data = 42;
+  sem.release();
+
+  t.join();
+}
+```
+* acquire()[color ff0000]
+* release()[link release.md]
+
+### 出力
+```
+42
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/max.html"/>
      <id>c9fad6ae63786398416745c4bd98591d26feefb1:reference/semaphore/counting_semaphore/max.md</id>
      <updated>2020-06-15T12:57:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/max.md b/reference/semaphore/counting_semaphore/max.md
index d0c5de4bd..038e89e9c 100644
--- a/reference/semaphore/counting_semaphore/max.md
+++ b/reference/semaphore/counting_semaphore/max.md
@@ -25,20 +25,24 @@ static constexpr ptrdiff_t max() noexcept;
 
 ## 例
 ```cpp example
-#include &amp;lt;semaphore&amp;gt;
 #include &amp;lt;iostream&amp;gt;
+#include &amp;lt;semaphore&amp;gt;
 
 int main()
 {
   using Semaphore = std::counting_semaphore&amp;lt;10&amp;gt;;
   std::cout &amp;lt;&amp;lt; Semaphore::max() &amp;lt;&amp;lt; std::endl;
+
+  // 処理系定義のデフォルト値
+  std::cout &amp;lt;&amp;lt; std::counting_semaphore&amp;lt;&amp;gt;::max() &amp;lt;&amp;lt; std::endl;
 }
 ```
-* max[color ff0000]
+* max()[color ff0000]
 
 ### 出力例
 ```
 10
+2147483647
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/op_constructor.html"/>
      <id>c9fad6ae63786398416745c4bd98591d26feefb1:reference/semaphore/counting_semaphore/op_constructor.md</id>
      <updated>2020-06-15T12:57:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/op_constructor.md b/reference/semaphore/counting_semaphore/op_constructor.md
index 87bd3dee0..d96c05fe9 100644
--- a/reference/semaphore/counting_semaphore/op_constructor.md
+++ b/reference/semaphore/counting_semaphore/op_constructor.md
@@ -36,6 +36,7 @@ std::counting_semaphore&amp;lt;1&amp;gt; mtx{1};
 
 int main() {}
 ```
+* std::counting_semaphore[color ff0000]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>release -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/release.html"/>
      <id>c9fad6ae63786398416745c4bd98591d26feefb1:reference/semaphore/counting_semaphore/release.md</id>
      <updated>2020-06-15T12:57:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/release.md b/reference/semaphore/counting_semaphore/release.md
new file mode 100644
index 000000000..764e2b955
--- /dev/null
+++ b/reference/semaphore/counting_semaphore/release.md
@@ -0,0 +1,79 @@
+# release
+* semaphore[meta header]
+* std[meta namespace]
+* counting_semaphore[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+void release(ptrdiff_t update = 1);
+```
+
+## 概要
+カウンティングセマフォのカウンタ値に加算し、待機中スレッドのブロック解除を行う。
+
+説明のため、ここではカウンタ値を`counter`と表記する。
+
+
+## 事前条件
+`update &amp;gt;= 0` かつ `update &amp;lt;=` [`max()`](max.md) `- counter`
+
+
+## 効果
+アトミックに`counter += update`を実行し、`counter`が値`0`より大きくなるまで待機中のスレッド群をブロック解除する。
+
+
+## 戻り値
+なし
+
+
+## 例外
+この関数は、以下のerror conditionを持つ[`system_error`](/reference/system_error/system_error.md)例外オブジェクトを送出する可能性がある：
+
+- [`resource_unavailable_try_again`](/reference/system_error/errc.md) : 操作対象のネイティブハンドル型が無効
+- [`operation_not_permitted`](/reference/system_error/errc.md) : スレッドにこの操作を行う権限がない
+- [`invalid_argument`](/reference/system_error/errc.md) : 実引数が無効
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;semaphore&amp;gt;
+#include &amp;lt;thread&amp;gt;
+
+int main()
+{
+  int shared_data = 0;
+  std::counting_semaphore sem{0};
+
+  std::thread t([&amp;amp;]{
+    // 通知を待機し、共有データから読取り
+    sem.acquire();
+    std::cout &amp;lt;&amp;lt; shared_data &amp;lt;&amp;lt; std::endl;
+  });
+
+  // 共有データへ書込み、通知を行う
+  shared_data = 42;
+  sem.release();
+
+  t.join();
+}
+```
+* release()[color ff0000]
+* acquire()[link acquire.md]
+
+### 出力
+```
+42
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_acquire -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/try_acquire.html"/>
      <id>c9fad6ae63786398416745c4bd98591d26feefb1:reference/semaphore/counting_semaphore/try_acquire.md</id>
      <updated>2020-06-15T12:57:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/try_acquire.md b/reference/semaphore/counting_semaphore/try_acquire.md
new file mode 100644
index 000000000..fc00778c0
--- /dev/null
+++ b/reference/semaphore/counting_semaphore/try_acquire.md
@@ -0,0 +1,81 @@
+# try_acquire
+* semaphore[meta header]
+* std[meta namespace]
+* counting_semaphore[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+bool try_acquire() noexcept;
+```
+
+## 概要
+カウンティングセマフォのカウンタ値が`0`の場合は何もせず`fales`を返し、そうでなければカウンタ値を`1`つ減算して`true`を返す。
+
+説明のため、ここではカウンタ値を`counter`と表記する。
+
+
+## 効果
+`counter &amp;gt; 0`の場合は、呼び出しスレッドをブロッキングすることなく、アトミックに`counter -= 1`を実行する。
+`counter`が減算されなかった場合は、副作用は発生せず`try_acquire`関数は即座に呼び出し元へ戻る。
+
+処理系には、`counter &amp;gt; 0`であっても`counter`の減算に失敗することが許容される。
+ただし、セマフォに対する操作が競合していない状況下において、`try_acquire`が一貫して`false`を返すような実装は許容されない。
+（Spurious Failure が生じることは滅多にないが、これによりアトミック変数を用いた Swap-and-Compare ベースの興味深い実装が許容される。）
+
+
+## 戻り値
+`counter`が減算された場合は`true`を返し、そうでなければ`false`を返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;semaphore&amp;gt;
+#include &amp;lt;thread&amp;gt;
+
+int main()
+{
+  int shared_data = 0;
+  std::counting_semaphore sem{0};
+
+  std::thread t([&amp;amp;]{
+    // 通知を待機し、共有データから読取り
+    while (!sem.try_acquire()) {
+      std::this_thread::yield();
+      // ここではtry_acquire()動作例示のためビジーループを行うが、
+      // セマフォ待機が目的であればacquire()利用が適切である。
+    }
+    std::cout &amp;lt;&amp;lt; shared_data &amp;lt;&amp;lt; std::endl;
+  });
+
+  // 共有データへ書込み、通知を行う
+  shared_data = 42;
+  sem.release();
+
+  t.join();
+}
+```
+* try_acquire()[color ff0000]
+* acquire()[link acquire.md]
+* release()[link release.md]
+
+### 出力
+```
+42
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iterator -- incrementable/indirectly_readable_traits追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator.html"/>
      <id>a9ac708162bec37519ce204c57bb8c8617dcb2f2:reference/iterator.md</id>
      <updated>2020-06-15T12:57:00+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;iterator&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;ヘッダでは、イテレータに関する機能群を提供する。
イテレータは日本語では反復子とも呼ばれ、配列やコンテナのような範囲を横断する手段として使用できる。&lt;/p&gt;
&lt;p&gt;C++標準ライブラリのイテレータは、以下のように階層的に定義される。
この階層はC++言語機能の継承と同じように見なせる。たとえば、入力イテレータと前方向イテレータはis a関係が成り立っており、前方向イテレータは入力イテレータと見なすことができる。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.github.com/cpprefjp/image/master/reference/iterator/iterators.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;C++20以降の標準ライブラリでは、任意のイテレータに対して可能な操作によって上記5つに隣接イテレータ（&lt;em&gt;contiguous iterator&lt;/em&gt;）を加えた6つのイテレータカテゴリを定義する。それぞれ次のイテレータコンセプトが対応する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;入力イテレータ : &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/input_iterator.md.nolink&#34;&gt;input_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;出力イテレータ : &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/output_iterator.md.nolink&#34;&gt;output_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;前方向イテレータ : &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/forward_iterator.md.nolink&#34;&gt;forward_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;双方向イテレータ : &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/bidirectional_iterator.md.nolink&#34;&gt;bidirectional_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ランダムアクセスイテレータ : &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/random_access_iterator.md.nolink&#34;&gt;random_access_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;隣接イテレータ : &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/contiguous_iterator.md.nolink&#34;&gt;contiguous_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このヘッダでは、以下の標準ヘッダをインクルードする：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/concepts.html&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt; (C++20)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt; (C++20)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;イテレータの情報&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;iterator_traits&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータに関する型情報(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator.html&#34;&gt;iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータを定義するための基底クラス(class template)&lt;/td&gt;
&lt;td&gt;C++17から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iter_difference_t.html&#34;&gt;iter_difference_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの&lt;code&gt;difference_type&lt;/code&gt;を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iter_value_t.html&#34;&gt;iter_value_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの&lt;code&gt;value_type&lt;/code&gt;を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iter_reference_t.html&#34;&gt;iter_reference_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの&lt;code&gt;reference_type&lt;/code&gt;を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iter_rvalue_reference_t.html&#34;&gt;iter_rvalue_reference_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの指す要素の右辺値参照型を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iter_common_reference_t.html&#34;&gt;iter_common_reference_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの&lt;code&gt;value_type&lt;/code&gt;と&lt;code&gt;reference_type&lt;/code&gt;の&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/common_reference.html&#34;&gt;common_reference&lt;/a&gt;&lt;/code&gt;を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirect_result_t.md.nolink&#34;&gt;indirect_result_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数呼び出し可能な型&lt;code&gt;F&lt;/code&gt;を複数のイテレータ&lt;code&gt;Is...&lt;/code&gt;によって呼び出した時の戻り値型を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/projected.md.nolink&#34;&gt;projected&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータ&lt;code&gt;I&lt;/code&gt;の&lt;code&gt;Proj&lt;/code&gt;による射影操作の戻り値型を取得する (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/incrementable_traits.html&#34;&gt;incrementable_traits&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;iter_difference_t&lt;/code&gt;にアダプトするためのカスタマイゼーションポイント (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_readable_traits.html&#34;&gt;indirectly_readable_traits&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;iter_value_t&lt;/code&gt;にアダプトするためのカスタマイゼーションポイント (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;input_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;output_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;forward_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前方向イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;bidirectional_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;双方向イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;random_access_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ランダムアクセスイテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;contiguous_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;隣接イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;イテレータの進行と距離&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/advance.html&#34;&gt;advance&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;n&lt;/code&gt;回イテレータを進める(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;distance&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータ間の距離を求める(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;next&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;n&lt;/code&gt;回前方に進めたイテレータを返す(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/prev.html&#34;&gt;prev&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;n&lt;/code&gt;回後方に進めたイテレータを返す(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/range_advance.md.nolink&#34;&gt;ranges::advance&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータを進める(function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/range_distance.md.nolink&#34;&gt;ranges::distance&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータ間の距離を求める(function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/range_next.md.nolink&#34;&gt;ranges::next&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前方に進めたイテレータを返す(function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/range_prev.md.nolink&#34;&gt;ranges::prev&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;後方に進めたイテレータを返す(function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;逆順イテレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;reverse_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;逆方向に進むイテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/make_reverse_iterator.html&#34;&gt;make_reverse_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;オブジェクトを作るヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;挿入イテレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/back_insert_iterator.html&#34;&gt;back_insert_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;末尾に要素を挿入する出力イテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/back_inserter.html&#34;&gt;back_inserter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;back_insert_iterator&lt;/code&gt;オブジェクトを作るヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/front_insert_iterator.html&#34;&gt;front_insert_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;先頭に要素を挿入する出力イテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/front_inserter.html&#34;&gt;front_inserter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;front_insert_iterator&lt;/code&gt;オブジェクトを作るヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/insert_iterator.html&#34;&gt;insert_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意の位置に要素を挿入する出力イテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/inserter.html&#34;&gt;inserter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;insert_iterator&lt;/code&gt;オブジェクトを作るヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;要素を移動するイテレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/move_iterator.html&#34;&gt;move_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;間接参照時にムーブするイテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/make_move_iterator.html&#34;&gt;make_move_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;move_iterator&lt;/code&gt;オブジェクトを作るヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/move_sentinel.md.nolink&#34;&gt;move_sentinel&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;move_iterator&lt;/code&gt;の終端を表す番兵型(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ストリームイテレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/istream_iterator.html&#34;&gt;istream_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力ストリームイテレータ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/ostream_iterator.html&#34;&gt;ostream_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力ストリームイテレータ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/istreambuf_iterator.html&#34;&gt;istreambuf_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力ストリームバッファイテレータ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/ostreambuf_iterator.html&#34;&gt;ostreambuf_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力ストリームバッファイテレータ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;その他のイテレータアダプタ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/common_iterator.md.nolink&#34;&gt;common_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータ型と番兵型が異なる場合に型を共通化するためのラッパーイテレータ(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/counted_iterator.md.nolink&#34;&gt;counted_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;予め指定された&lt;code&gt;N&lt;/code&gt;個の要素だけをイテレートするラッパーイテレータ(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;番兵型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/default_sentinel_t.md.nolink&#34;&gt;default_sentinel_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意の範囲の終端を表すことのできるデフォルトの番兵型(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/unreachable_sentinel_t.md.nolink&#34;&gt;unreachable_sentinel_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;別の方法で終端が指定される範囲の仮想的な終端を表す番兵型(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;先頭イテレータと末尾イテレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/begin.html&#34;&gt;begin&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭を指すイテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/end.html&#34;&gt;end&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾の次を指すイテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/cbegin.html&#34;&gt;cbegin&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭を指す読み取り専用イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/cend.html&#34;&gt;cend&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾の次を指す読み取り専用イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/rbegin.html&#34;&gt;rbegin&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾を指す逆イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/rend.html&#34;&gt;rend&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭の前を指す逆イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/crbegin.html&#34;&gt;crbegin&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾を指す読み取り専用逆イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/crend.html&#34;&gt;crend&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭の前を指す読み取り専用逆イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;コンテナアクセス&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/size.html&#34;&gt;size&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンテナの要素数を取得する (function)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/ssize.html&#34;&gt;ssize&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンテナの要素数を、符号付き整数型で取得する (function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/empty.html&#34;&gt;empty&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンテナが空かどうかを判定する (function)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/data.html&#34;&gt;data&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンテナの要素配列へのポインタを取得する (function)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;カスタマイゼーションポイントオブジェクト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iter_move.md.nolink&#34;&gt;ranges::iter_move&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの指す要素をムーブする (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iter_swap.md.nolink&#34;&gt;ranges::iter_swap&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのイテレータの指す要素を&lt;em&gt;swap&lt;/em&gt;する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;説明専用コンセプト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/dereferenceable.html&#34;&gt;with-reference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型&lt;code&gt;T&lt;/code&gt;に参照を付加する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/dereferenceable.html&#34;&gt;can-reference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;with-reference&lt;/code&gt;可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/dereferenceable.html&#34;&gt;dereferenceable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;単純な間接参照が可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;イテレータコンセプト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_readable.html&#34;&gt;indirectly_readable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;間接参照によって読み取り可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_writable.md.nolink&#34;&gt;indirectly_writable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;間接参照によって書き込み可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/weakly_incrementable.md.nolink&#34;&gt;weakly_incrementable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前置/後置インクリメント可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/incrementable.md.nolink&#34;&gt;incrementable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正則に前置/後置インクリメント可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/input_or_output_iterator.md.nolink&#34;&gt;input_or_output_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;基礎的なイテレータコンセプト (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/sentinel_for.md.nolink&#34;&gt;sentinel_for&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同じ範囲についてのイテレータと番兵 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/sized_sentinel_for.md.nolink&#34;&gt;sized_sentinel_for&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;距離を定義可能なイテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/sized_sentinel_for.md.nolink&#34;&gt;disable_sized_sentinel_for&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sentinel_for&amp;lt;S, I&amp;gt;&lt;/code&gt;について、&lt;code&gt;sized_sentinel_for&lt;/code&gt;を不適合にする (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/input_iterator.md.nolink&#34;&gt;input_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力イテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/output_iterator.md.nolink&#34;&gt;output_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力イテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/forward_iterator.md.nolink&#34;&gt;forward_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前方向イテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/bidirectional_iterator.md.nolink&#34;&gt;bidirectional_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;双方向イテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/random_access_iterator.md.nolink&#34;&gt;random_access_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ランダムアクセスイテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/contiguous_iterator.md.nolink&#34;&gt;contiguous_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;隣接イテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;間接呼び出しコンセプト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_unary_invocable.md.nolink&#34;&gt;indirectly_unary_invocable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの要素型によって呼び出し可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_regular_unary_invocable.md.nolink&#34;&gt;indirectly_regular_unary_invocable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正則な&lt;code&gt;indirectly_unary_invocable&lt;/code&gt; (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirect_unary_predicate.md.nolink&#34;&gt;indirect_unary_predicate&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの要素型についての単項述語 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirect_binary_predicate.md.nolink&#34;&gt;indirect_binary_predicate&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの要素型についての二項述語 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirect_equivalence_relation.md.nolink&#34;&gt;indirect_equivalence_relation&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの要素型についての同値関係 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirect_strict_weak_order.md.nolink&#34;&gt;indirect_strict_weak_order&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの要素型についての狭義の弱順序 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;一般的なアルゴリズムコンセプト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_movable.md.nolink&#34;&gt;indirectly_movable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;片方のイテレータからもう片方のイテレータへ要素をムーブ可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_movable_storable.md.nolink&#34;&gt;indirectly_movable_storable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;片方のイテレータからもう片方のイテレータへ中間オブジェクトを介して要素をムーブ可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_copyable.md.nolink&#34;&gt;indirectly_copyable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;片方のイテレータからもう片方のイテレータへ要素をコピー可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_copyable_storable.md.nolink&#34;&gt;indirectly_copyable_storable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;片方のイテレータからもう片方のイテレータへ中間オブジェクトを介して要素をコピー可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_swappable.md.nolink&#34;&gt;indirectly_swappable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのイテレータ間で要素を交換可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_comparable.md.nolink&#34;&gt;indirectly_comparable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのイテレータ間で要素を比較可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/permutable.md.nolink&#34;&gt;permutable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータを介して要素を並べ替え可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/mergeable.md.nolink&#34;&gt;mergeable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータを介して範囲をマージ可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/sortable.md.nolink&#34;&gt;sortable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータを介して範囲をソート可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf&#34; target=&#34;_blank&#34;&gt;P0896R4 The One Ranges Proposal (was Merging the Ranges TS)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>incrementable_traits -- incrementable/indirectly_readable_traits追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/incrementable_traits.html"/>
      <id>a9ac708162bec37519ce204c57bb8c8617dcb2f2:reference/iterator/incrementable_traits.md</id>
      <updated>2020-06-15T12:57:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/incrementable_traits.md b/reference/iterator/incrementable_traits.md
new file mode 100644
index 000000000..ce1631fd6
--- /dev/null
+++ b/reference/iterator/incrementable_traits.md
@@ -0,0 +1,129 @@
+# incrementable_traits
+* iterator[meta header]
+* std[meta namespace]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+
+  // プライマリテンプレート
+  template&amp;lt;class&amp;gt;
+  struct incrementable_traits {};
+
+  // ポインタ型についての特殊化
+  template&amp;lt;class T&amp;gt;
+    requires is_object_v&amp;lt;T&amp;gt;
+  struct incrementable_traits&amp;lt;T*&amp;gt; {
+    using difference_type = ptrdiff_t;
+  };
+
+  // constを外すための特殊化
+  template&amp;lt;class I&amp;gt;
+  struct incrementable_traits&amp;lt;const I&amp;gt;
+    : incrementable_traits&amp;lt;I&amp;gt; { };
+
+  // difference_typeを定義している型についての特殊化
+  template&amp;lt;class T&amp;gt;
+    requires requires { typename T::difference_type; }
+  struct incrementable_traits&amp;lt;T&amp;gt; {
+    using difference_type = typename T::difference_type;
+  };
+
+  // difference_typeを定義していないが、差分を取ることができる型についての特殊化
+  template&amp;lt;class T&amp;gt;
+    requires (!requires { typename T::difference_type; } &amp;amp;&amp;amp;
+              requires(const T&amp;amp; a, const T&amp;amp; b) { { a - b } -&amp;gt; integral; })
+  struct incrementable_traits&amp;lt;T&amp;gt; {
+    using difference_type = make_signed_t&amp;lt;decltype(declval&amp;lt;T&amp;gt;() - declval&amp;lt;T&amp;gt;())&amp;gt;;
+  };
+}
+```
+* is_object_v[link /reference/type_traits/is_object.md]
+* integral[link /reference/concepts/integral.md]
+* make_signed_t[link /reference/type_traits/make_signed.md]
+* declval[link /reference/utility/declval.md]
+
+## 概要
+
+任意のイテレータ型からそのイテレータ間の差分（距離）を表す型（`difference_type`）を取得する、あるいは[`iter_difference_t`](iter_difference_t.md)で取得できるようにするためにアダプトする。
+
+## 効果
+
+上記定義のいずれかの形式、あるいはそれ以外の明示的特殊化を通して得られるイテレータの差分型を、メンバ型`::difference_type`として定義する。
+
+## 特殊化
+
+このクラスは任意のプログラム定義型について特殊化することが許可されている。
+
+## 備考
+
+イテレータの差分型を求める場合はこのクラスの代わりに[`iter_difference_t`](iter_value_t.md)を使用することを推奨する（より汎用的であるため）。その場合、このクラスは自作のイテレータ型を`iter_difference_t`にアダプトするために使用できる。
+
+## 例
+```cpp example
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+struct sample_iterator {
+  int n[3] = {1, 2, 3};
+  int index = 0;
+  
+  int&amp;amp; operator*() { return n[index]; }
+
+  friend auto operator++(sample_iterator&amp;amp; self) -&amp;gt; sample_iterator&amp;amp; {
+    if (self.index &amp;lt; 3) ++self.index;
+    return self;
+  }
+  
+  friend bool operator==(const sample_iterator&amp;amp; rhs, std::default_sentinel_t) {
+    return 3 &amp;lt; rhs.index;
+  }
+};
+
+
+struct have_difference : sample_iterator {
+  using difference_type = unsigned short;
+};
+
+struct can_difference : sample_iterator {
+  friend auto operator-(const can_difference&amp;amp; lhs, const can_difference&amp;amp; rhs) -&amp;gt; char {
+    return lhs.index - rhs.index;
+  }
+};
+
+int main() {
+  using vec_iterator = std::vector&amp;lt;int&amp;gt;::iterator;
+  using pointer = double*;
+
+  static_assert(std::same_as&amp;lt;std::incrementable_traits&amp;lt;pointer&amp;gt;::difference_type         , std::ptrdiff_t&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::incrementable_traits&amp;lt;const pointer&amp;gt;::difference_type   , std::ptrdiff_t&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::incrementable_traits&amp;lt;vec_iterator&amp;gt;::difference_type    , std::ptrdiff_t&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::incrementable_traits&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;::difference_type, std::ptrdiff_t&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::incrementable_traits&amp;lt;have_difference&amp;gt;::difference_type , unsigned short&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::incrementable_traits&amp;lt;can_difference&amp;gt;::difference_type  , signed char&amp;gt;); // この結果は処理系によって異なる可能性がある
+}
+```
+* std::incrementable_traits[color ff0000]
+* same_as[link /reference/concepts/same_as.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 6
+
+## 関連項目
+
+- [`iter_difference_t`](iter_difference_t.md)
+
+## 参照
+
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>indirectly_readable_traits -- incrementable/indirectly_readable_traits追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/indirectly_readable_traits.html"/>
      <id>a9ac708162bec37519ce204c57bb8c8617dcb2f2:reference/iterator/indirectly_readable_traits.md</id>
      <updated>2020-06-15T12:57:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/indirectly_readable_traits.md b/reference/iterator/indirectly_readable_traits.md
new file mode 100644
index 000000000..ae11a46cc
--- /dev/null
+++ b/reference/iterator/indirectly_readable_traits.md
@@ -0,0 +1,141 @@
+# indirectly_readable_traits
+* iterator[meta header]
+* std[meta namespace]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+
+  // 素の型を取得する、説明専用type-traits
+  template&amp;lt;class&amp;gt;
+  struct cond-value-type { };
+
+  template&amp;lt;class T&amp;gt;
+    requires is_object_v&amp;lt;T&amp;gt;
+  struct cond-value-type&amp;lt;T&amp;gt; {
+    using value_type = remove_cv_t&amp;lt;T&amp;gt;;
+  };
+
+
+  // プライマリテンプレート
+  template&amp;lt;class&amp;gt;
+  struct indirectly_readable_traits { };
+
+  // ポインタ型についての特殊化
+  template&amp;lt;class T&amp;gt;
+  struct indirectly_readable_traits&amp;lt;T*&amp;gt;
+    : cond-value-type&amp;lt;T&amp;gt; { };
+
+  // 配列型についての特殊化
+  template&amp;lt;class I&amp;gt;
+    requires is_array_v&amp;lt;I&amp;gt;
+  struct indirectly_readable_traits&amp;lt;I&amp;gt; {
+    using value_type = remove_cv_t&amp;lt;remove_extent_t&amp;lt;I&amp;gt;&amp;gt;;
+  };
+
+  // constを外すための特殊化
+  template&amp;lt;class I&amp;gt;
+  struct indirectly_readable_traits&amp;lt;const I&amp;gt;
+    : indirectly_readable_traits&amp;lt;I&amp;gt; { };
+
+  // value_typeを定義している型についての特殊化
+  template&amp;lt;class T&amp;gt;
+    requires requires { typename T::value_type; }
+  struct indirectly_readable_traits&amp;lt;T&amp;gt;
+    : cond-value-type&amp;lt;typename T::value_type&amp;gt; { };
+
+  // element_typeを定義している型についての特殊化
+  template&amp;lt;class T&amp;gt;
+    requires requires { typename T::element_type; }
+  struct indirectly_readable_traits&amp;lt;T&amp;gt;
+    : cond-value-type&amp;lt;typename T::element_type&amp;gt; { };
+}
+```
+* is_object_v[link /reference/type_traits/is_object.md]
+* remove_cv_t[link /reference/type_traits/remove_cv.md]
+* is_array_v[link /reference/type_traits/is_array.md]
+* remove_extent_t[link /reference/type_traits/remove_extent.md]
+
+## 概要
+
+任意のイテレータ型からそのイテレータの要素型（`value_type`）を取得する、あるいは[`iter_value_t`](iter_difference_t.md)で取得できるようにするためにアダプトする。
+
+## 効果
+
+上記定義のいずれかの形式、あるいはそれ以外の明示的特殊化を通して得られるイテレータの要素型を、メンバ型`::value_type`として定義する。
+
+## 特殊化
+
+このクラスは任意のプログラム定義型について特殊化することが許可されている。
+
+## 備考
+
+イテレータの要素型を求める場合はこのクラスの代わりに[`iter_value_t`](iter_value_t.md)を使用することを推奨する（より汎用的であるため）。その場合、このクラスは自作のイテレータ型を`iter_value_t`にアダプトするために使用できる。
+
+## 例
+```cpp example
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+struct sample_iterator {
+  int n[3] = {1, 2, 3};
+  int index = 0;
+  
+  int&amp;amp; operator*() { return n[index]; }
+
+  friend auto operator++(sample_iterator&amp;amp; self) -&amp;gt; sample_iterator&amp;amp; {
+    if (self.index &amp;lt; 3) ++self.index;
+    return self;
+  }
+  
+  friend bool operator==(const sample_iterator&amp;amp; rhs, std::default_sentinel_t) {
+    return 3 &amp;lt; rhs.index;
+  }
+};
+
+
+struct have_value : sample_iterator {
+  using value_type = int;
+};
+
+struct have_element : sample_iterator {
+  using element_type = int;
+};
+
+int main() {
+  using vec_iterator = std::vector&amp;lt;int&amp;gt;::iterator;
+  using pointer = double*;
+
+  static_assert(std::same_as&amp;lt;std::indirectly_readable_traits&amp;lt;pointer&amp;gt;::value_type         , double&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::indirectly_readable_traits&amp;lt;short[3]&amp;gt;::value_type        , short&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::indirectly_readable_traits&amp;lt;const pointer&amp;gt;::value_type   , double&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::indirectly_readable_traits&amp;lt;vec_iterator&amp;gt;::value_type    , int&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::indirectly_readable_traits&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;::value_type, int&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::indirectly_readable_traits&amp;lt;have_value&amp;gt;::value_type      , int&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::indirectly_readable_traits&amp;lt;have_element&amp;gt;::value_type    , int&amp;gt;);
+}
+```
+* std::indirectly_readable_traits[color ff0000]
+* same_as[link /reference/concepts/same_as.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 6
+
+## 関連項目
+
+- [`iter_value_t`](iter_value_t.md)
+
+## 参照
+
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iter_difference_t -- incrementable/indirectly_readable_traits追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/iter_difference_t.html"/>
      <id>a9ac708162bec37519ce204c57bb8c8617dcb2f2:reference/iterator/iter_difference_t.md</id>
      <updated>2020-06-15T12:57:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/iter_difference_t.md b/reference/iterator/iter_difference_t.md
index 40158de9c..59d225825 100644
--- a/reference/iterator/iter_difference_t.md
+++ b/reference/iterator/iter_difference_t.md
@@ -20,18 +20,17 @@ namespace std {
 
 `RI = remove_cvref_t&amp;lt;I&amp;gt;`とすると、次のどちらか
 
-- [`incrementable_traits`](iterator/incrementable_traits.md.nolink)`&amp;lt;RI&amp;gt;::difference_type`
+- [`incrementable_traits`](iterator/incrementable_traits.md)`&amp;lt;RI&amp;gt;::difference_type`
     - [`iterator_traits`](iterator_traits.md)`&amp;lt;RI&amp;gt;`がプライマリテンプレートの特殊化となる場合
 - [`iterator_traits`](iterator_traits.md)`&amp;lt;RI&amp;gt;::difference_type`
     - その他の場合
 
 ## 備考
 
-プログラム定義型（ユーザー定義の任意のイテレータ型）でこの結果をカスタマイズするには、[`incrementable_traits`](iterator/incrementable_traits.md.nolink)を特殊化する。
+プログラム定義型（ユーザー定義の任意のイテレータ型）でこの結果をカスタマイズするには、[`incrementable_traits`](iterator/incrementable_traits.md)を特殊化する。
 
 ## 例
 ```cpp example
-#include &amp;lt;iostream&amp;gt;
 #include &amp;lt;iterator&amp;gt;
 #include &amp;lt;vector&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iter_rvalue_reference_t -- incrementable/indirectly_readable_traits追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/iter_rvalue_reference_t.html"/>
      <id>a9ac708162bec37519ce204c57bb8c8617dcb2f2:reference/iterator/iter_rvalue_reference_t.md</id>
      <updated>2020-06-15T12:57:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/iter_rvalue_reference_t.md b/reference/iterator/iter_rvalue_reference_t.md
index 4db031600..9821b1c64 100644
--- a/reference/iterator/iter_rvalue_reference_t.md
+++ b/reference/iterator/iter_rvalue_reference_t.md
@@ -14,7 +14,7 @@ namespace std {
 }
 ```
 * dereferenceable[link /reference/iterator/dereferenceable.md]
-* can-reference[link /reference/iterator/exposition_only.md.nolink]
+* can-reference[link /reference/iterator/dereferenceable.md]
 * iter_move[link /reference/iterator/iter_move.md.nolink]
 * declval[link /reference/utility/declval.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iter_value_t -- incrementable/indirectly_readable_traits追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/iter_value_t.html"/>
      <id>a9ac708162bec37519ce204c57bb8c8617dcb2f2:reference/iterator/iter_value_t.md</id>
      <updated>2020-06-15T12:57:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/iter_value_t.md b/reference/iterator/iter_value_t.md
index 115432305..a55bd50f8 100644
--- a/reference/iterator/iter_value_t.md
+++ b/reference/iterator/iter_value_t.md
@@ -19,18 +19,17 @@ namespace std {
 
 `RI = remove_cvref_t&amp;lt;I&amp;gt;`とすると、次のどちらか
 
-- [`indirectly_readable_traits`](iterator/indirectly_readable_traits.md.nolink)`&amp;lt;RI&amp;gt;::value_type`
+- [`indirectly_readable_traits`](iterator/indirectly_readable_traits.md)`&amp;lt;RI&amp;gt;::value_type`
     - [`iterator_traits`](iterator_traits.md)`&amp;lt;RI&amp;gt;`がプライマリテンプレートの特殊化となる場合
 - [`iterator_traits`](iterator_traits.md)`&amp;lt;RI&amp;gt;::value_type`
     - その他の場合
 
 ## 備考
 
-プログラム定義型（ユーザー定義の任意のイテレータ型）でこの結果をカスタマイズするには、[`indirectly_readable_traits`](iterator/indirectly_readable_traits.md.nolink)を特殊化する。
+プログラム定義型（ユーザー定義の任意のイテレータ型）でこの結果をカスタマイズするには、[`indirectly_readable_traits`](iterator/indirectly_readable_traits.md)を特殊化する。
 
 ## 例
 ```cpp example
-#include &amp;lt;iostream&amp;gt;
 #include &amp;lt;iterator&amp;gt;
 #include &amp;lt;vector&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>counting_semaphore -- counting_semaphore: release, acquire, try_acquire (#683)</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore.html"/>
      <id>0e2b1b9345f9fa28997b6b0325e2ccd73d56bdf3:reference/semaphore/counting_semaphore.md</id>
      <updated>2020-06-15T11:36:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore.md b/reference/semaphore/counting_semaphore.md
index ed495076b..bf671cc63 100644
--- a/reference/semaphore/counting_semaphore.md
+++ b/reference/semaphore/counting_semaphore.md
@@ -16,12 +16,12 @@ namespace std {
 
 カウンティングセマフォ（または単にセマフォ）は他の同期プリミティブを実装するための部品として広く用いられ、セマフォと条件変数のいずれも適用可能なケースでは[`condition_variable`](/reference/condition_variable/condition_variable.md)よりも効率的である。
 
-セマフォは1つのカウンタで状態管理される同期プリミティブとみなせる。カウンタは`0`から最大値[`max()`](counting_semaphore/max.md)までの値をとり、このカウンタ値がセマフォで管理する共有リソースの個数と解釈される。
+セマフォは1つのカウンタで状態管理される同期プリミティブとみなせる。カウンタは`0`から[`max()`](counting_semaphore/max.md)までの値をとり、このカウンタ値がセマフォで管理する共有リソースの個数と解釈される。
 
 - カウンタの最大値はテンプレートパラメータ`least_max_value`にて設定する。省略時は処理系がサポートする最大値が設定される。
 - カウンタの初期値は[コンストラクタ](counting_semaphore/op_constructor.md)でセマフォ構築時に指定する。
-- [`release()`](counting_semaphore/release.md.nolink)メンバ関数呼び出しによりカウンタ値の加算と通知処理、つまり利用可能な共有リソースの増加を表現する。（歴史的にはオランダ語由来の&amp;#34;V操作&amp;#34;と呼ばれる。英語では&amp;#34;up&amp;#34;／&amp;#34;signal&amp;#34;／&amp;#34;post&amp;#34;とも呼ばれる。）
-- [`acquire()`](counting_semaphore/acquire.md.nolink)メンバ関数呼び出しにより待機処理とカウンタ値の減算、つまり利用可能な共有リソースの減少を表現する。（同様に&amp;#34;P操作&amp;#34;や&amp;#34;down&amp;#34;／&amp;#34;wait&amp;#34;／&amp;#34;pend&amp;#34;とも呼ばれる。）
+- [`release()`](counting_semaphore/release.md)メンバ関数呼び出しによりカウンタ値の加算と通知処理、つまり利用可能な共有リソースの増加を表現する。（歴史的にはオランダ語由来の&amp;#34;V操作&amp;#34;と呼ばれる。英語では&amp;#34;up&amp;#34;／&amp;#34;signal&amp;#34;／&amp;#34;post&amp;#34;とも呼ばれる。）
+- [`acquire()`](counting_semaphore/acquire.md)メンバ関数呼び出しにより待機処理とカウンタ値の減算、つまり利用可能な共有リソースの減少を表現する。（同様に&amp;#34;P操作&amp;#34;や&amp;#34;down&amp;#34;／&amp;#34;wait&amp;#34;／&amp;#34;pend&amp;#34;とも呼ばれる。）
 
 カウンティングセマフォの最大値を`1`としたものはバイナリセマフォと呼ばれ、ヘッダ[`&amp;lt;semaphore&amp;gt;`](/reference/semaphore.md)ではエイリアス型`binary_semaphore`として定義される。
 バイナリセマフォはミューテックス（[`mutex`](/reference/mutex/mutex.md)など）と同様に共有リソースの排他制御を実現する同期プリミティブだが、ミューテックスとは異なりスレッドがロックを所有(own)するという概念が存在しない。
@@ -36,14 +36,14 @@ namespace std {
 ## メンバ関数
 ### 構築・破棄
 
-| 名前            | 説明           | 対応バージョン |
-|-----------------|----------------|----------------|
+| 名前             | 説明            | 対応バージョン |
+|-----------------|----------------|------------|
 | [`(constructor)`](counting_semaphore/op_constructor.md) | コンストラクタ | C++20 |
 | `(destructor)` | デストラクタ | C++20 |
 | `operator=(const counting_semaphore&amp;amp;) = delete;` | 代入演算子 | C++20 |
-| [`release`](counting_semaphore/release.md.nolink) | カウンタ値を加算し、待機中スレッドをブロック解除する | C++20 |
-| [`acquire`](counting_semaphore/acquire.md.nolink) | カウンタ値が正数になるまで待機し、カウンタ値を1つ減算する | C++20 |
-| [`try_acquire`](counting_semaphore/try_acquire.md.nolink) | カウンタ値の1減算を試みる | C++20 |
+| [`release`](counting_semaphore/release.md) | カウンタ値を加算し、待機中スレッドをブロック解除する | C++20 |
+| [`acquire`](counting_semaphore/acquire.md) | カウンタ値が`0`より大きくなるまで待機し、カウンタ値を1つ減算する | C++20 |
+| [`try_acquire`](counting_semaphore/try_acquire.md) | カウンタ値の1減算を試みる | C++20 |
 | [`try_acquire_for`](counting_semaphore/try_acquire_for.md.nolink) | 相対時間のタイムアウトを指定して、カウンタ値の1減算を試みる | C++20 |
 | [`try_acquire_until`](counting_semaphore/try_acquire_until.md.nolink) | 絶対時間のタイムアウトを指定して、カウンタ値の1減算を試みる | C++20 |
 
@@ -109,7 +109,6 @@ int main()
 ```
 * std::counting_semaphore[color ff0000]
 
-
 ### 出力
 ```
 100
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>acquire -- counting_semaphore: release, acquire, try_acquire (#683)</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/acquire.html"/>
      <id>0e2b1b9345f9fa28997b6b0325e2ccd73d56bdf3:reference/semaphore/counting_semaphore/acquire.md</id>
      <updated>2020-06-15T11:36:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/acquire.md b/reference/semaphore/counting_semaphore/acquire.md
new file mode 100644
index 000000000..e48d55d23
--- /dev/null
+++ b/reference/semaphore/counting_semaphore/acquire.md
@@ -0,0 +1,83 @@
+# acquire
+* semaphore[meta header]
+* std[meta namespace]
+* counting_semaphore[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+void acquire();
+```
+
+## 概要
+カウンティングセマフォのカウンタ値が`0`より大きくなるまで待機し、カウンタ値を`1`つ減算してから制御を戻す。
+
+説明のため、ここではカウンタ値を`counter`と表記する。
+
+
+## 効果
+次のステップを繰り返す。
+- [`try_acquire`](try_acquire.md)を評価し、結果が`true`ならば関数呼び出し元へ制御を戻す。
+- `counter`が`0`より大きくなるまで、`*this`上で関数呼び出しスレッドをブロッキングする。
+
+
+## 戻り値
+なし
+
+
+## 例外
+この関数は、以下のerror conditionを持つ[`system_error`](/reference/system_error/system_error.md)例外オブジェクトを送出する可能性がある：
+
+- [`resource_unavailable_try_again`](/reference/system_error/errc.md) : 操作対象のネイティブハンドル型が無効
+- [`operation_not_permitted`](/reference/system_error/errc.md) : スレッドにこの操作を行う権限がない
+
+
+## 備考
+「効果」欄では`acquire`メンバ関数の振る舞いを手続き的に説明しているが、実際の処理系においてはオペレーティングシステムが提供する効率的なセマフォ操作関数が利用されると期待される。
+
+- POSIXセマフォでは[`sem_wait`関数](https://linuxjm.osdn.jp/html/LDP_man-pages/man3/sem_wait.3.html)が提供される。
+- Windowsセマフォでは[`WaitForSingleObject`関数](https://docs.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-waitforsingleobject)ファミリが提供される。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;semaphore&amp;gt;
+#include &amp;lt;thread&amp;gt;
+
+int main()
+{
+  int shared_data = 0;
+  std::counting_semaphore sem{0};
+
+  std::thread t([&amp;amp;]{
+    // 通知を待機し、共有データから読取り
+    sem.acquire();
+    std::cout &amp;lt;&amp;lt; shared_data &amp;lt;&amp;lt; std::endl;
+  });
+
+  // 共有データへ書込み、通知を行う
+  shared_data = 42;
+  sem.release();
+
+  t.join();
+}
+```
+* acquire()[color ff0000]
+* release()[link release.md]
+
+### 出力
+```
+42
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max -- counting_semaphore: release, acquire, try_acquire (#683)</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/max.html"/>
      <id>0e2b1b9345f9fa28997b6b0325e2ccd73d56bdf3:reference/semaphore/counting_semaphore/max.md</id>
      <updated>2020-06-15T11:36:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/max.md b/reference/semaphore/counting_semaphore/max.md
index d0c5de4bd..038e89e9c 100644
--- a/reference/semaphore/counting_semaphore/max.md
+++ b/reference/semaphore/counting_semaphore/max.md
@@ -25,20 +25,24 @@ static constexpr ptrdiff_t max() noexcept;
 
 ## 例
 ```cpp example
-#include &amp;lt;semaphore&amp;gt;
 #include &amp;lt;iostream&amp;gt;
+#include &amp;lt;semaphore&amp;gt;
 
 int main()
 {
   using Semaphore = std::counting_semaphore&amp;lt;10&amp;gt;;
   std::cout &amp;lt;&amp;lt; Semaphore::max() &amp;lt;&amp;lt; std::endl;
+
+  // 処理系定義のデフォルト値
+  std::cout &amp;lt;&amp;lt; std::counting_semaphore&amp;lt;&amp;gt;::max() &amp;lt;&amp;lt; std::endl;
 }
 ```
-* max[color ff0000]
+* max()[color ff0000]
 
 ### 出力例
 ```
 10
+2147483647
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- counting_semaphore: release, acquire, try_acquire (#683)</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/op_constructor.html"/>
      <id>0e2b1b9345f9fa28997b6b0325e2ccd73d56bdf3:reference/semaphore/counting_semaphore/op_constructor.md</id>
      <updated>2020-06-15T11:36:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/op_constructor.md b/reference/semaphore/counting_semaphore/op_constructor.md
index 87bd3dee0..d96c05fe9 100644
--- a/reference/semaphore/counting_semaphore/op_constructor.md
+++ b/reference/semaphore/counting_semaphore/op_constructor.md
@@ -36,6 +36,7 @@ std::counting_semaphore&amp;lt;1&amp;gt; mtx{1};
 
 int main() {}
 ```
+* std::counting_semaphore[color ff0000]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>release -- counting_semaphore: release, acquire, try_acquire (#683)</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/release.html"/>
      <id>0e2b1b9345f9fa28997b6b0325e2ccd73d56bdf3:reference/semaphore/counting_semaphore/release.md</id>
      <updated>2020-06-15T11:36:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/release.md b/reference/semaphore/counting_semaphore/release.md
new file mode 100644
index 000000000..764e2b955
--- /dev/null
+++ b/reference/semaphore/counting_semaphore/release.md
@@ -0,0 +1,79 @@
+# release
+* semaphore[meta header]
+* std[meta namespace]
+* counting_semaphore[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+void release(ptrdiff_t update = 1);
+```
+
+## 概要
+カウンティングセマフォのカウンタ値に加算し、待機中スレッドのブロック解除を行う。
+
+説明のため、ここではカウンタ値を`counter`と表記する。
+
+
+## 事前条件
+`update &amp;gt;= 0` かつ `update &amp;lt;=` [`max()`](max.md) `- counter`
+
+
+## 効果
+アトミックに`counter += update`を実行し、`counter`が値`0`より大きくなるまで待機中のスレッド群をブロック解除する。
+
+
+## 戻り値
+なし
+
+
+## 例外
+この関数は、以下のerror conditionを持つ[`system_error`](/reference/system_error/system_error.md)例外オブジェクトを送出する可能性がある：
+
+- [`resource_unavailable_try_again`](/reference/system_error/errc.md) : 操作対象のネイティブハンドル型が無効
+- [`operation_not_permitted`](/reference/system_error/errc.md) : スレッドにこの操作を行う権限がない
+- [`invalid_argument`](/reference/system_error/errc.md) : 実引数が無効
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;semaphore&amp;gt;
+#include &amp;lt;thread&amp;gt;
+
+int main()
+{
+  int shared_data = 0;
+  std::counting_semaphore sem{0};
+
+  std::thread t([&amp;amp;]{
+    // 通知を待機し、共有データから読取り
+    sem.acquire();
+    std::cout &amp;lt;&amp;lt; shared_data &amp;lt;&amp;lt; std::endl;
+  });
+
+  // 共有データへ書込み、通知を行う
+  shared_data = 42;
+  sem.release();
+
+  t.join();
+}
+```
+* release()[color ff0000]
+* acquire()[link acquire.md]
+
+### 出力
+```
+42
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_acquire -- counting_semaphore: release, acquire, try_acquire (#683)</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/try_acquire.html"/>
      <id>0e2b1b9345f9fa28997b6b0325e2ccd73d56bdf3:reference/semaphore/counting_semaphore/try_acquire.md</id>
      <updated>2020-06-15T11:36:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/try_acquire.md b/reference/semaphore/counting_semaphore/try_acquire.md
new file mode 100644
index 000000000..fc00778c0
--- /dev/null
+++ b/reference/semaphore/counting_semaphore/try_acquire.md
@@ -0,0 +1,81 @@
+# try_acquire
+* semaphore[meta header]
+* std[meta namespace]
+* counting_semaphore[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+bool try_acquire() noexcept;
+```
+
+## 概要
+カウンティングセマフォのカウンタ値が`0`の場合は何もせず`fales`を返し、そうでなければカウンタ値を`1`つ減算して`true`を返す。
+
+説明のため、ここではカウンタ値を`counter`と表記する。
+
+
+## 効果
+`counter &amp;gt; 0`の場合は、呼び出しスレッドをブロッキングすることなく、アトミックに`counter -= 1`を実行する。
+`counter`が減算されなかった場合は、副作用は発生せず`try_acquire`関数は即座に呼び出し元へ戻る。
+
+処理系には、`counter &amp;gt; 0`であっても`counter`の減算に失敗することが許容される。
+ただし、セマフォに対する操作が競合していない状況下において、`try_acquire`が一貫して`false`を返すような実装は許容されない。
+（Spurious Failure が生じることは滅多にないが、これによりアトミック変数を用いた Swap-and-Compare ベースの興味深い実装が許容される。）
+
+
+## 戻り値
+`counter`が減算された場合は`true`を返し、そうでなければ`false`を返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;semaphore&amp;gt;
+#include &amp;lt;thread&amp;gt;
+
+int main()
+{
+  int shared_data = 0;
+  std::counting_semaphore sem{0};
+
+  std::thread t([&amp;amp;]{
+    // 通知を待機し、共有データから読取り
+    while (!sem.try_acquire()) {
+      std::this_thread::yield();
+      // ここではtry_acquire()動作例示のためビジーループを行うが、
+      // セマフォ待機が目的であればacquire()利用が適切である。
+    }
+    std::cout &amp;lt;&amp;lt; shared_data &amp;lt;&amp;lt; std::endl;
+  });
+
+  // 共有データへ書込み、通知を行う
+  shared_data = 42;
+  sem.release();
+
+  t.join();
+}
+```
+* try_acquire()[color ff0000]
+* acquire()[link acquire.md]
+* release()[link release.md]
+
+### 出力
+```
+42
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
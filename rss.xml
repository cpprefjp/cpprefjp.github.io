<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-04-22T00:49:50.689357</updated>
  <id>8e50bee2-fbab-498f-b8e7-bd33435590d2</id>

  
    <entry>
      <title>hardware_constructive_interference_size -- hardware_(constructive | destructive)... : GCCでの動作を確認</title>
      <link href="https://cpprefjp.github.io/reference/new/hardware_constructive_interference_size.html"/>
      <id>a3087226e6295ad8c0068e0e101b2f2b9fc1a6c6:reference/new/hardware_constructive_interference_size.md</id>
      <updated>2022-04-22T09:45:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/new/hardware_constructive_interference_size.md b/reference/new/hardware_constructive_interference_size.md
index a53c87b86..f11553710 100644
--- a/reference/new/hardware_constructive_interference_size.md
+++ b/reference/new/hardware_constructive_interference_size.md
@@ -46,7 +46,9 @@ int main()
 
 
 ### 出力例
-(実装がないため、動作確認できていない)
+```
+hardware_constructive_interference_size : 64
+```
 
 
 ## バージョン
@@ -55,8 +57,8 @@ int main()
 
 ### 処理系
 - [Clang](/implementation.md#clang):
-- [GCC](/implementation.md#gcc):
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [GCC](/implementation.md#gcc): 12.1
+- [Visual C++](/implementation.md#visual_cpp):
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hardware_destructive_interference_size -- hardware_(constructive | destructive)... : GCCでの動作を確認</title>
      <link href="https://cpprefjp.github.io/reference/new/hardware_destructive_interference_size.html"/>
      <id>a3087226e6295ad8c0068e0e101b2f2b9fc1a6c6:reference/new/hardware_destructive_interference_size.md</id>
      <updated>2022-04-22T09:45:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/new/hardware_destructive_interference_size.md b/reference/new/hardware_destructive_interference_size.md
index 09c6d6393..375be35fe 100644
--- a/reference/new/hardware_destructive_interference_size.md
+++ b/reference/new/hardware_destructive_interference_size.md
@@ -104,7 +104,9 @@ int main()
 
 
 ### 出力例
-(実装がないため、動作確認できていない)
+```
+hardware_destructive_interference_size : 64
+```
 
 
 ## バージョン
@@ -113,8 +115,8 @@ int main()
 
 ### 処理系
 - [Clang](/implementation.md#clang):
-- [GCC](/implementation.md#gcc):
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [GCC](/implementation.md#gcc): 12.1
+- [Visual C++](/implementation.md#visual_cpp):
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- utility/swap : 標準ヘッダをコード修飾</title>
      <link href="https://cpprefjp.github.io/reference/utility/swap.html"/>
      <id>af6b22155a6b231716577b193b4355f3c722fb14:reference/utility/swap.md</id>
      <updated>2022-04-21T16:38:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/swap.md b/reference/utility/swap.md
index fe2d7049a..31820431f 100644
--- a/reference/utility/swap.md
+++ b/reference/utility/swap.md
@@ -82,7 +82,7 @@ swap(a, b);
 
 
 ## 備考
-C++03では&amp;lt;algorithm&amp;gt;ヘッダーに定義されていた。
+C++03では`&amp;lt;algorithm&amp;gt;`ヘッダに定義されていた。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>pair -- Merge pull request #965 from cpprefjp/fix_swap</title>
      <link href="https://cpprefjp.github.io/reference/utility/pair.html"/>
      <id>706a4c2c46a8ac0c169315c11ddeafa13ee9926a:reference/utility/pair.md</id>
      <updated>2022-04-21T16:29:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/pair.md b/reference/utility/pair.md
index cb61a76d5..52c88b02d 100644
--- a/reference/utility/pair.md
+++ b/reference/utility/pair.md
@@ -32,7 +32,7 @@ namespace std {
 |---------------------------------------------|----------------------------------------|-------|
 | [`(constructor)`](pair/op_constructor.md) | コンストラクタ | |
 | [`operator=`](pair/op_assign.md)          | 代入演算子 | |
-| [`swap`](pair/swap.md)                    | 他の`pair`オブジェクトと値を入れ替える | |
+| [`swap`](pair/swap.md)                    | 他の`pair`オブジェクトと値を入れ替える | C++11 |
 
 
 ## メンバ型
@@ -60,7 +60,7 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |-------------------------------|-------------------------------------|-------|
-| [`swap`](pair/swap_free.md) | 2つの`pair`オブジェクトを入れ替える | |
+| [`swap`](pair/swap_free.md) | 2つの`pair`オブジェクトを入れ替える | C++11 |
 
 
 ### ヘルパ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- Merge pull request #965 from cpprefjp/fix_swap</title>
      <link href="https://cpprefjp.github.io/reference/utility/pair/swap.html"/>
      <id>706a4c2c46a8ac0c169315c11ddeafa13ee9926a:reference/utility/pair/swap.md</id>
      <updated>2022-04-21T16:29:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/pair/swap.md b/reference/utility/pair/swap.md
index c0ac47365..a55d13975 100644
--- a/reference/utility/pair/swap.md
+++ b/reference/utility/pair/swap.md
@@ -3,9 +3,10 @@
 * std[meta namespace]
 * pair[meta class]
 * function[meta id-type]
+* cpp11[meta cpp]
 
 ```cpp
-void swap(pair&amp;amp; p) noexcept(see below);           // (1) C++03
+void swap(pair&amp;amp; p) noexcept(see below);           // (1) C++11
 constexpr void swap(pair&amp;amp; p) noexcept(see below); // (1) C++20
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- Merge pull request #965 from cpprefjp/fix_swap</title>
      <link href="https://cpprefjp.github.io/reference/utility/pair/swap_free.html"/>
      <id>706a4c2c46a8ac0c169315c11ddeafa13ee9926a:reference/utility/pair/swap_free.md</id>
      <updated>2022-04-21T16:29:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/pair/swap_free.md b/reference/utility/pair/swap_free.md
index 9aa4e892d..5958a06d1 100644
--- a/reference/utility/pair/swap_free.md
+++ b/reference/utility/pair/swap_free.md
@@ -2,12 +2,13 @@
 * utility[meta header]
 * std[meta namespace]
 * function template[meta id-type]
+* cpp11[meta cpp]
 
 ```cpp
 namespace std {
   template &amp;lt;class T1, class T2&amp;gt;
   void swap(pair&amp;lt;T1,T2&amp;gt;&amp;amp; x, pair&amp;lt;T1,T2&amp;gt;&amp;amp; y)
-    noexcept(noexcept(x.swap(y)));          // (1) C++03
+    noexcept(noexcept(x.swap(y)));          // (1) C++11
   template &amp;lt;class T1, class T2&amp;gt;
   constexpr void swap(pair&amp;lt;T1,T2&amp;gt;&amp;amp; x, pair&amp;lt;T1,T2&amp;gt;&amp;amp; y)
     noexcept(noexcept(x.swap(y)));          // (1) C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- Merge pull request #965 from cpprefjp/fix_swap</title>
      <link href="https://cpprefjp.github.io/reference/utility/swap.html"/>
      <id>706a4c2c46a8ac0c169315c11ddeafa13ee9926a:reference/utility/swap.md</id>
      <updated>2022-04-21T16:29:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/swap.md b/reference/utility/swap.md
index 4f237819d..fe2d7049a 100644
--- a/reference/utility/swap.md
+++ b/reference/utility/swap.md
@@ -7,7 +7,10 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  void swap(T&amp;amp; a, T&amp;amp; b) noexcept(see below);           // (1) C++03
+  void swap(T&amp;amp; a, T&amp;amp; b);                               // (1) C++03 in &amp;lt;algorithm&amp;gt; header
+
+  template &amp;lt;class T&amp;gt;
+  void swap(T&amp;amp; a, T&amp;amp; b) noexcept(see below);           // (1) C++11
 
   template &amp;lt;class T&amp;gt;
   constexpr void swap(T&amp;amp; a, T&amp;amp; b) noexcept(see below); // (1) C++20
@@ -78,6 +81,10 @@ swap(a, b);
 - 配列版：配列の要素型`T`に対する`swap()`操作が例外を投げない場合、この関数もまた例外を投げない
 
 
+## 備考
+C++03では&amp;lt;algorithm&amp;gt;ヘッダーに定義されていた。
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>pair -- improve std::swap() and std::pair::swap()</title>
      <link href="https://cpprefjp.github.io/reference/utility/pair.html"/>
      <id>9b6ac15c926a8d90eccbe82f7f3d6e903b32df25:reference/utility/pair.md</id>
      <updated>2022-04-20T20:16:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/pair.md b/reference/utility/pair.md
index cb61a76d5..52c88b02d 100644
--- a/reference/utility/pair.md
+++ b/reference/utility/pair.md
@@ -32,7 +32,7 @@ namespace std {
 |---------------------------------------------|----------------------------------------|-------|
 | [`(constructor)`](pair/op_constructor.md) | コンストラクタ | |
 | [`operator=`](pair/op_assign.md)          | 代入演算子 | |
-| [`swap`](pair/swap.md)                    | 他の`pair`オブジェクトと値を入れ替える | |
+| [`swap`](pair/swap.md)                    | 他の`pair`オブジェクトと値を入れ替える | C++11 |
 
 
 ## メンバ型
@@ -60,7 +60,7 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |-------------------------------|-------------------------------------|-------|
-| [`swap`](pair/swap_free.md) | 2つの`pair`オブジェクトを入れ替える | |
+| [`swap`](pair/swap_free.md) | 2つの`pair`オブジェクトを入れ替える | C++11 |
 
 
 ### ヘルパ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- improve std::swap() and std::pair::swap()</title>
      <link href="https://cpprefjp.github.io/reference/utility/pair/swap.html"/>
      <id>9b6ac15c926a8d90eccbe82f7f3d6e903b32df25:reference/utility/pair/swap.md</id>
      <updated>2022-04-20T20:16:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/pair/swap.md b/reference/utility/pair/swap.md
index c0ac47365..a55d13975 100644
--- a/reference/utility/pair/swap.md
+++ b/reference/utility/pair/swap.md
@@ -3,9 +3,10 @@
 * std[meta namespace]
 * pair[meta class]
 * function[meta id-type]
+* cpp11[meta cpp]
 
 ```cpp
-void swap(pair&amp;amp; p) noexcept(see below);           // (1) C++03
+void swap(pair&amp;amp; p) noexcept(see below);           // (1) C++11
 constexpr void swap(pair&amp;amp; p) noexcept(see below); // (1) C++20
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- improve std::swap() and std::pair::swap()</title>
      <link href="https://cpprefjp.github.io/reference/utility/pair/swap_free.html"/>
      <id>9b6ac15c926a8d90eccbe82f7f3d6e903b32df25:reference/utility/pair/swap_free.md</id>
      <updated>2022-04-20T20:16:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/pair/swap_free.md b/reference/utility/pair/swap_free.md
index 9aa4e892d..5958a06d1 100644
--- a/reference/utility/pair/swap_free.md
+++ b/reference/utility/pair/swap_free.md
@@ -2,12 +2,13 @@
 * utility[meta header]
 * std[meta namespace]
 * function template[meta id-type]
+* cpp11[meta cpp]
 
 ```cpp
 namespace std {
   template &amp;lt;class T1, class T2&amp;gt;
   void swap(pair&amp;lt;T1,T2&amp;gt;&amp;amp; x, pair&amp;lt;T1,T2&amp;gt;&amp;amp; y)
-    noexcept(noexcept(x.swap(y)));          // (1) C++03
+    noexcept(noexcept(x.swap(y)));          // (1) C++11
   template &amp;lt;class T1, class T2&amp;gt;
   constexpr void swap(pair&amp;lt;T1,T2&amp;gt;&amp;amp; x, pair&amp;lt;T1,T2&amp;gt;&amp;amp; y)
     noexcept(noexcept(x.swap(y)));          // (1) C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- improve std::swap() and std::pair::swap()</title>
      <link href="https://cpprefjp.github.io/reference/utility/swap.html"/>
      <id>9b6ac15c926a8d90eccbe82f7f3d6e903b32df25:reference/utility/swap.md</id>
      <updated>2022-04-20T20:16:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/swap.md b/reference/utility/swap.md
index 4f237819d..fe2d7049a 100644
--- a/reference/utility/swap.md
+++ b/reference/utility/swap.md
@@ -7,7 +7,10 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  void swap(T&amp;amp; a, T&amp;amp; b) noexcept(see below);           // (1) C++03
+  void swap(T&amp;amp; a, T&amp;amp; b);                               // (1) C++03 in &amp;lt;algorithm&amp;gt; header
+
+  template &amp;lt;class T&amp;gt;
+  void swap(T&amp;amp; a, T&amp;amp; b) noexcept(see below);           // (1) C++11
 
   template &amp;lt;class T&amp;gt;
   constexpr void swap(T&amp;amp; a, T&amp;amp; b) noexcept(see below); // (1) C++20
@@ -78,6 +81,10 @@ swap(a, b);
 - 配列版：配列の要素型`T`に対する`swap()`操作が例外を投げない場合、この関数もまた例外を投げない
 
 
+## 備考
+C++03では&amp;lt;algorithm&amp;gt;ヘッダーに定義されていた。
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- LWG Issue 3593対応</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator/base.html"/>
      <id>43157e5d841bb81804a597d8e8cc278b674e4983:reference/iterator/counted_iterator/base.md</id>
      <updated>2022-04-20T15:03:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator/base.md b/reference/iterator/counted_iterator/base.md
index 34b22657d..f29c64b22 100644
--- a/reference/iterator/counted_iterator/base.md
+++ b/reference/iterator/counted_iterator/base.md
@@ -6,7 +6,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-constexpr const I&amp;amp; base() const &amp;amp;;  // (1)
+constexpr const I&amp;amp; base() const &amp;amp; noexcept;  // (1)
 constexpr I base() &amp;amp;&amp;amp;;  // (2)
 ```
 * copy_constructible[link /reference/concepts/copy_constructible.md]
@@ -63,3 +63,4 @@ int main() {
 - [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
 - [P1207R4 Movability of single-pass iterators](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1207r4.pdf)
 - [LWG Issue 3391. Problems with `counted_iterator/move_iterator::base() const &amp;amp;`](https://cplusplus.github.io/LWG/issue3391)
+- [LWG Issue 3593. Several iterators&amp;#39; base() const &amp;amp; and lazy_split_view::outer-iterator::value_type::end() missing noexcept](https://cplusplus.github.io/LWG/issue3593)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- LWG Issue 3593対応</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/base.html"/>
      <id>43157e5d841bb81804a597d8e8cc278b674e4983:reference/iterator/move_iterator/base.md</id>
      <updated>2022-04-20T15:03:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/base.md b/reference/iterator/move_iterator/base.md
index 1bff9c1fe..d6fc8b4a4 100644
--- a/reference/iterator/move_iterator/base.md
+++ b/reference/iterator/move_iterator/base.md
@@ -6,11 +6,11 @@
 * cpp11[meta cpp]
 
 ```cpp
-Iterator base() const;                // (1) C++11
-constexpr Iterator base() const;      // (1) C++17
-constexpr Iterator&amp;amp; base() const &amp;amp;;   // (1) C++20
+Iterator base() const;                              // (1) C++11
+constexpr Iterator base() const;                    // (1) C++17
+constexpr const Iterator&amp;amp; base() const &amp;amp; noexcept;  // (1) C++20
 
-constexpr Iterator base() &amp;amp;&amp;amp;;         // (2)
+constexpr Iterator base() &amp;amp;&amp;amp;;   // (2)
 ```
 
 ## 概要
@@ -66,3 +66,4 @@ int main()
 - [P0031R0 A Proposal to Add Constexpr Modifiers to `reverse_iterator`, `move_iterator`, `array` and Range Access](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0031r0.html)
 - [P1207R4 Movability of Single-pass Iterators](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1207r4.pdf)
 - [LWG Issue 3391. Problems with `counted_iterator/move_iterator::base() const &amp;amp;`](https://cplusplus.github.io/LWG/issue3391)
+- [LWG Issue 3593. Several iterators&amp;#39; base() const &amp;amp; and lazy_split_view::outer-iterator::value_type::end() missing noexcept](https://cplusplus.github.io/LWG/issue3593)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
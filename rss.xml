<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++ Reference Site</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2014-12-07T18:46:09.477156</updated>
  <id>b6eae11d-2fb7-4a5d-8b5b-84ba04cca759</id>

  
    <entry>
      <title>operator== (C++11) -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site
</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_iterator/op_equal.html"/>
      <id>47d191ecb3326f3eb7ec6bea246c07f8d90adf32:reference/regex/regex_iterator/op_equal.md</id>
      <updated>2014-12-07 18:46:06 +0900
</updated>
      
        <content type="html">&lt;h1&gt;operator== (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; right) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;regex_iterator&lt;/code&gt; の等値比較を行う。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt; と引数 &lt;code&gt;right&lt;/code&gt; が共にシーケンスの終端を示すイテレータの場合、&lt;code&gt;true&lt;/code&gt; を返す。&lt;br /&gt;
&lt;code&gt;*this&lt;/code&gt; と引数 &lt;code&gt;right&lt;/code&gt; のいずれか一方のみがシーケンスの終端を示すイテレータの場合、&lt;code&gt;false&lt;/code&gt; を返す。&lt;br /&gt;
&lt;code&gt;*this&lt;/code&gt; と引数 &lt;code&gt;right&lt;/code&gt; が共にシーケンスの終端を示すイテレータではない場合、各メンバ変数が以下の全ての条件を満たしていれば &lt;code&gt;true&lt;/code&gt; を、そうでなければ &lt;code&gt;false&lt;/code&gt; を返す。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;begin == right.begin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;end == right.end&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pregex == right.pregex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flags == right.flags&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;match[0] == right.match[0]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンバ変数 &lt;code&gt;begin&lt;/code&gt;、&lt;code&gt;end&lt;/code&gt;、&lt;code&gt;pregex&lt;/code&gt;、&lt;code&gt;flags&lt;/code&gt;、&lt;code&gt;match&lt;/code&gt; はあくまでも説明用のプライベートメンバ変数であるため、注意すること。&lt;/li&gt;
&lt;li&gt;本メンバ関数が &lt;code&gt;true&lt;/code&gt; を返したとしても、イテレータが同じ個所を指しているとは限らないことに注意すること。（下記の例を参照）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;+1-1+1-&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 2 つのイテレータを同一引数で生成する&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 一方は 2 つ、もう一方は 1 つ進める&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it1; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it1;
  &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it2;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator== で比較する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (it1 &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;&lt;/span&gt; it2) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 参考のため、それぞれのマッチ結果の詳細を出力する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;it1:&#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it1&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;(&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ((&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1)[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;].first &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ((&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1)[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;].second &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;it2:&#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it2&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;(&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ((&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2)[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;].first &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ((&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2)[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;].second &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;true
it1:&#39;1&#39;(5, 6)
it2:&#39;1&#39;(3, 4)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_not_equal.html&#34;&gt;&lt;code&gt;operator!=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非等値比較&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== (C++11) -- regex_iterator: operator== を追加(#235)</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_iterator/op_equal.html"/>
      <id>7e8ea5dcca005edb17de5d5d92e0a297e14bf733:reference/regex/regex_iterator/op_equal.md</id>
      <updated>2014-12-07 18:08:02 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator== (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; right) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;regex_iterator&lt;/code&gt; の等値比較を行う。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt; と引数 &lt;code&gt;right&lt;/code&gt; が共にシーケンスの終端を示すイテレータの場合、&lt;code&gt;true&lt;/code&gt; を返す。&lt;br /&gt;
&lt;code&gt;*this&lt;/code&gt; と引数 &lt;code&gt;right&lt;/code&gt; のいずれか一方のみがシーケンスの終端を示すイテレータの場合、&lt;code&gt;false&lt;/code&gt; を返す。&lt;br /&gt;
&lt;code&gt;*this&lt;/code&gt; と引数 &lt;code&gt;right&lt;/code&gt; が共にシーケンスの終端を示すイテレータではない場合、各メンバ変数が以下の全ての条件を満たしていれば &lt;code&gt;true&lt;/code&gt; を、そうでなければ &lt;code&gt;false&lt;/code&gt; を返す。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;begin == right.begin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;end == right.end&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pregex == right.pregex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flags == right.flags&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;match[0] == right.match[0]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンバ変数 &lt;code&gt;begin&lt;/code&gt;、&lt;code&gt;end&lt;/code&gt;、&lt;code&gt;pregex&lt;/code&gt;、&lt;code&gt;flags&lt;/code&gt;、&lt;code&gt;match&lt;/code&gt; はあくまでも説明用のプライベートメンバ変数であるため、注意すること。&lt;/li&gt;
&lt;li&gt;本メンバ関数が &lt;code&gt;true&lt;/code&gt; を返したとしても、イテレータが同じ個所を指しているとは限らないことに注意すること。（下記の例を参照）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;+1-1+1-&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 2 つのイテレータを同一引数で生成する&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; it1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; it2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 一方は 2 つ、もう一方は 1 つ進める&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it1; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it1;
  &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it2;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator== で比較する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (it1 &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;&lt;/span&gt; it2) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 参考のため、それぞれのマッチ結果の詳細を出力する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;it1:&#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it1&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;(&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ((&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1)[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;].first &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ((&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it1)[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;].second &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;it2:&#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it2&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;(&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ((&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2)[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;].first &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ((&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it2)[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;].second &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;)&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;true
it1:&#39;1&#39;(5, 6)
it2:&#39;1&#39;(3, 4)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_not_equal.html&#34;&gt;&lt;code&gt;operator!=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非等値比較&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>regex_iterator (C++11) -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site
</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_iterator.html"/>
      <id>e552b8f4a0879bc0d96158d75bb48a148594f638:reference/regex/regex_iterator.md</id>
      <updated>2014-12-07 17:21:02 +0900
</updated>
      
        <content type="html">&lt;h1&gt;regex_iterator (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;BidirectionalIterator&lt;/span&gt;,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;charT&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; iterator_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;BidirectionalIterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value_type,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;traits&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;regex_iterator&lt;/span&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; cregex_iterator;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; wcregex_iterator;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;const_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; sregex_iterator;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;wstring&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;const_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; wsregex_iterator;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;regex_iterator&lt;/code&gt; は、ある文字列に対して、指定した正規表現で検索した結果を順番に列挙する読み取り専用の前方向イテレータである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;regex_iterator&lt;/code&gt; オブジェクトを構築した時、および、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_increment.html&#34;&gt;&lt;code&gt;operator++&lt;/code&gt;&lt;/a&gt; を呼び出す毎に、当該イテレータは &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; を呼び出して検索し、マッチ結果オブジェクト（&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;）を内部に保存する（ただし、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_increment.html&#34;&gt;&lt;code&gt;operator++&lt;/code&gt;&lt;/a&gt; も参照）。
イテレータが終端まで来たとき（つまり、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; が &lt;code&gt;false&lt;/code&gt; を返したとき）、当該イテレータはシーケンスの終端を示す特別な値となる。
この、シーケンスの終端を示す特別な値は、&lt;code&gt;regex_iterator&lt;/code&gt; オブジェクトをデフォルトコンストラクタにより構築した場合にも生成されるため、この値と比較することによってシーケンスの終端であるか否か（つまり、マッチしなかったか否か）が判別できる。&lt;/p&gt;
&lt;p&gt;シーケンス終端のイテレータに対する &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_deref.html&#34;&gt;&lt;code&gt;operator*&lt;/code&gt;&lt;/a&gt; 演算子適用は未定義である。その他のイテレータに対する &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_deref.html&#34;&gt;&lt;code&gt;operator*&lt;/code&gt;&lt;/a&gt; 演算子適用の結果は &lt;code&gt;const&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;&amp;amp;&lt;/code&gt; である。&lt;br /&gt;
同様に、シーケンス終端のイテレータに対する &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_arrow.html&#34;&gt;&lt;code&gt;operator-&amp;gt;&lt;/code&gt;&lt;/a&gt; 演算子適用は未定義である。その他のイテレータに対する &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_arrow.html&#34;&gt;&lt;code&gt;operator-&amp;gt;&lt;/code&gt;&lt;/a&gt; 演算子適用の結果は &lt;code&gt;const&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;*&lt;/code&gt; である。&lt;/p&gt;
&lt;p&gt;なお、本サイトの &lt;code&gt;regex_iterator&lt;/code&gt; の各説明では、規格にならって以下のプライベートなメンバ変数が存在する前提で記載している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;検索対象文字列の開始位置を示すイテレータ &lt;code&gt;begin&lt;/code&gt;（&lt;code&gt;BidirectionalIterator&lt;/code&gt; 型）&lt;/li&gt;
&lt;li&gt;検索対象文字列の終了位置を示すイテレータ &lt;code&gt;end&lt;/code&gt;（&lt;code&gt;BidirectionalIterator&lt;/code&gt; 型）&lt;/li&gt;
&lt;li&gt;検索する正規表現へのポインタ &lt;code&gt;pregex&lt;/code&gt;（&lt;code&gt;const&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex.html&#34;&gt;&lt;code&gt;basic_regex&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;charT, traits&amp;gt;*&lt;/code&gt; 型。正規表現のコピーではないことに注意）&lt;/li&gt;
&lt;li&gt;検索フラグ &lt;code&gt;flags&lt;/code&gt;（&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_constants.html&#34;&gt;&lt;code&gt;regex_constants&lt;/code&gt;&lt;/a&gt;&lt;code&gt;::match_flag_type&lt;/code&gt; 型）&lt;/li&gt;
&lt;li&gt;最後の検索のマッチ結果オブジェクト &lt;code&gt;match&lt;/code&gt;（&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&lt;/code&gt; 型）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;しかし、規格上これらのメンバ変数は説明のためだけに導入されているため、実際の各実装でこれらのメンバ変数が存在するとは限らない事に注意すること。&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;h3&gt;構築・破棄&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/regex_iterator.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/-regex_iterator.html&#34;&gt;&lt;code&gt;(destructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_assign.html&#34;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;比較&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_not_equal.html&#34;&gt;&lt;code&gt;operator!=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;間接&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_deref.html&#34;&gt;&lt;code&gt;operator*&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;間接参照&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_arrow.html&#34;&gt;&lt;code&gt;operator-&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバアクセス&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;インクリメント&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_increment.html&#34;&gt;&lt;code&gt;operator++&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;インクリメント&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;regex_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マッチに使用している正規表現型。&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex.html&#34;&gt;&lt;code&gt;basic_regex&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;charT, traits&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マッチ結果の型（間接参照で返される型）。&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;difference_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2 つのイテレータの差を表すための型。&lt;code&gt;ptrdiff_t&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const value_type&lt;/code&gt; へのポインタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const value_type&lt;/code&gt; への参照&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iterator_category&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;このイテレータのカテゴリを表すタグ。前方向イテレータ（&lt;code&gt;forward_iterator_tag&lt;/code&gt;）&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;説明用プライベートメンバ変数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;検索対象文字列の開始位置を示すイテレータ。&lt;code&gt;BidirectionalIterator&lt;/code&gt; 型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;end&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;検索対象文字列の終了位置を示すイテレータ。&lt;code&gt;BidirectionalIterator&lt;/code&gt; 型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pregex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;検索する正規表現へのポインタ。正規表現のコピーではないことに注意。&lt;code&gt;const&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex.html&#34;&gt;&lt;code&gt;basic_regex&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;charT, traits&amp;gt;*&lt;/code&gt; 型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;検索フラグ。&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_constants.html&#34;&gt;&lt;code&gt;regex_constants&lt;/code&gt;&lt;/a&gt;&lt;code&gt;::match_flag_type&lt;/code&gt; 型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最後の検索のマッチ結果オブジェクト。&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&lt;/code&gt; 型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cregex_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;regex_iterator&amp;lt;const char*&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wcregex_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;regex_iterator&amp;lt;const wchar_t*&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sregex_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;regex_iterator&amp;lt;string::const_iterator&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wsregex_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;regex_iterator&amp;lt;wstring::const_iterator&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;a01da123456da999d&#34;&lt;/span&gt;);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;sregex_iterator&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re), end &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;sregex_iterator&lt;/span&gt;(); it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; end; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it) {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;position = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.position() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, length = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.length() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, str = &#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.str(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\&#39;&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;position = 1, length = 2, str = &#39;01&#39;
position = 5, length = 6, str = &#39;123456&#39;
position = 13, length = 3, str = &#39;999&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ただし、Clang と GCC の 4.9.1 までのバージョンには、長さ 0 の文字列にマッチした時の挙動に問題があるため、注意が必要。
（特に、Clang は長さ 0 の文字列にマッチするとそこから先に進まなくなってしまう）&lt;/p&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ (C++11) -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site
</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_iterator/regex_iterator.html"/>
      <id>e552b8f4a0879bc0d96158d75bb48a148594f638:reference/regex/regex_iterator/regex_iterator.md</id>
      <updated>2014-12-07 17:21:02 +0900
</updated>
      
        <content type="html">&lt;h1&gt;コンストラクタ (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;regex_iterator();                                                                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

regex_iterator(BidirectionalIterator a, BidirectionalIterator b,
               &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; re,
               regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_flag_type m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_default);           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

regex_iterator(BidirectionalIterator a, BidirectionalIterator b,
               &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; re,
               regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_flag_type m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_default) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++14 から&lt;/span&gt;

regex_iterator(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;);                                                         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;regex_iterator&lt;/code&gt; オブジェクトを構築する&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) デフォルトコンストラクタ。シーケンスの終端を示す特別なイテレータを構築する。&lt;/li&gt;
&lt;li&gt;(2) メンバ変数 &lt;code&gt;begin&lt;/code&gt;、&lt;code&gt;end&lt;/code&gt;、&lt;code&gt;pregex&lt;/code&gt;、&lt;code&gt;flags&lt;/code&gt; をそれぞれ &lt;code&gt;a&lt;/code&gt;、&lt;code&gt;b&lt;/code&gt;、&lt;code&gt;&amp;amp;re&lt;/code&gt;、&lt;code&gt;m&lt;/code&gt; で初期化して、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(begin, end, match, *pregex, flags)&lt;/code&gt; を呼び出す。
    検索に成功しなかった場合（&lt;code&gt;false&lt;/code&gt; が返された場合）、デフォルトコンストラクタで構築した場合と同様、直ちにシーケンスの終端を示す特別なイテレータとなる。&lt;/li&gt;
&lt;li&gt;(3) deleted コンストラクタであるため、使用するとコンパイルエラーとなる。&lt;/li&gt;
&lt;li&gt;(4) コピーコンストラクタ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンバ変数 &lt;code&gt;begin&lt;/code&gt;、&lt;code&gt;end&lt;/code&gt;、&lt;code&gt;pregex&lt;/code&gt;、&lt;code&gt;flags&lt;/code&gt;、&lt;code&gt;match&lt;/code&gt; はあくまでも説明用のプライベートメンバ変数であるため、注意すること。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;regex_iterator&lt;/code&gt; は指定された正規表現 &lt;code&gt;re&lt;/code&gt; のコピーではなく、&lt;code&gt;re&lt;/code&gt; へのポインタをオブジェクト内に保持するため、引数に渡した正規表現オブジェクトは当該イテレータを使用し終わるまで破棄されないようにする必要がある。&lt;br /&gt;
    従って、(2) の形式のコンストラクタに渡す引数 &lt;code&gt;re&lt;/code&gt; に一時オブジェクトを指定することはほぼ間違いなくプログラミング上のエラーを意味する。&lt;br /&gt;
    (3) の形式のコンストラクタが C++14 で追加された理由は、この事態をコンパイル時に検出するためである。&lt;br /&gt;
    しかし、この追加のため、C++11 では合法となりうる以下のようなコードは C++14 ではコンパイルエラーになる。
  &lt;br /&gt;
&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;f&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;);

    f(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator(s.begin(), s.end(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;)));
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;This compiler supports the C++11 standard.&#34;&lt;/span&gt;);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;sregex_iterator&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;sregex_iterator&lt;/span&gt;()) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;match:&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  } &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;not match&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;match:11
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11（一部 C++14）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;備考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;libstdc++ には 5.0.0 rev.218373 現在、(3) の形式のコンストラクタは存在しない。&lt;/li&gt;
&lt;li&gt;libc++ には、3.4 までは (3) の形式のコンストラクタは存在しない。&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>regex_iterator (C++11) -- regex_iterator: 説明を分かりやすくするため、説明用メンバ変数を導入</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_iterator.html"/>
      <id>546c1092d062a144ef18fb3ee9d97fdcc1062bef:reference/regex/regex_iterator.md</id>
      <updated>2014-12-07 17:13:46 +0900</updated>
      
        <content type="html">&lt;h1&gt;regex_iterator (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;BidirectionalIterator&lt;/span&gt;,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;charT&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; iterator_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;BidirectionalIterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value_type,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;traits&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;regex_iterator&lt;/span&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; cregex_iterator;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; wcregex_iterator;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;const_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; sregex_iterator;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;wstring&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;const_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; wsregex_iterator;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;regex_iterator&lt;/code&gt; は、ある文字列に対して、指定した正規表現で検索した結果を順番に列挙する読み取り専用の前方向イテレータである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;regex_iterator&lt;/code&gt; オブジェクトを構築した時、および、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_increment.html&#34;&gt;&lt;code&gt;operator++&lt;/code&gt;&lt;/a&gt; を呼び出す毎に、当該イテレータは &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; を呼び出して検索し、マッチ結果オブジェクト（&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;）を内部に保存する（ただし、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_increment.html&#34;&gt;&lt;code&gt;operator++&lt;/code&gt;&lt;/a&gt; も参照）。
イテレータが終端まで来たとき（つまり、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; が &lt;code&gt;false&lt;/code&gt; を返したとき）、当該イテレータはシーケンスの終端を示す特別な値となる。
この、シーケンスの終端を示す特別な値は、&lt;code&gt;regex_iterator&lt;/code&gt; オブジェクトをデフォルトコンストラクタにより構築した場合にも生成されるため、この値と比較することによってシーケンスの終端であるか否か（つまり、マッチしなかったか否か）が判別できる。&lt;/p&gt;
&lt;p&gt;シーケンス終端のイテレータに対する &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_deref.html&#34;&gt;&lt;code&gt;operator*&lt;/code&gt;&lt;/a&gt; 演算子適用は未定義である。その他のイテレータに対する &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_deref.html&#34;&gt;&lt;code&gt;operator*&lt;/code&gt;&lt;/a&gt; 演算子適用の結果は &lt;code&gt;const&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;&amp;amp;&lt;/code&gt; である。&lt;br /&gt;
同様に、シーケンス終端のイテレータに対する &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_arrow.html&#34;&gt;&lt;code&gt;operator-&amp;gt;&lt;/code&gt;&lt;/a&gt; 演算子適用は未定義である。その他のイテレータに対する &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_arrow.html&#34;&gt;&lt;code&gt;operator-&amp;gt;&lt;/code&gt;&lt;/a&gt; 演算子適用の結果は &lt;code&gt;const&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;*&lt;/code&gt; である。&lt;/p&gt;
&lt;p&gt;なお、本サイトの &lt;code&gt;regex_iterator&lt;/code&gt; の各説明では、規格にならって以下のプライベートなメンバ変数が存在する前提で記載している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;検索対象文字列の開始位置を示すイテレータ &lt;code&gt;begin&lt;/code&gt;（&lt;code&gt;BidirectionalIterator&lt;/code&gt; 型）&lt;/li&gt;
&lt;li&gt;検索対象文字列の終了位置を示すイテレータ &lt;code&gt;end&lt;/code&gt;（&lt;code&gt;BidirectionalIterator&lt;/code&gt; 型）&lt;/li&gt;
&lt;li&gt;検索する正規表現へのポインタ &lt;code&gt;pregex&lt;/code&gt;（&lt;code&gt;const&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex.html&#34;&gt;&lt;code&gt;basic_regex&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;charT, traits&amp;gt;*&lt;/code&gt; 型。正規表現のコピーではないことに注意）&lt;/li&gt;
&lt;li&gt;検索フラグ &lt;code&gt;flags&lt;/code&gt;（&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_constants.html&#34;&gt;&lt;code&gt;regex_constants&lt;/code&gt;&lt;/a&gt;&lt;code&gt;::match_flag_type&lt;/code&gt; 型）&lt;/li&gt;
&lt;li&gt;最後の検索のマッチ結果オブジェクト &lt;code&gt;match&lt;/code&gt;（&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&lt;/code&gt; 型）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;しかし、規格上これらのメンバ変数は説明のためだけに導入されているため、実際の各実装でこれらのメンバ変数が存在するとは限らない事に注意すること。&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;h3&gt;構築・破棄&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/regex_iterator.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/-regex_iterator.html&#34;&gt;&lt;code&gt;(destructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_assign.html&#34;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;比較&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_not_equal.html&#34;&gt;&lt;code&gt;operator!=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;間接&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_deref.html&#34;&gt;&lt;code&gt;operator*&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;間接参照&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_arrow.html&#34;&gt;&lt;code&gt;operator-&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバアクセス&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;インクリメント&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_increment.html&#34;&gt;&lt;code&gt;operator++&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;インクリメント&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;regex_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マッチに使用している正規表現型。&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex.html&#34;&gt;&lt;code&gt;basic_regex&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;charT, traits&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マッチ結果の型（間接参照で返される型）。&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;difference_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2 つのイテレータの差を表すための型。&lt;code&gt;ptrdiff_t&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const value_type&lt;/code&gt; へのポインタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const value_type&lt;/code&gt; への参照&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iterator_category&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;このイテレータのカテゴリを表すタグ。前方向イテレータ（&lt;code&gt;forward_iterator_tag&lt;/code&gt;）&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;説明用プライベートメンバ変数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;検索対象文字列の開始位置を示すイテレータ。&lt;code&gt;BidirectionalIterator&lt;/code&gt; 型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;end&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;検索対象文字列の終了位置を示すイテレータ。&lt;code&gt;BidirectionalIterator&lt;/code&gt; 型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pregex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;検索する正規表現へのポインタ。正規表現のコピーではないことに注意。&lt;code&gt;const&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex.html&#34;&gt;&lt;code&gt;basic_regex&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;charT, traits&amp;gt;*&lt;/code&gt; 型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;検索フラグ。&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_constants.html&#34;&gt;&lt;code&gt;regex_constants&lt;/code&gt;&lt;/a&gt;&lt;code&gt;::match_flag_type&lt;/code&gt; 型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最後の検索のマッチ結果オブジェクト。&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&lt;/code&gt; 型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cregex_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;regex_iterator&amp;lt;const char*&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wcregex_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;regex_iterator&amp;lt;const wchar_t*&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sregex_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;regex_iterator&amp;lt;string::const_iterator&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wsregex_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;regex_iterator&amp;lt;wstring::const_iterator&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;a01da123456da999d&#34;&lt;/span&gt;);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;sregex_iterator&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re), end &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;sregex_iterator&lt;/span&gt;(); it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; end; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it) {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;position = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.position() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, length = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.length() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, str = &#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.str(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\&#39;&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;position = 1, length = 2, str = &#39;01&#39;
position = 5, length = 6, str = &#39;123456&#39;
position = 13, length = 3, str = &#39;999&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ただし、Clang と GCC の 4.9.1 までのバージョンには、長さ 0 の文字列にマッチした時の挙動に問題があるため、注意が必要。
（特に、Clang は長さ 0 の文字列にマッチするとそこから先に進まなくなってしまう）&lt;/p&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ (C++11) -- regex_iterator: 説明を分かりやすくするため、説明用メンバ変数を導入</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_iterator/regex_iterator.html"/>
      <id>546c1092d062a144ef18fb3ee9d97fdcc1062bef:reference/regex/regex_iterator/regex_iterator.md</id>
      <updated>2014-12-07 17:13:46 +0900</updated>
      
        <content type="html">&lt;h1&gt;コンストラクタ (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;regex_iterator();                                                                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

regex_iterator(BidirectionalIterator a, BidirectionalIterator b,
               &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; re,
               regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_flag_type m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_default);           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

regex_iterator(BidirectionalIterator a, BidirectionalIterator b,
               &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; re,
               regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_flag_type m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_default) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++14 から&lt;/span&gt;

regex_iterator(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;);                                                         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;regex_iterator&lt;/code&gt; オブジェクトを構築する&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) デフォルトコンストラクタ。シーケンスの終端を示す特別なイテレータを構築する。&lt;/li&gt;
&lt;li&gt;(2) メンバ変数 &lt;code&gt;begin&lt;/code&gt;、&lt;code&gt;end&lt;/code&gt;、&lt;code&gt;pregex&lt;/code&gt;、&lt;code&gt;flags&lt;/code&gt; をそれぞれ &lt;code&gt;a&lt;/code&gt;、&lt;code&gt;b&lt;/code&gt;、&lt;code&gt;&amp;amp;re&lt;/code&gt;、&lt;code&gt;m&lt;/code&gt; で初期化して、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(begin, end, match, *pregex, flags)&lt;/code&gt; を呼び出す。
    検索に成功しなかった場合（&lt;code&gt;false&lt;/code&gt; が返された場合）、デフォルトコンストラクタで構築した場合と同様、直ちにシーケンスの終端を示す特別なイテレータとなる。&lt;/li&gt;
&lt;li&gt;(3) deleted コンストラクタであるため、使用するとコンパイルエラーとなる。&lt;/li&gt;
&lt;li&gt;(4) コピーコンストラクタ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンバ変数 &lt;code&gt;begin&lt;/code&gt;、&lt;code&gt;end&lt;/code&gt;、&lt;code&gt;pregex&lt;/code&gt;、&lt;code&gt;flags&lt;/code&gt;、&lt;code&gt;match&lt;/code&gt; はあくまでも説明用のプライベートメンバ変数であるため、注意すること。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;regex_iterator&lt;/code&gt; は指定された正規表現 &lt;code&gt;re&lt;/code&gt; のコピーではなく、&lt;code&gt;re&lt;/code&gt; へのポインタをオブジェクト内に保持するため、引数に渡した正規表現オブジェクトは当該イテレータを使用し終わるまで破棄されないようにする必要がある。&lt;br /&gt;
    従って、(2) の形式のコンストラクタに渡す引数 &lt;code&gt;re&lt;/code&gt; に一時オブジェクトを指定することはほぼ間違いなくプログラミング上のエラーを意味する。&lt;br /&gt;
    (3) の形式のコンストラクタが C++14 で追加された理由は、この事態をコンパイル時に検出するためである。&lt;br /&gt;
    しかし、この追加のため、C++11 では合法となりうる以下のようなコードは C++14 ではコンパイルエラーになる。
  &lt;br /&gt;
&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;f&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;);

    f(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator(s.begin(), s.end(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;)));
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;This compiler supports the C++11 standard.&#34;&lt;/span&gt;);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;sregex_iterator&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;sregex_iterator&lt;/span&gt;()) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;match:&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  } &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;not match&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;match:11
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11（一部 C++14）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;備考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;libstdc++ には 5.0.0 rev.218373 現在、(3) の形式のコンストラクタは存在しない。&lt;/li&gt;
&lt;li&gt;libc++ には、3.4 までは (3) の形式のコンストラクタは存在しない。&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ (C++11) -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site
</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_iterator/regex_iterator.html"/>
      <id>0c41eeacf1ab1fcb2ae461296606c283471b50ea:reference/regex/regex_iterator/regex_iterator.md</id>
      <updated>2014-12-05 02:48:28 +0900
</updated>
      
        <content type="html">&lt;h1&gt;コンストラクタ (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;regex_iterator();                                                                                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

regex_iterator(BidirectionalIterator first, BidirectionalIterator last,
               &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; re,
               regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_flag_type flags &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_default);           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

regex_iterator(BidirectionalIterator first, BidirectionalIterator last,
               &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; re,
               regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_flag_type flags &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;match_default) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++14 から&lt;/span&gt;

regex_iterator(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;);                                                             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;regex_iterator&lt;/code&gt; オブジェクトを構築する&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) デフォルトコンストラクタ。シーケンスの終端を示す特別なイテレータを構築する。&lt;/li&gt;
&lt;li&gt;(2) 検索対象の文字列シーケンスを &lt;code&gt;[first, last)&lt;/code&gt;、検索する正規表現を &lt;code&gt;re&lt;/code&gt;、検索フラグを &lt;code&gt;flags&lt;/code&gt; として、&lt;code&gt;regex_iterator&lt;/code&gt; を構築する。
    当コンストラクタでは、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; を呼び出し、検索に成功したら（&lt;code&gt;true&lt;/code&gt; が返されたら）、マッチ結果（&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;）を保持して間接参照可能なイテレータとなる。
    検索に成功しなかった場合、デフォルトコンストラクタで構築した場合と同様、直ちにシーケンスの終端を示す特別なイテレータとなる。&lt;/li&gt;
&lt;li&gt;(3) deleted コンストラクタであるため、使用するとコンパイルエラーとなる。&lt;/li&gt;
&lt;li&gt;(4) コピーコンストラクタ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;regex_iterator&lt;/code&gt; は指定された正規表現 &lt;code&gt;re&lt;/code&gt; のコピーではなく、&lt;code&gt;re&lt;/code&gt; へのポインタをオブジェクト内に保持するため、引数に渡した正規表現オブジェクトは当該イテレータを使用し終わるまで破棄されないようにする必要がある。&lt;br /&gt;
従って、(2) の形式のコンストラクタに渡す引数 &lt;code&gt;re&lt;/code&gt; に一時オブジェクトを指定することはほぼ間違いなくプログラミング上のエラーを意味する。&lt;br /&gt;
(3) の形式のコンストラクタが C++14 で追加された理由は、この事態をコンパイル時に検出するためである。&lt;br /&gt;
しかし、この追加のため、C++11 では合法となりうる以下のようなコードは C++14 ではコンパイルエラーになる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;f&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;);

f(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator(s.begin(), s.end(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;)));
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;This compiler supports the C++11 standard.&#34;&lt;/span&gt;);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;sregex_iterator&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;sregex_iterator&lt;/span&gt;()) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;match:&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  } &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;not match&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;match:11
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11（一部 C++14）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;備考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;libstdc++ には 5.0.0 rev.218373 現在、(3) の形式のコンストラクタは存在しない。&lt;/li&gt;
&lt;li&gt;libc++ には、3.4 までは (3) の形式のコンストラクタは存在しない。&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2015-04-02T16:33:37.537470</updated>
  <id>8de916ad-bad2-4b31-83a0-ba253ed0a5ee</id>

  
    <entry>
      <title>async (C++11) -- async : C++14版のオーバーロードを追加</title>
      <link href="http://cpprefjp.github.io/reference/future/async.html"/>
      <id>a4ab301807704df4724a5044e9ce8727554913c5:reference/future/async.md</id>
      <updated>2015-04-02 16:33:20 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;future&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;async (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/future/future.html&#34;&gt;future&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/result_of.html&#34;&gt;result_of&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;F(Args...)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    async(F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f, Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++11&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/future/future.html&#34;&gt;future&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/result_of.html&#34;&gt;result_of&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/decay.html&#34;&gt;decay&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/decay.html&#34;&gt;decay&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type...)
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type
  &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; async(F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f, Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++14&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/future/future.html&#34;&gt;future&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/result_of.html&#34;&gt;result_of&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;F(Args...)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    async(&lt;a href=&#34;http://cpprefjp.github.io/reference/future/launch.html&#34;&gt;launch&lt;/a&gt; policy, F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f, Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++11&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/future/future.html&#34;&gt;future&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/result_of.html&#34;&gt;result_of&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/decay.html&#34;&gt;decay&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/decay.html&#34;&gt;decay&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type...)
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type
  &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; async(&lt;a href=&#34;http://cpprefjp.github.io/reference/future/launch.html&#34;&gt;launch&lt;/a&gt; policy, F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f, Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;関数を非同期実行する。&lt;/p&gt;
&lt;p&gt;この関数は、指定された関数を非同期実行し、結果値を取得するための&lt;code&gt;future&lt;/code&gt;オブジェクトを返す。&lt;/p&gt;
&lt;p&gt;返された&lt;code&gt;future&lt;/code&gt;オブジェクトの&lt;code&gt;get()&lt;/code&gt;もしくは&lt;code&gt;wait()&lt;/code&gt;を呼び出すことにより、非同期実行の完了を待機する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;関数オブジェクト&lt;code&gt;F&lt;/code&gt;および&lt;code&gt;Args...&lt;/code&gt;の各型が、&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_move_constructible.html&#34;&gt;&lt;code&gt;is_move_construcitble&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T&amp;gt;::value == true&lt;/code&gt;であること。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/invoke.html&#34;&gt;&lt;code&gt;INVOKE&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(DECAY_COPY(std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;F&amp;gt;(f)), DECAY_COPY(std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args))...)&lt;/code&gt;が可能であること。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;この関数は、パラメータ&lt;code&gt;policy&lt;/code&gt;で指定された実行ポリシーの値によって振る舞いを変える。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;policy&lt;/code&gt;を指定しない場合は&lt;a href=&#34;http://cpprefjp.github.io/reference/future/launch.html&#34;&gt;&lt;code&gt;launch::async&lt;/code&gt;&lt;/a&gt;&lt;code&gt;|&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/future/launch.html&#34;&gt;&lt;code&gt;launch::deferred&lt;/code&gt;&lt;/a&gt;となり、どちらの実行ポリシーが選択されるかは実装定義となる。&lt;/p&gt;
&lt;p&gt;各実行ポリシーの振る舞いは以下のようになる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;policy &amp;amp; launch::async&lt;/code&gt;が&lt;code&gt;0&lt;/code&gt;じゃない場合、新たなスレッドで関数オブジェクト&lt;code&gt;f&lt;/code&gt;に&lt;code&gt;args...&lt;/code&gt;を渡して実行する&lt;ul&gt;
&lt;li&gt;( &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/invoke.html&#34;&gt;&lt;code&gt;INVOKE&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(DECAY_COPY(std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;F&amp;gt;(f)), DECAY_COPY(std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args))...)&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;関数オブジェクト&lt;code&gt;f&lt;/code&gt;の戻り値が、この関数の戻り値である&lt;a href=&#34;http://cpprefjp.github.io/reference/future/future.html&#34;&gt;&lt;code&gt;future&lt;/code&gt;&lt;/a&gt;オブジェクトとの共有状態に書き込まれる。&lt;/li&gt;
&lt;li&gt;関数オブジェクト&lt;code&gt;f&lt;/code&gt;の内部で例外が投げられた場合は、共有状態に投げられた例外が設定される。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;policy &amp;amp; launch::deferred&lt;/code&gt;が&lt;code&gt;0&lt;/code&gt;じゃない場合、関数オブジェクト&lt;code&gt;f&lt;/code&gt;をその場では実行せず、遅延状態にする&lt;ul&gt;
&lt;li&gt;(&lt;code&gt;DECAY_COPY(std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;F&amp;gt;(f))&lt;/code&gt;と&lt;code&gt;DECAY_COPY(std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args))...&lt;/code&gt;を&lt;a href=&#34;http://cpprefjp.github.io/reference/future/future.html&#34;&gt;&lt;code&gt;future&lt;/code&gt;&lt;/a&gt;オブジェクトとの共有状態に格納する)。&lt;/li&gt;
&lt;li&gt;この関数の戻り値である&lt;a href=&#34;http://cpprefjp.github.io/reference/future/future.html&#34;&gt;&lt;code&gt;future&lt;/code&gt;&lt;/a&gt;オブジェクトの&lt;a href=&#34;http://cpprefjp.github.io/reference/future/future/get.html&#34;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;もしくは&lt;a href=&#34;http://cpprefjp.github.io/reference/future/future/wait.html&#34;&gt;&lt;code&gt;wait()&lt;/code&gt;&lt;/a&gt;が呼び出されるタイミングで、関数オブジェクト&lt;code&gt;f&lt;/code&gt;に&lt;code&gt;args...&lt;/code&gt;を渡して実行する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有効な実行ポリシーが指定されていない場合(整数値を&lt;code&gt;launch&lt;/code&gt;型にキャストするような状況)、その動作は未定義(C++14)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;非同期実行される関数オブジェクト&lt;code&gt;f&lt;/code&gt;の結果値取得のための&lt;code&gt;future&lt;/code&gt;オブジェクトを返す。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;この関数は、以下のerror conditionを持つ&lt;a href=&#34;http://cpprefjp.github.io/reference/future/future_error.html&#34;&gt;&lt;code&gt;future_error&lt;/code&gt;&lt;/a&gt;例外オブジェクトを送出する可能性がある：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/future/future_errc.html&#34;&gt;&lt;code&gt;resource_unavailable_try_again&lt;/code&gt;&lt;/a&gt; ： &lt;a href=&#34;http://cpprefjp.github.io/reference/future/launch.html&#34;&gt;&lt;code&gt;launch::async&lt;/code&gt;&lt;/a&gt;が指定され、新たなスレッドをを起動しようとしたができなかった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;future&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;thread&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;foo&lt;/span&gt;() { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;executes foo()&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 新たなスレッドで関数foo()を非同期実行&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;invokes std::async(std::launch::async, foo)&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;future&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;async(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;launch&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;async, foo);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;this_thread&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sleep_for(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;milliseconds(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;));
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;main thread: slept for 10 msec&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非同期実行の結果を取得&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; f.get();
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;foo() = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 関数fを遅延状態で非同期実行&lt;/span&gt;
  {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// この段階では関数foo()を実行しない&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;invokes std::async(std::launch::deferred, foo)&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;future&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;async(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;launch&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deferred, foo);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;this_thread&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sleep_for(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;milliseconds(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;));
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;main thread: slept for 10 msec&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非同期実行の結果を取得&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// この段階で関数foo()を実行&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; f.get();
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;foo() = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;invokes std::async(std::launch::async, foo)
executes foo()
main thread: slept for 10 msec
foo() = 3

invokes std::async(std::launch::deferred, foo)
main thread: slept for 10 msec
executes foo()
foo() = 3
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2120&#34; target=&#34;_blank&#34;&gt;LWG Issue 2120. What should &lt;code&gt;async&lt;/code&gt; do if neither &lt;code&gt;async&lt;/code&gt; nor &lt;code&gt;deferred&lt;/code&gt; is set in policy?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2021&#34; target=&#34;_blank&#34;&gt;LWG Issue 2021. Further incorrect usages of &lt;code&gt;result_of&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++14で、戻り値型の計算に&lt;code&gt;decay&lt;/code&gt;を適用するようにした。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>async (C++11) -- async : タイトルに言語バージョンを追加</title>
      <link href="http://cpprefjp.github.io/reference/future/async.html"/>
      <id>7d4980dbf5f5a06eb035d27a159f1db52c8b2b63:reference/future/async.md</id>
      <updated>2015-04-02 16:24:41 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;future&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;async (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/future/future.html&#34;&gt;future&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; result_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;F(Args...)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    async(F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f, Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/future/future.html&#34;&gt;future&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; result_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;F(Args...)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    async(&lt;a href=&#34;http://cpprefjp.github.io/reference/future/launch.html&#34;&gt;launch&lt;/a&gt; policy, F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f, Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;関数を非同期実行する。&lt;/p&gt;
&lt;p&gt;この関数は、指定された関数を非同期実行し、結果値を取得するための&lt;code&gt;future&lt;/code&gt;オブジェクトを返す。&lt;/p&gt;
&lt;p&gt;返された&lt;code&gt;future&lt;/code&gt;オブジェクトの&lt;code&gt;get()&lt;/code&gt;もしくは&lt;code&gt;wait()&lt;/code&gt;を呼び出すことにより、非同期実行の完了を待機する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;関数オブジェクト&lt;code&gt;F&lt;/code&gt;および&lt;code&gt;Args...&lt;/code&gt;の各型が、&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_move_constructible.html&#34;&gt;&lt;code&gt;is_move_construcitble&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T&amp;gt;::value == true&lt;/code&gt;であること。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/invoke.html&#34;&gt;&lt;code&gt;INVOKE&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(DECAY_COPY(std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;F&amp;gt;(f)), DECAY_COPY(std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args))...)&lt;/code&gt;が可能であること。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;この関数は、パラメータ&lt;code&gt;policy&lt;/code&gt;で指定された実行ポリシーの値によって振る舞いを変える。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;policy&lt;/code&gt;を指定しない場合は&lt;a href=&#34;http://cpprefjp.github.io/reference/future/launch.html&#34;&gt;&lt;code&gt;launch::async&lt;/code&gt;&lt;/a&gt;&lt;code&gt;|&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/future/launch.html&#34;&gt;&lt;code&gt;launch::deferred&lt;/code&gt;&lt;/a&gt;となり、どちらの実行ポリシーが選択されるかは実装定義となる。&lt;/p&gt;
&lt;p&gt;各実行ポリシーの振る舞いは以下のようになる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;policy &amp;amp; launch::async&lt;/code&gt;が&lt;code&gt;0&lt;/code&gt;じゃない場合、新たなスレッドで関数オブジェクト&lt;code&gt;f&lt;/code&gt;に&lt;code&gt;args...&lt;/code&gt;を渡して実行する&lt;ul&gt;
&lt;li&gt;( &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/invoke.html&#34;&gt;&lt;code&gt;INVOKE&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(DECAY_COPY(std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;F&amp;gt;(f)), DECAY_COPY(std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args))...)&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;関数オブジェクト&lt;code&gt;f&lt;/code&gt;の戻り値が、この関数の戻り値である&lt;a href=&#34;http://cpprefjp.github.io/reference/future/future.html&#34;&gt;&lt;code&gt;future&lt;/code&gt;&lt;/a&gt;オブジェクトとの共有状態に書き込まれる。&lt;/li&gt;
&lt;li&gt;関数オブジェクト&lt;code&gt;f&lt;/code&gt;の内部で例外が投げられた場合は、共有状態に投げられた例外が設定される。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;policy &amp;amp; launch::deferred&lt;/code&gt;が&lt;code&gt;0&lt;/code&gt;じゃない場合、関数オブジェクト&lt;code&gt;f&lt;/code&gt;をその場では実行せず、遅延状態にする&lt;ul&gt;
&lt;li&gt;(&lt;code&gt;DECAY_COPY(std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;F&amp;gt;(f))&lt;/code&gt;と&lt;code&gt;DECAY_COPY(std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args))...&lt;/code&gt;を&lt;a href=&#34;http://cpprefjp.github.io/reference/future/future.html&#34;&gt;&lt;code&gt;future&lt;/code&gt;&lt;/a&gt;オブジェクトとの共有状態に格納する)。&lt;/li&gt;
&lt;li&gt;この関数の戻り値である&lt;a href=&#34;http://cpprefjp.github.io/reference/future/future.html&#34;&gt;&lt;code&gt;future&lt;/code&gt;&lt;/a&gt;オブジェクトの&lt;a href=&#34;http://cpprefjp.github.io/reference/future/future/get.html&#34;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;もしくは&lt;a href=&#34;http://cpprefjp.github.io/reference/future/future/wait.html&#34;&gt;&lt;code&gt;wait()&lt;/code&gt;&lt;/a&gt;が呼び出されるタイミングで、関数オブジェクト&lt;code&gt;f&lt;/code&gt;に&lt;code&gt;args...&lt;/code&gt;を渡して実行する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有効な実行ポリシーが指定されていない場合(整数値を&lt;code&gt;launch&lt;/code&gt;型にキャストするような状況)、その動作は未定義(C++14)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;非同期実行される関数オブジェクト&lt;code&gt;f&lt;/code&gt;の結果値取得のための&lt;code&gt;future&lt;/code&gt;オブジェクトを返す。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;この関数は、以下のerror conditionを持つ&lt;a href=&#34;http://cpprefjp.github.io/reference/future/future_error.html&#34;&gt;&lt;code&gt;future_error&lt;/code&gt;&lt;/a&gt;例外オブジェクトを送出する可能性がある：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/future/future_errc.html&#34;&gt;&lt;code&gt;resource_unavailable_try_again&lt;/code&gt;&lt;/a&gt; ： &lt;a href=&#34;http://cpprefjp.github.io/reference/future/launch.html&#34;&gt;&lt;code&gt;launch::async&lt;/code&gt;&lt;/a&gt;が指定され、新たなスレッドをを起動しようとしたができなかった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;future&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;thread&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;foo&lt;/span&gt;() { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;executes foo()&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 新たなスレッドで関数foo()を非同期実行&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;invokes std::async(std::launch::async, foo)&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;future&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;async(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;launch&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;async, foo);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;this_thread&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sleep_for(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;milliseconds(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;));
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;main thread: slept for 10 msec&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非同期実行の結果を取得&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; f.get();
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;foo() = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 関数fを遅延状態で非同期実行&lt;/span&gt;
  {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// この段階では関数foo()を実行しない&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;invokes std::async(std::launch::deferred, foo)&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;future&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;async(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;launch&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deferred, foo);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;this_thread&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sleep_for(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;milliseconds(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;));
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;main thread: slept for 10 msec&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非同期実行の結果を取得&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// この段階で関数foo()を実行&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; f.get();
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;foo() = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;invokes std::async(std::launch::async, foo)
executes foo()
main thread: slept for 10 msec
foo() = 3

invokes std::async(std::launch::deferred, foo)
main thread: slept for 10 msec
executes foo()
foo() = 3
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2120&#34; target=&#34;_blank&#34;&gt;LWG Issue 2120. What should &lt;code&gt;async&lt;/code&gt; do if neither &lt;code&gt;async&lt;/code&gt; nor &lt;code&gt;deferred&lt;/code&gt; is set in policy?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bind (C++11) -- bind : C++14でのresult_ofの変更へのリンクを追加。</title>
      <link href="http://cpprefjp.github.io/reference/functional/bind.html"/>
      <id>e7fb4e24763de5d29b87019f76654bafa53ef089:reference/functional/bind.md</id>
      <updated>2015-04-02 16:23:43 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;functional&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;bind (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, class... BoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;i&gt;unspecified&lt;/i&gt; bind(F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f, BoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... bound_args);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;R&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, class... BoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;i&gt;unspecified&lt;/i&gt; bind(F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f, BoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... bound_args);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/callable.html&#34;&gt;&lt;i&gt;Callable&lt;/i&gt;&lt;/a&gt; オブジェクトに対し、引数を部分的に束縛(bind)する。&lt;/p&gt;
&lt;h2&gt;引数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; -- 束縛先となる &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/callable.html&#34;&gt;&lt;i&gt;Callable&lt;/i&gt;&lt;/a&gt; オブジェクト&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bound_args&lt;/code&gt; -- 束縛対象の値やプレースホルダ(&lt;code&gt;_1&lt;/code&gt;, &lt;code&gt;_2&lt;/code&gt;, ...)、別の &lt;code&gt;bind()&lt;/code&gt; 呼び出し&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;引数を部分束縛された &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/callable.html&#34;&gt;&lt;i&gt;Callable&lt;/i&gt;&lt;/a&gt; オブジェクト。このオブジェクトは、次のような関数オブジェクトとして扱うことができる：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;i&gt;bound_function_type &lt;/i&gt;{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt; result_type;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... UnBoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;i&gt;unspecified&lt;/i&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(UnBoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... unbound_args) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;型名 &lt;code&gt;result_type&lt;/code&gt; は、&lt;code&gt;bind()&lt;/code&gt; 呼び出し時のテンプレートパラメータ &lt;code&gt;R&lt;/code&gt; そのもの(明示的に指定した場合)か、&lt;code&gt;F&lt;/code&gt; の戻り値型(&lt;code&gt;F&lt;/code&gt; が関数へのポインタまたはメンバ関数へのポインタである場合)か、&lt;code&gt;F::result_type&lt;/code&gt; (&lt;code&gt;F&lt;/code&gt; が型名 &lt;code&gt;result_type&lt;/code&gt; の定義を持つ場合)である。いずれの条件も満たさない場合、&lt;code&gt;result_type&lt;/code&gt; は定義されない。&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;code&gt;bound_function_type&lt;/code&gt;&lt;/i&gt;&lt;code&gt;::operator ()()&lt;/code&gt;を呼び出すと、&lt;code&gt;bound_args&lt;/code&gt; と &lt;code&gt;unbound_args&lt;/code&gt; が次のように使われ、最終的に &lt;code&gt;f&lt;/code&gt; の呼出しに到達する。(説明用に、 &lt;code&gt;BoundArgs&lt;/code&gt; のそれぞれの &lt;code&gt;decay&lt;/code&gt; された型を &lt;code&gt;TiD&lt;/code&gt; 、値を &lt;code&gt;ti&lt;/code&gt; 、&lt;code&gt;UnBoundArgs&lt;/code&gt; のそれぞれの値を &lt;code&gt;uj&lt;/code&gt; とおく)。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;型&lt;code&gt;Ti&lt;/code&gt; が &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/reference_wrapper.html&#34;&gt;&lt;code&gt;reference_wrapper&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;X&amp;gt;&lt;/code&gt; である場合、&lt;code&gt;ti.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/reference_wrapper/get.html&#34;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; が &lt;code&gt;ti&lt;/code&gt; の代わりに使用される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/is_bind_expression.html&#34;&gt;&lt;code&gt;is_bind_expression&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;TiD&amp;gt;::value&lt;/code&gt;が &lt;code&gt;true&lt;/code&gt; に評価される場合、&lt;code&gt;ti(unbound_args...)&lt;/code&gt; の結果が &lt;code&gt;ti&lt;/code&gt; の代わりに使用される(これは、ネストされた &lt;code&gt;bind()&lt;/code&gt; が一度の呼び出しで再帰的に全て評価されることを示す)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/is_placeholder.html&#34;&gt;&lt;code&gt;is_placeholder&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;TiD&amp;gt;::value&lt;/code&gt;が非ゼロに評価される場合、&lt;code&gt;uj&lt;/code&gt; (ただし &lt;code&gt;j = std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/is_placeholder.html&#34;&gt;&lt;code&gt;is_placeholder&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Ti&amp;gt;::value+1&lt;/code&gt;) が &lt;code&gt;ti&lt;/code&gt; の代わりに使用される。&lt;/li&gt;
&lt;li&gt;その他の場合、&lt;code&gt;ti&lt;/code&gt; がそのまま使用される。
上記の置換を行った後、 &lt;code&gt;f(ti...)&lt;/code&gt; を呼び出した結果が &lt;i&gt;&lt;code&gt;bound_function_type&lt;/code&gt;&lt;/i&gt;&lt;code&gt;::operator ()()&lt;/code&gt; の呼出し結果として返される。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意： &lt;code&gt;bound_args&lt;/code&gt; は明示的に &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/ref.html&#34;&gt;&lt;code&gt;std::ref()&lt;/code&gt;&lt;/a&gt; または &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/cref.html&#34;&gt;&lt;code&gt;std::cref()&lt;/code&gt;&lt;/a&gt; で包まない限り、内部でコピーして保持される。他方、&lt;code&gt;unbound_args&lt;/code&gt; は通常の &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;perfect forwarding&lt;/a&gt; が行われるため、&lt;code&gt;move&lt;/code&gt; で渡したあるいは一時オブジェクトを直接渡した &lt;code&gt;unbound_args&lt;/code&gt; を複数回プレースホルダ経由で使用すると予期しない結果になることがある。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional.html&#34;&gt;functional&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; b, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; c)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; c;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 第1引数のみを先に渡す&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/placeholders.html&#34;&gt;placeholders&lt;/a&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/function.html&#34;&gt;function&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;bind&lt;/span&gt;(add, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, _1, _2);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 残りの引数を渡して関数を呼び出す&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; f(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;9
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2021&#34; target=&#34;_blank&#34;&gt;LWG Issue 2021. Further incorrect usages of &lt;code&gt;result_of&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bind (C++11) -- bind : 見出しレベルの間違いを修正</title>
      <link href="http://cpprefjp.github.io/reference/functional/bind.html"/>
      <id>b53877ab87f9d5e538d5ce0e77cd3b3f8c5dcad9:reference/functional/bind.md</id>
      <updated>2015-04-02 16:02:15 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;functional&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;bind (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, class... BoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;i&gt;unspecified&lt;/i&gt; bind(F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f, BoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... bound_args);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;R&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, class... BoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;i&gt;unspecified&lt;/i&gt; bind(F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f, BoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... bound_args);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/callable.html&#34;&gt;&lt;i&gt;Callable&lt;/i&gt;&lt;/a&gt; オブジェクトに対し、引数を部分的に束縛(bind)する。&lt;/p&gt;
&lt;h2&gt;引数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; -- 束縛先となる &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/callable.html&#34;&gt;&lt;i&gt;Callable&lt;/i&gt;&lt;/a&gt; オブジェクト&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bound_args&lt;/code&gt; -- 束縛対象の値やプレースホルダ(&lt;code&gt;_1&lt;/code&gt;, &lt;code&gt;_2&lt;/code&gt;, ...)、別の &lt;code&gt;bind()&lt;/code&gt; 呼び出し&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;引数を部分束縛された &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/callable.html&#34;&gt;&lt;i&gt;Callable&lt;/i&gt;&lt;/a&gt; オブジェクト。このオブジェクトは、次のような関数オブジェクトとして扱うことができる：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;i&gt;bound_function_type &lt;/i&gt;{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt; result_type;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... UnBoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;i&gt;unspecified&lt;/i&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(UnBoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... unbound_args) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;型名 &lt;code&gt;result_type&lt;/code&gt; は、&lt;code&gt;bind()&lt;/code&gt; 呼び出し時のテンプレートパラメータ &lt;code&gt;R&lt;/code&gt; そのもの(明示的に指定した場合)か、&lt;code&gt;F&lt;/code&gt; の戻り値型(&lt;code&gt;F&lt;/code&gt; が関数へのポインタまたはメンバ関数へのポインタである場合)か、&lt;code&gt;F::result_type&lt;/code&gt; (&lt;code&gt;F&lt;/code&gt; が型名 &lt;code&gt;result_type&lt;/code&gt; の定義を持つ場合)である。いずれの条件も満たさない場合、&lt;code&gt;result_type&lt;/code&gt; は定義されない。&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;code&gt;bound_function_type&lt;/code&gt;&lt;/i&gt;&lt;code&gt;::operator ()()&lt;/code&gt;を呼び出すと、&lt;code&gt;bound_args&lt;/code&gt; と &lt;code&gt;unbound_args&lt;/code&gt; が次のように使われ、最終的に &lt;code&gt;f&lt;/code&gt; の呼出しに到達する。(説明用に、 &lt;code&gt;BoundArgs&lt;/code&gt; のそれぞれの &lt;code&gt;decay&lt;/code&gt; された型を &lt;code&gt;TiD&lt;/code&gt; 、値を &lt;code&gt;ti&lt;/code&gt; 、&lt;code&gt;UnBoundArgs&lt;/code&gt; のそれぞれの値を &lt;code&gt;uj&lt;/code&gt; とおく)。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;型&lt;code&gt;Ti&lt;/code&gt; が &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/reference_wrapper.html&#34;&gt;&lt;code&gt;reference_wrapper&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;X&amp;gt;&lt;/code&gt; である場合、&lt;code&gt;ti.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/reference_wrapper/get.html&#34;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; が &lt;code&gt;ti&lt;/code&gt; の代わりに使用される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/is_bind_expression.html&#34;&gt;&lt;code&gt;is_bind_expression&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;TiD&amp;gt;::value&lt;/code&gt;が &lt;code&gt;true&lt;/code&gt; に評価される場合、&lt;code&gt;ti(unbound_args...)&lt;/code&gt; の結果が &lt;code&gt;ti&lt;/code&gt; の代わりに使用される(これは、ネストされた &lt;code&gt;bind()&lt;/code&gt; が一度の呼び出しで再帰的に全て評価されることを示す)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/is_placeholder.html&#34;&gt;&lt;code&gt;is_placeholder&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;TiD&amp;gt;::value&lt;/code&gt;が非ゼロに評価される場合、&lt;code&gt;uj&lt;/code&gt; (ただし &lt;code&gt;j = std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/is_placeholder.html&#34;&gt;&lt;code&gt;is_placeholder&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Ti&amp;gt;::value+1&lt;/code&gt;) が &lt;code&gt;ti&lt;/code&gt; の代わりに使用される。&lt;/li&gt;
&lt;li&gt;その他の場合、&lt;code&gt;ti&lt;/code&gt; がそのまま使用される。
上記の置換を行った後、 &lt;code&gt;f(ti...)&lt;/code&gt; を呼び出した結果が &lt;i&gt;&lt;code&gt;bound_function_type&lt;/code&gt;&lt;/i&gt;&lt;code&gt;::operator ()()&lt;/code&gt; の呼出し結果として返される。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意： &lt;code&gt;bound_args&lt;/code&gt; は明示的に &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/ref.html&#34;&gt;&lt;code&gt;std::ref()&lt;/code&gt;&lt;/a&gt; または &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/cref.html&#34;&gt;&lt;code&gt;std::cref()&lt;/code&gt;&lt;/a&gt; で包まない限り、内部でコピーして保持される。他方、&lt;code&gt;unbound_args&lt;/code&gt; は通常の &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;perfect forwarding&lt;/a&gt; が行われるため、&lt;code&gt;move&lt;/code&gt; で渡したあるいは一時オブジェクトを直接渡した &lt;code&gt;unbound_args&lt;/code&gt; を複数回プレースホルダ経由で使用すると予期しない結果になることがある。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional.html&#34;&gt;functional&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; b, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; c)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; c;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 第1引数のみを先に渡す&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/placeholders.html&#34;&gt;placeholders&lt;/a&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/function.html&#34;&gt;function&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;bind&lt;/span&gt;(add, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, _1, _2);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 残りの引数を渡して関数を呼び出す&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; f(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;9
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bind (C++11) -- bind : 改行調整</title>
      <link href="http://cpprefjp.github.io/reference/functional/bind.html"/>
      <id>fe805c90e850a6a871ad5636b2071b5745c6cc37:reference/functional/bind.md</id>
      <updated>2015-04-02 16:01:47 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;functional&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;bind (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, class... BoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;i&gt;unspecified&lt;/i&gt; bind(F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f, BoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... bound_args);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;R&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, class... BoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;i&gt;unspecified&lt;/i&gt; bind(F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f, BoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... bound_args);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;概要&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/callable.html&#34;&gt;&lt;i&gt;Callable&lt;/i&gt;&lt;/a&gt; オブジェクトに対し、引数を部分的に束縛(bind)する。&lt;/p&gt;
&lt;h3&gt;引数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; -- 束縛先となる &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/callable.html&#34;&gt;&lt;i&gt;Callable&lt;/i&gt;&lt;/a&gt; オブジェクト&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bound_args&lt;/code&gt; -- 束縛対象の値やプレースホルダ(&lt;code&gt;_1&lt;/code&gt;, &lt;code&gt;_2&lt;/code&gt;, ...)、別の &lt;code&gt;bind()&lt;/code&gt; 呼び出し&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;戻り値&lt;/h3&gt;
&lt;p&gt;引数を部分束縛された &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/callable.html&#34;&gt;&lt;i&gt;Callable&lt;/i&gt;&lt;/a&gt; オブジェクト。このオブジェクトは、次のような関数オブジェクトとして扱うことができる：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;i&gt;bound_function_type &lt;/i&gt;{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt; result_type;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... UnBoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;i&gt;unspecified&lt;/i&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(UnBoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... unbound_args) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;型名 &lt;code&gt;result_type&lt;/code&gt; は、&lt;code&gt;bind()&lt;/code&gt; 呼び出し時のテンプレートパラメータ &lt;code&gt;R&lt;/code&gt; そのもの(明示的に指定した場合)か、&lt;code&gt;F&lt;/code&gt; の戻り値型(&lt;code&gt;F&lt;/code&gt; が関数へのポインタまたはメンバ関数へのポインタである場合)か、&lt;code&gt;F::result_type&lt;/code&gt; (&lt;code&gt;F&lt;/code&gt; が型名 &lt;code&gt;result_type&lt;/code&gt; の定義を持つ場合)である。いずれの条件も満たさない場合、&lt;code&gt;result_type&lt;/code&gt; は定義されない。&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;code&gt;bound_function_type&lt;/code&gt;&lt;/i&gt;&lt;code&gt;::operator ()()&lt;/code&gt;を呼び出すと、&lt;code&gt;bound_args&lt;/code&gt; と &lt;code&gt;unbound_args&lt;/code&gt; が次のように使われ、最終的に &lt;code&gt;f&lt;/code&gt; の呼出しに到達する。(説明用に、 &lt;code&gt;BoundArgs&lt;/code&gt; のそれぞれの &lt;code&gt;decay&lt;/code&gt; された型を &lt;code&gt;TiD&lt;/code&gt; 、値を &lt;code&gt;ti&lt;/code&gt; 、&lt;code&gt;UnBoundArgs&lt;/code&gt; のそれぞれの値を &lt;code&gt;uj&lt;/code&gt; とおく)。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;型&lt;code&gt;Ti&lt;/code&gt; が &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/reference_wrapper.html&#34;&gt;&lt;code&gt;reference_wrapper&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;X&amp;gt;&lt;/code&gt; である場合、&lt;code&gt;ti.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/reference_wrapper/get.html&#34;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; が &lt;code&gt;ti&lt;/code&gt; の代わりに使用される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/is_bind_expression.html&#34;&gt;&lt;code&gt;is_bind_expression&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;TiD&amp;gt;::value&lt;/code&gt;が &lt;code&gt;true&lt;/code&gt; に評価される場合、&lt;code&gt;ti(unbound_args...)&lt;/code&gt; の結果が &lt;code&gt;ti&lt;/code&gt; の代わりに使用される(これは、ネストされた &lt;code&gt;bind()&lt;/code&gt; が一度の呼び出しで再帰的に全て評価されることを示す)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/is_placeholder.html&#34;&gt;&lt;code&gt;is_placeholder&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;TiD&amp;gt;::value&lt;/code&gt;が非ゼロに評価される場合、&lt;code&gt;uj&lt;/code&gt; (ただし &lt;code&gt;j = std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/is_placeholder.html&#34;&gt;&lt;code&gt;is_placeholder&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Ti&amp;gt;::value+1&lt;/code&gt;) が &lt;code&gt;ti&lt;/code&gt; の代わりに使用される。&lt;/li&gt;
&lt;li&gt;その他の場合、&lt;code&gt;ti&lt;/code&gt; がそのまま使用される。
上記の置換を行った後、 &lt;code&gt;f(ti...)&lt;/code&gt; を呼び出した結果が &lt;i&gt;&lt;code&gt;bound_function_type&lt;/code&gt;&lt;/i&gt;&lt;code&gt;::operator ()()&lt;/code&gt; の呼出し結果として返される。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意： &lt;code&gt;bound_args&lt;/code&gt; は明示的に &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/ref.html&#34;&gt;&lt;code&gt;std::ref()&lt;/code&gt;&lt;/a&gt; または &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/cref.html&#34;&gt;&lt;code&gt;std::cref()&lt;/code&gt;&lt;/a&gt; で包まない限り、内部でコピーして保持される。他方、&lt;code&gt;unbound_args&lt;/code&gt; は通常の &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;perfect forwarding&lt;/a&gt; が行われるため、&lt;code&gt;move&lt;/code&gt; で渡したあるいは一時オブジェクトを直接渡した &lt;code&gt;unbound_args&lt;/code&gt; を複数回プレースホルダ経由で使用すると予期しない結果になることがある。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional.html&#34;&gt;functional&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; b, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; c)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; c;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 第1引数のみを先に渡す&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/placeholders.html&#34;&gt;placeholders&lt;/a&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/function.html&#34;&gt;function&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;bind&lt;/span&gt;(add, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, _1, _2);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 残りの引数を渡して関数を呼び出す&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; f(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;9
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
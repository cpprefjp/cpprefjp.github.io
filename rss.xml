<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2015-05-13T15:22:05.539147</updated>
  <id>e15df2f5-8a80-44c5-bfcb-f0c8495ddd5c</id>

  
    <entry>
      <title>lower_bound -- map::lower_bound : C++14対応として、メンバ関数テンプレート版を追加</title>
      <link href="http://cpprefjp.github.io/reference/map/map/lower_bound.html"/>
      <id>e804bbf53dac6a826557463d825839133fd09f11:reference/map/map/lower_bound.md</id>
      <updated>2015-05-13 15:21:10 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class map&#34;&gt;map::&lt;/span&gt;lower_bound&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;iterator &lt;span style=&#34;color: #0000FF&#34;&gt;lower_bound&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;K&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator lower_bound(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; K&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14&lt;/span&gt;

const_iterator lower_bound(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;K&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
const_iterator lower_bound(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; K&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; を右辺とする &lt;code&gt;&amp;lt;&lt;/code&gt; 演算が成り立たない最初の要素を指すイテレータを返す（コンテナの比較オブジェクトが使われる）。すなわちこれは &lt;code&gt;&amp;gt;=&lt;/code&gt; 演算にあたる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/upper_bound.html&#34;&gt;&lt;code&gt;upper_bound()&lt;/code&gt;&lt;/a&gt; とは異なり、このメンバ関数は &lt;code&gt;x&lt;/code&gt; より大きいだけでなく、&lt;code&gt;x&lt;/code&gt; と等しい場合であってもその要素へのイテレータを返す。&lt;/p&gt;
&lt;p&gt;内部的には &lt;code&gt;map&lt;/code&gt; コンテナ内の全ての要素は常に比較オブジェクトが定義する基準に沿って並んでいるため、この関数が返すいずれかの後に続く全ての要素が &lt;code&gt;x&lt;/code&gt; より大きいか等しいことに注意。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1), (3) : &lt;code&gt;key_type&lt;/code&gt;型のキーを受け取り、そのキーより小さくない最初の要素へのイテレータを取得する。&lt;/li&gt;
&lt;li&gt;(2), (4) : &lt;code&gt;key_type&lt;/code&gt;と比較可能な&lt;code&gt;K&lt;/code&gt;型のキーを受け取り、そのキーより小さくない最初の要素へのイテレータを取得する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1), (3) : コンテナ内で &lt;code&gt;x&lt;/code&gt; を右辺とする &lt;code&gt;&amp;lt;&lt;/code&gt; 演算が成り立たない最初の要素へのイテレータを返す。そのような要素がない場合は、&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/end.html&#34;&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/a&gt;を返す。&lt;/li&gt;
&lt;li&gt;(2), (4) : &lt;code&gt;key_compare&lt;/code&gt;型の関数オブジェクトを&lt;code&gt;c&lt;/code&gt;、コンテナ内の各要素が持つキーを&lt;code&gt;k&lt;/code&gt;として、キーが小さくないか判定する式&lt;code&gt;!c(k, x)&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;となる要素へのイテレータを返す。そのような要素がない場合は、&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/end.html&#34;&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/a&gt; を返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; について対数時間。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(2), (4) : この関数がオーバーロード解決に参加する条件は、&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/find.html&#34;&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/a&gt;メンバ関数の備考欄を参照。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;map&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Alice&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Bob&#34;&lt;/span&gt;,   &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Carol&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;}
    };

    decltype(m)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.&lt;span style=&#34;color:#ff0000&#34;&gt;lower_bound&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Bob&#34;&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; m.end()) { &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 見つかった&lt;/span&gt;
      &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;,&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
    }
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/less.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;less&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Alice&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Bob&#34;&lt;/span&gt;,   &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Carol&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;}
    };

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/less.html&#34;&gt;std::less&lt;/a&gt;のvoidに対する特殊化を使用することで、&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字列リテラルを&lt;span style=&#34;color:#ff0000&#34;&gt;lower_bound&lt;/span&gt;()関数の引数として渡した際に、&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::string&lt;/a&gt;型の一時オブジェクトが生成されない。&lt;/span&gt;
    decltype(m)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.&lt;span style=&#34;color:#ff0000&#34;&gt;lower_bound&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Bob&#34;&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; m.end()) { &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 見つかった&lt;/span&gt;
      &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;,&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
    }
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Bob,1
Bob,1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/upper_bound.html&#34;&gt;&lt;code&gt;upper_bound&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;特定の値よりも大きい最初の要素へのイテレータを返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/equal_range.html&#34;&gt;&lt;code&gt;equal_range&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーにマッチする要素範囲を返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/find.html&#34;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーで要素を探す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/count.html&#34;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーにマッチする要素の数を返す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3657.htm&#34; target=&#34;_blank&#34;&gt;N3657 Adding heterogeneous comparison lookup to associative containers (rev 4)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>count -- multimap::count : C++14対応として、メンバ関数テンプレート版を追加</title>
      <link href="http://cpprefjp.github.io/reference/map/multimap/count.html"/>
      <id>c9600bbe03360c874bcc17a2cfdb3217ebd49754:reference/map/multimap/count.md</id>
      <updated>2015-05-12 14:41:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class multimap&#34;&gt;multimap::&lt;/span&gt;count&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;size_type count(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;K&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
size_type count(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; K&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;キー &lt;code&gt;x&lt;/code&gt; を検索し、コンテナ内に見つかった要素の数を返す。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) : クラスのテンプレートパラメータ&lt;code&gt;key_type&lt;/code&gt;型のキーを受け取って、&lt;code&gt;x&lt;/code&gt;と等価なキーを要素持つ要素の数を取得する。&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;key_type&lt;/code&gt;と比較可能な&lt;code&gt;K&lt;/code&gt;型のキーを受け取って、&lt;code&gt;x&lt;/code&gt;と等価なキーを要素持つ要素の数を取得する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;code&gt;x&lt;/code&gt;と等価なキーの要素数を返す。&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;key_compare&lt;/code&gt;型の関数オブジェクトを&lt;code&gt;c&lt;/code&gt;、コンテナ内の各要素が持つキーを&lt;code&gt;k&lt;/code&gt;として、キーが等価か判定する式&lt;code&gt;!c(k, x) &amp;amp;&amp;amp; !c(x, k)&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;となる要素の数を返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; について対数時間&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;map&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Alice&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Bob&#34;&lt;/span&gt;,   &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Carol&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Bob&#34;&lt;/span&gt;,   &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;}
    };

    &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;size_t&lt;/a&gt; n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.&lt;span style=&#34;color:#ff0000&#34;&gt;count&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Bob&#34;&lt;/span&gt;);
    &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; n &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/less.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;less&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Alice&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Bob&#34;&lt;/span&gt;,   &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Carol&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Bob&#34;&lt;/span&gt;,   &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;}
    };

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/less.html&#34;&gt;std::less&lt;/a&gt;のvoidに対する特殊化を使用することで、&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字列リテラルを&lt;span style=&#34;color:#ff0000&#34;&gt;count&lt;/span&gt;()関数の引数として渡した際に、&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::string&lt;/a&gt;型の一時オブジェクトが生成されない。&lt;/span&gt;
    &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;size_t&lt;/a&gt; n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.&lt;span style=&#34;color:#ff0000&#34;&gt;count&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Bob&#34;&lt;/span&gt;);
    &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; n &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;2
2
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/find.html&#34;&gt;&lt;code&gt;multimap::find&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーで要素を探す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/size.html&#34;&gt;&lt;code&gt;multimap::size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数を取得する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/lower_bound.html&#34;&gt;&lt;code&gt;multimap::lower_bound&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;与えられた値より小さくない最初の要素へのイテレータを返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/upper_bound.html&#34;&gt;&lt;code&gt;multimap::upper_bound&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;特定の値よりも大きい最初の要素へのイテレータを返す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3657.htm&#34; target=&#34;_blank&#34;&gt;N3657 Adding heterogeneous comparison lookup to associative containers (rev 4)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>count -- map::count : C++14に対応し、メンバ関数テンプレート版のオーバーロードを追加。</title>
      <link href="http://cpprefjp.github.io/reference/map/map/count.html"/>
      <id>8571a94d0ccb3872ab9cc67da1ea94cb2db3395c:reference/map/map/count.md</id>
      <updated>2015-05-11 15:29:43 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class map&#34;&gt;map::&lt;/span&gt;count&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;size_type count(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;K&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
size_type count(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; K&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;キー &lt;code&gt;x&lt;/code&gt; を検索し、コンテナ内に見つかった要素の数を返す。&lt;code&gt;map&lt;/code&gt; コンテナはキーの重複を許さないため、この関数は実際には要素が見つかったときに 1 を、そうでないときに 0 を返す。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) : クラスのテンプレートパラメータ&lt;code&gt;key_type&lt;/code&gt;型のキーを受け取って、&lt;code&gt;x&lt;/code&gt;と等価なキーを要素持つ要素の数を取得する。&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;key_type&lt;/code&gt;と比較可能な&lt;code&gt;K&lt;/code&gt;型のキーを受け取って、&lt;code&gt;x&lt;/code&gt;と等価なキーを要素持つ要素の数を取得する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;code&gt;x&lt;/code&gt;と等価なキーの要素が見つかった場合は1、そうでない場合は0を返す。&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;key_compare&lt;/code&gt;型の関数オブジェクトを&lt;code&gt;c&lt;/code&gt;、コンテナ内の各要素が持つキーを&lt;code&gt;k&lt;/code&gt;として、キーが等価か判定する式&lt;code&gt;!c(k, x) &amp;amp;&amp;amp; !c(x, k)&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;となる要素が見つかった場合は1、そうでない場合は0を返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; について対数時間&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(2) : この関数がオーバーロード解決に参加する条件は、&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/find.html&#34;&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/a&gt;メンバ関数の備考欄を参照。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;map&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Alice&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Bob&#34;&lt;/span&gt;,   &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Carol&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;}
    };

    &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;size_t&lt;/a&gt; n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.&lt;span style=&#34;color:#ff0000&#34;&gt;count&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Bob&#34;&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) { &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 見つかった&lt;/span&gt;
      &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;found&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
    }
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/less.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;less&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Alice&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Bob&#34;&lt;/span&gt;,   &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Carol&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;}
    };

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/less.html&#34;&gt;std::less&lt;/a&gt;のvoidに対する特殊化を使用することで、&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字列リテラルを&lt;span style=&#34;color:#ff0000&#34;&gt;count&lt;/span&gt;()関数の引数として渡した際に、&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::string&lt;/a&gt;型の一時オブジェクトが生成されない。&lt;/span&gt;
    &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;size_t&lt;/a&gt; n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.&lt;span style=&#34;color:#ff0000&#34;&gt;count&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Bob&#34;&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) { &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 見つかった&lt;/span&gt;
      &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;found&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
    }
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;found
found
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/find.html&#34;&gt;&lt;code&gt;map::find&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーで要素を探す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/size.html&#34;&gt;&lt;code&gt;map::size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数を取得する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/lower_bound.html&#34;&gt;&lt;code&gt;map::lower_bound&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;与えられた値より小さくない最初の要素へのイテレータを返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/upper_bound.html&#34;&gt;&lt;code&gt;map::upper_bound&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;特定の値よりも大きい最初の要素へのイテレータを返す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3657.htm&#34; target=&#34;_blank&#34;&gt;N3657 Adding heterogeneous comparison lookup to associative containers (rev 4)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace (C++11) -- deque::emplace の例外発生時の保証を修正</title>
      <link href="http://cpprefjp.github.io/reference/deque/emplace.html"/>
      <id>a10a6245b1629c9b7c480857cbf75f841b2976c4:reference/deque/emplace.md</id>
      <updated>2015-04-30 15:40:30 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;deque&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class deque&#34;&gt;deque::&lt;/span&gt;emplace (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator emplace(const_iterator position, Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;任意の位置に要素を直接構築で挿入する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;要素型 &lt;code&gt;value_type&lt;/code&gt; は、引数 &lt;code&gt;args&lt;/code&gt; からコンテナに対して &lt;code&gt;EmplaceConstructible&lt;/code&gt; でなければならない。また、要素型 &lt;code&gt;value_type&lt;/code&gt; はコンテナに対して、&lt;code&gt;MoveInsertable&lt;/code&gt; であり、かつ、&lt;code&gt;MoveAssignable&lt;/code&gt; でなければならない。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt; で構築された &lt;code&gt;value_type&lt;/code&gt; 型のオブジェクトを &lt;code&gt;position&lt;/code&gt; の手前に挿入する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;挿入された要素を指すイテレータ&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;deque&lt;/code&gt;の要素数に対して線形時間、先頭もしくは末尾への挿入は定数時間&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;例外発生時に副作用が発生しない保証は&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/insert.html&#34;&gt;&lt;code&gt;insert()&lt;/code&gt;&lt;/a&gt;と同様。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;deque&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; c;

  c.&lt;span style=&#34;color:#ff0000&#34;&gt;emplace&lt;/span&gt;(c.begin(), &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;));
  c.insert(c.begin(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;world&#34;&lt;/span&gt;)));

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; c) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1,world
3,hello
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 11.0, 12.0&lt;ul&gt;
&lt;li&gt;10.0にも&lt;code&gt;emplace&lt;/code&gt;は存在するが、&lt;code&gt;insert&lt;/code&gt;相当の機能しかない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;任意の位置に要素を挿入する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2252&#34; target=&#34;_blank&#34;&gt;LWG Issue 2252. Strong guarantee on &lt;code&gt;vector::push_back()&lt;/code&gt; still broken with C++11?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;経緯の説明は、&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/push_back.html&#34;&gt;&lt;code&gt;vector::push_back()&lt;/code&gt;&lt;/a&gt;ページを参照。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Kazutoshi SATODA</name>
        <email>k_satoda@f2.dion.ne.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- deque::insert の例外発生時の保証を修正</title>
      <link href="http://cpprefjp.github.io/reference/deque/insert.html"/>
      <id>43cb4d2979b8c13275bf0c2ae20ad15e09fa4d37:reference/deque/insert.md</id>
      <updated>2015-04-30 15:27:03 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;deque&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class deque&#34;&gt;deque::&lt;/span&gt;insert&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(iterator position, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++03&lt;/span&gt;
iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(const_iterator position, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++11&lt;/span&gt;

iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(const_iterator position, T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y);                    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++11&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(iterator position,
            size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++03&lt;/span&gt;
iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(const_iterator position,
                size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++11&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; insert(iterator position,
            InputIterator first, InputIterator last);               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++11&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator insert(const_iterator position,
                InputIterator first, InputIterator last);           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++11&lt;/span&gt;

iterator &lt;span style=&#34;color: #0000FF&#34;&gt;insert&lt;/span&gt;(const_iterator position, &lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; init); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5) C++11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;任意の位置に要素を挿入する。&lt;/p&gt;
&lt;p&gt;この関数は、&lt;code&gt;position&lt;/code&gt;で指定した場所の前に新しい要素を挿入することにより、&lt;code&gt;deque&lt;/code&gt;コンテナを拡張する。&lt;/p&gt;
&lt;p&gt;これは挿入される要素の分だけコンテナのサイズを増加させ、それ以前に取得された全てのイテレータを無効化する。しかし、先頭または終端への挿入の場合は、参照は有効なままとなる。&lt;/p&gt;
&lt;p&gt;二重終端キューは、シーケンスの終端または先頭への挿入（もしくは削除）が効率的なパフォーマンスとなるよう、設計されている。他の場所への挿入は通常、&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt;コンテナよりも効率の面で劣る。&lt;/p&gt;
&lt;p&gt;追加される要素の数、及びそれぞれの初期値は引数によって決定づけられる。&lt;/p&gt;
&lt;h2&gt;引数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;position&lt;/code&gt;新しい要素を挿入するコンテナ内の場所。&lt;code&gt;iterator&lt;/code&gt;はメンバ型であり、ランダムアクセスイテレータとして定義される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt;挿入される要素の初期化に使われる値。&lt;code&gt;T&lt;/code&gt;はひとつめのテンプレートパラメータ（コンテナに格納される要素の型）である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt;直接挿入される値。&lt;code&gt;T&lt;/code&gt;はひとつめのテンプレートパラメータ（コンテナに格納される要素の型）である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;挿入する要素の数。それぞれの要素は x の値によって初期化される。メンバ型&lt;code&gt;size_type&lt;/code&gt;は符号なし整数型である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;first, last&lt;/code&gt;要素の範囲を指定する。範囲 &lt;code&gt;[first, last)&lt;/code&gt; の中にある要素のコピーが位置&lt;code&gt;position&lt;/code&gt;に挿入される。&lt;code&gt;first&lt;/code&gt;と&lt;code&gt;last&lt;/code&gt;の間の範囲は、&lt;code&gt;first&lt;/code&gt;で指定された要素を含むが、&lt;code&gt;last&lt;/code&gt;で指定された要素を含まない点に注意。テンプレート型はどんな入力イテレータでも構わない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++03まで一番上のバージョンがのみ、新しい要素が挿入された場所を指すイテレータを返す。&lt;/li&gt;
&lt;li&gt;C++11以降新しい要素が挿入された場所を示すイテレータ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;挿入する要素の数に対して線形時間（コピー・ムーブコンストラクタの呼び出し）。加えて、&lt;code&gt;position&lt;/code&gt;と&lt;code&gt;deque&lt;/code&gt;終端との間の要素の数に対して、ライブラリの実装依存で線形時間で増加する。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;条件付きで、例外が発生した場合に副作用が発生しない保証がある。&lt;ul&gt;
&lt;li&gt;C++03: 要素型&lt;code&gt;T&lt;/code&gt;のコピーコンストラクタ、代入演算子以外で例外が発生した場合、副作用は発生しない。&lt;/li&gt;
&lt;li&gt;C++11: 要素型&lt;code&gt;T&lt;/code&gt;のコピーコンストラクタ、ムーブコンストラクタ、代入演算子、ムーブ代入演算子以外で例外が発生した場合、副作用は発生しない。（ムーブについて規定が追加された。）&lt;/li&gt;
&lt;li&gt;C++14: 単一要素を終端あるいは先頭に追加する際に例外が発生した場合、副作用は発生しない。それ以外はC++11と同様。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;deque&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 先頭に1を挿入&lt;/span&gt;
  c.&lt;span style=&#34;color:#ff0000&#34;&gt;insert&lt;/span&gt;(c.begin(), &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; c) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
2
3
4
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/emplace.html&#34;&gt;&lt;code&gt;emplace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;任意の位置に要素を直接構築で挿入する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2350.pdf&#34; target=&#34;_blank&#34;&gt;N2350 Container insert/erase and iterator constness (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2252&#34; target=&#34;_blank&#34;&gt;LWG Issue 2252. Strong guarantee on &lt;code&gt;vector::push_back()&lt;/code&gt; still broken with C++11?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;経緯の説明は、&lt;a href=&#34;http://cpprefjp.github.io/reference/vector/push_back.html&#34;&gt;&lt;code&gt;vector::push_back()&lt;/code&gt;&lt;/a&gt;ページを参照。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Kazutoshi SATODA</name>
        <email>k_satoda@f2.dion.ne.jp</email>
      </author>
    </entry>
  
</feed>
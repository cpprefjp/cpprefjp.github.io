<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2015-08-04T23:52:09.836123</updated>
  <id>16155982-f29b-4a03-bea4-9e870eea43b3</id>

  
    <entry>
      <title>operator&gt;&gt; -- 標準ライブラリがlong longに対応した経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/istream/basic_istream/op_istream.html"/>
      <id>bc6ce53ee4067cb87f079a250efb0cebfb312e52:reference/istream/basic_istream/op_istream.md</id>
      <updated>2015-08-04 18:43:25 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;istream&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class basic_istream&#34;&gt;basic_istream::&lt;/span&gt;operator&amp;gt;&amp;gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; char_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;basic_istream&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; basic_ios&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// マニピュレータ&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3つとも関数へのポインタを引数に取る。&lt;/span&gt;
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;pf)(basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;));
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(basic_ios&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;pf)(basic_ios&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;));
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(ios_base&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;pf)(ios_base&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// bool値・数値・ポインタ&lt;/span&gt;
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; n);
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;short&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; n);
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;short&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; n);
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; n);
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; n);
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; n);
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; n);
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; n); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; n); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; f);
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; f);
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; f);
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;amp;&lt;/span&gt; p);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ストリームバッファ&lt;/span&gt;
    basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(basic_streambuf&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;char_type, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;*&lt;/span&gt; sb);

    &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;……&lt;/span&gt;
  };

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; is, CharT&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; is, &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; is, &lt;span style=&#34;color: #B00040&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字列&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; is, CharT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; c);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; is, &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; c);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; is, &lt;span style=&#34;color: #B00040&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; c);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ストリームへの右辺値参照 (C++11)&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&amp;amp;&lt;/span&gt; is, T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;ストリームからの入力またはマニピュレータの実行を行う。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;マニピュレータを実行する多重定義それ自体は、書式化入力関数・非書式化入力関数いずれにも該当しない。&lt;ul&gt;
&lt;li&gt;マニピュレータが書式化入力関数・非書式化入力関数であるということはあり得る（例: &lt;a href=&#34;http://cpprefjp.github.io/reference/istream/ws.html&#34;&gt;&lt;code&gt;ws&lt;/code&gt;&lt;/a&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数値型（&lt;code&gt;bool&lt;/code&gt;も含む）と&lt;code&gt;void*&lt;/code&gt;に対する多重定義は、書式化入力関数である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_streambuf&lt;/code&gt;に対する多重定義は、非書式化入力関数である。&lt;/li&gt;
&lt;li&gt;文字に対する多重定義は、書式化入力関数である。&lt;/li&gt;
&lt;li&gt;文字列に対する多重定義は、書式化入力関数である。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;文字列入力における注意&lt;/h3&gt;
&lt;p&gt;ここで説明する多重定義（&lt;code&gt;CharT*&lt;/code&gt;、&lt;code&gt;unsigned char*&lt;/code&gt;、&lt;code&gt;signed char*&lt;/code&gt;）で文字列への入力を行う場合、必ずマニピュレータ&lt;code&gt;setw&lt;/code&gt;で配列の要素数を指定すること（この記事の下方にある例（文字列）を参照）。
さもなくば、バッファオーバーフローの可能性があり、大変危険である。&lt;/p&gt;
&lt;p&gt;あるいは、これらの代わりに&lt;code&gt;basic_string&lt;/code&gt; (&lt;code&gt;std::string&lt;/code&gt;、&lt;code&gt;std::wstring&lt;/code&gt;など)に対して&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;演算子を使用することでも、この危険を回避できる。
参考: &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/op_istream.html&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;演算子 (&lt;code&gt;basic_string&lt;/code&gt;)&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;h3&gt;マニピュレータ&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;pf(*this)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;bool値・数値・ポインタ&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sentry&lt;/code&gt;オブジェクトを構築する。&lt;code&gt;sentry&lt;/code&gt;オブジェクトが失敗を示した場合、何もしない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;num_get::get&lt;/code&gt;を使用して入力のパース・数値への変換を行う。&lt;ul&gt;
&lt;li&gt;ただし、&lt;code&gt;int&lt;/code&gt;と&lt;code&gt;short&lt;/code&gt;の場合は、&lt;code&gt;long&lt;/code&gt;を実引数に取るものを使用する。結果が&lt;code&gt;int&lt;/code&gt;と&lt;code&gt;short&lt;/code&gt;それぞれの範囲外の値になった場合、&lt;code&gt;failbit&lt;/code&gt;を追加する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;num_get::get&lt;/code&gt;から得られた&lt;code&gt;iostate&lt;/code&gt;値を実引数にして&lt;code&gt;setstate&lt;/code&gt;関数を呼び出す。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;ストリームバッファ&lt;/h3&gt;
&lt;p&gt;ストリームからの入力を別のストリームバッファに出力する。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;仮引数&lt;code&gt;sb&lt;/code&gt;がヌルポインタの場合、&lt;code&gt;setstate(failbit)&lt;/code&gt;を呼び出して終了する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sentry&lt;/code&gt;オブジェクトを構築する。&lt;code&gt;sentry&lt;/code&gt;オブジェクトが失敗を示した場合、何もしない。&lt;/li&gt;
&lt;li&gt;以下のいずれかを満たすまで、&lt;code&gt;this&lt;/code&gt;内のストリームバッファから文字を入力して&lt;code&gt;sb&lt;/code&gt;へ出力する。&lt;ul&gt;
&lt;li&gt;EOFに達した。&lt;/li&gt;
&lt;li&gt;出力処理に失敗した（この場合、失敗したときの文字は入力側のストリームバッファに戻される）。&lt;/li&gt;
&lt;li&gt;例外が発生した。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;入力がなされなかった場合、&lt;code&gt;setstate(failbit)&lt;/code&gt;を呼び出す。&lt;/p&gt;
&lt;h3&gt;文字&lt;/h3&gt;
&lt;p&gt;文字型&lt;code&gt;CharT&lt;/code&gt;への参照を実引数として受け取る。
ただし、&lt;code&gt;CharT&lt;/code&gt;がcharの場合に限り&lt;code&gt;unsigned char&lt;/code&gt;および&lt;code&gt;signed char&lt;/code&gt;への参照も受け付ける。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sentry&lt;/code&gt;オブジェクトを構築する。&lt;code&gt;sentry&lt;/code&gt;オブジェクトが失敗を示した場合、何もしない。&lt;/li&gt;
&lt;li&gt;ストリームバッファから1文字取り出し、仮引数&lt;code&gt;c&lt;/code&gt;に書き込む。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;入力がなされなかった場合、&lt;code&gt;setstate(failbit)&lt;/code&gt;を呼び出す。&lt;/p&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;p&gt;文字型&lt;code&gt;CharT&lt;/code&gt;の配列の要素を指し示すポインタを実引数として受け取る。
ただし、&lt;code&gt;CharT&lt;/code&gt;が&lt;code&gt;char&lt;/code&gt;の場合に限り、&lt;code&gt;unsigned char&lt;/code&gt;および&lt;code&gt;signed char&lt;/code&gt;の配列の要素を指し示すポインタも受け付ける。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sentry&lt;/code&gt;オブジェクトを構築する。&lt;code&gt;sentry&lt;/code&gt;オブジェクトが失敗を示した場合、何もしない。&lt;/li&gt;
&lt;li&gt;ストリームバッファから文字を読み取り、仮引数&lt;code&gt;s&lt;/code&gt;が指し示す配列の要素に順に書き込む。これを以下いずれかを満たすまで繰り返す。&lt;ul&gt;
&lt;li&gt;最大文字数より1文字少ない文字数だけ書き込んだ。最大文字数は以下のようにして決まる。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;width()&lt;/code&gt;が1以上であれば、その値を最大文字数とする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width()&lt;/code&gt;が0以下であれば、ストリームの&lt;code&gt;CharT&lt;/code&gt;型においてあり得る最大の配列の要素数とする。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;EOFに達した。&lt;/li&gt;
&lt;li&gt;空白文字に達した。空白文字の判定にはストリームに設定されているロケールが考慮される。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt;の末尾にヌル文字&lt;code&gt;CharT()&lt;/code&gt;を書き込む。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width(0)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1文字も入力がなされなかった場合、&lt;code&gt;setstate(failbit)&lt;/code&gt;を呼び出す。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;width()&lt;/code&gt;の値を変更するには、&lt;code&gt;setw&lt;/code&gt;マニピュレータまたは&lt;code&gt;width()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;h3&gt;ストリームへの右辺値参照 (C++11)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;is &amp;gt;&amp;gt; x&lt;/code&gt;を実行する。この多重定義は、一時オブジェクトなどに対して&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;演算子を利用可能にするためのものである。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;例（数値）&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 好きな整数を入力してください&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cin &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; x) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;が入力されました。&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;入力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1が入力されました。
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;例（文字列）&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iomanip&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; s[&lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;];
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 好きな文字を入力してください&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cin &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;setw(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;sizeof&lt;/span&gt; (s)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; s) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;が入力されました。&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;入力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Kerberos
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Kerberoが入力されました。
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;TBD&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++98&lt;/li&gt;
&lt;li&gt;C++11: &lt;code&gt;long long&lt;/code&gt;、&lt;code&gt;unsigned long long&lt;/code&gt;、ストリームへの右辺値参照を実引数として受け取るものが追加された&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このほかの&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;演算子関数&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/op_istream.html&#34;&gt;&lt;code&gt;std::basic_string&lt;/code&gt;に対するもの&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;入力対象の型&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/streambuf/basic_streambuf.html&#34;&gt;&lt;code&gt;basic_streambuf&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2114.html&#34; target=&#34;_blank&#34;&gt;N2114 &lt;code&gt;long long&lt;/code&gt; Goes to the Library, Revision 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>numeric_limits -- 標準ライブラリがlong longに対応した経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/limits/numeric_limits.html"/>
      <id>bc6ce53ee4067cb87f079a250efb0cebfb312e52:reference/limits/numeric_limits.md</id>
      <updated>2015-08-04 18:43:25 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;limits&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;numeric_limits&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char16_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11から追加&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char32_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11から追加&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;short&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11から追加&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;short&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11から追加&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11から追加&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11から追加&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;numeric_limits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11から追加&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::numeric_limits&lt;/code&gt;クラスは以下の特徴を持つ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;実装が提供する算術型の性質を提供する&lt;/li&gt;
&lt;li&gt;浮動小数点型、整数型、&lt;code&gt;bool&lt;/code&gt;型について特殊化が提供され、&lt;code&gt;is_specialized=true&lt;/code&gt;になる&lt;/li&gt;
&lt;li&gt;このクラスのメンバは全て &lt;code&gt;static constexpr&lt;/code&gt; として定義されているため、定数式として使いやすい (C++11)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex.html&#34;&gt;&lt;code&gt;std::complex&lt;/code&gt;&lt;/a&gt;のような非算術型については特殊化は提供されない&lt;/li&gt;
&lt;li&gt;CV修飾された型をテンプレート引数として指定した場合、CV修飾されていない型を指定した場合と同じになる (C++11)&lt;/li&gt;
&lt;/ul&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;静的メンバ&lt;/th&gt;
&lt;th&gt;性質&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/min.html&#34;&gt;&lt;code&gt;min()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小値を返す。 浮動小数点型については最小の正の正規化数を返す。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/max.html&#34;&gt;&lt;code&gt;max()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最大値を返す。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/lowest.html&#34;&gt;&lt;code&gt;lowest()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小値を返す。&lt;code&gt;-max()&lt;/code&gt;と等しい必要は無い&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/digits.html&#34;&gt;&lt;code&gt;digits&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;基数 &lt;strong&gt;radix&lt;/strong&gt; において表現できる桁数を示す。 整数型であれば、符号ビット以外のビット数である。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/digits10.html&#34;&gt;&lt;code&gt;digits10&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;10進数において表現できる桁数を示す。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/max_digits10.html&#34;&gt;&lt;code&gt;max_digits10&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;浮動小数点数の10進数表現における正確さを損なわない最大の桁数を示す&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/is_signed.html&#34;&gt;&lt;code&gt;is_signed&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;符号付き型かどうかを判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/is_integer.html&#34;&gt;&lt;code&gt;is_integer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;整数型かどうかを判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/is_exact.html&#34;&gt;&lt;code&gt;is_exact&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が正確かどうかを判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/radix.html&#34;&gt;&lt;code&gt;radix&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;digits&lt;/code&gt;を表現する基数を示す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/epsilon.html&#34;&gt;&lt;code&gt;epsilon()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;機械イプシロン。1より大きい数の中で最小の値と1との差。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/round_error.html&#34;&gt;&lt;code&gt;round_error()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最大の丸め誤差。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/min_exponent.html&#34;&gt;&lt;code&gt;min_exponent&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指数下限&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/min_exponent10.html&#34;&gt;&lt;code&gt;min_exponent10&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;10進指数下限&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/max_exponent.html&#34;&gt;&lt;code&gt;max_exponent&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指数上限&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/max_exponent10.html&#34;&gt;&lt;code&gt;max_exponent10&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;10進指数上限&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/has_infinity.html&#34;&gt;&lt;code&gt;has_infinity&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;正の無限表現を持っているかを判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/has_quiet_nan.html&#34;&gt;&lt;code&gt;has_quiet_NaN&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;シグナルを発生させないNaNを持っているかを判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/has_signaling_nan.html&#34;&gt;&lt;code&gt;has_signaling_NaN&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;シグナルを発生させるNaNを持っているかを判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/has_denorm.html&#34;&gt;&lt;code&gt;has_denorm&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非正規化数のサポート状況を判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/has_denorm_loss.html&#34;&gt;&lt;code&gt;has_denorm_loss&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;精度の損失が非正規化数によるものかを判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/infinity.html&#34;&gt;&lt;code&gt;infinity()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;正の無限表現を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/quiet_nan.html&#34;&gt;&lt;code&gt;quiet_NaN()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;シグナルを発生させないNaNを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/signaling_nan.html&#34;&gt;&lt;code&gt;signaling_NaN()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;シグナルを発生させるNaNを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/denorm_min.html&#34;&gt;&lt;code&gt;denorm_min()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小の非正規化数を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/is_iec559.html&#34;&gt;&lt;code&gt;is_iec559&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IEC 559標準に準拠しているかを判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/is_bounded.html&#34;&gt;&lt;code&gt;is_bounded&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;値のなす集合が有限であるかを判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/is_modulo.html&#34;&gt;&lt;code&gt;is_modulo&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;常に合同関係にある型かを判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/traps.html&#34;&gt;&lt;code&gt;traps&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;トラップが実装されている型かを判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/tinyness_before.html&#34;&gt;&lt;code&gt;tinyness_before&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;丸めが行われる前に小さな値になることを検出できるかを判定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/round_style.html&#34;&gt;&lt;code&gt;round_style&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;丸めスタイルを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2114.html&#34; target=&#34;_blank&#34;&gt;N2114 &lt;code&gt;long long&lt;/code&gt; Goes to the Library, Revision 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#559&#34; target=&#34;_blank&#34;&gt;LWG Issue 559. &lt;code&gt;numeric_limits&amp;lt;const T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- 標準ライブラリがlong longに対応した経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/ostream/basic_ostream/op_ostream.html"/>
      <id>bc6ce53ee4067cb87f079a250efb0cebfb312e52:reference/ostream/basic_ostream/op_ostream.md</id>
      <updated>2015-08-04 18:43:25 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class basic_ostream&#34;&gt;basic_ostream::&lt;/span&gt;operator&amp;lt;&amp;lt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; char_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;basic_ostream&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; basic_ios&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// マニピュレータ&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3つとも関数へのポインタを引数に取る。&lt;/span&gt;
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;pf)(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;));
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ios&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;pf)(basic_ios&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;));
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(ios_base&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;pf)(ios_base&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// bool値・数値・ポインタ&lt;/span&gt;
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; n);
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;short&lt;/span&gt; n);
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;short&lt;/span&gt; n);
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; n);
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; n);
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; n);
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; n);
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; n); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; n); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; f);
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; f);
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; f);
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ストリームバッファ&lt;/span&gt;
    basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_streambuf&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;*&lt;/span&gt; sb);

    &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;……&lt;/span&gt;
  };

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, CharT c);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; c);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; c);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; c);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #B00040&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; c);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字列&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; CharT s);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; s);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; s);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; s);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; s);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ストリームへの右辺値参照 (C++11)&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&amp;amp;&lt;/span&gt; is, T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;ストリームへの出力またはマニピュレータの実行を行う。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;マニピュレータを実行する多重定義それ自体は、書式化出力関数・非書式化出力関数いずれにも該当しない。&lt;/li&gt;
&lt;li&gt;数値型（&lt;code&gt;bool&lt;/code&gt;も含む）と&lt;code&gt;void*&lt;/code&gt;に対する多重定義は、書式化出力関数である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_streambuf&lt;/code&gt;に対する多重定義は、非書式化出力関数である。&lt;/li&gt;
&lt;li&gt;文字に対する多重定義は、書式化出力関数である。&lt;/li&gt;
&lt;li&gt;文字列に対する多重定義は、書式化出力関数である。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;h3&gt;マニピュレータ&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;pf(*this)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;bool値・数値・ポインタ&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sentry&lt;/code&gt;オブジェクトを構築する。&lt;code&gt;sentry&lt;/code&gt;オブジェクトが失敗を示した場合、何もしない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;num_put::put&lt;/code&gt;を使用して入力のパース・数値への変換を行う。実引数を渡すに際し、一部の型では以下のように型変換を行う。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;short&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flags()&lt;/code&gt;に&lt;code&gt;hex&lt;/code&gt;または&lt;code&gt;oct&lt;/code&gt;が設定されていれば&lt;code&gt;static_cast&amp;lt;long&amp;gt;(static_cast&amp;lt;unsigned short&amp;gt;(n))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;それ以外では&lt;code&gt;static_cast&amp;lt;long&amp;gt;(n)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flags()&lt;/code&gt;に&lt;code&gt;hex&lt;/code&gt;または&lt;code&gt;oct&lt;/code&gt;が設定されていれば&lt;code&gt;static_cast&amp;lt;long&amp;gt;(static_cast&amp;lt;unsigned int&amp;gt;(n))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;それ以外では&lt;code&gt;static_cast&amp;lt;long&amp;gt;(n)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unsigned short&lt;/code&gt;、&lt;code&gt;unsigned int&lt;/code&gt;: &lt;code&gt;static_cast&amp;lt;unsigned long&amp;gt;(n)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt;: &lt;code&gt;static_cast&amp;lt;double&amp;gt;(n)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;num_put::put&lt;/code&gt;から得られた&lt;code&gt;iostate&lt;/code&gt;値を実引数にして&lt;code&gt;setstate&lt;/code&gt;関数を呼び出す。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;ストリームバッファ&lt;/h3&gt;
&lt;p&gt;別のストリームバッファからの入力をストリームに出力する。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sentry&lt;/code&gt;オブジェクトを構築する。&lt;code&gt;sentry&lt;/code&gt;オブジェクトが失敗を示した場合、何もしない。&lt;/li&gt;
&lt;li&gt;仮引数&lt;code&gt;sb&lt;/code&gt;がヌルポインタの場合、&lt;code&gt;setstate(badbit)&lt;/code&gt;を呼び出して終了する。&lt;/li&gt;
&lt;li&gt;以下のいずれかを満たすまで、&lt;code&gt;sb&lt;/code&gt;から文字を入力して&lt;code&gt;this&lt;/code&gt;へ出力する。&lt;ul&gt;
&lt;li&gt;EOFに達した。&lt;/li&gt;
&lt;li&gt;出力処理に失敗した（この場合、失敗したときの文字は入力側のストリームバッファに戻される）。&lt;/li&gt;
&lt;li&gt;例外が発生した。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;入力がなされなかった場合、&lt;code&gt;setstate(failbit)&lt;/code&gt;を呼び出す。&lt;/p&gt;
&lt;h3&gt;文字&lt;/h3&gt;
&lt;p&gt;文字型&lt;code&gt;CharT&lt;/code&gt;、&lt;code&gt;char&lt;/code&gt;を実引数として受け取る。
ただし、&lt;code&gt;CharT&lt;/code&gt;がcharの場合に限り、&lt;code&gt;unsigned char&lt;/code&gt;および&lt;code&gt;signed char&lt;/code&gt;も受け付ける。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sentry&lt;/code&gt;オブジェクトを構築する。&lt;code&gt;sentry&lt;/code&gt;オブジェクトが失敗を示した場合、何もしない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt;を出力する。ただし、入力が&lt;code&gt;char&lt;/code&gt;、&lt;code&gt;singed char&lt;/code&gt;、&lt;code&gt;unsigned char&lt;/code&gt;で出力先の&lt;code&gt;char_type&lt;/code&gt;が&lt;code&gt;char&lt;/code&gt;以外なら、&lt;code&gt;os.widen(c)&lt;/code&gt;を出力する。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;width()&lt;/code&gt;と&lt;code&gt;flags() &amp;amp; (ios_base::adjustfield)&lt;/code&gt;に従ってパディングの出力も行う。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width(0)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;p&gt;ヌル終端の文字列（文字型の配列の要素を指し示すポインタ）を実引数として受け取る。
文字型として&lt;code&gt;CharT&lt;/code&gt;、&lt;code&gt;char&lt;/code&gt;に対応している。
ただし、&lt;code&gt;CharT&lt;/code&gt;がcharの場合に限り&lt;code&gt;unsigned char&lt;/code&gt;および&lt;code&gt;signed char&lt;/code&gt;も受け付ける。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sentry&lt;/code&gt;オブジェクトを構築する。&lt;code&gt;sentry&lt;/code&gt;オブジェクトが失敗を示した場合、何もしない。&lt;/li&gt;
&lt;li&gt;仮引数&lt;code&gt;s&lt;/code&gt;が指し示す文字列を出力する。&lt;ul&gt;
&lt;li&gt;文字数は以下で求める。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CharT&lt;/code&gt;文字列: &lt;code&gt;traits_type::length(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;char&lt;/code&gt;文字列: &lt;code&gt;std::char_traits&amp;lt;char&amp;gt;::length(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;signed char&lt;/code&gt;と&lt;code&gt;unsigned char&lt;/code&gt;文字列: &lt;code&gt;std::char_traits&amp;lt;char&amp;gt;::length(s)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width()&lt;/code&gt;と&lt;code&gt;flags() &amp;amp; (ios_base::adjustfield)&lt;/code&gt;に従ってパディングの出力も行う。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width(0)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;ストリームへの右辺値参照 (C++11)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;os &amp;lt;&amp;lt; x&lt;/code&gt;を実行する。この多重定義は、一時オブジェクトなどに対して&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;演算子を利用可能にするためのものである。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;101
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;TBD&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++98&lt;/li&gt;
&lt;li&gt;C++11: &lt;code&gt;long long&lt;/code&gt;、&lt;code&gt;unsigned long long&lt;/code&gt;、ストリームへの右辺値参照を実引数として受け取るものが追加された&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このほかの&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;演算子関数&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/op_ostream.html&#34;&gt;&lt;code&gt;std::basic_string&lt;/code&gt;に対するもの&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;出力対象の型&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/streambuf/basic_streambuf.html&#34;&gt;&lt;code&gt;basic_streambuf&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2114.html&#34; target=&#34;_blank&#34;&gt;N2114 &lt;code&gt;long long&lt;/code&gt; Goes to the Library, Revision 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>random (C++11) -- 乱数ライブラリがドラフト入りした経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/random.html"/>
      <id>04dc99bbae4f015620ce5deedadb24134a93305a:reference/random.md</id>
      <updated>2015-08-04 18:40:14 +0900</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;random&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;random (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;random&amp;gt;&lt;/code&gt;ヘッダは、擬似乱数を取り扱うための乱数生成器 (Random Number Generator) や分布生成器 (Distribution) 、非決定的な乱数生成器、及び関連する一連のクラス・関数を定義する乱数ライブラリである。&lt;/p&gt;
&lt;h2&gt;擬似乱数生成器&lt;/h2&gt;
&lt;p&gt;擬似乱数生成器は、ソフトウェアで乱雑な値のシーケンスを生成するクラスである。&lt;br /&gt;
多くのユーザーにとっては、以下に挙げる生の乱数生成器テンプレートクラスそのものよりも、後述するパラメータ定義済みの乱数生成器の型を使用すれば十分である。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/linear_congruential_engine.html&#34;&gt;&lt;code&gt;linear_congruential_engine&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;線形合同法(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/mersenne_twister_engine.html&#34;&gt;&lt;code&gt;mersenne_twister_engine&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メルセンヌツイスター法(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/subtract_with_carry_engine.html&#34;&gt;&lt;code&gt;subtract_with_carry_engine&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャリー付き減算法(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;生成器アダプタ&lt;/h2&gt;
&lt;p&gt;生成器アダプタは、他の乱数生成器の乱数列を調整するクラスである。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/discard_block_engine.html&#34;&gt;&lt;code&gt;discard_block_engine&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;部分的に乱数列を破棄する(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/independent_bits_engine.html&#34;&gt;&lt;code&gt;independent_bits_engine&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;乱数生成器が生成するビットを変更する(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/shuffle_order_engine.html&#34;&gt;&lt;code&gt;shuffle_order_engine&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;乱数の生成順をシャッフルする(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;パラメータ定義済み擬似乱数生成器&lt;/h2&gt;
&lt;p&gt;先に挙げた乱数生成器に対し一般的なパラメータを定義し、使いやすいように用意された乱数生成器の型。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/minstd_rand0.html&#34;&gt;&lt;code&gt;minstd_rand0&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小標準MINSTD(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/minstd_rand.html&#34;&gt;&lt;code&gt;minstd_rand&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小標準MINSTDのパラメータ改良版(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/mt19937.html&#34;&gt;&lt;code&gt;mt19937&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メルセンヌツイスターの32ビット版(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/mt19937_64.html&#34;&gt;&lt;code&gt;mt19937_64&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メルセンヌツイスターの64ビット版(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/ranlux24_base.html&#34;&gt;&lt;code&gt;ranlux24_base&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;RANLUX法の&lt;code&gt;ranlux24&lt;/code&gt;を定義するための型(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/ranlux48_base.html&#34;&gt;&lt;code&gt;ranlux48_base&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;RANLUX法の&lt;code&gt;ranlux48&lt;/code&gt;を定義するための型(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/ranlux24.html&#34;&gt;&lt;code&gt;ranlux24&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;RANLUX法のレベル3(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/ranlux48.html&#34;&gt;&lt;code&gt;ranlux48&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;RANLUX法のレベル4(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/knuth_b.html&#34;&gt;&lt;code&gt;knuth_b&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;KnuthのリオーダーアルゴリズムB(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/default_random_engine.html&#34;&gt;&lt;code&gt;default_random_engine&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非専門用途でデフォルト使用する擬似乱数生成器(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非決定的な乱数生成器&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/random_device.html&#34;&gt;&lt;code&gt;random_device&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;予測不能な乱数生成器(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;シード数列&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/seed_seq.html&#34;&gt;&lt;code&gt;seed_seq&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;疑似乱数エンジンの為のシード数列(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;分布生成器&lt;/h2&gt;
&lt;h3&gt;一様分布&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/uniform_int_distribution.html&#34;&gt;&lt;code&gt;uniform_int_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一様整数分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/uniform_real_distribution.html&#34;&gt;&lt;code&gt;uniform_real_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一様実数分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ベルヌーイ分布(Bernoulli Distribution)&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/bernoulli_distribution.html&#34;&gt;&lt;code&gt;bernoulli_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ベルヌーイ分布(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/binomial_distribution.html&#34;&gt;&lt;code&gt;binomial_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;二項分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/geometric_distribution.html&#34;&gt;&lt;code&gt;geometric_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;幾何分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/negative_binomial_distribution.html&#34;&gt;&lt;code&gt;negative_binomial_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;負の二項分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ポワソン分布(Poisson Distribution)&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/poisson_distribution.html&#34;&gt;&lt;code&gt;poisson_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ポワソン分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/exponential_distribution.html&#34;&gt;&lt;code&gt;exponential_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指数分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/gamma_distribution.html&#34;&gt;&lt;code&gt;gamma_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ガンマ分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/weibull_distribution.html&#34;&gt;&lt;code&gt;weibull_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ワイブル分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/extreme_value_distribution.html&#34;&gt;&lt;code&gt;extreme_value_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;極値分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;正規分布(Normal Distribution)&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/normal_distribution.html&#34;&gt;&lt;code&gt;normal_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;正規分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/lognormal_distribution.html&#34;&gt;&lt;code&gt;lognormal_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;対数正規分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/chi_squared_distribution.html&#34;&gt;&lt;code&gt;chi_squared_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;カイ二乗分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/cauchy_distribution.html&#34;&gt;&lt;code&gt;cauchy_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コーシー分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/fisher_f_distribution.html&#34;&gt;&lt;code&gt;fisher_f_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;フィッシャーのF分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/student_t_distribution.html&#34;&gt;&lt;code&gt;student_t_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ステューデントのt分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;標本分布(Sampling Distribution)&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/discrete_distribution.html&#34;&gt;&lt;code&gt;discrete_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;整数のインデックスごとに離散した確率分布生成器(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/piecewise_constant_distribution.html&#34;&gt;&lt;code&gt;piecewise_constant_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;区間ごとの重み付けを定数値とした分布生成器(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/piecewise_linear_distribution.html&#34;&gt;&lt;code&gt;piecewise_linear_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;区間ごとの重み付けを線形に接続した分布生成器(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ユーティリティ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/generate_canonical.html&#34;&gt;&lt;code&gt;generate_canonical&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;実数区間[0.0,1.0)に展開（事実上正規化）された一様分布乱数を得る(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;以下に示す例では、C++11の標準の乱数ライブラリを用いてランダムデバイスから初期化数列を取得してメルセンヌツイスタエンジンを初期化、単精度浮動少数型で区間[-1.0f, 1.0f)の一様分布、および&lt;code&gt;1.0f&lt;/code&gt;を中心として標準偏差&lt;code&gt;0.5f&lt;/code&gt;の正規分布に基づく擬似乱数を100万個生成し&#34;random.tsv&#34;にタブ区切り形式のファイルとして結果を保存する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;fstream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メルセンヌ・ツイスター法による擬似乱数生成器を、&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ハードウェア乱数をシードにして初期化&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;random_device seed_gen;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mt19937 engine(seed_gen());

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 一様実数分布&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// [-1.0, 1.0)の値の範囲で、等確率に実数を生成する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;uniform_real_distribution&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; dist1(&lt;span style=&#34;color: #666666&#34;&gt;-1.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.0&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 正規分布&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 平均1.0、標準偏差0.5で分布させる&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;normal_distribution&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; dist2(&lt;span style=&#34;color: #666666&#34;&gt;1.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0.5&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ofstream file(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;random.tsv&#34;&lt;/span&gt;);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1000*1000&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 各分布法に基いて乱数を生成&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; r1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; dist1(engine);
    &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; r2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; dist2(engine);

    file &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; r1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; r2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;この例である時得られた &lt;a href=&#34;https://github.com/cpprefjp/image/raw/master/reference/random/random.tsv.xz&#34; target=&#34;_blank&#34;&gt;random.tsv&lt;/a&gt; (ファイルサイズが大きいので添付する上では random.tsv.xz に圧縮) を元に、得られたデータの密度を図示すると、以下のような図が得られた。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/reference/random/random.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;破線は dist1 (一様分布; min=-1.0f, max=1.0f) 、実線は dist2 (正規分布; mean=1.0f, stdev=0.5f) 、横軸は値、縦軸は密度(値の件数を区間ごとに数えたヒストグラムを全体に占める割合で表したもの)である。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.biwako.shiga-u.ac.jp/sensei/mnaka/ut/statdist.html&#34; target=&#34;_blank&#34;&gt;さまざまな確率分布 (probability distributions)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sites.google.com/site/techdmba/distribution&#34; target=&#34;_blank&#34;&gt;確率変数－種々の分布の特徴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/1993/N0352.asc&#34; target=&#34;_blank&#34;&gt;N0352 Proposal for Standardization of Random Number Generators in C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1398.html&#34; target=&#34;_blank&#34;&gt;N1398 A Proposal to Add an Extensible Random Number Facility to the Standard Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1588.pdf&#34; target=&#34;_blank&#34;&gt;N1588 On Random-Number Distributions for C++0x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2111.pdf&#34; target=&#34;_blank&#34;&gt;N2111 Random Number Generation in C++0X: A Comprehensive Proposal, version 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2423.pdf&#34; target=&#34;_blank&#34;&gt;N2423 Recommendations for Resolving Issues re [rand], Version 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2424.pdf&#34; target=&#34;_blank&#34;&gt;N2424 Recommendations for Resolving the 2007-09-21 Issues re [rand]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3551.pdf&#34; target=&#34;_blank&#34;&gt;N3551 Random Number Generation in C++11&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;編集者向けの参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/editors_doc/random_figure.html&#34;&gt;乱数分布の図を作る方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>system_error (C++11) -- 診断ライブラリの問題解決の経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/system_error.html"/>
      <id>fd4ef75d50fc214117c1635dd4bde710dd452f1d:reference/system_error.md</id>
      <updated>2015-08-04 14:25:58 +0900</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;system_error&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;system_error (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;system_error&amp;gt;&lt;/code&gt;ヘッダでは、OSが出力するエラーを扱う機能を提供する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/error_category.html&#34;&gt;&lt;code&gt;error_category&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;エラーを分類するための基本クラス(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/generic_category.html&#34;&gt;&lt;code&gt;generic_category&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;汎用のエラーに関する情報を返す(function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/system_category.html&#34;&gt;&lt;code&gt;system_category&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;環境固有のエラーに関する情報を返す(function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/error_code.html&#34;&gt;&lt;code&gt;error_code&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;環境依存のエラーコード(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/error_condition.html&#34;&gt;&lt;code&gt;error_condition&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;環境非依存のエラーコード(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/system_error.html&#34;&gt;&lt;code&gt;system_error&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;システムエラーの例外クラス(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/is_error_code_enum.html&#34;&gt;&lt;code&gt;is_error_code_enum&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;error_code&lt;/code&gt;の列挙値として見なせる型か判別する(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/is_error_condition_enum.html&#34;&gt;&lt;code&gt;is_error_condition_enum&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;error_condition&lt;/code&gt;の列挙値として見なせる型か判別する(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/errc.html&#34;&gt;&lt;code&gt;errc&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;エラー値を表す列挙型(enum class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/make_error_code.html&#34;&gt;&lt;code&gt;make_error_code&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;errc&lt;/code&gt;から&lt;code&gt;error_code&lt;/code&gt;オブジェクトを生成する(function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/make_error_condition.html&#34;&gt;&lt;code&gt;make_error_condition&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;errc&lt;/code&gt;から&lt;code&gt;error_condition&lt;/code&gt;オブジェクトを生成する(function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;error_code&lt;/code&gt;、&lt;code&gt;error_condition&lt;/code&gt;の等値比較(function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/op_not_equal.html&#34;&gt;&lt;code&gt;operator!=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;error_code&lt;/code&gt;、&lt;code&gt;error_condition&lt;/code&gt;の非等値比較(function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/op_less.html&#34;&gt;&lt;code&gt;operator&amp;lt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;error_code&lt;/code&gt;、&lt;code&gt;error_condition&lt;/code&gt;の小なり比較(function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/op_ostream.html&#34;&gt;&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;error_code&lt;/code&gt;のストリーム出力(function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hash&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;error_code&lt;/code&gt;での特殊化(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.think-async.com/search/label/system_error&#34; target=&#34;_blank&#34;&gt;System error support in C++0x part1-5 - Thinking Asynchronously in C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/system/doc/index.html&#34; target=&#34;_blank&#34;&gt;Boost System Library Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2241.html&#34; target=&#34;_blank&#34;&gt;N2241 Diagnostics Enhancements for C++0x (Rev. 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2422.htm&#34; target=&#34;_blank&#34;&gt;N2422 Diagnostics Issues (Rev. 2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>random (C++11) -- 乱数関係の問題解決の経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/random.html"/>
      <id>3721c02f6f460df0049f3b63404030c7c794d76f:reference/random.md</id>
      <updated>2015-08-04 14:24:03 +0900</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;random&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;random (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;random&amp;gt;&lt;/code&gt;ヘッダは、擬似乱数を取り扱うための乱数生成器 (Random Number Generator) や分布生成器 (Distribution) 、非決定的な乱数生成器、及び関連する一連のクラス・関数を定義する乱数ライブラリである。&lt;/p&gt;
&lt;h2&gt;擬似乱数生成器&lt;/h2&gt;
&lt;p&gt;擬似乱数生成器は、ソフトウェアで乱雑な値のシーケンスを生成するクラスである。&lt;br /&gt;
多くのユーザーにとっては、以下に挙げる生の乱数生成器テンプレートクラスそのものよりも、後述するパラメータ定義済みの乱数生成器の型を使用すれば十分である。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/linear_congruential_engine.html&#34;&gt;&lt;code&gt;linear_congruential_engine&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;線形合同法(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/mersenne_twister_engine.html&#34;&gt;&lt;code&gt;mersenne_twister_engine&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メルセンヌツイスター法(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/subtract_with_carry_engine.html&#34;&gt;&lt;code&gt;subtract_with_carry_engine&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャリー付き減算法(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;生成器アダプタ&lt;/h2&gt;
&lt;p&gt;生成器アダプタは、他の乱数生成器の乱数列を調整するクラスである。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/discard_block_engine.html&#34;&gt;&lt;code&gt;discard_block_engine&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;部分的に乱数列を破棄する(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/independent_bits_engine.html&#34;&gt;&lt;code&gt;independent_bits_engine&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;乱数生成器が生成するビットを変更する(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/shuffle_order_engine.html&#34;&gt;&lt;code&gt;shuffle_order_engine&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;乱数の生成順をシャッフルする(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;パラメータ定義済み擬似乱数生成器&lt;/h2&gt;
&lt;p&gt;先に挙げた乱数生成器に対し一般的なパラメータを定義し、使いやすいように用意された乱数生成器の型。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/minstd_rand0.html&#34;&gt;&lt;code&gt;minstd_rand0&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小標準MINSTD(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/minstd_rand.html&#34;&gt;&lt;code&gt;minstd_rand&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小標準MINSTDのパラメータ改良版(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/mt19937.html&#34;&gt;&lt;code&gt;mt19937&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メルセンヌツイスターの32ビット版(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/mt19937_64.html&#34;&gt;&lt;code&gt;mt19937_64&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メルセンヌツイスターの64ビット版(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/ranlux24_base.html&#34;&gt;&lt;code&gt;ranlux24_base&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;RANLUX法の&lt;code&gt;ranlux24&lt;/code&gt;を定義するための型(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/ranlux48_base.html&#34;&gt;&lt;code&gt;ranlux48_base&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;RANLUX法の&lt;code&gt;ranlux48&lt;/code&gt;を定義するための型(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/ranlux24.html&#34;&gt;&lt;code&gt;ranlux24&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;RANLUX法のレベル3(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/ranlux48.html&#34;&gt;&lt;code&gt;ranlux48&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;RANLUX法のレベル4(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/knuth_b.html&#34;&gt;&lt;code&gt;knuth_b&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;KnuthのリオーダーアルゴリズムB(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/default_random_engine.html&#34;&gt;&lt;code&gt;default_random_engine&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非専門用途でデフォルト使用する擬似乱数生成器(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非決定的な乱数生成器&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/random_device.html&#34;&gt;&lt;code&gt;random_device&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;予測不能な乱数生成器(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;シード数列&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/seed_seq.html&#34;&gt;&lt;code&gt;seed_seq&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;疑似乱数エンジンの為のシード数列(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;分布生成器&lt;/h2&gt;
&lt;h3&gt;一様分布&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/uniform_int_distribution.html&#34;&gt;&lt;code&gt;uniform_int_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一様整数分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/uniform_real_distribution.html&#34;&gt;&lt;code&gt;uniform_real_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一様実数分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ベルヌーイ分布(Bernoulli Distribution)&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/bernoulli_distribution.html&#34;&gt;&lt;code&gt;bernoulli_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ベルヌーイ分布(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/binomial_distribution.html&#34;&gt;&lt;code&gt;binomial_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;二項分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/geometric_distribution.html&#34;&gt;&lt;code&gt;geometric_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;幾何分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/negative_binomial_distribution.html&#34;&gt;&lt;code&gt;negative_binomial_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;負の二項分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ポワソン分布(Poisson Distribution)&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/poisson_distribution.html&#34;&gt;&lt;code&gt;poisson_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ポワソン分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/exponential_distribution.html&#34;&gt;&lt;code&gt;exponential_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指数分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/gamma_distribution.html&#34;&gt;&lt;code&gt;gamma_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ガンマ分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/weibull_distribution.html&#34;&gt;&lt;code&gt;weibull_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ワイブル分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/extreme_value_distribution.html&#34;&gt;&lt;code&gt;extreme_value_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;極値分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;正規分布(Normal Distribution)&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/normal_distribution.html&#34;&gt;&lt;code&gt;normal_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;正規分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/lognormal_distribution.html&#34;&gt;&lt;code&gt;lognormal_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;対数正規分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/chi_squared_distribution.html&#34;&gt;&lt;code&gt;chi_squared_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;カイ二乗分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/cauchy_distribution.html&#34;&gt;&lt;code&gt;cauchy_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コーシー分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/fisher_f_distribution.html&#34;&gt;&lt;code&gt;fisher_f_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;フィッシャーのF分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/student_t_distribution.html&#34;&gt;&lt;code&gt;student_t_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ステューデントのt分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;標本分布(Sampling Distribution)&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/discrete_distribution.html&#34;&gt;&lt;code&gt;discrete_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;整数のインデックスごとに離散した確率分布生成器(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/piecewise_constant_distribution.html&#34;&gt;&lt;code&gt;piecewise_constant_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;区間ごとの重み付けを定数値とした分布生成器(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/piecewise_linear_distribution.html&#34;&gt;&lt;code&gt;piecewise_linear_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;区間ごとの重み付けを線形に接続した分布生成器(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ユーティリティ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/generate_canonical.html&#34;&gt;&lt;code&gt;generate_canonical&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;実数区間[0.0,1.0)に展開（事実上正規化）された一様分布乱数を得る(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;以下に示す例では、C++11の標準の乱数ライブラリを用いてランダムデバイスから初期化数列を取得してメルセンヌツイスタエンジンを初期化、単精度浮動少数型で区間[-1.0f, 1.0f)の一様分布、および&lt;code&gt;1.0f&lt;/code&gt;を中心として標準偏差&lt;code&gt;0.5f&lt;/code&gt;の正規分布に基づく擬似乱数を100万個生成し&#34;random.tsv&#34;にタブ区切り形式のファイルとして結果を保存する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;fstream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メルセンヌ・ツイスター法による擬似乱数生成器を、&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ハードウェア乱数をシードにして初期化&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;random_device seed_gen;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mt19937 engine(seed_gen());

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 一様実数分布&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// [-1.0, 1.0)の値の範囲で、等確率に実数を生成する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;uniform_real_distribution&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; dist1(&lt;span style=&#34;color: #666666&#34;&gt;-1.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.0&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 正規分布&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 平均1.0、標準偏差0.5で分布させる&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;normal_distribution&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; dist2(&lt;span style=&#34;color: #666666&#34;&gt;1.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0.5&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ofstream file(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;random.tsv&#34;&lt;/span&gt;);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1000*1000&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 各分布法に基いて乱数を生成&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; r1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; dist1(engine);
    &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; r2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; dist2(engine);

    file &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; r1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; r2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;この例である時得られた &lt;a href=&#34;https://github.com/cpprefjp/image/raw/master/reference/random/random.tsv.xz&#34; target=&#34;_blank&#34;&gt;random.tsv&lt;/a&gt; (ファイルサイズが大きいので添付する上では random.tsv.xz に圧縮) を元に、得られたデータの密度を図示すると、以下のような図が得られた。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/reference/random/random.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;破線は dist1 (一様分布; min=-1.0f, max=1.0f) 、実線は dist2 (正規分布; mean=1.0f, stdev=0.5f) 、横軸は値、縦軸は密度(値の件数を区間ごとに数えたヒストグラムを全体に占める割合で表したもの)である。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.biwako.shiga-u.ac.jp/sensei/mnaka/ut/statdist.html&#34; target=&#34;_blank&#34;&gt;さまざまな確率分布 (probability distributions)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sites.google.com/site/techdmba/distribution&#34; target=&#34;_blank&#34;&gt;確率変数－種々の分布の特徴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/1993/N0352.asc&#34; target=&#34;_blank&#34;&gt;N0352 Proposal for Standardization of Random Number Generators in C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1398.html&#34; target=&#34;_blank&#34;&gt;N1398 A Proposal to Add an Extensible Random Number Facility to the Standard Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1588.pdf&#34; target=&#34;_blank&#34;&gt;N1588 On Random-Number Distributions for C++0x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2423.pdf&#34; target=&#34;_blank&#34;&gt;N2423 Recommendations for Resolving Issues re [rand], Version 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2424.pdf&#34; target=&#34;_blank&#34;&gt;N2424 Recommendations for Resolving the 2007-09-21 Issues re [rand]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3551.pdf&#34; target=&#34;_blank&#34;&gt;N3551 Random Number Generation in C++11&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;編集者向けの参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/editors_doc/random_figure.html&#34;&gt;乱数分布の図を作る方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stod (C++11) -- 文字列と数値間の変換機能の経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/string/stod.html"/>
      <id>6c76d0520f8f7336a3dbe02be899b4dbd62a87b6:reference/string/stod.md</id>
      <updated>2015-08-04 14:17:59 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;string&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;stod (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; stod(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;size_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr);
  &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;stod&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; wstring&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;size_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;文字列&lt;code&gt;str&lt;/code&gt;を数値として読み取って、&lt;code&gt;double&lt;/code&gt;型の値に変換する。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;パラメータ&lt;code&gt;str&lt;/code&gt;が&lt;code&gt;string&lt;/code&gt;型であれば&lt;code&gt;std::strtod(str.c_str(), &amp;amp;end)&lt;/code&gt;、&lt;code&gt;wstring&lt;/code&gt;であれば&lt;code&gt;std::wcstod(str.c_str(), &amp;amp;end)&lt;/code&gt;を呼び出して、その戻り値を返す。&lt;/p&gt;
&lt;p&gt;パラメータ&lt;code&gt;idx&lt;/code&gt;が非&lt;code&gt;nullptr&lt;/code&gt;の場合、変換に使用されなかった要素のインデックス（&lt;code&gt;end - str.c_str()&lt;/code&gt;）が格納される。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;変換して得られた数値が返される。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;数値への変換が行われなかった場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;&lt;code&gt;std::invalid_argument&lt;/code&gt;&lt;/a&gt;が送出される。&lt;/li&gt;
&lt;li&gt;以下の条件に合致した場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;&lt;code&gt;std::out_of_range&lt;/code&gt;&lt;/a&gt;が送出される。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::strtoull()&lt;/code&gt;関数が&lt;code&gt;std::errno&lt;/code&gt;変数に&lt;code&gt;ERANGE&lt;/code&gt;を設定した場合&lt;/li&gt;
&lt;li&gt;結果が範囲外の値になった場合 (C++14)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;h3&gt;errnoの扱い&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Visual C++ 11やGCC (libstdc++) 4.8.2では、この関数を呼び出すと&lt;code&gt;errno&lt;/code&gt;の値が変更される。&lt;/li&gt;
&lt;li&gt;Clang (libc++) 3.3では、この関数の呼び出し前後で&lt;code&gt;errno&lt;/code&gt;の値は変化しない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;グローバルロケールの影響&lt;/h3&gt;
&lt;p&gt;この関数は、&lt;code&gt;setlocale()&lt;/code&gt;関数により挙動が変化する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;strtod()&lt;/code&gt;関数での文字列先頭の空白を読み飛ばす処理に、&lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt;の&lt;code&gt;isspace()&lt;/code&gt;関数が使用される。&lt;/li&gt;
&lt;li&gt;小数点記号は&lt;code&gt;LC_NUMERIC&lt;/code&gt;で指定されたものが使用される。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 十進法での変換&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- decimal point&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stod(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1.5&#34;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::stod(&#34;1.5&#34;, nullptr);&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; aw &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stod(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;1.&#34;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::stod(L&#34;1.&#34;, nullptr);&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; aw &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 指数表記の変換&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- base = 8&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stod(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0.5e3&#34;&lt;/span&gt;, nullptr);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; bw &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stod(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;.25e3&#34;&lt;/span&gt;, nullptr);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bw &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 十六進法での変換&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- base = 16&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stod(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0x1.2P3&#34;&lt;/span&gt;, nullptr);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; cw &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stod(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;0x1.2P4&#34;&lt;/span&gt;, nullptr);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; cw &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 2番目の仮引数の使用例&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- use of idx parameter&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string es &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;30.75%&#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; ei;
  &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; e &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stod(es, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;ei);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; e &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; es[ei] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;wstring ews &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;32%&#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; ewi;
  &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; ew &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stod(ews, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;ewi);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ew &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ewi &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字列先頭に空白がある場合&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- space character before number&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stod(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;    -1&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stod(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;    -.25&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1.5
1
500
250
---- base = 16
9
18
---- use of idx parameter
30.75 %
32 2
---- space character before number
-1
-0.25
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;stod&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; str.c_str();
  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; end;
  errno &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; strtod(p, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;end);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; end) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; invalid_argument(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stod&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (errno &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; ERANGE) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; out_of_range(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stod&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (idx &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; nullptr) {
    &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(end &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; p);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x;
}

&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;stod&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; wstring&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; str.c_str();
  &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; end;
  errno &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; wcstod(p, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;end);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; end) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; invalid_argument(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stod&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (errno &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; ERANGE) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; out_of_range(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stod&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (idx &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; nullptr) {
    &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(end &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; p);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 10.0, 11.0, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ただし、Visual C++ 10.0, 11.0は十六進法に対応していない（12.0は未確認）。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2408.html&#34; target=&#34;_blank&#34;&gt;N2408 Simple Numeric Access Revision 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2009&#34; target=&#34;_blank&#34;&gt;LWG Issue 2009. Reporting out-of-bound values on numeric string conversions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C標準ライブラリに由来する関数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;atof&lt;/code&gt;: &lt;code&gt;stod&lt;/code&gt;は&lt;code&gt;atof&lt;/code&gt;を&lt;code&gt;std::string&lt;/code&gt;および&lt;code&gt;std::wsting&lt;/code&gt;に対応させたものと見なせる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strtod&lt;/code&gt;, &lt;code&gt;wcstod&lt;/code&gt;: &lt;code&gt;stod&lt;/code&gt;は&lt;code&gt;strtod&lt;/code&gt;および&lt;code&gt;wcstod&lt;/code&gt;をそれぞれ&lt;code&gt;std::string&lt;/code&gt;と&lt;code&gt;std::wsting&lt;/code&gt;に対応させたものと見なせる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ファミリー&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoi.html&#34;&gt;&lt;code&gt;stoi&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;int&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stol.html&#34;&gt;&lt;code&gt;stol&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;long&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoll.html&#34;&gt;&lt;code&gt;stoll&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;long long&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoul.html&#34;&gt;&lt;code&gt;stoul&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;unsigned long&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoull.html&#34;&gt;&lt;code&gt;stoull&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;unsigned long long&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stof.html&#34;&gt;&lt;code&gt;stof&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;float&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;(&lt;code&gt;stod&lt;/code&gt;: この関数自身)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stold.html&#34;&gt;&lt;code&gt;stold&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;long double&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stof (C++11) -- 文字列と数値間の変換機能の経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/string/stof.html"/>
      <id>6c76d0520f8f7336a3dbe02be899b4dbd62a87b6:reference/string/stof.md</id>
      <updated>2015-08-04 14:17:59 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;string&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;stof (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; stof(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;size_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr);
  &lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;stof&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; wstring&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;size_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;文字列&lt;code&gt;str&lt;/code&gt;を数値として読み取って、&lt;code&gt;float&lt;/code&gt;型の値に変換する。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;パラメータ&lt;code&gt;str&lt;/code&gt;が&lt;code&gt;string&lt;/code&gt;型であれば&lt;code&gt;std::strtod(str.c_str(), &amp;amp;end)&lt;/code&gt;、&lt;code&gt;wstring&lt;/code&gt;であれば&lt;code&gt;std::wcstof(str.c_str(), &amp;amp;end)&lt;/code&gt;を呼び出して、その戻り値を返す。&lt;/p&gt;
&lt;p&gt;パラメータ&lt;code&gt;idx&lt;/code&gt;が非&lt;code&gt;nullptr&lt;/code&gt;の場合、変換に使用されなかった要素のインデックス（&lt;code&gt;end - str.c_str()&lt;/code&gt;）が格納される。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;変換して得られた数値が返される。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;数値への変換が行われなかった場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;&lt;code&gt;std::invalid_argument&lt;/code&gt;&lt;/a&gt;が送出される。&lt;/li&gt;
&lt;li&gt;以下の条件に合致した場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;&lt;code&gt;std::out_of_range&lt;/code&gt;&lt;/a&gt;が送出される。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::strtoull()&lt;/code&gt;関数が&lt;code&gt;std::errno&lt;/code&gt;変数に&lt;code&gt;ERANGE&lt;/code&gt;を設定した場合&lt;/li&gt;
&lt;li&gt;結果が範囲外の値になった場合 (C++14)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;h3&gt;errnoの扱い&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Visual C++ 11やGCC (libstdc++) 4.8.2では、この関数を呼び出すと&lt;code&gt;errno&lt;/code&gt;の値が変更される。&lt;/li&gt;
&lt;li&gt;Clang (libc++) 3.3では、この関数の呼び出し前後で&lt;code&gt;errno&lt;/code&gt;の値は変化しない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;グローバルロケールの影響&lt;/h3&gt;
&lt;p&gt;この関数は、&lt;code&gt;setlocale()&lt;/code&gt;関数により挙動が変化する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;strtod()&lt;/code&gt;関数での文字列先頭の空白を読み飛ばす処理に、&lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt;の&lt;code&gt;isspace()&lt;/code&gt;関数が使用される。&lt;/li&gt;
&lt;li&gt;小数点記号は&lt;code&gt;LC_NUMERIC&lt;/code&gt;で指定されたものが使用される。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 十進法での変換&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- decimal point&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stof(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1.5&#34;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::stof(&#34;1.5&#34;, nullptr);&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; aw &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stof(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;1.&#34;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::stof(L&#34;1.&#34;, nullptr);&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; aw &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 指数表記の変換&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- base = 8&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stof(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0.5e3&#34;&lt;/span&gt;, nullptr);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; bw &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stof(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;.25e3&#34;&lt;/span&gt;, nullptr);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bw &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 十六進法での変換&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- base = 16&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stof(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0x1.2P3&#34;&lt;/span&gt;, nullptr);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; cw &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stof(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;0x1.2P4&#34;&lt;/span&gt;, nullptr);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; cw &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 2番目の仮引数の使用例&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- use of idx parameter&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string es &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;30.75%&#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; ei;
  &lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; e &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stof(es, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;ei);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; e &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; es[ei] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;wstring ews &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;32%&#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; ewi;
  &lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; ew &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stof(ews, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;ewi);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ew &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ewi &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字列先頭に空白がある場合&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- space character before number&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stof(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;    -1&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stof(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;    -.25&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1.5
1
500
250
---- base = 16
9
18
---- use of idx parameter
30.75 %
32 2
---- space character before number
-1
-0.25
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;stof&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; str.c_str();
  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; end;
  errno &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; strtod(p, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;end);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; end) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; invalid_argument(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stof&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (errno &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; ERANGE) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; out_of_range(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stof&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (idx &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; nullptr) {
    &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(end &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; p);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(x);
}

&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;stof&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; wstring&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; str.c_str();
  &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; end;
  errno &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; wcstof(p, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;end);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; end) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; invalid_argument(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stof&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (errno &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; ERANGE) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; out_of_range(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stof&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (idx &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; nullptr) {
    &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(end &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; p);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(x);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 10.0, 11.0, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ただし、Visual C++ 10.0, 11.0は十六進法に対応していない（12.0は未確認）。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2408.html&#34; target=&#34;_blank&#34;&gt;N2408 Simple Numeric Access Revision 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2009&#34; target=&#34;_blank&#34;&gt;LWG Issue 2009. Reporting out-of-bound values on numeric string conversions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C標準ライブラリに由来する関数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;atof&lt;/code&gt;: &lt;code&gt;stold&lt;/code&gt;は&lt;code&gt;atof&lt;/code&gt;を&lt;code&gt;std::string&lt;/code&gt;および&lt;code&gt;std::wsting&lt;/code&gt;に対応させ、戻り値の型を&lt;code&gt;float&lt;/code&gt;に変更したものと見なせる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strtod&lt;/code&gt;, &lt;code&gt;wcstof&lt;/code&gt;: &lt;code&gt;stof&lt;/code&gt;は&lt;code&gt;strtod&lt;/code&gt;および&lt;code&gt;wcstof&lt;/code&gt;をそれぞれ&lt;code&gt;std::string&lt;/code&gt;と&lt;code&gt;std::wsting&lt;/code&gt;に対応させたものと見なせる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ファミリー&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoi.html&#34;&gt;&lt;code&gt;stoi&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;int&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stol.html&#34;&gt;&lt;code&gt;stol&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;long&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoll.html&#34;&gt;&lt;code&gt;stoll&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;long long&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoul.html&#34;&gt;&lt;code&gt;stoul&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;unsigned long&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoull.html&#34;&gt;&lt;code&gt;stoull&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;unsigned long long&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;(&lt;code&gt;stof&lt;/code&gt;: この関数自身)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stod.html&#34;&gt;&lt;code&gt;stod&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;double&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stold.html&#34;&gt;&lt;code&gt;stold&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;long double&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stoi (C++11) -- 文字列と数値間の変換機能の経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/string/stoi.html"/>
      <id>6c76d0520f8f7336a3dbe02be899b4dbd62a87b6:reference/string/stoi.md</id>
      <updated>2015-08-04 14:17:59 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;string&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;stoi (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; stoi(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;size_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; base &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;stoi&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; wstring&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;size_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; base &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;文字列&lt;code&gt;str&lt;/code&gt;を数値として読み取って、&lt;code&gt;int&lt;/code&gt;型の値に変換する。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;パラメータ&lt;code&gt;str&lt;/code&gt;が&lt;code&gt;string&lt;/code&gt;型であれば&lt;code&gt;std::strtol(str.c_str(), &amp;amp;end, base)&lt;/code&gt;、&lt;code&gt;wstring&lt;/code&gt;型であれば&lt;code&gt;std::wcstol(str.c_str(), &amp;amp;end, base)&lt;/code&gt;を呼び出して、その戻り値を返す。&lt;/p&gt;
&lt;p&gt;パラメータ&lt;code&gt;idx&lt;/code&gt;が非&lt;code&gt;nullptr&lt;/code&gt;の場合、変換に使用されなかった要素のインデックス（&lt;code&gt;end - str.c_str()&lt;/code&gt;）が格納される。&lt;/p&gt;
&lt;p&gt;パラメータ&lt;code&gt;base&lt;/code&gt;は、整数文字列&lt;code&gt;str&lt;/code&gt;の基数を表す。デフォルトでは&lt;code&gt;10&lt;/code&gt;進数として文字列を整数に変換する。基数は&lt;code&gt;2&lt;/code&gt;から&lt;code&gt;36&lt;/code&gt;(&lt;code&gt;36&lt;/code&gt;含む)進数を指定できる。基数を&lt;code&gt;0&lt;/code&gt;とした場合は、文字列のプレフィックスから基数が自動的に選択される。自動的な選択のルールは、以下のようになる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先頭が&lt;code&gt;0&lt;/code&gt;：&lt;code&gt;8&lt;/code&gt;進数&lt;/li&gt;
&lt;li&gt;先頭が&lt;code&gt;0x&lt;/code&gt;もしくは&lt;code&gt;0X&lt;/code&gt;：&lt;code&gt;16&lt;/code&gt;進数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;変換して得られた数値が返される。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;数値への変換が行われなかった場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;&lt;code&gt;std::invalid_argument&lt;/code&gt;&lt;/a&gt;が送出される。&lt;/li&gt;
&lt;li&gt;以下の条件に合致した場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;&lt;code&gt;std::out_of_range&lt;/code&gt;&lt;/a&gt;が送出される。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::strtol()&lt;/code&gt;関数が&lt;code&gt;std::errno&lt;/code&gt;変数に&lt;code&gt;ERANGE&lt;/code&gt;を設定した場合 (C++14)&lt;/li&gt;
&lt;li&gt;結果が範囲外の値になった場合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;h3&gt;errnoの扱い&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Visual C++ 11やGCC (libstdc++) 4.8.2では、この関数を呼び出すと&lt;code&gt;errno&lt;/code&gt;の値が変更される。&lt;/li&gt;
&lt;li&gt;Clang (libc++) 3.3では、この関数の呼び出し前後で&lt;code&gt;errno&lt;/code&gt;の値は変化しない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;グローバルロケールの影響&lt;/h3&gt;
&lt;p&gt;この関数は、&lt;code&gt;setlocale()&lt;/code&gt;関数により挙動が変化する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;strtol()&lt;/code&gt;関数での文字列先頭の空白を読み飛ばす処理に、&lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt;の&lt;code&gt;isspace()&lt;/code&gt;関数が使用されるためである。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 十進法での変換&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- base = 10&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoi(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;10&#34;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::stoi(&#34;10&#34;, nullptr, 10);&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; aw &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoi(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;11&#34;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::stoi(L&#34;11&#34;, nullptr, 10);&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; aw &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 八進法での変換&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- base = 8&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoi(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;10&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; bw &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoi(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;10&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bw &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 十六進法での変換&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- base = 16&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoi(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;10&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;16&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; cw &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoi(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;11&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;16&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; cw &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 十六進法での変換（プレフィックス付き）&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; d &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoi(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0x20&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;16&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; d &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; dw &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoi(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;0x21&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;16&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; dw &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// base = 0による十進法・八進法・十六進法の自動判別&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- base = 0&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoi(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoi(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoi(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0x100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoi(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoi(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;0100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoi(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;0x100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 2番目の仮引数の使用例&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- use of idx parameter&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string es &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;30%&#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; ei;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; e &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoi(es, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;ei);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; e &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; es[ei] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;wstring ews &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;31%&#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; ewi;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; ew &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoi(ews, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;ewi);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ew &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ewi &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字列先頭に空白がある場合&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- space character before number&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoi(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;    -1&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoi(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;    -2&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;---- base = 10
10
11
---- base = 8
8
9
---- base = 16
16
17
32
33
---- base = 0
100
64
256
100
64
256
---- use of idx parameter
30 %
31 index: 2
---- space character before number
-1
-2
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;stoi&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; base &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; str.c_str();
  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; end;
  errno &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; strtol(p, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;end, base);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; end) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; invalid_argument(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stoi&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (errno &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; ERANGE &lt;span style=&#34;color: #666666&#34;&gt;||&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; INT_MIN &lt;span style=&#34;color: #666666&#34;&gt;||&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; INT_MAX) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; out_of_range(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stoi&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (idx &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; nullptr) {
    &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(end &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; p);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(x);
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;stoi&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; wstring&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; base &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; str.c_str();
  &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; end;
  errno &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; wcstol(p, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;end, base);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; end) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; invalid_argument(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stoi&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (errno &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; ERANGE &lt;span style=&#34;color: #666666&#34;&gt;||&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; INT_MIN &lt;span style=&#34;color: #666666&#34;&gt;||&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; INT_MAX) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; out_of_range(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stoi&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (idx &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; nullptr) {
    &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(end &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; p);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(x);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 10.0, 11.0, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2408.html&#34; target=&#34;_blank&#34;&gt;N2408 Simple Numeric Access Revision 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2009&#34; target=&#34;_blank&#34;&gt;LWG Issue 2009. Reporting out-of-bound values on numeric string conversions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C標準ライブラリに由来する関数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;atoi&lt;/code&gt;: &lt;code&gt;stoi&lt;/code&gt;は&lt;code&gt;atoi&lt;/code&gt;を&lt;code&gt;std::string&lt;/code&gt;および&lt;code&gt;std::wsting&lt;/code&gt;に対応させたものと見なせる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strtol&lt;/code&gt;, &lt;code&gt;wcstol&lt;/code&gt;: &lt;code&gt;stoi&lt;/code&gt;は&lt;code&gt;strtol&lt;/code&gt;および&lt;code&gt;wcstol&lt;/code&gt;をそれぞれ&lt;code&gt;std::string&lt;/code&gt;と&lt;code&gt;std::wsting&lt;/code&gt;に対応させ、戻り値の型を&lt;code&gt;int&lt;/code&gt;に変更したものと見なせる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ファミリー&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;(&lt;code&gt;stoi&lt;/code&gt;: この関数自身)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stol.html&#34;&gt;&lt;code&gt;stol&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;long&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoll.html&#34;&gt;&lt;code&gt;stoll&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;long long&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoul.html&#34;&gt;&lt;code&gt;stoul&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;unsigned long&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoull.html&#34;&gt;&lt;code&gt;stoull&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;unsigned long long&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stof.html&#34;&gt;&lt;code&gt;stof&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;float&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stod.html&#34;&gt;&lt;code&gt;stod&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;double&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stold.html&#34;&gt;&lt;code&gt;stold&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;long double&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stol (C++11) -- 文字列と数値間の変換機能の経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/string/stol.html"/>
      <id>6c76d0520f8f7336a3dbe02be899b4dbd62a87b6:reference/string/stol.md</id>
      <updated>2015-08-04 14:17:59 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;string&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;stol (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; stol(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;size_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr, &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; base &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);
  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;stol&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; wstring&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;size_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr, &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; base &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;文字列&lt;code&gt;str&lt;/code&gt;を数値として読み取って、&lt;code&gt;long&lt;/code&gt;型の値に変換する。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;パラメータ&lt;code&gt;str&lt;/code&gt;が&lt;code&gt;string&lt;/code&gt;型であれば&lt;code&gt;std::strtol(str.c_str(), &amp;amp;end, base)&lt;/code&gt;、&lt;code&gt;wstring&lt;/code&gt;型であれば&lt;code&gt;std::wcstol(str.c_str(), &amp;amp;end, base)&lt;/code&gt;を呼び出して、その戻り値を返す。&lt;/p&gt;
&lt;p&gt;パラメータ&lt;code&gt;idx&lt;/code&gt;が非&lt;code&gt;nullptr&lt;/code&gt;の場合、変換に使用されなかった要素のインデックス（&lt;code&gt;end - str.c_str()&lt;/code&gt;）が格納される。&lt;/p&gt;
&lt;p&gt;パラメータ&lt;code&gt;base&lt;/code&gt;は、整数文字列&lt;code&gt;str&lt;/code&gt;の基数を表す。デフォルトでは&lt;code&gt;10&lt;/code&gt;進数として文字列を整数に変換する。基数は&lt;code&gt;2&lt;/code&gt;から&lt;code&gt;36&lt;/code&gt;(&lt;code&gt;36&lt;/code&gt;含む)進数を指定できる。基数を&lt;code&gt;0&lt;/code&gt;とした場合は、文字列のプレフィックスから基数が自動的に選択される。自動的な選択のルールは、以下のようになる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先頭が&lt;code&gt;0&lt;/code&gt;：&lt;code&gt;8&lt;/code&gt;進数&lt;/li&gt;
&lt;li&gt;先頭が&lt;code&gt;0x&lt;/code&gt;もしくは&lt;code&gt;0X&lt;/code&gt;：&lt;code&gt;16&lt;/code&gt;進数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;変換して得られた数値が返される。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;数値への変換が行われなかった場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;&lt;code&gt;std::invalid_argument&lt;/code&gt;&lt;/a&gt;が送出される。&lt;/li&gt;
&lt;li&gt;以下の条件に合致した場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;&lt;code&gt;std::out_of_range&lt;/code&gt;&lt;/a&gt;が送出される。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::strtol()&lt;/code&gt;関数が&lt;code&gt;std::errno&lt;/code&gt;変数に&lt;code&gt;ERANGE&lt;/code&gt;を設定した場合 (C++14)&lt;/li&gt;
&lt;li&gt;結果が範囲外の値になった場合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;h3&gt;errnoの扱い&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Visual C++ 11やGCC (libstdc++) 4.8.2では、この関数を呼び出すと&lt;code&gt;errno&lt;/code&gt;の値が変更される。&lt;/li&gt;
&lt;li&gt;Clang (libc++) 3.3では、この関数の呼び出し前後で&lt;code&gt;errno&lt;/code&gt;の値は変化しない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;グローバルロケールの影響&lt;/h3&gt;
&lt;p&gt;この関数は、&lt;code&gt;setlocale()&lt;/code&gt;関数により挙動が変化する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;strtol()&lt;/code&gt;関数での文字列先頭の空白を読み飛ばす処理に、&lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt;の&lt;code&gt;isspace()&lt;/code&gt;関数が使用されるためである。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 十進法での変換&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- base = 10&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stol(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;10&#34;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::stol(&#34;10&#34;, nullptr, 10);&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; aw &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stol(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;11&#34;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::stol(L&#34;11&#34;, nullptr, 10);&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; aw &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 八進法での変換&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- base = 8&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stol(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;10&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; bw &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stol(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;10&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bw &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 十六進法での変換&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- base = 16&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stol(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;10&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;16&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; cw &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stol(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;11&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;16&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; cw &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 十六進法での変換（プレフィックス付き）&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; d &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stol(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0x20&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;16&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; d &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; dw &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stol(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;0x21&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;16&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; dw &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// base = 0による十進法・八進法・十六進法の自動判別&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- base = 0&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stol(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stol(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stol(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0x100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stol(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stol(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;0100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stol(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;0x100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 2番目の仮引数の使用例&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- use of idx parameter&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string es &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;30%&#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; ei;
  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; e &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stol(es, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;ei);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; e &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; es[ei] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;wstring ews &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;31%&#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; ewi;
  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; ew &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stol(ews, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;ewi);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ew &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ewi &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字列先頭に空白がある場合&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- space character before number&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stol(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;    -1&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stol(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;    -2&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;---- base = 10
10
11
---- base = 8
8
9
---- base = 16
16
17
32
33
---- base = 0
100
64
256
100
64
256
---- use of idx parameter
30 %
31 index: 2
---- space character before number
-1
-2
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;stol&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr, &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; base &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; str.c_str();
  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; end;
  errno &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; strtol(p, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;end, base);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; end) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; invalid_argument(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stol&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (errno &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; ERANGE) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; out_of_range(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stol&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (idx &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; nullptr) {
    &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(end &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; p);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x;
}

&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;stol&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; wstring&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr, &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; base &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; str.c_str();
  &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; end;
  errno &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; wcstol(p, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;end, base);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; end) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; invalid_argument(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stol&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (errno &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; ERANGE) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; out_of_range(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stol&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (idx &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; nullptr) {
    &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(end &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; p);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 10.0, 11.0, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2408.html&#34; target=&#34;_blank&#34;&gt;N2408 Simple Numeric Access Revision 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2009&#34; target=&#34;_blank&#34;&gt;LWG Issue 2009. Reporting out-of-bound values on numeric string conversions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C標準ライブラリに由来する関数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;atol&lt;/code&gt;: &lt;code&gt;stol&lt;/code&gt;は&lt;code&gt;atol&lt;/code&gt;を&lt;code&gt;std::string&lt;/code&gt;および&lt;code&gt;std::wsting&lt;/code&gt;に対応させたものと見なせる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strtol&lt;/code&gt;, &lt;code&gt;wcstol&lt;/code&gt;: &lt;code&gt;stol&lt;/code&gt;は&lt;code&gt;strtol&lt;/code&gt;および&lt;code&gt;wcstol&lt;/code&gt;をそれぞれ&lt;code&gt;std::string&lt;/code&gt;と&lt;code&gt;std::wsting&lt;/code&gt;に対応させたものと見なせる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ファミリー&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoi.html&#34;&gt;&lt;code&gt;stoi&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;int&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;(&lt;code&gt;stol&lt;/code&gt;: この関数自身)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoll.html&#34;&gt;&lt;code&gt;stoll&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;long long&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoul.html&#34;&gt;&lt;code&gt;stoul&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;unsigned long&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoull.html&#34;&gt;&lt;code&gt;stoull&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;unsigned long long&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stof.html&#34;&gt;&lt;code&gt;stof&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;float&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stod.html&#34;&gt;&lt;code&gt;stod&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;double&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stold.html&#34;&gt;&lt;code&gt;stold&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;long double&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stold (C++11) -- 文字列と数値間の変換機能の経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/string/stold.html"/>
      <id>6c76d0520f8f7336a3dbe02be899b4dbd62a87b6:reference/string/stold.md</id>
      <updated>2015-08-04 14:17:59 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;string&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;stold (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; stold(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;size_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr);
  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;stold&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; wstring&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;size_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;文字列&lt;code&gt;str&lt;/code&gt;を数値として読み取って、&lt;code&gt;long double&lt;/code&gt;型の値に変換する。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;パラメータ&lt;code&gt;str&lt;/code&gt;が&lt;code&gt;string&lt;/code&gt;型であれば&lt;code&gt;std::strtod(str.c_str(), &amp;amp;end)&lt;/code&gt;、&lt;code&gt;wstring&lt;/code&gt;型であれば&lt;code&gt;std::wcstold(str.c_str(), &amp;amp;end)&lt;/code&gt;を呼び出して、その戻り値を返す。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;idx&lt;/code&gt;が非&lt;code&gt;nullptr&lt;/code&gt;の場合、変換に使用されなかった要素のインデックス（&lt;code&gt;end - str.c_str()&lt;/code&gt;）が格納される。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;変換して得られた数値が返される。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;数値への変換が行われなかった場合、&lt;code&gt;std::invalid_argument&lt;/code&gt;が送出される。&lt;/li&gt;
&lt;li&gt;以下の条件に合致した場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;&lt;code&gt;std::out_of_range&lt;/code&gt;&lt;/a&gt;が送出される。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::strtoull()&lt;/code&gt;関数が&lt;code&gt;std::errno&lt;/code&gt;変数に&lt;code&gt;ERANGE&lt;/code&gt;を設定した場合&lt;/li&gt;
&lt;li&gt;結果が範囲外の値になった場合 (C++14)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;h3&gt;errnoの扱い&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Visual C++ 11やGCC (libstdc++) 4.8.2では、この関数を呼び出すと&lt;code&gt;errno&lt;/code&gt;の値が変更される。&lt;/li&gt;
&lt;li&gt;Clang (libc++) 3.3では、この関数の呼び出し前後で&lt;code&gt;errno&lt;/code&gt;の値は変化しない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;グローバルロケールの影響&lt;/h3&gt;
&lt;p&gt;この関数は、&lt;code&gt;setlocale()&lt;/code&gt;関数により挙動が変化する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;strtold()&lt;/code&gt;関数での文字列先頭の空白を読み飛ばす処理に、&lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt;の&lt;code&gt;isspace()&lt;/code&gt;関数が使用される。&lt;/li&gt;
&lt;li&gt;小数点記号は&lt;code&gt;LC_NUMERIC&lt;/code&gt;で指定されたものが使用される。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 十進法での変換&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- decimal point&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stold(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1.5&#34;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::stold(&#34;1.5&#34;, nullptr);&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; aw &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stold(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;1.&#34;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::stold(L&#34;1.&#34;, nullptr);&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; aw &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 指数表記の変換&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- base = 8&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stold(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0.5e3&#34;&lt;/span&gt;, nullptr);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; bw &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stold(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;.25e3&#34;&lt;/span&gt;, nullptr);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bw &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 十六進法での変換&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- base = 16&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stold(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0x1.2P3&#34;&lt;/span&gt;, nullptr);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; cw &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stold(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;0x1.2P4&#34;&lt;/span&gt;, nullptr);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; cw &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 2番目の仮引数の使用例&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- use of idx parameter&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string es &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;30.75%&#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; ei;
  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; e &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stold(es, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;ei);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; e &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; es[ei] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;wstring ews &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;32%&#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; ewi;
  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; ew &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stold(ews, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;ewi);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ew &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ewi &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字列先頭に空白がある場合&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- space character before number&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stold(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;    -1&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stold(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;    -.25&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1.5
1
500
250
---- base = 16
9
18
---- use of idx parameter
30.75 %
32 2
---- space character before number
-1
-0.25
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;stold&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; str.c_str();
  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; end;
  errno &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; strtold(p, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;end);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; end) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; invalid_argument(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stold&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (errno &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; ERANGE) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; out_of_range(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stold&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (idx &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; nullptr) {
    &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(end &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; p);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x;
}

&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;stold&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; wstring&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; str.c_str();
  &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; end;
  errno &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; wcstold(p, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;end);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; end) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; invalid_argument(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stold&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (errno &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; ERANGE) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; out_of_range(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stold&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (idx &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; nullptr) {
    &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(end &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; p);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 10.0, 11.0, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ただし、Visual C++ 10.0, 11.0は十六進法に対応していない（12.0は未確認）。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2408.html&#34; target=&#34;_blank&#34;&gt;N2408 Simple Numeric Access Revision 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2009&#34; target=&#34;_blank&#34;&gt;LWG Issue 2009. Reporting out-of-bound values on numeric string conversions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C標準ライブラリに由来する関数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;atof&lt;/code&gt;: &lt;code&gt;stold&lt;/code&gt;は&lt;code&gt;atof&lt;/code&gt;を&lt;code&gt;std::string&lt;/code&gt;および&lt;code&gt;std::wsting&lt;/code&gt;に対応させ、戻り値の型を&lt;code&gt;long double&lt;/code&gt;に変更したものと見なせる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strtold&lt;/code&gt;, &lt;code&gt;wcstold&lt;/code&gt;: &lt;code&gt;stold&lt;/code&gt;は&lt;code&gt;strtold&lt;/code&gt;および&lt;code&gt;wcstold&lt;/code&gt;をそれぞれ&lt;code&gt;std::string&lt;/code&gt;と&lt;code&gt;std::wsting&lt;/code&gt;に対応させたものと見なせる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ファミリー&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoi.html&#34;&gt;&lt;code&gt;stoi&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;int&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stol.html&#34;&gt;&lt;code&gt;stol&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;long&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoll.html&#34;&gt;&lt;code&gt;stoll&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;long long&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoul.html&#34;&gt;&lt;code&gt;stoul&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;unsigned long&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoull.html&#34;&gt;&lt;code&gt;stoull&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;unsigned long long&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stof.html&#34;&gt;&lt;code&gt;stof&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;float&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stod.html&#34;&gt;&lt;code&gt;stod&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;double&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;(&lt;code&gt;stold&lt;/code&gt;: この関数自身)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stoll (C++11) -- 文字列と数値間の変換機能の経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/string/stoll.html"/>
      <id>6c76d0520f8f7336a3dbe02be899b4dbd62a87b6:reference/string/stoll.md</id>
      <updated>2015-08-04 14:17:59 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;string&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;stoll (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; stoll(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;size_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr, &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; base &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);
  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;stoll&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; wstring&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;size_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr, &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; base &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;文字列&lt;code&gt;str&lt;/code&gt;を数値として読み取って、&lt;code&gt;long long&lt;/code&gt;型の値に変換する。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;パラメータ&lt;code&gt;str&lt;/code&gt;が&lt;code&gt;string&lt;/code&gt;型であれば&lt;code&gt;std::strtoll(str.c_str(), &amp;amp;end, base)&lt;/code&gt;、&lt;code&gt;wstring&lt;/code&gt;型であれば&lt;code&gt;std::wcstoll(str.c_str(), &amp;amp;end, base)&lt;/code&gt;を呼び出して、その戻り値を返す。&lt;/p&gt;
&lt;p&gt;パラメータ&lt;code&gt;idx&lt;/code&gt;が非&lt;code&gt;nullptr&lt;/code&gt;の場合、変換に使用されなかった要素のインデックス（&lt;code&gt;end - str.c_str()&lt;/code&gt;）が格納される。&lt;/p&gt;
&lt;p&gt;パラメータ&lt;code&gt;base&lt;/code&gt;は、整数文字列&lt;code&gt;str&lt;/code&gt;の基数を表す。デフォルトでは&lt;code&gt;10&lt;/code&gt;進数として文字列を整数に変換する。基数は&lt;code&gt;2&lt;/code&gt;から&lt;code&gt;36&lt;/code&gt;(&lt;code&gt;36&lt;/code&gt;含む)進数を指定できる。基数を&lt;code&gt;0&lt;/code&gt;とした場合は、文字列のプレフィックスから基数が自動的に選択される。自動的な選択のルールは、以下のようになる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先頭が&lt;code&gt;0&lt;/code&gt;：&lt;code&gt;8&lt;/code&gt;進数&lt;/li&gt;
&lt;li&gt;先頭が&lt;code&gt;0x&lt;/code&gt;もしくは&lt;code&gt;0X&lt;/code&gt;：&lt;code&gt;16&lt;/code&gt;進数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;変換して得られた数値が返される。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;数値への変換が行われなかった場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;&lt;code&gt;std::invalid_argument&lt;/code&gt;&lt;/a&gt;が送出される。&lt;/li&gt;
&lt;li&gt;以下の条件に合致した場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;&lt;code&gt;std::out_of_range&lt;/code&gt;&lt;/a&gt;が送出される。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::strtoll()&lt;/code&gt;関数が&lt;code&gt;std::errno&lt;/code&gt;変数に&lt;code&gt;ERANGE&lt;/code&gt;を設定した場合 (C++14)&lt;/li&gt;
&lt;li&gt;結果が範囲外の値になった場合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;h3&gt;errnoの扱い&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Visual C++ 11やGCC (libstdc++) 4.8.2では、この関数を呼び出すと&lt;code&gt;errno&lt;/code&gt;の値が変更される。&lt;/li&gt;
&lt;li&gt;Clang (libc++) 3.3では、この関数の呼び出し前後で&lt;code&gt;errno&lt;/code&gt;の値は変化しない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;グローバルロケールの影響&lt;/h3&gt;
&lt;p&gt;この関数は、&lt;code&gt;setlocale()&lt;/code&gt;関数により挙動が変化する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;strtol()&lt;/code&gt;関数での文字列先頭の空白を読み飛ばす処理に、&lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt;の&lt;code&gt;isspace()&lt;/code&gt;関数が使用されるためである。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 十進法での変換&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- base = 10&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoll(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;10&#34;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::stoll(&#34;10&#34;, nullptr, 10);&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; aw &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoll(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;11&#34;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::stoll(L&#34;11&#34;, nullptr, 10);&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; aw &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 八進法での変換&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- base = 8&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoll(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;10&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; bw &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoll(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;11&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bw &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 十六進法での変換&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- base = 16&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoll(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;10&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;16&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; cw &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoll(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;11&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;16&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; cw &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 十六進法での変換（プレフィックス付き）&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; d &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoll(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0x20&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;16&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; d &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; dw &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoll(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;0x21&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;16&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; dw &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// base = 0による十進法・八進法・十六進法の自動判別&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- base = 0&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoll(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoll(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoll(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0x100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoll(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoll(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;0100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoll(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;0x100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 2番目の仮引数の使用例&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- use of idx parameter&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string es &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;30%&#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; ei;
  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; e &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoll(es, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;ei);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; e &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; es[ei] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;wstring ews &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;31%&#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; ewi;
  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; ew &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoll(ews, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;ewi);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ew &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ewi &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字列先頭に空白がある場合&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- space character before number&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoll(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;    -1&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoll(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;    -2&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;---- base = 10
10
11
---- base = 8
8
9
---- base = 16
16
17
32
33
---- base = 0
100
64
256
100
64
256
---- use of idx parameter
30 %
31 index: 2
---- space character before number
-1
-2
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;stoll&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr, &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; base &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; str.c_str();
  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; end;
  errno &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; strtoll(p, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;end, base);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; end) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; invalid_argument(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stoll&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (errno &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; ERANGE) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; out_of_range(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stoll&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (idx &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; nullptr) {
    &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(end &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; p);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x;
}

&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;stoll&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; wstring&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr, &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; base &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; str.c_str();
  &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; end;
  errno &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; wcstoll(p, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;end, base);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; end) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; invalid_argument(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stoll&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (errno &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; ERANGE) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; out_of_range(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stoll&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (idx &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; nullptr) {
    &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(end &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; p);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 10.0, 11.0, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2408.html&#34; target=&#34;_blank&#34;&gt;N2408 Simple Numeric Access Revision 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2009&#34; target=&#34;_blank&#34;&gt;LWG Issue 2009. Reporting out-of-bound values on numeric string conversions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C標準ライブラリに由来する関数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;atoll&lt;/code&gt;: &lt;code&gt;stoll&lt;/code&gt;は&lt;code&gt;atoll&lt;/code&gt;を&lt;code&gt;std::string&lt;/code&gt;および&lt;code&gt;std::wsting&lt;/code&gt;に対応させたものと見なせる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strtoll&lt;/code&gt;, &lt;code&gt;wcstlol&lt;/code&gt;: &lt;code&gt;stoll&lt;/code&gt;は&lt;code&gt;strtoll&lt;/code&gt;および&lt;code&gt;wcstoll&lt;/code&gt;をそれぞれ&lt;code&gt;std::string&lt;/code&gt;と&lt;code&gt;std::wsting&lt;/code&gt;に対応させたものと見なせる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ファミリー&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoi.html&#34;&gt;&lt;code&gt;stoi&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;int&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stol.html&#34;&gt;&lt;code&gt;stol&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;long&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;(&lt;code&gt;stoll&lt;/code&gt;: この関数自身)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoul.html&#34;&gt;&lt;code&gt;stoul&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;unsigned long&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoull.html&#34;&gt;&lt;code&gt;stoull&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;unsigned long long&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stof.html&#34;&gt;&lt;code&gt;stof&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;float&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stod.html&#34;&gt;&lt;code&gt;stod&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;double&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stold.html&#34;&gt;&lt;code&gt;stold&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;long double&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stoul (C++11) -- 文字列と数値間の変換機能の経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/string/stoul.html"/>
      <id>6c76d0520f8f7336a3dbe02be899b4dbd62a87b6:reference/string/stoul.md</id>
      <updated>2015-08-04 14:17:59 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;string&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;stoul (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; stoul(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;size_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr, &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; base &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);
  &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;stoul&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; wstring&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;size_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr, &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; base &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;文字列&lt;code&gt;str&lt;/code&gt;を数値として読み取って、&lt;code&gt;unsigned long&lt;/code&gt;型の値に変換する。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;パラメータ&lt;code&gt;str&lt;/code&gt;が&lt;code&gt;string&lt;/code&gt;型であれば&lt;code&gt;std::strtoul(str.c_str(), &amp;amp;end, base)&lt;/code&gt;、&lt;code&gt;wstring&lt;/code&gt;型であれば&lt;code&gt;std::wcstoul(str.c_str(), &amp;amp;end, base)&lt;/code&gt;を呼び出して、その戻り値を返す。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;idx&lt;/code&gt;が非&lt;code&gt;nullptr&lt;/code&gt;の場合、変換に使用されなかった要素のインデックス（&lt;code&gt;end - str.c_str()&lt;/code&gt;）が格納される。&lt;/p&gt;
&lt;p&gt;パラメータ&lt;code&gt;base&lt;/code&gt;は、整数文字列&lt;code&gt;str&lt;/code&gt;の基数を表す。デフォルトでは&lt;code&gt;10&lt;/code&gt;進数として文字列を整数に変換する。基数は&lt;code&gt;2&lt;/code&gt;から&lt;code&gt;36&lt;/code&gt;(&lt;code&gt;36&lt;/code&gt;含む)進数を指定できる。基数を&lt;code&gt;0&lt;/code&gt;とした場合は、文字列のプレフィックスから基数が自動的に選択される。自動的な選択のルールは、以下のようになる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先頭が&lt;code&gt;0&lt;/code&gt;：&lt;code&gt;8&lt;/code&gt;進数&lt;/li&gt;
&lt;li&gt;先頭が&lt;code&gt;0x&lt;/code&gt;もしくは&lt;code&gt;0X&lt;/code&gt;：&lt;code&gt;16&lt;/code&gt;進数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;変換して得られた数値が返される。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;数値への変換が行われなかった場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;&lt;code&gt;std::invalid_argument&lt;/code&gt;&lt;/a&gt;が送出される。&lt;/li&gt;
&lt;li&gt;以下の条件に合致した場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;&lt;code&gt;std::out_of_range&lt;/code&gt;&lt;/a&gt;が送出される。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::strtoul()&lt;/code&gt;関数が&lt;code&gt;std::errno&lt;/code&gt;変数に&lt;code&gt;ERANGE&lt;/code&gt;を設定した場合 (C++14)&lt;/li&gt;
&lt;li&gt;結果が範囲外の値になった場合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;h3&gt;errnoの扱い&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Visual C++ 11やGCC (libstdc++) 4.8.2では、この関数を呼び出すと&lt;code&gt;errno&lt;/code&gt;の値が変更される。&lt;/li&gt;
&lt;li&gt;Clang (libc++) 3.3では、この関数の呼び出し前後で&lt;code&gt;errno&lt;/code&gt;の値は変化しない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;グローバルロケールの影響&lt;/h3&gt;
&lt;p&gt;この関数は、&lt;code&gt;setlocale()&lt;/code&gt;関数により挙動が変化する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;strtol()&lt;/code&gt;関数での文字列先頭の空白を読み飛ばす処理に、&lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt;の&lt;code&gt;isspace()&lt;/code&gt;関数が使用されるためである。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 十進法での変換&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- base = 10&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoul(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;10&#34;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::stoul(&#34;10&#34;, nullptr, 10);&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; aw &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoul(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;11&#34;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::stoul(L&#34;11&#34;, nullptr, 10);&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; aw &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 八進法での変換&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- base = 8&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoul(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;10&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; bw &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoul(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;10&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bw &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 十六進法での変換&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- base = 16&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoul(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;10&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;16&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; cw &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoul(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;11&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;16&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; cw &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 十六進法での変換（プレフィックス付き）&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; d &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoul(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0x20&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;16&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; d &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; dw &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoul(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;0x21&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;16&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; dw &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// base = 0による十進法・八進法・十六進法の自動判別&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- base = 0&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoul(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoul(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoul(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0x100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoul(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoul(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;0100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoul(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;0x100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 2番目の仮引数の使用例&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- use of idx parameter&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string es &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;30%&#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; ei;
  &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; e &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoul(es, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;ei);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; e &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; es[ei] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;wstring ews &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;31%&#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; ewi;
  &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; ew &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoul(ews, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;ewi);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ew &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ewi &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字列先頭に空白がある場合&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- space character before number&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoul(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;    1&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoul(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;    2&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;---- base = 10
10
11
---- base = 8
8
9
---- base = 16
16
17
---- base = 0
100
64
256
100
64
256
---- use of idx parameter
30 %
31 index: 2
---- space character before number
1
2
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;stoul&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr, &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; base &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; str.c_str();
  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; end;
  errno &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; strtoul(p, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;end, base);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; end) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; invalid_argument(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stoul&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (errno &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; ERANGE) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; out_of_range(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stoul&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (idx &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; nullptr) {
    &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(end &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; p);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x;
}

&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;stoul&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; wstring&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr, &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; base &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; str.c_str();
  &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; end;
  &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; wcstoul(p, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;end, base);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; end) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; invalid_argument(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stoul&#34;&lt;/span&gt;);
  }
  errno &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (errno &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; ERANGE) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; out_of_range(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stoul&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (idx &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; nullptr) {
    &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(end &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; p);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 10.0, 11.0, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2408.html&#34; target=&#34;_blank&#34;&gt;N2408 Simple Numeric Access Revision 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2009&#34; target=&#34;_blank&#34;&gt;LWG Issue 2009. Reporting out-of-bound values on numeric string conversions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C標準ライブラリに由来する関数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;atol&lt;/code&gt;: &lt;code&gt;stoul&lt;/code&gt;は&lt;code&gt;atol&lt;/code&gt;を&lt;code&gt;std::string&lt;/code&gt;および&lt;code&gt;std::wsting&lt;/code&gt;に対応させ、戻り値の型を&lt;code&gt;unsigned long&lt;/code&gt;に変更したものと見なせる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strtoul&lt;/code&gt;, &lt;code&gt;wcstoul&lt;/code&gt;: &lt;code&gt;stoul&lt;/code&gt;は&lt;code&gt;wcstoull&lt;/code&gt;および&lt;code&gt;wcstoul&lt;/code&gt;をそれぞれ&lt;code&gt;std::string&lt;/code&gt;と&lt;code&gt;std::wsting&lt;/code&gt;に対応させたものと見なせる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ファミリー&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoi.html&#34;&gt;&lt;code&gt;stoi&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;int&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stol.html&#34;&gt;&lt;code&gt;stol&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;long&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoll.html&#34;&gt;&lt;code&gt;stoll&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;long long&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;(&lt;code&gt;stoul&lt;/code&gt;: この関数自身)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoull.html&#34;&gt;&lt;code&gt;stoull&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;unsigned long long&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stof.html&#34;&gt;&lt;code&gt;stof&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;float&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stod.html&#34;&gt;&lt;code&gt;stod&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;double&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stold.html&#34;&gt;&lt;code&gt;stold&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;long double&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stoull (C++11) -- 文字列と数値間の変換機能の経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/string/stoull.html"/>
      <id>6c76d0520f8f7336a3dbe02be899b4dbd62a87b6:reference/string/stoull.md</id>
      <updated>2015-08-04 14:17:59 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;string&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;stoull (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; stoull(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;size_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr, &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; base &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);
  &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;stoull&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; wstring&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;a href=&#34;http://cpprefjp.github.io/reference/cstddef/size_t.html&#34;&gt;size_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr, &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; base &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;文字列&lt;code&gt;str&lt;/code&gt;を数値として読み取って、&lt;code&gt;unsigned long long&lt;/code&gt;型の値に変換する。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;パラメータ&lt;code&gt;str&lt;/code&gt;が&lt;code&gt;string&lt;/code&gt;型であれば&lt;code&gt;std::strtoull(str.c_str(), &amp;amp;end, base)&lt;/code&gt;、&lt;code&gt;wstring&lt;/code&gt;型であれば&lt;code&gt;std::wcstoull(str.c_str(), &amp;amp;end, base)&lt;/code&gt;を呼び出して、その戻り値を返す。&lt;/p&gt;
&lt;p&gt;パラメータ&lt;code&gt;idx&lt;/code&gt;が非&lt;code&gt;nullptr&lt;/code&gt;の場合、変換に使用されなかった要素のインデックス（&lt;code&gt;end - str.c_str()&lt;/code&gt;）が格納される。&lt;/p&gt;
&lt;p&gt;パラメータ&lt;code&gt;base&lt;/code&gt;は、整数文字列&lt;code&gt;str&lt;/code&gt;の基数を表す。デフォルトでは&lt;code&gt;10&lt;/code&gt;進数として文字列を整数に変換する。基数は&lt;code&gt;2&lt;/code&gt;から&lt;code&gt;36&lt;/code&gt;(&lt;code&gt;36&lt;/code&gt;含む)進数を指定できる。基数を&lt;code&gt;0&lt;/code&gt;とした場合は、文字列のプレフィックスから基数が自動的に選択される。自動的な選択のルールは、以下のようになる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先頭が&lt;code&gt;0&lt;/code&gt;：&lt;code&gt;8&lt;/code&gt;進数&lt;/li&gt;
&lt;li&gt;先頭が&lt;code&gt;0x&lt;/code&gt;もしくは&lt;code&gt;0X&lt;/code&gt;：&lt;code&gt;16&lt;/code&gt;進数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;変換して得られた数値が返される。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;数値への変換が行われなかった場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;&lt;code&gt;std::invalid_argument&lt;/code&gt;&lt;/a&gt;が送出される。&lt;/li&gt;
&lt;li&gt;以下の条件に合致した場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;&lt;code&gt;std::out_of_range&lt;/code&gt;&lt;/a&gt;が送出される。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::strtoull()&lt;/code&gt;関数が&lt;code&gt;std::errno&lt;/code&gt;変数に&lt;code&gt;ERANGE&lt;/code&gt;を設定した場合 (C++14)&lt;/li&gt;
&lt;li&gt;結果が範囲外の値になった場合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;h3&gt;errnoの扱い&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Visual C++ 11やGCC (libstdc++) 4.8.2では、この関数を呼び出すと&lt;code&gt;errno&lt;/code&gt;の値が変更される。&lt;/li&gt;
&lt;li&gt;Clang (libc++) 3.3では、この関数の呼び出し前後で&lt;code&gt;errno&lt;/code&gt;の値は変化しない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;グローバルロケールの影響&lt;/h3&gt;
&lt;p&gt;この関数は、&lt;code&gt;setlocale()&lt;/code&gt;関数により挙動が変化する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;strtoull()&lt;/code&gt;関数での文字列先頭の空白を読み飛ばす処理に、&lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt;の&lt;code&gt;isspace()&lt;/code&gt;関数が使用されるためである。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 十進法での変換&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- base = 10&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoull(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;10&#34;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::stoull(&#34;10&#34;, nullptr, 10);&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; aw &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoull(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;11&#34;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::stoull(L&#34;11&#34;, nullptr, 10);&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; aw &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 八進法での変換&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- base = 8&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoull(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;10&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; bw &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoull(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;11&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bw &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 十六進法での変換&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- base = 16&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoull(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;10&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;16&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; cw &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoull(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;11&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;16&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; cw &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 十六進法での変換（プレフィックス付き）&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; d &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoull(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0x20&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;16&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; d &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; dw &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoull(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;0x21&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;16&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; dw &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// base = 0による十進法・八進法・十六進法の自動判別&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- base = 0&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoull(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoull(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoull(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0x100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoull(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoull(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;0100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoull(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;0x100&#34;&lt;/span&gt;, nullptr, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 2番目の仮引数の使用例&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- use of idx parameter&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string es &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;30%&#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; ei;
  &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; e &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoull(es, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;ei);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; e &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; es[ei] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;wstring ews &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;31%&#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; ewi;
  &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; ew &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoull(ews, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;ewi);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ew &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ewi &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字列先頭に空白がある場合&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;---- space character before number&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoull(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;    1&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stoull(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;    2&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;---- base = 10
10
11
---- base = 8
8
9
---- base = 16
16
17
32
33
---- base = 0
100
64
256
100
64
256
---- use of idx parameter
30 %
31 index: 2
---- space character before number
1
2
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;stoull&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr, &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; base &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; str.c_str();
  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; end;
  errno &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; strtoull(p, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;end, base);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; end) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; invalid_argument(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stoull&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (errno &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; ERANGE) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; out_of_range(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stoull&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (idx &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; nullptr) {
    &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(end &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; p);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x;
}

&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;stoull&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; wstring&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; nullptr, &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; base &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; str.c_str();
  &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; end;
  errno &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; wcstoull(p, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;end, base);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; end) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; invalid_argument(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stoull&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (errno &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; ERANGE) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; out_of_range(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;stoull&#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (idx &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; nullptr) {
    &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;idx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(end &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; p);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 10.0, 11.0, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2408.html&#34; target=&#34;_blank&#34;&gt;N2408 Simple Numeric Access Revision 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2009&#34; target=&#34;_blank&#34;&gt;LWG Issue 2009. Reporting out-of-bound values on numeric string conversions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C標準ライブラリに由来する関数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;atoll&lt;/code&gt;: &lt;code&gt;stoull&lt;/code&gt;は&lt;code&gt;atoll&lt;/code&gt;を&lt;code&gt;std::string&lt;/code&gt;および&lt;code&gt;std::wsting&lt;/code&gt;に対応させ、戻り値の型を&lt;code&gt;unsigned long long&lt;/code&gt;に変更したものと見なせる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strtoll&lt;/code&gt;, &lt;code&gt;wcstoll&lt;/code&gt;: &lt;code&gt;stoull&lt;/code&gt;は&lt;code&gt;strtoll&lt;/code&gt;および&lt;code&gt;wcstoull&lt;/code&gt;をそれぞれ&lt;code&gt;std::string&lt;/code&gt;と&lt;code&gt;std::wsting&lt;/code&gt;に対応させたものと見なせる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ファミリー&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoi.html&#34;&gt;&lt;code&gt;stoi&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;int&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stol.html&#34;&gt;&lt;code&gt;stol&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;long&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoll.html&#34;&gt;&lt;code&gt;stoll&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;long long&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stoul.html&#34;&gt;&lt;code&gt;stoul&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;unsigned long&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;(&lt;code&gt;stoull&lt;/code&gt;: この関数自身)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stof.html&#34;&gt;&lt;code&gt;stof&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;float&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stod.html&#34;&gt;&lt;code&gt;stod&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;double&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/stold.html&#34;&gt;&lt;code&gt;stold&lt;/code&gt;&lt;/a&gt;: 戻り値の型が&lt;code&gt;long double&lt;/code&gt;となったもの。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_string (C++11) -- 文字列と数値間の変換機能の経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/string/to_string.html"/>
      <id>6c76d0520f8f7336a3dbe02be899b4dbd62a87b6:reference/string/to_string.md</id>
      <updated>2015-08-04 14:17:59 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;string&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;to_string (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  string to_string(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; val);
  string &lt;span style=&#34;color: #0000FF&#34;&gt;to_string&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; val);
  string &lt;span style=&#34;color: #0000FF&#34;&gt;to_string&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; val);
  string &lt;span style=&#34;color: #0000FF&#34;&gt;to_string&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; val);
  string &lt;span style=&#34;color: #0000FF&#34;&gt;to_string&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; val);
  string &lt;span style=&#34;color: #0000FF&#34;&gt;to_string&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; val);
  string &lt;span style=&#34;color: #0000FF&#34;&gt;to_string&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; val);
  string &lt;span style=&#34;color: #0000FF&#34;&gt;to_string&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; val);
  string &lt;span style=&#34;color: #0000FF&#34;&gt;to_string&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; val);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;数値&lt;code&gt;val&lt;/code&gt;を&lt;code&gt;string&lt;/code&gt;型文字列に変換する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;各数値型に対して、&lt;code&gt;sprintf(buf, fmt, val)&lt;/code&gt;によって生成された文字列の&lt;code&gt;string&lt;/code&gt;オブジェクトを返す。使用されるバッファサイズは未規定。&lt;/p&gt;
&lt;p&gt;各型で使用されるフォーマットは以下のようになる：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;フォーマット&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&#34;%d&#34;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unsigned int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&#34;%u&#34;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;long&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&#34;%ld&#34;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unsigned long&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&#34;%lu&#34;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;long long&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&#34;%lld&#34;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unsigned long long&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&#34;%llu&#34;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&#34;%f&#34;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;double&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&#34;%f&#34;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;long double&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&#34;%Lf&#34;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;to_string(&lt;span style=&#34;color: #666666&#34;&gt;123&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;to_string(&lt;span style=&#34;color: #666666&#34;&gt;3.14&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;123
3.140000
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;limits&amp;gt;&lt;/span&gt;

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string to_string(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; val)
{
  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; buffer[std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;digits10 &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;]; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &#39;-&#39; + NULL&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sprintf(buffer, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;%d&#34;&lt;/span&gt;, val);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; buffer;
}

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string to_string(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; val)
{
  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; buffer[std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;digits10 &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;];
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sprintf(buffer, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;%u&#34;&lt;/span&gt;, val);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; buffer;
}

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string to_string(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; val)
{
  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; buffer[std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;digits10 &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;]; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &#39;-&#39; + NULL&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sprintf(buffer, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;%ld&#34;&lt;/span&gt;, val);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; buffer;
}

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string to_string(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; val)
{
  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; buffer[std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;digits10 &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;];
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sprintf(buffer, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;%lu&#34;&lt;/span&gt;, val);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; buffer;
}

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string to_string(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; val)
{
  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; buffer[std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;digits10 &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;]; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &#39;-&#39; + NULL&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sprintf(buffer, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;%lld&#34;&lt;/span&gt;, val);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; buffer;
}

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string to_string(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; val)
{
  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; buffer[std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;digits10 &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;];
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sprintf(buffer, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;%llu&#34;&lt;/span&gt;, val);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; buffer;
}

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string to_string(&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; val)
{
  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; buff[std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;max_exponent10
          &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// fixed precision (printf&#39;s default)&lt;/span&gt;
          &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;]; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &#39;-&#39; + &#39;.&#39; + NULL&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sprintf(buff, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;%f&#34;&lt;/span&gt;, val);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; buff;
}

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string to_string(&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; val)
{
  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; buff[std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;max_exponent10
          &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// fixed precision (printf&#39;s default)&lt;/span&gt;
          &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;]; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &#39;-&#39; + &#39;.&#39; + NULL&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sprintf(buff, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;%f&#34;&lt;/span&gt;, val);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; buff;
}

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string to_string(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; val)
{
  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; buff[std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;max_exponent10
          &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// fixed precision (printf&#39;s default)&lt;/span&gt;
          &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;]; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &#39;-&#39; + &#39;.&#39; + NULL&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sprintf(buff, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;%Lf&#34;&lt;/span&gt;, val);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; buff;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.5.4&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;参照&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/to_wstring.html&#34;&gt;&lt;code&gt;to_wstring&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;数値を&lt;code&gt;wstring&lt;/code&gt;に変換する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2408.html&#34; target=&#34;_blank&#34;&gt;N2408 Simple Numeric Access Revision 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_wstring (C++11) -- 文字列と数値間の変換機能の経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/string/to_wstring.html"/>
      <id>6c76d0520f8f7336a3dbe02be899b4dbd62a87b6:reference/string/to_wstring.md</id>
      <updated>2015-08-04 14:17:59 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;string&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;to_wstring (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  string to_wstring(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; val);
  string &lt;span style=&#34;color: #0000FF&#34;&gt;to_wstring&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; val);
  string &lt;span style=&#34;color: #0000FF&#34;&gt;to_wstring&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; val);
  string &lt;span style=&#34;color: #0000FF&#34;&gt;to_wstring&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; val);
  string &lt;span style=&#34;color: #0000FF&#34;&gt;to_wstring&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; val);
  string &lt;span style=&#34;color: #0000FF&#34;&gt;to_wstring&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; val);
  string &lt;span style=&#34;color: #0000FF&#34;&gt;to_wstring&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; val);
  string &lt;span style=&#34;color: #0000FF&#34;&gt;to_wstring&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; val);
  string &lt;span style=&#34;color: #0000FF&#34;&gt;to_wstring&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; val);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;数値&lt;code&gt;val&lt;/code&gt;を&lt;code&gt;wstring&lt;/code&gt;型文字列に変換する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;各数値型に対して、&lt;code&gt;swprintf(buf, buffsize, fmt, val)&lt;/code&gt;によって生成された文字列の&lt;code&gt;wstring&lt;/code&gt;オブジェクトを返す。使用されるバッファサイズは未規定。&lt;/p&gt;
&lt;p&gt;各型で使用されるフォーマットは以下のようになる：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;フォーマット&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;L&#34;%d&#34;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unsigned int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;L&#34;%u&#34;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;long&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;L&#34;%ld&#34;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unsigned long&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;L&#34;%lu&#34;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;long long&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;L&#34;%lld&#34;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unsigned long long&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;L&#34;%llu&#34;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;L&#34;%f&#34;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;double&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;L&#34;%f&#34;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;long double&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;L&#34;%Lf&#34;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;wstring s1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;to_wstring(&lt;span style=&#34;color: #666666&#34;&gt;123&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;wcout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;wstring s2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;to_wstring(&lt;span style=&#34;color: #666666&#34;&gt;3.14&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;wcout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;123
3.140000
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;limits&amp;gt;&lt;/span&gt;

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;wstring to_wstring(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; val)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;digits10 &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &#39;-&#39; + NULL&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt; buffer[size];
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;swprintf(buffer, size, &lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;%d&#34;&lt;/span&gt;, val);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; buffer;
}

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;wstring to_wstring(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; val)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;digits10 &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt; buffer[size];
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;swprintf(buffer, size, &lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;%u&#34;&lt;/span&gt;, val);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; buffer;
}

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;wstring to_wstring(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; val)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;digits10 &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &#39;-&#39; + NULL&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt; buffer[size];
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;swprintf(buffer, size, &lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;%ld&#34;&lt;/span&gt;, val);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; buffer;
}

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;wstring to_wstring(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; val)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;digits10 &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt; buffer[size];
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;swprintf(buffer, size, &lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;%lu&#34;&lt;/span&gt;, val);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; buffer;
}

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;wstring to_wstring(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; val)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;digits10 &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &#39;-&#39; + NULL;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt; buffer[size];
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;swprintf(buffer, size, &lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;%lld&#34;&lt;/span&gt;, val);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; buffer;
}

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;wstring to_wstring(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; val)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;digits10 &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt; buffer[size];
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;swprintf(buffer, size, &lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;%llu&#34;&lt;/span&gt;, val);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; buffer;
}

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;wstring to_wstring(&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; val)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;max_exponent10
                           &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// fixed precision (printf&#39;s default)&lt;/span&gt;
                           &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &#39;-&#39; + &#39;.&#39; + NULL&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt; buff[size];
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;swprintf(buff, size, &lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;%f&#34;&lt;/span&gt;, val);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; buff;
}

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;wstring to_wstring(&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; val)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;max_exponent10
                           &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// fixed precision (printf&#39;s default)&lt;/span&gt;
                           &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &#39;-&#39; + &#39;.&#39; + NULL&lt;/span&gt;

  &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt; buff[size];
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;swprintf(buff, size, &lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;%f&#34;&lt;/span&gt;, val);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; buff;
}

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;wstring to_wstring(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; val)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;max_exponent10
                           &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// fixed precision (printf&#39;s default)&lt;/span&gt;
                           &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &#39;-&#39; + &#39;.&#39; + NULL&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt; buff[size];
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;swprintf(buff, size, &lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;%Lf&#34;&lt;/span&gt;, val);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; buff;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.5.4&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;参照&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/to_string.html&#34;&gt;&lt;code&gt;to_string&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;数値を&lt;code&gt;string&lt;/code&gt;に変換する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2408.html&#34; target=&#34;_blank&#34;&gt;N2408 Simple Numeric Access Revision 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-11-27T01:04:00.202929</updated>
  <id>d49c1e26-5fe0-4878-8112-d40b5edf9c3c</id>

  
    <entry>
      <title>all_of -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_all_of.html"/>
      <id>8099ba591bbd04604a600f293d37c576af5e3283:reference/algorithm/ranges_all_of.md</id>
      <updated>2021-11-27T09:58:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_all_of.md b/reference/algorithm/ranges_all_of.md
index 3ce539297..eb54bc7e4 100644
--- a/reference/algorithm/ranges_all_of.md
+++ b/reference/algorithm/ranges_all_of.md
@@ -13,12 +13,12 @@ namespace std::ranges {
   constexpr bool all_of(R&amp;amp;&amp;amp; r, Pred pred, Proj proj = {});           // (2)
 }
 ```
-- input_iterator[link /reference/iterator/input_iterator.md]
-- sentinel_for[link /reference/iterator/sentinel_for.md]
-- identity[link /reference/functional/identity.md]
-- indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
-- input_range[link /reference/ranges/input_range.md]
-- projected[link /reference/iterator/projected.md]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* identity[link /reference/functional/identity.md]
+* indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
+* input_range[link /reference/ranges/input_range.md]
+* projected[link /reference/iterator/projected.md]
 
 ## 概要
 範囲の全ての要素が条件を満たすかを判定する。
@@ -84,16 +84,16 @@ struct all_of_impl {
 
 inline constexpr all_of_impl all_of;
 ```
-- input_iterator[link /reference/iterator/input_iterator.md]
-- sentinel_for[link /reference/iterator/sentinel_for.md]
-- identity[link /reference/functional/identity.md]
-- indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
-- input_range[link /reference/ranges/input_range.md]
-- projected[link /reference/iterator/projected.md]
-- invoke[link /reference/functional/invoke.md]
-- begin[link /reference/ranges/begin.md]
-- end[link /reference/ranges/end.md]
-- ref[link /reference/functional/ref.md]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* identity[link /reference/functional/identity.md]
+* indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
+* input_range[link /reference/ranges/input_range.md]
+* projected[link /reference/iterator/projected.md]
+* invoke[link /reference/functional/invoke.md]
+* begin[link /reference/ranges/begin.md]
+* end[link /reference/ranges/end.md]
+* ref[link /reference/functional/ref.md]
 
 ## バージョン
 ### 言語
@@ -107,7 +107,7 @@ inline constexpr all_of_impl all_of;
 
 
 ## 関連項目
-- [`all_of`](/reference/algorithm/any_of.md)
+- [`all_of`](/reference/algorithm/all_of.md)
 - [`ranges::any_of`](/reference/algorithm/ranges_any_of.md)
 - [`ranges::none_of`](/reference/algorithm/ranges_none_of.md)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>any_of -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_any_of.html"/>
      <id>8099ba591bbd04604a600f293d37c576af5e3283:reference/algorithm/ranges_any_of.md</id>
      <updated>2021-11-27T09:58:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_any_of.md b/reference/algorithm/ranges_any_of.md
index 6ae6e813d..c7e8ebd83 100644
--- a/reference/algorithm/ranges_any_of.md
+++ b/reference/algorithm/ranges_any_of.md
@@ -13,12 +13,12 @@ namespace std::ranges {
   constexpr bool any_of(R&amp;amp;&amp;amp; r, Pred pred, Proj proj = {});           // (2)
 }
 ```
-- input_iterator[link /reference/iterator/input_iterator.md]
-- sentinel_for[link /reference/iterator/sentinel_for.md]
-- identity[link /reference/functional/identity.md]
-- indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
-- input_range[link /reference/ranges/input_range.md]
-- projected[link /reference/iterator/projected.md]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* identity[link /reference/functional/identity.md]
+* indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
+* input_range[link /reference/ranges/input_range.md]
+* projected[link /reference/iterator/projected.md]
 
 ## 概要
 範囲のいずれかの要素が条件を満たすかを判定する。
@@ -86,16 +86,16 @@ struct any_of_impl {
 
 inline constexpr any_of_impl any_of;
 ```
-- input_iterator[link /reference/iterator/input_iterator.md]
-- sentinel_for[link /reference/iterator/sentinel_for.md]
-- identity[link /reference/functional/identity.md]
-- indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
-- input_range[link /reference/ranges/input_range.md]
-- projected[link /reference/iterator/projected.md]
-- invoke[link /reference/functional/invoke.md]
-- begin[link /reference/ranges/begin.md]
-- end[link /reference/ranges/end.md]
-- ref[link /reference/functional/ref.md]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* identity[link /reference/functional/identity.md]
+* indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
+* input_range[link /reference/ranges/input_range.md]
+* projected[link /reference/iterator/projected.md]
+* invoke[link /reference/functional/invoke.md]
+* begin[link /reference/ranges/begin.md]
+* end[link /reference/ranges/end.md]
+* ref[link /reference/functional/ref.md]
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>none_of -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_none_of.html"/>
      <id>8099ba591bbd04604a600f293d37c576af5e3283:reference/algorithm/ranges_none_of.md</id>
      <updated>2021-11-27T09:58:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_none_of.md b/reference/algorithm/ranges_none_of.md
index 55417b2c7..63c4cd8e3 100644
--- a/reference/algorithm/ranges_none_of.md
+++ b/reference/algorithm/ranges_none_of.md
@@ -13,12 +13,12 @@ namespace std::ranges {
   constexpr bool none_of(R&amp;amp;&amp;amp; r, Pred pred, Proj proj = {});           // (2)
 }
 ```
-- input_iterator[link /reference/iterator/input_iterator.md]
-- sentinel_for[link /reference/iterator/sentinel_for.md]
-- identity[link /reference/functional/identity.md]
-- indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
-- input_range[link /reference/ranges/input_range.md]
-- projected[link /reference/iterator/projected.md]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* identity[link /reference/functional/identity.md]
+* indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
+* input_range[link /reference/ranges/input_range.md]
+* projected[link /reference/iterator/projected.md]
 
 ## 概要
 範囲の全ての要素が条件を満たさないかを判定する。
@@ -98,16 +98,16 @@ struct none_of_impl {
 
 inline constexpr none_of_impl none_of;
 ```
-- input_iterator[link /reference/iterator/input_iterator.md]
-- sentinel_for[link /reference/iterator/sentinel_for.md]
-- identity[link /reference/functional/identity.md]
-- indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
-- input_range[link /reference/ranges/input_range.md]
-- projected[link /reference/iterator/projected.md]
-- invoke[link /reference/functional/invoke.md]
-- begin[link /reference/ranges/begin.md]
-- end[link /reference/ranges/end.md]
-- ref[link /reference/functional/ref.md]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* identity[link /reference/functional/identity.md]
+* indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
+* input_range[link /reference/ranges/input_range.md]
+* projected[link /reference/iterator/projected.md]
+* invoke[link /reference/functional/invoke.md]
+* begin[link /reference/ranges/begin.md]
+* end[link /reference/ranges/end.md]
+* ref[link /reference/functional/ref.md]
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lazy_split_view -- lazy_split : ヘッダの追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/lazy_split_view.html"/>
      <id>07751c0825760ca0ff4782c998fe7a25c566701b:reference/ranges/lazy_split_view.md</id>
      <updated>2021-11-26T11:36:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/lazy_split_view.md b/reference/ranges/lazy_split_view.md
index 96a61d7ea..812cf2a9a 100644
--- a/reference/ranges/lazy_split_view.md
+++ b/reference/ranges/lazy_split_view.md
@@ -136,6 +136,7 @@ int main() {
 #include &amp;lt;ranges&amp;gt;
 #include &amp;lt;vector&amp;gt;
 #include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
 
 int main() {
   using namespace std;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lazy_split_view -- lazy_split_view : サンプルコードの修正と整理</title>
      <link href="https://cpprefjp.github.io/reference/ranges/lazy_split_view.html"/>
      <id>79eba48ebff0496a5079ad93c1c19c68d7bad616:reference/ranges/lazy_split_view.md</id>
      <updated>2021-11-26T11:34:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/lazy_split_view.md b/reference/ranges/lazy_split_view.md
index c4efa63ce..96a61d7ea 100644
--- a/reference/ranges/lazy_split_view.md
+++ b/reference/ranges/lazy_split_view.md
@@ -99,18 +99,20 @@ concept tiny-range = sized_range&amp;lt;R&amp;gt; &amp;amp;&amp;amp;
 | [`(deduction_guide)`](lazy_split_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
 
 ## 例
+
+### `range`による`range`の分割
+
 ```cpp example
 #include &amp;lt;ranges&amp;gt;
 #include &amp;lt;vector&amp;gt;
 #include &amp;lt;iostream&amp;gt;
-#include &amp;lt;sstream&amp;gt;
 
 int main() {
   using namespace std;
-  auto iss = istringstream{&amp;#34;1 2 3 4 5 6 7 8 9&amp;#34;};
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5, 6, 7, 8, 9};
   std::vector&amp;lt;int&amp;gt; pattern = {4, 5};
 
-  for (auto inner_range : views::istream_view&amp;lt;int&amp;gt;(iss) | views::lazy_split(views::all(pattern))) {
+  for (auto inner_range : v | views::lazy_split(pattern)) {
     for (int n : inner_range) {
       std::cout &amp;lt;&amp;lt; n;
     }
@@ -126,6 +128,37 @@ int main() {
 6789
 ```
 
+### `input_range`の分割
+
+この場合はデリミタは1要素でなければならず、`range`による分割はできない。
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using namespace std;
+  auto iss = istringstream{&amp;#34;1 2 3 1 4 5 6 1 7 8 1 9 1&amp;#34;};
+
+  for (auto inner_range : ranges::istream_view&amp;lt;int&amp;gt;(iss) | views::lazy_split(1)) {
+    for (int n : inner_range) {
+      std::cout &amp;lt;&amp;lt; n;
+    }
+    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  }
+}
+```
+* views::lazy_split[color ff0000]
+
+### 出力
+```
+23
+456
+78
+9
+```
+
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>algorithm -- リンク修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm.html"/>
      <id>2a965d04f1e0046cd475e446b77b331b7a6521c2:reference/algorithm.md</id>
      <updated>2021-11-26T02:03:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm.md b/reference/algorithm.md
index 13a8ea404..e245251e5 100644
--- a/reference/algorithm.md
+++ b/reference/algorithm.md
@@ -141,8 +141,8 @@ inline constexpr f_impl f; // f は変数名なのでADLで発見されない
 | [`ranges::find_if`](algorithm/ranges_find_if.md.nolink)             | 条件を満たす最初の要素を検索する                     | C++20 |
 | [`ranges::find_if_not`](algorithm/ranges_find_if_not.md.nolink)     | 条件を満たしていない最初の要素を検索する             | C++20 |
 | [`ranges::find_end`](algorithm/ranges_find_end.md.nolink)           | 指定された最後のサブシーケンスを検索する             | C++20 |
-| [`ranges::find_first_of`](algorithm/ra.nolinknges_find_first_of.md) | ある集合の1つとマッチする最初の要素を検索する        | C++20 |
-| [`ranges::adjacent_find`](algorithm/ra.nolinknges_adjacent_find.md) | 隣接する要素で条件を満たしている最初の要素を検索する | C++20 |
+| [`ranges::find_first_of`](algorithm/ra.nolinknges_find_first_of.md.nolink) | ある集合の1つとマッチする最初の要素を検索する        | C++20 |
+| [`ranges::adjacent_find`](algorithm/ra.nolinknges_adjacent_find.md.nolink) | 隣接する要素で条件を満たしている最初の要素を検索する | C++20 |
 | [`ranges::count`](algorithm/ranges_count.md.nolink)                 | 指定された値である要素の数を数える                   | C++20 |
 | [`ranges::count_if`](algorithm/ranges_count_if.md.nolink)           | 条件を満たしている要素の数を数える                   | C++20 |
 | [`ranges::mismatch`](algorithm/ranges_mismatch.md.nolink)           | 2つの範囲が一致していない場所を検索する              | C++20 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
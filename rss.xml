<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-06-05T14:40:07.827866</updated>
  <id>1365da8d-31c6-4927-8637-238e9d4661b5</id>

  
    <entry>
      <title>インライン変数 -- Merge pull request #975 from cpprefjp/inline-variables</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/inline_variables.html"/>
      <id>6809d28c7d5e094988cac60d9166391c3ce6af8f:lang/cpp17/inline_variables.md</id>
      <updated>2022-06-05T22:27:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/inline_variables.md b/lang/cpp17/inline_variables.md
index cd2f84cea..bb89382a8 100644
--- a/lang/cpp17/inline_variables.md
+++ b/lang/cpp17/inline_variables.md
@@ -3,7 +3,7 @@
 
 ## 概要
 
-外部リンケージを持つ変数に対しインライン`inline`を指定することで、複数の翻訳単位で同じ変数を宣言できるようになり、変数の実体はただ一つとすることができる。
+外部リンケージを持つ変数に対しインライン`inline`を指定することで、複数の翻訳単位で同じ変数を定義できるようになり、変数の実体はただ一つとすることができる。
 
 C++14までは関数のみインライン指定ができたが、C++17では関数、変数ともにインライン指定が可能になった。
 
@@ -34,29 +34,30 @@ int X::foo;
 
 ## 仕様
 
-`inline`は関数または変数の宣言、定義に対して指定できる。外部リンケージを持つ関数、変数がどこか一つの翻訳単位で`inline`指定された場合、全ての翻訳単位で`inline`指定されたことになる。`inline`指定された関数、変数は全ての翻訳単位で同じアドレスに配置される。
+`inline`は関数または変数の宣言、定義に対して指定できる。外部リンケージを持つ関数、変数がどこか一つの翻訳単位で`inline`指定された場合、同名の変数が宣言されている全ての翻訳単位で`inline`指定を行う必要がある。`inline`指定された関数、変数は全ての翻訳単位で同じアドレスに配置される。
 
-`inline`ではない変数宣言のあとに`inline`は宣言できず、文法違反となる。
+変数定義のあとに後付けで初めての`inline`指定を行うのは不適格である。
 
 ```cpp
 int a = 100;
 
-// コンパイルエラー
+// 不適格につきコンパイルエラー
 extern inline int a;
 ```
 
-`inline`指定した変数は全て同じ定義にすべきである。翻訳単位によって異なる型、初期値で変数を定義したり、`inline`指定を宣言した翻訳単位が出てくる前に別の翻訳単位で同じ変数の定義をしたりすると、プログラムは正常に動作しない。
+`inline`指定した同名の変数は全て同じ定義にすべきである。翻訳単位によって異なる型、初期値で変数を定義すると、プログラムは正常に動作しない可能性がある (不適格(例外付き診断不要))。
 
 ```cpp
 // b.cpp
-int hoge = 10;
+inline int hoge = 10;
 
 // a.cpp
 inline int hoge = 100;
 
 int main()
 {
-  // コンパイルエラーにならないかもしれないが、正常に動作しない
+  // 不適格(診断不要)
+  // コンパイルエラーにならないかもしれないが、正常に動作しない可能性がある
   return hoge;
 }
 ```
@@ -100,31 +101,50 @@ function-specifier:
 #include &amp;lt;iostream&amp;gt;
 
 namespace N {
-  // static指定(翻訳単位ごとにアドレスが変わる)
-  static inline int static_var = 10;
-  static inline int static_func(void) {
+
+  // 外部リンケージ &amp;amp; 非インライン
+  // →ODR違反により不適格
+  /*
+  int var = 0;
+  int func() {
+    return 0;
+  }
+  */
+
+  // 外部リンケージ &amp;amp; インライン(inline指定)
+  // →全翻訳単位でアドレスは同一
+  inline int inline_var = 10;
+  inline int inline_func() {
     return 20;
   }
 
-  // inline指定(全翻訳単位でアドレスは同一)
-  inline int inline_var = 30;
-  inline int inline_func(void) {
+  // 内部リンケージ(static指定) &amp;amp; 非インライン
+  // →翻訳単位毎に異なるアドレス
+  static int static_var = 30;
+  static int static_func() {
     return 40;
   }
 
-  // constexprだがinlineは指定されない
-  constexpr int constexpr_var = 50;
-  // 関数かつconstexprなので
-  // 暗黙のうちにinlineが指定される
-  constexpr int constexpr_func(void) {
+  // 内部リンケージ(static指定) &amp;amp; インライン(inline指定)
+  // →外部リンケージではないのでインライン指定はアドレスに影響しない。
+  //   static のみ指定したときと同様に、翻訳単位毎に異なるアドレスになる。
+  static inline int static_inline_var = 50;
+  static inline int static_inline_func() {
     return 60;
   }
+
+  // 外部リンケージ &amp;amp; 非インライン(constexpr変数は暗黙にinlineにはならない)
+  constexpr int constexpr_var = 70;
+  // 外部リンケージ &amp;amp; インライン(constexpr関数は暗黙にinlineとなる)
+  constexpr int constexpr_func() {
+    return 80;
+  }
 }
 
 struct A {
   // inline指定(全翻訳単位でアドレスは同一)
   static inline int inline_var = 100;
-  static inline int inline_func(void) {
+  static inline int inline_func() {
     return 200;
   }
 
@@ -133,12 +153,12 @@ struct A {
   static constexpr int constexpr_var = 300;
   // 関数かつconstexprなので
   // 暗黙のうちにinlineが指定される
-  static constexpr int constexpr_func(void) {
+  static constexpr int constexpr_func() {
     return 400;
   }
 };
 
-void func(void);
+void func();
 
 
 //inline_variable1.cpp
@@ -149,17 +169,19 @@ void func(void);
 int main()
 {
   std::cout &amp;lt;&amp;lt; __func__ &amp;lt;&amp;lt; std::endl
-    &amp;lt;&amp;lt; &amp;#34;  N::static_var    :&amp;#34; &amp;lt;&amp;lt; &amp;amp;N::static_var &amp;lt;&amp;lt; std::endl
-    &amp;lt;&amp;lt; &amp;#34;  N::static_func   :&amp;#34; &amp;lt;&amp;lt; reinterpret_cast&amp;lt;void *&amp;gt;(N::static_func) &amp;lt;&amp;lt; std::endl
-    &amp;lt;&amp;lt; &amp;#34;  N::inline_var    :&amp;#34; &amp;lt;&amp;lt; &amp;amp;N::inline_var &amp;lt;&amp;lt; std::endl
-    &amp;lt;&amp;lt; &amp;#34;  N::inline_func   :&amp;#34; &amp;lt;&amp;lt; reinterpret_cast&amp;lt;void *&amp;gt;(N::inline_func) &amp;lt;&amp;lt; std::endl
-    &amp;lt;&amp;lt; &amp;#34;  N::constexpr_var :&amp;#34; &amp;lt;&amp;lt; &amp;amp;N::constexpr_var &amp;lt;&amp;lt; std::endl
-    &amp;lt;&amp;lt; &amp;#34;  N::constexpr_func:&amp;#34; &amp;lt;&amp;lt; reinterpret_cast&amp;lt;void *&amp;gt;(N::constexpr_func) &amp;lt;&amp;lt; std::endl
+    &amp;lt;&amp;lt; &amp;#34;  N::inline_var        :&amp;#34; &amp;lt;&amp;lt; &amp;amp;N::inline_var &amp;lt;&amp;lt; std::endl
+    &amp;lt;&amp;lt; &amp;#34;  N::inline_func       :&amp;#34; &amp;lt;&amp;lt; reinterpret_cast&amp;lt;void *&amp;gt;(N::inline_func) &amp;lt;&amp;lt; std::endl
+    &amp;lt;&amp;lt; &amp;#34;  N::static_var        :&amp;#34; &amp;lt;&amp;lt; &amp;amp;N::static_var &amp;lt;&amp;lt; std::endl
+    &amp;lt;&amp;lt; &amp;#34;  N::static_func       :&amp;#34; &amp;lt;&amp;lt; reinterpret_cast&amp;lt;void *&amp;gt;(N::static_func) &amp;lt;&amp;lt; std::endl
+    &amp;lt;&amp;lt; &amp;#34;  N::static_inline_var :&amp;#34; &amp;lt;&amp;lt; &amp;amp;N::static_inline_var &amp;lt;&amp;lt; std::endl
+    &amp;lt;&amp;lt; &amp;#34;  N::static_inline_func:&amp;#34; &amp;lt;&amp;lt; reinterpret_cast&amp;lt;void *&amp;gt;(N::static_inline_func) &amp;lt;&amp;lt; std::endl
+    &amp;lt;&amp;lt; &amp;#34;  N::constexpr_var     :&amp;#34; &amp;lt;&amp;lt; &amp;amp;N::constexpr_var &amp;lt;&amp;lt; std::endl
+    &amp;lt;&amp;lt; &amp;#34;  N::constexpr_func    :&amp;#34; &amp;lt;&amp;lt; reinterpret_cast&amp;lt;void *&amp;gt;(N::constexpr_func) &amp;lt;&amp;lt; std::endl
     &amp;lt;&amp;lt; std::endl
-    &amp;lt;&amp;lt; &amp;#34;  A::inline_var    :&amp;#34; &amp;lt;&amp;lt; &amp;amp;A::inline_var &amp;lt;&amp;lt; std::endl
-    &amp;lt;&amp;lt; &amp;#34;  A::inline_func   :&amp;#34; &amp;lt;&amp;lt; reinterpret_cast&amp;lt;void *&amp;gt;(A::inline_func) &amp;lt;&amp;lt; std::endl
-    &amp;lt;&amp;lt; &amp;#34;  A::constexpr_var :&amp;#34; &amp;lt;&amp;lt; &amp;amp;A::constexpr_var &amp;lt;&amp;lt; std::endl
-    &amp;lt;&amp;lt; &amp;#34;  A::constexpr_func:&amp;#34; &amp;lt;&amp;lt; reinterpret_cast&amp;lt;void *&amp;gt;(A::constexpr_func) &amp;lt;&amp;lt; std::endl
+    &amp;lt;&amp;lt; &amp;#34;  A::inline_var        :&amp;#34; &amp;lt;&amp;lt; &amp;amp;A::inline_var &amp;lt;&amp;lt; std::endl
+    &amp;lt;&amp;lt; &amp;#34;  A::inline_func       :&amp;#34; &amp;lt;&amp;lt; reinterpret_cast&amp;lt;void *&amp;gt;(A::inline_func) &amp;lt;&amp;lt; std::endl
+    &amp;lt;&amp;lt; &amp;#34;  A::constexpr_var     :&amp;#34; &amp;lt;&amp;lt; &amp;amp;A::constexpr_var &amp;lt;&amp;lt; std::endl
+    &amp;lt;&amp;lt; &amp;#34;  A::constexpr_func    :&amp;#34; &amp;lt;&amp;lt; reinterpret_cast&amp;lt;void *&amp;gt;(A::constexpr_func) &amp;lt;&amp;lt; std::endl
     &amp;lt;&amp;lt; std::endl;
 
   func();
@@ -173,54 +195,61 @@ int main()
 #include &amp;lt;iostream&amp;gt;
 #include &amp;#34;inline_variable.hpp&amp;#34;
 
-void func(void)
+void func()
 {
   std::cout &amp;lt;&amp;lt; __func__ &amp;lt;&amp;lt; std::endl
-    &amp;lt;&amp;lt; &amp;#34;  N::static_var    :&amp;#34; &amp;lt;&amp;lt; &amp;amp;N::static_var &amp;lt;&amp;lt; std::endl
-    &amp;lt;&amp;lt; &amp;#34;  N::static_func   :&amp;#34; &amp;lt;&amp;lt; reinterpret_cast&amp;lt;void *&amp;gt;(N::static_func) &amp;lt;&amp;lt; std::endl
-    &amp;lt;&amp;lt; &amp;#34;  N::inline_var    :&amp;#34; &amp;lt;&amp;lt; &amp;amp;N::inline_var &amp;lt;&amp;lt; std::endl
-    &amp;lt;&amp;lt; &amp;#34;  N::inline_func   :&amp;#34; &amp;lt;&amp;lt; reinterpret_cast&amp;lt;void *&amp;gt;(N::inline_func) &amp;lt;&amp;lt; std::endl
-    &amp;lt;&amp;lt; &amp;#34;  N::constexpr_var :&amp;#34; &amp;lt;&amp;lt; &amp;amp;N::constexpr_var &amp;lt;&amp;lt; std::endl
-    &amp;lt;&amp;lt; &amp;#34;  N::constexpr_func:&amp;#34; &amp;lt;&amp;lt; reinterpret_cast&amp;lt;void *&amp;gt;(N::constexpr_func) &amp;lt;&amp;lt; std::endl
+    &amp;lt;&amp;lt; &amp;#34;  N::inline_var        :&amp;#34; &amp;lt;&amp;lt; &amp;amp;N::inline_var &amp;lt;&amp;lt; std::endl
+    &amp;lt;&amp;lt; &amp;#34;  N::inline_func       :&amp;#34; &amp;lt;&amp;lt; reinterpret_cast&amp;lt;void *&amp;gt;(N::inline_func) &amp;lt;&amp;lt; std::endl
+    &amp;lt;&amp;lt; &amp;#34;  N::static_var        :&amp;#34; &amp;lt;&amp;lt; &amp;amp;N::static_var &amp;lt;&amp;lt; std::endl
+    &amp;lt;&amp;lt; &amp;#34;  N::static_func       :&amp;#34; &amp;lt;&amp;lt; reinterpret_cast&amp;lt;void *&amp;gt;(N::static_func) &amp;lt;&amp;lt; std::endl
+    &amp;lt;&amp;lt; &amp;#34;  N::static_inline_var :&amp;#34; &amp;lt;&amp;lt; &amp;amp;N::static_inline_var &amp;lt;&amp;lt; std::endl
+    &amp;lt;&amp;lt; &amp;#34;  N::static_inline_func:&amp;#34; &amp;lt;&amp;lt; reinterpret_cast&amp;lt;void *&amp;gt;(N::static_inline_func) &amp;lt;&amp;lt; std::endl
+    &amp;lt;&amp;lt; &amp;#34;  N::constexpr_var     :&amp;#34; &amp;lt;&amp;lt; &amp;amp;N::constexpr_var &amp;lt;&amp;lt; std::endl
+    &amp;lt;&amp;lt; &amp;#34;  N::constexpr_func    :&amp;#34; &amp;lt;&amp;lt; reinterpret_cast&amp;lt;void *&amp;gt;(N::constexpr_func) &amp;lt;&amp;lt; std::endl
     &amp;lt;&amp;lt; std::endl
-    &amp;lt;&amp;lt; &amp;#34;  A::inline_var    :&amp;#34; &amp;lt;&amp;lt; &amp;amp;A::inline_var &amp;lt;&amp;lt; std::endl
-    &amp;lt;&amp;lt; &amp;#34;  A::inline_func   :&amp;#34; &amp;lt;&amp;lt; reinterpret_cast&amp;lt;void *&amp;gt;(A::inline_func) &amp;lt;&amp;lt; std::endl
-    &amp;lt;&amp;lt; &amp;#34;  A::constexpr_var :&amp;#34; &amp;lt;&amp;lt; &amp;amp;A::constexpr_var &amp;lt;&amp;lt; std::endl
-    &amp;lt;&amp;lt; &amp;#34;  A::constexpr_func:&amp;#34; &amp;lt;&amp;lt; reinterpret_cast&amp;lt;void *&amp;gt;(A::constexpr_func) &amp;lt;&amp;lt; std::endl
+    &amp;lt;&amp;lt; &amp;#34;  A::inline_var        :&amp;#34; &amp;lt;&amp;lt; &amp;amp;A::inline_var &amp;lt;&amp;lt; std::endl
+    &amp;lt;&amp;lt; &amp;#34;  A::inline_func       :&amp;#34; &amp;lt;&amp;lt; reinterpret_cast&amp;lt;void *&amp;gt;(A::inline_func) &amp;lt;&amp;lt; std::endl
+    &amp;lt;&amp;lt; &amp;#34;  A::constexpr_var     :&amp;#34; &amp;lt;&amp;lt; &amp;amp;A::constexpr_var &amp;lt;&amp;lt; std::endl
+    &amp;lt;&amp;lt; &amp;#34;  A::constexpr_func    :&amp;#34; &amp;lt;&amp;lt; reinterpret_cast&amp;lt;void *&amp;gt;(A::constexpr_func) &amp;lt;&amp;lt; std::endl
     &amp;lt;&amp;lt; std::endl;
 }
 ```
 
 ### 出力
 
-clang++ 5.0.0 にて amd64 向けにコンパイル、実行した場合。
+clang++ 14.0.0 (Fedora 14.0.0-1.fc36) にて amd64 向けにコンパイル、実行した場合。
 
 ```
 main
-  N::static_var    :0x602060
-  N::static_func   :0x400b30
-  N::inline_var    :0x602064
-  N::inline_func   :0x400b40
-  N::constexpr_var :0x400f6c
-  N::constexpr_func:0x400b50
-
-  A::inline_var    :0x602068
-  A::inline_func   :0x400b60
-  A::constexpr_var :0x400f70
-  A::constexpr_func:0x400b70
+  N::inline_var        :0x404054
+  N::inline_func       :0x401550
+  N::static_var        :0x404058
+  N::static_func       :0x401530
+  N::static_inline_var :0x40405c
+  N::static_inline_func:0x401540
+  N::constexpr_var     :0x402144
+  N::constexpr_func    :0x401560
+
+  A::inline_var        :0x404060
+  A::inline_func       :0x401570
+  A::constexpr_var     :0x402148
+  A::constexpr_func    :0x401580
 
 func
-  N::static_var    :0x60206c
-  N::static_func   :0x400e00
-  N::inline_var    :0x602064
-  N::inline_func   :0x400b40
-  N::constexpr_var :0x400f7c
-  N::constexpr_func:0x400b50
-
-  A::inline_var    :0x602068
-  A::inline_func   :0x400b60
-  A::constexpr_var :0x400f70
-  A::constexpr_func:0x400b70
+  N::inline_var        :0x404054
+  N::inline_func       :0x401550
+  N::static_var        :0x404064
+  N::static_func       :0x401870
+  N::static_inline_var :0x404068
+  N::static_inline_func:0x401880
+  N::constexpr_var     :0x402154
+  N::constexpr_func    :0x401560
+
+  A::inline_var        :0x404060
+  A::inline_func       :0x401570
+  A::constexpr_var     :0x402148
+  A::constexpr_func    :0x401580
+
 ```
 
 表示されるアドレスは環境によって異なる可能性がある。
@@ -229,4 +258,9 @@ func
 - [C++11 constexpr](/lang/cpp11/constexpr.md)
 
 ## 参照
-- [P0386R2 Inline Variables](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf)
+- [N4147 - Inline variables, or encapsulated expressions?](https://isocpp.org/files/papers/n4147.pdf), 2014-09-25
+- [N4424 - Inline Variables](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4424.pdf), 2015-04-07
+- [P0386R0 - Inline Variables](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r0.pdf), 2016-05-30
+- [P0386R2 - Inline Variables](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf), 2016-06-24
+- [P0607R0 - Inline Variables for the Standard Library](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0607r0.html), 2017-02-27
+- [C++1z インライン変数 - Faith and Brave - C++で遊ぼう](https://faithandbrave.hateblo.jp/entry/2016/11/11/172954)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コルーチン -- fix typo</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/coroutines.html"/>
      <id>1582fd48f049b49aa35c73ac35024b62489e2841:lang/cpp20/coroutines.md</id>
      <updated>2022-05-31T17:52:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/coroutines.md b/lang/cpp20/coroutines.md
index 84980fe30..e1a25d02f 100644
--- a/lang/cpp20/coroutines.md
+++ b/lang/cpp20/coroutines.md
@@ -289,7 +289,7 @@ Await式は、静的記憶域もしくは[スレッドローカル](/lang/cpp11/
 
 Await式の評価では、次のような補助的な型、式、オブジェクトを用いる：
 
-- _p_ を同Await式を含むコルーチンのPrimiseオブジェクトの左辺値名とし、`P`を同オブジェクトの型とする。
+- _p_ を同Await式を含むコルーチンのPromiseオブジェクトの左辺値名とし、`P`を同オブジェクトの型とする。
 - _a_ (Awaitable) を下記のように定義する：
     - Await式がYield式または初期サスペンドポイントまたは最終サスペンドポイントにより暗黙に生成された場合、_a_ をその _cast-expression_ とする。
     - `P`のスコープで非修飾な`await_transform`の探索により一つ以上の名前がみつかった場合は、 _a_ を _p_`.await_transform(` _cast-expression_ `)`とする。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr if 文 -- Channel 9のリンク切れしたページをWeb Archiveに差し替え</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/if_constexpr.html"/>
      <id>5838ae2761dcde3898311b319a5de4fe6befe4cb:lang/cpp17/if_constexpr.md</id>
      <updated>2022-05-30T15:43:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/if_constexpr.md b/lang/cpp17/if_constexpr.md
index 4d75b89f8..5e16dad3a 100644
--- a/lang/cpp17/if_constexpr.md
+++ b/lang/cpp17/if_constexpr.md
@@ -438,7 +438,7 @@ template &amp;lt;int arg, typename ... Args&amp;gt; int do_something(Args... args) {
 
 ### その他
 
-- [Static If I Had a Hammer - Andrei Alexandrescu](https://channel9.msdn.com/Events/GoingNative/GoingNative-2012/Static-If-I-Had-a-Hammer)
+- [Static If I Had a Hammer - Andrei Alexandrescu](http://web.archive.org/web/20201202042515/https://channel9.msdn.com/Events/GoingNative/GoingNative-2012/Static-If-I-Had-a-Hammer)
 - [C++1z if constexpr文 - Faith and Brave - C++で遊ぼう](https://faithandbrave.hateblo.jp/entry/2016/12/22/171238)
 - [[cfe-dev] Clang getting involved](https://lists.llvm.org/pipermail/cfe-dev/2014-March/035801.html)
 - [`__if_exists` Statement | Microsoft Docs](https://docs.microsoft.com/ja-jp/cpp/cpp/if-exists-statement)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>random_shuffle -- Channel 9のリンク切れしたページをWeb Archiveに差し替え</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/random_shuffle.html"/>
      <id>5838ae2761dcde3898311b319a5de4fe6befe4cb:reference/algorithm/random_shuffle.md</id>
      <updated>2022-05-30T15:43:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/random_shuffle.md b/reference/algorithm/random_shuffle.md
index 7bdb78f7d..df449d0d5 100644
--- a/reference/algorithm/random_shuffle.md
+++ b/reference/algorithm/random_shuffle.md
@@ -116,6 +116,6 @@ void random_shuffle(RandomAccessIterator first, RandomAccessIterator last, Rando
 
 
 ## 参照
-- [rand() Considered Harmful - Going Native 2013](https://channel9.msdn.com/Events/GoingNative/2013/rand-Considered-Harmful)
+- [rand() Considered Harmful - Going Native 2013](http://web.archive.org/web/20201123200831/https://channel9.msdn.com/Events/GoingNative/2013/rand-Considered-Harmful)
 - [N3924 Discouraging rand() in C++14, v2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3924.pdf)
 - [N4190 Removing `auto_ptr`, `random_shuffle()`, And Old `&amp;lt;functional&amp;gt;` Stuff](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4190.htm)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bad_function_call -- Merge pull request #976 from cpprefjp/bad_weak_ptr</title>
      <link href="https://cpprefjp.github.io/reference/functional/bad_function_call.html"/>
      <id>ef83be1e4bd37ec423acaea72384cc3220fd2576:reference/functional/bad_function_call.md</id>
      <updated>2022-05-30T14:59:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/bad_function_call.md b/reference/functional/bad_function_call.md
index cf67045f1..4f201b09e 100644
--- a/reference/functional/bad_function_call.md
+++ b/reference/functional/bad_function_call.md
@@ -47,7 +47,7 @@ bad function call
 
 ### 処理系
 - [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): 4.4, 4.7.2(what()が&amp;#34;std::bad_weak_ptr&amp;#34;を返すので規格違反。バグ報告済み: [#55847](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=55847)。4.7.3で修正されている。)
+- [GCC](/implementation.md#gcc): 4.4
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): 2010
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bad_weak_ptr -- Merge pull request #976 from cpprefjp/bad_weak_ptr</title>
      <link href="https://cpprefjp.github.io/reference/memory/bad_weak_ptr.html"/>
      <id>ef83be1e4bd37ec423acaea72384cc3220fd2576:reference/memory/bad_weak_ptr.md</id>
      <updated>2022-05-30T14:59:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/bad_weak_ptr.md b/reference/memory/bad_weak_ptr.md
index 615ec8359..7306c45cf 100644
--- a/reference/memory/bad_weak_ptr.md
+++ b/reference/memory/bad_weak_ptr.md
@@ -47,9 +47,9 @@ int main() {
 * sp.reset[link shared_ptr/reset.md]
 * std::exception[link /reference/exception/exception.md]
 
-### 出力(GCC 4.7での出力。規格上は&amp;#34;bad_weak_ptr&amp;#34;と出力されるのが正しい)
+### 出力
 ```
-std::bad_weak_ptr
+bad_weak_ptr
 ```
 
 ## バージョン
@@ -58,7 +58,7 @@ std::bad_weak_ptr
 
 ### 処理系
 - [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): 4.4, 4.7.2(`what()`が`&amp;#34;std::bad_weak_ptr&amp;#34;`を返すので規格違反。バグ報告済み。[#55847](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=55847))
+- [GCC](/implementation.md#gcc): 4.4, 4.7.2(what()が&amp;#34;std::bad_weak_ptr&amp;#34;を返すので規格違反。バグ報告済み: [#55847](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=55847)。4.7.3で修正されている。)
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): 2008 (TR1), 2010, 2012, 2013
     - 2010までは`what()`が`&amp;#34;tr1::bad_weak_ptr&amp;#34;`を返す。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>インライン変数 -- cpp17/inline_variables: C言語的無引数明示指定の削除</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/inline_variables.html"/>
      <id>b4e1a773cdb4296860d079d71500260f216fa1d6:lang/cpp17/inline_variables.md</id>
      <updated>2022-05-24T18:07:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/inline_variables.md b/lang/cpp17/inline_variables.md
index efdb669d6..bb89382a8 100644
--- a/lang/cpp17/inline_variables.md
+++ b/lang/cpp17/inline_variables.md
@@ -106,7 +106,7 @@ namespace N {
   // →ODR違反により不適格
   /*
   int var = 0;
-  int func(void) {
+  int func() {
     return 0;
   }
   */
@@ -114,14 +114,14 @@ namespace N {
   // 外部リンケージ &amp;amp; インライン(inline指定)
   // →全翻訳単位でアドレスは同一
   inline int inline_var = 10;
-  inline int inline_func(void) {
+  inline int inline_func() {
     return 20;
   }
 
   // 内部リンケージ(static指定) &amp;amp; 非インライン
   // →翻訳単位毎に異なるアドレス
   static int static_var = 30;
-  static int static_func(void) {
+  static int static_func() {
     return 40;
   }
 
@@ -129,14 +129,14 @@ namespace N {
   // →外部リンケージではないのでインライン指定はアドレスに影響しない。
   //   static のみ指定したときと同様に、翻訳単位毎に異なるアドレスになる。
   static inline int static_inline_var = 50;
-  static inline int static_inline_func(void) {
+  static inline int static_inline_func() {
     return 60;
   }
 
   // 外部リンケージ &amp;amp; 非インライン(constexpr変数は暗黙にinlineにはならない)
   constexpr int constexpr_var = 70;
   // 外部リンケージ &amp;amp; インライン(constexpr関数は暗黙にinlineとなる)
-  constexpr int constexpr_func(void) {
+  constexpr int constexpr_func() {
     return 80;
   }
 }
@@ -144,7 +144,7 @@ namespace N {
 struct A {
   // inline指定(全翻訳単位でアドレスは同一)
   static inline int inline_var = 100;
-  static inline int inline_func(void) {
+  static inline int inline_func() {
     return 200;
   }
 
@@ -153,12 +153,12 @@ struct A {
   static constexpr int constexpr_var = 300;
   // 関数かつconstexprなので
   // 暗黙のうちにinlineが指定される
-  static constexpr int constexpr_func(void) {
+  static constexpr int constexpr_func() {
     return 400;
   }
 };
 
-void func(void);
+void func();
 
 
 //inline_variable1.cpp
@@ -195,7 +195,7 @@ int main()
 #include &amp;lt;iostream&amp;gt;
 #include &amp;#34;inline_variable.hpp&amp;#34;
 
-void func(void)
+void func()
 {
   std::cout &amp;lt;&amp;lt; __func__ &amp;lt;&amp;lt; std::endl
     &amp;lt;&amp;lt; &amp;#34;  N::inline_var        :&amp;#34; &amp;lt;&amp;lt; &amp;amp;N::inline_var &amp;lt;&amp;lt; std::endl
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-09-07T11:11:25.129776</updated>
  <id>1096cbd0-3acb-41a0-829b-3de4cb2a1773</id>

  
    <entry>
      <title>インライン名前空間 -- chore(cpp11/inline_namespace): fix link</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/inline_namespaces.html"/>
      <id>e9494adce1d6bf7ca28af8353902247b285be765:lang/cpp11/inline_namespaces.md</id>
      <updated>2020-09-07T20:06:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/inline_namespaces.md b/lang/cpp11/inline_namespaces.md
index 08e2dd938..5a0fdee0e 100644
--- a/lang/cpp11/inline_namespaces.md
+++ b/lang/cpp11/inline_namespaces.md
@@ -238,7 +238,7 @@ v2
 - [N2013 Versioning with Namespaces](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2013.html)
 - [N2331 Namespace Association (&amp;#34;strong&amp;#34; using)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2331.html)
 - [N2535 Namespace Association (&amp;#34;inline namespace&amp;#34;)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2535.htm)
-- [7.9 Namespace Association - Using the GNU Compiler Collection (GCC)](https://gcc.gnu.org/onlinedocs/gcc/Namespace-Association.html#Namespace-Association)
+- [7.9 Namespace Association - Using the GNU Compiler Collection (GCC)](https://gcc.gnu.org/onlinedocs/gcc-4.9.4/gcc/Namespace-Association.html)
 - [CWG Issue 812. Duplicate names in inline namespaces](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#812)
 - [CWG Issue 861. Unintended ambiguity in inline namespace lookup](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#861)
 - [Inline namespaces and ambigous declarations - Stackoverflow](http://stackoverflow.com/questions/27252466/inline-namespaces-and-ambigous-declarations/)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>UTF-8エンコーディングされた文字の型として`char8_t`を追加 -- chore(cpp20/char8_t): fix link</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/char8_t.html"/>
      <id>bc6b75afc3d74ae37a92c9d949b31b2264418998:lang/cpp20/char8_t.md</id>
      <updated>2020-09-07T20:00:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/char8_t.md b/lang/cpp20/char8_t.md
index 781a7f315..cf44bc059 100644
--- a/lang/cpp20/char8_t.md
+++ b/lang/cpp20/char8_t.md
@@ -168,5 +168,5 @@ enum class char8_t : unsigned char {};
 
 ### その他
 
-- [Proposal for a C/C++ language extension to support portable UTF-16](http://www.unicode.org/%7Easmus/stdc-utf-16.txt)
+- [Proposal for a C/C++ language extension to support portable UTF-16](http://web.archive.org/web/20140701223639/http://www.unicode.org/~asmus/stdc-utf-16.txt)
 - [char8_tによせて - なるせにっき](https://naruse.hateblo.jp/entry/2018/12/24/013446)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr -- chore(cpp11/constexpr): fix link</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/constexpr.html"/>
      <id>b45e3d0e998d087d9ac8ad0537e2528368d0d2e9:lang/cpp11/constexpr.md</id>
      <updated>2020-09-07T19:51:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/constexpr.md b/lang/cpp11/constexpr.md
index 545fa4c44..8817c78d1 100644
--- a/lang/cpp11/constexpr.md
+++ b/lang/cpp11/constexpr.md
@@ -146,7 +146,7 @@ std::thread t2{job2};
 
 そんな状況のために、[`std::mutex`クラスのデフォルトコンストラクタ](/reference/mutex/mutex/op_constructor.md)には、`constexpr`修飾が行われている。そうすることで、その型の非ローカル変数を作ったときに、その変数は他の任意のスレッド開始よりも先に行われることが保証される。
 
-- [Constant Initialization - 雑貨&amp;#39;s tumblr](http://zakkas783.tumblr.com/post/25490513807/constant-initialization)
+- [雑貨&amp;#39;s tumblr - Constant Initialization](https://zakkas783-blog-blog.tumblr.com/post/25490513807/constant-initialization)
 - [`mutex`のconstexprコンストラクタ](http://d.hatena.ne.jp/yohhoy/20120621/p1)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>範囲for文 -- fix(cpp11/range-based for): remove dead link</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/range_based_for.html"/>
      <id>8fffa170f5133010ce26b0deb772e3a4d98aeb0b:lang/cpp11/range_based_for.md</id>
      <updated>2020-09-07T19:40:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/range_based_for.md b/lang/cpp11/range_based_for.md
index c22ac5b8f..29d52e3ca 100644
--- a/lang/cpp11/range_based_for.md
+++ b/lang/cpp11/range_based_for.md
@@ -296,5 +296,4 @@ int main()
 - [N2930 Range-Based For Loop Wording (Without Concepts)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2930.html)
 - [N3337 Working Draft, Standard for Programming Language C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf)
 - [一時オブジェクトの寿命と右辺値参照、ムーブセマンティクスのお話 - Qiita](https://qiita.com/rinse_/items/ad0cc7e351e836595c94)
-- [rforでバグる対処　※for( T aaa : vvv ) - Qiita](https://qiita.com/loppta/items/69a0ed56ff12d2c0261c)
 - [c++ - Safe to erase from map inside range based for? - Stack Overflow](https://stackoverflow.com/questions/25246937/safe-to-erase-from-map-inside-range-based-for)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>contiguous_iterator -- contiguous_iterator : typo修正とリンク追加</title>
      <link href="https://cpprefjp.github.io/reference/iterator/contiguous_iterator.html"/>
      <id>bdd7535c8047c7cd743e43cb8f53371bb60b4676:reference/iterator/contiguous_iterator.md</id>
      <updated>2020-09-07T16:41:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/contiguous_iterator.md b/reference/iterator/contiguous_iterator.md
index 217e2c8e0..d9c13dd71 100644
--- a/reference/iterator/contiguous_iterator.md
+++ b/reference/iterator/contiguous_iterator.md
@@ -37,7 +37,7 @@ namespace std {
 
 ## モデル
 
-`a, b`を間接参照可能なイテレータ、`c`を間接参照不可能なイテレータとし、`b`は`a`から、`c`は`b`からそれぞれ到達可能であるとする。そのような型`I`のイテレータ`a, b, c`と`iter_reference_t&amp;lt;I&amp;gt;`の示す型`D`について次の条件を満たす場合に限って、型`I`は`contiguous_iterator`のモデルである。
+`a, b`を間接参照可能なイテレータ、`c`を間接参照不可能なイテレータとし、`b`は`a`から、`c`は`b`からそれぞれ到達可能であるとする。そのような型`I`のイテレータ`a, b, c`と[`iter_difference_t&amp;lt;I&amp;gt;`](/reference/iterator/iter_difference_t.md)の示す型`D`について次の条件を満たす場合に限って、型`I`は`contiguous_iterator`のモデルである。
 
 - `to_address(a) == addressof(*a)`
 - `to_address(b) == to_address(a) + D(b - a)`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
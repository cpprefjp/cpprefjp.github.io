<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-12-13T14:39:32.209004</updated>
  <id>39167450-09db-4490-a199-cfb8f2f03a8d</id>

  
    <entry>
      <title>input_iterator -- input_iterator : ITER_CONCEPTの効果修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/input_iterator.html"/>
      <id>28ee2f89fd3b428ae29d13c8de4880a6ec3ee932:reference/iterator/input_iterator.md</id>
      <updated>2020-12-13T16:06:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/input_iterator.md b/reference/iterator/input_iterator.md
index afadea4d5..61a456fd1 100644
--- a/reference/iterator/input_iterator.md
+++ b/reference/iterator/input_iterator.md
@@ -27,11 +27,11 @@ namespace std {
 
 ## &amp;lt;a href=&amp;#34;#iter_concept&amp;#34; id=&amp;#34;iter_concept &amp;#34;&amp;gt;`ITER_CONCEPT`&amp;lt;/a&amp;gt;
 
-型`I`について、`std::iterator_traits&amp;lt;I&amp;gt;`がプライマリテンプレートの特殊化となる場合、`ITER_TRAITS(I)`を`I`とする。それ以外の場合、`ITER_TRAITS(I)`を`std::iterator_traits&amp;lt;I&amp;gt;`とする。
+型`I`について、`std::iterator_traits&amp;lt;I&amp;gt;`がプライマリテンプレートの特殊化となる場合、`ITER_TRAITS(I)`を`I`とする。それ以外の場合（`std::iterator_traits&amp;lt;I&amp;gt;`の特殊化が存在する場合）、`ITER_TRAITS(I)`を`std::iterator_traits&amp;lt;I&amp;gt;`とする。
 
 1. `ITER_TRAITS(I)::itertor_concept`が有効で型名を示す場合、`ITER_CONCEPT(I)`は`ITER_TRAITS(I)::itertor_concept`
 2. `ITER_TRAITS(I)::itertor_category`が有効で型名を示す場合、`ITER_CONCEPT(I)`は`ITER_TRAITS(I)::itertor_category`
-3. `std::iterator_traits&amp;lt;I&amp;gt;`がプライマリテンプレートの特殊化となる場合、`ITER_CONCEPT(I)`は`ITER_TRAITS(I)::random_access_iterator_tag`
+3. `std::iterator_traits&amp;lt;I&amp;gt;`がプライマリテンプレートの特殊化となる場合、`ITER_CONCEPT(I)`は`random_access_iterator_tag`
 4. 上記いずれにも当てはまらない場合、`ITER_CONCEPT(I)`は型名を示さない
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iterator_traits -- 表示調整</title>
      <link href="https://cpprefjp.github.io/reference/iterator/iterator_traits.html"/>
      <id>9c3f1ea053dcf0643a53c1ae3fa45d65d149eacf:reference/iterator/iterator_traits.md</id>
      <updated>2020-12-13T03:42:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/iterator_traits.md b/reference/iterator/iterator_traits.md
index 376746460..8f572bd64 100644
--- a/reference/iterator/iterator_traits.md
+++ b/reference/iterator/iterator_traits.md
@@ -93,6 +93,7 @@ namespace std {
   ```
 
     - この時、`I::pointer`も定義されているならば、`pointer`はそれを用いて定義される。
+
 - いずれかのメンバ型が定義されておらず、`I`が`cpp17-input-iterator`コンセプトを満たす場合、それぞれのメンバ型は次のように定義される
   ```cpp
   using difference_type   = typename incrementable_traits&amp;lt;I&amp;gt;::difference_type;
@@ -246,4 +247,4 @@ int main()
 ## 参照
 - [LWG 2952. `iterator_traits` should work for pointers to cv `T`](https://wg21.cmeerw.net/lwg/issue2952)
     - C++17から、`const T*`の部分特殊化が、`T*`の部分特殊化に統合され、`volatile`付きのポインタもこのクラスで扱えるようになった
-- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
\ No newline at end of file
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iterator_traits -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/iterator_traits.html"/>
      <id>2ed57ba6febb7a6c4e925452ca3f72a0899800bb:reference/iterator/iterator_traits.md</id>
      <updated>2020-12-13T03:33:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/iterator_traits.md b/reference/iterator/iterator_traits.md
index 7975f5010..376746460 100644
--- a/reference/iterator/iterator_traits.md
+++ b/reference/iterator/iterator_traits.md
@@ -101,7 +101,7 @@ namespace std {
   using reference         = /*see below*/;
   using iterator_category = /*see below*/;
   ```
-  * indirectly_readable_traits[link /reference/indirectly_readable_traits.md]
+  * indirectly_readable_traits[link /reference/iterator/indirectly_readable_traits]
   * incrementable_traits[link /reference/iterator/incrementable_traits.md]
   * iter_reference_t[link /reference/iterator/iter_reference_t.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>mona-@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>iterator_traits -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/iterator_traits.html"/>
      <id>2abc001e38a1321d434e7cdf530066d8f7d4e491:reference/iterator/iterator_traits.md</id>
      <updated>2020-12-13T03:29:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/iterator_traits.md b/reference/iterator/iterator_traits.md
index f38d87064..7975f5010 100644
--- a/reference/iterator/iterator_traits.md
+++ b/reference/iterator/iterator_traits.md
@@ -101,7 +101,7 @@ namespace std {
   using reference         = /*see below*/;
   using iterator_category = /*see below*/;
   ```
-  * indirectly_readable_traits[link /reference/iteratoindirectly_readable_traits.md]
+  * indirectly_readable_traits[link /reference/indirectly_readable_traits.md]
   * incrementable_traits[link /reference/iterator/incrementable_traits.md]
   * iter_reference_t[link /reference/iterator/iter_reference_t.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>mona-@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>iterator_traits -- iterator_traits : C++20対応 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/iterator_traits.html"/>
      <id>2fe289596f70df97cc5eb016d2ce606dc9567d52:reference/iterator/iterator_traits.md</id>
      <updated>2020-12-13T03:28:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/iterator_traits.md b/reference/iterator/iterator_traits.md
index dccd88d42..f38d87064 100644
--- a/reference/iterator/iterator_traits.md
+++ b/reference/iterator/iterator_traits.md
@@ -14,7 +14,19 @@ namespace std {
     using iterator_category = typename Iterator::iterator_category;
   };
 
-  // ポインタに対する特殊化
+  // ポインタに対する特殊化、C++20から
+  template&amp;lt;class T&amp;gt;
+    requires is_object_v&amp;lt;T&amp;gt;
+  struct iterator_traits&amp;lt;T*&amp;gt; {
+    using iterator_concept  = contiguous_iterator_tag;
+    using iterator_category = random_access_iterator_tag;
+    using value_type        = remove_cv_t&amp;lt;T&amp;gt;;
+    using difference_type   = ptrdiff_t;
+    using pointer           = T*;
+    using reference         = T&amp;amp;;
+  };
+
+  // ポインタに対する特殊化、C++17まで
   template &amp;lt;class T&amp;gt;
   struct iterator_traits&amp;lt;T*&amp;gt; {
     using difference_type   = ptrdiff_t;
@@ -40,6 +52,8 @@ namespace std {
 * ptrdiff_t[link /reference/cstddef/ptrdiff_t.md]
 * random_access_iterator_tag[link /reference/iterator/iterator_tag.md]
 * remove_cv_t[link /reference/type_traits/remove_cv.md]
+* is_object_v[link /reference/type_traits/is_object.md]
+* contiguous_iterator_tag[link /reference/iterator/iterator_tag.md]
 
 ## 概要
 `iterator_traits`は、イテレータに関する型情報を取得するためのクラスである。
@@ -55,6 +69,131 @@ namespace std {
 | `reference`         | イテレータが指している参照型 |
 | `iterator_category` | イテレータの分類を表す型(参照： [iterator tag](/reference/iterator/iterator_tag.md)) |
 
+## 定義
+
+任意のイテレータ型を`I`とする。
+
+### C++17
+
+- `iterator_traits&amp;lt;I&amp;gt;`の特殊化がある場合、それが使用される。
+- 特殊化されておらず、`I`が5つのメンバ型（`difference_type, value_type, pointer, reference, iterator_category`）を定義している場合、それを用いて上記にあるように定義される。
+- それ以外の場合、`iterator_traits&amp;lt;I&amp;gt;`は5つのメンバ型のいずれも定義しない。
+
+### C++20
+
+- `iterator_traits&amp;lt;I&amp;gt;`の特殊化がある場合、それが使用される。
+
+- 特殊化されておらず、`I`が4つのメンバ型（`difference_type, value_type, reference, iterator_category`）を定義している場合、それぞれのメンバ型は次のように定義される
+  ```cpp
+  using difference_type   = typename I::difference_type;
+  using value_type        = typename I::value_type;
+  using pointer           = void;
+  using reference         = typename I::reference;
+  using iterator_category = typename I::iterator_category;
+  ```
+
+    - この時、`I::pointer`も定義されているならば、`pointer`はそれを用いて定義される。
+- いずれかのメンバ型が定義されておらず、`I`が`cpp17-input-iterator`コンセプトを満たす場合、それぞれのメンバ型は次のように定義される
+  ```cpp
+  using difference_type   = typename incrementable_traits&amp;lt;I&amp;gt;::difference_type;
+  using value_type        = typename indirectly_readable_traits&amp;lt;I&amp;gt;::value_type;
+  using pointer           = /*see below*/;
+  using reference         = /*see below*/;
+  using iterator_category = /*see below*/;
+  ```
+  * indirectly_readable_traits[link /reference/iteratoindirectly_readable_traits.md]
+  * incrementable_traits[link /reference/iterator/incrementable_traits.md]
+  * iter_reference_t[link /reference/iterator/iter_reference_t.md]
+
+    - `pointer`は、上から順に次のいずれか
+      ```cpp
+      using pointer = I::pointer;
+      using pointer = decltype(declval&amp;lt;I&amp;amp;&amp;gt;().operator-&amp;gt;());
+      using pointer = void;
+      ```
+
+    - `reference`は、上から順に次のいずれか
+      ```cpp
+      using reference = typename I::reference;
+      using reference = iter_reference_t&amp;lt;I&amp;gt;;
+      ```
+
+    - `iterator_category`は、上から順に次のいずれか
+        - `I`が`cpp17-random-access-iterator`コンセプトを満たす場合、`random_access_iterator_tag`
+        - `I`が`cpp17-bidirectional-iterator`コンセプトを満たす場合、`bidirectional_iterator_tag`
+        - `I`が`cpp17-forward-iterator`コンセプトを満たす場合、`forward_iterator_tag`
+        - それ以外の場合、`input_iterator_tag`
+      
+
+- そうではなく、`I`が`cpp17-iterator`コンセプトを満たす場合、それぞれのメンバ型は次のように定義される
+  ```cpp
+  using difference_type   = typename incrementable_traits&amp;lt;I&amp;gt;::difference_type;
+  using value_type        = void;
+  using pointer           = void;
+  using reference         = void;
+  using iterator_category = output_iterator_tag;
+  ```
+
+    - この時、`incrementable_traits&amp;lt;I&amp;gt;::difference_type`が定義されない場合、`difference_type = void`
+
+- それ以外の場合、`iterator_traits&amp;lt;I&amp;gt;`は5つのメンバ型のいずれも定義しない。
+
+登場した`cpp17-input-iterator`等のコンセプトは全て次のように定義される説明専用のものである。
+
+```cpp
+template&amp;lt;class I&amp;gt;
+concept cpp17-iterator =
+  copyable&amp;lt;I&amp;gt; &amp;amp;&amp;amp; requires(I i) {
+    {   *i } -&amp;gt; can-reference;
+    {  ++i } -&amp;gt; same_as&amp;lt;I&amp;amp;&amp;gt;;
+    { *i++ } -&amp;gt; can-reference;
+  };
+
+template&amp;lt;class I&amp;gt;
+concept cpp17-input-iterator =
+  cpp17-iterator&amp;lt;I&amp;gt; &amp;amp;&amp;amp; equality_comparable&amp;lt;I&amp;gt; &amp;amp;&amp;amp; requires(I i) {
+    typename incrementable_traits&amp;lt;I&amp;gt;::difference_type;
+    typename indirectly_readable_traits&amp;lt;I&amp;gt;::value_type;
+    typename common_reference_t&amp;lt;iter_reference_t&amp;lt;I&amp;gt;&amp;amp;&amp;amp;,
+                                typename indirectly_readable_traits&amp;lt;I&amp;gt;::value_type&amp;amp;&amp;gt;;
+    typename common_reference_t&amp;lt;decltype(*i++)&amp;amp;&amp;amp;,
+                                typename indirectly_readable_traits&amp;lt;I&amp;gt;::value_type&amp;amp;&amp;gt;;
+    requires signed_integral&amp;lt;typename incrementable_traits&amp;lt;I&amp;gt;::difference_type&amp;gt;;
+  };
+
+template&amp;lt;class I&amp;gt;
+concept cpp17-forward-iterator =
+  cpp17-input-iterator&amp;lt;I&amp;gt; &amp;amp;&amp;amp; constructible_from&amp;lt;I&amp;gt; &amp;amp;&amp;amp;
+  is_lvalue_reference_v&amp;lt;iter_reference_t&amp;lt;I&amp;gt;&amp;gt; &amp;amp;&amp;amp;
+  same_as&amp;lt;remove_cvref_t&amp;lt;iter_reference_t&amp;lt;I&amp;gt;&amp;gt;,
+          typename indirectly_readable_traits&amp;lt;I&amp;gt;::value_type&amp;gt; &amp;amp;&amp;amp;
+  requires(I i) {
+    {  i++ } -&amp;gt; convertible_to&amp;lt;const I&amp;amp;&amp;gt;;
+    { *i++ } -&amp;gt; same_as&amp;lt;iter_reference_t&amp;lt;I&amp;gt;&amp;gt;;
+  };
+
+template&amp;lt;class I&amp;gt;
+concept cpp17-bidirectional-iterator =
+  cpp17-forward-iterator&amp;lt;I&amp;gt; &amp;amp;&amp;amp; requires(I i) {
+    {  --i } -&amp;gt; same_as&amp;lt;I&amp;amp;&amp;gt;;
+    {  i-- } -&amp;gt; convertible_to&amp;lt;const I&amp;amp;&amp;gt;;
+    { *i-- } -&amp;gt; same_as&amp;lt;iter_reference_t&amp;lt;I&amp;gt;&amp;gt;;
+  };
+
+template&amp;lt;class I&amp;gt;
+concept cpp17-random-access-iterator =
+  cpp17-bidirectional-iterator&amp;lt;I&amp;gt; &amp;amp;&amp;amp; totally_ordered&amp;lt;I&amp;gt; &amp;amp;&amp;amp;
+  requires(I i, typename incrementable_traits&amp;lt;I&amp;gt;::difference_type n) {
+    { i += n } -&amp;gt; same_as&amp;lt;I&amp;amp;&amp;gt;;
+    { i -= n } -&amp;gt; same_as&amp;lt;I&amp;amp;&amp;gt;;
+    { i +  n } -&amp;gt; same_as&amp;lt;I&amp;gt;;
+    { n +  i } -&amp;gt; same_as&amp;lt;I&amp;gt;;
+    { i -  n } -&amp;gt; same_as&amp;lt;I&amp;gt;;
+    { i -  i } -&amp;gt; same_as&amp;lt;decltype(n)&amp;gt;;
+    {  i[n]  } -&amp;gt; convertible_to&amp;lt;iter_reference_t&amp;lt;I&amp;gt;&amp;gt;;
+  };
+```
+
 
 ## 例
 ```cpp example
@@ -107,3 +246,4 @@ int main()
 ## 参照
 - [LWG 2952. `iterator_traits` should work for pointers to cv `T`](https://wg21.cmeerw.net/lwg/issue2952)
     - C++17から、`const T*`の部分特殊化が、`T*`の部分特殊化に統合され、`volatile`付きのポインタもこのクラスで扱えるようになった
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>mona-@live.jp</email>
      </author>
    </entry>
  
</feed>
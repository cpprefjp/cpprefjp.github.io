<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-05-29T04:59:24.301003</updated>
  <id>aa8fe2fd-596f-4ff7-bf14-095399a1b066</id>

  
    <entry>
      <title>empty_view -- empty_view : 継承しているメンバ関数として不足していたものを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/empty_view.html"/>
      <id>2c260022753de92e7967e9f890b48111645577a3:reference/ranges/empty_view.md</id>
      <updated>2025-05-29T13:55:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/empty_view.md b/reference/ranges/empty_view.md
index 77a31f852..00d8cc509 100644
--- a/reference/ranges/empty_view.md
+++ b/reference/ranges/empty_view.md
@@ -45,12 +45,14 @@ namespace std::ranges {
 
 ## 継承しているメンバ関数
 
-| 名前                                         | 説明                             | 対応バージョン |
-|----------------------------------------------|----------------------------------|----------------|
+| 名前                                         | 説明                              | 対応バージョン |
+|----------------------------------------------|-----------------------------------|----------------|
 | [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++20          |
-| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する       | C++20          |
-| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する       | C++20          |
-| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする               | C++20          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
+| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++20          |
+| [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する          | C++23          |
+| [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する  | C++23          |
 
 ## カスタマイゼーション
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty_view -- empty_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/empty_view.html"/>
      <id>2a23e4da72a0e01764cf681b2f45f7823955cc16:reference/ranges/empty_view.md</id>
      <updated>2025-05-29T13:50:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/empty_view.md b/reference/ranges/empty_view.md
index 6be4b3008..77a31f852 100644
--- a/reference/ranges/empty_view.md
+++ b/reference/ranges/empty_view.md
@@ -8,14 +8,7 @@
 namespace std::ranges {
   template&amp;lt;class T&amp;gt;
     requires is_object_v&amp;lt;T&amp;gt;
-  class empty_view : public view_interface&amp;lt;empty_view&amp;lt;T&amp;gt;&amp;gt; { // (1)
-  public:
-    static constexpr T* begin() noexcept { return nullptr; }
-    static constexpr T* end() noexcept { return nullptr; }
-    static constexpr T* data() noexcept { return nullptr; }
-    static constexpr size_t size() noexcept { return 0; }
-    static constexpr bool empty() noexcept { return true; }
-  };
+  class empty_view : public view_interface&amp;lt;empty_view&amp;lt;T&amp;gt;&amp;gt; { …… }; // (1)
 
   namespace views {
     template&amp;lt;class T&amp;gt;
@@ -42,13 +35,13 @@ namespace std::ranges {
 
 ## 静的メンバ関数
 
-| 名前                                             | 説明                             | 対応バージョン |
-|--------------------------------------------------|----------------------------------|----------------|
-| [`begin`](empty_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
-| [`end`](empty_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
-| [`data`](empty_view/data.md.nolink)                     | 配列の先頭へのポインタを取得する | C++20          |
-| [`size`](empty_view/size.md.nolink)                     | 要素数を取得する                 | C++20          |
-| [`empty`](empty_view/empty.md.nolink)                   | Rangeが空かどうかを判定する       | C++20          |
+| 名前                           | 説明                             | 対応バージョン |
+|--------------------------------|----------------------------------|----------------|
+| [`begin`](empty_view/begin.md) | 先頭を指すイテレータを取得する   | C++20          |
+| [`end`](empty_view/end.md)     | 番兵を取得する                   | C++20          |
+| [`data`](empty_view/data.md)   | 配列の先頭へのポインタを取得する | C++20          |
+| [`size`](empty_view/size.md)   | 要素数を取得する                 | C++20          |
+| [`empty`](empty_view/empty.md) | Rangeが空かどうかを判定する      | C++20          |
 
 ## 継承しているメンバ関数
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- empty_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/empty_view/begin.html"/>
      <id>2a23e4da72a0e01764cf681b2f45f7823955cc16:reference/ranges/empty_view/begin.md</id>
      <updated>2025-05-29T13:50:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/empty_view/begin.md b/reference/ranges/empty_view/begin.md
new file mode 100644
index 000000000..eb5f274f5
--- /dev/null
+++ b/reference/ranges/empty_view/begin.md
@@ -0,0 +1,30 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* empty_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+static constexpr T* begin() noexcept; // (1) C++20
+```
+
+## 概要
+`view`の先頭要素を指すイテレータを取得する。
+
+## 戻り値
+
+```cpp
+return nullptr;
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>data -- empty_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/empty_view/data.html"/>
      <id>2a23e4da72a0e01764cf681b2f45f7823955cc16:reference/ranges/empty_view/data.md</id>
      <updated>2025-05-29T13:50:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/empty_view/data.md b/reference/ranges/empty_view/data.md
new file mode 100644
index 000000000..7ad10bd5e
--- /dev/null
+++ b/reference/ranges/empty_view/data.md
@@ -0,0 +1,30 @@
+# data
+* ranges[meta header]
+* std::ranges[meta namespace]
+* empty_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+static constexpr T* data() noexcept; // (1) C++20
+```
+
+## 概要
+配列の先頭へのポインタを取得する。
+
+## 戻り値
+
+```cpp
+return nullptr;
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- empty_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/empty_view/empty.html"/>
      <id>2a23e4da72a0e01764cf681b2f45f7823955cc16:reference/ranges/empty_view/empty.md</id>
      <updated>2025-05-29T13:50:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/empty_view/empty.md b/reference/ranges/empty_view/empty.md
new file mode 100644
index 000000000..fed7a28f0
--- /dev/null
+++ b/reference/ranges/empty_view/empty.md
@@ -0,0 +1,30 @@
+# empty
+* ranges[meta header]
+* std::ranges[meta namespace]
+* empty_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+static constexpr bool empty() noexcept; // (1) C++20
+```
+
+## 概要
+Rangeが空かどうかを判定する。
+
+## 戻り値
+
+```cpp
+return true;
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- empty_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/empty_view/end.html"/>
      <id>2a23e4da72a0e01764cf681b2f45f7823955cc16:reference/ranges/empty_view/end.md</id>
      <updated>2025-05-29T13:50:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/empty_view/end.md b/reference/ranges/empty_view/end.md
new file mode 100644
index 000000000..6ac4b4399
--- /dev/null
+++ b/reference/ranges/empty_view/end.md
@@ -0,0 +1,31 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* empty_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+static constexpr T* end() noexcept; // (1) C++20
+```
+
+## 概要
+
+番兵を取得する。
+
+
+## 戻り値
+
+```cpp
+return nullptr;
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- empty_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/empty_view/size.html"/>
      <id>2a23e4da72a0e01764cf681b2f45f7823955cc16:reference/ranges/empty_view/size.md</id>
      <updated>2025-05-29T13:50:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/empty_view/size.md b/reference/ranges/empty_view/size.md
new file mode 100644
index 000000000..f8adf916f
--- /dev/null
+++ b/reference/ranges/empty_view/size.md
@@ -0,0 +1,30 @@
+# size
+* ranges[meta header]
+* std::ranges[meta namespace]
+* empty_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+static constexpr size_t size() noexcept; // (1) C++20
+```
+
+## 概要
+要素数を取得する。
+
+## 戻り値
+
+```cpp
+return 0;
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty_view -- empty_view : コード修飾を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/empty_view.html"/>
      <id>38de7a55bc4e93cf202c44323e6d6a27c69c07f3:reference/ranges/empty_view.md</id>
      <updated>2025-05-29T13:49:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/empty_view.md b/reference/ranges/empty_view.md
index 14304e371..6be4b3008 100644
--- a/reference/ranges/empty_view.md
+++ b/reference/ranges/empty_view.md
@@ -81,6 +81,7 @@ int main() {
 }
 ```
 * views::empty[color ff0000]
+* ranges::empty[link /reference/ranges/empty.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iterator -- filter_view::iterator : value_typeとdifference_typeの説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/iterator.html"/>
      <id>9e745c427376d39ee4129540c2b24bcad43bcfeb:reference/ranges/filter_view/iterator.md</id>
      <updated>2025-05-29T12:49:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/iterator.md b/reference/ranges/filter_view/iterator.md
index 94bb13889..46f7645b4 100644
--- a/reference/ranges/filter_view/iterator.md
+++ b/reference/ranges/filter_view/iterator.md
@@ -48,8 +48,8 @@ namespace std::ranges {
 |-----------------------------------------------------------|-----------------------------------------------------|----------------|
 | [`iterator_concept`](iterator/type-iterator_concept.md)   | イテレータコンセプト                                | C++20          |
 | [`iterator_category`](iterator/type-iterator_category.md) | イテレータカテゴリ                                  | C++20          |
-| `value_type`                                              | [`range_value_t&amp;lt;V&amp;gt;`](../range_value_t.md)           | C++20          |
-| `difference_type`                                         | [`range_difference_t&amp;lt;V&amp;gt;`](../range_difference_t.md) | C++20          |
+| `value_type`                                              | [イテレータの要素を表す型`range_value_t&amp;lt;V&amp;gt;`](../range_value_t.md)           | C++20          |
+| `difference_type`                                         | イテレータ間の差を表す型[`range_difference_t&amp;lt;V&amp;gt;`](../range_difference_t.md) | C++20          |
 
 ## 非メンバ（*Hidden friends*）関数
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iterator -- filter_view::iterator : iter_moveとiter_swapを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/iterator.html"/>
      <id>b8797410fdfb2cbf6149ea9c056a0a8464f6d81f:reference/ranges/filter_view/iterator.md</id>
      <updated>2025-05-29T12:43:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/iterator.md b/reference/ranges/filter_view/iterator.md
index 10cbc710f..94bb13889 100644
--- a/reference/ranges/filter_view/iterator.md
+++ b/reference/ranges/filter_view/iterator.md
@@ -55,8 +55,8 @@ namespace std::ranges {
 
 | 名前                                     | 説明                   | 対応バージョン |
 |------------------------------------------|------------------------|----------------|
-| [`iter_move`](iterator/iter_move.md.nolink)     | イテレータの要素の移動 | C++20          |
-| [`iter_swap`](iterator/iter_swap.md.nolink)     | イテレータの要素の交換 | C++20          |
+| [`iter_move`](iterator/iter_move.md)     | イテレータの要素の移動 | C++20          |
+| [`iter_swap`](iterator/iter_swap.md)     | イテレータの要素の交換 | C++20          |
 
 ### 比較演算子
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iter_move -- filter_view::iterator : iter_moveとiter_swapを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/iterator/iter_move.html"/>
      <id>b8797410fdfb2cbf6149ea9c056a0a8464f6d81f:reference/ranges/filter_view/iterator/iter_move.md</id>
      <updated>2025-05-29T12:43:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/iterator/iter_move.md b/reference/ranges/filter_view/iterator/iter_move.md
new file mode 100644
index 000000000..2d1c8883a
--- /dev/null
+++ b/reference/ranges/filter_view/iterator/iter_move.md
@@ -0,0 +1,65 @@
+# iter_move
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view::iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+friend constexpr range_rvalue_reference_t&amp;lt;V&amp;gt;
+  iter_move(const iterator&amp;amp; i)
+    noexcept(noexcept(ranges::iter_move(i.current_))); // (1) C++20
+```
+
+## 概要
+イテレータの要素を移動する。
+
+
+## 効果
+以下と等価：
+
+```cpp
+return ranges::iter_move(i.current_);
+```
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main() {
+  std::vector&amp;lt;std::string&amp;gt; v = {&amp;#34;apple&amp;#34;, &amp;#34;banana&amp;#34;, &amp;#34;cherry&amp;#34;, &amp;#34;date&amp;#34;};
+  auto is_long = [](const std::string&amp;amp; s) { return s.size() &amp;gt; 5; };
+
+  std::ranges::filter_view fv{v, is_long};
+  auto it = fv.begin();
+
+  // iter_moveで要素をムーブ
+  std::string s = iter_move(it);
+  std::cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; std::endl; // banana
+
+  // ムーブ後の元要素は空になる
+  std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; v[1].empty() &amp;lt;&amp;lt; std::endl; // true
+}
+```
+* iter_move[color ff0000]
+
+### 出力
+
+```
+banana
+true
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iter_swap -- filter_view::iterator : iter_moveとiter_swapを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/iterator/iter_swap.html"/>
      <id>b8797410fdfb2cbf6149ea9c056a0a8464f6d81f:reference/ranges/filter_view/iterator/iter_swap.md</id>
      <updated>2025-05-29T12:43:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/iterator/iter_swap.md b/reference/ranges/filter_view/iterator/iter_swap.md
new file mode 100644
index 000000000..a4d860bad
--- /dev/null
+++ b/reference/ranges/filter_view/iterator/iter_swap.md
@@ -0,0 +1,63 @@
+# iter_swap
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view::iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+friend constexpr void
+  iter_swap(const iterator&amp;amp; x, const iterator&amp;amp; y)
+    noexcept(noexcept(ranges::iter_swap(x.current_, y.current_)))
+    requires indirectly_swappable&amp;lt;iterator_t&amp;lt;V&amp;gt;&amp;gt;; // (1) C++20
+```
+
+## 概要
+イテレータの要素を交換する。
+
+
+## 効果
+以下と等価：
+
+```cpp
+return ranges::iter_swap(x.current_, y.current_);
+```
+
+
+## 例
+```cpp example
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5, 6};
+  auto is_even = [](int x) { return x % 2 == 0; };
+  std::ranges::filter_view fv{v, is_even};
+
+  auto it1 = fv.begin();            // v[1] を指す
+  auto it2 = std::next(fv.begin()); // v[3] を指す
+
+  std::cout &amp;lt;&amp;lt; v[1] &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; v[3] &amp;lt;&amp;lt; std::endl; // 2, 4
+  iter_swap(it1, it2);
+  std::cout &amp;lt;&amp;lt; v[1] &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; v[3] &amp;lt;&amp;lt; std::endl; // 4, 2
+}
+```
+* iter_swap[color ff0000]
+
+### 出力
+
+```
+2, 4
+4, 2
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
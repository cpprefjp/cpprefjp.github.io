<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++ Reference Site</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2014-12-09T19:06:06.793126</updated>
  <id>092ca10e-e44a-45a7-b7f9-c2b3444891e7</id>

  
    <entry>
      <title>basic_regex (C++11) -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site
</title>
      <link href="http://cpprefjp.github.io/reference/regex/basic_regex.html"/>
      <id>d8d10c65cfd4ae3318502c46292ddd863c0e9f2e:reference/regex/basic_regex.md</id>
      <updated>2014-12-09 19:05:55 +0900
</updated>
      
        <content type="html">&lt;h1&gt;basic_regex (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;charT&lt;/span&gt;,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;traits&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;basic_regex&lt;/span&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; basic_regex&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;    regex;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; basic_regex&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; wregex;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;basic_regex&lt;/code&gt;クラステンプレートは、&lt;code&gt;charT&lt;/code&gt;型の文字列から構築する正規表現を表す。
&lt;code&gt;charT&lt;/code&gt;は、&lt;code&gt;char&lt;/code&gt;型、&lt;code&gt;wchar_t&lt;/code&gt;型のような文字型である。
&lt;code&gt;traits&lt;/code&gt;は正規表現の文字・変換に関する特性である。
利便性のために、&lt;code&gt;charT&lt;/code&gt;を&lt;code&gt;char&lt;/code&gt;特殊化した&lt;code&gt;regex&lt;/code&gt;と、&lt;code&gt;charT&lt;/code&gt;を&lt;code&gt;wchar_t&lt;/code&gt;特殊化した&lt;code&gt;wregex&lt;/code&gt;が用意されている。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;basic_regex&lt;/code&gt;オブジェクトの内部表現や、正規表現アルゴリズムが&lt;code&gt;basic_regex&lt;/code&gt;オブジェクトの内部表現にどのようにアクセスするかは規定されない。
ユーザーはそれらを意識することなく、&lt;code&gt;basic_regex&lt;/code&gt;オブジェクトを正規表現アルゴリズムに渡すだけでよい。&lt;/p&gt;
&lt;p&gt;エラーは正規表現アルゴリズムが&lt;code&gt;regex_error&lt;/code&gt;型の例外投げることで通知される。&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;h3&gt;構築&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(destructor)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正規表現を代入する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;代入&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正規表現を代入する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;定数操作&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mark_count&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正規表現中のマークされた部分式の数を返す&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最後にセットされた正規表現フラグを返す&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ロケール&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;imbue&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケールを設定する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;getloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;現在のロケールを得る&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;交換&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正規表現オブジェクトを交換する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ定数&lt;/h2&gt;
&lt;p&gt;静的メンバ定数は利便性のために&lt;code&gt;std::regex_constants&lt;/code&gt;で定義される定数の同義語として提供される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;icase&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type icase      = regex_constants::icase;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;nosubs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type nosubs     = regex_constants::nosubs;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;optimize&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type optimize   = regex_constants::optimize;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;collate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type collate    = regex_constants::collate;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ECMAScript&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type ECMAScript = regex_constants::ECMAScript;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;basic&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type basic      = regex_constants::basic;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;extended&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type extended   = regex_constants::extended;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;awk&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type awk        = regex_constants::awk;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;grep&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type grep       = regex_constants::grep;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;egrep&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type egrep      = regex_constants::egrep;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;charT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;traits_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;traits&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;traits::string_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;flag_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;regex_constants::syntax_option_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;locale_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;traits::locale_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ関数&lt;/h2&gt;
&lt;h3&gt;交換&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;二つの正規表現オブジェクトを交換する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_regex (C++11) -- basic_regex : C++11マークの付け忘れを修正</title>
      <link href="http://cpprefjp.github.io/reference/regex/basic_regex.html"/>
      <id>9f1c582505d28474f5868d150b914d17695f5b16:reference/regex/basic_regex.md</id>
      <updated>2014-12-09 19:05:40 +0900</updated>
      
        <content type="html">&lt;h1&gt;basic_regex (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;charT&lt;/span&gt;,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;traits&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;basic_regex&lt;/span&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; basic_regex&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;    regex;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; basic_regex&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; wregex;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;basic_regex&lt;/code&gt;クラステンプレートは、&lt;code&gt;charT&lt;/code&gt;型の文字列から構築する正規表現を表す。
&lt;code&gt;charT&lt;/code&gt;は、&lt;code&gt;char&lt;/code&gt;型、&lt;code&gt;wchar_t&lt;/code&gt;型のような文字型である。
&lt;code&gt;traits&lt;/code&gt;は正規表現の文字・変換に関する特性である。
利便性のために、&lt;code&gt;charT&lt;/code&gt;を&lt;code&gt;char&lt;/code&gt;特殊化した&lt;code&gt;regex&lt;/code&gt;と、&lt;code&gt;charT&lt;/code&gt;を&lt;code&gt;wchar_t&lt;/code&gt;特殊化した&lt;code&gt;wregex&lt;/code&gt;が用意されている。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;basic_regex&lt;/code&gt;オブジェクトの内部表現や、正規表現アルゴリズムが&lt;code&gt;basic_regex&lt;/code&gt;オブジェクトの内部表現にどのようにアクセスするかは規定されない。
ユーザーはそれらを意識することなく、&lt;code&gt;basic_regex&lt;/code&gt;オブジェクトを正規表現アルゴリズムに渡すだけでよい。&lt;/p&gt;
&lt;p&gt;エラーは正規表現アルゴリズムが&lt;code&gt;regex_error&lt;/code&gt;型の例外投げることで通知される。&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;h3&gt;構築&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(destructor)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正規表現を代入する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;代入&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正規表現を代入する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;定数操作&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mark_count&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正規表現中のマークされた部分式の数を返す&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最後にセットされた正規表現フラグを返す&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ロケール&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;imbue&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケールを設定する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;getloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;現在のロケールを得る&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;交換&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正規表現オブジェクトを交換する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ定数&lt;/h2&gt;
&lt;p&gt;静的メンバ定数は利便性のために&lt;code&gt;std::regex_constants&lt;/code&gt;で定義される定数の同義語として提供される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;icase&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type icase      = regex_constants::icase;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;nosubs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type nosubs     = regex_constants::nosubs;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;optimize&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type optimize   = regex_constants::optimize;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;collate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type collate    = regex_constants::collate;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ECMAScript&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type ECMAScript = regex_constants::ECMAScript;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;basic&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type basic      = regex_constants::basic;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;extended&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type extended   = regex_constants::extended;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;awk&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type awk        = regex_constants::awk;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;grep&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type grep       = regex_constants::grep;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;egrep&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static constexpr regex_constants::syntax_option_type egrep      = regex_constants::egrep;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;charT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;traits_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;traits&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;traits::string_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;flag_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;regex_constants::syntax_option_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;locale_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;traits::locale_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ関数&lt;/h2&gt;
&lt;h3&gt;交換&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;二つの正規表現オブジェクトを交換する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator++ (C++11) -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site
</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_iterator/op_increment.html"/>
      <id>4ddffbe668df1a8a4487b5cd1a038d8dde19ac64:reference/regex/regex_iterator/op_increment.md</id>
      <updated>2014-12-09 02:55:57 +0900
</updated>
      
        <content type="html">&lt;h1&gt;operator++ (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;();   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) 前置形式&lt;/span&gt;

regex_iterator &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) 後置形式&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;イテレータを次のマッチに進める&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;シーケンスの終端を示すイテレータではない事。（シーケンス終端イテレータに対して呼び出した場合は未定義動作となる）&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) の形式（前置形式）は、以下のように振る舞う。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BidirectionalIterator&lt;/code&gt; 型のローカル変数 &lt;code&gt;start&lt;/code&gt; を構築し、値 &lt;code&gt;match[0].second&lt;/code&gt; で初期化する。&lt;/li&gt;
&lt;li&gt;イテレータが長さゼロのマッチの場合（&lt;code&gt;match[0].matched == true&lt;/code&gt; かつ &lt;code&gt;match[0].first == match[0].second&lt;/code&gt; の場合）で、かつ、&lt;code&gt;start == end&lt;/code&gt; の場合、&lt;code&gt;*this&lt;/code&gt; をシーケンス終端イテレータにして &lt;code&gt;*this&lt;/code&gt; を返す。&lt;/li&gt;
&lt;li&gt;そうではなくて、イテレータが長さゼロのマッチの場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(start, end, match, *pregex, flags | regex_constants::match_not_null | regex_constants::match_continuous)&lt;/code&gt; を呼び出す。&lt;br /&gt;
    もしマッチしたら（&lt;code&gt;true&lt;/code&gt; が返されたら）、&lt;code&gt;*this&lt;/code&gt; を返す。マッチしなかったら、&lt;code&gt;start&lt;/code&gt; をインクリメントし、イテレータが長さゼロのマッチで無いかのように、以下の処理を続ける。&lt;/li&gt;
&lt;li&gt;イテレータが長さゼロのマッチでない場合、&lt;code&gt;flags&lt;/code&gt; を &lt;code&gt;flags | regex_constants ::match_prev_avail&lt;/code&gt; に更新し、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(start, end, match, *pregex, flags)&lt;/code&gt; を呼び出す。&lt;br /&gt;
    もしマッチしなかったら、&lt;code&gt;*this&lt;/code&gt; をシーケンス終端イテレータにする。その後、&lt;code&gt;*this&lt;/code&gt; を返す。&lt;/li&gt;
&lt;li&gt;上記のうち、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; が &lt;code&gt;true&lt;/code&gt; を返した全てのケースでは、以下の補正が行われる。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match.prefix().first&lt;/code&gt; を直前の &lt;code&gt;match[0].second&lt;/code&gt; に設定する。&lt;/li&gt;
&lt;li&gt;半開区間 &lt;code&gt;[0, match.size())&lt;/code&gt; の全てのインデックス &lt;code&gt;i&lt;/code&gt; について、&lt;code&gt;match[i].matched&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; であれば、&lt;code&gt;match.position(i)&lt;/code&gt; が &lt;code&gt;distance(begin, match[i].first)&lt;/code&gt; を返すように設定する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) の形式（後置形式）は、以下のように振る舞う。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    regex_iterator tmp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;
    &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; tmp;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) &lt;code&gt;*this&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(2) インクリメントを行う前の &lt;code&gt;*this&lt;/code&gt; のコピー&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンバ変数 &lt;code&gt;begin&lt;/code&gt;、&lt;code&gt;end&lt;/code&gt;、&lt;code&gt;pregex&lt;/code&gt;、&lt;code&gt;flags&lt;/code&gt;、&lt;code&gt;match&lt;/code&gt; はあくまでも説明用のプライベートメンバ変数であるため、注意すること。&lt;/li&gt;
&lt;li&gt;「効果」にあるように、&lt;code&gt;match&lt;/code&gt; には検索後に補正が行われるため、&lt;code&gt;regex_iterator&lt;/code&gt; を間接参照した結果は、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; を順に呼び出した結果とは異なる。&lt;br /&gt;
    また、これらの補正が実装でどのように行われるかについては、規格では規定されていない。&lt;/li&gt;
&lt;li&gt;「効果」では &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; が呼ばれるものとして記載されているが、実際に &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; が呼ばれるかどうかについては、規格では規定されていない。&lt;br /&gt;
    したがって、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; にユーザ定義の特殊化バージョンを提供しても、呼ばれないかもしれない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;a*|b*|c*&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;aaabbbccc&#34;&lt;/span&gt;);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re), end &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator();
       it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; end; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;position = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;position() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, length = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;length() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, str = &#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;, prefix = &#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;prefix() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\&#39;&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;position = 0, length = 3, str = &#39;aaa&#39;, prefix = &#39;&#39;
position = 3, length = 0, str = &#39;&#39;, prefix = &#39;&#39;
position = 3, length = 3, str = &#39;bbb&#39;, prefix = &#39;&#39;
position = 6, length = 0, str = &#39;&#39;, prefix = &#39;&#39;
position = 6, length = 3, str = &#39;ccc&#39;, prefix = &#39;&#39;
position = 9, length = 0, str = &#39;&#39;, prefix = &#39;&#39;
&lt;/code&gt;&lt;/pre&gt;
注意：Clang &amp;amp; libc++ では正常に実行されない（終了しなくなってしまう）。また、GCC &amp;amp; libstdc++ の 4.9.1 までのバージョンでは、結果が正しくない。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;備考&lt;/h3&gt;
&lt;p&gt;Clang &amp;amp; libc++ と GCC &amp;amp; libstdc++ の 4.9.1 までのバージョンには、長さ 0 の文字列にマッチした時の挙動に問題があるため、注意が必要。
（特に、Clang は長さ 0 の文字列にマッチするとそこから先に進まなくなってしまう。例を参照）&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/regex_iterator.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_deref.html&#34;&gt;&lt;code&gt;operator*&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;間接参照&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_arrow.html&#34;&gt;&lt;code&gt;operator-&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバアクセス&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>operator++ (C++11) -- regex_iterator: operator++ の戻り値の記載を変更</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_iterator/op_increment.html"/>
      <id>00d91e0b1151d20ee206e927c9858f629289f686:reference/regex/regex_iterator/op_increment.md</id>
      <updated>2014-12-09 02:54:29 +0900</updated>
      
        <content type="html">&lt;h1&gt;operator++ (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;();   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) 前置形式&lt;/span&gt;

regex_iterator &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) 後置形式&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;イテレータを次のマッチに進める&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;シーケンスの終端を示すイテレータではない事。（シーケンス終端イテレータに対して呼び出した場合は未定義動作となる）&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) の形式（前置形式）は、以下のように振る舞う。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BidirectionalIterator&lt;/code&gt; 型のローカル変数 &lt;code&gt;start&lt;/code&gt; を構築し、値 &lt;code&gt;match[0].second&lt;/code&gt; で初期化する。&lt;/li&gt;
&lt;li&gt;イテレータが長さゼロのマッチの場合（&lt;code&gt;match[0].matched == true&lt;/code&gt; かつ &lt;code&gt;match[0].first == match[0].second&lt;/code&gt; の場合）で、かつ、&lt;code&gt;start == end&lt;/code&gt; の場合、&lt;code&gt;*this&lt;/code&gt; をシーケンス終端イテレータにして &lt;code&gt;*this&lt;/code&gt; を返す。&lt;/li&gt;
&lt;li&gt;そうではなくて、イテレータが長さゼロのマッチの場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(start, end, match, *pregex, flags | regex_constants::match_not_null | regex_constants::match_continuous)&lt;/code&gt; を呼び出す。&lt;br /&gt;
    もしマッチしたら（&lt;code&gt;true&lt;/code&gt; が返されたら）、&lt;code&gt;*this&lt;/code&gt; を返す。マッチしなかったら、&lt;code&gt;start&lt;/code&gt; をインクリメントし、イテレータが長さゼロのマッチで無いかのように、以下の処理を続ける。&lt;/li&gt;
&lt;li&gt;イテレータが長さゼロのマッチでない場合、&lt;code&gt;flags&lt;/code&gt; を &lt;code&gt;flags | regex_constants ::match_prev_avail&lt;/code&gt; に更新し、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(start, end, match, *pregex, flags)&lt;/code&gt; を呼び出す。&lt;br /&gt;
    もしマッチしなかったら、&lt;code&gt;*this&lt;/code&gt; をシーケンス終端イテレータにする。その後、&lt;code&gt;*this&lt;/code&gt; を返す。&lt;/li&gt;
&lt;li&gt;上記のうち、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; が &lt;code&gt;true&lt;/code&gt; を返した全てのケースでは、以下の補正が行われる。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match.prefix().first&lt;/code&gt; を直前の &lt;code&gt;match[0].second&lt;/code&gt; に設定する。&lt;/li&gt;
&lt;li&gt;半開区間 &lt;code&gt;[0, match.size())&lt;/code&gt; の全てのインデックス &lt;code&gt;i&lt;/code&gt; について、&lt;code&gt;match[i].matched&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; であれば、&lt;code&gt;match.position(i)&lt;/code&gt; が &lt;code&gt;distance(begin, match[i].first)&lt;/code&gt; を返すように設定する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) の形式（後置形式）は、以下のように振る舞う。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    regex_iterator tmp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;
    &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; tmp;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) &lt;code&gt;*this&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(2) インクリメントを行う前の &lt;code&gt;*this&lt;/code&gt; のコピー&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンバ変数 &lt;code&gt;begin&lt;/code&gt;、&lt;code&gt;end&lt;/code&gt;、&lt;code&gt;pregex&lt;/code&gt;、&lt;code&gt;flags&lt;/code&gt;、&lt;code&gt;match&lt;/code&gt; はあくまでも説明用のプライベートメンバ変数であるため、注意すること。&lt;/li&gt;
&lt;li&gt;「効果」にあるように、&lt;code&gt;match&lt;/code&gt; には検索後に補正が行われるため、&lt;code&gt;regex_iterator&lt;/code&gt; を間接参照した結果は、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; を順に呼び出した結果とは異なる。&lt;br /&gt;
    また、これらの補正が実装でどのように行われるかについては、規格では規定されていない。&lt;/li&gt;
&lt;li&gt;「効果」では &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; が呼ばれるものとして記載されているが、実際に &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; が呼ばれるかどうかについては、規格では規定されていない。&lt;br /&gt;
    したがって、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; にユーザ定義の特殊化バージョンを提供しても、呼ばれないかもしれない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;a*|b*|c*&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;aaabbbccc&#34;&lt;/span&gt;);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re), end &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sregex_iterator();
       it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; end; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;position = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;position() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, length = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;length() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, str = &#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;, prefix = &#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;prefix() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\&#39;&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;position = 0, length = 3, str = &#39;aaa&#39;, prefix = &#39;&#39;
position = 3, length = 0, str = &#39;&#39;, prefix = &#39;&#39;
position = 3, length = 3, str = &#39;bbb&#39;, prefix = &#39;&#39;
position = 6, length = 0, str = &#39;&#39;, prefix = &#39;&#39;
position = 6, length = 3, str = &#39;ccc&#39;, prefix = &#39;&#39;
position = 9, length = 0, str = &#39;&#39;, prefix = &#39;&#39;
&lt;/code&gt;&lt;/pre&gt;
注意：Clang &amp;amp; libc++ では正常に実行されない（終了しなくなってしまう）。また、GCC &amp;amp; libstdc++ の 4.9.1 までのバージョンでは、結果が正しくない。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;備考&lt;/h3&gt;
&lt;p&gt;Clang &amp;amp; libc++ と GCC &amp;amp; libstdc++ の 4.9.1 までのバージョンには、長さ 0 の文字列にマッチした時の挙動に問題があるため、注意が必要。
（特に、Clang は長さ 0 の文字列にマッチするとそこから先に進まなくなってしまう。例を参照）&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/regex_iterator.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_deref.html&#34;&gt;&lt;code&gt;operator*&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;間接参照&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_arrow.html&#34;&gt;&lt;code&gt;operator-&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバアクセス&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>regex_iterator (C++11) -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site
</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_iterator.html"/>
      <id>8ee6c66c6b63863d7a060cdcbf5a56bb75736e53:reference/regex/regex_iterator.md</id>
      <updated>2014-12-09 02:52:56 +0900
</updated>
      
        <content type="html">&lt;h1&gt;regex_iterator (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;BidirectionalIterator&lt;/span&gt;,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;charT&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; iterator_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;BidirectionalIterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value_type,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;traits&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;regex_iterator&lt;/span&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; cregex_iterator;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; wcregex_iterator;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;const_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; sregex_iterator;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;wstring&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;const_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; wsregex_iterator;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;regex_iterator&lt;/code&gt; は、ある文字列に対して、指定した正規表現で検索した結果を順番に列挙する読み取り専用の前方向イテレータである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;regex_iterator&lt;/code&gt; オブジェクトを構築した時、および、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_increment.html&#34;&gt;&lt;code&gt;operator++&lt;/code&gt;&lt;/a&gt; を呼び出す毎に、当該イテレータは &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; を呼び出して検索し、マッチ結果オブジェクト（&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;）を内部に保存する（ただし、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_increment.html&#34;&gt;&lt;code&gt;operator++&lt;/code&gt;&lt;/a&gt; も参照）。
イテレータが終端まで来たとき（つまり、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; が &lt;code&gt;false&lt;/code&gt; を返したとき）、当該イテレータはシーケンスの終端を示す特別な値となる。
この、シーケンスの終端を示す特別な値は、&lt;code&gt;regex_iterator&lt;/code&gt; オブジェクトをデフォルトコンストラクタにより構築した場合にも生成されるため、この値と比較することによってシーケンスの終端であるか否か（つまり、マッチしなかったか否か）が判別できる。&lt;/p&gt;
&lt;p&gt;シーケンス終端のイテレータに対する &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_deref.html&#34;&gt;&lt;code&gt;operator*&lt;/code&gt;&lt;/a&gt; 演算子適用は未定義である。その他のイテレータに対する &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_deref.html&#34;&gt;&lt;code&gt;operator*&lt;/code&gt;&lt;/a&gt; 演算子適用の結果は &lt;code&gt;const&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;&amp;amp;&lt;/code&gt; である。&lt;br /&gt;
同様に、シーケンス終端のイテレータに対する &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_arrow.html&#34;&gt;&lt;code&gt;operator-&amp;gt;&lt;/code&gt;&lt;/a&gt; 演算子適用は未定義である。その他のイテレータに対する &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_arrow.html&#34;&gt;&lt;code&gt;operator-&amp;gt;&lt;/code&gt;&lt;/a&gt; 演算子適用の結果は &lt;code&gt;const&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;*&lt;/code&gt; である。&lt;/p&gt;
&lt;p&gt;なお、本サイトの &lt;code&gt;regex_iterator&lt;/code&gt; の各説明では、規格にならって以下のプライベートなメンバ変数が存在する前提で記載している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;検索対象文字列の開始位置を示すイテレータ &lt;code&gt;begin&lt;/code&gt;（&lt;code&gt;BidirectionalIterator&lt;/code&gt; 型）&lt;/li&gt;
&lt;li&gt;検索対象文字列の終了位置を示すイテレータ &lt;code&gt;end&lt;/code&gt;（&lt;code&gt;BidirectionalIterator&lt;/code&gt; 型）&lt;/li&gt;
&lt;li&gt;検索する正規表現へのポインタ &lt;code&gt;pregex&lt;/code&gt;（&lt;code&gt;const&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex.html&#34;&gt;&lt;code&gt;basic_regex&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;charT, traits&amp;gt;*&lt;/code&gt; 型。正規表現のコピーではないことに注意）&lt;/li&gt;
&lt;li&gt;検索フラグ &lt;code&gt;flags&lt;/code&gt;（&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_constants.html&#34;&gt;&lt;code&gt;regex_constants&lt;/code&gt;&lt;/a&gt;&lt;code&gt;::match_flag_type&lt;/code&gt; 型）&lt;/li&gt;
&lt;li&gt;最後の検索のマッチ結果オブジェクト &lt;code&gt;match&lt;/code&gt;（&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&lt;/code&gt; 型）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;しかし、規格上これらのメンバ変数は説明のためだけに導入されているため、実際の各実装でこれらのメンバ変数が存在するとは限らない事に注意すること。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;regex_iterator&lt;/code&gt; は &lt;code&gt;iterator_category&lt;/code&gt; を &lt;code&gt;forward_iterator_tag&lt;/code&gt; に定義しているため、基本的には前方向イテレータであると考えられるが、実際には前方向イテレータの要件のうち以下の要件を満たしていない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2 つの間接参照可能な &lt;code&gt;regex_iterator&lt;/code&gt; オブジェクト &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; がある時、&lt;code&gt;a == b&lt;/code&gt; の場合でも、&lt;code&gt;++a == ++b&lt;/code&gt; とは限らない。&lt;/li&gt;
&lt;li&gt;2 つの間接参照可能な &lt;code&gt;regex_iterator&lt;/code&gt; オブジェクト &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; がある時、&lt;code&gt;a == b&lt;/code&gt; の場合でも、&lt;code&gt;*a&lt;/code&gt; と &lt;code&gt;*b&lt;/code&gt; が同じオブジェクトとは限らない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;h3&gt;構築・破棄&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/regex_iterator.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_assign.html&#34;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;比較&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_not_equal.html&#34;&gt;&lt;code&gt;operator!=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;間接&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_deref.html&#34;&gt;&lt;code&gt;operator*&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;間接参照&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_arrow.html&#34;&gt;&lt;code&gt;operator-&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバアクセス&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;インクリメント&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_increment.html&#34;&gt;&lt;code&gt;operator++&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;インクリメント&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;regex_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マッチに使用している正規表現型。&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex.html&#34;&gt;&lt;code&gt;basic_regex&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;charT, traits&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マッチ結果の型（間接参照で返される型）。&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;difference_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2 つのイテレータの差を表すための型。&lt;code&gt;ptrdiff_t&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const value_type&lt;/code&gt; へのポインタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const value_type&lt;/code&gt; への参照&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iterator_category&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;このイテレータのカテゴリを表すタグ。前方向イテレータ（&lt;code&gt;forward_iterator_tag&lt;/code&gt;）&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;説明用プライベートメンバ変数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;検索対象文字列の開始位置を示すイテレータ。&lt;code&gt;BidirectionalIterator&lt;/code&gt; 型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;end&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;検索対象文字列の終了位置を示すイテレータ。&lt;code&gt;BidirectionalIterator&lt;/code&gt; 型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pregex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;検索する正規表現へのポインタ。正規表現のコピーではないことに注意。&lt;code&gt;const&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex.html&#34;&gt;&lt;code&gt;basic_regex&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;charT, traits&amp;gt;*&lt;/code&gt; 型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;検索フラグ。&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_constants.html&#34;&gt;&lt;code&gt;regex_constants&lt;/code&gt;&lt;/a&gt;&lt;code&gt;::match_flag_type&lt;/code&gt; 型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最後の検索のマッチ結果オブジェクト。&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&lt;/code&gt; 型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cregex_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;regex_iterator&amp;lt;const char*&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wcregex_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;regex_iterator&amp;lt;const wchar_t*&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sregex_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;regex_iterator&amp;lt;string::const_iterator&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wsregex_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;regex_iterator&amp;lt;wstring::const_iterator&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;a01da123456da999d&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;sregex_iterator&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re), end &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;sregex_iterator&lt;/span&gt;();
       it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; end; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;position = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.position() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, length = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.length() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, str = &#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\&#39;&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;position = 1, length = 2, str = &#39;01&#39;
position = 5, length = 6, str = &#39;123456&#39;
position = 13, length = 3, str = &#39;999&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ただし、Clang と GCC の 4.9.1 までのバージョンには、長さ 0 の文字列にマッチした時の挙動に問題があるため、注意が必要。
（特に、Clang は長さ 0 の文字列にマッチするとそこから先に進まなくなってしまう）&lt;/p&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
</feed>
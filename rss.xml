<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-06-02T07:32:44.848320</updated>
  <id>7dd5dd98-adc5-4dad-9fd9-1f1879de99bc</id>

  
    <entry>
      <title>join_view -- join_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/join_view.html"/>
      <id>a5b62f32b154d09ed36609f2eb1a89c5faa061bd:reference/ranges/join_view.md</id>
      <updated>2025-06-02T16:28:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/join_view.md b/reference/ranges/join_view.md
index a9a3d5d34..c1ad22bc1 100644
--- a/reference/ranges/join_view.md
+++ b/reference/ranges/join_view.md
@@ -51,10 +51,10 @@ namespace std::ranges {
 
 | 名前                                             | 説明                             | 対応バージョン |
 |--------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](join_view/op_constructor.md.nolink)  | コンストラクタ                   | C++20          |
-| [`base`](join_view/base.md.nolink)                     | `V`の参照を取得する              | C++20          |
-| [`begin`](join_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
-| [`end`](join_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
+| [`(constructor)`](join_view/op_constructor.md)  | コンストラクタ                   | C++20          |
+| [`base`](join_view/base.md)                     | `V`の参照を取得する              | C++20          |
+| [`begin`](join_view/begin.md)                   | 先頭を指すイテレータを取得する   | C++20          |
+| [`end`](join_view/end.md)                       | 番兵を取得する                   | C++20          |
 
 ## 継承しているメンバ関数
 
@@ -71,7 +71,7 @@ namespace std::ranges {
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](join_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+| [`(deduction_guide)`](join_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++20          |
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- join_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/join_view/base.html"/>
      <id>a5b62f32b154d09ed36609f2eb1a89c5faa061bd:reference/ranges/join_view/base.md</id>
      <updated>2025-06-02T16:28:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/join_view/base.md b/reference/ranges/join_view/base.md
new file mode 100644
index 000000000..923fd03c6
--- /dev/null
+++ b/reference/ranges/join_view/base.md
@@ -0,0 +1,68 @@
+# base
+* ranges[meta header]
+* std::ranges[meta namespace]
+* join_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr V base() const &amp;amp;
+  requires copy_constructible&amp;lt;V&amp;gt;;  // (1) C++20
+
+constexpr V base() &amp;amp;&amp;amp;;             // (2) C++20
+```
+
+## 概要
+
+メンバ変数として保持している、元の`view`を取得する。
+
+## 効果
+
+入力`view`（`V`）のオブジェクトを`base_`というメンバに保持するとして
+
+- (1) : `return base_;` と等価
+- (2) : `return std::move(base_);` と等価
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using std::ranges::view;
+
+  std::vector&amp;lt;std::string&amp;gt; words = {&amp;#34;hello&amp;#34;, &amp;#34;world&amp;#34;, &amp;#34;join&amp;#34;};
+
+  std::ranges::join_view r{words};
+
+  // (1) コピーして取得
+  view auto b1 = r.base();
+
+  // (2) ムーブして取得
+  view auto b2 = std::move(r).base();
+
+  // 得られるのは元のRangeではなく、あくまでview
+  static_assert(not std::same_as&amp;lt;decltype(b1), std::vector&amp;lt;std::string&amp;gt;&amp;gt;);
+  static_assert(    std::same_as&amp;lt;decltype(b1), std::ranges::ref_view&amp;lt;std::vector&amp;lt;std::string&amp;gt;&amp;gt;&amp;gt;);
+  static_assert(    std::same_as&amp;lt;decltype(b2), std::ranges::ref_view&amp;lt;std::vector&amp;lt;std::string&amp;gt;&amp;gt;&amp;gt;);
+}
+```
+* base[color ff0000]
+
+### 出力
+
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- join_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/join_view/begin.html"/>
      <id>a5b62f32b154d09ed36609f2eb1a89c5faa061bd:reference/ranges/join_view/begin.md</id>
      <updated>2025-06-02T16:28:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/join_view/begin.md b/reference/ranges/join_view/begin.md
new file mode 100644
index 000000000..7444fdef9
--- /dev/null
+++ b/reference/ranges/join_view/begin.md
@@ -0,0 +1,59 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* join_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto begin()
+  requires (!simple-view&amp;lt;V&amp;gt;);       // (1) C++20
+
+constexpr auto begin() const
+  requires range&amp;lt;const V&amp;gt; &amp;amp;&amp;amp;
+           input_range&amp;lt;range_reference_t&amp;lt;const V&amp;gt;&amp;gt;;  // (2) C++20
+```
+
+## 概要
+
+`view`の先頭要素を指すイテレータを取得する。
+
+## 戻り値
+- (1), (2) : `join_view`の先頭を指すイテレータを返す。外側のRangeが空でない場合、最初の内側Rangeの先頭要素を指す。外側のRangeが空の場合、[`end()`](end.md)と等価なイテレータを返す。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;std::string&amp;gt; words = {&amp;#34;hello&amp;#34;, &amp;#34;world&amp;#34;, &amp;#34;join&amp;#34;};
+
+  std::ranges::join_view r{words};
+
+  auto it = r.begin();
+
+  char x = *it;
+  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* begin[color ff0000]
+
+### 出力
+
+```
+h
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- join_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/join_view/end.html"/>
      <id>a5b62f32b154d09ed36609f2eb1a89c5faa061bd:reference/ranges/join_view/end.md</id>
      <updated>2025-06-02T16:28:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/join_view/end.md b/reference/ranges/join_view/end.md
new file mode 100644
index 000000000..f540b9003
--- /dev/null
+++ b/reference/ranges/join_view/end.md
@@ -0,0 +1,63 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* join_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto end()
+  requires (!simple-view&amp;lt;V&amp;gt;);       // (1) C++20
+
+constexpr auto end() const
+  requires range&amp;lt;const V&amp;gt; &amp;amp;&amp;amp;
+           input_range&amp;lt;range_reference_t&amp;lt;const V&amp;gt;&amp;gt;;  // (2) C++20
+```
+
+## 概要
+番兵を取得する。
+
+## 戻り値
+- (1), (2) : `join_view`の番兵を返す
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;std::string&amp;gt; words = {&amp;#34;hello&amp;#34;, &amp;#34;world&amp;#34;, &amp;#34;join&amp;#34;};
+
+  std::ranges::join_view r{words};
+
+  auto it = r.begin();
+  auto end_it = r.end();
+  while (it != end_it) {
+    char x = *it;
+    std::cout &amp;lt;&amp;lt; x;
+    ++it;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* end[color ff0000]
+* begin[link begin.md]
+
+### 出力
+
+```
+helloworldjoin
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- join_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/join_view/op_constructor.html"/>
      <id>a5b62f32b154d09ed36609f2eb1a89c5faa061bd:reference/ranges/join_view/op_constructor.md</id>
      <updated>2025-06-02T16:28:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/join_view/op_constructor.md b/reference/ranges/join_view/op_constructor.md
new file mode 100644
index 000000000..81f89d576
--- /dev/null
+++ b/reference/ranges/join_view/op_constructor.md
@@ -0,0 +1,59 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* join_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+join_view()
+  requires default_initializable&amp;lt;V&amp;gt; = default; // (1) C++20
+
+constexpr explicit join_view(V base);          // (2) C++20
+```
+
+## 概要
+
+[`join_view`](../join_view.md)オブジェクトを構築する。
+
+- (1) : デフォルト構築
+- (2) : 元となるviewを指定して構築
+
+## 効果
+
+- (1) : `base_`をデフォルト構築する
+- (2) : `base_`を`std::move(base)`で初期化する
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main() {
+  std::vector&amp;lt;std::string&amp;gt; words = {&amp;#34;hello&amp;#34;, &amp;#34;world&amp;#34;, &amp;#34;join&amp;#34;};
+
+  std::ranges::join_view view{words};
+  for (char c : view) {
+    std::cout &amp;lt;&amp;lt; c;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* join_view[color ff0000]
+
+### 出力
+```
+helloworldjoin
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- join_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/join_view/op_deduction_guide.html"/>
      <id>a5b62f32b154d09ed36609f2eb1a89c5faa061bd:reference/ranges/join_view/op_deduction_guide.md</id>
      <updated>2025-06-02T16:28:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/join_view/op_deduction_guide.md b/reference/ranges/join_view/op_deduction_guide.md
new file mode 100644
index 000000000..b5e29d85e
--- /dev/null
+++ b/reference/ranges/join_view/op_deduction_guide.md
@@ -0,0 +1,56 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class R&amp;gt;
+  join_view(R&amp;amp;&amp;amp;) -&amp;gt; join_view&amp;lt;views::all_t&amp;lt;R&amp;gt;&amp;gt;;
+}
+```
+
+## 概要
+
+[`join_view`](../join_view.md)クラステンプレートの型推論補助。
+
+この推論補助によって、元のRangeが暗黙的に[all view](../all.md)でラップされる。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+
+int main() {
+  std::vector&amp;lt;std::string&amp;gt; words = {&amp;#34;hello&amp;#34;, &amp;#34;world&amp;#34;, &amp;#34;join&amp;#34;};
+
+  std::ranges::join_view r1{words};
+  static_assert(std::same_as&amp;lt;
+    decltype(r1),
+    std::ranges::join_view&amp;lt;std::ranges::ref_view&amp;lt;std::vector&amp;lt;std::string&amp;gt;&amp;gt;&amp;gt;
+  &amp;gt;);
+
+  std::ranges::join_view r2{std::vector&amp;lt;std::string&amp;gt;{&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;}};
+  static_assert(std::same_as&amp;lt;
+    decltype(r2),
+    std::ranges::join_view&amp;lt;std::ranges::owning_view&amp;lt;std::vector&amp;lt;std::string&amp;gt;&amp;gt;&amp;gt;
+  &amp;gt;);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>drop_while_view -- drop_while_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/drop_while_view.html"/>
      <id>ff88ad34e03665713ad8edf2c2b5d989111df0b8:reference/ranges/drop_while_view.md</id>
      <updated>2025-06-02T16:21:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/drop_while_view.md b/reference/ranges/drop_while_view.md
index 2c94c9965..623026000 100644
--- a/reference/ranges/drop_while_view.md
+++ b/reference/ranges/drop_while_view.md
@@ -49,11 +49,11 @@ namespace std::ranges {
 
 | 名前                                                         | 説明                             | 対応バージョン |
 |--------------------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](drop_while_view/op_constructor.md.nolink)  | コンストラクタ                   | C++20          |
-| [`base`](drop_while_view/base.md.nolink)                     | `V`の参照を取得する              | C++20          |
-| [`pred`](drop_while_view/pred.md.nolink)                     | 述語を取得する                   | C++20          |
-| [`begin`](drop_while_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
-| [`end`](drop_while_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
+| [`(constructor)`](drop_while_view/op_constructor.md)  | コンストラクタ                   | C++20          |
+| [`base`](drop_while_view/base.md)                     | `V`の参照を取得する              | C++20          |
+| [`pred`](drop_while_view/pred.md)                     | 述語を取得する                   | C++20          |
+| [`begin`](drop_while_view/begin.md)                   | 先頭を指すイテレータを取得する   | C++20          |
+| [`end`](drop_while_view/end.md)                       | 番兵を取得する                   | C++20          |
 
 ## 継承しているメンバ関数
 
@@ -72,7 +72,7 @@ namespace std::ranges {
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](drop_while_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+| [`(deduction_guide)`](drop_while_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++20          |
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- drop_while_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/drop_while_view/base.html"/>
      <id>ff88ad34e03665713ad8edf2c2b5d989111df0b8:reference/ranges/drop_while_view/base.md</id>
      <updated>2025-06-02T16:21:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/drop_while_view/base.md b/reference/ranges/drop_while_view/base.md
new file mode 100644
index 000000000..66dcfca3b
--- /dev/null
+++ b/reference/ranges/drop_while_view/base.md
@@ -0,0 +1,67 @@
+# base
+* ranges[meta header]
+* std::ranges[meta namespace]
+* drop_while_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr V base() const &amp;amp;
+  requires copy_constructible&amp;lt;V&amp;gt;;  // (1) C++20
+
+constexpr V base() &amp;amp;&amp;amp;;             // (2) C++20
+```
+
+## 概要
+
+メンバ変数として保持している、元の`view`を取得する。
+
+## 効果
+
+入力`view`（`V`）のオブジェクトを`base_`というメンバに保持するとして
+
+- (1) : `return base_;` と等価
+- (2) : `return std::move(base_);` と等価
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using std::ranges::view;
+
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::drop_while_view r{vec, [](int x) { return x &amp;lt; 6; }};
+
+  // (1) コピーして取得
+  view auto b1 = r.base();
+
+  // (2) ムーブして取得
+  view auto b2 = std::move(r).base();
+
+  // 得られるのは元のRangeではなく、あくまでview
+  static_assert(not std::same_as&amp;lt;decltype(b1), std::vector&amp;lt;int&amp;gt;&amp;gt;);
+  static_assert(    std::same_as&amp;lt;decltype(b1), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+  static_assert(    std::same_as&amp;lt;decltype(b2), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+}
+```
+* base[color ff0000]
+
+### 出力
+
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- drop_while_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/drop_while_view/begin.html"/>
      <id>ff88ad34e03665713ad8edf2c2b5d989111df0b8:reference/ranges/drop_while_view/begin.md</id>
      <updated>2025-06-02T16:21:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/drop_while_view/begin.md b/reference/ranges/drop_while_view/begin.md
new file mode 100644
index 000000000..d346ddcad
--- /dev/null
+++ b/reference/ranges/drop_while_view/begin.md
@@ -0,0 +1,68 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* drop_while_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto begin()
+  requires (!simple-view&amp;lt;V&amp;gt;);       // (1) C++20
+
+constexpr auto begin() const
+  requires range&amp;lt;const V&amp;gt; &amp;amp;&amp;amp;
+           indirect_unary_predicate&amp;lt;
+             const Pred,
+             iterator_t&amp;lt;const V&amp;gt;
+           &amp;gt;;                        // (2) C++20
+```
+
+## 概要
+
+`view`の先頭要素を指すイテレータを取得する。
+
+## 戻り値
+先頭から条件を満たさない最初の要素を指すイテレータを返す。
+
+- (1), (2) : 実装時にキャッシュした結果を返すか、以下と等価：
+    ```cpp
+    return ranges::find_if_not(ranges::begin(base_), ranges::end(base_), pred_);
+    ```
+
+ただし、`base_`は元の`view`を表すメンバ変数、`pred_`は述語を表すメンバ変数。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::drop_while_view r{vec, [](int x) { return x &amp;lt; 6; }};
+
+  auto it = r.begin();
+
+  int x = *it;
+  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* begin[color ff0000]
+
+### 出力
+
+```
+6
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- drop_while_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/drop_while_view/end.html"/>
      <id>ff88ad34e03665713ad8edf2c2b5d989111df0b8:reference/ranges/drop_while_view/end.md</id>
      <updated>2025-06-02T16:21:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/drop_while_view/end.md b/reference/ranges/drop_while_view/end.md
new file mode 100644
index 000000000..4866fcacc
--- /dev/null
+++ b/reference/ranges/drop_while_view/end.md
@@ -0,0 +1,70 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* drop_while_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto end()
+  requires (!simple-view&amp;lt;V&amp;gt;);       // (1) C++20
+
+constexpr auto end() const
+  requires range&amp;lt;const V&amp;gt; &amp;amp;&amp;amp;
+           indirect_unary_predicate&amp;lt;
+             const Pred,
+             iterator_t&amp;lt;const V&amp;gt;
+           &amp;gt;;                        // (2) C++20
+```
+
+## 概要
+番兵を取得する。
+
+## 戻り値
+- (1), (2) : 以下と等価：
+    ```cpp
+    return ranges::end(base_);
+    ```
+
+ただし、`base_`は元の`view`を表すメンバ変数。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::drop_while_view r{vec, [](int x) { return x &amp;lt; 6; }};
+
+  auto it = r.begin();
+  auto end_it = r.end();
+  while (it != end_it) {
+    int x = *it;
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+    ++it;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* end[color ff0000]
+* begin[link begin.md]
+
+### 出力
+
+```
+6 7 8 9 10 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- drop_while_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/drop_while_view/op_constructor.html"/>
      <id>ff88ad34e03665713ad8edf2c2b5d989111df0b8:reference/ranges/drop_while_view/op_constructor.md</id>
      <updated>2025-06-02T16:21:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/drop_while_view/op_constructor.md b/reference/ranges/drop_while_view/op_constructor.md
new file mode 100644
index 000000000..9e06d2d06
--- /dev/null
+++ b/reference/ranges/drop_while_view/op_constructor.md
@@ -0,0 +1,60 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* drop_while_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+drop_while_view()
+  requires default_initializable&amp;lt;V&amp;gt; &amp;amp;&amp;amp;
+           default_initializable&amp;lt;Pred&amp;gt; = default; // (1) C++20
+
+constexpr explicit
+  drop_while_view(V base, Pred pred);             // (2) C++20
+```
+
+## 概要
+
+[`drop_while_view`](../drop_while_view.md)オブジェクトを構築する。
+
+- (1) : デフォルト構築
+- (2) : 元となるviewと述語を指定して構築
+
+## 効果
+
+- (1) : `base_`と`pred_`をデフォルト構築する
+- (2) : `base_`を`std::move(base)`で、`pred_`を`std::move(pred)`で初期化する
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::drop_while_view view{vec, [](int x) { return x &amp;lt; 6; }};
+  for (const auto&amp;amp; x : view) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* drop_while_view[color ff0000]
+
+### 出力
+```
+6 7 8 9 10 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- drop_while_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/drop_while_view/op_deduction_guide.html"/>
      <id>ff88ad34e03665713ad8edf2c2b5d989111df0b8:reference/ranges/drop_while_view/op_deduction_guide.md</id>
      <updated>2025-06-02T16:21:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/drop_while_view/op_deduction_guide.md b/reference/ranges/drop_while_view/op_deduction_guide.md
new file mode 100644
index 000000000..acb96db84
--- /dev/null
+++ b/reference/ranges/drop_while_view/op_deduction_guide.md
@@ -0,0 +1,56 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class R, class Pred&amp;gt;
+  drop_while_view(R&amp;amp;&amp;amp;, Pred) -&amp;gt; drop_while_view&amp;lt;views::all_t&amp;lt;R&amp;gt;, Pred&amp;gt;;
+}
+```
+
+## 概要
+
+[`drop_while_view`](../drop_while_view.md)クラステンプレートの型推論補助。
+
+この推論補助によって、元のRangeが暗黙的に[all view](../all.md)でラップされる。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+  auto pred = [](int x) { return x &amp;lt; 6; };
+
+  std::ranges::drop_while_view r1{vec, pred};
+  static_assert(std::same_as&amp;lt;
+    decltype(r1),
+    std::ranges::drop_while_view&amp;lt;std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;, decltype(pred)&amp;gt;
+  &amp;gt;);
+
+  std::ranges::drop_while_view r2{std::vector&amp;lt;int&amp;gt;{1, 2, 3, 4, 5}, pred};
+  static_assert(std::same_as&amp;lt;
+    decltype(r2),
+    std::ranges::drop_while_view&amp;lt;std::ranges::owning_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;, decltype(pred)&amp;gt;
+  &amp;gt;);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>pred -- drop_while_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/drop_while_view/pred.html"/>
      <id>ff88ad34e03665713ad8edf2c2b5d989111df0b8:reference/ranges/drop_while_view/pred.md</id>
      <updated>2025-06-02T16:21:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/drop_while_view/pred.md b/reference/ranges/drop_while_view/pred.md
new file mode 100644
index 000000000..3c864b110
--- /dev/null
+++ b/reference/ranges/drop_while_view/pred.md
@@ -0,0 +1,58 @@
+# pred
+* ranges[meta header]
+* std::ranges[meta namespace]
+* drop_while_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr const Pred&amp;amp; pred() const;
+```
+
+## 概要
+
+メンバ変数として保持している述語を取得する。
+
+## 戻り値
+
+述語`Pred`のオブジェクトを[`movable-box`](../movable_box.md)(C++20は[`copyable-box`](../copyable_box.md))でラップした `pred_`というメンバに保持するとして
+
+```cpp
+return *pred_;
+```
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::drop_while_view dwv{vec, [](int i) { return i &amp;lt; 6; }};
+
+  std::cout &amp;lt;&amp;lt; dwv.pred()(3) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; dwv.pred()(7) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* pred[color ff0000]
+* drop_while_view[link ../drop_while_view.md]
+
+### 出力
+
+```
+1
+0
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>drop_view -- drop_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/drop_view.html"/>
      <id>23b7fdfde3262c3441b275ef321b034c7be64049:reference/ranges/drop_view.md</id>
      <updated>2025-06-02T16:13:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/drop_view.md b/reference/ranges/drop_view.md
index 0d7fc5891..56a88433f 100644
--- a/reference/ranges/drop_view.md
+++ b/reference/ranges/drop_view.md
@@ -53,11 +53,11 @@ namespace std::ranges {
 
 | 名前                                             | 説明                             | 対応バージョン |
 |--------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](drop_view/op_constructor.md.nolink)  | コンストラクタ                   | C++20          |
-| [`base`](drop_view/base.md.nolink)                     | `V`の参照を取得する              | C++20          |
-| [`begin`](drop_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
-| [`end`](drop_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
-| [`size`](drop_view/size.md.nolink)                     | 要素数を取得する                 | C++20          |
+| [`(constructor)`](drop_view/op_constructor.md)  | コンストラクタ                   | C++20          |
+| [`base`](drop_view/base.md)                     | `V`の参照を取得する              | C++20          |
+| [`begin`](drop_view/begin.md)                   | 先頭を指すイテレータを取得する   | C++20          |
+| [`end`](drop_view/end.md)                       | 番兵を取得する                   | C++20          |
+| [`size`](drop_view/size.md)                     | 要素数を取得する                 | C++20          |
 
 `r`を元のRangeとする。`size`は[`ranges::size`](size.md)`(r)`が有効な式であるときに定義される。
 
@@ -78,7 +78,7 @@ namespace std::ranges {
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](drop_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+| [`(deduction_guide)`](drop_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++20          |
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- drop_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/drop_view/base.html"/>
      <id>23b7fdfde3262c3441b275ef321b034c7be64049:reference/ranges/drop_view/base.md</id>
      <updated>2025-06-02T16:13:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/drop_view/base.md b/reference/ranges/drop_view/base.md
new file mode 100644
index 000000000..933c36b6e
--- /dev/null
+++ b/reference/ranges/drop_view/base.md
@@ -0,0 +1,67 @@
+# base
+* ranges[meta header]
+* std::ranges[meta namespace]
+* drop_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr V base() const &amp;amp;
+  requires copy_constructible&amp;lt;V&amp;gt;;  // (1) C++20
+
+constexpr V base() &amp;amp;&amp;amp;;             // (2) C++20
+```
+
+## 概要
+
+メンバ変数として保持している、元の`view`を取得する。
+
+## 効果
+
+入力`view`（`V`）のオブジェクトを`base_`というメンバに保持するとして
+
+- (1) : `return base_;` と等価
+- (2) : `return std::move(base_);` と等価
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using std::ranges::view;
+
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::drop_view r{vec, 5};
+
+  // (1) コピーして取得
+  view auto b1 = r.base();
+
+  // (2) ムーブして取得
+  view auto b2 = std::move(r).base();
+
+  // 得られるのは元のRangeではなく、あくまでview
+  static_assert(not std::same_as&amp;lt;decltype(b1), std::vector&amp;lt;int&amp;gt;&amp;gt;);
+  static_assert(    std::same_as&amp;lt;decltype(b1), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+  static_assert(    std::same_as&amp;lt;decltype(b2), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+}
+```
+* base[color ff0000]
+
+### 出力
+
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- drop_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/drop_view/begin.html"/>
      <id>23b7fdfde3262c3441b275ef321b034c7be64049:reference/ranges/drop_view/begin.md</id>
      <updated>2025-06-02T16:13:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/drop_view/begin.md b/reference/ranges/drop_view/begin.md
new file mode 100644
index 000000000..0fe7e7fea
--- /dev/null
+++ b/reference/ranges/drop_view/begin.md
@@ -0,0 +1,70 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* drop_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto begin()
+  requires (!simple-view&amp;lt;V&amp;gt;);       // (1) C++20
+
+constexpr auto begin() const
+  requires range&amp;lt;const V&amp;gt;;          // (2) C++20
+```
+
+## 概要
+
+`view`の先頭要素を指すイテレータを取得する。
+
+## 戻り値
+入力が[`random_access_range`](../random_access_range.md)かつ[`sized_range`](../sized_range.md)の場合：
+- (1), (2) : 以下と等価：
+    ```cpp
+    return ranges::begin(base_) + min&amp;lt;D&amp;gt;(ranges::size(base_), count_);
+    ```
+    ここで、`D`は[`range_difference_t`](../range_difference_t.md)`&amp;lt;V&amp;gt;`。
+
+それ以外の場合：
+- (1), (2) : 以下と等価：
+    ```cpp
+    return ranges::next(ranges::begin(base_), count_, ranges::end(base_));
+    ```
+
+ただし、`base_`は元の`view`を表すメンバ変数、`count_`は除去する要素数を表すメンバ変数。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::drop_view r{vec, 5};
+
+  auto it = r.begin();
+
+  int x = *it;
+  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* begin[color ff0000]
+
+### 出力
+
+```
+6
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- drop_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/drop_view/end.html"/>
      <id>23b7fdfde3262c3441b275ef321b034c7be64049:reference/ranges/drop_view/end.md</id>
      <updated>2025-06-02T16:13:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/drop_view/end.md b/reference/ranges/drop_view/end.md
new file mode 100644
index 000000000..8a7872dda
--- /dev/null
+++ b/reference/ranges/drop_view/end.md
@@ -0,0 +1,66 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* drop_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto end()
+  requires (!simple-view&amp;lt;V&amp;gt;);       // (1) C++20
+
+constexpr auto end() const
+  requires range&amp;lt;const V&amp;gt;;          // (2) C++20
+```
+
+## 概要
+番兵を取得する。
+
+## 戻り値
+- (1), (2) : 以下と等価：
+    ```cpp
+    return ranges::end(base_);
+    ```
+
+ただし、`base_`は元の`view`を表すメンバ変数。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::drop_view r{vec, 5};
+
+  auto it = r.begin();
+  auto end_it = r.end();
+  while (it != end_it) {
+    int x = *it;
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+    ++it;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* end[color ff0000]
+* begin[link begin.md]
+
+### 出力
+
+```
+6 7 8 9 10 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- drop_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/drop_view/op_constructor.html"/>
      <id>23b7fdfde3262c3441b275ef321b034c7be64049:reference/ranges/drop_view/op_constructor.md</id>
      <updated>2025-06-02T16:13:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/drop_view/op_constructor.md b/reference/ranges/drop_view/op_constructor.md
new file mode 100644
index 000000000..778541675
--- /dev/null
+++ b/reference/ranges/drop_view/op_constructor.md
@@ -0,0 +1,59 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* drop_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+drop_view()
+  requires default_initializable&amp;lt;V&amp;gt; = default;          // (1) C++20
+
+constexpr explicit
+  drop_view(V base, range_difference_t&amp;lt;V&amp;gt; count);        // (2) C++20
+```
+
+## 概要
+
+[`drop_view`](../drop_view.md)オブジェクトを構築する。
+
+- (1) : デフォルト構築
+- (2) : 元となるviewと除去する要素数を指定して構築
+
+## 効果
+
+- (1) : `base_`と`count_`をデフォルト構築する
+- (2) : `base_`を`std::move(base)`で、`count_`を`count`で初期化する
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::drop_view view{vec, 5};
+  for (const auto&amp;amp; x : view) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* drop_view[color ff0000]
+
+### 出力
+```
+6 7 8 9 10 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- drop_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/drop_view/op_deduction_guide.html"/>
      <id>23b7fdfde3262c3441b275ef321b034c7be64049:reference/ranges/drop_view/op_deduction_guide.md</id>
      <updated>2025-06-02T16:13:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/drop_view/op_deduction_guide.md b/reference/ranges/drop_view/op_deduction_guide.md
new file mode 100644
index 000000000..d74629dac
--- /dev/null
+++ b/reference/ranges/drop_view/op_deduction_guide.md
@@ -0,0 +1,55 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class R&amp;gt;
+  drop_view(R&amp;amp;&amp;amp;, range_difference_t&amp;lt;R&amp;gt;) -&amp;gt; drop_view&amp;lt;views::all_t&amp;lt;R&amp;gt;&amp;gt;;
+}
+```
+
+## 概要
+
+[`drop_view`](../drop_view.md)クラステンプレートの型推論補助。
+
+この推論補助によって、元のRangeが暗黙的に[all view](../all.md)でラップされる。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::drop_view r1{vec, 5};
+  static_assert(std::same_as&amp;lt;
+    decltype(r1),
+    std::ranges::drop_view&amp;lt;std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;
+  &amp;gt;);
+
+  std::ranges::drop_view r2{std::vector&amp;lt;int&amp;gt;{1, 2, 3, 4, 5}, 3};
+  static_assert(std::same_as&amp;lt;
+    decltype(r2),
+    std::ranges::drop_view&amp;lt;std::ranges::owning_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;
+  &amp;gt;);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- drop_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/drop_view/size.html"/>
      <id>23b7fdfde3262c3441b275ef321b034c7be64049:reference/ranges/drop_view/size.md</id>
      <updated>2025-06-02T16:13:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/drop_view/size.md b/reference/ranges/drop_view/size.md
new file mode 100644
index 000000000..5860f5afd
--- /dev/null
+++ b/reference/ranges/drop_view/size.md
@@ -0,0 +1,59 @@
+# size
+* ranges[meta header]
+* std::ranges[meta namespace]
+* drop_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto size()
+  requires sized_range&amp;lt;V&amp;gt;;       // (1) C++20
+
+constexpr auto size() const
+  requires sized_range&amp;lt;const V&amp;gt;; // (2) C++20
+```
+
+## 概要
+要素数を取得する。
+
+## 効果
+入力`view`（`V`）のオブジェクトを`base_`、除去する要素数を`count_`というメンバに保持するとして、以下と等価：
+
+```cpp
+auto n = ranges::size(base_);
+auto c = static_cast&amp;lt;decltype(n)&amp;gt;(count_);
+return n - min(n, c);
+```
+* min[link /reference/algorithm/min.md]
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+  std::ranges::drop_view r{vec, 5};
+
+  std::size_t n = r.size();
+  std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; std::endl;
+}
+```
+* size[color ff0000]
+
+### 出力
+```
+5
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>take_while_view -- take_while_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_while_view.html"/>
      <id>85980d0f72416acc7e893a120f38db28b76d2cf0:reference/ranges/take_while_view.md</id>
      <updated>2025-06-02T15:56:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_while_view.md b/reference/ranges/take_while_view.md
index 4a26432ef..00eb02cc4 100644
--- a/reference/ranges/take_while_view.md
+++ b/reference/ranges/take_while_view.md
@@ -49,11 +49,11 @@ namespace std::ranges {
 
 | 名前                                                         | 説明                             | 対応バージョン |
 |--------------------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](take_while_view/op_constructor.md.nolink)  | コンストラクタ                   | C++20          |
-| [`base`](take_while_view/base.md.nolink)                     | `V`の参照を取得する              | C++20          |
-| [`pred`](take_while_view/pred.md.nolink)                     | 述語を取得する                   | C++20          |
-| [`begin`](take_while_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
-| [`end`](take_while_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
+| [`(constructor)`](take_while_view/op_constructor.md)  | コンストラクタ                   | C++20          |
+| [`base`](take_while_view/base.md)                     | `V`の参照を取得する              | C++20          |
+| [`pred`](take_while_view/pred.md)                     | 述語を取得する                   | C++20          |
+| [`begin`](take_while_view/begin.md)                   | 先頭を指すイテレータを取得する   | C++20          |
+| [`end`](take_while_view/end.md)                       | 番兵を取得する                   | C++20          |
 
 ## 継承しているメンバ関数
 
@@ -72,7 +72,7 @@ namespace std::ranges {
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](take_while_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+| [`(deduction_guide)`](take_while_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++20          |
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- take_while_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_while_view/base.html"/>
      <id>85980d0f72416acc7e893a120f38db28b76d2cf0:reference/ranges/take_while_view/base.md</id>
      <updated>2025-06-02T15:56:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_while_view/base.md b/reference/ranges/take_while_view/base.md
new file mode 100644
index 000000000..18267e18d
--- /dev/null
+++ b/reference/ranges/take_while_view/base.md
@@ -0,0 +1,67 @@
+# base
+* ranges[meta header]
+* std::ranges[meta namespace]
+* take_while_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr V base() const &amp;amp;
+  requires copy_constructible&amp;lt;V&amp;gt;;  // (1) C++20
+
+constexpr V base() &amp;amp;&amp;amp;;             // (2) C++20
+```
+
+## 概要
+
+メンバ変数として保持している、元の`view`を取得する。
+
+## 効果
+
+入力`view`（`V`）のオブジェクトを`base_`というメンバに保持するとして
+
+- (1) : `return base_;` と等価
+- (2) : `return std::move(base_);` と等価
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using std::ranges::view;
+
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::take_while_view r{vec, [](int x) { return x &amp;lt; 6; }};
+
+  // (1) コピーして取得
+  view auto b1 = r.base();
+
+  // (2) ムーブして取得
+  view auto b2 = std::move(r).base();
+
+  // 得られるのは元のRangeではなく、あくまでview
+  static_assert(not std::same_as&amp;lt;decltype(b1), std::vector&amp;lt;int&amp;gt;&amp;gt;);
+  static_assert(    std::same_as&amp;lt;decltype(b1), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+  static_assert(    std::same_as&amp;lt;decltype(b2), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+}
+```
+* base[color ff0000]
+
+### 出力
+
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- take_while_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_while_view/begin.html"/>
      <id>85980d0f72416acc7e893a120f38db28b76d2cf0:reference/ranges/take_while_view/begin.md</id>
      <updated>2025-06-02T15:56:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_while_view/begin.md b/reference/ranges/take_while_view/begin.md
new file mode 100644
index 000000000..25c138e06
--- /dev/null
+++ b/reference/ranges/take_while_view/begin.md
@@ -0,0 +1,66 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* take_while_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto begin()
+  requires (!simple-view&amp;lt;V&amp;gt;);       // (1) C++20
+
+constexpr auto begin() const
+  requires range&amp;lt;const V&amp;gt; &amp;amp;&amp;amp;
+           indirect_unary_predicate&amp;lt;
+             const Pred,
+             iterator_t&amp;lt;const V&amp;gt;
+           &amp;gt;;                        // (2) C++20
+```
+
+## 概要
+
+`view`の先頭要素を指すイテレータを取得する。
+
+## 戻り値
+- (1), (2) : 以下と等価：
+    ```cpp
+    return ranges::begin(base_);
+    ```
+
+ただし、`base_`は元の`view`を表すメンバ変数。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::take_while_view r{vec, [](int x) { return x &amp;lt; 6; }};
+
+  auto it = r.begin();
+
+  int x = *it;
+  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* begin[color ff0000]
+
+### 出力
+
+```
+1
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- take_while_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_while_view/end.html"/>
      <id>85980d0f72416acc7e893a120f38db28b76d2cf0:reference/ranges/take_while_view/end.md</id>
      <updated>2025-06-02T15:56:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_while_view/end.md b/reference/ranges/take_while_view/end.md
new file mode 100644
index 000000000..c01d6fc46
--- /dev/null
+++ b/reference/ranges/take_while_view/end.md
@@ -0,0 +1,70 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* take_while_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto end()
+  requires (!simple-view&amp;lt;V&amp;gt;);       // (1) C++20
+
+constexpr auto end() const
+  requires range&amp;lt;const V&amp;gt; &amp;amp;&amp;amp;
+           indirect_unary_predicate&amp;lt;
+             const Pred,
+             iterator_t&amp;lt;const V&amp;gt;
+           &amp;gt;;                        // (2) C++20
+```
+
+## 概要
+番兵を取得する。
+
+## 戻り値
+- (1), (2) : 以下と等価：
+    ```cpp
+    return ranges::end(base_);
+    ```
+
+ただし、`base_`は元の`view`を表すメンバ変数。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::take_while_view r{vec, [](int x) { return x &amp;lt; 6; }};
+
+  auto it = r.begin();
+  auto end_it = r.end();
+  while (it != end_it) {
+    int x = *it;
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+    ++it;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* end[color ff0000]
+* begin[link begin.md]
+
+### 出力
+
+```
+1 2 3 4 5 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- take_while_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_while_view/op_constructor.html"/>
      <id>85980d0f72416acc7e893a120f38db28b76d2cf0:reference/ranges/take_while_view/op_constructor.md</id>
      <updated>2025-06-02T15:56:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_while_view/op_constructor.md b/reference/ranges/take_while_view/op_constructor.md
new file mode 100644
index 000000000..b1f3c10d4
--- /dev/null
+++ b/reference/ranges/take_while_view/op_constructor.md
@@ -0,0 +1,60 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* take_while_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+take_while_view()
+  requires default_initializable&amp;lt;V&amp;gt; &amp;amp;&amp;amp;
+           default_initializable&amp;lt;Pred&amp;gt; = default; // (1) C++20
+
+constexpr explicit
+  take_while_view(V base, Pred pred);             // (2) C++20
+```
+
+## 概要
+
+[`take_while_view`](../take_while_view.md)オブジェクトを構築する。
+
+- (1) : デフォルト構築
+- (2) : 元となるviewと述語を指定して構築
+
+## 効果
+
+- (1) : `base_`と`pred_`をデフォルト構築する
+- (2) : `base_`を`std::move(base)`で、`pred_`を`std::move(pred)`で初期化する
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::take_while_view view{vec, [](int x) { return x &amp;lt; 6; }};
+  for (const auto&amp;amp; x : view) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* take_while_view[color ff0000]
+
+### 出力
+```
+1 2 3 4 5 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- take_while_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_while_view/op_deduction_guide.html"/>
      <id>85980d0f72416acc7e893a120f38db28b76d2cf0:reference/ranges/take_while_view/op_deduction_guide.md</id>
      <updated>2025-06-02T15:56:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_while_view/op_deduction_guide.md b/reference/ranges/take_while_view/op_deduction_guide.md
new file mode 100644
index 000000000..318327942
--- /dev/null
+++ b/reference/ranges/take_while_view/op_deduction_guide.md
@@ -0,0 +1,56 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class R, class Pred&amp;gt;
+  take_while_view(R&amp;amp;&amp;amp;, Pred) -&amp;gt; take_while_view&amp;lt;views::all_t&amp;lt;R&amp;gt;, Pred&amp;gt;;
+}
+```
+
+## 概要
+
+[`take_while_view`](../take_while_view.md)クラステンプレートの型推論補助。
+
+この推論補助によって、元のRangeが暗黙的に[all view](../all.md)でラップされる。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+  auto pred = [](int x) { return x &amp;lt; 6; };
+
+  std::ranges::take_while_view r1{vec, pred};
+  static_assert(std::same_as&amp;lt;
+    decltype(r1),
+    std::ranges::take_while_view&amp;lt;std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;, decltype(pred)&amp;gt;
+  &amp;gt;);
+
+  std::ranges::take_while_view r2{std::vector&amp;lt;int&amp;gt;{1, 2, 3, 4, 5}, pred};
+  static_assert(std::same_as&amp;lt;
+    decltype(r2),
+    std::ranges::take_while_view&amp;lt;std::ranges::owning_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;, decltype(pred)&amp;gt;
+  &amp;gt;);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>pred -- take_while_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_while_view/pred.html"/>
      <id>85980d0f72416acc7e893a120f38db28b76d2cf0:reference/ranges/take_while_view/pred.md</id>
      <updated>2025-06-02T15:56:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_while_view/pred.md b/reference/ranges/take_while_view/pred.md
new file mode 100644
index 000000000..e39dbd2c0
--- /dev/null
+++ b/reference/ranges/take_while_view/pred.md
@@ -0,0 +1,58 @@
+# pred
+* ranges[meta header]
+* std::ranges[meta namespace]
+* take_while_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr const Pred&amp;amp; pred() const;
+```
+
+## 概要
+
+メンバ変数として保持している述語を取得する。
+
+## 戻り値
+
+述語`Pred`のオブジェクトを[`movable-box`](../movable_box.md)(C++20は[`copyable-box`](../copyable_box.md))でラップした `pred_`というメンバに保持するとして
+
+```cpp
+return *pred_;
+```
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::take_while_view twv{vec, [](int i) { return i &amp;lt; 6; }};
+
+  std::cout &amp;lt;&amp;lt; twv.pred()(3) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; twv.pred()(7) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* pred[color ff0000]
+* take_while_view[link ../take_while_view.md]
+
+### 出力
+
+```
+1
+0
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stride_view -- take_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/stride_view.html"/>
      <id>e1744f9eb4cc371687222579bbc2276f301fe1e9:reference/ranges/stride_view.md</id>
      <updated>2025-06-02T15:48:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/stride_view.md b/reference/ranges/stride_view.md
index 6f26792ce..7074702f2 100644
--- a/reference/ranges/stride_view.md
+++ b/reference/ranges/stride_view.md
@@ -44,7 +44,7 @@ namespace std::ranges {
 | [`stride`](stride_view/stride.md.nolink)                 | 1回で移動する要素数を取得する    | C++23          |
 | [`begin`](stride_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++23          |
 | [`end`](stride_view/end.md.nolink)                       | 番兵を取得する                   | C++23          |
-| [`size`](take_view/size.md.nolink)                       | 要素数を取得する                 | C++23          |
+| [`size`](stride_view/size.md.nolink)                       | 要素数を取得する                 | C++23          |
 
 ## 継承しているメンバ関数
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>take_view -- take_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_view.html"/>
      <id>e1744f9eb4cc371687222579bbc2276f301fe1e9:reference/ranges/take_view.md</id>
      <updated>2025-06-02T15:48:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_view.md b/reference/ranges/take_view.md
index c0a154b4f..4be2cc454 100644
--- a/reference/ranges/take_view.md
+++ b/reference/ranges/take_view.md
@@ -53,11 +53,11 @@ namespace std::ranges {
 
 | 名前                                             | 説明                             | 対応バージョン |
 |--------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](take_view/op_constructor.md.nolink)  | コンストラクタ                   | C++20          |
-| [`base`](take_view/base.md.nolink)                     | `V`の参照を取得する              | C++20          |
-| [`begin`](take_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
-| [`end`](take_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
-| [`size`](take_view/size.md.nolink)                     | 要素数を取得する                 | C++20          |
+| [`(constructor)`](take_view/op_constructor.md)  | コンストラクタ                   | C++20          |
+| [`base`](take_view/base.md)                     | `V`の参照を取得する              | C++20          |
+| [`begin`](take_view/begin.md)                   | 先頭を指すイテレータを取得する   | C++20          |
+| [`end`](take_view/end.md)                       | 番兵を取得する                   | C++20          |
+| [`size`](take_view/size.md)                     | 要素数を取得する                 | C++20          |
 
 `r`を元のRangeとする。`size`は[`ranges::size`](size.md)`(r)`が有効な式であるときに定義される。
 
@@ -78,7 +78,7 @@ namespace std::ranges {
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](take_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+| [`(deduction_guide)`](take_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++20          |
 
 ## 使用上の注意
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- take_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_view/base.html"/>
      <id>e1744f9eb4cc371687222579bbc2276f301fe1e9:reference/ranges/take_view/base.md</id>
      <updated>2025-06-02T15:48:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_view/base.md b/reference/ranges/take_view/base.md
new file mode 100644
index 000000000..b0303b718
--- /dev/null
+++ b/reference/ranges/take_view/base.md
@@ -0,0 +1,67 @@
+# base
+* ranges[meta header]
+* std::ranges[meta namespace]
+* take_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr V base() const &amp;amp;
+  requires copy_constructible&amp;lt;V&amp;gt;;  // (1) C++20
+
+constexpr V base() &amp;amp;&amp;amp;;             // (2) C++20
+```
+
+## 概要
+
+メンバ変数として保持している、元の`view`を取得する。
+
+## 効果
+
+入力`view`（`V`）のオブジェクトを`base_`というメンバに保持するとして
+
+- (1) : `return base_;` と等価
+- (2) : `return std::move(base_);` と等価
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using std::ranges::view;
+
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::take_view r{vec, 5};
+
+  // (1) コピーして取得
+  view auto b1 = r.base();
+
+  // (2) ムーブして取得
+  view auto b2 = std::move(r).base();
+
+  // 得られるのは元のRangeではなく、あくまでview
+  static_assert(not std::same_as&amp;lt;decltype(b1), std::vector&amp;lt;int&amp;gt;&amp;gt;);
+  static_assert(    std::same_as&amp;lt;decltype(b1), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+  static_assert(    std::same_as&amp;lt;decltype(b2), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+}
+```
+* base[color ff0000]
+
+### 出力
+
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- take_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_view/begin.html"/>
      <id>e1744f9eb4cc371687222579bbc2276f301fe1e9:reference/ranges/take_view/begin.md</id>
      <updated>2025-06-02T15:48:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_view/begin.md b/reference/ranges/take_view/begin.md
new file mode 100644
index 000000000..4dd933fbd
--- /dev/null
+++ b/reference/ranges/take_view/begin.md
@@ -0,0 +1,62 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* take_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto begin()
+  requires (!simple-view&amp;lt;V&amp;gt;);       // (1) C++20
+
+constexpr auto begin() const
+  requires range&amp;lt;const V&amp;gt;;          // (2) C++20
+```
+
+## 概要
+
+`view`の先頭要素を指すイテレータを取得する。
+
+## 戻り値
+- (1), (2) : 以下と等価：
+    ```cpp
+    return ranges::begin(base_);
+    ```
+
+ただし、`base_`は元の`view`を表すメンバ変数。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::take_view r{vec, 5};
+
+  auto it = r.begin();
+
+  int x = *it;
+  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* begin[color ff0000]
+
+### 出力
+
+```
+1
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- take_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_view/end.html"/>
      <id>e1744f9eb4cc371687222579bbc2276f301fe1e9:reference/ranges/take_view/end.md</id>
      <updated>2025-06-02T15:48:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_view/end.md b/reference/ranges/take_view/end.md
new file mode 100644
index 000000000..3fc578807
--- /dev/null
+++ b/reference/ranges/take_view/end.md
@@ -0,0 +1,74 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* take_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto end()
+  requires (!simple-view&amp;lt;V&amp;gt;);       // (1) C++20
+
+constexpr auto end() const
+  requires range&amp;lt;const V&amp;gt;;          // (2) C++20
+```
+
+## 概要
+番兵を取得する。
+
+## 戻り値
+入力が[`sized_range`](../sized_range.md)かつ[`random_access_range`](../random_access_range.md)の場合：
+- (1), (2) : 以下と等価：
+    ```cpp
+    return ranges::begin(base_) + min&amp;lt;D&amp;gt;(ranges::size(base_), count_);
+    ```
+    ここで、`D`は[`range_difference_t`](../range_difference_t.md)`&amp;lt;V&amp;gt;`。
+
+それ以外の場合：
+- (1), (2) : 以下と等価：
+    ```cpp
+    return counted_iterator{ranges::begin(base_), count_};
+    ```
+
+ただし、`base_`は元の`view`を表すメンバ変数、`count_`は取得する要素数を表すメンバ変数。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::take_view r{vec, 5};
+
+  auto it = r.begin();
+  auto end_it = r.end();
+  while (it != end_it) {
+    int x = *it;
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+    ++it;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* end[color ff0000]
+* begin[link begin.md]
+
+### 出力
+
+```
+1 2 3 4 5 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- take_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_view/op_constructor.html"/>
      <id>e1744f9eb4cc371687222579bbc2276f301fe1e9:reference/ranges/take_view/op_constructor.md</id>
      <updated>2025-06-02T15:48:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_view/op_constructor.md b/reference/ranges/take_view/op_constructor.md
new file mode 100644
index 000000000..1f371354a
--- /dev/null
+++ b/reference/ranges/take_view/op_constructor.md
@@ -0,0 +1,63 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* take_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+take_view()
+  requires default_initializable&amp;lt;V&amp;gt; = default;          // (1) C++20
+
+constexpr explicit
+  take_view(V base, range_difference_t&amp;lt;V&amp;gt; count);        // (2) C++20
+```
+
+## 概要
+
+[`take_view`](../take_view.md)オブジェクトを構築する。
+
+- (1) : デフォルト構築
+- (2) : 元となるviewと取得する要素数を指定して構築
+
+## 効果
+
+- (1) : `base_`と`count_`をデフォルト構築する
+- (2) : `base_`を`std::move(base)`で、`count_`を`count`で初期化する
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::take_view view{vec, 5};
+  for (const auto&amp;amp; x : view) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* take_view[color ff0000]
+
+### 出力
+```
+1 2 3 4 5 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.10 Take view](https://timsong-cpp.github.io/cppwp/n4861/range.take)
+- [N4950 26.7.14 Take view](https://timsong-cpp.github.io/cppwp/n4950/range.take)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- take_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_view/op_deduction_guide.html"/>
      <id>e1744f9eb4cc371687222579bbc2276f301fe1e9:reference/ranges/take_view/op_deduction_guide.md</id>
      <updated>2025-06-02T15:48:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_view/op_deduction_guide.md b/reference/ranges/take_view/op_deduction_guide.md
new file mode 100644
index 000000000..ede2a1683
--- /dev/null
+++ b/reference/ranges/take_view/op_deduction_guide.md
@@ -0,0 +1,55 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class R&amp;gt;
+  take_view(R&amp;amp;&amp;amp;, range_difference_t&amp;lt;R&amp;gt;) -&amp;gt; take_view&amp;lt;views::all_t&amp;lt;R&amp;gt;&amp;gt;;
+}
+```
+
+## 概要
+
+[`take_view`](../take_view.md)クラステンプレートの型推論補助。
+
+この推論補助によって、元のRangeが暗黙的に[all view](../all.md)でラップされる。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::take_view r1{vec, 5};
+  static_assert(std::same_as&amp;lt;
+    decltype(r1),
+    std::ranges::take_view&amp;lt;std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;
+  &amp;gt;);
+
+  std::ranges::take_view r2{std::vector&amp;lt;int&amp;gt;{1, 2, 3, 4, 5}, 3};
+  static_assert(std::same_as&amp;lt;
+    decltype(r2),
+    std::ranges::take_view&amp;lt;std::ranges::owning_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;
+  &amp;gt;);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- take_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_view/size.html"/>
      <id>e1744f9eb4cc371687222579bbc2276f301fe1e9:reference/ranges/take_view/size.md</id>
      <updated>2025-06-02T15:48:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_view/size.md b/reference/ranges/take_view/size.md
new file mode 100644
index 000000000..97866e750
--- /dev/null
+++ b/reference/ranges/take_view/size.md
@@ -0,0 +1,60 @@
+# size
+* ranges[meta header]
+* std::ranges[meta namespace]
+* take_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto size()
+  requires sized_range&amp;lt;V&amp;gt;;       // (1) C++20
+
+constexpr auto size() const
+  requires sized_range&amp;lt;const V&amp;gt;; // (2) C++20
+```
+
+## 概要
+要素数を取得する。
+
+## 効果
+入力`view`（`V`）のオブジェクトを`base_`、取得する要素数を`count_`というメンバに保持するとして、以下と等価：
+
+```cpp
+auto n = ranges::size(base_);
+return min&amp;lt;D&amp;gt;(n, static_cast&amp;lt;D&amp;gt;(count_));
+```
+* min[link /reference/algorithm/min.md]
+
+ここで、`D`は`decltype(n)`。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+  std::ranges::take_view r{vec, 5};
+
+  std::size_t n = r.size();
+  std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; std::endl;
+}
+```
+* size[color ff0000]
+
+### 出力
+```
+5
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>zip_transform_view -- take_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/zip_transform_view.html"/>
      <id>e1744f9eb4cc371687222579bbc2276f301fe1e9:reference/ranges/zip_transform_view.md</id>
      <updated>2025-06-02T15:48:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/zip_transform_view.md b/reference/ranges/zip_transform_view.md
index 93a6dda40..314dee467 100644
--- a/reference/ranges/zip_transform_view.md
+++ b/reference/ranges/zip_transform_view.md
@@ -54,7 +54,7 @@ zipするRangeのサイズが異なっている場合、`zip_transform_view`の
 | [`(constructor)`](zip_transform_view/op_constructor.md.nolink)  | コンストラクタ                   | C++23          |
 | [`begin`](zip_transform_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++23          |
 | [`end`](zip_transform_view/end.md.nolink)                       | 番兵を取得する                   | C++23          |
-| [`size`](take_view/size.md.nolink)                    | 要素数を取得する                 | C++23          |
+| [`size`](zip_transform_view/size.md.nolink)                    | 要素数を取得する                 | C++23          |
 
 ## 継承しているメンバ関数
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
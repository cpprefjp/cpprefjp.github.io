<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-12-09T13:49:00.074892</updated>
  <id>35d747b3-7044-4ad1-bb27-99a76e59c9fe</id>

  
    <entry>
      <title>operator&lt;=&gt; -- sub_matchのoperator&lt;=&gt; : オーバーロード番号の書き間違いを修正 #900</title>
      <link href="https://cpprefjp.github.io/reference/regex/sub_match/op_compare_3way.html"/>
      <id>c430f9cb2b6315140386fe4fc35f9fedec05d136:reference/regex/sub_match/op_compare_3way.md</id>
      <updated>2022-12-09T22:44:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/regex/sub_match/op_compare_3way.md b/reference/regex/sub_match/op_compare_3way.md
index ae16f6d17..af2643cdb 100644
--- a/reference/regex/sub_match/op_compare_3way.md
+++ b/reference/regex/sub_match/op_compare_3way.md
@@ -51,7 +51,9 @@ SM_CAT(I) = compare_three_way_result_t&amp;lt;basic_string&amp;lt;typename iterator_traits&amp;lt;I&amp;gt;:
 
 - (2) :
     ```cpp
-    return lhs.compare(typename sub_match&amp;lt;BiIter&amp;gt;::string_type(rhs.data(), rhs.size())) == 0;
+    return static_cast&amp;lt;SM_CAT(BiIter)&amp;gt;(lhs.compare(
+      typename sub_match&amp;lt;BiIter&amp;gt;::string_type(rhs.data(), rhs.size())
+    ) &amp;lt;=&amp;gt; 0)
     ```
     * compare[link compare.md]
     * data()[link /reference/string/basic_string/data.md]
@@ -59,13 +61,11 @@ SM_CAT(I) = compare_three_way_result_t&amp;lt;basic_string&amp;lt;typename iterator_traits&amp;lt;I&amp;gt;:
 
 - (3) :
     ```cpp
-    return static_cast&amp;lt;SM_CAT(BiIter)&amp;gt;(lhs.compare(
-      typename sub_match&amp;lt;BiIter&amp;gt;::string_type(rhs.data(), rhs.size())
+    static_cast&amp;lt;SM_CAT(BiIter)&amp;gt;(lhs.compare(
+      typename sub_match&amp;lt;BiIter&amp;gt;::string_type(1, rhs)
     ) &amp;lt;=&amp;gt; 0)
     ```
     * compare[link compare.md]
-    * data()[link /reference/string/basic_string/data.md]
-    * size()[link /reference/string/basic_string/size.md]
 
 - (4) :
     ```cpp
@@ -73,6 +73,7 @@ SM_CAT(I) = compare_three_way_result_t&amp;lt;basic_string&amp;lt;typename iterator_traits&amp;lt;I&amp;gt;:
     ```
     * compare[link compare.md]
 
+
 ## 備考
 - (1) の形式でもマッチした文字列のみが比較され、マッチした位置は考慮されない。（例を参照）
 - (2) の形式でも比較に使用する文字特性クラスは標準の [`char_traits`](../../string/char_traits.md)`&amp;lt;value_type&amp;gt;` が使用され、テンプレート引数に指定された文字特性クラス `ST` は考慮されない。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sub_match -- sub_match : 三方比較演算子と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/regex/sub_match.html"/>
      <id>4c87e24eca7cd629077caa9ccaf040cbc28c7be5:reference/regex/sub_match.md</id>
      <updated>2022-12-09T22:40:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/regex/sub_match.md b/reference/regex/sub_match.md
index 003bf8810..ae081b608 100644
--- a/reference/regex/sub_match.md
+++ b/reference/regex/sub_match.md
@@ -59,6 +59,7 @@ namespace std {
 |-----------------------------------------------|------------------------------------|----------------|
 | [`operator==`](sub_match/op_equal.md)         | 等値比較を行う                     | C++11          |
 | [`operator!=`](sub_match/op_not_equal.md)     | 非等値比較を行う                   | C++11          |
+| [`operator&amp;lt;=&amp;gt;`](sub_match/op_compare_3way.md) | 三方比較を行う                     | C++20          |
 | [`operator&amp;lt;`](sub_match/op_less.md)           | 左辺が右辺よりも小さいか判定を行う | C++11          |
 | [`operator&amp;lt;=`](sub_match/op_less_equal.md)    | 左辺が右辺以下か判定を行う         | C++11          |
 | [`operator&amp;gt;`](sub_match/op_greater.md)        | 左辺が右辺より大きいか判定を行う   | C++11          |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- sub_match : 三方比較演算子と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/regex/sub_match/op_compare_3way.html"/>
      <id>4c87e24eca7cd629077caa9ccaf040cbc28c7be5:reference/regex/sub_match/op_compare_3way.md</id>
      <updated>2022-12-09T22:40:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/regex/sub_match/op_compare_3way.md b/reference/regex/sub_match/op_compare_3way.md
new file mode 100644
index 000000000..ae16f6d17
--- /dev/null
+++ b/reference/regex/sub_match/op_compare_3way.md
@@ -0,0 +1,139 @@
+# operator&amp;lt;=&amp;gt;
+* regex[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class BiIter&amp;gt;
+  auto operator&amp;lt;=&amp;gt;(
+    const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs,
+    const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                            // (1) C++20
+
+  template &amp;lt;class BiIter, class ST, class SA&amp;gt;
+  auto operator&amp;lt;=&amp;gt;(
+    const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs,
+    const basic_string&amp;lt;
+      typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type,
+      ST,
+      SA
+    &amp;gt;&amp;amp; rhs);                                                  // (2) C++20
+
+  template &amp;lt;class BiIter&amp;gt;
+  auto operator==(
+    const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs,
+    const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type&amp;amp; rhs); // (3) C++20
+
+  template &amp;lt;class BiIter&amp;gt;
+  auto operator==(
+    const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs,
+    const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type* rhs); // (4) C++20
+}
+```
+
+## 概要
+マッチした文字列を等値比較する。
+
+
+## 戻り値
+以下の定義があるとして、
+
+```cpp
+SM_CAT(I) = compare_three_way_result_t&amp;lt;basic_string&amp;lt;typename iterator_traits&amp;lt;I&amp;gt;::value_type&amp;gt;&amp;gt;
+```
+
+- (1) :
+    ```cpp
+    return static_cast&amp;lt;SM_CAT(BiIter)&amp;gt;(lhs.compare(rhs) &amp;lt;=&amp;gt; 0);
+    ```
+    * compare[link compare.md]
+
+- (2) :
+    ```cpp
+    return lhs.compare(typename sub_match&amp;lt;BiIter&amp;gt;::string_type(rhs.data(), rhs.size())) == 0;
+    ```
+    * compare[link compare.md]
+    * data()[link /reference/string/basic_string/data.md]
+    * size()[link /reference/string/basic_string/size.md]
+
+- (3) :
+    ```cpp
+    return static_cast&amp;lt;SM_CAT(BiIter)&amp;gt;(lhs.compare(
+      typename sub_match&amp;lt;BiIter&amp;gt;::string_type(rhs.data(), rhs.size())
+    ) &amp;lt;=&amp;gt; 0)
+    ```
+    * compare[link compare.md]
+    * data()[link /reference/string/basic_string/data.md]
+    * size()[link /reference/string/basic_string/size.md]
+
+- (4) :
+    ```cpp
+    return static_cast&amp;lt;SM_CAT(BiIter)&amp;gt;(lhs.compare(rhs) &amp;lt;=&amp;gt; 0);
+    ```
+    * compare[link compare.md]
+
+## 備考
+- (1) の形式でもマッチした文字列のみが比較され、マッチした位置は考慮されない。（例を参照）
+- (2) の形式でも比較に使用する文字特性クラスは標準の [`char_traits`](../../string/char_traits.md)`&amp;lt;value_type&amp;gt;` が使用され、テンプレート引数に指定された文字特性クラス `ST` は考慮されない。
+- この演算子により、以下の演算子が使用可能にになる：
+    - `operator&amp;lt;`
+    - `operator&amp;lt;=`
+    - `operator&amp;gt;`
+    - `operator&amp;gt;=`
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;regex&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  const char ca[] = &amp;#34;abc abc&amp;#34;;
+  const std::regex re(R&amp;#34;((\w+) (\w+))&amp;#34;);
+
+  std::cmatch m;
+  if (std::regex_search(ca, m, re)) {
+    std::csub_match sub1 = m[1];
+    std::csub_match sub2 = m[2];
+    const std::string s1 = &amp;#34;abc&amp;#34;;
+    const std::string s2 = &amp;#34;ABC&amp;#34;;
+    std::cout &amp;lt;&amp;lt; std::boolalpha
+              &amp;lt;&amp;lt; ((sub1  &amp;lt;=&amp;gt; sub2 ) == 0) &amp;lt;&amp;lt; std::endl  // (1) の形式
+              &amp;lt;&amp;lt; ((sub1  &amp;lt;=&amp;gt; s2   ) == 0) &amp;lt;&amp;lt; std::endl  // (2) の形式
+              &amp;lt;&amp;lt; ((sub1  &amp;lt;=&amp;gt; &amp;#34;abc&amp;#34;) == 0) &amp;lt;&amp;lt; std::endl  // (3) の形式
+              &amp;lt;&amp;lt; ((sub1  &amp;lt;=&amp;gt; &amp;#39;a&amp;#39;  ) == 0) &amp;lt;&amp;lt; std::endl; // (4) の形式
+  } else {
+    std::cout &amp;lt;&amp;lt; &amp;#34;not match&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* &amp;lt;=&amp;gt;[color ff0000]
+* std::regex[link ../basic_regex.md]
+* std::cmatch[link ../match_results.md]
+* std::regex_search[link ../regex_search.md]
+* std::csub_match[link ../sub_match.md]
+
+### 出力
+```
+true
+false
+true
+false
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang):
+- [GCC](/implementation.md#gcc): 10
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- sub_match : 三方比較演算子と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/regex/sub_match/op_equal.html"/>
      <id>4c87e24eca7cd629077caa9ccaf040cbc28c7be5:reference/regex/sub_match/op_equal.md</id>
      <updated>2022-12-09T22:40:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/regex/sub_match/op_equal.md b/reference/regex/sub_match/op_equal.md
index 1aa4022dc..0b1371856 100644
--- a/reference/regex/sub_match/op_equal.md
+++ b/reference/regex/sub_match/op_equal.md
@@ -1,4 +1,4 @@
-# operator== (非メンバ関数)
+# operator==
 * regex[meta header]
 * std[meta namespace]
 * function template[meta id-type]
@@ -7,37 +7,48 @@
 ```cpp
 namespace std {
   template &amp;lt;class BiIter&amp;gt;
-    bool operator==(const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs, const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);        // (1)
-
-  template &amp;lt;class BiIter, class ST, class SA&amp;gt;
     bool operator==(
-      const basic_string&amp;lt;typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type, ST, SA&amp;gt;&amp;amp; lhs,
-      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                                                    // (2)
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs,
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                            // (1) C++11
 
   template &amp;lt;class BiIter, class ST, class SA&amp;gt;
     bool operator==(
       const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs,
-      const basic_string&amp;lt;typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type, ST, SA&amp;gt;&amp;amp; rhs)    // (3)
+      const basic_string&amp;lt;
+        typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type,
+        ST,
+        SA
+      &amp;gt;&amp;amp; rhs);                                                  // (2) C++11
 
   template &amp;lt;class BiIter&amp;gt;
     bool operator==(
-      const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type* lhs,
-      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                                                    // (4)
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs,
+      const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type&amp;amp; rhs); // (3) C++11
 
   template &amp;lt;class BiIter&amp;gt;
     bool operator==(
       const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs,
-      const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type* rhs);                         // (5)
+      const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type* rhs); // (4) C++11
+
+  // operator==により、以下のオーバーロードが使用可能になる (C++20)
+  template &amp;lt;class BiIter, class ST, class SA&amp;gt;
+    bool operator==(
+      const basic_string&amp;lt;
+        typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type,
+        ST,
+        SA
+      &amp;gt;&amp;amp; lhs,
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                            // (5) C++11
 
   template &amp;lt;class BiIter&amp;gt;
     bool operator==(
-      const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type&amp;amp; lhs,
-      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                                                    // (6)
+      const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type* lhs,
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                            // (6) C++11
 
   template &amp;lt;class BiIter&amp;gt;
     bool operator==(
-      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs,
-      const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type&amp;amp; rhs);                         // (7)
+      const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type&amp;amp; lhs,
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                            // (7) C++11
 }
 ```
 
@@ -47,18 +58,20 @@ namespace std {
 
 ## 戻り値
 - (1) `lhs.`[`compare`](compare.md)`(rhs) == 0`
-- (2) `rhs.`[`compare`](compare.md)`(typename` [`sub_match`](../sub_match.md)`&amp;lt;BiIter&amp;gt;::string_type(lhs.`[`data`](../../string/basic_string/data.md)`(), lhs.`[`size`](../../string/basic_string/size.md)`())) == 0`  
-	なお、C++11 の規格書では `rhs.`[`compare`](compare.md)`(lhs.`[`c_str`](../../string/basic_string/c_str.md)`()) == 0` となっているが、この式では `lhs` に `&amp;#39;\0&amp;#39;` が含まれていた場合に正しく比較することができないため、規格上の誤りとして上記の式に修正された。
-- (3) `lhs.`[`compare`](compare.md)`(typename` [`sub_match`](../sub_match.md)`&amp;lt;BiIter&amp;gt;::string_type(rhs.`[`data`](../../string/basic_string/data.md)`(), rhs.`[`size`](../../string/basic_string/size.md)`())) == 0`  
-	なお、C++11 の規格書では `lhs.`[`compare`](compare.md)`(rhs.`[`c_str`](../../string/basic_string/c_str.md)`()) == 0` となっているが、この式では `rhs` に `&amp;#39;\0&amp;#39;` が含まれていた場合に正しく比較することができないため、規格上の誤りとして上記の式に修正された。
-- (4) `rhs.`[`compare`](compare.md)`(lhs) == 0`
-- (5) `lhs.`[`compare`](compare.md)`(rhs) == 0`
-- (6) `rhs.`[`compare`](compare.md)`(typename` [`sub_match`](../sub_match.md)`&amp;lt;BiIter&amp;gt;::string_type(1, lhs)) == 0`
-- (7) `lhs.`[`compare`](compare.md)`(typename` [`sub_match`](../sub_match.md)`&amp;lt;BiIter&amp;gt;::string_type(1, rhs)) == 0`
+- (2) `lhs.`[`compare`](compare.md)`(typename` [`sub_match`](../sub_match.md)`&amp;lt;BiIter&amp;gt;::string_type(rhs.`[`data`](../../string/basic_string/data.md)`(), rhs.`[`size`](../../string/basic_string/size.md)`())) == 0`  
+- (3) `lhs.`[`compare`](compare.md)`(rhs) == 0`
+- (4) `lhs.`[`compare`](compare.md)`(typename` [`sub_match`](../sub_match.md)`&amp;lt;BiIter&amp;gt;::string_type(1, rhs)) == 0`
+- (5) `rhs.`[`compare`](compare.md)`(typename` [`sub_match`](../sub_match.md)`&amp;lt;BiIter&amp;gt;::string_type(lhs.`[`data`](../../string/basic_string/data.md)`(), lhs.`[`size`](../../string/basic_string/size.md)`())) == 0`  
+    なお、C++11 の規格書では `rhs.`[`compare`](compare.md)`(lhs.`[`c_str`](../../string/basic_string/c_str.md)`()) == 0` となっているが、この式では `lhs` に `&amp;#39;\0&amp;#39;` が含まれていた場合に正しく比較することができないため、規格上の誤りとして上記の式に修正された。
+    なお、C++11 の規格書では `lhs.`[`compare`](compare.md)`(rhs.`[`c_str`](../../string/basic_string/c_str.md)`()) == 0` となっているが、この式では `rhs` に `&amp;#39;\0&amp;#39;` が含まれていた場合に正しく比較することができないため、規格上の誤りとして上記の式に修正された。
+- (6) `rhs.`[`compare`](compare.md)`(lhs) == 0`
+- (7) `rhs.`[`compare`](compare.md)`(typename` [`sub_match`](../sub_match.md)`&amp;lt;BiIter&amp;gt;::string_type(1, lhs)) == 0`
 
 ## 備考
 - (1) の形式でもマッチした文字列のみが比較され、マッチした位置は考慮されない。（例を参照）
-- (2)、および、(3) の形式でも比較に使用する文字特性クラスは標準の [`char_traits`](../../string/char_traits.md)`&amp;lt;value_type&amp;gt;` が使用され、テンプレート引数に指定された文字特性クラス `ST` は考慮されない。
+- (2)、および、(5) の形式でも比較に使用する文字特性クラスは標準の [`char_traits`](../../string/char_traits.md)`&amp;lt;value_type&amp;gt;` が使用され、テンプレート引数に指定された文字特性クラス `ST` は考慮されない。
+- この演算子により、以下の演算子が使用可能にになる (C++20)：
+    - `operator!=`
 
 
 ## 例
@@ -80,12 +93,12 @@ int main()
     const std::string s2 = &amp;#34;ABC&amp;#34;;
     std::cout &amp;lt;&amp;lt; std::boolalpha
               &amp;lt;&amp;lt; (sub1  == sub2 ) &amp;lt;&amp;lt; std::endl  // (1) の形式
-              &amp;lt;&amp;lt; (s1    == sub2 ) &amp;lt;&amp;lt; std::endl  // (2) の形式
-              &amp;lt;&amp;lt; (sub1  == s2   ) &amp;lt;&amp;lt; std::endl  // (3) の形式
-              &amp;lt;&amp;lt; (&amp;#34;ABC&amp;#34; == sub2 ) &amp;lt;&amp;lt; std::endl  // (4) の形式
-              &amp;lt;&amp;lt; (sub1  == &amp;#34;abc&amp;#34;) &amp;lt;&amp;lt; std::endl  // (5) の形式
-              &amp;lt;&amp;lt; (&amp;#39;A&amp;#39;   == sub2 ) &amp;lt;&amp;lt; std::endl  // (6) の形式
-              &amp;lt;&amp;lt; (sub1  == &amp;#39;a&amp;#39;  ) &amp;lt;&amp;lt; std::endl; // (7) の形式
+              &amp;lt;&amp;lt; (sub1  == s2   ) &amp;lt;&amp;lt; std::endl  // (2) の形式
+              &amp;lt;&amp;lt; (sub1  == &amp;#34;abc&amp;#34;) &amp;lt;&amp;lt; std::endl  // (3) の形式
+              &amp;lt;&amp;lt; (sub1  == &amp;#39;a&amp;#39;  ) &amp;lt;&amp;lt; std::endl  // (4) の形式
+              &amp;lt;&amp;lt; (s1    == sub2 ) &amp;lt;&amp;lt; std::endl  // (5) の形式
+              &amp;lt;&amp;lt; (&amp;#34;ABC&amp;#34; == sub2 ) &amp;lt;&amp;lt; std::endl  // (6) の形式
+              &amp;lt;&amp;lt; (&amp;#39;A&amp;#39;   == sub2 ) &amp;lt;&amp;lt; std::endl; // (7) の形式
   } else {
     std::cout &amp;lt;&amp;lt; &amp;#34;not match&amp;#34; &amp;lt;&amp;lt; std::endl;
   }
@@ -100,8 +113,8 @@ int main()
 ### 出力
 ```
 true
-true
 false
+true
 false
 true
 false
@@ -114,8 +127,11 @@ false
 - C++11
 
 ### 処理系
-- [Clang](/implementation.md#clang): -
 - [Clang](/implementation.md#clang): 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6
 - [GCC](/implementation.md#gcc): 4.9.0, 4.9.1, 5.0.0
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt; -- sub_match : 三方比較演算子と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/regex/sub_match/op_greater.html"/>
      <id>4c87e24eca7cd629077caa9ccaf040cbc28c7be5:reference/regex/sub_match/op_greater.md</id>
      <updated>2022-12-09T22:40:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/regex/sub_match/op_greater.md b/reference/regex/sub_match/op_greater.md
index 91f04d8ac..c48dabd22 100644
--- a/reference/regex/sub_match/op_greater.md
+++ b/reference/regex/sub_match/op_greater.md
@@ -1,4 +1,4 @@
-# operator&amp;gt; (非メンバ関数)
+# operator&amp;gt;
 * regex[meta header]
 * std[meta namespace]
 * function template[meta id-type]
@@ -6,38 +6,49 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class BiIter&amp;gt;
-    bool operator&amp;gt;(const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs, const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);         // (1)
+    bool operator&amp;gt;(
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs,
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);         // (1) C++11
 
   template &amp;lt;class BiIter, class ST, class SA&amp;gt;
     bool operator&amp;gt;(
-      const basic_string&amp;lt;typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type, ST, SA&amp;gt;&amp;amp; lhs,
-      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                                                    // (2)
+      const basic_string&amp;lt;
+        typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type,
+        ST,
+        SA
+      &amp;gt;&amp;amp; lhs,
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                            // (2) C++11
 
   template &amp;lt;class BiIter, class ST, class SA&amp;gt;
     bool operator&amp;gt;(
       const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs,
-      const basic_string&amp;lt;typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type, ST, SA&amp;gt;&amp;amp; rhs)    // (3)
+      const basic_string&amp;lt;
+        typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type,
+        ST,
+        SA
+      &amp;gt;&amp;amp; rhs);                                                  // (3) C++11
 
   template &amp;lt;class BiIter&amp;gt;
     bool operator&amp;gt;(
       const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type* lhs,
-      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                                                    // (4)
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                            // (4) C++11
 
   template &amp;lt;class BiIter&amp;gt;
     bool operator&amp;gt;(
       const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs,
-      const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type* rhs);                         // (5)
+      const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type* rhs); // (5) C++11
 
   template &amp;lt;class BiIter&amp;gt;
     bool operator&amp;gt;(
       const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type&amp;amp; lhs,
-      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                                                    // (6)
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                            // (6) C++11
 
   template &amp;lt;class BiIter&amp;gt;
     bool operator&amp;gt;(
       const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs,
-      const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type&amp;amp; rhs);                         // (7)
+      const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type&amp;amp; rhs); // (7) C++11
 }
 ```
 
@@ -106,8 +117,12 @@ true
 - C++11
 
 ### 処理系
-- [Clang](/implementation.md#clang): -
 - [Clang](/implementation.md#clang): 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6
 - [GCC](/implementation.md#gcc): 4.9.0, 4.9.1, 5.0.0
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= -- sub_match : 三方比較演算子と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/regex/sub_match/op_greater_equal.html"/>
      <id>4c87e24eca7cd629077caa9ccaf040cbc28c7be5:reference/regex/sub_match/op_greater_equal.md</id>
      <updated>2022-12-09T22:40:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/regex/sub_match/op_greater_equal.md b/reference/regex/sub_match/op_greater_equal.md
index 4e351f460..ad6dc8425 100644
--- a/reference/regex/sub_match/op_greater_equal.md
+++ b/reference/regex/sub_match/op_greater_equal.md
@@ -1,4 +1,4 @@
-# operator&amp;gt;= (非メンバ関数)
+# operator&amp;gt;=
 * regex[meta header]
 * std[meta namespace]
 * function template[meta id-type]
@@ -6,38 +6,49 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class BiIter&amp;gt;
-    bool operator&amp;gt;=(const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs, const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);        // (1)
+    bool operator&amp;gt;=(
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs,
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                            // (1) C++11
 
   template &amp;lt;class BiIter, class ST, class SA&amp;gt;
     bool operator&amp;gt;=(
-      const basic_string&amp;lt;typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type, ST, SA&amp;gt;&amp;amp; lhs,
-      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                                                    // (2)
+      const basic_string&amp;lt;
+        typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type,
+        ST,
+        SA
+      &amp;gt;&amp;amp; lhs,
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                            // (2) C++11
 
   template &amp;lt;class BiIter, class ST, class SA&amp;gt;
     bool operator&amp;gt;=(
       const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs,
-      const basic_string&amp;lt;typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type, ST, SA&amp;gt;&amp;amp; rhs)    // (3)
+      const basic_string&amp;lt;
+        typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type,
+        ST,
+        SA
+      &amp;gt;&amp;amp; rhs);                                                  // (3) C++11
 
   template &amp;lt;class BiIter&amp;gt;
     bool operator&amp;gt;=(
       const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type* lhs,
-      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                                                    // (4)
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                            // (4) C++11
 
   template &amp;lt;class BiIter&amp;gt;
     bool operator&amp;gt;=(
       const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs,
-      const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type* rhs);                         // (5)
+      const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type* rhs); // (5) C++11
 
   template &amp;lt;class BiIter&amp;gt;
     bool operator&amp;gt;=(
       const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type&amp;amp; lhs,
-      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                                                    // (6)
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                            // (6) C++11
 
   template &amp;lt;class BiIter&amp;gt;
     bool operator&amp;gt;=(
       const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs,
-      const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type&amp;amp; rhs);                         // (7)
+      const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type&amp;amp; rhs); // (7) C++11
 }
 ```
 
@@ -106,8 +117,12 @@ true
 - C++11
 
 ### 処理系
-- [Clang](/implementation.md#clang): -
 - [Clang](/implementation.md#clang): 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6
 - [GCC](/implementation.md#gcc): 4.9.0, 4.9.1, 5.0.0
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- sub_match : 三方比較演算子と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/regex/sub_match/op_less.html"/>
      <id>4c87e24eca7cd629077caa9ccaf040cbc28c7be5:reference/regex/sub_match/op_less.md</id>
      <updated>2022-12-09T22:40:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/regex/sub_match/op_less.md b/reference/regex/sub_match/op_less.md
index d37dd0a9e..cb24b9058 100644
--- a/reference/regex/sub_match/op_less.md
+++ b/reference/regex/sub_match/op_less.md
@@ -1,4 +1,4 @@
-# operator&amp;lt; (非メンバ関数)
+# operator&amp;lt;
 * regex[meta header]
 * std[meta namespace]
 * function template[meta id-type]
@@ -6,38 +6,49 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class BiIter&amp;gt;
-    bool operator&amp;lt;(const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs, const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);         // (1)
+    bool operator&amp;lt;(
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs,
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                            // (1) C++11
 
   template &amp;lt;class BiIter, class ST, class SA&amp;gt;
     bool operator&amp;lt;(
-      const basic_string&amp;lt;typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type, ST, SA&amp;gt;&amp;amp; lhs,
-      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                                                    // (2)
+      const basic_string&amp;lt;
+        typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type,
+        ST,
+        SA
+      &amp;gt;&amp;amp; lhs,
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                            // (2) C++11
 
   template &amp;lt;class BiIter, class ST, class SA&amp;gt;
     bool operator&amp;lt;(
       const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs,
-      const basic_string&amp;lt;typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type, ST, SA&amp;gt;&amp;amp; rhs)    // (3)
+      const basic_string&amp;lt;
+        typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type,
+        ST,
+        SA
+      &amp;gt;&amp;amp; rhs)                                                   // (3) C++11
 
   template &amp;lt;class BiIter&amp;gt;
     bool operator&amp;lt;(
       const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type* lhs,
-      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                                                    // (4)
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                            // (4) C++11
 
   template &amp;lt;class BiIter&amp;gt;
     bool operator&amp;lt;(
       const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs,
-      const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type* rhs);                         // (5)
+      const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type* rhs); // (5) C++11
 
   template &amp;lt;class BiIter&amp;gt;
     bool operator&amp;lt;(
       const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type&amp;amp; lhs,
-      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                                                    // (6)
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                            // (6) C++11
 
   template &amp;lt;class BiIter&amp;gt;
     bool operator&amp;lt;(
       const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs,
-      const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type&amp;amp; rhs);                         // (7)
+      const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type&amp;amp; rhs); // (7) C++11
 }
 ```
 
@@ -113,8 +124,11 @@ false
 - C++11
 
 ### 処理系
-- [Clang](/implementation.md#clang): -
 - [Clang](/implementation.md#clang): 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6
 - [GCC](/implementation.md#gcc): 4.9.0, 4.9.1, 5.0.0
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;= -- sub_match : 三方比較演算子と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/regex/sub_match/op_less_equal.html"/>
      <id>4c87e24eca7cd629077caa9ccaf040cbc28c7be5:reference/regex/sub_match/op_less_equal.md</id>
      <updated>2022-12-09T22:40:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/regex/sub_match/op_less_equal.md b/reference/regex/sub_match/op_less_equal.md
index eb27451af..493ea706b 100644
--- a/reference/regex/sub_match/op_less_equal.md
+++ b/reference/regex/sub_match/op_less_equal.md
@@ -1,4 +1,4 @@
-# operator&amp;lt;= (非メンバ関数)
+# operator&amp;lt;=
 * regex[meta header]
 * std[meta namespace]
 * function template[meta id-type]
@@ -6,38 +6,49 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class BiIter&amp;gt;
-    bool operator&amp;lt;=(const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs, const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);        // (1)
+    bool operator&amp;lt;=(
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs,
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                            // (1) C++11
 
   template &amp;lt;class BiIter, class ST, class SA&amp;gt;
     bool operator&amp;lt;=(
-      const basic_string&amp;lt;typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type, ST, SA&amp;gt;&amp;amp; lhs,
-      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                                                    // (2)
+      const basic_string&amp;lt;
+        typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type,
+        ST,
+        SA
+      &amp;gt;&amp;amp; lhs,
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                            // (2) C++11
 
   template &amp;lt;class BiIter, class ST, class SA&amp;gt;
     bool operator&amp;lt;=(
       const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs,
-      const basic_string&amp;lt;typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type, ST, SA&amp;gt;&amp;amp; rhs)    // (3)
+      const basic_string&amp;lt;
+        typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type,
+        ST,
+        SA
+      &amp;gt;&amp;amp; rhs);                                                  // (3) C++11
 
   template &amp;lt;class BiIter&amp;gt;
     bool operator&amp;lt;=(
       const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type* lhs,
-      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                                                    // (4)
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                            // (4) C++11
 
   template &amp;lt;class BiIter&amp;gt;
     bool operator&amp;lt;=(
       const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs,
-      const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type* rhs);                         // (5)
+      const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type* rhs); // (5) C++11
 
   template &amp;lt;class BiIter&amp;gt;
     bool operator&amp;lt;=(
       const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type&amp;amp; lhs,
-      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                                                    // (6)
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                            // (6) C++11
 
   template &amp;lt;class BiIter&amp;gt;
     bool operator&amp;lt;=(
       const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs,
-      const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type&amp;amp; rhs);                         // (7)
+      const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type&amp;amp; rhs); // (7) C++11
 }
 ```
 
@@ -106,8 +117,11 @@ false
 - C++11
 
 ### 処理系
-- [Clang](/implementation.md#clang): -
 - [Clang](/implementation.md#clang): 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6
 - [GCC](/implementation.md#gcc): 4.9.0, 4.9.1, 5.0.0
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- sub_match : 三方比較演算子と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/regex/sub_match/op_not_equal.html"/>
      <id>4c87e24eca7cd629077caa9ccaf040cbc28c7be5:reference/regex/sub_match/op_not_equal.md</id>
      <updated>2022-12-09T22:40:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/regex/sub_match/op_not_equal.md b/reference/regex/sub_match/op_not_equal.md
index ae3e3a2b2..2d5b2b153 100644
--- a/reference/regex/sub_match/op_not_equal.md
+++ b/reference/regex/sub_match/op_not_equal.md
@@ -1,4 +1,4 @@
-# operator!= (非メンバ関数)
+# operator!=
 * regex[meta header]
 * std[meta namespace]
 * function template[meta id-type]
@@ -6,38 +6,49 @@
 
 ```cpp
 namespace std {
+  // operator==により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class BiIter&amp;gt;
-    bool operator!=(const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs, const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);        // (1)
+    bool operator!=(
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs,
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                            // (1) C++11
 
   template &amp;lt;class BiIter, class ST, class SA&amp;gt;
     bool operator!=(
-      const basic_string&amp;lt;typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type, ST, SA&amp;gt;&amp;amp; lhs,
-      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                                                    // (2)
+      const basic_string&amp;lt;
+        typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type,
+        ST,
+        SA
+      &amp;gt;&amp;amp; lhs,
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                            // (2) C++11
 
   template &amp;lt;class BiIter, class ST, class SA&amp;gt;
     bool operator!=(
       const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs,
-      const basic_string&amp;lt;typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type, ST, SA&amp;gt;&amp;amp; rhs)    // (3)
+      const basic_string&amp;lt;
+        typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type,
+        ST,
+        SA
+      &amp;gt;&amp;amp; rhs);                                                  // (3) C++11
 
   template &amp;lt;class BiIter&amp;gt;
     bool operator!=(
       const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type* lhs,
-      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                                                    // (4)
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                            // (4) C++11
 
   template &amp;lt;class BiIter&amp;gt;
     bool operator!=(
       const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs,
-      const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type* rhs);                         // (5)
+      const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type* rhs); // (5) C++11
 
   template &amp;lt;class BiIter&amp;gt;
     bool operator!=(
       const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type&amp;amp; lhs,
-      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                                                    // (6)
+      const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; rhs);                            // (6) C++11
 
   template &amp;lt;class BiIter&amp;gt;
     bool operator!=(
       const sub_match&amp;lt;BiIter&amp;gt;&amp;amp; lhs,
-      const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type&amp;amp; rhs);                         // (7)
+      const typename iterator_traits&amp;lt;BiIter&amp;gt;::value_type&amp;amp; rhs); // (7) C++11
 }
 ```
 
@@ -106,8 +117,11 @@ true
 - C++11
 
 ### 処理系
-- [Clang](/implementation.md#clang): -
 - [Clang](/implementation.md#clang): 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6
 - [GCC](/implementation.md#gcc): 4.9.0, 4.9.1, 5.0.0
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>id -- thread::id : 三方比較演算子と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/thread/thread/id.html"/>
      <id>bfd7d7077b27d086b8a8e5f3479badfe311896b5:reference/thread/thread/id.md</id>
      <updated>2022-12-09T22:09:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/thread/id.md b/reference/thread/thread/id.md
index 7f2fbc712..e2be00e8a 100644
--- a/reference/thread/thread/id.md
+++ b/reference/thread/thread/id.md
@@ -48,11 +48,12 @@ namespace std {
 | 名前 | 説明 | 対応バージョン |
 |--------------|------------------------------------|-------|
 | `operator==` | 等値比較                           | C++11 |
-| `operator!=` | 非等値比較                         | C++11 |
-| `operator&amp;lt;`  | 左辺が右辺より小さいかの判定を行う | C++11 |
-| `operator&amp;lt;=` | 左辺が右辺以下かの判定を行う       | C++11 |
-| `operator&amp;gt;`  | 左辺が右辺より大きいかの判定を行う | C++11 |
-| `operator&amp;gt;=` | 左辺が右辺以上かの判定を行う       | C++11 |
+| `operator!=` | 非等値比較 (C++20から`operator==`により使用可能)                         | C++11 |
+| `operator&amp;lt;`  | 左辺が右辺より小さいかの判定を行う (C++20から`operator==`により使用可能) | C++11 |
+| `operator&amp;lt;=` | 左辺が右辺以下かの判定を行う (C++20から`operator==`により使用可能)       | C++11 |
+| `operator&amp;gt;`  | 左辺が右辺より大きいかの判定を行う (C++20から`operator==`により使用可能) | C++11 |
+| `operator&amp;gt;=` | 左辺が右辺以上かの判定を行う (C++20から`operator==`により使用可能)       | C++11 |
+| `strong_ordering operator&amp;lt;=&amp;gt;(thread::id x, thread::id y) noexcept;` | 三方比較 | C++20 |
 
 ### ストリーム出力
 
@@ -100,4 +101,5 @@ main=824a30
 
 ## 参照
 - [LWG Issue 783. `thread::id` reuse](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#783)
-
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>locale -- locale : operator!=の自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/locale/locale.html"/>
      <id>b23dafa4171aa52f6864a73bd5fecf95869aa7ca:reference/locale/locale.md</id>
      <updated>2022-12-09T22:00:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/locale/locale.md b/reference/locale/locale.md
index ddbc79cea..76447a619 100644
--- a/reference/locale/locale.md
+++ b/reference/locale/locale.md
@@ -21,8 +21,8 @@ namespace std {
 | `operator=` | 代入演算子 |
 | `combine` | 合成 |
 | `name` | 名前の取得 |
-| `operator==` | 等値比較 |
-| `operator!=` | 非等値比較 |
+| [`operator==`](locale/op_equal.md) | 等値比較 |
+| [`operator!=`](locale/op_not_equal.md) | 非等値比較 |
 | `operator()` | 照合オブジェクトを使用した文字列比較 |
 
 ### 静的メンバ関数
@@ -43,7 +43,7 @@ namespace std {
 ### メンバ定数
 
 | 名前 | 説明 |
-|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------|
+|------|------|
 | `static const category none = 0;` | ファセットなし |
 | `static const category collate = 0x10;` | 照合ファセット |
 | `static const category ctype = 0x20;` | 文字分類ファセット |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- locale : operator!=の自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/locale/locale/op_equal.html"/>
      <id>b23dafa4171aa52f6864a73bd5fecf95869aa7ca:reference/locale/locale/op_equal.md</id>
      <updated>2022-12-09T22:00:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/locale/locale/op_equal.md b/reference/locale/locale/op_equal.md
new file mode 100644
index 000000000..c1ce55b1a
--- /dev/null
+++ b/reference/locale/locale/op_equal.md
@@ -0,0 +1,38 @@
+# operator==
+* locale[meta header]
+* std[meta namespace]
+* locale[meta class]
+* function[meta id-type]
+
+```cpp
+bool operator==(const locale&amp;amp; other) const; // (1) C++03
+```
+
+## 概要
+`locale`オブジェクトの等値比較を行う。
+
+
+## 戻り値
+両方が同じロケールである場合、または一方が他方のコピーである場合、またはそれぞれに名前があり、名前が同一である場合は`true`、それ以外の場合は`false`を返す。
+
+
+## 例
+```cpp
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;locale&amp;gt;
+
+int main()
+{
+  std::locale a = std::locale::classic();
+  std::locale b = std::locale::classic();
+  std::locale c(&amp;#34;&amp;#34;);
+
+  assert(a == b);
+  assert(!(a == c));
+}
+```
+
+### 出力
+```
+```
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- locale : operator!=の自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/locale/locale/op_not_equal.html"/>
      <id>b23dafa4171aa52f6864a73bd5fecf95869aa7ca:reference/locale/locale/op_not_equal.md</id>
      <updated>2022-12-09T22:00:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/locale/locale/op_not_equal.md b/reference/locale/locale/op_not_equal.md
new file mode 100644
index 000000000..797c53a6a
--- /dev/null
+++ b/reference/locale/locale/op_not_equal.md
@@ -0,0 +1,43 @@
+# operator!=
+* locale[meta header]
+* std[meta namespace]
+* locale[meta class]
+* function[meta id-type]
+
+```cpp
+// operator==により、以下のオーバーロードが使用可能になる (C++20)
+bool operator!=(const locale&amp;amp; other) const; // (1) C++03
+```
+
+## 概要
+`locale`オブジェクトの非等値比較を行う。
+
+
+## 戻り値
+```cpp
+return !(*this == other);
+```
+
+## 例
+```cpp
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;locale&amp;gt;
+
+int main()
+{
+  std::locale a = std::locale::classic();
+  std::locale b = std::locale::classic();
+  std::locale c(&amp;#34;&amp;#34;);
+
+  assert(!(a != b));
+  assert(a != c);
+}
+```
+
+### 出力
+```
+```
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>directory_entry -- directory_entry : 三方比較演算子と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/directory_entry.html"/>
      <id>a3d02b70063e2532908d357ba22c4bce6f752739:reference/filesystem/directory_entry.md</id>
      <updated>2022-12-09T21:49:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/directory_entry.md b/reference/filesystem/directory_entry.md
index b7cd1cd1a..c254e2206 100644
--- a/reference/filesystem/directory_entry.md
+++ b/reference/filesystem/directory_entry.md
@@ -63,6 +63,7 @@ namespace std::filesystem {
 |------------------------------------------------------|-------------|-------|
 | [`operator==`](directory_entry/op_equal.md)         | 等値比較 | C++17 |
 | [`operator!=`](directory_entry/op_not_equal.md)     | 非等値比較 | C++17 |
+| [`operator&amp;lt;=&amp;gt;`](directory_entry/op_compare_3way.md) | 三方比較 | C++20 |
 | [`operator&amp;lt;`](directory_entry/op_less.md)           | 左辺が右辺より小さいかの判定を行う | C++17 |
 | [`operator&amp;lt;=`](directory_entry/op_less_equal.md)    | 左辺が右辺以下かの判定を行う | C++17 |
 | [`operator&amp;gt;`](directory_entry/op_greater.md)        | 左辺が右辺より大きいかの判定を行う | C++17 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- directory_entry : 三方比較演算子と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/directory_entry/op_compare_3way.html"/>
      <id>a3d02b70063e2532908d357ba22c4bce6f752739:reference/filesystem/directory_entry/op_compare_3way.md</id>
      <updated>2022-12-09T21:49:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/directory_entry/op_compare_3way.md b/reference/filesystem/directory_entry/op_compare_3way.md
new file mode 100644
index 000000000..1a2619d49
--- /dev/null
+++ b/reference/filesystem/directory_entry/op_compare_3way.md
@@ -0,0 +1,70 @@
+# operator&amp;lt;=&amp;gt;
+* filesystem[meta header]
+* std::filesystem[meta namespace]
+* directory_entry[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+strong_ordering operator&amp;lt;=&amp;gt;(const directory_entry&amp;amp; rhs) const noexcept; // (1) C++20
+```
+
+## 概要
+`directory_entry`オブジェクトを参照比較する。
+
+
+## 戻り値
+```cpp
+return path() &amp;lt;=&amp;gt; rhs.path();
+```
+* path()[link path.md]
+
+
+## 例外
+投げない
+
+
+## 備考
+- この演算子により、以下の演算子が使用可能になる：
+    - `operator&amp;lt;`
+    - `operator&amp;lt;=`
+    - `operator&amp;gt;`
+    - `operator&amp;gt;=`
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;filesystem&amp;gt;
+
+namespace fs = std::filesystem;
+
+int main()
+{
+  fs::directory_entry x{&amp;#34;a.txt&amp;#34;};
+  fs::directory_entry y{&amp;#34;a.txt&amp;#34;};
+
+  if ((x &amp;lt;=&amp;gt; y) == 0) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;equal&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+
+### 出力
+```
+equal
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang):
+- [GCC](/implementation.md#gcc): 10
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- directory_entry : 三方比較演算子と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/directory_entry/op_equal.html"/>
      <id>a3d02b70063e2532908d357ba22c4bce6f752739:reference/filesystem/directory_entry/op_equal.md</id>
      <updated>2022-12-09T21:49:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/directory_entry/op_equal.md b/reference/filesystem/directory_entry/op_equal.md
index 611d80a9d..fc55346cc 100644
--- a/reference/filesystem/directory_entry/op_equal.md
+++ b/reference/filesystem/directory_entry/op_equal.md
@@ -6,7 +6,7 @@
 * cpp17[meta cpp]
 
 ```cpp
-bool operator==(const directory_entry&amp;amp; rhs) const noexcept;
+bool operator==(const directory_entry&amp;amp; rhs) const noexcept; // (1) C++17
 ```
 
 ## 概要
@@ -24,6 +24,11 @@ return path() == rhs.path();
 投げない
 
 
+## 備考
+- この演算子により、以下の演算子が使用可能になる：
+    - `operator!=`
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
@@ -55,3 +60,8 @@ equal
 - [Clang](/implementation.md#clang):
 - [GCC](/implementation.md#gcc): 8.1
 - [Visual C++](/implementation.md#visual_cpp):
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt; -- directory_entry : 三方比較演算子と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/directory_entry/op_greater.html"/>
      <id>a3d02b70063e2532908d357ba22c4bce6f752739:reference/filesystem/directory_entry/op_greater.md</id>
      <updated>2022-12-09T21:49:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/directory_entry/op_greater.md b/reference/filesystem/directory_entry/op_greater.md
index 2c93b3256..72d8d33ab 100644
--- a/reference/filesystem/directory_entry/op_greater.md
+++ b/reference/filesystem/directory_entry/op_greater.md
@@ -6,7 +6,8 @@
 * cpp17[meta cpp]
 
 ```cpp
-bool operator&amp;gt;(const directory_entry&amp;amp; rhs) const noexcept;
+// operator&amp;lt;=&amp;gt;により、以下のオーバーロードが使用可能になる (C++20)
+bool operator&amp;gt;(const directory_entry&amp;amp; rhs) const noexcept; // (1) C++17
 ```
 
 ## 概要
@@ -55,3 +56,7 @@ greater
 - [Clang](/implementation.md#clang):
 - [GCC](/implementation.md#gcc): 8.1
 - [Visual C++](/implementation.md#visual_cpp):
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= -- directory_entry : 三方比較演算子と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/directory_entry/op_greater_equal.html"/>
      <id>a3d02b70063e2532908d357ba22c4bce6f752739:reference/filesystem/directory_entry/op_greater_equal.md</id>
      <updated>2022-12-09T21:49:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/directory_entry/op_greater_equal.md b/reference/filesystem/directory_entry/op_greater_equal.md
index 4f85659f2..35e96dea3 100644
--- a/reference/filesystem/directory_entry/op_greater_equal.md
+++ b/reference/filesystem/directory_entry/op_greater_equal.md
@@ -6,7 +6,8 @@
 * cpp17[meta cpp]
 
 ```cpp
-bool operator&amp;gt;=(const directory_entry&amp;amp; rhs) const noexcept;
+// operator&amp;lt;=&amp;gt;により、以下のオーバーロードが使用可能になる (C++20)
+bool operator&amp;gt;=(const directory_entry&amp;amp; rhs) const noexcept; // (1) C++17
 ```
 
 ## 概要
@@ -55,3 +56,7 @@ greater equal
 - [Clang](/implementation.md#clang):
 - [GCC](/implementation.md#gcc): 8.1
 - [Visual C++](/implementation.md#visual_cpp):
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- directory_entry : 三方比較演算子と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/directory_entry/op_less.html"/>
      <id>a3d02b70063e2532908d357ba22c4bce6f752739:reference/filesystem/directory_entry/op_less.md</id>
      <updated>2022-12-09T21:49:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/directory_entry/op_less.md b/reference/filesystem/directory_entry/op_less.md
index fa2407c80..73ddd958f 100644
--- a/reference/filesystem/directory_entry/op_less.md
+++ b/reference/filesystem/directory_entry/op_less.md
@@ -6,7 +6,8 @@
 * cpp17[meta cpp]
 
 ```cpp
-bool operator&amp;lt;(const directory_entry&amp;amp; rhs) const noexcept;
+// operator&amp;lt;=&amp;gt;により、以下のオーバーロードが使用可能になる (C++20)
+bool operator&amp;lt;(const directory_entry&amp;amp; rhs) const noexcept; // (1) C++17
 ```
 
 ## 概要
@@ -55,3 +56,7 @@ less
 - [Clang](/implementation.md#clang):
 - [GCC](/implementation.md#gcc): 8.1
 - [Visual C++](/implementation.md#visual_cpp):
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;= -- directory_entry : 三方比較演算子と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/directory_entry/op_less_equal.html"/>
      <id>a3d02b70063e2532908d357ba22c4bce6f752739:reference/filesystem/directory_entry/op_less_equal.md</id>
      <updated>2022-12-09T21:49:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/directory_entry/op_less_equal.md b/reference/filesystem/directory_entry/op_less_equal.md
index 148bf4c37..996120600 100644
--- a/reference/filesystem/directory_entry/op_less_equal.md
+++ b/reference/filesystem/directory_entry/op_less_equal.md
@@ -6,7 +6,8 @@
 * cpp17[meta cpp]
 
 ```cpp
-bool operator&amp;lt;=(const directory_entry&amp;amp; rhs) const noexcept;
+// operator&amp;lt;=&amp;gt;により、以下のオーバーロードが使用可能になる (C++20)
+bool operator&amp;lt;=(const directory_entry&amp;amp; rhs) const noexcept; // (1) C++17
 ```
 
 ## 概要
@@ -55,3 +56,7 @@ less equal
 - [Clang](/implementation.md#clang):
 - [GCC](/implementation.md#gcc): 8.1
 - [Visual C++](/implementation.md#visual_cpp):
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- directory_entry : 三方比較演算子と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/directory_entry/op_not_equal.html"/>
      <id>a3d02b70063e2532908d357ba22c4bce6f752739:reference/filesystem/directory_entry/op_not_equal.md</id>
      <updated>2022-12-09T21:49:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/directory_entry/op_not_equal.md b/reference/filesystem/directory_entry/op_not_equal.md
index 5c5daa5ac..adc36a22f 100644
--- a/reference/filesystem/directory_entry/op_not_equal.md
+++ b/reference/filesystem/directory_entry/op_not_equal.md
@@ -6,7 +6,8 @@
 * cpp17[meta cpp]
 
 ```cpp
-bool operator!=(const directory_entry&amp;amp; rhs) const noexcept;
+// operator==により、以下のオーバーロードが使用可能になる (C++20)
+bool operator!=(const directory_entry&amp;amp; rhs) const noexcept; // (1) C++17
 ```
 
 ## 概要
@@ -55,3 +56,7 @@ not equal
 - [Clang](/implementation.md#clang):
 - [GCC](/implementation.md#gcc): 8.1
 - [Visual C++](/implementation.md#visual_cpp):
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-06-10T14:39:51.465870</updated>
  <id>c494c239-062f-41a4-af05-32a72e1e09e8</id>

  
    <entry>
      <title>dynamic_extent -- span/dynamic_extent: P2116R0対応</title>
      <link href="https://cpprefjp.github.io/reference/span/dynamic_extent.html"/>
      <id>066971a8538f6c7d522967cb1c65cad8d1b355e3:reference/span/dynamic_extent.md</id>
      <updated>2023-06-09T21:47:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/span/dynamic_extent.md b/reference/span/dynamic_extent.md
index cdf8db9cb..ed6a29bb8 100644
--- a/reference/span/dynamic_extent.md
+++ b/reference/span/dynamic_extent.md
@@ -22,8 +22,6 @@ namespace std {
 - 動的な長さをもつ範囲を参照する ([`std::vector`](/reference/vector/vector.md)や、ポインタと要素数の組など)
 - 参照範囲の変更を、動的な値で指定する (`s.`[`first`](span/first.md)`&amp;lt;N&amp;gt;()`は静的な要素数、`s.`[`first`](span/first.md)`(n)`は動的な要素数をもつ`span`オブジェクトを作成する)
 
-動的な要素数をもつ[`std::span`](span.md)クラスには、タプルインタフェースを使用できないという制限がある。
-
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>float_denorm_style -- has_denorm(_loss) : 非推奨の詳細を記載</title>
      <link href="https://cpprefjp.github.io/reference/limits/float_denorm_style.html"/>
      <id>6b1443d2ddd576603a80d4c6b321941d86ab42ed:reference/limits/float_denorm_style.md</id>
      <updated>2023-06-08T17:51:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/float_denorm_style.md b/reference/limits/float_denorm_style.md
index 578258c28..7a0f7289c 100644
--- a/reference/limits/float_denorm_style.md
+++ b/reference/limits/float_denorm_style.md
@@ -14,8 +14,10 @@ namespace std {
 }
 ```
 
-この型を返すメンバ変数がC++23にて非推奨化されるため、列挙型も非推奨とされる。
+この型を返すメンバ変数がC++23にて非推奨化されるため、列挙型も非推奨とされる。非推奨の詳細は[`std::numeric_limits::has_denorm`](numeric_limits/has_denorm.md)を参照。
 
+
+## 概要
 `std::float_denorm_style`列挙型は、非正規化数(Denormal Number)のサポートに関する情報のための列挙値を提供する。
 
 | 列挙値                 | 説明                                       |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>has_denorm -- has_denorm(_loss) : 非推奨の詳細を記載</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/has_denorm.html"/>
      <id>6b1443d2ddd576603a80d4c6b321941d86ab42ed:reference/limits/numeric_limits/has_denorm.md</id>
      <updated>2023-06-08T17:51:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/has_denorm.md b/reference/limits/numeric_limits/has_denorm.md
index f355ceb1f..7eafd921e 100644
--- a/reference/limits/numeric_limits/has_denorm.md
+++ b/reference/limits/numeric_limits/has_denorm.md
@@ -6,14 +6,14 @@
 * cpp23deprecated[meta cpp]
 
 ```cpp
-// C++03
-static const float_denorm_style has_denorm;
-
-// C++11
-static constexpr float_denorm_style has_denorm;
+static const float_denorm_style has_denorm;     // (1) C++03
+static constexpr float_denorm_style has_denorm; // (1) C++11
 ```
 * float_denorm_style[link /reference/limits/float_denorm_style.md]
 
+この機能は、C++23で非推奨となった。
+
+
 ## 概要
 浮動小数点数型において、型`T`の非正規化数(Denormal Number)のサポート状況を判定する。
 
@@ -32,6 +32,17 @@ static constexpr float_denorm_style has_denorm;
 | `long double` | [`LDBL_HAS_SUBNORM`](/reference/cfloat/ldbl_has_subnorm.md) |
 
 
+## 非推奨・削除の詳細
+C言語側で対応するマクロ`*_HAS_SUBNORM`が廃止されたため、C++側でも非推奨とする。
+
+この機能はコンパイル時定数として非正規化数のサポート状況を取得するものであった。しかし、これには以下のような問題があった：
+
+- ハードウェアによっては非正規化数をサポートしていない場合があり、その場合はソフトウェアエミュレーションによってサポートされている場合がある。この場合、同じ系統のハードウェアであっても将来のバージョンでサポートされる可能性があり、このときにABI破壊を回避しようとすると[`std::denorm_indeterminate`](../float_denorm_style.md)を常に使用せざるを得なくなってしまう
+- ハードウェアサポートがある場合でも、実行時のフラグ切り替えによって非正規化数をゼロにフラッシュするように設定することが可能であり、非正規化数のサポート状況は必ずしもコンパイル時に確定するプロパティではない場合がある
+
+これらの理由から、この機能は有用なものではなく、最悪勘違いして使用される危険性があるため、非推奨とする。
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>has_denorm_loss -- has_denorm(_loss) : 非推奨の詳細を記載</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/has_denorm_loss.html"/>
      <id>6b1443d2ddd576603a80d4c6b321941d86ab42ed:reference/limits/numeric_limits/has_denorm_loss.md</id>
      <updated>2023-06-08T17:51:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/has_denorm_loss.md b/reference/limits/numeric_limits/has_denorm_loss.md
index f16a0b5e3..8726aa17c 100644
--- a/reference/limits/numeric_limits/has_denorm_loss.md
+++ b/reference/limits/numeric_limits/has_denorm_loss.md
@@ -6,15 +6,27 @@
 * cpp23deprecated[meta cpp]
 
 ```cpp
-// C++03
-static const bool has_denorm_loss;
-
-// C++11
-static constexpr bool has_denorm_loss;
+static const bool has_denorm_loss;     // (1) C++03
+static constexpr bool has_denorm_loss; // (1) C++11
 ```
 
+この機能は、C++23で非推奨となった。
+
 ## 概要
-浮動小数点数型において、精度の損失が非正規化数によるものかを判定する
+浮動小数点数型において、精度の損失が非正規化数によるものかを判定する。
+
+
+## 非推奨・削除の詳細
+非正規化数が使用されたことによって精度が低下した場合にそれを検出する次の2つの方法がIEEE754標準で指定されていた：
+
+- 非正規化損失（Denormalization loss）
+- 不正確な結果（Inexact result）
+
+実際には1つ目の実装は存在しなかったため、現在のIEE754からは削除されており、2つ目の実装だけが存在している。この機能はこの2つのどちらがその環境の浮動小数点数型で実装されているかを示すものだったが、このような理由によりもはや意味がない状況となった。
+
+また、この値は実装によってなぜか異なっている（MSVCだけが浮動小数点数型に対して`true`を返す）。
+
+これらの理由から、この機能は有用なものではなく、最悪勘違いして使用される危険性があるため、非推奨とする。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- 関数の雛形ページ : 非推奨・削除の書き方が記載されていなかった</title>
      <link href="https://cpprefjp.github.io/start_editing/function_template_page.html"/>
      <id>1007613676069369e0090ad3305b504e2e83815c:start_editing/function_template_page.md</id>
      <updated>2023-06-08T17:35:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/function_template_page.md b/start_editing/function_template_page.md
index ab695a3b1..a8d92a04f 100644
--- a/start_editing/function_template_page.md
+++ b/start_editing/function_template_page.md
@@ -42,6 +42,10 @@
 void definition(); // 関数・変数・定数の宣言を記述します。
 ```
 
+(非推奨・削除となった場合は、その旨を記載し、代わりの機能に誘導します)
+
+(例：この関数は、C++14から非推奨となり、C++17で削除された。代わりに[`shuffle()`](/reference/algorithm/shuffle.md)関数を使用すること。)
+
 ## 概要
 (ここには、関数・変数・定数の概要を記述します。必須事項です。)
 
@@ -103,6 +107,10 @@ void definition(); // 関数・変数・定数の宣言を記述します。
 (ここには、関数・変数・定数を説明するにあたっての、補足事項を記述します。とくになければ、項目を削除してください。)
 
 
+## 非推奨・削除の詳細
+(非推奨・削除となった背景を記載します。)
+
+
 ## 例
 ```cpp example
 // (ここには、関数・変数・定数を解説するための、サンプルコードを記述します。)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ほとんどの`volatile`を非推奨化 -- 打ち消し線から追記へ</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecating_volatile.html"/>
      <id>afc7241e8a6dd56adef175e6b1174aa743c93f87:lang/cpp20/deprecating_volatile.md</id>
      <updated>2023-06-08T16:49:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/deprecating_volatile.md b/lang/cpp20/deprecating_volatile.md
index 9cded3cda..8de6ac723 100644
--- a/lang/cpp20/deprecating_volatile.md
+++ b/lang/cpp20/deprecating_volatile.md
@@ -7,7 +7,8 @@ C++20より、`volatile`の本来の役割に照らして不正確、あるい
 
 非推奨となるのは次のもの
 
-1. ~`volatile`値に対する複合代入演算子（算術型・ポインタ型のみ）~
+1. `volatile`値に対する複合代入演算子（算術型・ポインタ型のみ）
+    - C++23で非推奨化解除
 2. `volatile`値に対するインクリメント／デクリメント演算子（算術型・ポインタ型のみ）
 3. 間に`volatile`値がある場合の連鎖した代入演算子（非クラス型のみ）
 4. 関数引数のトップレベル`volatile`修飾
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ほとんどの`volatile`を非推奨化 -- 追記と打ち消し線修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecating_volatile.html"/>
      <id>13db5df18b405032ace43e3738009cda0f18bfe0:lang/cpp20/deprecating_volatile.md</id>
      <updated>2023-06-08T16:25:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/deprecating_volatile.md b/lang/cpp20/deprecating_volatile.md
index f2501ad9a..9cded3cda 100644
--- a/lang/cpp20/deprecating_volatile.md
+++ b/lang/cpp20/deprecating_volatile.md
@@ -7,7 +7,7 @@ C++20より、`volatile`の本来の役割に照らして不正確、あるい
 
 非推奨となるのは次のもの
 
-1. ~~`volatile`値に対する複合代入演算子（算術型・ポインタ型のみ）~~
+1. ~`volatile`値に対する複合代入演算子（算術型・ポインタ型のみ）~
 2. `volatile`値に対するインクリメント／デクリメント演算子（算術型・ポインタ型のみ）
 3. 間に`volatile`値がある場合の連鎖した代入演算子（非クラス型のみ）
 4. 関数引数のトップレベル`volatile`修飾
@@ -311,7 +311,7 @@ volatile int i;
 
 // iの領域へ何回のアクセスが発生するか不透明
 // これはどちらも非推奨化
-i += 42;
+i += 42;  // C++23で非推奨化解除
 ++i;
 ```
 
@@ -380,4 +380,4 @@ volatile device dev;
 - [P1831R0 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1831r0.html)
 - [P1831R0 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
 - [P2327R0 De-deprecating volatile compound assignment](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2327r1.pdf)
-- [CWG Issue 2654. Un-deprecation of compound volatile assignments](https://cplusplus.github.io/CWG/issues/2654.html)
\ No newline at end of file
+- [CWG Issue 2654. Un-deprecation of compound volatile assignments](https://cplusplus.github.io/CWG/issues/2654.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2015-02-20T00:02:08.163109</updated>
  <id>179bada6-ffdb-4239-8bd1-62ddfda26ba0</id>

  
    <entry>
      <title>lock (C++11) -- weak_ptr::lock : C++14関連が読みにくかったので、書き方を修正</title>
      <link href="http://cpprefjp.github.io/reference/memory/weak_ptr/lock.html"/>
      <id>e2dbe60a30635f56db67179d902147022befcb79:reference/memory/weak_ptr/lock.md</id>
      <updated>2015-02-19 16:45:27 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;lock (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;shared_ptr&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lock() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; noexcept;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;監視している&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;&lt;code&gt;shared_ptr&lt;/code&gt;&lt;/a&gt;オブジェクトを取得する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/weak_ptr/expired.html&#34;&gt;expired()&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;?&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;shared_ptr&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;shared_ptr&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;監視している&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;&lt;code&gt;shared_ptr&lt;/code&gt;&lt;/a&gt;オブジェクトが有効な状態なら、その&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;&lt;code&gt;shared_ptr&lt;/code&gt;&lt;/a&gt;オブジェクトとリソースを共有する&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;&lt;code&gt;shared_ptr&lt;/code&gt;&lt;/a&gt;オブジェクトを作って返す。これによって、ロックしている間、&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;&lt;code&gt;shared_ptr&lt;/code&gt;&lt;/a&gt;オブジェクトの寿命が尽きないようにする。&lt;/p&gt;
&lt;p&gt;監視している&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;&lt;code&gt;shared_ptr&lt;/code&gt;&lt;/a&gt;オブジェクトが寿命切れ状態なら、空の&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;&lt;code&gt;shared_ptr&lt;/code&gt;&lt;/a&gt;オブジェクトを作って返す。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++14 : 上記に相当することをアトミックに実行する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;(この関数が&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトではなく生ポインタを返す設計になっていない理由を解説する。以下のコードを考えてみよう：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;shared_ptr&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; sp(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;weak_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; wp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; sp;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// …この間に、spの寿命が切れるかもしれない…&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; r &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; wp.lock()) {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;r &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このコードの場合、ロックを取得した&lt;code&gt;if&lt;/code&gt;文内で、&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクト&lt;code&gt;sp&lt;/code&gt;に対して&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr/reset.html&#34;&gt;&lt;code&gt;reset()&lt;/code&gt;&lt;/a&gt;が呼ばれると、ポインタ&lt;code&gt;p&lt;/code&gt;がダングリングポインタ(dangling pointer : 不正な領域を指すポインタ)になってしまう。&lt;/p&gt;
&lt;p&gt;この関数が&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;&lt;code&gt;shared_ptr&lt;/code&gt;&lt;/a&gt;オブジェクトを返す設計になっていることで、ロック取得したポインタがダングリングポインタになってしまう問題を回避できる。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;memory&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; sp(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;weak_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; wp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; sp;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// …この間に、spの寿命が切れるかもしれない…&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// wpが監視しているshared_ptrオブジェクトの&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 寿命が切れていなければ処理する&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; r &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; wp.lock()) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;r &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// shared_ptrオブジェクトの寿命が切れている&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;sp is expired&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang libc++, C++11 mode&lt;/a&gt;: 3.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#2316&#34; target=&#34;_blank&#34;&gt;LWG 2316 - weak_ptr::lock() should be atomic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>future_errc (C++11) -- future_errc : C++14で列挙値が変更された経緯を記載。</title>
      <link href="http://cpprefjp.github.io/reference/future/future_errc.html"/>
      <id>c09caf598a8ead0f0090af1e7281102d8ac09ffe:reference/future/future_errc.md</id>
      <updated>2015-02-19 16:31:00 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;future_errc (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;future_errc&lt;/span&gt; {
    broken_promise,
    future_already_retrieved,
    promise_already_satisfied,
    no_state
  };

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;future_errc&lt;/span&gt; {
    broken_promise &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;implementation&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;defined&lt;/i&gt;,
    future_already_retrieved &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;implementation&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;defined&lt;/i&gt;,
    promise_already_satisfied &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;implementation&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;defined&lt;/i&gt;,
    no_state &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;implementation&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;defined&lt;/i&gt;
  };
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;future操作に関するエラー値。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;列挙値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;broken_primise&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;共有状態の準備ができていない&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;future_already_retrieved&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;すでに&lt;a href=&#34;http://cpprefjp.github.io/reference/future/promise.html&#34;&gt;&lt;code&gt;promise&lt;/code&gt;&lt;/a&gt;オブジェクトから&lt;a href=&#34;http://cpprefjp.github.io/reference/future/future.html&#34;&gt;&lt;code&gt;future&lt;/code&gt;&lt;/a&gt;オブジェクトを取り出している&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;promise_already_satisfied&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/future/promise.html&#34;&gt;&lt;code&gt;promise&lt;/code&gt;&lt;/a&gt;オブジェクトに、すでに値もしくは例外オブジェクトが設定されている&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;no_state&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/future/promise.html&#34;&gt;&lt;code&gt;promise&lt;/code&gt;&lt;/a&gt;オブジェクトが共有状態を持っていない&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;それぞれの値は、非ゼロである(C++14以降)。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2056&#34; target=&#34;_blank&#34;&gt;LWG2056 - future_errc enums start with value 0 (invalid value for broken_promise)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11の&lt;code&gt;future_errc&lt;/code&gt;は、開始値が0だった。&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/error_code.html&#34;&gt;&lt;code&gt;error_code&lt;/code&gt;&lt;/a&gt;クラスの&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/error_code/op_bool.html&#34;&gt;&lt;code&gt;operator bool()&lt;/code&gt;&lt;/a&gt;が0を正常値と見なしてしまうため、C++14では&lt;code&gt;future_errc&lt;/code&gt;の値を実装定義とした。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>generate (C++11) -- seed_seq : C++14対応として、例外を投げる条件を記載</title>
      <link href="http://cpprefjp.github.io/reference/random/seed_seq/generate.html"/>
      <id>f5eab1dfac4252480abc007ee5f5e683748bec99:reference/random/seed_seq/generate.md</id>
      <updated>2015-02-19 14:36:07 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;generate (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;RandomAccessIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; generate(RandomAccessIterator begin, RandomAccessIterator end);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;シード列を生成する。&lt;br /&gt;
この関数は、擬似乱数生成器の、シード列を受け取るコンストラクタおよび&lt;code&gt;seed()&lt;/code&gt;メンバ関数内で使用される。&lt;br /&gt;
&lt;code&gt;seed_seq&lt;/code&gt;のコンストラクタで渡されたシード列を元に、32ビット整数の範囲内で偏りがないようにシード値を分布させる。  &lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;以下のアルゴリズムで、シード列の値を分布させる。&lt;br /&gt;
このアルゴリズムは、メルセンヌ・ツイスター法を考案した松本眞氏と西村拓士氏によるシーケンス初期化を、斎藤睦夫氏が改善したものである( 参照：『&lt;a href=&#34;http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/SFMT/M062821.pdf&#34; target=&#34;_blank&#34;&gt;An Application of Finite Field: Design and Implementation of 128-bit Instruction-Based Fast Pseudorandom Number Generator&lt;/a&gt;』 )。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;begin == end&lt;/code&gt;(すなわち生成対象のシード列が空であるなら)何もしない。そうでなければ、&lt;/li&gt;
&lt;li&gt;出力範囲の各要素を、値&lt;code&gt;0x8b8b8b8b&lt;/code&gt;で埋める。&lt;/li&gt;
&lt;li&gt;出力範囲の各要素を、以下のアルゴリズムで変換する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ループ用変数を定義&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; end &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; begin;
&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v.size(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// vは、メンバ変数として保持される、`vector&amp;lt;result_type&amp;gt;`型のシード列オブジェクト&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; max(s &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, n);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 分布用変数を定義&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; t &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; (n &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;623&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; (n &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;68&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; (n &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;39&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; (n &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;)  &lt;span style=&#34;color: #666666&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; (n &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; (n &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; t) &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; q &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; t;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 一度目の分布&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; k &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; k &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; m; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;k) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; r1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1664525&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; T(begin[k&lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt;n] &lt;span style=&#34;color: #666666&#34;&gt;^&lt;/span&gt; begin[(k&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;p)&lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt;n] &lt;span style=&#34;color: #666666&#34;&gt;^&lt;/span&gt; begin[(k&lt;span style=&#34;color: #666666&#34;&gt;-1&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt;n]);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; r2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; r1 &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;
    ( k &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;              &lt;span style=&#34;color: #666666&#34;&gt;?&lt;/span&gt; s
    &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; k) &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (k &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;=&lt;/span&gt; s) &lt;span style=&#34;color: #666666&#34;&gt;?&lt;/span&gt; (k&lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt;n &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; v[k&lt;span style=&#34;color: #666666&#34;&gt;-1&lt;/span&gt;])
    &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/*k &amp;gt; s ?*/&lt;/span&gt;           k&lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt;n
    );
  begin[(k&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;p)&lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt;n] &lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt; r1;
  begin[(k&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;q)&lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt;n] &lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt; r2;
  begin[k&lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt;n] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; r2;
}

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 二度目の分布&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; k &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m; k &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; n; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;k) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; r3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1566083941&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; T(begin[k&lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt;n] &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; begin[(k&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;p)&lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt;n] &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; begin[(k&lt;span style=&#34;color: #666666&#34;&gt;-1&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt;n]);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; r4 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; r3 &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; k&lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt;n;
  begin[(k&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;p)&lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt;n] &lt;span style=&#34;color: #666666&#34;&gt;^=&lt;/span&gt; r3;
  begin[(k&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;q)&lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt;n] &lt;span style=&#34;color: #666666&#34;&gt;^=&lt;/span&gt; r4;
  begin[k&lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt;n] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; r4;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++14 : &lt;code&gt;RandomAccessIterator&lt;/code&gt;要件のオブジェクト&lt;code&gt;begin&lt;/code&gt;、&lt;code&gt;end&lt;/code&gt;への操作が、例外を投げる可能性がある&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;seed_seq seq &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint32_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; seeds(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);
  seq.generate(seeds.begin(), seeds.end());

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint32_t&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; seeds) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;4069278582
1003217515
3259405872
538510628
148169650
2686142965
4168267496
2286043007
1924303767
770742192
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2180&#34; target=&#34;_blank&#34;&gt;LWG Issue 2180. Exceptions from &lt;code&gt;std::seed_seq&lt;/code&gt; operations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ (C++11) -- seed_seq : C++14対応として、例外を投げる条件を記載</title>
      <link href="http://cpprefjp.github.io/reference/random/seed_seq/op_constructor.html"/>
      <id>f5eab1dfac4252480abc007ee5f5e683748bec99:reference/random/seed_seq/op_constructor.md</id>
      <updated>2015-02-19 14:36:07 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;コンストラクタ (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;seed_seq();                                       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
seed_seq(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il);                 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
seed_seq(InputIterator begin, InputIterator end); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : デフォルトコンストラクタ。空のシード列を構築する。&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;seed_seq(il.begin(), il.end())&lt;/code&gt;と同じ。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(2) : 型&lt;code&gt;T&lt;/code&gt;は整数型であること。&lt;/li&gt;
&lt;li&gt;(3) : &lt;code&gt;InputIterator&lt;/code&gt;が指す値型が整数型であること。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 空のシード列を構築する。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) : (3)のオーバーロードに転送する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;seed_seq(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/begin.html&#34;&gt;il.begin()&lt;/a&gt;, &lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/end.html&#34;&gt;il.end()&lt;/a&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3) : 以下のアルゴリズムで、シード列を構築する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (InputIterator s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; begin; s &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; end; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;s) {
  v.push_back((&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;s) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; pow(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;32&lt;/span&gt;)); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 32ビット整数の範囲に収める&lt;/span&gt;
}

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ※ `v`は、メンバ変数として保持される、`vector&amp;lt;result_type&amp;gt;`型のシード列オブジェクトである。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) :&lt;ul&gt;
&lt;li&gt;C++14 : 投げない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;limits&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// デフォルト構築&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;seed_seq seq;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint32_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; result;
    seq.param(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;back_inserter(result));

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint32_t&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; result) {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt;;
    }
  }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 初期化子リストによる構築&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;seed_seq seq &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint32_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; result;
    seq.param(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;back_inserter(result));

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint32_t&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; result) {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt;;
    }
  }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// イテレータ範囲による構築&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint64_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; seed_data &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
      &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,
      &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;,
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint64_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;max()
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 64ビットの最大値を入れる。seed_seqによって32ビット値に変換される。&lt;/span&gt;
    };

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;seed_seq seq(seed_data.begin(), seed_data.end());

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint64_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; result;
    seq.param(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;back_inserter(result));

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint64_t&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; result) {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt;;
    }
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1, 2, 3, 
1, 2, 4294967295, 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2180&#34; target=&#34;_blank&#34;&gt;LWG Issue 2180. Exceptions from &lt;code&gt;std::seed_seq&lt;/code&gt; operations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>param (C++11) -- seed_seq : C++14対応として、例外を投げる条件を記載</title>
      <link href="http://cpprefjp.github.io/reference/random/seed_seq/param.html"/>
      <id>f5eab1dfac4252480abc007ee5f5e683748bec99:reference/random/seed_seq/param.md</id>
      <updated>2015-02-19 14:36:07 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;param (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;OutputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; param(OutputIterator dest) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;シード列を取得する。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;32ビット単位になったシード列を、以下の式で&lt;code&gt;dest&lt;/code&gt;にコピーする。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/copy.html&#34;&gt;copy&lt;/a&gt;(v.begin(), v.end(), dest);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;※ &lt;code&gt;v&lt;/code&gt;は、メンバ変数として保持される、&lt;code&gt;vector&amp;lt;result_type&amp;gt;&lt;/code&gt;型のシード列オブジェクトである。  &lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++14 : &lt;code&gt;OutputIterator&lt;/code&gt;要件のオブジェクト&lt;code&gt;dest&lt;/code&gt;への操作が、例外を投げる可能性がある&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;limits&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint64_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; seed_data &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,
    &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;,
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint64_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;max()
      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 64ビットの最大値を入れる。seed_seqによって32ビット値に変換される。&lt;/span&gt;
  };

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;seed_seq seq(seed_data.begin(), seed_data.end());

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// シード列を取得&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint64_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; result;
  seq.param(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;back_inserter(result));

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint64_t&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; result) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
2
4294967295
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2180&#34; target=&#34;_blank&#34;&gt;LWG Issue 2180. Exceptions from &lt;code&gt;std::seed_seq&lt;/code&gt; operations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size (C++11) -- seed_seq : C++14対応として、例外を投げる条件を記載</title>
      <link href="http://cpprefjp.github.io/reference/random/seed_seq/size.html"/>
      <id>f5eab1dfac4252480abc007ee5f5e683748bec99:reference/random/seed_seq/size.md</id>
      <updated>2015-02-19 14:36:07 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;size (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;シード列の要素数を取得する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;シード列の要素数を返す。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++14 : 投げない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;seed_seq seq &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; seq.size();
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; size &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2180&#34; target=&#34;_blank&#34;&gt;LWG Issue 2180. Exceptions from &lt;code&gt;std::seed_seq&lt;/code&gt; operations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ (C++11) -- seed_seqのコンストラクタ : オーバーロードの書き方を、ほかに合わせた</title>
      <link href="http://cpprefjp.github.io/reference/random/seed_seq/op_constructor.html"/>
      <id>96079c770034d82633a96b754a48bbe5d60a16d4:reference/random/seed_seq/op_constructor.md</id>
      <updated>2015-02-19 14:32:26 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;コンストラクタ (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;seed_seq();                                       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
seed_seq(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il);                 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
seed_seq(InputIterator begin, InputIterator end); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : デフォルトコンストラクタ。空のシード列を構築する。&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;seed_seq(il.begin(), il.end())&lt;/code&gt;と同じ。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(2) : 型&lt;code&gt;T&lt;/code&gt;は整数型であること。&lt;/li&gt;
&lt;li&gt;(3) : &lt;code&gt;InputIterator&lt;/code&gt;が指す値型が整数型であること。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 空のシード列を構築する。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) : (3)のオーバーロードに転送する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;seed_seq(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/begin.html&#34;&gt;il.begin()&lt;/a&gt;, &lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/end.html&#34;&gt;il.end()&lt;/a&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3) : 以下のアルゴリズムで、シード列を構築する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (InputIterator s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; begin; s &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; end; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;s) {
  v.push_back((&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;s) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; pow(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;32&lt;/span&gt;)); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 32ビット整数の範囲に収める&lt;/span&gt;
}

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ※ `v`は、メンバ変数として保持される、`vector&amp;lt;result_type&amp;gt;`型のシード列オブジェクトである。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;limits&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// デフォルト構築&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;seed_seq seq;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint32_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; result;
    seq.param(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;back_inserter(result));

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint32_t&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; result) {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt;;
    }
  }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 初期化子リストによる構築&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;seed_seq seq &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint32_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; result;
    seq.param(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;back_inserter(result));

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint32_t&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; result) {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt;;
    }
  }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// イテレータ範囲による構築&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint64_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; seed_data &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
      &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,
      &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;,
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint64_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;max()
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 64ビットの最大値を入れる。seed_seqによって32ビット値に変換される。&lt;/span&gt;
    };

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;seed_seq seq(seed_data.begin(), seed_data.end());

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint64_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; result;
    seq.param(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;back_inserter(result));

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint64_t&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; result) {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt;;
    }
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1, 2, 3, 
1, 2, 4294967295, 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>async -- async : 長い文章を、箇条書きで分割。</title>
      <link href="http://cpprefjp.github.io/reference/future/async.html"/>
      <id>54ed87611636bb8172a3afa257dc0793eeb7d412:reference/future/async.md</id>
      <updated>2015-02-19 14:22:29 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;async&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/future/future.html&#34;&gt;future&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; result_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;F(Args...)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    async(F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f, Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, class... Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/future/future.html&#34;&gt;future&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; result_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;F(Args...)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    async(&lt;a href=&#34;http://cpprefjp.github.io/reference/future/launch.html&#34;&gt;launch&lt;/a&gt; policy, F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f, Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;関数を非同期実行する。&lt;/p&gt;
&lt;p&gt;この関数は、指定された関数を非同期実行し、結果値を取得するための&lt;code&gt;future&lt;/code&gt;オブジェクトを返す。&lt;/p&gt;
&lt;p&gt;返された&lt;code&gt;future&lt;/code&gt;オブジェクトの&lt;code&gt;get()&lt;/code&gt;もしくは&lt;code&gt;wait()&lt;/code&gt;を呼び出すことにより、非同期実行の完了を待機する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;関数オブジェクト&lt;code&gt;F&lt;/code&gt;および&lt;code&gt;Args...&lt;/code&gt;の各型が、&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_move_constructible.html&#34;&gt;&lt;code&gt;is_move_construcitble&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T&amp;gt;::value == true&lt;/code&gt;であること。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/invoke.html&#34;&gt;&lt;code&gt;INVOKE&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(DECAY_COPY(std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;F&amp;gt;(f)), DECAY_COPY(std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args))...)&lt;/code&gt;が可能であること。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;この関数は、パラメータ&lt;code&gt;policy&lt;/code&gt;で指定された実行ポリシーの値によって振る舞いを変える。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;policy&lt;/code&gt;を指定しない場合は&lt;a href=&#34;http://cpprefjp.github.io/reference/future/launch.html&#34;&gt;&lt;code&gt;launch::async&lt;/code&gt;&lt;/a&gt;&lt;code&gt;|&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/future/launch.html&#34;&gt;&lt;code&gt;launch::deferred&lt;/code&gt;&lt;/a&gt;となり、どちらの実行ポリシーが選択されるかは実装定義となる。&lt;/p&gt;
&lt;p&gt;各実行ポリシーの振る舞いは以下のようになる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;policy &amp;amp; launch::async&lt;/code&gt;が&lt;code&gt;0&lt;/code&gt;じゃない場合、新たなスレッドで関数オブジェクト&lt;code&gt;f&lt;/code&gt;に&lt;code&gt;args...&lt;/code&gt;を渡して実行する&lt;ul&gt;
&lt;li&gt;( &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/invoke.html&#34;&gt;&lt;code&gt;INVOKE&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(DECAY_COPY(std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;F&amp;gt;(f)), DECAY_COPY(std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args))...)&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;関数オブジェクト&lt;code&gt;f&lt;/code&gt;の戻り値が、この関数の戻り値である&lt;a href=&#34;http://cpprefjp.github.io/reference/future/future.html&#34;&gt;&lt;code&gt;future&lt;/code&gt;&lt;/a&gt;オブジェクトとの共有状態に書き込まれる。&lt;/li&gt;
&lt;li&gt;関数オブジェクト&lt;code&gt;f&lt;/code&gt;の内部で例外が投げられた場合は、共有状態に投げられた例外が設定される。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;policy &amp;amp; launch::deferred&lt;/code&gt;が&lt;code&gt;0&lt;/code&gt;じゃない場合、関数オブジェクト&lt;code&gt;f&lt;/code&gt;をその場では実行せず、遅延状態にする&lt;ul&gt;
&lt;li&gt;(&lt;code&gt;DECAY_COPY(std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;F&amp;gt;(f))&lt;/code&gt;と&lt;code&gt;DECAY_COPY(std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args))...&lt;/code&gt;を&lt;a href=&#34;http://cpprefjp.github.io/reference/future/future.html&#34;&gt;&lt;code&gt;future&lt;/code&gt;&lt;/a&gt;オブジェクトとの共有状態に格納する)。&lt;/li&gt;
&lt;li&gt;この関数の戻り値である&lt;a href=&#34;http://cpprefjp.github.io/reference/future/future.html&#34;&gt;&lt;code&gt;future&lt;/code&gt;&lt;/a&gt;オブジェクトの&lt;a href=&#34;http://cpprefjp.github.io/reference/future/future/get.html&#34;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;もしくは&lt;a href=&#34;http://cpprefjp.github.io/reference/future/future/wait.html&#34;&gt;&lt;code&gt;wait()&lt;/code&gt;&lt;/a&gt;が呼び出されるタイミングで、関数オブジェクト&lt;code&gt;f&lt;/code&gt;に&lt;code&gt;args...&lt;/code&gt;を渡して実行する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有効な実行ポリシーが指定されていない場合(整数値を&lt;code&gt;launch&lt;/code&gt;型にキャストするような状況)、その動作は未定義(C++14)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;非同期実行される関数オブジェクト&lt;code&gt;f&lt;/code&gt;の結果値取得のための&lt;code&gt;future&lt;/code&gt;オブジェクトを返す。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;この関数は、以下のerror conditionを持つ&lt;a href=&#34;http://cpprefjp.github.io/reference/future/future_error.html&#34;&gt;&lt;code&gt;future_error&lt;/code&gt;&lt;/a&gt;例外オブジェクトを送出する可能性がある：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/future/future_errc.html&#34;&gt;&lt;code&gt;resource_unavailable_try_again&lt;/code&gt;&lt;/a&gt; ： &lt;a href=&#34;http://cpprefjp.github.io/reference/future/launch.html&#34;&gt;&lt;code&gt;launch::async&lt;/code&gt;&lt;/a&gt;が指定され、新たなスレッドをを起動しようとしたができなかった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;future&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;thread&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;foo&lt;/span&gt;() { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;executes foo()&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 新たなスレッドで関数foo()を非同期実行&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;invokes std::async(std::launch::async, foo)&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;future&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;async(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;launch&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;async, foo);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;this_thread&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sleep_for(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;milliseconds(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;));
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;main thread: slept for 10 msec&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非同期実行の結果を取得&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; f.get();
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;foo() = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 関数fを遅延状態で非同期実行&lt;/span&gt;
  {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// この段階では関数foo()を実行しない&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;invokes std::async(std::launch::deferred, foo)&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;future&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;async(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;launch&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deferred, foo);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;this_thread&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sleep_for(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;milliseconds(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;));
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;main thread: slept for 10 msec&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非同期実行の結果を取得&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// この段階で関数foo()を実行&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; f.get();
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;foo() = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;invokes std::async(std::launch::async, foo)
executes foo()
main thread: slept for 10 msec
foo() = 3

invokes std::async(std::launch::deferred, foo)
main thread: slept for 10 msec
executes foo()
foo() = 3
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2120&#34; target=&#34;_blank&#34;&gt;LWG Issue 2120. What should &lt;code&gt;async&lt;/code&gt; do if neither &lt;code&gt;async&lt;/code&gt; nor &lt;code&gt;deferred&lt;/code&gt; is set in policy?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
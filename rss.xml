<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-03-02T06:27:50.575217</updated>
  <id>540401b0-1351-4e62-81f7-be351c7ef604</id>

  
    <entry>
      <title>コンストラクタ -- string_viewコンストラクタ : 微修正</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/op_constructor.html"/>
      <id>0216351917fda4cb7f2cf6ddec4ad04e9a962c77:reference/string_view/basic_string_view/op_constructor.md</id>
      <updated>2023-03-02T15:23:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/op_constructor.md b/reference/string_view/basic_string_view/op_constructor.md
index 796e21aa2..1fe145265 100644
--- a/reference/string_view/basic_string_view/op_constructor.md
+++ b/reference/string_view/basic_string_view/op_constructor.md
@@ -21,7 +21,7 @@ template &amp;lt;class It, class End&amp;gt;
 constexpr basic_string_view(It begin, End end);                // (6) C++20
 
 template &amp;lt;class R&amp;gt;
-explicit constexpr basic_string_view(R&amp;amp;&amp;amp; r);                   // (7) C++23
+constexpr explicit basic_string_view(R&amp;amp;&amp;amp; r);                   // (7) C++23
 ```
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- string_viewコンストラクタ : P2499R0対応</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/op_constructor.html"/>
      <id>cde470d65c8f4cf33adf6a28b5d621b851d42ed0:reference/string_view/basic_string_view/op_constructor.md</id>
      <updated>2023-03-02T15:14:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/op_constructor.md b/reference/string_view/basic_string_view/op_constructor.md
index 3de2a3a37..796e21aa2 100644
--- a/reference/string_view/basic_string_view/op_constructor.md
+++ b/reference/string_view/basic_string_view/op_constructor.md
@@ -7,10 +7,12 @@
 
 ```cpp
 constexpr basic_string_view() noexcept;                        // (1)
+
 constexpr basic_string_view(
             const basic_string_view&amp;amp;) noexcept = default;      // (2)
 
 constexpr basic_string_view(const CharT* str);                 // (3)
+
 basic_string_view(nullptr_t) = delete;                         // (4) C++23
 
 constexpr basic_string_view(const CharT* str, size_type len);  // (5)
@@ -19,7 +21,7 @@ template &amp;lt;class It, class End&amp;gt;
 constexpr basic_string_view(It begin, End end);                // (6) C++20
 
 template &amp;lt;class R&amp;gt;
-constexpr basic_string_view(R&amp;amp;&amp;amp; r);                            // (7) C++23
+explicit constexpr basic_string_view(R&amp;amp;&amp;amp; r);                   // (7) C++23
 ```
 
 ## 概要
@@ -90,6 +92,7 @@ string_view str(buf);
 #include &amp;lt;cassert&amp;gt;
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;string_view&amp;gt;
+#include &amp;lt;vector&amp;gt;
 
 int main()
 {
@@ -117,20 +120,32 @@ int main()
     std::cout &amp;lt;&amp;lt; &amp;#34;(3) : &amp;#34; &amp;lt;&amp;lt; sv &amp;lt;&amp;lt; std::endl;
   }
 
-  // (4)
+  // (5)
   // 文字配列と文字数を受けとって部分文字列を参照するコンストラクタ
   {
     // &amp;#34;Hello World&amp;#34;の先頭5文字&amp;#34;Hello&amp;#34;を参照
     std::string_view sv{&amp;#34;Hello World&amp;#34;, 5};
-    std::cout &amp;lt;&amp;lt; &amp;#34;(4) : &amp;#34; &amp;lt;&amp;lt; sv &amp;lt;&amp;lt; std::endl;
+    std::cout &amp;lt;&amp;lt; &amp;#34;(5) : &amp;#34; &amp;lt;&amp;lt; sv &amp;lt;&amp;lt; std::endl;
   }
 
-  // (5)
+  // (6)
   // 文字のイテレータ範囲を受け取って参照するコンストラクタ
   {
     std::string s = &amp;#34;Hello World&amp;#34;;
     std::string_view sv{s.begin(), s.begin() + 5};
-    std::cout &amp;lt;&amp;lt; &amp;#34;(5) : &amp;#34; &amp;lt;&amp;lt; sv &amp;lt;&amp;lt; std::endl;
+    std::cout &amp;lt;&amp;lt; &amp;#34;(6) : &amp;#34; &amp;lt;&amp;lt; sv &amp;lt;&amp;lt; std::endl;
+  }
+
+  // (7)
+  // contiguous_rangeからの構築
+  {
+    std::vector vec = {&amp;#39;H&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;\0&amp;#39;, &amp;#39;!&amp;#39;};
+    // 参照するのは入力範囲先頭からそのサイズ（`std::ranges::size()`）分
+    std::string_view sv{vec};
+    std::cout &amp;lt;&amp;lt; &amp;#34;(7) : &amp;#34; &amp;lt;&amp;lt; sv &amp;lt;&amp;lt; std::endl;
+
+    // explicitのため、このような初期化や暗黙変換は無効
+    //std::string_view sv = {vec};
   }
 }
 ```
@@ -142,8 +157,9 @@ int main()
 ```
 (2) : Hello World
 (3) : Hello World
-(4) : Hello
 (5) : Hello
+(6) : Hello
+(7) : Hello!
 ```
 
 ## バージョン
@@ -164,3 +180,4 @@ int main()
     - C++23での、`nullptr_t`をとるコンストラクタのdelete宣言追加
 - [P1989R2 Range constructor for `std::string_view` 2: Constrain Harder](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1989r2.pdf)
     - C++23での、レンジ版コンストラクタ追加
+- [P2499R0 `string_view` range constructor should be `explicit`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2499r0.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;&gt; -- basic_istream::operator&gt;&gt; : C++23対応として拡張浮動小数点数型をサポート #1022</title>
      <link href="https://cpprefjp.github.io/reference/istream/basic_istream/op_istream.html"/>
      <id>b986d8c2578971123909748683f72e599ac081ac:reference/istream/basic_istream/op_istream.md</id>
      <updated>2023-03-01T16:48:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/istream/basic_istream/op_istream.md b/reference/istream/basic_istream/op_istream.md
index 5b71af109..e2e9b6dd0 100644
--- a/reference/istream/basic_istream/op_istream.md
+++ b/reference/istream/basic_istream/op_istream.md
@@ -7,61 +7,73 @@
 ```cpp
 // マニピュレータ
 // 3つとも関数へのポインタを引数に取る。
-basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; (*pf)(basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp;));
-basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(basic_ios&amp;lt;CharT, Traits&amp;gt;&amp;amp; (*pf)(basic_ios&amp;lt;CharT, Traits&amp;gt;&amp;amp;));
-basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(ios_base&amp;amp; (*pf)(ios_base&amp;amp;));
+basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp;
+  operator&amp;gt;&amp;gt;(basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; (*pf)(basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp;)); // (1) C++03
+basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp;
+  operator&amp;gt;&amp;gt;(basic_ios&amp;lt;CharT, Traits&amp;gt;&amp;amp; (*pf)(basic_ios&amp;lt;CharT, Traits&amp;gt;&amp;amp;));         // (2) C++03
+basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp;
+  operator&amp;gt;&amp;gt;(ios_base&amp;amp; (*pf)(ios_base&amp;amp;));                                         // (3) C++03
 
 // bool値・数値・ポインタ
-basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(bool&amp;amp; n);
-basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(short&amp;amp; n);
-basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(unsigned short&amp;amp; n);
-basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(int&amp;amp; n);
-basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(unsigned int&amp;amp; n);
-basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(long&amp;amp; n);
-basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(unsigned long&amp;amp; n);
-basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(long long&amp;amp; n); // C++11
-basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(unsigned long long&amp;amp; n); // C++11
-basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(float&amp;amp; f);
-basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(double&amp;amp; f);
-basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(long double&amp;amp; f);
-basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(void*&amp;amp; p);
+basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(bool&amp;amp; n);               // (4) C++03
+basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(short&amp;amp; n);              // (5) C++03
+basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(unsigned short&amp;amp; n);     // (6) C++03
+basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(int&amp;amp; n);                // (7) C++03
+basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(unsigned int&amp;amp; n);       // (8) C++03
+basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(long&amp;amp; n);               // (9) C++03
+basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(unsigned long&amp;amp; n);      // (10) C++03
+basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(long long&amp;amp; n);          // (11) C++11
+basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(unsigned long long&amp;amp; n); // (12) C++11
+basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(float&amp;amp; f);              // (13) C++03
+basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(double&amp;amp; f);             // (14) C++03
+basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(long double&amp;amp; f);        // (15) C++03
+basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp;
+  operator&amp;gt;&amp;gt;(extended-floating-point-type&amp;amp; f);                   // (16) C++23
+basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(void*&amp;amp; p);              // (17) C++03
 
 // ストリームバッファ
-basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;(basic_streambuf&amp;lt;char_type, Traits&amp;gt;* sb);
+basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp;
+  operator&amp;gt;&amp;gt;(basic_streambuf&amp;lt;char_type, Traits&amp;gt;* sb); // (18) C++03
 ```
 
 ## 概要
 
 ストリームからの入力またはマニピュレータの実行を行う。
 
-- マニピュレータを実行するオーバーロードそれ自体は、書式化入力関数・非書式化入力関数いずれにも該当しない。
+- (1)-(3) : マニピュレータを実行するオーバーロードそれ自体は、書式化入力関数・非書式化入力関数いずれにも該当しない。
     - マニピュレータが書式化入力関数・非書式化入力関数であるということはあり得る（例: [`ws`](../ws.md)）。
-- 数値型（`bool`も含む）と`void*`に対するオーバーロードは、書式化入力関数である。
-- `basic_streambuf`に対するオーバーロードは、非書式化入力関数である。
+- (4)-(17) : 数値型（`bool`も含む）と`void*`に対するオーバーロードは、書式化入力関数である。
+- (18) : `basic_streambuf`に対するオーバーロードは、非書式化入力関数である。
 
 ## 効果
 
-### マニピュレータ
+### (1)-(3) : マニピュレータ
 
 1. `pf(*this)`を呼び出す。
 
-### bool値・数値・ポインタ
+### (4)-(17) : bool値・数値・ポインタ
 
-1. `sentry`オブジェクトを構築する。`sentry`オブジェクトが失敗を示した場合、何もしない。
+1. `sentry`オブジェクトを構築する。`sentry`オブジェクトが失敗を示した場合、何もしない
 1. `num_get::get`を使用して入力のパース・数値への変換を行う。
-    - ただし、`int`と`short`の場合は、`long`を実引数に取るものを使用する。結果が`int`と`short`それぞれの範囲外の値になった場合、`failbit`を追加する。
-1. `num_get::get`から得られた`iostate`値を実引数にして`setstate`関数を呼び出す。
+    - `int`と`short` : `long`を実引数に取るものを使用する。結果が`int`と`short`それぞれの範囲外の値になった場合、`failbit`を追加する
+    - 拡張浮動小数点数型 :
+        - 拡張浮動小数点数型の変換順位が`long double`より大きい場合、条件付きサポートとなる
+        - そうでない場合、対応する標準浮動小数点数型`FP`を以下のように定義し、`FP`型の値として値を入力したあと、拡張浮動小数点数型にキャストして代入する
+            - 拡張浮動小数点数型の変換順位が`float`以下の場合、`FP`を`float`とする
+            - そうでなく、拡張浮動小数点数型の変換順位が`double`以下の場合、`FP`を`double`とする
+            - そうでない場合、`FP`を`long double`とする
+1. `num_get::get`から得られた`iostate`値を実引数にして`setstate`関数を呼び出す
 
-### ストリームバッファ
+### (18) : ストリームバッファ
 
 ストリームからの入力を別のストリームバッファに出力する。
 
-1. 仮引数`sb`がヌルポインタの場合、`setstate(failbit)`を呼び出して終了する。
-1. `sentry`オブジェクトを構築する。`sentry`オブジェクトが失敗を示した場合、何もしない。
-1. 以下のいずれかを満たすまで、`this`内のストリームバッファから文字を入力して`sb`へ出力する。
-    - EOFに達した。
-    - 出力処理に失敗した（この場合、失敗したときの文字は入力側のストリームバッファに戻される）。
-    - 例外が発生した。
+1. 仮引数`sb`がヌルポインタの場合、`setstate(failbit)`を呼び出して終了する
+1. `sentry`オブジェクトを構築する。`sentry`オブジェクトが失敗を示した場合、何もしない
+1. 以下のいずれかを満たすまで、`this`内のストリームバッファから文字を入力して`sb`へ出力する
+    - EOFに達した
+    - 出力処理に失敗した（この場合、失敗したときの文字は入力側のストリームバッファに戻される）
+    - 例外が発生した
 
 入力がなされなかった場合、`setstate(failbit)`を呼び出す。
 
@@ -113,4 +125,5 @@ TBD
 
 ## 参照
 - [N2114 `long long` Goes to the Library, Revision 1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2114.html)
-
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で拡張浮動小数点数型の`istream`入力がサポートされた
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bfloat16_t -- basic_istream::operator&gt;&gt; : C++23対応として拡張浮動小数点数型をサポート #1022</title>
      <link href="https://cpprefjp.github.io/reference/stdfloat/bfloat16_t.html"/>
      <id>b986d8c2578971123909748683f72e599ac081ac:reference/stdfloat/bfloat16_t.md</id>
      <updated>2023-03-01T16:48:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stdfloat/bfloat16_t.md b/reference/stdfloat/bfloat16_t.md
index 8e748b72d..95fec2634 100644
--- a/reference/stdfloat/bfloat16_t.md
+++ b/reference/stdfloat/bfloat16_t.md
@@ -177,6 +177,7 @@ int main() {
 - [`std::float64_t`](float64_t.md)
 - [`std::float128_t`](float128_t.md)
 - [`std::basic_ostream::operator&amp;lt;&amp;lt;`](/reference/ostream/basic_ostream/op_ostream.md)
+- [`std::basic_istream::operator&amp;gt;&amp;gt;`](/reference/istream/basic_istream/op_istream.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>float128_t -- basic_istream::operator&gt;&gt; : C++23対応として拡張浮動小数点数型をサポート #1022</title>
      <link href="https://cpprefjp.github.io/reference/stdfloat/float128_t.html"/>
      <id>b986d8c2578971123909748683f72e599ac081ac:reference/stdfloat/float128_t.md</id>
      <updated>2023-03-01T16:48:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stdfloat/float128_t.md b/reference/stdfloat/float128_t.md
index f27a31bce..2ce8adee1 100644
--- a/reference/stdfloat/float128_t.md
+++ b/reference/stdfloat/float128_t.md
@@ -176,6 +176,7 @@ int main() {
 - [`std::bfloat16_t`](bfloat16_t.md)
 - [`std::numeric_limits&amp;lt;T&amp;gt;::is_iec559`](/reference/limits/numeric_limits/is_iec559.md)
 - [`std::basic_ostream::operator&amp;lt;&amp;lt;`](/reference/ostream/basic_ostream/op_ostream.md)
+- [`std::basic_istream::operator&amp;gt;&amp;gt;`](/reference/istream/basic_istream/op_istream.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>float16_t -- basic_istream::operator&gt;&gt; : C++23対応として拡張浮動小数点数型をサポート #1022</title>
      <link href="https://cpprefjp.github.io/reference/stdfloat/float16_t.html"/>
      <id>b986d8c2578971123909748683f72e599ac081ac:reference/stdfloat/float16_t.md</id>
      <updated>2023-03-01T16:48:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stdfloat/float16_t.md b/reference/stdfloat/float16_t.md
index 8ddfe47e5..ed7cacc63 100644
--- a/reference/stdfloat/float16_t.md
+++ b/reference/stdfloat/float16_t.md
@@ -176,6 +176,7 @@ int main() {
 - [`std::bfloat16_t`](bfloat16_t.md)
 - [`std::numeric_limits&amp;lt;T&amp;gt;::is_iec559`](/reference/limits/numeric_limits/is_iec559.md)
 - [`std::basic_ostream::operator&amp;lt;&amp;lt;`](/reference/ostream/basic_ostream/op_ostream.md)
+- [`std::basic_istream::operator&amp;gt;&amp;gt;`](/reference/istream/basic_istream/op_istream.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>float32_t -- basic_istream::operator&gt;&gt; : C++23対応として拡張浮動小数点数型をサポート #1022</title>
      <link href="https://cpprefjp.github.io/reference/stdfloat/float32_t.html"/>
      <id>b986d8c2578971123909748683f72e599ac081ac:reference/stdfloat/float32_t.md</id>
      <updated>2023-03-01T16:48:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stdfloat/float32_t.md b/reference/stdfloat/float32_t.md
index 18870b67f..f562c5c8f 100644
--- a/reference/stdfloat/float32_t.md
+++ b/reference/stdfloat/float32_t.md
@@ -176,6 +176,7 @@ int main() {
 - [`std::bfloat16_t`](bfloat16_t.md)
 - [`std::numeric_limits&amp;lt;T&amp;gt;::is_iec559`](/reference/limits/numeric_limits/is_iec559.md)
 - [`std::basic_ostream::operator&amp;lt;&amp;lt;`](/reference/ostream/basic_ostream/op_ostream.md)
+- [`std::basic_istream::operator&amp;gt;&amp;gt;`](/reference/istream/basic_istream/op_istream.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>float64_t -- basic_istream::operator&gt;&gt; : C++23対応として拡張浮動小数点数型をサポート #1022</title>
      <link href="https://cpprefjp.github.io/reference/stdfloat/float64_t.html"/>
      <id>b986d8c2578971123909748683f72e599ac081ac:reference/stdfloat/float64_t.md</id>
      <updated>2023-03-01T16:48:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stdfloat/float64_t.md b/reference/stdfloat/float64_t.md
index 186c998a3..4bfe085ee 100644
--- a/reference/stdfloat/float64_t.md
+++ b/reference/stdfloat/float64_t.md
@@ -176,6 +176,7 @@ int main() {
 - [`std::bfloat16_t`](bfloat16_t.md)
 - [`std::numeric_limits&amp;lt;T&amp;gt;::is_iec559`](/reference/limits/numeric_limits/is_iec559.md)
 - [`std::basic_ostream::operator&amp;lt;&amp;lt;`](/reference/ostream/basic_ostream/op_ostream.md)
+- [`std::basic_istream::operator&amp;gt;&amp;gt;`](/reference/istream/basic_istream/op_istream.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>errc -- errc : LWG Issue 3869対応</title>
      <link href="https://cpprefjp.github.io/reference/system_error/errc.html"/>
      <id>7137aae806b98ff357fea841b251e65c653255c5:reference/system_error/errc.md</id>
      <updated>2023-03-01T16:05:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/system_error/errc.md b/reference/system_error/errc.md
index 06e5ed33b..baf735a3d 100644
--- a/reference/system_error/errc.md
+++ b/reference/system_error/errc.md
@@ -15,88 +15,89 @@ namespace std {
 この値は、[`error_code`](error_code.md)/[`error_condition`](error_condition.md)に設定する[`generic_category()`](generic_category.md)カテゴリのエラー値として使用される。
 
 
-| 列挙値                               | 値                | 説明                                     |
-|--------------------------------------|-------------------|------------------------------------------|
-| `address_family_not_supported`       | `EAFNOSUPPORT`    | アドレスファミリーがサポートされていない |
-| `address_in_use`                     | `EADDRINUSE`      | アドレスがすでに使用されている |
-| `address_not_available`              | `EADDRNOTAVAIL`   | アドレスが使用できない |
-| `already_connected`                  | `EISCONN`         | ソケットが接続されている |
-| `argument_list_too_long`             | `E2BIG`           | 引数リストが長すぎる |
-| `argument_out_of_domain`             | `EDOM`            | 引数が領域外 |
-| `bad_address`                        | `EFAULT`          | アドレスが不正 |
-| `bad_file_descriptor`                | `EBADF`           | ファイルディスクリプタが不正 |
-| `bad_message`                        | `EBADMSG`         | メッセージが不正 |
-| `broken_pipe`                        | `EPIPE`           | パイプが壊れている |
-| `connection_aborted`                 | `ECONNABORTED`    | 接続が中止された |
-| `connection_already_in_progress`     | `EALREADY`        | 接続がすでに処理中 |
-| `connection_refused`                 | `ECONNREFUSED`    | 接続が拒否された |
-| `connection_reset`                   | `ECONNRESET`      | 接続がリセットされた |
-| `cross_device_link`                  | `EXDEV`           | 不適切なリンク |
-| `destination_address_required`       | `EDESTADDRREQ`    | 宛先アドレスが必要 |
-| `device_or_resource_busy`            | `EBUSY`           | リソースが使用中 |
-| `directory_not_empty`                | `ENOTEMPTY`       | ディレクトリが空ではない |
-| `executable_format_error`            | `ENOEXEC`         | 実行ファイル形式のエラー |
-| `file_exists`                        | `EEXIST`          | ファイルが存在する |
-| `file_too_large`                     | `EFBIG`           | ファイルが大きすぎる |
-| `filename_too_long`                  | `ENAMETOOLONG`    | ファイル名が長すぎる |
-| `function_not_supported`             | `ENOSYS`          | 関数がサポートされていない(実装されていない) |
-| `host_unreachable`                   | `EHOSTUNREACH`    | ホストに到達不能 |
-| `identifier_removed`                 | `EIDRM`           | 識別子が削除された |
-| `illegal_byte_sequence`              | `EILSEQ`          | 不正なバイト列 |
-| `inappropriate_io_control_operation` | `ENOTTY`          | I/O制御操作が不適切 |
-| `interrupted`                        | `EINTR`           | 関数呼び出しが割り込まれた |
-| `invalid_argument`                   | `EINVAL`          | 引数が無効 |
-| `invalid_seek`                       | `ESPIPE`          | 無効なシーク |
-| `io_error`                           | `EIO`             | I/Oエラー |
-| `is_a_directory`                     | `EISDIR`          | ディレクトリである |
-| `message_size`                       | `EMSGSIZE`        | メッセージが長すぎる |
-| `network_down`                       | `ENETDOWN`        | ネットワークが不通 |
-| `network_reset`                      | `ENETRESET`       | 接続がネットワーク側から中止された |
-| `network_unreachable`                | `ENETUNREACH`     | ネットワークが到達不能である |
-| `no_buffer_space`                    | `ENOBUFS`         | 使用可能なバッファ空間がない |
-| `no_child_process`                   | `ECHILD`          | 子プロセスがない |
-| `no_link`                            | `ENOLINK`         | リンクが切れている |
-| `no_lock_available`                  | `ENOLCK`          | 利用できるロックがない |
-| `no_message_available`               | `ENODATA`         | ストリームの読み出しキューの先頭に読み出し可能なメッセージがない |
-| `no_message`                         | `ENOMSG`          | 要求された型のメッセージがない |
-| `no_protocol_option`                 | `ENOPROTOOPT`     | 指定されたプロトコルが利用できない |
-| `no_space_on_device`                 | `ENOSPC`          | デバイスに空き領域がない |
-| `no_stream_resources`                | `ENOSR`           | 指定されたストリームリソースがない |
-| `no_such_device_or_address`          | `ENXIO`           | そのようなデバイスやアドレスはない |
-| `no_such_device`                     | `ENODEV`          | そのようなデバイスはない |
-| `no_such_file_or_directory`          | `ENOENT`          | そのようなファイルやディレクトリはない |
-| `no_such_process`                    | `ESRCH`           | そのようなプロセスはない |
-| `not_a_directory`                    | `ENOTDIR`         | ディレクトリではない |
-| `not_a_socket`                       | `ENOTSOCK`        | ソケットではない |
-| `not_a_stream`                       | `ENOSTR`          | ストリームではない |
-| `not_connected`                      | `ENOTCONN`        | ソケットが接続されていない |
-| `not_enough_memory`                  | `ENOMEM`          | メモリ領域に十分な空きがない |
-| `not_supported`                      | `ENOTSUP`         | 操作がサポートされていない |
-| `operation_canceled`                 | `ECANCELED`       | 操作がキャンセルされた |
-| `operation_in_progress`              | `EINPROGRESS`     | 操作が実行中である |
-| `operation_not_permitted`            | `EPERM`           | 操作が許可されていない |
-| `operation_not_supported`            | `EOPNOTSUPP`      | ソケットでサポートされていない操作 |
-| `operation_would_block`              | `EWOULDBLOCK`     | 操作がブロッキングされる見込み |
-| `owner_dead`                         | `EOWNERDEAD`      | ミューテックスを所有している間に終了した |
-| `permission_denied`                  | `EACCES`          | 許可されていない |
-| `protocol_error`                     | `EPROTO`          | プロトコルエラー |
-| `protocol_not_supported`             | `EPROTONOSUPPORT` | プロトコルがサポートされていない |
-| `read_only_file_system`              | `EROFS`           | ファイルシステムが読み取り専用 |
-| `resource_deadlock_would_occur`      | `EDEADLK`         | リソースのデッドロックを回避した |
-| `resource_unavailable_try_again`     | `EAGAIN`          | リソースが一時的に利用不可 |
-| `result_out_of_range`                | `ERANGE`          | 結果が大きすぎる |
-| `state_not_recoverable`              | `ENOTRECOVERABLE` | ロックが回復不能 |
-| `stream_timeout`                     | `ETIME`           | タイムアウト |
-| `text_file_busy`                     | `ETXTBSY`         | テキストファイルが使用中 |
-| `timed_out`                          | `ETIMEDOUT`       | 操作がタイムアウト |
-| `too_many_files_open_in_system`      | `ENFILE`          | システム全体で開いているファイルが多すぎる |
-| `too_many_files_open`                | `EMFILE`          | 開いているファイルが多すぎる |
-| `too_many_links`                     | `EMLINK`          | リンクが多すぎる |
-| `too_many_symbolic_link_levels`      | `ELOOP`           | シンボリックリンクが多すぎる |
-| `value_too_large`                    | `EOVERFLOW`       | データ型に対して値が大きすぎる |
-| `wrong_protocol_type`                | `EPROTOTYPE`      | ソケットに指定できないプロトコルタイプ |
+| 列挙値                               | 値                | 説明                                     |非推奨|
+|--------------------------------------|-------------------|------------------------------------------|---|
+| `address_family_not_supported`       | `EAFNOSUPPORT`    | アドレスファミリーがサポートされていない ||
+| `address_in_use`                     | `EADDRINUSE`      | アドレスがすでに使用されている ||
+| `address_not_available`              | `EADDRNOTAVAIL`   | アドレスが使用できない ||
+| `already_connected`                  | `EISCONN`         | ソケットが接続されている ||
+| `argument_list_too_long`             | `E2BIG`           | 引数リストが長すぎる ||
+| `argument_out_of_domain`             | `EDOM`            | 引数が領域外 ||
+| `bad_address`                        | `EFAULT`          | アドレスが不正 ||
+| `bad_file_descriptor`                | `EBADF`           | ファイルディスクリプタが不正 ||
+| `bad_message`                        | `EBADMSG`         | メッセージが不正 ||
+| `broken_pipe`                        | `EPIPE`           | パイプが壊れている ||
+| `connection_aborted`                 | `ECONNABORTED`    | 接続が中止された ||
+| `connection_already_in_progress`     | `EALREADY`        | 接続がすでに処理中 ||
+| `connection_refused`                 | `ECONNREFUSED`    | 接続が拒否された ||
+| `connection_reset`                   | `ECONNRESET`      | 接続がリセットされた ||
+| `cross_device_link`                  | `EXDEV`           | 不適切なリンク ||
+| `destination_address_required`       | `EDESTADDRREQ`    | 宛先アドレスが必要 ||
+| `device_or_resource_busy`            | `EBUSY`           | リソースが使用中 ||
+| `directory_not_empty`                | `ENOTEMPTY`       | ディレクトリが空ではない ||
+| `executable_format_error`            | `ENOEXEC`         | 実行ファイル形式のエラー ||
+| `file_exists`                        | `EEXIST`          | ファイルが存在する ||
+| `file_too_large`                     | `EFBIG`           | ファイルが大きすぎる ||
+| `filename_too_long`                  | `ENAMETOOLONG`    | ファイル名が長すぎる ||
+| `function_not_supported`             | `ENOSYS`          | 関数がサポートされていない(実装されていない) ||
+| `host_unreachable`                   | `EHOSTUNREACH`    | ホストに到達不能 ||
+| `identifier_removed`                 | `EIDRM`           | 識別子が削除された ||
+| `illegal_byte_sequence`              | `EILSEQ`          | 不正なバイト列 ||
+| `inappropriate_io_control_operation` | `ENOTTY`          | I/O制御操作が不適切 ||
+| `interrupted`                        | `EINTR`           | 関数呼び出しが割り込まれた ||
+| `invalid_argument`                   | `EINVAL`          | 引数が無効 ||
+| `invalid_seek`                       | `ESPIPE`          | 無効なシーク ||
+| `io_error`                           | `EIO`             | I/Oエラー ||
+| `is_a_directory`                     | `EISDIR`          | ディレクトリである ||
+| `message_size`                       | `EMSGSIZE`        | メッセージが長すぎる ||
+| `network_down`                       | `ENETDOWN`        | ネットワークが不通 ||
+| `network_reset`                      | `ENETRESET`       | 接続がネットワーク側から中止された ||
+| `network_unreachable`                | `ENETUNREACH`     | ネットワークが到達不能である ||
+| `no_buffer_space`                    | `ENOBUFS`         | 使用可能なバッファ空間がない ||
+| `no_child_process`                   | `ECHILD`          | 子プロセスがない ||
+| `no_link`                            | `ENOLINK`         | リンクが切れている ||
+| `no_lock_available`                  | `ENOLCK`          | 利用できるロックがない ||
+| `no_message_available`               | `ENODATA`         | ストリームの読み出しキューの先頭に読み出し可能なメッセージがない |C++23で非推奨|
+| `no_message`                         | `ENOMSG`          | 要求された型のメッセージがない ||
+| `no_protocol_option`                 | `ENOPROTOOPT`     | 指定されたプロトコルが利用できない ||
+| `no_space_on_device`                 | `ENOSPC`          | デバイスに空き領域がない ||
+| `no_stream_resources`                | `ENOSR`           | 指定されたストリームリソースがない |C++23で非推奨|
+| `no_such_device_or_address`          | `ENXIO`           | そのようなデバイスやアドレスはない ||
+| `no_such_device`                     | `ENODEV`          | そのようなデバイスはない ||
+| `no_such_file_or_directory`          | `ENOENT`          | そのようなファイルやディレクトリはない ||
+| `no_such_process`                    | `ESRCH`           | そのようなプロセスはない ||
+| `not_a_directory`                    | `ENOTDIR`         | ディレクトリではない ||
+| `not_a_socket`                       | `ENOTSOCK`        | ソケットではない ||
+| `not_a_stream`                       | `ENOSTR`          | ストリームではない |C++23で非推奨|
+| `not_connected`                      | `ENOTCONN`        | ソケットが接続されていない ||
+| `not_enough_memory`                  | `ENOMEM`          | メモリ領域に十分な空きがない ||
+| `not_supported`                      | `ENOTSUP`         | 操作がサポートされていない ||
+| `operation_canceled`                 | `ECANCELED`       | 操作がキャンセルされた ||
+| `operation_in_progress`              | `EINPROGRESS`     | 操作が実行中である ||
+| `operation_not_permitted`            | `EPERM`           | 操作が許可されていない ||
+| `operation_not_supported`            | `EOPNOTSUPP`      | ソケットでサポートされていない操作 ||
+| `operation_would_block`              | `EWOULDBLOCK`     | 操作がブロッキングされる見込み ||
+| `owner_dead`                         | `EOWNERDEAD`      | ミューテックスを所有している間に終了した ||
+| `permission_denied`                  | `EACCES`          | 許可されていない ||
+| `protocol_error`                     | `EPROTO`          | プロトコルエラー ||
+| `protocol_not_supported`             | `EPROTONOSUPPORT` | プロトコルがサポートされていない ||
+| `read_only_file_system`              | `EROFS`           | ファイルシステムが読み取り専用 ||
+| `resource_deadlock_would_occur`      | `EDEADLK`         | リソースのデッドロックを回避した ||
+| `resource_unavailable_try_again`     | `EAGAIN`          | リソースが一時的に利用不可 ||
+| `result_out_of_range`                | `ERANGE`          | 結果が大きすぎる ||
+| `state_not_recoverable`              | `ENOTRECOVERABLE` | ロックが回復不能 ||
+| `stream_timeout`                     | `ETIME`           | タイムアウト |C++23で非推奨|
+| `text_file_busy`                     | `ETXTBSY`         | テキストファイルが使用中 ||
+| `timed_out`                          | `ETIMEDOUT`       | 操作がタイムアウト ||
+| `too_many_files_open_in_system`      | `ENFILE`          | システム全体で開いているファイルが多すぎる ||
+| `too_many_files_open`                | `EMFILE`          | 開いているファイルが多すぎる ||
+| `too_many_links`                     | `EMLINK`          | リンクが多すぎる ||
+| `too_many_symbolic_link_levels`      | `ELOOP`           | シンボリックリンクが多すぎる ||
+| `value_too_large`                    | `EOVERFLOW`       | データ型に対して値が大きすぎる ||
+| `wrong_protocol_type`                | `EPROTOTYPE`      | ソケットに指定できないプロトコルタイプ ||
 
+非推奨とされているものは、対応する`errno`値がPOSIX規格において廃止されたことに対応している。
 
 ## 参照
 - [Man page of ERRNO](http://linuxjm.osdn.jp/html/LDP_man-pages/man3/errno.3.html)
-
+- [LWG Issue 3869. Deprecate `std::errc` constants related to UNIX STREAMS](https://cplusplus.github.io/LWG/issue3869)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
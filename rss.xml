<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-02-20T14:41:37.902188</updated>
  <id>3840e215-dbcf-4c5b-bee0-0a774c523ffa</id>

  
    <entry>
      <title>remquo -- cmath/remquo: fix link url</title>
      <link href="https://cpprefjp.github.io/reference/cmath/remquo.html"/>
      <id>58d9a1f1730cb69791cd6e5262f424123a867941:reference/cmath/remquo.md</id>
      <updated>2023-02-20T21:40:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/remquo.md b/reference/cmath/remquo.md
index 5f47b4578..12002f080 100644
--- a/reference/cmath/remquo.md
+++ b/reference/cmath/remquo.md
@@ -135,7 +135,7 @@ remquo(6, 2) = quotient:3 remainder:0
 
 
 ## 参照
-- [std::remquo purpose and usage? - Stack Overflow](https://stackoverflow.com/q/11074865/684921)
+- [std::remquo purpose and usage? - Stack Overflow](https://stackoverflow.com/questions/11074865/stdremquo-purpose-and-usage)
 - [P0533R9 constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;cstdlib&amp;gt;`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p0533r9.pdf)
     - C++23での、一部関数の`constexpr`対応
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>remquo -- cmath/remquo: 関数の利用目的を追記</title>
      <link href="https://cpprefjp.github.io/reference/cmath/remquo.html"/>
      <id>9fc8d7418c4c64c443038637e34578e7a9428c4c:reference/cmath/remquo.md</id>
      <updated>2023-02-20T21:23:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/remquo.md b/reference/cmath/remquo.md
index 1dd97d8b8..5f47b4578 100644
--- a/reference/cmath/remquo.md
+++ b/reference/cmath/remquo.md
@@ -55,9 +55,9 @@ namespace std {
 * Integral[italic]
 
 ## 概要
-浮動小数点数の剰余と商を求める。remquoは、「remainder (剰余)」と「quotient (商)」と意味する。
+浮動小数点数の剰余と、商の一部を求める。remquoは、「remainder (剰余)」と「quotient (商)」と意味する。
 
-この関数は、浮動小数点数に対して除算を行い、除算の結果(商)と、その余り(剰余)を同時に求める。戻り値として剰余が返され、ポインタ引数`quo`に商の値が書き込まれる。
+この関数は、浮動小数点数に対して除算を行い、除算の結果(商)の一部と、その余り(剰余)を同時に求める。戻り値として剰余が返され、ポインタ引数`quo`に商の値の一部が書き込まれる。
 
 - (1) : `float`に対するオーバーロード
 - (2) : `double`に対するオーバーロード
@@ -70,12 +70,16 @@ namespace std {
 
 ## 戻り値
 - [`remainder()`](remainder.md)関数と同じ方法で剰余を求めて、戻り値として返す。
-- `quo`が指す値は、`x/y`で得られた商と同じ大きさを持ち、`x/y`で得られた符号と同じ符号を持つ
+- `quo`が指す値は、`x/y`で得られる商と下位数ビットが等しく、`x/y`で得られた符号と同じ符号を持つ。
+    - 商と等しくなる有効なビット数nは、少なくとも3以上の処理系定義の値とされる。
 
 `y`がゼロである場合、`quo`が指す値は未規定となる。またその際、定義域エラーを発生させるかゼロを返すかは、実装定義となる。定義域エラーが発生した際の挙動については、[`&amp;lt;cmath&amp;gt;`](../cmath.md) を参照。
 
 
 ## 備考
+`remquo`関数では`x/y`の厳密な商を求めることはできない。
+三角関数のような周期性をもつ数学関数の内部実装において、商の低次ビットを利用した引数の還元(argument reduction)操作で利用する。
+
 - C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
@@ -131,6 +135,7 @@ remquo(6, 2) = quotient:3 remainder:0
 
 
 ## 参照
+- [std::remquo purpose and usage? - Stack Overflow](https://stackoverflow.com/q/11074865/684921)
 - [P0533R9 constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;cstdlib&amp;gt;`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p0533r9.pdf)
     - C++23での、一部関数の`constexpr`対応
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cstdlib -- &lt;cstdlib&gt; : divを追加 #1067 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib.html"/>
      <id>72d23cc651cdd53f0277d10e15bb9b26f0f66155:reference/cstdlib.md</id>
      <updated>2023-02-20T19:06:32+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;cstdlib&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt;ヘッダでは、一般的なユーティリティの関数を定義する。これらの機能は基本的には、&lt;code&gt;std&lt;/code&gt;名前空間に属することを除いてC言語の標準ライブラリ&lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt;ヘッダと同じである。&lt;/p&gt;
&lt;p&gt;本ヘッダはフリースタンディング環境でも提供される。
フリースタンディング環境の場合、少なくとも&lt;code&gt;abort&lt;/code&gt;, &lt;code&gt;atexit&lt;/code&gt;, &lt;code&gt;at_quick_exit&lt;/code&gt;, &lt;code&gt;exit&lt;/code&gt;, &lt;code&gt;quick_exit&lt;/code&gt;関数がサポートされる。&lt;/p&gt;
&lt;p&gt;ただし、一部の機能には、&lt;code&gt;[[noreturn]]&lt;/code&gt;属性、&lt;code&gt;noexcept&lt;/code&gt;キーワード、スレッドローカルストレージのような、C++特有の言語機能に関する規定がある。&lt;/p&gt;
&lt;h2&gt;数値変換&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atoi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;int&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atoll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;long long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atof&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;double&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtoll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;long long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtoul&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;unsigned long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtoull&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;unsigned long long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtof&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、&lt;code&gt;float&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtod&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、&lt;code&gt;double&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtold&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、&lt;code&gt;long double&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;擬似乱数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;RAND_MAX&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rand&lt;/code&gt;関数によって生成される値域の最大値を表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;C++14から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;srand&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rand&lt;/code&gt;関数によって生成される擬似乱数のシードを指定する (function)&lt;/td&gt;
&lt;td&gt;C++14から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rand&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;srand&lt;/code&gt;で指定されたシードを元に、擬似乱数を生成する (function)&lt;/td&gt;
&lt;td&gt;C++14から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メモリ管理&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;aligned_alloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定したアライメントでメモリを確保する (function)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;malloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリを確保する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;calloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリを確保し、領域をゼロ初期化する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;realloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリを再確保する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;free&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;確保したメモリを解放する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;プログラムの開始と終了&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit_failure.html&#34;&gt;EXIT_FAILURE&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが異常終了したことを表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit_success.html&#34;&gt;EXIT_SUCCESS&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが正常終了したことを表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/abort.html&#34;&gt;abort&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムを異常終了させる (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit_.html&#34;&gt;_Exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;後処理をせずに、プログラムを終了させる (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit.html&#34;&gt;exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムを終了させる (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/atexit.html&#34;&gt;atexit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが通常の方法で終了するときに呼ばれる関数を登録する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/quick_exit.html&#34;&gt;quick_exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;後処理をせずに、プログラムを終了させる (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/at_quick_exit.html&#34;&gt;at_quick_exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quick_exit&lt;/code&gt;関数でプログラムが終了するときに呼ばれる関数を登録する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;getenv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;環境変数を取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;system&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;システムコマンドを実行する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;検索と並び替え&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bsearch&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;二分探索を行う (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;qsort&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の並べ替えを行う (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;整数に対する算術関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/abs.html&#34;&gt;abs&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;の絶対値を取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/abs.html&#34;&gt;labs&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long&lt;/code&gt;の絶対値を取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/abs.html&#34;&gt;llabs&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long long&lt;/code&gt;の絶対値を取得する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/div_t.html&#34;&gt;div_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;div&lt;/code&gt;関数の戻り値型 (class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/div.html&#34;&gt;div&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;の除算と剰余算を行う (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/ldiv_t.html&#34;&gt;ldiv_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ldiv&lt;/code&gt;関数の戻り値型 (class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/div.html&#34;&gt;ldiv&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long&lt;/code&gt;の除算と剰余算を行う (functon)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/lldiv_t.html&#34;&gt;lldiv_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;lldiv&lt;/code&gt;関数の戻り値型 (class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/div.html&#34;&gt;lldiv&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long long&lt;/code&gt;の除算と剰余算を行う (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;マルチバイト文字とワイド文字の変換&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MB_CUR_MAX&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字列の最大サイズを表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mblen&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字の長さを取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mbtowc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字を、ワイド文字に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wctomb&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字を、マルチバイト文字に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mbstowcs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字列を、ワイド文字列に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wcstombs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字列を、マルチバイト文字列に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>div -- &lt;cstdlib&gt; : divを追加 #1067 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib/div.html"/>
      <id>72d23cc651cdd53f0277d10e15bb9b26f0f66155:reference/cstdlib/div.md</id>
      <updated>2023-02-20T19:06:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdlib/div.md b/reference/cstdlib/div.md
new file mode 100644
index 000000000..1940b7e9e
--- /dev/null
+++ b/reference/cstdlib/div.md
@@ -0,0 +1,96 @@
+# div
+* cstdlib[meta header]
+* std[meta namespace]
+* function[meta id-type]
+
+```cpp
+namespace std {
+  div_t
+    div(int numer,
+        int denom);         // (1) C++03
+  constexpr div_t
+    div(int numer,
+        int denom);         // (1) C++23
+
+  ldiv_t
+    div(long numer,
+        long denom);        // (2) C++03
+  constexpr ldiv_t
+    div(long numer,
+        long denom);        // (2) C++23
+
+  lldiv_t
+    div(long long numer,
+        long long denom);   // (3) C++03
+  constexpr lldiv_t
+    div(long long numer,
+        long long denom);   // (3) C++23
+
+  ldiv_t
+    ldiv(long numer,
+         long denom);       // (4) C++03
+  constexpr ldiv_t
+    ldiv(long numer,
+         long denom);       // (4) C++23
+
+  lldiv_t
+    lldiv(long long numer,
+          long long denom); // (5) C++11
+  constexpr lldiv_t
+    lldiv(long long numer,
+          long long denom); // (5) C++23
+}
+```
+* div_t[link div_t.md]
+* ldiv_t[link ldiv_t.md]
+* lldiv_t[link lldiv_t.md]
+
+## 概要
+`number / denom`と`number % denom`の計算をひとつの操作で行う。
+
+- (1) : `int`型のオーバーロード
+- (2) : `long`型のオーバーロード
+- (3) : `long long`型のオーバーロード
+- (4) : `long`型規定
+- (5) : `long long`型規定
+
+
+## 戻り値
+戻り値型となるクラスの`quot`に商、`rem`に剰余を代入して返す。
+
+結果のどちらかが表現できない場合は未定義動作となる。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;cstdlib&amp;gt;
+
+int main()
+{
+  std::div_t x = std::div(5, 2);
+  std::cout &amp;lt;&amp;lt; x.quot &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; x.rem &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::div[color ff0000]
+* std::div_t[link div_t.md]
+
+### 出力
+```
+2
+1
+```
+
+
+### 備考
+特定の環境では、早期に `constexpr` 対応されている場合がある：
+
+- GCC 4.6.1 以上
+
+
+## 参照
+- [P0533R9 constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;cstdlib&amp;gt;`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p0533r9.pdf)
+    - C++23での、一部関数の`constexpr`対応
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>div_t -- &lt;cstdlib&gt; : divを追加 #1067 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib/div_t.html"/>
      <id>72d23cc651cdd53f0277d10e15bb9b26f0f66155:reference/cstdlib/div_t.md</id>
      <updated>2023-02-20T19:06:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdlib/div_t.md b/reference/cstdlib/div_t.md
new file mode 100644
index 000000000..799dad33a
--- /dev/null
+++ b/reference/cstdlib/div_t.md
@@ -0,0 +1,41 @@
+# div_t
+* cstdlib[meta header]
+* std[meta namespace]
+* class[meta id-type]
+
+```cpp
+namespace std {
+  struct div_t {
+    int quot;
+    int rem;
+  };
+}
+```
+
+## 概要
+[`std::div()`](div.md)関数の戻り値。
+
+`quot`は「quotient (商)」、`rem`は「remainder (剰余)」。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;cstdlib&amp;gt;
+
+int main()
+{
+  std::div_t x = std::div(5, 2);
+  std::cout &amp;lt;&amp;lt; x.quot &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; x.rem &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::div_t[color ff0000]
+* std::div[link div.md]
+
+### 出力
+```
+2
+1
+```
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ldiv_t -- &lt;cstdlib&gt; : divを追加 #1067 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib/ldiv_t.html"/>
      <id>72d23cc651cdd53f0277d10e15bb9b26f0f66155:reference/cstdlib/ldiv_t.md</id>
      <updated>2023-02-20T19:06:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdlib/ldiv_t.md b/reference/cstdlib/ldiv_t.md
new file mode 100644
index 000000000..a9de6511c
--- /dev/null
+++ b/reference/cstdlib/ldiv_t.md
@@ -0,0 +1,41 @@
+# ldiv_t
+* cstdlib[meta header]
+* std[meta namespace]
+* class[meta id-type]
+
+```cpp
+namespace std {
+  struct ldiv_t {
+    long quot;
+    long rem;
+  };
+}
+```
+
+## 概要
+[`std::div()`](div.md)関数の`long`版の戻り値。
+
+`quot`は「quotient (商)」、`rem`は「remainder (剰余)」。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;cstdlib&amp;gt;
+
+int main()
+{
+  std::ldiv_t x = std::div(5L, 2L);
+  std::cout &amp;lt;&amp;lt; x.quot &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; x.rem &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::ldiv_t[color ff0000]
+* std::div[link div.md]
+
+### 出力
+```
+2
+1
+```
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lldiv_t -- &lt;cstdlib&gt; : divを追加 #1067 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib/lldiv_t.html"/>
      <id>72d23cc651cdd53f0277d10e15bb9b26f0f66155:reference/cstdlib/lldiv_t.md</id>
      <updated>2023-02-20T19:06:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdlib/lldiv_t.md b/reference/cstdlib/lldiv_t.md
new file mode 100644
index 000000000..4fc72ed07
--- /dev/null
+++ b/reference/cstdlib/lldiv_t.md
@@ -0,0 +1,42 @@
+# lldiv_t
+* cstdlib[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp11[meta cpp]
+
+```cpp
+namespace std {
+  struct lldiv_t {
+    long long quot;
+    long long rem;
+  };
+}
+```
+
+## 概要
+[`std::div()`](div.md)関数の`long long`版の戻り値。
+
+`quot`は「quotient (商)」、`rem`は「remainder (剰余)」。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;cstdlib&amp;gt;
+
+int main()
+{
+  std::lldiv_t x = std::div(5LL, 2LL);
+  std::cout &amp;lt;&amp;lt; x.quot &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; x.rem &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::lldiv_t[color ff0000]
+* std::div[link div.md]
+
+### 出力
+```
+2
+1
+```
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>abs -- &lt;cstdlib&gt; : absを追加 #1067 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/abs.html"/>
      <id>2d01c561c9be61f02c5bac8113902099b2289481:reference/cmath/abs.md</id>
      <updated>2023-02-20T18:33:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/abs.md b/reference/cmath/abs.md
index 2fd23a231..8ae5febb3 100644
--- a/reference/cmath/abs.md
+++ b/reference/cmath/abs.md
@@ -45,7 +45,7 @@ namespace std {
 ## 戻り値
 引数 `x` の絶対値を返す。
 
-- (1),(2),(3) : `x` が `±∞` だった場合 `+∞` を返す。
+- (1),(2),(3),(4) : `x` が `±∞` だった場合 `+∞` を返す。
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>abs -- &lt;cstdlib&gt; : absを追加 #1067 #1022</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/abs.html"/>
      <id>2d01c561c9be61f02c5bac8113902099b2289481:reference/complex/complex/abs.md</id>
      <updated>2023-02-20T18:33:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/abs.md b/reference/complex/complex/abs.md
index cf7686b0e..69f779ae0 100644
--- a/reference/complex/complex/abs.md
+++ b/reference/complex/complex/abs.md
@@ -24,21 +24,21 @@ namespace std {
 - 処理系が ISO IEC 60559 に準拠しているかどうかは、C99 の場合はマクロ `__STDC_IEC_559_COMPLEX__` が `1` に定義されている事で判別可能であるが、C++ の規格書には該当する記載を見つける事ができなかった。
 - 絶対値の算出については、一部の算術型、および、[`valarray`](/reference/valarray/valarray.md) クラステンプレートに対しても、他のヘッダで定義されている。  
 
-	| 引数の型                                           | 関数                                          | ヘッダ                               | 備考       |
-	|----------------------------------------------------|-----------------------------------------------|--------------------------------------|------------|
-	| `float`                                            | [`abs`](/reference/cmath/abs.md)              | [`cmath`](/reference/cmath.md)       |            |
-	|                                                    | [`fabs`](/reference/cmath/fabs.md)            | [`cmath`](/reference/cmath.md)       |            |
-	| `double`                                           | [`abs`](/reference/cmath/abs.md)              | [`cmath`](/reference/cmath.md)       |            |
-	|                                                    | [`fabs`](/reference/cmath/fabs.md)            | [`cmath`](/reference/cmath.md)       |            |
-	| `long double`                                      | [`abs`](/reference/cmath/abs.md)              | [`cmath`](/reference/cmath.md)       |            |
-	|                                                    | [`fabs`](/reference/cmath/fabs.md)            | [`cmath`](/reference/cmath.md)       |            |
-	| 任意の整数型                                       | [`abs`](/reference/cmath/abs.md)              | [`cmath`](/reference/cmath.md)       | C++11 から |
-	|                                                    | [`fabs`](/reference/cmath/fabs.md)            | [`cmath`](/reference/cmath.md)       | C++11 から |
-	| `int`                                              | [`abs`](/reference/cstdlib/abs.md.nolink)     | [`cstdlib`](/reference/cstdlib.md)   |            |
-	| `long int`                                         | [`labs`](/reference/cstdlib/labs.md.nolink)   | [`cstdlib`](/reference/cstdlib.md)   |            |
-	|                                                    | [`abs`](/reference/cstdlib/abs.md.nolink)     | [`cstdlib`](/reference/cstdlib.md)   |            |
-	| `long long int`                                    | [`llabs`](/reference/cstdlib/llabs.md.nolink) | [`cstdlib`](/reference/cstdlib.md)   | C++11 から |
-	|                                                    | [`abs`](/reference/cstdlib/abs.md.nolink)     | [`cstdlib`](/reference/cstdlib.md)   | C++11 から |
+	| 引数の型                                           | 関数                                 | ヘッダ                               | 備考       |
+	|----------------------------------------------------|--------------------------------------|--------------------------------------|------------|
+	| `float`                                            | [`abs`](/reference/cmath/abs.md)     | [`cmath`](/reference/cmath.md)       |            |
+	|                                                    | [`fabs`](/reference/cmath/fabs.md)   | [`cmath`](/reference/cmath.md)       |            |
+	| `double`                                           | [`abs`](/reference/cmath/abs.md)     | [`cmath`](/reference/cmath.md)       |            |
+	|                                                    | [`fabs`](/reference/cmath/fabs.md)   | [`cmath`](/reference/cmath.md)       |            |
+	| `long double`                                      | [`abs`](/reference/cmath/abs.md)     | [`cmath`](/reference/cmath.md)       |            |
+	|                                                    | [`fabs`](/reference/cmath/fabs.md)   | [`cmath`](/reference/cmath.md)       |            |
+	| 任意の整数型                                       | [`abs`](/reference/cmath/abs.md)     | [`cmath`](/reference/cmath.md)       | C++11 から |
+	|                                                    | [`fabs`](/reference/cmath/fabs.md)   | [`cmath`](/reference/cmath.md)       | C++11 から |
+	| `int`                                              | [`abs`](/reference/cstdlib/abs.md)   | [`cstdlib`](/reference/cstdlib.md)   |            |
+	| `long int`                                         | [`labs`](/reference/cstdlib/abs.md)  | [`cstdlib`](/reference/cstdlib.md)   |            |
+	|                                                    | [`abs`](/reference/cstdlib/abs.md)   | [`cstdlib`](/reference/cstdlib.md)   |            |
+	| `long long int`                                    | [`llabs`](/reference/cstdlib/abs.md) | [`cstdlib`](/reference/cstdlib.md)   | C++11 から |
+	|                                                    | [`abs`](/reference/cstdlib/abs.md)   | [`cstdlib`](/reference/cstdlib.md)   | C++11 から |
 	| [`valarray`](/reference/valarray/valarray.md)`&amp;lt;T&amp;gt;` | [`abs`](/reference/valarray/valarray/abs.md)  | [`valarray`](/reference/valarray.md) |            |
 
 	なお、上記のうち、任意の整数型に対する [`abs`](/reference/cmath/abs.md) については C++11 で追加されたが、ある種の問題を引き起こすことから、今後削除される可能性がある。[Validity and return type of std::abs(0u) is unclear](http://wg21.cmeerw.net/lwg/issue2192) 参照。  
@@ -89,4 +89,4 @@ abs( (1,2) ) = 2.23607
 | [`polar`](polar.md)                | 指定した絶対値と偏角の複素数値を得る。 |
 | [`abs`](/reference/cmath/abs.md)   | 絶対値を得る。（浮動小数点版）         |
 | [`fabs`](/reference/cmath/fabs.md) | 絶対値を得る。（浮動小数点版）         |
-| [`abs`](/reference/cstdlib/abs.md.nolink) | 絶対値を得る。（整数版）               |
+| [`abs`](/reference/cstdlib/abs.md) | 絶対値を得る。（整数版）               |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cstdlib -- &lt;cstdlib&gt; : absを追加 #1067 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib.html"/>
      <id>2d01c561c9be61f02c5bac8113902099b2289481:reference/cstdlib.md</id>
      <updated>2023-02-20T18:33:35+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;cstdlib&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt;ヘッダでは、一般的なユーティリティの関数を定義する。これらの機能は基本的には、&lt;code&gt;std&lt;/code&gt;名前空間に属することを除いてC言語の標準ライブラリ&lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt;ヘッダと同じである。&lt;/p&gt;
&lt;p&gt;本ヘッダはフリースタンディング環境でも提供される。
フリースタンディング環境の場合、少なくとも&lt;code&gt;abort&lt;/code&gt;, &lt;code&gt;atexit&lt;/code&gt;, &lt;code&gt;at_quick_exit&lt;/code&gt;, &lt;code&gt;exit&lt;/code&gt;, &lt;code&gt;quick_exit&lt;/code&gt;関数がサポートされる。&lt;/p&gt;
&lt;p&gt;ただし、一部の機能には、&lt;code&gt;[[noreturn]]&lt;/code&gt;属性、&lt;code&gt;noexcept&lt;/code&gt;キーワード、スレッドローカルストレージのような、C++特有の言語機能に関する規定がある。&lt;/p&gt;
&lt;h2&gt;数値変換&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atoi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;int&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atoll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;long long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atof&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;double&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtoll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;long long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtoul&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;unsigned long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtoull&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;unsigned long long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtof&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、&lt;code&gt;float&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtod&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、&lt;code&gt;double&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtold&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、&lt;code&gt;long double&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;擬似乱数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;RAND_MAX&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rand&lt;/code&gt;関数によって生成される値域の最大値を表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;C++14から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;srand&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rand&lt;/code&gt;関数によって生成される擬似乱数のシードを指定する (function)&lt;/td&gt;
&lt;td&gt;C++14から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rand&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;srand&lt;/code&gt;で指定されたシードを元に、擬似乱数を生成する (function)&lt;/td&gt;
&lt;td&gt;C++14から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メモリ管理&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;aligned_alloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定したアライメントでメモリを確保する (function)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;malloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリを確保する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;calloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリを確保し、領域をゼロ初期化する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;realloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリを再確保する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;free&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;確保したメモリを解放する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;プログラムの開始と終了&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit_failure.html&#34;&gt;EXIT_FAILURE&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが異常終了したことを表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit_success.html&#34;&gt;EXIT_SUCCESS&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが正常終了したことを表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/abort.html&#34;&gt;abort&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムを異常終了させる (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit_.html&#34;&gt;_Exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;後処理をせずに、プログラムを終了させる (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit.html&#34;&gt;exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムを終了させる (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/atexit.html&#34;&gt;atexit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが通常の方法で終了するときに呼ばれる関数を登録する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/quick_exit.html&#34;&gt;quick_exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;後処理をせずに、プログラムを終了させる (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/at_quick_exit.html&#34;&gt;at_quick_exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quick_exit&lt;/code&gt;関数でプログラムが終了するときに呼ばれる関数を登録する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;getenv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;環境変数を取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;system&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;システムコマンドを実行する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;検索と並び替え&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bsearch&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;二分探索を行う (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;qsort&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の並べ替えを行う (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;整数に対する算術関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/abs.html&#34;&gt;abs&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;の絶対値を取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/abs.html&#34;&gt;labs&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long&lt;/code&gt;の絶対値を取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/abs.html&#34;&gt;llabs&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long long&lt;/code&gt;の絶対値を取得する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;div_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;div&lt;/code&gt;関数の戻り値型 (class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;div&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;の除算を行う (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ldiv_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;div&lt;/code&gt;関数の戻り値型 (class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ldiv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long&lt;/code&gt;の除算を行う (functon)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lldiv_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;div&lt;/code&gt;関数の戻り値型 (class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lldiv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long long&lt;/code&gt;の除算を行う (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;マルチバイト文字とワイド文字の変換&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MB_CUR_MAX&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字列の最大サイズを表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mblen&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字の長さを取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mbtowc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字を、ワイド文字に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wctomb&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字を、マルチバイト文字に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mbstowcs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字列を、ワイド文字列に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wcstombs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字列を、マルチバイト文字列に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>abs -- &lt;cstdlib&gt; : absを追加 #1067 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib/abs.html"/>
      <id>2d01c561c9be61f02c5bac8113902099b2289481:reference/cstdlib/abs.md</id>
      <updated>2023-02-20T18:33:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdlib/abs.md b/reference/cstdlib/abs.md
new file mode 100644
index 000000000..ad61f0b6a
--- /dev/null
+++ b/reference/cstdlib/abs.md
@@ -0,0 +1,100 @@
+# abs
+* cstdlib[meta header]
+* std[meta namespace]
+* function[meta id-type]
+
+```cpp
+namespace std {
+  int
+    abs(int j);         // (1) C++03
+  constexpr int
+    abs(int j);         // (1) C++23
+
+  long
+    int abs(long j);    // (2) C++03
+  constexpr long
+    int abs(long j);    // (2) C++23
+
+  long long
+    abs(long long j);   // (3) C++11
+  constexpr long long
+    abs(long long j);   // (3) C++23
+
+  float
+    abs(float j);               // (4) C++03からC++20まで
+  double
+    abs(double j);              // (5) C++03からC++20まで
+  long double
+    abs(long double j);         // (6) C++03からC++20まで
+
+  floating-point-type
+    abs(floating-point-type j); // (7) C++03からC++20まで
+
+  long
+    labs(long j);       // (8) C++03
+  constexpr long
+    labs(long j);       // (8) C++23
+
+  long long
+    llabs(long long j); // (9) C++11
+  constexpr long long
+    llabs(long long j); // (9) C++23
+}
+```
+
+## 概要
+絶対値を求める。abs は absolute value（絶対値）の略。
+
+- (1) : `int`に対するオーバーロード
+- (2) : `long`に対するオーバーロード
+- (3) : `long long`に対するオーバーロード
+- (4) : `float`に対するオーバーロード
+- (5) : `double`に対するオーバーロード
+- (6) : `long double`に対するオーバーロード
+- (7) : 浮動小数点数型に対するオーバーロード
+- (8) : `long`規定
+- (9) : `long long`規定
+
+
+## 戻り値
+引数 `j` の絶対値を返す。
+
+- (4),(5),(6),(7) : `j` が `±∞` だった場合 `+∞` を返す。
+
+
+## 備考
+- パラメータの型`X`において[`is_unsigned_v`](/reference/type_traits/is_unsigned.md)`&amp;lt;X&amp;gt;`が`true`であり、`X`が整数昇格によって`int`に変換できない場合、プログラムは不適格となる
+    - Cとの互換性のため、`int`に昇格できる符号なし整数型は許可される
+- C++23では、(4)、(5)、(6)が(7)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;cstdlib&amp;gt;
+
+int main()
+{
+  int x = std::abs(-1);
+  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::abs[color ff0000]
+
+### 出力
+```
+1
+```
+
+
+### 備考
+特定の環境では、早期に `constexpr` 対応されている場合がある：
+
+- GCC 4.6.1 以上
+
+
+## 参照
+- [P0533R9 constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;cstdlib&amp;gt;`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p0533r9.pdf)
+    - C++23での、一部関数の`constexpr`対応
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cyl_bessel_i -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/cyl_bessel_i.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/cyl_bessel_i.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/cyl_bessel_i.md b/reference/cmath/cyl_bessel_i.md
index 63681b73c..b6a9ecfad 100644
--- a/reference/cmath/cyl_bessel_i.md
+++ b/reference/cmath/cyl_bessel_i.md
@@ -7,15 +7,40 @@
 
 ```cpp
 namespace std {
-float cyl_bessel_if(float nu, float x);
-double cyl_bessel_i(double nu, double x);
-long double cyl_bessel_il(long double nu, long double x);
+  double
+    cyl_bessel_i(double nu,
+                 double x);              // (1) C++17
+  floating-point-type
+    cyl_bessel_i(floating-point-type nu,
+                 floating-point-type x); // (1) C++23
+
+  Promoted
+    cyl_bessel_i(Arithmetic1 nu,
+                 Arithmetic2 x);         // (2) C++17
+
+  float
+    cyl_bessel_if(float nu,
+                  float x);              // (3) C++17
+
+  long double
+    cyl_bessel_il(long double nu,
+                  long double x);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic1[italic]
+* Arithmetic2[italic]
 
 ## 概要
 第一種変形ベッセル関数 (modified Bessel functions of the first kind) を求める。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する大きい方の精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `nu`, `x` の第一種変形ベッセル関数
@@ -28,7 +53,8 @@ $J$ は第一種ベッセル関数 ([`cyl_bessel_j`](cyl_bessel_j.md)) である
 
 
 ## 備考
-`nu &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である。
+- `nu &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -84,11 +110,13 @@ GCC 7.1.0–8.0.0 では `nu &amp;lt; 0` のときに [`std::domain_error`](/reference/
 
 
 ## 関連項目
-* 第一種ベッセル関数 [`cyl_bessel_j`](cyl_bessel_j.md)
-* 第二種変形ベッセル関数 [`cyl_bessel_k`](cyl_bessel_k.md)
+- 第一種ベッセル関数 [`cyl_bessel_j`](cyl_bessel_j.md)
+- 第二種変形ベッセル関数 [`cyl_bessel_k`](cyl_bessel_k.md)
 
 
 ## 参照
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cyl_bessel_j -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/cyl_bessel_j.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/cyl_bessel_j.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/cyl_bessel_j.md b/reference/cmath/cyl_bessel_j.md
index 7f4d945e5..0958d751e 100644
--- a/reference/cmath/cyl_bessel_j.md
+++ b/reference/cmath/cyl_bessel_j.md
@@ -7,15 +7,40 @@
 
 ```cpp
 namespace std {
-float cyl_bessel_jf(float nu, float x);
-double cyl_bessel_j(double nu, double x);
-long double cyl_bessel_jl(long double nu, long double x);
+  double
+    cyl_bessel_j(double nu,
+                 double x);              // (1) C++17
+  floating-point-type
+    cyl_bessel_j(floating-point-type nu,
+                 floating-point-type x); // (1) C++23
+
+  Promoted
+    cyl_bessel_j(Arithmetic1 nu,
+                 Arithmetic2 x);         // (2) C++17
+
+  float
+    cyl_bessel_jf(float nu,
+                  float x);              // (3) C++17
+
+  long double
+    cyl_bessel_jl(long double nu,
+                  long double x);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic1[italic]
+* Arithmetic2[italic]
 
 ## 概要
 第一種ベッセル関数 (Bessel functions of the first kind) を求める。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する大きい方の精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `nu`, `x` の第一種ベッセル関数
@@ -27,7 +52,8 @@ $$
 
 
 ## 備考
-`nu &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である。
+- `nu &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -85,13 +111,15 @@ GCC 7.1.0–8.0.0 では `nu &amp;lt; 0` のときに [`std::domain_error`](/reference/
 
 
 ## 関連項目
-* 第一種変形ベッセル関数 [`cyl_bessel_i`](cyl_bessel_i.md)
-* 第二種変形ベッセル関数 [`cyl_bessel_k`](cyl_bessel_k.md)
-* 第二種ベッセル関数 [`cyl_neumann`](cyl_neumann.md)
-* 第一種球ベッセル関数 [`sph_bessel`](sph_bessel.md)
+- 第一種変形ベッセル関数 [`cyl_bessel_i`](cyl_bessel_i.md)
+- 第二種変形ベッセル関数 [`cyl_bessel_k`](cyl_bessel_k.md)
+- 第二種ベッセル関数 [`cyl_neumann`](cyl_neumann.md)
+- 第一種球ベッセル関数 [`sph_bessel`](sph_bessel.md)
 
 
 ## 参照
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cyl_bessel_k -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/cyl_bessel_k.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/cyl_bessel_k.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/cyl_bessel_k.md b/reference/cmath/cyl_bessel_k.md
index 4d8be72c8..8bdb4b930 100644
--- a/reference/cmath/cyl_bessel_k.md
+++ b/reference/cmath/cyl_bessel_k.md
@@ -7,15 +7,40 @@
 
 ```cpp
 namespace std {
-float cyl_bessel_kf(float nu, float x);
-double cyl_bessel_k(double nu, double x);
-long double cyl_bessel_kl(long double nu, long double x);
+  double
+    cyl_bessel_k(double nu,
+                 double x);              // (1) C++17
+  floating-point-type
+    cyl_bessel_k(floating-point-type nu,
+                 floating-point-type x); // (1) C++23
+
+  Promoted
+    cyl_bessel_k(Arithmetic1 nu,
+                 Arithmetic2 x);         // (2) C++17
+
+  float
+    cyl_bessel_kf(float nu,
+                  float x);              // (3) C++17
+
+  long double
+    cyl_bessel_kl(long double nu,
+                  long double x);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic1[italic]
+* Arithmetic2[italic]
 
 ## 概要
 第二種変形ベッセル関数 (modified Bessel functions of the second kind) を求める。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する大きい方の精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `nu`, `x` の第二種変形ベッセル関数
@@ -33,7 +58,8 @@ $I$, $J$, $N$ はそれぞれ
 
 
 ## 備考
-`nu &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である。
+- `nu &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -89,12 +115,14 @@ GCC 7.1.0–8.0.0 では `nu &amp;lt; 0` のときに [`std::domain_error`](/reference/
 
 
 ## 関連項目
-* 第一種変形ベッセル関数 [`cyl_bessel_i`](cyl_bessel_i.md)
-* 第一種ベッセル関数 [`cyl_bessel_j`](cyl_bessel_j.md)
-* 第二種ベッセル関数 [`cyl_neumann`](cyl_neumann.md)
+- 第一種変形ベッセル関数 [`cyl_bessel_i`](cyl_bessel_i.md)
+- 第一種ベッセル関数 [`cyl_bessel_j`](cyl_bessel_j.md)
+- 第二種ベッセル関数 [`cyl_neumann`](cyl_neumann.md)
 
 
 ## 参照
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cyl_neumann -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/cyl_neumann.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/cyl_neumann.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/cyl_neumann.md b/reference/cmath/cyl_neumann.md
index 8e092a00a..548ce6881 100644
--- a/reference/cmath/cyl_neumann.md
+++ b/reference/cmath/cyl_neumann.md
@@ -7,15 +7,40 @@
 
 ```cpp
 namespace std {
-float cyl_neumannf(float nu, float x);
-double cyl_neumann(double nu, double x);
-long double cyl_neumannl(long double nu, long double x);
+  double
+    cyl_neumann(double nu,
+                double x);              // (1) C++17
+  floating-point-type
+    cyl_neumann(floating-point-type nu,
+                floating-point-type x); // (1) C++23
+
+  Promoted
+    cyl_neumann(Arithmetic1 nu,
+                Arithmetic2 x);         // (2) C++17
+
+  float
+    cyl_neumannf(float nu,
+                 float x);              // (3) C++17
+
+  long double
+    cyl_neumannl(long double nu,
+                 long double x);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic1[italic]
+* Arithmetic2[italic]
 
 ## 概要
 第二種ベッセル関数 (Bessel functions of the second kind)、ノイマン関数 (Neumann functions) を求める。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` の第二種ベッセル関数
@@ -28,7 +53,8 @@ $J$ は第一種ベッセル関数 ([`cyl_bessel_j`](cyl_bessel_j.md)) である
 
 
 ## 備考
-`nu &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である。
+- `nu &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -95,3 +121,5 @@ GCC 7.1.0–8.0.0 では `nu &amp;lt; 0` のときに [`std::domain_error`](/reference/
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ellint_1 -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/ellint_1.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/ellint_1.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/ellint_1.md b/reference/cmath/ellint_1.md
index 68c4b64d6..7c47a2c82 100644
--- a/reference/cmath/ellint_1.md
+++ b/reference/cmath/ellint_1.md
@@ -7,15 +7,40 @@
 
 ```cpp
 namespace std {
-float ellint_1f(float k, float phi);
-double ellint_1(double k, double phi);
-long double ellint_1l(long double k, long double phi);
+  double
+    ellint_1(double k,
+             double phi);              // (1) C++17
+  floating-point-type
+    ellint_1(floating-point-type k,
+             floating-point-type phi); // (1) C++23
+
+  Promoted
+    ellint_1(Arithmetic1 k,
+             Arithmetic2 phi);         // (2) C++17
+
+  float
+    ellint_1f(float k,
+              float phi);              // (3) C++17
+
+  long double
+    ellint_1l(long double k,
+              long double phi);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic1[italic]
+* Arithmetic2[italic]
 
 ## 概要
 第一種不完全楕円積分 (incomplete elliptic integral of the first kind) を計算する。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する大きい方の精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `k`, `phi` の第一種不完全楕円積分
@@ -27,7 +52,8 @@ $$
 
 
 ## 備考
-$ F(k, \pi/2) = K(k)$ (第一種完全楕円積分 [`comp_ellint_1`](comp_ellint_1.md))。
+- $ F(k, \pi/2) = K(k)$ (第一種完全楕円積分 [`comp_ellint_1`](comp_ellint_1.md))
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -85,10 +111,12 @@ GCC 7.1.0–8.0.0 では `|k| == 1 &amp;amp;&amp;amp; |phi| &amp;gt;= π / 2` の場合 `nan` を返す
 
 
 ## 関連項目
-* 第一種完全楕円積分 [`comp_ellint_1`](comp_ellint_1.md)
+- 第一種完全楕円積分 [`comp_ellint_1`](comp_ellint_1.md)
 
 
 ## 参照
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ellint_2 -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/ellint_2.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/ellint_2.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/ellint_2.md b/reference/cmath/ellint_2.md
index b454f4951..041b8c6b0 100644
--- a/reference/cmath/ellint_2.md
+++ b/reference/cmath/ellint_2.md
@@ -7,15 +7,40 @@
 
 ```cpp
 namespace std {
-float ellint_2f(float k, float phi);
-double ellint_2(double k, double phi);
-long double ellint_2l(long double k, long double phi);
+  double
+    ellint_2(double k,
+             double phi);              // (1) C++17
+  floating-point-type
+    ellint_2(floating-point-type k,
+             floating-point-type phi); // (1) C++23
+
+  Promoted
+    ellint_2(Arithmetic1 k,
+             Arithmetic2 phi);         // (2) C++17
+
+  float
+    ellint_2f(float k,
+              float phi);              // (3) C++17
+
+  long double
+    ellint_2l(long double k,
+              long double phi);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic1[italic]
+* Arithmetic2[italic]
 
 ## 概要
 第二種不完全楕円積分 (incomplete elliptic integral of the second kind) を計算する。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する大きい方の精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `k`, `phi` の第二種不完全楕円積分
@@ -27,7 +52,8 @@ $$
 
 
 ## 備考
-$ E(k, \pi/2) = E(k) $ (第二種完全楕円積分 [`comp_ellint_2`](comp_ellint_2.md))。
+- $ E(k, \pi/2) = E(k) $ (第二種完全楕円積分 [`comp_ellint_2`](comp_ellint_2.md))
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -80,10 +106,12 @@ ellint_2(1, 0.5 pi) = 1
 
 
 ## 関連項目
-* 第二種完全楕円積分 [`comp_ellint_2`](comp_ellint_2.md)
+- 第二種完全楕円積分 [`comp_ellint_2`](comp_ellint_2.md)
 
 
 ## 参照
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ellint_3 -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/ellint_3.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/ellint_3.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/ellint_3.md b/reference/cmath/ellint_3.md
index 09166a3f9..b48b69b77 100644
--- a/reference/cmath/ellint_3.md
+++ b/reference/cmath/ellint_3.md
@@ -7,15 +7,40 @@
 
 ```cpp
 namespace std {
-float ellint_3f(float k, float nu, float phi);
-double ellint_3(double k, double nu, double phi);
-long double ellint_3l(long double k, long double nu, long double phi);
+  double
+    ellint_3(double k,
+             double phi);              // (1) C++17
+  floating-point-type
+    ellint_3(floating-point-type k,
+             floating-point-type phi); // (1) C++23
+
+  Promoted
+    ellint_3(Arithmetic1 k,
+             Arithmetic2 phi);         // (2) C++17
+
+  float
+    ellint_3f(float k,
+              float phi);              // (3) C++17
+
+  long double
+    ellint_3l(long double k,
+              long double phi);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic1[italic]
+* Arithmetic2[italic]
 
 ## 概要
 第三種不完全楕円積分 (incomplete elliptic integral of the third kind) を計算する。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する大きい方の精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `k`, `nu`, `phi` の第三種不完全楕円積分
@@ -28,9 +53,9 @@ $$
 
 
 ## 備考
-$ \Pi(\nu, k, \pi/2) = \Pi(\nu, k) $ (第三種完全楕円積分 [`comp_ellint_3`](comp_ellint_3.md))。
-
-$ \Pi(0, k, \phi) = F(k, \phi) $ (第一種不完全楕円積分 [`ellint_1`](ellint_1.md))。
+- $ \Pi(\nu, k, \pi/2) = \Pi(\nu, k) $ (第三種完全楕円積分 [`comp_ellint_3`](comp_ellint_3.md))
+- $ \Pi(0, k, \phi) = F(k, \phi) $ (第一種不完全楕円積分 [`ellint_1`](ellint_1.md))
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -109,10 +134,12 @@ GCC 7.1.0–8.0.0 では `1 - nu * sin^2(phi) &amp;lt; 0` のときに [`std::domain_er
 
 
 ## 関連項目
-* 第三種完全楕円積分 [`comp_ellint_3`](comp_ellint_3.md)
+- 第三種完全楕円積分 [`comp_ellint_3`](comp_ellint_3.md)
 
 
 ## 参照
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>expint -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/expint.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/expint.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/expint.md b/reference/cmath/expint.md
index 58a766535..ee4e7b02a 100644
--- a/reference/cmath/expint.md
+++ b/reference/cmath/expint.md
@@ -7,20 +7,45 @@
 
 ```cpp
 namespace std {
-float expintf(float x);
-double expint(double x);
-long double expintl(long double x);
+  double
+    expint(double x);              // (1) C++17
+  floating-point-type
+    expint(floating-point-type x); // (1) C++23
+
+  Promoted
+    expint(Arithmetic x);          // (2) C++17
+
+  float
+    expintf(float x);              // (3) C++17
+
+  long double
+    expintl(long double x);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic[italic]
 
 ## 概要
 指数積分 (exponential integral) を求める。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
+
 ## 戻り値
 引数 `x` の指数積分
 $$ \mathrm{Ei}(x) = - \int_{-x}^\infty \mathrm{d}t \frac{e^{-t}}{t} = - \int_{-\infty}^x \mathrm{d}t \frac{e^t}{t} $$
 を返す。
 
+
+## 備考
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+
+
 ## 例
 ```cpp example
 #include &amp;lt;cmath&amp;gt;
@@ -62,3 +87,5 @@ expint(∞)  = -nan
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hermite -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/hermite.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/hermite.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/hermite.md b/reference/cmath/hermite.md
index 8484383d4..cfe3004a2 100644
--- a/reference/cmath/hermite.md
+++ b/reference/cmath/hermite.md
@@ -7,15 +7,39 @@
 
 ```cpp
 namespace std {
-float hermitef(unsigned n, float x);
-double hermite(unsigned n, double x);
-long double hermitel(unsigned n, long double x);
+  double
+    hermite(unsigned int n,
+            double x);              // (1) C++17
+  floating-point-type
+    hermite(unsigned int n,
+            floating-point-type x); // (1) C++23
+
+  Promoted
+    hermite(unsigned int n,
+            Arithmetic x);          // (2) C++17
+
+  float
+    hermitef(unsigned int n,
+             float x);              // (3) C++17
+
+  long double
+    hermitel(unsigned int n,
+             long double x);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic[italic]
 
 ## 概要
 エルミート多項式 (Hermite polynomials) を求める。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `n`, `x` のエルミート多項式
@@ -24,7 +48,8 @@ $$ H_n(x) = (-1)^n \exp(x^2) \frac{\mathrm{d}^n}{\mathrm{d}x^n} \exp(-x^2) $$
 
 
 ## 備考
-`n &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である。
+- `n &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -78,15 +103,17 @@ hermite(3, 1) = -4
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
 
-## 参照
-- [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
-- [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
-- [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
-
-
 ## 実装例
 ### 閉形式
 $$ H_n(x) = n! \sum_{j=0}^{\lfloor n / 2 \rfloor} \frac{(-1)^j}{j! (n - 2j)!} (2x)^{n - 2j} $$
 
 ### 漸化式
 $$ H_n(x) = 2 x H_{n-1}(x) - 2 (n-1) H_{n-2}(x); H_0(x) = 1, H_1(x) = 2x $$
+
+
+## 参照
+- [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
+- [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
+- [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>laguerre -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/laguerre.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/laguerre.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/laguerre.md b/reference/cmath/laguerre.md
index ee4fac8c3..1f3ada630 100644
--- a/reference/cmath/laguerre.md
+++ b/reference/cmath/laguerre.md
@@ -7,15 +7,39 @@
 
 ```cpp
 namespace std {
-float laguerref(unsigned n, float x);
-double laguerre(unsigned n, double x);
-long double laguerrel(unsigned n, long double x);
+  double
+    laguerre(unsigned int n,
+             double x);              // (1) C++17
+  floating-point-type
+    laguerre(unsigned int n,
+             floating-point-type x); // (1) C++23
+
+  Promoted
+    laguerre(unsigned int n,
+             Arithmetic x);          // (2) C++17
+
+  float
+    laguerref(unsigned int n,
+              float x);              // (3) C++17
+
+  long double
+    laguerrel(unsigned int n,
+              long double x);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic[italic]
 
 ## 概要
 ラゲール多項式 (Laguerre polynomials) を求める。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `n`, `x` のラゲール多項式
@@ -24,7 +48,8 @@ $$ L_n(x) = \frac{e^x}{n!} \frac{\mathrm{d}^n}{\mathrm{d}x^n} (x^n e^{-x}) \quad
 
 
 ## 備考
-`n &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である。
+- `n &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -79,19 +104,21 @@ laguerre(3, 2) = -0.333333
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 
+## 実装例
+### 閉形式
+$$ L_n(x) = \sum_{j=0}^n \frac{n!}{j! (n-j)!} \frac{(-x)^j}{j!} $$
+
+### 漸化式
+$$ L_{n}(x) = \frac{(2n - 1 - x) L_{n-1}(x) - (n-1) L_{n-2}(x)}{n}; L_0(x) = 1, L_1(x) = -x + 1 $$
+
+
 ## 関連項目
-* ラゲール陪多項式 [`assoc_laguerre`](assoc_laguerre.md)
+- ラゲール陪多項式 [`assoc_laguerre`](assoc_laguerre.md)
 
 
 ## 参照
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
-
-
-## 実装例
-### 閉形式
-$$ L_n(x) = \sum_{j=0}^n \frac{n!}{j! (n-j)!} \frac{(-x)^j}{j!} $$
-
-### 漸化式
-$$ L_{n}(x) = \frac{(2n - 1 - x) L_{n-1}(x) - (n-1) L_{n-2}(x)}{n}; L_0(x) = 1, L_1(x) = -x + 1 $$
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>legendre -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/legendre.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/legendre.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/legendre.md b/reference/cmath/legendre.md
index 77edfbec8..2bf88a55b 100644
--- a/reference/cmath/legendre.md
+++ b/reference/cmath/legendre.md
@@ -7,15 +7,39 @@
 
 ```cpp
 namespace std {
-float legendref(unsigned l, float x);
-double legendre(unsigned l, double x);
-long double legendrel(unsigned l, long double x);
+  double
+    legendre(unsigned int n,
+             double x);              // (1) C++17
+  floating-point-type
+    legendre(unsigned int n,
+             floating-point-type x); // (1) C++23
+
+  Promoted
+    legendre(unsigned int n,
+             Arithmetic x);          // (2) C++17
+
+  float
+    legendref(unsigned int n,
+              float x);              // (3) C++17
+
+  long double
+    legendrel(unsigned int n,
+              long double x);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic[italic]
 
 ## 概要
 ルジャンドル多項式 (Legendre polynomials) を求める。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `l`, `x` のルジャンドル多項式
@@ -24,7 +48,8 @@ $$ P_l(x) = \frac{1}{2^l l!} \frac{\mathrm{d}^l}{\mathrm{d}x^l} (x^2 - 1)^l \qua
 
 
 ## 備考
-`l &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である。
+- `n &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -79,19 +104,21 @@ legendre(3, 1) = 1
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 
+## 実装例
+### 閉形式
+$$ P_l(x) = \frac{1}{2^l l!} \sum_{j=0}^{\lfloor l/2 \rfloor} (-1)^j \frac{l! (2l-2j)!}{j! (l-j)! (l-2j)!} x^{l-2j} $$
+
+### 漸化式
+$$ P_l(x) = \frac{(2l-1) xP_{l-1}(x) - (l-1) P_{l-2}(x)}{l}; P_0(x) = 1, P_1(x) = x $$
+
+
 ## 関連項目
-* ルジャンドル陪関数 [`assoc_legendre`](assoc_legendre.md)
+- ルジャンドル陪関数 [`assoc_legendre`](assoc_legendre.md)
 
 
 ## 参照
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
-
-
-## 実装例
-### 閉形式
-$$ P_l(x) = \frac{1}{2^l l!} \sum_{j=0}^{\lfloor l/2 \rfloor} (-1)^j \frac{l! (2l-2j)!}{j! (l-j)! (l-2j)!} x^{l-2j} $$
-
-### 漸化式
-$$ P_l(x) = \frac{(2l-1) xP_{l-1}(x) - (l-1) P_{l-2}(x)}{l}; P_0(x) = 1, P_1(x) = x $$
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>riemann_zeta -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/riemann_zeta.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/riemann_zeta.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/riemann_zeta.md b/reference/cmath/riemann_zeta.md
index f9763835d..b6a8981d5 100644
--- a/reference/cmath/riemann_zeta.md
+++ b/reference/cmath/riemann_zeta.md
@@ -7,15 +7,34 @@
 
 ```cpp
 namespace std {
-float riemann_zetaf(float x);
-double riemann_zeta(double x);
-long double riemann_zetal(long double x);
+  double
+    riemann_zeta(double x);              // (1) C++17
+  floating-point-type
+    riemann_zeta(floating-point-type x); // (1) C++23
+
+  Promoted
+    riemann_zeta(Arithmetic x);          // (2) C++17
+
+  float
+    riemann_zetaf(float x);              // (3) C++17
+
+  long double
+    riemann_zetal(long double x);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic[italic]
 
 ## 概要
 リーマンのゼータ関数 (Riemann zeta function) を求める。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` のリーマンゼータ関数
@@ -31,6 +50,9 @@ $$
 $$
 を返す。
 
+## 備考
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+
 
 ## 例
 ```cpp example
@@ -72,3 +94,5 @@ riemann_zeta(2)  = 1.64493
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sph_bessel -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/sph_bessel.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/sph_bessel.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/sph_bessel.md b/reference/cmath/sph_bessel.md
index 6e26a7b1f..ec9ba8c17 100644
--- a/reference/cmath/sph_bessel.md
+++ b/reference/cmath/sph_bessel.md
@@ -7,15 +7,39 @@
 
 ```cpp
 namespace std {
-float sph_besself(unsigned n, float x);
-double sph_bessel(unsigned n, double x);
-long double sph_bessell(unsigned n, long double x);
+  double
+    sph_bessel(unsigned int n,
+               double x);              // (1) C++17
+  floating-point-type
+    sph_bessel(unsigned int n,
+               floating-point-type x); // (1) C++23
+
+  Promoted
+    sph_bessel(unsigned int n,
+               Arithmetic x);          // (2) C++17
+
+  float
+    sph_besself(unsigned int n,
+                float x);              // (3) C++17
+
+  long double
+    sph_bessell(unsigned int n,
+                long double x);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic[italic]
 
 ## 概要
 第一種球ベッセル関数 (spherical Bessel functions of the first kind) を求める。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `n`, `x` の第一種球ベッセル関数
@@ -28,7 +52,8 @@ $J$ は第一種ベッセル関数 ([`cyl_bessel_j`](cyl_bessel_j.md))。
 
 
 ## 備考
-`n &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である。
+- `n &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -80,19 +105,21 @@ sph_bessel(2, 0.5 pi) = 0.137417
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 
+## 実装例
+### 漸化式
+$$
+j_n(x) = \frac{2n-1}{x} j_{n-1}(x) - j_{n-2}(x);
+j_0(x) = \frac{\sin x}{x}, j_1(x) = \frac{\sin x}{x^2} - \frac{\cos x}{x}
+$$
+
+
 ## 関連項目
-* 第一種ベッセル関数 [`cyl_bessel_j`](cyl_bessel_j.md)
+- 第一種ベッセル関数 [`cyl_bessel_j`](cyl_bessel_j.md)
 
 
 ## 参照
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
-
-
-## 実装例
-### 漸化式
-$$
-j_n(x) = \frac{2n-1}{x} j_{n-1}(x) - j_{n-2}(x);
-j_0(x) = \frac{\sin x}{x}, j_1(x) = \frac{\sin x}{x^2} - \frac{\cos x}{x}
-$$
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sph_legendre -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/sph_legendre.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/sph_legendre.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/sph_legendre.md b/reference/cmath/sph_legendre.md
index 4a6b9df58..8f370c09d 100644
--- a/reference/cmath/sph_legendre.md
+++ b/reference/cmath/sph_legendre.md
@@ -7,15 +7,44 @@
 
 ```cpp
 namespace std {
-float sph_legendref(unsigned l, unsigned m, float theta);
-double sph_legendre(unsigned l, unsigned m, double theta);
-long double sph_legendrel(unsigned l, unsigned m, long double theta);
+  double
+    sph_legendre(unsigned int l,
+                 unsigned int m,
+                 double theta);               // (1) C++17
+  floating-point-type
+    sph_legendre(unsigned int l,
+                 unsigned int m,
+                 floating-point-type theta);  // (1) C++23
+
+  Promoted
+    sph_legendre(unsigned int l,
+                 unsigned int m,
+                 Arithmetic theta);           // (2) C++17
+
+  float
+    sph_legendref(unsigned int l,
+                  unsigned int m,
+                  float theta);               // (3) C++17
+
+  long double
+    sph_legendrel(unsigned int l,
+                  unsigned int m,
+                  long double theta);         // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic[italic]
 
 ## 概要
 球面調和関数 (spherical harmonic function) の *θ* 成分を求める。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `l`, `m`, `theta` について $Y_l^m(\theta, 0)$ を返す。
@@ -29,7 +58,8 @@ $P_l^m$ はルジャンドル陪関数 ([`assoc_legendre`](assoc_legendre.md)) 
 
 
 ## 備考
-`l &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である。
+- `l &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -115,10 +145,12 @@ GCC 7.1.0–8.0.0 では `l &amp;lt; m` の場合 ($Y_l^m = 0$) [`std::domain_error`](/
 
 
 ## 関連項目
-* ルジャンドル陪関数 [`assoc_legendre`](assoc_legendre.md)
+- ルジャンドル陪関数 [`assoc_legendre`](assoc_legendre.md)
 
 
 ## 参照
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sph_neumann -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/sph_neumann.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/sph_neumann.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/sph_neumann.md b/reference/cmath/sph_neumann.md
index 0cb874ef5..9eb76458a 100644
--- a/reference/cmath/sph_neumann.md
+++ b/reference/cmath/sph_neumann.md
@@ -7,15 +7,39 @@
 
 ```cpp
 namespace std {
-float sph_neumannf(unsigned n, float x);
-double sph_neumann(unsigned n, double x);
-long double sph_neumannl(unsigned n, long double x);
+  double
+    sph_neumann(unsigned int n,
+                double x);              // (1) C++17
+  floating-point-type
+    sph_neumann(unsigned int n,
+                floating-point-type x); // (1) C++23
+
+  Promoted
+    sph_neumann(unsigned int n,
+                Arithmetic x);          // (2) C++17
+
+  float
+    sph_neumannf(unsigned int n,
+                 float x);              // (3) C++17
+
+  long double
+    sph_neumannl(unsigned int n,
+                 long double x);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic[italic]
 
 ## 概要
 第二種球ベッセル関数 (spherical Bessel functions of the second kind)、球ノイマン関数 (spherical Neumann functions) を求める。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `n`, `x` の第二種球ベッセル関数
@@ -28,7 +52,8 @@ $N$ は第二種ベッセル関数 ([`cyl_neumann`](cyl_neumann.md))。
 
 
 ## 備考
-`n &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である。
+- `n &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -80,19 +105,21 @@ sph_neumann(2, 0.5 pi) = -1.21585
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 
+## 実装例
+### 漸化式
+$$
+n_n(x) = \frac{2n-1}{x} n_{n-1}(x) - n_{n-2}(x);
+n_0(x) = - \frac{\cos x}{x}, n_1(x) = - \frac{\cos x}{x^2} - \frac{\sin x}{x}
+$$
+
+
 ## 関連項目
-* 第二種ベッセル関数 [`cyl_neumann`](cyl_neumann.md)
+- 第二種ベッセル関数 [`cyl_neumann`](cyl_neumann.md)
 
 
 ## 参照
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
-
-
-## 実装例
-### 漸化式
-$$
-n_n(x) = \frac{2n-1}{x} n_{n-1}(x) - n_{n-2}(x);
-n_0(x) = - \frac{\cos x}{x}, n_1(x) = - \frac{\cos x}{x^2} - \frac{\sin x}{x}
-$$
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
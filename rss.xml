<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-01-05T09:09:46.182757</updated>
  <id>47cb306f-8624-412c-b2b1-495c452d127a</id>

  
    <entry>
      <title>emplace -- Merge pull request #1015 from cpprefjp/fix-variant</title>
      <link href="https://cpprefjp.github.io/reference/variant/variant/emplace.html"/>
      <id>d32229bcdcc4821f94f0f3357aa8e64aa82daf5b:reference/variant/variant/emplace.md</id>
      <updated>2023-01-05T18:05:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/variant/variant/emplace.md b/reference/variant/variant/emplace.md
index ef1b24907..c8529d306 100644
--- a/reference/variant/variant/emplace.md
+++ b/reference/variant/variant/emplace.md
@@ -7,18 +7,28 @@
 
 ```cpp
 template &amp;lt;class T, class... Args&amp;gt;
-T&amp;amp; emplace(Args&amp;amp;&amp;amp;... args);                              // (1)
+T&amp;amp; emplace(Args&amp;amp;&amp;amp;... args);                                        // (1) C++17
+template &amp;lt;class T, class... Args&amp;gt;
+constexpr T&amp;amp; emplace(Args&amp;amp;&amp;amp;... args);                              // (1) C++23
 
 template &amp;lt;class T, class U, class... Args&amp;gt;
-T&amp;amp; emplace(std::initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args); // (2)
+T&amp;amp; emplace(std::initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args);           // (2) C++17
+template &amp;lt;class T, class U, class... Args&amp;gt;
+constexpr T&amp;amp; emplace(std::initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args); // (2) C++23
 
 template &amp;lt;std::size_t I, class... Args&amp;gt;
 variant_alternative_t&amp;lt;I, variant&amp;lt;Types...&amp;gt;&amp;gt;&amp;amp;
-  emplace(Args&amp;amp;&amp;amp;... args);                               // (3)
+  emplace(Args&amp;amp;&amp;amp;... args);                                         // (3) C++17
+template &amp;lt;std::size_t I, class... Args&amp;gt;
+constexpr variant_alternative_t&amp;lt;I, variant&amp;lt;Types...&amp;gt;&amp;gt;&amp;amp;
+  emplace(Args&amp;amp;&amp;amp;... args);                                         // (3) C++23
 
 template &amp;lt;std::size_t I, class U, class... Args&amp;gt;
 variant_alternative_t&amp;lt;I, variant&amp;lt;Types...&amp;gt;&amp;gt;&amp;amp;
-  emplace(std::initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args);  // (4)
+  emplace(std::initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args);            // (4) C++17
+template &amp;lt;std::size_t I, class U, class... Args&amp;gt;
+constexpr variant_alternative_t&amp;lt;I, variant&amp;lt;Types...&amp;gt;&amp;gt;&amp;amp;
+  emplace(std::initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args);            // (4) C++23
 ```
 * variant_alternative_t[link /reference/variant/variant_alternative.md]
 
@@ -177,3 +187,6 @@ int main()
 - [Clang](/implementation.md#clang): 4.0.1
 - [GCC](/implementation.md#gcc): 7.3
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+- [P2231R1 Missing `constexpr` in `std::optional` and `std::variant`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2231r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- Merge pull request #1015 from cpprefjp/fix-variant</title>
      <link href="https://cpprefjp.github.io/reference/variant/variant/op_assign.html"/>
      <id>d32229bcdcc4821f94f0f3357aa8e64aa82daf5b:reference/variant/variant/op_assign.md</id>
      <updated>2023-01-05T18:05:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/variant/variant/op_assign.md b/reference/variant/variant/op_assign.md
index b98f075a9..24293b012 100644
--- a/reference/variant/variant/op_assign.md
+++ b/reference/variant/variant/op_assign.md
@@ -10,7 +10,9 @@ constexpr variant&amp;amp; operator=(const variant&amp;amp; rhs);              // (1)
 constexpr variant&amp;amp; operator=(variant&amp;amp;&amp;amp; t) noexcept(see below); // (2)
 
 template &amp;lt;class T&amp;gt;
-variant&amp;amp; operator=(T&amp;amp;&amp;amp; rhs) noexcept(see below);               // (3)
+variant&amp;amp; operator=(T&amp;amp;&amp;amp; rhs) noexcept(see below);               // (3) C++17
+template &amp;lt;class T&amp;gt;
+constexpr variant&amp;amp; operator=(T&amp;amp;&amp;amp; rhs) noexcept(see below);     // (3) C++23
 ```
 
 ## 概要
@@ -193,3 +195,4 @@ int main()
 ## 参照
 - [P0608R3 A sane variant converting constructor](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0608r3.html)
 - [P0602R4 `variant` and `optional` should propagate copy/move triviality](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0602r4.html)
+- [P2231R1 Missing `constexpr` in `std::optional` and `std::variant`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2231r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1015 from cpprefjp/fix-variant</title>
      <link href="https://cpprefjp.github.io/reference/variant/variant/op_constructor.html"/>
      <id>d32229bcdcc4821f94f0f3357aa8e64aa82daf5b:reference/variant/variant/op_constructor.md</id>
      <updated>2023-01-05T18:05:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/variant/variant/op_constructor.md b/reference/variant/variant/op_constructor.md
index 280ea9f56..a578926e8 100644
--- a/reference/variant/variant/op_constructor.md
+++ b/reference/variant/variant/op_constructor.md
@@ -30,57 +30,11 @@ template &amp;lt;size_t I, class U, class... Args&amp;gt;
 constexpr explicit variant(in_place_index_t&amp;lt;I&amp;gt;,
                            initializer_list&amp;lt;U&amp;gt; il,
                            Args&amp;amp;&amp;amp;... args);              // (8)
-
-template &amp;lt;class Alloc&amp;gt;
-variant(allocator_arg_t,
-        const Alloc&amp;amp; a);                                 // (9)
-
-template &amp;lt;class Alloc&amp;gt;
-variant(allocator_arg_t,
-        const Alloc&amp;amp; a,
-        const variant&amp;amp; other);                           // (10)
-
-template &amp;lt;class Alloc&amp;gt;
-variant(allocator_arg_t,
-        const Alloc&amp;amp; a,
-        variant&amp;amp;&amp;amp; other);                                // (11)
-
-template &amp;lt;class Alloc, class T&amp;gt;
-variant(allocator_arg_t,
-        const Alloc&amp;amp; a,
-        T&amp;amp;&amp;amp; x);                                          // (12)
-
-template &amp;lt;class Alloc, class T, class... Args&amp;gt;
-variant(allocator_arg_t,
-        const Alloc&amp;amp; a,
-        in_place_type_t&amp;lt;T&amp;gt; il,
-        Args&amp;amp;&amp;amp;... args);                                 // (13)
-
-template &amp;lt;class Alloc, class T, class U, class... Args&amp;gt;
-variant(allocator_arg_t,
-        const Alloc&amp;amp; a,
-        in_place_type_t&amp;lt;T&amp;gt;,
-        initializer_list&amp;lt;U&amp;gt; il,
-        Args&amp;amp;&amp;amp;... args);                                 // (14)
-
-template &amp;lt;class Alloc, size_t I, class... Args&amp;gt;
-variant(allocator_arg_t,
-       const Alloc&amp;amp; a,
-       in_place_index_t&amp;lt;I&amp;gt;,
-       Args&amp;amp;&amp;amp;... args);                                  // (15)
-
-template &amp;lt;class Alloc, size_t I, class U, class... Args&amp;gt;
-variant(allocator_arg_t,
-        const Alloc&amp;amp; a,
-        in_place_index_t&amp;lt;I&amp;gt;,
-        initializer_list&amp;lt;U&amp;gt; il,
-        Args&amp;amp;&amp;amp;... args);                                 // (16)
 ```
 * size_t[link /reference/cstddef/size_t.md]
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 * in_place_type_t[link /reference/utility/in_place_type_t.md]
 * in_place_index_t[link /reference/utility/in_place_index_t.md]
-* allocator_arg_t[link /reference/memory/allocator_arg_t.md]
 
 ## 概要
 `variant`オブジェクトを構築する。
@@ -93,7 +47,6 @@ variant(allocator_arg_t,
 - (6) : 候補型のうち、指定した型のコンストラクタ引数`il`と`args...`を受け取ってコンストラクタ内でそのオブジェクトを構築して保持する
 - (7) : 候補型のうち、指定したインデックスの型のコンストラクタ引数を受け取ってコンストラクタ内でそのオブジェクトを構築して保持する
 - (8) : 候補型のうち、指定したインデックスの型のコンストラクタ引数`il`と`args...`を受け取ってコンストラクタ内でそのオブジェクトを構築して保持する
-- (9)-(16) : (1)-(8)のuses-allocator構築版
 
 
 ## テンプレートパラメータ制約
@@ -146,8 +99,6 @@ variant(allocator_arg_t,
     - [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...`をコンストラクタ引数として`Ti`型オブジェクトを直接構築して`*this`に保持する
 - (8) :
     - `il`と[`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...`をコンストラクタ引数として`Ti`型オブジェクトを直接構築して`*this`に保持する
-- (9)-(16) :
-    - uses-allocator構築すること以外は、対応するコンストラクタと等価
 
 
 ## 事後条件
@@ -410,5 +361,6 @@ int main()
 
 
 ## 参照
+- [LWG Issue 2901 Variants cannot properly support allocators](https://cplusplus.github.io/LWG/issue2901)
 - [P0608R3 A sane variant converting constructor](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0608r3.html)
 - [P0602R4 `variant` and `optional` should propagate copy/move triviality](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0602r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- Merge pull request #1015 from cpprefjp/fix-variant</title>
      <link href="https://cpprefjp.github.io/reference/variant/variant/op_destructor.html"/>
      <id>d32229bcdcc4821f94f0f3357aa8e64aa82daf5b:reference/variant/variant/op_destructor.md</id>
      <updated>2023-01-05T18:05:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/variant/variant/op_destructor.md b/reference/variant/variant/op_destructor.md
index 39bd9ebaa..9a5b3eb0a 100644
--- a/reference/variant/variant/op_destructor.md
+++ b/reference/variant/variant/op_destructor.md
@@ -6,7 +6,8 @@
 * cpp17[meta cpp]
 
 ```cpp
-~variant();
+~variant();            // C++17
+constexpr ~variant();  // C++23
 ```
 
 ## 概要
@@ -34,3 +35,6 @@
 
 ## 関連項目
 - [`std::is_trivially_destructible`](/reference/type_traits/is_trivially_destructible.md)
+
+## 参照
+- [P2231R1 Missing `constexpr` in `std::optional` and `std::variant`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2231r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- Merge pull request #1015 from cpprefjp/fix-variant</title>
      <link href="https://cpprefjp.github.io/reference/variant/variant/swap.html"/>
      <id>d32229bcdcc4821f94f0f3357aa8e64aa82daf5b:reference/variant/variant/swap.md</id>
      <updated>2023-01-05T18:05:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/variant/variant/swap.md b/reference/variant/variant/swap.md
index b7b6aaeb7..a905630c2 100644
--- a/reference/variant/variant/swap.md
+++ b/reference/variant/variant/swap.md
@@ -6,7 +6,8 @@
 * cpp17[meta cpp]
 
 ```cpp
-void swap(variant&amp;amp; rhs) noexcept(see below);
+void swap(variant&amp;amp; rhs) noexcept(see below);            // C++17
+constexpr void swap(variant&amp;amp; rhs) noexcept(see below);  // C++23
 ```
 
 ## 概要
@@ -69,3 +70,6 @@ int main()
 - [Clang](/implementation.md#clang): 4.0.1
 - [GCC](/implementation.md#gcc): 7.3
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+- [P2231R1 Missing `constexpr` in `std::optional` and `std::variant`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2231r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- Merge pull request #1015 from cpprefjp/fix-variant</title>
      <link href="https://cpprefjp.github.io/reference/variant/variant/swap_free.html"/>
      <id>d32229bcdcc4821f94f0f3357aa8e64aa82daf5b:reference/variant/variant/swap_free.md</id>
      <updated>2023-01-05T18:05:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/variant/variant/swap_free.md b/reference/variant/variant/swap_free.md
index fbf2fa6a0..a1961ca33 100644
--- a/reference/variant/variant/swap_free.md
+++ b/reference/variant/variant/swap_free.md
@@ -7,7 +7,9 @@
 ```cpp
 namespace std {
   template &amp;lt;class... Types&amp;gt;
-  void swap(variant&amp;lt;Types...&amp;gt;&amp;amp; x, variant&amp;lt;Types...&amp;gt;&amp;amp; y) noexcept(see below);
+  void swap(variant&amp;lt;Types...&amp;gt;&amp;amp; x, variant&amp;lt;Types...&amp;gt;&amp;amp; y) noexcept(see below);            // C++17
+  template &amp;lt;class... Types&amp;gt;
+  constexpr void swap(variant&amp;lt;Types...&amp;gt;&amp;amp; x, variant&amp;lt;Types...&amp;gt;&amp;amp; y) noexcept(see below);  // C++23
 }
 ```
 
@@ -71,3 +73,6 @@ int main()
 - [Clang](/implementation.md#clang): 4.0.1
 - [GCC](/implementation.md#gcc): 7.3
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+- [P2231R1 Missing `constexpr` in `std::optional` and `std::variant`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2231r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace -- P2231R1: some functions will be constexpr in C++23</title>
      <link href="https://cpprefjp.github.io/reference/variant/variant/emplace.html"/>
      <id>6061559e89e9315c95a53f90cf0cea0fe891e7ae:reference/variant/variant/emplace.md</id>
      <updated>2023-01-04T16:42:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/variant/variant/emplace.md b/reference/variant/variant/emplace.md
index ef1b24907..c8529d306 100644
--- a/reference/variant/variant/emplace.md
+++ b/reference/variant/variant/emplace.md
@@ -7,18 +7,28 @@
 
 ```cpp
 template &amp;lt;class T, class... Args&amp;gt;
-T&amp;amp; emplace(Args&amp;amp;&amp;amp;... args);                              // (1)
+T&amp;amp; emplace(Args&amp;amp;&amp;amp;... args);                                        // (1) C++17
+template &amp;lt;class T, class... Args&amp;gt;
+constexpr T&amp;amp; emplace(Args&amp;amp;&amp;amp;... args);                              // (1) C++23
 
 template &amp;lt;class T, class U, class... Args&amp;gt;
-T&amp;amp; emplace(std::initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args); // (2)
+T&amp;amp; emplace(std::initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args);           // (2) C++17
+template &amp;lt;class T, class U, class... Args&amp;gt;
+constexpr T&amp;amp; emplace(std::initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args); // (2) C++23
 
 template &amp;lt;std::size_t I, class... Args&amp;gt;
 variant_alternative_t&amp;lt;I, variant&amp;lt;Types...&amp;gt;&amp;gt;&amp;amp;
-  emplace(Args&amp;amp;&amp;amp;... args);                               // (3)
+  emplace(Args&amp;amp;&amp;amp;... args);                                         // (3) C++17
+template &amp;lt;std::size_t I, class... Args&amp;gt;
+constexpr variant_alternative_t&amp;lt;I, variant&amp;lt;Types...&amp;gt;&amp;gt;&amp;amp;
+  emplace(Args&amp;amp;&amp;amp;... args);                                         // (3) C++23
 
 template &amp;lt;std::size_t I, class U, class... Args&amp;gt;
 variant_alternative_t&amp;lt;I, variant&amp;lt;Types...&amp;gt;&amp;gt;&amp;amp;
-  emplace(std::initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args);  // (4)
+  emplace(std::initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args);            // (4) C++17
+template &amp;lt;std::size_t I, class U, class... Args&amp;gt;
+constexpr variant_alternative_t&amp;lt;I, variant&amp;lt;Types...&amp;gt;&amp;gt;&amp;amp;
+  emplace(std::initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args);            // (4) C++23
 ```
 * variant_alternative_t[link /reference/variant/variant_alternative.md]
 
@@ -177,3 +187,6 @@ int main()
 - [Clang](/implementation.md#clang): 4.0.1
 - [GCC](/implementation.md#gcc): 7.3
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+- [P2231R1 Missing `constexpr` in `std::optional` and `std::variant`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2231r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- P2231R1: some functions will be constexpr in C++23</title>
      <link href="https://cpprefjp.github.io/reference/variant/variant/op_assign.html"/>
      <id>6061559e89e9315c95a53f90cf0cea0fe891e7ae:reference/variant/variant/op_assign.md</id>
      <updated>2023-01-04T16:42:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/variant/variant/op_assign.md b/reference/variant/variant/op_assign.md
index b98f075a9..24293b012 100644
--- a/reference/variant/variant/op_assign.md
+++ b/reference/variant/variant/op_assign.md
@@ -10,7 +10,9 @@ constexpr variant&amp;amp; operator=(const variant&amp;amp; rhs);              // (1)
 constexpr variant&amp;amp; operator=(variant&amp;amp;&amp;amp; t) noexcept(see below); // (2)
 
 template &amp;lt;class T&amp;gt;
-variant&amp;amp; operator=(T&amp;amp;&amp;amp; rhs) noexcept(see below);               // (3)
+variant&amp;amp; operator=(T&amp;amp;&amp;amp; rhs) noexcept(see below);               // (3) C++17
+template &amp;lt;class T&amp;gt;
+constexpr variant&amp;amp; operator=(T&amp;amp;&amp;amp; rhs) noexcept(see below);     // (3) C++23
 ```
 
 ## 概要
@@ -193,3 +195,4 @@ int main()
 ## 参照
 - [P0608R3 A sane variant converting constructor](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0608r3.html)
 - [P0602R4 `variant` and `optional` should propagate copy/move triviality](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0602r4.html)
+- [P2231R1 Missing `constexpr` in `std::optional` and `std::variant`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2231r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- P2231R1: some functions will be constexpr in C++23</title>
      <link href="https://cpprefjp.github.io/reference/variant/variant/op_destructor.html"/>
      <id>6061559e89e9315c95a53f90cf0cea0fe891e7ae:reference/variant/variant/op_destructor.md</id>
      <updated>2023-01-04T16:42:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/variant/variant/op_destructor.md b/reference/variant/variant/op_destructor.md
index 39bd9ebaa..9a5b3eb0a 100644
--- a/reference/variant/variant/op_destructor.md
+++ b/reference/variant/variant/op_destructor.md
@@ -6,7 +6,8 @@
 * cpp17[meta cpp]
 
 ```cpp
-~variant();
+~variant();            // C++17
+constexpr ~variant();  // C++23
 ```
 
 ## 概要
@@ -34,3 +35,6 @@
 
 ## 関連項目
 - [`std::is_trivially_destructible`](/reference/type_traits/is_trivially_destructible.md)
+
+## 参照
+- [P2231R1 Missing `constexpr` in `std::optional` and `std::variant`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2231r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- P2231R1: some functions will be constexpr in C++23</title>
      <link href="https://cpprefjp.github.io/reference/variant/variant/swap.html"/>
      <id>6061559e89e9315c95a53f90cf0cea0fe891e7ae:reference/variant/variant/swap.md</id>
      <updated>2023-01-04T16:42:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/variant/variant/swap.md b/reference/variant/variant/swap.md
index b7b6aaeb7..a905630c2 100644
--- a/reference/variant/variant/swap.md
+++ b/reference/variant/variant/swap.md
@@ -6,7 +6,8 @@
 * cpp17[meta cpp]
 
 ```cpp
-void swap(variant&amp;amp; rhs) noexcept(see below);
+void swap(variant&amp;amp; rhs) noexcept(see below);            // C++17
+constexpr void swap(variant&amp;amp; rhs) noexcept(see below);  // C++23
 ```
 
 ## 概要
@@ -69,3 +70,6 @@ int main()
 - [Clang](/implementation.md#clang): 4.0.1
 - [GCC](/implementation.md#gcc): 7.3
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+- [P2231R1 Missing `constexpr` in `std::optional` and `std::variant`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2231r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- P2231R1: some functions will be constexpr in C++23</title>
      <link href="https://cpprefjp.github.io/reference/variant/variant/swap_free.html"/>
      <id>6061559e89e9315c95a53f90cf0cea0fe891e7ae:reference/variant/variant/swap_free.md</id>
      <updated>2023-01-04T16:42:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/variant/variant/swap_free.md b/reference/variant/variant/swap_free.md
index fbf2fa6a0..a1961ca33 100644
--- a/reference/variant/variant/swap_free.md
+++ b/reference/variant/variant/swap_free.md
@@ -7,7 +7,9 @@
 ```cpp
 namespace std {
   template &amp;lt;class... Types&amp;gt;
-  void swap(variant&amp;lt;Types...&amp;gt;&amp;amp; x, variant&amp;lt;Types...&amp;gt;&amp;amp; y) noexcept(see below);
+  void swap(variant&amp;lt;Types...&amp;gt;&amp;amp; x, variant&amp;lt;Types...&amp;gt;&amp;amp; y) noexcept(see below);            // C++17
+  template &amp;lt;class... Types&amp;gt;
+  constexpr void swap(variant&amp;lt;Types...&amp;gt;&amp;amp; x, variant&amp;lt;Types...&amp;gt;&amp;amp; y) noexcept(see below);  // C++23
 }
 ```
 
@@ -71,3 +73,6 @@ int main()
 - [Clang](/implementation.md#clang): 4.0.1
 - [GCC](/implementation.md#gcc): 7.3
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+- [P2231R1 Missing `constexpr` in `std::optional` and `std::variant`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2231r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Defect report LWG 2901 removed allocator support of variant</title>
      <link href="https://cpprefjp.github.io/reference/variant/variant/op_constructor.html"/>
      <id>31cfbe34477f3b76e31ee79d312f2808f6dbdee6:reference/variant/variant/op_constructor.md</id>
      <updated>2023-01-04T16:09:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/variant/variant/op_constructor.md b/reference/variant/variant/op_constructor.md
index 280ea9f56..a578926e8 100644
--- a/reference/variant/variant/op_constructor.md
+++ b/reference/variant/variant/op_constructor.md
@@ -30,57 +30,11 @@ template &amp;lt;size_t I, class U, class... Args&amp;gt;
 constexpr explicit variant(in_place_index_t&amp;lt;I&amp;gt;,
                            initializer_list&amp;lt;U&amp;gt; il,
                            Args&amp;amp;&amp;amp;... args);              // (8)
-
-template &amp;lt;class Alloc&amp;gt;
-variant(allocator_arg_t,
-        const Alloc&amp;amp; a);                                 // (9)
-
-template &amp;lt;class Alloc&amp;gt;
-variant(allocator_arg_t,
-        const Alloc&amp;amp; a,
-        const variant&amp;amp; other);                           // (10)
-
-template &amp;lt;class Alloc&amp;gt;
-variant(allocator_arg_t,
-        const Alloc&amp;amp; a,
-        variant&amp;amp;&amp;amp; other);                                // (11)
-
-template &amp;lt;class Alloc, class T&amp;gt;
-variant(allocator_arg_t,
-        const Alloc&amp;amp; a,
-        T&amp;amp;&amp;amp; x);                                          // (12)
-
-template &amp;lt;class Alloc, class T, class... Args&amp;gt;
-variant(allocator_arg_t,
-        const Alloc&amp;amp; a,
-        in_place_type_t&amp;lt;T&amp;gt; il,
-        Args&amp;amp;&amp;amp;... args);                                 // (13)
-
-template &amp;lt;class Alloc, class T, class U, class... Args&amp;gt;
-variant(allocator_arg_t,
-        const Alloc&amp;amp; a,
-        in_place_type_t&amp;lt;T&amp;gt;,
-        initializer_list&amp;lt;U&amp;gt; il,
-        Args&amp;amp;&amp;amp;... args);                                 // (14)
-
-template &amp;lt;class Alloc, size_t I, class... Args&amp;gt;
-variant(allocator_arg_t,
-       const Alloc&amp;amp; a,
-       in_place_index_t&amp;lt;I&amp;gt;,
-       Args&amp;amp;&amp;amp;... args);                                  // (15)
-
-template &amp;lt;class Alloc, size_t I, class U, class... Args&amp;gt;
-variant(allocator_arg_t,
-        const Alloc&amp;amp; a,
-        in_place_index_t&amp;lt;I&amp;gt;,
-        initializer_list&amp;lt;U&amp;gt; il,
-        Args&amp;amp;&amp;amp;... args);                                 // (16)
 ```
 * size_t[link /reference/cstddef/size_t.md]
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 * in_place_type_t[link /reference/utility/in_place_type_t.md]
 * in_place_index_t[link /reference/utility/in_place_index_t.md]
-* allocator_arg_t[link /reference/memory/allocator_arg_t.md]
 
 ## 概要
 `variant`オブジェクトを構築する。
@@ -93,7 +47,6 @@ variant(allocator_arg_t,
 - (6) : 候補型のうち、指定した型のコンストラクタ引数`il`と`args...`を受け取ってコンストラクタ内でそのオブジェクトを構築して保持する
 - (7) : 候補型のうち、指定したインデックスの型のコンストラクタ引数を受け取ってコンストラクタ内でそのオブジェクトを構築して保持する
 - (8) : 候補型のうち、指定したインデックスの型のコンストラクタ引数`il`と`args...`を受け取ってコンストラクタ内でそのオブジェクトを構築して保持する
-- (9)-(16) : (1)-(8)のuses-allocator構築版
 
 
 ## テンプレートパラメータ制約
@@ -146,8 +99,6 @@ variant(allocator_arg_t,
     - [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...`をコンストラクタ引数として`Ti`型オブジェクトを直接構築して`*this`に保持する
 - (8) :
     - `il`と[`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...`をコンストラクタ引数として`Ti`型オブジェクトを直接構築して`*this`に保持する
-- (9)-(16) :
-    - uses-allocator構築すること以外は、対応するコンストラクタと等価
 
 
 ## 事後条件
@@ -410,5 +361,6 @@ int main()
 
 
 ## 参照
+- [LWG Issue 2901 Variants cannot properly support allocators](https://cplusplus.github.io/LWG/issue2901)
 - [P0608R3 A sane variant converting constructor](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0608r3.html)
 - [P0602R4 `variant` and `optional` should propagate copy/move triviality](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0602r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コルーチン -- cpp20/coroutines: 微調整</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/coroutines.html"/>
      <id>384970b9c298f2b5ad0cf76502fbee6635386fc5:lang/cpp20/coroutines.md</id>
      <updated>2023-01-04T00:37:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/coroutines.md b/lang/cpp20/coroutines.md
index 302629405..4c1a1b63a 100644
--- a/lang/cpp20/coroutines.md
+++ b/lang/cpp20/coroutines.md
@@ -373,7 +373,7 @@ _e_ をYield式のオペランド、_p_ を同式を含むコルーチンのProm
 
 ```cpp
 template &amp;lt;typename T&amp;gt;
-struct my_generator {
+struct generator {
   struct promise_type {
     T current_value;
     /* ... */
@@ -387,10 +387,10 @@ struct my_generator {
   iterator end();
 };
 
-my_generator&amp;lt;pair&amp;lt;int,int&amp;gt;&amp;gt; g1() {
+generator&amp;lt;pair&amp;lt;int,int&amp;gt;&amp;gt; g1() {
   for (int i = i; i &amp;lt; 10; ++i) co_yield {i,i};
 }
-my_generator&amp;lt;pair&amp;lt;int,int&amp;gt;&amp;gt; g2() {
+generator&amp;lt;pair&amp;lt;int,int&amp;gt;&amp;gt; g2() {
   for (int i = i; i &amp;lt; 10; ++i) co_yield make_pair(i,i);
 }
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>generator -- generator: 各種調整</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator.html"/>
      <id>ab69dd554d5ea642a4ec6a2350760a6faf069039:reference/generator/generator.md</id>
      <updated>2023-01-03T23:43:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator.md b/reference/generator/generator.md
index 30840a4c8..db468a516 100644
--- a/reference/generator/generator.md
+++ b/reference/generator/generator.md
@@ -22,27 +22,28 @@ namespace std {
 戻り値型`generator`のコルーチン（以下、ジェネレータコルーチン）では`co_yield`式を用いて値を生成する。`co_yield` [`std::ranges::elements_of`](/reference/ranges/elements_of.md)`(rng)`式を用いると、ジェネレータコルーチンから入れ子Range(`rng`)の各要素を逐次生成する。
 ジェネレータコルーチンでは`co_await`式を利用できない。
 
-ジェネレータコルーチンは遅延評価される。ジェネレータコルーチンが返す`generator`オブジェクトの利用側（以下、呼び出し側）で先頭要素[`begin`](generator/begin.md)を指すイテレータを間接参照するまで、ジェネレータコルーチンの本体処理は実行されない。
+ジェネレータコルーチンは遅延評価される。ジェネレータコルーチンが返す`generator`オブジェクトの利用側（以下、呼び出し側）で先頭要素[`begin`](generator/begin.md)を指す[イテレータ](generator/iterator.md)を間接参照するまで、ジェネレータコルーチンの本体処理は実行されない。
 呼び出し側がイテレータの間接参照を試みるとジェネレータコルーチンを再開(resume)し、ジェネレータコルーチン本体処理において`co_yield`式に到達すると生成値を保持して再び中断(suspend)する。呼び出し側ではイテレータの間接参照の結果として生成値を取得する。
 
 
+### 説明用メンバ
 `generator`では下記の説明用メンバ型を定義する。
 
-- `value` == [`conditional_t`](/reference/type_traits/conditional.md)`&amp;lt;`[`is_void_v`](/reference/type_traits/is_void.md)`&amp;lt;V&amp;gt;,` [`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;Ref&amp;gt;, V&amp;gt;`
-- `reference` == [`conditional_t`](/reference/type_traits/conditional.md)`&amp;lt;`[`is_void_v`](/reference/type_traits/is_void.md)`&amp;lt;V&amp;gt;, Ref&amp;amp;&amp;amp;, Ref&amp;gt;`
+- `value` : [`conditional_t`](/reference/type_traits/conditional.md)`&amp;lt;`[`is_void_v`](/reference/type_traits/is_void.md)`&amp;lt;V&amp;gt;,` [`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;Ref&amp;gt;, V&amp;gt;`
+- `reference` : [`conditional_t`](/reference/type_traits/conditional.md)`&amp;lt;`[`is_void_v`](/reference/type_traits/is_void.md)`&amp;lt;V&amp;gt;, Ref&amp;amp;&amp;amp;, Ref&amp;gt;`
 - [`iterator`](generator/iterator.md) : ジェネレータが返すイテレータ型。
 
-`generator`クラスの動作説明のため、下記の説明専用メンバを用いる。
+`generator`および[`promise_type`](generator/promise_type.md)の動作説明のため、下記の説明用メンバを用いる。
 
 - [`coroutine_handle`](/reference/coroutine/coroutine_handle.md)`&amp;lt;`[`promise_type`](generator/promise_type.md)`&amp;gt;` : コルーチンハンドル(`coroutine_`)
 - [`unique_ptr`](/reference/memory/unique_ptr.md)`&amp;lt;`[`stack`](/reference/stack/stack.md)`&amp;lt;`[`coroutine_handle&amp;lt;&amp;gt;`](/reference/coroutine/coroutine_handle.md)`&amp;gt;&amp;gt;`: アクティブスタック(`active_`)
 
 
 ## 適格要件
-- テンプレートパラメータ`Allocator`が`void`ではない場合、[`allocator_traits&amp;lt;Allocator&amp;gt;`](/reference/memory/allocator_traits.md)`::pointer`はポインタ型であること。
-- メンバ型`value`はCV修飾されないオブジェクト型であること。
-- メンバ型`reference`は参照型、または[`copy_constructible`](/reference/concepts/copy_constructible.md)のモデルであるCV修飾されないオブジェクト型であること。
-- メンバ型`reference`が参照型の場合には`RRef` == [`remove_reference_t`](/reference/type_traits/remove_reference.md)`&amp;lt;reference&amp;gt;&amp;amp;&amp;amp;`、それ以外の場合には`RRef` == `reference`としたとき、それぞれ下記のモデルであること。
+- テンプレートパラメータ`Allocator`が`void`ではない場合、[`allocator_traits`](/reference/memory/allocator_traits.md)`&amp;lt;Allocator&amp;gt;::pointer`はポインタ型であること。
+- 説明用のメンバ型`value`はCV修飾されないオブジェクト型であること。
+- 説明用のメンバ型`reference`は参照型、または[`copy_constructible`](/reference/concepts/copy_constructible.md)のモデルであるCV修飾されないオブジェクト型であること。
+- 説明用のメンバ型`reference`が参照型の場合には`RRef` == [`remove_reference_t`](/reference/type_traits/remove_reference.md)`&amp;lt;reference&amp;gt;&amp;amp;&amp;amp;`、それ以外の場合には`RRef` == `reference`としたとき、それぞれ下記のモデルであること。
     - [`common_reference_with`](/reference/concepts/common_reference_with.md)`&amp;lt;reference&amp;amp;&amp;amp;, value&amp;amp;&amp;gt;`
     - [`common_reference_with`](/reference/concepts/common_reference_with.md)`&amp;lt;reference&amp;amp;&amp;amp;, RRef&amp;amp;&amp;amp;&amp;gt;`
     - [`common_reference_with`](/reference/concepts/common_reference_with.md)`&amp;lt;RRef&amp;amp;&amp;amp;, const value&amp;amp;&amp;gt;`
@@ -98,12 +99,16 @@ std::generator&amp;lt;int&amp;gt; evens()
 
 int main()
 {
+  // ジェネレータにより生成されるレンジのうち
+  // 先頭から5個までの要素値を列挙する
   for (int n : evens() | std::views::take(5)) {
     std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; std::endl;
   }
 }
 ```
 * std::generator[color ff0000]
+* co_yield[link /lang/cpp20/coroutines.md]
+* std::views::take[link /reference/ranges/take_view.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>generator::iterator -- generator: 各種調整</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator/iterator.html"/>
      <id>ab69dd554d5ea642a4ec6a2350760a6faf069039:reference/generator/generator/iterator.md</id>
      <updated>2023-01-03T23:43:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator/iterator.md b/reference/generator/generator/iterator.md
index 7393e73a8..f9448c9f6 100644
--- a/reference/generator/generator/iterator.md
+++ b/reference/generator/generator/iterator.md
@@ -61,8 +61,8 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |-----|-----|-----|
-| `bool operator==(const iterator&amp;amp; i, default_sentinel_t)` | 等値比較 | C++23 |
-| `bool operator!=(const iterator&amp;amp; i, default_sentinel_t)` | 非等値比較 (`==`により使用可能) | C++23 |
+| `bool operator==(const iterator&amp;amp;, default_sentinel_t)` | 等値比較 | C++23 |
+| `bool operator!=(const iterator&amp;amp;, default_sentinel_t)` | 非等値比較 (`==`により使用可能) | C++23 |
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>generator::promise_type -- generator: 各種調整</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator/promise_type.html"/>
      <id>ab69dd554d5ea642a4ec6a2350760a6faf069039:reference/generator/generator/promise_type.md</id>
      <updated>2023-01-03T23:43:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator/promise_type.md b/reference/generator/generator/promise_type.md
index 7804d589c..f45d7a5da 100644
--- a/reference/generator/generator/promise_type.md
+++ b/reference/generator/generator/promise_type.md
@@ -17,10 +17,12 @@ namespace std {
 
 ## 概要
 ジェネレータコルーチン動作を制御する[Promise型](/lang/cpp20/coroutines.md)。
+プログラマが本クラスを直接利用することは想定されていない。
+
 
 `generator::promise_type`クラスの動作説明のため、以下の説明専用メンバを用いる。
 
-- [`add_pointer_t`](/reference/type_traits/add_pointer.md)`&amp;lt;`[`yielded`](../../generator.md)`&amp;gt;`型 : `value_`
+- [`add_pointer_t`](/reference/type_traits/add_pointer.md)`&amp;lt;`[`yielded`](../generator.md)`&amp;gt;`型 : `value_`
 - [`exception_ptr`](/reference/exception/exception_ptr.md)型 : `except_`
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>final_suspend -- generator: 各種調整</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator/promise_type/final_suspend.html"/>
      <id>ab69dd554d5ea642a4ec6a2350760a6faf069039:reference/generator/generator/promise_type/final_suspend.md</id>
      <updated>2023-01-03T23:43:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator/promise_type/final_suspend.md b/reference/generator/generator/promise_type/final_suspend.md
index 0451a8d81..e5b01ea54 100644
--- a/reference/generator/generator/promise_type/final_suspend.md
+++ b/reference/generator/generator/promise_type/final_suspend.md
@@ -11,6 +11,7 @@ auto final_suspend() noexcept;
 
 ## 概要
 ジェネレータコルーチンの[最終サスペンドポイント](/lang/cpp20/coroutines.md)を制御するAwaitableオブジェクトを返す。
+プログラマが本関数を直接利用することは想定されていない。
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_return_object -- generator: 各種調整</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator/promise_type/get_return_object.html"/>
      <id>ab69dd554d5ea642a4ec6a2350760a6faf069039:reference/generator/generator/promise_type/get_return_object.md</id>
      <updated>2023-01-03T23:43:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator/promise_type/get_return_object.md b/reference/generator/generator/promise_type/get_return_object.md
index e6ddea443..ba9a6baec 100644
--- a/reference/generator/generator/promise_type/get_return_object.md
+++ b/reference/generator/generator/promise_type/get_return_object.md
@@ -13,6 +13,7 @@ generator get_return_object() noexcept;
 ## 概要
 ジェネレータ[コルーチン](/lang/cpp20/coroutines.md)の戻り値オブジェクトを生成する。
 戻り値ジェネレータの[アクティブスタック](../../generator.md)を、空(empty)で初期化する。
+プログラマが本関数を直接利用することは想定されていない。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>initial_suspend -- generator: 各種調整</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator/promise_type/initial_suspend.html"/>
      <id>ab69dd554d5ea642a4ec6a2350760a6faf069039:reference/generator/generator/promise_type/initial_suspend.md</id>
      <updated>2023-01-03T23:43:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator/promise_type/initial_suspend.md b/reference/generator/generator/promise_type/initial_suspend.md
index c22b2cc8c..428c6b194 100644
--- a/reference/generator/generator/promise_type/initial_suspend.md
+++ b/reference/generator/generator/promise_type/initial_suspend.md
@@ -12,6 +12,7 @@ suspend_always initial_suspend() const noexcept;
 
 ## 概要
 ジェネレータコルーチンの[初期サスペンドポイント](/lang/cpp20/coroutines.md)を制御するAwaitableオブジェクトを返す。
+プログラマが本関数を直接利用することは想定されていない。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator new -- generator: 各種調整</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator/promise_type/op_new.html"/>
      <id>ab69dd554d5ea642a4ec6a2350760a6faf069039:reference/generator/generator/promise_type/op_new.md</id>
      <updated>2023-01-03T23:43:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator/promise_type/op_new.md b/reference/generator/generator/promise_type/op_new.md
index e291d024a..2127e113a 100644
--- a/reference/generator/generator/promise_type/op_new.md
+++ b/reference/generator/generator/promise_type/op_new.md
@@ -17,9 +17,9 @@ template&amp;lt;class This, class Alloc, class... Args&amp;gt;
   requires same_as&amp;lt;Allocator, void&amp;gt; || convertible_to&amp;lt;const Alloc&amp;amp;, Allocator&amp;gt;
 void* operator new(size_t size, const This&amp;amp;, allocator_arg_t, const Alloc&amp;amp; alloc, const Args&amp;amp;...);
 ```
-* std::same_as[link /reference/concepts/same_as.md]
+* same_as[link /reference/concepts/same_as.md]
 * default_initializable[link /reference/concepts/default_initializable.md]
-* std::convertible_to[link /reference/concepts/convertible_to.md]
+* convertible_to[link /reference/concepts/convertible_to.md]
 * allocator_arg_t[link /reference/memory/allocator_arg_t.md]
 
 
@@ -42,7 +42,7 @@ void* operator new(size_t size, const This&amp;amp;, allocator_arg_t, const Alloc&amp;amp; alloc
 ## 効果
 `B`型のアロケータ`b`を、オーバーロード(1)では`A()`により、オーバーロード(2)(3)では`A(alloc)`により初期化する。
 
-アロケータ`b`を用いて、サイズ`size`の[コルーチン・ステー](/lang/cpp20/coroutines.md)トと、後ほど[`operator delete`](op_delete.md)による`b`を用いたメモリブロック解放で必要とされる追加状態を合わせたストレージに必要となる、`U`型の最小配列ストレージを確保する。
+アロケータ`b`を用いて、サイズ`size`の[コルーチン・ステート](/lang/cpp20/coroutines.md)と、後ほど[`operator delete`](op_delete.md)による`b`を用いたメモリブロック解放で必要とされる追加状態を合わせたストレージに必要となる、`U`型の最小配列ストレージを確保する。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>return_void -- generator: 各種調整</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator/promise_type/return_void.html"/>
      <id>ab69dd554d5ea642a4ec6a2350760a6faf069039:reference/generator/generator/promise_type/return_void.md</id>
      <updated>2023-01-03T23:43:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator/promise_type/return_void.md b/reference/generator/generator/promise_type/return_void.md
index b2a6c982f..ca0331c73 100644
--- a/reference/generator/generator/promise_type/return_void.md
+++ b/reference/generator/generator/promise_type/return_void.md
@@ -11,6 +11,7 @@ void return_void() const noexcept;
 
 ## 概要
 ジェネレータコルーチンからreturn時の動作を制御する。
+プログラマが本関数を直接利用することは想定されていない。
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unhandled_exception -- generator: 各種調整</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator/promise_type/unhandled_exception.html"/>
      <id>ab69dd554d5ea642a4ec6a2350760a6faf069039:reference/generator/generator/promise_type/unhandled_exception.md</id>
      <updated>2023-01-03T23:43:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator/promise_type/unhandled_exception.md b/reference/generator/generator/promise_type/unhandled_exception.md
index 7b67e4121..c0e61fabc 100644
--- a/reference/generator/generator/promise_type/unhandled_exception.md
+++ b/reference/generator/generator/promise_type/unhandled_exception.md
@@ -11,6 +11,7 @@ void unhandled_exception();
 
 ## 概要
 ジェネレータコルーチンから送出された例外を処理する。
+プログラマが本関数を直接利用することは想定されていない。
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>yield_value -- generator: 各種調整</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator/promise_type/yield_value.html"/>
      <id>ab69dd554d5ea642a4ec6a2350760a6faf069039:reference/generator/generator/promise_type/yield_value.md</id>
      <updated>2023-01-03T23:43:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator/promise_type/yield_value.md b/reference/generator/generator/promise_type/yield_value.md
index c1d4e2ae4..021e09c1d 100644
--- a/reference/generator/generator/promise_type/yield_value.md
+++ b/reference/generator/generator/promise_type/yield_value.md
@@ -36,6 +36,7 @@ auto yield_value(ranges::elements_of&amp;lt;Rng, Alloc&amp;gt; r) noexcept; // (4)
 
 ## 概要
 ジェネレータコルーチンにおける[co_yield式](/lang/cpp20/coroutines.md)の動作を制御する。
+プログラマが本関数を直接利用することは想定されていない。
 
 
 ## 事前条件
@@ -79,7 +80,7 @@ return yield_value(ranges::elements_of(nested(
 
 
 ## 戻り値
-- (1) :　[`suspend_always{}`](/reference/coroutine/suspend_always.md)
+- (1) : [`suspend_always{}`](/reference/coroutine/suspend_always.md)
 - (2) : `lval`を用いて直接非リスト初期化(direct-non-list-initialized)された[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`yielded`](../../generator.md)`&amp;gt;`型オブジェクトを保持し、[説明専用メンバ`value_`](../promise_type.md)が保持されたオブジェクトを指してコルーチンを中断(suspend)するメンバ関数をもつ、未規定の型の[Awaitableオブジェクト](/lang/cpp20/coroutines.md)。
 - (3) : ジェネレータ`g.range`の所有権を受け取り、メンバ関数`await_ready`は`false`を返し、メンバ関数`await_suspend`は`x`のアクティブスタックに`g.range`に対応する[コルーチンハンドル](/reference/coroutine/coroutine_handle.md)をpushしてから`g.range`を再開(resume)し、メンバ関数`await_resume`は[説明専用メンバ`except_`](../promise_type.md)が例外を保持している場合に[`rethrow_exception`](/reference/exception/rethrow_exception.md)`(except_)`を行う、未規定の型の[Awaitableオブジェクト](/lang/cpp20/coroutines.md)。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-11-12T07:23:11.201824</updated>
  <id>f4377479-a5e5-4a06-b30c-ca4d7845bb8d</id>

  
    <entry>
      <title>allocate_shared -- fix Japanese terminology</title>
      <link href="https://cpprefjp.github.io/reference/memory/allocate_shared.html"/>
      <id>8302b23e3f8b80779945b6336c989f3639da4cd6:reference/memory/allocate_shared.md</id>
      <updated>2022-11-12T16:17:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/allocate_shared.md b/reference/memory/allocate_shared.md
index b29d325c7..05b624473 100644
--- a/reference/memory/allocate_shared.md
+++ b/reference/memory/allocate_shared.md
@@ -55,7 +55,7 @@ namespace std {
 
 配列タイプのオブジェクトがデフォルトの初期値を持つように指定されている場合、これはオブジェクトの各配列要素がデフォルトの初期値を持つことを意味すると解釈される。
 
-非配列型Uの（サブ）オブジェクトが初期値`v`または`U(l...)`を持つように指定されている場合（`l...`はコンストラクター引数のリスト）、この関数は次の式を介してこの（サブ）オブジェクトを初期化する。
+非配列型Uの（サブ）オブジェクトが初期値`v`または`U(l...)`を持つように指定されている場合（`l...`はコンストラクタ引数のリスト）、この関数は次の式を介してこの（サブ）オブジェクトを初期化する。
 
 - `allocator_traits&amp;lt;A2&amp;gt;::construct(a2, pv, v)` または
 
@@ -71,7 +71,7 @@ namespace std {
 
 この関数によって初期化された非配列型`U`の（サブ）オブジェクトが破棄される場合、式`allocator_traits&amp;lt;A2&amp;gt;::destroy(a2、pv)`によって破棄される。`pv`はその型のオブジェクトを指す。`remove_cv_t&amp;lt;U&amp;gt;`および型`A2`の`a2`は、`value_type`が`remove_cv_t&amp;lt;U&amp;gt;`になるように`allocate_shared`に渡されるアロケーター`a`の再束縛されたコピーである。
 
-- (1) : 初期値`T(forward&amp;lt;Args&amp;gt;(args)...)`を持つ型`T`のオブジェクトへの`shared_ptr`を返す。Tが配列型でない場合にのみ、このオーバーロードはオーバーロード解決に関与する。この関数によって呼び出される`shared_ptr`コンストラクターは、型`T`の新しく構築されたオブジェクトのアドレスで`shared_from_this`を有効にする。
+- (1) : 初期値`T(forward&amp;lt;Args&amp;gt;(args)...)`を持つ型`T`のオブジェクトへの`shared_ptr`を返す。Tが配列型でない場合にのみ、このオーバーロードはオーバーロード解決に関与する。この関数によって呼び出される`shared_ptr`コンストラクタは、型`T`の新しく構築されたオブジェクトのアドレスで`shared_from_this`を有効にする。
 - (2) : デフォルトの初期値を持つ`U[N]`型のオブジェクトへの`shared_ptr`を返す。ここで、`U`は`remove_extent_t&amp;lt;T&amp;gt;`である。`T`の形式が`U[]`の場合にのみ、このオーバーロードはオーバーロード解決に関与する。
 - (3) : デフォルトの初期値を持つ`T`型のオブジェクトへの`shared_ptr`を返す。このオーバーロードは、`T`が`U[N]`の形式の場合にのみオーバーロード解決に関与する。
 - (4) : `U[N]`型のオブジェクトへの`shared_ptr`を返す。ここで、`U`は`remove_extent_t&amp;lt;T&amp;gt;`であり、各配列要素の初期値は`u`である。`T`の形式が`U[]`の場合にのみ、このオーバーロードはオーバーロード解決に関与する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>make_shared -- fix Japanese terminology</title>
      <link href="https://cpprefjp.github.io/reference/memory/make_shared.html"/>
      <id>8302b23e3f8b80779945b6336c989f3639da4cd6:reference/memory/make_shared.md</id>
      <updated>2022-11-12T16:17:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/make_shared.md b/reference/memory/make_shared.md
index 8c8e64a84..89874db33 100644
--- a/reference/memory/make_shared.md
+++ b/reference/memory/make_shared.md
@@ -40,7 +40,7 @@ namespace std {
 
 配列タイプのオブジェクトがデフォルトの初期値を持つように指定されている場合、これはオブジェクトの各配列要素がデフォルトの初期値を持つことを意味すると解釈される。
 
-非配列型`U`の（サブ）オブジェクトが、`v`または`U(l ...)`の初期値を持つように指定されている場合(`l...`はコンストラクター引数のリスト）、`make_shared`は、式`::new (pv) U(v)`または`::new (pv) U(l...)`を使用して、この（サブ）オブジェクトを初期化する。ここで、`pv`の型は`void*`であり、型`U`のオブジェクトを保持するのに適したストレージを指す。
+非配列型`U`の（サブ）オブジェクトが、`v`または`U(l ...)`の初期値を持つように指定されている場合(`l...`はコンストラクタ引数のリスト）、`make_shared`は、式`::new (pv) U(v)`または`::new (pv) U(l...)`を使用して、この（サブ）オブジェクトを初期化する。ここで、`pv`の型は`void*`であり、型`U`のオブジェクトを保持するのに適したストレージを指す。
 
 非配列型`U`の（サブ）オブジェクトがデフォルトの初期値を持つように指定されている場合、この関数は、式 `::new (pv) U()`を使用してこの（サブ）オブジェクトを初期化する。`void*`は型`U`のオブジェクトを保持するのに適したストレージを指す。
 
@@ -50,7 +50,7 @@ namespace std {
 
 この関数によって初期化された非配列型`U`の（サブ）オブジェクトを破棄する場合、式`pv-&amp;gt;~U()`によって破棄される。pvは型`U`のオブジェクトを指す。
 
-- (1) : 初期値`T(forward&amp;lt;Args&amp;gt;(args)...)`を持つ型`T`のオブジェクトへの`shared_ptr`を返す。Tが配列型でない場合にのみ、このオーバーロードはオーバーロード解決に関与する。この関数によって呼び出される`shared_ptr`コンストラクターは、型`T`の新しく構築されたオブジェクトのアドレスで`shared_from_this`を有効にする。
+- (1) : 初期値`T(forward&amp;lt;Args&amp;gt;(args)...)`を持つ型`T`のオブジェクトへの`shared_ptr`を返す。Tが配列型でない場合にのみ、このオーバーロードはオーバーロード解決に関与する。この関数によって呼び出される`shared_ptr`コンストラクタは、型`T`の新しく構築されたオブジェクトのアドレスで`shared_from_this`を有効にする。
 - (2) : デフォルトの初期値を持つ`U[N]`型のオブジェクトへの`shared_ptr`を返す。ここで、`U`は`remove_extent_t&amp;lt;T&amp;gt;`である。`T`の形式が`U[]`の場合にのみ、このオーバーロードはオーバーロード解決に関与する。
 - (3) : デフォルトの初期値を持つ`T`型のオブジェクトへの`shared_ptr`を返す。このオーバーロードは、`T`が`U[N]`の形式の場合にのみオーバーロード解決に関与する。
 - (4) : `U[N]`型のオブジェクトへの`shared_ptr`を返す。ここで、`U`は`remove_extent_t&amp;lt;T&amp;gt;`であり、各配列要素の初期値は`u`である。`T`の形式が`U[]`の場合にのみ、このオーバーロードはオーバーロード解決に関与する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iterator tag -- fix Japanese terminology</title>
      <link href="https://cpprefjp.github.io/reference/iterator/iterator_tag.html"/>
      <id>f04524b55a25e829f23d85bf844f4eadf49cbf7d:reference/iterator/iterator_tag.md</id>
      <updated>2022-11-12T16:13:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/iterator_tag.md b/reference/iterator/iterator_tag.md
index c85562401..e39e27507 100644
--- a/reference/iterator/iterator_tag.md
+++ b/reference/iterator/iterator_tag.md
@@ -21,7 +21,7 @@ namespace std {
 |------------------------------|----------------|-------|
 | `input_iterator_tag`         | 入力イテレータ ||
 | `output_iterator_tag`        | 出力イテレータ ||
-| `forward_iterator_tag`       | 前方イテレータ ||
+| `forward_iterator_tag`       | 前方向イテレータ ||
 | `bidirectional_iterator_tag` | 双方向イテレータ ||
 | `random_access_iterator_tag` | ランダムアクセスイテレータ ||
 | `contiguous_iterator_tag` | 隣接イテレータ | C++20 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>make_unique -- fix typo in sample code</title>
      <link href="https://cpprefjp.github.io/reference/memory/make_unique.html"/>
      <id>3889af625e12e88b571fead089de703c53c7947b:reference/memory/make_unique.md</id>
      <updated>2022-11-12T16:09:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/make_unique.md b/reference/memory/make_unique.md
index 267cb5863..2524d0aa2 100644
--- a/reference/memory/make_unique.md
+++ b/reference/memory/make_unique.md
@@ -60,7 +60,7 @@ int main()
   std::unique_ptr&amp;lt;int[]&amp;gt; p2 = std::make_unique&amp;lt;int[]&amp;gt;(3);
   p2[0] = 1;
   p2[1] = 2;
-  p2[3] = 3;
+  p2[2] = 3;
 }
 ```
 * std::make_unique[color ff0000]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>chi_squared_distribution -- chi_squared_distribution : 参照文書がリンク切れしていたため、archiveに切り替えた (close #1006)</title>
      <link href="https://cpprefjp.github.io/reference/random/chi_squared_distribution.html"/>
      <id>1424b480b6065aaf27a546eebeee4dba412869e9:reference/random/chi_squared_distribution.md</id>
      <updated>2022-11-07T13:37:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/chi_squared_distribution.md b/reference/random/chi_squared_distribution.md
index becc6b169..048eb7ff9 100644
--- a/reference/random/chi_squared_distribution.md
+++ b/reference/random/chi_squared_distribution.md
@@ -124,6 +124,6 @@ int main()
 
 ### 参考
 - [カイ二乗分布 - Wikipedia](https://ja.wikipedia.org/wiki/%E3%82%AB%E3%82%A4%E4%BA%8C%E4%B9%97%E5%88%86%E5%B8%83)
-- [χ2（カイ２乗）分布](http://staff.aist.go.jp/t.ihara/chi2.html)
+- [χ2（カイ２乗）分布](https://web.archive.org/web/20211102213228/http://staff.aist.go.jp/t.ihara/chi2.html)
 - [カイ２乗分布とは](https://web.archive.org/web/20161213042559/http://ogawas.cerp.u-toyama.ac.jp/e-stat/kai.html)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lexicographical_compare_three_way -- lexicographical_compare_three_way : リストのネスト修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/lexicographical_compare_three_way.html"/>
      <id>5eb07474ace3fcc011f25fe14f0525963f584f48:reference/algorithm/lexicographical_compare_three_way.md</id>
      <updated>2022-11-04T15:49:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/lexicographical_compare_three_way.md b/reference/algorithm/lexicographical_compare_three_way.md
index cbd754428..f0349739a 100644
--- a/reference/algorithm/lexicographical_compare_three_way.md
+++ b/reference/algorithm/lexicographical_compare_three_way.md
@@ -51,9 +51,9 @@ namespace std {
 
 - (1) : 次のいずれか
     - `E(i) != 0`が`true`となる`[0, N)`内の最小の整数`i`について、`E(i)`
-      - `comp`の意味で異なる最初の要素についての三方比較の結果を返す
+        - `comp`の意味で異なる最初の要素についての三方比較の結果を返す
     - そのような`i`が存在しない場合 : `(last1 - first1) &amp;lt;=&amp;gt; (last2 - first2)`
-      - 全ての要素が等しいならば、長さを比較する
+        - 全ての要素が等しいならば、長さを比較する
 
 - (2) : 以下と等価、すなわち(1)に委譲
   ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-09-20T08:58:11.077031</updated>
  <id>7cf607b8-47e7-4024-9dcf-eb179193c84c</id>

  
    <entry>
      <title>counting_scope -- execution: P3149R11 stop-when(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope.html"/>
      <id>53db61c683f848626a88074adb080eb87a69b7c2:reference/execution/execution/counting_scope.md</id>
      <updated>2025-09-20T17:53:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope.md b/reference/execution/execution/counting_scope.md
index 986b5a422..7e8d4fcb5 100644
--- a/reference/execution/execution/counting_scope.md
+++ b/reference/execution/execution/counting_scope.md
@@ -18,7 +18,7 @@ namespace std::execution {
 
 - `count` : `size_t`型の関連付けカウント値
 - `state` : `scope-state-type`列挙型（後述）の状態
--　`s_source` : [`inplace_stop_source`](/reference/stop_token/inplace_stop_source.md)型の停止要求管理オブジェクト
+- `s_source` : [`inplace_stop_source`](/reference/stop_token/inplace_stop_source.md)型の停止要求管理オブジェクト
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>disassociate -- execution: P3149R11 stop-when(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/disassociate.html"/>
      <id>53db61c683f848626a88074adb080eb87a69b7c2:reference/execution/execution/counting_scope/disassociate.md</id>
      <updated>2025-09-20T17:53:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/disassociate.md b/reference/execution/execution/counting_scope/disassociate.md
index dcb449a86..8d94cfda6 100644
--- a/reference/execution/execution/counting_scope/disassociate.md
+++ b/reference/execution/execution/counting_scope/disassociate.md
@@ -31,12 +31,6 @@ void disassociate() noexcept; // exposition only
 ### 言語
 - C++26
 
-### 処理系
-- [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): ??
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp): ??
-
 
 ## 参照
 - [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>start-join-sender -- execution: P3149R11 stop-when(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/start-join-sender.html"/>
      <id>53db61c683f848626a88074adb080eb87a69b7c2:reference/execution/execution/counting_scope/start-join-sender.md</id>
      <updated>2025-09-20T17:53:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/start-join-sender.md b/reference/execution/execution/counting_scope/start-join-sender.md
index 9c63f0c07..e011cf86c 100644
--- a/reference/execution/execution/counting_scope/start-join-sender.md
+++ b/reference/execution/execution/counting_scope/start-join-sender.md
@@ -31,12 +31,5 @@ bool start-join-sender(State&amp;amp; st) noexcept; // exposition only
 ### 言語
 - C++26
 
-### 処理系
-- [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): ??
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp): ??
-
-
 ## 参照
 - [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wrap -- execution: P3149R11 stop-when(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/token/wrap.html"/>
      <id>53db61c683f848626a88074adb080eb87a69b7c2:reference/execution/execution/counting_scope/token/wrap.md</id>
      <updated>2025-09-20T17:53:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/token/wrap.md b/reference/execution/execution/counting_scope/token/wrap.md
index 0dd93543d..6f76a6d95 100644
--- a/reference/execution/execution/counting_scope/token/wrap.md
+++ b/reference/execution/execution/counting_scope/token/wrap.md
@@ -23,7 +23,7 @@ sender auto wrap(Sender&amp;amp;&amp;amp; snd) const
 ```cpp
 return stop-when(std::forward&amp;lt;Sender&amp;gt;(snd), scope-&amp;gt;s_source.get_token());
 ```
-* stop-when[link stop-when.md.nolink]
+* stop-when[link ../../stop-when.md]
 * get_token()[link /reference/stop_token/stop_source/get_token.md]
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try-associate -- execution: P3149R11 stop-when(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/try-associate.html"/>
      <id>53db61c683f848626a88074adb080eb87a69b7c2:reference/execution/execution/counting_scope/try-associate.md</id>
      <updated>2025-09-20T17:53:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/try-associate.md b/reference/execution/execution/counting_scope/try-associate.md
index 28f6a5276..592fb90b9 100644
--- a/reference/execution/execution/counting_scope/try-associate.md
+++ b/reference/execution/execution/counting_scope/try-associate.md
@@ -35,12 +35,6 @@ bool try-associate() noexcept; // exposition only
 ### 言語
 - C++26
 
-### 処理系
-- [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): ??
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp): ??
-
 
 ## 参照
 - [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>disassociate -- execution: P3149R11 stop-when(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/disassociate.html"/>
      <id>53db61c683f848626a88074adb080eb87a69b7c2:reference/execution/execution/simple_counting_scope/disassociate.md</id>
      <updated>2025-09-20T17:53:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/disassociate.md b/reference/execution/execution/simple_counting_scope/disassociate.md
index 52eeca3bc..380f5e7af 100644
--- a/reference/execution/execution/simple_counting_scope/disassociate.md
+++ b/reference/execution/execution/simple_counting_scope/disassociate.md
@@ -31,12 +31,6 @@ void disassociate() noexcept; // exposition only
 ### 言語
 - C++26
 
-### 処理系
-- [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): ??
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp): ??
-
 
 ## 参照
 - [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>start-join-sender -- execution: P3149R11 stop-when(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/start-join-sender.html"/>
      <id>53db61c683f848626a88074adb080eb87a69b7c2:reference/execution/execution/simple_counting_scope/start-join-sender.md</id>
      <updated>2025-09-20T17:53:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/start-join-sender.md b/reference/execution/execution/simple_counting_scope/start-join-sender.md
index 6adda69eb..cf58d30d9 100644
--- a/reference/execution/execution/simple_counting_scope/start-join-sender.md
+++ b/reference/execution/execution/simple_counting_scope/start-join-sender.md
@@ -31,12 +31,6 @@ bool start-join-sender(State&amp;amp; st) noexcept; // exposition only
 ### 言語
 - C++26
 
-### 処理系
-- [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): ??
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp): ??
-
 
 ## 参照
 - [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try-associate -- execution: P3149R11 stop-when(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/try-associate.html"/>
      <id>53db61c683f848626a88074adb080eb87a69b7c2:reference/execution/execution/simple_counting_scope/try-associate.md</id>
      <updated>2025-09-20T17:53:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/try-associate.md b/reference/execution/execution/simple_counting_scope/try-associate.md
index 5f24afbbf..e297576f7 100644
--- a/reference/execution/execution/simple_counting_scope/try-associate.md
+++ b/reference/execution/execution/simple_counting_scope/try-associate.md
@@ -35,12 +35,6 @@ bool try-associate() noexcept; // exposition only
 ### 言語
 - C++26
 
-### 処理系
-- [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): ??
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp): ??
-
 
 ## 参照
 - [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stop-when -- execution: P3149R11 stop-when(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/stop-when.html"/>
      <id>53db61c683f848626a88074adb080eb87a69b7c2:reference/execution/execution/stop-when.md</id>
      <updated>2025-09-20T17:53:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/stop-when.md b/reference/execution/execution/stop-when.md
new file mode 100644
index 000000000..9c0072e42
--- /dev/null
+++ b/reference/execution/execution/stop-when.md
@@ -0,0 +1,41 @@
+# stop-when
+* execution[meta header]
+* cpo[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  inline constexpr unspecified stop-when{};
+}
+```
+* unspecified[italic]
+
+# 概要
+`stop-when`は、入力[Sender](sender.md)に追加の[停止トークン](/reference/stop_token/stop_token.md)を結合したSenderを返す、説明専用のSenderアダプタである。
+
+説明用の式`sndr`と`token`に対して、
+
+- `decltype((sndr))`が[`sender`](sender.md)を満たさない、もしくは[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;decltype((token))&amp;gt;`が[`stoppable_token`](/reference/stop_token/stoppable_token.md)を満たさないとき、式`stop-token(sndr, token)`は不適格となる。
+- そうでなく、[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;decltype((token))&amp;gt;`が[`unstoppable_token`](/reference/stop_token/unstoppable_token.md)のモデルであるとき、式`stop-token(sndr, token)`は`sndr`と等価となる。
+- そうでないとき、式`stop-token(sndr, token)`はSender`osndr`を返す。`osndr`が[Receiver](receiver.md)`r`と[接続(connect)](connect.md)されるとき、[`get_stop_token`](../get_stop_token.md)`(`[`get_env`](get_env.md)`(r))`の結果を`rtoken`とする。
+    - `rtoken`の型が[`unstoppable_token`](/reference/stop_token/unstoppable_token.md)のモデルであるとき、`osdnr`と`r`との接続の効果は[`connect`](connect.md)`(`[`write_env`](write_env.md)`(sndr,` [`prop`](prop.md)`(`[`get_stop_token`](../get_stop_token.md)`, token)), r)`に等しい。
+    - そうでないとき、下記のような説明専用の型`stoken-t`の`stoken`オブジェクトに対して、`osdnr`と`r`との接続の効果は[`connect`](connect.md)`(`[`write_env`](write_env.md)`(sndr,` [`prop`](prop.md)`(`[`get_stop_token`](../get_stop_token.md)`, stoken)), r)`に等しい。
+        - `stoken-t`は[`stoppable_token`](/reference/stop_token/stoppable_token.md)のモデルである。
+        - `stoken.stop_requested()`は`token.stop_requested() || rtoken.stop_requested()`を返す。
+        - `stoken.stop_possible()`は`token.stop_possible() || rtoken.stop_possible()`を返す。
+        - 説明用の型`Fn`と`Init`が[`invocable`](/reference/concepts/invocable.md)`&amp;lt;Fn&amp;gt;`および[`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;Fn, Init&amp;gt;`のモデルであるとき、`stoken-t::callback_type&amp;lt;Fn&amp;gt;`は[`stoppable-callback-for`](/reference/stop_token/stoppable_token.md)のモデルである。
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 関連項目
+- [`execution::spawn_future`](spawn_future.md.nolink)
+- [`execution::counting_scope::token::wrap`](counting_scope/token/wrap.md)
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>counting_scope -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/counting_scope.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope.md b/reference/execution/execution/counting_scope.md
index 4819fa15b..986b5a422 100644
--- a/reference/execution/execution/counting_scope.md
+++ b/reference/execution/execution/counting_scope.md
@@ -14,22 +14,29 @@ namespace std::execution {
 `counting_scope`は、停止要求を作成可能なカウント式の非同期スコープを表現する。
 
 
+クラス動作説明用のメンバ変数として下記を保持する。詳細仕様は[`simple_counting_scope`](simple_counting_scope.md)を参照。
+
+- `count` : `size_t`型の関連付けカウント値
+- `state` : `scope-state-type`列挙型（後述）の状態
+-　`s_source` : [`inplace_stop_source`](/reference/stop_token/inplace_stop_source.md)型の停止要求管理オブジェクト
+
+
 ## メンバ関数
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`(constructor)`](counting_scope/op_constructor.md.nolink) | コンストラクタ | C++26 |
-| [`(destructor)`](counting_scope/op_destructor.md.nolink) | デストラクタ | C++26 |
-| [`get_token`](counting_scope/get_token.md.nolink) | 非同期スコープトークンを取得 | C++26 |
-| [`close`](counting_scope/close.md.nolink) | 非同期スコープを閉じる | C++26 |
-| [`join`](counting_scope/join.md.nolink) | 非同期スコープを合流する[Sender](sender.md)取得 | C++26 |
-| [`request_stop`](counting_scope/request_stop.md.nolink) | 停止要求を行う | C++26 |
+| [`(constructor)`](counting_scope/op_constructor.md) | コンストラクタ | C++26 |
+| [`(destructor)`](counting_scope/op_destructor.md) | デストラクタ | C++26 |
+| [`get_token`](counting_scope/get_token.md) | 非同期スコープトークンを取得 | C++26 |
+| [`close`](counting_scope/close.md) | 非同期スコープを閉じる | C++26 |
+| [`join`](counting_scope/join.md) | 非同期スコープを合流する[Sender](sender.md)取得 | C++26 |
+| [`request_stop`](counting_scope/request_stop.md) | 停止要求を作成する | C++26 |
 
 ## メンバ型
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`token`](counting_scope/token.md.nolink) | 非同期スコープトークン型 | C++26 |
+| [`token`](counting_scope/token.md) | 非同期スコープトークン型 | C++26 |
 
 ## 静的メンバ変数
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>close -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/close.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/counting_scope/close.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/close.md b/reference/execution/execution/counting_scope/close.md
new file mode 100644
index 000000000..ea3f53dd9
--- /dev/null
+++ b/reference/execution/execution/counting_scope/close.md
@@ -0,0 +1,45 @@
+# close
+* execution[meta header]
+* std::execution[meta namespace]
+* counting_scope[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+void close() noexcept;
+```
+
+## 概要
+非同期スコープを閉じる。
+
+
+## 効果
+説明用のメンバ変数`state`に応じて、
+
+- `unused`のとき、`state`を`unused-and-closed`に変更する。
+- `open`のとき、`state`を`closed`に変更する。
+- `open-and-joining`のとき、`state`を`closed-and-joining`に変更する。
+- それ以外のとき、何もしない。
+
+
+## 事後条件
+`*this`に対する後続の[`try-associate`](try-associate.md)は`false`を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>disassociate -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/disassociate.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/counting_scope/disassociate.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/disassociate.md b/reference/execution/execution/counting_scope/disassociate.md
new file mode 100644
index 000000000..dcb449a86
--- /dev/null
+++ b/reference/execution/execution/counting_scope/disassociate.md
@@ -0,0 +1,42 @@
+# disassociate
+* execution[meta header]
+* std::execution[meta namespace]
+* counting_scope[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+void disassociate() noexcept; // exposition only
+```
+
+## 概要
+非同期スコープとの関連付けを解除する、説明専用のメンバ関数。
+非同期トークン型[`token`](token.md)の[`disassociate`](token/disassociate.md)メンバ動作を定義する。
+
+
+## 事前条件
+説明用のメンバ変数`count`は`0`より大きい。
+
+
+## 効果
+`count`をデクリメントする。
+デクリメント後の`count == 0`、かつ説明用のメンバ変数`state`が`open-and-joining`または`closed-and-joining`のとき、`state`を`joined`に変更し、`*this`に登録された全てのオブジェクトで`complete()`を呼び出す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_token -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/get_token.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/counting_scope/get_token.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/get_token.md b/reference/execution/execution/counting_scope/get_token.md
new file mode 100644
index 000000000..b04a8f733
--- /dev/null
+++ b/reference/execution/execution/counting_scope/get_token.md
@@ -0,0 +1,37 @@
+# get_token
+* execution[meta header]
+* std::execution[meta namespace]
+* counting_scope[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+token get_token() noexcept;
+```
+* token[link token.md]
+
+## 概要
+非同期スコープの[非同期スコープトークン](token.md)を取得する。
+
+
+## 戻り値
+[`counting_scope::token`](token.md)型で`t.scope == this`となるオブジェクト`t`を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>join -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/join.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/counting_scope/join.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/join.md b/reference/execution/execution/counting_scope/join.md
new file mode 100644
index 000000000..2ec82dfa5
--- /dev/null
+++ b/reference/execution/execution/counting_scope/join.md
@@ -0,0 +1,37 @@
+# join
+* execution[meta header]
+* std::execution[meta namespace]
+* counting_scope[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+sender auto join() noexcept;
+```
+* sender[link ../sender.md]
+
+## 概要
+非同期スコープを合流する[Sender](../sender.md)を取得する。
+
+
+## 戻り値
+[`make-sender`](../make-sender.md)`(`[`scope-join-t`](../simple_counting_scope.md)`(), this)`
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/op_constructor.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/counting_scope/op_constructor.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/op_constructor.md b/reference/execution/execution/counting_scope/op_constructor.md
new file mode 100644
index 000000000..ca8067fb7
--- /dev/null
+++ b/reference/execution/execution/counting_scope/op_constructor.md
@@ -0,0 +1,38 @@
+# コンストラクタ
+* execution[meta header]
+* std::execution[meta namespace]
+* counting_scope[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+counting_scope() noexcept;  // (1)
+counting_scope(counting_scope&amp;amp;&amp;amp;) = delete;  // (2)
+```
+
+## 概要
+- (1): デフォルトコンストラクタ
+- (2): ムーブコンストラクタ。ムーブ不可
+
+
+## 事後条件
+(1) 説明用のメンバ変数`count`は`0`、`state`は`unused`となる。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/op_destructor.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/counting_scope/op_destructor.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/op_destructor.md b/reference/execution/execution/counting_scope/op_destructor.md
new file mode 100644
index 000000000..a6d00b46a
--- /dev/null
+++ b/reference/execution/execution/counting_scope/op_destructor.md
@@ -0,0 +1,33 @@
+# デストラクタ
+* execution[meta header]
+* std::execution[meta namespace]
+* counting_scope[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+~counting_scope();
+```
+
+## 概要
+デストラクタ
+
+
+## 効果
+説明用のメンバ変数`state`が`joined`, `unused`, `unused-and-closed`のいずれでもなければ、[`terminate`](/reference/exception/terminate.md)を呼び出す。
+そうでなければ、何もしない。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>request_stop -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/request_stop.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/counting_scope/request_stop.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/request_stop.md b/reference/execution/execution/counting_scope/request_stop.md
new file mode 100644
index 000000000..c3cc6e720
--- /dev/null
+++ b/reference/execution/execution/counting_scope/request_stop.md
@@ -0,0 +1,40 @@
+# request_stop
+* execution[meta header]
+* std::execution[meta namespace]
+* counting_scope[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+void request_stop() noexcept;
+```
+
+## 概要
+非同期スコープ上で停止要求を作成する。
+
+
+## 効果
+`s_source.`[`request_stop()`](/reference/stop_token/inplace_stop_source/request_stop.md)
+
+
+## 例外
+投げない
+
+
+## 備考
+`request_stop`の呼び出しはデータ競合を引き起こさない。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>start-join-sender -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/start-join-sender.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/counting_scope/start-join-sender.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/start-join-sender.md b/reference/execution/execution/counting_scope/start-join-sender.md
new file mode 100644
index 000000000..9c63f0c07
--- /dev/null
+++ b/reference/execution/execution/counting_scope/start-join-sender.md
@@ -0,0 +1,42 @@
+# start-join-sender
+* execution[meta header]
+* std::execution[meta namespace]
+* counting_scope[meta class]
+* function template[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class State&amp;gt;
+bool start-join-sender(State&amp;amp; st) noexcept; // exposition only
+```
+
+## 概要
+合流[Sender](../sender.md)を開始する、説明専用のメンバ関数。
+[`join`](join.md)メンバ関数が返す合流Sender動作を定義する。
+
+
+## 効果
+説明用のメンバ変数`state`に応じて、
+
+- `unused`, `unused-and-closed`, `joined`のとき、`state`を`joined`に変更して`true`を返す。
+- `open`, `open-and-joining`のとき、`state`を`open-and-joining`に変更し、`*this`で`st`を登録して`false`を返す。
+- `closed`, `closed-and-joining`のとき、`state`を`closed-and-joining`に変更し、`*this`で`st`を登録して`false`を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>token -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/token.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/counting_scope/token.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/token.md b/reference/execution/execution/counting_scope/token.md
new file mode 100644
index 000000000..222650238
--- /dev/null
+++ b/reference/execution/execution/counting_scope/token.md
@@ -0,0 +1,48 @@
+# token
+* execution[meta header]
+* std::execution[meta namespace]
+* counting_scope[meta class]
+* class[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  class counting_scope::token;
+}
+```
+
+## 概要
+`counting_scope::token`は、カウント式非同期スコープの[非同期トークン](../scope_token.md)である。
+非同期トークンは非同期スコープを参照する軽量ハンドラとして振る舞う。
+
+クラス動作説明用のメンバ変数として下記を保持する。
+
+- `scope` : [`counting_scope`](../counting_scope.md)型の非同期スコープ
+
+
+## メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`wrap`](token/wrap.md) | 非同期スコープと[Sender](../sender.md)を関連付けたSenderを返す | C++26 |
+| [`try_associate`](token/try_associate.md) | 非同期スコープとの関連付けを試行 | C++26 |
+| [`disassociate`](token/disassociate.md) | 非同期スコープとの関連付けを解除 | C++26 |
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::scope_token`](../scope_token.md)
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>disassociate -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/token/disassociate.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/counting_scope/token/disassociate.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/token/disassociate.md b/reference/execution/execution/counting_scope/token/disassociate.md
new file mode 100644
index 000000000..164c4e12b
--- /dev/null
+++ b/reference/execution/execution/counting_scope/token/disassociate.md
@@ -0,0 +1,47 @@
+# disassociate
+* execution[meta header]
+* function[meta id-type]
+* std::execution[meta namespace]
+* counting_scope::token[meta class]
+* cpp26[meta cpp]
+
+```cpp
+void disassociate() const noexcept;
+```
+
+## 概要
+非同期スコープとの関連付けを解除する。
+
+
+## 効果
+下記と等価。
+
+```cpp
+scope-&amp;gt;disassociate()
+```
+* disassociate[link ../disassociate.md]
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::associate`](../../associate.md.nolink)
+- [`execution::spawn_future`](../../spawn_future.md.nolink)
+- [`execution::spawn`](../../spawn.md.nolink)
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_associate -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/token/try_associate.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/counting_scope/token/try_associate.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/token/try_associate.md b/reference/execution/execution/counting_scope/token/try_associate.md
new file mode 100644
index 000000000..0d4dc5a4b
--- /dev/null
+++ b/reference/execution/execution/counting_scope/token/try_associate.md
@@ -0,0 +1,47 @@
+# try_associate
+* execution[meta header]
+* function[meta id-type]
+* std::execution[meta namespace]
+* counting_scope::token[meta class]
+* cpp26[meta cpp]
+
+```cpp
+bool try_associate() const noexcept;
+```
+
+## 概要
+非同期スコープとの関連付けを試行する。
+
+
+## 効果
+下記と等価。
+
+```cpp
+return scope-&amp;gt;try-associate();
+```
+* try-associate[link ../try-associate.md]
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::associate`](../../associate.md.nolink)
+- [`execution::spawn_future`](../../spawn_future.md.nolink)
+- [`execution::spawn`](../../spawn.md.nolink)
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wrap -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/token/wrap.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/counting_scope/token/wrap.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/token/wrap.md b/reference/execution/execution/counting_scope/token/wrap.md
new file mode 100644
index 000000000..0dd93543d
--- /dev/null
+++ b/reference/execution/execution/counting_scope/token/wrap.md
@@ -0,0 +1,48 @@
+# wrap
+* execution[meta header]
+* function template[meta id-type]
+* std::execution[meta namespace]
+* counting_scope::token[meta class]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;sender Sender&amp;gt;
+sender auto wrap(Sender&amp;amp;&amp;amp; snd) const
+  noexcept(is_nothrow_constructible_v&amp;lt;remove_cvref_t&amp;lt;Sender&amp;gt;, Sender&amp;gt;);
+```
+* sender[link ../../sender.md]
+* is_nothrow_constructible_v[link /reference/type_traits/is_nothrow_constructible.md]
+
+## 概要
+入力[Sender](../../sender.md)を非同期スコープに関連付けたSenderを返す。
+
+
+## 効果
+下記と等価。
+
+```cpp
+return stop-when(std::forward&amp;lt;Sender&amp;gt;(snd), scope-&amp;gt;s_source.get_token());
+```
+* stop-when[link stop-when.md.nolink]
+* get_token()[link /reference/stop_token/stop_source/get_token.md]
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::associate`](../../associate.md.nolink)
+- [`execution::spawn_future`](../../spawn_future.md.nolink)
+- [`execution::spawn`](../../spawn.md.nolink)
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try-associate -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/try-associate.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/counting_scope/try-associate.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/try-associate.md b/reference/execution/execution/counting_scope/try-associate.md
new file mode 100644
index 000000000..28f6a5276
--- /dev/null
+++ b/reference/execution/execution/counting_scope/try-associate.md
@@ -0,0 +1,46 @@
+# try-associate
+* execution[meta header]
+* std::execution[meta namespace]
+* counting_scope[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+bool try-associate() noexcept; // exposition only
+```
+
+## 概要
+非同期スコープとの関連付けを試行する、説明専用のメンバ関数。
+非同期トークン型[`token`](token.md)の[`try_associate`](token/try_associate.md)メンバ動作を定義する。
+
+
+## 効果
+説明用のメンバ変数`count`が`max_associations`と等しいとき、何もしない。
+そうでなければ、説明用のメンバ変数`state`に応じて、
+
+- `unused`のとき、`count`をインクリメントし、`state`を`open`に変更する。
+- `open`または`open-and-joining`のとき、`count`をインクリメントする。
+- それ以外のとき、何もしない。
+
+
+## 戻り値
+`count`がインクリメントされたとき、`true`を返す。それ以外のときは、`false`を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>simple_counting_scope -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/simple_counting_scope.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope.md b/reference/execution/execution/simple_counting_scope.md
index 5afaa2c60..5b90d5f38 100644
--- a/reference/execution/execution/simple_counting_scope.md
+++ b/reference/execution/execution/simple_counting_scope.md
@@ -26,7 +26,7 @@ namespace std::execution {
 ### 状態遷移
 説明専用の各種エンティティを下記の通り定義する。
 
-- `Scope`型 : `simple_counting_scope`または`counting_scope`のいずれか
+- `Scope`型 : `simple_counting_scope`または[`counting_scope`](counting_scope.md)のいずれか
 - `scope`オブジェクト : `Scope`型のオブジェクト
 - `tkn`オブジェクト : `scope.get_token()`が返す`Scope::token`型のオブジェクト
 - `jsndr` : `scope.join()`が返す[Sender](sender.md)
@@ -56,7 +56,7 @@ enum scope-state-type {  // exposition only
 
 
 ### Senderアルゴリズムタグ `scope-join-t`
-説明専用の[Senderアルゴリズムタグ型](tag_of_t.md)`scope-join-t`を定義する。
+[`join`](simple_counting_scope/join.md)メンバ関数が返す合流Sender動作仕様を記述するため、説明専用の[Senderアルゴリズムタグ型](tag_of_t.md)`scope-join-t`を定義する。
 
 ```cpp
 struct scope-join-t {};  // exposition only
@@ -80,9 +80,9 @@ namespace std::execution {
         }
 
         template&amp;lt;class E&amp;gt;
-          void set_error(E&amp;amp;&amp;amp; e) &amp;amp;&amp;amp; noexcept {
-            execution::set_error(std::move(rcvr), std::forward&amp;lt;E&amp;gt;(e));
-          }
+        void set_error(E&amp;amp;&amp;amp; e) &amp;amp;&amp;amp; noexcept {
+          execution::set_error(std::move(rcvr), std::forward&amp;lt;E&amp;gt;(e));
+        }
 
         void set_stopped() &amp;amp;&amp;amp; noexcept {
           execution::set_stopped(std::move(rcvr));
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>disassociate -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/disassociate.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/simple_counting_scope/disassociate.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/disassociate.md b/reference/execution/execution/simple_counting_scope/disassociate.md
index 8d8f73683..52eeca3bc 100644
--- a/reference/execution/execution/simple_counting_scope/disassociate.md
+++ b/reference/execution/execution/simple_counting_scope/disassociate.md
@@ -11,7 +11,7 @@ void disassociate() noexcept; // exposition only
 
 ## 概要
 非同期スコープとの関連付けを解除する、説明専用のメンバ関数。
-非同期トークン型[`token`]の[`disassociate`](token/disassociate.md)メンバ動作を定義する。
+非同期トークン型[`token`](token.md)の[`disassociate`](token/disassociate.md)メンバ動作を定義する。
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>start-join-sender -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/start-join-sender.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/simple_counting_scope/start-join-sender.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/start-join-sender.md b/reference/execution/execution/simple_counting_scope/start-join-sender.md
index 1b5b265b3..6adda69eb 100644
--- a/reference/execution/execution/simple_counting_scope/start-join-sender.md
+++ b/reference/execution/execution/simple_counting_scope/start-join-sender.md
@@ -12,6 +12,7 @@ bool start-join-sender(State&amp;amp; st) noexcept; // exposition only
 
 ## 概要
 合流[Sender](../sender.md)を開始する、説明専用のメンバ関数。
+[`join`](join.md)メンバ関数が返す合流Sender動作を定義する。
 
 
 ## 効果
@@ -19,7 +20,7 @@ bool start-join-sender(State&amp;amp; st) noexcept; // exposition only
 
 - `unused`, `unused-and-closed`, `joined`のとき、`state`を`joined`に変更して`true`を返す。
 - `open`, `open-and-joining`のとき、`state`を`open-and-joining`に変更し、`*this`で`st`を登録して`false`を返す。
-- `closed`, `closed-and-joingin`のとき、`state`を`closed-and-joining`に変更し、`*this`で`st`を登録して`false`を返す。
+- `closed`, `closed-and-joining`のとき、`state`を`closed-and-joining`に変更し、`*this`で`st`を登録して`false`を返す。
 
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>token -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/token.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/simple_counting_scope/token.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/token.md b/reference/execution/execution/simple_counting_scope/token.md
index a32ff7d16..1542b149d 100644
--- a/reference/execution/execution/simple_counting_scope/token.md
+++ b/reference/execution/execution/simple_counting_scope/token.md
@@ -13,6 +13,7 @@ namespace std::execution {
 
 ## 概要
 `simple_counting_scope::token`は、カウント式非同期スコープの[非同期トークン](../scope_token.md)である。
+非同期トークンは非同期スコープを参照する軽量ハンドラとして振る舞う。
 
 クラス動作説明用のメンバ変数として下記を保持する。
 
@@ -23,7 +24,7 @@ namespace std::execution {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`wrap`](token/wrap.md) | 非同期スコープと[Sender](../sender.md)関連付けたSenderを返す | C++26 |
+| [`wrap`](token/wrap.md) | 非同期スコープと[Sender](../sender.md)を関連付けたSenderを返す | C++26 |
 | [`try_associate`](token/try_associate.md) | 非同期スコープとの関連付けを試行 | C++26 |
 | [`disassociate`](token/disassociate.md) | 非同期スコープとの関連付けを解除 | C++26 |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wrap -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/token/wrap.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/simple_counting_scope/token/wrap.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/token/wrap.md b/reference/execution/execution/simple_counting_scope/token/wrap.md
index a873ba32c..ce95016e5 100644
--- a/reference/execution/execution/simple_counting_scope/token/wrap.md
+++ b/reference/execution/execution/simple_counting_scope/token/wrap.md
@@ -9,6 +9,7 @@
 template&amp;lt;sender Sender&amp;gt;
 Sender&amp;amp;&amp;amp; wrap(Sender&amp;amp;&amp;amp; snd) const noexcept;
 ```
+* sender[link ../../sender.md]
 
 ## 概要
 入力[Sender](../../sender.md)を非同期スコープに関連付けたSenderを返す。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try-associate -- execution: P3149R11 counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/try-associate.html"/>
      <id>a93a45196f5a34e1fadba9fa861b78070185977a:reference/execution/execution/simple_counting_scope/try-associate.md</id>
      <updated>2025-09-20T11:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/try-associate.md b/reference/execution/execution/simple_counting_scope/try-associate.md
index 0166940cf..5f24afbbf 100644
--- a/reference/execution/execution/simple_counting_scope/try-associate.md
+++ b/reference/execution/execution/simple_counting_scope/try-associate.md
@@ -11,7 +11,7 @@ bool try-associate() noexcept; // exposition only
 
 ## 概要
 非同期スコープとの関連付けを試行する、説明専用のメンバ関数。
-非同期トークン型[`token`]の[`try_associate`](token/try_associate.md)メンバ動作を定義する。
+非同期トークン型[`token`](token.md)の[`try_associate`](token/try_associate.md)メンバ動作を定義する。
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stoppable-source -- stop_token/stoppable-source: fix typo</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/stoppable-source.html"/>
      <id>4fbde58e0fe9cf97d3bf8c510ea4cc0c5a4b1b86:reference/stop_token/stoppable-source.md</id>
      <updated>2025-09-20T10:37:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/stoppable-source.md b/reference/stop_token/stoppable-source.md
index c258860e0..909dc19f5 100644
--- a/reference/stop_token/stoppable-source.md
+++ b/reference/stop_token/stoppable-source.md
@@ -5,7 +5,7 @@
 * cpp26[meta cpp]
 
 ```cpp
-mplate&amp;lt;class Source&amp;gt;
+template&amp;lt;class Source&amp;gt;
 concept stoppable-source =
   requires (Source&amp;amp; src, const Source csrc) {
     { csrc.get_token() } -&amp;gt; stoppable_token;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fminimum -- fix link</title>
      <link href="https://cpprefjp.github.io/reference/cmath/fminimum.html"/>
      <id>b8e603cc707d19ec5dc6eccc3ced2c5d3564e658:reference/cmath/fminimum.md</id>
      <updated>2025-09-19T12:05:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/fminimum.md b/reference/cmath/fminimum.md
index 52a73adc1..cc13ebfca 100644
--- a/reference/cmath/fminimum.md
+++ b/reference/cmath/fminimum.md
@@ -32,7 +32,7 @@ namespace std {
 |---|---|---|---|
 | [`fmin`](fmin.md)                 | 未規定      | NaN でない方を返す | |
 | [`fminimum`](fminimum.md)         | -0.0 を返す | NaN を返す | エラー伝播を優先 |
-| [`fminimum_num`](fmaximum_num.md) | -0.0 を返す | NaN でない方を返す | 数値を優先 |
+| [`fminimum_num`](fminimum_num.md) | -0.0 を返す | NaN でない方を返す | 数値を優先 |
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>simple_counting_scope -- execution: P3149R11 simple_counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope.html"/>
      <id>1aa60a210f14f0a773e0d9320adb553f1f791320:reference/execution/execution/simple_counting_scope.md</id>
      <updated>2025-09-19T10:14:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope.md b/reference/execution/execution/simple_counting_scope.md
index 6ca315a01..5afaa2c60 100644
--- a/reference/execution/execution/simple_counting_scope.md
+++ b/reference/execution/execution/simple_counting_scope.md
@@ -146,6 +146,7 @@ namespace std::execution {
 * connect[link connect.md]
 * start[link start.md]
 * data-type[link data-type.md]
+* start-join-sender[link simple_counting_scope/start-join-sender.md]
 * nothrow-callable[link /reference/functional/nothrow-callable.md]
 * is_nothrow_constructible_v[link /reference/type_traits/is_nothrow_constructible.md]
 * std::move[link /reference/utility/move.md]
@@ -155,25 +156,25 @@ namespace std::execution {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`(constructor)`](simple_counting_scope/op_constructor.md.nolink) | コンストラクタ | C++26 |
-| [`(destructor)`](simple_counting_scope/op_destructor.md.nolink) | デストラクタ | C++26 |
-| [`get_token`](simple_counting_scope/get_token.md.nolink) | 非同期スコープトークンを取得 | C++26 |
-| [`close`](simple_counting_scope/close.md.nolink) | 非同期スコープを閉じる | C++26 |
-| [`join`](simple_counting_scope/join.md.nolink) | 非同期スコープを合流する[Sender](sender.md)取得 | C++26 |
+| [`(constructor)`](simple_counting_scope/op_constructor.md) | コンストラクタ | C++26 |
+| [`(destructor)`](simple_counting_scope/op_destructor.md) | デストラクタ | C++26 |
+| [`get_token`](simple_counting_scope/get_token.md) | 非同期スコープトークンを取得 | C++26 |
+| [`close`](simple_counting_scope/close.md) | 非同期スコープを閉じる | C++26 |
+| [`join`](simple_counting_scope/join.md) | 非同期スコープを合流する[Sender](sender.md)取得 | C++26 |
 
 ### 説明専用メンバ関数
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`try-associate`](simple_counting_scope/try-associate.md.nolink) | 関連付けを試行 | C++26 |
-| [`disassociate`](simple_counting_scope/disassociate.md.nolink) | 関連付けを解除| C++26 |
-| [`start-join-sender`](simple_counting_scope/start-join-sender.md.nolink) | 合流[Sender](sender.md)を開始 | C++26 |
+| [`try-associate`](simple_counting_scope/try-associate.md) | 関連付けを試行 | C++26 |
+| [`disassociate`](simple_counting_scope/disassociate.md) | 関連付けを解除 | C++26 |
+| [`start-join-sender`](simple_counting_scope/start-join-sender.md) | 合流[Sender](sender.md)を開始 | C++26 |
 
 ## メンバ型
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`token`](simple_counting_scope/token.md.nolink) | 非同期スコープトークン型 | C++26 |
+| [`token`](simple_counting_scope/token.md) | 非同期スコープトークン型 | C++26 |
 
 ## 静的メンバ変数
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>close -- execution: P3149R11 simple_counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/close.html"/>
      <id>1aa60a210f14f0a773e0d9320adb553f1f791320:reference/execution/execution/simple_counting_scope/close.md</id>
      <updated>2025-09-19T10:14:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/close.md b/reference/execution/execution/simple_counting_scope/close.md
new file mode 100644
index 000000000..e3635dacc
--- /dev/null
+++ b/reference/execution/execution/simple_counting_scope/close.md
@@ -0,0 +1,45 @@
+# close
+* execution[meta header]
+* std::execution[meta namespace]
+* simple_counting_scope[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+void close() noexcept;
+```
+
+## 概要
+非同期スコープを閉じる。
+
+
+## 効果
+説明用のメンバ変数`state`に応じて、
+
+- `unused`のとき、`state`を`unused-and-closed`に変更する。
+- `open`のとき、`state`を`closed`に変更する。
+- `open-and-joining`のとき、`state`を`closed-and-joining`に変更する。
+- それ以外のとき、何もしない。
+
+
+## 事後条件
+`*this`に対する後続の[`try-associate`](try-associate.md)は`false`を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>disassociate -- execution: P3149R11 simple_counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/disassociate.html"/>
      <id>1aa60a210f14f0a773e0d9320adb553f1f791320:reference/execution/execution/simple_counting_scope/disassociate.md</id>
      <updated>2025-09-19T10:14:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/disassociate.md b/reference/execution/execution/simple_counting_scope/disassociate.md
new file mode 100644
index 000000000..8d8f73683
--- /dev/null
+++ b/reference/execution/execution/simple_counting_scope/disassociate.md
@@ -0,0 +1,42 @@
+# disassociate
+* execution[meta header]
+* std::execution[meta namespace]
+* simple_counting_scope[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+void disassociate() noexcept; // exposition only
+```
+
+## 概要
+非同期スコープとの関連付けを解除する、説明専用のメンバ関数。
+非同期トークン型[`token`]の[`disassociate`](token/disassociate.md)メンバ動作を定義する。
+
+
+## 事前条件
+説明用のメンバ変数`count`は`0`より大きい。
+
+
+## 効果
+`count`をデクリメントする。
+デクリメント後の`count == 0`、かつ説明用のメンバ変数`state`が`open-and-joining`または`closed-and-joining`のとき、`state`を`joined`に変更し、`*this`に登録された全てのオブジェクトで`complete()`を呼び出す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_token -- execution: P3149R11 simple_counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/get_token.html"/>
      <id>1aa60a210f14f0a773e0d9320adb553f1f791320:reference/execution/execution/simple_counting_scope/get_token.md</id>
      <updated>2025-09-19T10:14:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/get_token.md b/reference/execution/execution/simple_counting_scope/get_token.md
new file mode 100644
index 000000000..d3eaf0ad8
--- /dev/null
+++ b/reference/execution/execution/simple_counting_scope/get_token.md
@@ -0,0 +1,37 @@
+# get_token
+* execution[meta header]
+* std::execution[meta namespace]
+* simple_counting_scope[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+token get_token() noexcept;
+```
+* token[link token.md]
+
+## 概要
+非同期スコープの[非同期スコープトークン](token.md)を取得する。
+
+
+## 戻り値
+[`simple_counting_scope::token`](token.md)型で`t.scope == this`となるオブジェクト`t`を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>join -- execution: P3149R11 simple_counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/join.html"/>
      <id>1aa60a210f14f0a773e0d9320adb553f1f791320:reference/execution/execution/simple_counting_scope/join.md</id>
      <updated>2025-09-19T10:14:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/join.md b/reference/execution/execution/simple_counting_scope/join.md
new file mode 100644
index 000000000..2ad069b09
--- /dev/null
+++ b/reference/execution/execution/simple_counting_scope/join.md
@@ -0,0 +1,37 @@
+# join
+* execution[meta header]
+* std::execution[meta namespace]
+* simple_counting_scope[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+sender auto join() noexcept;
+```
+* sender[link ../sender.md]
+
+## 概要
+非同期スコープを合流する[Sender](../sender.md)を取得する。
+
+
+## 戻り値
+[`make-sender`](../make-sender.md)`(`[`scope-join-t`](../simple_counting_scope.md)`(), this)`
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- execution: P3149R11 simple_counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/op_constructor.html"/>
      <id>1aa60a210f14f0a773e0d9320adb553f1f791320:reference/execution/execution/simple_counting_scope/op_constructor.md</id>
      <updated>2025-09-19T10:14:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/op_constructor.md b/reference/execution/execution/simple_counting_scope/op_constructor.md
new file mode 100644
index 000000000..c23cdc50c
--- /dev/null
+++ b/reference/execution/execution/simple_counting_scope/op_constructor.md
@@ -0,0 +1,38 @@
+# コンストラクタ
+* execution[meta header]
+* std::execution[meta namespace]
+* simple_counting_scope[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+simple_counting_scope() noexcept;  // (1)
+simple_counting_scope(simple_counting_scope&amp;amp;&amp;amp;) = delete;  // (2)
+```
+
+## 概要
+- (1): デフォルトコンストラクタ
+- (2): ムーブコンストラクタ。ムーブ不可
+
+
+## 事後条件
+(1) 説明用のメンバ変数`count`は`0`、`state`は`unused`となる。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- execution: P3149R11 simple_counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/op_destructor.html"/>
      <id>1aa60a210f14f0a773e0d9320adb553f1f791320:reference/execution/execution/simple_counting_scope/op_destructor.md</id>
      <updated>2025-09-19T10:14:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/op_destructor.md b/reference/execution/execution/simple_counting_scope/op_destructor.md
new file mode 100644
index 000000000..1785f4d52
--- /dev/null
+++ b/reference/execution/execution/simple_counting_scope/op_destructor.md
@@ -0,0 +1,33 @@
+# デストラクタ
+* execution[meta header]
+* std::execution[meta namespace]
+* simple_counting_scope[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+~simple_counting_scope();
+```
+
+## 概要
+デストラクタ
+
+
+## 効果
+説明用のメンバ変数`state`が`joined`, `unused`, `unused-and-closed`のいずれでもなければ、[`terminate`](/reference/exception/terminate.md)を呼び出す。
+そうでなければ、何もしない。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>start-join-sender -- execution: P3149R11 simple_counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/start-join-sender.html"/>
      <id>1aa60a210f14f0a773e0d9320adb553f1f791320:reference/execution/execution/simple_counting_scope/start-join-sender.md</id>
      <updated>2025-09-19T10:14:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/start-join-sender.md b/reference/execution/execution/simple_counting_scope/start-join-sender.md
new file mode 100644
index 000000000..1b5b265b3
--- /dev/null
+++ b/reference/execution/execution/simple_counting_scope/start-join-sender.md
@@ -0,0 +1,41 @@
+# start-join-sender
+* execution[meta header]
+* std::execution[meta namespace]
+* simple_counting_scope[meta class]
+* function template[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class State&amp;gt;
+bool start-join-sender(State&amp;amp; st) noexcept; // exposition only
+```
+
+## 概要
+合流[Sender](../sender.md)を開始する、説明専用のメンバ関数。
+
+
+## 効果
+説明用のメンバ変数`state`に応じて、
+
+- `unused`, `unused-and-closed`, `joined`のとき、`state`を`joined`に変更して`true`を返す。
+- `open`, `open-and-joining`のとき、`state`を`open-and-joining`に変更し、`*this`で`st`を登録して`false`を返す。
+- `closed`, `closed-and-joingin`のとき、`state`を`closed-and-joining`に変更し、`*this`で`st`を登録して`false`を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>token -- execution: P3149R11 simple_counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/token.html"/>
      <id>1aa60a210f14f0a773e0d9320adb553f1f791320:reference/execution/execution/simple_counting_scope/token.md</id>
      <updated>2025-09-19T10:14:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/token.md b/reference/execution/execution/simple_counting_scope/token.md
new file mode 100644
index 000000000..a32ff7d16
--- /dev/null
+++ b/reference/execution/execution/simple_counting_scope/token.md
@@ -0,0 +1,47 @@
+# token
+* execution[meta header]
+* std::execution[meta namespace]
+* simple_counting_scope[meta class]
+* class[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  class simple_counting_scope::token;
+}
+```
+
+## 概要
+`simple_counting_scope::token`は、カウント式非同期スコープの[非同期トークン](../scope_token.md)である。
+
+クラス動作説明用のメンバ変数として下記を保持する。
+
+- `scope` : [`simple_counting_scope`](../simple_counting_scope.md)型の非同期スコープ
+
+
+## メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`wrap`](token/wrap.md) | 非同期スコープと[Sender](../sender.md)関連付けたSenderを返す | C++26 |
+| [`try_associate`](token/try_associate.md) | 非同期スコープとの関連付けを試行 | C++26 |
+| [`disassociate`](token/disassociate.md) | 非同期スコープとの関連付けを解除 | C++26 |
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::scope_token`](../scope_token.md)
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>disassociate -- execution: P3149R11 simple_counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/token/disassociate.html"/>
      <id>1aa60a210f14f0a773e0d9320adb553f1f791320:reference/execution/execution/simple_counting_scope/token/disassociate.md</id>
      <updated>2025-09-19T10:14:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/token/disassociate.md b/reference/execution/execution/simple_counting_scope/token/disassociate.md
new file mode 100644
index 000000000..1c9e3414a
--- /dev/null
+++ b/reference/execution/execution/simple_counting_scope/token/disassociate.md
@@ -0,0 +1,47 @@
+# disassociate
+* execution[meta header]
+* function[meta id-type]
+* std::execution[meta namespace]
+* simple_counting_scope::token[meta class]
+* cpp26[meta cpp]
+
+```cpp
+void disassociate() const noexcept;
+```
+
+## 概要
+非同期スコープとの関連付けを解除する。
+
+
+## 効果
+下記と等価。
+
+```cpp
+scope-&amp;gt;disassociate()
+```
+* disassociate[link ../disassociate.md]
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::associate`](../../associate.md.nolink)
+- [`execution::spawn_future`](../../spawn_future.md.nolink)
+- [`execution::spawn`](../../spawn.md.nolink)
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_associate -- execution: P3149R11 simple_counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/token/try_associate.html"/>
      <id>1aa60a210f14f0a773e0d9320adb553f1f791320:reference/execution/execution/simple_counting_scope/token/try_associate.md</id>
      <updated>2025-09-19T10:14:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/token/try_associate.md b/reference/execution/execution/simple_counting_scope/token/try_associate.md
new file mode 100644
index 000000000..3784a3070
--- /dev/null
+++ b/reference/execution/execution/simple_counting_scope/token/try_associate.md
@@ -0,0 +1,47 @@
+# try_associate
+* execution[meta header]
+* function[meta id-type]
+* std::execution[meta namespace]
+* simple_counting_scope::token[meta class]
+* cpp26[meta cpp]
+
+```cpp
+bool try_associate() const noexcept;
+```
+
+## 概要
+非同期スコープとの関連付けを試行する。
+
+
+## 効果
+下記と等価。
+
+```cpp
+return scope-&amp;gt;try-associate();
+```
+* try-associate[link ../try-associate.md]
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::associate`](../../associate.md.nolink)
+- [`execution::spawn_future`](../../spawn_future.md.nolink)
+- [`execution::spawn`](../../spawn.md.nolink)
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wrap -- execution: P3149R11 simple_counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/token/wrap.html"/>
      <id>1aa60a210f14f0a773e0d9320adb553f1f791320:reference/execution/execution/simple_counting_scope/token/wrap.md</id>
      <updated>2025-09-19T10:14:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/token/wrap.md b/reference/execution/execution/simple_counting_scope/token/wrap.md
new file mode 100644
index 000000000..a873ba32c
--- /dev/null
+++ b/reference/execution/execution/simple_counting_scope/token/wrap.md
@@ -0,0 +1,43 @@
+# wrap
+* execution[meta header]
+* function template[meta id-type]
+* std::execution[meta namespace]
+* simple_counting_scope::token[meta class]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;sender Sender&amp;gt;
+Sender&amp;amp;&amp;amp; wrap(Sender&amp;amp;&amp;amp; snd) const noexcept;
+```
+
+## 概要
+入力[Sender](../../sender.md)を非同期スコープに関連付けたSenderを返す。
+
+
+## 戻り値
+[`std::forward`](/reference/utility/forward.md)`&amp;lt;Sender&amp;gt;(snd)`
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::associate`](../../associate.md.nolink)
+- [`execution::spawn_future`](../../spawn_future.md.nolink)
+- [`execution::spawn`](../../spawn.md.nolink)
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try-associate -- execution: P3149R11 simple_counting_scope(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/try-associate.html"/>
      <id>1aa60a210f14f0a773e0d9320adb553f1f791320:reference/execution/execution/simple_counting_scope/try-associate.md</id>
      <updated>2025-09-19T10:14:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/try-associate.md b/reference/execution/execution/simple_counting_scope/try-associate.md
new file mode 100644
index 000000000..0166940cf
--- /dev/null
+++ b/reference/execution/execution/simple_counting_scope/try-associate.md
@@ -0,0 +1,46 @@
+# try-associate
+* execution[meta header]
+* std::execution[meta namespace]
+* simple_counting_scope[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+bool try-associate() noexcept; // exposition only
+```
+
+## 概要
+非同期スコープとの関連付けを試行する、説明専用のメンバ関数。
+非同期トークン型[`token`]の[`try_associate`](token/try_associate.md)メンバ動作を定義する。
+
+
+## 効果
+説明用のメンバ変数`count`が`max_associations`と等しいとき、何もしない。
+そうでなければ、説明用のメンバ変数`state`に応じて、
+
+- `unused`のとき、`count`をインクリメントし、`state`を`open`に変更する。
+- `open`または`open-and-joining`のとき、`count`をインクリメントする。
+- それ以外のとき、何もしない。
+
+
+## 戻り値
+`count`がインクリメントされたとき、`true`を返す。それ以外のときは、`false`を返す。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
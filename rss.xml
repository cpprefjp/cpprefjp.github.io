<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-04-30T05:34:21.461275</updated>
  <id>f59b48a6-b902-46ea-9d69-633795132a59</id>

  
    <entry>
      <title>completion-domain -- execution: run_loop全メンバ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/completion-domain.html"/>
      <id>88bcec60be484f0fe088f6211913885253221050:reference/execution/execution/completion-domain.md</id>
      <updated>2025-04-30T14:29:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/completion-domain.md b/reference/execution/execution/completion-domain.md
index 70eb1a6ac..3d4aade36 100644
--- a/reference/execution/execution/completion-domain.md
+++ b/reference/execution/execution/completion-domain.md
@@ -11,14 +11,14 @@ constexpr auto completion-domain(const Sndr&amp;amp; sndr) noexcept;
 * default_domain[link default_domain.md]
 
 ## 概要
-[Sender型](sender.md)`sndr`の[完了Scheduler](get_completion_scheduler.md)から[実行ドメイン](default_domain.md)を取得する説明専用の関数テンプレート。
+[Sender](sender.md)`sndr`の[完了Scheduler](get_completion_scheduler.md)から[実行ドメイン](default_domain.md)を取得する説明専用の関数テンプレート。
 
 
 ## 効果
 説明用の型`COMPL-DOMAIN(T)`を式[`get_domain`](get_domain.md)`(`[`get_completion_scheduler`](get_completion_scheduler.md)`&amp;lt;T&amp;gt;(`[`get_env`](get_env.md)`(sndr)))`の型とする。
 
 - 型`COMPL-DOMAIN(`[`set_value_t`](set_value.md)`)`、`COMPL-DOMAIN(`[`set_error_t`](set_error.md)`)`、`COMPL-DOMAIN(`[`set_stopped_t`](set_stopped.md)`)`の全てが不適格の場合、`completion-domain&amp;lt;Default&amp;gt;`は`Default`型のデフォルト構築されたprvalueとなる。
-- そうではなく、上記のうち不適格となる型を除いた型が[共通型](/reference/type_traits/common_type.md)を共有するならば、`completion-domain&amp;lt;Default&amp;gt;`はその共有型のデフォルト構築されたprvalueとなる。
+- そうではなく、上記のうち不適格となる型を除いた型が[共通型](/reference/type_traits/common_type.md)を共有するならば、`completion-domain&amp;lt;Default&amp;gt;`はその共通型のデフォルト構築されたprvalueとなる。
 - そうでなければ、`completion-domain&amp;lt;Default&amp;gt;`は不適格となる。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>run_loop -- execution: run_loop全メンバ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop.html"/>
      <id>88bcec60be484f0fe088f6211913885253221050:reference/execution/execution/run_loop.md</id>
      <updated>2025-04-30T14:29:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop.md b/reference/execution/execution/run_loop.md
index 4ed815e62..1d469bf4d 100644
--- a/reference/execution/execution/run_loop.md
+++ b/reference/execution/execution/run_loop.md
@@ -14,12 +14,12 @@ namespace std::execition {
 `run_loop`は、実行制御ライブラリの作業を[スケジュール](schedule.md)可能な実行リソース(execution resource)である。
 
 内部的にスレッドセーフなFIFO (first-in first-out) 作業キューを保持する。
-[`run`メンバ関数](run_loop/run.md.nolink)はキューから作業を取り出し、同関数を呼び出したスレッド上のループで実行する。
+[`run`メンバ関数](run_loop/run.md)はキューから作業を取り出し、同関数を呼び出したスレッド上のループで実行する。
 
 `run_loop`インスタンスの動作説明のため、下記の説明用メンバ変数を持つ。
 
-- `count` : FIFOキューが保持する作業の個数
-- `state` : 開始(starting)／実行中(running)／完了中(finishing)／完了済み(finished) いずれかのインスタンス状態
+- `count` : キュー上に保持している作業の個数
+- `state` : [開始(starting)](run_loop/op_constructor.md)／[実行中(running)](run_loop/run.md)／[終了中(finishing)](run_loop/finish.md)／[終了済み(finished)](run_loop/run.md) いずれかの状態
 
 
 ## メンバ関数
@@ -29,20 +29,22 @@ namespace std::execition {
 | [`(constructor)`](run_loop/op_constructor.md) | コンストラクタ | C++26 |
 | [`(destructor)`](run_loop/op_destructor.md) | デストラクタ | C++26 |
 | [`get_scheduler`](run_loop/get_scheduler.md) | Scheduler取得 | C++26 |
-| [`run`](run_loop/run.md.nolink) | ループ実行を開始 | C++26 |
-| [`finish`](run_loop/finish.md.nolink) | ループ実行を終了 | C++26 |
+| [`run`](run_loop/run.md) | キュー上の作業を逐次実行 | C++26 |
+| [`finish`](run_loop/finish.md) | 状態を終了中に変更 | C++26 |
 
 ## 説明専用のメンバ型
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|-------|
-| [`run-loop-scheduler`](run_loop/run-loop-scheduler.md) | 説明専用クラス | C++26 |
-| [`run-loop-sender`](run_loop/run-loop-sender.md) | 説明専用クラス | C++26 |
-| [`run-loop-opstate`](run_loop/run-loop-opstate.md.nolink) | 説明専用クラス | C++26 |
+| [`run-loop-scheduler`](run_loop/run-loop-scheduler.md) | 動作説明用の[Scheduler型](scheduler.md) | C++26 |
+| [`run-loop-sender`](run_loop/run-loop-sender.md) | 動作説明用の[Sender型](sender.md) | C++26 |
+| [`run-loop-opstate-base`](run_loop/run-loop-opstate.md) | 動作説明用の基底クラス | C++26 |
+| [`run-loop-opstate`](run_loop/run-loop-opstate.md) | 動作説明用のクラステンプレート | C++26 |
 
 
 ## 例
 ```cpp example
+#include &amp;lt;print&amp;gt;
 #include &amp;lt;execution&amp;gt;
 namespace ex = std::execution;
 
@@ -50,33 +52,36 @@ struct MyReceiver {
   using receiver_concept = ex::receiver_t;
 
   void set_value() noexcept
-    { std::println(&amp;#34;value&amp;#34;); }
+    { std::println(&amp;#34;success&amp;#34;); }
   void set_error(std::exception_ptr) noexcept
-    { std::println(&amp;#34;error&amp;#34;); }
+    { std::println(&amp;#34;failure&amp;#34;); }
   void set_stopped() noexcept
-    { std::println(&amp;#34;stopped&amp;#34;); }
+    { std::println(&amp;#34;cancellation&amp;#34;); }
 };
 
 
 int main()
 {
-  // run_loopのスケジュールSenderを取得
   ex::run_loop loop;
-  ex::scheduler auto sch = loop.get_scheduler();
-  // state:開始(starting)
+  // count=0, state=開始(starting)
 
+  // run_loopのスケジュールSenderとReceiverを接続
+  ex::scheduler auto sch = loop.get_scheduler();
   ex::sender auto sndr = ex::schedule(sch);
   ex::receiver auto rcvr = MyReceiver{};
-  ex::operation_state auto op = ex::connect(sndr, rcvr);
-  // キューに作業を1つ追加
+  auto op = ex::connect(sndr, rcvr);
+
+  // run_loopキューに作業を1つ追加
   ex::start(op);
+  // count=1, state=開始(starting)
 
-  // stateを完了中(finished)へ遷移
+  // run_loop状態を終了中(finished)へ変更
   loop.finish();
+  // count=1, state=終了中(finished)
 
-  // キュー上の作業を全て処理
+  // run_loopキュー上の作業を逐次実行
   loop.run();
-  // state:完了済み(finished)
+  // count=0, state=終了済み(finished)
 }
 ```
 * ex::run_loop[color ff0000]
@@ -85,16 +90,15 @@ int main()
 * ex::schedule[link schedule.md]
 * ex::receiver[link receiver.md]
 * ex::receiver_t[link receiver.md]
-* ex::operation_state[link operation_state.md]
 * ex::connect[link connect.md]
 * ex::start[link start.md]
 * get_scheduler()[link run_loop/get_scheduler.md]
-* finish()[link run_loop/finish.md.nolink]
-* run()[link run_loop/run.md.nolink]
+* finish()[link run_loop/finish.md]
+* run()[link run_loop/run.md]
 
 ### 出力
 ```
-value
+success
 ```
 
 
@@ -110,7 +114,7 @@ value
 
 
 ## 関連項目
-- [`execution::schedule`](schedule.md)
+- [`execution::scheduler`](scheduler.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>finish -- execution: run_loop全メンバ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop/finish.html"/>
      <id>88bcec60be484f0fe088f6211913885253221050:reference/execution/execution/run_loop/finish.md</id>
      <updated>2025-04-30T14:29:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop/finish.md b/reference/execution/execution/run_loop/finish.md
new file mode 100644
index 000000000..45565054a
--- /dev/null
+++ b/reference/execution/execution/run_loop/finish.md
@@ -0,0 +1,65 @@
+# finish
+* execution[meta header]
+* std::execution[meta namespace]
+* run_loop[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+void finish();
+```
+
+## 概要
+`run_loop`の状態を終了中(finishing)へ変更する。
+
+
+## 事前条件
+説明専用メンバ`state`は[開始(starting)](op_constructor.md)もしくは[実行中(running)](run.md)であること。
+
+
+## 効果
+説明専用メンバ`state`を終了中(finishing)に変更する。
+
+
+## 同期操作
+メンバ関数`finish`および説明専用メンバ関数[`pop-front`, `push-back`](run.md)は不可分(atomically)に実行される。
+
+`finish`は、`nullptr`を返す[`pop-front`操作](run.md)に対して同期する。
+
+
+## 例
+```cpp example
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  ex::run_loop loop;
+  loop.finish();
+}
+```
+* finish()[color ff0000]
+* ex::run_loop[link ../run_loop.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++26
+
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`run`](run.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- execution: run_loop全メンバ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop/op_destructor.html"/>
      <id>88bcec60be484f0fe088f6211913885253221050:reference/execution/execution/run_loop/op_destructor.md</id>
      <updated>2025-04-30T14:29:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop/op_destructor.md b/reference/execution/execution/run_loop/op_destructor.md
index 85c59fbe3..4c948e1ef 100644
--- a/reference/execution/execution/run_loop/op_destructor.md
+++ b/reference/execution/execution/run_loop/op_destructor.md
@@ -10,12 +10,16 @@
 ```
 
 ## 概要
-`run_loopオブジェクトを破棄する。
+`run_loop`オブジェクトを破棄する。
 
 
 ## 効果
-`count`が非`0`かつ`state`が実行中(running)のとき、[`terminate`](/reference/exception/terminate.md)を呼び出す。
-それ以外のときは、効果を持たない。
+`count`が非`0`かつ`state`が[実行中(running)](run.md)のとき、[`terminate`](/reference/exception/terminate.md)を呼び出してプログラムを異常終了させる。
+それ以外のとき、効果を持たない。
+
+
+## 同期操作
+[`run`](run.md)とデストラクタ以外のメンバ関数同時呼び出しは、データ競合を引き起こさない。
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>run-loop-opstate -- execution: run_loop全メンバ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop/run-loop-opstate.html"/>
      <id>88bcec60be484f0fe088f6211913885253221050:reference/execution/execution/run_loop/run-loop-opstate.md</id>
      <updated>2025-04-30T14:29:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop/run-loop-opstate.md b/reference/execution/execution/run_loop/run-loop-opstate.md
new file mode 100644
index 000000000..48d7ebd1c
--- /dev/null
+++ b/reference/execution/execution/run_loop/run-loop-opstate.md
@@ -0,0 +1,74 @@
+# run-loop-opstate
+* execution[meta header]
+* std::execution[meta namespace]
+* run_loop[meta class]
+* class template[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class Rcvr&amp;gt;
+struct run-loop-opstate;
+```
+
+## 概要
+`run-loop-opstate`は、[`run_loop`](../run_loop.md)動作説明で利用される説明専用のクラスである。
+
+
+## クラス仕様
+説明専用の基底クラス`run-loop-opstate-base`を下記の通り定義する。
+`run-loop-opstate&amp;lt;Rcvr&amp;gt;`は、`run-loop-opstate-base`から曖昧さなくprivate継承したクラスである。
+
+```cpp
+struct run-loop-opstate-base {  // exposition only
+  virtual void execute() = 0;   // exposition only
+  run_loop* loop;               // exposition only
+  run-loop-opstate-base* next;  // exposition only
+};
+```
+* run_loop[link ../run_loop.md]
+
+説明用の`o`を`run-loop-opstate&amp;lt;Rcvr&amp;gt;`型の非const左辺値、`REC(o)`を`o`を返す[接続(connect)](../connect.md)呼び出しへ渡した式`rcvr`で初期化された`Rcvr`型の非const左辺値参照とする。
+
+- `REC(o)`が参照するオブジェクトは、`o`が参照するオブジェクトの生存期間(lifetime)で有効である。
+- 型`run-loop-opstate&amp;lt;Rcvr&amp;gt;`は`run-loop-opstate-base::execute()`をオーバーライドし、式`o.execute()`は下記と等価 :
+
+    ```cpp
+    if (get_stop_token(REC(o)).stop_requested()) {
+      set_stopped(std::move(REC(o)));
+    } else {
+      set_value(std::move(REC(o)));
+    }
+    ```
+    * get_stop_token[link ../../get_stop_token.md]
+    * set_stopped[link ../set_stopped.md]
+    * set_value[link ../set_value.md]
+    * std::move[link /reference/utility/move.md]
+
+- 式`start(o)`は下記と等価 :
+
+    ```cpp
+    try {
+      o.loop-&amp;gt;push-back(addressof(o));
+    } catch(...) {
+      set_error(std::move(REC(o)), current_exception());
+    }
+    ```
+    * push-back[link run.md]
+    * set_error[link ../set_value.md]
+    * addressof[link /reference/memory/addressof.md]
+    * std::move[link /reference/utility/move.md]
+    * current_exception()[link /reference/exception/current_exception.md]
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 関連項目
+- [`run`](run.md)
+- [`execution::start`](../start.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>run-loop-scheduler -- execution: run_loop全メンバ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop/run-loop-scheduler.html"/>
      <id>88bcec60be484f0fe088f6211913885253221050:reference/execution/execution/run_loop/run-loop-scheduler.md</id>
      <updated>2025-04-30T14:29:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop/run-loop-scheduler.md b/reference/execution/execution/run_loop/run-loop-scheduler.md
index dce6681d5..a1b154a04 100644
--- a/reference/execution/execution/run_loop/run-loop-scheduler.md
+++ b/reference/execution/execution/run_loop/run-loop-scheduler.md
@@ -12,9 +12,11 @@ class run-loop-scheduler;  // exposition only
 ## 概要
 `run-loop-scheduler`は、[`get_scheduler`メンバ関数](get_scheduler.md)の戻り値型として利用される説明専用のクラスである。
 
+
+## クラス仕様
 - `run-loop-scheduler`型は[`scheduler`](../scheduler.md)のモデルとなる未規定の型。
 - `run-loop-scheduler`インスタンスは、同インスタンスを取得した[`run_loop`](../run_loop.md)インスタンスの生存期間(lifetime)終了まで有効。
-- 2個の`run-loop-scheduler`インスタンスは、[`run_loop`](../run_loop.md)インスタンスから取得された場合に限って等しい。
+- 2個の`run-loop-scheduler`インスタンスは、同一[`run_loop`](../run_loop.md)インスタンスから取得された場合に限って等しい。
 - 説明用の式`sch`の型が`run-loop-scheduler`であるとき、式[`schedule`](../schedule.md)`(sch)`は型[`run-loop-sender`](run-loop-sender.md)となり、式`sch`が潜在的に例外送出しない(not potentially-throwing)ならばそれに従う。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>run-loop-sender -- execution: run_loop全メンバ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop/run-loop-sender.html"/>
      <id>88bcec60be484f0fe088f6211913885253221050:reference/execution/execution/run_loop/run-loop-sender.md</id>
      <updated>2025-04-30T14:29:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop/run-loop-sender.md b/reference/execution/execution/run_loop/run-loop-sender.md
index 1ee6fa6ad..24f642fed 100644
--- a/reference/execution/execution/run_loop/run-loop-sender.md
+++ b/reference/execution/execution/run_loop/run-loop-sender.md
@@ -12,11 +12,12 @@ class run-loop-sender;  // exposition only
 ## 概要
 `run-loop-sender`は、[`get_scheduler`メンバ関数](get_scheduler.md)が返す[`run-loop-scheduler`](run-loop-scheduler.md)動作仕様の説明で利用される説明専用のクラスである。
 
+## クラス仕様
 - `run-loop-sender`型は[`sender`](../sender.md)のモデルである。
 - 任意の型`Env`に対して、[`completion_signatures_of_t`](../completion_signatures_of_t.md)`&amp;lt;run-loop-sender, Env&amp;gt;`は[`completion_signatures`](../completion_signatures.md)`&amp;lt;`[`set_value_t`](../set_value.md)`(),` [`set_error_t`](../set_error.md)`(`[`exception_ptr`](/reference/exception/exception_ptr.md)`),` [`set_stopped_t`](../set_stopped.md)`()&amp;gt;`
 - `run-loop-sender`インスタンスは、関連付けられた[`run_loop`](../run_loop.md)インスタンスの生存期間(lifetime)終了まで有効。
 - 説明用の式`sndr`の型を`run-loop-sender`、`CS`が上記[`completion_signatures`](../completion_signatures.md)の特殊化であるとき[`receiver_of`](../receiver_of.md)`&amp;lt;decltype((rcvr)), CS&amp;gt;`が`true`となる式`rcvr`としたとき、
-    - 式[`connect`](../connect.md)`(sndr, rcvr)`の型は[`run-loop-opstate`](run-loop-opstate.md.nolink)`&amp;lt;`[`decay_t`](/reference/type_traits/decay.md)`&amp;lt;decltype((rcvr))&amp;gt;&amp;gt;`であり、潜在的な例外送出(potentially-throwing)は式`(void(sndr), auto(rcvr))`に従う。
+    - 式[`connect`](../connect.md)`(sndr, rcvr)`の型は[`run-loop-opstate`](run-loop-opstate.md)`&amp;lt;`[`decay_t`](/reference/type_traits/decay.md)`&amp;lt;decltype((rcvr))&amp;gt;&amp;gt;`であり、潜在的な例外送出(potentially-throwing)は式`(void(sndr), auto(rcvr))`に従う。
     - 完了タグ`C`を[`set_value_t`](../set_value.md)または[`set_stopped_t`](../set_stopped.md)としたとき、式[`get_completion_scheduler`](../get_completion_scheduler.md)`&amp;lt;C&amp;gt;(`[`get_env`](../get_env.md)`(sndr))`の潜在的な例外送出は`sndr`に従う。式の型は[`run-loop-scheduler`](run-loop-scheduler.md)となり、そのインスタンスは同一`sndr`から取得された場合に等しくなる。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>run -- execution: run_loop全メンバ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop/run.html"/>
      <id>88bcec60be484f0fe088f6211913885253221050:reference/execution/execution/run_loop/run.md</id>
      <updated>2025-04-30T14:29:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop/run.md b/reference/execution/execution/run_loop/run.md
new file mode 100644
index 000000000..6519680ca
--- /dev/null
+++ b/reference/execution/execution/run_loop/run.md
@@ -0,0 +1,119 @@
+# run
+* execution[meta header]
+* std::execution[meta namespace]
+* run_loop[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+void run();
+```
+
+## 概要
+`run_loop`のFIFOキュー上にある作業を逐次実行する。
+
+`run_loop`動作説明のため、説明専用のメンバ関数`pop-front`, `push-back`を導入する。
+[`finish`](finish.md)および`pop-front`, `push-back`は不可分(atomically)に実行される。
+
+
+### 説明専用メンバ関数 `pop-front`
+
+```cpp
+run-loop-opstate-base* pop-front();
+```
+* run-loop-opstate-base[link run-loop-opstate.md]
+
+効果 : 下記条件のいずれか一つが`true`になるまでブロックする。
+
+- `count == 0`かつ`state`が[終了中(finishing)](finish.md)のとき、`pop-front`は`state`を終了済み(finished)に設定して`nullptr`を返す。
+- `count &amp;gt; 0`のとき、`count`を`1`減算してFIFOキューから先頭要素を削除し、同要素（ポインタ値）を返す。
+
+
+### 説明専用メンバ関数 `push-back`
+
+```cpp
+void push-back(run-loop-opstate-base* item);
+```
+* run-loop-opstate-base[link run-loop-opstate.md]
+
+効果 : FIFOキューの末尾に`item`を追加して`count`を`1`加算する。
+
+同期操作 : この操作は同`item`を取得する`pop-front`操作に対して同期する。
+
+
+## 事前条件
+説明専用メンバ`state`は[開始(starting)](op_constructor.md)もしくは[終了中(finishing)](finish.md)であること。
+
+
+## 効果
+説明専用メンバ`state`が[開始(starting)](op_constructor.md)の場合、実行中(running)に変更する。
+そうでなければ、`state`を変更しない。
+
+続いて、以下と等価 :
+
+```cpp
+while (auto* op = pop-front()) {
+  op-&amp;gt;execute();
+}
+```
+* execute()[link run-loop-opstate.md]
+
+
+## 同期操作
+`run`と[デストラクタ](op_destructor.md)以外のメンバ関数同時呼び出しは、データ競合を引き起こさない。
+
+
+## 例
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;thread&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  ex::run_loop loop;
+  std::println(&amp;#34;starting&amp;#34;);
+
+  std::jthread th([&amp;amp;]{
+    // 2) 別スレッドからfinishを呼び出し
+    std::println(&amp;#34;finishing&amp;#34;);
+    loop.finish();
+  });
+
+  // 1) メインスレッド上でrunを呼び出すとブロッキングする
+  loop.run();
+  // 3) ブロッキング解除されてメインスレッドを再開
+  std::println(&amp;#34;finished&amp;#34;);
+}
+```
+* run()[color ff0000]
+* ex::run_loop[link ../run_loop.md]
+* finish()[link finish.md]
+* std::jthread[link /reference/thread/jthread.md]
+
+### 出力
+```
+starting
+finishing
+finished
+```
+
+## バージョン
+### 言語
+- C++26
+
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`finish`](finish.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>schedule -- execution: run_loop全メンバ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/schedule.html"/>
      <id>88bcec60be484f0fe088f6211913885253221050:reference/execution/execution/schedule.md</id>
      <updated>2025-04-30T14:29:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/schedule.md b/reference/execution/execution/schedule.md
index f6557e166..f112291e5 100644
--- a/reference/execution/execution/schedule.md
+++ b/reference/execution/execution/schedule.md
@@ -66,8 +66,8 @@ int main()
 * ex::then[link then.md.nolink]
 * ex::run_loop[link run_loop.md]
 * get_scheduler()[link run_loop/get_scheduler.md]
-* run()[link run_loop/run.md.nolink]
-* finish()[link run_loop/finish.md.nolink]
+* run()[link run_loop/run.md]
+* finish()[link run_loop/finish.md]
 * std::move[link /reference/utility/move.md]
 * std::jthread[link /reference/thread/jthread.md]
 * std::this_thread::get_id()[link /reference/thread/this_thread/get_id.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sender_in -- execution: run_loop全メンバ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/sender_in.html"/>
      <id>88bcec60be484f0fe088f6211913885253221050:reference/execution/execution/sender_in.md</id>
      <updated>2025-04-30T14:29:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/sender_in.md b/reference/execution/execution/sender_in.md
index 52a2293d5..bb725c838 100644
--- a/reference/execution/execution/sender_in.md
+++ b/reference/execution/execution/sender_in.md
@@ -31,7 +31,7 @@ namespace std::execution {
 
 ある完了操作の完了シグネチャが[`completion_signatures_of_t`](completion_signatures_of_t.md)`&amp;lt;Sndr, Env&amp;gt;`で取得される[`completion_signatures`](completion_signatures.md)リストに含まれるとき、`Sndr`と`Env`における許容可能完了(permissible completion)となる。
 
-`sndr`と`rcvr`の[接続](connect.md)後に[Operation State](operation_state.md)を開始することで評価されうる完了操作が、全て許容可能完了(permissible completion)である場合、`Sndr`と`Env`は`sender_in&amp;lt;Sndr, Env&amp;gt;`のモデルとなる。
+`sndr`と`rcvr`の[接続(connect)](connect.md)後に[Operation State](operation_state.md)を開始することで評価されうる完了操作が、全て許容可能完了(permissible completion)である場合、`Sndr`と`Env`は`sender_in&amp;lt;Sndr, Env&amp;gt;`のモデルとなる。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>toupper -- reference/cctype/toupper.md: Created sample implementation</title>
      <link href="https://cpprefjp.github.io/reference/cctype/toupper.html"/>
      <id>665471d98e7999f8c2ab6af4ba0060ce9fb17491:reference/cctype/toupper.md</id>
      <updated>2025-04-30T12:56:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cctype/toupper.md b/reference/cctype/toupper.md
index b48446459..ca21a5652 100644
--- a/reference/cctype/toupper.md
+++ b/reference/cctype/toupper.md
@@ -42,3 +42,13 @@ toupper(&amp;#39;1&amp;#39;) = 1
 toupper(&amp;#39;.&amp;#39;) = .
 toupper(&amp;#39;$&amp;#39;) = $
 ```
+
+## 実装例
+```cpp
+int toupper(int ch) {
+  if (islower(ch)) {
+    ch ^= 32;
+  }
+  return ch;
+}
+```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tolower -- reference/cctype/tolower.md: Created sample implementation</title>
      <link href="https://cpprefjp.github.io/reference/cctype/tolower.html"/>
      <id>3b77b17e0ac396592a2bb77e481fc85edabf695d:reference/cctype/tolower.md</id>
      <updated>2025-04-30T12:55:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cctype/tolower.md b/reference/cctype/tolower.md
index 838d96ba0..88da612c6 100644
--- a/reference/cctype/tolower.md
+++ b/reference/cctype/tolower.md
@@ -42,3 +42,14 @@ tolower(&amp;#39;1&amp;#39;) = 1
 tolower(&amp;#39;.&amp;#39;) = .
 tolower(&amp;#39;$&amp;#39;) = $
 ```
+
+## 実装例
+```cpp
+int tolower(int ch) {
+  if (isupper(ch)) {
+    ch ^= 32
+  }
+  return ch;
+}
+```
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>isupper -- reference/cctype/isupper.md: Created sample implementation</title>
      <link href="https://cpprefjp.github.io/reference/cctype/isupper.html"/>
      <id>365685ee93e4305babfc88e3afc54804527e81dd:reference/cctype/isupper.md</id>
      <updated>2025-04-30T12:55:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cctype/isupper.md b/reference/cctype/isupper.md
index 26b29e1f7..340872faf 100644
--- a/reference/cctype/isupper.md
+++ b/reference/cctype/isupper.md
@@ -50,3 +50,11 @@ isupper(&amp;#39; &amp;#39;) = 0
 isupper(&amp;#39;\n&amp;#39;) = 0
 isupper(&amp;#39;0x0f&amp;#39;) = 0
 ```
+
+## 実装例
+```cpp
+int isupper(int ch) {
+  return ch &amp;gt;= &amp;#39;A&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;Z&amp;#39;;
+}
+```
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>isspace -- reference/cctype/isspace.md: Created sample implementation</title>
      <link href="https://cpprefjp.github.io/reference/cctype/isspace.html"/>
      <id>3527568f5c5f8c59b00f4ee03ae050d3ca62ebac:reference/cctype/isspace.md</id>
      <updated>2025-04-30T12:55:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cctype/isspace.md b/reference/cctype/isspace.md
index 087dd8fc2..26a1e8f7f 100644
--- a/reference/cctype/isspace.md
+++ b/reference/cctype/isspace.md
@@ -50,3 +50,12 @@ isspace(&amp;#39; &amp;#39;) = 8192
 isspace(&amp;#39;\n&amp;#39;) = 8192
 isspace(&amp;#39;0x0f&amp;#39;) = 0
 ```
+
+## 実装例
+```cpp
+int isspace(int ch) {
+  return ch == &amp;#39; &amp;#39; || ch == &amp;#39;\t&amp;#39; || ch == &amp;#39;\r&amp;#39; || ch == &amp;#39;\n&amp;#39; || ch == &amp;#39;\v&amp;#39; || ch == &amp;#39;\f&amp;#39;;
+}
+```
+
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-05-23T07:29:16.963749</updated>
  <id>5b097fbd-ed3d-4b71-93b5-2fef25dd320b</id>

  
    <entry>
      <title>projected_value_t -- 不可視文字を削除</title>
      <link href="https://cpprefjp.github.io/reference/iterator/projected_value_t.html"/>
      <id>047c55b383de775f4a241e99d3fcc9faa0720b0f:reference/iterator/projected_value_t.md</id>
      <updated>2025-05-23T16:25:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/projected_value_t.md b/reference/iterator/projected_value_t.md
index 3c9315a02..241752afb 100644
--- a/reference/iterator/projected_value_t.md
+++ b/reference/iterator/projected_value_t.md
@@ -6,13 +6,13 @@
 
 ```cpp
 namespace std {
-  template &amp;lt;indirectly_­readable I,
-            indirectly_­regular_­unary_­invocable&amp;lt;I&amp;gt; Proj&amp;gt;
+  template &amp;lt;indirectly_readable I,
+            indirectly_regular_unary_invocable&amp;lt;I&amp;gt; Proj&amp;gt;
   using projected_value_t = remove_cvref_t&amp;lt;invoke_result_t&amp;lt;Proj&amp;amp;, iter_value_t&amp;lt;I&amp;gt;&amp;amp;&amp;gt;&amp;gt;;
 }
 ```
 * indirectly_readable[link /reference/iterator/indirectly_readable.md]
-* indirectly_­regular_­unary_­invocable[link /reference/iterator/indirectly_­regular_­unary_­invocable.md.nolink]
+* indirectly_regular_unary_invocable[link /reference/iterator/indirectly_regular_unary_invocable.md.nolink]
 
 ## 概要
 イテレータ型`I`が指す値型を取得する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find -- algorithm/find : C++26の波カッコ初期化対応 #1311</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/find.html"/>
      <id>0f3ab3ae9af4e61b5f15be6aed0792f6337ef2b4:reference/algorithm/find.md</id>
      <updated>2025-05-23T16:13:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/find.md b/reference/algorithm/find.md
index 958f3f53a..41aecc838 100644
--- a/reference/algorithm/find.md
+++ b/reference/algorithm/find.md
@@ -5,21 +5,41 @@
 
 ```cpp
 namespace std {
-  template &amp;lt;class InputIterator, class T&amp;gt;
-  InputIterator find(InputIterator first,
-                     InputIterator last,
-                     const T&amp;amp; value);               // (1) C++03
-
-  template &amp;lt;class InputIterator, class T&amp;gt;
-  constexpr InputIterator find(InputIterator first,
-                               InputIterator last,
-                               const T&amp;amp; value);     // (1) C++20
-
-  template&amp;lt;class ExecutionPolicy, class ForwardIterator, class T&amp;gt;
-  ForwardIterator find(ExecutionPolicy&amp;amp;&amp;amp; exec,
-                       ForwardIterator first,
-                       ForwardIterator last,
-                       const T&amp;amp; value);             // (2) C++17
+  template &amp;lt;class InputIterator,
+            class T&amp;gt;
+  InputIterator
+    find(InputIterator first,
+         InputIterator last,
+         const T&amp;amp; value);     // (1) C++03
+  template &amp;lt;class InputIterator,
+            class T&amp;gt;
+  constexpr InputIterator
+    find(InputIterator first,
+         InputIterator last,
+         const T&amp;amp; value);     // (1) C++20
+  template &amp;lt;class InputIterator,
+            class T = typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type&amp;gt;
+  constexpr InputIterator
+    find(InputIterator first,
+         InputIterator last,
+         const T&amp;amp; value);     // (1) C++26
+
+  template&amp;lt;class ExecutionPolicy,
+           class ForwardIterator,
+           class T&amp;gt;
+  ForwardIterator
+    find(ExecutionPolicy&amp;amp;&amp;amp; exec,
+         ForwardIterator first,
+         ForwardIterator last,
+         const T&amp;amp; value);   // (2) C++17
+  template&amp;lt;class ExecutionPolicy,
+           class ForwardIterator,
+           class T = typename iterator_traits&amp;lt;InputIterator&amp;gt;::value_type&amp;gt;
+  ForwardIterator
+    find(ExecutionPolicy&amp;amp;&amp;amp; exec,
+         ForwardIterator first,
+         ForwardIterator last,
+         const T&amp;amp; value);   // (2) C++26
 }
 ```
 
@@ -35,7 +55,16 @@ namespace std {
 最大で `last - first` 回比較を行う
 
 
+## 備考
+- (1), (2) :
+    - C++26 : 引数として波カッコ初期化`{}`を受け付ける
+        ```cpp
+		std::vector&amp;lt;T&amp;gt; v;
+        auto it = std::find(v.begin(), v.begin(), {a, b});
+        ```
+
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;algorithm&amp;gt;
 #include &amp;lt;iostream&amp;gt;
@@ -53,11 +82,46 @@ int main() {
 ```
 * std::find[color ff0000]
 
-### 出力
+#### 出力
 ```
 found: 1
 ```
 
+### 波カッコ初期化を入力として使用する (C++26)
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+struct Point {
+  int x;
+  int y;
+
+  bool operator==(const Point&amp;amp; other) const = default;
+};
+
+int main() {
+  std::vector&amp;lt;Point&amp;gt; v = {
+	{1, 2},
+	{3, 4},
+	{5, 6}
+  };
+
+  auto it = std::find(v.begin(), v.end(), {3, 4});
+  if (it == v.end()) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;not found&amp;#34; &amp;lt;&amp;lt; std::endl;
+  } else {
+    std::cout &amp;lt;&amp;lt; &amp;#34;found: &amp;#34; &amp;lt;&amp;lt; it-&amp;gt;x &amp;lt;&amp;lt; &amp;#34;,&amp;#34; &amp;lt;&amp;lt; it-&amp;gt;y &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::find[color ff0000]
+
+#### 出力
+```
+found: 3,4
+```
+
 
 ## 実装例
 ```cpp
@@ -73,3 +137,5 @@ InputIterator find(InputIterator first, InputIterator last, const T&amp;amp; value) {
 ## 参照
 - [P0202R3 Add Constexpr Modifiers to Functions in `&amp;lt;algorithm&amp;gt;` and `&amp;lt;utility&amp;gt;` Headers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0202r3.html)
 - [P0467R2 Iterator Concerns for Parallel Algorithms](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0467r2.html)
+- [P2248R8 Enabling list-initialization for algorithms](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2248r8.html)
+    - C++26で波カッコ初期化 (リスト初期化) に対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find -- algorithm/find : C++26の波カッコ初期化対応 #1311</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_find.html"/>
      <id>0f3ab3ae9af4e61b5f15be6aed0792f6337ef2b4:reference/algorithm/ranges_find.md</id>
      <updated>2025-05-23T16:13:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_find.md b/reference/algorithm/ranges_find.md
index 9e404321c..bfb96b38a 100644
--- a/reference/algorithm/ranges_find.md
+++ b/reference/algorithm/ranges_find.md
@@ -16,6 +16,16 @@ namespace std::ranges {
          S last,
          const T&amp;amp; value,
          Proj proj = {}); // (1) C++20
+  template &amp;lt;input_iterator I,
+            sentinel_for&amp;lt;I&amp;gt; S,
+            class Proj = identity,
+            class T = projected_value_t&amp;lt;I, Proj&amp;gt;&amp;gt;
+    requires indirect_binary_predicate&amp;lt;ranges::equal_to, projected&amp;lt;I, Proj&amp;gt;, const T*&amp;gt;
+  constexpr I
+    find(I first,
+         S last,
+         const T&amp;amp; value,
+         Proj proj = {}); // (1) C++26
 
   template &amp;lt;input_range R,
             class T,
@@ -25,6 +35,14 @@ namespace std::ranges {
     find(R&amp;amp;&amp;amp; r,
          const T&amp;amp; value,
          Proj proj = {}); // (2) C++20
+  template &amp;lt;input_range R,
+            class Proj = identity,
+            class T = projected_value_t&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;&amp;gt;
+    requires indirect_binary_predicate&amp;lt;ranges::equal_to, projected&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;, const T*&amp;gt;
+  constexpr borrowed_iterator_t&amp;lt;R&amp;gt;
+    find(R&amp;amp;&amp;amp; r,
+         const T&amp;amp; value,
+         Proj proj = {}); // (2) C++26
 }
 ```
 * input_iterator[link /reference/iterator/input_iterator.md]
@@ -51,7 +69,17 @@ namespace std::ranges {
 最大で `last - first` 回比較を行う
 
 
+## 備考
+- (1), (2) :
+    - C++26 : 引数として波カッコ初期化`{}`を受け付ける
+        ```cpp
+		    std::vector&amp;lt;T&amp;gt; v;
+        auto it = std::ranges::find(r, {a, b});
+        ```
+
+
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;algorithm&amp;gt;
 #include &amp;lt;iostream&amp;gt;
@@ -69,11 +97,46 @@ int main() {
 ```
 * std::ranges::find[color ff0000]
 
-### 出力
+#### 出力
 ```
 found: 1
 ```
 
+### 波カッコ初期化を入力として使用する (C++26)
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+struct Point {
+  int x;
+  int y;
+
+  bool operator==(const Point&amp;amp; other) const = default;
+};
+
+int main() {
+  std::vector&amp;lt;Point&amp;gt; v = {
+	{1, 2},
+	{3, 4},
+	{5, 6}
+  };
+
+  auto it = std::ranges::find(v, {3, 4});
+  if (it == v.end()) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;not found&amp;#34; &amp;lt;&amp;lt; std::endl;
+  } else {
+    std::cout &amp;lt;&amp;lt; &amp;#34;found: &amp;#34; &amp;lt;&amp;lt; it-&amp;gt;x &amp;lt;&amp;lt; &amp;#34;,&amp;#34; &amp;lt;&amp;lt; it-&amp;gt;y &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::ranges::find[color ff0000]
+
+#### 出力
+```
+found: 3,4
+```
+
 
 ## 実装例
 ```cpp
@@ -120,3 +183,5 @@ inline constexpr find_impl find;
 
 ## 参照
 - [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
+- [P2248R8 Enabling list-initialization for algorithms](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2248r8.html)
+    - C++26で波カッコ初期化 (リスト初期化) に対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iterator -- algorithm/find : C++26の波カッコ初期化対応 #1311</title>
      <link href="https://cpprefjp.github.io/reference/iterator.html"/>
      <id>0f3ab3ae9af4e61b5f15be6aed0792f6337ef2b4:reference/iterator.md</id>
      <updated>2025-05-23T16:13:32+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;iterator&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;ヘッダでは、イテレータに関する機能群を提供する。
イテレータは日本語では反復子とも呼ばれ、配列やコンテナのような範囲を横断する手段として使用できる。&lt;/p&gt;
&lt;p&gt;C++標準ライブラリのイテレータは、以下のように階層的に定義される。
この階層はC++言語機能の継承と同じように見なせる。たとえば、入力イテレータと前方向イテレータはis a関係が成り立っており、前方向イテレータは入力イテレータと見なすことができる。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;../static/image/reference/iterator/iterators.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;C++20以降の標準ライブラリでは、任意のイテレータに対して可能な操作によって上記5つに隣接イテレータ（&lt;em&gt;contiguous iterator&lt;/em&gt;）を加えた6つのイテレータカテゴリを定義する。それぞれ次のイテレータコンセプトが対応する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;入力イテレータ : &lt;code&gt;&lt;a href=&#34;iterator/input_iterator.html&#34;&gt;input_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;出力イテレータ : &lt;code&gt;&lt;a href=&#34;iterator/output_iterator.html&#34;&gt;output_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;前方向イテレータ : &lt;code&gt;&lt;a href=&#34;iterator/forward_iterator.html&#34;&gt;forward_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;双方向イテレータ : &lt;code&gt;&lt;a href=&#34;iterator/bidirectional_iterator.html&#34;&gt;bidirectional_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ランダムアクセスイテレータ : &lt;code&gt;&lt;a href=&#34;iterator/random_access_iterator.html&#34;&gt;random_access_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;隣接イテレータ : &lt;code&gt;&lt;a href=&#34;iterator/contiguous_iterator.html&#34;&gt;contiguous_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このヘッダでは、以下の標準ヘッダをインクルードする：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;concepts.html&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt; (C++20)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt; (C++20)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;イテレータコンセプト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/indirectly_readable.html&#34;&gt;indirectly_readable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;間接参照によって読み取り可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/indirectly_writable.html&#34;&gt;indirectly_writable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;間接参照によって書き込み可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/weakly_incrementable.html&#34;&gt;weakly_incrementable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前置/後置インクリメント可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/incrementable.html&#34;&gt;incrementable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;weakly_incrementable&lt;/code&gt;かつ&lt;a href=&#34;concepts/regular.html&#34;&gt;正則&lt;/a&gt; (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/input_or_output_iterator.html&#34;&gt;input_or_output_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;基礎的なイテレータコンセプト (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/sentinel_for.html&#34;&gt;sentinel_for&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同じ範囲についてのイテレータと番兵 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/sized_sentinel_for.html&#34;&gt;sized_sentinel_for&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;距離を定義可能なイテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/disable_sized_sentinel_for.html&#34;&gt;disable_sized_sentinel_for&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sentinel_for&amp;lt;S, I&amp;gt;&lt;/code&gt;について、&lt;code&gt;sized_sentinel_for&lt;/code&gt;を不適合にする (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/input_iterator.html&#34;&gt;input_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力イテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/output_iterator.html&#34;&gt;output_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力イテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/forward_iterator.html&#34;&gt;forward_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前方向イテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/bidirectional_iterator.html&#34;&gt;bidirectional_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;双方向イテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/random_access_iterator.html&#34;&gt;random_access_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ランダムアクセスイテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/contiguous_iterator.html&#34;&gt;contiguous_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;隣接イテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;イテレータを介した関数呼び出しに関するコンセプト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/indirectly_unary_invocable.html&#34;&gt;indirectly_unary_invocable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの要素型によって呼び出し可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/indirectly_unary_invocable.html&#34;&gt;indirectly_regular_unary_invocable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正則な&lt;code&gt;indirectly_unary_invocable&lt;/code&gt; (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/indirect_unary_predicate.html&#34;&gt;indirect_unary_predicate&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの要素型についての単項述語 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/indirect_binary_predicate.html&#34;&gt;indirect_binary_predicate&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのイテレータの要素型についての二項述語 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/indirect_equivalence_relation.html&#34;&gt;indirect_equivalence_relation&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのイテレータの要素型についての同値関係 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/indirect_strict_weak_order.html&#34;&gt;indirect_strict_weak_order&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのイテレータの要素型についての狭義の弱順序 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;イテレータによるアルゴリズムに関するコンセプト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/indirectly_movable.html&#34;&gt;indirectly_movable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;片方のイテレータからもう片方のイテレータへ要素をムーブ可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/indirectly_movable_storable.html&#34;&gt;indirectly_movable_storable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;片方のイテレータからもう片方のイテレータへ中間オブジェクトを介して要素をムーブ可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/indirectly_copyable.html&#34;&gt;indirectly_copyable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;片方のイテレータからもう片方のイテレータへ要素をコピー可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/indirectly_copyable_storable.html&#34;&gt;indirectly_copyable_storable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;片方のイテレータからもう片方のイテレータへ中間オブジェクトを介して要素をコピー可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/indirectly_swappable.html&#34;&gt;indirectly_swappable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのイテレータ間で要素を交換可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/indirectly_comparable.html&#34;&gt;indirectly_comparable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのイテレータ間で要素を比較可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/permutable.html&#34;&gt;permutable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータを介して要素を並べ替え可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/mergeable.html&#34;&gt;mergeable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータを介して範囲をマージ可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/sortable.html&#34;&gt;sortable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータを介して範囲をソート可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;イテレータの情報&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/iterator_traits.html&#34;&gt;iterator_traits&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータに関する型情報(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/iterator.html&#34;&gt;iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータを定義するための基底クラス(class template)&lt;/td&gt;
&lt;td&gt;C++17から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/iter_difference_t.html&#34;&gt;iter_difference_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの&lt;code&gt;difference_type&lt;/code&gt;を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/iter_value_t.html&#34;&gt;iter_value_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの&lt;code&gt;value_type&lt;/code&gt;を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/iter_reference_t.html&#34;&gt;iter_reference_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの&lt;code&gt;reference_type&lt;/code&gt;を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/iter_rvalue_reference_t.html&#34;&gt;iter_rvalue_reference_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの指す要素の右辺値参照型を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/iter_common_reference_t.html&#34;&gt;iter_common_reference_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの&lt;code&gt;value_type&lt;/code&gt;と&lt;code&gt;reference_type&lt;/code&gt;の&lt;code&gt;&lt;a href=&#34;type_traits/common_reference.html&#34;&gt;common_reference&lt;/a&gt;&lt;/code&gt;を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/iter_const_reference_t.html&#34;&gt;iter_const_reference_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの参照型（&lt;code&gt;iter_reference_t&lt;/code&gt;）を&lt;code&gt;const&lt;/code&gt;化したものを取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/indirect_result_t.html&#34;&gt;indirect_result_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数呼び出し可能な型&lt;code&gt;F&lt;/code&gt;を複数のイテレータ&lt;code&gt;Is...&lt;/code&gt;によって呼び出した時の戻り値型を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/projected.html&#34;&gt;projected&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータ&lt;code&gt;I&lt;/code&gt;の&lt;code&gt;Proj&lt;/code&gt;による射影操作の結果を表すことのできる&lt;code&gt;&lt;a href=&#34;iterator/indirectly_readable.html&#34;&gt;indirectly_readable&lt;/a&gt;&lt;/code&gt;なクラス (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/projected_value_t.html&#34;&gt;projected_value_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イイテレータ&lt;code&gt;I&lt;/code&gt;の&lt;code&gt;Proj&lt;/code&gt;による射影操作の結果となる値型を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/incrementable_traits.html&#34;&gt;incrementable_traits&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;iter_difference_t&lt;/code&gt;にアダプトするためのカスタマイゼーションポイント (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/indirectly_readable_traits.html&#34;&gt;indirectly_readable_traits&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;iter_value_t&lt;/code&gt;にアダプトするためのカスタマイゼーションポイント (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/iterator_tag.html&#34;&gt;input_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/iterator_tag.html&#34;&gt;output_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/iterator_tag.html&#34;&gt;forward_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前方向イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/iterator_tag.html&#34;&gt;bidirectional_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;双方向イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/iterator_tag.html&#34;&gt;random_access_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ランダムアクセスイテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/iterator_tag.html&#34;&gt;contiguous_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;隣接イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;イテレータの進行と距離&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/advance.html&#34;&gt;advance&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;n&lt;/code&gt;回イテレータを進める(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/distance.html&#34;&gt;distance&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータ間の距離を求める(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/next.html&#34;&gt;next&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;n&lt;/code&gt;回前方に進めたイテレータを返す(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/prev.html&#34;&gt;prev&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;n&lt;/code&gt;回後方に進めたイテレータを返す(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/ranges_advance.html&#34;&gt;ranges::advance&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータを進める(function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/ranges_distance.html&#34;&gt;ranges::distance&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の長さを求める(function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/ranges_next.html&#34;&gt;ranges::next&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前方に進めたイテレータを返す(function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/ranges_prev.html&#34;&gt;ranges::prev&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;後方に進めたイテレータを返す(function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;逆順イテレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/reverse_iterator.html&#34;&gt;reverse_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;逆方向に進むイテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/make_reverse_iterator.html&#34;&gt;make_reverse_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;オブジェクトを作るヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;挿入イテレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/back_insert_iterator.html&#34;&gt;back_insert_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;末尾に要素を挿入する出力イテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/back_inserter.html&#34;&gt;back_inserter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;back_insert_iterator&lt;/code&gt;オブジェクトを作るヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/front_insert_iterator.html&#34;&gt;front_insert_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;先頭に要素を挿入する出力イテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/front_inserter.html&#34;&gt;front_inserter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;front_insert_iterator&lt;/code&gt;オブジェクトを作るヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/insert_iterator.html&#34;&gt;insert_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意の位置に要素を挿入する出力イテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/inserter.html&#34;&gt;inserter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;insert_iterator&lt;/code&gt;オブジェクトを作るヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;要素を移動するイテレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/move_iterator.html&#34;&gt;move_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;間接参照時にムーブするイテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/make_move_iterator.html&#34;&gt;make_move_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;move_iterator&lt;/code&gt;オブジェクトを作るヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/move_sentinel.html&#34;&gt;move_sentinel&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;move_iterator&lt;/code&gt;の終端を表す番兵型(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ストリームイテレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/istream_iterator.html&#34;&gt;istream_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力ストリームイテレータ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/ostream_iterator.html&#34;&gt;ostream_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力ストリームイテレータ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/istreambuf_iterator.html&#34;&gt;istreambuf_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力ストリームバッファイテレータ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/ostreambuf_iterator.html&#34;&gt;ostreambuf_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力ストリームバッファイテレータ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;定数イテレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/basic_const_iterator.html&#34;&gt;basic_const_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの要素を&lt;code&gt;const&lt;/code&gt;化するラッパーイテレータ(class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/const_iterator.html&#34;&gt;const_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素が&lt;code&gt;const&lt;/code&gt;化されたイテレータ型を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/const_sentinel.html&#34;&gt;const_sentinel&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素が&lt;code&gt;const&lt;/code&gt;化された番兵型を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/make_const_iterator.html&#34;&gt;make_const_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const_iterator&lt;/code&gt;オブジェクトを作るヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/make_const_sentinel.html&#34;&gt;make_const_sentinel&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const_sentinel&lt;/code&gt;オブジェクトを作るヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;その他のイテレータアダプタ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/common_iterator.html&#34;&gt;common_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータ型と番兵型が異なる場合に型を共通化するためのラッパーイテレータ(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/counted_iterator.html&#34;&gt;counted_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;予め指定された&lt;code&gt;N&lt;/code&gt;個の要素だけをイテレートするラッパーイテレータ(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;番兵型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/default_sentinel_t.html&#34;&gt;default_sentinel_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意の範囲の終端を表すことのできるデフォルトの番兵型(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/default_sentinel_t.html&#34;&gt;default_sentinel&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意の範囲の終端を表すことのできるデフォルトの番兵オブジェクト(constant variable)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/unreachable_sentinel_t.html&#34;&gt;unreachable_sentinel_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;別の方法で終端が指定される範囲の仮想的な終端を表す番兵型(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/unreachable_sentinel_t.html&#34;&gt;unreachable_sentinel&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;別の方法で終端が指定される範囲の仮想的な終端を表す番兵オブジェクト(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;先頭イテレータと末尾イテレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/begin.html&#34;&gt;begin&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭を指すイテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/end.html&#34;&gt;end&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾の次を指すイテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/cbegin.html&#34;&gt;cbegin&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭を指す読み取り専用イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/cend.html&#34;&gt;cend&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾の次を指す読み取り専用イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/rbegin.html&#34;&gt;rbegin&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾を指す逆イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/rend.html&#34;&gt;rend&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭の前を指す逆イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/crbegin.html&#34;&gt;crbegin&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾を指す読み取り専用逆イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/crend.html&#34;&gt;crend&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭の前を指す読み取り専用逆イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;コンテナアクセス&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/size.html&#34;&gt;size&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンテナの要素数を取得する (function)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/ssize.html&#34;&gt;ssize&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンテナの要素数を、符号付き整数型で取得する (function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/empty.html&#34;&gt;empty&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンテナが空かどうかを判定する (function)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/data.html&#34;&gt;data&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンテナの要素配列へのポインタを取得する (function)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;カスタマイゼーションポイントオブジェクト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/iter_move.html&#34;&gt;ranges::iter_move&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの指す要素をムーブする (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/iter_swap.html&#34;&gt;ranges::iter_swap&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのイテレータの指す要素を&lt;em&gt;swap&lt;/em&gt;する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf&#34; target=&#34;_blank&#34;&gt;P0896R4 The One Ranges Proposal (was Merging the Ranges TS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2051r0.html&#34; target=&#34;_blank&#34;&gt;P2051R0 C++ Standard Library Issues to be moved in Prague&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html&#34; target=&#34;_blank&#34;&gt;P2278R4 &lt;code&gt;cbegin&lt;/code&gt; should always return a constant iterator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>projected -- algorithm/find : C++26の波カッコ初期化対応 #1311</title>
      <link href="https://cpprefjp.github.io/reference/iterator/projected.html"/>
      <id>0f3ab3ae9af4e61b5f15be6aed0792f6337ef2b4:reference/iterator/projected.md</id>
      <updated>2025-05-23T16:13:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/projected.md b/reference/iterator/projected.md
index 9e769a725..cf694bbc7 100644
--- a/reference/iterator/projected.md
+++ b/reference/iterator/projected.md
@@ -87,6 +87,7 @@ int main() {
 
 ## 関連項目
 
+- [`projected_value_t`](projected_value_t.md)
 - [`indirectly_comparable`](indirectly_comparable.md)
 - [`mergeable`](mergeable.md)
 - [`sortable`](sortable.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>projected_value_t -- algorithm/find : C++26の波カッコ初期化対応 #1311</title>
      <link href="https://cpprefjp.github.io/reference/iterator/projected_value_t.html"/>
      <id>0f3ab3ae9af4e61b5f15be6aed0792f6337ef2b4:reference/iterator/projected_value_t.md</id>
      <updated>2025-05-23T16:13:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/projected_value_t.md b/reference/iterator/projected_value_t.md
new file mode 100644
index 000000000..3c9315a02
--- /dev/null
+++ b/reference/iterator/projected_value_t.md
@@ -0,0 +1,81 @@
+# projected_value_t
+* iterator[meta header]
+* std[meta namespace]
+* type-alias[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;indirectly_­readable I,
+            indirectly_­regular_­unary_­invocable&amp;lt;I&amp;gt; Proj&amp;gt;
+  using projected_value_t = remove_cvref_t&amp;lt;invoke_result_t&amp;lt;Proj&amp;amp;, iter_value_t&amp;lt;I&amp;gt;&amp;amp;&amp;gt;&amp;gt;;
+}
+```
+* indirectly_readable[link /reference/iterator/indirectly_readable.md]
+* indirectly_­regular_­unary_­invocable[link /reference/iterator/indirectly_­regular_­unary_­invocable.md.nolink]
+
+## 概要
+イテレータ型`I`が指す値型を取得する。
+
+この型は、間接参照可能な型`I`に任意の射影操作`Proj`を適用した結果となる値型を返す。
+
+
+## 例
+```cpp example
+#include &amp;lt;concepts&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;functional&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {  
+  using vec_iterator = std::vector&amp;lt;int&amp;gt;::iterator;
+  using pointer = double*;
+
+  static_assert(std::same_as&amp;lt;
+    std::projected_value_t&amp;lt;vec_iterator, std::identity&amp;gt;,
+    int
+  &amp;gt;);
+
+  static_assert(std::same_as&amp;lt;
+    std::projected_value_t&amp;lt;pointer, std::identity&amp;gt;,
+    double
+  &amp;gt;);
+}
+```
+* std::projected_value_t[color ff0000]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): 21 [mark verified]
+- [GCC](/implementation.md#gcc): 15.1 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 13 [mark noimpl]
+
+
+## 関連項目
+- [`std::projected`](projected.md)
+- [`std::ranges::find()`](/reference/algorithm/ranges_find.md)
+- [`std::ranges::find_last()`](/reference/algorithm/ranges_find_last.md)
+- [`std::ranges::count()`](/reference/algorithm/ranges_count.md)
+- [`std::ranges::search_n()`](/reference/algorithm/ranges_search_n.md)
+- [`std::ranges::replace()`](/reference/algorithm/ranges_replace.md)
+- [`std::ranges::replace_if()`](/reference/algorithm/ranges_replace_if.md)
+- [`std::ranges::replace_copy()`](/reference/algorithm/replace_copy.md)
+- [`std::ranges::remove()`](/reference/algorithm/ranges_remove.md)
+- [`std::ranges::remove_copy()`](/reference/algorithm/ranges_remove_copy.md)
+- [`std::ranges::lower_bound()`](/reference/algorithm/ranges_lower_bound.md)
+- [`std::ranges::upper_bound()`](/reference/algorithm/ranges_upper_bound.md)
+- [`std::ranges::equal_range()`](/reference/algorithm/ranges_equal_range.md)
+- [`std::ranges::binary_search()`](/reference/algorithm/ranges_binary_search.md)
+- [`std::ranges::contains()`](/reference/algorithm/ranges_contains.md)
+
+
+## 参照
+- [P2248R8 Enabling list-initialization for algorithms](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2248r8.html)
+    - C++26で、アルゴリズムに波カッコ初期化 (リスト初期化) を渡せるようにするために導入された。`find(r, {1, 2});`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase (非メンバ関数) -- コンテナのstd::erase : C++26の波カッコ初期化対応 #1311</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/erase_free.html"/>
      <id>e36b137e8a237c71b7a03306148cc7b44ed405e8:reference/deque/deque/erase_free.md</id>
      <updated>2025-05-22T23:44:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/erase_free.md b/reference/deque/deque/erase_free.md
index 5ed9fec9a..6c95c90d4 100644
--- a/reference/deque/deque/erase_free.md
+++ b/reference/deque/deque/erase_free.md
@@ -7,7 +7,11 @@
 ```cpp
 namespace std {
   template &amp;lt;class T, class Allocator, class U&amp;gt;
-  typename deque&amp;lt;T, Allocator&amp;gt;::size_type erase(deque&amp;lt;T, Allocator&amp;gt;&amp;amp; c, const U&amp;amp; value);
+  typename deque&amp;lt;T, Allocator&amp;gt;::size_type
+    erase(deque&amp;lt;T, Allocator&amp;gt;&amp;amp; c, const U&amp;amp; value); // (1) C++20
+  template &amp;lt;class T, class Allocator, class U = T&amp;gt;
+  typename deque&amp;lt;T, Allocator&amp;gt;::size_type
+    erase(deque&amp;lt;T, Allocator&amp;gt;&amp;amp; c, const U&amp;amp; value); // (1) C++26
 }
 ```
 
@@ -35,7 +39,18 @@ return r;
 削除した要素数を返す。
 
 
+## 備考
+- (1) :
+    - C++26 : 引数として波カッコ初期化`{}`を受け付ける
+        ```cpp
+        std::deque&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt; d;
+        erase(d, {}); // 空の要素を削除
+        erase(d, {1, 2, 3}); // 値{1, 2, 3}をもつ要素を削除
+        ```
+
+
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;deque&amp;gt;
@@ -54,13 +69,39 @@ int main()
 ```
 * std::erase[color ff0000]
 
-### 出力
+#### 出力
 ```
 3
 4
 5
 ```
 
+### 波カッコ初期化を入力として使用する (C++26)
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;deque&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::deque&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt; d = {
+    {1, 2, 3},
+    {4, 5, 6},
+    {},
+    {7, 8}
+  };
+
+  std::erase(d, {}); // 空の要素を削除
+  std::erase(d, {1, 2, 3}); // 値{1, 2, 3}をもつ要素を削除
+
+  std::println(&amp;#34;{}&amp;#34;, d);
+}
+```
+
+#### 出力
+```
+[[4, 5, 6], [7, 8]]
+```
+
 ## バージョン
 ### 言語
 - C++20
@@ -74,3 +115,5 @@ int main()
 ## 参照
 - [P1209R0 Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
 - [R1115R3 Improving the Return Value of Erase-Like Algorithms II: Free `erase`/`erase_if`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1115r3.pdf)
+- [P2248R8 Enabling list-initialization for algorithms](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2248r8.html)
+    - C++26で波カッコ初期化 (リスト初期化) に対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase (非メンバ関数) -- コンテナのstd::erase : C++26の波カッコ初期化対応 #1311</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/erase_free.html"/>
      <id>e36b137e8a237c71b7a03306148cc7b44ed405e8:reference/forward_list/forward_list/erase_free.md</id>
      <updated>2025-05-22T23:44:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/erase_free.md b/reference/forward_list/forward_list/erase_free.md
index 9e8ca2134..b6b6ffc18 100644
--- a/reference/forward_list/forward_list/erase_free.md
+++ b/reference/forward_list/forward_list/erase_free.md
@@ -7,7 +7,11 @@
 ```cpp
 namespace std {
   template &amp;lt;class T, class Allocator, class U&amp;gt;
-  typename forward_list&amp;lt;T, Allocator&amp;gt;::size_type erase(forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; c, const U&amp;amp; value);
+  typename forward_list&amp;lt;T, Allocator&amp;gt;::size_type
+    erase(forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; c, const U&amp;amp; value); // (1) C++20
+  template &amp;lt;class T, class Allocator, class U = T&amp;gt;
+  typename forward_list&amp;lt;T, Allocator&amp;gt;::size_type
+    erase(forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; c, const U&amp;amp; value); // (1) C++26
 }
 ```
 
@@ -28,7 +32,18 @@ erase_if(c, [&amp;amp;](auto&amp;amp; elem) { return elem == value; });
 削除した要素数を返す。
 
 
+## 備考
+- (1) :
+    - C++26 : 引数として波カッコ初期化`{}`を受け付ける
+        ```cpp
+        std::forward_list&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt; ls;
+        erase(ls, {}); // 空の要素を削除
+        erase(ls, {1, 2, 3}); // 値{1, 2, 3}をもつ要素を削除
+        ```
+
+
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;forward_list&amp;gt;
@@ -47,13 +62,39 @@ int main()
 ```
 * std::erase[color ff0000]
 
-### 出力
+#### 出力
 ```
 3
 4
 5
 ```
 
+### 波カッコ初期化を入力として使用する (C++26)
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;forward_list&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::forward_list&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt; ls = {
+    {1, 2, 3},
+    {4, 5, 6},
+    {},
+    {7, 8}
+  };
+
+  std::erase(ls, {}); // 空の要素を削除
+  std::erase(ls, {1, 2, 3}); // 値{1, 2, 3}をもつ要素を削除
+
+  std::println(&amp;#34;{}&amp;#34;, ls);
+}
+```
+
+#### 出力
+```
+[[4, 5, 6], [7, 8]]
+```
+
 ## バージョン
 ### 言語
 - C++20
@@ -67,3 +108,5 @@ int main()
 ## 参照
 - [P1209R0 Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
 - [R1115R3 Improving the Return Value of Erase-Like Algorithms II: Free `erase`/`erase_if`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1115r3.pdf)
+- [P2248R8 Enabling list-initialization for algorithms](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2248r8.html)
+    - C++26で波カッコ初期化 (リスト初期化) に対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase (非メンバ関数) -- コンテナのstd::erase : C++26の波カッコ初期化対応 #1311</title>
      <link href="https://cpprefjp.github.io/reference/list/list/erase_free.html"/>
      <id>e36b137e8a237c71b7a03306148cc7b44ed405e8:reference/list/list/erase_free.md</id>
      <updated>2025-05-22T23:44:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/erase_free.md b/reference/list/list/erase_free.md
index 8f1c859cf..004e672b9 100644
--- a/reference/list/list/erase_free.md
+++ b/reference/list/list/erase_free.md
@@ -7,7 +7,11 @@
 ```cpp
 namespace std {
   template &amp;lt;class T, class Allocator, class U&amp;gt;
-  typename list&amp;lt;T, Allocator&amp;gt;::size_type erase(list&amp;lt;T, Allocator&amp;gt;&amp;amp; c, const U&amp;amp; value);
+  typename list&amp;lt;T, Allocator&amp;gt;::size_type
+    erase(list&amp;lt;T, Allocator&amp;gt;&amp;amp; c, const U&amp;amp; value); // (1) C++20
+  template &amp;lt;class T, class Allocator, class U = T&amp;gt;
+  typename list&amp;lt;T, Allocator&amp;gt;::size_type
+    erase(list&amp;lt;T, Allocator&amp;gt;&amp;amp; c, const U&amp;amp; value); // (1) C++26
 }
 ```
 
@@ -28,7 +32,18 @@ erase_if(c, [&amp;amp;](auto&amp;amp; elem) { return elem == value; });
 削除した要素数を返す。
 
 
+## 備考
+- (1) :
+    - C++26 : 引数として波カッコ初期化`{}`を受け付ける
+        ```cpp
+        std::list&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt; ls;
+        erase(ls, {}); // 空の要素を削除
+        erase(ls, {1, 2, 3}); // 値{1, 2, 3}をもつ要素を削除
+        ```
+
+
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;list&amp;gt;
@@ -47,13 +62,39 @@ int main()
 ```
 * std::erase[color ff0000]
 
-### 出力
+#### 出力
 ```
 3
 4
 5
 ```
 
+### 波カッコ初期化を入力として使用する (C++26)
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;list&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::list&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt; ls = {
+    {1, 2, 3},
+    {4, 5, 6},
+    {},
+    {7, 8}
+  };
+
+  std::erase(ls, {}); // 空の要素を削除
+  std::erase(ls, {1, 2, 3}); // 値{1, 2, 3}をもつ要素を削除
+
+  std::println(&amp;#34;{}&amp;#34;, ls);
+}
+```
+
+#### 出力
+```
+[[4, 5, 6], [7, 8]]
+```
+
 ## バージョン
 ### 言語
 - C++20
@@ -67,3 +108,5 @@ int main()
 ## 参照
 - [P1209R0 Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
 - [R1115R3 Improving the Return Value of Erase-Like Algorithms II: Free `erase`/`erase_if`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1115r3.pdf)
+- [P2248R8 Enabling list-initialization for algorithms](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2248r8.html)
+    - C++26で波カッコ初期化 (リスト初期化) に対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase (非メンバ関数) -- コンテナのstd::erase : C++26の波カッコ初期化対応 #1311</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/erase_free.html"/>
      <id>e36b137e8a237c71b7a03306148cc7b44ed405e8:reference/string/basic_string/erase_free.md</id>
      <updated>2025-05-22T23:44:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/erase_free.md b/reference/string/basic_string/erase_free.md
index 35d7ec1a3..dfc18ebac 100644
--- a/reference/string/basic_string/erase_free.md
+++ b/reference/string/basic_string/erase_free.md
@@ -8,7 +8,10 @@
 namespace std {
   template &amp;lt;class CharT, class Traits, class Allocator, class U&amp;gt;
   constexpr typename basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;::size_type
-    erase(basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; c, const U&amp;amp; value);
+    erase(basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; c, const U&amp;amp; value);   // (1) C++20
+  template &amp;lt;class CharT, class Traits, class Allocator, class U = CharT&amp;gt;
+  constexpr typename basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;::size_type
+    erase(basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; c, const U&amp;amp; value);   // (1) C++26
 }
 ```
 
@@ -36,7 +39,17 @@ return r;
 削除した要素数を返す。
 
 
+## 備考
+- (1) :
+    - C++26 : 引数として波カッコ初期化`{}`を受け付ける
+        ```cpp
+        erase(s, {});    // ヌル文字&amp;#39;\0&amp;#39;を削除
+        erase(s, {&amp;#39;a&amp;#39;}); // 文字&amp;#39;a&amp;#39;を削除
+        ```
+
+
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;string&amp;gt;
@@ -53,11 +66,33 @@ int main()
 ```
 * std::erase[color ff0000]
 
-### 出力
+#### 出力
 ```
 HelloWorld
 ```
 
+### 波カッコ初期化を入力文字として使用する (C++26)
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main() {
+  const char ar[] = &amp;#34;hel\0lo&amp;#34;;
+  std::string s(ar, ar + sizeof(ar));
+
+  std::erase(s, {});
+  std::erase(s, {&amp;#39;l&amp;#39;});
+
+  std::cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; std::endl;
+}
+```
+
+#### 出力
+```
+heo
+```
+
+
 ## バージョン
 ### 言語
 - C++20
@@ -71,3 +106,5 @@ HelloWorld
 ## 参照
 - [P1209R0 Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
 - [R1115R3 Improving the Return Value of Erase-Like Algorithms II: Free `erase`/`erase_if`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1115r3.pdf)
+- [P2248R8 Enabling list-initialization for algorithms](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2248r8.html)
+    - C++26で波カッコ初期化 (リスト初期化) に対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase (非メンバ関数) -- コンテナのstd::erase : C++26の波カッコ初期化対応 #1311</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/erase_free.html"/>
      <id>e36b137e8a237c71b7a03306148cc7b44ed405e8:reference/vector/vector/erase_free.md</id>
      <updated>2025-05-22T23:44:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/erase_free.md b/reference/vector/vector/erase_free.md
index 81a12080a..82a5411ff 100644
--- a/reference/vector/vector/erase_free.md
+++ b/reference/vector/vector/erase_free.md
@@ -8,7 +8,10 @@
 namespace std {
   template &amp;lt;class T, class Allocator, class U&amp;gt;
   constexpr typename vector&amp;lt;T, Allocator&amp;gt;::size_type
-    erase(vector&amp;lt;T, Allocator&amp;gt;&amp;amp; c, const U&amp;amp; value);
+    erase(vector&amp;lt;T, Allocator&amp;gt;&amp;amp; c, const U&amp;amp; value);  // (1) C++20
+  template &amp;lt;class T, class Allocator, class U = T&amp;gt;
+  constexpr typename vector&amp;lt;T, Allocator&amp;gt;::size_type
+    erase(vector&amp;lt;T, Allocator&amp;gt;&amp;amp; c, const U&amp;amp; value);  // (1) C++26
 }
 ```
 
@@ -36,7 +39,18 @@ return r;
 削除した要素数を返す。
 
 
+## 備考
+- (1) :
+    - C++26 : 引数として波カッコ初期化`{}`を受け付ける
+        ```cpp
+        std::vector&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt; v;
+        erase(v, {}); // 空の要素を削除
+        erase(v, {1, 2, 3}); // 値{1, 2, 3}をもつ要素を削除
+        ```
+
+
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;vector&amp;gt;
@@ -55,13 +69,38 @@ int main()
 ```
 * std::erase[color ff0000]
 
-### 出力
+#### 出力
 ```
 3
 4
 5
 ```
 
+### 波カッコ初期化を入力として使用する (C++26)
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt; v = {
+    {1, 2, 3},
+    {4, 5, 6},
+    {},
+    {7, 8}
+  };
+
+  std::erase(v, {}); // 空の要素を削除
+  std::erase(v, {1, 2, 3}); // 値{1, 2, 3}をもつ要素を削除
+
+  std::println(&amp;#34;{}&amp;#34;, v);
+}
+```
+
+#### 出力
+```
+[[4, 5, 6], [7, 8]]
+```
+
 ## バージョン
 ### 言語
 - C++20
@@ -75,3 +114,5 @@ int main()
 ## 参照
 - [P1209R0 Adopt consistent container erasure from Library Fundamentals 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html)
 - [R1115R3 Improving the Return Value of Erase-Like Algorithms II: Free `erase`/`erase_if`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1115r3.pdf)
+- [P2248R8 Enabling list-initialization for algorithms](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2248r8.html)
+    - C++26で波カッコ初期化 (リスト初期化) に対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>abs -- 全体: オーバーロード番号の列挙を「(1),(2)」になっているものから「(1), (2)」の形式に変更 #1451</title>
      <link href="https://cpprefjp.github.io/reference/cmath/abs.html"/>
      <id>003bb897a82f0e7946d76abc1da6eb2f3f3e0e03:reference/cmath/abs.md</id>
      <updated>2025-05-22T17:27:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/abs.md b/reference/cmath/abs.md
index 8ae5febb3..52d2b8bda 100644
--- a/reference/cmath/abs.md
+++ b/reference/cmath/abs.md
@@ -45,12 +45,12 @@ namespace std {
 ## 戻り値
 引数 `x` の絶対値を返す。
 
-- (1),(2),(3),(4) : `x` が `±∞` だった場合 `+∞` を返す。
+- (1), (2), (3), (4) : `x` が `±∞` だった場合 `+∞` を返す。
 
 
 ## 備考
 - $$ f(x) = | x | $$
-- 任意の整数型に対するオーバーロード(5)は C++11 で追加されたが、[一部の符号なし整数型に対して問題を引き起こす](http://wg21.cmeerw.net/lwg/issue2192)ことから C++17 で削除され、符号付き整数型に対するオーバーロード(6),(7),(8)が追加された
+- 任意の整数型に対するオーバーロード(5)は C++11 で追加されたが、[一部の符号なし整数型に対して問題を引き起こす](http://wg21.cmeerw.net/lwg/issue2192)ことから C++17 で削除され、符号付き整数型に対するオーバーロード(6), (7), (8)が追加された
 - C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wait -- 全体: オーバーロード番号の列挙を「(1),(2)」になっているものから「(1), (2)」の形式に変更 #1451</title>
      <link href="https://cpprefjp.github.io/reference/condition_variable/condition_variable_any/wait.html"/>
      <id>003bb897a82f0e7946d76abc1da6eb2f3f3e0e03:reference/condition_variable/condition_variable_any/wait.md</id>
      <updated>2025-05-22T17:27:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/condition_variable/condition_variable_any/wait.md b/reference/condition_variable/condition_variable_any/wait.md
index 3694af8c1..32a396579 100644
--- a/reference/condition_variable/condition_variable_any/wait.md
+++ b/reference/condition_variable/condition_variable_any/wait.md
@@ -65,7 +65,7 @@ return pred();
 
 
 ## 戻り値
-- (1),(2) : なし
+- (1), (2) : なし
 - (3) : 停止要求の有無によらず、`pred()`の結果が返る。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>abs -- 全体: オーバーロード番号の列挙を「(1),(2)」になっているものから「(1), (2)」の形式に変更 #1451</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib/abs.html"/>
      <id>003bb897a82f0e7946d76abc1da6eb2f3f3e0e03:reference/cstdlib/abs.md</id>
      <updated>2025-05-22T17:27:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdlib/abs.md b/reference/cstdlib/abs.md
index ad61f0b6a..a9bbede8c 100644
--- a/reference/cstdlib/abs.md
+++ b/reference/cstdlib/abs.md
@@ -59,7 +59,7 @@ namespace std {
 ## 戻り値
 引数 `j` の絶対値を返す。
 
-- (4),(5),(6),(7) : `j` が `±∞` だった場合 `+∞` を返す。
+- (4), (5), (6), (7) : `j` が `±∞` だった場合 `+∞` を返す。
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 全体: オーバーロード番号の列挙を「(1),(2)」になっているものから「(1), (2)」の形式に変更 #1451</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/op_constructor.html"/>
      <id>003bb897a82f0e7946d76abc1da6eb2f3f3e0e03:reference/expected/expected.void/op_constructor.md</id>
      <updated>2025-05-22T17:27:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/op_constructor.md b/reference/expected/expected.void/op_constructor.md
index 84266a193..494caea13 100644
--- a/reference/expected/expected.void/op_constructor.md
+++ b/reference/expected/expected.void/op_constructor.md
@@ -198,7 +198,7 @@ int main()
     // ムーブ後のstd::unique_ptr型はnullptrが保証される
   }
 
-  // (6),(7) エラー値の変換コピー／ムーブ構築
+  // (6), (7) エラー値の変換コピー／ムーブ構築
   {
     std::unexpected&amp;lt;IntPair&amp;gt; src1{std::in_place, 1, 2};
     std::expected&amp;lt;void, IntTuple&amp;gt; dst1 = src1;
@@ -217,7 +217,7 @@ int main()
     assert(x1.has_value());
   }
 
-  // (9),(10) 引数リストからエラー値を直接構築
+  // (9), (10) 引数リストからエラー値を直接構築
   {
     std::expected&amp;lt;void, ComplexType&amp;gt; x1{std::unexpect, &amp;#34;C++&amp;#34;, 1};
     assert(not x1.has_value());
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 全体: オーバーロード番号の列挙を「(1),(2)」になっているものから「(1), (2)」の形式に変更 #1451</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/op_constructor.html"/>
      <id>003bb897a82f0e7946d76abc1da6eb2f3f3e0e03:reference/expected/expected/op_constructor.md</id>
      <updated>2025-05-22T17:27:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/op_constructor.md b/reference/expected/expected/op_constructor.md
index 43c739071..96418b457 100644
--- a/reference/expected/expected/op_constructor.md
+++ b/reference/expected/expected/op_constructor.md
@@ -255,7 +255,7 @@ int main()
     assert(*dst2.value() == 42);
   }
 
-  // (7),(8) エラー値の変換コピー／ムーブ構築
+  // (7), (8) エラー値の変換コピー／ムーブ構築
   {
     std::unexpected&amp;lt;IntPair&amp;gt; src1{std::in_place, 1, 2};
     std::expected&amp;lt;int, IntTuple&amp;gt; dst1 = src1;
@@ -268,7 +268,7 @@ int main()
     assert(*dst2.error() == 42);
   }
 
-  // (9),(10) 引数リストから正常値を直接構築
+  // (9), (10) 引数リストから正常値を直接構築
   {
     std::expected&amp;lt;ComplexType, int&amp;gt; x1{std::in_place, &amp;#34;C++&amp;#34;, 1};
     assert(x1.has_value());
@@ -281,7 +281,7 @@ int main()
     assert((x2.value().seq == std::vector&amp;lt;int&amp;gt;{5, 6, 7, 8}));
   }
 
-  // (11),(12) 引数リストからエラー値を直接構築
+  // (11), (12) 引数リストからエラー値を直接構築
   {
     std::expected&amp;lt;int, ComplexType&amp;gt; x1{std::unexpect, &amp;#34;Hello!&amp;#34;, 4};
     assert(not x1.has_value());
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 全体: オーバーロード番号の列挙を「(1),(2)」になっているものから「(1), (2)」の形式に変更 #1451</title>
      <link href="https://cpprefjp.github.io/reference/expected/unexpected/op_constructor.html"/>
      <id>003bb897a82f0e7946d76abc1da6eb2f3f3e0e03:reference/expected/unexpected/op_constructor.md</id>
      <updated>2025-05-22T17:27:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/unexpected/op_constructor.md b/reference/expected/unexpected/op_constructor.md
index 02406bb5d..1b8373301 100644
--- a/reference/expected/unexpected/op_constructor.md
+++ b/reference/expected/unexpected/op_constructor.md
@@ -109,7 +109,7 @@ int main()
     // ムーブ後のstd::unique_ptr型はnullptrが保証される
   }
 
-  // (4),(5) 引数リストから直接構築
+  // (4), (5) 引数リストから直接構築
   {
     std::unexpected&amp;lt;ComplexType&amp;gt; x1{std::in_place, &amp;#34;C++&amp;#34;, 1};
     assert(x1.error().data == &amp;#34;C&amp;#34;);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format_to -- 全体: オーバーロード番号の列挙を「(1),(2)」になっているものから「(1), (2)」の形式に変更 #1451</title>
      <link href="https://cpprefjp.github.io/reference/format/format_to.html"/>
      <id>003bb897a82f0e7946d76abc1da6eb2f3f3e0e03:reference/format/format_to.md</id>
      <updated>2025-05-22T17:27:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format_to.md b/reference/format/format_to.md
index 03cc3bc5c..2cd9f2489 100644
--- a/reference/format/format_to.md
+++ b/reference/format/format_to.md
@@ -51,15 +51,15 @@ format_to(back_inserter(buffer), &amp;#34;The answer is {}.&amp;#34;, 42);
 
 `Out`は以下の制約を満たす。
 
-* (1),(3): [`output_iterator`](/reference/iterator/output_iterator.md)`&amp;lt;Out, const char&amp;amp;&amp;gt;`
-* (2),(4): [`output_iterator`](/reference/iterator/output_iterator.md)`&amp;lt;Out, const wchar_t&amp;amp;&amp;gt;`
+* (1), (3): [`output_iterator`](/reference/iterator/output_iterator.md)`&amp;lt;Out, const char&amp;amp;&amp;gt;`
+* (2), (4): [`output_iterator`](/reference/iterator/output_iterator.md)`&amp;lt;Out, const wchar_t&amp;amp;&amp;gt;`
 
 ## 事前条件
 
 `Out`は以下のコンセプトのモデルである。
 
-* (1),(3): [`output_iterator`](/reference/iterator/output_iterator.md)`&amp;lt;Out, const char&amp;amp;&amp;gt;`
-* (2),(4): [`output_iterator`](/reference/iterator/output_iterator.md)`&amp;lt;Out, const wchar_t&amp;amp;&amp;gt;`
+* (1), (3): [`output_iterator`](/reference/iterator/output_iterator.md)`&amp;lt;Out, const char&amp;amp;&amp;gt;`
+* (2), (4): [`output_iterator`](/reference/iterator/output_iterator.md)`&amp;lt;Out, const wchar_t&amp;amp;&amp;gt;`
 
 ## 効果
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vformat_to -- 全体: オーバーロード番号の列挙を「(1),(2)」になっているものから「(1), (2)」の形式に変更 #1451</title>
      <link href="https://cpprefjp.github.io/reference/format/vformat_to.html"/>
      <id>003bb897a82f0e7946d76abc1da6eb2f3f3e0e03:reference/format/vformat_to.md</id>
      <updated>2025-05-22T17:27:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/vformat_to.md b/reference/format/vformat_to.md
index dd565dd0d..e14207425 100644
--- a/reference/format/vformat_to.md
+++ b/reference/format/vformat_to.md
@@ -42,15 +42,15 @@ namespace std {
 
 `Out`は以下の制約を満たす。
 
-* (1),(3): `OutputIterator&amp;lt;const char&amp;amp;&amp;gt;`
-* (2),(4): `OutputIterator&amp;lt;const wchar_t&amp;amp;&amp;gt;`
+* (1), (3): `OutputIterator&amp;lt;const char&amp;amp;&amp;gt;`
+* (2), (4): `OutputIterator&amp;lt;const wchar_t&amp;amp;&amp;gt;`
 
 ## 事前条件
 
 `out`は以下の制約を満たす型の有効なオブジェクトである。
 
-* (1),(3): `OutputIterator&amp;lt;const char&amp;amp;&amp;gt;`
-* (2),(4): `OutputIterator&amp;lt;const wchar_t&amp;amp;&amp;gt;`
+* (1), (3): `OutputIterator&amp;lt;const char&amp;amp;&amp;gt;`
+* (2), (4): `OutputIterator&amp;lt;const wchar_t&amp;amp;&amp;gt;`
 
 ## 効果
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>splice_after -- 全体: オーバーロード番号の列挙を「(1),(2)」になっているものから「(1), (2)」の形式に変更 #1451</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/splice_after.html"/>
      <id>003bb897a82f0e7946d76abc1da6eb2f3f3e0e03:reference/forward_list/forward_list/splice_after.md</id>
      <updated>2025-05-22T17:27:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/splice_after.md b/reference/forward_list/forward_list/splice_after.md
index ecb33dfab..20677d81e 100644
--- a/reference/forward_list/forward_list/splice_after.md
+++ b/reference/forward_list/forward_list/splice_after.md
@@ -35,9 +35,9 @@ void splice_after(const_iterator position, forward_list&amp;amp;&amp;amp; x,
 
 
 ## 効果
-- (1),(2) : `position`の指す要素の後ろに、`x`の全ての要素を移動する
-- (3),(4) : `position`の指す要素の後ろに、`x`の要素のうち`i`の次の要素を移動する
-- (5),(6) : `position`の指す要素の後ろに、`x`の要素のうち`(first, last)`の範囲を移動する
+- (1), (2) : `position`の指す要素の後ろに、`x`の全ての要素を移動する
+- (3), (4) : `position`の指す要素の後ろに、`x`の要素のうち`i`の次の要素を移動する
+- (5), (6) : `position`の指す要素の後ろに、`x`の要素のうち`(first, last)`の範囲を移動する
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>yield_value -- 全体: オーバーロード番号の列挙を「(1),(2)」になっているものから「(1), (2)」の形式に変更 #1451</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator/promise_type/yield_value.html"/>
      <id>003bb897a82f0e7946d76abc1da6eb2f3f3e0e03:reference/generator/generator/promise_type/yield_value.md</id>
      <updated>2025-05-22T17:27:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator/promise_type/yield_value.md b/reference/generator/generator/promise_type/yield_value.md
index 51bcb800f..ca95b2820 100644
--- a/reference/generator/generator/promise_type/yield_value.md
+++ b/reference/generator/generator/promise_type/yield_value.md
@@ -90,7 +90,7 @@ return yield_value(ranges::elements_of(nested(
 
 
 ## 例外
-- (1),(3),(4) : 投げない。
+- (1), (3), (4) : 投げない。
 - (2) : 格納されるオブジェクトの初期化によって送出された例外。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 全体: オーバーロード番号の列挙を「(1),(2)」になっているものから「(1), (2)」の形式に変更 #1451</title>
      <link href="https://cpprefjp.github.io/reference/queue/queue/op_constructor.html"/>
      <id>003bb897a82f0e7946d76abc1da6eb2f3f3e0e03:reference/queue/queue/op_constructor.md</id>
      <updated>2025-05-22T17:27:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/queue/queue/op_constructor.md b/reference/queue/queue/op_constructor.md
index 0dfe840c6..4596320db 100644
--- a/reference/queue/queue/op_constructor.md
+++ b/reference/queue/queue/op_constructor.md
@@ -6,11 +6,11 @@
 
 ```cpp
 // C++03まで
-explicit queue(const Container&amp;amp; other = Container());  // (1),(2)
+explicit queue(const Container&amp;amp; other = Container());  // (1), (2)
 
 // C++11以降 C++17まで
 explicit queue(const Container&amp;amp; other);           // (2)
-explicit queue(Container&amp;amp;&amp;amp; other = Container());  // (1),(3)
+explicit queue(Container&amp;amp;&amp;amp; other = Container());  // (1), (3)
 
 // C++20以降
 queue() : queue(Container()) {}          // (1)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 全体: オーバーロード番号の列挙を「(1),(2)」になっているものから「(1), (2)」の形式に変更 #1451</title>
      <link href="https://cpprefjp.github.io/reference/stack/stack/op_constructor.html"/>
      <id>003bb897a82f0e7946d76abc1da6eb2f3f3e0e03:reference/stack/stack/op_constructor.md</id>
      <updated>2025-05-22T17:27:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stack/stack/op_constructor.md b/reference/stack/stack/op_constructor.md
index 14b0c8d2f..f173b91ca 100644
--- a/reference/stack/stack/op_constructor.md
+++ b/reference/stack/stack/op_constructor.md
@@ -6,11 +6,11 @@
 
 ```cpp
 // C++03まで
-explicit stack(const Container&amp;amp; cont = Container());  // (1),(2)
+explicit stack(const Container&amp;amp; cont = Container());  // (1), (2)
 
 // C++11以降 C++17まで
 explicit stack(const Container&amp;amp; cont);           // (2)
-explicit stack(Container&amp;amp;&amp;amp; cont = Container());  // (1),(3)
+explicit stack(Container&amp;amp;&amp;amp; cont = Container());  // (1), (3)
 
 // C++20以降
 stack() : stack(Container()) {}    // (1)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 全体: オーバーロード番号の列挙を「(1),(2)」になっているものから「(1), (2)」の形式に変更 #1451</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_constructor.html"/>
      <id>003bb897a82f0e7946d76abc1da6eb2f3f3e0e03:reference/string/basic_string/op_constructor.md</id>
      <updated>2025-05-22T17:27:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_constructor.md b/reference/string/basic_string/op_constructor.md
index 5bf500824..b0a95566d 100644
--- a/reference/string/basic_string/op_constructor.md
+++ b/reference/string/basic_string/op_constructor.md
@@ -268,4 +268,4 @@ s14 : Hello
 - [P2166R1 A Proposal to Prohibit std::basic_string and std::basic_string_view construction from nullptr.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2166r1.html)
     - C++23での(16)`nullptr_t`をとるコンストラクタのdelete宣言追加
 - [P2438R2 `std::string::substr() &amp;amp;&amp;amp;`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2438r2.html)
-    - C++23での(17),(18)`basic_string&amp;amp;&amp;amp;`と範囲指定をとるコンストラクタ追加
+    - C++23での(17), (18)`basic_string&amp;amp;&amp;amp;`と範囲指定をとるコンストラクタ追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bucket -- unordered_(multi)set::bucket : C++26の異種混合ルックアップに対応 #1189</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/bucket.html"/>
      <id>9bcd535b0cb4a69bb29748b0a10fa83c8b58ac20:reference/unordered_set/unordered_multiset/bucket.md</id>
      <updated>2025-05-22T16:22:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_multiset/bucket.md b/reference/unordered_set/unordered_multiset/bucket.md
index d970e5566..165c9ec60 100644
--- a/reference/unordered_set/unordered_multiset/bucket.md
+++ b/reference/unordered_set/unordered_multiset/bucket.md
@@ -6,20 +6,32 @@
 * cpp11[meta cpp]
 
 ```cpp
-size_type bucket(const key_type&amp;amp; k) const;
+size_type bucket(const key_type&amp;amp; k) const; // (1) C++11
+
+template &amp;lt;class K&amp;gt;
+size_type bucket(const K&amp;amp; k) const;        // (2) C++26
 ```
 
 ## 概要
 指定したキーと等価な要素が格納されている場合、そのバケットのインデックス（添え字）を取得する。
 
+- (1) : `key_type`型のキーを受け取って、バケットのインデックスを取得する
+- (2) : `key_type`と比較可能なキーを受け取って、バケットのインデックスを取得する
+
+
+## テンプレートパラメータ制約
+- (2) : `key_compare::is_transparent` が妥当な式であること
 
-## 要件
+
+## 事前条件
 当該コンテナは [`bucket_count`](bucket_count.md)`() &amp;gt; 0` であること
 
 
 ## 戻り値
 パラメータ `k` と等価なキーの要素が格納されているバケットのインデックス（添え字）
 
+
+## 事後条件
 戻り値は `[0,` [`bucket_count`](bucket_count.md)`())` の範囲である。
 
 
@@ -28,7 +40,10 @@ size_type bucket(const key_type&amp;amp; k) const;
 
 
 ## 備考
-指定したキーと等価な要素が格納されていない場合、そのキーを挿入した際に [`rehash`](rehash.md) が発生しなければ格納されるバケットのインデックス（添え字）が返る。
+- 指定したキーと等価な要素が格納されていない場合、そのキーを挿入した際に [`rehash`](rehash.md) が発生しなければ格納されるバケットのインデックス（添え字）が返る。
+- (2) :
+    - `is_transparent`は、標準ライブラリの[`std::less`](/reference/functional/less.md)、[`std::greater`](/reference/functional/greater.md)といった関数オブジェクトの、`void`に対する特殊化で定義される。それ以外のテンプレートパラメータで`is_transparent`が定義されないのは、互換性のためである。
+    - これらのオーバーロードは、`map&amp;lt;string, int&amp;gt;`のようなコンテナに対し、検索操作で文字列リテラルを渡した際に、キー型の一時オブジェクトが生成されるコストを減らすためにある。
 
 
 ## 例
@@ -94,3 +109,6 @@ key = H, bucket = 3, bucket_size = 0
 |----------------------------------------------|----------------------|
 | [`max_bucket_count`](max_bucket_count.md)  | 最大バケット数の取得 |
 
+## 参照
+- [P2363R5 Extending associative containers with the remaining heterogeneous overloads](http://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2363r5.html)
+    - C++26で`template &amp;lt;class K&amp;gt;`のバージョンが追加された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bucket -- unordered_(multi)set::bucket : C++26の異種混合ルックアップに対応 #1189</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/bucket.html"/>
      <id>9bcd535b0cb4a69bb29748b0a10fa83c8b58ac20:reference/unordered_set/unordered_set/bucket.md</id>
      <updated>2025-05-22T16:22:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/bucket.md b/reference/unordered_set/unordered_set/bucket.md
index c8c990ed4..a7d2700cb 100644
--- a/reference/unordered_set/unordered_set/bucket.md
+++ b/reference/unordered_set/unordered_set/bucket.md
@@ -6,20 +6,32 @@
 * cpp11[meta cpp]
 
 ```cpp
-size_type bucket(const key_type&amp;amp; k) const;
+size_type bucket(const key_type&amp;amp; k) const; // (1) C++11
+
+template &amp;lt;class K&amp;gt;
+size_type bucket(const K&amp;amp; k) const;        // (2) C++26
 ```
 
 ## 概要
 指定したキーと等価な要素が格納されている場合、そのバケットのインデックス（添え字）を取得する。
 
+- (1) : `key_type`型のキーを受け取って、バケットのインデックスを取得する
+- (2) : `key_type`と比較可能なキーを受け取って、バケットのインデックスを取得する
+
+
+## テンプレートパラメータ制約
+- (2) : `key_compare::is_transparent` が妥当な式であること
 
-## 要件
+
+## 事前条件
 当該コンテナは [`bucket_count`](bucket_count.md)`() &amp;gt; 0` であること
 
 
 ## 戻り値
 パラメータ `k` と等価なキーの要素が格納されているバケットのインデックス（添え字）
 
+
+## 事後条件
 戻り値は `[0,` [`bucket_count`](bucket_count.md)`())` の範囲である。
 
 
@@ -28,7 +40,10 @@ size_type bucket(const key_type&amp;amp; k) const;
 
 
 ## 備考
-指定したキーと等価な要素が格納されていない場合、そのキーを挿入した際に [`rehash`](rehash.md) が発生しなければ格納されるバケットのインデックス（添え字）が返る。
+- 指定したキーと等価な要素が格納されていない場合、そのキーを挿入した際に [`rehash`](rehash.md) が発生しなければ格納されるバケットのインデックス（添え字）が返る。
+- (2) :
+    - `is_transparent`は、標準ライブラリの[`std::less`](/reference/functional/less.md)、[`std::greater`](/reference/functional/greater.md)といった関数オブジェクトの、`void`に対する特殊化で定義される。それ以外のテンプレートパラメータで`is_transparent`が定義されないのは、互換性のためである。
+    - これらのオーバーロードは、`map&amp;lt;string, int&amp;gt;`のようなコンテナに対し、検索操作で文字列リテラルを渡した際に、キー型の一時オブジェクトが生成されるコストを減らすためにある。
 
 
 ## 例
@@ -85,8 +100,10 @@ key = H, bucket = 2, bucket_size = 0
 
 ## 関連項目
 
-
 | 名前 | 説明 |
 |-------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------|
 | [`max_bucket_count`](max_bucket_count.md) | 最大バケット数の取得 |
 
+## 参照
+- [P2363R5 Extending associative containers with the remaining heterogeneous overloads](http://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2363r5.html)
+    - C++26で`template &amp;lt;class K&amp;gt;`のバージョンが追加された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
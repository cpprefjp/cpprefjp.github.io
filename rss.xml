<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-05-01T16:03:47.609298</updated>
  <id>9ea6d99a-8f93-46a3-aa12-a8da2170aafd</id>

  
    <entry>
      <title>kill_dependency -- GLOBAL_QUALIFY_LIST: std::memory_order_consume削除 (#1420)</title>
      <link href="https://cpprefjp.github.io/reference/atomic/kill_dependency.html"/>
      <id>9ea31e83a71896f726b6ff594a35d37f76277847:reference/atomic/kill_dependency.md</id>
      <updated>2025-05-02T00:59:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/kill_dependency.md b/reference/atomic/kill_dependency.md
index f7ff021e3..0f41534d7 100644
--- a/reference/atomic/kill_dependency.md
+++ b/reference/atomic/kill_dependency.md
@@ -88,6 +88,7 @@ int main()
 * std::kill_dependency[color ff0000]
 * a.store[link atomic/store.md]
 * a.load[link atomic/load.md]
+* std::memory_order_consume[link /reference/atomic/memory_order.md]
 
 
 ### 出力例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ポインタから`bool`への変換を縮小変換とする [P1957R2] -- GLOBAL_QUALIFY_LIST: std::variant追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.html"/>
      <id>0e7abe950b0cff66280b05cf6fa06b1bdb1c968d:lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md</id>
      <updated>2025-05-02T00:54:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md b/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md
index 486be44f1..0a40c7441 100644
--- a/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md
+++ b/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.md
@@ -34,8 +34,6 @@ C++17で導入された`std::variant`には当初、`const char*`から`bool`へ
 ```cpp
 std::variant&amp;lt;std::string, bool&amp;gt; x = &amp;#34;abc&amp;#34;;  // boolを保持して構築されてしまう
 ```
-* variant[link /reference/variant/variant.md]
-* string[link /reference/string/basic_string.md]
 
 この他にも構築・代入時に縮小変換が行われてしまう事から同様の問題があり、それはC++20において[P0608R3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0608r3.html)によって解決された。そこでは、構築・代入時の縮小変換を禁止するとともに、`bool`に変換可能な型を`bool`に変換することを禁止することで問題に対処していた。
 
@@ -46,7 +44,6 @@ std::bitset&amp;lt;4&amp;gt; b(&amp;#34;0101&amp;#34;);
 std::variant&amp;lt;bool, int&amp;gt; v = b[1]; // intを保持して構築されてしまう
 ```
 * bitset[link /reference/bitset/bitset.md]
-* variant[link /reference/variant/variant.md]
 
 `std::bitset`の非`const`な[`operator[]`](/reference/bitset/bitset/op_at.md)は`bool`型へ暗黙変換可能なプロキシオブジェクトを返す。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>in_place_index_t -- GLOBAL_QUALIFY_LIST: std::variant追加</title>
      <link href="https://cpprefjp.github.io/reference/utility/in_place_index_t.html"/>
      <id>0e7abe950b0cff66280b05cf6fa06b1bdb1c968d:reference/utility/in_place_index_t.md</id>
      <updated>2025-05-02T00:54:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/in_place_index_t.md b/reference/utility/in_place_index_t.md
index 450d23a68..24c61fae2 100644
--- a/reference/utility/in_place_index_t.md
+++ b/reference/utility/in_place_index_t.md
@@ -42,7 +42,6 @@ int main()
 }
 ```
 * std::in_place_index[color ff0000]
-* std::variant[link /reference/variant/variant.md]
 * std::visit[link /reference/variant/visit.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>run -- GLOBAL_QUALIFY_LIST: std::jthread追加</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop/run.html"/>
      <id>b7bf5a18276675dc1b6a14e6c7dc2db3ad0c7a12:reference/execution/execution/run_loop/run.md</id>
      <updated>2025-05-02T00:51:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop/run.md b/reference/execution/execution/run_loop/run.md
index 3c7970871..85f406acf 100644
--- a/reference/execution/execution/run_loop/run.md
+++ b/reference/execution/execution/run_loop/run.md
@@ -90,7 +90,6 @@ int main()
 * run()[color ff0000]
 * ex::run_loop[link ../run_loop.md]
 * finish()[link finish.md]
-* std::jthread[link /reference/thread/jthread.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>schedule -- GLOBAL_QUALIFY_LIST: std::jthread追加</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/schedule.html"/>
      <id>b7bf5a18276675dc1b6a14e6c7dc2db3ad0c7a12:reference/execution/execution/schedule.md</id>
      <updated>2025-05-02T00:51:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/schedule.md b/reference/execution/execution/schedule.md
index f112291e5..778b9aa8a 100644
--- a/reference/execution/execution/schedule.md
+++ b/reference/execution/execution/schedule.md
@@ -69,7 +69,6 @@ int main()
 * run()[link run_loop/run.md]
 * finish()[link run_loop/finish.md]
 * std::move[link /reference/utility/move.md]
-* std::jthread[link /reference/thread/jthread.md]
 * std::this_thread::get_id()[link /reference/thread/this_thread/get_id.md]
 
 ### 出力例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rcu_obj_base -- GLOBAL_QUALIFY_LIST: std::jthread追加</title>
      <link href="https://cpprefjp.github.io/reference/rcu/rcu_obj_base.html"/>
      <id>b7bf5a18276675dc1b6a14e6c7dc2db3ad0c7a12:reference/rcu/rcu_obj_base.md</id>
      <updated>2025-05-02T00:51:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/rcu/rcu_obj_base.md b/reference/rcu/rcu_obj_base.md
index 3a36d3ebc..cd2d1639d 100644
--- a/reference/rcu/rcu_obj_base.md
+++ b/reference/rcu/rcu_obj_base.md
@@ -87,7 +87,6 @@ int main()
 * std::rcu_default_domain[link rcu_default_domain.md]
 * retire()[link rcu_obj_base/retire.md]
 * std::scoped_lock[link /reference/mutex/scoped_lock.md]
-* std::jthread[link /reference/thread/jthread.md]
 * exchange[link /reference/atomic/atomic/exchange.md]
 * store[link /reference/atomic/atomic/store.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rcu_retire -- GLOBAL_QUALIFY_LIST: std::jthread追加</title>
      <link href="https://cpprefjp.github.io/reference/rcu/rcu_retire.html"/>
      <id>b7bf5a18276675dc1b6a14e6c7dc2db3ad0c7a12:reference/rcu/rcu_retire.md</id>
      <updated>2025-05-02T00:51:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/rcu/rcu_retire.md b/reference/rcu/rcu_retire.md
index d4d63c374..80aa742f6 100644
--- a/reference/rcu/rcu_retire.md
+++ b/reference/rcu/rcu_retire.md
@@ -97,7 +97,6 @@ int main()
 * std::rcu_retire[color ff0000]
 * std::rcu_default_domain[link rcu_default_domain.md]
 * std::scoped_lock[link /reference/mutex/scoped_lock.md]
-* std::jthread[link /reference/thread/jthread.md]
 * exchange[link /reference/atomic/atomic/exchange.md]
 * store[link /reference/atomic/atomic/store.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rcu_synchronize -- GLOBAL_QUALIFY_LIST: std::jthread追加</title>
      <link href="https://cpprefjp.github.io/reference/rcu/rcu_synchronize.html"/>
      <id>b7bf5a18276675dc1b6a14e6c7dc2db3ad0c7a12:reference/rcu/rcu_synchronize.md</id>
      <updated>2025-05-02T00:51:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/rcu/rcu_synchronize.md b/reference/rcu/rcu_synchronize.md
index 713b6ab02..cbb1cf2df 100644
--- a/reference/rcu/rcu_synchronize.md
+++ b/reference/rcu/rcu_synchronize.md
@@ -88,7 +88,6 @@ int main()
 * std::rcu_synchronize[color ff0000]
 * std::rcu_default_domain[link rcu_default_domain.md]
 * std::scoped_lock[link /reference/mutex/scoped_lock.md]
-* std::jthread[link /reference/thread/jthread.md]
 * exchange[link /reference/atomic/atomic/exchange.md]
 * store[link /reference/atomic/atomic/store.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>run_loop -- execution/run_loop: fix typos</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop.html"/>
      <id>c629ec04a7d3e4027016f738ceb1f777f62bb852:reference/execution/execution/run_loop.md</id>
      <updated>2025-05-02T00:41:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop.md b/reference/execution/execution/run_loop.md
index e87534f35..8a4c149f2 100644
--- a/reference/execution/execution/run_loop.md
+++ b/reference/execution/execution/run_loop.md
@@ -75,9 +75,9 @@ int main()
   ex::start(op);
   // count=1, state=開始(starting)
 
-  // run_loop状態を終了中(finished)へ変更
+  // run_loop状態を終了中(finishing)へ変更
   loop.finish();
-  // count=1, state=終了中(finished)
+  // count=1, state=終了中(finishing)
 
   // run_loopキュー上の作業を逐次実行
   loop.run();
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sync-wait-receiver -- execution/sync_wait(_with_variant): 微調整 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/this_thread/sync-wait-receiver.html"/>
      <id>7aa4a3a5a9224b867655b6a458e594698cf8f847:reference/execution/this_thread/sync-wait-receiver.md</id>
      <updated>2025-05-01T23:33:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/this_thread/sync-wait-receiver.md b/reference/execution/this_thread/sync-wait-receiver.md
index f3823750a..28b5d3e38 100644
--- a/reference/execution/this_thread/sync-wait-receiver.md
+++ b/reference/execution/this_thread/sync-wait-receiver.md
@@ -31,6 +31,7 @@ namespace std::this_thread {
 }
 ```
 * execution::receiver_t[link ../execution/receiver.md]
+* sync-wait-env[link sync-wait-env.md]
 * execution::run_loop[link ../execution/run_loop.md]
 * exception_ptr[link /reference/exception/exception_ptr.md]
 * sync-wait-result-type[link sync_wait.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sync_wait -- execution/sync_wait(_with_variant): 微調整 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/this_thread/sync_wait.html"/>
      <id>7aa4a3a5a9224b867655b6a458e594698cf8f847:reference/execution/this_thread/sync_wait.md</id>
      <updated>2025-05-01T23:33:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/this_thread/sync_wait.md b/reference/execution/this_thread/sync_wait.md
index b54097da9..a6625caf8 100644
--- a/reference/execution/this_thread/sync_wait.md
+++ b/reference/execution/this_thread/sync_wait.md
@@ -15,7 +15,10 @@ namespace std::this_thread {
 ## 概要
 `sync_wait`は、[Sender](../execution/sender.md)が完了するまで現在のスレッドをブロックし、非同期操作の結果を取得するSenderコンシューマである。
 
-`sync_wait`は入力Senderが[値完了シグネチャ](../execution/set_value.md)をただ1種類だけ持つことを要求する。
+`sync_wait`は入力Senderが[値完了シグネチャ](../execution/set_value.md)を1個だけ持つことを要求する。
+値完了シグネチャが複数存在する場合は[`sync_wait_with_variant`](sync_wait_with_variant.md)アルゴリズムを利用する。
+
+入力Senderの値完了シグネチャが[`set_value_t`](../execution/set_value.md)`(Ts...)`のとき、`sync_wait`の結果型は[`optional`](/reference/optional/optional.md)`&amp;lt;`[`tuple`](/reference/tuple/tuple.md)`&amp;lt;Ts...&amp;gt;&amp;gt;`となる。
 
 
 ## 効果
@@ -35,8 +38,8 @@ apply_sender(get-domain-early(sndr), sync_wait, sndr)
 - 上記の`apply_sender`式を`e`としたとき、[`same_as`](/reference/concepts/same_as.md)`&amp;lt;decltype(e), sync-wait-result-type&amp;lt;Sndr&amp;gt;&amp;gt; == true`であること。
 
 
-### 戻り値型
-`sync_wait`の戻り値型となる、説明専用のエイリアステンプレート`sync-wait-result-type`を下記の通り定義する。
+### 結果型
+`sync_wait`の結果型となる、説明専用のエイリアステンプレート`sync-wait-result-type`を下記の通り定義する。
 
 ```cpp
 namespace std::this_thread {
@@ -91,9 +94,9 @@ return std::move(state.result);
 
 - 指定したSenderが完了するまで、前方進行保証委任(forward progress guarantee delegation)による現在のスレッドをブロックすること。
 - 指定したSenderの非同期操作の結果が返る場合
-    - 値完了の場合、結果データは[`optional`](/reference/optional/optional.md)オブジェクト内の[`tuple`](/reference/tuple/tuple.md)で返されること。
-    - エラー完了の場合、例外を送出すること。
-    - 停止完了の場合、空の[`optional`](/reference/optional/optional.md)オブジェクトが返されること。
+    - [値完了](../execution/set_value.md)の場合、結果データは[`optional`](/reference/optional/optional.md)オブジェクト内の[`tuple`](/reference/tuple/tuple.md)で返されること。
+    - [エラー完了](../execution/set_error.md)の場合、例外を送出すること。
+    - [停止完了](../execution/set_stopped.md)の場合、無効値[`optional`](/reference/optional/optional.md)オブジェクトが返されること。
 
 
 ## 例
@@ -108,7 +111,7 @@ int main()
   ex::sender auto sndr = ex::just(100, &amp;#39;X&amp;#39;);
   // メインスレッド上で完了待機
   auto result = std::this_thread::sync_wait(sndr);
-  // 戻り値型optional&amp;lt;tuple&amp;lt;int,char&amp;gt;&amp;gt;から値を取り出す
+  // 結果型optional&amp;lt;tuple&amp;lt;int,char&amp;gt;&amp;gt;から値を取り出す
   auto [n, c] = result.value();
   std::println(&amp;#34;result=({}, {})&amp;#34;, n, c);
 }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sync_wait_with_variant -- execution/sync_wait(_with_variant): 微調整 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/this_thread/sync_wait_with_variant.html"/>
      <id>7aa4a3a5a9224b867655b6a458e594698cf8f847:reference/execution/this_thread/sync_wait_with_variant.md</id>
      <updated>2025-05-01T23:33:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/this_thread/sync_wait_with_variant.md b/reference/execution/this_thread/sync_wait_with_variant.md
index 8dc96b1d2..a6e227308 100644
--- a/reference/execution/this_thread/sync_wait_with_variant.md
+++ b/reference/execution/this_thread/sync_wait_with_variant.md
@@ -16,6 +16,10 @@ namespace std::this_thread {
 `sync_wait_with_variant`は、[Sender](../execution/sender.md)が完了するまで現在のスレッドをブロックし、非同期操作の結果を取得するSenderコンシューマである。
 
 `sync_wait_with_variant`は入力Senderが複数の[値完了シグネチャ](../execution/set_value.md)を持つケースに対応する。
+値完了シグネチャが1個だけの場合は[`sync_wait`](sync_wait.md)アルゴリズムを利用する。
+
+
+入力Senderの値完了シグネチャが[`set_value_t`](../execution/set_value.md)`(Ts0...)`, ..., [`set_value_t`](../execution/set_value.md)`(TsN...)`のとき、`sync_wait_with_variant`の結果型は[`optional`](/reference/optional/optional.md)`&amp;lt;`[`variant`](/reference/variant/variant.md)`&amp;lt;`[`tuple`](/reference/tuple/tuple.md)`&amp;lt;Ts0...&amp;gt;, ...,` [`tuple`](/reference/tuple/tuple.md)`&amp;lt;TsN...&amp;gt;&amp;gt;`となる。
 
 
 ## 効果
@@ -35,8 +39,8 @@ apply_sender(get-domain-early(sndr), sync_wait_with_variant, sndr)
 - 上記の`apply_sender`式を`e`としたとき、[`same_as`](/reference/concepts/same_as.md)`&amp;lt;decltype(e), sync-wait-with-variant-result-type&amp;lt;Sndr&amp;gt;&amp;gt; == true`であること。
 
 
-### 戻り値型
-`sync_wait_with_variant`の戻り値型となる、説明専用のエイリアステンプレート`sync-wait-with-variant-result-type`を下記の通り定義する。
+### 結果型
+`sync_wait_with_variant`の結果型となる、説明専用のエイリアステンプレート`sync-wait-with-variant-result-type`を下記の通り定義する。
 
 ```cpp
 namespace std::this_thread {
@@ -81,9 +85,9 @@ return result_type(nullopt);
 
 - 指定したSenderが完了するまで、前方進行保証委任(forward progress guarantee delegation)による現在のスレッドをブロックすること。
 - 指定したSenderの非同期操作の結果が返る場合
-    - 値完了の場合、結果データは[`optional`](/reference/optional/optional.md)オブジェクト内の[`tuple`](/reference/tuple/tuple.md)の[`variant`](/reference/variant/variant.md)で返されること。
-    - エラー完了の場合、例外を送出すること。
-    - 停止完了の場合、空の[`optional`](/reference/optional/optional.md)オブジェクトが返されること。
+    - [値完了](../execution/set_value.md)の場合、結果データは[`optional`](/reference/optional/optional.md)オブジェクト内の[`tuple`](/reference/tuple/tuple.md)の[`variant`](/reference/variant/variant.md)で返されること。
+    - [エラー完了](../execution/set_error.md)の場合、例外を送出すること。
+    - [停止完了](../execution/set_stopped.md)の場合、無効値[`optional`](/reference/optional/optional.md)オブジェクトが返されること。
 
 
 ## 例
@@ -98,7 +102,7 @@ int main()
   ex::sender auto sndr = ex::just(100, &amp;#39;X&amp;#39;);
   // メインスレッド上で完了待機
   auto result = std::this_thread::sync_wait_with_variant(sndr);
-  // 戻り値型optional&amp;lt;variant&amp;lt;tuple&amp;lt;int,char&amp;gt;&amp;gt;&amp;gt;からtupleを取り出す
+  // 結果型optional&amp;lt;variant&amp;lt;tuple&amp;lt;int,char&amp;gt;&amp;gt;&amp;gt;からtupleを取り出す
   auto tup = get&amp;lt;0&amp;gt;(result.value());
   std::println(&amp;#34;result={}&amp;#34;, tup);
 }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
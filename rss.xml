<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-05-24T01:20:46.409624</updated>
  <id>cf120722-5094-41a9-9757-0bff44fc9052</id>

  
    <entry>
      <title>stoi -- Merge pull request #1283 from yuina-blend/fix/typo</title>
      <link href="https://cpprefjp.github.io/reference/string/stoi.html"/>
      <id>2424d150b07207ee322fb549e369bd483e318d11:reference/string/stoi.md</id>
      <updated>2024-05-24T10:17:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/stoi.md b/reference/string/stoi.md
index bd4c3293e..de86bacbe 100644
--- a/reference/string/stoi.md
+++ b/reference/string/stoi.md
@@ -235,7 +235,7 @@ int stoi(const std::wstring&amp;amp; str, std::size_t* idx = nullptr, int base = 10) {
 ## 関連リンク
 ### C標準ライブラリに由来する関数
 - `atoi`: `stoi`は`atoi`を`std::string`および`std::wstring`に対応させたものと見なせる。
-- `strtol`, `wcstol`: `stoi`は`strtol`および`wcstol`をそれぞれ`std::string`と`std::wsrting`に対応させ、戻り値の型を`int`に変更したものと見なせる。
+- `strtol`, `wcstol`: `stoi`は`strtol`および`wcstol`をそれぞれ`std::string`と`std::wstring`に対応させ、戻り値の型を`int`に変更したものと見なせる。
 
 ### ファミリー
 - (`stoi`: この関数自身)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stol -- Merge pull request #1283 from yuina-blend/fix/typo</title>
      <link href="https://cpprefjp.github.io/reference/string/stol.html"/>
      <id>2424d150b07207ee322fb549e369bd483e318d11:reference/string/stol.md</id>
      <updated>2024-05-24T10:17:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/stol.md b/reference/string/stol.md
index e6ee4ced9..204cb4990 100644
--- a/reference/string/stol.md
+++ b/reference/string/stol.md
@@ -233,7 +233,7 @@ long stol(const std::wstring&amp;amp; str, std::size_t* idx = nullptr, long base = 10) {
 ## 関連リンク
 ### C標準ライブラリに由来する関数
 - `atol`: `stol`は`atol`を`std::string`および`std::wstring`に対応させたものと見なせる。
-- `strtol`, `wcstol`: `stol`は`strtol`および`wcstol`をそれぞれ`std::string`と`std::wsrting`に対応させたものと見なせる。
+- `strtol`, `wcstol`: `stol`は`strtol`および`wcstol`をそれぞれ`std::string`と`std::wstring`に対応させたものと見なせる。
 
 ### ファミリー
 - [`stoi`](stoi.md): 戻り値の型が`int`となったもの。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stol -- [Fix] same typo</title>
      <link href="https://cpprefjp.github.io/reference/string/stol.html"/>
      <id>643030cb7553fe159b0d27b205a7161e1f291693:reference/string/stol.md</id>
      <updated>2024-05-24T09:00:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/stol.md b/reference/string/stol.md
index e6ee4ced9..204cb4990 100644
--- a/reference/string/stol.md
+++ b/reference/string/stol.md
@@ -233,7 +233,7 @@ long stol(const std::wstring&amp;amp; str, std::size_t* idx = nullptr, long base = 10) {
 ## 関連リンク
 ### C標準ライブラリに由来する関数
 - `atol`: `stol`は`atol`を`std::string`および`std::wstring`に対応させたものと見なせる。
-- `strtol`, `wcstol`: `stol`は`strtol`および`wcstol`をそれぞれ`std::string`と`std::wsrting`に対応させたものと見なせる。
+- `strtol`, `wcstol`: `stol`は`strtol`および`wcstol`をそれぞれ`std::string`と`std::wstring`に対応させたものと見なせる。
 
 ### ファミリー
 - [`stoi`](stoi.md): 戻り値の型が`int`となったもの。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yuina-blend</name>
        <email>moon.h14.dd2.as@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stoi -- [Fix] srtingとなっていたので修正</title>
      <link href="https://cpprefjp.github.io/reference/string/stoi.html"/>
      <id>8aa06cdecc223b81b37448811e897eef0c0c1847:reference/string/stoi.md</id>
      <updated>2024-05-24T08:58:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/stoi.md b/reference/string/stoi.md
index bd4c3293e..de86bacbe 100644
--- a/reference/string/stoi.md
+++ b/reference/string/stoi.md
@@ -235,7 +235,7 @@ int stoi(const std::wstring&amp;amp; str, std::size_t* idx = nullptr, int base = 10) {
 ## 関連リンク
 ### C標準ライブラリに由来する関数
 - `atoi`: `stoi`は`atoi`を`std::string`および`std::wstring`に対応させたものと見なせる。
-- `strtol`, `wcstol`: `stoi`は`strtol`および`wcstol`をそれぞれ`std::string`と`std::wsrting`に対応させ、戻り値の型を`int`に変更したものと見なせる。
+- `strtol`, `wcstol`: `stoi`は`strtol`および`wcstol`をそれぞれ`std::string`と`std::wstring`に対応させ、戻り値の型を`int`に変更したものと見なせる。
 
 ### ファミリー
 - (`stoi`: この関数自身)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yuina-blend</name>
        <email>moon.h14.dd2.as@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>linalg -- Merge pull request #1279 from sukeya/linalg</title>
      <link href="https://cpprefjp.github.io/reference/linalg.html"/>
      <id>add168511580e2f1cd88da5225538b21e811c602:reference/linalg.md</id>
      <updated>2024-05-23T10:58:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg.md b/reference/linalg.md
index e05c99180..672a048ef 100644
--- a/reference/linalg.md
+++ b/reference/linalg.md
@@ -3,6 +3,7 @@
 * cpp26[meta cpp]
 
 `&amp;lt;linalg&amp;gt;`ヘッダでは、線形代数(linear algebra)に関する基礎的な演算アルゴリズムを提供する。
+ベクトルや行列の成分にアクセスするアルゴリズムは、多次元配列ビュー[ `std::mdspan` ](mdspan/mdspan.md)を通してその要素にアクセスする。
 本ヘッダが提供するエンティティは、すべて名前空間`std::linalg`に属する。
 
 1次元データであるベクトル(vector)や2次元データである行列(matrix)に対して、線形代数分野のデファクトスタンダードとされる BLAS(Basic Linear Algebra Subprograms) 互換のアルゴリズム群、いくつかの LAPACK(Linear Algebra PACKage) 互換のアルゴリズムが提供される。
@@ -15,7 +16,7 @@ BLAS互換アルゴリズムは、演算対象データの次元数や計算オ
 例えば、2個の一般行列の積を求める`std::linalg::matrix_product`はLevel 3 BLASルーチン`xGEMM`に対応する。
 （実際のBLASルーチン名は、浮動小数点数型の単精度`S`／倍精度`D`とそれぞれの複素数版`C`,`Z`として、プレフィックス`x`部は文字4種類のいずれか。）
 
-また、多次元配列ビュー[`std::mdpan`](mdspan/mdspan.md)と組み合わせて利用する拡張機能が提供される。
+また、`std::mdspan`と組み合わせて利用する拡張機能が提供される。
 
 
 ## 共通要件
@@ -99,22 +100,38 @@ BLAS互換アルゴリズムは、演算対象データの次元数や計算オ
 | `triangular_matrix_matrix_right_solve` | xTRSM: 三角行列の連立一次方程式を解く (function template) | C++26 |
 
 
-## タグ型
+## タグ
+`&amp;lt;linalg&amp;gt;`ヘッダでは、行列の格納順序や三角行列の上下をタグを使って表現している。
 
-| 名前 | 説明 | 対応バージョン |
+以下、型名を掲載するが、定数も次のように定義されている。
+
+```cpp
+inline constexpr tag_name_t tag_name{};
+```
+
+### 格納順序
+行列の格納順序を表すタグ。
+
+| 型名 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`column_major_t`](linalg/column_major_t.md) | 列優先(column-major) | C++26 |
+| [`row_major_t`](linalg/row_major_t.md) | 行優先(row-major) | C++26 |
+
+### 三角行列
+上三角行列か下三角行列かを表すタグ。
+
+| 型名 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`upper_triangle_t`](linalg/upper_triangle_t.md) | 上三角行列 | C++26 |
+| [`lower_triangle_t`](linalg/lower_triangle_t.md) | 下三角行列 | C++26 |
+
+### 対角成分
+行列の全ての対角成分を暗黙に乗法における単位元とみなすかどうかを表すタグ。みなした場合、行列の対角成分にはアクセスせず、値が乗法における単位元であるとして計算する。
+
+| 型名 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`column_major_t`](linalg/column_major_t.md) | 列優先(column-major)順序を表現するためのタグ型 (class) | C++26 |
-| [`column_major`](linalg/column_major_t.md)   | 列優先(column-major)順序を表現するためのタグ値 (variable) | C++26 |
-| [`row_major_t`](linalg/row_major_t.md) | 行優先(row-major)順序を表現するためのタグ型 (class) | C++26 |
-| [`row_major`](linalg/row_major_t.md)   | 行優先(row-major)順序を表現するためのタグ値 (variable) | C++26 |
-| [`upper_triangle_t`](linalg/upper_triangle_t.md.nolink) | 上三角行列を表現するためのタグ型 (class) | C++26 |
-| [`upper_triangle`](linalg/upper_triangle_t.md.nolink)   | 上三角行列を表現するためのタグ値 (variable) | C++26 |
-| [`lower_triangle_t`](linalg/lower_triangle_t.md.nolink) | 下三角行列を表現するためのタグ型 (class) | C++26 |
-| [`lower_triangle`](linalg/lower_triangle_t.md.nolink)   | 下三角行列を表現するためのタグ値 (variable) | C++26 |
-| `implicit_unit_diagonal_t` | implicit unit diagonalを表現するためのタグ型 (class) | C++26 |
-| `implicit_unit_diagonal`   | implicit unit diagonalを表現するためのタグ値 (variable) | C++26 |
-| `explicit_diagonal_t` | explicit diagonalを表現するためのタグ型 (class) | C++26 |
-| `explicit_diagonal`   | explicit diagonalを表現するためのタグ値 (variable) | C++26 |
+| [`implicit_unit_diagonal_t`](linalg/implicit_unit_diagonal_t.md) | 全ての対角成分を暗黙に乗法における単位元とみなす | C++26 |
+| [`explicit_diagonal_t`](linalg/explicit_diagonal_t.md) | 全ての対角成分にアクセスする | C++26 |
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>explicit_diagonal_t -- Merge pull request #1279 from sukeya/linalg</title>
      <link href="https://cpprefjp.github.io/reference/linalg/explicit_diagonal_t.html"/>
      <id>add168511580e2f1cd88da5225538b21e811c602:reference/linalg/explicit_diagonal_t.md</id>
      <updated>2024-05-23T10:58:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/explicit_diagonal_t.md b/reference/linalg/explicit_diagonal_t.md
new file mode 100644
index 000000000..2a5c343d8
--- /dev/null
+++ b/reference/linalg/explicit_diagonal_t.md
@@ -0,0 +1,37 @@
+# explicit_diagonal_t
+* linalg[meta header]
+* class[meta id-type]
+* std::linalg[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::linalg {
+  struct explicit_diagonal_t { explicit explicit_diagonal_t() = default; };
+
+  inline constexpr explicit_diagonal_t explicit_diagonal{};
+}
+```
+
+## 概要
+`explicit_diagonal_t`は行列の対角成分が必要になった時、その成分にアクセスすることを表すタグ型である。
+
+`explicit_diagonal_t`型の定数`explicit_diagonal`が提供される。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+
+## 参照
+- [P1673R13 A free function linear algebra interface based on the BLAS](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1673r13.html)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>implicit_unit_diagonal_t -- Merge pull request #1279 from sukeya/linalg</title>
      <link href="https://cpprefjp.github.io/reference/linalg/implicit_unit_diagonal_t.html"/>
      <id>add168511580e2f1cd88da5225538b21e811c602:reference/linalg/implicit_unit_diagonal_t.md</id>
      <updated>2024-05-23T10:58:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/implicit_unit_diagonal_t.md b/reference/linalg/implicit_unit_diagonal_t.md
new file mode 100644
index 000000000..9ee392099
--- /dev/null
+++ b/reference/linalg/implicit_unit_diagonal_t.md
@@ -0,0 +1,37 @@
+# implicit_unit_diagonal_t
+* linalg[meta header]
+* class[meta id-type]
+* std::linalg[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::linalg {
+  struct implicit_unit_diagonal_t { explicit implicit_unit_diagonal_t() = default; };
+
+  inline constexpr implicit_unit_diagonal_t implicit_unit_diagonal{};
+}
+```
+
+## 概要
+`implicit_unit_diagonal_t`は、行列の全ての対角成分を暗黙に乗法における単位元とみなすことを表すタグ型である。このタグが渡されると、行列の対角成分が必要になった時、その成分にアクセスせず、乗法における単位元であるとして計算する。
+
+`implicit_unit_diagonal_t`型の定数`implicit_unit_diagonal`が提供される。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+
+## 参照
+- [P1673R13 A free function linear algebra interface based on the BLAS](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1673r13.html)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_blas_packed -- Merge pull request #1279 from sukeya/linalg</title>
      <link href="https://cpprefjp.github.io/reference/linalg/layout_blas_packed.html"/>
      <id>add168511580e2f1cd88da5225538b21e811c602:reference/linalg/layout_blas_packed.md</id>
      <updated>2024-05-23T10:58:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/layout_blas_packed.md b/reference/linalg/layout_blas_packed.md
index 67fd43010..27663437c 100644
--- a/reference/linalg/layout_blas_packed.md
+++ b/reference/linalg/layout_blas_packed.md
@@ -12,16 +12,16 @@ namespace std::linalg {
 ```
 
 ## 概要
-`layout_blas_packed`は、多次元配列ビュー[`mdspan`](/reference/mdspan/mdspan.md)を用いた正方行列(square matrix)に対して、BLASにおけるパックレイアウトと互換性のある行列要素メモリ配置を表現する[レイアウトマッピングポリシー](/reference/mdspan/LayoutMappingPolicy.md)クラスである。
+`layout_blas_packed`は、0でない成分だけを配列で過不足なく持つ三角行列を表す、多次元配列ビュー[`mdspan`](/reference/mdspan/mdspan.md)の[レイアウトマッピングポリシー](/reference/mdspan/LayoutMappingPolicy.md)クラスであり、BLASにおけるパックレイアウトと互換性がある。
 
-- `Triangle` : 指定する行列要素の種別を、上三角[`upper_triangle_t`](upper_triangle_t.md.nolink)または下三角[`lower_triangle_t`](lower_triangle_t.md.nolink)から指定する。
+- `Triangle` : 三角行列の種別を、上三角[`upper_triangle_t`](upper_triangle_t.md)または下三角[`lower_triangle_t`](lower_triangle_t.md)から指定する。
 - `StorageOrder` : 行列要素の格納順を、列優先[`column_major_t`](column_major_t.md)または行優先[`row_major_t`](row_major_t.md)から指定する。
 
-`layout_blas_packed`を用いて、BLASの Symmetric Packed (SP), Hermitian Packed (HP), Triangular Packed (TP) で利用される行列レイアウトを表現できる。
+`layout_blas_packed`は、BLASの Symmetric Packed (SP), Hermitian Packed (HP), Triangular Packed (TP) で利用される行列レイアウトを表す。
 
 
 ## 適格要件
-- `Triangle`は[`upper_triangle_t`](upper_triangle_t.md.nolink)または[`lower_triangle_t`](lower_triangle_t.md.nolink)のいずれか
+- `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)のいずれか
 - `StorageOrder`は[`column_major_t`](column_major_t.md)または[`row_major_t`](row_major_t.md)のいずれか
 
 
@@ -86,7 +86,7 @@ int main()
 }
 ```
 * linalg::layout_blas_packed[color ff0000]
-* linalg::lower_triangle_t[link lower_triangle_t.md.nolink]
+* linalg::lower_triangle_t[link lower_triangle_t.md]
 * linalg::column_major_t[link column_major_t.md]
 * linalg::row_major_t[link row_major_t.md]
 * mat.extent[link /reference/mdspan/mdspan/extent.md]
@@ -121,6 +121,10 @@ mat2:
 
 ## 関連項目
 - [`mdspan`](/reference/mdspan/mdspan.md)
+- [`upper_triangle_t`](upper_triangle_t.md)
+- [`lower_triangle_t`](lower_triangle_t.md)
+- [`column_major_t`](column_major_t.md)
+- [`row_major_t`](row_major_t.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lower_triangle_t -- Merge pull request #1279 from sukeya/linalg</title>
      <link href="https://cpprefjp.github.io/reference/linalg/lower_triangle_t.html"/>
      <id>add168511580e2f1cd88da5225538b21e811c602:reference/linalg/lower_triangle_t.md</id>
      <updated>2024-05-23T10:58:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/lower_triangle_t.md b/reference/linalg/lower_triangle_t.md
new file mode 100644
index 000000000..2cb069b2b
--- /dev/null
+++ b/reference/linalg/lower_triangle_t.md
@@ -0,0 +1,38 @@
+# lower_triangle_t
+* linalg[meta header]
+* class[meta id-type]
+* std::linalg[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::linalg {
+  struct lower_triangle_t { explicit lower_triangle_t() = default; };
+
+  inline constexpr lower_triangle_t lower_triangle{};
+}
+```
+
+## 概要
+`lower_triangle_t`は、行列が下三角行列であることを表すタグ型である。
+
+`lower_triangle_t`型の定数`lower_triangle`が提供される。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`layout_blas_packed`](layout_blas_packed.md)
+
+
+## 参照
+- [P1673R13 A free function linear algebra interface based on the BLAS](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1673r13.html)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>upper_triangle_t -- Merge pull request #1279 from sukeya/linalg</title>
      <link href="https://cpprefjp.github.io/reference/linalg/upper_triangle_t.html"/>
      <id>add168511580e2f1cd88da5225538b21e811c602:reference/linalg/upper_triangle_t.md</id>
      <updated>2024-05-23T10:58:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/upper_triangle_t.md b/reference/linalg/upper_triangle_t.md
new file mode 100644
index 000000000..f24981642
--- /dev/null
+++ b/reference/linalg/upper_triangle_t.md
@@ -0,0 +1,38 @@
+# upper_triangle_t
+* linalg[meta header]
+* class[meta id-type]
+* std::linalg[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::linalg {
+  struct upper_triangle_t { explicit upper_triangle_t() = default; };
+
+  inline constexpr upper_triangle_t upper_triangle{};
+}
+```
+
+## 概要
+`upper_triangle_t`は、行列が上三角行列であることを表すタグ型である。
+
+`upper_triangle_t`型の定数`upper_triangle`が提供される。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`layout_blas_packed`](layout_blas_packed.md)
+
+
+## 参照
+- [P1673R13 A free function linear algebra interface based on the BLAS](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1673r13.html)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>zoned_time -- fix typo: zoned_time のサンプルコード修正</title>
      <link href="https://cpprefjp.github.io/reference/chrono/zoned_time.html"/>
      <id>6e08bd6c0347b22fa88af6e1d4a6fa933bc75939:reference/chrono/zoned_time.md</id>
      <updated>2024-05-22T22:41:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/zoned_time.md b/reference/chrono/zoned_time.md
index 03d356f4a..2d11baae2 100644
--- a/reference/chrono/zoned_time.md
+++ b/reference/chrono/zoned_time.md
@@ -116,7 +116,7 @@ int main()
 
   // UTCタイムゾーンのシステム時間を、日本のローカル時間に変換
   chrono::local_time lt = chrono::zoned_time{&amp;#34;Asia/Tokyo&amp;#34;, now}.get_local_time();
-  std::cout &amp;lt;&amp;lt; &amp;#34;7 : &amp;#34;lt &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;7 : &amp;#34; &amp;lt;&amp;lt; lt &amp;lt;&amp;lt; std::endl;
 }
 ```
 * chrono::zoned_time[color ff0000]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Nagarei</name>
        <email>Nagarei@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-08-08T14:40:48.252698</updated>
  <id>6f312d6d-df6c-44d9-a155-e928c8de6c2d</id>

  
    <entry>
      <title>operator&lt;=&gt; -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_compare_3way.html"/>
      <id>c925d357c6d192dd1edca8e41f620f33c4a336aa:reference/iterator/basic_const_iterator/op_compare_3way.md</id>
      <updated>2023-08-04T15:20:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_compare_3way.md b/reference/iterator/basic_const_iterator/op_compare_3way.md
index 7ab85c95e..e4294b7c8 100644
--- a/reference/iterator/basic_const_iterator/op_compare_3way.md
+++ b/reference/iterator/basic_const_iterator/op_compare_3way.md
@@ -17,7 +17,7 @@ constexpr auto operator&amp;lt;=&amp;gt;(const I&amp;amp; y) const
 * different-from[link /reference/ranges/different-from.md]
 * random_access_iterator[link /reference/iterator/random_access_iterator.md]
 * three_way_comparable[link /reference/compare/three_way_comparable.md]
-* totally_ordered_with[link /reference/concepts/totally_ordered_with.md]
+* totally_ordered_with[link /reference/concepts/totally_ordered.md]
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_const_iterator -- basic_const_iterator : == &lt;=&gt;追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator.html"/>
      <id>09c1ad78bd5be675d94afdc1e49adcaa6ff7ca4d:reference/iterator/basic_const_iterator.md</id>
      <updated>2023-08-04T15:07:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator.md b/reference/iterator/basic_const_iterator.md
index 1a27d9853..a6d62a285 100644
--- a/reference/iterator/basic_const_iterator.md
+++ b/reference/iterator/basic_const_iterator.md
@@ -30,13 +30,13 @@ namespace std {
 | [`operator-=`](basic_const_iterator/op_minus_assign.md)   | イテレータ自身を逆に進める | C++23 |
 | [`operator-`](basic_const_iterator/op_minus.md)          | 2つの`basic_const_iterator`の差を求める | C++23 |
 | [`operator[]`](basic_const_iterator/op_at.md)             | 任意の位置にランダムアクセスする | C++23 |
-| [`operator==`](basic_const_iterator/op_equal.md.nolink)         | 等値比較 | C++23 |
-| [`operator!=`](basic_const_iterator/op_equal.md.nolink)     | 非等値比較 | C++23 |
+| [`operator==`](basic_const_iterator/op_equal.md)         | 等値比較 | C++23 |
+| `operator!=`     | 非等値比較 ([`==`](basic_const_iterator/op_equal.md)により使用可能) | C++23 |
 | [`operator&amp;lt;`](basic_const_iterator/op_less.md.nolink)           | 左辺が右辺より小さいかの判定を行う | C++23 |
 | [`operator&amp;lt;=`](basic_const_iterator/op_less_equal.md.nolink)    | 左辺が右辺以下かの判定を行う | C++23 |
 | [`operator&amp;gt;`](basic_const_iterator/op_greater.md.nolink)        | 左辺が右辺より大きいかの判定を行う | C++23 |
 | [`operator&amp;gt;=`](basic_const_iterator/op_greater_equal.md.nolink) | 左辺が右辺以上かの判定を行う | C++23 |
-| [`operator&amp;lt;=&amp;gt;`](basic_const_iterator/op_compare_3way.md.nolink)           | 三方比較を行う | C++23 |
+| [`operator&amp;lt;=&amp;gt;`](basic_const_iterator/op_compare_3way.md)           | 三方比較を行う | C++23 |
 
 
 ## メンバ型
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- basic_const_iterator : == &lt;=&gt;追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_compare_3way.html"/>
      <id>09c1ad78bd5be675d94afdc1e49adcaa6ff7ca4d:reference/iterator/basic_const_iterator/op_compare_3way.md</id>
      <updated>2023-08-04T15:07:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_compare_3way.md b/reference/iterator/basic_const_iterator/op_compare_3way.md
new file mode 100644
index 000000000..7ab85c95e
--- /dev/null
+++ b/reference/iterator/basic_const_iterator/op_compare_3way.md
@@ -0,0 +1,103 @@
+# operator&amp;lt;=&amp;gt;
+* iterator[meta header]
+* std[meta namespace]
+* basic_const_iterator[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto operator&amp;lt;=&amp;gt;(const basic_const_iterator&amp;amp; y) const
+  requires random_access_iterator&amp;lt;Iterator&amp;gt; &amp;amp;&amp;amp; three_way_comparable&amp;lt;Iterator&amp;gt;;          // (1)
+
+template&amp;lt;different-from&amp;lt;basic_const_iterator&amp;gt; I&amp;gt;
+constexpr auto operator&amp;lt;=&amp;gt;(const I&amp;amp; y) const
+  requires random_access_iterator&amp;lt;Iterator&amp;gt; &amp;amp;&amp;amp; totally_ordered_with&amp;lt;Iterator, I&amp;gt; &amp;amp;&amp;amp;
+           three_way_comparable_with&amp;lt;Iterator, I&amp;gt;;                                      // (2)
+```
+* different-from[link /reference/ranges/different-from.md]
+* random_access_iterator[link /reference/iterator/random_access_iterator.md]
+* three_way_comparable[link /reference/compare/three_way_comparable.md]
+* totally_ordered_with[link /reference/concepts/totally_ordered_with.md]
+
+## 概要
+
+
+`basic_const_iterator&amp;lt;Iterator&amp;gt;`オブジェクトと別のイテレータ（`basic_const_iterator&amp;lt;Iterator&amp;gt;`か`Iterator`、`Iterator`と比較可能なオブジェクト）の三方比較を行う。
+
+- (1) : `basic_const_iterator`同士の比較を行う
+- (2) : ラップしているイテレータ（`Iterator`）と直接比較可能な型との間で比較を行う
+
+## 効果
+
+ラップするイテレータを`current_`というメンバに保持するとして
+
+- (1) : 以下と等価  
+    ```cpp
+    return current_ &amp;lt;=&amp;gt; y.current_;
+    ```
+
+- (2) : 以下と等価  
+    ```cpp
+    return current_ &amp;lt;=&amp;gt; y;
+    ```
+
+## 備考
+
+(2)の演算子により以下の演算子が使用可能になる（制約は同じものが適用される）。
+
+```cpp
+// 逆順
+template&amp;lt;different-from&amp;lt;basic_const_iterator&amp;gt; I&amp;gt;
+friend constexpr auto operator&amp;lt;=&amp;gt;(const I&amp;amp;, const basic_const_iterator&amp;amp;);
+```
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;compare&amp;gt;
+
+int main() {
+  std::vector vec = {1, 2, 3, 4, 5};
+
+  std::basic_const_iterator cit = vec.begin();
+  auto se = vec.end();
+  std::basic_const_iterator cse = se;
+
+
+  std::cout &amp;lt;&amp;lt; std::boolalpha;
+
+  // (1) basic_const_iterator同士の比較
+  std::cout &amp;lt;&amp;lt; std::is_lt(cit &amp;lt;=&amp;gt; cse) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; std::is_lt(cse &amp;lt;=&amp;gt; cit) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  // (2) 元のイテレータとの比較
+  std::cout &amp;lt;&amp;lt; std::is_lt(cit &amp;lt;=&amp;gt; se) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; std::is_lt(se &amp;lt;=&amp;gt; cit) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* &amp;lt;=&amp;gt;[color ff0000]
+* is_lt[link /reference/compare/named_comparison_functions.md]
+
+### 出力
+
+```
+true
+false
+true
+false
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- basic_const_iterator : == &lt;=&gt;追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_equal.html"/>
      <id>09c1ad78bd5be675d94afdc1e49adcaa6ff7ca4d:reference/iterator/basic_const_iterator/op_equal.md</id>
      <updated>2023-08-04T15:07:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_equal.md b/reference/iterator/basic_const_iterator/op_equal.md
new file mode 100644
index 000000000..d9bfd98ec
--- /dev/null
+++ b/reference/iterator/basic_const_iterator/op_equal.md
@@ -0,0 +1,104 @@
+# operator==
+* iterator[meta header]
+* std[meta namespace]
+* basic_const_iterator[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;sentinel_for&amp;lt;Iterator&amp;gt; S&amp;gt;
+constexpr bool operator==(const S&amp;amp; s) const;
+```
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+
+## 概要
+
+`basic_const_iterator&amp;lt;Iterator&amp;gt;`オブジェクトと別のイテレータ（`basic_const_iterator&amp;lt;Iterator&amp;gt;`か`Iterator`のオブジェクト）が同じ要素を指しているかを判定する。
+
+## 効果
+
+ラップしているイテレータを`current_`メンバ変数に保持するとして、以下と等価
+
+```cpp
+return current_ == s;
+```
+
+## 戻り値
+
+2つのイテレータが同じ要素を指している場合に`true`を返す。
+
+
+## 備考
+
+この演算子により以下の演算子が使用可能になる。
+
+```cpp
+// !=
+template&amp;lt;sentinel_for&amp;lt;Iterator&amp;gt; S&amp;gt;
+constexpr bool operator!=(const S&amp;amp;) const;
+
+// 逆順
+template&amp;lt;sentinel_for&amp;lt;Iterator&amp;gt; S&amp;gt;
+friend constexpr bool operator==(const S&amp;amp;, const basic_const_iterator&amp;lt;Iterator&amp;gt;&amp;amp;);
+
+template&amp;lt;sentinel_for&amp;lt;Iterator&amp;gt; S&amp;gt;
+friend constexpr bool operator!=(const S&amp;amp;, const basic_const_iterator&amp;lt;Iterator&amp;gt;&amp;amp;);
+```
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector vec = {1, 2, 3, 4, 5};
+
+  std::basic_const_iterator cit = vec.begin();
+  auto se = vec.end();
+
+  std::cout &amp;lt;&amp;lt; std::boolalpha;
+
+  // 元のイテレータとの比較
+  std::cout &amp;lt;&amp;lt; (cit == se) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; (se == cit) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  std::basic_const_iterator cse = se;
+
+  // basic_const_iterator同士の比較
+  std::cout &amp;lt;&amp;lt; (cit == cse) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; (cse == cit) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  // !=の導出
+  std::cout &amp;lt;&amp;lt; (cit != se) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; (se != cit) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; (cit != cse) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; (cse != cit) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* ==[color ff0000]
+
+### 出力
+```
+false
+false
+false
+false
+true
+true
+true
+true
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_const_iterator -- basic_const_iterator : [] - + 追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator.html"/>
      <id>b2a86ccbe173e1fbd007d9d0ea07652815f60961:reference/iterator/basic_const_iterator.md</id>
      <updated>2023-08-03T14:57:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator.md b/reference/iterator/basic_const_iterator.md
index 7f5ee0d71..1a27d9853 100644
--- a/reference/iterator/basic_const_iterator.md
+++ b/reference/iterator/basic_const_iterator.md
@@ -27,9 +27,9 @@ namespace std {
 | [`operator++`](basic_const_iterator/op_increment.md)      | イテレータをインクリメントする | C++23 |
 | [`operator--`](basic_const_iterator/op_decrement.md)      | イテレータをデクリメントする | C++23 |
 | [`operator+=`](basic_const_iterator/op_plus_assign.md)    | イテレータ自身を進める | C++23 |
-| [`operator-`](basic_const_iterator/op_unary_minus.md.nolink)     | イテレータを逆に進める | C++23 |
 | [`operator-=`](basic_const_iterator/op_minus_assign.md)   | イテレータ自身を逆に進める | C++23 |
-| [`operator[]`](basic_const_iterator/op_at.md.nolink)             | 任意の位置にランダムアクセスする | C++23 |
+| [`operator-`](basic_const_iterator/op_minus.md)          | 2つの`basic_const_iterator`の差を求める | C++23 |
+| [`operator[]`](basic_const_iterator/op_at.md)             | 任意の位置にランダムアクセスする | C++23 |
 | [`operator==`](basic_const_iterator/op_equal.md.nolink)         | 等値比較 | C++23 |
 | [`operator!=`](basic_const_iterator/op_equal.md.nolink)     | 非等値比較 | C++23 |
 | [`operator&amp;lt;`](basic_const_iterator/op_less.md.nolink)           | 左辺が右辺より小さいかの判定を行う | C++23 |
@@ -37,8 +37,6 @@ namespace std {
 | [`operator&amp;gt;`](basic_const_iterator/op_greater.md.nolink)        | 左辺が右辺より大きいかの判定を行う | C++23 |
 | [`operator&amp;gt;=`](basic_const_iterator/op_greater_equal.md.nolink) | 左辺が右辺以上かの判定を行う | C++23 |
 | [`operator&amp;lt;=&amp;gt;`](basic_const_iterator/op_compare_3way.md.nolink)           | 三方比較を行う | C++23 |
-| [`operator-`](basic_const_iterator/op_minus.md.nolink)          | 2つの`basic_const_iterator`の差を求める | C++23 |
-| [`operator+`](basic_const_iterator/op_plus.md.nolink)           | イテレータを進める | C++23 |
 
 
 ## メンバ型
@@ -71,8 +69,9 @@ namespace std {
 | [`operator&amp;lt;=`](basic_const_iterator/op_less_equal.md.nolink)    | 左辺が右辺以下かの判定を行う | C++23 |
 | [`operator&amp;gt;`](basic_const_iterator/op_greater.md.nolink)        | 左辺が右辺より大きいかの判定を行う | C++23 |
 | [`operator&amp;gt;=`](basic_const_iterator/op_greater_equal.md.nolink) | 左辺が右辺以上かの判定を行う | C++23 |
-| [`operator+`](basic_const_iterator/op_plus.md.nolink)           | イテレータを進める | C++23 |
-| [`operator-`](basic_const_iterator/op_minus.md.nolink)          | 2つの`basic_const_iterator`の差を求める | C++23 |
+| [`operator+`](basic_const_iterator/op_plus.md)           | イテレータを進める | C++23 |
+| [`operator-`](basic_const_iterator/op_unary_minus.md)     | イテレータを逆に進める | C++23 |
+| [`operator-`](basic_const_iterator/op_minus.md)          | 2つの`basic_const_iterator`の差を求める | C++23 |
 | [`iter_move`](basic_const_iterator/iter_move.md.nolink)     | イテレータの要素の移動 | C++23 |
 
 ## 非メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator[] -- basic_const_iterator : [] - + 追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_at.html"/>
      <id>b2a86ccbe173e1fbd007d9d0ea07652815f60961:reference/iterator/basic_const_iterator/op_at.md</id>
      <updated>2023-08-03T14:57:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_at.md b/reference/iterator/basic_const_iterator/op_at.md
new file mode 100644
index 000000000..00f9f55a8
--- /dev/null
+++ b/reference/iterator/basic_const_iterator/op_at.md
@@ -0,0 +1,64 @@
+# operator[]
+* iterator[meta header]
+* std[meta namespace]
+* basic_const_iterator[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr reference operator[](difference_type n) const
+  requires random_access_iterator&amp;lt;Iterator&amp;gt;;
+```
+* random_access_iterator[link /reference/iterator/random_access_iterator.md]
+
+## 概要
+
+任意の位置にランダムアクセスする。
+
+戻り値型`reference`は、[`iter_const_reference_t`](/reference/iterator/iter_const_reference_t.md)`&amp;lt;Iterator&amp;gt;`のエイリアス。
+
+## 効果
+
+ラップしているイテレータを`current_`メンバ変数に保持するとして、以下と等価
+
+```cpp
+return static_cast&amp;lt;reference&amp;gt;(current_[n]);
+```
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector vec = {1, 2, 3, 4, 5};
+
+  std::basic_const_iterator cit = vec.begin();
+
+  std::cout &amp;lt;&amp;lt; cit[2] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; cit[4] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  // 要素を変更できない
+  // cit[0] = 0;
+}
+```
+
+### 出力
+```
+3
+5
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator- -- basic_const_iterator : [] - + 追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_minus.html"/>
      <id>b2a86ccbe173e1fbd007d9d0ea07652815f60961:reference/iterator/basic_const_iterator/op_minus.md</id>
      <updated>2023-08-03T14:57:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_minus.md b/reference/iterator/basic_const_iterator/op_minus.md
new file mode 100644
index 000000000..76a2945f0
--- /dev/null
+++ b/reference/iterator/basic_const_iterator/op_minus.md
@@ -0,0 +1,93 @@
+# operator-
+* iterator[meta header]
+* std[meta namespace]
+* basic_const_iterator[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;sized_sentinel_for&amp;lt;Iterator&amp;gt; S&amp;gt;
+constexpr difference_type operator-(const S&amp;amp; y) const;  // (1)
+
+template&amp;lt;not-a-const-iterator S&amp;gt;
+  requires sized_sentinel_for&amp;lt;S, Iterator&amp;gt;
+friend constexpr difference_type operator-(const S&amp;amp; x, const basic_const_iterator&amp;amp; y);  // (2) 非メンバ関数
+```
+* sized_sentinel_for[link /reference/iterator/sized_sentinel_for.md]
+
+## 概要
+
+`basic_const_iterator`の間、もしくは`Iterator`に対応する番兵との間の距離を計算する。
+
+`basic_const_iterator&amp;lt;Iterator&amp;gt;`のオブジェクトを`i`、`Iterator`に対応する番兵型のオブジェクトを`s`とすると
+
+- (1) : `i - s`のためのオーバーロード
+- (2) : `s - i`のためのオーバーロード
+
+## テンプレートパラメータ制約
+
+`not-a-const-iterator&amp;lt;I&amp;gt;`は`I`が`basic_const_iterator`の特殊化ではない場合に`true`となる説明専用のコンセプトである。
+
+## 効果
+
+ラップしているイテレータを`current_`メンバ変数に保持するとして
+
+- (1) : 以下と等価
+    ```cpp
+    return current_ - y;
+    ```
+
+- (2) : 以下と等価
+    ```cpp
+    return x - y.current_;
+    ```
+
+## 備考
+
+(2)の関数は[*Hidden friends*](/article/lib/hidden_friends.md)として定義される。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector vec = {1, 2, 3, 4, 5};
+
+  std::basic_const_iterator cit = vec.begin();
+  auto se = vec.end();
+
+  // 元のイテレータの番兵との間で距離計算
+  std::cout &amp;lt;&amp;lt; (cit - se) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; (se - cit) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  std::basic_const_iterator cse = se;
+
+  // basic_const_iterator同士で距離計算
+  // (1) -&amp;gt; (2)と呼ばれることで内部イテレータ同士の距離計算を行う
+  std::cout &amp;lt;&amp;lt; (cit - cse) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; (cse - cit) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+
+### 出力
+```
+-5
+5
+-5
+5
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator+ (非メンバ関数) -- basic_const_iterator : [] - + 追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_plus.html"/>
      <id>b2a86ccbe173e1fbd007d9d0ea07652815f60961:reference/iterator/basic_const_iterator/op_plus.md</id>
      <updated>2023-08-03T14:57:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_plus.md b/reference/iterator/basic_const_iterator/op_plus.md
new file mode 100644
index 000000000..6b8648674
--- /dev/null
+++ b/reference/iterator/basic_const_iterator/op_plus.md
@@ -0,0 +1,74 @@
+# operator+ (非メンバ関数)
+* iterator[meta header]
+* std[meta namespace]
+* basic_const_iterator[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+friend constexpr basic_const_iterator operator+(const basic_const_iterator&amp;amp; i, difference_type n)
+  requires random_access_iterator&amp;lt;Iterator&amp;gt;;                                                        // (1)
+
+friend constexpr basic_const_iterator operator+(difference_type n, const basic_const_iterator&amp;amp; i)   // (2)
+```
+* random_access_iterator[link /reference/iterator/random_access_iterator.md]
+
+## 概要
+
+イテレータを`n`回進める。
+
+## 効果
+
+ラップしているイテレータを`current_`メンバ変数に保持するとして、以下と等価
+
+```cpp
+return basic_const_iterator(i.current_ + n);
+```
+
+## 戻り値
+
+現在位置から`n`戻したイテレータのコピーを返す。
+
+## 備考
+
+これらの関数は全て[*Hidden friends*](/article/lib/hidden_friends.md)として定義される。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector vec = {1, 2, 3, 4, 5};
+
+  std::basic_const_iterator cit = vec.end();
+
+  auto cit2 = cit + 3;
+  auto cit3 = 4 + cit;
+
+  std::cout &amp;lt;&amp;lt; *cit &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; *cit2 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; *cit3 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+
+### 出力
+```
+1
+4
+5
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator- (非メンバ関数) -- basic_const_iterator : [] - + 追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_unary_minus.html"/>
      <id>b2a86ccbe173e1fbd007d9d0ea07652815f60961:reference/iterator/basic_const_iterator/op_unary_minus.md</id>
      <updated>2023-08-03T14:57:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_unary_minus.md b/reference/iterator/basic_const_iterator/op_unary_minus.md
new file mode 100644
index 000000000..5e991296d
--- /dev/null
+++ b/reference/iterator/basic_const_iterator/op_unary_minus.md
@@ -0,0 +1,69 @@
+# operator- (非メンバ関数)
+* iterator[meta header]
+* std[meta namespace]
+* basic_const_iterator[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+friend constexpr basic_const_iterator operator-(const basic_const_iterator&amp;amp; i, difference_type n)
+  requires random_access_iterator&amp;lt;Iterator&amp;gt;;
+```
+* random_access_iterator[link /reference/iterator/random_access_iterator.md]
+
+## 概要
+
+イテレータを`n`回逆に進める。
+
+## 効果
+
+ラップしているイテレータを`current_`メンバ変数に保持するとして、以下と等価
+
+```cpp
+return basic_const_iterator(i.current_ - n);
+```
+
+## 戻り値
+
+現在位置から`n`戻したイテレータのコピーを返す。
+
+## 備考
+
+この関数は[*Hidden friends*](/article/lib/hidden_friends.md)として定義される。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector vec = {1, 2, 3, 4, 5};
+
+  std::basic_const_iterator cit = vec.end();
+
+  auto cit2 = cit - 3;
+
+  std::cout &amp;lt;&amp;lt; *cit &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; *cit2 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+
+### 出力
+```
+0
+3
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>random -- Merge pull request #1164 from yknishidate/remove-conversion</title>
      <link href="https://cpprefjp.github.io/reference/random.html"/>
      <id>2f7d33b23420b6c92960f5d1df1a73a780e08566:reference/random.md</id>
      <updated>2023-08-03T13:43:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random.md b/reference/random.md
index 15257500b..857ce52f6 100644
--- a/reference/random.md
+++ b/reference/random.md
@@ -170,8 +170,8 @@ int main()
   std::ofstream file(&amp;#34;random.tsv&amp;#34;);
   for (size_t i = 0; i &amp;lt; 1000*1000; ++i) {
     // 各分布法に基いて乱数を生成
-    double r1 = dist1(engine);
-    double r2 = dist2(engine);
+    float r1 = dist1(engine);
+    float r2 = dist2(engine);
 
     file &amp;lt;&amp;lt; r1 &amp;lt;&amp;lt; &amp;#34;\t&amp;#34; &amp;lt;&amp;lt; r2 &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
   }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>random -- 生成した乱数のimplicit conversionを削除</title>
      <link href="https://cpprefjp.github.io/reference/random.html"/>
      <id>e279f872bff98b0808beec6ee224d5c7ea009811:reference/random.md</id>
      <updated>2023-08-03T01:24:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random.md b/reference/random.md
index 15257500b..857ce52f6 100644
--- a/reference/random.md
+++ b/reference/random.md
@@ -170,8 +170,8 @@ int main()
   std::ofstream file(&amp;#34;random.tsv&amp;#34;);
   for (size_t i = 0; i &amp;lt; 1000*1000; ++i) {
     // 各分布法に基いて乱数を生成
-    double r1 = dist1(engine);
-    double r2 = dist2(engine);
+    float r1 = dist1(engine);
+    float r2 = dist2(engine);
 
     file &amp;lt;&amp;lt; r1 &amp;lt;&amp;lt; &amp;#34;\t&amp;#34; &amp;lt;&amp;lt; r2 &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
   }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>nishidate-yuki</name>
        <email>yuki18425@gmail.com</email>
      </author>
    </entry>
  
</feed>
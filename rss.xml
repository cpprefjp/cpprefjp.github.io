<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-12-29T14:38:06.609117</updated>
  <id>06cbdec7-33e2-4546-a561-ec1509bbfd5f</id>

  
    <entry>
      <title>emplace -- Merge pull request #1224 from ToruNiina/optional-member-methods-constexpr</title>
      <link href="https://cpprefjp.github.io/reference/optional/optional/emplace.html"/>
      <id>15d43d14a2bb4fa90581733b9d66184888e5e4b4:reference/optional/optional/emplace.md</id>
      <updated>2023-12-29T19:39:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/optional/optional/emplace.md b/reference/optional/optional/emplace.md
index 23aa12b98..35d5406d6 100644
--- a/reference/optional/optional/emplace.md
+++ b/reference/optional/optional/emplace.md
@@ -7,10 +7,14 @@
 
 ```cpp
 template &amp;lt;class... Args&amp;gt;
-T&amp;amp; emplace(Args&amp;amp;&amp;amp;... args);                              // (1)
+T&amp;amp; emplace(Args&amp;amp;&amp;amp;... args);                                        // (1) C++17
+template &amp;lt;class... Args&amp;gt;
+constexpr T&amp;amp; emplace(Args&amp;amp;&amp;amp;... args);                              // (1) C++23
 
 template &amp;lt;class U, class... Args&amp;gt;
-T&amp;amp; emplace(std::initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args); // (2)
+T&amp;amp; emplace(std::initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args);           // (2) C++17
+template &amp;lt;class U, class... Args&amp;gt;
+constexpr T&amp;amp; emplace(std::initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args); // (2) C++23
 ```
 
 ## 概要
@@ -109,3 +113,4 @@ int main()
 - [N3406 A proposal to add a utility class to represent optional objects (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3406.html)
 - [LWG Issue 2857. {`variant`,`optional`,`any`}`::emplace` should return the constructed value](https://wg21.cmeerw.net/lwg/issue2857)
 - [P0084R2 Emplace Return Type (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0084r2.pdf)
+- [P2231R1 Missing `constexpr` in `std::optional` and `std::variant`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2231r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Toru Niina</name>
        <email>niina.toru.68u@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- Merge pull request #1224 from ToruNiina/optional-member-methods-constexpr</title>
      <link href="https://cpprefjp.github.io/reference/optional/optional/op_assign.html"/>
      <id>15d43d14a2bb4fa90581733b9d66184888e5e4b4:reference/optional/optional/op_assign.md</id>
      <updated>2023-12-29T19:39:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/optional/optional/op_assign.md b/reference/optional/optional/op_assign.md
index 35b915676..68749dd03 100644
--- a/reference/optional/optional/op_assign.md
+++ b/reference/optional/optional/op_assign.md
@@ -6,20 +6,29 @@
 * cpp17[meta cpp]
 
 ```cpp
-optional&amp;lt;T&amp;gt;&amp;amp; operator=(nullopt_t rhs) noexcept;          // (1)
+optional&amp;lt;T&amp;gt;&amp;amp; operator=(nullopt_t rhs) noexcept;                    // (1) C++17
+constexpr optional&amp;lt;T&amp;gt;&amp;amp; operator=(nullopt_t rhs) noexcept;          // (1) C++23
 
-optional&amp;amp; operator=(const optional&amp;amp; rhs);                // (2)
+optional&amp;amp; operator=(const optional&amp;amp; rhs);                          // (2) C++17
+constexpr optional&amp;amp; operator=(const optional&amp;amp; rhs);                // (2) C++20
 
-optional&amp;amp; operator=(optional&amp;amp;&amp;amp; rhs) noexcept(see below); // (3)
+optional&amp;amp; operator=(optional&amp;amp;&amp;amp; rhs) noexcept(see below);           // (3) C++17
+constexpr optional&amp;amp; operator=(optional&amp;amp;&amp;amp; rhs) noexcept(see below); // (3) C++20
 
 template &amp;lt;class U = T&amp;gt;
-optional&amp;amp; operator=(U&amp;amp;&amp;amp; rhs);                            // (4)
+optional&amp;amp; operator=(U&amp;amp;&amp;amp; rhs);                                      // (4) C++17
+template &amp;lt;class U = T&amp;gt;
+constexpr optional&amp;amp; operator=(U&amp;amp;&amp;amp; rhs);                            // (4) C++23
 
 template &amp;lt;class U&amp;gt;
-optional&amp;amp; operator=(const optional&amp;lt;U&amp;gt;&amp;amp; rhs);             // (5)
+optional&amp;amp; operator=(const optional&amp;lt;U&amp;gt;&amp;amp; rhs);                       // (5) C++17
+template &amp;lt;class U&amp;gt;
+constexpr optional&amp;amp; operator=(const optional&amp;lt;U&amp;gt;&amp;amp; rhs);             // (5) C++23
 
 template &amp;lt;class U&amp;gt;
-optional&amp;amp; operator=(optional&amp;lt;U&amp;gt;&amp;amp;&amp;amp; rhs);                  // (6)
+optional&amp;amp; operator=(optional&amp;lt;U&amp;gt;&amp;amp;&amp;amp; rhs);                            // (6) C++17
+template &amp;lt;class U&amp;gt;
+constexpr optional&amp;amp; operator=(optional&amp;lt;U&amp;gt;&amp;amp;&amp;amp; rhs);                  // (6) C++23
 ```
 * see below[italic]
 * nullopt_t[link /reference/optional/nullopt_t.md]
@@ -170,4 +179,5 @@ int main()
 
 ## 参照
 - [LWG Issue 2756. `optional&amp;lt;T&amp;gt;` should `forward` `T`&amp;#39;s implicit conversions](https://wg21.cmeerw.net/lwg/issue2756)
-- [P0602R4 `variant` and `optional` should propagate copy/move triviality](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0602r4.html)
\ No newline at end of file
+- [P0602R4 `variant` and `optional` should propagate copy/move triviality](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0602r4.html)
+- [P2231R1 Missing `constexpr` in `std::optional` and `std::variant`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2231r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Toru Niina</name>
        <email>niina.toru.68u@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1224 from ToruNiina/optional-member-methods-constexpr</title>
      <link href="https://cpprefjp.github.io/reference/optional/optional/op_constructor.html"/>
      <id>15d43d14a2bb4fa90581733b9d66184888e5e4b4:reference/optional/optional/op_constructor.md</id>
      <updated>2023-12-29T19:39:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/optional/optional/op_constructor.md b/reference/optional/optional/op_constructor.md
index 13af1f564..f5e34ceda 100644
--- a/reference/optional/optional/op_constructor.md
+++ b/reference/optional/optional/op_constructor.md
@@ -6,34 +6,38 @@
 * cpp17[meta cpp]
 
 ```cpp
-constexpr optional() noexcept;                           // (1) C++17
-constexpr optional(nullopt_t) noexcept;                  // (2) C++17
-constexpr optional(const optional&amp;amp; rhs);                 // (3) C++17
-constexpr optional(optional&amp;amp;&amp;amp; rhs) noexcept(see below);  // (4) C++17
+constexpr optional() noexcept;                                  // (1) C++17
+constexpr optional(nullopt_t) noexcept;                         // (2) C++17
+constexpr optional(const optional&amp;amp; rhs);                        // (3) C++17
+constexpr optional(optional&amp;amp;&amp;amp; rhs) noexcept(see below);         // (4) C++17
 
 template &amp;lt;class... Args&amp;gt;
-constexpr explicit optional(in_place_t, Args&amp;amp;&amp;amp;... args); // (5) C++17
+constexpr explicit optional(in_place_t, Args&amp;amp;&amp;amp;... args);        // (5) C++17
 
 template &amp;lt;class U, class... Args&amp;gt;
 constexpr explicit optional(
                      in_place_t,
                      initializer_list&amp;lt;U&amp;gt; il,
-                     Args&amp;amp;&amp;amp;... args);                    // (6) C++17
+                     Args&amp;amp;&amp;amp;... args);                           // (6) C++17
 
 template &amp;lt;class U = T&amp;gt;
-EXPLICIT constexpr optional(U&amp;amp;&amp;amp; rhs);                    // (7) C++17
+EXPLICIT constexpr optional(U&amp;amp;&amp;amp; rhs);                           // (7) C++17
 template &amp;lt;class U = T&amp;gt;
-explicit(see below) constexpr optional(U&amp;amp;&amp;amp; rhs);         // (7) C++20
+explicit(see below) constexpr optional(U&amp;amp;&amp;amp; rhs);                // (7) C++20
 
 template &amp;lt;class U&amp;gt;
-EXPLICIT optional(const optional&amp;lt;U&amp;gt;&amp;amp; rhs);               // (8) C++17
+EXPLICIT optional(const optional&amp;lt;U&amp;gt;&amp;amp; rhs);                      // (8) C++17
 template &amp;lt;class U&amp;gt;
-explicit(see below) optional(const optional&amp;lt;U&amp;gt;&amp;amp; rhs);    // (8) C++20
+explicit(see below) optional(const optional&amp;lt;U&amp;gt;&amp;amp; rhs);           // (8) C++20
+template &amp;lt;class U&amp;gt;
+explicit(see below) constexpr optional(const optional&amp;lt;U&amp;gt;&amp;amp; rhs); // (8) C++23
 
 template &amp;lt;class U&amp;gt;
-EXPLICIT optional(optional&amp;lt;U&amp;gt;&amp;amp;&amp;amp; rhs);                    // (9) C++17
+EXPLICIT optional(optional&amp;lt;U&amp;gt;&amp;amp;&amp;amp; rhs);                           // (9) C++17
+template &amp;lt;class U&amp;gt;
+explicit(see below) optional(optional&amp;lt;U&amp;gt;&amp;amp;&amp;amp; rhs);                // (9) C++20
 template &amp;lt;class U&amp;gt;
-explicit(see below) optional(optional&amp;lt;U&amp;gt;&amp;amp;&amp;amp; rhs);         // (9) C++20
+explicit(see below) constexpr optional(optional&amp;lt;U&amp;gt;&amp;amp;&amp;amp; rhs);      // (9) C++23
 ```
 * see below[italic]
 * EXPLICIT[italic]
@@ -227,3 +231,4 @@ int main()
 - [P0892R2 `explicit(bool)`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0892r2.html)
     - C++20での`explicit(bool)`構文への対応
 - [P0602R4 `variant` and `optional` should propagate copy/move triviality](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0602r4.html)
+- [P2231R1 Missing `constexpr` in `std::optional` and `std::variant`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2231r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Toru Niina</name>
        <email>niina.toru.68u@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- Merge pull request #1224 from ToruNiina/optional-member-methods-constexpr</title>
      <link href="https://cpprefjp.github.io/reference/optional/optional/op_destructor.html"/>
      <id>15d43d14a2bb4fa90581733b9d66184888e5e4b4:reference/optional/optional/op_destructor.md</id>
      <updated>2023-12-29T19:39:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/optional/optional/op_destructor.md b/reference/optional/optional/op_destructor.md
index e0171f5ef..94c1610c1 100644
--- a/reference/optional/optional/op_destructor.md
+++ b/reference/optional/optional/op_destructor.md
@@ -6,7 +6,8 @@
 * cpp17[meta cpp]
 
 ```cpp
-~optional();
+~optional();           // C++17
+constexpr ~optional(); // C++23
 ```
 
 ## 概要
@@ -70,3 +71,4 @@ int main()
 ## 関連項目
 - [`std::vector`クラスのデストラクタ](/reference/vector/vector/op_destructor.md)
 - [`std::is_trivially_destructible`](/reference/type_traits/is_trivially_destructible.md)
+- [P2231R1 Missing `constexpr` in `std::optional` and `std::variant`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2231r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Toru Niina</name>
        <email>niina.toru.68u@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reset -- Merge pull request #1224 from ToruNiina/optional-member-methods-constexpr</title>
      <link href="https://cpprefjp.github.io/reference/optional/optional/reset.html"/>
      <id>15d43d14a2bb4fa90581733b9d66184888e5e4b4:reference/optional/optional/reset.md</id>
      <updated>2023-12-29T19:39:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/optional/optional/reset.md b/reference/optional/optional/reset.md
index 8e4ac2141..60017468d 100644
--- a/reference/optional/optional/reset.md
+++ b/reference/optional/optional/reset.md
@@ -6,7 +6,8 @@
 * cpp17[meta cpp]
 
 ```cpp
-void reset() noexcept;
+void reset() noexcept;           // (1) C++17
+constexpr void reset() noexcept; // (1) C++23
 ```
 
 ## 概要
@@ -62,3 +63,4 @@ int main()
 ## 関連項目
 - [`std::vector`クラスのデストラクタ](/reference/vector/vector/op_destructor.md)
 - [`std::is_trivially_destructible`](/reference/type_traits/is_trivially_destructible.md)
+- [P2231R1 Missing `constexpr` in `std::optional` and `std::variant`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2231r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Toru Niina</name>
        <email>niina.toru.68u@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- Merge pull request #1224 from ToruNiina/optional-member-methods-constexpr</title>
      <link href="https://cpprefjp.github.io/reference/optional/optional/swap.html"/>
      <id>15d43d14a2bb4fa90581733b9d66184888e5e4b4:reference/optional/optional/swap.md</id>
      <updated>2023-12-29T19:39:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/optional/optional/swap.md b/reference/optional/optional/swap.md
index ccf0d05a0..fafdbb56e 100644
--- a/reference/optional/optional/swap.md
+++ b/reference/optional/optional/swap.md
@@ -6,7 +6,8 @@
 * cpp17[meta cpp]
 
 ```cpp
-void swap(optional&amp;amp; rhs) noexcept(see below);
+void swap(optional&amp;amp; rhs) noexcept(see below);           // C++17
+constexpr void swap(optional&amp;amp; rhs) noexcept(see below); // C++23
 ```
 * see below[italic]
 
@@ -121,3 +122,4 @@ int main()
 
 ## 参照
 - [LWG Issue 2748. swappable traits for `optional`s](https://wg21.cmeerw.net/lwg/issue2748)
+- [P2231R1 Missing `constexpr` in `std::optional` and `std::variant`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2231r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Toru Niina</name>
        <email>niina.toru.68u@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- Merge pull request #1224 from ToruNiina/optional-member-methods-constexpr</title>
      <link href="https://cpprefjp.github.io/reference/optional/optional/swap_free.html"/>
      <id>15d43d14a2bb4fa90581733b9d66184888e5e4b4:reference/optional/optional/swap_free.md</id>
      <updated>2023-12-29T19:39:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/optional/optional/swap_free.md b/reference/optional/optional/swap_free.md
index 866f11ed5..e5d450649 100644
--- a/reference/optional/optional/swap_free.md
+++ b/reference/optional/optional/swap_free.md
@@ -7,7 +7,9 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  void swap(optional&amp;lt;T&amp;gt;&amp;amp; x, optional&amp;lt;T&amp;gt;&amp;amp; y) noexcept(noexcept(x.swap(y)));
+  void swap(optional&amp;lt;T&amp;gt;&amp;amp; x, optional&amp;lt;T&amp;gt;&amp;amp; y) noexcept(noexcept(x.swap(y)));           // C++17
+  template &amp;lt;class T&amp;gt;
+  constexpr void swap(optional&amp;lt;T&amp;gt;&amp;amp; x, optional&amp;lt;T&amp;gt;&amp;amp; y) noexcept(noexcept(x.swap(y))); // C++23
 }
 ```
 * x.swap(y)[link swap.md]
@@ -106,3 +108,6 @@ int main()
 - [GCC](/implementation.md#gcc): 7.2
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+- [P2231R1 Missing `constexpr` in `std::optional` and `std::variant`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2231r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Toru Niina</name>
        <email>niina.toru.68u@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace -- feat: add link to C++23 constexpr conditions</title>
      <link href="https://cpprefjp.github.io/reference/optional/optional/emplace.html"/>
      <id>2284db9ee66e01d666cb2e01bd3fa120549d963e:reference/optional/optional/emplace.md</id>
      <updated>2023-12-23T20:40:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/optional/optional/emplace.md b/reference/optional/optional/emplace.md
index 49f3f7136..35d5406d6 100644
--- a/reference/optional/optional/emplace.md
+++ b/reference/optional/optional/emplace.md
@@ -113,3 +113,4 @@ int main()
 - [N3406 A proposal to add a utility class to represent optional objects (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3406.html)
 - [LWG Issue 2857. {`variant`,`optional`,`any`}`::emplace` should return the constructed value](https://wg21.cmeerw.net/lwg/issue2857)
 - [P0084R2 Emplace Return Type (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0084r2.pdf)
+- [P2231R1 Missing `constexpr` in `std::optional` and `std::variant`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2231r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>ToruNiina</name>
        <email>niina.toru.68u@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- feat: add link to C++23 constexpr conditions</title>
      <link href="https://cpprefjp.github.io/reference/optional/optional/op_assign.html"/>
      <id>2284db9ee66e01d666cb2e01bd3fa120549d963e:reference/optional/optional/op_assign.md</id>
      <updated>2023-12-23T20:40:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/optional/optional/op_assign.md b/reference/optional/optional/op_assign.md
index aff7c876f..68749dd03 100644
--- a/reference/optional/optional/op_assign.md
+++ b/reference/optional/optional/op_assign.md
@@ -180,3 +180,4 @@ int main()
 ## 参照
 - [LWG Issue 2756. `optional&amp;lt;T&amp;gt;` should `forward` `T`&amp;#39;s implicit conversions](https://wg21.cmeerw.net/lwg/issue2756)
 - [P0602R4 `variant` and `optional` should propagate copy/move triviality](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0602r4.html)
+- [P2231R1 Missing `constexpr` in `std::optional` and `std::variant`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2231r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>ToruNiina</name>
        <email>niina.toru.68u@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- feat: add link to C++23 constexpr conditions</title>
      <link href="https://cpprefjp.github.io/reference/optional/optional/op_constructor.html"/>
      <id>2284db9ee66e01d666cb2e01bd3fa120549d963e:reference/optional/optional/op_constructor.md</id>
      <updated>2023-12-23T20:40:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/optional/optional/op_constructor.md b/reference/optional/optional/op_constructor.md
index a7c32f882..f5e34ceda 100644
--- a/reference/optional/optional/op_constructor.md
+++ b/reference/optional/optional/op_constructor.md
@@ -231,3 +231,4 @@ int main()
 - [P0892R2 `explicit(bool)`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0892r2.html)
     - C++20での`explicit(bool)`構文への対応
 - [P0602R4 `variant` and `optional` should propagate copy/move triviality](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0602r4.html)
+- [P2231R1 Missing `constexpr` in `std::optional` and `std::variant`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2231r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>ToruNiina</name>
        <email>niina.toru.68u@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- feat: add link to C++23 constexpr conditions</title>
      <link href="https://cpprefjp.github.io/reference/optional/optional/op_destructor.html"/>
      <id>2284db9ee66e01d666cb2e01bd3fa120549d963e:reference/optional/optional/op_destructor.md</id>
      <updated>2023-12-23T20:40:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/optional/optional/op_destructor.md b/reference/optional/optional/op_destructor.md
index d81a0cf73..94c1610c1 100644
--- a/reference/optional/optional/op_destructor.md
+++ b/reference/optional/optional/op_destructor.md
@@ -71,3 +71,4 @@ int main()
 ## 関連項目
 - [`std::vector`クラスのデストラクタ](/reference/vector/vector/op_destructor.md)
 - [`std::is_trivially_destructible`](/reference/type_traits/is_trivially_destructible.md)
+- [P2231R1 Missing `constexpr` in `std::optional` and `std::variant`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2231r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>ToruNiina</name>
        <email>niina.toru.68u@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reset -- feat: add link to C++23 constexpr conditions</title>
      <link href="https://cpprefjp.github.io/reference/optional/optional/reset.html"/>
      <id>2284db9ee66e01d666cb2e01bd3fa120549d963e:reference/optional/optional/reset.md</id>
      <updated>2023-12-23T20:40:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/optional/optional/reset.md b/reference/optional/optional/reset.md
index 0f982a0a4..60017468d 100644
--- a/reference/optional/optional/reset.md
+++ b/reference/optional/optional/reset.md
@@ -63,3 +63,4 @@ int main()
 ## 関連項目
 - [`std::vector`クラスのデストラクタ](/reference/vector/vector/op_destructor.md)
 - [`std::is_trivially_destructible`](/reference/type_traits/is_trivially_destructible.md)
+- [P2231R1 Missing `constexpr` in `std::optional` and `std::variant`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2231r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>ToruNiina</name>
        <email>niina.toru.68u@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- feat: add link to C++23 constexpr conditions</title>
      <link href="https://cpprefjp.github.io/reference/optional/optional/swap.html"/>
      <id>2284db9ee66e01d666cb2e01bd3fa120549d963e:reference/optional/optional/swap.md</id>
      <updated>2023-12-23T20:40:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/optional/optional/swap.md b/reference/optional/optional/swap.md
index d5e1c11bf..fafdbb56e 100644
--- a/reference/optional/optional/swap.md
+++ b/reference/optional/optional/swap.md
@@ -122,3 +122,4 @@ int main()
 
 ## 参照
 - [LWG Issue 2748. swappable traits for `optional`s](https://wg21.cmeerw.net/lwg/issue2748)
+- [P2231R1 Missing `constexpr` in `std::optional` and `std::variant`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2231r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>ToruNiina</name>
        <email>niina.toru.68u@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- feat: add link to C++23 constexpr conditions</title>
      <link href="https://cpprefjp.github.io/reference/optional/optional/swap_free.html"/>
      <id>2284db9ee66e01d666cb2e01bd3fa120549d963e:reference/optional/optional/swap_free.md</id>
      <updated>2023-12-23T20:40:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/optional/optional/swap_free.md b/reference/optional/optional/swap_free.md
index 0e3382fe5..e5d450649 100644
--- a/reference/optional/optional/swap_free.md
+++ b/reference/optional/optional/swap_free.md
@@ -108,3 +108,6 @@ int main()
 - [GCC](/implementation.md#gcc): 7.2
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+- [P2231R1 Missing `constexpr` in `std::optional` and `std::variant`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2231r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>ToruNiina</name>
        <email>niina.toru.68u@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace -- feat: mark std::optional member methods constexpr</title>
      <link href="https://cpprefjp.github.io/reference/optional/optional/emplace.html"/>
      <id>2a0706c9f19273fdbdb1fd52014ac1af7a4b4de8:reference/optional/optional/emplace.md</id>
      <updated>2023-12-23T20:30:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/optional/optional/emplace.md b/reference/optional/optional/emplace.md
index 23aa12b98..49f3f7136 100644
--- a/reference/optional/optional/emplace.md
+++ b/reference/optional/optional/emplace.md
@@ -7,10 +7,14 @@
 
 ```cpp
 template &amp;lt;class... Args&amp;gt;
-T&amp;amp; emplace(Args&amp;amp;&amp;amp;... args);                              // (1)
+T&amp;amp; emplace(Args&amp;amp;&amp;amp;... args);                                        // (1) C++17
+template &amp;lt;class... Args&amp;gt;
+constexpr T&amp;amp; emplace(Args&amp;amp;&amp;amp;... args);                              // (1) C++23
 
 template &amp;lt;class U, class... Args&amp;gt;
-T&amp;amp; emplace(std::initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args); // (2)
+T&amp;amp; emplace(std::initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args);           // (2) C++17
+template &amp;lt;class U, class... Args&amp;gt;
+constexpr T&amp;amp; emplace(std::initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args); // (2) C++23
 ```
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>ToruNiina</name>
        <email>niina.toru.68u@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- feat: mark std::optional member methods constexpr</title>
      <link href="https://cpprefjp.github.io/reference/optional/optional/op_assign.html"/>
      <id>2a0706c9f19273fdbdb1fd52014ac1af7a4b4de8:reference/optional/optional/op_assign.md</id>
      <updated>2023-12-23T20:30:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/optional/optional/op_assign.md b/reference/optional/optional/op_assign.md
index 35b915676..aff7c876f 100644
--- a/reference/optional/optional/op_assign.md
+++ b/reference/optional/optional/op_assign.md
@@ -6,20 +6,29 @@
 * cpp17[meta cpp]
 
 ```cpp
-optional&amp;lt;T&amp;gt;&amp;amp; operator=(nullopt_t rhs) noexcept;          // (1)
+optional&amp;lt;T&amp;gt;&amp;amp; operator=(nullopt_t rhs) noexcept;                    // (1) C++17
+constexpr optional&amp;lt;T&amp;gt;&amp;amp; operator=(nullopt_t rhs) noexcept;          // (1) C++23
 
-optional&amp;amp; operator=(const optional&amp;amp; rhs);                // (2)
+optional&amp;amp; operator=(const optional&amp;amp; rhs);                          // (2) C++17
+constexpr optional&amp;amp; operator=(const optional&amp;amp; rhs);                // (2) C++20
 
-optional&amp;amp; operator=(optional&amp;amp;&amp;amp; rhs) noexcept(see below); // (3)
+optional&amp;amp; operator=(optional&amp;amp;&amp;amp; rhs) noexcept(see below);           // (3) C++17
+constexpr optional&amp;amp; operator=(optional&amp;amp;&amp;amp; rhs) noexcept(see below); // (3) C++20
 
 template &amp;lt;class U = T&amp;gt;
-optional&amp;amp; operator=(U&amp;amp;&amp;amp; rhs);                            // (4)
+optional&amp;amp; operator=(U&amp;amp;&amp;amp; rhs);                                      // (4) C++17
+template &amp;lt;class U = T&amp;gt;
+constexpr optional&amp;amp; operator=(U&amp;amp;&amp;amp; rhs);                            // (4) C++23
 
 template &amp;lt;class U&amp;gt;
-optional&amp;amp; operator=(const optional&amp;lt;U&amp;gt;&amp;amp; rhs);             // (5)
+optional&amp;amp; operator=(const optional&amp;lt;U&amp;gt;&amp;amp; rhs);                       // (5) C++17
+template &amp;lt;class U&amp;gt;
+constexpr optional&amp;amp; operator=(const optional&amp;lt;U&amp;gt;&amp;amp; rhs);             // (5) C++23
 
 template &amp;lt;class U&amp;gt;
-optional&amp;amp; operator=(optional&amp;lt;U&amp;gt;&amp;amp;&amp;amp; rhs);                  // (6)
+optional&amp;amp; operator=(optional&amp;lt;U&amp;gt;&amp;amp;&amp;amp; rhs);                            // (6) C++17
+template &amp;lt;class U&amp;gt;
+constexpr optional&amp;amp; operator=(optional&amp;lt;U&amp;gt;&amp;amp;&amp;amp; rhs);                  // (6) C++23
 ```
 * see below[italic]
 * nullopt_t[link /reference/optional/nullopt_t.md]
@@ -170,4 +179,4 @@ int main()
 
 ## 参照
 - [LWG Issue 2756. `optional&amp;lt;T&amp;gt;` should `forward` `T`&amp;#39;s implicit conversions](https://wg21.cmeerw.net/lwg/issue2756)
-- [P0602R4 `variant` and `optional` should propagate copy/move triviality](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0602r4.html)
\ No newline at end of file
+- [P0602R4 `variant` and `optional` should propagate copy/move triviality](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0602r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>ToruNiina</name>
        <email>niina.toru.68u@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- feat: mark std::optional member methods constexpr</title>
      <link href="https://cpprefjp.github.io/reference/optional/optional/op_constructor.html"/>
      <id>2a0706c9f19273fdbdb1fd52014ac1af7a4b4de8:reference/optional/optional/op_constructor.md</id>
      <updated>2023-12-23T20:30:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/optional/optional/op_constructor.md b/reference/optional/optional/op_constructor.md
index 13af1f564..a7c32f882 100644
--- a/reference/optional/optional/op_constructor.md
+++ b/reference/optional/optional/op_constructor.md
@@ -6,34 +6,38 @@
 * cpp17[meta cpp]
 
 ```cpp
-constexpr optional() noexcept;                           // (1) C++17
-constexpr optional(nullopt_t) noexcept;                  // (2) C++17
-constexpr optional(const optional&amp;amp; rhs);                 // (3) C++17
-constexpr optional(optional&amp;amp;&amp;amp; rhs) noexcept(see below);  // (4) C++17
+constexpr optional() noexcept;                                  // (1) C++17
+constexpr optional(nullopt_t) noexcept;                         // (2) C++17
+constexpr optional(const optional&amp;amp; rhs);                        // (3) C++17
+constexpr optional(optional&amp;amp;&amp;amp; rhs) noexcept(see below);         // (4) C++17
 
 template &amp;lt;class... Args&amp;gt;
-constexpr explicit optional(in_place_t, Args&amp;amp;&amp;amp;... args); // (5) C++17
+constexpr explicit optional(in_place_t, Args&amp;amp;&amp;amp;... args);        // (5) C++17
 
 template &amp;lt;class U, class... Args&amp;gt;
 constexpr explicit optional(
                      in_place_t,
                      initializer_list&amp;lt;U&amp;gt; il,
-                     Args&amp;amp;&amp;amp;... args);                    // (6) C++17
+                     Args&amp;amp;&amp;amp;... args);                           // (6) C++17
 
 template &amp;lt;class U = T&amp;gt;
-EXPLICIT constexpr optional(U&amp;amp;&amp;amp; rhs);                    // (7) C++17
+EXPLICIT constexpr optional(U&amp;amp;&amp;amp; rhs);                           // (7) C++17
 template &amp;lt;class U = T&amp;gt;
-explicit(see below) constexpr optional(U&amp;amp;&amp;amp; rhs);         // (7) C++20
+explicit(see below) constexpr optional(U&amp;amp;&amp;amp; rhs);                // (7) C++20
 
 template &amp;lt;class U&amp;gt;
-EXPLICIT optional(const optional&amp;lt;U&amp;gt;&amp;amp; rhs);               // (8) C++17
+EXPLICIT optional(const optional&amp;lt;U&amp;gt;&amp;amp; rhs);                      // (8) C++17
 template &amp;lt;class U&amp;gt;
-explicit(see below) optional(const optional&amp;lt;U&amp;gt;&amp;amp; rhs);    // (8) C++20
+explicit(see below) optional(const optional&amp;lt;U&amp;gt;&amp;amp; rhs);           // (8) C++20
+template &amp;lt;class U&amp;gt;
+explicit(see below) constexpr optional(const optional&amp;lt;U&amp;gt;&amp;amp; rhs); // (8) C++23
 
 template &amp;lt;class U&amp;gt;
-EXPLICIT optional(optional&amp;lt;U&amp;gt;&amp;amp;&amp;amp; rhs);                    // (9) C++17
+EXPLICIT optional(optional&amp;lt;U&amp;gt;&amp;amp;&amp;amp; rhs);                           // (9) C++17
+template &amp;lt;class U&amp;gt;
+explicit(see below) optional(optional&amp;lt;U&amp;gt;&amp;amp;&amp;amp; rhs);                // (9) C++20
 template &amp;lt;class U&amp;gt;
-explicit(see below) optional(optional&amp;lt;U&amp;gt;&amp;amp;&amp;amp; rhs);         // (9) C++20
+explicit(see below) constexpr optional(optional&amp;lt;U&amp;gt;&amp;amp;&amp;amp; rhs);      // (9) C++23
 ```
 * see below[italic]
 * EXPLICIT[italic]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>ToruNiina</name>
        <email>niina.toru.68u@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- feat: mark std::optional member methods constexpr</title>
      <link href="https://cpprefjp.github.io/reference/optional/optional/op_destructor.html"/>
      <id>2a0706c9f19273fdbdb1fd52014ac1af7a4b4de8:reference/optional/optional/op_destructor.md</id>
      <updated>2023-12-23T20:30:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/optional/optional/op_destructor.md b/reference/optional/optional/op_destructor.md
index e0171f5ef..d81a0cf73 100644
--- a/reference/optional/optional/op_destructor.md
+++ b/reference/optional/optional/op_destructor.md
@@ -6,7 +6,8 @@
 * cpp17[meta cpp]
 
 ```cpp
-~optional();
+~optional();           // C++17
+constexpr ~optional(); // C++23
 ```
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>ToruNiina</name>
        <email>niina.toru.68u@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reset -- feat: mark std::optional member methods constexpr</title>
      <link href="https://cpprefjp.github.io/reference/optional/optional/reset.html"/>
      <id>2a0706c9f19273fdbdb1fd52014ac1af7a4b4de8:reference/optional/optional/reset.md</id>
      <updated>2023-12-23T20:30:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/optional/optional/reset.md b/reference/optional/optional/reset.md
index 8e4ac2141..0f982a0a4 100644
--- a/reference/optional/optional/reset.md
+++ b/reference/optional/optional/reset.md
@@ -6,7 +6,8 @@
 * cpp17[meta cpp]
 
 ```cpp
-void reset() noexcept;
+void reset() noexcept;           // (1) C++17
+constexpr void reset() noexcept; // (1) C++23
 ```
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>ToruNiina</name>
        <email>niina.toru.68u@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- feat: mark std::optional member methods constexpr</title>
      <link href="https://cpprefjp.github.io/reference/optional/optional/swap.html"/>
      <id>2a0706c9f19273fdbdb1fd52014ac1af7a4b4de8:reference/optional/optional/swap.md</id>
      <updated>2023-12-23T20:30:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/optional/optional/swap.md b/reference/optional/optional/swap.md
index ccf0d05a0..d5e1c11bf 100644
--- a/reference/optional/optional/swap.md
+++ b/reference/optional/optional/swap.md
@@ -6,7 +6,8 @@
 * cpp17[meta cpp]
 
 ```cpp
-void swap(optional&amp;amp; rhs) noexcept(see below);
+void swap(optional&amp;amp; rhs) noexcept(see below);           // C++17
+constexpr void swap(optional&amp;amp; rhs) noexcept(see below); // C++23
 ```
 * see below[italic]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>ToruNiina</name>
        <email>niina.toru.68u@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- feat: mark std::optional member methods constexpr</title>
      <link href="https://cpprefjp.github.io/reference/optional/optional/swap_free.html"/>
      <id>2a0706c9f19273fdbdb1fd52014ac1af7a4b4de8:reference/optional/optional/swap_free.md</id>
      <updated>2023-12-23T20:30:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/optional/optional/swap_free.md b/reference/optional/optional/swap_free.md
index 866f11ed5..0e3382fe5 100644
--- a/reference/optional/optional/swap_free.md
+++ b/reference/optional/optional/swap_free.md
@@ -7,7 +7,9 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  void swap(optional&amp;lt;T&amp;gt;&amp;amp; x, optional&amp;lt;T&amp;gt;&amp;amp; y) noexcept(noexcept(x.swap(y)));
+  void swap(optional&amp;lt;T&amp;gt;&amp;amp; x, optional&amp;lt;T&amp;gt;&amp;amp; y) noexcept(noexcept(x.swap(y)));           // C++17
+  template &amp;lt;class T&amp;gt;
+  constexpr void swap(optional&amp;lt;T&amp;gt;&amp;amp; x, optional&amp;lt;T&amp;gt;&amp;amp; y) noexcept(noexcept(x.swap(y))); // C++23
 }
 ```
 * x.swap(y)[link swap.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>ToruNiina</name>
        <email>niina.toru.68u@gmail.com</email>
      </author>
    </entry>
  
</feed>
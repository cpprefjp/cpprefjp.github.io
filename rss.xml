<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-10-28T14:48:40.348183</updated>
  <id>947f2c59-99a1-41a0-bf7a-561c5b2e6720</id>

  
    <entry>
      <title>スレッドローカルストレージ [N2659] -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/thread_local_storage.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:lang/cpp11/thread_local_storage.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/thread_local_storage.md b/lang/cpp11/thread_local_storage.md
index 150793b3c..6fc63be01 100644
--- a/lang/cpp11/thread_local_storage.md
+++ b/lang/cpp11/thread_local_storage.md
@@ -51,13 +51,15 @@ t2.join();
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;thread&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 // 範囲[min_inclusive, max_inclusive]でランダム一様分布する整数を生成する。
 // スレッドごとに乱数の状態を持つ。
 int random_range(int min_inclusive, int max_inclusive)
 {
   std::random_device seed_gen;
-  thread_local std::mt19937 engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  thread_local std::mt19937 engine(seed);
   std::uniform_int_distribution&amp;lt;int&amp;gt; dist(min_inclusive, max_inclusive);
   return dist(engine);
 }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>shuffle -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_shuffle.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/algorithm/ranges_shuffle.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_shuffle.md b/reference/algorithm/ranges_shuffle.md
index 84858db08..4c5ef40ef 100644
--- a/reference/algorithm/ranges_shuffle.md
+++ b/reference/algorithm/ranges_shuffle.md
@@ -58,6 +58,7 @@ namespace std::ranges {
 #include &amp;lt;numeric&amp;gt;
 #include &amp;lt;iterator&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main() {
   std::vector&amp;lt;int&amp;gt; v(10);
@@ -69,7 +70,8 @@ int main() {
 
   // シャッフル
   std::random_device seed_gen;
-  std::mt19937 engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::mt19937 engine(seed);
   std::ranges::shuffle(v, engine);
 
   std::cout &amp;lt;&amp;lt; &amp;#34; after: &amp;#34;;
@@ -92,6 +94,7 @@ before: 0123456789
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;string&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main() {
   std::string input = &amp;#34;0123456789abcdef&amp;#34;;
@@ -100,7 +103,8 @@ int main() {
 
   // シャッフル
   std::random_device seed_gen;
-  std::mt19937 engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::mt19937 engine(seed);
   std::ranges::shuffle(input, engine);
 
   std::cout &amp;lt;&amp;lt; &amp;#34; after: &amp;#34; &amp;lt;&amp;lt; input &amp;lt;&amp;lt; std::endl;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>shuffle -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/shuffle.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/algorithm/shuffle.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/shuffle.md b/reference/algorithm/shuffle.md
index 48d2b0fb9..73d432cbf 100644
--- a/reference/algorithm/shuffle.md
+++ b/reference/algorithm/shuffle.md
@@ -43,6 +43,7 @@ namespace std {
 #include &amp;lt;numeric&amp;gt;
 #include &amp;lt;iterator&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main() {
   std::vector&amp;lt;int&amp;gt; v(10);
@@ -54,7 +55,8 @@ int main() {
 
   // シャッフル
   std::random_device seed_gen;
-  std::mt19937 engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::mt19937 engine(seed);
   std::shuffle(v.begin(), v.end(), engine);
 
   std::cout &amp;lt;&amp;lt; &amp;#34; after: &amp;#34;;
@@ -76,6 +78,7 @@ before: 0123456789
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;string&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main() {
   std::string input = &amp;#34;0123456789abcdef&amp;#34;;
@@ -84,7 +87,8 @@ int main() {
 
   // シャッフル
   std::random_device seed_gen;
-  std::mt19937 engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::mt19937 engine(seed);
   std::shuffle(input.begin(), input.end(), engine);
 
   std::cout &amp;lt;&amp;lt; &amp;#34; after: &amp;#34; &amp;lt;&amp;lt; input &amp;lt;&amp;lt; std::endl;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>random -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random.md b/reference/random.md
index cc1efd3fd..f09f5dc71 100644
--- a/reference/random.md
+++ b/reference/random.md
@@ -155,13 +155,15 @@
 ```cpp example
 #include &amp;lt;fstream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   // メルセンヌ・ツイスター法による擬似乱数生成器を、
   // ハードウェア乱数をシードにして初期化
   std::random_device seed_gen;
-  std::mt19937 engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::mt19937 engine(seed);
 
   // 一様実数分布
   // [-1.0f, 1.0f)の値の範囲で、等確率に実数を生成する
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bernoulli_distribution -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/bernoulli_distribution.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/bernoulli_distribution.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/bernoulli_distribution.md b/reference/random/bernoulli_distribution.md
index be9e19f88..0571fa9f5 100644
--- a/reference/random/bernoulli_distribution.md
+++ b/reference/random/bernoulli_distribution.md
@@ -72,11 +72,13 @@ namespace std {
 ```cpp example
 #include &amp;lt;random&amp;gt;
 #include &amp;lt;fstream&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // 確率0.7でtrueを生成し、確率0.3(1.0 - 0.7)でfalseを生成する
   std::bernoulli_distribution dist(0.7);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/bernoulli_distribution/op_call.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/bernoulli_distribution/op_call.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/bernoulli_distribution/op_call.md b/reference/random/bernoulli_distribution/op_call.md
index 9a19aaca6..e84b04dd1 100644
--- a/reference/random/bernoulli_distribution/op_call.md
+++ b/reference/random/bernoulli_distribution/op_call.md
@@ -31,11 +31,13 @@ result_type operator()(URBG&amp;amp; g, const param_type&amp;amp; parm); // (2)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::mt19937 engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::mt19937 engine(seed);
 
   std::cout &amp;lt;&amp;lt; std::boolalpha;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/bernoulli_distribution/op_constructor.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/bernoulli_distribution/op_constructor.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/bernoulli_distribution/op_constructor.md b/reference/random/bernoulli_distribution/op_constructor.md
index 2ae007dad..7d8208c12 100644
--- a/reference/random/bernoulli_distribution/op_constructor.md
+++ b/reference/random/bernoulli_distribution/op_constructor.md
@@ -31,11 +31,13 @@ explicit bernoulli_distribution(const param_type&amp;amp; parm);  // (3)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   std::cout &amp;lt;&amp;lt; std::boolalpha;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reset -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/bernoulli_distribution/reset.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/bernoulli_distribution/reset.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/bernoulli_distribution/reset.md b/reference/random/bernoulli_distribution/reset.md
index 2f716020b..aa40fad23 100644
--- a/reference/random/bernoulli_distribution/reset.md
+++ b/reference/random/bernoulli_distribution/reset.md
@@ -30,11 +30,13 @@ void reset();
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   std::bernoulli_distribution dist(0.5);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>binomial_distribution -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/binomial_distribution.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/binomial_distribution.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/binomial_distribution.md b/reference/random/binomial_distribution.md
index cebca1447..d35b8b8a9 100644
--- a/reference/random/binomial_distribution.md
+++ b/reference/random/binomial_distribution.md
@@ -76,11 +76,13 @@ namespace std {
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // 成功確率0.5の事象を5回試行する
   std::binomial_distribution&amp;lt;&amp;gt; dist(5, 0.5);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/binomial_distribution/op_call.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/binomial_distribution/op_call.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/binomial_distribution/op_call.md b/reference/random/binomial_distribution/op_call.md
index 00c3bb046..c3e536371 100644
--- a/reference/random/binomial_distribution/op_call.md
+++ b/reference/random/binomial_distribution/op_call.md
@@ -30,11 +30,13 @@ result_type operator()(URBG&amp;amp; g, const param_type&amp;amp; parm); // (2)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // (1)
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/binomial_distribution/op_constructor.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/binomial_distribution/op_constructor.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/binomial_distribution/op_constructor.md b/reference/random/binomial_distribution/op_constructor.md
index 9467f1d85..2e5d16913 100644
--- a/reference/random/binomial_distribution/op_constructor.md
+++ b/reference/random/binomial_distribution/op_constructor.md
@@ -31,11 +31,13 @@ explicit binomial_distribution(const param_type&amp;amp; parm);        // (3)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // パラメータを個別に指定する
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reset -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/binomial_distribution/reset.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/binomial_distribution/reset.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/binomial_distribution/reset.md b/reference/random/binomial_distribution/reset.md
index fd0209909..f37755729 100644
--- a/reference/random/binomial_distribution/reset.md
+++ b/reference/random/binomial_distribution/reset.md
@@ -30,11 +30,13 @@ void reset();
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   std::binomial_distribution&amp;lt;&amp;gt; dist(3, 0.5);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cauchy_distribution -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/cauchy_distribution.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/cauchy_distribution.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/cauchy_distribution.md b/reference/random/cauchy_distribution.md
index 5d0eb491d..094c21117 100644
--- a/reference/random/cauchy_distribution.md
+++ b/reference/random/cauchy_distribution.md
@@ -82,11 +82,13 @@ $$ p(x \mid a, b) = \left( \pi b \left(1 + \left( \frac{x-a}{b} \right) ^2 \righ
 ```cpp example
 #include &amp;lt;fstream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // 位置母数0.0、尺度母数1.0で分布させる
   std::cauchy_distribution&amp;lt;&amp;gt; dist(0.0, 1.0);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/cauchy_distribution/op_call.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/cauchy_distribution/op_call.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/cauchy_distribution/op_call.md b/reference/random/cauchy_distribution/op_call.md
index 9a4d08067..3da26c2d0 100644
--- a/reference/random/cauchy_distribution/op_call.md
+++ b/reference/random/cauchy_distribution/op_call.md
@@ -30,11 +30,13 @@ result_type operator()(URBG&amp;amp; g, const param_type&amp;amp; parm); // (2)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // (1)
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/cauchy_distribution/op_constructor.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/cauchy_distribution/op_constructor.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/cauchy_distribution/op_constructor.md b/reference/random/cauchy_distribution/op_constructor.md
index 6d1c3892a..55d23852a 100644
--- a/reference/random/cauchy_distribution/op_constructor.md
+++ b/reference/random/cauchy_distribution/op_constructor.md
@@ -31,11 +31,13 @@ explicit cauchy_distribution(const param_type&amp;amp; parm);             // (3)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // パラメータを個別に指定する
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reset -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/cauchy_distribution/reset.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/cauchy_distribution/reset.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/cauchy_distribution/reset.md b/reference/random/cauchy_distribution/reset.md
index 7c3242f8a..63e26824a 100644
--- a/reference/random/cauchy_distribution/reset.md
+++ b/reference/random/cauchy_distribution/reset.md
@@ -30,11 +30,13 @@ void reset();
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   std::cauchy_distribution&amp;lt;&amp;gt; dist(0.0, 1.0);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>chi_squared_distribution -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/chi_squared_distribution.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/chi_squared_distribution.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/chi_squared_distribution.md b/reference/random/chi_squared_distribution.md
index 6c8d324cc..9eeab33a9 100644
--- a/reference/random/chi_squared_distribution.md
+++ b/reference/random/chi_squared_distribution.md
@@ -83,11 +83,13 @@ $$ p(x \mid n) = \frac{x^{n/2 - 1} \cdot e^{-x/2}}{\Gamma (n/2) \cdot 2^{n/2}} $
 ```cpp example
 #include &amp;lt;fstream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // 自由度1で分布させる
   std::chi_squared_distribution&amp;lt;&amp;gt; dist(1.0);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/chi_squared_distribution/op_call.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/chi_squared_distribution/op_call.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/chi_squared_distribution/op_call.md b/reference/random/chi_squared_distribution/op_call.md
index ba3520ca8..acb3806ff 100644
--- a/reference/random/chi_squared_distribution/op_call.md
+++ b/reference/random/chi_squared_distribution/op_call.md
@@ -30,11 +30,13 @@ result_type operator()(URBG&amp;amp; g, const param_type&amp;amp; parm); // (2)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // (1)
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/chi_squared_distribution/op_constructor.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/chi_squared_distribution/op_constructor.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/chi_squared_distribution/op_constructor.md b/reference/random/chi_squared_distribution/op_constructor.md
index f81dbe44c..8966058ac 100644
--- a/reference/random/chi_squared_distribution/op_constructor.md
+++ b/reference/random/chi_squared_distribution/op_constructor.md
@@ -31,11 +31,13 @@ explicit chi_squared_distribution(const param_type&amp;amp; parm);    // (3)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main() 
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // パラメータを個別に指定する
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reset -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/chi_squared_distribution/reset.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/chi_squared_distribution/reset.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/chi_squared_distribution/reset.md b/reference/random/chi_squared_distribution/reset.md
index 1a9bb6905..481ea0e36 100644
--- a/reference/random/chi_squared_distribution/reset.md
+++ b/reference/random/chi_squared_distribution/reset.md
@@ -30,11 +30,13 @@ void reset();
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   std::chi_squared_distribution&amp;lt;&amp;gt; dist(1.0);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>default_random_engine -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/default_random_engine.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/default_random_engine.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/default_random_engine.md b/reference/random/default_random_engine.md
index ad8884857..d659f5ae7 100644
--- a/reference/random/default_random_engine.md
+++ b/reference/random/default_random_engine.md
@@ -30,11 +30,13 @@ namespace std {
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   std::uniform_int_distribution&amp;lt;&amp;gt; dist(0, 3);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>discrete_distribution -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/discrete_distribution.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/discrete_distribution.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/discrete_distribution.md b/reference/random/discrete_distribution.md
index f182838ac..2ab15341b 100644
--- a/reference/random/discrete_distribution.md
+++ b/reference/random/discrete_distribution.md
@@ -71,11 +71,13 @@ namespace std {
 #include &amp;lt;random&amp;gt;
 #include &amp;lt;vector&amp;gt;
 #include &amp;lt;fstream&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::mt19937 engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::mt19937 engine(seed);
 
   // 確率列を定義
   // 浮動小数点数の範囲として定義する。合計値が1.0や10.0のような切りの良い数値である必要はない。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/discrete_distribution/op_call.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/discrete_distribution/op_call.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/discrete_distribution/op_call.md b/reference/random/discrete_distribution/op_call.md
index 745d03593..73e711188 100644
--- a/reference/random/discrete_distribution/op_call.md
+++ b/reference/random/discrete_distribution/op_call.md
@@ -30,11 +30,13 @@ result_type operator()(URBG&amp;amp; g, const param_type&amp;amp; parm); // (2)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::mt19937 engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::mt19937 engine(seed);
 
   // (1)
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/discrete_distribution/op_constructor.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/discrete_distribution/op_constructor.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/discrete_distribution/op_constructor.md b/reference/random/discrete_distribution/op_constructor.md
index e013e2dc8..6f132b825 100644
--- a/reference/random/discrete_distribution/op_constructor.md
+++ b/reference/random/discrete_distribution/op_constructor.md
@@ -49,11 +49,13 @@ explicit discrete_distribution(const param_type&amp;amp; parm);           // (5)
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
 #include &amp;lt;vector&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::mt19937 engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::mt19937 engine(seed);
 
   // (1)
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reset -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/discrete_distribution/reset.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/discrete_distribution/reset.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/discrete_distribution/reset.md b/reference/random/discrete_distribution/reset.md
index fa7e4cdb4..eb707a4ba 100644
--- a/reference/random/discrete_distribution/reset.md
+++ b/reference/random/discrete_distribution/reset.md
@@ -28,11 +28,13 @@ void reset();
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::mt19937 engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::mt19937 engine(seed);
 
   std::discrete_distribution&amp;lt;&amp;gt; dist = {0.1, 0.2, 0.3};
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>exponential_distribution -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/exponential_distribution.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/exponential_distribution.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/exponential_distribution.md b/reference/random/exponential_distribution.md
index 7adbe2fb1..5475611b4 100644
--- a/reference/random/exponential_distribution.md
+++ b/reference/random/exponential_distribution.md
@@ -83,11 +83,13 @@ $$ p(x \mid \lambda) = \lambda e^{-\lambda x} $$
 ```cpp example
 #include &amp;lt;random&amp;gt;
 #include &amp;lt;fstream&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   std::exponential_distribution&amp;lt;&amp;gt; dist(1.0);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/exponential_distribution/op_call.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/exponential_distribution/op_call.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/exponential_distribution/op_call.md b/reference/random/exponential_distribution/op_call.md
index 2db55d534..b0f028608 100644
--- a/reference/random/exponential_distribution/op_call.md
+++ b/reference/random/exponential_distribution/op_call.md
@@ -30,11 +30,13 @@ result_type operator()(URBG&amp;amp; g, const param_type&amp;amp; parm); // (2)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // (1)
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/exponential_distribution/op_constructor.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/exponential_distribution/op_constructor.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/exponential_distribution/op_constructor.md b/reference/random/exponential_distribution/op_constructor.md
index 8c89345ce..ab5d1a963 100644
--- a/reference/random/exponential_distribution/op_constructor.md
+++ b/reference/random/exponential_distribution/op_constructor.md
@@ -31,11 +31,13 @@ explicit exponential_distribution(const param_type&amp;amp; parm);     // (3)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // (2)
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reset -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/exponential_distribution/reset.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/exponential_distribution/reset.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/exponential_distribution/reset.md b/reference/random/exponential_distribution/reset.md
index 51b6b97d6..1c63112ad 100644
--- a/reference/random/exponential_distribution/reset.md
+++ b/reference/random/exponential_distribution/reset.md
@@ -30,11 +30,13 @@ void reset();
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   std::exponential_distribution&amp;lt;&amp;gt; dist(1.0);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>extreme_value_distribution -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/extreme_value_distribution.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/extreme_value_distribution.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/extreme_value_distribution.md b/reference/random/extreme_value_distribution.md
index 3e2219e93..d2a843602 100644
--- a/reference/random/extreme_value_distribution.md
+++ b/reference/random/extreme_value_distribution.md
@@ -82,11 +82,13 @@ $$ p(x \mid a, b) = \frac{1}{b} \cdot \exp \left( \frac{a-x}{b} - \exp \left( \f
 ```cpp example
 #include &amp;lt;random&amp;gt;
 #include &amp;lt;fstream&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // 位置パラメータ0.0、尺度パラメータ1.0で分布させる
   std::extreme_value_distribution&amp;lt;&amp;gt; dist(0.0, 1.0);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/extreme_value_distribution/op_call.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/extreme_value_distribution/op_call.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/extreme_value_distribution/op_call.md b/reference/random/extreme_value_distribution/op_call.md
index d5fbcbfc3..25eebd5c5 100644
--- a/reference/random/extreme_value_distribution/op_call.md
+++ b/reference/random/extreme_value_distribution/op_call.md
@@ -30,11 +30,13 @@ result_type operator()(URBG&amp;amp; g, const param_type&amp;amp; parm); // (2)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // (1)
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/extreme_value_distribution/op_constructor.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/extreme_value_distribution/op_constructor.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/extreme_value_distribution/op_constructor.md b/reference/random/extreme_value_distribution/op_constructor.md
index e53b0f53e..e89572b3d 100644
--- a/reference/random/extreme_value_distribution/op_constructor.md
+++ b/reference/random/extreme_value_distribution/op_constructor.md
@@ -31,11 +31,13 @@ explicit extreme_value_distribution(const param_type&amp;amp; parm);             // (3)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // (2) パラメータを個別に指定する
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reset -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/extreme_value_distribution/reset.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/extreme_value_distribution/reset.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/extreme_value_distribution/reset.md b/reference/random/extreme_value_distribution/reset.md
index 5acfaf50f..8f99d4311 100644
--- a/reference/random/extreme_value_distribution/reset.md
+++ b/reference/random/extreme_value_distribution/reset.md
@@ -30,11 +30,13 @@ void reset();
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   std::extreme_value_distribution&amp;lt;&amp;gt; dist(0.0, 1.0);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fisher_f_distribution -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/fisher_f_distribution.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/fisher_f_distribution.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/fisher_f_distribution.md b/reference/random/fisher_f_distribution.md
index ebb73aa67..e6c0f46d7 100644
--- a/reference/random/fisher_f_distribution.md
+++ b/reference/random/fisher_f_distribution.md
@@ -80,11 +80,13 @@ $$ p(x \mid m, n) = \frac{\Gamma ((m+n)/2)}{\Gamma (m/2) \Gamma (n/2)} \cdot \le
 ```cpp example
 #include &amp;lt;fstream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // 自由度5と10で分布させる
   std::fisher_f_distribution&amp;lt;&amp;gt; dist(5, 10);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/fisher_f_distribution/op_call.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/fisher_f_distribution/op_call.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/fisher_f_distribution/op_call.md b/reference/random/fisher_f_distribution/op_call.md
index 13f62b1ad..a73dca997 100644
--- a/reference/random/fisher_f_distribution/op_call.md
+++ b/reference/random/fisher_f_distribution/op_call.md
@@ -30,11 +30,13 @@ result_type operator()(URBG&amp;amp; g, const param_type&amp;amp; parm); // (2)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // (1)
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/fisher_f_distribution/op_constructor.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/fisher_f_distribution/op_constructor.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/fisher_f_distribution/op_constructor.md b/reference/random/fisher_f_distribution/op_constructor.md
index ebb5ddeae..a2439e6d9 100644
--- a/reference/random/fisher_f_distribution/op_constructor.md
+++ b/reference/random/fisher_f_distribution/op_constructor.md
@@ -31,11 +31,13 @@ explicit fisher_f_distribution(const param_type&amp;amp; parm);             // (3)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main() 
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // パラメータを個別に指定する
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reset -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/fisher_f_distribution/reset.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/fisher_f_distribution/reset.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/fisher_f_distribution/reset.md b/reference/random/fisher_f_distribution/reset.md
index 7f5ddeb87..231a6a120 100644
--- a/reference/random/fisher_f_distribution/reset.md
+++ b/reference/random/fisher_f_distribution/reset.md
@@ -30,11 +30,13 @@ void reset();
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   std::fisher_f_distribution&amp;lt;&amp;gt; dist(3.0, 4.0);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>gamma_distribution -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/gamma_distribution.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/gamma_distribution.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/gamma_distribution.md b/reference/random/gamma_distribution.md
index 24d7c11a1..da51ffbb2 100644
--- a/reference/random/gamma_distribution.md
+++ b/reference/random/gamma_distribution.md
@@ -83,11 +83,13 @@ $$ p(x \mid \alpha, \beta) = \frac{e^{-x/\beta}}{\beta^{\alpha} \cdot \Gamma(\al
 ```cpp example
 #include &amp;lt;random&amp;gt;
 #include &amp;lt;fstream&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // 形状母数1.0、尺度母数1.0で分布させる
   std::gamma_distribution&amp;lt;&amp;gt; dist(1.0, 1.0);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/gamma_distribution/op_call.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/gamma_distribution/op_call.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/gamma_distribution/op_call.md b/reference/random/gamma_distribution/op_call.md
index 2584cc71b..62b1aced7 100644
--- a/reference/random/gamma_distribution/op_call.md
+++ b/reference/random/gamma_distribution/op_call.md
@@ -30,11 +30,13 @@ result_type operator()(URBG&amp;amp; g, const param_type&amp;amp; parm); // (2)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // (1)
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/gamma_distribution/op_constructor.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/gamma_distribution/op_constructor.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/gamma_distribution/op_constructor.md b/reference/random/gamma_distribution/op_constructor.md
index 4adec7d13..56ae964b9 100644
--- a/reference/random/gamma_distribution/op_constructor.md
+++ b/reference/random/gamma_distribution/op_constructor.md
@@ -31,11 +31,13 @@ explicit gamma_distribution(const param_type&amp;amp; parm);                    // (3)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // (2) パラメータを個別に指定する
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reset -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/gamma_distribution/reset.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/gamma_distribution/reset.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/gamma_distribution/reset.md b/reference/random/gamma_distribution/reset.md
index 7aae2df6c..cc4270294 100644
--- a/reference/random/gamma_distribution/reset.md
+++ b/reference/random/gamma_distribution/reset.md
@@ -30,11 +30,13 @@ void reset();
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   std::gamma_distribution&amp;lt;&amp;gt; dist(1.0, 1.0);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>generate_canonical -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/generate_canonical.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/generate_canonical.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/generate_canonical.md b/reference/random/generate_canonical.md
index 5ec3e4750..f5da18671 100644
--- a/reference/random/generate_canonical.md
+++ b/reference/random/generate_canonical.md
@@ -33,11 +33,13 @@ namespace std {
 ```cpp example
 #include &amp;lt;random&amp;gt;
 #include &amp;lt;iostream&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::mt19937 engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::mt19937 engine(seed);
 
   for(int i = 0; i &amp;lt; 10; ++i) {
     // floatの仮数部桁数で、範囲[0.0, 1.0)のランダムなfloat値を生成する
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>generate_random -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/generate_random.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/generate_random.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/generate_random.md b/reference/random/generate_random.md
index 6b711fce4..6329d6461 100644
--- a/reference/random/generate_random.md
+++ b/reference/random/generate_random.md
@@ -112,11 +112,13 @@ for (auto&amp;amp; x : v) {
 #include &amp;lt;random&amp;gt;
 #include &amp;lt;print&amp;gt;
 #include &amp;lt;vector&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::mt19937 engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::mt19937 engine(seed);
   std::uniform_int_distribution&amp;lt;int&amp;gt; dist{0, 100};
 
   std::vector&amp;lt;int&amp;gt; v(10);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>geometric_distribution -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/geometric_distribution.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/geometric_distribution.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/geometric_distribution.md b/reference/random/geometric_distribution.md
index 54924377a..afe37ff52 100644
--- a/reference/random/geometric_distribution.md
+++ b/reference/random/geometric_distribution.md
@@ -78,11 +78,13 @@ namespace std {
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // 成功確率0.5の事象を、成功するまで試行する
   std::geometric_distribution&amp;lt;&amp;gt; dist(0.5);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/geometric_distribution/op_call.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/geometric_distribution/op_call.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/geometric_distribution/op_call.md b/reference/random/geometric_distribution/op_call.md
index 1ea44060a..f65b2a0f0 100644
--- a/reference/random/geometric_distribution/op_call.md
+++ b/reference/random/geometric_distribution/op_call.md
@@ -30,11 +30,13 @@ result_type operator()(URBG&amp;amp; g, const param_type&amp;amp; parm); // (2)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // (1)
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/geometric_distribution/op_constructor.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/geometric_distribution/op_constructor.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/geometric_distribution/op_constructor.md b/reference/random/geometric_distribution/op_constructor.md
index 0b1a0dac9..6badc85ee 100644
--- a/reference/random/geometric_distribution/op_constructor.md
+++ b/reference/random/geometric_distribution/op_constructor.md
@@ -31,11 +31,13 @@ explicit geometric_distribution(const param_type&amp;amp; parm);  // (3)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // (2) パラメータを個別に指定する
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reset -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/geometric_distribution/reset.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/geometric_distribution/reset.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/geometric_distribution/reset.md b/reference/random/geometric_distribution/reset.md
index 1092dde64..92a2fe1b3 100644
--- a/reference/random/geometric_distribution/reset.md
+++ b/reference/random/geometric_distribution/reset.md
@@ -30,11 +30,13 @@ void reset();
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   std::geometric_distribution&amp;lt;&amp;gt; dist(0.5);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>knuth_b -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/knuth_b.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/knuth_b.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/knuth_b.md b/reference/random/knuth_b.md
index 784b408ad..182d6c66f 100644
--- a/reference/random/knuth_b.md
+++ b/reference/random/knuth_b.md
@@ -57,11 +57,13 @@ Donald Knuth氏の著書『The Art of Computer Programming, Second Edition, Volu
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::knuth_b engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::knuth_b engine(seed);
 
   for (int i = 0; i &amp;lt; 10; ++i) {
     std::uint64_t result = engine();
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>linear_congruential_engine -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/linear_congruential_engine.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/linear_congruential_engine.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/linear_congruential_engine.md b/reference/random/linear_congruential_engine.md
index 1178d1078..f189c0a4d 100644
--- a/reference/random/linear_congruential_engine.md
+++ b/reference/random/linear_congruential_engine.md
@@ -101,14 +101,16 @@ C言語から引き継いだ標準ライブラリ関数[`std::rand()`](/referenc
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
+  std::uint32_t seed = seed_gen();
 
   // linear_congruential_engineのパラメータ設定済み別名であるminstd_randを使用する。
   // ランダムなシードを使用して初期化
-  std::minstd_rand engine(seed_gen());
+  std::minstd_rand engine(seed);
 
   for (int i = 0; i &amp;lt; 10; ++i) {
     // 乱数を生成
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lognormal_distribution -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/lognormal_distribution.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/lognormal_distribution.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/lognormal_distribution.md b/reference/random/lognormal_distribution.md
index ac717b74e..c114f3cf5 100644
--- a/reference/random/lognormal_distribution.md
+++ b/reference/random/lognormal_distribution.md
@@ -82,11 +82,13 @@ $$ p(x \mid m, s) = \frac{1}{sx \sqrt{2 \pi} } \cdot \exp \left( - \frac{(\ln x
 ```cpp example
 #include &amp;lt;random&amp;gt;
 #include &amp;lt;fstream&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // 平均3.141592、標準偏差1.0で分布させる
   std::lognormal_distribution&amp;lt;&amp;gt; dist(3.141592, 1.0);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/lognormal_distribution/op_call.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/lognormal_distribution/op_call.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/lognormal_distribution/op_call.md b/reference/random/lognormal_distribution/op_call.md
index 3940da958..eb6a693f2 100644
--- a/reference/random/lognormal_distribution/op_call.md
+++ b/reference/random/lognormal_distribution/op_call.md
@@ -30,11 +30,13 @@ result_type operator()(URBG&amp;amp; g, const param_type&amp;amp; parm); // (2)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // (1)
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/lognormal_distribution/op_constructor.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/lognormal_distribution/op_constructor.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/lognormal_distribution/op_constructor.md b/reference/random/lognormal_distribution/op_constructor.md
index 00bef3583..02c032806 100644
--- a/reference/random/lognormal_distribution/op_constructor.md
+++ b/reference/random/lognormal_distribution/op_constructor.md
@@ -31,11 +31,13 @@ explicit lognormal_distribution(const param_type&amp;amp; param);            // (3)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // (2) パラメータを個別に指定する
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reset -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/lognormal_distribution/reset.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/lognormal_distribution/reset.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/lognormal_distribution/reset.md b/reference/random/lognormal_distribution/reset.md
index 20dd66b39..f1d25a291 100644
--- a/reference/random/lognormal_distribution/reset.md
+++ b/reference/random/lognormal_distribution/reset.md
@@ -34,11 +34,13 @@ void reset();
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   std::lognormal_distribution&amp;lt;&amp;gt; dist(0.0, 1.0);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mersenne_twister_engine -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/mersenne_twister_engine.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/mersenne_twister_engine.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/mersenne_twister_engine.md b/reference/random/mersenne_twister_engine.md
index be41226f4..ffcd86706 100644
--- a/reference/random/mersenne_twister_engine.md
+++ b/reference/random/mersenne_twister_engine.md
@@ -126,14 +126,16 @@ namespace std {
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
+  std::uint32_t seed = seed_gen();
 
   // mersenne_twister_engineのパラメータ設定済み別名であるmt19937を使用する。
   // ランダムなシードを使用して初期化
-  std::mt19937 engine(seed_gen());
+  std::mt19937 engine(seed);
 
   for (int i = 0; i &amp;lt; 10; ++i) {
     // 乱数を生成
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>minstd_rand -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/minstd_rand.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/minstd_rand.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/minstd_rand.md b/reference/random/minstd_rand.md
index 45f85e5b0..da65f6d30 100644
--- a/reference/random/minstd_rand.md
+++ b/reference/random/minstd_rand.md
@@ -70,11 +70,13 @@ sizeof(uint_fast32_t)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::minstd_rand engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::minstd_rand engine(seed);
 
   for (int i = 0; i &amp;lt; 10; ++i) {
     std::uint32_t result = engine();
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>minstd_rand0 -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/minstd_rand0.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/minstd_rand0.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/minstd_rand0.md b/reference/random/minstd_rand0.md
index c0d216aa8..918dd0ec6 100644
--- a/reference/random/minstd_rand0.md
+++ b/reference/random/minstd_rand0.md
@@ -72,11 +72,13 @@ sizeof(uint_fast32_t)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::minstd_rand0 engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::minstd_rand0 engine(seed);
 
   for (int i = 0; i &amp;lt; 10; ++i) {
     std::uint32_t result = engine();
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mt19937 -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/mt19937.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/mt19937.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/mt19937.md b/reference/random/mt19937.md
index b685d83ee..71336b443 100644
--- a/reference/random/mt19937.md
+++ b/reference/random/mt19937.md
@@ -65,11 +65,13 @@ namespace std {
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::mt19937 engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::mt19937 engine(seed);
 
   for (int i = 0; i &amp;lt; 10; ++i) {
     std::uint32_t result = engine();
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mt19937_64 -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/mt19937_64.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/mt19937_64.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/mt19937_64.md b/reference/random/mt19937_64.md
index ce1063161..edc018dae 100644
--- a/reference/random/mt19937_64.md
+++ b/reference/random/mt19937_64.md
@@ -63,11 +63,13 @@ namespace std {
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::mt19937_64 engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::mt19937_64 engine(seed);
 
   for (int i = 0; i &amp;lt; 10; ++i) {
     std::uint64_t result = engine();
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>negative_binomial_distribution -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/negative_binomial_distribution.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/negative_binomial_distribution.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/negative_binomial_distribution.md b/reference/random/negative_binomial_distribution.md
index 0157ccc87..55a8c1483 100644
--- a/reference/random/negative_binomial_distribution.md
+++ b/reference/random/negative_binomial_distribution.md
@@ -74,11 +74,13 @@ namespace std {
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // 成功確率0.5の事象を5回成功させる
   std::negative_binomial_distribution&amp;lt;&amp;gt; dist(5, 0.5);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/negative_binomial_distribution/op_call.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/negative_binomial_distribution/op_call.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/negative_binomial_distribution/op_call.md b/reference/random/negative_binomial_distribution/op_call.md
index 42490ed1c..9e895c190 100644
--- a/reference/random/negative_binomial_distribution/op_call.md
+++ b/reference/random/negative_binomial_distribution/op_call.md
@@ -30,11 +30,13 @@ result_type operator()(URBG&amp;amp; g, const param_type&amp;amp; parm); // (2)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // (1)
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/negative_binomial_distribution/op_constructor.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/negative_binomial_distribution/op_constructor.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/negative_binomial_distribution/op_constructor.md b/reference/random/negative_binomial_distribution/op_constructor.md
index 9ca678e77..fe22e624d 100644
--- a/reference/random/negative_binomial_distribution/op_constructor.md
+++ b/reference/random/negative_binomial_distribution/op_constructor.md
@@ -31,11 +31,13 @@ explicit negative_binomial_distribution(const param_type&amp;amp; parm);        // (3)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // (2) パラメータを個別に指定する
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reset -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/negative_binomial_distribution/reset.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/negative_binomial_distribution/reset.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/negative_binomial_distribution/reset.md b/reference/random/negative_binomial_distribution/reset.md
index 675a4b331..6af7b51a7 100644
--- a/reference/random/negative_binomial_distribution/reset.md
+++ b/reference/random/negative_binomial_distribution/reset.md
@@ -30,11 +30,13 @@ void reset();
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   std::negative_binomial_distribution&amp;lt;&amp;gt; dist(3, 0.5);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>normal_distribution -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/normal_distribution.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/normal_distribution.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/normal_distribution.md b/reference/random/normal_distribution.md
index e53c7095c..ef76f95f0 100644
--- a/reference/random/normal_distribution.md
+++ b/reference/random/normal_distribution.md
@@ -81,11 +81,13 @@ $$ p(x \mid \mu, \sigma ) = \frac{1}{\sigma \sqrt{2 \pi}} \exp \left( - \frac{(x
 ```cpp example
 #include &amp;lt;random&amp;gt;
 #include &amp;lt;fstream&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // 平均0.0、標準偏差1.0で分布させる
   std::normal_distribution&amp;lt;&amp;gt; dist(0.0, 1.0);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/normal_distribution/op_call.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/normal_distribution/op_call.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/normal_distribution/op_call.md b/reference/random/normal_distribution/op_call.md
index a7116bf0e..2904e048f 100644
--- a/reference/random/normal_distribution/op_call.md
+++ b/reference/random/normal_distribution/op_call.md
@@ -30,11 +30,13 @@ result_type operator()(URBG&amp;amp; g, const param_type&amp;amp; parm); // (2)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // (1)
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/normal_distribution/op_constructor.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/normal_distribution/op_constructor.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/normal_distribution/op_constructor.md b/reference/random/normal_distribution/op_constructor.md
index 88ed206e0..1a10598ab 100644
--- a/reference/random/normal_distribution/op_constructor.md
+++ b/reference/random/normal_distribution/op_constructor.md
@@ -31,11 +31,13 @@ explicit normal_distribution(const param_type&amp;amp; parm);                     // (3)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // (2) パラメータを個別に指定する
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reset -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/normal_distribution/reset.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/normal_distribution/reset.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/normal_distribution/reset.md b/reference/random/normal_distribution/reset.md
index fb2771a7a..324d19d34 100644
--- a/reference/random/normal_distribution/reset.md
+++ b/reference/random/normal_distribution/reset.md
@@ -34,11 +34,13 @@ void reset();
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   std::normal_distribution&amp;lt;&amp;gt; dist(0.0, 1.0);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>philox4x32 -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/philox4x32.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/philox4x32.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/philox4x32.md b/reference/random/philox4x32.md
index 04bf3a41c..7aaa75eca 100644
--- a/reference/random/philox4x32.md
+++ b/reference/random/philox4x32.md
@@ -42,11 +42,13 @@ namespace std {
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::philox4x32 engine{seed_gen()};
+  std::uint32_t seed = seed_gen();
+  std::philox4x32 engine{seed};
 
   for (int i = 0; i &amp;lt; 10; ++i) {
     std::uint32_t result = engine();
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>philox4x64 -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/philox4x64.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/philox4x64.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/philox4x64.md b/reference/random/philox4x64.md
index 37375e834..6ee4157e6 100644
--- a/reference/random/philox4x64.md
+++ b/reference/random/philox4x64.md
@@ -42,11 +42,13 @@ namespace std {
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::philox4x64 engine{seed_gen()};
+  std::uint32_t seed = seed_gen();
+  std::philox4x64 engine{seed};
 
   for (int i = 0; i &amp;lt; 10; ++i) {
     std::uint64_t result = engine();
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>philox_engine -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/philox_engine.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/philox_engine.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/philox_engine.md b/reference/random/philox_engine.md
index b2f32377a..634dce1a1 100644
--- a/reference/random/philox_engine.md
+++ b/reference/random/philox_engine.md
@@ -166,14 +166,16 @@ $ r \cdot w $ ビット
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
+  std::uint32_t seed = seed_gen();
 
   // philox_engineのパラメータ設定済み別名であるphilox4x32を使用する。
   // ランダムなシードを使用して初期化
-  std::philox4x32 engine{seed_gen()};
+  std::philox4x32 engine{seed};
 
   for (int i = 0; i &amp;lt; 10; ++i) {
     // 乱数を生成
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>piecewise_constant_distribution -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/piecewise_constant_distribution.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/piecewise_constant_distribution.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/piecewise_constant_distribution.md b/reference/random/piecewise_constant_distribution.md
index cde6a6853..52dcda07b 100644
--- a/reference/random/piecewise_constant_distribution.md
+++ b/reference/random/piecewise_constant_distribution.md
@@ -65,11 +65,13 @@ namespace std {
 #include &amp;lt;fstream&amp;gt;
 #include &amp;lt;random&amp;gt;
 #include &amp;lt;array&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // [0.0, 5.0)の値は、0.3の確率で出現する。
   // [5.0, 10.0)の値は、0.5の確率で出現する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/piecewise_constant_distribution/op_call.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/piecewise_constant_distribution/op_call.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/piecewise_constant_distribution/op_call.md b/reference/random/piecewise_constant_distribution/op_call.md
index b8c9cc1a2..2fd694bd1 100644
--- a/reference/random/piecewise_constant_distribution/op_call.md
+++ b/reference/random/piecewise_constant_distribution/op_call.md
@@ -31,11 +31,13 @@ result_type operator()(URBG&amp;amp; g, const param_type&amp;amp; parm); // (2)
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
 #include &amp;lt;array&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // [0.0, 0.5)の値は、確率0.3で出現する。
   // [0.5, 1.0)の値は、確率0.5で出現する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/piecewise_constant_distribution/op_constructor.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/piecewise_constant_distribution/op_constructor.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/piecewise_constant_distribution/op_constructor.md b/reference/random/piecewise_constant_distribution/op_constructor.md
index 57ae4d826..4a9237315 100644
--- a/reference/random/piecewise_constant_distribution/op_constructor.md
+++ b/reference/random/piecewise_constant_distribution/op_constructor.md
@@ -54,6 +54,7 @@ explicit piecewise_constant_distribution(const param_type&amp;amp; parm); // (5)
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
 #include &amp;lt;array&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 double always_one(double)
   { return 1.0; }
@@ -61,7 +62,8 @@ double always_one(double)
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // (1)
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reset -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/piecewise_constant_distribution/reset.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/piecewise_constant_distribution/reset.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/piecewise_constant_distribution/reset.md b/reference/random/piecewise_constant_distribution/reset.md
index ddd9c14c1..c0e3b6994 100644
--- a/reference/random/piecewise_constant_distribution/reset.md
+++ b/reference/random/piecewise_constant_distribution/reset.md
@@ -29,11 +29,13 @@ void reset();
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
 #include &amp;lt;array&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   std::array&amp;lt;double, 3&amp;gt; intervals = {0.0, 0.5, 1.0};
   std::array&amp;lt;double, 2&amp;gt; densities = {0.3, 0.5};
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>piecewise_linear_distribution -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/piecewise_linear_distribution.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/piecewise_linear_distribution.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/piecewise_linear_distribution.md b/reference/random/piecewise_linear_distribution.md
index d42a6e4f3..45612a6e0 100644
--- a/reference/random/piecewise_linear_distribution.md
+++ b/reference/random/piecewise_linear_distribution.md
@@ -65,11 +65,13 @@ namespace std {
 #include &amp;lt;fstream&amp;gt;
 #include &amp;lt;random&amp;gt;
 #include &amp;lt;array&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // [0.0, 5.0)の値は、出現確率が0.0から0.5まで線形に上昇する。
   // [5.0, 10.0)の値は、出現確率が0.5から0.1まで線形に減少する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/piecewise_linear_distribution/op_call.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/piecewise_linear_distribution/op_call.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/piecewise_linear_distribution/op_call.md b/reference/random/piecewise_linear_distribution/op_call.md
index e48a5ae88..1fe8b58cb 100644
--- a/reference/random/piecewise_linear_distribution/op_call.md
+++ b/reference/random/piecewise_linear_distribution/op_call.md
@@ -31,11 +31,13 @@ result_type operator()(URBG&amp;amp; g, const param_type&amp;amp; parm); // (2)
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
 #include &amp;lt;array&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // [0.0, 5.0)の値は、出現確率が0.0から0.5まで線形に上昇する。
   // [5.0, 10.0)の値は、出現確率が0.5から0.1まで線形に減少する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/piecewise_linear_distribution/op_constructor.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/piecewise_linear_distribution/op_constructor.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/piecewise_linear_distribution/op_constructor.md b/reference/random/piecewise_linear_distribution/op_constructor.md
index c7fadeae3..361b23e59 100644
--- a/reference/random/piecewise_linear_distribution/op_constructor.md
+++ b/reference/random/piecewise_linear_distribution/op_constructor.md
@@ -53,6 +53,7 @@ explicit piecewise_linear_distribution(const param_type&amp;amp; parm); // (5)
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
 #include &amp;lt;array&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 double always_one(double)
   { return 1.0; }
@@ -60,7 +61,8 @@ double always_one(double)
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // (1)
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reset -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/piecewise_linear_distribution/reset.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/piecewise_linear_distribution/reset.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/piecewise_linear_distribution/reset.md b/reference/random/piecewise_linear_distribution/reset.md
index 3eaca4a59..568b2bd46 100644
--- a/reference/random/piecewise_linear_distribution/reset.md
+++ b/reference/random/piecewise_linear_distribution/reset.md
@@ -29,11 +29,13 @@ void reset();
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
 #include &amp;lt;array&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   std::array&amp;lt;double, 3&amp;gt; intervals = {0.0, 0.5, 1.0};
   std::array&amp;lt;double, 3&amp;gt; densities = {0.0, 0.5, 0.0};
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>poisson_distribution -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/poisson_distribution.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/poisson_distribution.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/poisson_distribution.md b/reference/random/poisson_distribution.md
index c48cbdb5a..4cb74ce97 100644
--- a/reference/random/poisson_distribution.md
+++ b/reference/random/poisson_distribution.md
@@ -84,11 +84,13 @@ $$ p(x \mid \mu) = \frac{e^{-\mu} \mu^x}{x!} $$
 ```cpp example
 #include &amp;lt;random&amp;gt;
 #include &amp;lt;fstream&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // 平均値4.0で分布させる
   std::poisson_distribution&amp;lt;&amp;gt; dist(4.0);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/poisson_distribution/op_call.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/poisson_distribution/op_call.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/poisson_distribution/op_call.md b/reference/random/poisson_distribution/op_call.md
index 6c3e9453f..77fed0090 100644
--- a/reference/random/poisson_distribution/op_call.md
+++ b/reference/random/poisson_distribution/op_call.md
@@ -30,11 +30,13 @@ result_type operator()(URBG&amp;amp; g, const param_type&amp;amp; parm); // (2)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // (1)
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/poisson_distribution/op_constructor.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/poisson_distribution/op_constructor.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/poisson_distribution/op_constructor.md b/reference/random/poisson_distribution/op_constructor.md
index 4ee93a149..f1d2b24bb 100644
--- a/reference/random/poisson_distribution/op_constructor.md
+++ b/reference/random/poisson_distribution/op_constructor.md
@@ -31,11 +31,13 @@ explicit poisson_distribution(const param_type&amp;amp; parm); // (3)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // (2) パラメータを個別に指定する
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reset -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/poisson_distribution/reset.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/poisson_distribution/reset.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/poisson_distribution/reset.md b/reference/random/poisson_distribution/reset.md
index a46434ca2..0b3c0b1f8 100644
--- a/reference/random/poisson_distribution/reset.md
+++ b/reference/random/poisson_distribution/reset.md
@@ -30,11 +30,13 @@ void reset();
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   std::poisson_distribution&amp;lt;&amp;gt; dist(1.0);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranlux24 -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/ranlux24.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/ranlux24.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/ranlux24.md b/reference/random/ranlux24.md
index fd880f71d..b7ee359ad 100644
--- a/reference/random/ranlux24.md
+++ b/reference/random/ranlux24.md
@@ -56,11 +56,13 @@ RANLUX法は、0から4までの贅沢さレベル(luxury level)が選択可能
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::ranlux24 engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::ranlux24 engine(seed);
 
   for (int i = 0; i &amp;lt; 10; ++i) {
     std::uint32_t result = engine();
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranlux48 -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/ranlux48.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/ranlux48.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/ranlux48.md b/reference/random/ranlux48.md
index 5b9d98251..2fb536e79 100644
--- a/reference/random/ranlux48.md
+++ b/reference/random/ranlux48.md
@@ -56,11 +56,13 @@ RANLUX法は、0から4までの贅沢さレベル(luxury level)が選択可能
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::ranlux48 engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::ranlux48 engine(seed);
 
   for (int i = 0; i &amp;lt; 10; ++i) {
     std::uint64_t result = engine();
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>student_t_distribution -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/student_t_distribution.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/student_t_distribution.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/student_t_distribution.md b/reference/random/student_t_distribution.md
index 90265d1ac..744d457ae 100644
--- a/reference/random/student_t_distribution.md
+++ b/reference/random/student_t_distribution.md
@@ -81,11 +81,13 @@ $$ p(x \mid n) = \frac{1}{\sqrt{n \pi}} \cdot \frac{\Gamma((n+1)/2)}{\Gamma(n/2)
 ```cpp example
 #include &amp;lt;random&amp;gt;
 #include &amp;lt;fstream&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // 自由度1.0で分布させる
   std::student_t_distribution&amp;lt;&amp;gt; dist(1.0);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/student_t_distribution/op_call.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/student_t_distribution/op_call.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/student_t_distribution/op_call.md b/reference/random/student_t_distribution/op_call.md
index 43d355b71..3137b6f41 100644
--- a/reference/random/student_t_distribution/op_call.md
+++ b/reference/random/student_t_distribution/op_call.md
@@ -30,11 +30,13 @@ result_type operator()(URBG&amp;amp; g, const param_type&amp;amp; parm); // (2)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // (1)
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/student_t_distribution/op_constructor.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/student_t_distribution/op_constructor.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/student_t_distribution/op_constructor.md b/reference/random/student_t_distribution/op_constructor.md
index 387fbf4eb..f0bb96c06 100644
--- a/reference/random/student_t_distribution/op_constructor.md
+++ b/reference/random/student_t_distribution/op_constructor.md
@@ -31,11 +31,13 @@ explicit student_t_distribution(const param_type&amp;amp; parm);  // (3)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // (2) パラメータを個別に指定する
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reset -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/student_t_distribution/reset.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/student_t_distribution/reset.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/student_t_distribution/reset.md b/reference/random/student_t_distribution/reset.md
index 9fa2a35d1..23eb27ecc 100644
--- a/reference/random/student_t_distribution/reset.md
+++ b/reference/random/student_t_distribution/reset.md
@@ -30,11 +30,13 @@ void reset();
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   std::student_t_distribution&amp;lt;&amp;gt; dist(1.0);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>subtract_with_carry_engine -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/subtract_with_carry_engine.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/subtract_with_carry_engine.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/subtract_with_carry_engine.md b/reference/random/subtract_with_carry_engine.md
index 4f9d01b15..d77c7e0f1 100644
--- a/reference/random/subtract_with_carry_engine.md
+++ b/reference/random/subtract_with_carry_engine.md
@@ -105,10 +105,11 @@ namespace std {
 int main()
 {
   std::random_device seed_gen;
+  std::uint32_t seed = seed_gen();
 
   // subtract_with_carry_engineのパラメータ設定済み別名であるranlux24_baseを使用する。
   // ランダムなシードを使用して初期化
-  std::ranlux24_base engine(seed_gen());
+  std::ranlux24_base engine(seed);
 
   for (int i = 0; i &amp;lt; 10; ++i) {
     // 乱数を生成
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uniform_int_distribution -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/uniform_int_distribution.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/uniform_int_distribution.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/uniform_int_distribution.md b/reference/random/uniform_int_distribution.md
index 65110008c..bc98e03ea 100644
--- a/reference/random/uniform_int_distribution.md
+++ b/reference/random/uniform_int_distribution.md
@@ -77,11 +77,13 @@ namespace std {
 ```cpp example
 #include &amp;lt;random&amp;gt;
 #include &amp;lt;fstream&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main() 
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // 0以上9以下の値を等確率で発生させる
   std::uniform_int_distribution&amp;lt;&amp;gt; dist(0, 9);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/uniform_int_distribution/op_call.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/uniform_int_distribution/op_call.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/uniform_int_distribution/op_call.md b/reference/random/uniform_int_distribution/op_call.md
index 6eec7acff..5e82595a0 100644
--- a/reference/random/uniform_int_distribution/op_call.md
+++ b/reference/random/uniform_int_distribution/op_call.md
@@ -31,11 +31,13 @@ result_type operator()(URBG&amp;amp; g, const param_type&amp;amp; parm); // (2)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::mt19937 engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::mt19937 engine(seed);
 
   // (1)
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/uniform_int_distribution/op_constructor.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/uniform_int_distribution/op_constructor.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/uniform_int_distribution/op_constructor.md b/reference/random/uniform_int_distribution/op_constructor.md
index 857ab8228..5207b3f1c 100644
--- a/reference/random/uniform_int_distribution/op_constructor.md
+++ b/reference/random/uniform_int_distribution/op_constructor.md
@@ -35,11 +35,13 @@ explicit uniform_int_distribution(const param_type&amp;amp; parm);                     /
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // (2) 範囲を指定する
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reset -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/uniform_int_distribution/reset.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/uniform_int_distribution/reset.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/uniform_int_distribution/reset.md b/reference/random/uniform_int_distribution/reset.md
index 9d8d7d2ce..a60f9f5ca 100644
--- a/reference/random/uniform_int_distribution/reset.md
+++ b/reference/random/uniform_int_distribution/reset.md
@@ -28,11 +28,13 @@ void reset();
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   std::uniform_int_distribution&amp;lt;&amp;gt; dist(0, 3);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uniform_real_distribution -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/uniform_real_distribution.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/uniform_real_distribution.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/uniform_real_distribution.md b/reference/random/uniform_real_distribution.md
index cc3e5fe02..8fc6e7cf4 100644
--- a/reference/random/uniform_real_distribution.md
+++ b/reference/random/uniform_real_distribution.md
@@ -70,11 +70,13 @@ namespace std {
 ```cpp example
 #include &amp;lt;random&amp;gt;
 #include &amp;lt;fstream&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // 0.0以上1.0未満の値を等確率で発生させる
   std::uniform_real_distribution&amp;lt;&amp;gt; dist(0.0, 1.0);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/uniform_real_distribution/op_call.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/uniform_real_distribution/op_call.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/uniform_real_distribution/op_call.md b/reference/random/uniform_real_distribution/op_call.md
index 8ee256abe..e2184ec92 100644
--- a/reference/random/uniform_real_distribution/op_call.md
+++ b/reference/random/uniform_real_distribution/op_call.md
@@ -31,11 +31,13 @@ result_type operator()(URBG&amp;amp; g, const param_type&amp;amp; parm); // (2)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::mt19937 engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::mt19937 engine(seed);
 
   // (1)
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/uniform_real_distribution/op_constructor.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/uniform_real_distribution/op_constructor.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/uniform_real_distribution/op_constructor.md b/reference/random/uniform_real_distribution/op_constructor.md
index 52da9ba0f..1a51ad19a 100644
--- a/reference/random/uniform_real_distribution/op_constructor.md
+++ b/reference/random/uniform_real_distribution/op_constructor.md
@@ -31,11 +31,13 @@ explicit uniform_real_distribution(const param_type&amp;amp; parm);             // (3)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // (2) 範囲を指定する
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reset -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/uniform_real_distribution/reset.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/uniform_real_distribution/reset.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/uniform_real_distribution/reset.md b/reference/random/uniform_real_distribution/reset.md
index 28891c43e..304a8f1eb 100644
--- a/reference/random/uniform_real_distribution/reset.md
+++ b/reference/random/uniform_real_distribution/reset.md
@@ -28,11 +28,13 @@ void reset();
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   std::uniform_real_distribution&amp;lt;&amp;gt; dist(0.0, 1.0);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>weibull_distribution -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/weibull_distribution.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/weibull_distribution.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/weibull_distribution.md b/reference/random/weibull_distribution.md
index bcf45ea95..b47b88665 100644
--- a/reference/random/weibull_distribution.md
+++ b/reference/random/weibull_distribution.md
@@ -77,11 +77,13 @@ $$ p(x \mid a, b) = \frac{a}{b} \cdot \left( \frac{x}{b} \right)^{a-1} \cdot \ex
 ```cpp example
 #include &amp;lt;random&amp;gt;
 #include &amp;lt;fstream&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // 形状パラメータ1.0、尺度パラメータ1.0で分布させる
   std::weibull_distribution&amp;lt;&amp;gt; dist1(1.0, 1.0);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/weibull_distribution/op_call.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/weibull_distribution/op_call.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/weibull_distribution/op_call.md b/reference/random/weibull_distribution/op_call.md
index d197c467a..00aeee241 100644
--- a/reference/random/weibull_distribution/op_call.md
+++ b/reference/random/weibull_distribution/op_call.md
@@ -30,11 +30,13 @@ result_type operator()(URBG&amp;amp; g, const param_type&amp;amp; parm); // (2)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // (1)
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/weibull_distribution/op_constructor.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/weibull_distribution/op_constructor.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/weibull_distribution/op_constructor.md b/reference/random/weibull_distribution/op_constructor.md
index 19cf0e506..ab2a426a4 100644
--- a/reference/random/weibull_distribution/op_constructor.md
+++ b/reference/random/weibull_distribution/op_constructor.md
@@ -31,11 +31,13 @@ explicit weibull_distribution(const param_type&amp;amp; parm);             // (3)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // (1) パラメータを個別に指定する
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reset -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/reference/random/weibull_distribution/reset.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:reference/random/weibull_distribution/reset.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/weibull_distribution/reset.md b/reference/random/weibull_distribution/reset.md
index 3a64f9910..14377d3b4 100644
--- a/reference/random/weibull_distribution/reset.md
+++ b/reference/random/weibull_distribution/reset.md
@@ -30,11 +30,13 @@ void reset();
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;random&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main()
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   std::weibull_distribution&amp;lt;&amp;gt; dist(1.0, 1.0);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>乱数分布の図を作る方法 -- 乱数のサンプルコード : より説明的なコードにするために乱数のシードを一旦変数にもつようにした</title>
      <link href="https://cpprefjp.github.io/start_editing/random_figure.html"/>
      <id>69eec33c27598e1d5dec01851a4516a898de19df:start_editing/random_figure.md</id>
      <updated>2025-10-23T01:15:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/random_figure.md b/start_editing/random_figure.md
index 3fe1ec4d6..b70989b53 100644
--- a/start_editing/random_figure.md
+++ b/start_editing/random_figure.md
@@ -12,11 +12,13 @@
 ```cpp example
 #include &amp;lt;random&amp;gt;
 #include &amp;lt;fstream&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 
 int main() 
 {
   std::random_device seed_gen;
-  std::default_random_engine engine(seed_gen());
+  std::uint32_t seed = seed_gen();
+  std::default_random_engine engine(seed);
 
   // 0以上9以下の値を等確率で発生させる
   std::uniform_int_distribution&amp;lt;&amp;gt; dist(0, 9);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>count -- いくつかのコード例の出力を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_count.html"/>
      <id>d707563ff7798e050aa616dc843d19c57d956a76:reference/algorithm/ranges_count.md</id>
      <updated>2025-10-21T16:45:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_count.md b/reference/algorithm/ranges_count.md
index 4cea7f80f..58a13d5e8 100644
--- a/reference/algorithm/ranges_count.md
+++ b/reference/algorithm/ranges_count.md
@@ -166,7 +166,7 @@ int main() {
 #### 出力
 ```
 count of label==&amp;#34;foo&amp;#34;: 2
-count of id==1: 2
+count of id==1: 1
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_format_string -- いくつかのコード例の出力を修正</title>
      <link href="https://cpprefjp.github.io/reference/format/basic_format_string.html"/>
      <id>d707563ff7798e050aa616dc843d19c57d956a76:reference/format/basic_format_string.md</id>
      <updated>2025-10-21T16:45:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/basic_format_string.md b/reference/format/basic_format_string.md
index d6a534940..7cb8ac258 100644
--- a/reference/format/basic_format_string.md
+++ b/reference/format/basic_format_string.md
@@ -96,7 +96,7 @@ int main()
 
 ### 出力
 ```
-2023-02-06 10:46:53: Hello 42 World
+2023-02-06 10:46:53 JST: Hello 42 World
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- いくつかのコード例の出力を修正</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>d707563ff7798e050aa616dc843d19c57d956a76:reference/format/format.md</id>
      <updated>2025-10-21T16:45:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index c3801f9ab..06f14bead 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -479,7 +479,7 @@ int main() {
 #### 出力
 ```
 0. [1, 2, 3]
-1. [&amp;#34;abc&amp;#34;, &amp;#34;bbb&amp;#34;, &amp;#34;ccc&amp;#34;]
+1. [&amp;#34;aaa&amp;#34;, &amp;#34;bbb&amp;#34;, &amp;#34;ccc&amp;#34;]
 2. {1: &amp;#34;aaa&amp;#34;, 2: &amp;#34;bbb&amp;#34;}
 3. {1, 2, 3}
 4. [1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reference_wrapper -- いくつかのコード例の出力を修正</title>
      <link href="https://cpprefjp.github.io/reference/functional/reference_wrapper.html"/>
      <id>d707563ff7798e050aa616dc843d19c57d956a76:reference/functional/reference_wrapper.md</id>
      <updated>2025-10-21T16:45:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/reference_wrapper.md b/reference/functional/reference_wrapper.md
index 3ee9bfab0..8a6811f0e 100644
--- a/reference/functional/reference_wrapper.md
+++ b/reference/functional/reference_wrapper.md
@@ -132,7 +132,6 @@ my_struct&amp;amp; get_my_struct()
 ### 出力
 
 ```
-0
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- いくつかのコード例の出力を修正</title>
      <link href="https://cpprefjp.github.io/reference/functional/reference_wrapper/op_deduction_guide.html"/>
      <id>d707563ff7798e050aa616dc843d19c57d956a76:reference/functional/reference_wrapper/op_deduction_guide.md</id>
      <updated>2025-10-21T16:45:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/reference_wrapper/op_deduction_guide.md b/reference/functional/reference_wrapper/op_deduction_guide.md
index 65d040c3b..20bd44fde 100644
--- a/reference/functional/reference_wrapper/op_deduction_guide.md
+++ b/reference/functional/reference_wrapper/op_deduction_guide.md
@@ -34,7 +34,7 @@ int main()
 
 ### 出力
 ```
-４
+4
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end (非メンバ関数) -- いくつかのコード例の出力を修正</title>
      <link href="https://cpprefjp.github.io/reference/initializer_list/initializer_list/end_free.html"/>
      <id>d707563ff7798e050aa616dc843d19c57d956a76:reference/initializer_list/initializer_list/end_free.md</id>
      <updated>2025-10-21T16:45:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/initializer_list/initializer_list/end_free.md b/reference/initializer_list/initializer_list/end_free.md
index 6c130fa3d..a4b91264b 100644
--- a/reference/initializer_list/initializer_list/end_free.md
+++ b/reference/initializer_list/initializer_list/end_free.md
@@ -48,6 +48,8 @@ int main()
 ### 出力
 ```
 1
+2
+3
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flags -- いくつかのコード例の出力を修正</title>
      <link href="https://cpprefjp.github.io/reference/ios/ios_base/flags.html"/>
      <id>d707563ff7798e050aa616dc843d19c57d956a76:reference/ios/ios_base/flags.md</id>
      <updated>2025-10-21T16:45:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ios/ios_base/flags.md b/reference/ios/ios_base/flags.md
index d51f00a3c..1cd138504 100644
--- a/reference/ios/ios_base/flags.md
+++ b/reference/ios/ios_base/flags.md
@@ -71,6 +71,7 @@ int main()
 
 ### 出力
 ```
+100
 64
 100
 64
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator-= -- いくつかのコード例の出力を修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator/op_minus_assign.html"/>
      <id>d707563ff7798e050aa616dc843d19c57d956a76:reference/iterator/counted_iterator/op_minus_assign.md</id>
      <updated>2025-10-21T16:45:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator/op_minus_assign.md b/reference/iterator/counted_iterator/op_minus_assign.md
index 2932754fb..629a42130 100644
--- a/reference/iterator/counted_iterator/op_minus_assign.md
+++ b/reference/iterator/counted_iterator/op_minus_assign.md
@@ -53,7 +53,7 @@ int main() {
 
 ### 出力
 ```
-5
+4
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>weakly_incrementable -- いくつかのコード例の出力を修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/weakly_incrementable.html"/>
      <id>d707563ff7798e050aa616dc843d19c57d956a76:reference/iterator/weakly_incrementable.md</id>
      <updated>2025-10-21T16:45:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/weakly_incrementable.md b/reference/iterator/weakly_incrementable.md
index b4167a1a1..d068279c7 100644
--- a/reference/iterator/weakly_incrementable.md
+++ b/reference/iterator/weakly_incrementable.md
@@ -96,11 +96,11 @@ int* is weakly incrementable
 const int* is weakly incrementable
 std::vector&amp;lt;int&amp;gt;::iterator is weakly incrementable
 std::ostream_iterator&amp;lt;double&amp;gt; is weakly incrementable
-sample_incrementable is weakly incrementable
+sample_weak_incrementable is weakly incrementable
 
 int* const is not weakly incrementable
 std::unique_ptr&amp;lt;int&amp;gt; is not weakly incrementable
-sample_not_incrementable is not weakly incrementable
+sample_not_weak_incrementable is not weakly incrementable
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>regex_match -- いくつかのコード例の出力を修正</title>
      <link href="https://cpprefjp.github.io/reference/regex/regex_match.html"/>
      <id>d707563ff7798e050aa616dc843d19c57d956a76:reference/regex/regex_match.md</id>
      <updated>2025-10-21T16:45:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/regex/regex_match.md b/reference/regex/regex_match.md
index b39d2ef56..fa1ca0844 100644
--- a/reference/regex/regex_match.md
+++ b/reference/regex/regex_match.md
@@ -178,7 +178,7 @@ int main()
 
 ### 出力
 ```
-(1) = true
+(1) true
 str = &amp;#39;abc123def&amp;#39;, position = 0
 (2) true
 str = &amp;#39;abc123def&amp;#39;, position = 0
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>regex_search -- いくつかのコード例の出力を修正</title>
      <link href="https://cpprefjp.github.io/reference/regex/regex_search.html"/>
      <id>d707563ff7798e050aa616dc843d19c57d956a76:reference/regex/regex_search.md</id>
      <updated>2025-10-21T16:45:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/regex/regex_search.md b/reference/regex/regex_search.md
index cd0a10918..85350cd4b 100644
--- a/reference/regex/regex_search.md
+++ b/reference/regex/regex_search.md
@@ -179,7 +179,7 @@ int main()
 
 ### 出力
 ```
-(1) = true
+(1) true
 str = &amp;#39;123&amp;#39;, position = 3
 (2) true
 str = &amp;#39;123&amp;#39;, position = 3
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator+ (非メンバ関数) -- いくつかのコード例を修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_plus.html"/>
      <id>c012fa32030b9a78f11cda6426d51a9235d7481a:reference/iterator/basic_const_iterator/op_plus.md</id>
      <updated>2025-10-21T16:44:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_plus.md b/reference/iterator/basic_const_iterator/op_plus.md
index 729919512..2ec77f4f7 100644
--- a/reference/iterator/basic_const_iterator/op_plus.md
+++ b/reference/iterator/basic_const_iterator/op_plus.md
@@ -41,7 +41,7 @@ return basic_const_iterator(i.current_ + n);
 int main() {
   std::vector vec = {1, 2, 3, 4, 5};
 
-  std::basic_const_iterator cit = vec.end();
+  std::basic_const_iterator cit = vec.begin();
 
   auto cit2 = cit + 3;
   auto cit3 = 4 + cit;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>permutable -- いくつかのコード例を修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/permutable.html"/>
      <id>c012fa32030b9a78f11cda6426d51a9235d7481a:reference/iterator/permutable.md</id>
      <updated>2025-10-21T16:44:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/permutable.md b/reference/iterator/permutable.md
index 95d912d5d..1b20b1c70 100644
--- a/reference/iterator/permutable.md
+++ b/reference/iterator/permutable.md
@@ -44,6 +44,7 @@ int main() {
   f&amp;lt;std::forward_list&amp;lt;int&amp;gt;::iterator&amp;gt;(&amp;#34;std::forward_list&amp;lt;int&amp;gt;::iterator&amp;#34;);
   f&amp;lt;std::list&amp;lt;int&amp;gt;::iterator&amp;gt;(&amp;#34;std::list&amp;lt;int&amp;gt;::iterator&amp;#34;);
   f&amp;lt;std::vector&amp;lt;int&amp;gt;::iterator&amp;gt;(&amp;#34;std::vector&amp;lt;int&amp;gt;::iterator&amp;#34;);
+  f&amp;lt;std::vector&amp;lt;std::unique_ptr&amp;lt;int&amp;gt;&amp;gt;::iterator&amp;gt;(&amp;#34;std::vector&amp;lt;std::unique_ptr&amp;lt;int&amp;gt;&amp;gt;::iterator&amp;#34;);
 
   std::cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
   f&amp;lt;const int*&amp;gt;(&amp;#34;const int*&amp;#34;);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stop_possible -- いくつかのコード例を修正</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/stop_token/stop_possible.html"/>
      <id>c012fa32030b9a78f11cda6426d51a9235d7481a:reference/stop_token/stop_token/stop_possible.md</id>
      <updated>2025-10-21T16:44:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/stop_token/stop_possible.md b/reference/stop_token/stop_token/stop_possible.md
index a9dcedc21..f28bb13a9 100644
--- a/reference/stop_token/stop_token/stop_possible.md
+++ b/reference/stop_token/stop_token/stop_possible.md
@@ -62,7 +62,7 @@ int main()
   // 停止状態が停止要求を受け取った場合は、
   // その後で stop_source が破棄されても stop_possible() == true のままになる
   assert(st1.stop_possible() == true);
-  assert(st2.stop_possible() == false);
+  assert(st2.stop_possible() == true);
   assert(st3.stop_possible() == false);
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- stringbuf : オーバーロードの番号を修正</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringbuf/op_constructor.html"/>
      <id>00f118737e1bddc536ec9c77175ce3f70e2a60c1:reference/sstream/basic_stringbuf/op_constructor.md</id>
      <updated>2025-10-21T15:32:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringbuf/op_constructor.md b/reference/sstream/basic_stringbuf/op_constructor.md
index db0530c44..ba24f7c55 100644
--- a/reference/sstream/basic_stringbuf/op_constructor.md
+++ b/reference/sstream/basic_stringbuf/op_constructor.md
@@ -6,73 +6,73 @@
 
 ```cpp
 basic_stringbuf()
-  : basic_stringbuf(ios_base::in | ios_base::out) {}        // (1) C++11
+  : basic_stringbuf(ios_base::in | ios_base::out) {}          // (1) C++11
 explicit basic_stringbuf(
-  ios_base::openmode which);                                // (2) C++11
+  ios_base::openmode which);                                  // (2) C++11
 explicit basic_stringbuf(
-  ios_base::openmode which = ios_base::in | ios_base::out); // (1)+(2) C++03
+  ios_base::openmode which = ios_base::in | ios_base::out);   // (1)+(2) C++03
 
 explicit basic_stringbuf(
   const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; s,
-  ios_base::openmode which = ios_base::in | ios_base::out);  // (2) C++03
+  ios_base::openmode which = ios_base::in | ios_base::out);   // (3) C++03
 
 explicit basic_stringbuf(
   basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp;&amp;amp; s,
-  ios_base::openmode which = ios_base::in | ios_base::out);   // (3) C++20
+  ios_base::openmode which = ios_base::in | ios_base::out);   // (4) C++20
 
 basic_stringbuf(
   ios_base::openmode which,
-  const Allocator&amp;amp; a);                                        // (4) C++20
+  const Allocator&amp;amp; a);                                        // (5) C++20
 
 explicit basic_stringbuf(const Allocator&amp;amp; a)
-  : basic_stringbuf(ios_base::in | ios_base::out, a) {}       // (5) C++20
+  : basic_stringbuf(ios_base::in | ios_base::out, a) {}       // (6) C++20
 
 explicit basic_stringbuf(
   const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; s,
   const Allocator&amp;amp; a)
-    : basic_stringbuf(s, ios_base::in | ios_base::out, a) {}  // (6) C++20
+    : basic_stringbuf(s, ios_base::in | ios_base::out, a) {}  // (7) C++20
 
 explicit basic_stringbuf(
   const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; s,
   ios_base::openmode which,
-  const Allocator&amp;amp; a);                                        // (7) C++20
+  const Allocator&amp;amp; a);                                        // (8) C++20
 
 template&amp;lt;class SAlloc&amp;gt;
 explicit basic_stringbuf(
   const basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt;&amp;amp; s,
-  ios_base::openmode which = ios_base::in | ios_base::out);   // (8) C++20
+  ios_base::openmode which = ios_base::in | ios_base::out);   // (9) C++20
 
 template&amp;lt;class SAlloc&amp;gt;
 basic_stringbuf(
   const basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt;&amp;amp; s,
   const Allocator&amp;amp; a)
-    : basic_stringbuf(s, ios_base::in | ios_base::out, a) {}  // (9) C++20
+    : basic_stringbuf(s, ios_base::in | ios_base::out, a) {}  // (10) C++20
 
 template&amp;lt;class SAlloc&amp;gt;
 basic_stringbuf(
   const basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt;&amp;amp; s,
   ios_base::openmode which,
-  const Allocator&amp;amp; a);                                        // (10) C++20
+  const Allocator&amp;amp; a);                                        // (11) C++20
 
-basic_stringbuf(basic_stringbuf&amp;amp;&amp;amp; rhs);                       // (11) C++11
-basic_stringbuf(basic_stringbuf&amp;amp;&amp;amp; rhs, const Allocator&amp;amp; a);   // (12) C++20
+basic_stringbuf(basic_stringbuf&amp;amp;&amp;amp; rhs);                       // (12) C++11
+basic_stringbuf(basic_stringbuf&amp;amp;&amp;amp; rhs, const Allocator&amp;amp; a);   // (13) C++20
 
 template&amp;lt;class T&amp;gt;
 explicit
 basic_stringbuf(
   const T&amp;amp; t,
-  ios_base::openmode which = ios_base::in | ios_base::out);   // (13) C++26
+  ios_base::openmode which = ios_base::in | ios_base::out);   // (14) C++26
 
 template&amp;lt;class T&amp;gt;
 basic_stringbuf(
   const T&amp;amp; t,
-  const Allocator&amp;amp; a);                                        // (14) C++26
+  const Allocator&amp;amp; a);                                        // (15) C++26
 
 template&amp;lt;class T&amp;gt;
 basic_stringbuf(
   const T&amp;amp; t,
   ios_base::openmode which,
-  const Allocator&amp;amp; a);                                        // (15) C++26
+  const Allocator&amp;amp; a);                                        // (16) C++26
 ```
 * ios_base[link /reference/ios/ios_base.md]
 * basic_string[link /reference/string/basic_string.md]
@@ -83,22 +83,23 @@ basic_stringbuf(
 - (1) : デフォルトコンストラクタ
 - (2) : 指定されたモードで構築する
 - (3) : 入力文字列として[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、指定されたモードで構築する
-- (4) : モードとアロケータを指定して構築する
-- (5) : アロケータを指定して構築する
-- (6) : 入力文字列として[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、アロケータを指定して構築する
-- (7) : 入力文字列として[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピー、モード、アロケータを指定して構築する
-- (8) : 入力文字列として`Allocator`に変換可能なアロケータ型をもつ[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、指定されたモードで構築する
-- (9) : 入力文字列として`Allocator`に変換可能なアロケータ型をもつ[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、アロケータを指定して構築する
-- (10) : 入力文字列として`Allocator`に変換可能なアロケータ型をもつ[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピー、モード、アロケータを指定して構築する
-- (11) : ムーブコンストラクタ
-- (12) : ムーブコンストラクタでアロケータを指定して構築する
-- (13) : 入力文字列として[`basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列と、モードを設定する
-- (14) : 入力文字列として[`basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列と、アロケータを設定する
-- (15) : 入力文字列として[`basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列と、モードとアロケータを設定する
+- (4) : 入力文字列として[`std::basic_string`](/reference/string/basic_string.md)オブジェクトの右辺値参照と、指定されたモードで構築する
+- (5) : モードとアロケータを指定して構築する
+- (6) : アロケータを指定して構築する
+- (7) : 入力文字列として[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、アロケータを指定して構築する
+- (8) : 入力文字列として[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピー、モード、アロケータを指定して構築する
+- (9) : 入力文字列として`Allocator`に変換可能なアロケータ型をもつ[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、指定されたモードで構築する
+- (10) : 入力文字列として`Allocator`に変換可能なアロケータ型をもつ[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、アロケータを指定して構築する
+- (11) : 入力文字列として`Allocator`に変換可能なアロケータ型をもつ[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピー、モード、アロケータを指定して構築する
+- (12) : ムーブコンストラクタ
+- (13) : ムーブコンストラクタでアロケータを指定して構築する
+- (14) : 入力文字列として[`basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列と、モードを設定する
+- (15) : 入力文字列として[`basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列と、アロケータを設定する
+- (16) : 入力文字列として[`basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列と、モードとアロケータを設定する
 
 
 ## テンプレートパラメータ制約
-- (13), (14), (15) : `is_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;CharT, Traits&amp;gt;&amp;gt;`が`true`であること
+- (14), (15), (16) : `is_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;CharT, Traits&amp;gt;&amp;gt;`が`true`であること
 
 
 ## 効果
@@ -107,12 +108,13 @@ basic_stringbuf(
 - (3) : 内部の文字列バッファを`s`のコピー、モードは`which`に設定する
 - (4) : 内部の文字列バッファを`std::move(s)`で、モードは`which`に設定する
 - (5) : 内部の文字列バッファを空にし、モードは`which`、アロケータは`a`に設定する
-- (6), (7), (8), (9), (10) : 各引数は内部状態の初期化に使用される
-- (11) : `rhs`から`basic_stringbuf`オブジェクトをムーブ構築する
-- (12) : `rhs`から`basic_stringbuf`オブジェクトをムーブ構築し、アロケータは`a`を使用する
-- (13) : `basic_string_view&amp;lt;CharT, Traits&amp;gt;(t)`で文字列を初期化し、モードは`which`に設定する
-- (14) : `basic_string_view&amp;lt;CharT, Traits&amp;gt;(t)`で文字列を初期化し、モードは`ios_base::in | ios_base::out`、アロケータは`a`に設定する
-- (15) : `basic_string_view&amp;lt;CharT, Traits&amp;gt;(t)`で文字列を初期化し、モードは`which`、アロケータは`a`に設定する
+- (6) : 内部の文字列バッファを空にし、モードは`ios_base::in | ios_base::out`、アロケータは`a`に設定する
+- (7), (8), (9), (10), (11) : 各引数は内部状態の初期化に使用される
+- (12) : `rhs`から`basic_stringbuf`オブジェクトをムーブ構築する
+- (13) : `rhs`から`basic_stringbuf`オブジェクトをムーブ構築し、アロケータは`a`を使用する
+- (14) : `basic_string_view&amp;lt;CharT, Traits&amp;gt;(t)`で文字列を初期化し、モードは`which`に設定する
+- (15) : `basic_string_view&amp;lt;CharT, Traits&amp;gt;(t)`で文字列を初期化し、モードは`ios_base::in | ios_base::out`、アロケータは`a`に設定する
+- (16) : `basic_string_view&amp;lt;CharT, Traits&amp;gt;(t)`で文字列を初期化し、モードは`which`、アロケータは`a`に設定する
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rdbuf -- stringbuf, spanbuf : コード例や出力を修正</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_spanstream/rdbuf.html"/>
      <id>45eb8c111ab6158d1faa95d1689473b28b53ec2d:reference/spanstream/basic_spanstream/rdbuf.md</id>
      <updated>2025-10-21T15:28:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_spanstream/rdbuf.md b/reference/spanstream/basic_spanstream/rdbuf.md
index 1f3d610da..5458b49cb 100644
--- a/reference/spanstream/basic_spanstream/rdbuf.md
+++ b/reference/spanstream/basic_spanstream/rdbuf.md
@@ -49,7 +49,7 @@ int main()
 ### 出力
 ```
 t
-est!
+!est
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- stringbuf, spanbuf : コード例や出力を修正</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringbuf/op_constructor.html"/>
      <id>45eb8c111ab6158d1faa95d1689473b28b53ec2d:reference/sstream/basic_stringbuf/op_constructor.md</id>
      <updated>2025-10-21T15:28:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringbuf/op_constructor.md b/reference/sstream/basic_stringbuf/op_constructor.md
index 4936f70c8..db0530c44 100644
--- a/reference/sstream/basic_stringbuf/op_constructor.md
+++ b/reference/sstream/basic_stringbuf/op_constructor.md
@@ -129,13 +129,16 @@ int main()
   std::cout &amp;lt;&amp;lt; buf1.str() &amp;lt;&amp;lt; std::endl;
   
   // (3) 文字列を指定して構築
-  std::stringbuf buf2(&amp;#34;initial&amp;#34;);
+  std::stringbuf buf2(&amp;#34;initial&amp;#34;, std::ios_base::out | std::ios_base::app);
   buf2.sputc(&amp;#39;!&amp;#39;);
   std::cout &amp;lt;&amp;lt; buf2.str() &amp;lt;&amp;lt; std::endl;
 }
 ```
 * sputc[link /reference/streambuf/basic_streambuf/sputc.md]
 * str()[link str.md]
+* std::ios_base[link /reference/ios/ios_base.md]
+* out[link /reference/ios/ios_base/type-openmode.md]
+* app[link /reference/ios/ios_base/type-openmode.md]
 
 #### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>str -- stringbuf, spanbuf : コード例や出力を修正</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringbuf/str.html"/>
      <id>45eb8c111ab6158d1faa95d1689473b28b53ec2d:reference/sstream/basic_stringbuf/str.md</id>
      <updated>2025-10-21T15:28:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringbuf/str.md b/reference/sstream/basic_stringbuf/str.md
index 7424b4953..b8dde7d0e 100644
--- a/reference/sstream/basic_stringbuf/str.md
+++ b/reference/sstream/basic_stringbuf/str.md
@@ -78,7 +78,7 @@ int main()
   ch = buf.sbumpc();  // &amp;#39;e&amp;#39;
   std::cout &amp;lt;&amp;lt; &amp;#34;3: After reading 2 chars: &amp;#34; &amp;lt;&amp;lt; buf.str() &amp;lt;&amp;lt; std::endl;
   
-  // 書き込み（現在の位置から）
+  // 書き込み（読み取り位置と書き込み位置は別なので、先頭から書き込まれる）
   buf.sputc(&amp;#39;X&amp;#39;);
   buf.sputc(&amp;#39;Y&amp;#39;);
   std::cout &amp;lt;&amp;lt; &amp;#34;4: After writing: &amp;#34; &amp;lt;&amp;lt; buf.str() &amp;lt;&amp;lt; std::endl;
@@ -97,7 +97,7 @@ int main()
 1: Hello, World!
 2: New content
 3: After reading 2 chars: Read/Write test
-4: After writing: ReXY/Write test
+4: After writing: XYad/Write test
 5: Empty? yes
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- stringbuf, spanbuf : コード例や出力を修正</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringstream/op_constructor.html"/>
      <id>45eb8c111ab6158d1faa95d1689473b28b53ec2d:reference/sstream/basic_stringstream/op_constructor.md</id>
      <updated>2025-10-21T15:28:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringstream/op_constructor.md b/reference/sstream/basic_stringstream/op_constructor.md
index 43a302aa1..68db07c9a 100644
--- a/reference/sstream/basic_stringstream/op_constructor.md
+++ b/reference/sstream/basic_stringstream/op_constructor.md
@@ -121,12 +121,15 @@ int main()
   std::cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; std::endl;
   
   // (3) 文字列を指定して構築
-  std::stringstream ss2(&amp;#34;initial value&amp;#34;);
+  std::stringstream ss2(&amp;#34;initial value&amp;#34;, std::ios_base::out | std::ios_base::app);
   ss2 &amp;lt;&amp;lt; &amp;#34; added&amp;#34;;
   std::cout &amp;lt;&amp;lt; ss2.str() &amp;lt;&amp;lt; std::endl;
 }
 ```
 * str()[link str.md]
+* std::ios_base[link /reference/ios/ios_base.md]
+* out[link /reference/ios/ios_base/type-openmode.md]
+* app[link /reference/ios/ios_base/type-openmode.md]
 
 #### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rdbuf -- stringbuf, spanbuf : コード例や出力を修正</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringstream/rdbuf.html"/>
      <id>45eb8c111ab6158d1faa95d1689473b28b53ec2d:reference/sstream/basic_stringstream/rdbuf.md</id>
      <updated>2025-10-21T15:28:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringstream/rdbuf.md b/reference/sstream/basic_stringstream/rdbuf.md
index c79760227..1683e7849 100644
--- a/reference/sstream/basic_stringstream/rdbuf.md
+++ b/reference/sstream/basic_stringstream/rdbuf.md
@@ -42,5 +42,5 @@ int main()
 ### 出力
 ```
 t
-est!
+!est
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>str -- stringbuf, spanbuf : コード例や出力を修正</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringstream/str.html"/>
      <id>45eb8c111ab6158d1faa95d1689473b28b53ec2d:reference/sstream/basic_stringstream/str.md</id>
      <updated>2025-10-21T15:28:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringstream/str.md b/reference/sstream/basic_stringstream/str.md
index 9e62e17ef..7f77ddcb4 100644
--- a/reference/sstream/basic_stringstream/str.md
+++ b/reference/sstream/basic_stringstream/str.md
@@ -67,6 +67,7 @@ int main()
   std::cout &amp;lt;&amp;lt; &amp;#34;1: &amp;#34; &amp;lt;&amp;lt; ss.str() &amp;lt;&amp;lt; std::endl;
   
   // ストリームに追記
+  ss.seekp(0, std::ios_base::end);
   ss &amp;lt;&amp;lt; &amp;#34; + added&amp;#34;;
   std::cout &amp;lt;&amp;lt; &amp;#34;2: &amp;#34; &amp;lt;&amp;lt; ss.str() &amp;lt;&amp;lt; std::endl;
   
@@ -85,6 +86,9 @@ int main()
   std::cout &amp;lt;&amp;lt; &amp;#34;5: Empty? &amp;#34; &amp;lt;&amp;lt; (ss.str().empty() ? &amp;#34;yes&amp;#34; : &amp;#34;no&amp;#34;) &amp;lt;&amp;lt; std::endl;
 }
 ```
+* seekp[link /reference/ostream/basic_ostream/seekp.md]
+* std::ios_base[link /reference/ios/ios_base.md]
+* end[link /reference/ios/ios_base/type-seekdir.md]
 
 #### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-01-26T09:01:17.371826</updated>
  <id>d734f1aa-b4bb-4f6d-8277-8cb04c4e54f2</id>

  
    <entry>
      <title>to_string -- basic_stacktraceのto_string : 名前空間の閉じがなかった</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/to_string.html"/>
      <id>1c09e26fd060d40371aca1f6d0b14e34e78af6db:reference/stacktrace/basic_stacktrace/to_string.md</id>
      <updated>2021-01-26T17:56:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/to_string.md b/reference/stacktrace/basic_stacktrace/to_string.md
index 1af158e51..f1bffc812 100644
--- a/reference/stacktrace/basic_stacktrace/to_string.md
+++ b/reference/stacktrace/basic_stacktrace/to_string.md
@@ -9,6 +9,7 @@
 namespace std {
   template &amp;lt;class Allocator&amp;gt;
   string to_string(const basic_stacktrace&amp;lt;Allocator&amp;gt;&amp;amp; st);
+}
 ```
 * string[link /reference/string/basic_string.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_scoped_enum -- is_scoped_enum: 要件修正</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/is_scoped_enum.html"/>
      <id>c81ca5b9803b13c1631fd54fbdb89e5098ab05b8:reference/type_traits/is_scoped_enum.md</id>
      <updated>2021-01-26T01:01:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/is_scoped_enum.md b/reference/type_traits/is_scoped_enum.md
index f200f2023..edfb92800 100644
--- a/reference/type_traits/is_scoped_enum.md
+++ b/reference/type_traits/is_scoped_enum.md
@@ -20,7 +20,7 @@ namespace std {
 
 
 ## 要件
-`is_scoped_enum`は、型`T`がメンバポインタ型であるならば[`true_type`](true_type.md)から派生し、そうでなければ[`false_type`](false_type.md)から派生する。
+`is_scoped_enum`は、型`T`がスコープ付きの列挙型であるならば[`true_type`](true_type.md)から派生し、そうでなければ[`false_type`](false_type.md)から派生する。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_stacktrace -- basic_stacktrace : アサーションマクロを自作する例を追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace.html"/>
      <id>37981beb206782d4e4b885c9ab977321e652a256:reference/stacktrace/basic_stacktrace.md</id>
      <updated>2021-01-25T23:28:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace.md b/reference/stacktrace/basic_stacktrace.md
index 9d9aeeabe..bf896334a 100644
--- a/reference/stacktrace/basic_stacktrace.md
+++ b/reference/stacktrace/basic_stacktrace.md
@@ -140,6 +140,7 @@ namespace std {
 
 
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;stacktrace&amp;gt;
@@ -158,13 +159,44 @@ int main() {
 ```
 * current()[link basic_stacktrace/current.md.nolink]
 
-### 出力例
+#### 出力例
 ```
  0# g() at main.cpp:5
  1# f() at main.cpp:9
  2# main at main.cpp:13
 ```
 
+### スタックトレースを出力するアサーションマクロを作る
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+
+void assertion_failed(char const* expr) {
+  auto st = std::stacktrace::current(1, 1);
+  std::stacktrace_entry info = st[0];
+  std::cerr &amp;lt;&amp;lt; &amp;#34;Expression &amp;#39;&amp;#34; &amp;lt;&amp;lt; expr &amp;lt;&amp;lt; &amp;#34;&amp;#39; is false in &amp;#34; &amp;lt;&amp;lt; info &amp;lt;&amp;lt; std::endl;
+  std::abort();
+}
+
+#define MY_ASSERT(expr) if (!(expr)) assertion_failed(#expr)
+
+void f(int i) {
+  MY_ASSERT(i &amp;gt;= 0);
+}
+
+int main() {
+  f(-1);
+}
+```
+* current[basic_stacktrace/current.md.nolink]
+* std::stacktrace_entry[link stacktrace_entry.md.nolink]
+* std::abort()[link /reference/cstdlib/abort.md]
+
+#### 出力例
+```
+Expression &amp;#39;i &amp;gt;= 0&amp;#39; is false in f() at main.cpp:15
+```
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_stacktrace -- basic_stacktrace : operator&lt;&lt;とto_stringを追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace.html"/>
      <id>fc7c14b6c3480cfa84da4c6e8375fb565faea10e:reference/stacktrace/basic_stacktrace.md</id>
      <updated>2021-01-25T22:47:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace.md b/reference/stacktrace/basic_stacktrace.md
index 432a54569..9d9aeeabe 100644
--- a/reference/stacktrace/basic_stacktrace.md
+++ b/reference/stacktrace/basic_stacktrace.md
@@ -108,14 +108,14 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`operator&amp;lt;&amp;lt;`](basic_stacktrace/op_ostream.md.nolink) | 出力ストリームに出力する | C++23 |
+| [`operator&amp;lt;&amp;lt;`](basic_stacktrace/op_ostream.md) | 出力ストリームに出力する | C++23 |
 
 
 ### 文字列への変換
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`to_string`](basic_stacktrace/to_string.md.nolink) | 文字列に変換する | C++23 |
+| [`to_string`](basic_stacktrace/to_string.md) | 文字列に変換する | C++23 |
 
 
 ### 比較演算子
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- basic_stacktrace : operator&lt;&lt;とto_stringを追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/op_ostream.html"/>
      <id>fc7c14b6c3480cfa84da4c6e8375fb565faea10e:reference/stacktrace/basic_stacktrace/op_ostream.md</id>
      <updated>2021-01-25T22:47:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/op_ostream.md b/reference/stacktrace/basic_stacktrace/op_ostream.md
new file mode 100644
index 000000000..8723ad8d9
--- /dev/null
+++ b/reference/stacktrace/basic_stacktrace/op_ostream.md
@@ -0,0 +1,63 @@
+# operator&amp;lt;&amp;lt;
+* stacktrace[meta header]
+* std[meta namespace]
+* basic_stacktrace[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp;
+    operator&amp;lt;&amp;lt;(basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp; os,
+               const basic_stacktrace&amp;lt;Allocator&amp;gt;&amp;amp; st);
+```
+
+## 概要
+出力ストリームに出力する。
+
+
+## 効果
+以下と等価：
+
+```cpp
+return os &amp;lt;&amp;lt; to_string(st);
+```
+* to_string[link to_string.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+
+void g() {
+  std::cout &amp;lt;&amp;lt; std::stacktrace::current() &amp;lt;&amp;lt; std::endl;
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+}
+```
+* current()[link current.md.nolink]
+
+### 出力例
+```
+ 0# g() at main.cpp:5
+ 1# f() at main.cpp:9
+ 2# main at main.cpp:13
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_string -- basic_stacktrace : operator&lt;&lt;とto_stringを追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/to_string.html"/>
      <id>fc7c14b6c3480cfa84da4c6e8375fb565faea10e:reference/stacktrace/basic_stacktrace/to_string.md</id>
      <updated>2021-01-25T22:47:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/to_string.md b/reference/stacktrace/basic_stacktrace/to_string.md
new file mode 100644
index 000000000..1af158e51
--- /dev/null
+++ b/reference/stacktrace/basic_stacktrace/to_string.md
@@ -0,0 +1,63 @@
+# to_string
+* stacktrace[meta header]
+* std[meta namespace]
+* basic_stacktrace[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class Allocator&amp;gt;
+  string to_string(const basic_stacktrace&amp;lt;Allocator&amp;gt;&amp;amp; st);
+```
+* string[link /reference/string/basic_string.md]
+
+## 概要
+文字列化する。
+
+
+## 戻り値
+`st`のスタックトレース情報を説明する文字列を返す。
+
+
+## 備考
+- 戻り値となる文字列の行数は、[`size()`](size.md.nolink)と等値であるという保証はない
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+
+void g() {
+  std::string trace = std::stacktrace::current().to_string();
+  std::cout &amp;lt;&amp;lt; trace &amp;lt;&amp;lt; std::endl;
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+}
+```
+* to_string()[color ff0000]
+* current()[link current.md.nolink]
+
+### 出力例
+```
+ 0# g() at main.cpp:5
+ 1# f() at main.cpp:10
+ 2# main at main.cpp:14
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
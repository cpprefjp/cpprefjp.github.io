<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-09-12T07:19:04.810202</updated>
  <id>76b659dd-5872-4068-915f-b4c5b568f433</id>

  
    <entry>
      <title>as_const_view -- as_const_view begin/end追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges/as_const_view.html"/>
      <id>a14d042b837ef68612abe6e74371882ba4f9e287:reference/ranges/as_const_view.md</id>
      <updated>2023-09-12T16:14:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/as_const_view.md b/reference/ranges/as_const_view.md
index a1234d6d9..1112e2392 100644
--- a/reference/ranges/as_const_view.md
+++ b/reference/ranges/as_const_view.md
@@ -47,8 +47,8 @@ namespace std::ranges {
 |--------------------------------------------------|----------------------------------|----------------|
 | [`(constructor)`](as_const_view/op_constructor.md)  | コンストラクタ                   | C++23          |
 | [`base`](as_const_view/base.md)                     | `V`の参照を取得する              | C++23          |
-| [`begin`](as_const_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++23          |
-| [`end`](as_const_view/end.md.nolink)                       | 番兵を取得する                   | C++23          |
+| [`begin`](as_const_view/begin.md)                   | 先頭を指すイテレータを取得する   | C++23          |
+| [`end`](as_const_view/end.md)                       | 番兵を取得する                   | C++23          |
 | [`size`](as_const_view/size.md)                     | 要素数を取得する                 | C++23          |
 
 ## 継承しているメンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- as_const_view begin/end追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges/as_const_view/begin.html"/>
      <id>a14d042b837ef68612abe6e74371882ba4f9e287:reference/ranges/as_const_view/begin.md</id>
      <updated>2023-09-12T16:14:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/as_const_view/begin.md b/reference/ranges/as_const_view/begin.md
new file mode 100644
index 000000000..e52b706ce
--- /dev/null
+++ b/reference/ranges/as_const_view/begin.md
@@ -0,0 +1,71 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* as_const_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto begin() requires (!simple-view&amp;lt;V&amp;gt;);      // (1)
+constexpr auto begin() const requires range&amp;lt;const V&amp;gt;;   // (2)
+```
+* simple-view[link /reference/ranges/simple-view.md]
+* range[link /reference/ranges/range.md]
+
+## 概要
+
+`view`の先頭要素を指すイテレータを取得する。
+
+## 戻り値
+
+入力`view`（`V`）のオブジェクトを`base_`というメンバに保持するとして、(1)(2)どちらも
+
+```cpp
+return ranges::cbegin(base_);
+```
+* cbegin[link /reference/ranges/cbegin.md]
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+
+  std::ranges::as_const_view acv{vec};
+
+  auto it = acv.begin();
+
+  std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  ++it;
+  std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  // 書き換え不可
+  //*it = 0;
+}
+```
+* begin[color ff0000]
+
+### 出力
+
+```
+1
+2
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- as_const_view begin/end追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges/as_const_view/end.html"/>
      <id>a14d042b837ef68612abe6e74371882ba4f9e287:reference/ranges/as_const_view/end.md</id>
      <updated>2023-09-12T16:14:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/as_const_view/end.md b/reference/ranges/as_const_view/end.md
new file mode 100644
index 000000000..6485e9400
--- /dev/null
+++ b/reference/ranges/as_const_view/end.md
@@ -0,0 +1,70 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* as_const_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto end() requires (!simple-view&amp;lt;V&amp;gt;);    // (1)
+constexpr auto end() const requires range&amp;lt;const V&amp;gt;; // (2)
+```
+* simple-view[link /reference/ranges/simple-view.md]
+* range[link /reference/ranges/range.md]
+
+## 概要
+
+`view`の番兵を取得する。
+
+## 戻り値
+
+入力`view`（`V`）のオブジェクトを`base_`というメンバに保持するとして、(1)(2)どちらも
+
+```cpp
+return ranges::cend(base_);
+```
+* cend[link /reference/ranges/cend.md]
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+
+  std::ranges::as_const_view acv{vec};
+
+  auto it = acv.begin();
+  auto se = acv.end();
+
+  assert(it != se);
+
+  --se;
+
+  std::cout &amp;lt;&amp;lt; *se &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;
+}
+```
+* begin[color ff0000]
+* subrange[link /reference/ranges/subrange.md]
+
+### 出力
+
+```
+5
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- add link</title>
      <link href="https://cpprefjp.github.io/reference/scoped_allocator/scoped_allocator_adaptor/op_equal.html"/>
      <id>7341bb7e271c2e73f7a428f3371122cfacf11caf:reference/scoped_allocator/scoped_allocator_adaptor/op_equal.md</id>
      <updated>2023-09-11T23:17:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/scoped_allocator/scoped_allocator_adaptor/op_equal.md b/reference/scoped_allocator/scoped_allocator_adaptor/op_equal.md
index 01fe2b822..12e1ecb9a 100644
--- a/reference/scoped_allocator/scoped_allocator_adaptor/op_equal.md
+++ b/reference/scoped_allocator/scoped_allocator_adaptor/op_equal.md
@@ -19,7 +19,7 @@ namespace std {
 ## 戻り値
 `sizeof...(InnerAlloc) == 0`であるならば、`a.`[outer_allocator()](outer_allocator.md) `== b.`[`outer_allocator()`](outer_allocator.md)の結果を返す。
 
-そうでなければ、`a.`[outer_allocator()](outer_allocator.md) `== b.`[`outer_allocator()`](outer_allocator.md) `&amp;amp;&amp;amp; a.`[`inner_allocator()`](inner_allocator.md) `== b.`[`inner_allocator()`]の結果を返す。
+そうでなければ、`a.`[outer_allocator()](outer_allocator.md) `== b.`[`outer_allocator()`](outer_allocator.md) `&amp;amp;&amp;amp; a.`[`inner_allocator()`](inner_allocator.md) `== b.`[`inner_allocator()`](inner_allocator.md)の結果を返す。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cbegin -- fix link error</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/cbegin.html"/>
      <id>d83c6a4dbf2faf6b49a7de4a6b24e77b68cf4edb:reference/flat_map/flat_map/cbegin.md</id>
      <updated>2023-09-11T23:15:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/cbegin.md b/reference/flat_map/flat_map/cbegin.md
index b128c228b..62057823d 100644
--- a/reference/flat_map/flat_map/cbegin.md
+++ b/reference/flat_map/flat_map/cbegin.md
@@ -76,7 +76,7 @@ int main()
 | [`flat_map::begin`](begin.md)     | 先頭を指すイテレータを取得する |
 | [`flat_map::end`](end.md)         | 末尾の次を指すイテレータを取得する |
 | [`flat_map::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
-| [`flat_map::rbegin`]rbegin.md)    | 末尾を指す逆イテレータを取得する |
+| [`flat_map::rbegin`](rbegin.md)   | 末尾を指す逆イテレータを取得する |
 | [`flat_map::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
 | [`flat_map::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
 | [`flat_map::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crend -- fix typo</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/crend.html"/>
      <id>0dee2f1c26e7ffcdac6217e51c420d3b1b45bbb2:reference/flat_map/flat_map/crend.md</id>
      <updated>2023-09-11T23:13:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/crend.md b/reference/flat_map/flat_map/crend.md
index ed608420b..466666a99 100644
--- a/reference/flat_map/flat_map/crend.md
+++ b/reference/flat_map/flat_map/crend.md
@@ -17,7 +17,7 @@ const_reverse_iterator crend() const noexcept;
 
 ## 戻り値
 反転シーケンスの終端を指す逆イテレータ。 
-`const_reverse_iterator` はメンバ型である。`map` クラステンプレートにおいて、これらは逆ランダムアクセスイテレータであり、`reverse_iterator&amp;lt;const_iterator&amp;gt;` と定義される。
+`const_reverse_iterator` はメンバ型である。`flat_map` クラステンプレートにおいて、これらは逆ランダムアクセスイテレータであり、`reverse_iterator&amp;lt;const_iterator&amp;gt;` と定義される。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- fix typo</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/end.html"/>
      <id>0dee2f1c26e7ffcdac6217e51c420d3b1b45bbb2:reference/flat_map/flat_map/end.md</id>
      <updated>2023-09-11T23:13:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/end.md b/reference/flat_map/flat_map/end.md
index a892c0acc..c91a98c0e 100644
--- a/reference/flat_map/flat_map/end.md
+++ b/reference/flat_map/flat_map/end.md
@@ -16,7 +16,7 @@ const_iterator end() const noexcept;
 
 ## 戻り値
 コンテナの最後の要素の次を参照するイテレータ。 
-`iterator` と `const_iterator` はいずれもメンバ型である。`map` クラステンプレートにおいて、これらはランダムアクセスイテレータである。
+`iterator` と `const_iterator` はいずれもメンバ型である。`flat_map` クラステンプレートにおいて、これらはランダムアクセスイテレータである。
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal_range -- fix typo</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/equal_range.html"/>
      <id>0dee2f1c26e7ffcdac6217e51c420d3b1b45bbb2:reference/flat_map/flat_map/equal_range.md</id>
      <updated>2023-09-11T23:13:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/equal_range.md b/reference/flat_map/flat_map/equal_range.md
index 7fb856d0b..2ecacea39 100644
--- a/reference/flat_map/flat_map/equal_range.md
+++ b/reference/flat_map/flat_map/equal_range.md
@@ -21,7 +21,7 @@ pair&amp;lt;const_iterator, const_iterator&amp;gt;
 * pair[link /reference/utility/pair.md]
 
 ## 概要
-コンテナ内の、`x` と等しいキー要素を全て含む範囲の境界を返す。`map` コンテナではキーの重複は無いため、この範囲は最大一つの要素を含む。 
+コンテナ内の、`x` と等しいキー要素を全て含む範囲の境界を返す。`flat_map` コンテナではキーの重複は無いため、この範囲は最大一つの要素を含む。 
 
 もし `x` がコンテナ内のどのキーともマッチしなかった場合、戻り値の範囲は長さ 0 になり、両方のイテレータは `x` より大きく最も近い値を指す。そうでない場合、`x` がコンテナ内の全ての要素よりも大きい場合は [`end`](end.md) を指す。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lower_bound -- fix typo</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/lower_bound.html"/>
      <id>0dee2f1c26e7ffcdac6217e51c420d3b1b45bbb2:reference/flat_map/flat_map/lower_bound.md</id>
      <updated>2023-09-11T23:13:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/lower_bound.md b/reference/flat_map/flat_map/lower_bound.md
index 092a2e6b9..c8ecf0c49 100644
--- a/reference/flat_map/flat_map/lower_bound.md
+++ b/reference/flat_map/flat_map/lower_bound.md
@@ -22,7 +22,7 @@ const_iterator lower_bound(const K&amp;amp; x) const;        // (4) C++23
 
 [`upper_bound()`](upper_bound.md) とは異なり、このメンバ関数は `x` より大きいだけでなく、`x` と等しい場合であってもその要素へのイテレータを返す。
 
-内部的には `map` コンテナ内の全ての要素は常に比較オブジェクトが定義する基準に沿って並んでいるため、この関数が返すいずれかの後に続く全ての要素が `x` より大きいか等しいことに注意。
+内部的には `flat_map` コンテナ内の全ての要素は常に比較オブジェクトが定義する基準に沿って並んでいるため、この関数が返すいずれかの後に続く全ての要素が `x` より大きいか等しいことに注意。
 
 - (1) : `key_type`型のキーを受け取り、そのキーより小さくない最初の要素へのイテレータを取得する。
 - (2) : `key_type`と比較可能な`K`型のキーを受け取り、そのキーより小さくない最初の要素へのイテレータを取得する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>upper_bound -- fix typo</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/upper_bound.html"/>
      <id>0dee2f1c26e7ffcdac6217e51c420d3b1b45bbb2:reference/flat_map/flat_map/upper_bound.md</id>
      <updated>2023-09-11T23:13:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/upper_bound.md b/reference/flat_map/flat_map/upper_bound.md
index 6ec16277b..011173b50 100644
--- a/reference/flat_map/flat_map/upper_bound.md
+++ b/reference/flat_map/flat_map/upper_bound.md
@@ -22,7 +22,7 @@ const_iterator upper_bound(const K&amp;amp; x) const;        // (4) C++23
 
 [`lower_bound()`](lower_bound.md) と異なり、このメンバ関数は `x` と等しいときは要素へのイテレータを返さず、それは大きい場合にのみ要素へのイテレータを返す。
 
-内部的に、`map` コンテナ内の全ての要素は常に比較オブジェクトで定義された基準に従って並ぶため、この関数が返す値に続く全ての要素は `x` より大きいことに注意。
+内部的に、`flat_map` コンテナ内の全ての要素は常に比較オブジェクトで定義された基準に従って並ぶため、この関数が返す値に続く全ての要素は `x` より大きいことに注意。
 
 - (1) : `key_type`型のキーを受け取り、そのキーより大きい最初の要素へのイテレータを取得する。
 - (2) : `key_type`と比較可能な`K`型のキーを受け取り、そのキーより大きい最初の要素へのイテレータを取得する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- fix typo</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/op_constructor.html"/>
      <id>0dee2f1c26e7ffcdac6217e51c420d3b1b45bbb2:reference/map/multimap/op_constructor.md</id>
      <updated>2023-09-11T23:13:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/op_constructor.md b/reference/map/multimap/op_constructor.md
index fce0f82a6..b2d9289a0 100644
--- a/reference/map/multimap/op_constructor.md
+++ b/reference/map/multimap/op_constructor.md
@@ -109,7 +109,7 @@ multimap(initializer_list&amp;lt;value_type&amp;gt; init,
     * ls.emplace_back[link ../../list/list/emplace_back.md]
 
     なお、C++14 では同様の理由で (11) の形式も新たに追加されているが、こちらは存在しなくてもエラーとはならない。  
-    （`map(init, alloc)` の形式の構築では、(11) の形式が無い場合でも (10) の形式を用いて `init` から一時 `map` が構築され、`alloc` と共に (9) の形式に引き渡される）
+    （`multimap(init, alloc)` の形式の構築では、(11) の形式が無い場合でも (10) の形式を用いて `init` から一時 `multimap` が構築され、`alloc` と共に (9) の形式に引き渡される）
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- fix typo</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/erase.html"/>
      <id>0dee2f1c26e7ffcdac6217e51c420d3b1b45bbb2:reference/set/multiset/erase.md</id>
      <updated>2023-09-11T23:13:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/erase.md b/reference/set/multiset/erase.md
index f4bfc5a4d..e17f80d9c 100644
--- a/reference/set/multiset/erase.md
+++ b/reference/set/multiset/erase.md
@@ -33,7 +33,7 @@ iterator erase(const_iterator first, const_iterator last); // (5) C++11
 
 ## パラメータ
 - `position` : `multiset` から削除する単一要素を指すイテレータ。`iterator`、および、`const_iterator` はメンバ型であり、双方向イテレータとして定義される。
-- `x` : `set` から削除される値。`key_type` はメンバ型であり、`multiset` コンテナの中で `Key` の別名として定義される。ここで `Key` は 1 番目のテンプレートパラメータであり、コンテナに格納される要素の型である。
+- `x` : `multiset` から削除される値。`key_type` はメンバ型であり、`multiset` コンテナの中で `Key` の別名として定義される。ここで `Key` は 1 番目のテンプレートパラメータであり、コンテナに格納される要素の型である。
 - `first, last` : `multiset` コンテナ内の、削除されるイテレータ範囲 `[first, last)` を指定するイテレータ。ここでいう範囲は `first` と `last` の間の全ての要素を含み、`first` が指す要素を含むが `last` が指す要素は含まない。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- fix typo</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/insert.html"/>
      <id>0dee2f1c26e7ffcdac6217e51c420d3b1b45bbb2:reference/set/multiset/insert.md</id>
      <updated>2023-09-11T23:13:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/insert.md b/reference/set/multiset/insert.md
index d0259c30c..c0124bbb4 100644
--- a/reference/set/multiset/insert.md
+++ b/reference/set/multiset/insert.md
@@ -24,7 +24,7 @@ iterator insert(const_iterator hint, node_type&amp;amp;&amp;amp; nh);          // (8) C++17
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 
 ## 概要
-新しく一つの要素(引数 `x`, `y`を使う)、要素のシーケンス(入力イテレータまたは `initializer_list` を使う)または[ノードハンドル](/reference/node_handle/node_handle.md)を挿入することにより、 `set` コンテナを拡張する。
+新しく一つの要素(引数 `x`, `y`を使う)、要素のシーケンス(入力イテレータまたは `initializer_list` を使う)または[ノードハンドル](/reference/node_handle/node_handle.md)を挿入することにより、 `multiset` コンテナを拡張する。
 
  `set` コンテナは重複した値を許さないため、挿入操作はそれぞれの要素が他のコンテナ内の既存要素と同じ値かどうかをチェックし、同じ要素がすでにあれば挿入されない。`multiset`の場合には、同じ値の要素でも挿入される。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- fix typo</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/op_assign.html"/>
      <id>0dee2f1c26e7ffcdac6217e51c420d3b1b45bbb2:reference/set/multiset/op_assign.md</id>
      <updated>2023-09-11T23:13:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/op_assign.md b/reference/set/multiset/op_assign.md
index 6e43fa075..ba93738df 100644
--- a/reference/set/multiset/op_assign.md
+++ b/reference/set/multiset/op_assign.md
@@ -75,7 +75,7 @@ Size of c2: 7
 | 名前                         | 説明           |
 |------------------------------|----------------|
 | [`insert`](insert.md)      | 要素を挿入する |
-| [`set`](op_constructor.md) | コンストラクタ |
+| [`multiset`](op_constructor.md) | コンストラクタ |
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>value_comp -- fix typo</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/value_comp.html"/>
      <id>0dee2f1c26e7ffcdac6217e51c420d3b1b45bbb2:reference/set/multiset/value_comp.md</id>
      <updated>2023-09-11T23:13:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/value_comp.md b/reference/set/multiset/value_comp.md
index 4c5322a65..520e56412 100644
--- a/reference/set/multiset/value_comp.md
+++ b/reference/set/multiset/value_comp.md
@@ -11,7 +11,7 @@ value_compare value_comp() const;
 ## 概要
 コンテナに関連づけられた比較オブジェクトを返す。これはコンテナ内の二つの要素を比較するために利用できる。  
 この比較オブジェクトはオブジェクトの構築時に設定され、関数ポインタであっても関数オブジェクトであっても良い。いずれにせよこれは同じ型の 2 つの引数をとり、[狭義の弱順序](/reference/algorithm.md#strict-weak-ordering)に従って一つ目の引数が二つ目の引数の前になる場合に `true`、そうでない場合に `false` を返す。  
-`set` コンテナでは、要素の値はキーそのものであり、従って `value_comp` とその兄弟メンバ関数である [`key_comp`](key_comp.md) は同じである。
+`multiset` コンテナでは、要素の値はキーそのものであり、従って `value_comp` とその兄弟メンバ関数である [`key_comp`](key_comp.md) は同じである。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>count -- fix typo</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/count.html"/>
      <id>0dee2f1c26e7ffcdac6217e51c420d3b1b45bbb2:reference/unordered_map/unordered_map/count.md</id>
      <updated>2023-09-11T23:13:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/count.md b/reference/unordered_map/unordered_map/count.md
index e22638aa1..c22a78e32 100644
--- a/reference/unordered_map/unordered_map/count.md
+++ b/reference/unordered_map/unordered_map/count.md
@@ -13,7 +13,7 @@ size_type count(const K&amp;amp; k) const;                     // (2) C++20
 ```
 
 ## 概要
-キーを検索し、コンテナ内に見つかった要素の数を返す。`map` コンテナはキーの重複を許さないため、この関数は実際には要素が見つかったときに 1 を、そうでないときに 0 を返す。
+キーを検索し、コンテナ内に見つかった要素の数を返す。`unordered_map` コンテナはキーの重複を許さないため、この関数は実際には要素が見つかったときに 1 を、そうでないときに 0 を返す。
 
 - (1) : キー`x`を検索し、合致する要素数を取得する
 - (2) : キー`k`を透過的に検索し、合致する要素数を取得する
@@ -22,7 +22,7 @@ size_type count(const K&amp;amp; k) const;                     // (2) C++20
 
 
 ## パラメータ
-- `x` : 検索するキー値。`key_type` はメンバ型であり、`map` コンテナの中で `Key` の別名として定義される。ここで `Key` は 1 番目のテンプレートパラメータである。
+- `x` : 検索するキー値。`key_type` はメンバ型であり、`unordered_map` コンテナの中で `Key` の別名として定義される。ここで `Key` は 1 番目のテンプレートパラメータである。
 - `k` : 検索するキー。`key_type`と透過的に比較可能な型`K`型のキーである。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal_range -- fix typo</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/equal_range.html"/>
      <id>0dee2f1c26e7ffcdac6217e51c420d3b1b45bbb2:reference/unordered_map/unordered_map/equal_range.md</id>
      <updated>2023-09-11T23:13:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/equal_range.md b/reference/unordered_map/unordered_map/equal_range.md
index 43a2c9b73..ef259a158 100644
--- a/reference/unordered_map/unordered_map/equal_range.md
+++ b/reference/unordered_map/unordered_map/equal_range.md
@@ -34,7 +34,7 @@ pair&amp;lt;const_iterator, const_iterator&amp;gt;
 
 
 ## パラメータ
-- `x` : 比較されるキー値。`key_type` はメンバ型であり、`map` コンテナ内で `Key` の別名として定義される。ここで `Key` は最初のテンプレートパラメータである。
+- `x` : 比較されるキー値。`key_type` はメンバ型であり、`unordered_map` コンテナ内で `Key` の別名として定義される。ここで `Key` は最初のテンプレートパラメータである。
 - `k` : 検索するキー。`key_type`と透過的に比較可能な型`K`型のキーである。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find -- fix typo</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/find.html"/>
      <id>0dee2f1c26e7ffcdac6217e51c420d3b1b45bbb2:reference/unordered_map/unordered_map/find.md</id>
      <updated>2023-09-11T23:13:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/find.md b/reference/unordered_map/unordered_map/find.md
index d8c66af5d..2c8bafe50 100644
--- a/reference/unordered_map/unordered_map/find.md
+++ b/reference/unordered_map/unordered_map/find.md
@@ -25,7 +25,7 @@ template &amp;lt;class K&amp;gt; const_iterator find(const K&amp;amp; k) const;  // (4) C++20
 
 
 ## パラメータ
-- `x` : 検索するキー。`key_type` は `map` コンテナの中で `Key` の別名として定義される。ここで `Key` は 1 番目のテンプレートパラメータである。
+- `x` : 検索するキー。`key_type` は `unordered_map` コンテナの中で `Key` の別名として定義される。ここで `Key` は 1 番目のテンプレートパラメータである。
 - `k` : 検索するキー。`key_type`と透過的に比較可能な型`K`型のキーである。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- fix typo</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/op_not_equal.html"/>
      <id>0dee2f1c26e7ffcdac6217e51c420d3b1b45bbb2:reference/unordered_map/unordered_map/op_not_equal.md</id>
      <updated>2023-09-11T23:13:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/op_not_equal.md b/reference/unordered_map/unordered_map/op_not_equal.md
index 076e24022..1675978af 100644
--- a/reference/unordered_map/unordered_map/op_not_equal.md
+++ b/reference/unordered_map/unordered_map/op_not_equal.md
@@ -14,7 +14,7 @@ namespace std {
 ```
 
 ## 概要
-`unordered_set` オブジェクトを非等値比較する。
+`unordered_map` オブジェクトを非等値比較する。
 
 
 ## 要件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cend(size_type) -- fix typo</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/cend-size_type.html"/>
      <id>0dee2f1c26e7ffcdac6217e51c420d3b1b45bbb2:reference/unordered_map/unordered_multimap/cend-size_type.md</id>
      <updated>2023-09-11T23:13:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_multimap/cend-size_type.md b/reference/unordered_map/unordered_multimap/cend-size_type.md
index 76edc3c79..b5795611b 100644
--- a/reference/unordered_map/unordered_multimap/cend-size_type.md
+++ b/reference/unordered_map/unordered_multimap/cend-size_type.md
@@ -12,7 +12,7 @@ const_local_iterator cend(size_type n) const;
 ## 概要
 インデックス（添え字）で指定したバケット内の最後の要素の次を指す読み取り専用イテレータを取得する。
 
-`unordered_map` は非順序連想コンテナであるため「最後」に特に意味はないが、[`cbegin(size_type)`](cbegin-size_type.md) で得られたイテレータを `cend(size_type)` まで `operator++()` でイテレートすることで当該バケットの要素を漏れなくダブりなく走査することができる。
+`unordered_multimap` は非順序連想コンテナであるため「最後」に特に意味はないが、[`cbegin(size_type)`](cbegin-size_type.md) で得られたイテレータを `cend(size_type)` まで `operator++()` でイテレートすることで当該バケットの要素を漏れなくダブりなく走査することができる。
 
 
 ## 要件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>count -- fix typo</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/count.html"/>
      <id>0dee2f1c26e7ffcdac6217e51c420d3b1b45bbb2:reference/unordered_map/unordered_multimap/count.md</id>
      <updated>2023-09-11T23:13:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_multimap/count.md b/reference/unordered_map/unordered_multimap/count.md
index 8e6b3a2be..532d65b50 100644
--- a/reference/unordered_map/unordered_multimap/count.md
+++ b/reference/unordered_map/unordered_multimap/count.md
@@ -22,7 +22,7 @@ size_type count(const K&amp;amp; k) const;        // (2) C++20
 
 
 ## パラメータ
-- `x` : 検索するキー値。`key_type` はメンバ型であり、`map` コンテナの中で `Key` の別名として定義される。ここで `Key` は 1 番目のテンプレートパラメータである。
+- `x` : 検索するキー値。`key_type` はメンバ型であり、`unordered_multimap` コンテナの中で `Key` の別名として定義される。ここで `Key` は 1 番目のテンプレートパラメータである。
 - `k` : 検索するキー。`key_type`と透過的に比較可能な型`K`型のキーである。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal_range -- fix typo</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/equal_range.html"/>
      <id>0dee2f1c26e7ffcdac6217e51c420d3b1b45bbb2:reference/unordered_map/unordered_multimap/equal_range.md</id>
      <updated>2023-09-11T23:13:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_multimap/equal_range.md b/reference/unordered_map/unordered_multimap/equal_range.md
index ed5e4be65..ae0904c15 100644
--- a/reference/unordered_map/unordered_multimap/equal_range.md
+++ b/reference/unordered_map/unordered_multimap/equal_range.md
@@ -34,7 +34,7 @@ pair&amp;lt;const_iterator, const_iterator&amp;gt;
 
 
 ## パラメータ
-- `x` : 比較されるキー値。`key_type` はメンバ型であり、`map` コンテナ内で `Key` の別名として定義される。ここで `Key` は最初のテンプレートパラメータである。
+- `x` : 比較されるキー値。`key_type` はメンバ型であり、`unordered_multimap` コンテナ内で `Key` の別名として定義される。ここで `Key` は最初のテンプレートパラメータである。
 - `k` : 検索するキー。`key_type`と透過的に比較可能な型`K`型のキーである。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- fix typo</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/erase.html"/>
      <id>0dee2f1c26e7ffcdac6217e51c420d3b1b45bbb2:reference/unordered_map/unordered_multimap/erase.md</id>
      <updated>2023-09-11T23:13:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_multimap/erase.md b/reference/unordered_map/unordered_multimap/erase.md
index e93bb2ddf..f06265127 100644
--- a/reference/unordered_map/unordered_multimap/erase.md
+++ b/reference/unordered_map/unordered_multimap/erase.md
@@ -149,7 +149,7 @@ return value: (3rd, 33)
 after : (9th, 9), (3rd, 33), (3rd, 3), (1st, 1), 
 ```
 
-注：[`unordered_map`](/reference/unordered_map/unordered_map.md) は非順序連想コンテナであるため、出力順序は無意味であることに注意
+注：[`unordered_multimap`](/reference/unordered_map/unordered_multimap.md) は非順序連想コンテナであるため、出力順序は無意味であることに注意
 
 
 ### イテレート中に要素を削除する
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find -- fix typo</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/find.html"/>
      <id>0dee2f1c26e7ffcdac6217e51c420d3b1b45bbb2:reference/unordered_map/unordered_multimap/find.md</id>
      <updated>2023-09-11T23:13:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_multimap/find.md b/reference/unordered_map/unordered_multimap/find.md
index 98c1c2309..4ca158824 100644
--- a/reference/unordered_map/unordered_multimap/find.md
+++ b/reference/unordered_map/unordered_multimap/find.md
@@ -27,7 +27,7 @@ template &amp;lt;class K&amp;gt; const_iterator find(const K&amp;amp; k) const;  // (4) C++20
 
 
 ## パラメータ
-- `x` : 検索するキー。`key_type` は `map` コンテナの中で `Key` の別名として定義される。ここで `Key` は 1 番目のテンプレートパラメータである。
+- `x` : 検索するキー。`key_type` は `unordered_multimap` コンテナの中で `Key` の別名として定義される。ここで `Key` は 1 番目のテンプレートパラメータである。
 - `k` : 検索するキー。`key_type`と透過的に比較可能な型`K`型のキーである。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace -- fix wrong type in a sample</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/emplace.html"/>
      <id>24061d75bba42c3b7e2f7175db090c7e1ec31e6b:reference/set/multiset/emplace.md</id>
      <updated>2023-09-11T22:58:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/emplace.md b/reference/set/multiset/emplace.md
index 5a80f030d..ea18815db 100644
--- a/reference/set/multiset/emplace.md
+++ b/reference/set/multiset/emplace.md
@@ -51,7 +51,7 @@ bool operator&amp;lt;(const s&amp;amp; lhs, const s&amp;amp; rhs)
 
 int main()
 {
-  std::set&amp;lt;s&amp;gt; c;
+  std::multiset&amp;lt;s&amp;gt; c;
 
   c.emplace(42);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
</feed>
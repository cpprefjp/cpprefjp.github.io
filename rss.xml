<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-07-26T03:00:52.532351</updated>
  <id>c23fdc0d-7d24-4ee0-b625-411ecdbb61df</id>

  
    <entry>
      <title>exclusive_scan -- partial_sum, inclusive_scan, exclusive_scanを相互に関連項目として記載</title>
      <link href="https://cpprefjp.github.io/reference/numeric/exclusive_scan.html"/>
      <id>1052eda6535c93d8971ab4e459cefc0043447725:reference/numeric/exclusive_scan.md</id>
      <updated>2024-07-26T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/exclusive_scan.md b/reference/numeric/exclusive_scan.md
index e7e5c35ce..fa857c0e9 100644
--- a/reference/numeric/exclusive_scan.md
+++ b/reference/numeric/exclusive_scan.md
@@ -181,6 +181,11 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 
+## 関連項目
+- [`std::inclusive_scan()`](inclusive_scan.md)
+- [`std::partial_sum()`](partial_sum.md)
+
+
 ## 参照
 - [P0024R2 The Parallelism TS Should be Standardized](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0024r2.html)
 - [P0467R2 Iterator Concerns for Parallel Algorithms](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0467r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>inclusive_scan -- partial_sum, inclusive_scan, exclusive_scanを相互に関連項目として記載</title>
      <link href="https://cpprefjp.github.io/reference/numeric/inclusive_scan.html"/>
      <id>1052eda6535c93d8971ab4e459cefc0043447725:reference/numeric/inclusive_scan.md</id>
      <updated>2024-07-26T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/inclusive_scan.md b/reference/numeric/inclusive_scan.md
index cd8fdfbc5..71d96dfa3 100644
--- a/reference/numeric/inclusive_scan.md
+++ b/reference/numeric/inclusive_scan.md
@@ -228,6 +228,11 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 
+## 関連項目
+- [`std::exclusive_scan()`](exclusive_scan.md)
+- [`std::partial_sum()`](partial_sum.md)
+
+
 ## 参照
 - [P0024R2 The Parallelism TS Should be Standardized](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0024r2.html)
 - [P0467R2 Iterator Concerns for Parallel Algorithms](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0467r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>partial_sum -- partial_sum, inclusive_scan, exclusive_scanを相互に関連項目として記載</title>
      <link href="https://cpprefjp.github.io/reference/numeric/partial_sum.html"/>
      <id>1052eda6535c93d8971ab4e459cefc0043447725:reference/numeric/partial_sum.md</id>
      <updated>2024-07-26T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/partial_sum.md b/reference/numeric/partial_sum.md
index f6305b306..ff5c8ce26 100644
--- a/reference/numeric/partial_sum.md
+++ b/reference/numeric/partial_sum.md
@@ -154,6 +154,11 @@ int main()
 ```
 
 
+## 関連項目
+- [`std::inclusive_scan()`](inclusive_scan.md)
+- [`std::exclusive_scan()`](exclusive_scan.md)
+
+
 ## 参照
 - [P0616R0 De-pessimize legacy `&amp;lt;numeric&amp;gt;` algorithms with `std::move`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0616r0.pdf)
 - [P1645R1 `constexpr` for `&amp;lt;numeric&amp;gt;` algorithms](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1645r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>accumulate -- accumulateとreduceを相互に関連項目として記載</title>
      <link href="https://cpprefjp.github.io/reference/numeric/accumulate.html"/>
      <id>2285ef5b0ebf6627ea9d280fdf66ac624d7846bf:reference/numeric/accumulate.md</id>
      <updated>2024-07-26T11:55:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/accumulate.md b/reference/numeric/accumulate.md
index 790ed14e5..77d5e02cc 100644
--- a/reference/numeric/accumulate.md
+++ b/reference/numeric/accumulate.md
@@ -161,6 +161,10 @@ T accumulate(InputIterator first, InputIterator last, T init,
 * std::move[link /reference/utility/move.md]
 
 
+## 関連項目
+- [`std::reduce()`](reduce.md)
+
+
 ## 参照
 - [P0616R0 De-pessimize legacy `&amp;lt;numeric&amp;gt;` algorithms with `std::move`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0616r0.pdf)
 - [P1645R1 `constexpr` for `&amp;lt;numeric&amp;gt;` algorithms](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1645r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reduce -- accumulateとreduceを相互に関連項目として記載</title>
      <link href="https://cpprefjp.github.io/reference/numeric/reduce.html"/>
      <id>2285ef5b0ebf6627ea9d280fdf66ac624d7846bf:reference/numeric/reduce.md</id>
      <updated>2024-07-26T11:55:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/reduce.md b/reference/numeric/reduce.md
index 05b42ab00..bb573be8d 100644
--- a/reference/numeric/reduce.md
+++ b/reference/numeric/reduce.md
@@ -159,6 +159,10 @@ product : 120
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 
+## 関連項目
+- [`std::accumulate()`](accumulate.md)
+
+
 ## 参照
 - [P0024R2 The Parallelism TS Should be Standardized](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0024r2.html)
 - [P0467R2 Iterator Concerns for Parallel Algorithms](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0467r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>1ワイド文字に収まらないワイド文字リテラルを禁止する [P2362R3] -- Update remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.html"/>
      <id>8dcfab5371fd8414dbf3bd0e6fe7a1cf316df4b9:lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md</id>
      <updated>2024-07-25T21:41:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md b/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md
index 07100b6ad..dddacb944 100644
--- a/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md
+++ b/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md
@@ -18,7 +18,7 @@ C++23では、ワイド文字リテラルとして、以下を禁止する：
 ```cpp
 wchar_t a = L&amp;#39;🤦&amp;#39;; // C++20:OK, C++23:OK \U0001f926
 wchar_t b = L&amp;#39;ab&amp;#39;; // C++20:OK, C++23:NG マルチキャラクタリテラル
-wchar_t c = L&amp;#39;é́&amp;#39;;  // C++20:OK, C++23:NG \u0065\u0301
+wchar_t c = L&amp;#39;é&amp;#39;;  // C++20:OK, C++23:NG \u0065\u0301
 ```
 
 `wchar_t`はプラットフォームによって16ビットか32ビットのどちらかとなる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Kiterai</name>
        <email>7496490+Kiterai@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>1ワイド文字に収まらないワイド文字リテラルを禁止する [P2362R3] -- Update remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.html"/>
      <id>bf71e354c80718e23c67361e31b83a23d91eb184:lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md</id>
      <updated>2024-07-25T21:37:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md b/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md
index d983554ab..07100b6ad 100644
--- a/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md
+++ b/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md
@@ -16,9 +16,9 @@ C++23では、ワイド文字リテラルとして、以下を禁止する：
 - エンコード可能ではない、または複数文字を含む文字
 
 ```cpp
-wchar_t a = &amp;#39;🤦&amp;#39;; // C++20:OK, C++23:OK \U0001f926
-wchar_t b = &amp;#39;ab&amp;#39;; // C++20:OK, C++23:NG マルチキャラクタリテラル
-wchar_t c = &amp;#39;é́&amp;#39;;  // C++20:OK, C++23:NG \u0065\u0301
+wchar_t a = L&amp;#39;🤦&amp;#39;; // C++20:OK, C++23:OK \U0001f926
+wchar_t b = L&amp;#39;ab&amp;#39;; // C++20:OK, C++23:NG マルチキャラクタリテラル
+wchar_t c = L&amp;#39;é́&amp;#39;;  // C++20:OK, C++23:NG \u0065\u0301
 ```
 
 `wchar_t`はプラットフォームによって16ビットか32ビットのどちらかとなる。
@@ -31,4 +31,4 @@ wchar_t c = &amp;#39;é́&amp;#39;;  // C++20:OK, C++23:NG \u0065\u0301
 
 
 ## 参照
-- [P2362R3 Remove non-encodable wide character literals and multicharacter wide character literals](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2362r3.pdf)
\ No newline at end of file
+- [P2362R3 Remove non-encodable wide character literals and multicharacter wide character literals](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2362r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Kiterai</name>
        <email>7496490+Kiterai@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>apply_givens_rotation -- linalg : apply_givens_rotationに例を追加 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/apply_givens_rotation.html"/>
      <id>271535ed9d6e4e0041c66866fa0a3290122ac8f6:reference/linalg/apply_givens_rotation.md</id>
      <updated>2024-07-25T21:07:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/apply_givens_rotation.md b/reference/linalg/apply_givens_rotation.md
index 1e8d4ed20..409f6a594 100644
--- a/reference/linalg/apply_givens_rotation.md
+++ b/reference/linalg/apply_givens_rotation.md
@@ -98,9 +98,107 @@ $$
 
 
 ## 例
+**[注意] 処理系にあるコンパイラで確認していないため、間違っているかもしれません。**
+
+```cpp example
+#include &amp;lt;cmath&amp;gt;
+#include &amp;lt;complex&amp;gt;
+#include &amp;lt;initializer_list&amp;gt;
+#include &amp;lt;execution&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;linalg&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+template &amp;lt;class Vector&amp;gt;
+void print(Vector v) {
+  for (int i = 0; i &amp;lt; v.extent(0) - 1; ++i) {
+    std::cout &amp;lt;&amp;lt; v[i] &amp;lt;&amp;lt; &amp;#34;, &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; v[v.extent(0) - 1] &amp;lt;&amp;lt; std::endl;
+}
+
+int main()
+{
+  constexpr size_t N = 2;
+
+  using Complex = std::complex&amp;lt;double&amp;gt;;
+
+  {
+    std::initializer_list&amp;lt;double&amp;gt; a_coeff = {1, std::sqrt(3.0)};
+    std::initializer_list&amp;lt;double&amp;gt; b_coeff = {std::sqrt(3.0), -0.5};
+
+    std::vector&amp;lt;double&amp;gt; a_vec(a_coeff);
+    std::mdspan a(a_vec.data(), N);
+
+    std::vector&amp;lt;double&amp;gt; b_vec(b_coeff);
+    std::mdspan b(b_vec.data(), N);
+
+    double c = 0.5;
+    double s = -std::sqrt(3.0) / 2;
+
+    // (1)
+    std::linalg::apply_givens_rotation(a, b, c, s);
+    print(a);
+    print(b);
+
+    // (2)
+    // aとbを初期化
+    a_vec = a_coeff;
+    b_vec = b_coeff;
+    std::linalg::apply_givens_rotation(std::execution::par, a, b, c, s);
+    print(a);
+    print(b);
+  }
+
+  {
+    std::initializer_list&amp;lt;Complex&amp;gt; a_coeff = {Complex{1, 0}, Complex{std::sqrt(3.0), 0}};
+    std::initializer_list&amp;lt;Complex&amp;gt; b_coeff = {Complex{0, std::sqrt(3.0)}, Complex{0, -0.5}};
+
+    std::vector&amp;lt;Complex&amp;gt; a_vec(a_coeff);
+    std::mdspan a(a_vec.data(), N);
+
+    std::vector&amp;lt;Complex&amp;gt; b_vec(b_coeff);
+    std::mdspan b(b_vec.data(), N);
+
+    double  c = 0.5;
+    Complex s = Complex{0, -std::sqrt(3.0) / 2};
+
+    // (3)
+    std::linalg::apply_givens_rotation(a, b, c, s);
+    print(a);
+    print(b);
+
+    // (4)
+    // aとbを初期化
+    a_vec = a_coeff;
+    b_vec = b_coeff;
+    std::linalg::apply_givens_rotation(std::execution::par, a, b, c, s);
+    print(a);
+    print(b);
+  }
+
+  return 0;
+}
+```
+* std::linalg::apply_givens_rotation[color ff0000]
 
 
 ### 出力
+```
+(1)
+1, 0
+0, -1
+(2)
+1, 0
+0, -1
+(3)
+(1,0), (0,0)
+(0,0), (0,-1)
+(4)
+(1,0), (0,0)
+(0,0), (0,-1)
+```
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
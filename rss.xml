<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-03-19T18:16:37.518178</updated>
  <id>84ac9cc1-30ca-4701-8c06-1d026a7036e1</id>

  
    <entry>
      <title>メーリングリスト -- チャットリストを追加</title>
      <link href="https://cpprefjp.github.io/mailing-lists.html"/>
      <id>75de6263d45408485e49bfe3fba28d14eba38948:mailing-lists.md</id>
      <updated>2022-03-20T03:10:59+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;メーリングリスト&lt;/span&gt;&lt;/h1&gt;
&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;チャットリスト&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;以下は、標準C++関係のメーリングリストでである。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.isocpp.org/mailman/listinfo.cgi/&#34; target=&#34;_blank&#34;&gt;一覧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.isocpp.org/mailman/listinfo.cgi/std-discussion&#34; target=&#34;_blank&#34;&gt;ISO C++ Standard - Discussion&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;標準C++の言語機能やライブラリがなぜこうなっているのだろうか？どうやって使うのだろうか？複数の機能をどのように組み合わせればいいのか？といった疑問。もしくは標準にバグを見つけた？このグループでは、委員会メンバを含むエキスパートがその疑問に答える。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.isocpp.org/mailman/listinfo.cgi/std-proposals&#34; target=&#34;_blank&#34;&gt;ISO C++ Standard - Future Proposals&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;新たな言語機能やライブラリの詳細な提案を書く前に、早期のフィードバックが必要？このグループは、ISO C++の将来的な言語機能やライブラリについて議論する場所である。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.isocpp.org/mailman/listinfo.cgi/sg5&#34; target=&#34;_blank&#34;&gt;SG5 Transactional Memory&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Study Group 5は、C++にトランザクショナルメモリを追加するための調査と議論を行う場所である。SG5グループには、有用な議論とペーパー、電話会議、およびその他の有用な情報へのポインタが含まれる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.isocpp.org/mailman/listinfo.cgi/sg7&#34; target=&#34;_blank&#34;&gt;SG7 Reflection&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Study Group 7は、C++のリフレクション機能について議論する場所である。最初はコンパイル時リフレクションに注目して議論していく。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.isocpp.org/mailman/listinfo.cgi/sg13&#34; target=&#34;_blank&#34;&gt;SG13 HMI&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Study Group 13は、低レベルのグラフィクス、照準 (pointing)のI/Oプリミティブを開発、提案する場所である&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.isocpp.org/mailman/listinfo.cgi/sg14&#34; target=&#34;_blank&#34;&gt;SG14 Low Latency:Game Dev/Financial/Trading/Simulation/Embedded Devices&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Study Group 14は、ゲーム、金融、銀行、シミュレーションなどのリアルタイム要件や性能や効率がとくに重視される分野のための低レイテンシーについての議論をする場所である&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.isocpp.org/mailman/listinfo.cgi/sg15&#34; target=&#34;_blank&#34;&gt;SG15 WG21 Tooling Study Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Study Group 15は、C++用のツールサポートに関する新たな提案を行う場所である&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.isocpp.org/mailman/listinfo.cgi/sg19&#34; target=&#34;_blank&#34;&gt;SG19 Machine Learning&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Study Group 19は、高速なイテレーション、配列、行列、線形代数、計算のためのデータのメモリ転送、スケーリング、グラフ処理などのサポートについて、C++の機能での対処、改善を議論する場所である&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.isocpp.org/mailman/listinfo.cgi/sg20&#34; target=&#34;_blank&#34;&gt;SG20 Education&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Study Group 20は、C++教育のための現代的な教材を作成する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下は、C++の話題が盛んなチャットツールのリストである。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cppalliance.org/slack/&#34; target=&#34;_blank&#34;&gt;CPP Lang (Slack)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;世界中のC ++のユーザーを同じ場所に集める目的で作られたSlackワークスペース。&lt;a href=&#34;https://cppalliance.org/&#34; target=&#34;_blank&#34;&gt;The C++ Alliance&lt;/a&gt; が運営している。&lt;br /&gt;
&lt;code&gt;cmake&lt;/code&gt;, &lt;code&gt;boost&lt;/code&gt;, &lt;code&gt;feature_standard&lt;/code&gt; などチャネルが多数存在する。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/STL/wiki/&#34; target=&#34;_blank&#34;&gt;MSVC STL (Discord) &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The Microsoft C++ team が開設したDiscordチャネル。&lt;br /&gt;
  microsoft/STL の開発状況や、次期リリース情報などがリアルタイムに判る。参加者との質疑応答も盛んに行われている。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace -- Merge pull request #953 from cpprefjp/add-description-from-associative_reqmts</title>
      <link href="https://cpprefjp.github.io/reference/map/map/emplace.html"/>
      <id>bc79b1c2d91c3543bf77552d2caff30c6375a659:reference/map/map/emplace.md</id>
      <updated>2022-03-19T11:32:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/emplace.md b/reference/map/map/emplace.md
index 6edd72388..f9118597f 100644
--- a/reference/map/map/emplace.md
+++ b/reference/map/map/emplace.md
@@ -27,7 +27,9 @@ pair&amp;lt;iterator, bool&amp;gt; emplace(Args&amp;amp;&amp;amp;... args);
 
 
 ## 備考
-C++17 で導入された [`try_emplace`](try_emplace.md) と異なり、たとえ要素が挿入されなかった場合でも `value_type` 型のオブジェクトが構築される可能性があり、結果として引数 `args` が [`move`](/reference/utility/move.md) の対象となって変更されてしまっている可能性があるため、注意が必要である。
+- この関数が呼ばれた後も、当該コンテナ内の要素を指す参照やイテレータは無効にはならない。  
+	なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。
+- C++17 で導入された [`try_emplace`](try_emplace.md) と異なり、たとえ要素が挿入されなかった場合でも `value_type` 型のオブジェクトが構築される可能性があり、結果として引数 `args` が [`move`](/reference/utility/move.md) の対象となって変更されてしまっている可能性があるため、注意が必要である。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace_hint -- Merge pull request #953 from cpprefjp/add-description-from-associative_reqmts</title>
      <link href="https://cpprefjp.github.io/reference/map/map/emplace_hint.html"/>
      <id>bc79b1c2d91c3543bf77552d2caff30c6375a659:reference/map/map/emplace_hint.md</id>
      <updated>2022-03-19T11:32:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/emplace_hint.md b/reference/map/map/emplace_hint.md
index f1b70f9b1..75625bf07 100644
--- a/reference/map/map/emplace_hint.md
+++ b/reference/map/map/emplace_hint.md
@@ -28,7 +28,9 @@ iterator emplace_hint(const_iterator hint, Args&amp;amp;&amp;amp;... args);
 
 
 ## 備考
-C++17 で導入された [`try_emplace`](try_emplace.md) と異なり、たとえ要素が挿入されなかった場合でも `value_type` 型のオブジェクトが構築される可能性があり、結果として引数 `args` が [`move`](/reference/utility/move.md) の対象となって変更されてしまっている可能性があるため、注意が必要である。
+- この関数が呼ばれた後も、当該コンテナ内の要素を指す参照やイテレータは無効にはならない。  
+	なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。
+- C++17 で導入された [`try_emplace`](try_emplace.md) と異なり、たとえ要素が挿入されなかった場合でも `value_type` 型のオブジェクトが構築される可能性があり、結果として引数 `args` が [`move`](/reference/utility/move.md) の対象となって変更されてしまっている可能性があるため、注意が必要である。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- Merge pull request #953 from cpprefjp/add-description-from-associative_reqmts</title>
      <link href="https://cpprefjp.github.io/reference/map/map/erase.html"/>
      <id>bc79b1c2d91c3543bf77552d2caff30c6375a659:reference/map/map/erase.md</id>
      <updated>2022-03-19T11:32:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/erase.md b/reference/map/map/erase.md
index c16a08b98..6db545f7f 100644
--- a/reference/map/map/erase.md
+++ b/reference/map/map/erase.md
@@ -40,6 +40,7 @@ iterator erase(const_iterator first, const_iterator last); // (3) C++11
 
 
 ## 備考
+- 削除された要素を指すイテレータ、および、参照のみ無効になる。なお、規格書に明確な記載は無いが、削除された要素を指すポインタも無効になる。
 - ループ中で `map` の要素を削除するためには、C++03 までは以下のようなコードを書く必要があった。
     ```cpp
     while (it != map_object.end()) {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- Merge pull request #953 from cpprefjp/add-description-from-associative_reqmts</title>
      <link href="https://cpprefjp.github.io/reference/map/map/insert.html"/>
      <id>bc79b1c2d91c3543bf77552d2caff30c6375a659:reference/map/map/insert.md</id>
      <updated>2022-03-19T11:32:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/insert.md b/reference/map/map/insert.md
index 7ccf67a5f..809d7025f 100644
--- a/reference/map/map/insert.md
+++ b/reference/map/map/insert.md
@@ -92,6 +92,8 @@ iterator           insert(const_iterator hint, node_type&amp;amp;&amp;amp; nh); // (8) C++17か
 
 
 ## 備考
+- これらの関数が呼ばれた後も、当該コンテナ内の要素を指す参照やイテレータは無効にはならない。  
+	なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。
 - (3), (4) : C++03 までの仕様では、計算量が償却定数時間となる条件は、「`position` が指す要素の**後ろ**に挿入された場合」となっているが、主要な実装はC++03時点から `position` が指す**前**に挿入する場合に償却定数時間となっていた。これは、`position` の後ろでは、適切な位置が先頭の場合に指定する方法がないこと、`vector::insert` の場合、`position` の前に挿入されること、STL のオリジナルである HP 社の実装が `position` の前に挿入する場合に償却定数時間であったことなどによる。
 
 - (5) : C++03 までの仕様では、`first` と `last` の間が昇順にソートされていた場合、計算量が線形時間となっていたが、この仕様は実現性がないため C++11 では削除された。（例えば、コンテナの既存の要素が 2 から 100 の偶数のみの場合に、1 から 99 のソートされた奇数の範囲を挿入する場合を考えてみよ）
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace -- Merge pull request #953 from cpprefjp/add-description-from-associative_reqmts</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/emplace.html"/>
      <id>bc79b1c2d91c3543bf77552d2caff30c6375a659:reference/map/multimap/emplace.md</id>
      <updated>2022-03-19T11:32:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/emplace.md b/reference/map/multimap/emplace.md
index 9ded9b7ed..d2f2f1eb7 100644
--- a/reference/map/multimap/emplace.md
+++ b/reference/map/multimap/emplace.md
@@ -23,6 +23,10 @@ iterator emplace(Args&amp;amp;&amp;amp;... args);
 コンテナサイズについて対数時間。
 
 
+## 備考
+この関数が呼ばれた後も、当該コンテナ内の要素を指す参照やイテレータは無効にはならない。  
+なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。
+
 ## 例
 ### 単純なキー・値を挿入する例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace_hint -- Merge pull request #953 from cpprefjp/add-description-from-associative_reqmts</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/emplace_hint.html"/>
      <id>bc79b1c2d91c3543bf77552d2caff30c6375a659:reference/map/multimap/emplace_hint.md</id>
      <updated>2022-03-19T11:32:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/emplace_hint.md b/reference/map/multimap/emplace_hint.md
index f311de543..369fd7115 100644
--- a/reference/map/multimap/emplace_hint.md
+++ b/reference/map/multimap/emplace_hint.md
@@ -27,6 +27,11 @@ iterator emplace_hint(const_iterator hint, Args&amp;amp;&amp;amp;... args);
 一般にコンテナのサイズについて対数時間だが、新しい要素が `hint` の前に挿入された場合は償却定数時間。
 
 
+## 備考
+この関数が呼ばれた後も、当該コンテナ内の要素を指す参照やイテレータは無効にはならない。  
+なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- Merge pull request #953 from cpprefjp/add-description-from-associative_reqmts</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/erase.html"/>
      <id>bc79b1c2d91c3543bf77552d2caff30c6375a659:reference/map/multimap/erase.md</id>
      <updated>2022-03-19T11:32:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/erase.md b/reference/map/multimap/erase.md
index a9651c6db..b2e280818 100644
--- a/reference/map/multimap/erase.md
+++ b/reference/map/multimap/erase.md
@@ -41,6 +41,7 @@ iterator erase(const_iterator first, const_iterator last); // (3) C++11
 
 
 ## 備考
+- 削除された要素を指すイテレータ、および、参照のみ無効になる。なお、規格書に明確な記載は無いが、削除された要素を指すポインタも無効になる。
 - ループ中で `multimap` の要素を削除するためには、C++03 までは以下のようなコードを書く必要があった。
     ```cpp
     while (it != map_object.end()) {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- Merge pull request #953 from cpprefjp/add-description-from-associative_reqmts</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/insert.html"/>
      <id>bc79b1c2d91c3543bf77552d2caff30c6375a659:reference/map/multimap/insert.md</id>
      <updated>2022-03-19T11:32:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/insert.md b/reference/map/multimap/insert.md
index 1f3c7ed3d..b7a5a6370 100644
--- a/reference/map/multimap/insert.md
+++ b/reference/map/multimap/insert.md
@@ -75,7 +75,9 @@ iterator insert(const_iterator hint, node_type&amp;amp;&amp;amp; nh);          // (10) C++17
 - (10) : 挿入が `hint` の直前の位置に行われた場合、償却定数時間。 そうでなければ、コンテナのサイズの対数。
 
 ## 備考
-(9), (10) の場合、要素はコピーもムーブもされない。
+- これらの関数が呼ばれた後も、当該コンテナ内の要素を指す参照やイテレータは無効にはならない。  
+	なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。
+- (9), (10) の場合、要素はコピーもムーブもされない。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace -- Merge pull request #953 from cpprefjp/add-description-from-associative_reqmts</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/emplace.html"/>
      <id>bc79b1c2d91c3543bf77552d2caff30c6375a659:reference/set/multiset/emplace.md</id>
      <updated>2022-03-19T11:32:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/emplace.md b/reference/set/multiset/emplace.md
index 03f1c100d..5a80f030d 100644
--- a/reference/set/multiset/emplace.md
+++ b/reference/set/multiset/emplace.md
@@ -28,6 +28,11 @@ pair&amp;lt;iterator, bool&amp;gt; emplace(Args&amp;amp;&amp;amp;... args);
 コンテナサイズについて対数時間。
 
 
+## 備考
+この関数が呼ばれた後も、当該コンテナ内の要素を指す参照やイテレータは無効にはならない。  
+なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace_hint -- Merge pull request #953 from cpprefjp/add-description-from-associative_reqmts</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/emplace_hint.html"/>
      <id>bc79b1c2d91c3543bf77552d2caff30c6375a659:reference/set/multiset/emplace_hint.md</id>
      <updated>2022-03-19T11:32:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/emplace_hint.md b/reference/set/multiset/emplace_hint.md
index f955edbdc..0947a1647 100644
--- a/reference/set/multiset/emplace_hint.md
+++ b/reference/set/multiset/emplace_hint.md
@@ -28,6 +28,11 @@ iterator emplace_hint(const_iterator hint, Args&amp;amp;&amp;amp;... args);
 一般にコンテナのサイズについて対数時間だが、新しい要素が `hint` の前に挿入された場合は償却定数時間。
 
 
+## 備考
+この関数が呼ばれた後も、当該コンテナ内の要素を指す参照やイテレータは無効にはならない。  
+なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- Merge pull request #953 from cpprefjp/add-description-from-associative_reqmts</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/erase.html"/>
      <id>bc79b1c2d91c3543bf77552d2caff30c6375a659:reference/set/multiset/erase.md</id>
      <updated>2022-03-19T11:32:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/erase.md b/reference/set/multiset/erase.md
index 6281231ce..d04236cf6 100644
--- a/reference/set/multiset/erase.md
+++ b/reference/set/multiset/erase.md
@@ -40,6 +40,7 @@ size_type erase(const key_type&amp;amp; x);                        // (3)
 
 
 ## 備考
+- 削除された要素を指すイテレータ、および、参照のみ無効になる。なお、規格書に明確な記載は無いが、削除された要素を指すポインタも無効になる。
 - ループ中で `multiset` の要素を削除するためには、C++03 までは以下のようなコードを書く必要があった。
     ```cpp
     while (it != set_object.end()) {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- Merge pull request #953 from cpprefjp/add-description-from-associative_reqmts</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/insert.html"/>
      <id>bc79b1c2d91c3543bf77552d2caff30c6375a659:reference/set/multiset/insert.md</id>
      <updated>2022-03-19T11:32:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/insert.md b/reference/set/multiset/insert.md
index af2b428fb..27c82a341 100644
--- a/reference/set/multiset/insert.md
+++ b/reference/set/multiset/insert.md
@@ -56,7 +56,9 @@ iterator insert(const_iterator hint, node_type&amp;amp;&amp;amp; nh);          // (8) C++17
 
 
 ## 備考
-内部的に `multiset` コンテナは、コンストラクト時に指定された比較オブジェクトによって要素を下位から上位へとソートして保持する。 (7), (8) の場合要素は、コピーもムーブもされない。
+- これらの関数が呼ばれた後も、当該コンテナ内の要素を指す参照やイテレータは無効にはならない。  
+	なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。
+- 内部的に `multiset` コンテナは、コンストラクト時に指定された比較オブジェクトによって要素を下位から上位へとソートして保持する。 (7), (8) の場合要素は、コピーもムーブもされない。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace -- Merge pull request #953 from cpprefjp/add-description-from-associative_reqmts</title>
      <link href="https://cpprefjp.github.io/reference/set/set/emplace.html"/>
      <id>bc79b1c2d91c3543bf77552d2caff30c6375a659:reference/set/set/emplace.md</id>
      <updated>2022-03-19T11:32:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/emplace.md b/reference/set/set/emplace.md
index 00b62a3ed..1e24244a8 100644
--- a/reference/set/set/emplace.md
+++ b/reference/set/set/emplace.md
@@ -29,6 +29,11 @@ pair&amp;lt;iterator, bool&amp;gt; emplace(Args&amp;amp;&amp;amp;... args);
 コンテナサイズについて対数時間。
 
 
+## 備考
+この関数が呼ばれた後も、当該コンテナ内の要素を指す参照やイテレータは無効にはならない。  
+なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace_hint -- Merge pull request #953 from cpprefjp/add-description-from-associative_reqmts</title>
      <link href="https://cpprefjp.github.io/reference/set/set/emplace_hint.html"/>
      <id>bc79b1c2d91c3543bf77552d2caff30c6375a659:reference/set/set/emplace_hint.md</id>
      <updated>2022-03-19T11:32:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/emplace_hint.md b/reference/set/set/emplace_hint.md
index eebbf30a3..40e0515a2 100644
--- a/reference/set/set/emplace_hint.md
+++ b/reference/set/set/emplace_hint.md
@@ -28,6 +28,11 @@ iterator emplace_hint(const_iterator hint, Args&amp;amp;&amp;amp;... args);
 一般にコンテナのサイズについて対数時間だが、新しい要素が `hint` の前に挿入された場合は償却定数時間。
 
 
+## 備考
+この関数が呼ばれた後も、当該コンテナ内の要素を指す参照やイテレータは無効にはならない。  
+なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- Merge pull request #953 from cpprefjp/add-description-from-associative_reqmts</title>
      <link href="https://cpprefjp.github.io/reference/set/set/erase.html"/>
      <id>bc79b1c2d91c3543bf77552d2caff30c6375a659:reference/set/set/erase.md</id>
      <updated>2022-03-19T11:32:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/erase.md b/reference/set/set/erase.md
index 84c2b8794..3ab8a206e 100644
--- a/reference/set/set/erase.md
+++ b/reference/set/set/erase.md
@@ -40,6 +40,7 @@ size_type erase(const key_type&amp;amp; x);                        // (3)
 
 
 ## 備考
+- 削除された要素を指すイテレータ、および、参照のみ無効になる。なお、規格書に明確な記載は無いが、削除された要素を指すポインタも無効になる。
 - ループ中で `set` の要素を削除するためには、C++03 までは以下のようなコードを書く必要があった。
     ```cpp
     while (it != set_object.end()) {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- Merge pull request #953 from cpprefjp/add-description-from-associative_reqmts</title>
      <link href="https://cpprefjp.github.io/reference/set/set/insert.html"/>
      <id>bc79b1c2d91c3543bf77552d2caff30c6375a659:reference/set/set/insert.md</id>
      <updated>2022-03-19T11:32:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/insert.md b/reference/set/set/insert.md
index d756ec7a1..714e104f1 100644
--- a/reference/set/set/insert.md
+++ b/reference/set/set/insert.md
@@ -62,7 +62,9 @@ iterator           insert(const_iterator hint, node_type&amp;amp;&amp;amp; nh); // (8) C++17
 
 
 ## 備考
-内部的に `set` コンテナは、コンストラクト時に指定された比較オブジェクトによって要素を下位から上位へとソートして保持する。 (7), (8) の場合、要素はコピーもムーブもされない。
+- これらの関数が呼ばれた後も、当該コンテナ内の要素を指す参照やイテレータは無効にはならない。  
+	なお、規格書に明確な記載は無いが、当該コンテナ内の要素を指すポインタも無効にはならない。
+- 内部的に `set` コンテナは、コンストラクト時に指定された比較オブジェクトによって要素を下位から上位へとソートして保持する。 (7), (8) の場合、要素はコピーもムーブもされない。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>istream -- {i,o}stream: マニュピュレータを分離</title>
      <link href="https://cpprefjp.github.io/reference/istream.html"/>
      <id>bb762853552c648fbbd694acbdf7ebd966a67ea2:reference/istream.md</id>
      <updated>2022-03-18T19:30:22+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;istream&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;istream&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;istream&amp;gt;&lt;/code&gt;ヘッダでは、入力・入出力処理に関するクラスやマニピュレータ（の実体である関数）などが定義されている。&lt;/p&gt;
&lt;h2&gt;型と関数（マニピュレータを除く）&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/istream/basic_istream.html&#34;&gt;basic_istream&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力ストリーム (class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/istream/basic_iostream.html&#34;&gt;basic_iostream&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入出力ストリーム (class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;マニピュレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/istream/ws.html&#34;&gt;ws&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;空白を読み飛ばす&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++98&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ostream -- {i,o}stream: マニュピュレータを分離</title>
      <link href="https://cpprefjp.github.io/reference/ostream.html"/>
      <id>bb762853552c648fbbd694acbdf7ebd966a67ea2:reference/ostream.md</id>
      <updated>2022-03-18T19:30:22+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;ostream&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;ostream&amp;gt;&lt;/code&gt;ヘッダでは、出力処理に関するクラスやマニピュレータ（の実体である関数）などが定義されている。&lt;/p&gt;
&lt;h2&gt;型と関数（マニピュレータを除く）&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;basic_ostream&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力ストリーム (class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;マニピュレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;改行を出力し、バッファを出力して空にする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream/ends.html&#34;&gt;ends&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ヌル文字を出力する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream/flush.html&#34;&gt;flush&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;バッファを出力して空にする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream/flush_emit.html&#34;&gt;flush_emit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/syncstream/basic_osyncstream.html&#34;&gt;std::basic_osyncstream&lt;/a&gt;&lt;/code&gt;をフラッシュし、保留中の出力を転送する&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream/emit_on_flush.html&#34;&gt;emit_on_flush&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/syncstream/basic_osyncstream.html&#34;&gt;std::basic_osyncstream&lt;/a&gt;&lt;/code&gt;の同期時排出ポリシーを&lt;code&gt;true&lt;/code&gt;にする&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream/noemit_on_flush.html&#34;&gt;noemit_on_flush&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/syncstream/basic_osyncstream.html&#34;&gt;std::basic_osyncstream&lt;/a&gt;&lt;/code&gt;の同期時排出ポリシーを&lt;code&gt;false&lt;/code&gt;にする&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++98&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ネストする集成体初期化における波カッコ省略を許可 -- Merge pull request #955 from s-hiiragi/patch-1</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/brace_elision_in_array_temporary_initialization.html"/>
      <id>21322578af4ece88a48d1bf4df2c3807bd61fe6b:lang/cpp14/brace_elision_in_array_temporary_initialization.md</id>
      <updated>2022-03-17T12:41:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/brace_elision_in_array_temporary_initialization.md b/lang/cpp14/brace_elision_in_array_temporary_initialization.md
index 1e6a21d39..9b42e3fa0 100644
--- a/lang/cpp14/brace_elision_in_array_temporary_initialization.md
+++ b/lang/cpp14/brace_elision_in_array_temporary_initialization.md
@@ -1,4 +1,4 @@
-# 宣言時のメンバ初期化を持つ型の集成体初期化を許可
+# ネストする集成体初期化における波カッコ省略を許可
 * cpp14[meta cpp]
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>algorithm -- Merge pull request #956 from cpprefjp/rename_file</title>
      <link href="https://cpprefjp.github.io/reference/algorithm.html"/>
      <id>6a60d7e9c20307a9f04a207f5551332d0fbf6fe6:reference/algorithm.md</id>
      <updated>2022-03-17T02:37:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm.md b/reference/algorithm.md
index cd7232663..c8c52e457 100644
--- a/reference/algorithm.md
+++ b/reference/algorithm.md
@@ -145,7 +145,6 @@ ranges::sort(pv, {}, &amp;amp;Parson::name);
 | 名前 | 説明 | 対応バージョン |
 |-----------------------------------------------------|------------------------------------------|-------|
 | [`copy`](algorithm/copy.md)                       | 指定された範囲の要素をコピーする         | |
-| [`copy`](algorithm/copy.md)                       | 指定された範囲の要素をコピーする         | |
 | [`copy_n`](algorithm/copy_n.md)                   | 指定された数の要素をコピーする           | C++11 |
 | [`copy_if`](algorithm/copy_if.md)                 | 条件を満たす要素のみをコピーする         | C++11 |
 | [`copy_backward`](algorithm/copy_backward.md)     | 指定された範囲の要素を後ろからコピーする | |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>crend -- Merge pull request #956 from cpprefjp/rename_file</title>
      <link href="https://cpprefjp.github.io/reference/array/array/crend.html"/>
      <id>6a60d7e9c20307a9f04a207f5551332d0fbf6fe6:reference/array/array/crend.md</id>
      <updated>2022-03-17T02:37:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/array/array/crend.md b/reference/array/array/crend.md
index 1efac121b..c98811f79 100644
--- a/reference/array/array/crend.md
+++ b/reference/array/array/crend.md
@@ -14,7 +14,7 @@ constexpr const_reverse_iterator crend() const noexcept; // C++17
 
 先頭要素の前を指す読み取り専用逆イテレータを取得する。
 
-[`rend()`](rend.md)は非`const`な`array`オブジェクトに対して`reverse_iterator`を返し、`const`な`array`オブジェクトに対しては`const_reverse_iterator`を返すが、`cend()`は`const_reverse_iterator`を返すバージョンのみが提供されている。
+[`rend()`](rend.md)は非`const`な`array`オブジェクトに対して`reverse_iterator`を返し、`const`な`array`オブジェクトに対しては`const_reverse_iterator`を返すが、`crend()`は`const_reverse_iterator`を返すバージョンのみが提供されている。
 アルゴリズムにイテレータの組を渡す際、アルゴリズム内でデータの書き換えが起こらないというユーザーの意図を示す場合などに有用である。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>forward_list -- Merge pull request #956 from cpprefjp/rename_file</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list.html"/>
      <id>6a60d7e9c20307a9f04a207f5551332d0fbf6fe6:reference/forward_list/forward_list.md</id>
      <updated>2022-03-17T02:37:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list.md b/reference/forward_list/forward_list.md
index c81522800..243e66af2 100644
--- a/reference/forward_list/forward_list.md
+++ b/reference/forward_list/forward_list.md
@@ -58,7 +58,7 @@ namespace std {
 | [`begin`](forward_list/begin.md) | 先頭要素を指すイテレータを取得する | C++11 |
 | [`end`](forward_list/end.md) | 末尾の次を指すイテレータを取得する | C++11 |
 | [`cbegin`](forward_list/cbegin.md) | 先頭要素を指す読み取り専用イテレータを取得する | C++11 |
-| [`cbefore_begin`](forward_list/before_cbegin.md) | 先頭要素の前を指す読み取り専用イテレータを取得する | C++11 |
+| [`cbefore_begin`](forward_list/cbefore_begin.md) | 先頭要素の前を指す読み取り専用イテレータを取得する | C++11 |
 | [`cend`](forward_list/cend.md) | 末尾の次を指す読み取り専用イテレータを取得する | C++11 |
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>cbefore_begin -- Merge pull request #956 from cpprefjp/rename_file</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/cbefore_begin.html"/>
      <id>6a60d7e9c20307a9f04a207f5551332d0fbf6fe6:reference/forward_list/forward_list/cbefore_begin.md</id>
      <updated>2022-03-17T02:37:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/cbefore_begin.md b/reference/forward_list/forward_list/cbefore_begin.md
new file mode 100644
index 000000000..33083f005
--- /dev/null
+++ b/reference/forward_list/forward_list/cbefore_begin.md
@@ -0,0 +1,78 @@
+# cbefore_begin
+* forward_list[meta header]
+* std[meta namespace]
+* forward_list[meta class]
+* function[meta id-type]
+* cpp11[meta cpp]
+
+```cpp
+const_iterator cbefore_begin() const noexcept;
+```
+
+## 概要
+先頭要素の前を指す読み取り専用イテレータを取得する。
+
+この関数は、[`insert_after()`](insert_after.md)メンバ関数で先頭に要素を挿入するために使用できる。
+
+
+## 戻り値
+先頭要素の前を指す読み取り専用イテレータを返す。
+
+
+## 例外
+投げない
+
+
+## 備考
+この関数によって返されるイテレータは、以下の特徴を持つ：
+
+- 間接参照できない
+- インクリメントすると[`cbegin()`](cbegin.md)と等値になる
+- [`cend()`](cend.md)と等値にはならない
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;forward_list&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+
+int main()
+{
+  std::forward_list&amp;lt;int&amp;gt; ls;
+
+  ls.push_front(3);
+  ls.insert_after(ls.cbefore_begin(), 1); // 先頭に挿入
+
+  std::for_each(ls.cbegin(), ls.cend(), [](int x) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+  });
+}
+```
+* cbefore_begin[color ff0000]
+* ls.push_front[link push_front.md]
+* ls.insert_after[link insert_after.md]
+* ls.cbegin()[link cbegin.md]
+* ls.cend()[link cend.md]
+
+
+### 出力
+```
+1
+3
+```
+
+## バージョン
+### 言語
+- C++11
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 4.7.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2010, 2012, 2013, 2015, 2017
+
+
+## 参照
+
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>crend -- Merge pull request #956 from cpprefjp/rename_file</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/crend.html"/>
      <id>6a60d7e9c20307a9f04a207f5551332d0fbf6fe6:reference/vector/vector/crend.md</id>
      <updated>2022-03-17T02:37:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/crend.md b/reference/vector/vector/crend.md
index 387f9d58d..6c6d3f62d 100644
--- a/reference/vector/vector/crend.md
+++ b/reference/vector/vector/crend.md
@@ -12,7 +12,7 @@ const_reverse_iterator crend() const noexcept;
 ## 概要
 先頭要素の前を指す読み取り専用逆イテレータを取得する。
 
-[`rend`](rend.md)`()`は非`const`な`vector`オブジェクトに対して`reverse_iterator`を返し、`const`な`vector`オブジェクトに対しては`const_reverse_iterator`を返すが、`cend()`は`const_reverse_iterator`を返すバージョンのみが提供されている。
+[`rend`](rend.md)`()`は非`const`な`vector`オブジェクトに対して`reverse_iterator`を返し、`const`な`vector`オブジェクトに対しては`const_reverse_iterator`を返すが、`crend()`は`const_reverse_iterator`を返すバージョンのみが提供されている。
 
 アルゴリズムにイテレータの組を渡す際、アルゴリズム内でデータの書き換えが起こらないというユーザーの意図を示す場合などに有用である。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
</feed>
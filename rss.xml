<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-05-09T02:52:16.439584</updated>
  <id>2daa1557-fad0-4154-9ce8-1b14c138239f</id>

  
    <entry>
      <title>contracts -- new: New page `detection_mode`</title>
      <link href="https://cpprefjp.github.io/reference/contracts.html"/>
      <id>91bc83ecbe2e90462c4b97fbec15b6f7db81d614:reference/contracts.md</id>
      <updated>2025-05-09T11:48:47+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;contracts&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;contracts&lt;/span&gt;&lt;span class=&#34;cpp cpp26&#34; title=&#34;C++26で追加&#34;&gt;(C++26)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;contracts&amp;gt;&lt;/code&gt;ヘッダでは、C++における契約プログラミングのサポートを提供する。&lt;/p&gt;
&lt;p&gt;契約プログラミングは、関数やクラスの前提条件、事後条件、およびアサーションを明示的に指定するプログラミング手法である。これらの条件が満たされない場合、プログラムは契約違反を報告する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/assertion_kind.html&#34;&gt;assertion_kind&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アサーションの種類 (enum)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/evaluation_semantic.html&#34;&gt;evaluation_semantic&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アサーションの評価の種類(enum)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/detection_mode.html&#34;&gt;detection_mode&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;契約違反の検出モード(enum)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/contract_violation.html&#34;&gt;contract_violation&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;契約違反に関する情報 (class)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/invoke_default_contract_violation_handler.md.nolink&#34;&gt;invoke_default_contract_violation_handler&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デフォルトcontract_violationハンドラー&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++26&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../lang/future/contract-based_programming.html&#34;&gt;契約に基づくプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../lang/cpp26/contracts.html&#34;&gt;契約プログラミング&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0542r5.html&#34; target=&#34;_blank&#34;&gt;P0542R5 Support for contract based programming in C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>detection_mode -- new: New page `detection_mode`</title>
      <link href="https://cpprefjp.github.io/reference/contracts/detection_mode.html"/>
      <id>91bc83ecbe2e90462c4b97fbec15b6f7db81d614:reference/contracts/detection_mode.md</id>
      <updated>2025-05-09T11:48:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/contracts/detection_mode.md b/reference/contracts/detection_mode.md
new file mode 100644
index 000000000..6e3c9ecc0
--- /dev/null
+++ b/reference/contracts/detection_mode.md
@@ -0,0 +1,41 @@
+# detection_mode
+* contracts[meta header]
+* std::contracts[meta namespace]
+* enum[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::contracts {
+  enum class detection_mode : unspecified {
+    predicate_false = 1,
+    evaluation_exception = 2
+  }
+}
+```
+
+## 概要
+契約違反がどのような仕組みでその違反が認識されたかを表す列挙型。
+
+### 各列挙子の意味
+| 列挙子 | 値 | 意味 |
+|--------|-----|------|
+| predicate_false | 1 | 契約の述語が評価され、falseを返す、もしくは評価をするとfalseを返す |
+| evaluation_exception | 2 | 評価中に例外が投げられ、キャッチされずに逸脱した |
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ?
+- [GCC](/implementation.md#gcc): ?
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): ?
+
+## 関連項目
+- [契約に基づくプログラミング](/lang/future/contract-based_programming.md)
+- [契約プログラミング](/lang/cpp26/contracts.md)
+
+## 参照
+- [P0542R5 Support for contract based programming in C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0542r5.html)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>execution -- execution: read_env (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>b8c7c50fec35db39373dc7b8e006cf05362ce622:reference/execution/execution.md</id>
      <updated>2025-05-08T17:49:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index 631483cb2..3bdb0796d 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -88,7 +88,7 @@ namespace std::execution {
 | [`execution::value_types_of_t`](execution/value_types_of_t.md) | Senderの値完了シグネチャ集合から指定操作で型を生成 (alias template) | C++26 |
 | [`execution::error_types_of_t`](execution/error_types_of_t.md) | Senderのエラー完了シグネチャ集合から指定操作で型を生成 (alias template) | C++26 |
 | [`execution::sends_stopped`](execution/sends_stopped.md) | Senderが停止完了を送信しうるか否か (variable template) | C++26 |
-| [`execution::tag_of_t`](execution/tag_of_t.md) | Senderアルゴリズムタグを取得 (alias template) | C++26 |
+| [`execution::tag_of_t`](execution/tag_of_t.md) | Senderアルゴリズムタグ型を取得 (alias template) | C++26 |
 | [`execution::transform_sender`](execution/transform_sender.md) | Senderを変換 (function template) | C++26 |
 | [`execution::transform_env`](execution/transform_env.md) | 環境を変換 (function template) | C++26 |
 | [`execution::apply_sender`](execution/apply_sender.md) | Senderアルゴリズムを適用 (function template) | C++26 |
@@ -102,7 +102,7 @@ namespace std::execution {
 | [`execution::just`](execution/just.md) | 値を送信するSender (customization point object) | C++26 |
 | [`execution::just_error`](execution/just_error.md.nolink) | エラーを送信するSender (customization point object) | C++26 |
 | [`execution::just_stopped`](execution/just_stopped.md.nolink) | 停止を送信するSender (customization point object) | C++26 |
-| [`execution::read_env`](execution/read_env.md.nolink) | Receiver環境から構築されるSender (customization point object) | C++26 |
+| [`execution::read_env`](execution/read_env.md) | Receiver環境からクエリオブジェクトで値を読み取るSender (customization point object) | C++26 |
 | [`execution::schedule`](execution/schedule.md) | Scheduler上で実行されるSender (customization point object) | C++26 |
 | [`execution::schedule_result_t`](execution/schedule_result_t.md) | [`schedule`](execution/schedule.md)結果型を取得 (alias template) | C++26 |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>read_env -- execution: read_env (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/read_env.html"/>
      <id>b8c7c50fec35db39373dc7b8e006cf05362ce622:reference/execution/execution/read_env.md</id>
      <updated>2025-05-08T17:49:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/read_env.md b/reference/execution/execution/read_env.md
new file mode 100644
index 000000000..41e98e7f8
--- /dev/null
+++ b/reference/execution/execution/read_env.md
@@ -0,0 +1,94 @@
+# read_env
+* execution[meta header]
+* cpo[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  inline constexpr unspecified read_env{};
+}
+```
+* unspecified[italic]
+
+## 概要
+`read_env`は、非同期動作の[開始(start)](start.md)時に接続先[Receiver](receiver.md)の[環境](../queryable.md)に対して[クエリオブジェクト](../queryable.md)で問い合わせ、読み取った値を[値完了関数](set_value.md)で送信するSenderファクトリである。
+
+クエリオブジェクトによるReceiver環境への問い合わせは`read_env`[Sender](sender.md)の構築時ではなく、Receiverと接続されたのち非同期動作が開始されるタイミングまで遅延される。
+[`let_value`](let_value.md.nolink)Senderアダプタと組み合わせたり、[Sender Awaitableなコルーチン](with_awaitable_senders.md.nolink)での`co_await`式によって、[Scheduler](get_scheduler.md)や[停止トークン](../get_stop_token.md)を読み取ることができる。
+
+
+## 効果
+[クエリオブジェクト](../queryable.md)`q`に対して、呼び出し式`read_env(q)`は式[`make-sender`](make-sender.md)`(read_env, q)`と等価。
+
+
+### Senderアルゴリズムタグ
+Senderアルゴリズム動作説明用のクラステンプレート`impls-for`に対して、下記の特殊化が定義される。
+
+```cpp
+namespace std::execution {
+  template&amp;lt;&amp;gt;
+  struct impls-for&amp;lt;decayed-typeof&amp;lt;read_env&amp;gt;&amp;gt; : default-impls {
+    static constexpr auto start =
+      [](auto query, auto&amp;amp; rcvr) noexcept -&amp;gt; void {
+        TRY-SET-VALUE(rcvr, query(get_env(rcvr)));
+      };
+  };
+}
+```
+* decayed-typeof[link decayed-typeof.md.nolink]
+* impls-for[link impls-for.md]
+* default-impls[link impls-for.md]
+* get_env[link get_env.md]
+
+
+## 備考
+`read_env`の[Senderアルゴリズムタグ型](tag_of_t.md)は未規定とされる。
+
+
+## 例
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  ex::sender auto sndr = ex::read_env(ex::get_scheduler)
+    | ex::let_value([](auto sch) -&amp;gt; ex::sender auto {
+        // sch := sync_wait内部のScheduler
+        return ex::starts_on(sch, std::just(42));
+      });
+  auto [val] = std::this_thread::sync_wait(sndr).value();
+  std::println(&amp;#34;{}&amp;#34;, val);
+}
+```
+* ex::read_env[color ff0000]
+* ex::sender[link sender.md]
+* ex::get_scheduler[link get_scheduler.md]
+* ex::starts_on[link starts_on.md.nolink]
+* std::this_thread::sync_wait[link ../this_thread/sync_wait.md]
+
+### 出力
+```
+42
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::get_env`](read_env.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contracts -- fix: Fixed compiler version</title>
      <link href="https://cpprefjp.github.io/reference/contracts.html"/>
      <id>f9534c290550c587c3bc780954a09645a5baa531:reference/contracts.md</id>
      <updated>2025-05-08T13:21:32+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;contracts&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;contracts&lt;/span&gt;&lt;span class=&#34;cpp cpp26&#34; title=&#34;C++26で追加&#34;&gt;(C++26)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;contracts&amp;gt;&lt;/code&gt;ヘッダでは、C++における契約プログラミングのサポートを提供する。&lt;/p&gt;
&lt;p&gt;契約プログラミングは、関数やクラスの前提条件、事後条件、およびアサーションを明示的に指定するプログラミング手法である。これらの条件が満たされない場合、プログラムは契約違反を報告する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/assertion_kind.html&#34;&gt;assertion_kind&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アサーションの種類 (enum)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/evaluation_semantic.html&#34;&gt;evaluation_semantic&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アサーションの評価の種類(enum)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/detection_mode.md.nolink&#34;&gt;detection_mode&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;契約違反の検出モード(enum)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/contract_violation.html&#34;&gt;contract_violation&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;契約違反に関する情報 (class)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/invoke_default_contract_violation_handler.md.nolink&#34;&gt;invoke_default_contract_violation_handler&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デフォルトcontract_violationハンドラー&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++26&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../lang/future/contract-based_programming.html&#34;&gt;契約に基づくプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../lang/cpp26/contracts.html&#34;&gt;契約プログラミング&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0542r5.html&#34; target=&#34;_blank&#34;&gt;P0542R5 Support for contract based programming in C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assertion_kind -- fix: Fixed compiler version</title>
      <link href="https://cpprefjp.github.io/reference/contracts/assertion_kind.html"/>
      <id>f9534c290550c587c3bc780954a09645a5baa531:reference/contracts/assertion_kind.md</id>
      <updated>2025-05-08T13:21:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/contracts/assertion_kind.md b/reference/contracts/assertion_kind.md
index 4d03f0528..4388063e7 100644
--- a/reference/contracts/assertion_kind.md
+++ b/reference/contracts/assertion_kind.md
@@ -24,10 +24,10 @@ namespace std::contracts {
 - C++26
 
 ### 処理系
-- [Clang](/implementation.md#clang): 未実装
-- [GCC](/implementation.md#gcc): 未実装
+- [Clang](/implementation.md#clang): ?
+- [GCC](/implementation.md#gcc): ?
 - [ICC](/implementation.md#icc): ?
-- [Visual C++](/implementation.md#visual_cpp): 未実装
+- [Visual C++](/implementation.md#visual_cpp): ?
 
 ## 関連項目
 - [契約に基づくプログラミング](/lang/future/contract-based_programming.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>evaluation_semantic -- fix: Fixed compiler version</title>
      <link href="https://cpprefjp.github.io/reference/contracts/evaluation_semantic.html"/>
      <id>f9534c290550c587c3bc780954a09645a5baa531:reference/contracts/evaluation_semantic.md</id>
      <updated>2025-05-08T13:21:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/contracts/evaluation_semantic.md b/reference/contracts/evaluation_semantic.md
index 9fe587cbf..28d381cc2 100644
--- a/reference/contracts/evaluation_semantic.md
+++ b/reference/contracts/evaluation_semantic.md
@@ -24,10 +24,10 @@ namespace std::contracts {
 - C++26
 
 ### 処理系
-- [Clang](/implementation.md#clang): 未実装
-- [GCC](/implementation.md#gcc): 未実装
+- [Clang](/implementation.md#clang): ?
+- [GCC](/implementation.md#gcc): ?
 - [ICC](/implementation.md#icc): ?
-- [Visual C++](/implementation.md#visual_cpp): 未実装
+- [Visual C++](/implementation.md#visual_cpp): ?
 
 ## 関連項目
 - [契約に基づくプログラミング](/lang/future/contract-based_programming.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contracts -- new: Added page `evaluation_semantic`</title>
      <link href="https://cpprefjp.github.io/reference/contracts.html"/>
      <id>7d38e6e917eb96fb94d155a302c3786df9857833:reference/contracts.md</id>
      <updated>2025-05-08T13:20:36+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;contracts&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;contracts&lt;/span&gt;&lt;span class=&#34;cpp cpp26&#34; title=&#34;C++26で追加&#34;&gt;(C++26)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;contracts&amp;gt;&lt;/code&gt;ヘッダでは、C++における契約プログラミングのサポートを提供する。&lt;/p&gt;
&lt;p&gt;契約プログラミングは、関数やクラスの前提条件、事後条件、およびアサーションを明示的に指定するプログラミング手法である。これらの条件が満たされない場合、プログラムは契約違反を報告する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/assertion_kind.html&#34;&gt;assertion_kind&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アサーションの種類 (enum)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/evaluation_semantic.html&#34;&gt;evaluation_semantic&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アサーションの評価の種類(enum)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/detection_mode.md.nolink&#34;&gt;detection_mode&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;契約違反の検出モード(enum)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/contract_violation.html&#34;&gt;contract_violation&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;契約違反に関する情報 (class)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/invoke_default_contract_violation_handler.md.nolink&#34;&gt;invoke_default_contract_violation_handler&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デフォルトcontract_violationハンドラー&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++26&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 未実装&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: 未実装&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 未実装&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../lang/future/contract-based_programming.html&#34;&gt;契約に基づくプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../lang/cpp26/contracts.html&#34;&gt;契約プログラミング&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0542r5.html&#34; target=&#34;_blank&#34;&gt;P0542R5 Support for contract based programming in C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>evaluation_semantic -- new: Added page `evaluation_semantic`</title>
      <link href="https://cpprefjp.github.io/reference/contracts/evaluation_semantic.html"/>
      <id>7d38e6e917eb96fb94d155a302c3786df9857833:reference/contracts/evaluation_semantic.md</id>
      <updated>2025-05-08T13:20:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/contracts/evaluation_semantic.md b/reference/contracts/evaluation_semantic.md
new file mode 100644
index 000000000..9fe587cbf
--- /dev/null
+++ b/reference/contracts/evaluation_semantic.md
@@ -0,0 +1,37 @@
+# evaluation_semantic
+* contracts[meta header]
+* std::contracts[meta namespace]
+* enum[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::contracts {
+  enum class evaluation_semantic : unspecified {
+    ignore = 1,
+    observe = 2,
+    enforce = 3,
+    quick_enforce = 4 // ,
+    // assume = 5 &amp;lt;-- 将来追加予定
+  }
+}
+```
+
+## 概要
+契約違反をどのように評価するかを表す列挙型。
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): 未実装
+- [GCC](/implementation.md#gcc): 未実装
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 未実装
+
+## 関連項目
+- [契約に基づくプログラミング](/lang/future/contract-based_programming.md)
+- [契約プログラミング](/lang/cpp26/contracts.md)
+
+## 参照
+- [P0542R5 Support for contract based programming in C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0542r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contracts -- fix: Removed nolink</title>
      <link href="https://cpprefjp.github.io/reference/contracts.html"/>
      <id>d18dc841a75a7c62798b9ff1523a8532684e1e50:reference/contracts.md</id>
      <updated>2025-05-08T13:13:08+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;contracts&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;contracts&lt;/span&gt;&lt;span class=&#34;cpp cpp26&#34; title=&#34;C++26で追加&#34;&gt;(C++26)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;contracts&amp;gt;&lt;/code&gt;ヘッダでは、C++における契約プログラミングのサポートを提供する。&lt;/p&gt;
&lt;p&gt;契約プログラミングは、関数やクラスの前提条件、事後条件、およびアサーションを明示的に指定するプログラミング手法である。これらの条件が満たされない場合、プログラムは契約違反を報告する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/assertion_kind.html&#34;&gt;assertion_kind&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アサーションの種類 (enum)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/evaluation_semantic.md.nolink&#34;&gt;evaluation_semantic&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アサーションの評価の種類(enum)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/detection_mode.md.nolink&#34;&gt;detection_mode&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;契約違反の検出モード(enum)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/contract_violation.html&#34;&gt;contract_violation&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;契約違反に関する情報 (class)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/invoke_default_contract_violation_handler.md.nolink&#34;&gt;invoke_default_contract_violation_handler&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デフォルトcontract_violationハンドラー&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++26&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 未実装&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: 未実装&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 未実装&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../lang/future/contract-based_programming.html&#34;&gt;契約に基づくプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../lang/cpp26/contracts.html&#34;&gt;契約プログラミング&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0542r5.html&#34; target=&#34;_blank&#34;&gt;P0542R5 Support for contract based programming in C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
</feed>